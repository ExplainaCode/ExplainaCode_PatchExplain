record_number,buggy_code,fixed_code,code_similarity
169001,"@Override public PreparedStatement prepareQueryStatement(String sql,final boolean isCallable,final ScrollMode scrollMode){
  checkAutoGeneratedKeysSupportEnabled();
  jdbcCoordinator.executeBatch();
  PreparedStatement ps=new QueryStatementPreparationTemplate(sql){
    public PreparedStatement doPrepare() throws SQLException {
      if (generated) {
        return connection().prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
      }
 else {
        String[] columnNames=new String[columns.length];
        for (int i=0; i < columns.length; i++) {
          columnNames[i]=columns[i][0];
        }
        return connection().prepareStatement(sql,columnNames);
      }
    }
  }
.prepareStatement();
  ps=(PreparedStatement)Proxy.newProxyInstance(ps.getClass().getClassLoader(),new Class[]{PreparedStatement.class},new PreparedStatementInvocationHandler(ps,generated,columns,returningResult));
  jdbcCoordinator.registerLastQuery(ps);
  return ps;
}","@Override public PreparedStatement prepareQueryStatement(String sql,final boolean isCallable,final ScrollMode scrollMode){
  checkAutoGeneratedKeysSupportEnabled();
  jdbcCoordinator.executeBatch();
  PreparedStatement ps=new QueryStatementPreparationTemplate(sql){
    public PreparedStatement doPrepare() throws SQLException {
      if (generated) {
        return connection().prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
      }
 else {
        String[] columnNames=new String[columns.length];
        for (int i=0; i < columns.length; i++) {
          columnNames[i]=columns[i][0];
        }
        return connection().prepareStatement(sql,columnNames);
      }
    }
  }
.prepareStatement();
  ps=(PreparedStatement)Proxy.newProxyInstance(ps.getClass().getClassLoader(),new Class[]{PreparedStatement.class},new PreparedStatementInvocationHandler(ps,columns,returningResult));
  jdbcCoordinator.registerLastQuery(ps);
  return ps;
}",0.994753410283316
169002,"public TransactionCoordinatorInvocationHandler(TransactionCoordinator delegate,Object jdbcCoordinatorProxy){
  this.delegate=delegate;
  this.jdbcCoordinatorProxy=jdbcCoordinatorProxy;
}","public TransactionCoordinatorInvocationHandler(Object delegate,Object jdbcCoordinatorProxy){
  this.delegate=delegate;
  this.jdbcCoordinatorProxy=jdbcCoordinatorProxy;
}",0.9325842696629212
169003,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  if (""String_Node_Str"".equals(method.getName()) && method.getParameterCount() == 0) {
    returningResult.setUpdateCount(delegate.executeUpdate());
    ResultSet rs=delegate.getGeneratedKeys();
    if (generated) {
      return Proxy.newProxyInstance(rs.getClass().getClassLoader(),new Class[]{ResultSet.class},new ResultSetInvocationHandler(rs,aliasIndex));
    }
    return rs;
  }
  return method.invoke(delegate,args);
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  if (""String_Node_Str"".equals(method.getName()) && method.getParameterTypes().length == 0) {
    returningResult.setUpdateCount(delegate.executeUpdate());
    ResultSet rs=delegate.getGeneratedKeys();
    if (generated) {
      return Proxy.newProxyInstance(rs.getClass().getClassLoader(),new Class[]{ResultSet.class},new ResultSetInvocationHandler(rs,aliasIndex));
    }
    return rs;
  }
  return method.invoke(delegate,args);
}",0.9798270893371758
169004,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  Method indexMethod;
  if (method.getParameterCount() == 1 && (indexMethod=methods.get(method.getName())) != null) {
    return indexMethod.invoke(delegate,aliasIndex.get(args[0]));
  }
 else   if (method.getParameterCount() > 1) {
    if ((indexMethod=methods.get(method.getName() + method.getParameterCount())) != null) {
      Object[] newArgs=new Object[args.length];
      System.arraycopy(args,0,newArgs,0,args.length);
      newArgs[0]=aliasIndex.get(args[0]);
      return indexMethod.invoke(delegate,newArgs);
    }
 else     if (""String_Node_Str"".equals(method.getName())) {
      Object[] newArgs=new Object[args.length];
      System.arraycopy(args,0,newArgs,0,args.length);
      newArgs[0]=aliasIndex.get(args[0]);
      if (method.getParameterTypes()[1].equals(Class.class)) {
        return getObjectForClassMethod.invoke(delegate,newArgs);
      }
 else {
        return getObjectForMapMethod.invoke(delegate,newArgs);
      }
    }
  }
  return method.invoke(delegate,args);
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  Method indexMethod;
  int parameterCount=method.getParameterTypes().length;
  if (parameterCount == 1 && (indexMethod=methods.get(method.getName())) != null) {
    return indexMethod.invoke(delegate,aliasIndex.get(args[0]));
  }
 else   if (parameterCount > 1) {
    if ((indexMethod=methods.get(method.getName() + parameterCount)) != null) {
      Object[] newArgs=new Object[args.length];
      System.arraycopy(args,0,newArgs,0,args.length);
      newArgs[0]=aliasIndex.get(args[0]);
      return indexMethod.invoke(delegate,newArgs);
    }
 else     if (""String_Node_Str"".equals(method.getName())) {
      Object[] newArgs=new Object[args.length];
      System.arraycopy(args,0,newArgs,0,args.length);
      newArgs[0]=aliasIndex.get(args[0]);
      if (method.getParameterTypes()[1].equals(Class.class)) {
        return getObjectForClassMethod.invoke(delegate,newArgs);
      }
 else {
        return getObjectForMapMethod.invoke(delegate,newArgs);
      }
    }
  }
  return method.invoke(delegate,args);
}",0.9553327256153143
169005,"@Test @Category({NoDatanucleus.class}) public void testModifyAndUpdateRollbacked(){
  CriteriaBuilder<Document> criteria=cbf.create(em,Document.class,""String_Node_Str"").orderByAsc(""String_Node_Str"");
  CriteriaBuilder<T> cb=evm.applySetting(EntityViewSetting.create(viewType),criteria);
  List<T> results=cb.getResultList();
  T docView=results.get(0);
  EntityTransaction tx=em.getTransaction();
  try {
    tx.begin();
    docView.setName(""String_Node_Str"");
    evm.update(em,docView);
    em.flush();
    tx.rollback();
    docView.setName(""String_Node_Str"");
    docView.setLastModified(new Date());
    tx.begin();
    evm.update(em,docView);
    em.flush();
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    throw new RuntimeException(e);
  }
  em.clear();
  doc=em.find(Document.class,doc.getId());
  assertEquals(doc.getName(),docView.getName());
  assertEquals(doc.getLastModified().getTime(),docView.getLastModified().getTime());
}","@Test @Category({NoDatanucleus.class}) public void testModifyAndUpdateRollbacked(){
  CriteriaBuilder<Document> criteria=cbf.create(em,Document.class,""String_Node_Str"").orderByAsc(""String_Node_Str"");
  CriteriaBuilder<T> cb=evm.applySetting(EntityViewSetting.create(viewType),criteria);
  List<T> results=cb.getResultList();
  T docView=results.get(0);
  EntityTransaction tx=em.getTransaction();
  try {
    tx.begin();
    docView.setName(""String_Node_Str"");
    evm.update(em,docView);
    em.flush();
    tx.rollback();
    docView.setName(""String_Node_Str"");
    Date date=new Date();
    date.setTime(1000 * (date.getTime() / 1000));
    docView.setLastModified(date);
    tx.begin();
    evm.update(em,docView);
    em.flush();
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    throw new RuntimeException(e);
  }
  em.clear();
  doc=em.find(Document.class,doc.getId());
  assertEquals(doc.getName(),docView.getName());
  assertEquals(doc.getLastModified().getTime(),docView.getLastModified().getTime());
}",0.9548192771084336
169006,"protected Set<String> getRegisteredFunctions(){
  return new HashSet<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
}","protected Set<String> getRegisteredFunctions(){
  return new HashSet<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
}",0.852054794520548
169007,"@Override protected Properties applyProperties(Properties properties){
  properties.put(""String_Node_Str"",properties.get(""String_Node_Str""));
  properties.put(""String_Node_Str"",properties.get(""String_Node_Str""));
  properties.put(""String_Node_Str"",properties.get(""String_Node_Str""));
  properties.put(""String_Node_Str"",properties.get(""String_Node_Str""));
  if (System.getProperty(""String_Node_Str"") != null) {
    properties.put(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  }
 else   if (properties.get(""String_Node_Str"").toString().contains(""String_Node_Str"")) {
    properties.put(""String_Node_Str"",SaneMySQLDialect.class.getName());
  }
  if (isHibernate42()) {
    properties.put(""String_Node_Str"",""String_Node_Str"");
  }
  return properties;
}","@Override protected Properties applyProperties(Properties properties){
  if (System.getProperty(""String_Node_Str"") != null) {
    properties.put(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  }
 else   if (properties.get(""String_Node_Str"").toString().contains(""String_Node_Str"")) {
    properties.put(""String_Node_Str"",SaneMySQLDialect.class.getName());
  }
  properties.remove(""String_Node_Str"");
  properties.put(""String_Node_Str"",""String_Node_Str"");
  if (isHibernate42()) {
    properties.put(""String_Node_Str"",properties.get(""String_Node_Str""));
    properties.put(""String_Node_Str"",properties.get(""String_Node_Str""));
    properties.put(""String_Node_Str"",properties.get(""String_Node_Str""));
    properties.put(""String_Node_Str"",properties.get(""String_Node_Str""));
    properties.put(""String_Node_Str"",""String_Node_Str"");
  }
  return properties;
}",0.5880908532842235
169008,"@SuppressWarnings(""String_Node_Str"") private <T>Class<? extends T> getProxy(ViewType<T> viewType,boolean unsafe){
  Class<T> clazz=viewType.getJavaType();
  ConcurrentMap<Class<?>,Class<?>> classes=unsafe ? unsafeProxyClasses : proxyClasses;
  Class<? extends T> proxyClass=(Class<? extends T>)classes.get(clazz);
  if (proxyClass == null) {
synchronized (proxyLock) {
      proxyClass=(Class<? extends T>)classes.get(clazz);
      if (proxyClass == null) {
        proxyClass=createProxyClass(viewType,unsafe);
        proxyClasses.put(clazz,proxyClass);
      }
    }
  }
  return proxyClass;
}","@SuppressWarnings(""String_Node_Str"") private <T>Class<? extends T> getProxy(ViewType<T> viewType,boolean unsafe){
  Class<T> clazz=viewType.getJavaType();
  ConcurrentMap<Class<?>,Class<?>> classes=unsafe ? unsafeProxyClasses : proxyClasses;
  Class<? extends T> proxyClass=(Class<? extends T>)classes.get(clazz);
  if (proxyClass == null) {
synchronized (proxyLock) {
      proxyClass=(Class<? extends T>)classes.get(clazz);
      if (proxyClass == null) {
        proxyClass=createProxyClass(viewType,unsafe);
        classes.put(clazz,proxyClass);
      }
    }
  }
  return proxyClass;
}",0.9941027801179444
169009,"public String getKey(){
  return key;
}","@Column(name=""String_Node_Str"",length=100) public String getKey(){
  return key;
}",0.6446280991735537
169010,"public String getKey(){
  return key;
}","@Column(name=""String_Node_Str"",length=100) public String getKey(){
  return key;
}",0.6446280991735537
169011,"@SuppressWarnings(""String_Node_Str"") private ViewTypeObjectBuilderTemplate(String aliasPrefix,List<String> mappingPrefix,String idPrefix,int[] idPositions,int tupleOffset,Metamodel metamodel,EntityViewManagerImpl evm,ExpressionFactory ef,ViewType<T> viewType,MappingConstructor<T> mappingConstructor,ProxyFactory proxyFactory){
  if (mappingConstructor == null) {
    if (viewType.getConstructors().size() > 1) {
      throw new IllegalArgumentException(""String_Node_Str"" + viewType.getJavaType().getName() + ""String_Node_Str"");
    }
 else     if (viewType.getConstructors().size() == 1) {
      mappingConstructor=(MappingConstructor<T>)viewType.getConstructors().toArray()[0];
    }
  }
  this.aliasPrefix=aliasPrefix;
  this.mappingPrefix=mappingPrefix;
  this.idPrefix=idPrefix;
  this.idPositions=idPositions;
  this.tupleOffset=tupleOffset;
  this.metamodel=metamodel;
  this.evm=evm;
  this.ef=ef;
  this.proxyFactory=proxyFactory;
  Set<MethodAttribute<? super T,?>> attributeSet=viewType.getAttributes();
  attributeSet.remove(viewType.getIdAttribute());
  MethodAttribute<?,?>[] attributes=attributeSet.toArray(new MethodAttribute<?,?>[attributeSet.size()]);
  ParameterAttribute<?,?>[] parameterAttributes;
  if (mappingConstructor == null) {
    parameterAttributes=new ParameterAttribute<?,?>[0];
  }
 else {
    List<ParameterAttribute<? super T,?>> parameterAttributeList=mappingConstructor.getParameterAttributes();
    parameterAttributes=parameterAttributeList.toArray(new ParameterAttribute<?,?>[parameterAttributeList.size()]);
  }
  int length=1 + attributes.length + parameterAttributes.length;
  EntityType<?> entityType=metamodel.entity(viewType.getEntityClass());
  javax.persistence.metamodel.SingularAttribute<?,?> jpaIdAttr=entityType.getId(entityType.getIdType().getJavaType());
  Class<?> idAttributeType;
  if (jpaIdAttr.getJavaMember() instanceof Field) {
    idAttributeType=ReflectionUtils.getResolvedFieldType(viewType.getEntityClass(),(Field)jpaIdAttr.getJavaMember());
  }
 else {
    idAttributeType=ReflectionUtils.getResolvedMethodReturnType(viewType.getEntityClass(),(Method)jpaIdAttr.getJavaMember());
  }
  if (idAttributeType == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + jpaIdAttr.getName() + ""String_Node_Str""+ viewType.getEntityClass().getName()+ ""String_Node_Str"");
  }
  String idAttributeName=jpaIdAttr.getName();
  MethodAttribute<?,?> idAttribute=viewType.getIdAttribute();
  MappingAttribute<?,?> idMappingAttribute=(MappingAttribute<?,?>)idAttribute;
  if (!idAttributeName.equals(idMappingAttribute.getMapping())) {
    throw new IllegalArgumentException(""String_Node_Str"" + idMappingAttribute.getMapping() + ""String_Node_Str""+ viewType.getJavaType().getName()+ ""String_Node_Str""+ idAttributeName+ ""String_Node_Str"");
  }
  String idMapping=idPrefix == null ? idAttributeName : idPrefix + ""String_Node_Str"" + idAttributeName;
  List<Object> mappingList=new ArrayList<Object>(length);
  List<String> parameterMappingList=new ArrayList<String>(length);
  Class<?>[] parameterTypes=new Class<?>[length];
  boolean[] featuresFound=new boolean[3];
  parameterTypes[0]=idAttributeType;
  mappingList.add(0,new Object[]{idMapping,getAlias(aliasPrefix,idAttribute)});
  parameterMappingList.add(0,null);
  for (int i=0; i < attributes.length; i++) {
    parameterTypes[i + 1]=attributes[i].getJavaType();
  }
  for (int i=0; i < parameterAttributes.length; i++) {
    parameterTypes[i + attributes.length + 1]=parameterAttributes[i].getJavaType();
  }
  this.objectInstantiator=new UnsafeInstantiator<T>(mappingConstructor,proxyFactory,viewType,parameterTypes);
  for (int i=0; i < attributes.length; i++) {
    applyMapping(attributes[i],mappingList,parameterMappingList,featuresFound);
  }
  for (int i=0; i < parameterAttributes.length; i++) {
    applyMapping(parameterAttributes[i],mappingList,parameterMappingList,featuresFound);
  }
  this.hasParameters=featuresFound[0];
  this.hasIndexedCollections=featuresFound[1];
  this.hasSubviews=featuresFound[2];
  this.effectiveTupleSize=length;
  this.mappers=getMappers(mappingList);
  this.parameterMapper=new TupleParameterMapper(parameterMappingList,tupleOffset);
}","@SuppressWarnings(""String_Node_Str"") private ViewTypeObjectBuilderTemplate(String aliasPrefix,List<String> mappingPrefix,String idPrefix,int[] idPositions,int tupleOffset,Metamodel metamodel,EntityViewManagerImpl evm,ExpressionFactory ef,ViewType<T> viewType,MappingConstructor<T> mappingConstructor,ProxyFactory proxyFactory){
  if (mappingConstructor == null) {
    if (viewType.getConstructors().size() > 1) {
      throw new IllegalArgumentException(""String_Node_Str"" + viewType.getJavaType().getName() + ""String_Node_Str"");
    }
 else     if (viewType.getConstructors().size() == 1) {
      mappingConstructor=(MappingConstructor<T>)viewType.getConstructors().toArray()[0];
    }
  }
  this.aliasPrefix=aliasPrefix;
  this.mappingPrefix=mappingPrefix;
  this.idPrefix=idPrefix;
  this.idPositions=idPositions;
  this.tupleOffset=tupleOffset;
  this.metamodel=metamodel;
  this.evm=evm;
  this.ef=ef;
  this.proxyFactory=proxyFactory;
  Set<MethodAttribute<? super T,?>> attributeSet=viewType.getAttributes();
  attributeSet.remove(viewType.getIdAttribute());
  MethodAttribute<?,?>[] attributes=attributeSet.toArray(new MethodAttribute<?,?>[attributeSet.size()]);
  ParameterAttribute<?,?>[] parameterAttributes;
  if (mappingConstructor == null) {
    parameterAttributes=new ParameterAttribute<?,?>[0];
  }
 else {
    List<ParameterAttribute<? super T,?>> parameterAttributeList=mappingConstructor.getParameterAttributes();
    parameterAttributes=parameterAttributeList.toArray(new ParameterAttribute<?,?>[parameterAttributeList.size()]);
  }
  int length=1 + attributes.length + parameterAttributes.length;
  EntityType<?> entityType=metamodel.entity(viewType.getEntityClass());
  javax.persistence.metamodel.SingularAttribute<?,?> jpaIdAttr=entityType.getId(entityType.getIdType().getJavaType());
  Class<?> idAttributeType;
  if (jpaIdAttr.getJavaMember() instanceof Field) {
    idAttributeType=ReflectionUtils.getResolvedFieldType(viewType.getEntityClass(),(Field)jpaIdAttr.getJavaMember());
  }
 else {
    idAttributeType=ReflectionUtils.getResolvedMethodReturnType(viewType.getEntityClass(),(Method)jpaIdAttr.getJavaMember());
  }
  if (idAttributeType == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + jpaIdAttr.getName() + ""String_Node_Str""+ viewType.getEntityClass().getName()+ ""String_Node_Str"");
  }
  String idAttributeName=jpaIdAttr.getName();
  MethodAttribute<?,?> idAttribute=viewType.getIdAttribute();
  MappingAttribute<?,?> idMappingAttribute=(MappingAttribute<?,?>)idAttribute;
  if (!idAttributeName.equals(idMappingAttribute.getMapping())) {
    throw new IllegalArgumentException(""String_Node_Str"" + idMappingAttribute.getMapping() + ""String_Node_Str""+ viewType.getJavaType().getName()+ ""String_Node_Str""+ idAttributeName+ ""String_Node_Str"");
  }
  String idMapping=idPrefix == null ? idAttributeName : idPrefix + ""String_Node_Str"" + idAttributeName;
  List<Object> mappingList=new ArrayList<Object>(length);
  List<String> parameterMappingList=new ArrayList<String>(length);
  Class<?>[] parameterTypes=new Class<?>[length];
  boolean[] featuresFound=new boolean[3];
  parameterTypes[0]=idAttributeType;
  mappingList.add(0,new Object[]{idMapping,getAlias(aliasPrefix,idAttribute)});
  parameterMappingList.add(0,null);
  for (int i=0; i < attributes.length; i++) {
    parameterTypes[i + 1]=attributes[i].getJavaType();
  }
  for (int i=0; i < parameterAttributes.length; i++) {
    parameterTypes[i + attributes.length + 1]=parameterAttributes[i].getJavaType();
  }
  if (viewType.getConstructors().isEmpty()) {
    this.objectInstantiator=new ReflectionInstantiator<T>(mappingConstructor,proxyFactory,viewType,parameterTypes);
  }
 else {
    this.objectInstantiator=new UnsafeInstantiator<T>(mappingConstructor,proxyFactory,viewType,parameterTypes);
  }
  for (int i=0; i < attributes.length; i++) {
    applyMapping(attributes[i],mappingList,parameterMappingList,featuresFound);
  }
  for (int i=0; i < parameterAttributes.length; i++) {
    applyMapping(parameterAttributes[i],mappingList,parameterMappingList,featuresFound);
  }
  this.hasParameters=featuresFound[0];
  this.hasIndexedCollections=featuresFound[1];
  this.hasSubviews=featuresFound[2];
  this.effectiveTupleSize=length;
  this.mappers=getMappers(mappingList);
  this.parameterMapper=new TupleParameterMapper(parameterMappingList,tupleOffset);
}",0.9776899837322798
169012,"private void addFields(CtClass newClass,CtClass cc) throws NotFoundException, CannotCompileException {
  Map<String,String> fieldClassMappings=new HashMap<String,String>();
  CtClass current=cc;
  do {
    for (    CtField field : current.getDeclaredFields()) {
      String oldClassMapping=fieldClassMappings.put(field.getName(),current.getName());
      if (oldClassMapping != null) {
        throw new IllegalArgumentException(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ oldClassMapping+ ""String_Node_Str""+ current.getName()+ ""String_Node_Str"");
      }
      newClass.addField(new CtField(field,newClass));
    }
  }
 while (!""String_Node_Str"".equals((current=current.getSuperclass()).getName()));
}","private void addFields(CtClass newClass,CtClass cc) throws NotFoundException, CannotCompileException {
  for (  CtField field : cc.getDeclaredFields()) {
    CtField newField=new CtField(field,newClass);
    int modifier=newField.getModifiers();
    modifier=modifier & ~Modifier.FINAL;
    if ((modifier & Modifier.PRIVATE) != 0) {
      modifier=modifier & ~Modifier.PRIVATE;
      modifier=modifier | Modifier.PROTECTED;
    }
    newField.setModifiers(modifier);
    newClass.addField(newField);
  }
}",0.2309582309582309
169013,"private void addMethods(CtClass newClass,CtClass cc) throws NotFoundException, CannotCompileException {
  Map<String,String> methodClassMappings=new HashMap<String,String>();
  CtClass current=cc;
  do {
    for (    CtMethod method : current.getDeclaredMethods()) {
      String name=method.getName() + Descriptor.toString(method.getSignature()) + Descriptor.of(method.getReturnType());
      String oldClassMapping=methodClassMappings.put(name,current.getName());
      if (oldClassMapping != null) {
        throw new IllegalArgumentException(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ oldClassMapping+ ""String_Node_Str""+ current.getName()+ ""String_Node_Str"");
      }
      newClass.addMethod(new CtMethod(method,newClass,null));
    }
  }
 while (!""String_Node_Str"".equals((current=current.getSuperclass()).getName()));
}","private void addMethods(CtClass newClass,CtClass cc) throws NotFoundException, CannotCompileException {
  for (  CtMethod method : cc.getDeclaredMethods()) {
    newClass.addMethod(new CtMethod(method,newClass,null));
  }
}",0.2969924812030075
169014,"private void addConstructors(CtClass newClass,CtClass cc) throws NotFoundException, CannotCompileException, BadBytecode {
  ConstPool cp=cc.getClassFile2().getConstPool();
  for (  CtConstructor constructor : cc.getDeclaredConstructors()) {
    CtConstructor newConstructor=new CtConstructor(constructor.getParameterTypes(),newClass);
    CodeAttribute codeAttribute=constructor.getMethodInfo2().getCodeAttribute();
    Bytecode newBytecode=new Bytecode(newClass.getClassFile2().getConstPool(),3,constructor.getParameterTypes().length + 1);
    CodeIterator ci=codeAttribute.iterator();
    int superConstructorIndex=ci.skipSuperConstructor();
    int superConstructorRef=ci.u16bitAt(superConstructorIndex + 1);
    String superConstructorType=cp.getMethodrefType(superConstructorRef);
    CtClass[] superConstructorArgumentTypes=Descriptor.getParameterTypes(superConstructorType,pool);
    int[] argumentPositions=new int[superConstructorArgumentTypes.length];
    final int offset=(constructor.getParameterTypes().length - argumentPositions.length) + 1;
    for (int i=0; i < argumentPositions.length; i++) {
      argumentPositions[i]=offset + i;
    }
    newBytecode.addAload(0);
    newBytecode.addInvokespecial(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    copyBytecode(newClass,newBytecode,cp,ci);
    int newStartIndex=newBytecode.getSize();
    addConstructorCode(newClass,newBytecode,cc.getSuperclass(),superConstructorArgumentTypes,argumentPositions);
    newBytecode.add(Bytecode.RETURN);
    newConstructor.getMethodInfo2().setCodeAttribute(newBytecode.toCodeAttribute());
    newClass.addConstructor(newConstructor);
  }
}","private void addConstructors(CtClass newClass,CtClass cc) throws NotFoundException, CannotCompileException, BadBytecode {
  ConstPool cp=cc.getClassFile2().getConstPool();
  for (  CtConstructor constructor : cc.getDeclaredConstructors()) {
    CtConstructor newConstructor=new CtConstructor(constructor.getParameterTypes(),newClass);
    CodeAttribute codeAttribute=constructor.getMethodInfo2().getCodeAttribute();
    Bytecode newBytecode=new Bytecode(newClass.getClassFile2().getConstPool(),3,constructor.getParameterTypes().length + 1);
    CodeIterator ci=codeAttribute.iterator();
    int superConstructorIndex=ci.skipSuperConstructor();
    int superConstructorRef=ci.u16bitAt(superConstructorIndex + 1);
    String superConstructorType=cp.getMethodrefType(superConstructorRef);
    CtClass[] superConstructorArgumentTypes=Descriptor.getParameterTypes(superConstructorType,pool);
    int[] argumentPositions=new int[superConstructorArgumentTypes.length];
    final int offset=(constructor.getParameterTypes().length - argumentPositions.length) + 1;
    for (int i=0; i < argumentPositions.length; i++) {
      argumentPositions[i]=offset + i;
    }
    newBytecode.addAload(0);
    newBytecode.addInvokespecial(newClass.getSuperclass(),""String_Node_Str"",""String_Node_Str"");
    copyBytecode(newClass,newBytecode,cp,ci);
    int newStartIndex=newBytecode.getSize();
    addConstructorCode(newClass,newBytecode,cc.getSuperclass(),superConstructorArgumentTypes,argumentPositions);
    newBytecode.add(Bytecode.RETURN);
    newConstructor.getMethodInfo2().setCodeAttribute(newBytecode.toCodeAttribute());
    newClass.addConstructor(newConstructor);
  }
}",0.9882139619220308
169015,"@SuppressWarnings(""String_Node_Str"") private <T>Class<? extends T> createUnsafeProxyClass(ViewType<T> viewType,Class<?> proxyClass){
  CtClass cc=pool.makeClass(proxyClass.getName() + ""String_Node_Str"");
  CtClass superCc;
  CtClass proxyCc;
  ClassPath classPath=new ClassClassPath(proxyClass);
  pool.insertClassPath(classPath);
  try {
    proxyCc=pool.get(proxyClass.getName());
    superCc=proxyCc.getSuperclass();
    if (""String_Node_Str"".equals(superCc.getName())) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    addFields(cc,proxyCc);
    addMethods(cc,proxyCc);
    addConstructors(cc,proxyCc);
    return cc.toClass();
  }
 catch (  Exception ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
 finally {
    pool.removeClassPath(classPath);
  }
}","@SuppressWarnings(""String_Node_Str"") private <T>Class<? extends T> createUnsafeProxyClass(ViewType<T> viewType,Class<?> proxyClass){
  String newCcName;
  Class<?> newClass;
  CtClass newCc;
  CtClass superCc;
  CtClass existingCc;
  if (viewType.getConstructors().isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"" + viewType.getJavaType().getName() + ""String_Node_Str"");
  }
  ClassPath classPath=new ClassClassPath(proxyClass);
  pool.insertClassPath(classPath);
  Stack<Class<?>> classStack=new Stack<Class<?>>();
  Class<?> current=proxyClass;
  try {
    superCc=pool.get(""String_Node_Str"");
    do {
      classStack.add(current);
    }
 while ((current=current.getSuperclass()) != Object.class);
    while (classStack.size() > 1) {
      current=classStack.pop();
      newClass=unsafeProxyClasses.get(current);
      if (newClass == null) {
        newCcName=current.getName() + ""String_Node_Str"" + unsafeClassCounter.getAndIncrement();
        newCc=pool.makeClass(newCcName,superCc);
        existingCc=pool.get(current.getName());
        addFields(newCc,existingCc);
        addMethods(newCc,existingCc);
        newClass=newCc.toClass();
        unsafeProxyClasses.put(current,newClass);
        verifyFieldOffsets(newClass,current);
      }
 else {
        newCc=pool.get(newClass.getName());
      }
      superCc=newCc;
    }
    current=classStack.pop();
    newCcName=current.getName() + ""String_Node_Str"" + unsafeClassCounter.getAndIncrement();
    newCc=pool.makeClass(newCcName,superCc);
    existingCc=pool.get(current.getName());
    addFields(newCc,existingCc);
    addMethods(newCc,existingCc);
    addConstructors(newCc,existingCc);
    return newCc.toClass();
  }
 catch (  Exception ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
 finally {
    pool.removeClassPath(classPath);
  }
}",0.2337367624810892
169016,"public ChainingObjectBuilder(TupleTransformator transformator,ObjectBuilder<T> objectBuilder,QueryBuilder<?,?> queryBuilder,Map<String,Object> optionalParameters,int startIndex){
  this.transformator=transformator;
  this.objectBuilder=objectBuilder;
  transformator.init(queryBuilder,optionalParameters);
}","public ChainingObjectBuilder(TupleTransformatorFactory transformatorFactory,ObjectBuilder<T> objectBuilder,QueryBuilder<?,?> queryBuilder,Map<String,Object> optionalParameters,int startIndex){
  this.transformator=transformatorFactory.create(queryBuilder,optionalParameters);
  this.objectBuilder=objectBuilder;
}",0.8064516129032258
169017,"private void applySubviewMapping(Attribute<?,?> attribute,int[] idPositions,Class<?> subviewClass,MappingAttribute<? super T,?> mappingAttribute,List<Object> mappingList,List<String> parameterMappingList){
  ViewType<Object[]> subviewType=(ViewType<Object[]>)evm.getMetamodel().view(subviewClass);
  String subviewAliasPrefix=getAlias(aliasPrefix,attribute);
  List<String> subviewMappingPrefix=createSubviewMappingPrefix(mappingPrefix,mappingAttribute);
  String subviewIdPrefix=getMapping(idPrefix,mappingAttribute);
  int[] subviewIdPositions=new int[idPositions.length + 1];
  System.arraycopy(idPositions,0,subviewIdPositions,0,idPositions.length);
  subviewIdPositions[idPositions.length]=tupleOffset + mappingList.size();
  int startIndex=tupleOffset + mappingList.size();
  ViewTypeObjectBuilderTemplate<Object[]> template=new ViewTypeObjectBuilderTemplate<Object[]>(subviewAliasPrefix,subviewMappingPrefix,subviewIdPrefix,subviewIdPositions,startIndex,metamodel,evm,ef,subviewType,null,proxyFactory);
  Collections.addAll(mappingList,template.mappers);
  for (int i=0; i < template.mappers.length; i++) {
    parameterMappingList.add(null);
  }
  tupleTransformator.add(template.tupleTransformator);
  tupleTransformator.add(new SubviewTupleTransformer(template));
}","private void applySubviewMapping(Attribute<?,?> attribute,int[] idPositions,Class<?> subviewClass,MappingAttribute<? super T,?> mappingAttribute,List<Object> mappingList,List<String> parameterMappingList){
  ViewType<Object[]> subviewType=(ViewType<Object[]>)evm.getMetamodel().view(subviewClass);
  String subviewAliasPrefix=getAlias(aliasPrefix,attribute);
  List<String> subviewMappingPrefix=createSubviewMappingPrefix(mappingPrefix,mappingAttribute);
  String subviewIdPrefix=getMapping(idPrefix,mappingAttribute);
  int[] subviewIdPositions=new int[idPositions.length + 1];
  System.arraycopy(idPositions,0,subviewIdPositions,0,idPositions.length);
  subviewIdPositions[idPositions.length]=tupleOffset + mappingList.size();
  int startIndex=tupleOffset + mappingList.size();
  ViewTypeObjectBuilderTemplate<Object[]> template=new ViewTypeObjectBuilderTemplate<Object[]>(subviewAliasPrefix,subviewMappingPrefix,subviewIdPrefix,subviewIdPositions,startIndex,metamodel,evm,ef,subviewType,null,proxyFactory);
  Collections.addAll(mappingList,template.mappers);
  for (int i=0; i < template.mappers.length; i++) {
    parameterMappingList.add(null);
  }
  tupleTransformatorFactory.add(template.tupleTransformatorFactory);
  tupleTransformatorFactory.add(new SubviewTupleTransformerFactory(template));
}",0.9891388673390225
169018,"public ObjectBuilder<T> createObjectBuilder(QueryBuilder<?,?> queryBuilder,Map<String,Object> optionalParameters,boolean isSubview){
  boolean hasOffset=tupleOffset != 0;
  ObjectBuilder<T> result;
  result=new ViewTypeObjectBuilder<T>(this);
  if (hasOffset || isSubview || hasIndexedCollections|| hasSubviews) {
    result=new ReducerViewTypeObjectBuilder<T>(result,tupleOffset,mappers.length);
  }
  if (hasParameters) {
    result=new ParameterViewTypeObjectBuilder(result,this,queryBuilder,optionalParameters,tupleOffset);
  }
  if (tupleTransformator.hasTransformers() && !isSubview) {
    result=new ChainingObjectBuilder<T>(tupleTransformator,result,queryBuilder,optionalParameters,tupleOffset);
  }
  return result;
}","public ObjectBuilder<T> createObjectBuilder(QueryBuilder<?,?> queryBuilder,Map<String,Object> optionalParameters,boolean isSubview){
  boolean hasOffset=tupleOffset != 0;
  ObjectBuilder<T> result;
  result=new ViewTypeObjectBuilder<T>(this);
  if (hasOffset || isSubview || hasIndexedCollections|| hasSubviews) {
    result=new ReducerViewTypeObjectBuilder<T>(result,tupleOffset,mappers.length);
  }
  if (hasParameters) {
    result=new ParameterViewTypeObjectBuilder(result,this,queryBuilder,optionalParameters,tupleOffset);
  }
  if (tupleTransformatorFactory.hasTransformers() && !isSubview) {
    result=new ChainingObjectBuilder<T>(tupleTransformatorFactory,result,queryBuilder,optionalParameters,tupleOffset);
  }
  return result;
}",0.990450204638472
169019,"private void applyMapping(Attribute<?,?> attribute,List<Object> mappingList,List<String> parameterMappingList,boolean[] featuresFound){
  if (attribute.isSubquery()) {
    applySubqueryMapping((SubqueryAttribute<? super T,?>)attribute,mappingList,parameterMappingList);
  }
 else {
    MappingAttribute<? super T,?> mappingAttribute=(MappingAttribute<? super T,?>)attribute;
    if (attribute.isCollection()) {
      PluralAttribute<?,?,?> pluralAttribute=(PluralAttribute<?,?,?>)attribute;
      boolean listKey=pluralAttribute.isIndexed() && attribute instanceof ListAttribute<?,?>;
      boolean mapKey=pluralAttribute.isIndexed() && attribute instanceof MapAttribute<?,?,?>;
      int startIndex=tupleOffset + mappingList.size();
      if (listKey) {
        featuresFound[1]=true;
        applyCollectionKeyMapping(""String_Node_Str"",mappingAttribute,attribute,mappingList);
        parameterMappingList.add(null);
      }
 else       if (mapKey) {
        featuresFound[1]=true;
        applyCollectionKeyMapping(""String_Node_Str"",mappingAttribute,attribute,mappingList);
        parameterMappingList.add(null);
      }
      if (attribute.isSubview()) {
        featuresFound[2]=true;
        int[] newIdPositions;
        if (listKey || mapKey) {
          newIdPositions=new int[idPositions.length + 1];
          System.arraycopy(idPositions,0,newIdPositions,0,idPositions.length);
          newIdPositions[idPositions.length]=mappingList.size();
        }
 else {
          newIdPositions=idPositions;
        }
        applySubviewMapping(attribute,newIdPositions,pluralAttribute.getElementType(),mappingAttribute,mappingList,parameterMappingList);
      }
 else {
        applyBasicMapping(mappingAttribute,attribute,mappingList,parameterMappingList);
      }
      if (listKey) {
        if (pluralAttribute.isSorted()) {
          throw new IllegalArgumentException(""String_Node_Str"" + pluralAttribute + ""String_Node_Str"");
        }
 else {
          tupleTransformator.add(new IndexedListTupleListTransformer(idPositions,startIndex));
        }
      }
 else       if (mapKey) {
        if (pluralAttribute.isSorted()) {
          tupleTransformator.add(new SortedMapTupleListTransformer(idPositions,startIndex,pluralAttribute.getComparator()));
        }
 else         if (pluralAttribute.isOrdered()) {
          tupleTransformator.add(new OrderedMapTupleListTransformer(idPositions,startIndex));
        }
 else {
          tupleTransformator.add(new MapTupleListTransformer(idPositions,startIndex));
        }
      }
 else {
switch (pluralAttribute.getCollectionType()) {
case COLLECTION:
          if (pluralAttribute.isSorted()) {
            throw new IllegalArgumentException(""String_Node_Str"" + pluralAttribute + ""String_Node_Str"");
          }
 else {
            tupleTransformator.add(new OrderedListTupleListTransformer(idPositions,startIndex));
          }
        break;
case LIST:
      if (pluralAttribute.isSorted()) {
        throw new IllegalArgumentException(""String_Node_Str"" + pluralAttribute + ""String_Node_Str"");
      }
 else {
        tupleTransformator.add(new OrderedListTupleListTransformer(idPositions,startIndex));
      }
    break;
case SET:
  if (pluralAttribute.isSorted()) {
    tupleTransformator.add(new SortedSetTupleListTransformer(idPositions,startIndex,pluralAttribute.getComparator()));
  }
 else   if (pluralAttribute.isOrdered()) {
    tupleTransformator.add(new OrderedSetTupleListTransformer(idPositions,startIndex));
  }
 else {
    tupleTransformator.add(new SetTupleListTransformer(idPositions,startIndex));
  }
break;
case MAP:
throw new IllegalArgumentException(""String_Node_Str"" + pluralAttribute + ""String_Node_Str"");
}
}
}
 else if (((SingularAttribute)attribute).isQueryParameter()) {
featuresFound[0]=true;
applyQueryParameterMapping(mappingAttribute,mappingList,parameterMappingList);
}
 else if (attribute.isSubview()) {
featuresFound[2]=true;
applySubviewMapping(attribute,idPositions,attribute.getJavaType(),mappingAttribute,mappingList,parameterMappingList);
}
 else {
applyBasicMapping(mappingAttribute,attribute,mappingList,parameterMappingList);
}
}
}","private void applyMapping(Attribute<?,?> attribute,List<Object> mappingList,List<String> parameterMappingList,boolean[] featuresFound){
  if (attribute.isSubquery()) {
    applySubqueryMapping((SubqueryAttribute<? super T,?>)attribute,mappingList,parameterMappingList);
  }
 else {
    MappingAttribute<? super T,?> mappingAttribute=(MappingAttribute<? super T,?>)attribute;
    if (attribute.isCollection()) {
      PluralAttribute<?,?,?> pluralAttribute=(PluralAttribute<?,?,?>)attribute;
      boolean listKey=pluralAttribute.isIndexed() && attribute instanceof ListAttribute<?,?>;
      boolean mapKey=pluralAttribute.isIndexed() && attribute instanceof MapAttribute<?,?,?>;
      int startIndex=tupleOffset + mappingList.size();
      if (listKey) {
        featuresFound[1]=true;
        applyCollectionKeyMapping(""String_Node_Str"",mappingAttribute,attribute,mappingList);
        parameterMappingList.add(null);
      }
 else       if (mapKey) {
        featuresFound[1]=true;
        applyCollectionKeyMapping(""String_Node_Str"",mappingAttribute,attribute,mappingList);
        parameterMappingList.add(null);
      }
      if (attribute.isSubview()) {
        featuresFound[2]=true;
        int[] newIdPositions;
        if (listKey || mapKey) {
          newIdPositions=new int[idPositions.length + 1];
          System.arraycopy(idPositions,0,newIdPositions,0,idPositions.length);
          newIdPositions[idPositions.length]=mappingList.size();
        }
 else {
          newIdPositions=idPositions;
        }
        applySubviewMapping(attribute,newIdPositions,pluralAttribute.getElementType(),mappingAttribute,mappingList,parameterMappingList);
      }
 else {
        applyBasicMapping(mappingAttribute,attribute,mappingList,parameterMappingList);
      }
      if (listKey) {
        if (pluralAttribute.isSorted()) {
          throw new IllegalArgumentException(""String_Node_Str"" + pluralAttribute + ""String_Node_Str"");
        }
 else {
          tupleTransformatorFactory.add(new IndexedListTupleListTransformer(idPositions,startIndex));
        }
      }
 else       if (mapKey) {
        if (pluralAttribute.isSorted()) {
          tupleTransformatorFactory.add(new SortedMapTupleListTransformer(idPositions,startIndex,pluralAttribute.getComparator()));
        }
 else         if (pluralAttribute.isOrdered()) {
          tupleTransformatorFactory.add(new OrderedMapTupleListTransformer(idPositions,startIndex));
        }
 else {
          tupleTransformatorFactory.add(new MapTupleListTransformer(idPositions,startIndex));
        }
      }
 else {
switch (pluralAttribute.getCollectionType()) {
case COLLECTION:
          if (pluralAttribute.isSorted()) {
            throw new IllegalArgumentException(""String_Node_Str"" + pluralAttribute + ""String_Node_Str"");
          }
 else {
            tupleTransformatorFactory.add(new OrderedListTupleListTransformer(idPositions,startIndex));
          }
        break;
case LIST:
      if (pluralAttribute.isSorted()) {
        throw new IllegalArgumentException(""String_Node_Str"" + pluralAttribute + ""String_Node_Str"");
      }
 else {
        tupleTransformatorFactory.add(new OrderedListTupleListTransformer(idPositions,startIndex));
      }
    break;
case SET:
  if (pluralAttribute.isSorted()) {
    tupleTransformatorFactory.add(new SortedSetTupleListTransformer(idPositions,startIndex,pluralAttribute.getComparator()));
  }
 else   if (pluralAttribute.isOrdered()) {
    tupleTransformatorFactory.add(new OrderedSetTupleListTransformer(idPositions,startIndex));
  }
 else {
    tupleTransformatorFactory.add(new SetTupleListTransformer(idPositions,startIndex));
  }
break;
case MAP:
throw new IllegalArgumentException(""String_Node_Str"" + pluralAttribute + ""String_Node_Str"");
}
}
}
 else if (((SingularAttribute)attribute).isQueryParameter()) {
featuresFound[0]=true;
applyQueryParameterMapping(mappingAttribute,mappingList,parameterMappingList);
}
 else if (attribute.isSubview()) {
featuresFound[2]=true;
applySubviewMapping(attribute,idPositions,attribute.getJavaType(),mappingAttribute,mappingList,parameterMappingList);
}
 else {
applyBasicMapping(mappingAttribute,attribute,mappingList,parameterMappingList);
}
}
}",0.99243788260713
169020,"private PagedList<T> getResultListViaObjectQuery(long totalSize){
  String queryString=getQueryString0();
  Class<?> expectedResultType;
  if (keysetExtraction) {
    expectedResultType=Object[].class;
  }
 else {
    expectedResultType=selectManager.getExpectedQueryResultType();
  }
  TypedQuery<T> query=(TypedQuery<T>)em.createQuery(queryString,expectedResultType).setMaxResults(pageSize);
  if (keysetMode == KeysetMode.NONE) {
    query.setFirstResult(firstRow);
  }
  KeysetExtractionObjectBuilder<T> objectBuilder=null;
  ObjectBuilder<T> transformerObjectBuilder=selectManager.getSelectObjectBuilder();
  if (keysetExtraction) {
    int keysetSize=orderByManager.getOrderByCount();
    if (transformerObjectBuilder == null) {
      objectBuilder=new KeysetExtractionObjectBuilder<T>(keysetSize);
    }
 else {
      objectBuilder=new DelegatingKeysetExtractionObjectBuilder<T>(transformerObjectBuilder,keysetSize);
    }
    transformerObjectBuilder=objectBuilder;
  }
  if (transformerObjectBuilder != null) {
    for (    QueryTransformer transformer : cbf.getQueryTransformers()) {
      transformer.transformQuery((TypedQuery<T>)query,transformerObjectBuilder);
    }
  }
  parameterizeQuery(query);
  List<T> result=query.getResultList();
  if (result.isEmpty()) {
    KeysetPage newKeysetPage=null;
    if (keysetMode == KeysetMode.NEXT) {
      newKeysetPage=keysetPage;
    }
    return new PagedListImpl<T>(newKeysetPage,totalSize,firstResult,pageSize);
  }
  KeysetPage newKeyset=null;
  if (keysetExtraction) {
    Serializable[] lowest=objectBuilder.getLowest();
    Serializable[] highest=objectBuilder.getHighest();
    newKeyset=new KeysetPageImpl(firstRow,pageSize,lowest,highest);
  }
  PagedList<T> pagedResultList=new PagedListImpl<T>(result,newKeyset,totalSize,firstResult,pageSize);
  return pagedResultList;
}","private PagedList<T> getResultListViaObjectQuery(long totalSize){
  String queryString=getQueryString0();
  Class<?> expectedResultType;
  if (keysetExtraction) {
    expectedResultType=Object[].class;
  }
 else {
    expectedResultType=selectManager.getExpectedQueryResultType();
  }
  TypedQuery<T> query=(TypedQuery<T>)em.createQuery(queryString,expectedResultType).setMaxResults(pageSize);
  if (keysetMode == KeysetMode.NONE) {
    query.setFirstResult(firstRow);
  }
  KeysetExtractionObjectBuilder<T> objectBuilder=null;
  ObjectBuilder<T> transformerObjectBuilder=selectManager.getSelectObjectBuilder();
  if (keysetExtraction) {
    int keysetSize=orderByManager.getOrderByCount();
    if (transformerObjectBuilder == null) {
      objectBuilder=new KeysetExtractionObjectBuilder<T>(keysetSize);
    }
 else {
      objectBuilder=new DelegatingKeysetExtractionObjectBuilder<T>(transformerObjectBuilder,keysetSize);
    }
    transformerObjectBuilder=objectBuilder;
  }
  if (transformerObjectBuilder != null) {
    for (    QueryTransformer transformer : cbf.getQueryTransformers()) {
      query=transformer.transformQuery((TypedQuery<T>)query,transformerObjectBuilder);
    }
  }
  parameterizeQuery(query);
  List<T> result=query.getResultList();
  if (result.isEmpty()) {
    KeysetPage newKeysetPage=null;
    if (keysetMode == KeysetMode.NEXT) {
      newKeysetPage=keysetPage;
    }
    return new PagedListImpl<T>(newKeysetPage,totalSize,firstResult,pageSize);
  }
  KeysetPage newKeyset=null;
  if (keysetExtraction) {
    Serializable[] lowest=objectBuilder.getLowest();
    Serializable[] highest=objectBuilder.getHighest();
    newKeyset=new KeysetPageImpl(firstRow,pageSize,lowest,highest);
  }
  PagedList<T> pagedResultList=new PagedListImpl<T>(result,newKeyset,totalSize,firstResult,pageSize);
  return pagedResultList;
}",0.9983722192078134
169021,"public Serializable[] getHighest(){
  return KeysetPaginationHelper.extractKey(last,last.length - keysetSize);
}","public Serializable[] getHighest(){
  if (last == null) {
    return null;
  }
  return KeysetPaginationHelper.extractKey(last,last.length - keysetSize);
}",0.8389513108614233
169022,"public Serializable[] getLowest(){
  return KeysetPaginationHelper.extractKey(first,first.length - keysetSize);
}","public Serializable[] getLowest(){
  if (first == null) {
    return null;
  }
  return KeysetPaginationHelper.extractKey(first,first.length - keysetSize);
}",0.837037037037037
169023,"Set<String> buildGroupByClauses(){
  if (groupByInfos.isEmpty()) {
    return Collections.EMPTY_SET;
  }
  Set<String> groupByClauses=new HashSet<String>();
  boolean conditionalContext=queryGenerator.setConditionalContext(false);
  for (  NodeInfo info : groupByInfos) {
    StringBuilder sb=StringBuilderProvider.getEmptyStringBuilder();
    queryGenerator.setQueryBuffer(sb);
    info.getExpression().accept(queryGenerator);
    groupByClauses.add(sb.toString());
  }
  queryGenerator.setConditionalContext(conditionalContext);
  return groupByClauses;
}","Set<String> buildGroupByClauses(){
  if (groupByInfos.isEmpty()) {
    return Collections.EMPTY_SET;
  }
  Set<String> groupByClauses=new HashSet<String>();
  boolean conditionalContext=queryGenerator.setConditionalContext(false);
  StringBuilder sb=new StringBuilder();
  for (  NodeInfo info : groupByInfos) {
    sb.setLength(0);
    queryGenerator.setQueryBuffer(sb);
    info.getExpression().accept(queryGenerator);
    groupByClauses.add(sb.toString());
  }
  queryGenerator.setConditionalContext(conditionalContext);
  return groupByClauses;
}",0.8491418247515808
169024,"Set<String> buildGroupByClauses(){
  if (orderByInfos.isEmpty()) {
    return Collections.EMPTY_SET;
  }
  Set<String> groupByClauses=new LinkedHashSet<String>();
  Iterator<OrderByInfo> iter=orderByInfos.iterator();
  boolean conditionalContext=queryGenerator.setConditionalContext(false);
  OrderByInfo orderByInfo;
  while (iter.hasNext()) {
    StringBuilder sb=StringBuilderProvider.getEmptyStringBuilder();
    queryGenerator.setQueryBuffer(sb);
    orderByInfo=iter.next();
    String potentialSelectAlias=orderByInfo.getExpression().toString();
    AliasInfo aliasInfo=aliasManager.getAliasInfo(potentialSelectAlias);
    if (aliasInfo != null && aliasInfo instanceof SelectInfo) {
      SelectInfo selectInfo=(SelectInfo)aliasInfo;
      String expressionString=selectInfo.getExpression().toString().toUpperCase();
      if (!expressionString.startsWith(""String_Node_Str"") && !expressionString.startsWith(""String_Node_Str"") && !expressionString.startsWith(""String_Node_Str"")&& !expressionString.startsWith(""String_Node_Str"")&& !expressionString.startsWith(""String_Node_Str"")) {
        selectInfo.getExpression().accept(queryGenerator);
        groupByClauses.add(sb.toString());
      }
    }
 else {
      orderByInfo.getExpression().accept(queryGenerator);
      groupByClauses.add(sb.toString());
    }
  }
  queryGenerator.setConditionalContext(conditionalContext);
  return groupByClauses;
}","Set<String> buildGroupByClauses(){
  if (orderByInfos.isEmpty()) {
    return Collections.EMPTY_SET;
  }
  Set<String> groupByClauses=new LinkedHashSet<String>();
  Iterator<OrderByInfo> iter=orderByInfos.iterator();
  boolean conditionalContext=queryGenerator.setConditionalContext(false);
  OrderByInfo orderByInfo;
  StringBuilder sb=new StringBuilder();
  while (iter.hasNext()) {
    sb.setLength(0);
    queryGenerator.setQueryBuffer(sb);
    orderByInfo=iter.next();
    String potentialSelectAlias=orderByInfo.getExpression().toString();
    AliasInfo aliasInfo=aliasManager.getAliasInfo(potentialSelectAlias);
    if (aliasInfo != null && aliasInfo instanceof SelectInfo) {
      SelectInfo selectInfo=(SelectInfo)aliasInfo;
      String expressionString=selectInfo.getExpression().toString().toUpperCase();
      if (!expressionString.startsWith(""String_Node_Str"") && !expressionString.startsWith(""String_Node_Str"") && !expressionString.startsWith(""String_Node_Str"")&& !expressionString.startsWith(""String_Node_Str"")&& !expressionString.startsWith(""String_Node_Str"")) {
        selectInfo.getExpression().accept(queryGenerator);
        groupByClauses.add(sb.toString());
      }
    }
 else {
      orderByInfo.getExpression().accept(queryGenerator);
      groupByClauses.add(sb.toString());
    }
  }
  queryGenerator.setConditionalContext(conditionalContext);
  return groupByClauses;
}",0.960427807486631
169025,"Set<String> buildGroupByClauses(final Metamodel m){
  if (selectInfos.isEmpty()) {
    return Collections.EMPTY_SET;
  }
  EntitySelectResolveVisitor resolveVisitor=new EntitySelectResolveVisitor(m);
  for (  SelectInfo selectInfo : selectInfos) {
    selectInfo.getExpression().accept(resolveVisitor);
  }
  Set<String> groupByClauses=new LinkedHashSet<String>();
  boolean conditionalContext=queryGenerator.setConditionalContext(false);
  for (  PathExpression pathExpr : resolveVisitor.getPathExpressions()) {
    StringBuilder sb=StringBuilderProvider.getEmptyStringBuilder();
    queryGenerator.setQueryBuffer(sb);
    pathExpr.accept(queryGenerator);
    groupByClauses.add(sb.toString());
  }
  queryGenerator.setConditionalContext(conditionalContext);
  return groupByClauses;
}","Set<String> buildGroupByClauses(final Metamodel m){
  if (selectInfos.isEmpty()) {
    return Collections.EMPTY_SET;
  }
  EntitySelectResolveVisitor resolveVisitor=new EntitySelectResolveVisitor(m);
  for (  SelectInfo selectInfo : selectInfos) {
    selectInfo.getExpression().accept(resolveVisitor);
  }
  Set<String> groupByClauses=new LinkedHashSet<String>();
  boolean conditionalContext=queryGenerator.setConditionalContext(false);
  StringBuilder sb=new StringBuilder();
  for (  PathExpression pathExpr : resolveVisitor.getPathExpressions()) {
    sb.setLength(0);
    queryGenerator.setQueryBuffer(sb);
    pathExpr.accept(queryGenerator);
    groupByClauses.add(sb.toString());
  }
  queryGenerator.setConditionalContext(conditionalContext);
  return groupByClauses;
}",0.668370607028754
169026,"/** 
 * Adds a entity class to the from clause of the query with the given alias.
 * @param entityClass   The entity class which should be the root entity
 * @param alias         The alias for the root entity
 * @return A new criteria builder
 */
public BaseQueryBuilder<T,?> from(Class<?> entityClass,String alias);","/** 
 * Sets the entity class on which the query should be based on with the given alias.
 * @param entityClass   The entity class which should be the root entity
 * @param alias         The alias for the root entity
 * @return The query builder for chaining calls
 */
public BaseQueryBuilder<T,?> from(Class<?> entityClass,String alias);",0.7737003058103975
169027,"/** 
 * Creates a new criteria builder with the given result class.
 * @param entityManager The entity manager to use for the criteria builder
 * @param resultClass   The result class of the query
 * @param < T >           The type of the result class
 * @param alias         The alias that should be used for the result class from clause
 * @return A new criteria builder
 */
public <T>CriteriaBuilder<T> create(EntityManager entityManager,Class<T> resultClass,String alias);","/** 
 * Creates a new criteria builder with the given result class. The result class will be used as default from class. The alias will be used as default alias for the from class. Both can be overridden by invoking   {@link BaseQueryBuilder#from(java.lang.Class,java.lang.String)}.
 * @param entityManager The entity manager to use for the criteria builder
 * @param resultClass   The result class of the query
 * @param < T >           The type of the result class
 * @param alias         The alias that should be used for the result class from clause
 * @return A new criteria builder
 */
public <T>CriteriaBuilder<T> create(EntityManager entityManager,Class<T> resultClass,String alias);",0.8157669237360754
169028,"/** 
 * Constructs a between predicate with an expression as upper bound.
 * @param end The upper bound expression
 * @return 
 */
public T andExpression(String end);","/** 
 * Constructs a between predicate with an expression as upper bound.
 * @param end The upper bound expression
 * @return The parent predicate container builder
 */
public T andExpression(String end);",0.8972972972972973
169029,"/** 
 * Constructs a between predicate with a parameter as upper bound.
 * @param end The parameter for the upper bound
 * @return 
 */
public T and(Object end);","/** 
 * Constructs a between predicate with a parameter as upper bound.
 * @param end The parameter for the upper bound
 * @return The parent predicate container builder
 */
public T and(Object end);",0.8944444444444445
169030,"/** 
 * Starts a   {@link CaseWhenOrThenBuilder} for building a when expression with disjunctively connected predicates. <p> When the builder finishes, the when predicate in conjunction with its then expression are added to the case when builder. <p/>
 * @see CaseWhenStarterBuilder#whenOr() More details about this method
 * @return The or predicate builder for the when expression
 */
public CaseWhenOrThenBuilder<CaseWhenBuilder<T>> caseWhenOr();","/** 
 * Starts a   {@link CaseWhenOrThenBuilder} for building a when expression with disjunctively connected predicates. <p> When the builder finishes, the when predicate in conjunction with its then expression are added to the case when builder. </p>
 * @see CaseWhenStarterBuilder#whenOr() More details about this method
 * @return The or predicate builder for the when expression
 */
public CaseWhenOrThenBuilder<CaseWhenBuilder<T>> caseWhenOr();",0.9977728285077953
169031,"/** 
 * Like   {@link QueryBuilder#page(int,int)} but additionally uses key set pagination when possible.Beware that keyset pagination should not be used as a direct replacement for offset pagination. Since entries that have a lower rank than some keyset might be added or removed, the calculations for the firstResult might be wrong. If strict pagination is required, then a keyset should be thrown away when the count of lower ranked items changes to make use of offset pagination again. <p> Key set pagination is possible if and only if the following conditions are met: <ul> <li>This keyset reference values fit the order by expressions of this query builder AND</li> <li> {@link KeysetPage#getMaxResults()} and <code>maxResults</code> evaluate to the same value AND</li><li>One of the following conditions is met: <ul> <li>The absolute value of  {@link KeysetPage#getFirstResults()}<code> - firstResult</code> is 0</li> <li>The absolute value of   {@link KeysetPage#getFirstResults()}<code> - firstResult</code> is equal to the value of <code>maxResults</code></li> </ul> </li> </ul> </p>
 * @param keysetPage  The key set from a previous result, may be null
 * @param firstResult The position of the first result to retrieve, numbered from 0
 * @param maxResults  The maximum number of results to retrieve
 * @return This query builder as paginated query builder
 * @see PagedList#getKeysetPage()
 */
public PaginatedCriteriaBuilder<T> page(KeysetPage keysetPage,int firstResult,int maxResults);","/** 
 * Like   {@link QueryBuilder#page(int,int)} but additionally uses key set pagination when possible.Beware that keyset pagination should not be used as a direct replacement for offset pagination. Since entries that have a lower rank than some keyset might be added or removed, the calculations for the firstResult might be wrong. If strict pagination is required, then a keyset should be thrown away when the count of lower ranked items changes to make use of offset pagination again. <p> Key set pagination is possible if and only if the following conditions are met: <ul> <li>This keyset reference values fit the order by expressions of this query builder AND</li> <li> {@link KeysetPage#getMaxResults()} and <code>maxResults</code> evaluate to the same value AND</li><li>One of the following conditions is met: <ul> <li>The absolute value of  {@link KeysetPage#getFirstResult()}<code> - firstResult</code> is 0</li> <li>The absolute value of   {@link KeysetPage#getFirstResult()}<code> - firstResult</code> is equal to the value of <code>maxResults</code></li> </ul> </li> </ul> </p>
 * @param keysetPage  The key set from a previous result, may be null
 * @param firstResult The position of the first result to retrieve, numbered from 0
 * @param maxResults  The maximum number of results to retrieve
 * @return This query builder as paginated query builder
 * @see PagedList#getKeysetPage()
 */
public PaginatedCriteriaBuilder<T> page(KeysetPage keysetPage,int firstResult,int maxResults);",0.9993333333333332
169032,"/** 
 * Like   {@link RestrictionBuilder#eq(java.lang.String) } but the result is wrapped in a NOT predicate.
 * @param expression The expression on the right hand side
 * @return The quantifiable binary predicate builder
 */
public T notEqExpression(String expression);","/** 
 * Like   {@link RestrictionBuilder#eqExpression(java.lang.String) } but the result is wrapped in a NOT predicate.
 * @param expression The expression on the right hand side
 * @return The quantifiable binary predicate builder
 */
public T notEqExpression(String expression);",0.9818181818181818
169033,"/** 
 * Like   {@link Selectable#selectSubquery(java.lang.String,java.lang.String,java.lang.String)} but without a select alias.
 * @param subqueryAlias The alias for the subquery which will be replaced by the actual subquery
 * @param expression    The expression which will be added as select item
 * @return The subquery initiator for building a subquery
 */
public SubqueryInitiator<? extends SelectBuilder<T,?>> selectSubquery(String subqueryAlias,String expression);","/** 
 * Like   {@link SelectBuilder#selectSubquery(java.lang.String,java.lang.String,java.lang.String)} but without a select alias.
 * @param subqueryAlias The alias for the subquery which will be replaced by the actual subquery
 * @param expression    The expression which will be added as select item
 * @return The subquery initiator for building a subquery
 */
public SubqueryInitiator<? extends SelectBuilder<T,?>> selectSubquery(String subqueryAlias,String expression);",0.9883843717001056
169034,"/** 
 * Like   {@link BaseQueryBuilder#orderByFunction(java.lang.String,boolean,boolean) } but with <code>ascending</code> set to false.
 * @param expression The expression for the order by clause
 * @param nullFirst  Wether null elements should be ordered first or not.
 * @return The query builder for chaining calls
 */
public T orderByFunctionDesc(String expression,boolean nullFirst);","/** 
 * Like   {@link OrderByBuilderExperimental#orderByFunction(java.lang.String,boolean,boolean) } but with <code>ascending</code> set to false.
 * @param expression The expression for the order by clause
 * @param nullFirst  Wether null elements should be ordered first or not.
 * @return The query builder for chaining calls
 */
public T orderByFunctionDesc(String expression,boolean nullFirst);",0.9695431472081218
169035,"/** 
 * Like   {@link BaseQueryBuilder#orderByFunction(java.lang.String,boolean,boolean) } but with <code>ascending</code> set to true.
 * @param expression The expression for the order by clause
 * @param nullFirst  Wether null elements should be ordered first or not.
 * @return The query builder for chaining calls
 */
public T orderByFunctionAsc(String expression,boolean nullFirst);","/** 
 * Like   {@link OrderByBuilderExperimental#orderByFunction(java.lang.String,boolean,boolean) } but with <code>ascending</code> set to true.
 * @param expression The expression for the order by clause
 * @param nullFirst  Wether null elements should be ordered first or not.
 * @return The query builder for chaining calls
 */
public T orderByFunctionAsc(String expression,boolean nullFirst);",0.9693877551020408
169036,"@Override public Expression visitEnum_literal(JPQLSelectExpressionParser.Enum_literalContext ctx){
  return new FooExpression(ctx.path().accept(this).toString());
}","@Override public Expression visitEnum_literal(JPQLSelectExpressionParser.Enum_literalContext ctx){
  return new LiteralExpression(""String_Node_Str"",ctx.path().accept(this).toString());
}",0.92
169037,"@Override public Expression visitEntity_type_literal(JPQLSelectExpressionParser.Entity_type_literalContext ctx){
  return new FooExpression(ctx.identifier().getText());
}","@Override public Expression visitEntity_type_literal(JPQLSelectExpressionParser.Entity_type_literalContext ctx){
  return new LiteralExpression(""String_Node_Str"",ctx.identifier().getText());
}",0.9226519337016574
169038,"@Test public void testEnumCompare(){
  GeneralCaseExpression result=(GeneralCaseExpression)parse(""String_Node_Str"");
  GeneralCaseExpression expected=new GeneralCaseExpression(Arrays.asList(new WhenClauseExpression(new EqPredicate(path(""String_Node_Str""),foo(""String_Node_Str"")),foo(""String_Node_Str""))),foo(""String_Node_Str""));
  assertEquals(expected,result);
}","@Test public void testEnumCompare(){
  GeneralCaseExpression result=(GeneralCaseExpression)parse(""String_Node_Str"");
  GeneralCaseExpression expected=new GeneralCaseExpression(Arrays.asList(new WhenClauseExpression(new EqPredicate(path(""String_Node_Str""),literal(""String_Node_Str"",""String_Node_Str"")),foo(""String_Node_Str""))),foo(""String_Node_Str""));
  assertEquals(expected,result);
}",0.9598930481283422
169039,"@Test public void testEtityTypeCompare(){
  GeneralCaseExpression result=(GeneralCaseExpression)parse(""String_Node_Str"");
  GeneralCaseExpression expected=new GeneralCaseExpression(Arrays.asList(new WhenClauseExpression(new EqPredicate(function(""String_Node_Str"",path(""String_Node_Str"")),foo(""String_Node_Str"")),foo(""String_Node_Str""))),foo(""String_Node_Str""));
  assertEquals(expected,result);
}","@Test public void testEtityTypeCompare(){
  GeneralCaseExpression result=(GeneralCaseExpression)parse(""String_Node_Str"");
  GeneralCaseExpression expected=new GeneralCaseExpression(Arrays.asList(new WhenClauseExpression(new EqPredicate(function(""String_Node_Str"",path(""String_Node_Str"")),literal(""String_Node_Str"",""String_Node_Str"")),foo(""String_Node_Str""))),foo(""String_Node_Str""));
  assertEquals(expected,result);
}",0.9631449631449632
169040,"@Test public void testEnumLiteral(){
  FooExpression result=(FooExpression)parse(""String_Node_Str"");
  assertEquals(new FooExpression(""String_Node_Str""),result);
}","@Test public void testEnumLiteral(){
  LiteralExpression result=(LiteralExpression)parse(""String_Node_Str"");
  assertEquals(new LiteralExpression(""String_Node_Str"",""String_Node_Str""),result);
}",0.8651685393258427
169041,"@Test public void testEntityTypeLiteral(){
  FooExpression result=(FooExpression)parse(""String_Node_Str"");
  assertEquals(new FooExpression(""String_Node_Str""),result);
}","@Test public void testEntityTypeLiteral(){
  LiteralExpression result=(LiteralExpression)parse(""String_Node_Str"");
  assertEquals(new LiteralExpression(""String_Node_Str"",""String_Node_Str""),result);
}",0.8695652173913043
169042,"private static String getPrefixedExpression(EntityViewManagerImpl evm,List<String> subviewPrefixParts,String mappingExpression){
  if (subviewPrefixParts != null && subviewPrefixParts.size() > 0) {
    Expression expr=evm.getExpressionFactory().createSimpleExpression(mappingExpression);
    expr.accept(new SubviewPrefixExpressionVisitor(subviewPrefixParts));
    SimpleQueryGenerator generator=new SimpleQueryGenerator();
    StringBuilder sb=new StringBuilder();
    generator.setQueryBuffer(sb);
    expr.accept(generator);
    return sb.toString();
  }
  return mappingExpression;
}","private static String getPrefixedExpression(EntityViewManagerImpl evm,List<String> subviewPrefixParts,String mappingExpression){
  if (subviewPrefixParts != null && subviewPrefixParts.size() > 0) {
    Expression expr=evm.getExpressionFactory().createSimpleExpression(mappingExpression);
    SimpleQueryGenerator generator=new PrefixingQueryGenerator(subviewPrefixParts);
    StringBuilder sb=new StringBuilder();
    generator.setQueryBuffer(sb);
    expr.accept(generator);
    return sb.toString();
  }
  return mappingExpression;
}",0.6238859180035651
169043,"private String getJoinAlias(ArrayExpression expr){
  StringBuilder sb=new StringBuilder(expr.getBase().toString());
  Expression indexExpr=expr.getIndex();
  if (indexExpr instanceof ParameterExpression) {
    ParameterExpression indexParamExpr=(ParameterExpression)indexExpr;
    sb.append('_');
    sb.append(indexParamExpr.getName());
  }
 else   if (indexExpr instanceof PathExpression) {
    PathExpression indexPathExpr=(PathExpression)indexExpr;
    sb.append('_');
    sb.append(((JoinNode)indexPathExpr.getBaseNode()).getAliasInfo().getAlias());
    if (indexPathExpr.getField() != null) {
      sb.append('_');
      sb.append(indexPathExpr.getField());
    }
  }
 else {
    sb.append('_');
    sb.append(indexExpr.toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  return sb.toString();
}","private String getJoinAlias(ArrayExpression expr){
  StringBuilder sb=new StringBuilder(expr.getBase().toString());
  Expression indexExpr=expr.getIndex();
  if (indexExpr instanceof ParameterExpression) {
    ParameterExpression indexParamExpr=(ParameterExpression)indexExpr;
    sb.append('_');
    sb.append(indexParamExpr.getName());
  }
 else   if (indexExpr instanceof PathExpression) {
    PathExpression indexPathExpr=(PathExpression)indexExpr;
    sb.append('_');
    sb.append(((JoinNode)indexPathExpr.getBaseNode()).getAliasInfo().getAlias());
    if (indexPathExpr.getField() != null) {
      sb.append('_');
      sb.append(indexPathExpr.getField().replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    sb.append('_');
    sb.append(indexExpr.toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  return sb.toString();
}",0.8821428571428571
169044,"private Class<?> resolveType(Class<?> concreteClass,java.lang.reflect.Type type){
  if (type instanceof ParameterizedType) {
    return (Class<?>)((ParameterizedType)type).getRawType();
  }
 else   if (type instanceof TypeVariable) {
    return resolveType(concreteClass,((TypeVariable<?>)type).getBounds()[0]);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + type);
  }
}","private Class<?> resolveType(Class<?> concreteClass,java.lang.reflect.Type type){
  if (type instanceof Class<?>) {
    return (Class<?>)type;
  }
 else   if (type instanceof ParameterizedType) {
    return (Class<?>)((ParameterizedType)type).getRawType();
  }
 else   if (type instanceof TypeVariable) {
    return resolveType(concreteClass,((TypeVariable<?>)type).getBounds()[0]);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + type);
  }
}",0.9175377468060396
169045,"@Override protected Class<?>[] getEntityClasses(){
  return new Class<?>[]{Document.class,Version.class,Person.class,Workflow.class};
}","@Override protected Class<?>[] getEntityClasses(){
  return new Class<?>[]{Document.class,Version.class,Person.class,Workflow.class,IntIdEntity.class};
}",0.9375
169046,"@Override public SQLExpression getExpression(SQLExpression expr,List<SQLExpression> args){
  List<String> newArgs=new ArrayList<String>(args.size());
  for (int i=0; i < args.size(); i++) {
    newArgs.add(args.get(i).toSQLText().toSQL());
  }
  return new NumericExpression(stmt,getMappingForClass(long.class),function.render(newArgs));
}","@Override public SQLExpression getExpression(SQLExpression expr,List<SQLExpression> args){
  List<String> newArgs=new ArrayList<String>(args.size());
  for (int i=0; i < args.size(); i++) {
    newArgs.add(args.get(i).toSQLText().toSQL());
  }
  return null;
}",0.8681135225375626
169047,"Set<String> buildGroupByClauses(){
  if (orderByInfos.isEmpty()) {
    return Collections.EMPTY_SET;
  }
  Set<String> groupByClauses=new HashSet<String>();
  Iterator<OrderByInfo> iter=orderByInfos.iterator();
  OrderByInfo orderByInfo;
  while (iter.hasNext()) {
    StringBuilder sb=StringBuilderProvider.getEmptyStringBuilder();
    queryGenerator.setQueryBuffer(sb);
    orderByInfo=iter.next();
    String potentialSelectAlias=orderByInfo.getExpression().toString();
    AliasInfo aliasInfo=aliasManager.getAliasInfo(potentialSelectAlias);
    if (aliasInfo != null && aliasInfo instanceof SelectInfo) {
      SelectInfo selectInfo=(SelectInfo)aliasInfo;
      String expressionString=selectInfo.getExpression().toString().toUpperCase();
      if (!expressionString.startsWith(""String_Node_Str"") && !expressionString.startsWith(""String_Node_Str"") && !expressionString.startsWith(""String_Node_Str"")&& !expressionString.startsWith(""String_Node_Str"")&& !expressionString.startsWith(""String_Node_Str"")) {
        selectInfo.getExpression().accept(queryGenerator);
        groupByClauses.add(sb.toString());
      }
    }
 else {
      orderByInfo.getExpression().accept(queryGenerator);
      groupByClauses.add(sb.toString());
    }
  }
  return groupByClauses;
}","Set<String> buildGroupByClauses(){
  if (orderByInfos.isEmpty()) {
    return Collections.EMPTY_SET;
  }
  Set<String> groupByClauses=new LinkedHashSet<String>();
  Iterator<OrderByInfo> iter=orderByInfos.iterator();
  OrderByInfo orderByInfo;
  while (iter.hasNext()) {
    StringBuilder sb=StringBuilderProvider.getEmptyStringBuilder();
    queryGenerator.setQueryBuffer(sb);
    orderByInfo=iter.next();
    String potentialSelectAlias=orderByInfo.getExpression().toString();
    AliasInfo aliasInfo=aliasManager.getAliasInfo(potentialSelectAlias);
    if (aliasInfo != null && aliasInfo instanceof SelectInfo) {
      SelectInfo selectInfo=(SelectInfo)aliasInfo;
      String expressionString=selectInfo.getExpression().toString().toUpperCase();
      if (!expressionString.startsWith(""String_Node_Str"") && !expressionString.startsWith(""String_Node_Str"") && !expressionString.startsWith(""String_Node_Str"")&& !expressionString.startsWith(""String_Node_Str"")&& !expressionString.startsWith(""String_Node_Str"")) {
        selectInfo.getExpression().accept(queryGenerator);
        groupByClauses.add(sb.toString());
      }
    }
 else {
      orderByInfo.getExpression().accept(queryGenerator);
      groupByClauses.add(sb.toString());
    }
  }
  return groupByClauses;
}",0.9976359338061466
169048,"private CtConstructor findConstructor(CtClass superCc,MappingConstructor<?> constructor) throws NotFoundException {
  List<ParameterAttribute<?,?>> parameterAttributes=(List<ParameterAttribute<?,?>>)constructor.getParameterAttributes();
  CtClass[] parameterTypes=new CtClass[parameterAttributes.size()];
  for (int i=0; i < parameterAttributes.size(); i++) {
    parameterTypes[i]=pool.get(parameterAttributes.get(i).getJavaType().getName());
  }
  return superCc.getDeclaredConstructor(parameterTypes);
}","private <T>CtConstructor findConstructor(CtClass superCc,MappingConstructor<T> constructor) throws NotFoundException {
  List<ParameterAttribute<? super T,?>> parameterAttributes=constructor.getParameterAttributes();
  CtClass[] parameterTypes=new CtClass[parameterAttributes.size()];
  for (int i=0; i < parameterAttributes.size(); i++) {
    parameterTypes[i]=pool.get(parameterAttributes.get(i).getJavaType().getName());
  }
  return superCc.getDeclaredConstructor(parameterTypes);
}",0.9556451612903226
169049,"@Test public void testGetConstructorsInterfaceView() throws Exception {
  ViewMetamodel viewMetamodel=getViewMetamodel();
  ViewType<?> viewType=viewMetamodel.view(DocumentViewInterface.class);
  Set<MappingConstructor<?>> constructors=(Set<MappingConstructor<?>>)viewType.getConstructors();
  assertEquals(0,constructors.size());
}","@Test public void testGetConstructorsInterfaceView() throws Exception {
  ViewMetamodel viewMetamodel=getViewMetamodel();
  ViewType<DocumentViewInterface> viewType=viewMetamodel.view(DocumentViewInterface.class);
  Set<MappingConstructor<DocumentViewInterface>> constructors=viewType.getConstructors();
  assertEquals(0,constructors.size());
}",0.893491124260355
169050,"@Test public void testGetConstructorsClassView() throws Exception {
  ViewMetamodel viewMetamodel=getViewMetamodel();
  ViewType<?> viewType=viewMetamodel.view(DocumentViewAbstractClass.class);
  Set<MappingConstructor<?>> constructors=(Set<MappingConstructor<?>>)viewType.getConstructors();
  assertEquals(1,constructors.size());
  assertNotNull(viewType.getConstructor(Long.class,Integer.class));
  assertTrue(constructors.contains(viewType.getConstructor(Long.class,Integer.class)));
}","@Test public void testGetConstructorsClassView() throws Exception {
  ViewMetamodel viewMetamodel=getViewMetamodel();
  ViewType<DocumentViewAbstractClass> viewType=viewMetamodel.view(DocumentViewAbstractClass.class);
  Set<MappingConstructor<DocumentViewAbstractClass>> constructors=viewType.getConstructors();
  assertEquals(1,constructors.size());
  assertNotNull(viewType.getConstructor(Long.class,Integer.class));
  assertTrue(constructors.contains(viewType.getConstructor(Long.class,Integer.class)));
}",0.8594377510040161
169051,"@Test public void testMappingConstructor() throws Exception {
  ViewMetamodel viewMetamodel=getViewMetamodel();
  ViewType<?> viewType=viewMetamodel.view(DocumentViewAbstractClass.class);
  Set<MappingConstructor<?>> constructors=(Set<MappingConstructor<?>>)viewType.getConstructors();
  MappingConstructor<?> constructor=constructors.iterator().next();
  assertNotNull(constructor);
  assertEquals(2,constructor.getParameterAttributes().size());
  assertEquals(Long.class,constructor.getParameterAttributes().get(0).getJavaType());
  assertEquals(constructor,constructor.getParameterAttributes().get(0).getDeclaringConstructor());
  assertEquals(viewType,constructor.getParameterAttributes().get(0).getDeclaringType());
  assertEquals(0,constructor.getParameterAttributes().get(0).getIndex());
  assertFalse(constructor.getParameterAttributes().get(0).isSubquery());
  assertEquals(""String_Node_Str"",((MappingAttribute)constructor.getParameterAttributes().get(0)).getMapping());
  assertFalse(constructor.getParameterAttributes().get(0).isCollection());
  assertFalse(((SingularAttribute<?,?>)constructor.getParameterAttributes().get(0)).isQueryParameter());
  assertEquals(Integer.class,constructor.getParameterAttributes().get(1).getJavaType());
  assertEquals(constructor,constructor.getParameterAttributes().get(1).getDeclaringConstructor());
  assertEquals(viewType,constructor.getParameterAttributes().get(1).getDeclaringType());
  assertEquals(1,constructor.getParameterAttributes().get(1).getIndex());
  assertFalse(constructor.getParameterAttributes().get(1).isSubquery());
  assertEquals(""String_Node_Str"",((MappingAttribute)constructor.getParameterAttributes().get(1)).getMapping());
  assertFalse(constructor.getParameterAttributes().get(1).isCollection());
  assertTrue(((SingularAttribute<?,?>)constructor.getParameterAttributes().get(1)).isQueryParameter());
  assertEquals(DocumentViewAbstractClass.class.getConstructor(Long.class,Integer.class),constructor.getJavaConstructor());
  assertEquals(viewType,constructor.getDeclaringType());
}","@Test public void testMappingConstructor() throws Exception {
  ViewMetamodel viewMetamodel=getViewMetamodel();
  ViewType<DocumentViewAbstractClass> viewType=viewMetamodel.view(DocumentViewAbstractClass.class);
  Set<MappingConstructor<DocumentViewAbstractClass>> constructors=viewType.getConstructors();
  MappingConstructor<DocumentViewAbstractClass> constructor=constructors.iterator().next();
  assertNotNull(constructor);
  assertEquals(2,constructor.getParameterAttributes().size());
  assertEquals(Long.class,constructor.getParameterAttributes().get(0).getJavaType());
  assertEquals(constructor,constructor.getParameterAttributes().get(0).getDeclaringConstructor());
  assertEquals(viewType,constructor.getParameterAttributes().get(0).getDeclaringType());
  assertEquals(0,constructor.getParameterAttributes().get(0).getIndex());
  assertFalse(constructor.getParameterAttributes().get(0).isSubquery());
  assertEquals(""String_Node_Str"",((MappingAttribute)constructor.getParameterAttributes().get(0)).getMapping());
  assertFalse(constructor.getParameterAttributes().get(0).isCollection());
  assertFalse(((SingularAttribute<?,?>)constructor.getParameterAttributes().get(0)).isQueryParameter());
  assertEquals(Integer.class,constructor.getParameterAttributes().get(1).getJavaType());
  assertEquals(constructor,constructor.getParameterAttributes().get(1).getDeclaringConstructor());
  assertEquals(viewType,constructor.getParameterAttributes().get(1).getDeclaringType());
  assertEquals(1,constructor.getParameterAttributes().get(1).getIndex());
  assertFalse(constructor.getParameterAttributes().get(1).isSubquery());
  assertEquals(""String_Node_Str"",((MappingAttribute)constructor.getParameterAttributes().get(1)).getMapping());
  assertFalse(constructor.getParameterAttributes().get(1).isCollection());
  assertTrue(((SingularAttribute<?,?>)constructor.getParameterAttributes().get(1)).isQueryParameter());
  assertEquals(DocumentViewAbstractClass.class.getConstructor(Long.class,Integer.class),constructor.getJavaConstructor());
  assertEquals(viewType,constructor.getDeclaringType());
}",0.9744947064485082
169052,"protected JoinNode createOrUpdateNode(JoinNode baseNode,String basePath,String joinPath,String alias,String field,JoinType joinType,boolean fetch,boolean implicit,boolean fromSelect){
  JoinNode currentNode=baseNode;
  StringBuilder currentPath=new StringBuilder(basePath);
  String[] pathElements=(joinPath + (!joinPath.isEmpty() && field != null ? ""String_Node_Str"" : ""String_Node_Str"") + (field == null ? ""String_Node_Str"" : field)).split(""String_Node_Str"");
  if (!fromSelect && !basePath.isEmpty()) {
    baseNode.setSelectOnly(false);
    if (basePath.contains(""String_Node_Str"")) {
      for (      String pathElem : basePath.split(""String_Node_Str"")) {
        currentNode=currentNode.getNodes().get(pathElem);
        currentNode.setSelectOnly(false);
      }
      currentNode=baseNode;
    }
  }
  Class<?> currentClass;
  if (baseNode.getPropertyClass() == null) {
    currentClass=clazz;
  }
 else {
    currentClass=baseNode.getPropertyClass();
  }
  for (int j=0; j < pathElements.length; j++) {
    String propertyName=pathElements[j];
    EntityType type=metamodel.entity(currentClass);
    Attribute attr=type.getAttribute(propertyName);
    if (attr == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ currentClass.getName());
    }
    boolean collectionValued=attr.isCollection();
    Class<?> resolvedFieldClass=ModelUtils.resolveFieldClass(attr);
    if (!ModelUtils.isJoinable(attr)) {
      LOG.fine(new StringBuilder(""String_Node_Str"").append(propertyName).append(""String_Node_Str"").append(currentClass.getName()).append(""String_Node_Str"").toString());
      break;
    }
    currentClass=resolvedFieldClass;
    JoinType modelAwareType;
    if ((attr.getPersistentAttributeType() == Attribute.PersistentAttributeType.MANY_TO_ONE || attr.getPersistentAttributeType() == Attribute.PersistentAttributeType.ONE_TO_ONE) && ((SingularAttribute)attr).isOptional() == false) {
      modelAwareType=JoinType.INNER;
    }
 else {
      modelAwareType=JoinType.LEFT;
    }
    if (j == pathElements.length - 1) {
      if (alias == null) {
        alias=propertyName;
      }
      if (joinType == null) {
        joinType=modelAwareType;
      }
      currentNode=getOrCreate(currentPath,currentNode,propertyName,resolvedFieldClass,alias,joinType,fetch,""String_Node_Str"",implicit,attr.isCollection());
    }
 else {
      currentNode=getOrCreate(currentPath,currentNode,propertyName,resolvedFieldClass,propertyName,modelAwareType,fetch,""String_Node_Str"",true,attr.isCollection());
    }
    if (fetch) {
      currentNode.setFetch(true);
    }
    if (!fromSelect) {
      currentNode.setSelectOnly(false);
    }
  }
  return currentNode;
}","protected JoinNode createOrUpdateNode(JoinNode baseNode,String basePath,String joinPath,String alias,String field,JoinType joinType,boolean fetch,boolean implicit,boolean fromSelect){
  JoinNode currentNode=baseNode;
  StringBuilder currentPath=new StringBuilder(basePath);
  String[] pathElements=(joinPath + (!joinPath.isEmpty() && field != null ? ""String_Node_Str"" : ""String_Node_Str"") + (field == null ? ""String_Node_Str"" : field)).split(""String_Node_Str"");
  if (!fromSelect && !basePath.isEmpty()) {
    baseNode.setSelectOnly(false);
    if (basePath.contains(""String_Node_Str"")) {
      for (      String pathElem : basePath.split(""String_Node_Str"")) {
        currentNode=currentNode.getNodes().get(pathElem);
        currentNode.setSelectOnly(false);
      }
      currentNode=baseNode;
    }
  }
  Class<?> currentClass;
  if (baseNode.getPropertyClass() == null) {
    currentClass=clazz;
  }
 else {
    currentClass=baseNode.getPropertyClass();
  }
  for (int j=0; j < pathElements.length; j++) {
    String propertyName=pathElements[j];
    ManagedType type=metamodel.managedType(currentClass);
    Attribute attr=type.getAttribute(propertyName);
    if (attr == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ currentClass.getName());
    }
    boolean collectionValued=attr.isCollection();
    Class<?> resolvedFieldClass=ModelUtils.resolveFieldClass(attr);
    if (!ModelUtils.isJoinable(attr)) {
      LOG.fine(new StringBuilder(""String_Node_Str"").append(propertyName).append(""String_Node_Str"").append(currentClass.getName()).append(""String_Node_Str"").toString());
      break;
    }
    currentClass=resolvedFieldClass;
    JoinType modelAwareType;
    if ((attr.getPersistentAttributeType() == Attribute.PersistentAttributeType.MANY_TO_ONE || attr.getPersistentAttributeType() == Attribute.PersistentAttributeType.ONE_TO_ONE) && ((SingularAttribute)attr).isOptional() == false) {
      modelAwareType=JoinType.INNER;
    }
 else {
      modelAwareType=JoinType.LEFT;
    }
    if (j == pathElements.length - 1) {
      if (alias == null) {
        alias=propertyName;
      }
      if (joinType == null) {
        joinType=modelAwareType;
      }
      currentNode=getOrCreate(currentPath,currentNode,propertyName,resolvedFieldClass,alias,joinType,fetch,""String_Node_Str"",implicit,attr.isCollection());
    }
 else {
      currentNode=getOrCreate(currentPath,currentNode,propertyName,resolvedFieldClass,propertyName,modelAwareType,fetch,""String_Node_Str"",true,attr.isCollection());
    }
    if (fetch) {
      currentNode.setFetch(true);
    }
    if (!fromSelect) {
      currentNode.setSelectOnly(false);
    }
  }
  return currentNode;
}",0.994473102431835
169053,"/** 
 * Starts a   {@link HavingOrBuilder} which is a predicate consisting only of disjunctiv connected predicates.When the builder finishes, the predicate is added to the parent predicate container represented by the type  {@linkplain X}.
 * @return The or predicate builder for the having clause
 */
public HavingOrBuilder<? extends T> havingOr();","/** 
 * Starts a   {@link HavingOrBuilder} which is a predicate consisting only of disjunctiv connected predicates.When the builder finishes, the predicate is added to the parent predicate container represented by the type  {@linkplain X}.
 * @return The or predicate builder for the having clause
 */
public HavingOrBuilder<T> havingOr();",0.9854651162790696
169054,"/** 
 * Starts a   {@link RestrictionBuilder} for a having predicate with the given expression as left hand expression.When the builder finishes, the predicate is added to the parent predicate container represented by the type  {@linkplain T}.
 * @param expression The left hand expression for a having predicate
 * @return The restriction builder for the given expression
 */
public RestrictionBuilder<? extends T> having(String expression);","/** 
 * Starts a   {@link RestrictionBuilder} for a having predicate with the given expression as left hand expression.When the builder finishes, the predicate is added to the parent predicate container represented by the type  {@linkplain T}.
 * @param expression The left hand expression for a having predicate
 * @return The restriction builder for the given expression
 */
public RestrictionBuilder<T> having(String expression);",0.988558352402746
169055,"/** 
 * Starts an exists predicate for the having clause with a subquery on the right hand side. When the builder finishes, the predicate is added to the parent predicate container represented by the type   {@linkplain T}.
 * @return The subquery initiator for building a subquery
 */
public SubqueryInitiator<? extends T> havingNotExists();","/** 
 * Starts an exists predicate for the having clause with a subquery on the right hand side. When the builder finishes, the predicate is added to the parent predicate container represented by the type   {@linkplain T}.
 * @return The subquery initiator for building a subquery
 */
public SubqueryInitiator<T> havingNotExists();",0.9851190476190476
169056,"/** 
 * Starts an exists predicate for the having clause with a subquery on the right hand side. When the builder finishes, the predicate is added to the parent predicate container represented by the type   {@linkplain T}.
 * @return The subquery initiator for building a subquery
 */
public SubqueryInitiator<? extends T> havingExists();","/** 
 * Starts an exists predicate for the having clause with a subquery on the right hand side. When the builder finishes, the predicate is added to the parent predicate container represented by the type   {@linkplain T}.
 * @return The subquery initiator for building a subquery
 */
public SubqueryInitiator<T> havingExists();",0.984984984984985
169057,"/** 
 * Starts an exists predicate for the where clause with a subquery on the right hand side. When the builder finishes, the predicate is added to the parent predicate container represented by the type   {@linkplain T}.
 * @return The subquery initiator for building a subquery
 */
public SubqueryInitiator<? extends T> whereExists();","/** 
 * Starts an exists predicate for the where clause with a subquery on the right hand side. When the builder finishes, the predicate is added to the parent predicate container represented by the type   {@linkplain T}.
 * @return The subquery initiator for building a subquery
 */
public SubqueryInitiator<T> whereExists();",0.9848942598187312
169058,"/** 
 * Starts a   {@link RestrictionBuilder} for a where predicate with the given expression as left hand expression.When the builder finishes, the predicate is added to the parent predicate container represented by the type  {@linkplain T}.
 * @param expression The left hand expression for a where predicate
 * @return The restriction builder for the given expression
 */
public RestrictionBuilder<? extends T> where(String expression);","/** 
 * Starts a   {@link RestrictionBuilder} for a where predicate with the given expression as left hand expression.When the builder finishes, the predicate is added to the parent predicate container represented by the type  {@linkplain T}.
 * @param expression The left hand expression for a where predicate
 * @return The restriction builder for the given expression
 */
public RestrictionBuilder<T> where(String expression);",0.988479262672811
169059,"/** 
 * Starts an not exists predicate for the where clause with a subquery on the right hand side. When the builder finishes, the predicate is added to the parent predicate container represented by the type   {@linkplain T}.
 * @return The subquery initiator for building a subquery
 */
public SubqueryInitiator<? extends T> whereNotExists();","/** 
 * Starts an not exists predicate for the where clause with a subquery on the right hand side. When the builder finishes, the predicate is added to the parent predicate container represented by the type   {@linkplain T}.
 * @return The subquery initiator for building a subquery
 */
public SubqueryInitiator<T> whereNotExists();",0.985207100591716
169060,"/** 
 * Starts a   {@link WhereOrBuilder} which is a predicate consisting only ofdisjunctiv connected predicates. When the builder finishes, the predicate is added to the parent predicate container represented by the type {@linkplain X}.
 * @return The or predicate builder for the where clause
 */
public WhereOrBuilder<? extends T> whereOr();","/** 
 * Starts a   {@link WhereOrBuilder} which is a predicate consisting only ofdisjunctiv connected predicates. When the builder finishes, the predicate is added to the parent predicate container represented by the type {@linkplain X}.
 * @return The or predicate builder for the where clause
 */
public WhereOrBuilder<T> whereOr();",0.9852507374631267
169061,"/** 
 * Starts a having and builder which connects it's predicates with the AND operator. When the builder finishes, the predicate is added to this predicate container as disjunct.
 * @return The having and builder
 */
public HavingAndBuilder<? extends HavingOrBuilder<T>> havingAnd();","/** 
 * Starts a having and builder which connects it's predicates with the AND operator. When the builder finishes, the predicate is added to this predicate container as disjunct.
 * @return The having and builder
 */
public HavingAndBuilder<HavingOrBuilder<T>> havingAnd();",0.9821428571428572
169062,"/** 
 * Returns the expressions that should be selected by a   {@link QueryBuilder}.
 * @return The expression that should be selected
 */
public String[] getExpressions();","/** 
 * Returns the expressions that should be selected by a   {@link QueryBuilder}.
 * @return The expression that should be selected
 */
public String[][] getExpressions();",0.9942196531791908
169063,"/** 
 * TODO: javadoc
 * @return
 */
public SubqueryBuilder<U> from(Class<?> clazz,String alias);","/** 
 * TODO: javadoc
 * @return
 */
public SubqueryBuilder<T> from(Class<?> clazz,String alias);",0.9896907216494846
169064,"@Override public PagedList<T> getResultList(){
  String countQueryString=getPageCountQueryString();
  TypedQuery<Long> countQuery=em.createQuery(countQueryString,Long.class);
  parameterizeQuery(countQuery);
  long totalSize=countQuery.getSingleResult();
  String idQueryString=getPageIdQueryString();
  Query idQuery=em.createQuery(idQueryString);
  parameterizeQuery(idQuery);
  List ids=idQuery.setFirstResult((int)firstRow).setMaxResults((int)pageSize).getResultList();
  parameterManager.addParameterMapping(idParamName,ids);
  PagedList<T> pagedResultList=new PagedListImpl<T>(super.getResultList(),totalSize);
  return pagedResultList;
}","@Override public PagedList<T> getResultList(){
  String countQueryString=getPageCountQueryString();
  TypedQuery<Long> countQuery=em.createQuery(countQueryString,Long.class);
  parameterizeQuery(countQuery);
  long totalSize=countQuery.getSingleResult();
  if (totalSize == 0L) {
    return new PagedListImpl<T>(totalSize);
  }
  String idQueryString=getPageIdQueryString();
  Query idQuery=em.createQuery(idQueryString);
  parameterizeQuery(idQuery);
  List ids=idQuery.setFirstResult((int)firstRow).setMaxResults((int)pageSize).getResultList();
  if (ids.isEmpty()) {
    return new PagedListImpl<T>(totalSize);
  }
  parameterManager.addParameterMapping(idParamName,ids);
  PagedList<T> pagedResultList=new PagedListImpl<T>(super.getResultList(),totalSize);
  return pagedResultList;
}",0.4497206703910614
169065,"@Override public BaseQueryBuilder<RestrictionBuilder<? extends HavingOrBuilder<T>>> havingExists(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public SubqueryInitiator<HavingOrBuilderImpl<RestrictionBuilder<? extends HavingOrBuilder<T>>>> havingExists(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9080459770114944
169066,"private static <T>Class<? extends T> createProxyClass(ViewType<T> viewType){
  Class<?> clazz=viewType.getJavaType();
  ClassPool pool=ClassPool.getDefault();
  CtClass cc=pool.makeClass(clazz.getName() + ""String_Node_Str"" + classCounter.getAndIncrement());
  CtClass superCc;
  try {
    superCc=pool.get(clazz.getName());
    if (clazz.isInterface()) {
      cc.addInterface(superCc);
    }
 else {
      cc.setSuperclass(superCc);
    }
    Set<MethodAttribute<? super T,?>> attributes=viewType.getAttributes();
    CtField[] attributeFields=new CtField[attributes.size()];
    CtClass[] attributeTypes=new CtClass[attributes.size()];
    int i=0;
    for (    MethodAttribute<?,?> attribute : attributes) {
      Method getter=attribute.getJavaMethod();
      Method setter=ReflectionUtils.getSetter(clazz,attribute.getName());
      CtField attributeField=new CtField(getType(pool,attribute),attribute.getName(),cc);
      attributeField.setModifiers(getModifiers(setter != null));
      String genericSignature=getGenericSignature(attribute,attributeField);
      if (genericSignature != null) {
        attributeField.setGenericSignature(genericSignature);
      }
      cc.addField(attributeField);
      boolean createBridges=!attribute.getJavaType().equals(getter.getReturnType());
      CtMethod attributeGetter=CtNewMethod.getter(getter.getName(),attributeField);
      if (genericSignature != null) {
        String getterGenericSignature=""String_Node_Str"" + genericSignature;
        attributeGetter.setGenericSignature(getterGenericSignature);
      }
      if (createBridges) {
        CtMethod getterBridge=createGetterBridge(cc,pool,getter,attributeGetter);
        cc.addMethod(getterBridge);
      }
      cc.addMethod(attributeGetter);
      if (setter != null) {
        CtMethod attributeSetter=CtNewMethod.setter(setter.getName(),attributeField);
        if (genericSignature != null) {
          String setterGenericSignature=""String_Node_Str"" + genericSignature + ""String_Node_Str"";
          attributeSetter.setGenericSignature(setterGenericSignature);
        }
        if (createBridges) {
          CtMethod setterBridge=createSetterBridge(cc,pool,setter,attributeSetter);
          cc.addMethod(setterBridge);
        }
        cc.addMethod(attributeSetter);
      }
      attributeFields[i]=attributeField;
      attributeTypes[i]=attributeField.getType();
      i++;
    }
    if (clazz.isInterface()) {
      cc.addConstructor(createConstructor(cc,attributeFields,attributeTypes));
    }
    Set<MappingConstructor<T>> constructors=viewType.getConstructors();
    for (    MappingConstructor<?> constructor : constructors) {
      int constructorParameterCount=attributes.size() + constructor.getParameterAttributes().size();
      CtClass[] constructorAttributeTypes=new CtClass[constructorParameterCount];
      System.arraycopy(attributeTypes,0,constructorAttributeTypes,0,attributes.size());
      CtConstructor superConstructor=findConstructor(pool,superCc,constructor);
      System.arraycopy(superConstructor.getParameterTypes(),0,constructorAttributeTypes,attributes.size(),superConstructor.getParameterTypes().length);
      cc.addConstructor(createConstructor(cc,attributeFields,constructorAttributeTypes));
    }
    return cc.toClass();
  }
 catch (  Exception ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}","private static <T>Class<? extends T> createProxyClass(ViewType<T> viewType){
  Class<?> clazz=viewType.getJavaType();
  ClassPool pool=ClassPool.getDefault();
  CtClass cc=pool.makeClass(clazz.getName() + ""String_Node_Str"" + classCounter.getAndIncrement());
  CtClass superCc;
  ClassPath classPath=new ClassClassPath(clazz);
  pool.insertClassPath(classPath);
  try {
    superCc=pool.get(clazz.getName());
    if (clazz.isInterface()) {
      cc.addInterface(superCc);
    }
 else {
      cc.setSuperclass(superCc);
    }
    Set<MethodAttribute<? super T,?>> attributes=viewType.getAttributes();
    CtField[] attributeFields=new CtField[attributes.size()];
    CtClass[] attributeTypes=new CtClass[attributes.size()];
    int i=0;
    for (    MethodAttribute<?,?> attribute : attributes) {
      Method getter=attribute.getJavaMethod();
      Method setter=ReflectionUtils.getSetter(clazz,attribute.getName());
      CtField attributeField=new CtField(getType(pool,attribute),attribute.getName(),cc);
      attributeField.setModifiers(getModifiers(setter != null));
      String genericSignature=getGenericSignature(attribute,attributeField);
      if (genericSignature != null) {
        attributeField.setGenericSignature(genericSignature);
      }
      cc.addField(attributeField);
      boolean createBridges=!attribute.getJavaType().equals(getter.getReturnType());
      CtMethod attributeGetter=CtNewMethod.getter(getter.getName(),attributeField);
      if (genericSignature != null) {
        String getterGenericSignature=""String_Node_Str"" + genericSignature;
        attributeGetter.setGenericSignature(getterGenericSignature);
      }
      if (createBridges) {
        CtMethod getterBridge=createGetterBridge(cc,pool,getter,attributeGetter);
        cc.addMethod(getterBridge);
      }
      cc.addMethod(attributeGetter);
      if (setter != null) {
        CtMethod attributeSetter=CtNewMethod.setter(setter.getName(),attributeField);
        if (genericSignature != null) {
          String setterGenericSignature=""String_Node_Str"" + genericSignature + ""String_Node_Str"";
          attributeSetter.setGenericSignature(setterGenericSignature);
        }
        if (createBridges) {
          CtMethod setterBridge=createSetterBridge(cc,pool,setter,attributeSetter);
          cc.addMethod(setterBridge);
        }
        cc.addMethod(attributeSetter);
      }
      attributeFields[i]=attributeField;
      attributeTypes[i]=attributeField.getType();
      i++;
    }
    if (clazz.isInterface()) {
      cc.addConstructor(createConstructor(cc,attributeFields,attributeTypes));
    }
    Set<MappingConstructor<T>> constructors=viewType.getConstructors();
    for (    MappingConstructor<?> constructor : constructors) {
      int constructorParameterCount=attributes.size() + constructor.getParameterAttributes().size();
      CtClass[] constructorAttributeTypes=new CtClass[constructorParameterCount];
      System.arraycopy(attributeTypes,0,constructorAttributeTypes,0,attributes.size());
      CtConstructor superConstructor=findConstructor(pool,superCc,constructor);
      System.arraycopy(superConstructor.getParameterTypes(),0,constructorAttributeTypes,attributes.size(),superConstructor.getParameterTypes().length);
      cc.addConstructor(createConstructor(cc,attributeFields,constructorAttributeTypes));
    }
    return cc.toClass();
  }
 catch (  Exception ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
 finally {
    pool.removeClassPath(classPath);
  }
}",0.9802325581395348
169067,"@Override public T notIn(List<?> values){
  if (values == null)   throw new NullPointerException();
  return chain(new NotPredicate(new InPredicate(leftExpression,new ParameterExpression(values))));
}","@Override public SubqueryBuilder<T> notIn(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.4285714285714285
169068,"@Override public T in(List<?> values){
  if (values == null)   throw new NullPointerException();
  return chain(new InPredicate(leftExpression,new ParameterExpression(values)));
}","@Override public SubqueryBuilder<T> in(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.4295774647887324
169069,"@Override public BinaryPredicateBuilder<T> all(){
  this.quantifier=PredicateQuantifier.ALL;
  return this;
}","@Override public SubqueryBuilder<T> all(){
  this.quantifier=PredicateQuantifier.ALL;
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.6821705426356589
169070,"@Override public BinaryPredicateBuilder<T> any(){
  this.quantifier=PredicateQuantifier.ANY;
  return this;
}","@Override public SubqueryBuilder<T> any(){
  this.quantifier=PredicateQuantifier.ANY;
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.6821705426356589
169071,"/** 
 * Process Group By queries results
 */
private void processAggregation(ProjectParsed queryData,ResultSet resultSet,SearchResponse response) throws ExecutionException {
  Map<Selector,String> alias=returnAlias(queryData);
  for (  Aggregation aggregation : response.getAggregations()) {
    InternalTerms terms=(InternalTerms)aggregation;
    processTermAggregation(queryData,resultSet,alias,terms);
  }
  if (queryData.getOrderBy() != null && (queryData.getOrderBy().getIds().size() > 1 || (queryData.getSelect().isDistinct() && queryData.getSelect().getColumnMap().size() > 1) || queryData.getGroupBy().getIds().size() > 1)) {
    List<OrderByClause> fields=queryData.getOrderBy().getIds();
    Collections.sort(resultSet.getRows(),new RowSorter(fields));
  }
  if (queryData.getLimit() != null) {
    int limit=queryData.getLimit().getLimit();
    if (resultSet.getRows().size() > limit) {
      List<Row> limitedResult=resultSet.getRows().subList(0,limit);
      resultSet.setRows(new ArrayList<>(limitedResult));
    }
  }
}","/** 
 * Process Group By queries results
 */
private void processAggregation(ProjectParsed queryData,ResultSet resultSet,SearchResponse response) throws ExecutionException {
  Map<Selector,String> alias=returnAlias(queryData);
  for (  Aggregation aggregation : response.getAggregations()) {
    InternalTerms terms=(InternalTerms)aggregation;
    processTermAggregation(queryData,resultSet,alias,terms);
  }
  if (queryData.getOrderBy() != null && (queryData.getOrderBy().getIds().size() > 1 || (queryData.getSelect().isDistinct() && queryData.getSelect().getColumnMap().size() > 1) || (queryData.getGroupBy() != null && queryData.getGroupBy().getIds().size() > 1))) {
    List<OrderByClause> fields=queryData.getOrderBy().getIds();
    Collections.sort(resultSet.getRows(),new RowSorter(fields));
  }
  if (queryData.getLimit() != null) {
    int limit=queryData.getLimit().getLimit();
    if (resultSet.getRows().size() > limit) {
      List<Row> limitedResult=resultSet.getRows().subList(0,limit);
      resultSet.setRows(new ArrayList<>(limitedResult));
    }
  }
}",0.9828897338403042
169072,"/** 
 * This method execute a query in elasticSearch.
 * @param elasticClient        the elasticSearch Client.
 * @param actionRequestBuilder the query to execute.
 * @param queryData            the queryData.
 * @return the query result.
 */
public QueryResult executeQuery(Client elasticClient,ActionRequestBuilder actionRequestBuilder,ProjectParsed queryData) throws ExecutionException {
  QueryResult queryResult=null;
  SearchRequestBuilder requestBuilder=(SearchRequestBuilder)actionRequestBuilder;
  try {
    ResultSet resultSet=new ResultSet();
    SearchResponse response=((SearchRequestBuilder)requestBuilder).execute().actionGet();
    resultSet.setColumnMetadata(crossdatadataCreator.createColumnMetadata(queryData));
    if (queryData.getGroupBy() != null && !queryData.getGroupBy().getIds().isEmpty()) {
      processAggregation(queryData,resultSet,response);
    }
 else     if (SelectorUtils.hasFunction(queryData.getSelect().getColumnMap(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
      processAggregationFucntion(queryData,resultSet,response);
    }
 else {
      processResults(queryData,resultSet,response);
    }
    queryResult=QueryResult.createQueryResult(resultSet,0,true);
  }
 catch (  IndexMissingException e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + e.getMessage());
    }
    queryResult=QueryResult.createQueryResult(new ResultSet(),0,true);
  }
  return queryResult;
}","/** 
 * This method execute a query in elasticSearch.
 * @param elasticClient        the elasticSearch Client.
 * @param actionRequestBuilder the query to execute.
 * @param queryData            the queryData.
 * @return the query result.
 */
public QueryResult executeQuery(Client elasticClient,ActionRequestBuilder actionRequestBuilder,ProjectParsed queryData) throws ExecutionException {
  QueryResult queryResult;
  SearchRequestBuilder requestBuilder=(SearchRequestBuilder)actionRequestBuilder;
  try {
    ResultSet resultSet=new ResultSet();
    SearchResponse response=requestBuilder.execute().actionGet();
    resultSet.setColumnMetadata(crossdatadataCreator.createColumnMetadata(queryData));
    if (queryData.getGroupBy() != null && !queryData.getGroupBy().getIds().isEmpty()) {
      processAggregation(queryData,resultSet,response);
    }
 else     if (SelectorUtils.hasFunction(queryData.getSelect().getColumnMap(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
      processAggregationFucntion(queryData,resultSet,response);
    }
 else {
      processResults(queryData,resultSet,response);
    }
    queryResult=QueryResult.createQueryResult(resultSet,0,true);
  }
 catch (  IndexMissingException e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + e.getMessage());
    }
    queryResult=QueryResult.createQueryResult(new ResultSet(),0,true);
  }
  return queryResult;
}",0.8884367582231265
169073,"private void processSubAggregation(ProjectParsed queryData,List<Aggregation> aggregations,Map<Selector,String> alias,Map<String,Object> fields,ResultSet resultSet) throws ExecutionException {
  for (  Aggregation subAgg : aggregations) {
    if (subAgg instanceof InternalTerms) {
      InternalTerms termsSubAgg=(InternalTerms)subAgg;
      for (      Terms.Bucket subBucker : termsSubAgg.getBuckets()) {
        if (subBucker.getAggregations().iterator().hasNext()) {
          fields.put(termsSubAgg.getName(),geyBucketValue(subBucker));
          processSubAggregation(queryData,subBucker.getAggregations().asList(),alias,fields,resultSet);
          addResult(resultSet,buildRow(queryData,alias,fields));
        }
 else {
          fields.put(termsSubAgg.getName(),geyBucketValue(subBucker));
          addResult(resultSet,buildRow(queryData,alias,fields));
        }
      }
    }
 else     if (subAgg instanceof NumericMetricsAggregation) {
      NumericMetricsAggregation.SingleValue numericAggregation=(NumericMetricsAggregation.SingleValue)subAgg;
      fields.put(subAgg.getName(),numericAggregation.value());
      addResult(resultSet,buildRow(queryData,alias,fields));
    }
  }
}","private void processSubAggregation(ProjectParsed queryData,List<Aggregation> aggregations,Map<Selector,String> alias,Map<String,Object> fields,ResultSet resultSet) throws ExecutionException {
  for (  Aggregation subAgg : aggregations) {
    if (subAgg instanceof InternalTerms) {
      InternalTerms termsSubAgg=(InternalTerms)subAgg;
      for (      Terms.Bucket subBucker : termsSubAgg.getBuckets()) {
        if (subBucker.getAggregations().iterator().hasNext()) {
          fields.put(termsSubAgg.getName(),geyBucketValue(subBucker));
          processSubAggregation(queryData,subBucker.getAggregations().asList(),alias,fields,resultSet);
          addResult(resultSet,buildRow(queryData,alias,fields));
        }
 else {
          fields.put(termsSubAgg.getName(),geyBucketValue(subBucker));
          addResult(resultSet,buildRow(queryData,alias,fields));
        }
      }
      addResult(resultSet,buildRow(queryData,alias,fields));
    }
 else     if (subAgg instanceof NumericMetricsAggregation) {
      NumericMetricsAggregation.SingleValue numericAggregation=(NumericMetricsAggregation.SingleValue)subAgg;
      fields.put(subAgg.getName(),numericAggregation.value());
    }
  }
  addResult(resultSet,buildRow(queryData,alias,fields));
}",0.7803680981595092
169074,"/** 
 * Process Group By queries results
 */
private void processAggregation(ProjectParsed queryData,ResultSet resultSet,SearchResponse response) throws ExecutionException {
  Map<Selector,String> alias=returnAlias(queryData);
  for (  Aggregation aggregation : response.getAggregations()) {
    InternalTerms terms=(InternalTerms)aggregation;
    processTermAggregation(queryData,resultSet,alias,terms);
  }
  if (queryData.getOrderBy() != null && !queryData.getOrderBy().getIds().isEmpty()) {
    List<OrderByClause> fields=queryData.getOrderBy().getIds();
    Collections.sort(resultSet.getRows(),new RowSorter(fields));
  }
  if (queryData.getLimit() != null) {
    int limit=queryData.getLimit().getLimit();
    List<Row> limitedResult=resultSet.getRows().subList(0,limit);
    resultSet.setRows(new ArrayList<>(limitedResult));
  }
}","/** 
 * Process Group By queries results
 */
private void processAggregation(ProjectParsed queryData,ResultSet resultSet,SearchResponse response) throws ExecutionException {
  Map<Selector,String> alias=returnAlias(queryData);
  for (  Aggregation aggregation : response.getAggregations()) {
    InternalTerms terms=(InternalTerms)aggregation;
    processTermAggregation(queryData,resultSet,alias,terms);
  }
  if (queryData.getOrderBy() != null && queryData.getOrderBy().getIds().size() > 1) {
    List<OrderByClause> fields=queryData.getOrderBy().getIds();
    Collections.sort(resultSet.getRows(),new RowSorter(fields));
  }
  if (queryData.getLimit() != null) {
    int limit=queryData.getLimit().getLimit();
    if (resultSet.getRows().size() > limit) {
      List<Row> limitedResult=resultSet.getRows().subList(0,limit);
      resultSet.setRows(new ArrayList<>(limitedResult));
    }
  }
}",0.956170703575548
169075,"/** 
 * Method that creates the Filter part of the query.
 * @param queryData the querydata.
 */
private void createFilter(ProjectParsed queryData) throws UnsupportedException, ExecutionException {
  QueryBuilderFactory queryBuilderFactory=new QueryBuilderFactory();
  QueryBuilder queryBuilder=queryBuilderFactory.createBuilder(queryData.getMatchList(),queryData.getFunctionFilters());
  if (!queryData.getFilter().isEmpty()) {
    FilterBuilderCreator filterBuilderCreator=new FilterBuilderCreator();
    FilterBuilder filterBuilder=filterBuilderCreator.createFilterBuilder(queryData.getFilter());
    queryBuilder=QueryBuilders.filteredQuery(queryBuilder,filterBuilder);
  }
  if (!queryData.getDisjunctionList().isEmpty()) {
    FilterBuilderCreator filterBuilderCreator=new FilterBuilderCreator();
    FilterBuilder filterBuilder=filterBuilderCreator.createFilterBuilderForDisjunctions(queryData.getDisjunctionList());
    queryBuilder=QueryBuilders.filteredQuery(queryBuilder,filterBuilder);
  }
  requestBuilder.setQuery(queryBuilder);
}","/** 
 * Method that creates the Filter part of the query.
 * @param queryData the querydata.
 */
private void createFilter(ProjectParsed queryData) throws UnsupportedException, ExecutionException {
  QueryBuilder queryBuilder=new QueryBuilderFactory().createBuilder(queryData.getMatchList(),queryData.getFunctionFilters());
  if (!queryData.getFilter().isEmpty()) {
    FilterBuilder filterBuilder=new FilterBuilderCreator().createFilterBuilder(queryData.getFilter());
    queryBuilder=QueryBuilders.filteredQuery(queryBuilder,filterBuilder);
  }
  if (!queryData.getDisjunctionList().isEmpty()) {
    FilterBuilder filterBuilder=new FilterBuilderCreator().createFilterBuilderForDisjunctions(queryData.getDisjunctionList());
    queryBuilder=QueryBuilders.filteredQuery(queryBuilder,filterBuilder);
  }
  requestBuilder.setQuery(queryBuilder);
}",0.8088935944944415
169076,"/** 
 * @param elasticClient the elasticSearch Client.
 * @param queryData     the query representation,
 * @return The searchBuilder.
 * @throws UnsupportedException if the operation is not supported.
 * @throws ExecutionException   if the method fails during execution.
 */
public ActionRequestBuilder buildQuery(Client elasticClient,ProjectParsed queryData) throws UnsupportedException, ExecutionException {
  if (null == elasticClient) {
    throw new ExecutionException(""String_Node_Str"");
  }
  if (null == queryData) {
    throw new ExecutionException(""String_Node_Str"");
  }
  createRequestBuilder(elasticClient);
  createProjection(queryData.getProject());
  createFilter(queryData);
  if (isAggregation(queryData)) {
    createNestedTermAggregation(queryData,queryData.getGroupBy().getIds());
  }
 else   if (queryData.getSelect() != null && queryData.getSelect().isDistinct() && !useCardinality(queryData.getSelect())) {
    createNestedTermAggregation(queryData,queryData.getSelect().getColumnMap().keySet());
  }
 else {
    createSelect(queryData.getSelect());
    createSort(queryData.getOrderBy());
    createLimit(queryData.getLimit());
  }
  logQuery();
  return requestBuilder;
}","/** 
 * @param elasticClient the elasticSearch Client.
 * @param queryData     the query representation,
 * @return The searchBuilder.
 * @throws UnsupportedException if the operation is not supported.
 * @throws ExecutionException   if the method fails during execution.
 */
public ActionRequestBuilder buildQuery(Client elasticClient,ProjectParsed queryData) throws UnsupportedException, ExecutionException {
  if (null == elasticClient) {
    throw new ExecutionException(""String_Node_Str"");
  }
  if (null == queryData) {
    throw new ExecutionException(""String_Node_Str"");
  }
  createRequestBuilder(elasticClient);
  createProjection(queryData.getProject());
  createFilter(queryData);
  if (isAggregation(queryData)) {
    createNestedTermAggregation(queryData,queryData.getGroupBy().getIds());
  }
 else   if (isDistinctAggregation(queryData)) {
    createNestedTermAggregation(queryData,queryData.getSelect().getColumnMap().keySet());
  }
 else {
    createSelect(queryData.getSelect());
    createSort(queryData.getOrderBy());
    createLimit(queryData.getLimit());
  }
  logQuery();
  return requestBuilder;
}",0.940060370849504
169077,"/** 
 * Method that creates the appropriate nested term aggregation properties to elasticsearch based on those specified by the ""group by"" clause
 * @throws ExecutionException
 */
private void createNestedTermAggregation(ProjectParsed queryData,Collection<Selector> groupingSelectors) throws ExecutionException {
  Select select=queryData.getSelect();
  OrderBy orderBy=queryData.getOrderBy();
  Integer limit=null;
  Integer internalLimit=10;
  if (queryData.getLimit() != null) {
    internalLimit=limit=queryData.getLimit().getLimit();
  }
  if (groupingSelectors.size() > 1 && orderBy != null && !orderBy.getIds().isEmpty()) {
    for (    OrderByClause clause : orderBy.getIds()) {
      if (clause.getSelector() instanceof FunctionSelector) {
        internalLimit=0;
        break;
      }
    }
  }
  Map<String,OrderByClause> orderByMap=new HashMap<>();
  if (orderBy != null && !orderBy.getIds().isEmpty()) {
    for (    OrderByClause clause : orderBy.getIds()) {
      orderByMap.put(SelectorUtils.calculateAlias(clause.getSelector()),clause);
    }
  }
  AggregationBuilder aggregationBuilder=null;
  AggregationBuilder lastAggregationBuilder=null;
  for (  Selector term : groupingSelectors) {
    String fieldName=SelectorUtils.getSelectorFieldName(term);
    if (aggregationBuilder == null) {
      lastAggregationBuilder=aggregationBuilder=AggregationBuilders.terms(fieldName).field(fieldName);
      if (limit != null) {
        ((TermsBuilder)lastAggregationBuilder).size(limit);
      }
      sortSubAggregation(fieldName,orderByMap,(TermsBuilder)lastAggregationBuilder);
    }
 else {
      lastAggregationBuilder=AggregationBuilders.terms(fieldName).field(fieldName);
      ((TermsBuilder)lastAggregationBuilder).size(internalLimit);
      sortSubAggregation(fieldName,orderByMap,(TermsBuilder)lastAggregationBuilder);
      aggregationBuilder.subAggregation(lastAggregationBuilder);
    }
  }
  if (aggregationBuilder != null) {
    for (    Selector selector : select.getColumnMap().keySet()) {
      if (SelectorUtils.isFunction(selector,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
        FunctionSelector functionSelector=(FunctionSelector)selector;
        String fieldName=SelectorUtils.calculateAlias(selector);
        if (orderByMap.containsKey(fieldName)) {
          boolean asc=orderByMap.get(fieldName).getDirection().equals(OrderDirection.ASC);
          ((TermsBuilder)lastAggregationBuilder).order(Terms.Order.aggregation(fieldName,asc));
        }
        lastAggregationBuilder.subAggregation(buildAggregation((FunctionSelector)selector,functionSelector.getFunctionName().toLowerCase()));
      }
    }
  }
  requestBuilder.addAggregation(aggregationBuilder);
  requestBuilder.setSize(0);
}","/** 
 * Method that creates the appropriate nested term aggregation properties to elasticsearch based on those specified by the ""group by"" clause
 * @throws ExecutionException
 */
private void createNestedTermAggregation(ProjectParsed queryData,Collection<Selector> groupingSelectors) throws ExecutionException {
  OrderBy orderBy=queryData.getOrderBy();
  Integer limit=null;
  Integer internalLimit=10;
  if (queryData.getLimit() != null) {
    internalLimit=limit=queryData.getLimit().getLimit();
  }
  if (groupingSelectors.size() > 1 && orderBy != null && !orderBy.getIds().isEmpty()) {
    for (    OrderByClause clause : orderBy.getIds()) {
      if (clause.getSelector() instanceof FunctionSelector) {
        internalLimit=0;
        break;
      }
    }
  }
  AggregationBuilder aggregationBuilder=buildAggregationBuilder(groupingSelectors,limit,internalLimit,queryData);
  requestBuilder.addAggregation(aggregationBuilder);
  requestBuilder.setSize(0);
}",0.4175120128136679
169078,"/** 
 * Method that adds the appropriate returning fields to the elasticsearch query from those specified by the select clause
 * @param select SELECT clause including fields to be returned
 */
private void createSelect(Select select){
  if (null != select && null != select.getColumnMap() && !select.getColumnMap().isEmpty()) {
    Set<Selector> selectors=select.getColumnMap().keySet();
    if (isfucntion(selectors,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
      for (      Selector selector : selectors) {
        if (SelectorUtils.isFunction(selector,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
          FunctionSelector functionSelector=(FunctionSelector)selector;
          if (select.isDistinct() && isfucntion(selectors,""String_Node_Str"")) {
            FunctionSelector function=(FunctionSelector)selector;
            Selector field=function.getFunctionColumns().getSelectorList().get(0);
            requestBuilder.addAggregation(AggregationBuilders.cardinality(function.getAlias()).field(SelectorUtils.getSelectorFieldName(field)));
          }
 else {
            requestBuilder.addAggregation(buildAggregation((FunctionSelector)selector,functionSelector.getFunctionName().toLowerCase().toString()));
          }
        }
      }
      requestBuilder.setSize(0);
      return;
    }
    for (    Selector selector : selectors) {
      String fieldName=SelectorUtils.getSelectorFieldName(selector);
      if (null != fieldName) {
        requestBuilder.addField(fieldName);
      }
    }
  }
}","/** 
 * Method that adds the appropriate returning fields to the elasticsearch query from those specified by the select clause
 * @param select SELECT clause including fields to be returned
 */
private void createSelect(Select select){
  if (null != select && null != select.getColumnMap() && !select.getColumnMap().isEmpty()) {
    Set<Selector> selectors=select.getColumnMap().keySet();
    if (isFunction(selectors,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
      for (      Selector selector : selectors) {
        if (SelectorUtils.isFunction(selector,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
          FunctionSelector functionSelector=(FunctionSelector)selector;
          if (select.isDistinct() && isFunction(selectors,""String_Node_Str"")) {
            FunctionSelector function=(FunctionSelector)selector;
            Selector field=function.getFunctionColumns().getSelectorList().get(0);
            requestBuilder.addAggregation(AggregationBuilders.cardinality(function.getAlias()).field(SelectorUtils.getSelectorFieldName(field)));
          }
 else {
            requestBuilder.addAggregation(buildAggregation((FunctionSelector)selector,functionSelector.getFunctionName().toLowerCase().toString()));
          }
        }
      }
      requestBuilder.setSize(0);
      return;
    }
    for (    Selector selector : selectors) {
      String fieldName=SelectorUtils.getSelectorFieldName(selector);
      if (null != fieldName) {
        requestBuilder.addField(fieldName);
      }
    }
  }
}",0.9950310559006212
169079,"public FilterBuilder createFilterBuilderForDisjunctions(Collection<Disjunction> disjunctions) throws UnsupportedException, ExecutionException {
  if (disjunctions.size() > 1) {
    List<BoolFilterBuilder> external=new ArrayList<>();
    for (    Disjunction disjunction : disjunctions) {
      List<FilterBuilder> internal=new ArrayList<>();
      for (      List<ITerm> terms : disjunction.getTerms()) {
        List<FilterBuilder> internal2=new ArrayList<>();
        Collection<Disjunction> internalDisjunction=new ArrayList<>();
        for (        ITerm term : terms) {
          if (term instanceof Filter) {
            internal2.add(handleCompareFilter((Filter)term));
          }
 else           if (term instanceof Disjunction) {
            internalDisjunction.add((Disjunction)term);
          }
        }
        internal.addAll(internal2);
        if (!internalDisjunction.isEmpty()) {
          internal.add(createFilterBuilderForDisjunctions(internalDisjunction));
        }
      }
      external.add(FilterBuilders.boolFilter().should(internal.toArray(new FilterBuilder[]{})));
    }
    BoolFilterBuilder boolFilterBuilder=FilterBuilders.boolFilter();
    boolFilterBuilder.must(external.toArray(new BoolFilterBuilder[]{}));
    return boolFilterBuilder;
  }
 else {
    BoolFilterBuilder boolFilterBuilder=FilterBuilders.boolFilter();
    Disjunction disjunction=disjunctions.iterator().next();
    List<FilterBuilder> internal=new ArrayList<>();
    for (    List<ITerm> terms : disjunction.getTerms()) {
      List<FilterBuilder> internal2=new ArrayList<>();
      Collection<Disjunction> internalDisjunction=new ArrayList<>();
      for (      ITerm term : terms) {
        if (term instanceof Filter) {
          internal2.add(handleCompareFilter((Filter)term));
        }
 else         if (term instanceof Disjunction) {
          internalDisjunction.add((Disjunction)term);
        }
      }
      internal.add(FilterBuilders.boolFilter().must(internal2.toArray(new FilterBuilder[]{})));
      if (!internalDisjunction.isEmpty()) {
        internal.add(createFilterBuilderForDisjunctions(internalDisjunction));
      }
    }
    boolFilterBuilder.should(internal.toArray(new FilterBuilder[]{}));
    return boolFilterBuilder;
  }
}","public FilterBuilder createFilterBuilderForDisjunctions(Collection<Disjunction> disjunctions) throws UnsupportedException, ExecutionException {
  if (disjunctions.size() > 1) {
    List<BoolFilterBuilder> external=new ArrayList<>();
    for (    Disjunction disjunction : disjunctions) {
      List<FilterBuilder> internal=new ArrayList<>();
      for (      List<ITerm> terms : disjunction.getTerms()) {
        List<FilterBuilder> internal2=new ArrayList<>();
        Collection<Disjunction> internalDisjunction=new ArrayList<>();
        for (        ITerm term : terms) {
          if (term instanceof Filter) {
            internal2.add(handleCompareFilter((Filter)term));
          }
 else           if (term instanceof Disjunction) {
            internalDisjunction.add((Disjunction)term);
          }
        }
        internal.addAll(internal2);
        if (!internalDisjunction.isEmpty()) {
          internal.add(createFilterBuilderForDisjunctions(internalDisjunction));
        }
      }
      external.add(FilterBuilders.boolFilter().should(internal.toArray(new FilterBuilder[]{})));
    }
    BoolFilterBuilder boolFilterBuilder=FilterBuilders.boolFilter();
    boolFilterBuilder.must(external.toArray(new BoolFilterBuilder[]{}));
    return boolFilterBuilder;
  }
 else {
    BoolFilterBuilder boolFilterBuilder=FilterBuilders.boolFilter();
    Disjunction disjunction=disjunctions.iterator().next();
    List<FilterBuilder> internal=new ArrayList<>();
    for (    List<ITerm> terms : disjunction.getTerms()) {
      List<FilterBuilder> internal2=new ArrayList<>();
      Collection<Disjunction> internalDisjunction=new ArrayList<>();
      for (      ITerm term : terms) {
        if (term instanceof Filter) {
          internal2.add(handleCompareFilter((Filter)term));
        }
 else         if (term instanceof Disjunction) {
          internalDisjunction.add((Disjunction)term);
        }
      }
      if (!internal2.isEmpty()) {
        internal.add(FilterBuilders.boolFilter().must(internal2.toArray(new FilterBuilder[]{})));
      }
      if (!internalDisjunction.isEmpty()) {
        internal.add(createFilterBuilderForDisjunctions(internalDisjunction));
      }
    }
    boolFilterBuilder.should(internal.toArray(new FilterBuilder[]{}));
    return boolFilterBuilder;
  }
}",0.9903508771929824
169080,"/** 
 * Creates the AggregationBuilder for a GroupBy or a Distinct
 */
private AggregationBuilder buildAggregationBuilder(Collection<Selector> groupingSelectors,Integer limit,Integer internalLimit,ProjectParsed queryData){
  OrderBy orderBy=queryData.getOrderBy();
  Select select=queryData.getSelect();
  Map<String,OrderByClause> orderByMap=getOrderByClauseMap(orderBy);
  AggregationBuilder aggregationBuilder=null;
  AggregationBuilder lastAggregationBuilder=null;
  for (  Selector term : groupingSelectors) {
    String fieldName=SelectorUtils.getSelectorFieldName(term);
    if (aggregationBuilder == null) {
      lastAggregationBuilder=aggregationBuilder=AggregationBuilders.terms(fieldName).field(fieldName);
      if (limit != null) {
        ((TermsBuilder)lastAggregationBuilder).size(limit);
      }
      sortSubAggregation(fieldName,orderByMap,(TermsBuilder)lastAggregationBuilder);
    }
 else {
      lastAggregationBuilder=AggregationBuilders.terms(fieldName).field(fieldName);
      ((TermsBuilder)lastAggregationBuilder).size(internalLimit);
      sortSubAggregation(fieldName,orderByMap,(TermsBuilder)lastAggregationBuilder);
      aggregationBuilder.subAggregation(lastAggregationBuilder);
    }
  }
  if (aggregationBuilder != null) {
    addFunctionAggregation(select,orderByMap,lastAggregationBuilder);
  }
  return aggregationBuilder;
}","/** 
 * Creates the AggregationBuilder for a GroupBy or a Distinct
 */
private AggregationBuilder buildAggregationBuilder(Collection<Selector> groupingSelectors,Integer limit,Integer internalLimit,ProjectParsed queryData){
  OrderBy orderBy=queryData.getOrderBy();
  Select select=queryData.getSelect();
  Map<String,OrderByClause> orderByMap=getOrderByClauseMap(orderBy);
  AggregationBuilder aggregationBuilder=null;
  AggregationBuilder lastAggregationBuilder=null;
  for (  Selector term : groupingSelectors) {
    String fieldName=SelectorUtils.getSelectorFieldName(term);
    if (aggregationBuilder == null) {
      lastAggregationBuilder=aggregationBuilder=AggregationBuilders.terms(fieldName).field(fieldName);
      if (limit != null) {
        ((TermsBuilder)lastAggregationBuilder).size(limit);
      }
      sortSubAggregation(fieldName,orderByMap,(TermsBuilder)lastAggregationBuilder);
    }
 else {
      AggregationBuilder newAggregationBuilder=AggregationBuilders.terms(fieldName).field(fieldName);
      ((TermsBuilder)lastAggregationBuilder).size(internalLimit);
      sortSubAggregation(fieldName,orderByMap,(TermsBuilder)lastAggregationBuilder);
      lastAggregationBuilder.subAggregation(newAggregationBuilder);
      lastAggregationBuilder=newAggregationBuilder;
    }
  }
  if (aggregationBuilder != null) {
    addFunctionAggregation(select,orderByMap,lastAggregationBuilder);
  }
  return aggregationBuilder;
}",0.9539121114683816
169081,"/** 
 * Retrieves the field name associated to a given selector (It may be both a basic field or a function. Functions must have their own process in order to get the field name. If no process is defined the function name is returned as selector field name
 * @param selector  object defining a field or a function
 * @return                  name associated to the selector
 */
public static String getSelectorFieldName(Selector selector){
  if (null == selector) {
    return null;
  }
  if (selector instanceof FunctionSelector) {
    return getFunctionSelectorFieldName((FunctionSelector)selector);
  }
  return selector.getColumnName().getName();
}","/** 
 * Retrieves the field name associated to a given selector (It may be both a basic field or a function. Functions must have their own process in order to get the field name. If no process is defined the function name is returned as selector field name
 * @param selector  object defining a field or a function
 * @return                  name associated to the selector
 */
public static String getSelectorFieldName(Selector selector){
  if (null == selector) {
    return null;
  }
  if (selector instanceof FunctionSelector) {
    return getFunctionSelectorFieldName((FunctionSelector)selector);
  }
  if (selector instanceof AliasSelector) {
    return getSelectorFieldName(((AliasSelector)selector).getReferencedSelector());
  }
  return selector.getColumnName().getName();
}",0.8879610299234516
169082,"private XContentBuilder processColumnProperties(XContentBuilder xContentBuilder,ColumnMetadata columnMetadata) throws ExecutionException, IOException {
  String columnType=TypeConverter.convert(columnMetadata.getColumnType());
  xContentBuilder=xContentBuilder.field(TYPE,columnType);
  Map<String,List<String>> columProperties=columnMetadata.getColumnType().getColumnProperties();
  if (columProperties != null && !columProperties.containsKey(INDEX)) {
    xContentBuilder.field(INDEX,getTypeIndex(columnType));
  }
  if (columProperties != null) {
    for (    String columProperty : columProperties.keySet()) {
      xContentBuilder=xContentBuilder.field(columProperty,columProperties.get(columProperty));
    }
  }
  return xContentBuilder.endObject();
}","private XContentBuilder processColumnProperties(XContentBuilder xContentBuilder,ColumnMetadata columnMetadata) throws ExecutionException, IOException {
  String columnType=TypeConverter.convert(columnMetadata.getColumnType());
  xContentBuilder=xContentBuilder.field(TYPE,columnType);
  Map<String,List<String>> columProperties=columnMetadata.getColumnType().getColumnProperties();
  if (columProperties != null && !columProperties.containsKey(INDEX)) {
    xContentBuilder.field(INDEX,getTypeIndex(columnType));
  }
  if (columProperties != null) {
    for (    String columProperty : columProperties.keySet()) {
      if (columProperties.get(columProperty).size() > 1) {
        xContentBuilder=xContentBuilder.field(columProperty,columProperties.get(columProperty));
      }
 else       if (columProperties.get(columProperty).size() == 1) {
        xContentBuilder=xContentBuilder.field(columProperty,columProperties.get(columProperty).get(0));
      }
    }
  }
  return xContentBuilder.endObject();
}",0.8598979013045944
169083,"/** 
 * Turn a relation into a queryBuilder.
 * @param relation the relation.
 * @return the queryBuilder.
 * @throws ExecutionException   if any error happens.
 * @throws UnsupportedException if the operation is not supported.
 */
private QueryBuilder createQueryBuilder(Relation relation) throws ExecutionException, UnsupportedException {
  QueryBuilder queryBuilderfilter;
  String leftTerm=SelectorHelper.getValue(String.class,relation.getLeftTerm());
  String rightTerm=SelectorHelper.getValue(String.class,relation.getRightTerm());
switch (relation.getOperator()) {
case EQ:
    queryBuilderfilter=QueryBuilders.matchQuery(leftTerm,rightTerm.toLowerCase());
  break;
case LT:
queryBuilderfilter=QueryBuilders.rangeQuery(leftTerm).lt(rightTerm.toLowerCase());
break;
case LET:
queryBuilderfilter=QueryBuilders.rangeQuery(leftTerm).lte(rightTerm.toLowerCase());
break;
case GT:
queryBuilderfilter=QueryBuilders.rangeQuery(leftTerm).gt(rightTerm.toLowerCase());
break;
case GET:
queryBuilderfilter=QueryBuilders.rangeQuery(leftTerm).gte(rightTerm.toLowerCase());
break;
default :
throw new UnsupportedException(""String_Node_Str"" + relation.getOperator() + ""String_Node_Str"");
}
return queryBuilderfilter;
}","/** 
 * Turn a relation into a queryBuilder.
 * @param relation the relation.
 * @return the queryBuilder.
 * @throws ExecutionException   if any error happens.
 * @throws UnsupportedException if the operation is not supported.
 */
private QueryBuilder createQueryBuilder(Relation relation) throws ExecutionException, UnsupportedException {
  QueryBuilder queryBuilderfilter;
  String leftTerm=SelectorHelper.getValue(String.class,relation.getLeftTerm());
  String rightTerm=SelectorHelper.getValue(String.class,relation.getRightTerm());
switch (relation.getOperator()) {
case MATCH:
case EQ:
    queryBuilderfilter=QueryBuilders.matchQuery(leftTerm,rightTerm.toLowerCase());
  break;
case LT:
queryBuilderfilter=QueryBuilders.rangeQuery(leftTerm).lt(rightTerm.toLowerCase());
break;
case LET:
queryBuilderfilter=QueryBuilders.rangeQuery(leftTerm).lte(rightTerm.toLowerCase());
break;
case GT:
queryBuilderfilter=QueryBuilders.rangeQuery(leftTerm).gt(rightTerm.toLowerCase());
break;
case GET:
queryBuilderfilter=QueryBuilders.rangeQuery(leftTerm).gte(rightTerm.toLowerCase());
break;
default :
throw new UnsupportedException(""String_Node_Str"" + relation.getOperator() + ""String_Node_Str"");
}
return queryBuilderfilter;
}",0.9950617283950616
169084,"public ESConnectorHelper(ClusterName clusterName) throws ConnectionException, InitializationException {
  super();
  this.clusterName=clusterName;
  String serverIP=System.getProperty(""String_Node_Str"");
  if (serverIP != null) {
    SERVER_IP=serverIP;
  }
  String serverPort=System.getProperty(""String_Node_Str"");
  if (serverPort != null) {
    SERVER_PORT=serverPort;
  }
  if (auxConection != null) {
    auxConection=new TransportClient(ElasticsearchClientConfiguration.getSettings(getConnectorClusterConfig())).addTransportAddresses(ElasticsearchClientConfiguration.getTransportAddress(getConnectorClusterConfig()));
  }
}","public ESConnectorHelper(ClusterName clusterName) throws ConnectionException, InitializationException {
  super();
  this.clusterName=clusterName;
  String serverIP=System.getProperty(""String_Node_Str"");
  if (serverIP != null) {
    SERVER_IP=serverIP;
  }
  String serverPort=System.getProperty(""String_Node_Str"");
  if (serverPort != null) {
    SERVER_PORT=serverPort;
  }
  if (auxConection == null) {
    auxConection=new TransportClient(ElasticsearchClientConfiguration.getSettings(getConnectorClusterConfig())).addTransportAddresses(ElasticsearchClientConfiguration.getTransportAddress(getConnectorClusterConfig()));
  }
}",0.9984126984126984
169085,"@Override protected IConnectorHelper getConnectorHelper(){
  ESConnectorHelper esConnectorHelper=null;
  try {
    esConnectorHelper=new ESConnectorHelper(getClusterName());
    return esConnectorHelper;
  }
 catch (  ConnectionException e) {
    e.printStackTrace();
  }
catch (  InitializationException e) {
    e.printStackTrace();
  }
  return esConnectorHelper;
}","@Override protected IConnectorHelper getConnectorHelper(){
  try {
    if (esConnectorHelper == null) {
      esConnectorHelper=new ESConnectorHelper(getClusterName());
    }
    return esConnectorHelper;
  }
 catch (  ConnectionException e) {
    e.printStackTrace();
  }
catch (  InitializationException e) {
    e.printStackTrace();
  }
  return esConnectorHelper;
}",0.7761194029850746
169086,"@Override protected IConnectorHelper getConnectorHelper(){
  ESConnectorHelper esConnectorHelper=null;
  try {
    esConnectorHelper=new ESConnectorHelper(getClusterName());
  }
 catch (  InitializationException e) {
    e.printStackTrace();
  }
catch (  ConnectionException e) {
    e.printStackTrace();
  }
  return esConnectorHelper;
}","@Override protected IConnectorHelper getConnectorHelper(){
  try {
    if (esConnectorHelper == null) {
      esConnectorHelper=new ESConnectorHelper(getClusterName());
    }
    return esConnectorHelper;
  }
 catch (  ConnectionException e) {
    e.printStackTrace();
  }
catch (  InitializationException e) {
    e.printStackTrace();
  }
  return esConnectorHelper;
}",0.6506364922206507
169087,"@Override protected IConnectorHelper getConnectorHelper(){
  ESConnectorHelper esConnectorHelper=null;
  try {
    esConnectorHelper=new ESConnectorHelper(getClusterName());
  }
 catch (  InitializationException e) {
    e.printStackTrace();
  }
catch (  ConnectionException e) {
    e.printStackTrace();
  }
  return esConnectorHelper;
}","@Override protected IConnectorHelper getConnectorHelper(){
  try {
    if (esConnectorHelper == null) {
      esConnectorHelper=new ESConnectorHelper(getClusterName());
    }
    return esConnectorHelper;
  }
 catch (  ConnectionException e) {
    e.printStackTrace();
  }
catch (  InitializationException e) {
    e.printStackTrace();
  }
  return esConnectorHelper;
}",0.6506364922206507
169088,"@Override protected IConnectorHelper getConnectorHelper(){
  ESConnectorHelper esConnectorHelper=null;
  try {
    esConnectorHelper=new ESConnectorHelper(getClusterName());
    return esConnectorHelper;
  }
 catch (  ConnectionException e) {
    e.printStackTrace();
  }
catch (  InitializationException e) {
    e.printStackTrace();
  }
  return esConnectorHelper;
}","@Override protected IConnectorHelper getConnectorHelper(){
  try {
    if (esConnectorHelper == null) {
      esConnectorHelper=new ESConnectorHelper(getClusterName());
    }
    return esConnectorHelper;
  }
 catch (  ConnectionException e) {
    e.printStackTrace();
  }
catch (  InitializationException e) {
    e.printStackTrace();
  }
  return esConnectorHelper;
}",0.7761194029850746
169089,"@Override protected IConnectorHelper getConnectorHelper(){
  ESConnectorHelper esConnectorHelper=null;
  try {
    esConnectorHelper=new ESConnectorHelper(getClusterName());
    return esConnectorHelper;
  }
 catch (  ConnectionException e) {
    e.printStackTrace();
  }
catch (  InitializationException e) {
    e.printStackTrace();
  }
  return esConnectorHelper;
}","@Override protected IConnectorHelper getConnectorHelper(){
  try {
    if (esConnectorHelper == null) {
      esConnectorHelper=new ESConnectorHelper(getClusterName());
    }
    return esConnectorHelper;
  }
 catch (  ConnectionException e) {
    e.printStackTrace();
  }
catch (  InitializationException e) {
    e.printStackTrace();
  }
  return esConnectorHelper;
}",0.7761194029850746
169090,"public ESConnectorHelper(ClusterName clusterName) throws ConnectionException, InitializationException {
  super();
  this.clusterName=clusterName;
  String serverIP=System.getProperty(""String_Node_Str"");
  if (serverIP != null) {
    SERVER_IP=serverIP;
  }
  String serverPort=System.getProperty(""String_Node_Str"");
  if (serverPort != null) {
    SERVER_PORT=serverPort;
  }
  auxConection=new TransportClient(ElasticsearchClientConfiguration.getSettings(getConnectorClusterConfig())).addTransportAddresses(ElasticsearchClientConfiguration.getTransportAddress(getConnectorClusterConfig()));
}","public ESConnectorHelper(ClusterName clusterName) throws ConnectionException, InitializationException {
  super();
  this.clusterName=clusterName;
  String serverIP=System.getProperty(""String_Node_Str"");
  if (serverIP != null) {
    SERVER_IP=serverIP;
  }
  String serverPort=System.getProperty(""String_Node_Str"");
  if (serverPort != null) {
    SERVER_PORT=serverPort;
  }
  if (auxConection != null) {
    auxConection=new TransportClient(ElasticsearchClientConfiguration.getSettings(getConnectorClusterConfig())).addTransportAddresses(ElasticsearchClientConfiguration.getTransportAddress(getConnectorClusterConfig()));
  }
}",0.9705882352941176
169091,"/** 
 * Constructor
 * @throws InitializationException if an error happens.
 */
public ElasticsearchConnector() throws InitializationException {
  connectorName=ManifestUtil.getConectorName(""String_Node_Str"");
  datastoreName=ManifestUtil.getDatastoreName(""String_Node_Str"");
}","/** 
 * Constructor.
 * @throws InitializationException if an error happens.
 */
public ElasticsearchConnector() throws InitializationException {
  connectorName=ManifestUtil.getConectorName(""String_Node_Str"");
  datastoreName=ManifestUtil.getDatastoreName(""String_Node_Str"");
}",0.9981981981981982
169092,"/** 
 * Return de connector Name.
 * @return
 */
@Override public String getConnectorName(){
  return connectorName;
}","/** 
 * Return the connector Name.
 * @return
 */
@Override public String getConnectorName(){
  return connectorName;
}",0.9873417721518988
169093,"/** 
 * Return the DataStore Name.
 * @return DataStore Name
 */
@Override public String[] getDatastoreName(){
  return datastoreName;
}","/** 
 * Return the DataStore Name.
 * @return DataStore Name
 */
@Override public String[] getDatastoreName(){
  return datastoreName.clone();
}",0.9714285714285714
169094,"public static void main(String[] args) throws InitializationException {
  ElasticsearchConnector cassandraConnector=new ElasticsearchConnector();
  ConnectorApp connectorApp=new ConnectorApp();
  connectorApp.startup(cassandraConnector);
  cassandraConnector.attachShutDownHook();
}","/** 
 * The main method.
 * @param args the arguments
 * @throws InitializationException the initialization exception
 */
public static void main(String[] args) throws InitializationException {
  ElasticsearchConnector cassandraConnector=new ElasticsearchConnector();
  ConnectorApp connectorApp=new ConnectorApp();
  connectorApp.startup(cassandraConnector);
  cassandraConnector.attachShutDownHook();
}",0.8221574344023324
169095,"public static TransportAddress[] getTransportAddress(ConnectorClusterConfig config){
  String[] hosts=ConnectorParser.hosts(config.getOptions().get(HOST.getOptionName()));
  String[] ports=ConnectorParser.ports(config.getOptions().get(PORT.getOptionName()));
  TransportAddress[] transportAddresses=new TransportAddress[hosts.length];
  for (int i=0; i < hosts.length; i++) {
    transportAddresses[i]=new InetSocketTransportAddress(hosts[i],Integer.decode(ports[i]));
  }
  return transportAddresses;
}","/** 
 * Gets the transport address.
 * @param config the configuration options.
 * @return the transport address
 */
public static TransportAddress[] getTransportAddress(ConnectorClusterConfig config){
  String[] hosts=ConnectorParser.hosts(config.getOptions().get(HOST.getOptionName()));
  String[] ports=ConnectorParser.ports(config.getOptions().get(PORT.getOptionName()));
  TransportAddress[] transportAddresses=new TransportAddress[hosts.length];
  for (int i=0; i < hosts.length; i++) {
    transportAddresses[i]=new InetSocketTransportAddress(hosts[i],Integer.decode(ports[i]));
  }
  return transportAddresses;
}",0.8958147818343722
169096,"/** 
 * Retrieves the Settings using either the Elasticsearch client configuration or the configuration file.
 * @param configuration
 */
public static Settings getSettings(ConnectorClusterConfig configuration){
  Map<String,String> setting=new HashMap<String,String>();
  setting.put(NODE_DATA.getOptionName(),recoverdOptionValue(configuration.getOptions(),NODE_DATA));
  setting.put(NODE_MASTER.getOptionName(),recoverdOptionValue(configuration.getOptions(),NODE_MASTER));
  setting.put(TRANSPORT_SNIFF.getOptionName(),recoverdOptionValue(configuration.getOptions(),TRANSPORT_SNIFF));
  setting.put(COERCE.getOptionName(),recoverdOptionValue(configuration.getOptions(),COERCE));
  setting.put(DYNAMIC.getOptionName(),recoverdOptionValue(configuration.getOptions(),DYNAMIC));
  setting.put(CLUSTER_NAME.getOptionName(),configuration.getName().getName());
  return ImmutableSettings.settingsBuilder().put(setting).build();
}","/** 
 * Retrieves the Settings using either the Elasticsearch client configuration or the configuration file.
 * @param configuration the configuration
 * @return the settings
 */
public static Settings getSettings(ConnectorClusterConfig configuration){
  Map<String,String> setting=new HashMap<String,String>();
  setting.put(NODE_DATA.getOptionName(),recoverdOptionValue(configuration.getOptions(),NODE_DATA));
  setting.put(NODE_MASTER.getOptionName(),recoverdOptionValue(configuration.getOptions(),NODE_MASTER));
  setting.put(TRANSPORT_SNIFF.getOptionName(),recoverdOptionValue(configuration.getOptions(),TRANSPORT_SNIFF));
  setting.put(COERCE.getOptionName(),recoverdOptionValue(configuration.getOptions(),COERCE));
  setting.put(DYNAMIC.getOptionName(),recoverdOptionValue(configuration.getOptions(),DYNAMIC));
  setting.put(CLUSTER_NAME.getOptionName(),configuration.getName().getName());
  return ImmutableSettings.settingsBuilder().put(setting).build();
}",0.9777777777777776
169097,"/** 
 * this recovered the option value if it is set. It not return the default value..
 * @param configuration the configuration.
 * @param nodeData      the configuration options.
 * @return the actual value of the option.
 */
private static String recoverdOptionValue(Map<String,String> configuration,ConfigurationOptions nodeData){
  String option;
  if (configuration.containsKey(nodeData.getOptionName())) {
    option=configuration.get(nodeData.getOptionName());
  }
 else {
    option=nodeData.getDefaultValue()[0];
  }
  return option;
}","/** 
 * this recovered the option value if it is set. It not return the default value..
 * @param configuration the configuration.
 * @param nodeData the configuration options.
 * @return the actual value of the option.
 */
private static String recoverdOptionValue(Map<String,String> configuration,ConfigurationOptions nodeData){
  String option;
  if (configuration.containsKey(nodeData.getOptionName())) {
    option=configuration.get(nodeData.getOptionName());
  }
 else {
    option=nodeData.getDefaultValue()[0];
  }
  return option;
}",0.9954001839926404
169098,"/** 
 * This method stop a  asynchronous  query in elasticsearch.
 * @param queryId the crossdata query id..
 * @throws UnsupportedException if any query operation is not supported.
 * @throws ExecutionException   if a error happens.
 */
@Override public void stop(String queryId) throws UnsupportedException, ExecutionException {
  throw new UnsupportedException(""String_Node_Str"");
}","/** 
 * This method stop a asynchronous query in elasticsearch.
 * @param queryId the crossdata query id. .
 * @throws UnsupportedException if any query operation is not supported.
 * @throws ExecutionException if a error happens.
 */
@Override public void stop(String queryId) throws UnsupportedException, ExecutionException {
  throw new UnsupportedException(""String_Node_Str"");
}",0.9621903520208605
169099,"/** 
 * This method execute a  asynchronous  query in elasticsearch.
 * @param queryId       the crossdata query id.
 * @param workflow      the logical workflow.
 * @param resultHandler the result handler..
 * @throws UnsupportedException if any query operation is not supported.
 * @throws ExecutionException   if a error happens.
 */
@Override public void asyncExecute(String queryId,LogicalWorkflow workflow,IResultHandler resultHandler) throws UnsupportedException, ExecutionException {
  throw new UnsupportedException(""String_Node_Str"");
}","/** 
 * This method execute a asynchronous query in elasticsearch.
 * @param queryId the crossdata query id.
 * @param workflow the logical workflow.
 * @param resultHandler the result handler. .
 * @throws UnsupportedException if any query operation is not supported.
 * @throws ExecutionException if a error happens.
 */
@Override public void asyncExecute(String queryId,LogicalWorkflow workflow,IResultHandler resultHandler) throws UnsupportedException, ExecutionException {
  throw new UnsupportedException(""String_Node_Str"");
}",0.9628942486085345
169100,"public ElasticsearchQueryEngine(ConnectionHandler connectionHandle){
  super(connectionHandle);
}","/** 
 * Instantiates a new elasticsearch query engine.
 * @param connectionHandler the connection handler
 */
public ElasticsearchQueryEngine(ConnectionHandler connectionHandle){
  super(connectionHandle);
}",0.6381578947368421
169101,"/** 
 * This method execute a query in elasticsearch.
 * @param project    the query project.
 * @param connection the logical connection.
 * @return the result.
 * @throws UnsupportedException if any query operation is not supported.
 * @throws ExecutionException   if a error happens.
 */
@Override protected QueryResult execute(Project project,Connection<Client> connection) throws UnsupportedException, ExecutionException {
  Client elasticClient=connection.getNativeConnection();
  ConnectorQueryData queryData=queryParser.transformLogicalWorkFlow(project);
  SearchRequestBuilder requestBuilder=queryBuilder.buildQuery(elasticClient,queryData);
  return queryExecutor.executeQuery(elasticClient,requestBuilder,queryData);
}","/** 
 * This method execute a query in elasticsearch.
 * @param project the query project.
 * @param connection the logical connection.
 * @return the result.
 * @throws UnsupportedException if any query operation is not supported.
 * @throws ExecutionException if a error happens.
 */
@Override protected QueryResult execute(Project project,Connection<Client> connection) throws UnsupportedException, ExecutionException {
  Client elasticClient=connection.getNativeConnection();
  ConnectorQueryData queryData=queryParser.transformLogicalWorkFlow(project);
  SearchRequestBuilder requestBuilder=queryBuilder.buildQuery(elasticClient,queryData);
  return queryExecutor.executeQuery(elasticClient,requestBuilder,queryData);
}",0.9965588437715072
169102,"/** 
 * This method creates a row.
 * @param hit       the Elasticsearch SearchHit.
 * @param queryData
 * @return the row.
 */
private Row createRow(SearchHit hit,ConnectorQueryData queryData) throws ExecutionException {
  Map<ColumnName,String> alias=returnAlias(queryData);
  Map<String,Object> fields=getFields(hit);
  Row row=setRowValues(queryData,alias,fields);
  return row;
}","/** 
 * This method creates a row.
 * @param hit the Elasticsearch SearchHit.
 * @param queryData
 * @return the row.
 */
private Row createRow(SearchHit hit,ConnectorQueryData queryData) throws ExecutionException {
  Map<ColumnName,String> alias=returnAlias(queryData);
  Map<String,Object> fields=getFields(hit);
  Row row=setRowValues(queryData,alias,fields);
  return row;
}",0.9921259842519684
169103,"/** 
 * This method creates a row.
 * @param queryData the query data.
 * @param alias     the alias.
 * @param fields    the fields.
 * @return a row.
 */
private Row setRowValues(ConnectorQueryData queryData,Map<ColumnName,String> alias,Map<String,Object> fields) throws ExecutionException {
  Row row=new Row();
  Set<String> fieldNames;
  Select select=queryData.getSelect();
  if (select == null) {
    fieldNames=fields.keySet();
  }
 else {
    fieldNames=createFieldNames(select.getColumnMap().keySet());
  }
  for (  String field : fieldNames) {
    Object value=fields.get(field);
    ColumnName columnName=new ColumnName(queryData.getProjection().getCatalogName(),queryData.getProjection().getTableName().getName(),field);
    if (alias.containsKey(columnName)) {
      field=alias.get(columnName);
    }
    row.addCell(field,new Cell(ColumnTypeHelper.getCastingValue(select.getTypeMapFromColumnName().get(columnName),value)));
  }
  return row;
}","/** 
 * This method creates a row.
 * @param queryData the query data.
 * @param alias the alias.
 * @param fields the fields.
 * @return a row.
 */
private Row setRowValues(ConnectorQueryData queryData,Map<ColumnName,String> alias,Map<String,Object> fields) throws ExecutionException {
  Row row=new Row();
  Set<String> fieldNames;
  Select select=queryData.getSelect();
  if (select == null) {
    fieldNames=fields.keySet();
  }
 else {
    fieldNames=createFieldNames(select.getColumnMap().keySet());
  }
  for (  String field : fieldNames) {
    Object value=fields.get(field);
    ColumnName columnName=new ColumnName(queryData.getProjection().getCatalogName(),queryData.getProjection().getTableName().getName(),field);
    if (alias.containsKey(columnName)) {
      field=alias.get(columnName);
    }
    row.addCell(field,new Cell(ColumnTypeHelper.getCastingValue(select.getTypeMapFromColumnName().get(columnName),value)));
  }
  return row;
}",0.9963369963369964
169104,"/** 
 * This method execute a query in elasticSearch.
 * @param elasticClient  the elasticSearch Client.
 * @param requestBuilder the query to execute.
 * @param queryData      the queryData.
 * @return the query result.
 */
public QueryResult executeQuery(Client elasticClient,SearchRequestBuilder requestBuilder,ConnectorQueryData queryData) throws ExecutionException {
  QueryResult queryResult=null;
  try {
    ResultSet resultSet=new ResultSet();
    SearchResponse scrollResp=requestBuilder.execute().actionGet();
    long countResult=0;
    boolean isLimit=false;
    long limit=0;
    boolean endQuery=false;
    if (queryData.getLimit() != null) {
      isLimit=true;
      limit=queryData.getLimit().getLimit();
    }
    MetadataCreator crossdatadataCreator=new MetadataCreator();
    resultSet.setColumnMetadata(crossdatadataCreator.createColumnMetadata(queryData));
    do {
      scrollResp=elasticClient.prepareSearchScroll(scrollResp.getScrollId()).setScroll(new TimeValue(SCAN_TIMEOUT_MILLIS)).execute().actionGet();
      for (      SearchHit hit : scrollResp.getHits()) {
        if (isLimit && countResult == limit) {
          endQuery=true;
          break;
        }
        countResult++;
        resultSet.add(createRow(hit,queryData));
      }
    }
 while (scrollResp.getHits().getHits().length != 0 && !endQuery);
    queryResult=QueryResult.createQueryResult(resultSet);
  }
 catch (  IndexMissingException e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + e.getMessage());
    }
    queryResult=QueryResult.createQueryResult(new ResultSet());
  }
  return queryResult;
}","/** 
 * This method execute a query in elasticSearch.
 * @param elasticClient the elasticSearch Client.
 * @param requestBuilder the query to execute.
 * @param queryData the queryData.
 * @return the query result.
 */
public QueryResult executeQuery(Client elasticClient,SearchRequestBuilder requestBuilder,ConnectorQueryData queryData) throws ExecutionException {
  QueryResult queryResult=null;
  try {
    ResultSet resultSet=new ResultSet();
    SearchResponse scrollResp=requestBuilder.execute().actionGet();
    long countResult=0;
    boolean isLimit=false;
    long limit=0;
    boolean endQuery=false;
    if (queryData.getLimit() != null) {
      isLimit=true;
      limit=queryData.getLimit().getLimit();
    }
    MetadataCreator crossdatadataCreator=new MetadataCreator();
    resultSet.setColumnMetadata(crossdatadataCreator.createColumnMetadata(queryData));
    do {
      scrollResp=elasticClient.prepareSearchScroll(scrollResp.getScrollId()).setScroll(new TimeValue(SCAN_TIMEOUT_MILLIS)).execute().actionGet();
      for (      SearchHit hit : scrollResp.getHits()) {
        if (isLimit && countResult == limit) {
          endQuery=true;
          break;
        }
        countResult++;
        resultSet.add(createRow(hit,queryData));
      }
    }
 while (scrollResp.getHits().getHits().length != 0 && !endQuery);
    queryResult=QueryResult.createQueryResult(resultSet);
  }
 catch (  IndexMissingException e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + e.getMessage());
    }
    queryResult=QueryResult.createQueryResult(new ResultSet());
  }
  return queryResult;
}",0.9981561155500922
169105,"/** 
 * This method creates the XContentBuilder for a type.
 * @param typeMetadata the type metadata.
 * @return the XContentBuilder that represent the type.
 * @throws UnsupportedException if the type metadata is not supported.
 * @thros ExecutionException if a error occurs.
 */
public XContentBuilder createTypeSource(TableMetadata typeMetadata) throws UnsupportedException, ExecutionException {
  XContentBuilder xContentBuilder=null;
  try {
    xContentBuilder=XContentFactory.jsonBuilder().startObject();
    createId(xContentBuilder);
    createIndexOptions(typeMetadata,xContentBuilder);
    createFieldOptions(typeMetadata,xContentBuilder);
    xContentBuilder.endObject();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + typeMetadata.getName().getName() + ""String_Node_Str""+ typeMetadata.getName().getCatalogName()+ ""String_Node_Str"");
      logger.debug(""String_Node_Str"" + xContentBuilder.string());
    }
  }
 catch (  IOException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    logger.error(msg);
    throw new ExecutionException(msg,e);
  }
  try {
    System.out.println(""String_Node_Str"" + xContentBuilder.string() + ""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return xContentBuilder;
}","/** 
 * This method creates the XContentBuilder for a type.
 * @param typeMetadata the type metadata.
 * @return the XContentBuilder that represent the type.
 * @throws UnsupportedException if the type metadata is not supported.
 * @thros ExecutionException if a error occurs.
 */
public XContentBuilder createTypeSource(TableMetadata typeMetadata) throws UnsupportedException, ExecutionException {
  XContentBuilder xContentBuilder=null;
  try {
    xContentBuilder=XContentFactory.jsonBuilder().startObject();
    createIndexOptions(typeMetadata,xContentBuilder);
    createFieldOptions(typeMetadata,xContentBuilder);
    xContentBuilder.endObject();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + typeMetadata.getName().getName() + ""String_Node_Str""+ typeMetadata.getName().getCatalogName()+ ""String_Node_Str"");
      logger.debug(""String_Node_Str"" + xContentBuilder.string());
    }
  }
 catch (  IOException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    logger.error(msg);
    throw new ExecutionException(msg,e);
  }
  try {
    System.out.println(""String_Node_Str"" + xContentBuilder.string() + ""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return xContentBuilder;
}",0.9877421905891656
169106,"private void createFieldOptions(TableMetadata typeMetadata,XContentBuilder xContentBuilder) throws IOException, UnsupportedException {
  Map<ColumnName,ColumnMetadata> columns=typeMetadata.getColumns();
  if (!columns.isEmpty()) {
    xContentBuilder.startObject(""String_Node_Str"");
    for (    ColumnName column : columns.keySet()) {
      String columnType=convertType(columns.get(column).getColumnType());
      String name=column.getName();
      xContentBuilder=xContentBuilder.startObject(name).field(""String_Node_Str"",columnType).endObject();
    }
    xContentBuilder.endObject();
  }
}","private void createFieldOptions(TableMetadata typeMetadata,XContentBuilder xContentBuilder) throws IOException, UnsupportedException {
  xContentBuilder.startObject(""String_Node_Str"").startObject(typeMetadata.getName().getName());
  createId(xContentBuilder);
  Map<ColumnName,ColumnMetadata> columns=typeMetadata.getColumns();
  if (!columns.isEmpty()) {
    xContentBuilder.startObject(""String_Node_Str"");
    for (    ColumnName column : columns.keySet()) {
      String columnType=convertType(columns.get(column).getColumnType());
      String name=column.getName();
      xContentBuilder=xContentBuilder.startObject(name).field(""String_Node_Str"",columnType).endObject();
    }
    xContentBuilder.endObject();
  }
  xContentBuilder.endObject().endObject();
}",0.455081001472754
169107,"private void createIndexOptions(TableMetadata typeMetadata,XContentBuilder xContentBuilder) throws IOException, ExecutionException {
  xContentBuilder.startObject(""String_Node_Str"").startObject(""String_Node_Str"");
  Map<Selector,Selector> options=typeMetadata.getOptions();
  for (  Selector leftSelector : options.keySet()) {
    xContentBuilder.field(leftSelector.getStringValue(),SelectorHelper.getValue(options.get(leftSelector)));
  }
  xContentBuilder.endObject().endObject();
}","private void createIndexOptions(TableMetadata typeMetadata,XContentBuilder xContentBuilder) throws IOException, ExecutionException {
  Map<Selector,Selector> options=typeMetadata.getOptions();
  if (!options.isEmpty()) {
    xContentBuilder.startObject(""String_Node_Str"").startObject(""String_Node_Str"");
    for (    Selector leftSelector : options.keySet()) {
      xContentBuilder.field(leftSelector.getStringValue(),SelectorHelper.getValue(options.get(leftSelector)));
    }
    xContentBuilder.endObject().endObject();
  }
}",0.549407114624506
169108,"private void createFieldOptions(TableMetadata typeMetadata,XContentBuilder xContentBuilder) throws IOException, UnsupportedException {
  xContentBuilder.startObject(""String_Node_Str"");
  Map<ColumnName,ColumnMetadata> columns=typeMetadata.getColumns();
  for (  ColumnName column : columns.keySet()) {
    String columnType=convertType(columns.get(column).getColumnType());
    String name=column.getName();
    xContentBuilder=xContentBuilder.startObject(name).field(""String_Node_Str"",columnType).endObject();
  }
  xContentBuilder.endObject();
}","private void createFieldOptions(TableMetadata typeMetadata,XContentBuilder xContentBuilder) throws IOException, UnsupportedException {
  Map<ColumnName,ColumnMetadata> columns=typeMetadata.getColumns();
  if (!columns.isEmpty()) {
    xContentBuilder.startObject(""String_Node_Str"");
    for (    ColumnName column : columns.keySet()) {
      String columnType=convertType(columns.get(column).getColumnType());
      String name=column.getName();
      xContentBuilder=xContentBuilder.startObject(name).field(""String_Node_Str"",columnType).endObject();
    }
    xContentBuilder.endObject();
  }
}",0.6147110332749562
169109,"private List<ColumnMetadata> createMetadata(ConnectorQueryData queryData){
  List<ColumnMetadata> retunColumnMetadata=new ArrayList<>();
  for (  ColumnName field : queryData.getSelect().getColumnMap().keySet()) {
    String columnName=field.getName();
    ColumnMetadata columnMetadata=new ColumnMetadata(queryData.getProjection().getTableName().getName(),columnName,queryData.getSelect().getTypeMap().get(columnName));
    columnMetadata.setColumnAlias(queryData.getSelect().getColumnMap().get(field));
    retunColumnMetadata.add(columnMetadata);
  }
  return retunColumnMetadata;
}","private List<ColumnMetadata> createMetadata(ConnectorQueryData queryData){
  List<ColumnMetadata> retunColumnMetadata=new ArrayList<>();
  for (  ColumnName field : queryData.getSelect().getColumnMap().keySet()) {
    String columnName=field.getName();
    ColumnMetadata columnMetadata=new ColumnMetadata(queryData.getProjection().getTableName().getName(),columnName,queryData.getSelect().getTypeMap().get(field.getQualifiedName()));
    columnMetadata.setColumnAlias(queryData.getSelect().getColumnMap().get(field));
    retunColumnMetadata.add(columnMetadata);
  }
  return retunColumnMetadata;
}",0.9712837837837838
169110,"public VNTFontListPreference(final Context context,final AttributeSet attrs){
  super(context,attrs);
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.VNTFontListPreference);
  final String fontDirectory=a.getString(R.styleable.VNTFontListPreference_vnt_fontDirectory);
  mFontPreviewString=a.getString(R.styleable.VNTFontListPreference_vnt_fontPreviewString);
  a.recycle();
  try {
    final String[] fonts;
    try {
      fonts=context.getAssets().list(fontDirectory);
    }
 catch (    final NullPointerException e) {
      throw new IllegalStateException(""String_Node_Str"" + fontDirectory + ""String_Node_Str"");
    }
    for (    final String font : fonts) {
      final String fontType=font.substring(font.length() - 3);
      if (""String_Node_Str"".equals(fontType) || ""String_Node_Str"".equals(fontType)) {
        mFonts.add(new Font(StringFormatUtils.addAtEndIfNotPresent(fontDirectory,""String_Node_Str"") + font));
      }
    }
  }
 catch (  final IOException e) {
    e.printStackTrace();
  }
  if (mFonts.size() == 0) {
    throw new IllegalStateException(""String_Node_Str"" + fontDirectory + ""String_Node_Str"");
  }
}","public VNTFontListPreference(final Context context,final AttributeSet attrs){
  super(context,attrs);
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.VNTFontListPreference);
  final String fontDirectory=a.getString(R.styleable.VNTFontListPreference_vnt_fontDirectory);
  mFontPreviewString=a.getString(R.styleable.VNTFontListPreference_vnt_fontPreviewString);
  a.recycle();
  try {
    final String[] fonts;
    try {
      fonts=context.getAssets().list(fontDirectory);
    }
 catch (    final NullPointerException e) {
      throw new IllegalStateException(""String_Node_Str"" + fontDirectory + ""String_Node_Str"");
    }
    for (    final String font : fonts) {
      if (font != null && font.length() > 5) {
        final String fontType=font.substring(font.length() - 3);
        if (""String_Node_Str"".equals(fontType) || ""String_Node_Str"".equals(fontType)) {
          mFonts.add(new Font(StringFormatUtils.addAtEndIfNotPresent(fontDirectory,""String_Node_Str"") + font));
        }
      }
    }
  }
 catch (  final IOException e) {
    e.printStackTrace();
  }
  if (mFonts.size() == 0) {
    throw new IllegalStateException(""String_Node_Str"" + fontDirectory + ""String_Node_Str"");
  }
}",0.973338975878121
169111,"@Before public void setUp(){
  mContext=spy(RuntimeEnvironment.application.getApplicationContext());
  mAssets=spy(RuntimeEnvironment.application.getAssets());
  when(mContext.getAssets()).thenReturn(mAssets);
}","@Before public void setUp(){
  mContext=spy(RuntimeEnvironment.application.getApplicationContext());
  mAssets=spy(RuntimeEnvironment.application.getAssets());
  mAttributeSet=mock(AttributeSet.class);
  doReturn(mAssets).when(mContext).getAssets();
}",0.8225108225108225
169112,"@Test(expected=IllegalStateException.class) public void testVNTFontListPreferenceShouldThrowIllegalArgumentExceptionWhenDirectoryCanNotBeFound(){
  new VNTFontListPreference(mContext,mAttributeSet);
}","@Test public void testVNTFontListPreferenceShouldThrowIllegalArgumentExceptionWhenDirectoryCanNotBeFound(){
  expectedException.expect(IllegalStateException.class);
  expectedException.expectMessage(""String_Node_Str"");
  new VNTFontListPreference(mContext,mAttributeSet);
}",0.6849894291754757
169113,"@Test public void testVNTFontListPreferenceShouldFindOTFAndTTFFilesWhenPresentInDirectoryWithSlashAtTheEnd() throws IOException {
  final TypedArray typedArray=mock(TypedArray.class);
  when(typedArray.getString(R.styleable.VNTFontListPreference_vnt_fontDirectory)).thenReturn(""String_Node_Str"");
  mAttributeSet=any(AttributeSet.class);
  when(mContext.obtainStyledAttributes(mAttributeSet,any(int[].class))).thenReturn(typedArray);
  this.testFindFontsInDirectory(""String_Node_Str"");
}","@Test public void testVNTFontListPreferenceShouldFindOTFAndTTFFilesWhenPresentInDirectoryWithSlashAtTheEnd() throws IOException {
  final TypedArray typedArray=mock(TypedArray.class);
  doReturn(""String_Node_Str"").when(typedArray).getString(R.styleable.VNTFontListPreference_vnt_fontDirectory);
  doReturn(typedArray).when(mContext).obtainStyledAttributes(mAttributeSet,R.styleable.VNTFontListPreference);
  this.testFindFontsInDirectory(""String_Node_Str"");
}",0.7949260042283298
169114,"@Test(expected=IllegalStateException.class) public void testVNTFontListPreferenceShouldThrowIllegalArgumentExceptionWhenNoFontsWereFound() throws IOException {
  doReturn(new String[]{}).when(mAssets).list(""String_Node_Str"");
  new VNTFontListPreference(mContext,mAttributeSet);
}","@Test public void testVNTFontListPreferenceShouldThrowIllegalArgumentExceptionWhenNoFontsWereFound() throws IOException {
  doReturn(new String[]{}).when(mAssets).list(""String_Node_Str"");
  doReturn(mAssets).when(mContext).getAssets();
  final TypedArray typedArray=mock(TypedArray.class);
  doReturn(""String_Node_Str"").when(typedArray).getString(R.styleable.VNTFontListPreference_vnt_fontDirectory);
  doReturn(typedArray).when(mContext).obtainStyledAttributes(mAttributeSet,R.styleable.VNTFontListPreference);
  expectedException.expect(IllegalStateException.class);
  expectedException.expectMessage(""String_Node_Str"");
  new VNTFontListPreference(mContext,mAttributeSet);
}",0.4848484848484848
169115,"@Test public void testVNTFontListPreferenceShouldFindOTFAndTTFFilesWhenPresentInDirectoryWithoutSlashAtTheEnd() throws IOException {
  final TypedArray typedArray=mock(TypedArray.class);
  when(typedArray.getString(R.styleable.VNTFontListPreference_vnt_fontDirectory)).thenReturn(""String_Node_Str"");
  mAttributeSet=any(AttributeSet.class);
  when(mContext.obtainStyledAttributes(mAttributeSet,any(int[].class))).thenReturn(typedArray);
  this.testFindFontsInDirectory(""String_Node_Str"");
}","@Test public void testVNTFontListPreferenceShouldFindOTFAndTTFFilesWhenPresentInDirectoryWithoutSlashAtTheEnd() throws IOException {
  final TypedArray typedArray=mock(TypedArray.class);
  doReturn(""String_Node_Str"").when(typedArray).getString(R.styleable.VNTFontListPreference_vnt_fontDirectory);
  doReturn(typedArray).when(mContext).obtainStyledAttributes(mAttributeSet,R.styleable.VNTFontListPreference);
  this.testFindFontsInDirectory(""String_Node_Str"");
}",0.7962184873949579
169116,"private DateTime getDateTime(String strTime){
  DateTime dateTime=null;
  if ((dateTime=tryFormat(strTime,dateTimeWithSubSecAndTZFormat)) == null) {
    if ((dateTime=tryFormat(strTime,dateTimeAndTZFormat)) == null) {
      if ((dateTime=tryFormat(strTime,dateTimeWithSubSecFormat)) == null) {
        if ((dateTime=tryFormat(strTime,dateTimeFormat)) == null) {
          if ((dateTime=tryFormat(strTime,dateOnlyFormat)) == null) {
            return dateTime;
          }
        }
      }
    }
  }
  return dateTime;
}","private DateTime getDateTime(String strTime){
  DateTime dateTime=null;
  if ((dateTime=tryFormat(strTime,dateTimeWithSubSecAndTZFormat)) == null) {
    if ((dateTime=tryFormat(strTime,dateTimeAndTZFormat)) == null) {
      if ((dateTime=tryFormat(strTime,dateTimeWithSubSecFormat)) == null) {
        if ((dateTime=tryFormat(strTime,dateTimeFormat)) == null) {
          if ((dateTime=tryFormat(strTime,dateHourMinOnlyFormat)) == null) {
            if ((dateTime=tryFormat(strTime,dateHourOnlyFormat)) == null) {
              if ((dateTime=tryFormat(strTime,dateOnlyFormat)) == null) {
                return dateTime;
              }
            }
          }
        }
      }
    }
  }
  return dateTime;
}",0.8450932684509327
169117,"public final void whereClause(QueryMeta qMeta) throws RecognitionException {
  Filter f=null;
  try {
{
      pushFollow(FOLLOW_intervalClause_in_whereClause867);
      intervalClause(qMeta);
      state._fsp--;
      int alt44=2;
      int LA44_0=input.LA(1);
      if ((LA44_0 == WS)) {
        int LA44_1=input.LA(2);
        if ((LA44_1 == AND)) {
          alt44=1;
        }
      }
switch (alt44) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_whereClause871);
          match(input,AND,FOLLOW_AND_in_whereClause873);
          match(input,WS,FOLLOW_WS_in_whereClause875);
          pushFollow(FOLLOW_grandFilter_in_whereClause879);
          f=grandFilter();
          state._fsp--;
          qMeta.filter=f;
        }
      break;
  }
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}","public final void whereClause(QueryMeta qMeta) throws RecognitionException {
  Filter f=null;
  try {
{
      pushFollow(FOLLOW_intervalClause_in_whereClause898);
      intervalClause(qMeta);
      state._fsp--;
      int alt45=2;
      int LA45_0=input.LA(1);
      if ((LA45_0 == WS)) {
        int LA45_1=input.LA(2);
        if ((LA45_1 == AND)) {
          alt45=1;
        }
      }
switch (alt45) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_whereClause902);
          match(input,AND,FOLLOW_AND_in_whereClause904);
          match(input,WS,FOLLOW_WS_in_whereClause906);
          pushFollow(FOLLOW_grandFilter_in_whereClause910);
          f=grandFilter();
          state._fsp--;
          qMeta.filter=f;
        }
      break;
  }
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}",0.9367541766109784
169118,"public final void selectItems(QueryMeta qMeta) throws RecognitionException {
  AggItem sI1=null;
  try {
    int alt42=2;
    int LA42_0=input.LA(1);
    if ((LA42_0 == COUNT || LA42_0 == DOUBLE_SUM || LA42_0 == JAVASCRIPT || LA42_0 == LONG_SUM || (LA42_0 >= MAX && LA42_0 <= MIN) || LA42_0 == UNIQUE)) {
      alt42=1;
    }
 else     if ((LA42_0 == ID)) {
      alt42=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",42,0,input);
      throw nvae;
    }
switch (alt42) {
case 1:
{
        pushFollow(FOLLOW_aggItemInSelect_in_selectItems811);
        sI1=aggItemInSelect();
        state._fsp--;
        ((BaseAggQueryMeta)qMeta).aggregations.add(sI1);
      }
    break;
case 2:
{
    pushFollow(FOLLOW_simpleDim_in_selectItems819);
    simpleDim(qMeta);
    state._fsp--;
  }
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}","public final void selectItems(QueryMeta qMeta) throws RecognitionException {
  AggItem sI1=null;
  try {
    int alt43=2;
    int LA43_0=input.LA(1);
    if ((LA43_0 == COUNT || LA43_0 == DOUBLE_SUM || LA43_0 == JAVASCRIPT || LA43_0 == LONG_SUM || (LA43_0 >= MAX && LA43_0 <= MIN) || LA43_0 == UNIQUE)) {
      alt43=1;
    }
 else     if ((LA43_0 == ID)) {
      alt43=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",43,0,input);
      throw nvae;
    }
switch (alt43) {
case 1:
{
        pushFollow(FOLLOW_aggItemInSelect_in_selectItems842);
        sI1=aggItemInSelect();
        state._fsp--;
        ((BaseAggQueryMeta)qMeta).aggregations.add(sI1);
      }
    break;
case 2:
{
    pushFollow(FOLLOW_simpleDim_in_selectItems850);
    simpleDim(qMeta);
    state._fsp--;
  }
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}",0.9652551574375678
169119,"public final PostAggItem postAggItem() throws RecognitionException {
  PostAggItem postAggItem=null;
  PostAggItem a=null;
  PostAggItem b=null;
  postAggItem=new PostAggItem(""String_Node_Str"");
  try {
    int alt122=2;
    int LA122_0=input.LA(1);
    if ((LA122_0 == FLOAT || LA122_0 == ID || LA122_0 == JAVASCRIPT || LA122_0 == LONG || LA122_0 == UNIQUE)) {
      alt122=1;
    }
 else     if ((LA122_0 == LPARAN)) {
      alt122=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",122,0,input);
      throw nvae;
    }
switch (alt122) {
case 1:
{
{
          pushFollow(FOLLOW_simpleArith_in_postAggItem2012);
          a=simpleArith();
          state._fsp--;
          int alt115=2;
          int LA115_0=input.LA(1);
          if ((LA115_0 == WS)) {
            int LA115_1=input.LA(2);
            if ((LA115_1 == ARITH_OPER)) {
              alt115=1;
            }
          }
 else           if ((LA115_0 == ARITH_OPER)) {
            alt115=1;
          }
switch (alt115) {
case 1:
{
              int alt113=2;
              int LA113_0=input.LA(1);
              if ((LA113_0 == WS)) {
                alt113=1;
              }
switch (alt113) {
case 1:
{
                  match(input,WS,FOLLOW_WS_in_postAggItem2016);
                }
              break;
          }
          pushFollow(FOLLOW_postAggArithOper_in_postAggItem2019);
          postAggArithOper(postAggItem);
          state._fsp--;
          int alt114=2;
          int LA114_0=input.LA(1);
          if ((LA114_0 == WS)) {
            alt114=1;
          }
switch (alt114) {
case 1:
{
              match(input,WS,FOLLOW_WS_in_postAggItem2022);
            }
          break;
      }
      pushFollow(FOLLOW_postAggItem_in_postAggItem2027);
      b=postAggItem();
      state._fsp--;
    }
  break;
}
}
if (b == null) {
postAggItem=a;
}
 else {
postAggItem.fields=Arrays.asList(a,b);
}
}
break;
case 2:
{
{
{
match(input,LPARAN,FOLLOW_LPARAN_in_postAggItem2045);
int alt116=2;
int LA116_0=input.LA(1);
if ((LA116_0 == WS)) {
alt116=1;
}
switch (alt116) {
case 1:
{
match(input,WS,FOLLOW_WS_in_postAggItem2047);
}
break;
}
pushFollow(FOLLOW_postAggItem_in_postAggItem2052);
a=postAggItem();
state._fsp--;
int alt117=2;
int LA117_0=input.LA(1);
if ((LA117_0 == WS)) {
alt117=1;
}
switch (alt117) {
case 1:
{
match(input,WS,FOLLOW_WS_in_postAggItem2054);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_postAggItem2057);
}
int alt118=2;
int LA118_0=input.LA(1);
if ((LA118_0 == AS)) {
alt118=1;
}
switch (alt118) {
case 1:
{
pushFollow(FOLLOW_postAggLabel_in_postAggItem2061);
postAggLabel(postAggItem);
state._fsp--;
}
break;
}
int alt121=2;
int LA121_0=input.LA(1);
if ((LA121_0 == WS)) {
int LA121_1=input.LA(2);
if ((LA121_1 == ARITH_OPER)) {
alt121=1;
}
}
 else if ((LA121_0 == ARITH_OPER)) {
alt121=1;
}
switch (alt121) {
case 1:
{
int alt119=2;
int LA119_0=input.LA(1);
if ((LA119_0 == WS)) {
alt119=1;
}
switch (alt119) {
case 1:
{
match(input,WS,FOLLOW_WS_in_postAggItem2067);
}
break;
}
pushFollow(FOLLOW_postAggArithOper_in_postAggItem2070);
postAggArithOper(postAggItem);
state._fsp--;
int alt120=2;
int LA120_0=input.LA(1);
if ((LA120_0 == WS)) {
alt120=1;
}
switch (alt120) {
case 1:
{
match(input,WS,FOLLOW_WS_in_postAggItem2073);
}
break;
}
pushFollow(FOLLOW_postAggItem_in_postAggItem2078);
b=postAggItem();
state._fsp--;
}
break;
}
}
if (b == null) {
postAggItem=a;
}
 else {
postAggItem.fields=Arrays.asList(a,b);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}","public final PostAggItem postAggItem() throws RecognitionException {
  PostAggItem postAggItem=null;
  PostAggItem a=null;
  PostAggItem b=null;
  postAggItem=new PostAggItem(""String_Node_Str"");
  try {
    int alt123=2;
    int LA123_0=input.LA(1);
    if ((LA123_0 == FLOAT || LA123_0 == ID || LA123_0 == JAVASCRIPT || LA123_0 == LONG || LA123_0 == UNIQUE)) {
      alt123=1;
    }
 else     if ((LA123_0 == LPARAN)) {
      alt123=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",123,0,input);
      throw nvae;
    }
switch (alt123) {
case 1:
{
{
          pushFollow(FOLLOW_simpleArith_in_postAggItem2043);
          a=simpleArith();
          state._fsp--;
          int alt116=2;
          int LA116_0=input.LA(1);
          if ((LA116_0 == WS)) {
            int LA116_1=input.LA(2);
            if ((LA116_1 == ARITH_OPER)) {
              alt116=1;
            }
          }
 else           if ((LA116_0 == ARITH_OPER)) {
            alt116=1;
          }
switch (alt116) {
case 1:
{
              int alt114=2;
              int LA114_0=input.LA(1);
              if ((LA114_0 == WS)) {
                alt114=1;
              }
switch (alt114) {
case 1:
{
                  match(input,WS,FOLLOW_WS_in_postAggItem2047);
                }
              break;
          }
          pushFollow(FOLLOW_postAggArithOper_in_postAggItem2050);
          postAggArithOper(postAggItem);
          state._fsp--;
          int alt115=2;
          int LA115_0=input.LA(1);
          if ((LA115_0 == WS)) {
            alt115=1;
          }
switch (alt115) {
case 1:
{
              match(input,WS,FOLLOW_WS_in_postAggItem2053);
            }
          break;
      }
      pushFollow(FOLLOW_postAggItem_in_postAggItem2058);
      b=postAggItem();
      state._fsp--;
    }
  break;
}
}
if (b == null) {
postAggItem=a;
}
 else {
postAggItem.fields=Arrays.asList(a,b);
}
}
break;
case 2:
{
{
{
match(input,LPARAN,FOLLOW_LPARAN_in_postAggItem2076);
int alt117=2;
int LA117_0=input.LA(1);
if ((LA117_0 == WS)) {
alt117=1;
}
switch (alt117) {
case 1:
{
match(input,WS,FOLLOW_WS_in_postAggItem2078);
}
break;
}
pushFollow(FOLLOW_postAggItem_in_postAggItem2083);
a=postAggItem();
state._fsp--;
int alt118=2;
int LA118_0=input.LA(1);
if ((LA118_0 == WS)) {
alt118=1;
}
switch (alt118) {
case 1:
{
match(input,WS,FOLLOW_WS_in_postAggItem2085);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_postAggItem2088);
}
int alt119=2;
int LA119_0=input.LA(1);
if ((LA119_0 == AS)) {
alt119=1;
}
switch (alt119) {
case 1:
{
pushFollow(FOLLOW_postAggLabel_in_postAggItem2092);
postAggLabel(postAggItem);
state._fsp--;
}
break;
}
int alt122=2;
int LA122_0=input.LA(1);
if ((LA122_0 == WS)) {
int LA122_1=input.LA(2);
if ((LA122_1 == ARITH_OPER)) {
alt122=1;
}
}
 else if ((LA122_0 == ARITH_OPER)) {
alt122=1;
}
switch (alt122) {
case 1:
{
int alt120=2;
int LA120_0=input.LA(1);
if ((LA120_0 == WS)) {
alt120=1;
}
switch (alt120) {
case 1:
{
match(input,WS,FOLLOW_WS_in_postAggItem2098);
}
break;
}
pushFollow(FOLLOW_postAggArithOper_in_postAggItem2101);
postAggArithOper(postAggItem);
state._fsp--;
int alt121=2;
int LA121_0=input.LA(1);
if ((LA121_0 == WS)) {
alt121=1;
}
switch (alt121) {
case 1:
{
match(input,WS,FOLLOW_WS_in_postAggItem2104);
}
break;
}
pushFollow(FOLLOW_postAggItem_in_postAggItem2109);
b=postAggItem();
state._fsp--;
}
break;
}
}
if (b == null) {
postAggItem=a;
}
 else {
postAggItem.fields=Arrays.asList(a,b);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}",0.9214425496225888
169120,"public final PostAggItem fieldAccess() throws RecognitionException {
  PostAggItem postAggItem=null;
  Token a=null;
  postAggItem=new PostAggItem(""String_Node_Str"");
  try {
{
{
        a=(Token)match(input,ID,FOLLOW_ID_in_fieldAccess2278);
        int alt129=2;
        int LA129_0=input.LA(1);
        if ((LA129_0 == WS)) {
          int LA129_1=input.LA(2);
          if ((LA129_1 == AS)) {
            alt129=1;
          }
        }
switch (alt129) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_fieldAccess2281);
            pushFollow(FOLLOW_postAggLabel_in_fieldAccess2283);
            postAggLabel(postAggItem);
            state._fsp--;
          }
        break;
    }
  }
  postAggItem.fieldName=(a != null ? a.getText() : null);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}","public final PostAggItem fieldAccess() throws RecognitionException {
  PostAggItem postAggItem=null;
  Token a=null;
  postAggItem=new PostAggItem(""String_Node_Str"");
  try {
{
{
        a=(Token)match(input,ID,FOLLOW_ID_in_fieldAccess2309);
        int alt130=2;
        int LA130_0=input.LA(1);
        if ((LA130_0 == WS)) {
          int LA130_1=input.LA(2);
          if ((LA130_1 == AS)) {
            alt130=1;
          }
        }
switch (alt130) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_fieldAccess2312);
            pushFollow(FOLLOW_postAggLabel_in_fieldAccess2314);
            postAggLabel(postAggItem);
            state._fsp--;
          }
        break;
    }
  }
  postAggItem.fieldName=(a != null ? a.getText() : null);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}",0.8931475029036005
169121,"public final Filter selectorFilter() throws RecognitionException {
  Filter filter=null;
  EqualsToHolder e=null;
  filter=new Filter(""String_Node_Str"");
  try {
{
      pushFollow(FOLLOW_getEquals_in_selectorFilter1597);
      e=getEquals();
      state._fsp--;
      filter.dimension=e.name;
      filter.value=e.value;
      if (filter.value.startsWith(""String_Node_Str"") && filter.value.endsWith(""String_Node_Str"")) {
        filter.value=filter.value.substring(1,filter.value.length() - 1);
      }
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return filter;
}","public final Filter selectorFilter() throws RecognitionException {
  Filter filter=null;
  EqualsToHolder e=null;
  filter=new Filter(""String_Node_Str"");
  try {
{
      pushFollow(FOLLOW_getEquals_in_selectorFilter1628);
      e=getEquals();
      state._fsp--;
      filter.dimension=e.name;
      filter.value=e.value;
      if (filter.value.startsWith(""String_Node_Str"") && filter.value.endsWith(""String_Node_Str"")) {
        filter.value=filter.value.substring(1,filter.value.length() - 1);
      }
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return filter;
}",0.995253164556962
169122,"public final PostAggItem simplePostAggAccess() throws RecognitionException {
  PostAggItem postAggItem=null;
  PostAggItem c=null;
  PostAggItem f=null;
  PostAggItem h=null;
  PostAggItem js=null;
  try {
    int alt126=4;
switch (input.LA(1)) {
case FLOAT:
case LONG:
{
        alt126=1;
      }
    break;
case ID:
{
    alt126=2;
  }
break;
case UNIQUE:
{
alt126=3;
}
break;
case JAVASCRIPT:
{
alt126=4;
}
break;
default :
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",126,0,input);
throw nvae;
}
switch (alt126) {
case 1:
{
pushFollow(FOLLOW_constantAccess_in_simplePostAggAccess2160);
c=constantAccess();
state._fsp--;
postAggItem=c;
}
break;
case 2:
{
pushFollow(FOLLOW_fieldAccess_in_simplePostAggAccess2177);
f=fieldAccess();
state._fsp--;
postAggItem=f;
}
break;
case 3:
{
pushFollow(FOLLOW_hyperUniqueCardinality_in_simplePostAggAccess2190);
h=hyperUniqueCardinality();
state._fsp--;
postAggItem=h;
}
break;
case 4:
{
pushFollow(FOLLOW_postAggJavascriptDef_in_simplePostAggAccess2199);
js=postAggJavascriptDef();
state._fsp--;
postAggItem=js;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}","public final PostAggItem simplePostAggAccess() throws RecognitionException {
  PostAggItem postAggItem=null;
  PostAggItem c=null;
  PostAggItem f=null;
  PostAggItem h=null;
  PostAggItem js=null;
  try {
    int alt127=4;
switch (input.LA(1)) {
case FLOAT:
case LONG:
{
        alt127=1;
      }
    break;
case ID:
{
    alt127=2;
  }
break;
case UNIQUE:
{
alt127=3;
}
break;
case JAVASCRIPT:
{
alt127=4;
}
break;
default :
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",127,0,input);
throw nvae;
}
switch (alt127) {
case 1:
{
pushFollow(FOLLOW_constantAccess_in_simplePostAggAccess2191);
c=constantAccess();
state._fsp--;
postAggItem=c;
}
break;
case 2:
{
pushFollow(FOLLOW_fieldAccess_in_simplePostAggAccess2208);
f=fieldAccess();
state._fsp--;
postAggItem=f;
}
break;
case 3:
{
pushFollow(FOLLOW_hyperUniqueCardinality_in_simplePostAggAccess2221);
h=hyperUniqueCardinality();
state._fsp--;
postAggItem=h;
}
break;
case 4:
{
pushFollow(FOLLOW_postAggJavascriptDef_in_simplePostAggAccess2230);
js=postAggJavascriptDef();
state._fsp--;
postAggItem=js;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}",0.9849624060150376
169123,"public final Program program() throws RecognitionException {
  Program program=null;
  Token j=null;
  Token a=null;
  QueryMeta s1=null;
  QueryMeta s2=null;
  program=new Program();
  try {
{
{
        pushFollow(FOLLOW_statement_in_program42);
        s1=statement();
        state._fsp--;
      }
      program.listOfQueries.add(s1);
{
        match(input,WS,FOLLOW_WS_in_program52);
        j=input.LT(1);
        if (input.LA(1) == JOIN || input.LA(1) == LEFT_JOIN || input.LA(1) == RIGHT_JOIN) {
          input.consume();
          state.errorRecovery=false;
        }
 else {
          MismatchedSetException mse=new MismatchedSetException(null,input);
          throw mse;
        }
        program.joinTypes.add((j != null ? j.getText() : null).toUpperCase());
        int alt1=2;
        int LA1_0=input.LA(1);
        if ((LA1_0 == WS)) {
          alt1=1;
        }
switch (alt1) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_program66);
          }
        break;
    }
    match(input,LPARAN,FOLLOW_LPARAN_in_program69);
    int alt2=2;
    int LA2_0=input.LA(1);
    if ((LA2_0 == WS)) {
      alt2=1;
    }
switch (alt2) {
case 1:
{
        match(input,WS,FOLLOW_WS_in_program71);
      }
    break;
}
{
  pushFollow(FOLLOW_statement_in_program77);
  s2=statement();
  state._fsp--;
}
program.listOfQueries.add(s2);
int alt3=2;
int LA3_0=input.LA(1);
if ((LA3_0 == WS)) {
  alt3=1;
}
switch (alt3) {
case 1:
{
    match(input,WS,FOLLOW_WS_in_program82);
  }
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_program85);
int alt4=2;
int LA4_0=input.LA(1);
if ((LA4_0 == WS)) {
alt4=1;
}
switch (alt4) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program87);
}
break;
}
match(input,ON,FOLLOW_ON_in_program90);
int alt5=2;
int LA5_0=input.LA(1);
if ((LA5_0 == WS)) {
alt5=1;
}
switch (alt5) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program92);
}
break;
}
match(input,LPARAN,FOLLOW_LPARAN_in_program95);
int alt6=2;
int LA6_0=input.LA(1);
if ((LA6_0 == WS)) {
alt6=1;
}
switch (alt6) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program97);
}
break;
}
{
a=(Token)match(input,ID,FOLLOW_ID_in_program103);
program.primaryJoinableHooks.add((a != null ? a.getText() : null));
}
loop9: while (true) {
int alt9=2;
int LA9_0=input.LA(1);
if ((LA9_0 == WS)) {
int LA9_1=input.LA(2);
if ((LA9_1 == 72)) {
alt9=1;
}
}
 else if ((LA9_0 == 72)) {
alt9=1;
}
switch (alt9) {
case 1:
{
int alt7=2;
int LA7_0=input.LA(1);
if ((LA7_0 == WS)) {
alt7=1;
}
switch (alt7) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program108);
}
break;
}
match(input,72,FOLLOW_72_in_program111);
int alt8=2;
int LA8_0=input.LA(1);
if ((LA8_0 == WS)) {
alt8=1;
}
switch (alt8) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program113);
}
break;
}
a=(Token)match(input,ID,FOLLOW_ID_in_program118);
program.primaryJoinableHooks.add((a != null ? a.getText() : null));
}
break;
default :
break loop9;
}
}
int alt10=2;
int LA10_0=input.LA(1);
if ((LA10_0 == WS)) {
alt10=1;
}
switch (alt10) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program124);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_program127);
int alt11=2;
int LA11_0=input.LA(1);
if ((LA11_0 == WS)) {
alt11=1;
}
switch (alt11) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program129);
}
break;
}
}
int alt12=2;
int LA12_0=input.LA(1);
if ((LA12_0 == OPT_SEMI_COLON)) {
alt12=1;
}
switch (alt12) {
case 1:
{
match(input,OPT_SEMI_COLON,FOLLOW_OPT_SEMI_COLON_in_program134);
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return program;
}","public final Program program() throws RecognitionException {
  Program program=null;
  Token j=null;
  Token a=null;
  QueryMeta s1=null;
  QueryMeta s2=null;
  program=new Program();
  try {
{
{
        pushFollow(FOLLOW_statement_in_program42);
        s1=statement();
        state._fsp--;
      }
      program.listOfQueries.add(s1);
      int alt11=2;
      int LA11_0=input.LA(1);
      if ((LA11_0 == WS)) {
        int LA11_1=input.LA(2);
        if ((LA11_1 == JOIN || LA11_1 == LEFT_JOIN || LA11_1 == RIGHT_JOIN)) {
          alt11=1;
        }
      }
switch (alt11) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_program52);
          j=input.LT(1);
          if (input.LA(1) == JOIN || input.LA(1) == LEFT_JOIN || input.LA(1) == RIGHT_JOIN) {
            input.consume();
            state.errorRecovery=false;
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            throw mse;
          }
          program.joinTypes.add((j != null ? j.getText() : null).toUpperCase());
          int alt1=2;
          int LA1_0=input.LA(1);
          if ((LA1_0 == WS)) {
            alt1=1;
          }
switch (alt1) {
case 1:
{
              match(input,WS,FOLLOW_WS_in_program77);
            }
          break;
      }
      match(input,LPARAN,FOLLOW_LPARAN_in_program80);
      int alt2=2;
      int LA2_0=input.LA(1);
      if ((LA2_0 == WS)) {
        alt2=1;
      }
switch (alt2) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_program82);
        }
      break;
  }
{
    pushFollow(FOLLOW_statement_in_program88);
    s2=statement();
    state._fsp--;
  }
  program.listOfQueries.add(s2);
  int alt3=2;
  int LA3_0=input.LA(1);
  if ((LA3_0 == WS)) {
    alt3=1;
  }
switch (alt3) {
case 1:
{
      match(input,WS,FOLLOW_WS_in_program93);
    }
  break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_program96);
int alt4=2;
int LA4_0=input.LA(1);
if ((LA4_0 == WS)) {
alt4=1;
}
switch (alt4) {
case 1:
{
  match(input,WS,FOLLOW_WS_in_program98);
}
break;
}
match(input,ON,FOLLOW_ON_in_program101);
int alt5=2;
int LA5_0=input.LA(1);
if ((LA5_0 == WS)) {
alt5=1;
}
switch (alt5) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program108);
}
break;
}
match(input,LPARAN,FOLLOW_LPARAN_in_program111);
int alt6=2;
int LA6_0=input.LA(1);
if ((LA6_0 == WS)) {
alt6=1;
}
switch (alt6) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program113);
}
break;
}
{
a=(Token)match(input,ID,FOLLOW_ID_in_program119);
program.primaryJoinableHooks.add((a != null ? a.getText() : null));
}
loop9: while (true) {
int alt9=2;
int LA9_0=input.LA(1);
if ((LA9_0 == WS)) {
int LA9_1=input.LA(2);
if ((LA9_1 == 72)) {
alt9=1;
}
}
 else if ((LA9_0 == 72)) {
alt9=1;
}
switch (alt9) {
case 1:
{
int alt7=2;
int LA7_0=input.LA(1);
if ((LA7_0 == WS)) {
alt7=1;
}
switch (alt7) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program124);
}
break;
}
match(input,72,FOLLOW_72_in_program127);
int alt8=2;
int LA8_0=input.LA(1);
if ((LA8_0 == WS)) {
alt8=1;
}
switch (alt8) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program129);
}
break;
}
a=(Token)match(input,ID,FOLLOW_ID_in_program134);
program.primaryJoinableHooks.add((a != null ? a.getText() : null));
}
break;
default :
break loop9;
}
}
int alt10=2;
int LA10_0=input.LA(1);
if ((LA10_0 == WS)) {
alt10=1;
}
switch (alt10) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program140);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_program143);
}
break;
}
int alt12=2;
int LA12_0=input.LA(1);
if ((LA12_0 == WS)) {
alt12=1;
}
switch (alt12) {
case 1:
{
match(input,WS,FOLLOW_WS_in_program162);
}
break;
}
int alt13=2;
int LA13_0=input.LA(1);
if ((LA13_0 == OPT_SEMI_COLON)) {
alt13=1;
}
switch (alt13) {
case 1:
{
match(input,OPT_SEMI_COLON,FOLLOW_OPT_SEMI_COLON_in_program165);
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return program;
}",0.7292772560228665
169124,"public final void granularityClause(QueryMeta qMeta) throws RecognitionException {
  Token s=null;
  Token dur=null;
  Token orig=null;
  Token per=null;
  Token tz=null;
  qMeta.granularity=new Granularity();
  try {
    int alt77=2;
    int LA77_0=input.LA(1);
    if ((LA77_0 == SINGLE_QUOTE_STRING)) {
      alt77=1;
    }
 else     if ((LA77_0 == DURATION || LA77_0 == PERIOD)) {
      alt77=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",77,0,input);
      throw nvae;
    }
switch (alt77) {
case 1:
{
{
{
            s=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_granularityClause1088);
          }
          qMeta.granularity=new Granularity((s != null ? s.getText() : null));
        }
      }
    break;
case 2:
{
    int alt76=2;
    int LA76_0=input.LA(1);
    if ((LA76_0 == DURATION)) {
      alt76=1;
    }
 else     if ((LA76_0 == PERIOD)) {
      alt76=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",76,0,input);
      throw nvae;
    }
switch (alt76) {
case 1:
{
{
          match(input,DURATION,FOLLOW_DURATION_in_granularityClause1112);
          qMeta.granularity.type=""String_Node_Str"";
          int alt55=2;
          int LA55_0=input.LA(1);
          if ((LA55_0 == WS)) {
            alt55=1;
          }
switch (alt55) {
case 1:
{
              match(input,WS,FOLLOW_WS_in_granularityClause1116);
            }
          break;
      }
      match(input,LPARAN,FOLLOW_LPARAN_in_granularityClause1119);
      int alt56=2;
      int LA56_0=input.LA(1);
      if ((LA56_0 == WS)) {
        alt56=1;
      }
switch (alt56) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_granularityClause1121);
        }
      break;
  }
  dur=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_granularityClause1126);
  qMeta.granularity.setDuration((dur != null ? dur.getText() : null));
  int alt57=2;
  int LA57_0=input.LA(1);
  if ((LA57_0 == WS)) {
    alt57=1;
  }
switch (alt57) {
case 1:
{
      match(input,WS,FOLLOW_WS_in_granularityClause1130);
    }
  break;
}
int alt59=2;
int LA59_0=input.LA(1);
if ((LA59_0 == 72)) {
int LA59_1=input.LA(2);
if ((LA59_1 == WS)) {
  int LA59_4=input.LA(3);
  if ((LA59_4 == SINGLE_QUOTE_STRING)) {
    alt59=1;
  }
}
 else if ((LA59_1 == SINGLE_QUOTE_STRING)) {
  alt59=1;
}
}
switch (alt59) {
case 1:
{
  match(input,72,FOLLOW_72_in_granularityClause1134);
  int alt58=2;
  int LA58_0=input.LA(1);
  if ((LA58_0 == WS)) {
    alt58=1;
  }
switch (alt58) {
case 1:
{
      match(input,WS,FOLLOW_WS_in_granularityClause1136);
    }
  break;
}
orig=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_granularityClause1141);
qMeta.granularity.setOrigin((orig != null ? orig.getText() : null));
}
break;
}
int alt63=2;
int LA63_0=input.LA(1);
if ((LA63_0 == WS || LA63_0 == 72)) {
alt63=1;
}
switch (alt63) {
case 1:
{
int alt60=2;
int LA60_0=input.LA(1);
if ((LA60_0 == WS)) {
alt60=1;
}
switch (alt60) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1148);
}
break;
}
match(input,72,FOLLOW_72_in_granularityClause1151);
int alt61=2;
int LA61_0=input.LA(1);
if ((LA61_0 == WS)) {
int LA61_1=input.LA(2);
if ((LA61_1 == WS)) {
alt61=1;
}
}
switch (alt61) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1153);
}
break;
}
pushFollow(FOLLOW_granularityInclude_in_granularityClause1156);
granularityInclude(qMeta);
state._fsp--;
int alt62=2;
int LA62_0=input.LA(1);
if ((LA62_0 == WS)) {
alt62=1;
}
switch (alt62) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1159);
}
break;
}
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_granularityClause1164);
}
}
break;
case 2:
{
{
match(input,PERIOD,FOLLOW_PERIOD_in_granularityClause1183);
qMeta.granularity.type=""String_Node_Str"";
int alt64=2;
int LA64_0=input.LA(1);
if ((LA64_0 == WS)) {
alt64=1;
}
switch (alt64) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1187);
}
break;
}
match(input,LPARAN,FOLLOW_LPARAN_in_granularityClause1190);
int alt65=2;
int LA65_0=input.LA(1);
if ((LA65_0 == WS)) {
alt65=1;
}
switch (alt65) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1192);
}
break;
}
per=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_granularityClause1197);
qMeta.granularity.setPeriod((per != null ? per.getText() : null));
int alt66=2;
int LA66_0=input.LA(1);
if ((LA66_0 == WS)) {
alt66=1;
}
switch (alt66) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1201);
}
break;
}
int alt68=2;
int LA68_0=input.LA(1);
if ((LA68_0 == 72)) {
int LA68_1=input.LA(2);
if ((LA68_1 == WS)) {
int LA68_4=input.LA(3);
if ((LA68_4 == SINGLE_QUOTE_STRING)) {
alt68=1;
}
}
 else if ((LA68_1 == SINGLE_QUOTE_STRING)) {
alt68=1;
}
}
switch (alt68) {
case 1:
{
match(input,72,FOLLOW_72_in_granularityClause1205);
int alt67=2;
int LA67_0=input.LA(1);
if ((LA67_0 == WS)) {
alt67=1;
}
switch (alt67) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1207);
}
break;
}
tz=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_granularityClause1212);
qMeta.granularity.setTimeZone((tz != null ? tz.getText() : null));
}
break;
}
int alt69=2;
int LA69_0=input.LA(1);
if ((LA69_0 == WS)) {
alt69=1;
}
switch (alt69) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1218);
}
break;
}
int alt71=2;
int LA71_0=input.LA(1);
if ((LA71_0 == 72)) {
int LA71_1=input.LA(2);
if ((LA71_1 == WS)) {
int LA71_4=input.LA(3);
if ((LA71_4 == SINGLE_QUOTE_STRING)) {
alt71=1;
}
}
 else if ((LA71_1 == SINGLE_QUOTE_STRING)) {
alt71=1;
}
}
switch (alt71) {
case 1:
{
match(input,72,FOLLOW_72_in_granularityClause1222);
int alt70=2;
int LA70_0=input.LA(1);
if ((LA70_0 == WS)) {
alt70=1;
}
switch (alt70) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1224);
}
break;
}
orig=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_granularityClause1229);
qMeta.granularity.setOrigin((orig != null ? orig.getText() : null));
}
break;
}
int alt75=2;
int LA75_0=input.LA(1);
if ((LA75_0 == WS || LA75_0 == 72)) {
alt75=1;
}
switch (alt75) {
case 1:
{
int alt72=2;
int LA72_0=input.LA(1);
if ((LA72_0 == WS)) {
alt72=1;
}
switch (alt72) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1236);
}
break;
}
match(input,72,FOLLOW_72_in_granularityClause1239);
int alt73=2;
int LA73_0=input.LA(1);
if ((LA73_0 == WS)) {
int LA73_1=input.LA(2);
if ((LA73_1 == WS)) {
alt73=1;
}
}
switch (alt73) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1241);
}
break;
}
pushFollow(FOLLOW_granularityInclude_in_granularityClause1244);
granularityInclude(qMeta);
state._fsp--;
int alt74=2;
int LA74_0=input.LA(1);
if ((LA74_0 == WS)) {
alt74=1;
}
switch (alt74) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1247);
}
break;
}
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_granularityClause1252);
}
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}","public final void granularityClause(QueryMeta qMeta) throws RecognitionException {
  Token s=null;
  Token dur=null;
  Token orig=null;
  Token per=null;
  Token tz=null;
  qMeta.granularity=new Granularity();
  try {
    int alt78=2;
    int LA78_0=input.LA(1);
    if ((LA78_0 == SINGLE_QUOTE_STRING)) {
      alt78=1;
    }
 else     if ((LA78_0 == DURATION || LA78_0 == PERIOD)) {
      alt78=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",78,0,input);
      throw nvae;
    }
switch (alt78) {
case 1:
{
{
{
            s=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_granularityClause1119);
          }
          qMeta.granularity=new Granularity((s != null ? s.getText() : null));
        }
      }
    break;
case 2:
{
    int alt77=2;
    int LA77_0=input.LA(1);
    if ((LA77_0 == DURATION)) {
      alt77=1;
    }
 else     if ((LA77_0 == PERIOD)) {
      alt77=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",77,0,input);
      throw nvae;
    }
switch (alt77) {
case 1:
{
{
          match(input,DURATION,FOLLOW_DURATION_in_granularityClause1143);
          qMeta.granularity.type=""String_Node_Str"";
          int alt56=2;
          int LA56_0=input.LA(1);
          if ((LA56_0 == WS)) {
            alt56=1;
          }
switch (alt56) {
case 1:
{
              match(input,WS,FOLLOW_WS_in_granularityClause1147);
            }
          break;
      }
      match(input,LPARAN,FOLLOW_LPARAN_in_granularityClause1150);
      int alt57=2;
      int LA57_0=input.LA(1);
      if ((LA57_0 == WS)) {
        alt57=1;
      }
switch (alt57) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_granularityClause1152);
        }
      break;
  }
  dur=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_granularityClause1157);
  qMeta.granularity.setDuration((dur != null ? dur.getText() : null));
  int alt58=2;
  int LA58_0=input.LA(1);
  if ((LA58_0 == WS)) {
    alt58=1;
  }
switch (alt58) {
case 1:
{
      match(input,WS,FOLLOW_WS_in_granularityClause1161);
    }
  break;
}
int alt60=2;
int LA60_0=input.LA(1);
if ((LA60_0 == 72)) {
int LA60_1=input.LA(2);
if ((LA60_1 == WS)) {
  int LA60_4=input.LA(3);
  if ((LA60_4 == SINGLE_QUOTE_STRING)) {
    alt60=1;
  }
}
 else if ((LA60_1 == SINGLE_QUOTE_STRING)) {
  alt60=1;
}
}
switch (alt60) {
case 1:
{
  match(input,72,FOLLOW_72_in_granularityClause1165);
  int alt59=2;
  int LA59_0=input.LA(1);
  if ((LA59_0 == WS)) {
    alt59=1;
  }
switch (alt59) {
case 1:
{
      match(input,WS,FOLLOW_WS_in_granularityClause1167);
    }
  break;
}
orig=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_granularityClause1172);
qMeta.granularity.setOrigin((orig != null ? orig.getText() : null));
}
break;
}
int alt64=2;
int LA64_0=input.LA(1);
if ((LA64_0 == WS || LA64_0 == 72)) {
alt64=1;
}
switch (alt64) {
case 1:
{
int alt61=2;
int LA61_0=input.LA(1);
if ((LA61_0 == WS)) {
alt61=1;
}
switch (alt61) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1179);
}
break;
}
match(input,72,FOLLOW_72_in_granularityClause1182);
int alt62=2;
int LA62_0=input.LA(1);
if ((LA62_0 == WS)) {
int LA62_1=input.LA(2);
if ((LA62_1 == WS)) {
alt62=1;
}
}
switch (alt62) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1184);
}
break;
}
pushFollow(FOLLOW_granularityInclude_in_granularityClause1187);
granularityInclude(qMeta);
state._fsp--;
int alt63=2;
int LA63_0=input.LA(1);
if ((LA63_0 == WS)) {
alt63=1;
}
switch (alt63) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1190);
}
break;
}
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_granularityClause1195);
}
}
break;
case 2:
{
{
match(input,PERIOD,FOLLOW_PERIOD_in_granularityClause1214);
qMeta.granularity.type=""String_Node_Str"";
int alt65=2;
int LA65_0=input.LA(1);
if ((LA65_0 == WS)) {
alt65=1;
}
switch (alt65) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1218);
}
break;
}
match(input,LPARAN,FOLLOW_LPARAN_in_granularityClause1221);
int alt66=2;
int LA66_0=input.LA(1);
if ((LA66_0 == WS)) {
alt66=1;
}
switch (alt66) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1223);
}
break;
}
per=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_granularityClause1228);
qMeta.granularity.setPeriod((per != null ? per.getText() : null));
int alt67=2;
int LA67_0=input.LA(1);
if ((LA67_0 == WS)) {
alt67=1;
}
switch (alt67) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1232);
}
break;
}
int alt69=2;
int LA69_0=input.LA(1);
if ((LA69_0 == 72)) {
int LA69_1=input.LA(2);
if ((LA69_1 == WS)) {
int LA69_4=input.LA(3);
if ((LA69_4 == SINGLE_QUOTE_STRING)) {
alt69=1;
}
}
 else if ((LA69_1 == SINGLE_QUOTE_STRING)) {
alt69=1;
}
}
switch (alt69) {
case 1:
{
match(input,72,FOLLOW_72_in_granularityClause1236);
int alt68=2;
int LA68_0=input.LA(1);
if ((LA68_0 == WS)) {
alt68=1;
}
switch (alt68) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1238);
}
break;
}
tz=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_granularityClause1243);
qMeta.granularity.setTimeZone((tz != null ? tz.getText() : null));
}
break;
}
int alt70=2;
int LA70_0=input.LA(1);
if ((LA70_0 == WS)) {
alt70=1;
}
switch (alt70) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1249);
}
break;
}
int alt72=2;
int LA72_0=input.LA(1);
if ((LA72_0 == 72)) {
int LA72_1=input.LA(2);
if ((LA72_1 == WS)) {
int LA72_4=input.LA(3);
if ((LA72_4 == SINGLE_QUOTE_STRING)) {
alt72=1;
}
}
 else if ((LA72_1 == SINGLE_QUOTE_STRING)) {
alt72=1;
}
}
switch (alt72) {
case 1:
{
match(input,72,FOLLOW_72_in_granularityClause1253);
int alt71=2;
int LA71_0=input.LA(1);
if ((LA71_0 == WS)) {
alt71=1;
}
switch (alt71) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1255);
}
break;
}
orig=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_granularityClause1260);
qMeta.granularity.setOrigin((orig != null ? orig.getText() : null));
}
break;
}
int alt76=2;
int LA76_0=input.LA(1);
if ((LA76_0 == WS || LA76_0 == 72)) {
alt76=1;
}
switch (alt76) {
case 1:
{
int alt73=2;
int LA73_0=input.LA(1);
if ((LA73_0 == WS)) {
alt73=1;
}
switch (alt73) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1267);
}
break;
}
match(input,72,FOLLOW_72_in_granularityClause1270);
int alt74=2;
int LA74_0=input.LA(1);
if ((LA74_0 == WS)) {
int LA74_1=input.LA(2);
if ((LA74_1 == WS)) {
alt74=1;
}
}
switch (alt74) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1272);
}
break;
}
pushFollow(FOLLOW_granularityInclude_in_granularityClause1275);
granularityInclude(qMeta);
state._fsp--;
int alt75=2;
int LA75_0=input.LA(1);
if ((LA75_0 == WS)) {
alt75=1;
}
switch (alt75) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityClause1278);
}
break;
}
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_granularityClause1283);
}
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}",0.8120149468237999
169125,"public final AggItem aggItemInSelect() throws RecognitionException {
  AggItem aggItem=null;
  Token x=null;
  aggItem=new AggItem();
  try {
{
      pushFollow(FOLLOW_aggCallSite_in_aggItemInSelect1863);
      aggCallSite(aggItem);
      state._fsp--;
      int alt107=2;
      int LA107_0=input.LA(1);
      if ((LA107_0 == WS)) {
        int LA107_1=input.LA(2);
        if ((LA107_1 == AS)) {
          alt107=1;
        }
      }
switch (alt107) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_aggItemInSelect1867);
          match(input,AS,FOLLOW_AS_in_aggItemInSelect1869);
          match(input,WS,FOLLOW_WS_in_aggItemInSelect1871);
          x=(Token)match(input,ID,FOLLOW_ID_in_aggItemInSelect1875);
          aggItem.setAsName((x != null ? x.getText() : null));
        }
      break;
  }
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return aggItem;
}","public final AggItem aggItemInSelect() throws RecognitionException {
  AggItem aggItem=null;
  Token x=null;
  aggItem=new AggItem();
  try {
{
      pushFollow(FOLLOW_aggCallSite_in_aggItemInSelect1894);
      aggCallSite(aggItem);
      state._fsp--;
      int alt108=2;
      int LA108_0=input.LA(1);
      if ((LA108_0 == WS)) {
        int LA108_1=input.LA(2);
        if ((LA108_1 == AS)) {
          alt108=1;
        }
      }
switch (alt108) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_aggItemInSelect1898);
          match(input,AS,FOLLOW_AS_in_aggItemInSelect1900);
          match(input,WS,FOLLOW_WS_in_aggItemInSelect1902);
          x=(Token)match(input,ID,FOLLOW_ID_in_aggItemInSelect1906);
          aggItem.setAsName((x != null ? x.getText() : null));
        }
      break;
  }
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return aggItem;
}",0.9790979097909792
169126,"public final PostAggItem constantAccess() throws RecognitionException {
  PostAggItem postAggItem=null;
  Token a=null;
  postAggItem=new PostAggItem(""String_Node_Str"");
  try {
{
{
        int alt127=2;
        int LA127_0=input.LA(1);
        if ((LA127_0 == FLOAT)) {
          alt127=1;
        }
 else         if ((LA127_0 == LONG)) {
          alt127=2;
        }
 else {
          NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",127,0,input);
          throw nvae;
        }
switch (alt127) {
case 1:
{
            a=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_constantAccess2229);
          }
        break;
case 2:
{
        a=(Token)match(input,LONG,FOLLOW_LONG_in_constantAccess2235);
      }
    break;
}
postAggItem.constantValue=Double.valueOf((a != null ? a.getText() : null));
int alt128=2;
int LA128_0=input.LA(1);
if ((LA128_0 == WS)) {
  int LA128_1=input.LA(2);
  if ((LA128_1 == AS)) {
    alt128=1;
  }
}
switch (alt128) {
case 1:
{
    match(input,WS,FOLLOW_WS_in_constantAccess2248);
    pushFollow(FOLLOW_postAggLabel_in_constantAccess2250);
    postAggLabel(postAggItem);
    state._fsp--;
  }
break;
}
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}","public final PostAggItem constantAccess() throws RecognitionException {
  PostAggItem postAggItem=null;
  Token a=null;
  postAggItem=new PostAggItem(""String_Node_Str"");
  try {
{
{
        int alt128=2;
        int LA128_0=input.LA(1);
        if ((LA128_0 == FLOAT)) {
          alt128=1;
        }
 else         if ((LA128_0 == LONG)) {
          alt128=2;
        }
 else {
          NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",128,0,input);
          throw nvae;
        }
switch (alt128) {
case 1:
{
            a=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_constantAccess2260);
          }
        break;
case 2:
{
        a=(Token)match(input,LONG,FOLLOW_LONG_in_constantAccess2266);
      }
    break;
}
postAggItem.constantValue=Double.valueOf((a != null ? a.getText() : null));
int alt129=2;
int LA129_0=input.LA(1);
if ((LA129_0 == WS)) {
  int LA129_1=input.LA(2);
  if ((LA129_1 == AS)) {
    alt129=1;
  }
}
switch (alt129) {
case 1:
{
    match(input,WS,FOLLOW_WS_in_constantAccess2279);
    pushFollow(FOLLOW_postAggLabel_in_constantAccess2281);
    postAggLabel(postAggItem);
    state._fsp--;
  }
break;
}
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}",0.9563492063492064
169127,"public final Filter regexFilter() throws RecognitionException {
  Filter filter=null;
  Token a=null;
  Token b=null;
  filter=new Filter(""String_Node_Str"");
  try {
{
{
        a=(Token)match(input,ID,FOLLOW_ID_in_regexFilter1626);
        match(input,WS,FOLLOW_WS_in_regexFilter1628);
        match(input,LIKE,FOLLOW_LIKE_in_regexFilter1630);
        match(input,WS,FOLLOW_WS_in_regexFilter1632);
{
          b=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_regexFilter1638);
        }
      }
      filter.dimension=(a != null ? a.getText() : null);
      filter.pattern=(b != null ? b.getText() : null);
      if (filter.pattern.startsWith(""String_Node_Str"") && filter.pattern.endsWith(""String_Node_Str"")) {
        filter.pattern=filter.pattern.substring(1,filter.pattern.length() - 1);
      }
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return filter;
}","public final Filter regexFilter() throws RecognitionException {
  Filter filter=null;
  Token a=null;
  Token b=null;
  filter=new Filter(""String_Node_Str"");
  try {
{
{
        a=(Token)match(input,ID,FOLLOW_ID_in_regexFilter1657);
        match(input,WS,FOLLOW_WS_in_regexFilter1659);
        match(input,LIKE,FOLLOW_LIKE_in_regexFilter1661);
        match(input,WS,FOLLOW_WS_in_regexFilter1663);
{
          b=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_regexFilter1669);
        }
      }
      filter.dimension=(a != null ? a.getText() : null);
      filter.pattern=(b != null ? b.getText() : null);
      if (filter.pattern.startsWith(""String_Node_Str"") && filter.pattern.endsWith(""String_Node_Str"")) {
        filter.pattern=filter.pattern.substring(1,filter.pattern.length() - 1);
      }
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return filter;
}",0.9905263157894736
169128,"public final void simpleDim(QueryMeta qMeta) throws RecognitionException {
  Token a=null;
  Token b=null;
  try {
{
{
        a=(Token)match(input,ID,FOLLOW_ID_in_simpleDim835);
        int alt43=2;
        int LA43_0=input.LA(1);
        if ((LA43_0 == WS)) {
          int LA43_1=input.LA(2);
          if ((LA43_1 == AS)) {
            alt43=1;
          }
        }
switch (alt43) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_simpleDim838);
            match(input,AS,FOLLOW_AS_in_simpleDim840);
            match(input,WS,FOLLOW_WS_in_simpleDim842);
            b=(Token)match(input,ID,FOLLOW_ID_in_simpleDim846);
          }
        break;
    }
    if (b != null) {
      ((PlainDimQueryMeta)qMeta).fetchDimensions.put((a != null ? a.getText() : null),(b != null ? b.getText() : null));
    }
 else {
      ((PlainDimQueryMeta)qMeta).fetchDimensions.put((a != null ? a.getText() : null),null);
    }
  }
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}","public final void simpleDim(QueryMeta qMeta) throws RecognitionException {
  Token a=null;
  Token b=null;
  try {
{
{
        a=(Token)match(input,ID,FOLLOW_ID_in_simpleDim866);
        int alt44=2;
        int LA44_0=input.LA(1);
        if ((LA44_0 == WS)) {
          int LA44_1=input.LA(2);
          if ((LA44_1 == AS)) {
            alt44=1;
          }
        }
switch (alt44) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_simpleDim869);
            match(input,AS,FOLLOW_AS_in_simpleDim871);
            match(input,WS,FOLLOW_WS_in_simpleDim873);
            b=(Token)match(input,ID,FOLLOW_ID_in_simpleDim877);
          }
        break;
    }
    if (b != null) {
      ((PlainDimQueryMeta)qMeta).fetchDimensions.put((a != null ? a.getText() : null),(b != null ? b.getText() : null));
    }
 else {
      ((PlainDimQueryMeta)qMeta).fetchDimensions.put((a != null ? a.getText() : null),null);
    }
  }
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}",0.9643564356435644
169129,"public final QueryMeta statement() throws RecognitionException {
  QueryMeta qMeta=null;
  Token id=null;
  Token dir=null;
  Token l=null;
  Token s1=null;
  Token s2=null;
  Token s=null;
  Having h=null;
  PostAggItem p=null;
  qMeta=GroupByQueryMeta.promote(new QueryMeta());
  ((BaseAggQueryMeta)qMeta).aggregations=new ArrayList<>();
  qMeta.intervals=new ArrayList<>();
  try {
{
      match(input,SELECT,FOLLOW_SELECT_in_statement160);
      int alt16=3;
      int LA16_0=input.LA(1);
      if ((LA16_0 == WS)) {
        int LA16_1=input.LA(2);
        if ((LA16_1 == 71)) {
          alt16=2;
        }
 else         if ((LA16_1 == COUNT || LA16_1 == DOUBLE_SUM || LA16_1 == ID || LA16_1 == JAVASCRIPT || LA16_1 == LONG_SUM || (LA16_1 >= MAX && LA16_1 <= MIN) || LA16_1 == UNIQUE)) {
          alt16=1;
        }
      }
switch (alt16) {
case 1:
{
{
            match(input,WS,FOLLOW_WS_in_statement188);
            pushFollow(FOLLOW_selectItems_in_statement190);
            selectItems(qMeta);
            state._fsp--;
            loop15:             while (true) {
              int alt15=2;
              int LA15_0=input.LA(1);
              if ((LA15_0 == WS)) {
                int LA15_1=input.LA(2);
                if ((LA15_1 == 72)) {
                  alt15=1;
                }
              }
 else               if ((LA15_0 == 72)) {
                alt15=1;
              }
switch (alt15) {
case 1:
{
                  int alt13=2;
                  int LA13_0=input.LA(1);
                  if ((LA13_0 == WS)) {
                    alt13=1;
                  }
switch (alt13) {
case 1:
{
                      match(input,WS,FOLLOW_WS_in_statement194);
                    }
                  break;
              }
              match(input,72,FOLLOW_72_in_statement197);
              int alt14=2;
              int LA14_0=input.LA(1);
              if ((LA14_0 == WS)) {
                alt14=1;
              }
switch (alt14) {
case 1:
{
                  match(input,WS,FOLLOW_WS_in_statement199);
                }
              break;
          }
          pushFollow(FOLLOW_selectItems_in_statement202);
          selectItems(qMeta);
          state._fsp--;
        }
      break;
default :
    break loop15;
}
}
}
}
break;
case 2:
{
{
match(input,WS,FOLLOW_WS_in_statement233);
match(input,71,FOLLOW_71_in_statement235);
}
}
break;
}
match(input,WS,FOLLOW_WS_in_statement250);
match(input,FROM,FOLLOW_FROM_in_statement252);
match(input,WS,FOLLOW_WS_in_statement254);
id=(Token)match(input,ID,FOLLOW_ID_in_statement258);
qMeta.dataSource=(id != null ? id.getText() : null);
if (((BaseAggQueryMeta)qMeta).aggregations.isEmpty()) {
qMeta=SelectQueryMeta.promote(qMeta);
}
int alt41=2;
int LA41_0=input.LA(1);
if ((LA41_0 == WS)) {
int LA41_1=input.LA(2);
if ((LA41_1 == WHERE)) {
alt41=1;
}
}
switch (alt41) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement274);
match(input,WHERE,FOLLOW_WHERE_in_statement276);
match(input,WS,FOLLOW_WS_in_statement278);
pushFollow(FOLLOW_whereClause_in_statement280);
whereClause(qMeta);
state._fsp--;
{
int alt17=2;
int LA17_0=input.LA(1);
if ((LA17_0 == WS)) {
int LA17_1=input.LA(2);
if ((LA17_1 == BREAK)) {
alt17=1;
}
}
switch (alt17) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement297);
match(input,BREAK,FOLLOW_BREAK_in_statement299);
match(input,WS,FOLLOW_WS_in_statement301);
match(input,BY,FOLLOW_BY_in_statement303);
match(input,WS,FOLLOW_WS_in_statement305);
pushFollow(FOLLOW_granularityClause_in_statement307);
granularityClause(qMeta);
state._fsp--;
}
break;
}
int alt22=2;
int LA22_0=input.LA(1);
if ((LA22_0 == WS)) {
int LA22_1=input.LA(2);
if ((LA22_1 == GROUP)) {
alt22=1;
}
}
switch (alt22) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement318);
match(input,GROUP,FOLLOW_GROUP_in_statement320);
match(input,WS,FOLLOW_WS_in_statement322);
match(input,BY,FOLLOW_BY_in_statement324);
match(input,WS,FOLLOW_WS_in_statement326);
qMeta=GroupByQueryMeta.promote(qMeta);
if (((GroupByQueryMeta)qMeta).fetchDimensions == null) {
System.err.println(""String_Node_Str"");
}
{
id=(Token)match(input,ID,FOLLOW_ID_in_statement352);
if (!((GroupByQueryMeta)qMeta).checkDimOrAlias((id != null ? id.getText() : null))) {
System.err.println(""String_Node_Str"" + (id != null ? id.getText() : null) + ""String_Node_Str"");
}
loop20: while (true) {
int alt20=2;
int LA20_0=input.LA(1);
if ((LA20_0 == WS)) {
int LA20_1=input.LA(2);
if ((LA20_1 == 72)) {
alt20=1;
}
}
 else if ((LA20_0 == 72)) {
alt20=1;
}
switch (alt20) {
case 1:
{
int alt18=2;
int LA18_0=input.LA(1);
if ((LA18_0 == WS)) {
alt18=1;
}
switch (alt18) {
case 1:
{
  match(input,WS,FOLLOW_WS_in_statement384);
}
break;
}
match(input,72,FOLLOW_72_in_statement387);
int alt19=2;
int LA19_0=input.LA(1);
if ((LA19_0 == WS)) {
alt19=1;
}
switch (alt19) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement389);
}
break;
}
id=(Token)match(input,ID,FOLLOW_ID_in_statement394);
if (!((GroupByQueryMeta)qMeta).checkDimOrAlias((id != null ? id.getText() : null))) {
System.err.println(""String_Node_Str"" + (id != null ? id.getText() : null) + ""String_Node_Str"");
}
}
break;
default :
break loop20;
}
}
}
int alt21=2;
int LA21_0=input.LA(1);
if ((LA21_0 == WS)) {
int LA21_1=input.LA(2);
if ((LA21_1 == HAVING)) {
alt21=1;
}
}
switch (alt21) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement451);
match(input,HAVING,FOLLOW_HAVING_in_statement453);
match(input,WS,FOLLOW_WS_in_statement455);
pushFollow(FOLLOW_havingClause_in_statement459);
h=havingClause();
state._fsp--;
((GroupByQueryMeta)qMeta).having=h;
}
break;
}
}
break;
}
qMeta=QueryUtils.checkAndPromoteToTimeSeries(qMeta);
int alt24=2;
int LA24_0=input.LA(1);
if ((LA24_0 == WS)) {
int LA24_1=input.LA(2);
if ((LA24_1 == ORDER)) {
alt24=1;
}
}
switch (alt24) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement503);
match(input,ORDER,FOLLOW_ORDER_in_statement505);
match(input,WS,FOLLOW_WS_in_statement507);
match(input,BY,FOLLOW_BY_in_statement509);
match(input,WS,FOLLOW_WS_in_statement511);
{
id=(Token)match(input,ID,FOLLOW_ID_in_statement516);
}
if (((PlainDimQueryMeta)qMeta).fetchDimensions.size() != 1) {
((GroupByQueryMeta)qMeta).limitSpec=new LimitSpec();
}
 else {
qMeta=TopNQueryMeta.promote(qMeta);
((TopNQueryMeta)qMeta).metric=(id != null ? id.getText() : null);
}
int alt23=2;
int LA23_0=input.LA(1);
if ((LA23_0 == WS)) {
int LA23_1=input.LA(2);
if ((LA23_1 == ASC || LA23_1 == DESC)) {
alt23=1;
}
}
switch (alt23) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement549);
dir=input.LT(1);
if (input.LA(1) == ASC || input.LA(1) == DESC) {
input.consume();
state.errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
if (qMeta instanceof GroupByQueryMeta && ((GroupByQueryMeta)qMeta).limitSpec != null) {
if (dir != null && (dir != null ? dir.getText() : null) != null) {
((GroupByQueryMeta)qMeta).limitSpec.addColumn((id != null ? id.getText() : null),(dir != null ? dir.getText() : null));
}
 else {
((GroupByQueryMeta)qMeta).limitSpec.addColumn((id != null ? id.getText() : null),""String_Node_Str"");
}
}
}
break;
}
if (qMeta instanceof GroupByQueryMeta && ((GroupByQueryMeta)qMeta).limitSpec != null) {
if (!((GroupByQueryMeta)qMeta).limitSpec.columns.containsKey((id != null ? id.getText() : null))) {
((GroupByQueryMeta)qMeta).limitSpec.addColumn((id != null ? id.getText() : null),""String_Node_Str"");
}
}
}
break;
}
int alt25=2;
int LA25_0=input.LA(1);
if ((LA25_0 == WS)) {
int LA25_1=input.LA(2);
if ((LA25_1 == LIMIT)) {
alt25=1;
}
}
switch (alt25) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement603);
match(input,LIMIT,FOLLOW_LIMIT_in_statement605);
match(input,WS,FOLLOW_WS_in_statement607);
{
l=(Token)match(input,LONG,FOLLOW_LONG_in_statement612);
}
if (((PlainDimQueryMeta)qMeta).fetchDimensions.size() != 1) {
((GroupByQueryMeta)qMeta).limitSpec.limit=Long.valueOf((l != null ? l.getText() : null));
}
 else if (qMeta instanceof TopNQueryMeta) {
((TopNQueryMeta)qMeta).threshold=Integer.valueOf((l != null ? l.getText() : null));
}
 else if (qMeta instanceof SelectQueryMeta) {
((SelectQueryMeta)qMeta).pagingSpec.threshold=Integer.valueOf((l != null ? l.getText() : null));
}
}
break;
}
int alt26=2;
int LA26_0=input.LA(1);
if ((LA26_0 == WS)) {
int LA26_1=input.LA(2);
if ((LA26_1 == THEN)) {
alt26=1;
}
}
switch (alt26) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement650);
match(input,THEN,FOLLOW_THEN_in_statement652);
match(input,WS,FOLLOW_WS_in_statement654);
pushFollow(FOLLOW_postAggItem_in_statement658);
p=postAggItem();
state._fsp--;
QueryUtils.setPostAggregation(qMeta,p);
}
break;
}
}
int alt36=2;
int LA36_0=input.LA(1);
if ((LA36_0 == WS)) {
int LA36_1=input.LA(2);
if ((LA36_1 == WHICH)) {
alt36=1;
}
}
switch (alt36) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement673);
match(input,WHICH,FOLLOW_WHICH_in_statement675);
match(input,WS,FOLLOW_WS_in_statement677);
match(input,CONTAINS,FOLLOW_CONTAINS_in_statement679);
qMeta=SearchQueryMeta.promote(qMeta);
int alt27=2;
int LA27_0=input.LA(1);
if ((LA27_0 == WS)) {
alt27=1;
}
switch (alt27) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement683);
}
break;
}
match(input,LPARAN,FOLLOW_LPARAN_in_statement686);
int alt28=2;
int LA28_0=input.LA(1);
if ((LA28_0 == WS)) {
alt28=1;
}
switch (alt28) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement688);
}
break;
}
{
s1=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_statement694);
((SearchQueryMeta)qMeta).type=""String_Node_Str"";
((SearchQueryMeta)qMeta).addValue((s1 != null ? s1.getText() : null));
loop31: while (true) {
int alt31=2;
int LA31_0=input.LA(1);
if ((LA31_0 == WS)) {
int LA31_1=input.LA(2);
if ((LA31_1 == 72)) {
alt31=1;
}
}
 else if ((LA31_0 == 72)) {
alt31=1;
}
switch (alt31) {
case 1:
{
int alt29=2;
int LA29_0=input.LA(1);
if ((LA29_0 == WS)) {
alt29=1;
}
switch (alt29) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement698);
}
break;
}
match(input,72,FOLLOW_72_in_statement701);
int alt30=2;
int LA30_0=input.LA(1);
if ((LA30_0 == WS)) {
alt30=1;
}
switch (alt30) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement703);
}
break;
}
s2=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_statement708);
((SearchQueryMeta)qMeta).type=""String_Node_Str"";
((SearchQueryMeta)qMeta).addValue((s2 != null ? s2.getText() : null));
}
break;
default :
break loop31;
}
}
}
int alt32=2;
int LA32_0=input.LA(1);
if ((LA32_0 == WS)) {
alt32=1;
}
switch (alt32) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement715);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_statement718);
match(input,WS,FOLLOW_WS_in_statement724);
match(input,SORT,FOLLOW_SORT_in_statement726);
int alt33=2;
int LA33_0=input.LA(1);
if ((LA33_0 == WS)) {
alt33=1;
}
switch (alt33) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement728);
}
break;
}
match(input,LPARAN,FOLLOW_LPARAN_in_statement731);
int alt34=2;
int LA34_0=input.LA(1);
if ((LA34_0 == WS)) {
alt34=1;
}
switch (alt34) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement733);
}
break;
}
{
s=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_statement739);
}
((SearchQueryMeta)qMeta).setSort((s != null ? s.getText() : null));
int alt35=2;
int LA35_0=input.LA(1);
if ((LA35_0 == WS)) {
alt35=1;
}
switch (alt35) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement744);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_statement747);
}
break;
}
int alt40=2;
int LA40_0=input.LA(1);
if ((LA40_0 == WS)) {
int LA40_1=input.LA(2);
if ((LA40_1 == HINT)) {
alt40=1;
}
}
switch (alt40) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement759);
match(input,HINT,FOLLOW_HINT_in_statement761);
int alt37=2;
int LA37_0=input.LA(1);
if ((LA37_0 == WS)) {
alt37=1;
}
switch (alt37) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement763);
}
break;
}
match(input,LPARAN,FOLLOW_LPARAN_in_statement766);
int alt38=2;
int LA38_0=input.LA(1);
if ((LA38_0 == WS)) {
alt38=1;
}
switch (alt38) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement768);
}
break;
}
s=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_statement773);
qMeta=HintProcessor.process(qMeta,(s != null ? s.getText() : null));
int alt39=2;
int LA39_0=input.LA(1);
if ((LA39_0 == WS)) {
alt39=1;
}
switch (alt39) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement777);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_statement780);
}
break;
}
}
break;
}
if (qMeta.intervals == null || qMeta.intervals.isEmpty()) {
qMeta=TimeBoundaryQueryMeta.promote(qMeta);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return qMeta;
}","public final QueryMeta statement() throws RecognitionException {
  QueryMeta qMeta=null;
  Token id=null;
  Token dir=null;
  Token l=null;
  Token s1=null;
  Token s2=null;
  Token s=null;
  Having h=null;
  PostAggItem p=null;
  qMeta=GroupByQueryMeta.promote(new QueryMeta());
  ((BaseAggQueryMeta)qMeta).aggregations=new ArrayList<>();
  qMeta.intervals=new ArrayList<>();
  try {
{
      match(input,SELECT,FOLLOW_SELECT_in_statement191);
      int alt17=3;
      int LA17_0=input.LA(1);
      if ((LA17_0 == WS)) {
        int LA17_1=input.LA(2);
        if ((LA17_1 == 71)) {
          alt17=2;
        }
 else         if ((LA17_1 == COUNT || LA17_1 == DOUBLE_SUM || LA17_1 == ID || LA17_1 == JAVASCRIPT || LA17_1 == LONG_SUM || (LA17_1 >= MAX && LA17_1 <= MIN) || LA17_1 == UNIQUE)) {
          alt17=1;
        }
      }
switch (alt17) {
case 1:
{
{
            match(input,WS,FOLLOW_WS_in_statement219);
            pushFollow(FOLLOW_selectItems_in_statement221);
            selectItems(qMeta);
            state._fsp--;
            loop16:             while (true) {
              int alt16=2;
              int LA16_0=input.LA(1);
              if ((LA16_0 == WS)) {
                int LA16_1=input.LA(2);
                if ((LA16_1 == 72)) {
                  alt16=1;
                }
              }
 else               if ((LA16_0 == 72)) {
                alt16=1;
              }
switch (alt16) {
case 1:
{
                  int alt14=2;
                  int LA14_0=input.LA(1);
                  if ((LA14_0 == WS)) {
                    alt14=1;
                  }
switch (alt14) {
case 1:
{
                      match(input,WS,FOLLOW_WS_in_statement225);
                    }
                  break;
              }
              match(input,72,FOLLOW_72_in_statement228);
              int alt15=2;
              int LA15_0=input.LA(1);
              if ((LA15_0 == WS)) {
                alt15=1;
              }
switch (alt15) {
case 1:
{
                  match(input,WS,FOLLOW_WS_in_statement230);
                }
              break;
          }
          pushFollow(FOLLOW_selectItems_in_statement233);
          selectItems(qMeta);
          state._fsp--;
        }
      break;
default :
    break loop16;
}
}
}
}
break;
case 2:
{
{
match(input,WS,FOLLOW_WS_in_statement264);
match(input,71,FOLLOW_71_in_statement266);
}
}
break;
}
match(input,WS,FOLLOW_WS_in_statement281);
match(input,FROM,FOLLOW_FROM_in_statement283);
match(input,WS,FOLLOW_WS_in_statement285);
id=(Token)match(input,ID,FOLLOW_ID_in_statement289);
qMeta.dataSource=(id != null ? id.getText() : null);
if (((BaseAggQueryMeta)qMeta).aggregations.isEmpty()) {
qMeta=SelectQueryMeta.promote(qMeta);
}
int alt42=2;
int LA42_0=input.LA(1);
if ((LA42_0 == WS)) {
int LA42_1=input.LA(2);
if ((LA42_1 == WHERE)) {
alt42=1;
}
}
switch (alt42) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement305);
match(input,WHERE,FOLLOW_WHERE_in_statement307);
match(input,WS,FOLLOW_WS_in_statement309);
pushFollow(FOLLOW_whereClause_in_statement311);
whereClause(qMeta);
state._fsp--;
{
int alt18=2;
int LA18_0=input.LA(1);
if ((LA18_0 == WS)) {
int LA18_1=input.LA(2);
if ((LA18_1 == BREAK)) {
alt18=1;
}
}
switch (alt18) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement328);
match(input,BREAK,FOLLOW_BREAK_in_statement330);
match(input,WS,FOLLOW_WS_in_statement332);
match(input,BY,FOLLOW_BY_in_statement334);
match(input,WS,FOLLOW_WS_in_statement336);
pushFollow(FOLLOW_granularityClause_in_statement338);
granularityClause(qMeta);
state._fsp--;
}
break;
}
int alt23=2;
int LA23_0=input.LA(1);
if ((LA23_0 == WS)) {
int LA23_1=input.LA(2);
if ((LA23_1 == GROUP)) {
alt23=1;
}
}
switch (alt23) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement349);
match(input,GROUP,FOLLOW_GROUP_in_statement351);
match(input,WS,FOLLOW_WS_in_statement353);
match(input,BY,FOLLOW_BY_in_statement355);
match(input,WS,FOLLOW_WS_in_statement357);
qMeta=GroupByQueryMeta.promote(qMeta);
if (((GroupByQueryMeta)qMeta).fetchDimensions == null) {
System.err.println(""String_Node_Str"");
}
{
id=(Token)match(input,ID,FOLLOW_ID_in_statement383);
if (!((GroupByQueryMeta)qMeta).checkDimOrAlias((id != null ? id.getText() : null))) {
System.err.println(""String_Node_Str"" + (id != null ? id.getText() : null) + ""String_Node_Str"");
}
loop21: while (true) {
int alt21=2;
int LA21_0=input.LA(1);
if ((LA21_0 == WS)) {
int LA21_1=input.LA(2);
if ((LA21_1 == 72)) {
alt21=1;
}
}
 else if ((LA21_0 == 72)) {
alt21=1;
}
switch (alt21) {
case 1:
{
int alt19=2;
int LA19_0=input.LA(1);
if ((LA19_0 == WS)) {
alt19=1;
}
switch (alt19) {
case 1:
{
  match(input,WS,FOLLOW_WS_in_statement415);
}
break;
}
match(input,72,FOLLOW_72_in_statement418);
int alt20=2;
int LA20_0=input.LA(1);
if ((LA20_0 == WS)) {
alt20=1;
}
switch (alt20) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement420);
}
break;
}
id=(Token)match(input,ID,FOLLOW_ID_in_statement425);
if (!((GroupByQueryMeta)qMeta).checkDimOrAlias((id != null ? id.getText() : null))) {
System.err.println(""String_Node_Str"" + (id != null ? id.getText() : null) + ""String_Node_Str"");
}
}
break;
default :
break loop21;
}
}
}
int alt22=2;
int LA22_0=input.LA(1);
if ((LA22_0 == WS)) {
int LA22_1=input.LA(2);
if ((LA22_1 == HAVING)) {
alt22=1;
}
}
switch (alt22) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement482);
match(input,HAVING,FOLLOW_HAVING_in_statement484);
match(input,WS,FOLLOW_WS_in_statement486);
pushFollow(FOLLOW_havingClause_in_statement490);
h=havingClause();
state._fsp--;
((GroupByQueryMeta)qMeta).having=h;
}
break;
}
}
break;
}
qMeta=QueryUtils.checkAndPromoteToTimeSeries(qMeta);
int alt25=2;
int LA25_0=input.LA(1);
if ((LA25_0 == WS)) {
int LA25_1=input.LA(2);
if ((LA25_1 == ORDER)) {
alt25=1;
}
}
switch (alt25) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement534);
match(input,ORDER,FOLLOW_ORDER_in_statement536);
match(input,WS,FOLLOW_WS_in_statement538);
match(input,BY,FOLLOW_BY_in_statement540);
match(input,WS,FOLLOW_WS_in_statement542);
{
id=(Token)match(input,ID,FOLLOW_ID_in_statement547);
}
if (((PlainDimQueryMeta)qMeta).fetchDimensions.size() != 1) {
((GroupByQueryMeta)qMeta).limitSpec=new LimitSpec();
}
 else {
qMeta=TopNQueryMeta.promote(qMeta);
((TopNQueryMeta)qMeta).metric=(id != null ? id.getText() : null);
}
int alt24=2;
int LA24_0=input.LA(1);
if ((LA24_0 == WS)) {
int LA24_1=input.LA(2);
if ((LA24_1 == ASC || LA24_1 == DESC)) {
alt24=1;
}
}
switch (alt24) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement580);
dir=input.LT(1);
if (input.LA(1) == ASC || input.LA(1) == DESC) {
input.consume();
state.errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
if (qMeta instanceof GroupByQueryMeta && ((GroupByQueryMeta)qMeta).limitSpec != null) {
if (dir != null && (dir != null ? dir.getText() : null) != null) {
((GroupByQueryMeta)qMeta).limitSpec.addColumn((id != null ? id.getText() : null),(dir != null ? dir.getText() : null));
}
 else {
((GroupByQueryMeta)qMeta).limitSpec.addColumn((id != null ? id.getText() : null),""String_Node_Str"");
}
}
}
break;
}
if (qMeta instanceof GroupByQueryMeta && ((GroupByQueryMeta)qMeta).limitSpec != null) {
if (!((GroupByQueryMeta)qMeta).limitSpec.columns.containsKey((id != null ? id.getText() : null))) {
((GroupByQueryMeta)qMeta).limitSpec.addColumn((id != null ? id.getText() : null),""String_Node_Str"");
}
}
}
break;
}
int alt26=2;
int LA26_0=input.LA(1);
if ((LA26_0 == WS)) {
int LA26_1=input.LA(2);
if ((LA26_1 == LIMIT)) {
alt26=1;
}
}
switch (alt26) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement634);
match(input,LIMIT,FOLLOW_LIMIT_in_statement636);
match(input,WS,FOLLOW_WS_in_statement638);
{
l=(Token)match(input,LONG,FOLLOW_LONG_in_statement643);
}
if (((PlainDimQueryMeta)qMeta).fetchDimensions.size() != 1) {
((GroupByQueryMeta)qMeta).limitSpec.limit=Long.valueOf((l != null ? l.getText() : null));
}
 else if (qMeta instanceof TopNQueryMeta) {
((TopNQueryMeta)qMeta).threshold=Integer.valueOf((l != null ? l.getText() : null));
}
 else if (qMeta instanceof SelectQueryMeta) {
((SelectQueryMeta)qMeta).pagingSpec.threshold=Integer.valueOf((l != null ? l.getText() : null));
}
}
break;
}
int alt27=2;
int LA27_0=input.LA(1);
if ((LA27_0 == WS)) {
int LA27_1=input.LA(2);
if ((LA27_1 == THEN)) {
alt27=1;
}
}
switch (alt27) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement681);
match(input,THEN,FOLLOW_THEN_in_statement683);
match(input,WS,FOLLOW_WS_in_statement685);
pushFollow(FOLLOW_postAggItem_in_statement689);
p=postAggItem();
state._fsp--;
QueryUtils.setPostAggregation(qMeta,p);
}
break;
}
}
int alt37=2;
int LA37_0=input.LA(1);
if ((LA37_0 == WS)) {
int LA37_1=input.LA(2);
if ((LA37_1 == WHICH)) {
alt37=1;
}
}
switch (alt37) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement704);
match(input,WHICH,FOLLOW_WHICH_in_statement706);
match(input,WS,FOLLOW_WS_in_statement708);
match(input,CONTAINS,FOLLOW_CONTAINS_in_statement710);
qMeta=SearchQueryMeta.promote(qMeta);
int alt28=2;
int LA28_0=input.LA(1);
if ((LA28_0 == WS)) {
alt28=1;
}
switch (alt28) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement714);
}
break;
}
match(input,LPARAN,FOLLOW_LPARAN_in_statement717);
int alt29=2;
int LA29_0=input.LA(1);
if ((LA29_0 == WS)) {
alt29=1;
}
switch (alt29) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement719);
}
break;
}
{
s1=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_statement725);
((SearchQueryMeta)qMeta).type=""String_Node_Str"";
((SearchQueryMeta)qMeta).addValue((s1 != null ? s1.getText() : null));
loop32: while (true) {
int alt32=2;
int LA32_0=input.LA(1);
if ((LA32_0 == WS)) {
int LA32_1=input.LA(2);
if ((LA32_1 == 72)) {
alt32=1;
}
}
 else if ((LA32_0 == 72)) {
alt32=1;
}
switch (alt32) {
case 1:
{
int alt30=2;
int LA30_0=input.LA(1);
if ((LA30_0 == WS)) {
alt30=1;
}
switch (alt30) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement729);
}
break;
}
match(input,72,FOLLOW_72_in_statement732);
int alt31=2;
int LA31_0=input.LA(1);
if ((LA31_0 == WS)) {
alt31=1;
}
switch (alt31) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement734);
}
break;
}
s2=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_statement739);
((SearchQueryMeta)qMeta).type=""String_Node_Str"";
((SearchQueryMeta)qMeta).addValue((s2 != null ? s2.getText() : null));
}
break;
default :
break loop32;
}
}
}
int alt33=2;
int LA33_0=input.LA(1);
if ((LA33_0 == WS)) {
alt33=1;
}
switch (alt33) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement746);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_statement749);
match(input,WS,FOLLOW_WS_in_statement755);
match(input,SORT,FOLLOW_SORT_in_statement757);
int alt34=2;
int LA34_0=input.LA(1);
if ((LA34_0 == WS)) {
alt34=1;
}
switch (alt34) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement759);
}
break;
}
match(input,LPARAN,FOLLOW_LPARAN_in_statement762);
int alt35=2;
int LA35_0=input.LA(1);
if ((LA35_0 == WS)) {
alt35=1;
}
switch (alt35) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement764);
}
break;
}
{
s=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_statement770);
}
((SearchQueryMeta)qMeta).setSort((s != null ? s.getText() : null));
int alt36=2;
int LA36_0=input.LA(1);
if ((LA36_0 == WS)) {
alt36=1;
}
switch (alt36) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement775);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_statement778);
}
break;
}
int alt41=2;
int LA41_0=input.LA(1);
if ((LA41_0 == WS)) {
int LA41_1=input.LA(2);
if ((LA41_1 == HINT)) {
alt41=1;
}
}
switch (alt41) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement790);
match(input,HINT,FOLLOW_HINT_in_statement792);
int alt38=2;
int LA38_0=input.LA(1);
if ((LA38_0 == WS)) {
alt38=1;
}
switch (alt38) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement794);
}
break;
}
match(input,LPARAN,FOLLOW_LPARAN_in_statement797);
int alt39=2;
int LA39_0=input.LA(1);
if ((LA39_0 == WS)) {
alt39=1;
}
switch (alt39) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement799);
}
break;
}
s=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_statement804);
qMeta=HintProcessor.process(qMeta,(s != null ? s.getText() : null));
int alt40=2;
int LA40_0=input.LA(1);
if ((LA40_0 == WS)) {
alt40=1;
}
switch (alt40) {
case 1:
{
match(input,WS,FOLLOW_WS_in_statement808);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_statement811);
}
break;
}
}
break;
}
if (qMeta.intervals == null || qMeta.intervals.isEmpty()) {
qMeta=TimeBoundaryQueryMeta.promote(qMeta);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return qMeta;
}",0.7075064020486556
169130,"public final Filter simpleFilter() throws RecognitionException {
  Filter filter=null;
  Filter a=null;
  try {
    int alt100=2;
    int LA100_0=input.LA(1);
    if ((LA100_0 == ID)) {
      alt100=1;
    }
 else     if ((LA100_0 == LPARAN)) {
      alt100=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",100,0,input);
      throw nvae;
    }
switch (alt100) {
case 1:
{
        int alt96=2;
        int LA96_0=input.LA(1);
        if ((LA96_0 == ID)) {
          int LA96_1=input.LA(2);
          if ((LA96_1 == WS)) {
            int LA96_2=input.LA(3);
            if ((LA96_2 == LIKE)) {
              alt96=2;
            }
 else             if ((LA96_2 == EQUALS)) {
              alt96=1;
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",96,2,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else           if ((LA96_1 == EQUALS)) {
            alt96=1;
          }
 else {
            int nvaeMark=input.mark();
            try {
              input.consume();
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",96,1,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
 else {
          NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",96,0,input);
          throw nvae;
        }
switch (alt96) {
case 1:
{
            pushFollow(FOLLOW_selectorFilter_in_simpleFilter1663);
            a=selectorFilter();
            state._fsp--;
          }
        break;
case 2:
{
        pushFollow(FOLLOW_regexFilter_in_simpleFilter1669);
        a=regexFilter();
        state._fsp--;
      }
    break;
}
filter=a;
}
break;
case 2:
{
{
match(input,LPARAN,FOLLOW_LPARAN_in_simpleFilter1679);
int alt97=2;
int LA97_0=input.LA(1);
if ((LA97_0 == WS)) {
alt97=1;
}
switch (alt97) {
case 1:
{
  match(input,WS,FOLLOW_WS_in_simpleFilter1681);
}
break;
}
int alt98=2;
int LA98_0=input.LA(1);
if ((LA98_0 == ID)) {
int LA98_1=input.LA(2);
if ((LA98_1 == WS)) {
int LA98_2=input.LA(3);
if ((LA98_2 == LIKE)) {
alt98=2;
}
 else if ((LA98_2 == EQUALS)) {
alt98=1;
}
 else {
int nvaeMark=input.mark();
try {
  for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
    input.consume();
  }
  NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",98,2,input);
  throw nvae;
}
  finally {
  input.rewind(nvaeMark);
}
}
}
 else if ((LA98_1 == EQUALS)) {
alt98=1;
}
 else {
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",98,1,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
 else {
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",98,0,input);
throw nvae;
}
switch (alt98) {
case 1:
{
pushFollow(FOLLOW_selectorFilter_in_simpleFilter1687);
a=selectorFilter();
state._fsp--;
}
break;
case 2:
{
pushFollow(FOLLOW_regexFilter_in_simpleFilter1693);
a=regexFilter();
state._fsp--;
}
break;
}
int alt99=2;
int LA99_0=input.LA(1);
if ((LA99_0 == WS)) {
alt99=1;
}
switch (alt99) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleFilter1696);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_simpleFilter1699);
}
filter=a;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return filter;
}","public final Filter simpleFilter() throws RecognitionException {
  Filter filter=null;
  Filter a=null;
  try {
    int alt101=2;
    int LA101_0=input.LA(1);
    if ((LA101_0 == ID)) {
      alt101=1;
    }
 else     if ((LA101_0 == LPARAN)) {
      alt101=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",101,0,input);
      throw nvae;
    }
switch (alt101) {
case 1:
{
        int alt97=2;
        int LA97_0=input.LA(1);
        if ((LA97_0 == ID)) {
          int LA97_1=input.LA(2);
          if ((LA97_1 == WS)) {
            int LA97_2=input.LA(3);
            if ((LA97_2 == LIKE)) {
              alt97=2;
            }
 else             if ((LA97_2 == EQUALS)) {
              alt97=1;
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",97,2,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else           if ((LA97_1 == EQUALS)) {
            alt97=1;
          }
 else {
            int nvaeMark=input.mark();
            try {
              input.consume();
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",97,1,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
 else {
          NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",97,0,input);
          throw nvae;
        }
switch (alt97) {
case 1:
{
            pushFollow(FOLLOW_selectorFilter_in_simpleFilter1694);
            a=selectorFilter();
            state._fsp--;
          }
        break;
case 2:
{
        pushFollow(FOLLOW_regexFilter_in_simpleFilter1700);
        a=regexFilter();
        state._fsp--;
      }
    break;
}
filter=a;
}
break;
case 2:
{
{
match(input,LPARAN,FOLLOW_LPARAN_in_simpleFilter1710);
int alt98=2;
int LA98_0=input.LA(1);
if ((LA98_0 == WS)) {
alt98=1;
}
switch (alt98) {
case 1:
{
  match(input,WS,FOLLOW_WS_in_simpleFilter1712);
}
break;
}
int alt99=2;
int LA99_0=input.LA(1);
if ((LA99_0 == ID)) {
int LA99_1=input.LA(2);
if ((LA99_1 == WS)) {
int LA99_2=input.LA(3);
if ((LA99_2 == LIKE)) {
alt99=2;
}
 else if ((LA99_2 == EQUALS)) {
alt99=1;
}
 else {
int nvaeMark=input.mark();
try {
  for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
    input.consume();
  }
  NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",99,2,input);
  throw nvae;
}
  finally {
  input.rewind(nvaeMark);
}
}
}
 else if ((LA99_1 == EQUALS)) {
alt99=1;
}
 else {
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",99,1,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
 else {
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",99,0,input);
throw nvae;
}
switch (alt99) {
case 1:
{
pushFollow(FOLLOW_selectorFilter_in_simpleFilter1718);
a=selectorFilter();
state._fsp--;
}
break;
case 2:
{
pushFollow(FOLLOW_regexFilter_in_simpleFilter1724);
a=regexFilter();
state._fsp--;
}
break;
}
int alt100=2;
int LA100_0=input.LA(1);
if ((LA100_0 == WS)) {
alt100=1;
}
switch (alt100) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleFilter1727);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_simpleFilter1730);
}
filter=a;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return filter;
}",0.9756031075371404
169131,"public final PostAggItem postAggJavascriptDef() throws RecognitionException {
  PostAggItem postAggItem=null;
  Token str=null;
  postAggItem=new PostAggItem(""String_Node_Str"");
  try {
{
      match(input,JAVASCRIPT,FOLLOW_JAVASCRIPT_in_postAggJavascriptDef2355);
      int alt133=2;
      int LA133_0=input.LA(1);
      if ((LA133_0 == WS)) {
        alt133=1;
      }
switch (alt133) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_postAggJavascriptDef2357);
        }
      break;
  }
  str=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_postAggJavascriptDef2362);
  postAggItem.parseToJs((str != null ? str.getText() : null));
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}","public final PostAggItem postAggJavascriptDef() throws RecognitionException {
  PostAggItem postAggItem=null;
  Token str=null;
  postAggItem=new PostAggItem(""String_Node_Str"");
  try {
{
      match(input,JAVASCRIPT,FOLLOW_JAVASCRIPT_in_postAggJavascriptDef2386);
      int alt134=2;
      int LA134_0=input.LA(1);
      if ((LA134_0 == WS)) {
        alt134=1;
      }
switch (alt134) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_postAggJavascriptDef2388);
        }
      break;
  }
  str=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_postAggJavascriptDef2393);
  postAggItem.parseToJs((str != null ? str.getText() : null));
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}",0.9856584093872228
169132,"public final druidGParser.isoTime_return isoTime() throws RecognitionException {
  druidGParser.isoTime_return retval=new druidGParser.isoTime_return();
  retval.start=input.LT(1);
  Token d=null;
  try {
    int alt134=7;
switch (input.LA(1)) {
case DATE:
{
        alt134=1;
      }
    break;
case DATE_HOUR:
{
    alt134=2;
  }
break;
case DATE_HOUR_MIN:
{
alt134=3;
}
break;
case DATE_HOUR_MIN_SEC:
{
alt134=4;
}
break;
case DATE_HOUR_MIN_SEC_SUB:
{
alt134=5;
}
break;
case DATE_HOUR_MIN_SEC_SUB_TZ:
{
alt134=6;
}
break;
case DATE_HOUR_MIN_SEC_SUB_UTC_TZ:
{
alt134=7;
}
break;
default :
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",134,0,input);
throw nvae;
}
switch (alt134) {
case 1:
{
d=(Token)match(input,DATE,FOLLOW_DATE_in_isoTime2419);
retval.date=(d != null ? d.getText() : null);
}
break;
case 2:
{
d=(Token)match(input,DATE_HOUR,FOLLOW_DATE_HOUR_in_isoTime2427);
retval.date=(d != null ? d.getText() : null);
}
break;
case 3:
{
d=(Token)match(input,DATE_HOUR_MIN,FOLLOW_DATE_HOUR_MIN_in_isoTime2435);
retval.date=(d != null ? d.getText() : null);
}
break;
case 4:
{
d=(Token)match(input,DATE_HOUR_MIN_SEC,FOLLOW_DATE_HOUR_MIN_SEC_in_isoTime2443);
retval.date=(d != null ? d.getText() : null);
}
break;
case 5:
{
d=(Token)match(input,DATE_HOUR_MIN_SEC_SUB,FOLLOW_DATE_HOUR_MIN_SEC_SUB_in_isoTime2451);
retval.date=(d != null ? d.getText() : null);
}
break;
case 6:
{
d=(Token)match(input,DATE_HOUR_MIN_SEC_SUB_TZ,FOLLOW_DATE_HOUR_MIN_SEC_SUB_TZ_in_isoTime2459);
retval.date=(d != null ? d.getText() : null);
}
break;
case 7:
{
d=(Token)match(input,DATE_HOUR_MIN_SEC_SUB_UTC_TZ,FOLLOW_DATE_HOUR_MIN_SEC_SUB_UTC_TZ_in_isoTime2467);
retval.date=(d != null ? d.getText() : null);
}
break;
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}","public final druidGParser.isoTime_return isoTime() throws RecognitionException {
  druidGParser.isoTime_return retval=new druidGParser.isoTime_return();
  retval.start=input.LT(1);
  Token d=null;
  try {
    int alt135=7;
switch (input.LA(1)) {
case DATE:
{
        alt135=1;
      }
    break;
case DATE_HOUR:
{
    alt135=2;
  }
break;
case DATE_HOUR_MIN:
{
alt135=3;
}
break;
case DATE_HOUR_MIN_SEC:
{
alt135=4;
}
break;
case DATE_HOUR_MIN_SEC_SUB:
{
alt135=5;
}
break;
case DATE_HOUR_MIN_SEC_SUB_TZ:
{
alt135=6;
}
break;
case DATE_HOUR_MIN_SEC_SUB_UTC_TZ:
{
alt135=7;
}
break;
default :
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",135,0,input);
throw nvae;
}
switch (alt135) {
case 1:
{
d=(Token)match(input,DATE,FOLLOW_DATE_in_isoTime2450);
retval.date=(d != null ? d.getText() : null);
}
break;
case 2:
{
d=(Token)match(input,DATE_HOUR,FOLLOW_DATE_HOUR_in_isoTime2458);
retval.date=(d != null ? d.getText() : null);
}
break;
case 3:
{
d=(Token)match(input,DATE_HOUR_MIN,FOLLOW_DATE_HOUR_MIN_in_isoTime2466);
retval.date=(d != null ? d.getText() : null);
}
break;
case 4:
{
d=(Token)match(input,DATE_HOUR_MIN_SEC,FOLLOW_DATE_HOUR_MIN_SEC_in_isoTime2474);
retval.date=(d != null ? d.getText() : null);
}
break;
case 5:
{
d=(Token)match(input,DATE_HOUR_MIN_SEC_SUB,FOLLOW_DATE_HOUR_MIN_SEC_SUB_in_isoTime2482);
retval.date=(d != null ? d.getText() : null);
}
break;
case 6:
{
d=(Token)match(input,DATE_HOUR_MIN_SEC_SUB_TZ,FOLLOW_DATE_HOUR_MIN_SEC_SUB_TZ_in_isoTime2490);
retval.date=(d != null ? d.getText() : null);
}
break;
case 7:
{
d=(Token)match(input,DATE_HOUR_MIN_SEC_SUB_UTC_TZ,FOLLOW_DATE_HOUR_MIN_SEC_SUB_UTC_TZ_in_isoTime2498);
retval.date=(d != null ? d.getText() : null);
}
break;
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}",0.9881401617250674
169133,"public final Pair<String> pairString() throws RecognitionException {
  Pair<String> pair=null;
  Token i=null;
  Token j=null;
  try {
{
{
        match(input,LSQUARE,FOLLOW_LSQUARE_in_pairString1372);
        int alt86=2;
        int LA86_0=input.LA(1);
        if ((LA86_0 == WS)) {
          alt86=1;
        }
switch (alt86) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_pairString1374);
          }
        break;
    }
    i=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_pairString1379);
    int alt87=2;
    int LA87_0=input.LA(1);
    if ((LA87_0 == WS)) {
      alt87=1;
    }
switch (alt87) {
case 1:
{
        match(input,WS,FOLLOW_WS_in_pairString1382);
      }
    break;
}
match(input,72,FOLLOW_72_in_pairString1385);
int alt88=2;
int LA88_0=input.LA(1);
if ((LA88_0 == WS)) {
  alt88=1;
}
switch (alt88) {
case 1:
{
    match(input,WS,FOLLOW_WS_in_pairString1387);
  }
break;
}
j=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_pairString1392);
int alt89=2;
int LA89_0=input.LA(1);
if ((LA89_0 == WS)) {
alt89=1;
}
switch (alt89) {
case 1:
{
match(input,WS,FOLLOW_WS_in_pairString1394);
}
break;
}
match(input,RSQUARE,FOLLOW_RSQUARE_in_pairString1397);
}
pair=new Pair<>(((i != null ? i.getText() : null)).replaceAll(""String_Node_Str"",""String_Node_Str""),((j != null ? j.getText() : null)).replaceAll(""String_Node_Str"",""String_Node_Str""));
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return pair;
}","public final Pair<String> pairString() throws RecognitionException {
  Pair<String> pair=null;
  Token i=null;
  Token j=null;
  try {
{
{
        match(input,LSQUARE,FOLLOW_LSQUARE_in_pairString1403);
        int alt87=2;
        int LA87_0=input.LA(1);
        if ((LA87_0 == WS)) {
          alt87=1;
        }
switch (alt87) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_pairString1405);
          }
        break;
    }
    i=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_pairString1410);
    int alt88=2;
    int LA88_0=input.LA(1);
    if ((LA88_0 == WS)) {
      alt88=1;
    }
switch (alt88) {
case 1:
{
        match(input,WS,FOLLOW_WS_in_pairString1413);
      }
    break;
}
match(input,72,FOLLOW_72_in_pairString1416);
int alt89=2;
int LA89_0=input.LA(1);
if ((LA89_0 == WS)) {
  alt89=1;
}
switch (alt89) {
case 1:
{
    match(input,WS,FOLLOW_WS_in_pairString1418);
  }
break;
}
j=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_pairString1423);
int alt90=2;
int LA90_0=input.LA(1);
if ((LA90_0 == WS)) {
alt90=1;
}
switch (alt90) {
case 1:
{
match(input,WS,FOLLOW_WS_in_pairString1425);
}
break;
}
match(input,RSQUARE,FOLLOW_RSQUARE_in_pairString1428);
}
pair=new Pair<>(((i != null ? i.getText() : null)).replaceAll(""String_Node_Str"",""String_Node_Str""),((j != null ? j.getText() : null)).replaceAll(""String_Node_Str"",""String_Node_Str""));
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return pair;
}",0.8938992042440318
169134,"public final Filter grandFilter() throws RecognitionException {
  Filter filter=null;
  Token o=null;
  Filter a=null;
  Filter b=null;
  try {
{
      int alt105=2;
      alt105=dfa105.predict(input);
switch (alt105) {
case 1:
{
          pushFollow(FOLLOW_simpleFilter_in_grandFilter1799);
          a=simpleFilter();
          state._fsp--;
        }
      break;
case 2:
{
      pushFollow(FOLLOW_simpleLogicalFilter_in_grandFilter1805);
      a=simpleLogicalFilter();
      state._fsp--;
    }
  break;
}
filter=a;
int alt106=2;
int LA106_0=input.LA(1);
if ((LA106_0 == WS)) {
int LA106_1=input.LA(2);
if ((LA106_1 == AND || LA106_1 == OR)) {
  alt106=1;
}
}
switch (alt106) {
case 1:
{
  match(input,WS,FOLLOW_WS_in_grandFilter1812);
  o=input.LT(1);
  if (input.LA(1) == AND || input.LA(1) == OR) {
    input.consume();
    state.errorRecovery=false;
  }
 else {
    MismatchedSetException mse=new MismatchedSetException(null,input);
    throw mse;
  }
  match(input,WS,FOLLOW_WS_in_grandFilter1822);
  pushFollow(FOLLOW_grandFilter_in_grandFilter1826);
  b=grandFilter();
  state._fsp--;
  filter=new Filter((o != null ? o.getText() : null).toLowerCase());
  filter.fields=new ArrayList<>();
  filter.fields.add(a);
  filter.fields.add(b);
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return filter;
}","public final Filter grandFilter() throws RecognitionException {
  Filter filter=null;
  Token o=null;
  Filter a=null;
  Filter b=null;
  try {
{
      int alt106=2;
      alt106=dfa106.predict(input);
switch (alt106) {
case 1:
{
          pushFollow(FOLLOW_simpleFilter_in_grandFilter1830);
          a=simpleFilter();
          state._fsp--;
        }
      break;
case 2:
{
      pushFollow(FOLLOW_simpleLogicalFilter_in_grandFilter1836);
      a=simpleLogicalFilter();
      state._fsp--;
    }
  break;
}
filter=a;
int alt107=2;
int LA107_0=input.LA(1);
if ((LA107_0 == WS)) {
int LA107_1=input.LA(2);
if ((LA107_1 == AND || LA107_1 == OR)) {
  alt107=1;
}
}
switch (alt107) {
case 1:
{
  match(input,WS,FOLLOW_WS_in_grandFilter1843);
  o=input.LT(1);
  if (input.LA(1) == AND || input.LA(1) == OR) {
    input.consume();
    state.errorRecovery=false;
  }
 else {
    MismatchedSetException mse=new MismatchedSetException(null,input);
    throw mse;
  }
  match(input,WS,FOLLOW_WS_in_grandFilter1853);
  pushFollow(FOLLOW_grandFilter_in_grandFilter1857);
  b=grandFilter();
  state._fsp--;
  filter=new Filter((o != null ? o.getText() : null).toLowerCase());
  filter.fields=new ArrayList<>();
  filter.fields.add(a);
  filter.fields.add(b);
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return filter;
}",0.9787545787545788
169135,"public final Having havingClause() throws RecognitionException {
  Having having=null;
  Having h=null;
  try {
{
      pushFollow(FOLLOW_complexHaving_in_havingClause1422);
      h=complexHaving();
      state._fsp--;
      having=h;
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return having;
}","public final Having havingClause() throws RecognitionException {
  Having having=null;
  Having h=null;
  try {
{
      pushFollow(FOLLOW_complexHaving_in_havingClause1453);
      h=complexHaving();
      state._fsp--;
      having=h;
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return having;
}",0.9944903581267218
169136,"public final String aggFunc() throws RecognitionException {
  String name=null;
  try {
    int alt112=6;
switch (input.LA(1)) {
case LONG_SUM:
{
        alt112=1;
      }
    break;
case DOUBLE_SUM:
{
    alt112=2;
  }
break;
case UNIQUE:
{
alt112=3;
}
break;
case MIN:
{
alt112=4;
}
break;
case MAX:
{
alt112=5;
}
break;
case JAVASCRIPT:
{
alt112=6;
}
break;
default :
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",112,0,input);
throw nvae;
}
switch (alt112) {
case 1:
{
match(input,LONG_SUM,FOLLOW_LONG_SUM_in_aggFunc1949);
name=""String_Node_Str"";
}
break;
case 2:
{
match(input,DOUBLE_SUM,FOLLOW_DOUBLE_SUM_in_aggFunc1956);
name=""String_Node_Str"";
}
break;
case 3:
{
match(input,UNIQUE,FOLLOW_UNIQUE_in_aggFunc1963);
name=""String_Node_Str"";
}
break;
case 4:
{
match(input,MIN,FOLLOW_MIN_in_aggFunc1970);
name=""String_Node_Str"";
}
break;
case 5:
{
match(input,MAX,FOLLOW_MAX_in_aggFunc1977);
name=""String_Node_Str"";
}
break;
case 6:
{
match(input,JAVASCRIPT,FOLLOW_JAVASCRIPT_in_aggFunc1984);
name=""String_Node_Str"";
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return name;
}","public final String aggFunc() throws RecognitionException {
  String name=null;
  try {
    int alt113=6;
switch (input.LA(1)) {
case LONG_SUM:
{
        alt113=1;
      }
    break;
case DOUBLE_SUM:
{
    alt113=2;
  }
break;
case UNIQUE:
{
alt113=3;
}
break;
case MIN:
{
alt113=4;
}
break;
case MAX:
{
alt113=5;
}
break;
case JAVASCRIPT:
{
alt113=6;
}
break;
default :
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",113,0,input);
throw nvae;
}
switch (alt113) {
case 1:
{
match(input,LONG_SUM,FOLLOW_LONG_SUM_in_aggFunc1980);
name=""String_Node_Str"";
}
break;
case 2:
{
match(input,DOUBLE_SUM,FOLLOW_DOUBLE_SUM_in_aggFunc1987);
name=""String_Node_Str"";
}
break;
case 3:
{
match(input,UNIQUE,FOLLOW_UNIQUE_in_aggFunc1994);
name=""String_Node_Str"";
}
break;
case 4:
{
match(input,MIN,FOLLOW_MIN_in_aggFunc2001);
name=""String_Node_Str"";
}
break;
case 5:
{
match(input,MAX,FOLLOW_MAX_in_aggFunc2008);
name=""String_Node_Str"";
}
break;
case 6:
{
match(input,JAVASCRIPT,FOLLOW_JAVASCRIPT_in_aggFunc2015);
name=""String_Node_Str"";
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return name;
}",0.7387543252595156
169137,"public final PostAggItem hyperUniqueCardinality() throws RecognitionException {
  PostAggItem postAggItem=null;
  Token a=null;
  postAggItem=new PostAggItem(""String_Node_Str"");
  try {
{
{
        match(input,UNIQUE,FOLLOW_UNIQUE_in_hyperUniqueCardinality2312);
        int alt130=2;
        int LA130_0=input.LA(1);
        if ((LA130_0 == WS)) {
          alt130=1;
        }
switch (alt130) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_hyperUniqueCardinality2314);
          }
        break;
    }
    match(input,LPARAN,FOLLOW_LPARAN_in_hyperUniqueCardinality2317);
    int alt131=2;
    int LA131_0=input.LA(1);
    if ((LA131_0 == WS)) {
      alt131=1;
    }
switch (alt131) {
case 1:
{
        match(input,WS,FOLLOW_WS_in_hyperUniqueCardinality2319);
      }
    break;
}
a=(Token)match(input,ID,FOLLOW_ID_in_hyperUniqueCardinality2324);
int alt132=2;
int LA132_0=input.LA(1);
if ((LA132_0 == WS)) {
  alt132=1;
}
switch (alt132) {
case 1:
{
    match(input,WS,FOLLOW_WS_in_hyperUniqueCardinality2326);
  }
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_hyperUniqueCardinality2329);
postAggItem.fieldName=(a != null ? a.getText() : null);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}","public final PostAggItem hyperUniqueCardinality() throws RecognitionException {
  PostAggItem postAggItem=null;
  Token a=null;
  postAggItem=new PostAggItem(""String_Node_Str"");
  try {
{
{
        match(input,UNIQUE,FOLLOW_UNIQUE_in_hyperUniqueCardinality2343);
        int alt131=2;
        int LA131_0=input.LA(1);
        if ((LA131_0 == WS)) {
          alt131=1;
        }
switch (alt131) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_hyperUniqueCardinality2345);
          }
        break;
    }
    match(input,LPARAN,FOLLOW_LPARAN_in_hyperUniqueCardinality2348);
    int alt132=2;
    int LA132_0=input.LA(1);
    if ((LA132_0 == WS)) {
      alt132=1;
    }
switch (alt132) {
case 1:
{
        match(input,WS,FOLLOW_WS_in_hyperUniqueCardinality2350);
      }
    break;
}
a=(Token)match(input,ID,FOLLOW_ID_in_hyperUniqueCardinality2355);
int alt133=2;
int LA133_0=input.LA(1);
if ((LA133_0 == WS)) {
  alt133=1;
}
switch (alt133) {
case 1:
{
    match(input,WS,FOLLOW_WS_in_hyperUniqueCardinality2357);
  }
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_hyperUniqueCardinality2360);
postAggItem.fieldName=(a != null ? a.getText() : null);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}",0.5995260663507109
169138,"public final EqualsToHolder getEquals() throws RecognitionException {
  EqualsToHolder holder=null;
  Token a=null;
  Token b=null;
  try {
{
{
        a=(Token)match(input,ID,FOLLOW_ID_in_getEquals1037);
        int alt53=2;
        int LA53_0=input.LA(1);
        if ((LA53_0 == WS)) {
          alt53=1;
        }
switch (alt53) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_getEquals1039);
          }
        break;
    }
    match(input,EQUALS,FOLLOW_EQUALS_in_getEquals1042);
    int alt54=2;
    int LA54_0=input.LA(1);
    if ((LA54_0 == WS)) {
      alt54=1;
    }
switch (alt54) {
case 1:
{
        match(input,WS,FOLLOW_WS_in_getEquals1044);
      }
    break;
}
b=input.LT(1);
if (input.LA(1) == FLOAT || input.LA(1) == LONG || input.LA(1) == SINGLE_QUOTE_STRING) {
  input.consume();
  state.errorRecovery=false;
}
 else {
  MismatchedSetException mse=new MismatchedSetException(null,input);
  throw mse;
}
}
holder=new EqualsToHolder((a != null ? a.getText() : null),(b != null ? b.getText() : null));
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return holder;
}","public final EqualsToHolder getEquals() throws RecognitionException {
  EqualsToHolder holder=null;
  Token a=null;
  Token b=null;
  try {
{
{
        a=(Token)match(input,ID,FOLLOW_ID_in_getEquals1068);
        int alt54=2;
        int LA54_0=input.LA(1);
        if ((LA54_0 == WS)) {
          alt54=1;
        }
switch (alt54) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_getEquals1070);
          }
        break;
    }
    match(input,EQUALS,FOLLOW_EQUALS_in_getEquals1073);
    int alt55=2;
    int LA55_0=input.LA(1);
    if ((LA55_0 == WS)) {
      alt55=1;
    }
switch (alt55) {
case 1:
{
        match(input,WS,FOLLOW_WS_in_getEquals1075);
      }
    break;
}
b=input.LT(1);
if (input.LA(1) == FLOAT || input.LA(1) == LONG || input.LA(1) == SINGLE_QUOTE_STRING) {
  input.consume();
  state.errorRecovery=false;
}
 else {
  MismatchedSetException mse=new MismatchedSetException(null,input);
  throw mse;
}
}
holder=new EqualsToHolder((a != null ? a.getText() : null),(b != null ? b.getText() : null));
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return holder;
}",0.9530558015943312
169139,"public final void aggCallSite(AggItem aggItem) throws RecognitionException {
  Token x=null;
  String p=null;
  try {
    int alt111=2;
    int LA111_0=input.LA(1);
    if ((LA111_0 == DOUBLE_SUM || LA111_0 == JAVASCRIPT || LA111_0 == LONG_SUM || (LA111_0 >= MAX && LA111_0 <= MIN) || LA111_0 == UNIQUE)) {
      alt111=1;
    }
 else     if ((LA111_0 == COUNT)) {
      alt111=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",111,0,input);
      throw nvae;
    }
switch (alt111) {
case 1:
{
        pushFollow(FOLLOW_aggFunc_in_aggCallSite1894);
        p=aggFunc();
        state._fsp--;
        aggItem.setAggType(p);
{
          int alt108=2;
          int LA108_0=input.LA(1);
          if ((LA108_0 == WS)) {
            alt108=1;
          }
switch (alt108) {
case 1:
{
              match(input,WS,FOLLOW_WS_in_aggCallSite1899);
            }
          break;
      }
      match(input,LPARAN,FOLLOW_LPARAN_in_aggCallSite1902);
      int alt109=2;
      int LA109_0=input.LA(1);
      if ((LA109_0 == WS)) {
        alt109=1;
      }
switch (alt109) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_aggCallSite1904);
        }
      break;
  }
{
    x=(Token)match(input,ID,FOLLOW_ID_in_aggCallSite1911);
    aggItem.setFieldName((x != null ? x.getText() : null));
  }
  int alt110=2;
  int LA110_0=input.LA(1);
  if ((LA110_0 == WS)) {
    alt110=1;
  }
switch (alt110) {
case 1:
{
      match(input,WS,FOLLOW_WS_in_aggCallSite1916);
    }
  break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_aggCallSite1919);
}
}
break;
case 2:
{
match(input,COUNT,FOLLOW_COUNT_in_aggCallSite1926);
aggItem.setAggType(""String_Node_Str"");
{
match(input,70,FOLLOW_70_in_aggCallSite1931);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}","public final void aggCallSite(AggItem aggItem) throws RecognitionException {
  Token x=null;
  String p=null;
  try {
    int alt112=2;
    int LA112_0=input.LA(1);
    if ((LA112_0 == DOUBLE_SUM || LA112_0 == JAVASCRIPT || LA112_0 == LONG_SUM || (LA112_0 >= MAX && LA112_0 <= MIN) || LA112_0 == UNIQUE)) {
      alt112=1;
    }
 else     if ((LA112_0 == COUNT)) {
      alt112=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",112,0,input);
      throw nvae;
    }
switch (alt112) {
case 1:
{
        pushFollow(FOLLOW_aggFunc_in_aggCallSite1925);
        p=aggFunc();
        state._fsp--;
        aggItem.setAggType(p);
{
          int alt109=2;
          int LA109_0=input.LA(1);
          if ((LA109_0 == WS)) {
            alt109=1;
          }
switch (alt109) {
case 1:
{
              match(input,WS,FOLLOW_WS_in_aggCallSite1930);
            }
          break;
      }
      match(input,LPARAN,FOLLOW_LPARAN_in_aggCallSite1933);
      int alt110=2;
      int LA110_0=input.LA(1);
      if ((LA110_0 == WS)) {
        alt110=1;
      }
switch (alt110) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_aggCallSite1935);
        }
      break;
  }
{
    x=(Token)match(input,ID,FOLLOW_ID_in_aggCallSite1942);
    aggItem.setFieldName((x != null ? x.getText() : null));
  }
  int alt111=2;
  int LA111_0=input.LA(1);
  if ((LA111_0 == WS)) {
    alt111=1;
  }
switch (alt111) {
case 1:
{
      match(input,WS,FOLLOW_WS_in_aggCallSite1947);
    }
  break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_aggCallSite1950);
}
}
break;
case 2:
{
match(input,COUNT,FOLLOW_COUNT_in_aggCallSite1957);
aggItem.setAggType(""String_Node_Str"");
{
match(input,70,FOLLOW_70_in_aggCallSite1962);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}",0.8072487644151565
169140,"public final void intervalClause(QueryMeta qMeta) throws RecognitionException {
  Token st2=null;
  Token et2=null;
  ParserRuleReturnScope st=null;
  ParserRuleReturnScope et=null;
  Pair<String> p1=null;
  Pair<String> p2=null;
  try {
{
      match(input,73,FOLLOW_73_in_intervalClause898);
      match(input,WS,FOLLOW_WS_in_intervalClause900);
      match(input,BETWEEN,FOLLOW_BETWEEN_in_intervalClause902);
      match(input,WS,FOLLOW_WS_in_intervalClause904);
      int alt52=2;
      int LA52_0=input.LA(1);
      if (((LA52_0 >= DATE && LA52_0 <= DATE_HOUR_MIN_SEC_SUB_UTC_TZ) || LA52_0 == SINGLE_QUOTE_STRING)) {
        alt52=1;
      }
 else       if ((LA52_0 == LPARAN)) {
        alt52=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",52,0,input);
        throw nvae;
      }
switch (alt52) {
case 1:
{
{
{
              int alt45=2;
              int LA45_0=input.LA(1);
              if (((LA45_0 >= DATE && LA45_0 <= DATE_HOUR_MIN_SEC_SUB_UTC_TZ))) {
                alt45=1;
              }
 else               if ((LA45_0 == SINGLE_QUOTE_STRING)) {
                alt45=2;
              }
 else {
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",45,0,input);
                throw nvae;
              }
switch (alt45) {
case 1:
{
                  pushFollow(FOLLOW_isoTime_in_intervalClause924);
                  st=isoTime();
                  state._fsp--;
                }
              break;
case 2:
{
              st2=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_intervalClause931);
            }
          break;
      }
      match(input,WS,FOLLOW_WS_in_intervalClause935);
      match(input,AND,FOLLOW_AND_in_intervalClause937);
      match(input,WS,FOLLOW_WS_in_intervalClause939);
      int alt46=2;
      int LA46_0=input.LA(1);
      if (((LA46_0 >= DATE && LA46_0 <= DATE_HOUR_MIN_SEC_SUB_UTC_TZ))) {
        alt46=1;
      }
 else       if ((LA46_0 == SINGLE_QUOTE_STRING)) {
        alt46=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",46,0,input);
        throw nvae;
      }
switch (alt46) {
case 1:
{
          pushFollow(FOLLOW_isoTime_in_intervalClause944);
          et=isoTime();
          state._fsp--;
        }
      break;
case 2:
{
      et2=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_intervalClause951);
    }
  break;
}
}
if (st2 != null) {
if (et2 != null) {
qMeta.intervals.add(new Interval((st2 != null ? st2.getText() : null),(et2 != null ? et2.getText() : null)));
}
 else {
qMeta.intervals.add(new Interval((st2 != null ? st2.getText() : null),(et != null ? input.toString(et.start,et.stop) : null)));
}
}
 else {
if (et2 != null) {
qMeta.intervals.add(new Interval((st != null ? input.toString(st.start,st.stop) : null),(et2 != null ? et2.getText() : null)));
}
 else {
qMeta.intervals.add(new Interval((st != null ? input.toString(st.start,st.stop) : null),(et != null ? input.toString(et.start,et.stop) : null)));
}
}
}
}
break;
case 2:
{
{
match(input,LPARAN,FOLLOW_LPARAN_in_intervalClause976);
int alt47=2;
int LA47_0=input.LA(1);
if ((LA47_0 == WS)) {
alt47=1;
}
switch (alt47) {
case 1:
{
match(input,WS,FOLLOW_WS_in_intervalClause978);
}
break;
}
pushFollow(FOLLOW_pairString_in_intervalClause983);
p1=pairString();
state._fsp--;
qMeta.intervals.add(new Interval(p1.a,p1.b));
loop50: while (true) {
int alt50=2;
int LA50_0=input.LA(1);
if ((LA50_0 == WS)) {
int LA50_1=input.LA(2);
if ((LA50_1 == 72)) {
alt50=1;
}
}
 else if ((LA50_0 == 72)) {
alt50=1;
}
switch (alt50) {
case 1:
{
int alt48=2;
int LA48_0=input.LA(1);
if ((LA48_0 == WS)) {
alt48=1;
}
switch (alt48) {
case 1:
{
match(input,WS,FOLLOW_WS_in_intervalClause995);
}
break;
}
match(input,72,FOLLOW_72_in_intervalClause998);
int alt49=2;
int LA49_0=input.LA(1);
if ((LA49_0 == WS)) {
alt49=1;
}
switch (alt49) {
case 1:
{
match(input,WS,FOLLOW_WS_in_intervalClause1000);
}
break;
}
pushFollow(FOLLOW_pairString_in_intervalClause1005);
p2=pairString();
state._fsp--;
qMeta.intervals.add(new Interval(p2.a,p2.b));
}
break;
default :
break loop50;
}
}
int alt51=2;
int LA51_0=input.LA(1);
if ((LA51_0 == WS)) {
alt51=1;
}
switch (alt51) {
case 1:
{
match(input,WS,FOLLOW_WS_in_intervalClause1011);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_intervalClause1014);
}
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}","public final void intervalClause(QueryMeta qMeta) throws RecognitionException {
  Token st2=null;
  Token et2=null;
  ParserRuleReturnScope st=null;
  ParserRuleReturnScope et=null;
  Pair<String> p1=null;
  Pair<String> p2=null;
  try {
{
      match(input,73,FOLLOW_73_in_intervalClause929);
      match(input,WS,FOLLOW_WS_in_intervalClause931);
      match(input,BETWEEN,FOLLOW_BETWEEN_in_intervalClause933);
      match(input,WS,FOLLOW_WS_in_intervalClause935);
      int alt53=2;
      int LA53_0=input.LA(1);
      if (((LA53_0 >= DATE && LA53_0 <= DATE_HOUR_MIN_SEC_SUB_UTC_TZ) || LA53_0 == SINGLE_QUOTE_STRING)) {
        alt53=1;
      }
 else       if ((LA53_0 == LPARAN)) {
        alt53=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",53,0,input);
        throw nvae;
      }
switch (alt53) {
case 1:
{
{
{
              int alt46=2;
              int LA46_0=input.LA(1);
              if (((LA46_0 >= DATE && LA46_0 <= DATE_HOUR_MIN_SEC_SUB_UTC_TZ))) {
                alt46=1;
              }
 else               if ((LA46_0 == SINGLE_QUOTE_STRING)) {
                alt46=2;
              }
 else {
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",46,0,input);
                throw nvae;
              }
switch (alt46) {
case 1:
{
                  pushFollow(FOLLOW_isoTime_in_intervalClause955);
                  st=isoTime();
                  state._fsp--;
                }
              break;
case 2:
{
              st2=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_intervalClause962);
            }
          break;
      }
      match(input,WS,FOLLOW_WS_in_intervalClause966);
      match(input,AND,FOLLOW_AND_in_intervalClause968);
      match(input,WS,FOLLOW_WS_in_intervalClause970);
      int alt47=2;
      int LA47_0=input.LA(1);
      if (((LA47_0 >= DATE && LA47_0 <= DATE_HOUR_MIN_SEC_SUB_UTC_TZ))) {
        alt47=1;
      }
 else       if ((LA47_0 == SINGLE_QUOTE_STRING)) {
        alt47=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",47,0,input);
        throw nvae;
      }
switch (alt47) {
case 1:
{
          pushFollow(FOLLOW_isoTime_in_intervalClause975);
          et=isoTime();
          state._fsp--;
        }
      break;
case 2:
{
      et2=(Token)match(input,SINGLE_QUOTE_STRING,FOLLOW_SINGLE_QUOTE_STRING_in_intervalClause982);
    }
  break;
}
}
if (st2 != null) {
if (et2 != null) {
qMeta.intervals.add(new Interval((st2 != null ? st2.getText() : null),(et2 != null ? et2.getText() : null)));
}
 else {
qMeta.intervals.add(new Interval((st2 != null ? st2.getText() : null),(et != null ? input.toString(et.start,et.stop) : null)));
}
}
 else {
if (et2 != null) {
qMeta.intervals.add(new Interval((st != null ? input.toString(st.start,st.stop) : null),(et2 != null ? et2.getText() : null)));
}
 else {
qMeta.intervals.add(new Interval((st != null ? input.toString(st.start,st.stop) : null),(et != null ? input.toString(et.start,et.stop) : null)));
}
}
}
}
break;
case 2:
{
{
match(input,LPARAN,FOLLOW_LPARAN_in_intervalClause1007);
int alt48=2;
int LA48_0=input.LA(1);
if ((LA48_0 == WS)) {
alt48=1;
}
switch (alt48) {
case 1:
{
match(input,WS,FOLLOW_WS_in_intervalClause1009);
}
break;
}
pushFollow(FOLLOW_pairString_in_intervalClause1014);
p1=pairString();
state._fsp--;
qMeta.intervals.add(new Interval(p1.a,p1.b));
loop51: while (true) {
int alt51=2;
int LA51_0=input.LA(1);
if ((LA51_0 == WS)) {
int LA51_1=input.LA(2);
if ((LA51_1 == 72)) {
alt51=1;
}
}
 else if ((LA51_0 == 72)) {
alt51=1;
}
switch (alt51) {
case 1:
{
int alt49=2;
int LA49_0=input.LA(1);
if ((LA49_0 == WS)) {
alt49=1;
}
switch (alt49) {
case 1:
{
match(input,WS,FOLLOW_WS_in_intervalClause1026);
}
break;
}
match(input,72,FOLLOW_72_in_intervalClause1029);
int alt50=2;
int LA50_0=input.LA(1);
if ((LA50_0 == WS)) {
alt50=1;
}
switch (alt50) {
case 1:
{
match(input,WS,FOLLOW_WS_in_intervalClause1031);
}
break;
}
pushFollow(FOLLOW_pairString_in_intervalClause1036);
p2=pairString();
state._fsp--;
qMeta.intervals.add(new Interval(p2.a,p2.b));
}
break;
default :
break loop51;
}
}
int alt52=2;
int LA52_0=input.LA(1);
if ((LA52_0 == WS)) {
alt52=1;
}
switch (alt52) {
case 1:
{
match(input,WS,FOLLOW_WS_in_intervalClause1042);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_intervalClause1045);
}
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}",0.7727323440812228
169141,"public final Filter simpleLogicalFilter() throws RecognitionException {
  Filter filter=null;
  Token o=null;
  Filter a=null;
  Filter b=null;
  Filter s=null;
  try {
    int alt104=2;
    int LA104_0=input.LA(1);
    if ((LA104_0 == ID || LA104_0 == NOT)) {
      alt104=1;
    }
 else     if ((LA104_0 == LPARAN)) {
switch (input.LA(2)) {
case WS:
{
          int LA104_4=input.LA(3);
          if ((LA104_4 == ID)) {
            int LA104_8=input.LA(4);
            if ((LA104_8 == WS)) {
              int LA104_13=input.LA(5);
              if ((LA104_13 == LIKE)) {
                int LA104_19=input.LA(6);
                if ((LA104_19 == WS)) {
                  alt104=1;
                }
 else {
                  int nvaeMark=input.mark();
                  try {
                    for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                      input.consume();
                    }
                    NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,19,input);
                    throw nvae;
                  }
  finally {
                    input.rewind(nvaeMark);
                  }
                }
              }
 else               if ((LA104_13 == EQUALS)) {
                int LA104_20=input.LA(6);
                if ((LA104_20 == WS)) {
                  alt104=1;
                }
 else                 if ((LA104_20 == FLOAT || LA104_20 == LONG || LA104_20 == SINGLE_QUOTE_STRING)) {
                  alt104=1;
                }
 else {
                  int nvaeMark=input.mark();
                  try {
                    for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                      input.consume();
                    }
                    NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,20,input);
                    throw nvae;
                  }
  finally {
                    input.rewind(nvaeMark);
                  }
                }
              }
 else {
                int nvaeMark=input.mark();
                try {
                  for (int nvaeConsume=0; nvaeConsume < 5 - 1; nvaeConsume++) {
                    input.consume();
                  }
                  NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,13,input);
                  throw nvae;
                }
  finally {
                  input.rewind(nvaeMark);
                }
              }
            }
 else             if ((LA104_8 == EQUALS)) {
              int LA104_14=input.LA(5);
              if ((LA104_14 == WS)) {
                int LA104_21=input.LA(6);
                if ((LA104_21 == FLOAT || LA104_21 == LONG || LA104_21 == SINGLE_QUOTE_STRING)) {
                  alt104=1;
                }
 else {
                  int nvaeMark=input.mark();
                  try {
                    for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                      input.consume();
                    }
                    NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,21,input);
                    throw nvae;
                  }
  finally {
                    input.rewind(nvaeMark);
                  }
                }
              }
 else               if ((LA104_14 == FLOAT || LA104_14 == LONG || LA104_14 == SINGLE_QUOTE_STRING)) {
                int LA104_22=input.LA(6);
                if ((LA104_22 == WS)) {
                  alt104=1;
                }
 else                 if ((LA104_22 == RPARAN)) {
                  alt104=1;
                }
 else {
                  int nvaeMark=input.mark();
                  try {
                    for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                      input.consume();
                    }
                    NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,22,input);
                    throw nvae;
                  }
  finally {
                    input.rewind(nvaeMark);
                  }
                }
              }
 else {
                int nvaeMark=input.mark();
                try {
                  for (int nvaeConsume=0; nvaeConsume < 5 - 1; nvaeConsume++) {
                    input.consume();
                  }
                  NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,14,input);
                  throw nvae;
                }
  finally {
                  input.rewind(nvaeMark);
                }
              }
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 4 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,8,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else           if ((LA104_4 == LPARAN || LA104_4 == NOT)) {
            alt104=2;
          }
 else {
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,4,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
      break;
case ID:
{
      int LA104_5=input.LA(3);
      if ((LA104_5 == WS)) {
        int LA104_11=input.LA(4);
        if ((LA104_11 == LIKE)) {
          int LA104_15=input.LA(5);
          if ((LA104_15 == WS)) {
            int LA104_23=input.LA(6);
            if ((LA104_23 == SINGLE_QUOTE_STRING)) {
              alt104=1;
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,23,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else {
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 5 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,15,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
 else         if ((LA104_11 == EQUALS)) {
          int LA104_16=input.LA(5);
          if ((LA104_16 == WS)) {
            int LA104_24=input.LA(6);
            if ((LA104_24 == FLOAT || LA104_24 == LONG || LA104_24 == SINGLE_QUOTE_STRING)) {
              alt104=1;
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,24,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else           if ((LA104_16 == FLOAT || LA104_16 == LONG || LA104_16 == SINGLE_QUOTE_STRING)) {
            int LA104_25=input.LA(6);
            if ((LA104_25 == WS)) {
              alt104=1;
            }
 else             if ((LA104_25 == RPARAN)) {
              alt104=1;
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,25,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else {
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 5 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,16,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
 else {
          int nvaeMark=input.mark();
          try {
            for (int nvaeConsume=0; nvaeConsume < 4 - 1; nvaeConsume++) {
              input.consume();
            }
            NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,11,input);
            throw nvae;
          }
  finally {
            input.rewind(nvaeMark);
          }
        }
      }
 else       if ((LA104_5 == EQUALS)) {
        int LA104_12=input.LA(4);
        if ((LA104_12 == WS)) {
          int LA104_17=input.LA(5);
          if ((LA104_17 == FLOAT || LA104_17 == LONG || LA104_17 == SINGLE_QUOTE_STRING)) {
            int LA104_26=input.LA(6);
            if ((LA104_26 == WS)) {
              alt104=1;
            }
 else             if ((LA104_26 == RPARAN)) {
              alt104=1;
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,26,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else {
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 5 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,17,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
 else         if ((LA104_12 == FLOAT || LA104_12 == LONG || LA104_12 == SINGLE_QUOTE_STRING)) {
          int LA104_18=input.LA(5);
          if ((LA104_18 == WS)) {
            int LA104_27=input.LA(6);
            if ((LA104_27 == AND || LA104_27 == OR)) {
              alt104=2;
            }
 else             if ((LA104_27 == RPARAN)) {
              alt104=1;
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,27,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else           if ((LA104_18 == RPARAN)) {
            alt104=1;
          }
 else {
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 5 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,18,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
 else {
          int nvaeMark=input.mark();
          try {
            for (int nvaeConsume=0; nvaeConsume < 4 - 1; nvaeConsume++) {
              input.consume();
            }
            NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,12,input);
            throw nvae;
          }
  finally {
            input.rewind(nvaeMark);
          }
        }
      }
 else {
        int nvaeMark=input.mark();
        try {
          for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
            input.consume();
          }
          NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,5,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
  break;
case LPARAN:
case NOT:
{
  alt104=2;
}
break;
default :
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,2,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
 else {
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",104,0,input);
throw nvae;
}
switch (alt104) {
case 1:
{
int alt101=2;
int LA101_0=input.LA(1);
if ((LA101_0 == ID || LA101_0 == LPARAN)) {
alt101=1;
}
 else if ((LA101_0 == NOT)) {
alt101=2;
}
 else {
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",101,0,input);
throw nvae;
}
switch (alt101) {
case 1:
{
{
pushFollow(FOLLOW_simpleFilter_in_simpleLogicalFilter1720);
a=simpleFilter();
state._fsp--;
match(input,WS,FOLLOW_WS_in_simpleLogicalFilter1722);
o=input.LT(1);
if (input.LA(1) == AND || input.LA(1) == OR) {
input.consume();
state.errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
match(input,WS,FOLLOW_WS_in_simpleLogicalFilter1732);
pushFollow(FOLLOW_simpleFilter_in_simpleLogicalFilter1736);
b=simpleFilter();
state._fsp--;
}
}
break;
case 2:
{
{
o=(Token)match(input,NOT,FOLLOW_NOT_in_simpleLogicalFilter1744);
match(input,WS,FOLLOW_WS_in_simpleLogicalFilter1746);
pushFollow(FOLLOW_simpleFilter_in_simpleLogicalFilter1750);
b=simpleFilter();
state._fsp--;
}
}
break;
}
filter=new Filter((o != null ? o.getText() : null).toLowerCase());
filter.fields=new ArrayList<>();
if (a != null) {
filter.fields.add(a);
}
filter.fields.add(b);
}
break;
case 2:
{
{
match(input,LPARAN,FOLLOW_LPARAN_in_simpleLogicalFilter1763);
int alt102=2;
int LA102_0=input.LA(1);
if ((LA102_0 == WS)) {
alt102=1;
}
switch (alt102) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleLogicalFilter1765);
}
break;
}
pushFollow(FOLLOW_simpleLogicalFilter_in_simpleLogicalFilter1770);
s=simpleLogicalFilter();
state._fsp--;
int alt103=2;
int LA103_0=input.LA(1);
if ((LA103_0 == WS)) {
alt103=1;
}
switch (alt103) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleLogicalFilter1772);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_simpleLogicalFilter1775);
}
filter=s;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return filter;
}","public final Filter simpleLogicalFilter() throws RecognitionException {
  Filter filter=null;
  Token o=null;
  Filter a=null;
  Filter b=null;
  Filter s=null;
  try {
    int alt105=2;
    int LA105_0=input.LA(1);
    if ((LA105_0 == ID || LA105_0 == NOT)) {
      alt105=1;
    }
 else     if ((LA105_0 == LPARAN)) {
switch (input.LA(2)) {
case WS:
{
          int LA105_4=input.LA(3);
          if ((LA105_4 == ID)) {
            int LA105_8=input.LA(4);
            if ((LA105_8 == WS)) {
              int LA105_13=input.LA(5);
              if ((LA105_13 == LIKE)) {
                int LA105_19=input.LA(6);
                if ((LA105_19 == WS)) {
                  alt105=1;
                }
 else {
                  int nvaeMark=input.mark();
                  try {
                    for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                      input.consume();
                    }
                    NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,19,input);
                    throw nvae;
                  }
  finally {
                    input.rewind(nvaeMark);
                  }
                }
              }
 else               if ((LA105_13 == EQUALS)) {
                int LA105_20=input.LA(6);
                if ((LA105_20 == WS)) {
                  alt105=1;
                }
 else                 if ((LA105_20 == FLOAT || LA105_20 == LONG || LA105_20 == SINGLE_QUOTE_STRING)) {
                  alt105=1;
                }
 else {
                  int nvaeMark=input.mark();
                  try {
                    for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                      input.consume();
                    }
                    NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,20,input);
                    throw nvae;
                  }
  finally {
                    input.rewind(nvaeMark);
                  }
                }
              }
 else {
                int nvaeMark=input.mark();
                try {
                  for (int nvaeConsume=0; nvaeConsume < 5 - 1; nvaeConsume++) {
                    input.consume();
                  }
                  NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,13,input);
                  throw nvae;
                }
  finally {
                  input.rewind(nvaeMark);
                }
              }
            }
 else             if ((LA105_8 == EQUALS)) {
              int LA105_14=input.LA(5);
              if ((LA105_14 == WS)) {
                int LA105_21=input.LA(6);
                if ((LA105_21 == FLOAT || LA105_21 == LONG || LA105_21 == SINGLE_QUOTE_STRING)) {
                  alt105=1;
                }
 else {
                  int nvaeMark=input.mark();
                  try {
                    for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                      input.consume();
                    }
                    NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,21,input);
                    throw nvae;
                  }
  finally {
                    input.rewind(nvaeMark);
                  }
                }
              }
 else               if ((LA105_14 == FLOAT || LA105_14 == LONG || LA105_14 == SINGLE_QUOTE_STRING)) {
                int LA105_22=input.LA(6);
                if ((LA105_22 == WS)) {
                  alt105=1;
                }
 else                 if ((LA105_22 == RPARAN)) {
                  alt105=1;
                }
 else {
                  int nvaeMark=input.mark();
                  try {
                    for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                      input.consume();
                    }
                    NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,22,input);
                    throw nvae;
                  }
  finally {
                    input.rewind(nvaeMark);
                  }
                }
              }
 else {
                int nvaeMark=input.mark();
                try {
                  for (int nvaeConsume=0; nvaeConsume < 5 - 1; nvaeConsume++) {
                    input.consume();
                  }
                  NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,14,input);
                  throw nvae;
                }
  finally {
                  input.rewind(nvaeMark);
                }
              }
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 4 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,8,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else           if ((LA105_4 == LPARAN || LA105_4 == NOT)) {
            alt105=2;
          }
 else {
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,4,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
      break;
case ID:
{
      int LA105_5=input.LA(3);
      if ((LA105_5 == WS)) {
        int LA105_11=input.LA(4);
        if ((LA105_11 == LIKE)) {
          int LA105_15=input.LA(5);
          if ((LA105_15 == WS)) {
            int LA105_23=input.LA(6);
            if ((LA105_23 == SINGLE_QUOTE_STRING)) {
              alt105=1;
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,23,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else {
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 5 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,15,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
 else         if ((LA105_11 == EQUALS)) {
          int LA105_16=input.LA(5);
          if ((LA105_16 == WS)) {
            int LA105_24=input.LA(6);
            if ((LA105_24 == FLOAT || LA105_24 == LONG || LA105_24 == SINGLE_QUOTE_STRING)) {
              alt105=1;
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,24,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else           if ((LA105_16 == FLOAT || LA105_16 == LONG || LA105_16 == SINGLE_QUOTE_STRING)) {
            int LA105_25=input.LA(6);
            if ((LA105_25 == WS)) {
              alt105=1;
            }
 else             if ((LA105_25 == RPARAN)) {
              alt105=1;
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,25,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else {
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 5 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,16,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
 else {
          int nvaeMark=input.mark();
          try {
            for (int nvaeConsume=0; nvaeConsume < 4 - 1; nvaeConsume++) {
              input.consume();
            }
            NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,11,input);
            throw nvae;
          }
  finally {
            input.rewind(nvaeMark);
          }
        }
      }
 else       if ((LA105_5 == EQUALS)) {
        int LA105_12=input.LA(4);
        if ((LA105_12 == WS)) {
          int LA105_17=input.LA(5);
          if ((LA105_17 == FLOAT || LA105_17 == LONG || LA105_17 == SINGLE_QUOTE_STRING)) {
            int LA105_26=input.LA(6);
            if ((LA105_26 == WS)) {
              alt105=1;
            }
 else             if ((LA105_26 == RPARAN)) {
              alt105=1;
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,26,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else {
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 5 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,17,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
 else         if ((LA105_12 == FLOAT || LA105_12 == LONG || LA105_12 == SINGLE_QUOTE_STRING)) {
          int LA105_18=input.LA(5);
          if ((LA105_18 == WS)) {
            int LA105_27=input.LA(6);
            if ((LA105_27 == AND || LA105_27 == OR)) {
              alt105=2;
            }
 else             if ((LA105_27 == RPARAN)) {
              alt105=1;
            }
 else {
              int nvaeMark=input.mark();
              try {
                for (int nvaeConsume=0; nvaeConsume < 6 - 1; nvaeConsume++) {
                  input.consume();
                }
                NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,27,input);
                throw nvae;
              }
  finally {
                input.rewind(nvaeMark);
              }
            }
          }
 else           if ((LA105_18 == RPARAN)) {
            alt105=1;
          }
 else {
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 5 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,18,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
 else {
          int nvaeMark=input.mark();
          try {
            for (int nvaeConsume=0; nvaeConsume < 4 - 1; nvaeConsume++) {
              input.consume();
            }
            NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,12,input);
            throw nvae;
          }
  finally {
            input.rewind(nvaeMark);
          }
        }
      }
 else {
        int nvaeMark=input.mark();
        try {
          for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
            input.consume();
          }
          NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,5,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
  break;
case LPARAN:
case NOT:
{
  alt105=2;
}
break;
default :
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,2,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
 else {
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",105,0,input);
throw nvae;
}
switch (alt105) {
case 1:
{
int alt102=2;
int LA102_0=input.LA(1);
if ((LA102_0 == ID || LA102_0 == LPARAN)) {
alt102=1;
}
 else if ((LA102_0 == NOT)) {
alt102=2;
}
 else {
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",102,0,input);
throw nvae;
}
switch (alt102) {
case 1:
{
{
pushFollow(FOLLOW_simpleFilter_in_simpleLogicalFilter1751);
a=simpleFilter();
state._fsp--;
match(input,WS,FOLLOW_WS_in_simpleLogicalFilter1753);
o=input.LT(1);
if (input.LA(1) == AND || input.LA(1) == OR) {
input.consume();
state.errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
match(input,WS,FOLLOW_WS_in_simpleLogicalFilter1763);
pushFollow(FOLLOW_simpleFilter_in_simpleLogicalFilter1767);
b=simpleFilter();
state._fsp--;
}
}
break;
case 2:
{
{
o=(Token)match(input,NOT,FOLLOW_NOT_in_simpleLogicalFilter1775);
match(input,WS,FOLLOW_WS_in_simpleLogicalFilter1777);
pushFollow(FOLLOW_simpleFilter_in_simpleLogicalFilter1781);
b=simpleFilter();
state._fsp--;
}
}
break;
}
filter=new Filter((o != null ? o.getText() : null).toLowerCase());
filter.fields=new ArrayList<>();
if (a != null) {
filter.fields.add(a);
}
filter.fields.add(b);
}
break;
case 2:
{
{
match(input,LPARAN,FOLLOW_LPARAN_in_simpleLogicalFilter1794);
int alt103=2;
int LA103_0=input.LA(1);
if ((LA103_0 == WS)) {
alt103=1;
}
switch (alt103) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleLogicalFilter1796);
}
break;
}
pushFollow(FOLLOW_simpleLogicalFilter_in_simpleLogicalFilter1801);
s=simpleLogicalFilter();
state._fsp--;
int alt104=2;
int LA104_0=input.LA(1);
if ((LA104_0 == WS)) {
alt104=1;
}
switch (alt104) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleLogicalFilter1803);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_simpleLogicalFilter1806);
}
filter=s;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return filter;
}",0.9836437358257164
169142,"public final Having complexHaving() throws RecognitionException {
  Having having=null;
  Token o=null;
  Having s=null;
  Having a=null;
  Having b=null;
  try {
    int alt95=2;
    alt95=dfa95.predict(input);
switch (alt95) {
case 1:
{
{
          pushFollow(FOLLOW_simpleHaving_in_complexHaving1533);
          s=simpleHaving();
          state._fsp--;
        }
        having=s;
      }
    break;
case 2:
{
{
      pushFollow(FOLLOW_simpleHaving_in_complexHaving1544);
      a=simpleHaving();
      state._fsp--;
      match(input,WS,FOLLOW_WS_in_complexHaving1546);
      o=input.LT(1);
      if (input.LA(1) == AND || input.LA(1) == OR) {
        input.consume();
        state.errorRecovery=false;
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        throw mse;
      }
      match(input,WS,FOLLOW_WS_in_complexHaving1556);
      pushFollow(FOLLOW_complexHaving_in_complexHaving1560);
      b=complexHaving();
      state._fsp--;
    }
    having=new Having((o != null ? o.getText() : null).toLowerCase());
    having.havingSpecs=Arrays.asList(a,b);
  }
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return having;
}","public final Having complexHaving() throws RecognitionException {
  Having having=null;
  Token o=null;
  Having s=null;
  Having a=null;
  Having b=null;
  try {
    int alt96=2;
    alt96=dfa96.predict(input);
switch (alt96) {
case 1:
{
{
          pushFollow(FOLLOW_simpleHaving_in_complexHaving1564);
          s=simpleHaving();
          state._fsp--;
        }
        having=s;
      }
    break;
case 2:
{
{
      pushFollow(FOLLOW_simpleHaving_in_complexHaving1575);
      a=simpleHaving();
      state._fsp--;
      match(input,WS,FOLLOW_WS_in_complexHaving1577);
      o=input.LT(1);
      if (input.LA(1) == AND || input.LA(1) == OR) {
        input.consume();
        state.errorRecovery=false;
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        throw mse;
      }
      match(input,WS,FOLLOW_WS_in_complexHaving1587);
      pushFollow(FOLLOW_complexHaving_in_complexHaving1591);
      b=complexHaving();
      state._fsp--;
    }
    having=new Having((o != null ? o.getText() : null).toLowerCase());
    having.havingSpecs=Arrays.asList(a,b);
  }
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return having;
}",0.9885527391659852
169143,"public final Having simpleHaving() throws RecognitionException {
  Having having=null;
  Token a=null;
  Token t=null;
  Token v=null;
  Token n=null;
  EqualsToHolder e=null;
  try {
    int alt94=3;
    int LA94_0=input.LA(1);
    if ((LA94_0 == ID)) {
switch (input.LA(2)) {
case WS:
{
          int LA94_3=input.LA(3);
          if ((LA94_3 == COMPARE_OPER)) {
            alt94=1;
          }
 else           if ((LA94_3 == EQUALS)) {
            alt94=2;
          }
 else {
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",94,3,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
      break;
case COMPARE_OPER:
{
      alt94=1;
    }
  break;
case EQUALS:
{
  alt94=2;
}
break;
default :
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",94,1,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
 else if ((LA94_0 == NOT)) {
alt94=3;
}
 else {
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",94,0,input);
throw nvae;
}
switch (alt94) {
case 1:
{
{
a=(Token)match(input,ID,FOLLOW_ID_in_simpleHaving1443);
int alt90=2;
int LA90_0=input.LA(1);
if ((LA90_0 == WS)) {
alt90=1;
}
switch (alt90) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleHaving1445);
}
break;
}
t=(Token)match(input,COMPARE_OPER,FOLLOW_COMPARE_OPER_in_simpleHaving1450);
int alt91=2;
int LA91_0=input.LA(1);
if ((LA91_0 == WS)) {
alt91=1;
}
switch (alt91) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleHaving1452);
}
break;
}
v=input.LT(1);
if (input.LA(1) == FLOAT || input.LA(1) == LONG) {
input.consume();
state.errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
having=new Having((t != null ? t.getText() : null),(a != null ? a.getText() : null),(v != null ? v.getText() : null));
}
break;
case 2:
{
{
pushFollow(FOLLOW_getEquals_in_simpleHaving1474);
e=getEquals();
state._fsp--;
}
having=new Having(""String_Node_Str"",e.name,e.value);
}
break;
case 3:
{
{
n=(Token)match(input,NOT,FOLLOW_NOT_in_simpleHaving1485);
match(input,WS,FOLLOW_WS_in_simpleHaving1487);
a=(Token)match(input,ID,FOLLOW_ID_in_simpleHaving1491);
int alt92=2;
int LA92_0=input.LA(1);
if ((LA92_0 == WS)) {
alt92=1;
}
switch (alt92) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleHaving1493);
}
break;
}
t=(Token)match(input,COMPARE_OPER,FOLLOW_COMPARE_OPER_in_simpleHaving1498);
int alt93=2;
int LA93_0=input.LA(1);
if ((LA93_0 == WS)) {
alt93=1;
}
switch (alt93) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleHaving1500);
}
break;
}
v=input.LT(1);
if (input.LA(1) == FLOAT || input.LA(1) == LONG) {
input.consume();
state.errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
having=new Having((n != null ? n.getText() : null).toLowerCase());
having.havingSpecs=Arrays.asList(new Having((t != null ? t.getText() : null),(a != null ? a.getText() : null),(v != null ? v.getText() : null)));
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return having;
}","public final Having simpleHaving() throws RecognitionException {
  Having having=null;
  Token a=null;
  Token t=null;
  Token v=null;
  Token n=null;
  EqualsToHolder e=null;
  try {
    int alt95=3;
    int LA95_0=input.LA(1);
    if ((LA95_0 == ID)) {
switch (input.LA(2)) {
case WS:
{
          int LA95_3=input.LA(3);
          if ((LA95_3 == COMPARE_OPER)) {
            alt95=1;
          }
 else           if ((LA95_3 == EQUALS)) {
            alt95=2;
          }
 else {
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",95,3,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
      break;
case COMPARE_OPER:
{
      alt95=1;
    }
  break;
case EQUALS:
{
  alt95=2;
}
break;
default :
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",95,1,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
 else if ((LA95_0 == NOT)) {
alt95=3;
}
 else {
NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",95,0,input);
throw nvae;
}
switch (alt95) {
case 1:
{
{
a=(Token)match(input,ID,FOLLOW_ID_in_simpleHaving1474);
int alt91=2;
int LA91_0=input.LA(1);
if ((LA91_0 == WS)) {
alt91=1;
}
switch (alt91) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleHaving1476);
}
break;
}
t=(Token)match(input,COMPARE_OPER,FOLLOW_COMPARE_OPER_in_simpleHaving1481);
int alt92=2;
int LA92_0=input.LA(1);
if ((LA92_0 == WS)) {
alt92=1;
}
switch (alt92) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleHaving1483);
}
break;
}
v=input.LT(1);
if (input.LA(1) == FLOAT || input.LA(1) == LONG) {
input.consume();
state.errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
having=new Having((t != null ? t.getText() : null),(a != null ? a.getText() : null),(v != null ? v.getText() : null));
}
break;
case 2:
{
{
pushFollow(FOLLOW_getEquals_in_simpleHaving1505);
e=getEquals();
state._fsp--;
}
having=new Having(""String_Node_Str"",e.name,e.value);
}
break;
case 3:
{
{
n=(Token)match(input,NOT,FOLLOW_NOT_in_simpleHaving1516);
match(input,WS,FOLLOW_WS_in_simpleHaving1518);
a=(Token)match(input,ID,FOLLOW_ID_in_simpleHaving1522);
int alt93=2;
int LA93_0=input.LA(1);
if ((LA93_0 == WS)) {
alt93=1;
}
switch (alt93) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleHaving1524);
}
break;
}
t=(Token)match(input,COMPARE_OPER,FOLLOW_COMPARE_OPER_in_simpleHaving1529);
int alt94=2;
int LA94_0=input.LA(1);
if ((LA94_0 == WS)) {
alt94=1;
}
switch (alt94) {
case 1:
{
match(input,WS,FOLLOW_WS_in_simpleHaving1531);
}
break;
}
v=input.LT(1);
if (input.LA(1) == FLOAT || input.LA(1) == LONG) {
input.consume();
state.errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
having=new Having((n != null ? n.getText() : null).toLowerCase());
having.havingSpecs=Arrays.asList(new Having((t != null ? t.getText() : null),(a != null ? a.getText() : null),(v != null ? v.getText() : null)));
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return having;
}",0.7066152477009789
169144,"public final void granularityInclude(QueryMeta qMeta) throws RecognitionException {
  Pair<Integer> p1=null;
  Pair<Integer> p2=null;
  try {
{
{
        match(input,WS,FOLLOW_WS_in_granularityInclude1274);
        match(input,INCLUDE,FOLLOW_INCLUDE_in_granularityInclude1276);
        int alt78=2;
        int LA78_0=input.LA(1);
        if ((LA78_0 == WS)) {
          alt78=1;
        }
switch (alt78) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_granularityInclude1278);
          }
        break;
    }
    match(input,LPARAN,FOLLOW_LPARAN_in_granularityInclude1281);
    int alt79=2;
    int LA79_0=input.LA(1);
    if ((LA79_0 == WS)) {
      alt79=1;
    }
switch (alt79) {
case 1:
{
        match(input,WS,FOLLOW_WS_in_granularityInclude1283);
      }
    break;
}
{
  pushFollow(FOLLOW_pairNums_in_granularityInclude1289);
  p1=pairNums();
  state._fsp--;
  qMeta.microIntervals.add(p1);
  loop80:   while (true) {
    int alt80=2;
    int LA80_0=input.LA(1);
    if ((LA80_0 == 72)) {
      alt80=1;
    }
switch (alt80) {
case 1:
{
        match(input,72,FOLLOW_72_in_granularityInclude1294);
        pushFollow(FOLLOW_pairNums_in_granularityInclude1298);
        p2=pairNums();
        state._fsp--;
        qMeta.microIntervals.add(p2);
      }
    break;
default :
  break loop80;
}
}
}
int alt81=2;
int LA81_0=input.LA(1);
if ((LA81_0 == WS)) {
alt81=1;
}
switch (alt81) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityInclude1305);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_granularityInclude1308);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}","public final void granularityInclude(QueryMeta qMeta) throws RecognitionException {
  Pair<Integer> p1=null;
  Pair<Integer> p2=null;
  try {
{
{
        match(input,WS,FOLLOW_WS_in_granularityInclude1305);
        match(input,INCLUDE,FOLLOW_INCLUDE_in_granularityInclude1307);
        int alt79=2;
        int LA79_0=input.LA(1);
        if ((LA79_0 == WS)) {
          alt79=1;
        }
switch (alt79) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_granularityInclude1309);
          }
        break;
    }
    match(input,LPARAN,FOLLOW_LPARAN_in_granularityInclude1312);
    int alt80=2;
    int LA80_0=input.LA(1);
    if ((LA80_0 == WS)) {
      alt80=1;
    }
switch (alt80) {
case 1:
{
        match(input,WS,FOLLOW_WS_in_granularityInclude1314);
      }
    break;
}
{
  pushFollow(FOLLOW_pairNums_in_granularityInclude1320);
  p1=pairNums();
  state._fsp--;
  qMeta.microIntervals.add(p1);
  loop81:   while (true) {
    int alt81=2;
    int LA81_0=input.LA(1);
    if ((LA81_0 == 72)) {
      alt81=1;
    }
switch (alt81) {
case 1:
{
        match(input,72,FOLLOW_72_in_granularityInclude1325);
        pushFollow(FOLLOW_pairNums_in_granularityInclude1329);
        p2=pairNums();
        state._fsp--;
        qMeta.microIntervals.add(p2);
      }
    break;
default :
  break loop81;
}
}
}
int alt82=2;
int LA82_0=input.LA(1);
if ((LA82_0 == WS)) {
alt82=1;
}
switch (alt82) {
case 1:
{
match(input,WS,FOLLOW_WS_in_granularityInclude1336);
}
break;
}
match(input,RPARAN,FOLLOW_RPARAN_in_granularityInclude1339);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
}",0.8528325123152709
169145,"public final PostAggItem simpleArith() throws RecognitionException {
  PostAggItem postAggItem=null;
  PostAggItem a=null;
  PostAggItem b=null;
  postAggItem=new PostAggItem(""String_Node_Str"");
  try {
{
{
        pushFollow(FOLLOW_simplePostAggAccess_in_simpleArith2114);
        a=simplePostAggAccess();
        state._fsp--;
        postAggItem=a;
      }
      int alt125=2;
      alt125=dfa125.predict(input);
switch (alt125) {
case 1:
{
          int alt123=2;
          int LA123_0=input.LA(1);
          if ((LA123_0 == WS)) {
            alt123=1;
          }
switch (alt123) {
case 1:
{
              match(input,WS,FOLLOW_WS_in_simpleArith2120);
            }
          break;
      }
      pushFollow(FOLLOW_postAggArithOper_in_simpleArith2123);
      postAggArithOper(postAggItem);
      state._fsp--;
      int alt124=2;
      int LA124_0=input.LA(1);
      if ((LA124_0 == WS)) {
        alt124=1;
      }
switch (alt124) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_simpleArith2126);
        }
      break;
  }
  pushFollow(FOLLOW_simplePostAggAccess_in_simpleArith2131);
  b=simplePostAggAccess();
  state._fsp--;
  postAggItem=new PostAggItem(""String_Node_Str"");
  if (postAggItem.fields == null) {
    postAggItem.fields=new ArrayList<>();
  }
  postAggItem.fields.add(a);
  postAggItem.fields.add(b);
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}","public final PostAggItem simpleArith() throws RecognitionException {
  PostAggItem postAggItem=null;
  PostAggItem a=null;
  PostAggItem b=null;
  postAggItem=new PostAggItem(""String_Node_Str"");
  try {
{
{
        pushFollow(FOLLOW_simplePostAggAccess_in_simpleArith2145);
        a=simplePostAggAccess();
        state._fsp--;
        postAggItem=a;
      }
      int alt126=2;
      alt126=dfa126.predict(input);
switch (alt126) {
case 1:
{
          int alt124=2;
          int LA124_0=input.LA(1);
          if ((LA124_0 == WS)) {
            alt124=1;
          }
switch (alt124) {
case 1:
{
              match(input,WS,FOLLOW_WS_in_simpleArith2151);
            }
          break;
      }
      pushFollow(FOLLOW_postAggArithOper_in_simpleArith2154);
      postAggArithOper(postAggItem);
      state._fsp--;
      int alt125=2;
      int LA125_0=input.LA(1);
      if ((LA125_0 == WS)) {
        alt125=1;
      }
switch (alt125) {
case 1:
{
          match(input,WS,FOLLOW_WS_in_simpleArith2157);
        }
      break;
  }
  pushFollow(FOLLOW_simplePostAggAccess_in_simpleArith2162);
  b=simplePostAggAccess();
  state._fsp--;
  postAggItem=new PostAggItem(""String_Node_Str"");
  if (postAggItem.fields == null) {
    postAggItem.fields=new ArrayList<>();
  }
  postAggItem.fields.add(a);
  postAggItem.fields.add(b);
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return postAggItem;
}",0.9461697722567288
169146,"public final void postAggLabel(PostAggItem postAggItem) throws RecognitionException {
  Token id=null;
  try {
{
{
        match(input,AS,FOLLOW_AS_in_postAggLabel2378);
        match(input,WS,FOLLOW_WS_in_postAggLabel2380);
        id=(Token)match(input,ID,FOLLOW_ID_in_postAggLabel2384);
      }
      postAggItem.name=(id != null ? id.getText() : null);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
}","public final void postAggLabel(PostAggItem postAggItem) throws RecognitionException {
  Token id=null;
  try {
{
{
        match(input,AS,FOLLOW_AS_in_postAggLabel2409);
        match(input,WS,FOLLOW_WS_in_postAggLabel2411);
        id=(Token)match(input,ID,FOLLOW_ID_in_postAggLabel2415);
      }
      postAggItem.name=(id != null ? id.getText() : null);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
}",0.9829059829059827
169147,"public final void postAggArithOper(PostAggItem postAggItem) throws RecognitionException {
  Token arith=null;
  try {
{
      arith=(Token)match(input,ARITH_OPER,FOLLOW_ARITH_OPER_in_postAggArithOper2400);
      postAggItem.fn=(arith != null ? arith.getText() : null);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
}","public final void postAggArithOper(PostAggItem postAggItem) throws RecognitionException {
  Token arith=null;
  try {
{
      arith=(Token)match(input,ARITH_OPER,FOLLOW_ARITH_OPER_in_postAggArithOper2431);
      postAggItem.fn=(arith != null ? arith.getText() : null);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
}",0.9947368421052633
169148,"public final Pair<Integer> pairNums() throws RecognitionException {
  Pair<Integer> pair=null;
  Token i=null;
  Token j=null;
  try {
{
{
        match(input,LSQUARE,FOLLOW_LSQUARE_in_pairNums1327);
        int alt82=2;
        int LA82_0=input.LA(1);
        if ((LA82_0 == WS)) {
          alt82=1;
        }
switch (alt82) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_pairNums1329);
          }
        break;
    }
    i=(Token)match(input,LONG,FOLLOW_LONG_in_pairNums1334);
    int alt83=2;
    int LA83_0=input.LA(1);
    if ((LA83_0 == WS)) {
      alt83=1;
    }
switch (alt83) {
case 1:
{
        match(input,WS,FOLLOW_WS_in_pairNums1337);
      }
    break;
}
match(input,72,FOLLOW_72_in_pairNums1340);
int alt84=2;
int LA84_0=input.LA(1);
if ((LA84_0 == WS)) {
  alt84=1;
}
switch (alt84) {
case 1:
{
    match(input,WS,FOLLOW_WS_in_pairNums1342);
  }
break;
}
j=(Token)match(input,LONG,FOLLOW_LONG_in_pairNums1347);
int alt85=2;
int LA85_0=input.LA(1);
if ((LA85_0 == WS)) {
alt85=1;
}
switch (alt85) {
case 1:
{
match(input,WS,FOLLOW_WS_in_pairNums1349);
}
break;
}
match(input,RSQUARE,FOLLOW_RSQUARE_in_pairNums1352);
}
pair=new Pair<>(Integer.parseInt((i != null ? i.getText() : null)),Integer.parseInt((j != null ? j.getText() : null)));
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return pair;
}","public final Pair<Integer> pairNums() throws RecognitionException {
  Pair<Integer> pair=null;
  Token i=null;
  Token j=null;
  try {
{
{
        match(input,LSQUARE,FOLLOW_LSQUARE_in_pairNums1358);
        int alt83=2;
        int LA83_0=input.LA(1);
        if ((LA83_0 == WS)) {
          alt83=1;
        }
switch (alt83) {
case 1:
{
            match(input,WS,FOLLOW_WS_in_pairNums1360);
          }
        break;
    }
    i=(Token)match(input,LONG,FOLLOW_LONG_in_pairNums1365);
    int alt84=2;
    int LA84_0=input.LA(1);
    if ((LA84_0 == WS)) {
      alt84=1;
    }
switch (alt84) {
case 1:
{
        match(input,WS,FOLLOW_WS_in_pairNums1368);
      }
    break;
}
match(input,72,FOLLOW_72_in_pairNums1371);
int alt85=2;
int LA85_0=input.LA(1);
if ((LA85_0 == WS)) {
  alt85=1;
}
switch (alt85) {
case 1:
{
    match(input,WS,FOLLOW_WS_in_pairNums1373);
  }
break;
}
j=(Token)match(input,LONG,FOLLOW_LONG_in_pairNums1378);
int alt86=2;
int LA86_0=input.LA(1);
if ((LA86_0 == WS)) {
alt86=1;
}
switch (alt86) {
case 1:
{
match(input,WS,FOLLOW_WS_in_pairNums1380);
}
break;
}
match(input,RSQUARE,FOLLOW_RSQUARE_in_pairNums1383);
}
pair=new Pair<>(Integer.parseInt((i != null ? i.getText() : null)),Integer.parseInt((j != null ? j.getText() : null)));
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return pair;
}",0.8821376281112738
169149,"/** 
 * Register the challenge
 * @return
 */
public int registerChallenge(){
  try {
    String GET_URL=api_url + ""String_Node_Str"" + this.captchaId+ ""String_Node_Str""+ this.challengeId;
    if (this.productType.equals(""String_Node_Str"")) {
      GET_URL+=String.format(""String_Node_Str"",this.productType,this.submitBtnId);
    }
 else {
      GET_URL+=String.format(""String_Node_Str"",this.productType);
    }
    String result_str=readContentFromGet(GET_URL);
    if (32 == result_str.length()) {
      this.challengeId=result_str;
      return 1;
    }
 else {
      System.out.println(""String_Node_Str"");
      return 0;
    }
  }
 catch (  Exception e) {
    gtlog(""String_Node_Str"");
  }
  return 0;
}","/** 
 * Register the challenge
 * @return
 */
public int registerChallenge(){
  try {
    String GET_URL=api_url + ""String_Node_Str"" + this.captchaId;
    String result_str=readContentFromGet(GET_URL);
    if (32 == result_str.length()) {
      this.challengeId=result_str;
      return 1;
    }
 else {
      System.out.println(""String_Node_Str"");
      return 0;
    }
  }
 catch (  Exception e) {
    gtlog(""String_Node_Str"");
  }
  return 0;
}",0.4956672443674176
169150,"/** 
 * generate the dynamic front source
 * @param different product display mode :float,embed,popup
 * @return
 */
public String getGtFrontSource(){
  String frontSource=String.format(""String_Node_Str"" + ""String_Node_Str"",this.api_url,this.captchaId,this.challengeId);
  frontSource+=""String_Node_Str"";
  return frontSource;
}","/** 
 * generate the dynamic front source
 * @param different product display mode :float,embed,popup
 * @return
 */
public String getGtFrontSource(){
  String frontSource=String.format(""String_Node_Str"" + ""String_Node_Str"",this.api_url,this.captchaId,this.challengeId);
  if (this.productType.equals(""String_Node_Str"")) {
    frontSource+=String.format(""String_Node_Str"",this.productType,this.submitBtnId);
  }
 else {
    frontSource+=String.format(""String_Node_Str"",this.productType);
  }
  frontSource+=""String_Node_Str"";
  return frontSource;
}",0.7069555302166477
169151,"/** 
 * Inform the <code>JobStore</code> that the scheduler is now firing the given <code>Trigger</code> (executing its associated <code>Job</code>), that it had previously acquired (reserved).
 * @param triggers a list of triggers
 * @param jedis a thread-safe Redis connection
 * @return may return null if all the triggers or their calendars no longer exist, orif the trigger was not successfully put into the 'executing' state.  Preference is to return an empty list if none of the triggers could be fired.
 */
@Override public List<TriggerFiredResult> triggersFired(List<OperableTrigger> triggers,Jedis jedis) throws JobPersistenceException, ClassNotFoundException {
  List<TriggerFiredResult> results=new ArrayList<>();
  for (  OperableTrigger trigger : triggers) {
    final String triggerHashKey=redisSchema.triggerHashKey(trigger.getKey());
    logger.debug(String.format(""String_Node_Str"",triggerHashKey));
    Pipeline pipe=jedis.pipelined();
    Response<Boolean> triggerExistsResponse=pipe.exists(triggerHashKey);
    Response<Double> triggerAcquiredResponse=pipe.zscore(redisSchema.triggerStateKey(RedisTriggerState.ACQUIRED),triggerHashKey);
    pipe.sync();
    if (!triggerExistsResponse.get() || triggerAcquiredResponse.get() == null) {
      if (!triggerExistsResponse.get()) {
        logger.debug(String.format(""String_Node_Str"",triggerHashKey));
      }
 else {
        logger.debug(String.format(""String_Node_Str"",triggerHashKey));
      }
      continue;
    }
    Calendar calendar=null;
    final String calendarName=trigger.getCalendarName();
    if (calendarName != null) {
      calendar=retrieveCalendar(calendarName,jedis);
      if (calendar == null) {
        continue;
      }
    }
    final Date previousFireTime=trigger.getPreviousFireTime();
    trigger.triggered(calendar);
    final long nextFireTime=trigger.getNextFireTime().getTime();
    jedis.hset(triggerHashKey,TRIGGER_NEXT_FIRE_TIME,Long.toString(nextFireTime));
    setTriggerState(RedisTriggerState.WAITING,(double)nextFireTime,triggerHashKey,jedis);
    JobDetail job=retrieveJob(trigger.getJobKey(),jedis);
    TriggerFiredBundle triggerFiredBundle=new TriggerFiredBundle(job,trigger,calendar,false,new Date(),previousFireTime,previousFireTime,trigger.getNextFireTime());
    if (isJobConcurrentExecutionDisallowed(job.getJobClass())) {
      if (logger.isTraceEnabled()) {
        logger.trace(""String_Node_Str"" + trigger.getKey() + ""String_Node_Str""+ job.getKey()+ ""String_Node_Str"");
      }
      final String jobHashKey=redisSchema.jobHashKey(trigger.getJobKey());
      final String jobTriggerSetKey=redisSchema.jobTriggersSetKey(job.getKey());
      for (      String nonConcurrentTriggerHashKey : jedis.smembers(jobTriggerSetKey)) {
        Double score=jedis.zscore(redisSchema.triggerStateKey(RedisTriggerState.WAITING),nonConcurrentTriggerHashKey);
        if (score != null) {
          if (logger.isTraceEnabled()) {
            logger.trace(""String_Node_Str"" + trigger.getKey() + ""String_Node_Str""+ job.getKey()+ ""String_Node_Str"");
          }
          setTriggerState(RedisTriggerState.BLOCKED,score,nonConcurrentTriggerHashKey,jedis);
        }
 else {
          score=jedis.zscore(redisSchema.triggerStateKey(RedisTriggerState.PAUSED),nonConcurrentTriggerHashKey);
          if (score != null) {
            if (logger.isTraceEnabled()) {
              logger.trace(""String_Node_Str"" + trigger.getKey() + ""String_Node_Str""+ job.getKey()+ ""String_Node_Str"");
            }
            setTriggerState(RedisTriggerState.PAUSED_BLOCKED,score,nonConcurrentTriggerHashKey,jedis);
          }
        }
      }
      pipe=jedis.pipelined();
      pipe.set(redisSchema.jobBlockedKey(job.getKey()),schedulerInstanceId);
      pipe.sadd(redisSchema.blockedJobsSet(),jobHashKey);
      pipe.sync();
    }
 else     if (trigger.getNextFireTime() != null) {
      jedis.hset(triggerHashKey,TRIGGER_NEXT_FIRE_TIME,Long.toString(nextFireTime));
      logger.debug(String.format(""String_Node_Str"",triggerHashKey,nextFireTime));
      setTriggerState(RedisTriggerState.WAITING,(double)nextFireTime,triggerHashKey,jedis);
    }
 else {
      jedis.hset(triggerHashKey,TRIGGER_NEXT_FIRE_TIME,""String_Node_Str"");
      unsetTriggerState(triggerHashKey,jedis);
    }
    results.add(new TriggerFiredResult(triggerFiredBundle));
  }
  return results;
}","/** 
 * Inform the <code>JobStore</code> that the scheduler is now firing the given <code>Trigger</code> (executing its associated <code>Job</code>), that it had previously acquired (reserved).
 * @param triggers a list of triggers
 * @param jedis a thread-safe Redis connection
 * @return may return null if all the triggers or their calendars no longer exist, orif the trigger was not successfully put into the 'executing' state.  Preference is to return an empty list if none of the triggers could be fired.
 */
@Override public List<TriggerFiredResult> triggersFired(List<OperableTrigger> triggers,Jedis jedis) throws JobPersistenceException, ClassNotFoundException {
  List<TriggerFiredResult> results=new ArrayList<>();
  for (  OperableTrigger trigger : triggers) {
    final String triggerHashKey=redisSchema.triggerHashKey(trigger.getKey());
    logger.debug(String.format(""String_Node_Str"",triggerHashKey));
    Pipeline pipe=jedis.pipelined();
    Response<Boolean> triggerExistsResponse=pipe.exists(triggerHashKey);
    Response<Double> triggerAcquiredResponse=pipe.zscore(redisSchema.triggerStateKey(RedisTriggerState.ACQUIRED),triggerHashKey);
    pipe.sync();
    if (!triggerExistsResponse.get() || triggerAcquiredResponse.get() == null) {
      if (!triggerExistsResponse.get()) {
        logger.debug(String.format(""String_Node_Str"",triggerHashKey));
      }
 else {
        logger.debug(String.format(""String_Node_Str"",triggerHashKey));
      }
      continue;
    }
    Calendar calendar=null;
    final String calendarName=trigger.getCalendarName();
    if (calendarName != null) {
      calendar=retrieveCalendar(calendarName,jedis);
      if (calendar == null) {
        continue;
      }
    }
    final Date previousFireTime=trigger.getPreviousFireTime();
    trigger.triggered(calendar);
    final Date nextFireDate=trigger.getNextFireTime();
    long nextFireTime=0;
    if (nextFireDate != null) {
      nextFireTime=nextFireDate.getTime();
      jedis.hset(triggerHashKey,TRIGGER_NEXT_FIRE_TIME,Long.toString(nextFireTime));
      setTriggerState(RedisTriggerState.WAITING,(double)nextFireTime,triggerHashKey,jedis);
    }
    JobDetail job=retrieveJob(trigger.getJobKey(),jedis);
    TriggerFiredBundle triggerFiredBundle=new TriggerFiredBundle(job,trigger,calendar,false,new Date(),previousFireTime,previousFireTime,nextFireDate);
    if (isJobConcurrentExecutionDisallowed(job.getJobClass())) {
      if (logger.isTraceEnabled()) {
        logger.trace(""String_Node_Str"" + trigger.getKey() + ""String_Node_Str""+ job.getKey()+ ""String_Node_Str"");
      }
      final String jobHashKey=redisSchema.jobHashKey(trigger.getJobKey());
      final String jobTriggerSetKey=redisSchema.jobTriggersSetKey(job.getKey());
      for (      String nonConcurrentTriggerHashKey : jedis.smembers(jobTriggerSetKey)) {
        Double score=jedis.zscore(redisSchema.triggerStateKey(RedisTriggerState.WAITING),nonConcurrentTriggerHashKey);
        if (score != null) {
          if (logger.isTraceEnabled()) {
            logger.trace(""String_Node_Str"" + trigger.getKey() + ""String_Node_Str""+ job.getKey()+ ""String_Node_Str"");
          }
          setTriggerState(RedisTriggerState.BLOCKED,score,nonConcurrentTriggerHashKey,jedis);
        }
 else {
          score=jedis.zscore(redisSchema.triggerStateKey(RedisTriggerState.PAUSED),nonConcurrentTriggerHashKey);
          if (score != null) {
            if (logger.isTraceEnabled()) {
              logger.trace(""String_Node_Str"" + trigger.getKey() + ""String_Node_Str""+ job.getKey()+ ""String_Node_Str"");
            }
            setTriggerState(RedisTriggerState.PAUSED_BLOCKED,score,nonConcurrentTriggerHashKey,jedis);
          }
        }
      }
      pipe=jedis.pipelined();
      pipe.set(redisSchema.jobBlockedKey(job.getKey()),schedulerInstanceId);
      pipe.sadd(redisSchema.blockedJobsSet(),jobHashKey);
      pipe.sync();
    }
 else     if (nextFireDate != null) {
      jedis.hset(triggerHashKey,TRIGGER_NEXT_FIRE_TIME,Long.toString(nextFireTime));
      logger.debug(String.format(""String_Node_Str"",triggerHashKey,nextFireTime));
      setTriggerState(RedisTriggerState.WAITING,(double)nextFireTime,triggerHashKey,jedis);
    }
 else {
      jedis.hset(triggerHashKey,TRIGGER_NEXT_FIRE_TIME,""String_Node_Str"");
      unsetTriggerState(triggerHashKey,jedis);
    }
    results.add(new TriggerFiredResult(triggerFiredBundle));
  }
  return results;
}",0.9792710706150342
169152,"/** 
 * Split a string on the configured delimiter
 * @param string the string to split
 * @return a list comprised of the split parts of the given string
 */
protected List<String> split(final String string){
  return Arrays.asList(string.split(delimiter));
}","/** 
 * Split a string on the configured delimiter
 * @param string the string to split
 * @return a list comprised of the split parts of the given string
 */
protected List<String> split(final String string){
  if (null != prefix) {
    return Arrays.asList(string.substring(prefix.length()).split(delimiter));
  }
 else {
    return Arrays.asList(string.split(delimiter));
  }
}",0.8125
169153,"public void setAttribute(String name,String value){
  attributes.put(name,value);
}","@Override public void setAttribute(String name,Object value){
  attributes.put(name,value);
}",0.8863636363636364
169154,"public String getAttribute(String name){
  return attributes.get(name);
}","@Override public Object getAttribute(String name){
  return attributes.get(name);
}",0.8717948717948718
169155,"public AbstractSettings(){
  attributes=new HashMap<String,String>();
}","public AbstractSettings(){
  attributes=new HashMap<String,Object>();
}",0.9295774647887324
169156,"private JobSpecification buildSpecification(TaskHandlerCapabilities cap){
  JobSpecification js=new JobSpecificationImpl();
  File script=block.getAllocationProcessor().getScript();
  boolean staging=cap.supportsAnyOf(Key.FULL_FILE_STAGING,Key.SIMPLE_FILE_STAGING,Key.JOB_DIR_STAGING);
  String scriptArg;
  if (staging) {
    scriptArg=script.getName();
    addStagingSpec(js,script,scriptArg);
  }
 else {
    scriptArg=script.getAbsolutePath();
  }
  String os=settings.getAttribute(""String_Node_Str"");
  boolean isWindows=os != null && os.toLowerCase().contains(""String_Node_Str"");
  String executable;
  if (isWindows) {
    executable=""String_Node_Str"";
  }
 else {
    executable=""String_Node_Str"";
  }
  if (""String_Node_Str"".equals(settings.getUseHashBang())) {
    if (!""String_Node_Str"".equals(settings.getPerfTraceWorker())) {
      js.setExecutable(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(settings.getWorkerLoggingDirectory() + ""String_Node_Str"" + block.getId()+ ""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"" + settings.getPerfTraceWorker());
      js.addArgument(scriptArg);
    }
 else {
      js.setExecutable(scriptArg);
    }
  }
 else {
    if (!""String_Node_Str"".equals(settings.getPerfTraceWorker())) {
      js.setExecutable(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(settings.getWorkerLoggingDirectory() + ""String_Node_Str"" + block.getId()+ ""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"" + settings.getPerfTraceWorker());
      js.addArgument(executable);
    }
 else {
      js.setExecutable(executable);
    }
    js.addArgument(scriptArg);
  }
  if (!staging) {
    js.setDirectory(""String_Node_Str"");
  }
 else {
    js.setDirectory(settings.getDirectory());
  }
  js.addArgument(join(settings.getCallbackURIs(),""String_Node_Str""));
  js.addArgument(block.getId());
  if (settings.getWorkerLoggingLevel().equals(""String_Node_Str"")) {
    js.addArgument(""String_Node_Str"");
  }
 else {
    String logDir=settings.getWorkerLoggingDirectory();
    if (logDir.equals(""String_Node_Str"")) {
      js.addArgument(Bootstrap.LOG_DIR.getAbsolutePath());
    }
 else {
      js.addArgument(logDir);
    }
  }
  js.setStdOutputLocation(FileLocation.MEMORY);
  js.setStdErrorLocation(FileLocation.MEMORY);
  return js;
}","private JobSpecification buildSpecification(TaskHandlerCapabilities cap){
  JobSpecification js=new JobSpecificationImpl();
  File script=block.getAllocationProcessor().getScript();
  boolean staging=cap.supportsAnyOf(Key.FULL_FILE_STAGING,Key.SIMPLE_FILE_STAGING,Key.JOB_DIR_STAGING);
  String scriptArg;
  if (staging) {
    scriptArg=script.getName();
    addStagingSpec(js,script,scriptArg);
  }
 else {
    scriptArg=script.getAbsolutePath();
  }
  String os=(String)settings.getAttribute(""String_Node_Str"");
  boolean isWindows=os != null && os.toLowerCase().contains(""String_Node_Str"");
  String executable;
  if (isWindows) {
    executable=""String_Node_Str"";
  }
 else {
    executable=""String_Node_Str"";
  }
  if (""String_Node_Str"".equals(settings.getUseHashBang())) {
    if (!""String_Node_Str"".equals(settings.getPerfTraceWorker())) {
      js.setExecutable(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(settings.getWorkerLoggingDirectory() + ""String_Node_Str"" + block.getId()+ ""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"" + settings.getPerfTraceWorker());
      js.addArgument(scriptArg);
    }
 else {
      js.setExecutable(scriptArg);
    }
  }
 else {
    if (!""String_Node_Str"".equals(settings.getPerfTraceWorker())) {
      js.setExecutable(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(settings.getWorkerLoggingDirectory() + ""String_Node_Str"" + block.getId()+ ""String_Node_Str"");
      js.addArgument(""String_Node_Str"");
      js.addArgument(""String_Node_Str"" + settings.getPerfTraceWorker());
      js.addArgument(executable);
    }
 else {
      js.setExecutable(executable);
    }
    js.addArgument(scriptArg);
  }
  if (!staging) {
    js.setDirectory(""String_Node_Str"");
  }
 else {
    js.setDirectory(settings.getDirectory());
  }
  js.addArgument(join(settings.getCallbackURIs(),""String_Node_Str""));
  js.addArgument(block.getId());
  if (settings.getWorkerLoggingLevel().equals(""String_Node_Str"")) {
    js.addArgument(""String_Node_Str"");
  }
 else {
    String logDir=settings.getWorkerLoggingDirectory();
    if (logDir.equals(""String_Node_Str"")) {
      js.addArgument(Bootstrap.LOG_DIR.getAbsolutePath());
    }
 else {
      js.addArgument(logDir);
    }
  }
  js.setStdOutputLocation(FileLocation.MEMORY);
  js.setStdErrorLocation(FileLocation.MEMORY);
  return js;
}",0.998502994011976
169157,"public void setAttribute(String name,Object value){
}","public void setAttribute(String name,Object value){
  throw new UnsupportedOperationException();
}",0.7019867549668874
169158,"public void statusChanged(StatusEvent e){
  Stack stack=getStack();
  try {
    int status=e.getStatus().getStatusCode();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + e.getSource().getIdentity() + ""String_Node_Str""+ status);
    }
    if (!e.getStatus().isTerminal()) {
      return;
    }
    Task task=getTask();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + status);
    }
    Scheduler scheduler=getScheduler(stack);
    if (taskHasListener) {
      task.removeStatusListener(this);
    }
    if (e.getStatus().getStatusCode() == Status.COMPLETED) {
      taskCompleted(e,stack);
      setValue(e.getStatus());
    }
 else     if (e.getStatus().getStatusCode() == Status.FAILED) {
      if (taskFailed(e,stack)) {
        fail(new ExecutionException(e.getStatus().getMessage(),e.getStatus().getException()));
      }
    }
  }
 catch (  Exception ex) {
    logger.debug(""String_Node_Str"",ex);
    fail(new ExecutionException(AbstractGridNode.this,ex));
  }
}","public void statusChanged(StatusEvent e){
  Stack stack=getStack();
  try {
    int status=e.getStatus().getStatusCode();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + e.getSource().getIdentity() + ""String_Node_Str""+ status);
    }
    if (!e.getStatus().isTerminal()) {
      return;
    }
    Task task=getTask();
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + status);
    }
    Scheduler scheduler=getScheduler(stack);
    if (taskHasListener) {
      task.removeStatusListener(this);
    }
    if (e.getStatus().getStatusCode() == Status.COMPLETED) {
      taskCompleted(e,stack);
      setValue(e.getStatus());
    }
 else     if (e.getStatus().getStatusCode() == Status.FAILED) {
      if (taskFailed(e,stack)) {
        fail(new ExecutionException(e.getStatus().getMessage(),e.getStatus().getException()));
      }
    }
 else     if (e.getStatus().getStatusCode() == Status.CANCELED) {
      fail(new ExecutionException(""String_Node_Str""));
    }
  }
 catch (  Exception ex) {
    logger.debug(""String_Node_Str"",ex);
    fail(new ExecutionException(AbstractGridNode.this,ex));
  }
}",0.9090069284064664
169159,"public ReplicationManager(Scheduler scheduler,SwiftConfig config){
  this.replicationGroups=new ReplicationGroups(scheduler);
  this.scheduler=scheduler;
  queued=new HashMap<Task,Date>();
  running=new HashMap<Task,Date>();
  try {
    minQueueTime=config.getReplicationMinQueueTime();
    enabled=config.isReplicationEnabled();
    limit=config.getReplicationLimit();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + ""String_Node_Str"",e);
    minQueueTime=60;
  }
  if (enabled) {
    Sweeper.getSweeper().register(this);
  }
}","public ReplicationManager(Scheduler scheduler,SwiftConfig config){
  this.replicationGroups=new ReplicationGroups(scheduler);
  this.scheduler=scheduler;
  queued=new HashMap<Task,Date>();
  running=new HashMap<Task,Date>();
  walltimes=new HashMap<Task,Integer>();
  try {
    minQueueTime=config.getReplicationMinQueueTime();
    enabled=config.isReplicationEnabled();
    limit=config.getReplicationLimit();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + ""String_Node_Str"",e);
    minQueueTime=60;
  }
  if (enabled) {
    Sweeper.getSweeper().register(this);
  }
}",0.9637488947833776
169160,"protected void registerRunning(Task task,Date time){
  JobSpecification spec=(JobSpecification)task.getSpecification();
  Object walltime=spec.getAttribute(""String_Node_Str"");
  int seconds;
  if (walltime == null) {
    seconds=VERY_LARGE_WALLTIME;
  }
 else {
    seconds=WallTime.timeToSeconds(walltime.toString());
  }
  Date deadline=new Date(time.getTime() + WALLTIME_DEADLINE_MULTIPLIER * seconds * 1000);
synchronized (this) {
    running.put(task,deadline);
  }
}","protected void registerRunning(Task task,Date time){
synchronized (this) {
    int seconds=walltimes.remove(task);
    Date deadline=new Date(time.getTime() + WALLTIME_DEADLINE_MULTIPLIER * seconds * 1000);
    running.put(task,deadline);
  }
}",0.5223463687150838
169161,"public void register(String rg,Task task) throws CanceledReplicaException {
  if (enabled) {
    replicationGroups.add(rg,task);
  }
}","public void register(String rg,Task task) throws CanceledReplicaException {
  if (enabled) {
    replicationGroups.add(rg,task);
    addWalltime(task);
  }
}",0.9209621993127148
169162,"public void add(RootHandle node){
  if (!enabled) {
    return;
  }
  nodes.add(node);
}","/** 
 * Registers a root handle with the collector. The handle will  be cleaned at some point in the future.
 */
public void add(RootHandle node){
  if (!enabled) {
    return;
  }
  nodes.add(node);
}",0.6089965397923875
169163,"public void run(){
  try {
    while (true) {
      RootHandle node;
synchronized (queue) {
        while (queue.isEmpty() && !shutdown) {
          queue.wait();
        }
        if (shutdown && queue.isEmpty()) {
          done=true;
          break;
        }
        node=queue.remove();
      }
      try {
        Mapper m=node.getMapper();
        Collection<Path> fringe=node.getFringePaths();
        for (        Path p : fringe) {
          PhysicalFormat pf=m.map(p);
          if (!m.isPersistent(p)) {
            pf.clean();
            m.fileCleaned(pf);
          }
        }
      }
 catch (      Exception e) {
        logger.info(""String_Node_Str"" + node,e);
      }
    }
  }
 catch (  InterruptedException e) {
  }
  done=true;
}","public void run(){
  try {
    while (true) {
      RootHandle node;
synchronized (queue) {
        while (queue.isEmpty() && !shutdown) {
          queue.wait();
        }
        if (shutdown && queue.isEmpty()) {
          done=true;
          break;
        }
        node=queue.remove();
      }
      try {
        AbstractDataNode dn=(AbstractDataNode)node;
        if (!dn.isCleaned()) {
          Mapper m=node.getMapper();
          Collection<Path> fringe=node.getFringePaths();
          for (          Path p : fringe) {
            PhysicalFormat pf=m.map(p);
            if (!m.isPersistent(p)) {
              pf.clean();
              m.fileCleaned(pf);
            }
          }
        }
      }
 catch (      Exception e) {
        logger.info(""String_Node_Str"" + node,e);
      }
    }
  }
 catch (  InterruptedException e) {
  }
  done=true;
}",0.9090909090909092
169164,"public void clean(){
  if (!enabled) {
    return;
  }
synchronized (queue) {
    queue.addAll(nodes);
    nodes.clear();
    queue.notify();
  }
}","/** 
 * Cleans all handles registered with this collector.
 */
public void clean(){
  if (!enabled) {
    return;
  }
synchronized (queue) {
    queue.addAll(nodes);
    nodes.clear();
    queue.notify();
  }
}",0.8235294117647058
169165,"@Override protected void writeScript(Writer wr,String exitcodefile,String stdout,String stderr) throws IOException {
  Task task=getTask();
  JobSpecification spec=getSpec();
  Properties properties=Properties.getProperties();
  getSpec().unpackProviderAttributes();
  validate(task);
  writeHeader(wr);
  String sJobType=(String)spec.getAttribute(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + sJobType);
  }
  RunMode runMode=getRunMode(sJobType);
  if (spec.getAttribute(""String_Node_Str"") != null) {
    runMode=RunMode.APRUN;
  }
  wr.write(""String_Node_Str"");
  wr.write(""String_Node_Str"" + task.getName() + '\n');
  wr.write(""String_Node_Str"");
  writeNonEmptyAttr(""String_Node_Str"",""String_Node_Str"",wr);
  writeCountAndPPN(spec,wr);
  writeWallTime(wr);
  writeNonEmptyAttr(""String_Node_Str"",""String_Node_Str"",wr);
  wr.write(""String_Node_Str"" + quote(stdout) + '\n');
  wr.write(""String_Node_Str"" + quote(stderr) + '\n');
  for (  String name : spec.getEnvironmentVariableNames()) {
    wr.write(""String_Node_Str"");
    wr.write(name);
    wr.write('=');
    wr.write(quote(spec.getEnvironmentVariable(name)));
    wr.write('\n');
  }
  if (spec.getEnvironmentVariableNames().size() > 0) {
    wr.write(""String_Node_Str"" + join(spec.getEnvironmentVariableNames(),""String_Node_Str"") + '\n');
  }
  String resources=(String)spec.getAttribute(""String_Node_Str"");
  if (resources != null && resources.length() > 0) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + resources);
    wr.write(""String_Node_Str"" + resources + '\n');
  }
  if (sJobType != null) {
    writeWrapper(wr,sJobType);
  }
  writePreamble(wr,runMode,""String_Node_Str"",exitcodefile);
  writeCommand(wr,runMode);
  writePostamble(wr,runMode,exitcodefile,stdout,stderr);
  wr.close();
}","@Override protected void writeScript(Writer wr,String exitcodefile,String stdout,String stderr) throws IOException {
  Task task=getTask();
  JobSpecification spec=getSpec();
  Properties properties=Properties.getProperties();
  getSpec().unpackProviderAttributes();
  validate(task);
  writeHeader(wr);
  String sJobType=(String)spec.getAttribute(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + sJobType);
  }
  RunMode runMode=getRunMode(sJobType);
  if (spec.getAttribute(""String_Node_Str"") != null) {
    runMode=RunMode.APRUN;
  }
  wr.write(""String_Node_Str"");
  wr.write(""String_Node_Str"" + task.getName() + '\n');
  wr.write(""String_Node_Str"");
  writeNonEmptyAttr(""String_Node_Str"",""String_Node_Str"",wr);
  writeCountAndPPN(spec,wr);
  writeWallTime(wr);
  writeNonEmptyAttr(""String_Node_Str"",""String_Node_Str"",wr);
  wr.write(""String_Node_Str"" + quote(stdout) + '\n');
  wr.write(""String_Node_Str"" + quote(stderr) + '\n');
  if (spec.getEnvironmentVariableNames().size() > 0) {
    wr.write(""String_Node_Str"" + join(spec.getEnvironmentVariableNames(),""String_Node_Str"") + '\n');
  }
  for (  String name : spec.getEnvironmentVariableNames()) {
    wr.write(""String_Node_Str"");
    wr.write(name);
    wr.write('=');
    wr.write(quote(spec.getEnvironmentVariable(name)));
    wr.write('\n');
  }
  String resources=(String)spec.getAttribute(""String_Node_Str"");
  if (resources != null && resources.length() > 0) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + resources);
    wr.write(""String_Node_Str"" + resources + '\n');
  }
  if (sJobType != null) {
    writeWrapper(wr,sJobType);
  }
  writePreamble(wr,runMode,""String_Node_Str"",exitcodefile);
  writeCommand(wr,runMode);
  writePostamble(wr,runMode,exitcodefile,stdout,stderr);
  wr.close();
}",0.7824657534246575
169166,"private void mpirun(){
  state=State.RUNNING;
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + job.getTask().getIdentity());
  }
  Node n=cpus.get(0).getNode();
  Task t=cloneTaskNoStaging();
  t.setIdentity(new IdentityImpl(t.getIdentity().toString() + ""String_Node_Str""));
  addMPIRun((JobSpecification)t.getSpecification(),n.getHostname());
  NotificationManager.getDefault().registerListener(t.getIdentity().getValue(),t,this);
  SubmitJobCommand sjc=new SubmitJobCommand(t);
  try {
    sjc.executeAsync(n.getChannel(),this);
  }
 catch (  ProtocolException e) {
    errorReceived(null,e.getMessage(),e);
  }
}","private void mpirun(){
  state=State.RUNNING;
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + job.getTask().getIdentity());
  }
  Node n=cpus.get(0).getNode();
  Task t=cloneTaskNoStaging();
  Identity nid=new IdentityImpl();
  nid.setValue(t.getIdentity().toString() + ""String_Node_Str"");
  t.setIdentity(nid);
  addMPIRun((JobSpecification)t.getSpecification(),n.getHostname());
  NotificationManager.getDefault().registerListener(t.getIdentity().getValue(),t,this);
  SubmitJobCommand sjc=new SubmitJobCommand(t);
  try {
    sjc.executeAsync(n.getChannel(),this);
  }
 catch (  ProtocolException e) {
    errorReceived(null,e.getMessage(),e);
  }
}",0.9494640122511484
169167,"private void done(){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + job.getTask().getIdentity() + ""String_Node_Str""+ lastErrorMessage+ ""String_Node_Str""+ lastException,new Throwable());
  }
  releaseNonLeadCpus();
  Status s;
  if (lastErrorMessage != null || lastException != null) {
    s=new StatusImpl(Status.FAILED,lastErrorMessage,lastException);
  }
 else {
    s=new StatusImpl(Status.COMPLETED);
  }
  job.getTask().setStatus(s);
  cpus.get(0).statusChanged(s,null,null);
  if (hostfile != null) {
    hostfile.delete();
  }
}","private void done(){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + job.getTask().getIdentity() + ""String_Node_Str""+ lastErrorMessage+ ""String_Node_Str""+ lastException);
  }
  releaseNonLeadCpus();
  Status s;
  if (lastErrorMessage != null || lastException != null) {
    s=new StatusImpl(Status.FAILED,lastErrorMessage,lastException);
  }
 else {
    s=new StatusImpl(Status.COMPLETED);
  }
  job.getTask().setStatus(s);
  cpus.get(0).statusChanged(s,null,null);
  if (hostfile != null) {
    hostfile.delete();
  }
}",0.9854014598540146
169168,"private void cleanup(CleanUpSet cl){
  state=State.CLEANUP;
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + job.getTask().getIdentity());
  }
  CleanUpSet ncl=new CleanUpSetImpl();
  for (  String s : cl) {
    if (s.startsWith(""String_Node_Str"") || jobdir == null) {
      ncl.add(s);
    }
 else {
      ncl.add(jobdir + ""String_Node_Str"" + s);
    }
  }
  Set<Node> nodes=new HashSet<Node>();
  for (  Cpu cpu : cpus) {
    nodes.add(cpu.getNode());
  }
  cleanupsActive=nodes.size();
  for (  Node node : nodes) {
    CleanupCommand cmd=new CleanupCommand(cl);
    try {
      cmd.executeAsync(node.getChannel(),this);
    }
 catch (    ProtocolException e) {
      setError(e.getMessage(),e);
    }
  }
}","private void cleanup(CleanUpSet cl){
  state=State.CLEANUP;
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + job.getTask().getIdentity());
  }
  CleanUpSet ncl=new CleanUpSetImpl();
  for (  String s : cl) {
    if (s.startsWith(""String_Node_Str"") || jobdir == null) {
      ncl.add(s);
    }
 else {
      ncl.add(jobdir + ""String_Node_Str"" + s);
    }
  }
  Set<Node> nodes=new HashSet<Node>();
  for (  Cpu cpu : cpus) {
    nodes.add(cpu.getNode());
  }
  cleanupsActive=nodes.size();
  for (  Node node : nodes) {
    CleanupCommand cmd=new CleanupCommand(cl);
    try {
      cmd.executeAsync(node.getChannel(),this);
    }
 catch (    ProtocolException e) {
      setError(e.getMessage(),e);
      int r;
synchronized (this) {
        cleanupsActive--;
        r=cleanupsActive;
      }
      checkCleanups(r);
    }
  }
}",0.9156626506024096
169169,"@Override public void errorReceived(Command cmd,String msg,Exception t){
  setError(msg,t);
switch (state) {
case STAGEIN:
    int r;
synchronized (this) {
    stageinsActive--;
    r=stageinsActive;
  }
checkStageins(r);
break;
case RUNNING:
stageout(true);
break;
case STAGEOUT:
cleanup();
break;
case CLEANUP:
done();
break;
}
}","@Override public void errorReceived(Command cmd,String msg,Exception t){
  setError(msg,t);
switch (state) {
case STAGEIN:
    int r;
synchronized (this) {
    stageinsActive--;
    r=stageinsActive;
  }
checkStageins(r);
break;
case RUNNING:
stageout(true);
break;
case STAGEOUT:
cleanup();
break;
case CLEANUP:
int r2;
synchronized (this) {
cleanupsActive--;
r2=cleanupsActive;
}
checkCleanups(r2);
break;
}
}",0.8787061994609164
169170,"@Override public void replyReceived(Command cmd){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + cmd);
  }
switch (state) {
case STAGEIN:
    int r;
synchronized (this) {
    stageinsActive--;
    r=stageinsActive;
  }
checkStageins(r);
break;
case RUNNING:
break;
case STAGEOUT:
cleanup();
break;
case CLEANUP:
done();
break;
}
}","@Override public void replyReceived(Command cmd){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + cmd);
  }
switch (state) {
case STAGEIN:
    int r;
synchronized (this) {
    stageinsActive--;
    r=stageinsActive;
  }
checkStageins(r);
break;
case RUNNING:
break;
case STAGEOUT:
cleanup();
break;
case CLEANUP:
int r2;
synchronized (this) {
cleanupsActive--;
r2=cleanupsActive;
}
checkCleanups(r2);
break;
}
}",0.8644501278772379
169171,"@Override protected ServerSocketChannel openChannel() throws IOException {
  ServerSocketChannel channel=PortManager.getDefault().openServerSocketChannel();
  logger.info(""String_Node_Str"" + getURL());
  return channel;
}","@Override protected ServerSocketChannel openChannel() throws IOException {
  ServerSocketChannel channel=PortManager.getDefault().openServerSocketChannel();
  return channel;
}",0.8866498740554156
169172,"public BootstrapService(){
  super(""String_Node_Str"",-1,null);
  initWebDir();
  initList();
}","public BootstrapService(){
  super(""String_Node_Str"",0,null);
  initWebDir();
  initList();
}",0.983957219251337
169173,"private static void checkImmediateFlags(ArgumentParser ap,String[] argv){
  try {
    ap.parse(argv);
    if (ap.isPresent(ARG_HELP)) {
      ap.usage();
      System.exit(0);
    }
    if (ap.isPresent(ARG_VERSION)) {
      System.out.println(loadVersion());
      System.exit(0);
    }
    if (ap.isPresent(ARG_SITES_FILE)) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      System.exit(1);
    }
    if (ap.isPresent(ARG_TC_FILE)) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      System.exit(1);
    }
    if (ap.isPresent(ARG_LIST_CONFIG)) {
      SwiftConfig config=loadConfig(ap,getCommandLineProperties(ap));
      String val=ap.getStringValue(ARG_LIST_CONFIG);
      if (""String_Node_Str"".equals(val)) {
        System.out.println(config.toString(true,false));
        System.exit(0);
      }
 else       if (""String_Node_Str"".equals(val)) {
        System.out.println(config.toString(true,true));
        System.exit(0);
      }
 else {
        System.err.println(""String_Node_Str"" + val + ""String_Node_Str""+ ""String_Node_Str"");
        System.exit(1);
      }
    }
    if (!ap.hasValue(ArgumentParser.DEFAULT) && !ap.isPresent(ARG_EXECUTE)) {
      System.out.println(loadVersion());
      error(""String_Node_Str"");
    }
    if (ap.isPresent(ARG_PAUSE_ON_START)) {
      System.out.println(""String_Node_Str"");
      System.in.read();
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    shortUsage();
    System.exit(1);
  }
}","private static void checkImmediateFlags(ArgumentParser ap,String[] argv){
  try {
    ap.parse(argv);
    if (ap.isPresent(ARG_HELP)) {
      ap.usage();
      System.exit(0);
    }
    if (ap.isPresent(ARG_VERSION)) {
      System.out.println(loadVersion());
      System.exit(0);
    }
    if (ap.isPresent(ARG_SITES_FILE)) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      System.exit(1);
    }
    if (ap.isPresent(ARG_TC_FILE)) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      System.exit(1);
    }
    if (ap.isPresent(ARG_LIST_CONFIG)) {
      SwiftConfig config=loadConfig(ap,getCommandLineProperties(ap));
      String val=ap.getStringValue(ARG_LIST_CONFIG);
      if (""String_Node_Str"".equals(val)) {
        System.out.println(config.toString(true,false));
        System.exit(0);
      }
 else       if (""String_Node_Str"".equals(val)) {
        System.out.println(config.toString(true,true));
        System.exit(0);
      }
 else {
        System.err.println(""String_Node_Str"" + val + ""String_Node_Str""+ ""String_Node_Str"");
        System.exit(1);
      }
    }
    if (ap.isPresent(ARG_PAUSE_ON_START)) {
      System.out.println(""String_Node_Str"");
      System.in.read();
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    shortUsage();
    System.exit(1);
  }
}",0.9480648362553754
169174,"public static void main(String[] argv){
  ArgumentParser ap=buildArgumentParser();
  checkImmediateFlags(ap,argv);
  boolean runerror=false;
  String runID=makeRunId(ap);
  HangChecker hangChecker=null;
  try {
    String project;
    String source;
    String projectName;
    if (ap.isPresent(ARG_EXECUTE)) {
      project=""String_Node_Str"";
      projectName=""String_Node_Str"";
      source=ap.getStringValue(ARG_EXECUTE);
      if (ap.hasValue(ArgumentParser.DEFAULT)) {
        throw new IllegalArgumentException(""String_Node_Str"" + ARG_EXECUTE + ""String_Node_Str"");
      }
    }
 else {
      project=ap.getStringValue(ArgumentParser.DEFAULT);
      checkValidProject(project);
      projectName=projectName(project);
      source=null;
    }
    SwiftConfig config=loadConfig(ap,getCommandLineProperties(ap));
    if (ap.isPresent(ARG_SITELIST)) {
      printSiteList(config);
      System.exit(0);
    }
    setupLogging(ap,config,projectName,runID);
    logBasicInfo(argv,runID,config);
    boolean provenanceEnabled=config.isProvenanceEnabled();
    if (ap.isPresent(ARG_CDMFILE)) {
      loadCDM(ap,config);
    }
    WrapperNode tree=null;
    if (project.endsWith(""String_Node_Str"")) {
      try {
        tree=load(project);
      }
 catch (      Exception pe) {
        logger.debug(""String_Node_Str"" + project,pe);
        System.exit(3);
      }
    }
 else     if (source != null) {
      try {
        String kml=compileString(source,provenanceEnabled);
        tree=loadFromString(kml);
      }
 catch (      ParsingException pe) {
        logger.debug(""String_Node_Str"" + project,pe);
        System.exit(3);
      }
    }
 else {
      try {
        project=compile(project,ap.isPresent(ARG_RECOMPILE),provenanceEnabled);
      }
 catch (      ParsingException pe) {
        logger.debug(""String_Node_Str"" + project,pe);
        System.exit(3);
      }
      tree=load(project);
    }
    tree.setProperty(""String_Node_Str"",projectName + ""String_Node_Str"" + runID);
    tree.setProperty(WrapperNode.FILENAME,project);
    Context context=new Context();
    context.setArguments(ap.getArguments());
    context.setAttribute(""String_Node_Str"",config);
    context.setAttribute(""String_Node_Str"",projectName);
    context.setAttribute(""String_Node_Str"",projectName);
    context.setAttribute(""String_Node_Str"",runID);
    context.setAttribute(""String_Node_Str"",ap.isPresent(ARG_DRYRUN));
    context.setAttribute(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    String debugDirPrefix=System.getProperty(""String_Node_Str"");
    if (debugDirPrefix == null) {
      debugDirPrefix=""String_Node_Str"";
    }
 else     if (debugDirPrefix.charAt(debugDirPrefix.length() - 1) != File.separatorChar) {
      debugDirPrefix+=File.separatorChar;
    }
    context.setAttribute(""String_Node_Str"",debugDirPrefix);
    Main root=compileKarajan(tree,context);
    root.setFileName(projectName);
    SwiftExecutor ec=new SwiftExecutor(root);
    List<String> arguments=ap.getArguments();
    if (ap.hasValue(ARG_RESUME)) {
      arguments.add(""String_Node_Str"" + ap.getStringValue(ARG_RESUME));
    }
    logger.info(""String_Node_Str"");
    hangChecker=new HangChecker(context);
    hangChecker.start();
    long start=System.currentTimeMillis();
    ec.start(context);
    ec.waitFor();
    long end=System.currentTimeMillis();
    if (ec.isFailed()) {
      runerror=true;
    }
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"",e);
    error(""String_Node_Str"" + getMessages(e));
  }
  if (runerror) {
    logger.info(""String_Node_Str"");
  }
 else {
    logger.info(""String_Node_Str"");
  }
  if (hangChecker != null) {
    hangChecker.stop();
    hangChecker.startShutdownCheck();
  }
  if (ma != null) {
    ma.close();
  }
  System.exit(runerror ? 2 : 0);
}","public static void main(String[] argv){
  ArgumentParser ap=buildArgumentParser();
  checkImmediateFlags(ap,argv);
  boolean runerror=false;
  String runID=makeRunId(ap);
  HangChecker hangChecker=null;
  try {
    String project;
    String source;
    String projectName;
    SwiftConfig config=loadConfig(ap,getCommandLineProperties(ap));
    if (ap.isPresent(ARG_SITELIST)) {
      printSiteList(config);
      System.exit(0);
    }
    if (ap.isPresent(ARG_EXECUTE)) {
      project=""String_Node_Str"";
      projectName=""String_Node_Str"";
      source=ap.getStringValue(ARG_EXECUTE);
      if (ap.hasValue(ArgumentParser.DEFAULT)) {
        throw new IllegalArgumentException(""String_Node_Str"" + ARG_EXECUTE + ""String_Node_Str"");
      }
    }
 else {
      if (!ap.hasValue(ArgumentParser.DEFAULT)) {
        System.out.println(loadVersion());
        error(""String_Node_Str"");
      }
      project=ap.getStringValue(ArgumentParser.DEFAULT);
      checkValidProject(project);
      projectName=projectName(project);
      source=null;
    }
    setupLogging(ap,config,projectName,runID);
    logBasicInfo(argv,runID,config);
    boolean provenanceEnabled=config.isProvenanceEnabled();
    if (ap.isPresent(ARG_CDMFILE)) {
      loadCDM(ap,config);
    }
    WrapperNode tree=null;
    if (project.endsWith(""String_Node_Str"")) {
      try {
        tree=load(project);
      }
 catch (      Exception pe) {
        logger.debug(""String_Node_Str"" + project,pe);
        System.exit(3);
      }
    }
 else     if (source != null) {
      try {
        String kml=compileString(source,provenanceEnabled);
        tree=loadFromString(kml);
      }
 catch (      ParsingException pe) {
        logger.debug(""String_Node_Str"" + project,pe);
        System.exit(3);
      }
    }
 else {
      try {
        project=compile(project,ap.isPresent(ARG_RECOMPILE),provenanceEnabled);
      }
 catch (      ParsingException pe) {
        logger.debug(""String_Node_Str"" + project,pe);
        System.exit(3);
      }
      tree=load(project);
    }
    tree.setProperty(""String_Node_Str"",projectName + ""String_Node_Str"" + runID);
    tree.setProperty(WrapperNode.FILENAME,project);
    Context context=new Context();
    context.setArguments(ap.getArguments());
    context.setAttribute(""String_Node_Str"",config);
    context.setAttribute(""String_Node_Str"",projectName);
    context.setAttribute(""String_Node_Str"",projectName);
    context.setAttribute(""String_Node_Str"",runID);
    context.setAttribute(""String_Node_Str"",ap.isPresent(ARG_DRYRUN));
    context.setAttribute(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    String debugDirPrefix=System.getProperty(""String_Node_Str"");
    if (debugDirPrefix == null) {
      debugDirPrefix=""String_Node_Str"";
    }
 else     if (debugDirPrefix.charAt(debugDirPrefix.length() - 1) != File.separatorChar) {
      debugDirPrefix+=File.separatorChar;
    }
    context.setAttribute(""String_Node_Str"",debugDirPrefix);
    Main root=compileKarajan(tree,context);
    root.setFileName(projectName);
    SwiftExecutor ec=new SwiftExecutor(root);
    List<String> arguments=ap.getArguments();
    if (ap.hasValue(ARG_RESUME)) {
      arguments.add(""String_Node_Str"" + ap.getStringValue(ARG_RESUME));
    }
    logger.info(""String_Node_Str"");
    hangChecker=new HangChecker(context);
    hangChecker.start();
    long start=System.currentTimeMillis();
    ec.start(context);
    ec.waitFor();
    long end=System.currentTimeMillis();
    if (ec.isFailed()) {
      runerror=true;
    }
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"",e);
    error(""String_Node_Str"" + getMessages(e));
  }
  if (runerror) {
    logger.info(""String_Node_Str"");
  }
 else {
    logger.info(""String_Node_Str"");
  }
  if (hangChecker != null) {
    hangChecker.stop();
    hangChecker.startShutdownCheck();
  }
  if (ma != null) {
    ma.close();
  }
  System.exit(runerror ? 2 : 0);
}",0.9350952195880295
169175,"@Override public void processMessage(SystemState state,SimpleParser p,Object details){
  try {
    p.skip(""String_Node_Str"");
    p.beginToken();
    p.markTo(""String_Node_Str"");
    String blockId=p.getToken();
    p.skip(""String_Node_Str"");
    p.beginToken();
    p.markTo(""String_Node_Str"");
    int cores=Integer.parseInt(p.getToken());
    p.skip(""String_Node_Str"");
    p.beginToken();
    p.markTo(""String_Node_Str"");
    int coresPerWorker=Integer.parseInt(p.getToken());
    p.skip(""String_Node_Str"");
    int walltime=Integer.parseInt(p.remaining());
    CoasterStatusItem item=(CoasterStatusItem)state.getItemByID(CoasterStatusItem.ID,StatefulItemClass.MISC);
    item.newBlock(blockId,cores,coresPerWorker,walltime);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void processMessage(SystemState state,SimpleParser p,Object details){
  try {
    p.skip(""String_Node_Str"");
    p.beginToken();
    p.markTo(""String_Node_Str"");
    String blockId=p.getToken();
    p.skip(""String_Node_Str"");
    p.beginToken();
    p.markTo(""String_Node_Str"");
    int cores=Integer.parseInt(p.getToken());
    p.skip(""String_Node_Str"");
    p.beginToken();
    p.markTo(""String_Node_Str"");
    int coresPerWorker=Integer.parseInt(p.getToken());
    p.skip(""String_Node_Str"");
    long walltime=Long.parseLong(p.remaining());
    CoasterStatusItem item=(CoasterStatusItem)state.getItemByID(CoasterStatusItem.ID,StatefulItemClass.MISC);
    item.newBlock(blockId,cores,coresPerWorker,walltime);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9765377298668356
169176,"@Override protected Node compileBody(WrapperNode w,Scope argScope,Scope scope) throws CompilationException {
  if (this.getClass() == SetFieldValue.class && var.isStatic() && path.isStatic() && value.isStatic()) {
    if (getParent().getParent().getParent().getType().equals(""String_Node_Str"")) {
      try {
        DSHandle var=this.var.getValue();
        Path path=parsePath(this.path.getValue());
        DSHandle leaf=var.getField(path);
        AbstractDataNode value=this.value.getValue();
        if (value.isClosed()) {
          State state=new State();
          deepCopy(leaf,value,state,0);
          return null;
        }
      }
 catch (      Exception e) {
        throw new CompilationException(w,""String_Node_Str"",e);
      }
    }
  }
  return super.compileBody(w,argScope,scope);
}","@Override protected Node compileBody(WrapperNode w,Scope argScope,Scope scope) throws CompilationException {
  if (_traceline.getValue() != null) {
    setLine(_traceline.getValue());
  }
  tracer=Tracer.getTracer(this);
  if (this.getClass() == SetFieldValue.class && var.isStatic() && path.isStatic() && value.isStatic()) {
    if (getParent().getParent().getParent().getType().equals(""String_Node_Str"")) {
      try {
        DSHandle var=this.var.getValue();
        Path path=parsePath(this.path.getValue());
        DSHandle leaf=var.getField(path);
        AbstractDataNode value=this.value.getValue();
        if (value.isClosed()) {
          State state=new State();
          deepCopy(leaf,value,state,0);
          if (tracer.isEnabled()) {
            String mdst=this.dst;
            if (mdst == null) {
              mdst=Tracer.getVarName(var);
              if (var.getParent() == null) {
                this.dst=mdst;
              }
            }
            logStatic(leaf,value,mdst);
          }
          return null;
        }
      }
 catch (      Exception e) {
        throw new CompilationException(w,""String_Node_Str"",e);
      }
    }
  }
  return super.compileBody(w,argScope,scope);
}",0.7946561108362197
169177,"private static void copyNonComposite(DSHandle dest,DSHandle source,State state,int level) throws InvalidPathException {
  Path dpath=dest.getPathFromRoot();
  Mapper dmapper=dest.getMapper();
  if (dmapper.canBeRemapped(dpath)) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + dest + ""String_Node_Str""+ source);
    }
    dmapper.remap(dpath,source.getMapper(),source.getPathFromRoot());
    dest.setValue(AbstractDataNode.FILE_VALUE);
  }
 else {
    StateEntry se=getStateEntry(state,level);
    FileCopier fc=se.value();
    if (fc != null) {
      if (!fc.isClosed()) {
        throw new FutureNotYetAvailable(fc);
      }
 else {
        if (fc.getException() != null) {
          throw new ExecutionException(""String_Node_Str"" + source + ""String_Node_Str""+ dest,fc.getException());
        }
      }
      dest.setValue(AbstractDataNode.FILE_VALUE);
    }
 else {
      fc=new FileCopier(source.getMapper().map(source.getPathFromRoot()),dmapper.map(dpath));
      se.value(fc);
      try {
        fc.start();
      }
 catch (      Exception e) {
        throw new ExecutionException(""String_Node_Str"",e);
      }
      throw new FutureNotYetAvailable(fc);
    }
    popStateEntry(state);
  }
}","private static void copyNonComposite(DSHandle dest,DSHandle source,State state,int level) throws InvalidPathException {
  Path dpath=dest.getPathFromRoot();
  Mapper dmapper=dest.getMapper();
  StateEntry se=getStateEntry(state,level);
  FileCopier fc=se.value();
  if (fc != null) {
    if (!fc.isClosed()) {
      throw new FutureNotYetAvailable(fc);
    }
 else {
      if (fc.getException() != null) {
        throw new ExecutionException(""String_Node_Str"" + source + ""String_Node_Str""+ dest,fc.getException());
      }
    }
    dest.setValue(AbstractDataNode.FILE_VALUE);
  }
 else {
    fc=new FileCopier(source.getMapper().map(source.getPathFromRoot()),dmapper.map(dpath),!dmapper.isPersistent(dpath));
    se.value(fc);
    try {
      if (fc.start()) {
        dest.setValue(AbstractDataNode.FILE_VALUE);
        popStateEntry(state);
        return;
      }
    }
 catch (    Exception e) {
      throw new ExecutionException(""String_Node_Str"",e);
    }
    throw new FutureNotYetAvailable(fc);
  }
  popStateEntry(state);
}",0.4880636604774536
169178,"public void cancel(Block block) throws InvalidSecurityContextException, TaskSubmissionException {
  try {
    getHandler(block.getTask().getProvider()).cancel(block.getTask());
  }
 catch (  InvalidProviderException e) {
    throw new TaskSubmissionException(e);
  }
catch (  ProviderMethodException e) {
    throw new TaskSubmissionException(e);
  }
}","public void cancel(Block block) throws InvalidSecurityContextException, TaskSubmissionException {
  try {
    Task t=block.getTask();
    getHandler(getProvider(t)).cancel(t);
  }
 catch (  InvalidProviderException e) {
    throw new TaskSubmissionException(e);
  }
catch (  ProviderMethodException e) {
    throw new TaskSubmissionException(e);
  }
}",0.6002844950213371
169179,"private boolean parametersMatch(Method m,Class<?>[] parameterTypes){
  Class<?>[] methodPTypes=m.getParameterTypes();
  if (methodPTypes.length > parameterTypes.length) {
    return false;
  }
  boolean varargs=false;
  int n=methodPTypes.length;
  if (n <= parameterTypes.length) {
    if (m.isVarArgs()) {
      if (n == parameterTypes.length && parameterTypes[n - 1].isArray()) {
      }
 else {
        n--;
        varargs=true;
      }
    }
 else {
      return false;
    }
  }
  for (int i=0; i < n; i++) {
    Class<?> pt=checkWrapPrimitive(parameterTypes[i],methodPTypes[i]);
    if (!methodPTypes[i].isAssignableFrom(pt)) {
      return false;
    }
  }
  if (varargs) {
    Class<?> vargsType=methodPTypes[methodPTypes.length - 1];
    if (!vargsType.isArray()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Class<?> memberType=vargsType.getComponentType();
    for (int i=n; i < parameterTypes.length; i++) {
      Class<?> pt=checkWrapPrimitive(parameterTypes[i],memberType);
      if (!memberType.isAssignableFrom(pt)) {
        return false;
      }
    }
  }
  return true;
}","private boolean parametersMatch(Method m,Class<?>[] parameterTypes){
  Class<?>[] methodPTypes=m.getParameterTypes();
  if (methodPTypes.length > parameterTypes.length) {
    return false;
  }
  boolean varargs=false;
  int n=methodPTypes.length;
  if (n <= parameterTypes.length) {
    if (m.isVarArgs()) {
      if (n == parameterTypes.length && parameterTypes[n - 1].isArray()) {
      }
 else {
        n--;
        varargs=true;
      }
    }
 else     if (n < parameterTypes.length) {
      return false;
    }
  }
  for (int i=0; i < n; i++) {
    Class<?> pt=checkWrapPrimitive(parameterTypes[i],methodPTypes[i]);
    if (!methodPTypes[i].isAssignableFrom(pt)) {
      return false;
    }
  }
  if (varargs) {
    Class<?> vargsType=methodPTypes[methodPTypes.length - 1];
    if (!vargsType.isArray()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Class<?> memberType=vargsType.getComponentType();
    for (int i=n; i < parameterTypes.length; i++) {
      Class<?> pt=checkWrapPrimitive(parameterTypes[i],memberType);
      if (!memberType.isAssignableFrom(pt)) {
        return false;
      }
    }
  }
  return true;
}",0.984506418769367
169180,"private String substituteGroups(RemoteFile drf,Matcher m){
  String dst=drf.getName();
  StringBuilder sb=new StringBuilder();
  boolean lastWasWildcard=false;
  int begin=0;
  int cg=0;
  for (int i=0; i < dst.length(); i++) {
    char c=dst.charAt(i);
switch (c) {
case '?':
case '*':
      if (!lastWasWildcard) {
        sb.append(dst.substring(begin,i));
        cg++;
      }
    lastWasWildcard=true;
  break;
default :
if (lastWasWildcard) {
  sb.append(m.group(cg));
  lastWasWildcard=false;
  begin=i;
}
}
}
if (lastWasWildcard) {
sb.append(m.group(cg));
}
 else {
sb.append(dst.substring(begin));
}
RemoteFile rf=new RemoteFile(drf);
rf.setName(sb.toString());
return rf.getURIAsString();
}","private String substituteGroups(RemoteFile drf,Matcher m){
  String dst=drf.getName();
  StringBuilder sb=new StringBuilder();
  boolean lastWasWildcard=false;
  int begin=0;
  int cg=0;
  for (int i=0; i < dst.length(); i++) {
    char c=dst.charAt(i);
switch (c) {
case '?':
case '*':
      if (!lastWasWildcard) {
        sb.append(dst.substring(begin,i));
        cg++;
      }
    lastWasWildcard=true;
  break;
default :
if (lastWasWildcard) {
  sb.append(m.group(cg));
  lastWasWildcard=false;
  begin=i;
}
}
}
if (lastWasWildcard) {
sb.append(m.group(cg));
}
 else {
sb.append(dst.substring(begin));
}
RemoteFile rf=new RemoteFile(drf.getProtocol(),drf.getHost(),drf.getPort(),drf.getDirectory(),sb.toString());
return rf.getURIAsString();
}",0.9475862068965516
169181,"protected Collection<String[]> glob() throws FileResourceException {
  List<String[]> results=new ArrayList<String[]>();
  Pattern p=Pattern.compile(toRegexp(srf.getName()));
  Collection<GridFile> files=list(fr,srf.getDirectory(),p);
  for (  GridFile f : files) {
    Matcher m=p.matcher(f.getName());
    if (!m.matches()) {
      throw new IllegalStateException(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ srf.getName()+ ""String_Node_Str"");
    }
    String[] result=new String[2];
    RemoteFile rf=new RemoteFile(srf);
    rf.setName(f.getName());
    result[0]=rf.getURIAsString();
    result[1]=substituteGroups(drf,m);
    results.add(result);
  }
  return results;
}","protected Collection<String[]> glob() throws FileResourceException {
  List<String[]> results=new ArrayList<String[]>();
  Pattern p=Pattern.compile(toRegexp(srf.getName()));
  Collection<GridFile> files=list(fr,srf.getDirectory(),p);
  for (  GridFile f : files) {
    Matcher m=p.matcher(f.getName());
    if (!m.matches()) {
      throw new IllegalStateException(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ srf.getName()+ ""String_Node_Str"");
    }
    String[] result=new String[2];
    RemoteFile rf=new RemoteFile(srf.getProtocol(),srf.getHost(),srf.getPort(),srf.getDirectory(),f.getName());
    result[0]=rf.getURIAsString();
    result[1]=substituteGroups(drf,m);
    results.add(result);
  }
  return results;
}",0.9434229137199436
169182,"public static LogEntry parse(String line){
  LogEntry entry=new LogEntry();
  StringTokenizer st=new StringTokenizer(line,""String_Node_Str"");
  if (st.countTokens() < 2 && st.countTokens() > 3) {
    throw new ExecutionException();
  }
  entry.key=st.nextToken();
  if (st.hasMoreTokens()) {
    entry.value=st.nextToken();
  }
  return entry;
}","public static LogEntry parse(String line){
  LogEntry entry=new LogEntry();
  StringTokenizer st=new StringTokenizer(line,""String_Node_Str"");
  int tokCount=st.countTokens();
  if (tokCount == 1) {
    entry.key=line;
    return entry;
  }
  if (tokCount > 3) {
    throw new ExecutionException();
  }
  entry.key=st.nextToken();
  if (st.hasMoreTokens()) {
    entry.value=st.nextToken();
  }
  return entry;
}",0.8068783068783069
169183,"protected void create(Stack stack,String name) throws ExecutionException {
  FlushableLockedFileWriter logffw=null;
  if (name == null) {
    name=fileName.getValue(stack);
  }
  for (int i=0; i < Integer.MAX_VALUE; i++) {
    String restartLogFilename=System.getProperty(""String_Node_Str"");
    if (restartLogFilename == null) {
      String index=""String_Node_Str"" + String.valueOf(i);
      restartLogFilename=name + index + ""String_Node_Str"";
    }
    File f=new File(restartLogFilename);
    if (f.exists()) {
      if (i == MAX_INDEX) {
        throw new ExecutionException(this,""String_Node_Str"");
      }
      continue;
    }
    try {
      logffw=new FlushableLockedFileWriter(f,true);
      writeDate(logffw,""String_Node_Str"");
    }
 catch (    IOException e) {
      throw new ExecutionException(this,""String_Node_Str"" + f.getAbsolutePath(),e);
    }
    if (logffw.isLocked()) {
      break;
    }
 else     if (!logffw.lockExists()) {
      logger.warn(""String_Node_Str"");
      break;
    }
  }
  Map<LogEntry,Object> m=Collections.emptyMap();
  if (logffw == null) {
    throw new ExecutionException(this,""String_Node_Str"");
  }
  c_restartLog.set(stack,new LogChannelOperator(logffw));
  context.getValue(stack).setAttribute(LOG_DATA,m);
}","protected void create(Stack stack,String name) throws ExecutionException {
  FlushableLockedFileWriter logffw=null;
  if (name == null) {
    name=fileName.getValue(stack);
  }
  for (int i=0; i < Integer.MAX_VALUE; i++) {
    String restartLogFilename=System.getProperty(""String_Node_Str"");
    if (restartLogFilename == null) {
      String index=""String_Node_Str"" + String.valueOf(i);
      restartLogFilename=name + index + ""String_Node_Str"";
    }
    File f=new File(restartLogFilename);
    if (f.exists()) {
      if (i == MAX_INDEX) {
        throw new ExecutionException(this,""String_Node_Str"");
      }
      continue;
    }
    try {
      logffw=new FlushableLockedFileWriter(f,true);
      writeDate(logffw,""String_Node_Str"");
      logffw.write(""String_Node_Str"" + VERSION_MAJ + ""String_Node_Str""+ VERSION_MIN+ ""String_Node_Str"");
    }
 catch (    IOException e) {
      throw new ExecutionException(this,""String_Node_Str"" + f.getAbsolutePath(),e);
    }
    if (logffw.isLocked()) {
      break;
    }
 else     if (!logffw.lockExists()) {
      logger.warn(""String_Node_Str"");
      break;
    }
  }
  Map<LogEntry,Object> m=Collections.emptyMap();
  if (logffw == null) {
    throw new ExecutionException(this,""String_Node_Str"");
  }
  c_restartLog.set(stack,new LogChannelOperator(logffw));
  context.getValue(stack).setAttribute(LOG_DATA,m);
}",0.9599695005718644
169184,"private Map<LogEntry,Object> parseLog(File f) throws FileNotFoundException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(f));
  try {
    HashMap<LogEntry,Object> data=new HashMap<LogEntry,Object>();
    String line;
    while ((line=br.readLine()) != null) {
      if (line.length() == 0 || line.charAt(0) == '#') {
        continue;
      }
      try {
        LogEntry entry=LogEntry.parse(line);
        if (entry.getValue() == null) {
          MutableInteger old=(MutableInteger)data.get(entry);
          if (old == null) {
            data.put(entry,new MutableInteger(1));
          }
 else {
            old.inc();
          }
        }
 else {
          @SuppressWarnings(""String_Node_Str"") List<String> old=(List<String>)data.get(entry);
          if (old == null) {
            old=new LinkedList<String>();
            data.put(entry,old);
          }
          old.add(entry.getValue());
        }
      }
 catch (      ExecutionException e) {
        logger.warn(""String_Node_Str"" + line);
      }
    }
    return data;
  }
  finally {
    try {
      br.close();
    }
 catch (    IOException e) {
      logger.warn(""String_Node_Str"");
    }
  }
}","private Map<LogEntry,Object> parseLog(File f) throws FileNotFoundException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(f));
  try {
    HashMap<LogEntry,Object> data=new HashMap<LogEntry,Object>();
    String line;
    while ((line=br.readLine()) != null) {
      if (line.length() == 0 || line.charAt(0) == '#') {
        if (line.startsWith(""String_Node_Str"")) {
          checkCompatible(line);
        }
        continue;
      }
      try {
        LogEntry entry=LogEntry.parse(line);
        if (entry.getValue() == null) {
          MutableInteger old=(MutableInteger)data.get(entry);
          if (old == null) {
            data.put(entry,new MutableInteger(1));
          }
 else {
            old.inc();
          }
        }
 else {
          @SuppressWarnings(""String_Node_Str"") List<String> old=(List<String>)data.get(entry);
          if (old == null) {
            old=new LinkedList<String>();
            data.put(entry,old);
          }
          old.add(entry.getValue());
        }
      }
 catch (      ExecutionException e) {
        logger.warn(""String_Node_Str"" + line);
      }
    }
    return data;
  }
  finally {
    try {
      br.close();
    }
 catch (    IOException e) {
      logger.warn(""String_Node_Str"");
    }
  }
}",0.9623329283110572
169185,"private void closeLog(Stack stack) throws ExecutionException {
  try {
    c_restartLog.get(stack).close();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e);
  }
}","private void closeLog(Stack stack) throws ExecutionException {
  try {
    Channel<String> log=c_restartLog.get(stack);
    if (log != null) {
      log.close();
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e);
  }
}",0.8571428571428571
169186,"private AbsFile mapSingle(){
  AbsFile f=(AbsFile)var.map();
  if (defaultScheme != null && f.getProtocol() == null) {
    f.setProtocol(defaultScheme);
  }
  return f;
}","private AbsFile mapSingle(){
  AbsFile f=(AbsFile)var.map();
  if (defaultScheme != null && f.getProtocol() == null) {
    f=new AbsFile(defaultScheme,f.getHost(),f.getPort(),f.getDirectory(),f.getName());
  }
  return f;
}",0.7480916030534351
169187,"private List<AbsFile> mapMultiple() throws HandleOpenException, InvalidPathException {
  RootHandle root=var.getRoot();
  Mapper mapper=root.getMapper();
  if (mapper == null) {
    throw new ExecutionException(var.getType() + ""String_Node_Str"");
  }
  List<AbsFile> l=new ArrayList<AbsFile>();
  Collection<Path> fp=var.getFringePaths();
  List<Path> src;
  if (fp instanceof List) {
    src=(List<Path>)fp;
  }
 else {
    src=new ArrayList<Path>(fp);
  }
  Collections.sort(src,new PathComparator());
  for (  Path p : src) {
    AbsFile f=(AbsFile)mapper.map(p);
    if (defaultScheme != null && f.getProtocol() == null) {
      f.setProtocol(defaultScheme);
    }
    l.add(f);
  }
  return l;
}","private List<AbsFile> mapMultiple() throws HandleOpenException, InvalidPathException {
  RootHandle root=var.getRoot();
  Mapper mapper=root.getMapper();
  if (mapper == null) {
    throw new ExecutionException(var.getType() + ""String_Node_Str"");
  }
  List<AbsFile> l=new ArrayList<AbsFile>();
  Collection<Path> fp=var.getFringePaths();
  List<Path> src;
  if (fp instanceof List) {
    src=(List<Path>)fp;
  }
 else {
    src=new ArrayList<Path>(fp);
  }
  Collections.sort(src,new PathComparator());
  for (  Path p : src) {
    AbsFile f=(AbsFile)mapper.map(p);
    if (defaultScheme != null && f.getProtocol() == null) {
      f=new AbsFile(defaultScheme,f.getHost(),f.getPort(),f.getDirectory(),f.getName());
    }
    l.add(f);
  }
  return l;
}",0.9470061940812112
169188,"private Set<AbsFile> addOne(AbsFile f,Info info,Set<AbsFile> files,String defaultScheme){
  String proto=f.getProtocol();
  if (proto == null) {
    f.setProtocol(defaultScheme);
  }
  if (f.getHost() == null) {
    f.setHost(""String_Node_Str"");
  }
  String dir=f.getDirectory();
  if (info.remoteDirNames.isEmpty()) {
    info.remoteDirNames=new HashSet<AbsFile>();
  }
  if (dir == null) {
    info.remoteDirNames.add(new AbsFile(f.getProtocol(),f.getHost(),""String_Node_Str""));
  }
 else {
    info.remoteDirNames.add(new AbsFile(f.getProtocol(),f.getHost(),f.getDirectory()));
  }
  if (files.isEmpty()) {
    files=new HashSet<AbsFile>();
  }
  files.add(f);
  return files;
}","private Set<AbsFile> addOne(AbsFile f,Info info,Set<AbsFile> files,String defaultScheme){
  String proto=f.getProtocol(defaultScheme);
  String host=f.getHost(""String_Node_Str"");
  String dir=f.getDirectory();
  if (info.remoteDirNames.isEmpty()) {
    info.remoteDirNames=new HashSet<AbsFile>();
  }
  if (dir == null) {
    info.remoteDirNames.add(new AbsFile(proto,host,""String_Node_Str""));
  }
 else {
    info.remoteDirNames.add(new AbsFile(proto,host,f.getDirectory()));
  }
  if (files.isEmpty()) {
    files=new HashSet<AbsFile>();
  }
  files.add(new AbsFile(proto,host,f.getPort(),f.getDirectory(),f.getName()));
  return files;
}",0.2768532526475037
169189,"private static boolean isLogged(Map<LogEntry,Object> logData,String str){
  LogEntry entry=LogEntry.build(str);
  boolean found=false;
synchronized (logData) {
    List<?> files=(List<?>)logData.get(entry);
    if (files != null && !files.isEmpty()) {
      found=true;
    }
  }
  return found;
}","private static boolean isLogged(Map<LogEntry,Object> logData,String str){
  LogEntry entry=LogEntry.build(str);
  boolean found=false;
synchronized (logData) {
    Object v=logData.get(entry);
    if (v instanceof MutableInteger) {
      return true;
    }
 else {
      List<?> files=(List<?>)v;
      if (files != null && !files.isEmpty()) {
        found=true;
      }
    }
  }
  return found;
}",0.6839080459770115
169190,"private void addAll(Collection<Object> ret,List<AbsFile> l,boolean remote){
  for (int i=0; i < l.size(); i++) {
    AbsFile f=l.get(i);
    ret.add(getPath(f,remote));
  }
}","private void addAll(Collection<Object> ret,List<AbsFile> l,boolean direct){
  for (int i=0; i < l.size(); i++) {
    AbsFile f=l.get(i);
    ret.add(getPath(f,direct));
  }
}",0.9655172413793104
169191,"private String getPath(AbsFile f,boolean remote){
  if (isDirect(f)) {
    return f.getAbsolutePath();
  }
 else   if (remote) {
    return PathUtils.remotePathName(f);
  }
 else   if (isLocal(f) || f.getHost() == null) {
    return f.getPath();
  }
 else {
    return f.getHost() + ""String_Node_Str"" + f.getPath();
  }
}","private String getPath(AbsFile f,boolean direct){
  if (isDirect(f) || direct) {
    return f.getAbsolutePath();
  }
 else   if (this.transform == Transform.RELATIVE) {
    return PathUtils.remotePathName(f);
  }
 else   if (isLocal(f) || f.getHost() == null) {
    return f.getPath();
  }
 else {
    return f.getHost() + ""String_Node_Str"" + f.getPath();
  }
}",0.9090909090909092
169192,"public void toString(Collection<Object> ret,boolean direct){
  boolean remote=(this.transform == Transform.RELATIVE) && !direct;
  if (mode == MultiMode.COMBINED) {
    ret.add(combine(map(),remote));
  }
 else {
    addAll(ret,map(),remote);
  }
}","public void toString(Collection<Object> ret,boolean direct){
  if (mode == MultiMode.COMBINED) {
    ret.add(combine(map(),direct));
  }
 else {
    addAll(ret,map(),direct);
  }
}",0.8130841121495327
169193,"private String combine(List<AbsFile> l,boolean remote){
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < l.size(); i++) {
    AbsFile f=l.get(i);
    if (i > 0) {
      sb.append(' ');
    }
    sb.append(getPath(f,remote));
  }
  return sb.toString();
}","private String combine(List<AbsFile> l,boolean direct){
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < l.size(); i++) {
    AbsFile f=l.get(i);
    if (i > 0) {
      sb.append(' ');
    }
    sb.append(getPath(f,direct));
  }
  return sb.toString();
}",0.9543726235741444
169194,"@Override public Object function(Stack stack){
  AbstractDataNode dest=this.dest.getValue(stack);
  AbstractDataNode src=this.src.getValue(stack);
  try {
    src.waitFor(this);
  }
 catch (  DependentException e) {
    dest.setValue(new DataDependentException(dest,e));
    return null;
  }
  if (src.getType().equals(Types.STRING)) {
    readData(dest,(String)src.getValue());
  }
 else {
    PhysicalFormat pf=src.map();
    if (pf instanceof AbsFile) {
      AbsFile af=(AbsFile)pf;
      if (!af.getProtocol(""String_Node_Str"").equals(""String_Node_Str"")) {
        throw new ExecutionException(""String_Node_Str"");
      }
      readData(dest,af.getPath());
    }
 else {
      throw new ExecutionException(""String_Node_Str"");
    }
  }
  return null;
}","@Override public Object function(Stack stack){
  AbstractDataNode dest=this.dest.getValue(stack);
  AbstractDataNode src=this.src.getValue(stack);
  try {
    src.waitFor(this);
  }
 catch (  DependentException e) {
    dest.setValue(new DataDependentException(dest,e));
    return null;
  }
  Type st=src.getType();
  if (st.equals(Types.STRING)) {
    readData(dest,(String)src.getValue());
  }
 else   if (st.isPrimitive() || st.isComposite()) {
    throw new ExecutionException(this,""String_Node_Str"" + st + ""String_Node_Str"");
  }
 else {
    PhysicalFormat pf=src.map();
    if (pf instanceof AbsFile) {
      AbsFile af=(AbsFile)pf;
      if (!af.getProtocol(""String_Node_Str"").equals(""String_Node_Str"")) {
        throw new ExecutionException(this,""String_Node_Str"");
      }
      readData(dest,af.getPath());
    }
 else {
      throw new ExecutionException(""String_Node_Str"");
    }
  }
  return null;
}",0.8898203592814371
169195,"private synchronized void readFile(CSVMapperParams cp){
  if (read) {
    return;
  }
  String file=getCSVFile(cp);
  try {
    BufferedReader br=new BufferedReader(new FileReader(file));
    String line;
    StringTokenizer st;
    boolean header=Boolean.TRUE.equals(cp.getHeader());
    if (header) {
      line=br.readLine();
      if (line == null) {
        throw new RuntimeException(""String_Node_Str"" + file + ""String_Node_Str"");
      }
      st=new StringTokenizer(line,cp.getHdelim());
      int ix=0;
      while (st.hasMoreTokens()) {
        String column=st.nextToken();
        column.replaceAll(""String_Node_Str"",""String_Node_Str"");
        cols.add(column);
        colindex.put(column,new Integer(ix));
        ++ix;
      }
    }
    while (cp.getSkip() > 0) {
      br.readLine();
      cp.setSkip(cp.getSkip() - 1);
    }
    int i=0;
    line=br.readLine();
    if (line != null && !header) {
      st=new StringTokenizer(line,cp.getDelim());
      int j=0;
      while (j < st.countTokens()) {
        String colname=""String_Node_Str"" + j;
        cols.add(colname);
        colindex.put(colname,new Integer(j));
        j++;
      }
    }
    while (line != null) {
      st=new StringTokenizer(line,cp.getDelim());
      List<String> colContent=new ArrayList<String>();
      while (st.hasMoreTokens()) {
        String tok=st.nextToken();
        colContent.add(tok);
      }
      line=br.readLine();
      ++i;
      content.add(colContent);
    }
    read=true;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
catch (  IOException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}","private synchronized void readFile(CSVMapperParams cp){
  if (read) {
    return;
  }
  String file=getCSVFile(cp);
  try {
    BufferedReader br=new BufferedReader(new FileReader(file));
    String line;
    StringTokenizer st;
    boolean header=Boolean.TRUE.equals(cp.getHeader());
    if (header) {
      line=br.readLine();
      if (line == null) {
        throw new RuntimeException(""String_Node_Str"" + file + ""String_Node_Str"");
      }
      st=new StringTokenizer(line,cp.getHdelim());
      int ix=0;
      while (st.hasMoreTokens()) {
        String column=st.nextToken();
        column=column.replaceAll(""String_Node_Str"",""String_Node_Str"");
        cols.add(column);
        colindex.put(column,new Integer(ix));
        ++ix;
      }
    }
    while (cp.getSkip() > 0) {
      br.readLine();
      cp.setSkip(cp.getSkip() - 1);
    }
    int i=0;
    line=br.readLine();
    if (line != null && !header) {
      st=new StringTokenizer(line,cp.getDelim());
      int j=0;
      while (j < st.countTokens()) {
        String colname=""String_Node_Str"" + j;
        cols.add(colname);
        colindex.put(colname,new Integer(j));
        j++;
      }
    }
    while (line != null) {
      st=new StringTokenizer(line,cp.getDelim());
      List<String> colContent=new ArrayList<String>();
      while (st.hasMoreTokens()) {
        String tok=st.nextToken();
        colContent.add(tok);
      }
      line=br.readLine();
      ++i;
      content.add(colContent);
    }
    read=true;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
catch (  IOException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}",0.997904818916492
169196,"public synchronized void close() throws IOException {
  removeSocket(this);
  super.close();
}","public synchronized void close() throws IOException {
  removeSocket(this);
  s.close();
}",0.9782608695652174
169197,"public CoasterChannel getOrCreateChannel(String host,GSSCredential cred,RequestManager rm) throws ChannelException {
  CoasterChannel channel=getExistingChannel(host,cred);
  if (channel == null) {
    channel=openChannel(host,cred,rm);
  }
  return channel;
}","public CoasterChannel getOrCreateChannel(String host,GSSCredential cred,RequestManager rm) throws ChannelException {
  CoasterChannel channel=getChannel(host,cred);
  if (channel == null) {
    channel=openChannel(host,cred,rm);
  }
  return channel;
}",0.984375
169198,"public CoasterChannel getExistingChannel(String host,GSSCredential cred){
  if (host == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  host=normalize(host);
  CoasterChannel channel;
synchronized (channels) {
    HostCredentialPair hcp=new HostCredentialPair(host,cred);
    channel=getChannel(hcp);
  }
  if (channel == null) {
    throw new IllegalStateException(""String_Node_Str"" + host);
  }
  return channel;
}","public CoasterChannel getExistingChannel(String host,GSSCredential cred){
  CoasterChannel channel=getChannel(host,cred);
  if (channel == null) {
    throw new IllegalStateException(""String_Node_Str"" + host);
  }
  return channel;
}",0.4328358208955223
169199,"private BlockQueueProcessor get(String blockId){
synchronized (managers) {
    BlockQueueProcessor rm=managers.get(blockId);
    if (rm == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + blockId);
    }
    return rm;
  }
}","private BlockQueueProcessor get(String blockId){
  if (singleQP != null) {
    return singleQP;
  }
synchronized (managers) {
    BlockQueueProcessor rm=managers.get(blockId);
    if (rm == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + blockId);
    }
    return rm;
  }
}",0.9053803339517624
169200,"public static void main(String[] args){
  ArgumentParser ap=new ArgumentParser();
  ap.setExecutableName(""String_Node_Str"");
  ap.addOption(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ArgumentParser.OPTIONAL);
  ap.addOption(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",ArgumentParser.OPTIONAL);
  ap.addAlias(""String_Node_Str"",""String_Node_Str"");
  ap.addOption(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",ArgumentParser.OPTIONAL);
  ap.addAlias(""String_Node_Str"",""String_Node_Str"");
  ap.addOption(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",ArgumentParser.OPTIONAL);
  ap.addAlias(""String_Node_Str"",""String_Node_Str"");
  ap.addFlag(""String_Node_Str"",""String_Node_Str"");
  ap.addOption(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",ArgumentParser.OPTIONAL);
  ap.addFlag(""String_Node_Str"",""String_Node_Str"");
  ap.addFlag(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  ap.addOption(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",ArgumentParser.OPTIONAL);
  ap.addFlag(""String_Node_Str"",""String_Node_Str"");
  ap.addFlag(""String_Node_Str"",""String_Node_Str"");
  ap.addAlias(""String_Node_Str"",""String_Node_Str"");
  try {
    ap.parse(args);
    if (ap.isPresent(""String_Node_Str"")) {
      ap.usage();
      System.exit(0);
    }
    InetAddress bindTo=null;
    if (ap.isPresent(""String_Node_Str"")) {
      bindTo=InetAddress.getLocalHost();
    }
    boolean secure=true;
    if (ap.isPresent(""String_Node_Str"")) {
      secure=false;
    }
    GSSCredential cred=null;
    if (secure) {
      GlobusCredential gc;
      if (ap.hasValue(""String_Node_Str"")) {
        gc=new GlobusCredential(ap.getStringValue(""String_Node_Str""));
      }
 else {
        gc=GlobusCredential.getDefaultCredential();
      }
      cred=new GlobusGSSCredentialImpl(gc,GSSCredential.INITIATE_AND_ACCEPT);
    }
    int port=1984;
    if (ap.hasValue(""String_Node_Str"")) {
      if (ap.hasValue(""String_Node_Str"")) {
        throw new ArgumentParserException(""String_Node_Str"");
      }
      port=ap.getIntValue(""String_Node_Str"");
    }
    String portFile=null;
    if (ap.hasValue(""String_Node_Str"")) {
      portFile=ap.getStringValue(""String_Node_Str"");
      port=0;
    }
    int localport=0;
    if (ap.hasValue(""String_Node_Str"")) {
      if (ap.hasValue(""String_Node_Str"")) {
        throw new ArgumentParserException(""String_Node_Str"");
      }
      localport=ap.getIntValue(""String_Node_Str"");
    }
    String localPortFile=null;
    if (ap.hasValue(""String_Node_Str"")) {
      localPortFile=ap.getStringValue(""String_Node_Str"");
      localport=0;
    }
    setupLogging();
    final CoasterPersistentService s;
    if (!secure) {
      s=new CoasterPersistentService(false,port,bindTo);
    }
 else {
      s=new CoasterPersistentService(cred,port,bindTo);
    }
    s.setAuthorization(new SelfAuthorization());
    if (localport > 0) {
      s.initializeLocalService(localport);
    }
 else {
      s.initializeLocalService();
    }
    writePorts(s,portFile,localPortFile);
    s.setIgnoreIdleTime(true);
    if (ap.isPresent(""String_Node_Str"")) {
      s.setDefaultQP(""String_Node_Str"");
      passive=true;
    }
 else     if (ap.isPresent(""String_Node_Str"")) {
      s.setDefaultQP(""String_Node_Str"");
      s.setShared(true);
      loadSharedSettings(ap.getStringValue(""String_Node_Str""),s.getSharedQueue().getSettings());
    }
 else {
      s.setDefaultQP(""String_Node_Str"");
    }
    s.start();
    addShutdownHook(s);
    System.out.println(""String_Node_Str"" + s);
    System.out.println(""String_Node_Str"" + s.getLocalService().getContact());
    if (ap.isPresent(""String_Node_Str"")) {
      disableConsoleLogging();
      statusDisplay=new CPSStatusDisplay(passive);
      statusDisplay.initScreen();
      Timer.every(1000,new Runnable(){
        public void run(){
          statusDisplay.printStats(s);
        }
      }
);
    }
    s.waitFor();
    System.exit(0);
  }
 catch (  ArgumentParserException e) {
    System.err.println(e.getMessage());
    ap.usage();
    System.exit(1);
  }
catch (  GlobusCredentialException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    logger.info(""String_Node_Str"",e);
    System.exit(3);
  }
catch (  GSSException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    logger.info(""String_Node_Str"",e);
    System.exit(2);
  }
}","public static void main(String[] args){
  ArgumentParser ap=new ArgumentParser();
  ap.setExecutableName(""String_Node_Str"");
  ap.addOption(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ArgumentParser.OPTIONAL);
  ap.addOption(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",ArgumentParser.OPTIONAL);
  ap.addAlias(""String_Node_Str"",""String_Node_Str"");
  ap.addOption(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",ArgumentParser.OPTIONAL);
  ap.addAlias(""String_Node_Str"",""String_Node_Str"");
  ap.addOption(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",ArgumentParser.OPTIONAL);
  ap.addAlias(""String_Node_Str"",""String_Node_Str"");
  ap.addFlag(""String_Node_Str"",""String_Node_Str"");
  ap.addOption(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",ArgumentParser.OPTIONAL);
  ap.addFlag(""String_Node_Str"",""String_Node_Str"");
  ap.addFlag(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  ap.addOption(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",ArgumentParser.OPTIONAL);
  ap.addFlag(""String_Node_Str"",""String_Node_Str"");
  ap.addFlag(""String_Node_Str"",""String_Node_Str"");
  ap.addAlias(""String_Node_Str"",""String_Node_Str"");
  try {
    ap.parse(args);
    if (ap.isPresent(""String_Node_Str"")) {
      ap.usage();
      System.exit(0);
    }
    InetAddress bindTo=null;
    if (ap.isPresent(""String_Node_Str"")) {
      bindTo=InetAddress.getLocalHost();
    }
    boolean secure=true;
    if (ap.isPresent(""String_Node_Str"")) {
      secure=false;
    }
    GSSCredential cred=null;
    if (secure) {
      GlobusCredential gc;
      if (ap.hasValue(""String_Node_Str"")) {
        gc=new GlobusCredential(ap.getStringValue(""String_Node_Str""));
      }
 else {
        gc=GlobusCredential.getDefaultCredential();
      }
      cred=new GlobusGSSCredentialImpl(gc,GSSCredential.INITIATE_AND_ACCEPT);
    }
    int port=1984;
    if (ap.hasValue(""String_Node_Str"")) {
      if (ap.hasValue(""String_Node_Str"")) {
        throw new ArgumentParserException(""String_Node_Str"");
      }
      port=ap.getIntValue(""String_Node_Str"");
    }
    String portFile=null;
    if (ap.hasValue(""String_Node_Str"")) {
      portFile=ap.getStringValue(""String_Node_Str"");
      port=0;
    }
    int localport=0;
    if (ap.hasValue(""String_Node_Str"")) {
      if (ap.hasValue(""String_Node_Str"")) {
        throw new ArgumentParserException(""String_Node_Str"");
      }
      localport=ap.getIntValue(""String_Node_Str"");
    }
    String localPortFile=null;
    if (ap.hasValue(""String_Node_Str"")) {
      localPortFile=ap.getStringValue(""String_Node_Str"");
      localport=0;
    }
    setupLogging();
    final CoasterPersistentService s;
    if (!secure) {
      s=new CoasterPersistentService(false,port,bindTo);
    }
 else {
      s=new CoasterPersistentService(cred,port,bindTo);
    }
    s.setAuthorization(new SelfAuthorization());
    if (localport > 0) {
      s.initializeLocalService(localport);
    }
 else {
      s.initializeLocalService();
    }
    writePorts(s,portFile,localPortFile);
    s.setIgnoreIdleTime(true);
    if (ap.isPresent(""String_Node_Str"")) {
      s.setDefaultQP(""String_Node_Str"");
      s.setShared(true);
      passive=true;
    }
 else     if (ap.isPresent(""String_Node_Str"")) {
      s.setDefaultQP(""String_Node_Str"");
      s.setShared(true);
      loadSharedSettings(ap.getStringValue(""String_Node_Str""),s.getSharedQueue().getSettings());
    }
 else {
      s.setDefaultQP(""String_Node_Str"");
    }
    s.start();
    addShutdownHook(s);
    System.out.println(""String_Node_Str"" + s);
    if (passive) {
      System.out.println(""String_Node_Str"" + s.getLocalService().getContact());
    }
    if (ap.isPresent(""String_Node_Str"")) {
      disableConsoleLogging();
      statusDisplay=new CPSStatusDisplay(passive);
      statusDisplay.initScreen();
      Timer.every(1000,new Runnable(){
        public void run(){
          statusDisplay.printStats(s);
        }
      }
);
    }
    s.waitFor();
    System.exit(0);
  }
 catch (  ArgumentParserException e) {
    System.err.println(e.getMessage());
    ap.usage();
    System.exit(1);
  }
catch (  GlobusCredentialException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    logger.info(""String_Node_Str"",e);
    System.exit(3);
  }
catch (  GSSException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    logger.info(""String_Node_Str"",e);
    System.exit(2);
  }
}",0.9922212618841832
169201,"private QueueProcessor newQueueProcessor(String name){
  if (name.equals(""String_Node_Str"")) {
    return new LocalQueueProcessor(localService);
  }
 else   if (name.equals(""String_Node_Str"")) {
    return new BlockQueueProcessor(localService,settings);
  }
 else   if (name.equals(""String_Node_Str"")) {
    return service.getPassiveQueueProcessor();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + name);
  }
}","private QueueProcessor newQueueProcessor(String name){
  if (name.equals(""String_Node_Str"")) {
    return new LocalQueueProcessor(localService);
  }
 else   if (name.equals(""String_Node_Str"")) {
    return new BlockQueueProcessor(localService,settings);
  }
 else   if (name.equals(""String_Node_Str"")) {
    return new PassiveQueueProcessor(localService,localService.getContact());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + name);
  }
}",0.914349276974416
169202,"public PassiveQueueProcessor(LocalTCPService localService,URI callbackURI){
  super(localService,null);
  setName(""String_Node_Str"");
  this.callbackURI=callbackURI;
}","public PassiveQueueProcessor(LocalTCPService localService,URI callbackURI){
  super(localService,new Settings());
  setName(""String_Node_Str"");
  this.callbackURI=callbackURI;
  localService.setSingleQP(this);
}",0.8677248677248677
169203,"/** 
 * Called when a slot is clicked by the player.
 */
@Override public ItemStack slotClick(final int slotID,final int button,final int flag,final EntityPlayer player){
  if ((slotID == this.resultSlotNumber) && (button == GuiHelper.MOUSE_BUTTON_RIGHT)) {
    return null;
  }
  return super.slotClick(slotID,button,flag,player);
}","/** 
 * Called when a slot is clicked by the player.
 */
@Override public ItemStack slotClick(final int slotID,final int button,final int flag,final EntityPlayer player){
  if ((slotID == this.resultSlotNumber) && (button == GuiHelper.MOUSE_BUTTON_RIGHT)) {
    return super.slotClick(slotID,0,flag,player);
  }
  return super.slotClick(slotID,button,flag,player);
}",0.9413447782546496
169204,"protected void bindToNetworkTool(final InventoryPlayer playerInventory,final DimensionalCoord partLocation,final int slotOffsetX,final int slotOffsetY){
  for (int slotIndex=0; slotIndex < playerInventory.getSizeInventory(); slotIndex++) {
    ItemStack stack=playerInventory.getStackInSlot(slotIndex);
    if ((stack != null) && (stack.isItemEqual(AEApi.instance().definitions().items().networkTool().maybeStack(1).get()))) {
      IGuiItem guiItem=(IGuiItem)stack.getItem();
      INetworkTool networkTool=(INetworkTool)guiItem.getGuiObject(stack,partLocation.getWorld(),partLocation.x,partLocation.y,partLocation.z);
      Slot toolSlot=null;
      for (int column=0; column < ContainerWithNetworkTool.TOOL_COLUMNS; column++) {
        for (int row=0; row < ContainerWithNetworkTool.TOOL_ROWS; row++) {
          int slotToolIndex=column + (row * ContainerWithNetworkTool.TOOL_COLUMNS);
          toolSlot=new SlotNetworkTool(networkTool,slotToolIndex,ContainerWithNetworkTool.TOOL_SLOT_X_OFFSET + slotOffsetX + (column * ContainerWithPlayerInventory.SLOT_SIZE),(row * ContainerWithPlayerInventory.SLOT_SIZE) + ContainerWithNetworkTool.TOOL_SLOT_Y_OFFSET + slotOffsetY);
          this.addSlotToContainer(toolSlot);
          if (slotToolIndex == 0) {
            this.firstToolSlotNumber=toolSlot.slotNumber;
          }
        }
      }
      if (toolSlot != null) {
        this.lastToolSlotNumber=toolSlot.slotNumber;
      }
      this.hasNetworkTool=true;
      return;
    }
  }
}","protected void bindToNetworkTool(final InventoryPlayer playerInventory,final DimensionalCoord partLocation,final int slotOffsetX,final int slotOffsetY){
  ItemStack nwTool=AEApi.instance().definitions().items().networkTool().maybeStack(1).orNull();
  if (nwTool != null) {
    for (int slotIndex=0; slotIndex < playerInventory.getSizeInventory(); slotIndex++) {
      ItemStack stack=playerInventory.getStackInSlot(slotIndex);
      if ((stack != null) && (stack.isItemEqual(AEApi.instance().definitions().items().networkTool().maybeStack(1).get()))) {
        IGuiItem guiItem=(IGuiItem)stack.getItem();
        INetworkTool networkTool=(INetworkTool)guiItem.getGuiObject(stack,partLocation.getWorld(),partLocation.x,partLocation.y,partLocation.z);
        Slot toolSlot=null;
        for (int column=0; column < ContainerWithNetworkTool.TOOL_COLUMNS; column++) {
          for (int row=0; row < ContainerWithNetworkTool.TOOL_ROWS; row++) {
            int slotToolIndex=column + (row * ContainerWithNetworkTool.TOOL_COLUMNS);
            toolSlot=new SlotNetworkTool(networkTool,slotToolIndex,ContainerWithNetworkTool.TOOL_SLOT_X_OFFSET + slotOffsetX + (column * ContainerWithPlayerInventory.SLOT_SIZE),(row * ContainerWithPlayerInventory.SLOT_SIZE) + ContainerWithNetworkTool.TOOL_SLOT_Y_OFFSET + slotOffsetY);
            this.addSlotToContainer(toolSlot);
            if (slotToolIndex == 0) {
              this.firstToolSlotNumber=toolSlot.slotNumber;
            }
          }
        }
        if (toolSlot != null) {
          this.lastToolSlotNumber=toolSlot.slotNumber;
        }
        this.hasNetworkTool=true;
        return;
      }
    }
  }
}",0.8026649746192893
169205,"/** 
 * Applies the specified power to each shaft. Once a shaft has enough stored power, it applies a turn to its crankable.
 * @param powerTransfered
 */
private void updateShafts(final int powerTransfered){
  for (int sideIndex=0; sideIndex < TileGearBox.SIDE_COUNT; sideIndex++) {
    if (this.canTurn[sideIndex]) {
      if ((this.shafts[sideIndex]+=powerTransfered) >= TileGearBox.REQUIRED_POWER) {
        this.shafts[sideIndex]=0;
        this.crankables[sideIndex].applyTurn();
      }
    }
 else {
      this.shafts[sideIndex]=0;
    }
  }
}","/** 
 * Applies the specified power to each shaft. Once a shaft has enough stored power, it applies a turn to its crankable.
 * @param powerTransfered
 */
private void updateShafts(final int powerTransfered){
  for (int sideIndex=0; sideIndex < TileGearBox.SIDE_COUNT; sideIndex++) {
    if (this.canTurn[sideIndex] && (this.crankables[sideIndex] != null)) {
      if ((this.shafts[sideIndex]+=powerTransfered) >= TileGearBox.REQUIRED_POWER) {
        this.shafts[sideIndex]=0;
        this.crankables[sideIndex].applyTurn();
      }
    }
 else {
      this.shafts[sideIndex]=0;
    }
  }
}",0.9649737302977232
169206,"/** 
 * Handle action Sync in the provided background thread with the provided parameters.
 */
protected void handleActionSync(int numOfPages,Context context,DeviceTransport serialDriver){
  boolean broadcastSent=false;
  AndroidPreferences preferences=new AndroidPreferences(context);
  Tracker tracker=((Nightscout)context).getTracker();
  PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  PowerManager.WakeLock wl=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  wl.acquire();
  if (serialDriver != null) {
    AbstractUploaderDevice uploaderDevice=AndroidUploaderDevice.getUploaderDevice(context);
    AbstractDevice device=new DexcomG4(serialDriver,preferences,uploaderDevice);
    ((DexcomG4)device).setNumOfPages(numOfPages);
    ((CdcAcmSerialDriver)serialDriver).setPowerManagementEnabled(preferences.isRootEnabled());
    try {
      DownloadResults results=device.download();
      CookieMonsterDownload download=results.getDownload();
      Uploader uploader=new Uploader(context,preferences);
      boolean uploadStatus;
      if (numOfPages < 20) {
        uploadStatus=uploader.upload(results,1);
      }
 else {
        uploadStatus=uploader.upload(results);
      }
      Log.d(TAG,""String_Node_Str"" + download.download_status.name());
      EGVRecord recentEGV=new EGVRecord(download.sgv.get(download.sgv.size() - 1));
      broadcastSGVToUI(recentEGV,uploadStatus,results.getNextUploadTime() + TIME_SYNC_OFFSET,results.getDisplayTime(),results.getResultArray(),download.receiver_battery);
      broadcastSent=true;
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      Log.wtf(""String_Node_Str"",e);
      tracker.send(new HitBuilders.ExceptionBuilder().setDescription(""String_Node_Str"").setFatal(false).build());
    }
catch (    NegativeArraySizeException e) {
      Log.wtf(""String_Node_Str"",e);
      tracker.send(new HitBuilders.ExceptionBuilder().setDescription(""String_Node_Str"").setFatal(false).build());
    }
catch (    IndexOutOfBoundsException e) {
      Log.wtf(""String_Node_Str"",e);
      tracker.send(new HitBuilders.ExceptionBuilder().setDescription(""String_Node_Str"").setFatal(false).build());
    }
catch (    CRCFailError e) {
      Log.wtf(""String_Node_Str"",e);
      tracker.send(new HitBuilders.ExceptionBuilder().setDescription(""String_Node_Str"").setFatal(false).build());
    }
catch (    Exception e) {
      Log.wtf(""String_Node_Str"",e);
      tracker.send(new HitBuilders.ExceptionBuilder().setDescription(""String_Node_Str"").setFatal(false).build());
    }
  }
  if (!broadcastSent)   broadcastSGVToUI();
  wl.release();
}","/** 
 * Handle action Sync in the provided background thread with the provided parameters.
 */
protected void handleActionSync(int numOfPages,Context context,DeviceTransport serialDriver){
  boolean broadcastSent=false;
  AndroidPreferences preferences=new AndroidPreferences(context);
  Tracker tracker=((Nightscout)context).getTracker();
  PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  PowerManager.WakeLock wl=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  wl.acquire();
  if (serialDriver != null) {
    AbstractUploaderDevice uploaderDevice=AndroidUploaderDevice.getUploaderDevice(context);
    AbstractDevice device=new DexcomG4(serialDriver,preferences,uploaderDevice);
    ((DexcomG4)device).setNumOfPages(numOfPages);
    ((CdcAcmSerialDriver)serialDriver).setPowerManagementEnabled(preferences.isRootEnabled());
    try {
      DownloadResults results=device.download();
      CookieMonsterDownload download=results.getDownload();
      Uploader uploader=new Uploader(context,preferences);
      boolean uploadStatus;
      if (numOfPages < 20) {
        uploadStatus=uploader.upload(results,1);
      }
 else {
        uploadStatus=uploader.upload(results);
      }
      EGVRecord recentEGV;
      if (download.download_status == DownloadStatus.SUCCESS) {
        recentEGV=new EGVRecord(download.sgv.get(download.sgv.size() - 1));
      }
 else {
        recentEGV=new EGVRecord(-1,TrendArrow.NONE,new Date(),new Date(),Noise.NOISE_NONE);
      }
      broadcastSGVToUI(recentEGV,uploadStatus,results.getNextUploadTime() + TIME_SYNC_OFFSET,results.getDisplayTime(),results.getResultArray(),download.receiver_battery);
      broadcastSent=true;
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      Log.wtf(""String_Node_Str"",e);
      tracker.send(new HitBuilders.ExceptionBuilder().setDescription(""String_Node_Str"").setFatal(false).build());
    }
catch (    NegativeArraySizeException e) {
      Log.wtf(""String_Node_Str"",e);
      tracker.send(new HitBuilders.ExceptionBuilder().setDescription(""String_Node_Str"").setFatal(false).build());
    }
catch (    IndexOutOfBoundsException e) {
      Log.wtf(""String_Node_Str"",e);
      tracker.send(new HitBuilders.ExceptionBuilder().setDescription(""String_Node_Str"").setFatal(false).build());
    }
catch (    CRCFailError e) {
      Log.wtf(""String_Node_Str"",e);
      tracker.send(new HitBuilders.ExceptionBuilder().setDescription(""String_Node_Str"").setFatal(false).build());
    }
catch (    Exception e) {
      Log.wtf(""String_Node_Str"",e);
      tracker.send(new HitBuilders.ExceptionBuilder().setDescription(""String_Node_Str"").setFatal(false).build());
    }
  }
  if (!broadcastSent)   broadcastSGVToUI();
  wl.release();
}",0.949953488372093
169207,"public GlucoseDataSet(CookieMonsterG4SGV egvRecord,CookieMonsterG4Sensor sensorRecord){
  this.systemTime=new Date(egvRecord.sys_timestamp_sec);
  this.displayTime=new Date(egvRecord.disp_timestamp_sec);
  this.reading=new GlucoseReading(egvRecord.sgv_mgdl,GlucoseUnit.MGDL);
  this.trend=TrendArrow.values()[egvRecord.trend.ordinal()];
  this.noise=egvRecord.noise.ordinal();
  this.unfiltered=sensorRecord.unfiltered;
  this.filtered=sensorRecord.filtered;
  this.rssi=sensorRecord.rssi;
}","public GlucoseDataSet(CookieMonsterG4SGV egvRecord,CookieMonsterG4Sensor sensorRecord){
  this.systemTime=Utils.receiverTimeToDate(egvRecord.sys_timestamp_sec);
  this.displayTime=Utils.receiverTimeToDate(egvRecord.disp_timestamp_sec);
  this.reading=new GlucoseReading(egvRecord.sgv_mgdl,GlucoseUnit.MGDL);
  this.trend=TrendArrow.values()[egvRecord.trend.ordinal()];
  this.noise=egvRecord.noise.ordinal();
  this.unfiltered=sensorRecord.unfiltered;
  this.filtered=sensorRecord.filtered;
  this.rssi=sensorRecord.rssi;
}",0.9526627218934912
169208,"@Override protected DownloadResults doDownload(){
  DownloadStatus status=DownloadStatus.SUCCESS;
  try {
    transport.open();
  }
 catch (  IOException e) {
    status=DownloadStatus.IO_ERROR;
  }
  ReadData readData=new ReadData(transport);
  List<EGVRecord> recentRecords=new ArrayList<>();
  List<MeterRecord> meterRecords=new ArrayList<>();
  List<SensorRecord> sensorRecords=new ArrayList<>();
  List<CalRecord> calRecords=new ArrayList<>();
  long displayTime=0;
  long timeSinceLastRecord=0;
  int batLevel=100;
  if (status == DownloadStatus.SUCCESS) {
    try {
      recentRecords=readData.getRecentEGVsPages(numOfPages);
      meterRecords=readData.getRecentMeterRecords();
      if (preferences.isSensorUploadEnabled()) {
        sensorRecords=readData.getRecentSensorRecords(numOfPages);
      }
      if (preferences.isCalibrationUploadEnabled()) {
        calRecords=readData.getRecentCalRecords();
      }
      displayTime=readData.readDisplayTime().getTime();
      timeSinceLastRecord=readData.getTimeSinceEGVRecord(recentRecords.get(recentRecords.size() - 1));
      batLevel=100;
    }
 catch (    IOException e) {
      status=DownloadStatus.IO_ERROR;
    }
catch (    InvalidRecordLengthException e) {
      status=DownloadStatus.APPLICATION_ERROR;
    }
 finally {
      try {
        transport.close();
      }
 catch (      IOException e) {
        status=DownloadStatus.IO_ERROR;
      }
    }
  }
  List<CookieMonsterG4SGV> cookieMonsterG4SGVs=EGVRecord.toProtobufList(recentRecords);
  List<CookieMonsterG4Cal> cookieMonsterG4Cals=CalRecord.toProtobufList(calRecords);
  List<CookieMonsterG4Meter> cookieMonsterG4Meters=MeterRecord.toProtobufList(meterRecords);
  List<CookieMonsterG4Sensor> cookieMonsterG4Sensors=SensorRecord.toProtobufList(sensorRecords);
  CookieMonsterDownload.Builder downloadBuilder=new CookieMonsterDownload.Builder();
  downloadBuilder.sgv(cookieMonsterG4SGVs).cal(cookieMonsterG4Cals).sensor(cookieMonsterG4Sensors).meter(cookieMonsterG4Meters).download_timestamp(new Date().toString()).download_status(status).uploader_battery(uploaderDevice.getBatteryLevel()).receiver_battery(batLevel).units(GlucoseUnit.MGDL);
  long nextUploadTime=standardMinutes(5).minus(standardSeconds(timeSinceLastRecord)).getMillis();
  JSONArray array=new JSONArray();
  for (  EGVRecord recentRecord : recentRecords) {
    try {
      array.put(recentRecord.toJSON());
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  return new DownloadResults(downloadBuilder.build(),nextUploadTime,array,displayTime);
}","@Override protected DownloadResults doDownload(){
  DownloadStatus status=DownloadStatus.SUCCESS;
  try {
    transport.open();
  }
 catch (  IOException e) {
    status=DownloadStatus.IO_ERROR;
  }
  ReadData readData=new ReadData(transport);
  List<EGVRecord> recentRecords=new ArrayList<>();
  List<MeterRecord> meterRecords=new ArrayList<>();
  List<SensorRecord> sensorRecords=new ArrayList<>();
  List<CalRecord> calRecords=new ArrayList<>();
  long displayTime=0;
  long timeSinceLastRecord=0;
  int batLevel=100;
  if (status == DownloadStatus.SUCCESS) {
    try {
      recentRecords=readData.getRecentEGVsPages(numOfPages);
      meterRecords=readData.getRecentMeterRecords();
      if (preferences.isSensorUploadEnabled()) {
        sensorRecords=readData.getRecentSensorRecords(numOfPages);
      }
      if (preferences.isCalibrationUploadEnabled()) {
        calRecords=readData.getRecentCalRecords();
      }
      if (recentRecords.size() == 0) {
        status=DownloadStatus.NO_DATA;
      }
      displayTime=readData.readDisplayTime().getTime();
      if (status == DownloadStatus.SUCCESS) {
        timeSinceLastRecord=readData.getTimeSinceEGVRecord(recentRecords.get(recentRecords.size() - 1));
      }
      batLevel=100;
    }
 catch (    IOException e) {
      status=DownloadStatus.IO_ERROR;
    }
catch (    InvalidRecordLengthException e) {
      status=DownloadStatus.APPLICATION_ERROR;
    }
 finally {
      try {
        transport.close();
      }
 catch (      IOException e) {
        status=DownloadStatus.IO_ERROR;
      }
    }
  }
  List<CookieMonsterG4SGV> cookieMonsterG4SGVs=EGVRecord.toProtobufList(recentRecords);
  List<CookieMonsterG4Cal> cookieMonsterG4Cals=CalRecord.toProtobufList(calRecords);
  List<CookieMonsterG4Meter> cookieMonsterG4Meters=MeterRecord.toProtobufList(meterRecords);
  List<CookieMonsterG4Sensor> cookieMonsterG4Sensors=SensorRecord.toProtobufList(sensorRecords);
  CookieMonsterDownload.Builder downloadBuilder=new CookieMonsterDownload.Builder();
  downloadBuilder.sgv(cookieMonsterG4SGVs).cal(cookieMonsterG4Cals).sensor(cookieMonsterG4Sensors).meter(cookieMonsterG4Meters).download_timestamp(new Date().toString()).download_status(status).uploader_battery(uploaderDevice.getBatteryLevel()).receiver_battery(batLevel).units(GlucoseUnit.MGDL);
  long nextUploadTime=standardMinutes(5).minus(standardSeconds(timeSinceLastRecord)).getMillis();
  JSONArray array=new JSONArray();
  for (  EGVRecord recentRecord : recentRecords) {
    try {
      array.put(recentRecord.toJSON());
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  return new DownloadResults(downloadBuilder.build(),nextUploadTime,array,displayTime);
}",0.9731060606060606
169209,"public PageHeader(byte[] packet){
  if (packet.length < HEADER_SIZE) {
    if (packet.length != HEADER_SIZE) {
      throw new InvalidRecordLengthException(""String_Node_Str"" + packet.length + ""String_Node_Str""+ HEADER_SIZE+ ""String_Node_Str""+ Utils.bytesToHex(packet));
    }
  }
  firstRecordIndex=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(FIRSTRECORDINDEX_OFFSET);
  numOfRecords=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(NUMRECS_OFFSET);
  recordType=RecordType.values()[packet[RECTYPE_OFFSET]];
  revision=packet[REV_OFFSET];
  pageNumber=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(PAGENUMBER_OFFSET);
  reserved2=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(RESERVED2_OFFSET);
  reserved3=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(RESERVED3_OFFSET);
  reserved4=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(RESERVED4_OFFSET);
  System.arraycopy(packet,HEADER_SIZE - Constants.CRC_LEN,crc,0,Constants.CRC_LEN);
  byte[] crc_calc=CRC16.calculate(packet,0,HEADER_SIZE - Constants.CRC_LEN);
  if (!Arrays.equals(this.crc,crc_calc)) {
    throw new CRCFailError(""String_Node_Str"" + Utils.bytesToHex(this.crc) + ""String_Node_Str""+ Utils.bytesToHex(crc_calc));
  }
}","public PageHeader(byte[] packet){
  if (packet.length < HEADER_SIZE) {
    throw new InvalidRecordLengthException(""String_Node_Str"" + packet.length + ""String_Node_Str""+ HEADER_SIZE+ ""String_Node_Str""+ Utils.bytesToHex(packet));
  }
  firstRecordIndex=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(FIRSTRECORDINDEX_OFFSET);
  numOfRecords=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(NUMRECS_OFFSET);
  recordType=RecordType.values()[packet[RECTYPE_OFFSET]];
  revision=packet[REV_OFFSET];
  pageNumber=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(PAGENUMBER_OFFSET);
  reserved2=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(RESERVED2_OFFSET);
  reserved3=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(RESERVED3_OFFSET);
  reserved4=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(RESERVED4_OFFSET);
  System.arraycopy(packet,HEADER_SIZE - Constants.CRC_LEN,crc,0,Constants.CRC_LEN);
  byte[] crc_calc=CRC16.calculate(packet,0,HEADER_SIZE - Constants.CRC_LEN);
  if (!Arrays.equals(this.crc,crc_calc)) {
    throw new CRCFailError(""String_Node_Str"" + Utils.bytesToHex(this.crc) + ""String_Node_Str""+ Utils.bytesToHex(crc_calc));
  }
}",0.9808459696727854
169210,"public SensorRecord(byte[] packet){
  super(packet);
  if (packet.length != RECORD_SIZE) {
    if (packet.length != RECORD_SIZE) {
      throw new InvalidRecordLengthException(""String_Node_Str"" + packet.length + ""String_Node_Str""+ RECORD_SIZE+ ""String_Node_Str""+ Utils.bytesToHex(packet));
    }
  }
  unfiltered=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(OFFSET_UNFILTERED);
  filtered=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(OFFSET_FILTERED);
  rssi=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getShort(OFFSET_RSSI);
}","public SensorRecord(byte[] packet){
  super(packet);
  if (packet.length != RECORD_SIZE) {
    throw new InvalidRecordLengthException(""String_Node_Str"" + packet.length + ""String_Node_Str""+ RECORD_SIZE+ ""String_Node_Str""+ Utils.bytesToHex(packet));
  }
  unfiltered=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(OFFSET_UNFILTERED);
  filtered=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getInt(OFFSET_FILTERED);
  rssi=ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN).getShort(OFFSET_RSSI);
}",0.9562043795620438
169211,"synchronized public Tracker getTracker(){
  if (tracker == null) {
    GoogleAnalytics analytics=GoogleAnalytics.getInstance(this);
    return analytics.newTracker(R.xml.app_tracker);
  }
  return tracker;
}","synchronized public Tracker getTracker(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (tracker == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    GoogleAnalytics analytics=GoogleAnalytics.getInstance(this);
    tracker=analytics.newTracker(R.xml.app_tracker);
    return tracker;
  }
  return tracker;
}",0.7561436672967864
169212,"private void populateV1APIEntry(JSONObject json,EGRecord record) throws Exception {
  Date date=DATE_FORMAT.parse(record.getDisplayTime().toString());
  json.put(""String_Node_Str"",""String_Node_Str"");
  json.put(""String_Node_Str"",date.getTime());
  json.put(""String_Node_Str"",Integer.parseInt(String.valueOf(record.getBGValue())));
  json.put(""String_Node_Str"",record.getTrend());
}","private void populateV1APIEntry(JSONObject json,EGRecord record) throws Exception {
  json.put(""String_Node_Str"",""String_Node_Str"");
  json.put(""String_Node_Str"",record.getDisplayTime().getTime());
  json.put(""String_Node_Str"",Integer.parseInt(String.valueOf(record.getBGValue())));
  json.put(""String_Node_Str"",record.getTrend());
}",0.7198879551820728
169213,"private void populateLegacyAPIEntry(JSONObject json,EGRecord record) throws Exception {
  Date date=DATE_FORMAT.parse(record.getDisplayTime().toString());
  json.put(""String_Node_Str"",""String_Node_Str"");
  json.put(""String_Node_Str"",date.getTime());
  json.put(""String_Node_Str"",Integer.parseInt(String.valueOf(record.getBGValue())));
  json.put(""String_Node_Str"",record.getTrend());
}","private void populateLegacyAPIEntry(JSONObject json,EGRecord record) throws Exception {
  json.put(""String_Node_Str"",""String_Node_Str"");
  json.put(""String_Node_Str"",record.getDisplayTime().getTime());
  json.put(""String_Node_Str"",Integer.parseInt(String.valueOf(record.getBGValue())));
  json.put(""String_Node_Str"",record.getTrend());
}",0.7229916897506925
169214,"public EGVRecord loadClassFile(File f){
  try {
    ObjectInputStream ois=new ObjectInputStream(new FileInputStream(f));
    Object o=ois.readObject();
    return (EGVRecord)o;
  }
 catch (  Exception ex) {
    Log.e(TAG,""String_Node_Str"",ex);
  }
  return new EGVRecord();
}","public EGVRecord loadClassFile(File f){
  try {
    ObjectInputStream ois=new ObjectInputStream(new FileInputStream(f));
    Object o=ois.readObject();
    return (EGVRecord)o;
  }
 catch (  Exception ex) {
    Log.w(TAG,""String_Node_Str"");
  }
  return new EGVRecord();
}",0.9908592321755028
169215,"private boolean isConnected(){
  mSerialDevice=UsbSerialProber.acquire(mUsbManager);
  return mSerialDevice == null;
}","private boolean isConnected(){
  mSerialDevice=UsbSerialProber.acquire(mUsbManager);
  return mSerialDevice != null;
}",0.9915254237288136
169216,"public EGVRecord loadClassFile(File f){
  try {
    ObjectInputStream ois=new ObjectInputStream(new FileInputStream(f));
    Object o=ois.readObject();
    return (EGVRecord)o;
  }
 catch (  Exception ex) {
    Log.e(TAG,""String_Node_Str"",ex);
  }
  return new EGVRecord();
}","public EGVRecord loadClassFile(File f){
  try {
    ObjectInputStream ois=new ObjectInputStream(new FileInputStream(f));
    Object o=ois.readObject();
    return (EGVRecord)o;
  }
 catch (  Exception ex) {
    Log.w(TAG,""String_Node_Str"");
  }
  return new EGVRecord();
}",0.9908592321755028
169217,"private boolean isConnected(){
  mSerialDevice=UsbSerialProber.acquire(mUsbManager);
  return mSerialDevice == null;
}","private boolean isConnected(){
  mSerialDevice=UsbSerialProber.acquire(mUsbManager);
  return mSerialDevice != null;
}",0.9915254237288136
169218,"@Override public List<MatchResult> findMatches(SequenceSketch seqHashes,boolean toSelf){
  long startTime=System.nanoTime();
  MinHashSketch minHash=seqHashes.getMinHashes();
  if (this.hashes.size() != minHash.numHashes())   throw new MhapRuntimeException(""String_Node_Str"" + this.hashes.size() + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  long numLookups=this.getNumberSequencesSearched();
  long numProcessed=this.numberElementsProcessed.get();
  int mapSize=Math.max(256,(int)(4.0 * (double)numLookups / (double)numProcessed));
  Map<SequenceId,HitCounter> bestSequenceHit=new Object2ObjectOpenHashMap<>(mapSize);
  int[] minHashes=minHash.getMinHashArray();
  int hashIndex=0;
  for (  Map<Integer,ArrayList<SequenceId>> currHash : this.hashes) {
    ArrayList<SequenceId> currentHashMatchList=currHash.get(minHashes[hashIndex]);
    if (currentHashMatchList != null) {
      this.numberElementsProcessed.getAndAdd(currentHashMatchList.size());
      for (      SequenceId sequenceId : currentHashMatchList) {
        bestSequenceHit.compute(sequenceId,(k,v) -> (v == null) ? new HitCounter(1) : v.addHit());
      }
    }
    hashIndex++;
  }
  long minHashEndTime=System.nanoTime();
  this.minhashSearchTime.getAndAdd(minHashEndTime - startTime);
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  for (  Entry<SequenceId,HitCounter> match : bestSequenceHit.entrySet()) {
    SequenceId matchId=match.getKey();
    if (toSelf && matchId.getHeaderId() == seqHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue().count >= this.numMinMatches) {
      SequenceSketch matchedHashes=this.sequenceVectorsHash.get(match.getKey());
      if (matchedHashes == null)       throw new MhapRuntimeException(""String_Node_Str"");
      if (matchedHashes.getSequenceLength() < this.minStoreLength && seqHashes.getSequenceLength() < this.minStoreLength)       continue;
      if (toSelf && matchId.getHeaderId() > seqHashes.getSequenceId().getHeaderId() && matchedHashes.getSequenceLength() >= this.minStoreLength && seqHashes.getSequenceLength() >= this.minStoreLength)       continue;
      if (toSelf && matchedHashes.getSequenceLength() < this.minStoreLength && seqHashes.getSequenceLength() >= this.minStoreLength)       continue;
      OverlapInfo result=seqHashes.getOrderedHashes().getOverlapInfo(matchedHashes.getOrderedHashes(),this.maxShift);
      boolean accept=result.score >= this.acceptScore;
      this.numberSequencesFullyCompared.getAndIncrement();
      if (accept) {
        MatchResult currResult=new MatchResult(seqHashes.getSequenceId(),matchId,result,seqHashes.getSequenceLength(),matchedHashes.getSequenceLength());
        matches.add(currResult);
      }
    }
  }
  long endTime=System.nanoTime();
  this.sortMergeSearchTime.getAndAdd(endTime - minHashEndTime);
  return matches;
}","@Override public List<MatchResult> findMatches(SequenceSketch seqHashes,boolean toSelf){
  long startTime=System.nanoTime();
  MinHashSketch minHash=seqHashes.getMinHashes();
  if (this.hashes.size() != minHash.numHashes())   throw new MhapRuntimeException(""String_Node_Str"" + this.hashes.size() + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  long numLookups=this.getNumberSequencesSearched();
  long numProcessed=this.numberElementsProcessed.get();
  int mapSize=Math.max(256,(int)(4.0 * (double)numProcessed / (double)numLookups));
  Map<SequenceId,HitCounter> bestSequenceHit=new Object2ObjectOpenHashMap<>(mapSize);
  int[] minHashes=minHash.getMinHashArray();
  int hashIndex=0;
  long additionalProcessed=0L;
  for (  Map<Integer,ArrayList<SequenceId>> currHash : this.hashes) {
    ArrayList<SequenceId> currentHashMatchList=currHash.get(minHashes[hashIndex]);
    if (currentHashMatchList != null) {
      additionalProcessed+=currentHashMatchList.size();
      for (      SequenceId sequenceId : currentHashMatchList) {
        bestSequenceHit.compute(sequenceId,(k,v) -> (v == null) ? new HitCounter(1) : v.addHit());
      }
    }
    hashIndex++;
  }
  long minHashEndTime=System.nanoTime();
  this.minhashSearchTime.getAndAdd(minHashEndTime - startTime);
  this.numberElementsProcessed.getAndAdd(additionalProcessed);
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  for (  Entry<SequenceId,HitCounter> match : bestSequenceHit.entrySet()) {
    SequenceId matchId=match.getKey();
    if (toSelf && matchId.getHeaderId() == seqHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue().count >= this.numMinMatches) {
      SequenceSketch matchedHashes=this.sequenceVectorsHash.get(match.getKey());
      if (matchedHashes == null)       throw new MhapRuntimeException(""String_Node_Str"");
      if (matchedHashes.getSequenceLength() < this.minStoreLength && seqHashes.getSequenceLength() < this.minStoreLength)       continue;
      if (toSelf && matchId.getHeaderId() > seqHashes.getSequenceId().getHeaderId() && matchedHashes.getSequenceLength() >= this.minStoreLength && seqHashes.getSequenceLength() >= this.minStoreLength)       continue;
      if (toSelf && matchedHashes.getSequenceLength() < this.minStoreLength && seqHashes.getSequenceLength() >= this.minStoreLength)       continue;
      OverlapInfo result=seqHashes.getOrderedHashes().getOverlapInfo(matchedHashes.getOrderedHashes(),this.maxShift);
      boolean accept=result.score >= this.acceptScore;
      this.numberSequencesFullyCompared.getAndIncrement();
      if (accept) {
        MatchResult currResult=new MatchResult(seqHashes.getSequenceId(),matchId,result,seqHashes.getSequenceLength(),matchedHashes.getSequenceLength());
        matches.add(currResult);
      }
    }
  }
  long endTime=System.nanoTime();
  this.sortMergeSearchTime.getAndAdd(endTime - minHashEndTime);
  return matches;
}",0.969030292773735
169219,"private static double getScore(ssw.Alignment alignment,String qry,String ref){
  Pattern cigarPattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=cigarPattern.matcher(alignment.cigar);
  int errors=0;
  int len=0;
  int qryPos=alignment.read_begin1;
  int refPos=alignment.ref_begin1;
  while (matcher.find()) {
    String cVal=matcher.group();
    int cLen=Integer.parseInt(cVal.substring(0,cVal.length() - 1));
    char cLetter=cVal.toUpperCase().charAt(cVal.length() - 1);
switch (cLetter) {
case 'H':
      break;
case 'S':
case '=':
    len+=cLen;
  break;
case 'M':
for (int i=0; i < cLen; i++) {
  if (ref.charAt(refPos) != qry.charAt(qryPos)) {
    errors++;
  }
 else {
  }
  refPos++;
  qryPos++;
}
len+=cLen;
break;
case 'I':
errors+=cLen;
qryPos+=cLen;
len+=cLen;
break;
case 'D':
errors+=cLen;
refPos+=cLen;
len+=cLen;
break;
default :
System.err.println(""String_Node_Str"" + cLetter);
System.exit(1);
break;
}
}
return 1 - (errors / (double)len);
}","private static double getScore(ssw.Alignment alignment,String qry,String ref){
  Pattern cigarPattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=cigarPattern.matcher(alignment.cigar);
  int errors=0;
  int len=0;
  int qryPos=alignment.read_begin1;
  int refPos=alignment.ref_begin1;
  while (matcher.find()) {
    String cVal=matcher.group();
    int cLen=Integer.parseInt(cVal.substring(0,cVal.length() - 1));
    char cLetter=cVal.toUpperCase().charAt(cVal.length() - 1);
switch (cLetter) {
case 'H':
      break;
case 'S':
case '=':
    len+=cLen;
  break;
case 'M':
for (int i=0; i < cLen; i++) {
  if (ref.toUpperCase().charAt(refPos) != qry.toUpperCase().charAt(qryPos)) {
    errors++;
  }
 else {
  }
  refPos++;
  qryPos++;
}
len+=cLen;
break;
case 'I':
errors+=cLen;
qryPos+=cLen;
len+=cLen;
break;
case 'D':
errors+=cLen;
refPos+=cLen;
len+=cLen;
break;
default :
System.err.println(""String_Node_Str"" + cLetter);
System.exit(1);
break;
}
}
return 1 - (errors / (double)len);
}",0.9857868020304568
169220,"public FrequencyCounts(Map<Long,Double> fractionCounts,double filterCutoff){
  this.fractionCounts=new HashMap<>(fractionCounts);
  this.filterCutoff=filterCutoff;
  double maxValue=Double.NEGATIVE_INFINITY;
  for (  double val : this.fractionCounts.values())   maxValue=Math.max(maxValue,val);
  this.maxValue=maxValue;
  this.minValue=this.filterCutoff * 0.1;
  this.minIdfValue=idf(this.maxValue);
  this.maxIdfValue=idf(this.minValue);
}","public FrequencyCounts(Map<Long,Double> fractionCounts,double filterCutoff){
  this.fractionCounts=new HashMap<>(fractionCounts);
  this.filterCutoff=filterCutoff;
  double maxValue=Double.NEGATIVE_INFINITY;
  for (  double val : this.fractionCounts.values())   maxValue=Math.max(maxValue,val);
  this.maxValue=maxValue;
  this.minValue=this.filterCutoff;
  this.minIdfValue=idf(this.maxValue);
  this.maxIdfValue=idf(this.minValue);
}",0.9931506849315068
169221,"private final static int[] computeNgramMinHashesWeighted(String seq,final int nGramSize,final int numHashes,FrequencyCounts kmerFilter,boolean weighted){
  final int numberNGrams=seq.length() - nGramSize + 1;
  if (numberNGrams < 1)   throw new SketchRuntimeException(""String_Node_Str"");
  final long[] kmerHashes=HashUtils.computeSequenceHashesLong(seq,nGramSize,0);
  HashMap<Long,HitCounter> hitMap=new LinkedHashMap<>(kmerHashes.length);
  int maxCount=0;
  for (  long kmer : kmerHashes) {
    HitCounter counter=hitMap.get(kmer);
    if (counter == null) {
      counter=new HitCounter(1);
      hitMap.put(kmer,counter);
    }
 else     counter.addHit();
    if (maxCount < counter.count)     maxCount=counter.count;
  }
  int[] hashes=new int[Math.max(1,numHashes)];
  long[] best=new long[numHashes];
  Arrays.fill(best,Long.MAX_VALUE);
  for (  Entry<Long,HitCounter> kmer : hitMap.entrySet()) {
    long key=kmer.getKey();
    int weight=kmer.getValue().count;
    if (!weighted)     weight=1;
    if (kmerFilter != null) {
      if (weighted) {
        weight=(int)kmerFilter.idfDiscrete(key,3);
      }
 else {
        if (kmerFilter.contains(key))         weight=0;
      }
    }
    if (weight <= 0)     continue;
    long x=key;
    for (int word=0; word < numHashes; word++) {
      for (int count=0; count < weight; count++) {
        x^=(x << 21);
        x^=(x >>> 35);
        x^=(x << 4);
        if (x < best[word]) {
          best[word]=x;
          if (word % 2 == 0)           hashes[word]=(int)key;
 else           hashes[word]=(int)(key >>> 32);
        }
      }
    }
  }
  return hashes;
}","private final static int[] computeNgramMinHashesWeighted(String seq,final int nGramSize,final int numHashes,FrequencyCounts kmerFilter,boolean weighted){
  final int numberNGrams=seq.length() - nGramSize + 1;
  if (numberNGrams < 1)   throw new SketchRuntimeException(""String_Node_Str"");
  final long[] kmerHashes=HashUtils.computeSequenceHashesLong(seq,nGramSize,0);
  HashMap<Long,HitCounter> hitMap=new LinkedHashMap<>(kmerHashes.length);
  int maxCount=0;
  for (  long kmer : kmerHashes) {
    HitCounter counter=hitMap.get(kmer);
    if (counter == null) {
      counter=new HitCounter(1);
      hitMap.put(kmer,counter);
    }
 else     counter.addHit();
    if (maxCount < counter.count)     maxCount=counter.count;
  }
  int[] hashes=new int[Math.max(1,numHashes)];
  long[] best=new long[numHashes];
  Arrays.fill(best,Long.MAX_VALUE);
  for (  Entry<Long,HitCounter> kmer : hitMap.entrySet()) {
    long key=kmer.getKey();
    int weight=kmer.getValue().count;
    if (!weighted)     weight=1;
    if (kmerFilter != null) {
      if (weighted) {
        weight=(int)(((double)weight) * kmerFilter.idfDiscrete(key,3));
        if (weight < 1)         weight=1;
      }
 else {
        if (kmerFilter.contains(key))         weight=0;
      }
    }
    if (weight <= 0)     continue;
    long x=key;
    for (int word=0; word < numHashes; word++) {
      for (int count=0; count < weight; count++) {
        x^=(x << 21);
        x^=(x >>> 35);
        x^=(x << 4);
        if (x < best[word]) {
          best[word]=x;
          if (word % 2 == 0)           hashes[word]=(int)key;
 else           hashes[word]=(int)(key >>> 32);
        }
      }
    }
  }
  return hashes;
}",0.9809379727685326
169222,"public AlignElementSketch(T[] sketchArray){
  this.elements=sketchArray;
}","public AlignElementSketch(T[] sketchArray,int stepSize,int seqLength){
  this.elements=sketchArray;
  this.stepSize=stepSize;
  this.seqLength=seqLength;
}",0.6462882096069869
169223,"public Alignment<S> localAlignOneSkip(S a,S b){
  float[][] D=new float[a.length() + 1][b.length() + 1];
  float[][] P=new float[a.length() + 1][b.length() + 1];
  float[][] S=new float[a.length() + 1][b.length() + 1];
  float maxValue=0.0f;
  int maxI=0;
  int maxJ=0;
  for (int i=1; i <= a.length(); i++) {
    for (int j=1; j <= b.length(); j++) {
      float sim=(float)a.similarityScore(b,i - 1,j - 1) + this.scoreOffset;
      P[i][j]=Math.max(D[i - 1][j] + this.gapOpen,D[i][j - 1] + this.gapOpen);
      D[i][j]=D[i - 1][j - 1] + sim;
      S[i][j]=Math.max(P[i][j],D[i][j]);
      if (i == a.length())       S[i][j]=Math.max(S[i][j],P[i][j - 1] + this.gapOpen);
      if (j == b.length())       S[i][j]=Math.max(S[i][j],P[i - 1][j] + this.gapOpen);
      if (S[i][j] > maxValue && (i == a.length() || j == b.length())) {
        maxValue=S[i][j];
        maxI=i;
        maxJ=j;
      }
    }
  }
  float score=maxValue;
  int a1=0;
  int a2=maxI;
  int b1=0;
  int b2=maxJ;
  if (this.storePath) {
    ArrayList<Alignment.Operation> backOperations=new ArrayList<>(a.length() + b.length());
    int i=maxI;
    int j=maxJ;
    while (i > 0 && j > 0) {
      if (S[i][j] == D[i - 1][j] + this.gapOpen) {
        backOperations.add(Operation.DELETE);
        i--;
      }
 else       if (S[i][j] == D[i][j - 1] + this.gapOpen) {
        backOperations.add(Operation.INSERT);
        j--;
      }
 else {
        backOperations.add(Operation.MATCH);
        i--;
        j--;
      }
    }
    a1=i;
    b1=j;
    while (i > 0) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    while (j > 0) {
      backOperations.add(Operation.INSERT);
      j--;
    }
    Collections.reverse(backOperations);
    return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,backOperations);
  }
  return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,null);
}","public Alignment<S> localAlignOneSkip(S a,S b){
  float[][] D=new float[a.length() + 1][b.length() + 1];
  float[][] P=new float[a.length() + 1][b.length() + 1];
  float[][] S=new float[a.length() + 1][b.length() + 1];
  float maxValue=0.0f;
  int maxI=0;
  int maxJ=0;
  for (int i=1; i <= a.length(); i++) {
    for (int j=1; j <= b.length(); j++) {
      float sim=(float)a.similarityScore(b,i - 1,j - 1) + this.scoreOffset;
      P[i][j]=Math.max(D[i - 1][j] + this.gapOpen,D[i][j - 1] + this.gapOpen);
      D[i][j]=D[i - 1][j - 1] + sim;
      S[i][j]=Math.max(P[i][j],D[i][j]);
      if (i == a.length())       S[i][j]=Math.max(S[i][j],P[i][j - 1] + this.gapOpen);
      if (j == b.length())       S[i][j]=Math.max(S[i][j],P[i - 1][j] + this.gapOpen);
      if (S[i][j] > maxValue && (i == a.length() || j == b.length())) {
        maxValue=S[i][j];
        maxI=i;
        maxJ=j;
      }
    }
  }
  float score=maxValue;
  int a1=0;
  int a2=maxI - 1;
  int b1=0;
  int b2=maxJ - 1;
  if (this.storePath) {
    ArrayList<Alignment.Operation> backOperations=new ArrayList<>(a.length() + b.length());
    int i=maxI;
    int j=maxJ;
    while (i > 0 && j > 0) {
      if (S[i][j] == D[i - 1][j] + this.gapOpen) {
        backOperations.add(Operation.DELETE);
        i--;
      }
 else       if (S[i][j] == D[i][j - 1] + this.gapOpen) {
        backOperations.add(Operation.INSERT);
        j--;
      }
 else {
        backOperations.add(Operation.MATCH);
        i--;
        j--;
      }
    }
    a1=i;
    b1=j;
    while (i > 0) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    while (j > 0) {
      backOperations.add(Operation.INSERT);
      j--;
    }
    Collections.reverse(backOperations);
    return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,backOperations);
  }
  return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,null);
}",0.9978689397975492
169224,"public Alignment<S> localAlignSmithWaterGotoh(S a,S b){
  float[][] D=new float[a.length() + 1][b.length() + 1];
  float[][] P=new float[a.length() + 1][b.length() + 1];
  float[][] Q=new float[a.length() + 1][b.length() + 1];
  for (int i=1; i <= a.length(); i++) {
    D[i][0]=0.0f;
    P[i][0]=Float.NEGATIVE_INFINITY;
    Q[i][0]=Float.NEGATIVE_INFINITY;
  }
  for (int j=1; j <= b.length(); j++) {
    D[0][j]=0.0f;
    P[0][j]=Float.NEGATIVE_INFINITY;
    Q[0][j]=Float.NEGATIVE_INFINITY;
  }
  float maxValue=0.0f;
  int maxI=0;
  int maxJ=0;
  for (int i=1; i <= a.length(); i++) {
    for (int j=1; j <= b.length(); j++) {
      P[i][j]=Math.max(D[i - 1][j] + this.gapOpen,P[i - 1][j] + this.gapExtend);
      Q[i][j]=Math.max(D[i][j - 1] + this.gapOpen,Q[i][j - 1] + this.gapExtend);
      float score=D[i - 1][j - 1] + (float)a.similarityScore(b,i - 1,j - 1) + this.scoreOffset;
      D[i][j]=Math.max(score,Math.max(P[i][j],Q[i][j]));
      if (D[i][j] > maxValue) {
        maxValue=D[i][j];
        maxI=i;
        maxJ=j;
      }
    }
  }
  float score=maxValue;
  int a1=0;
  int a2=maxI;
  int b1=0;
  int b2=maxJ;
  if (storePath) {
    ArrayList<Alignment.Operation> backOperations=new ArrayList<>(a.length() + b.length());
    int i=a.length();
    while (i > maxI) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    i=maxI;
    int j=maxJ;
    while (i > 0 && j > 0) {
      if ((P[i][j] >= Q[i][j] && P[i][j] == D[i][j]) || j == 0) {
        backOperations.add(Operation.DELETE);
        i--;
      }
 else       if (Q[i][j] == D[i][j] || i == 0) {
        backOperations.add(Operation.INSERT);
        j--;
      }
 else {
        backOperations.add(Operation.MATCH);
        i--;
        j--;
      }
    }
    a1=i + 1;
    b1=j + 1;
    while (i > 0) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    Collections.reverse(backOperations);
    return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,backOperations);
  }
  return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,null);
}","public Alignment<S> localAlignSmithWaterGotoh(S a,S b){
  float[][] D=new float[a.length() + 1][b.length() + 1];
  float[][] P=new float[a.length() + 1][b.length() + 1];
  float[][] Q=new float[a.length() + 1][b.length() + 1];
  for (int i=1; i <= a.length(); i++) {
    D[i][0]=0.0f;
    P[i][0]=Float.NEGATIVE_INFINITY;
    Q[i][0]=Float.NEGATIVE_INFINITY;
  }
  for (int j=1; j <= b.length(); j++) {
    D[0][j]=0.0f;
    P[0][j]=Float.NEGATIVE_INFINITY;
    Q[0][j]=Float.NEGATIVE_INFINITY;
  }
  float maxValue=0.0f;
  int maxI=0;
  int maxJ=0;
  for (int i=1; i <= a.length(); i++) {
    for (int j=1; j <= b.length(); j++) {
      P[i][j]=Math.max(D[i - 1][j] + this.gapOpen,P[i - 1][j] + this.gapExtend);
      Q[i][j]=Math.max(D[i][j - 1] + this.gapOpen,Q[i][j - 1] + this.gapExtend);
      float score=D[i - 1][j - 1] + (float)a.similarityScore(b,i - 1,j - 1) + this.scoreOffset;
      D[i][j]=Math.max(score,Math.max(P[i][j],Q[i][j]));
      if (D[i][j] > maxValue) {
        maxValue=D[i][j];
        maxI=i;
        maxJ=j;
      }
    }
  }
  float score=maxValue;
  int a1=0;
  int a2=maxI - 1;
  int b1=0;
  int b2=maxJ - 1;
  if (storePath) {
    ArrayList<Alignment.Operation> backOperations=new ArrayList<>(a.length() + b.length());
    int i=a.length();
    while (i > maxI) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    i=maxI;
    int j=maxJ;
    while (i > 0 && j > 0) {
      if ((P[i][j] >= Q[i][j] && P[i][j] == D[i][j]) || j == 0) {
        backOperations.add(Operation.DELETE);
        i--;
      }
 else       if (Q[i][j] == D[i][j] || i == 0) {
        backOperations.add(Operation.INSERT);
        j--;
      }
 else {
        backOperations.add(Operation.MATCH);
        i--;
        j--;
      }
    }
    a1=i;
    b1=j;
    while (i > 0) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    Collections.reverse(backOperations);
    return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,backOperations);
  }
  return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,null);
}",0.9912237932715748
169225,"public MatchResult(SequenceId fromId,SequenceId toId,OverlapInfo overlap,int fromLength,int toLength){
  this.fromId=fromId;
  this.toId=toId;
  this.fromLength=fromLength;
  this.toLength=toLength;
  this.a1=getFromId().isForward() ? overlap.a1 : fromLength - overlap.a2;
  this.a2=getFromId().isForward() ? overlap.a2 : fromLength - overlap.a1;
  this.b1=getToId().isForward() ? overlap.b1 : toLength - overlap.b2;
  this.b2=getToId().isForward() ? overlap.b2 : toLength - overlap.b1;
  this.rawScore=overlap.rawScore;
  if (overlap.score > 1.0)   this.score=1.0;
 else   this.score=overlap.score;
}","protected MatchResult(SequenceId fromId,SequenceId toId,OverlapInfo overlap,int fromLength,int toLength){
  this.fromId=fromId;
  this.toId=toId;
  this.fromLength=fromLength;
  this.toLength=toLength;
  this.a1=getFromId().isForward() ? overlap.a1 : fromLength - overlap.a2 - 1;
  this.a2=getFromId().isForward() ? overlap.a2 : fromLength - overlap.a1 - 1;
  this.b1=getToId().isForward() ? overlap.b1 : toLength - overlap.b2 - 1;
  this.b2=getToId().isForward() ? overlap.b2 : toLength - overlap.b1 - 1;
  this.rawScore=overlap.rawScore;
  if (overlap.score > 1.0)   this.score=1.0;
 else   this.score=overlap.score;
}",0.9762489762489762
169226,"@Override public List<MatchResult> findMatches(SequenceSketch seqHashes,boolean toSelf){
  long startTime=System.nanoTime();
  MinHashSketch minHash=seqHashes.getMinHashes();
  if (this.hashes.size() != minHash.numHashes())   throw new MhapRuntimeException(""String_Node_Str"" + this.hashes.size() + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  HashMap<SequenceId,HitCounter> bestSequenceHit=new HashMap<SequenceId,HitCounter>(this.numberSequencesMinHashed.intValue() / 5 + 1);
  int[] minHashes=minHash.getMinHashArray();
  int hashIndex=0;
  for (  Map<Integer,ArrayList<SequenceId>> currHash : this.hashes) {
    ArrayList<SequenceId> currentHashMatchList=currHash.get(minHashes[hashIndex]);
    if (currentHashMatchList != null) {
      this.numberElementsProcessed.getAndAdd(currentHashMatchList.size());
      for (      SequenceId sequenceId : currentHashMatchList) {
        HitCounter currentHitInfo=bestSequenceHit.get(sequenceId);
        if (currentHitInfo == null) {
          currentHitInfo=new HitCounter(1);
          bestSequenceHit.put(sequenceId,currentHitInfo);
        }
 else         currentHitInfo.addHit();
      }
    }
    hashIndex++;
  }
  long minHashEndTime=System.nanoTime();
  this.minhashSearchTime.getAndAdd(minHashEndTime - startTime);
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  this.numberSubSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  for (  Entry<SequenceId,HitCounter> match : bestSequenceHit.entrySet()) {
    SequenceId matchId=match.getKey();
    if (toSelf && matchId.getHeaderId() == seqHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue().count >= this.numMinMatches) {
      SequenceSketch matchedHashes=this.sequenceVectorsHash.get(match.getKey());
      if (matchedHashes == null)       throw new MhapRuntimeException(""String_Node_Str"");
      if (matchedHashes.getSequenceLength() < this.minStoreLength && seqHashes.getSequenceLength() < this.minStoreLength)       continue;
      if (toSelf && matchId.getHeaderId() > seqHashes.getSequenceId().getHeaderId() && matchedHashes.getSequenceLength() >= this.minStoreLength && seqHashes.getSequenceLength() >= this.minStoreLength)       continue;
      if (toSelf && matchedHashes.getSequenceLength() < this.minStoreLength && seqHashes.getSequenceLength() >= this.minStoreLength)       continue;
      OverlapInfo result;
      boolean accept;
      if (seqHashes.useAlignment()) {
        result=seqHashes.getAlignmentSequence().getOverlapInfo(this.aligner,matchedHashes.getAlignmentSequence());
        accept=result.rawScore > 0.01;
      }
 else {
        result=seqHashes.getOrderedHashes().getOverlapInfo(matchedHashes.getOrderedHashes(),this.maxShift);
        accept=result.score >= this.acceptScore;
      }
      this.numberSequencesFullyCompared.getAndIncrement();
      if (accept) {
        MatchResult currResult=new MatchResult(seqHashes.getSequenceId(),matchId,result,seqHashes.getSequenceLength(),matchedHashes.getSequenceLength());
        matches.add(currResult);
      }
    }
  }
  long endTime=System.nanoTime();
  this.sortMergeSearchTime.getAndAdd(endTime - minHashEndTime);
  return matches;
}","@Override public List<MatchResult> findMatches(SequenceSketch seqHashes,boolean toSelf){
  long startTime=System.nanoTime();
  MinHashSketch minHash=seqHashes.getMinHashes();
  if (this.hashes.size() != minHash.numHashes())   throw new MhapRuntimeException(""String_Node_Str"" + this.hashes.size() + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  HashMap<SequenceId,HitCounter> bestSequenceHit=new HashMap<SequenceId,HitCounter>(this.numberSequencesMinHashed.intValue() / 5 + 1);
  int[] minHashes=minHash.getMinHashArray();
  int hashIndex=0;
  for (  Map<Integer,ArrayList<SequenceId>> currHash : this.hashes) {
    ArrayList<SequenceId> currentHashMatchList=currHash.get(minHashes[hashIndex]);
    if (currentHashMatchList != null) {
      this.numberElementsProcessed.getAndAdd(currentHashMatchList.size());
      for (      SequenceId sequenceId : currentHashMatchList) {
        HitCounter currentHitInfo=bestSequenceHit.get(sequenceId);
        if (currentHitInfo == null) {
          currentHitInfo=new HitCounter(1);
          bestSequenceHit.put(sequenceId,currentHitInfo);
        }
 else         currentHitInfo.addHit();
      }
    }
    hashIndex++;
  }
  long minHashEndTime=System.nanoTime();
  this.minhashSearchTime.getAndAdd(minHashEndTime - startTime);
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  this.numberSubSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  for (  Entry<SequenceId,HitCounter> match : bestSequenceHit.entrySet()) {
    SequenceId matchId=match.getKey();
    if (toSelf && matchId.getHeaderId() == seqHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue().count >= this.numMinMatches) {
      SequenceSketch matchedHashes=this.sequenceVectorsHash.get(match.getKey());
      if (matchedHashes == null)       throw new MhapRuntimeException(""String_Node_Str"");
      if (matchedHashes.getSequenceLength() < this.minStoreLength && seqHashes.getSequenceLength() < this.minStoreLength)       continue;
      if (toSelf && matchId.getHeaderId() > seqHashes.getSequenceId().getHeaderId() && matchedHashes.getSequenceLength() >= this.minStoreLength && seqHashes.getSequenceLength() >= this.minStoreLength)       continue;
      if (toSelf && matchedHashes.getSequenceLength() < this.minStoreLength && seqHashes.getSequenceLength() >= this.minStoreLength)       continue;
      OverlapInfo result;
      boolean accept;
      if (seqHashes.useAlignment()) {
        result=seqHashes.getAlignmentSequence().getOverlapInfo(this.aligner,matchedHashes.getAlignmentSequence());
        accept=result.rawScore > 0.0;
      }
 else {
        result=seqHashes.getOrderedHashes().getOverlapInfo(matchedHashes.getOrderedHashes(),this.maxShift);
        accept=result.score >= this.acceptScore;
      }
      this.numberSequencesFullyCompared.getAndIncrement();
      if (accept) {
        MatchResult currResult=new MatchResult(seqHashes.getSequenceId(),matchId,result,seqHashes.getSequenceLength(),matchedHashes.getSequenceLength());
        matches.add(currResult);
      }
    }
  }
  long endTime=System.nanoTime();
  this.sortMergeSearchTime.getAndAdd(endTime - minHashEndTime);
  return matches;
}",0.9998457504241864
169227,"public SequenceSketch(Sequence seq,int kmerSize,int numHashes,int orderedKmerSize,boolean storeHashes,HashSet<Long> filter,NGramCounts kmerCount,boolean weighted,boolean useAlignment){
  this.sequenceLength=seq.length();
  this.id=seq.getId();
  this.mainHashes=new MinHashSketch(seq.toString(),kmerSize,numHashes,filter,kmerCount,weighted);
  if (useAlignment) {
    this.orderedHashes=null;
    this.alignmentSketches=new MinHashBitSequenceSubSketches(seq.toString(),BIT_KMER_SIZE,SUBSEQUENCE_SIZE,BIT_SKETCH_SIZE);
  }
 else {
    this.orderedHashes=new OrderedNGramHashes(seq.toString(),orderedKmerSize);
    this.alignmentSketches=null;
  }
}","public SequenceSketch(Sequence seq,int kmerSize,int numHashes,int orderedKmerSize,boolean storeHashes,HashSet<Long> filter,NGramCounts kmerCount,boolean weighted,boolean useAlignment){
  this.sequenceLength=seq.length();
  this.id=seq.getId();
  this.mainHashes=new MinHashSketch(seq.getSquenceString(),kmerSize,numHashes,filter,kmerCount,weighted);
  if (useAlignment) {
    this.orderedHashes=null;
    this.alignmentSketches=new MinHashBitSequenceSubSketches(seq.getSquenceString(),BIT_KMER_SIZE,SUBSEQUENCE_SIZE,BIT_SKETCH_SIZE);
  }
 else {
    this.orderedHashes=new OrderedNGramHashes(seq.getSquenceString(),orderedKmerSize);
    this.alignmentSketches=null;
  }
}",0.9726858877086496
169228,"public static void main(String[] args){
  String a=""String_Node_Str"";
  String b=""String_Node_Str"";
  RandomSequenceGenerator generator=new RandomSequenceGenerator();
  a=generator.generateRandomSequence(2000);
  b=a.substring(500,1600);
  a=generator.addPacBioError(a);
  b=generator.addPacBioError(b);
  Aligner<AlignElementString> aligner=new Aligner<AlignElementString>(true,-2.0,-1 * Float.MAX_VALUE,0.0);
  Alignment<AlignElementString> alignment=aligner.localAlignSmithWaterGotoh(new AlignElementString(a),new AlignElementString(b));
  System.err.println(alignment.getOverlapScore(5));
  System.out.println(alignment.outputAlignment());
  System.err.println(""String_Node_Str"" + alignment.getA1());
  System.err.println(""String_Node_Str"" + alignment.getB1());
  System.err.println(""String_Node_Str"" + alignment.getA2());
  System.err.println(""String_Node_Str"" + alignment.getB2());
  MinHashBitSequenceSubSketches m1=new MinHashBitSequenceSubSketches(a,6,200,20);
  MinHashBitSequenceSubSketches m2=new MinHashBitSequenceSubSketches(b,6,200,20);
  System.err.println(""String_Node_Str"" + m1.length());
  System.err.println(""String_Node_Str"" + m2.length());
  OverlapInfo info=m1.getOverlapInfo(new Aligner<AlignElementSketch<MinHashBitSketch>>(true,0.00,0.0,-0.51),m2);
  System.err.println(""String_Node_Str"");
  System.err.println(info.rawScore);
  System.err.println(info.a1);
  System.err.println(info.b1);
  System.err.println(info.a2);
  System.err.println(info.b2);
  OverlapInfo info2=m2.getOverlapInfo(new Aligner<AlignElementSketch<MinHashBitSketch>>(true,0.00,0.0,-0.51),m1);
  System.err.println(""String_Node_Str"");
  System.err.println(info2.rawScore);
  System.err.println(info2.a1);
  System.err.println(info2.b1);
  System.err.println(info2.a2);
  System.err.println(info2.b2);
  System.exit(1);
  OrderedNGramHashes hashes1=new OrderedNGramHashes(a,10);
  OrderedNGramHashes hashes2=new OrderedNGramHashes(b,10);
  System.err.println(""String_Node_Str"");
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).a1);
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).b1);
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).a2);
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).b2);
}","public static void main(String[] args){
  String a=""String_Node_Str"";
  String b=""String_Node_Str"";
  RandomSequenceGenerator generator=new RandomSequenceGenerator();
  a=generator.generateRandomSequence(2000);
  b=a;
  Aligner<AlignElementString> aligner=new Aligner<AlignElementString>(true,-2.0,-1 * Float.MAX_VALUE,0.0);
  Alignment<AlignElementString> alignment=aligner.localAlignSmithWaterGotoh(new AlignElementString(a),new AlignElementString(b));
  System.err.println(alignment.getOverlapScore(5));
  System.out.println(alignment.outputAlignment());
  System.err.println(""String_Node_Str"" + alignment.getA1());
  System.err.println(""String_Node_Str"" + alignment.getB1());
  System.err.println(""String_Node_Str"" + alignment.getA2());
  System.err.println(""String_Node_Str"" + alignment.getB2());
  MinHashBitSequenceSubSketches m1=new MinHashBitSequenceSubSketches(a,6,200,20);
  MinHashBitSequenceSubSketches m2=new MinHashBitSequenceSubSketches(b,6,200,20);
  OverlapInfo info=m1.getOverlapInfo(new Aligner<AlignElementSketch<MinHashBitSketch>>(true,0.00,0.0,-0.51),m2);
  System.err.println(""String_Node_Str"");
  System.err.println(info.rawScore);
  System.err.println(info.a1);
  System.err.println(info.b1);
  System.err.println(info.a2);
  System.err.println(info.b2);
  OverlapInfo info2=m2.getOverlapInfo(new Aligner<AlignElementSketch<MinHashBitSketch>>(true,0.00,0.0,-0.51),m1);
  System.err.println(""String_Node_Str"");
  System.err.println(info2.rawScore);
  System.err.println(info2.a1);
  System.err.println(info2.b1);
  System.err.println(info2.a2);
  System.err.println(info2.b2);
  System.exit(1);
  OrderedNGramHashes hashes1=new OrderedNGramHashes(a,10);
  OrderedNGramHashes hashes2=new OrderedNGramHashes(b,10);
  System.err.println(""String_Node_Str"");
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).a1);
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).b1);
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).a2);
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).b2);
}",0.9538171536286524
169229,"public void simulate(double insertionRate,double delRate,double subRate) throws Exception {
  double errorRate=insertionRate + delRate + subRate;
  double insertionPercentage=insertionRate / errorRate;
  double deletionPercentage=delRate / errorRate;
  double subPercentage=subRate / errorRate;
  if (errorRate < 0 || errorRate > 1) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  System.err.println(""String_Node_Str"");
  String[] sequences=null;
  if (this.reference != null) {
    FastaData data=new FastaData(this.reference,0);
    data.enqueueFullFile();
    sequences=new String[data.getNumberProcessed()];
    int i=0;
    while (!data.isEmpty())     sequences[i++]=data.dequeue().getString().toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"");
  for (int i=0; i < this.totalTrials; i++) {
    if (i % 100 == 0) {
      System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ this.totalTrials);
    }
    int sequenceLength=(int)this.requestedLength;
    int firstPos=0;
    String sequence=null;
    int seqID=0;
    if (this.reference != null) {
      sequence=null;
      while (sequence == null || sequence.length() < 4 * sequenceLength) {
        seqID=generator.nextInt(sequences.length);
        sequence=sequences[seqID];
      }
      firstPos=generator.nextInt(sequence.length());
    }
 else {
      sequence=buildRandomSequence(sequenceLength * 4);
    }
    StringBuilder firstAdj=new StringBuilder();
    StringBuilder errors=new StringBuilder();
    String firstSeq=getSequence(sequenceLength,firstPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,false);
    if (this.kmer < 0) {
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ seqID+ ""String_Node_Str""+ (firstPos + sequenceLength));
      System.out.println(Utils.convertToFasta(firstSeq));
      continue;
    }
    int offset=(int)((this.requestedLength * 2) - this.overlap);
    int secondPos=(firstPos + offset) % sequence.length();
    String secondSeq=getSequence(sequenceLength,secondPos,sequence,(this.halfError ? 0 : errorRate),firstAdj,errors,(this.halfError ? 0 : insertionPercentage),(this.halfError ? 0 : deletionPercentage),(this.halfError ? 0 : subPercentage),true);
    if (this.verbose) {
      System.err.println(""String_Node_Str"" + firstPos + ""String_Node_Str""+ sequence.length()+ ""String_Node_Str""+ secondPos+ ""String_Node_Str""+ offset);
      System.err.println(""String_Node_Str"" + seqID + ""String_Node_Str""+ firstPos+ ""String_Node_Str""+ firstSeq);
      System.err.println(""String_Node_Str"" + seqID + ""String_Node_Str""+ secondPos+ ""String_Node_Str""+ secondSeq);
    }
    if (firstSeq.length() != secondSeq.length() || firstSeq.length() != this.requestedLength) {
      System.err.println(""String_Node_Str"" + firstSeq.length() + ""String_Node_Str""+ secondSeq.length()+ ""String_Node_Str""+ this.requestedLength);
      System.exit(1);
    }
    this.sharedJaccard.add(compareKmers(firstSeq,secondSeq));
    this.sharedMinHash.add(compareMinHash(firstSeq,secondSeq));
    this.sharedMerCounts.add(this.sharedCount);
    if (this.reference != null) {
      sequence=null;
      int secondSeqID=0;
      while (sequence == null || sequence.length() < 2 * sequenceLength) {
        secondSeqID=generator.nextInt(sequences.length);
        sequence=sequences[secondSeqID];
      }
      secondPos=generator.nextInt(sequence.length());
      while (seqID == secondSeqID && Utils.getRangeOverlap(firstPos,firstPos + sequenceLength,secondPos,secondPos + sequenceLength) > 0) {
        secondPos=generator.nextInt(sequence.length());
      }
      secondSeq=getSequence(sequenceLength,secondPos,sequence,(this.halfError ? 0 : errorRate),firstAdj,errors,(this.halfError ? 0 : insertionPercentage),(this.halfError ? 0 : deletionPercentage),(this.halfError ? 0 : subPercentage),true);
    }
 else {
      secondPos=0;
      secondSeq=buildRandomSequence(sequenceLength);
    }
    if (firstSeq.length() != secondSeq.length() || firstSeq.length() != this.requestedLength) {
      System.err.println(""String_Node_Str"" + firstSeq.length());
      System.exit(1);
    }
    this.randomJaccard.add(compareKmers(firstSeq,secondSeq));
    this.randomMinHash.add(compareMinHash(firstSeq,secondSeq));
    this.randomMerCounts.add(this.sharedCount);
  }
  if (this.randomJaccard.size() != this.randomMerCounts.size() || this.sharedJaccard.size() != this.sharedMerCounts.size() || this.sharedJaccard.size() != this.randomJaccard.size()) {
    System.err.println(""String_Node_Str"");
  }
  if (this.sharedMerCounts.size() == 0) {
    return;
  }
  for (int i=0; i < this.totalTrials; i++) {
    System.out.println(this.sharedMerCounts.get(i) + ""String_Node_Str"" + this.sharedJaccard.get(i)+ ""String_Node_Str""+ this.sharedMinHash.get(i)+ ""String_Node_Str""+ this.randomMerCounts.get(i)+ ""String_Node_Str""+ this.randomJaccard.get(i)+ ""String_Node_Str""+ this.randomMinHash.get(i));
  }
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedMerCounts,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedJaccard,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedMinHash,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomMerCounts,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomJaccard,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomMinHash,System.out);
  System.out.println();
}","public void simulate(double insertionRate,double delRate,double subRate) throws Exception {
  double errorRate=insertionRate + delRate + subRate;
  double insertionPercentage=insertionRate / errorRate;
  double deletionPercentage=delRate / errorRate;
  double subPercentage=subRate / errorRate;
  if (errorRate < 0 || errorRate > 1) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  System.err.println(""String_Node_Str"");
  String[] sequences=null;
  if (this.reference != null) {
    FastaData data=new FastaData(this.reference,0);
    data.enqueueFullFile();
    sequences=new String[data.getNumberProcessed()];
    int i=0;
    while (!data.isEmpty())     sequences[i++]=data.dequeue().getSquenceString().toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"");
  for (int i=0; i < this.totalTrials; i++) {
    if (i % 100 == 0) {
      System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ this.totalTrials);
    }
    int sequenceLength=(int)this.requestedLength;
    int firstPos=0;
    String sequence=null;
    int seqID=0;
    if (this.reference != null) {
      sequence=null;
      while (sequence == null || sequence.length() < 4 * sequenceLength) {
        seqID=generator.nextInt(sequences.length);
        sequence=sequences[seqID];
      }
      firstPos=generator.nextInt(sequence.length());
    }
 else {
      sequence=buildRandomSequence(sequenceLength * 4);
    }
    StringBuilder firstAdj=new StringBuilder();
    StringBuilder errors=new StringBuilder();
    String firstSeq=getSequence(sequenceLength,firstPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,false);
    if (this.kmer < 0) {
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ seqID+ ""String_Node_Str""+ (firstPos + sequenceLength));
      System.out.println(Utils.convertToFasta(firstSeq));
      continue;
    }
    int offset=(int)((this.requestedLength * 2) - this.overlap);
    int secondPos=(firstPos + offset) % sequence.length();
    String secondSeq=getSequence(sequenceLength,secondPos,sequence,(this.halfError ? 0 : errorRate),firstAdj,errors,(this.halfError ? 0 : insertionPercentage),(this.halfError ? 0 : deletionPercentage),(this.halfError ? 0 : subPercentage),true);
    if (this.verbose) {
      System.err.println(""String_Node_Str"" + firstPos + ""String_Node_Str""+ sequence.length()+ ""String_Node_Str""+ secondPos+ ""String_Node_Str""+ offset);
      System.err.println(""String_Node_Str"" + seqID + ""String_Node_Str""+ firstPos+ ""String_Node_Str""+ firstSeq);
      System.err.println(""String_Node_Str"" + seqID + ""String_Node_Str""+ secondPos+ ""String_Node_Str""+ secondSeq);
    }
    if (firstSeq.length() != secondSeq.length() || firstSeq.length() != this.requestedLength) {
      System.err.println(""String_Node_Str"" + firstSeq.length() + ""String_Node_Str""+ secondSeq.length()+ ""String_Node_Str""+ this.requestedLength);
      System.exit(1);
    }
    this.sharedJaccard.add(compareKmers(firstSeq,secondSeq));
    this.sharedMinHash.add(compareMinHash(firstSeq,secondSeq));
    this.sharedMerCounts.add(this.sharedCount);
    if (this.reference != null) {
      sequence=null;
      int secondSeqID=0;
      while (sequence == null || sequence.length() < 2 * sequenceLength) {
        secondSeqID=generator.nextInt(sequences.length);
        sequence=sequences[secondSeqID];
      }
      secondPos=generator.nextInt(sequence.length());
      while (seqID == secondSeqID && Utils.getRangeOverlap(firstPos,firstPos + sequenceLength,secondPos,secondPos + sequenceLength) > 0) {
        secondPos=generator.nextInt(sequence.length());
      }
      secondSeq=getSequence(sequenceLength,secondPos,sequence,(this.halfError ? 0 : errorRate),firstAdj,errors,(this.halfError ? 0 : insertionPercentage),(this.halfError ? 0 : deletionPercentage),(this.halfError ? 0 : subPercentage),true);
    }
 else {
      secondPos=0;
      secondSeq=buildRandomSequence(sequenceLength);
    }
    if (firstSeq.length() != secondSeq.length() || firstSeq.length() != this.requestedLength) {
      System.err.println(""String_Node_Str"" + firstSeq.length());
      System.exit(1);
    }
    this.randomJaccard.add(compareKmers(firstSeq,secondSeq));
    this.randomMinHash.add(compareMinHash(firstSeq,secondSeq));
    this.randomMerCounts.add(this.sharedCount);
  }
  if (this.randomJaccard.size() != this.randomMerCounts.size() || this.sharedJaccard.size() != this.sharedMerCounts.size() || this.sharedJaccard.size() != this.randomJaccard.size()) {
    System.err.println(""String_Node_Str"");
  }
  if (this.sharedMerCounts.size() == 0) {
    return;
  }
  for (int i=0; i < this.totalTrials; i++) {
    System.out.println(this.sharedMerCounts.get(i) + ""String_Node_Str"" + this.sharedJaccard.get(i)+ ""String_Node_Str""+ this.sharedMinHash.get(i)+ ""String_Node_Str""+ this.randomMerCounts.get(i)+ ""String_Node_Str""+ this.randomJaccard.get(i)+ ""String_Node_Str""+ this.randomMinHash.get(i));
  }
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedMerCounts,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedJaccard,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedMinHash,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomMerCounts,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomJaccard,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomMinHash,System.out);
  System.out.println();
}",0.9993811334099548
169230,"public OverlapInfo getOverlapInfo(Aligner<AlignElementSketch<T>> aligner,AlignElementSketch<T> b){
  Alignment<AlignElementSketch<T>> aligment=localAlignOneSkip(aligner,b);
  int a1=aligment.getA1();
  int a2=aligment.getA2();
  int b1=aligment.getB1();
  int b2=aligment.getB2();
  a1=Math.min(getSequenceLength() - 1,aligment.getA1() * getStepSize());
  if (a2 >= length() - 1)   a2=getSequenceLength() - 1;
 else   a2=aligment.getA2() * getStepSize() + getStepSize();
  b1=Math.min(b.getSequenceLength() - 1,aligment.getB1() * b.getStepSize());
  if (b2 >= b.length() - 1)   b2=b.getSequenceLength() - 1;
 else   b2=aligment.getB2() * b.getStepSize() + b.getStepSize();
  return new OverlapInfo(aligment.getScore() / 100000.0,aligment.getScore(),a1,a2,b1,b2);
}","public OverlapInfo getOverlapInfo(Aligner<AlignElementSketch<T>> aligner,AlignElementSketch<T> b){
  Alignment<AlignElementSketch<T>> alignment=localAlignOneSkip(aligner,b);
  int a1=alignment.getA1();
  int a2=alignment.getA2();
  int b1=alignment.getB1();
  int b2=alignment.getB2();
  a1=alignment.getA1() * this.stepSize;
  a2=Math.min(getSequenceLength() - 1,alignment.getA2() * this.stepSize + this.stepSize - 1);
  b1=alignment.getB1() * b.stepSize;
  b2=Math.min(b.getSequenceLength() - 1,alignment.getB2() * b.stepSize + b.stepSize - 1);
  double score=alignment.getScore();
  return new OverlapInfo(score / 100000.0,score,a1,a2,b1,b2);
}",0.5542168674698795
169231,"public Alignment<S> localAlignOneSkip(S a,S b){
  float[][] D=new float[a.length() + 1][b.length() + 1];
  float[][] P=new float[a.length() + 1][b.length() + 1];
  float[][] S=new float[a.length() + 1][b.length() + 1];
  float maxValue=0.0f;
  int maxI=0;
  int maxJ=0;
  for (int i=1; i <= a.length(); i++) {
    for (int j=1; j <= b.length(); j++) {
      float sim=(float)a.similarityScore(b,i - 1,j - 1) + this.scoreOffset;
      P[i][j]=Math.max(D[i - 1][j] + this.gapOpen,D[i][j - 1] + this.gapOpen);
      D[i][j]=D[i - 1][j - 1] + sim;
      S[i][j]=Math.max(P[i][j],D[i][j]);
      if (i == a.length())       S[i][j]=Math.max(S[i][j],P[i][j - 1] + this.gapOpen);
      if (j == b.length())       S[i][j]=Math.max(S[i][j],P[i - 1][j] + this.gapOpen);
      if (S[i][j] > maxValue && (i == a.length() || j == b.length())) {
        maxValue=S[i][j];
        maxI=i;
        maxJ=j;
      }
    }
  }
  float score=maxValue;
  int a1=0;
  int a2=maxI - 1;
  int b1=0;
  int b2=maxJ - 1;
  if (this.storePath) {
    ArrayList<Alignment.Operation> backOperations=new ArrayList<>(a.length() + b.length());
    int i=maxI;
    int j=maxJ;
    while (i > 0 && j > 0) {
      if (S[i][j] == D[i - 1][j] + this.gapOpen) {
        backOperations.add(Operation.DELETE);
        i--;
      }
 else       if (S[i][j] == D[i][j - 1] + this.gapOpen) {
        backOperations.add(Operation.INSERT);
        j--;
      }
 else {
        backOperations.add(Operation.MATCH);
        i--;
        j--;
      }
    }
    a1=i;
    b1=j;
    while (i > 0) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    while (j > 0) {
      backOperations.add(Operation.INSERT);
      j--;
    }
    Collections.reverse(backOperations);
    return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,backOperations);
  }
  return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,null);
}","public Alignment<S> localAlignOneSkip(S a,S b){
  float[][] D=new float[a.length() + 1][b.length() + 1];
  float[][] P=new float[a.length() + 1][b.length() + 1];
  float[][] S=new float[a.length() + 1][b.length() + 1];
  float maxValue=0.0f;
  int maxI=0;
  int maxJ=0;
  for (int i=1; i <= a.length(); i++) {
    for (int j=1; j <= b.length(); j++) {
      float sim=(float)a.similarityScore(b,i - 1,j - 1) + this.scoreOffset;
      P[i][j]=Math.max(D[i - 1][j] + this.gapOpen,D[i][j - 1] + this.gapOpen);
      D[i][j]=D[i - 1][j - 1] + sim;
      S[i][j]=Math.max(P[i][j],D[i][j]);
      if (i == a.length())       S[i][j]=Math.max(S[i][j],P[i][j - 1] + this.gapOpen);
      if (j == b.length())       S[i][j]=Math.max(S[i][j],P[i - 1][j] + this.gapOpen);
      if (S[i][j] > maxValue && (i == a.length() || j == b.length())) {
        maxValue=S[i][j];
        maxI=i;
        maxJ=j;
      }
    }
  }
  float score=maxValue;
  int a1=0;
  int a2=Math.max(0,maxI - 1);
  int b1=0;
  int b2=Math.max(0,maxJ - 1);
  if (this.storePath) {
    ArrayList<Alignment.Operation> backOperations=new ArrayList<>(a.length() + b.length());
    int i=maxI;
    int j=maxJ;
    while (i > 0 && j > 0) {
      if (S[i][j] == D[i - 1][j] + this.gapOpen) {
        backOperations.add(Operation.DELETE);
        i--;
      }
 else       if (S[i][j] == D[i][j - 1] + this.gapOpen) {
        backOperations.add(Operation.INSERT);
        j--;
      }
 else {
        backOperations.add(Operation.MATCH);
        i--;
        j--;
      }
    }
    a1=i;
    b1=j;
    while (i > 0) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    while (j > 0) {
      backOperations.add(Operation.INSERT);
      j--;
    }
    Collections.reverse(backOperations);
    return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,backOperations);
  }
  return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,null);
}",0.993660855784469
169232,"public Alignment<S> localAlignSmithWaterGotoh(S a,S b){
  float[][] D=new float[a.length() + 1][b.length() + 1];
  float[][] P=new float[a.length() + 1][b.length() + 1];
  float[][] Q=new float[a.length() + 1][b.length() + 1];
  for (int i=1; i <= a.length(); i++) {
    D[i][0]=0.0f;
    P[i][0]=Float.NEGATIVE_INFINITY;
    Q[i][0]=Float.NEGATIVE_INFINITY;
  }
  for (int j=1; j <= b.length(); j++) {
    D[0][j]=0.0f;
    P[0][j]=Float.NEGATIVE_INFINITY;
    Q[0][j]=Float.NEGATIVE_INFINITY;
  }
  float maxValue=0.0f;
  int maxI=0;
  int maxJ=0;
  for (int i=1; i <= a.length(); i++) {
    for (int j=1; j <= b.length(); j++) {
      P[i][j]=Math.max(D[i - 1][j] + this.gapOpen,P[i - 1][j] + this.gapExtend);
      Q[i][j]=Math.max(D[i][j - 1] + this.gapOpen,Q[i][j - 1] + this.gapExtend);
      float score=D[i - 1][j - 1] + (float)a.similarityScore(b,i - 1,j - 1) + this.scoreOffset;
      D[i][j]=Math.max(score,Math.max(P[i][j],Q[i][j]));
      if (D[i][j] > maxValue) {
        maxValue=D[i][j];
        maxI=i;
        maxJ=j;
      }
    }
  }
  float score=maxValue;
  int a1=0;
  int a2=maxI - 1;
  int b1=0;
  int b2=maxJ - 1;
  if (storePath) {
    ArrayList<Alignment.Operation> backOperations=new ArrayList<>(a.length() + b.length());
    int i=a.length();
    while (i > maxI) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    i=maxI;
    int j=maxJ;
    while (i > 0 && j > 0) {
      if ((P[i][j] >= Q[i][j] && P[i][j] == D[i][j]) || j == 0) {
        backOperations.add(Operation.DELETE);
        i--;
      }
 else       if (Q[i][j] == D[i][j] || i == 0) {
        backOperations.add(Operation.INSERT);
        j--;
      }
 else {
        backOperations.add(Operation.MATCH);
        i--;
        j--;
      }
    }
    a1=i;
    b1=j;
    while (i > 0) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    Collections.reverse(backOperations);
    return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,backOperations);
  }
  return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,null);
}","public Alignment<S> localAlignSmithWaterGotoh(S a,S b){
  float[][] D=new float[a.length() + 1][b.length() + 1];
  float[][] P=new float[a.length() + 1][b.length() + 1];
  float[][] Q=new float[a.length() + 1][b.length() + 1];
  for (int i=1; i <= a.length(); i++) {
    D[i][0]=0.0f;
    P[i][0]=Float.NEGATIVE_INFINITY;
    Q[i][0]=Float.NEGATIVE_INFINITY;
  }
  for (int j=1; j <= b.length(); j++) {
    D[0][j]=0.0f;
    P[0][j]=Float.NEGATIVE_INFINITY;
    Q[0][j]=Float.NEGATIVE_INFINITY;
  }
  float maxValue=0.0f;
  int maxI=0;
  int maxJ=0;
  for (int i=1; i <= a.length(); i++) {
    for (int j=1; j <= b.length(); j++) {
      P[i][j]=Math.max(D[i - 1][j] + this.gapOpen,P[i - 1][j] + this.gapExtend);
      Q[i][j]=Math.max(D[i][j - 1] + this.gapOpen,Q[i][j - 1] + this.gapExtend);
      float score=D[i - 1][j - 1] + (float)a.similarityScore(b,i - 1,j - 1) + this.scoreOffset;
      D[i][j]=Math.max(score,Math.max(P[i][j],Q[i][j]));
      if (D[i][j] > maxValue) {
        maxValue=D[i][j];
        maxI=i;
        maxJ=j;
      }
    }
  }
  float score=maxValue;
  int a1=0;
  int a2=Math.max(0,maxI - 1);
  int b1=0;
  int b2=Math.max(0,maxJ - 1);
  if (storePath) {
    ArrayList<Alignment.Operation> backOperations=new ArrayList<>(a.length() + b.length());
    int i=a.length();
    while (i > maxI) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    i=maxI;
    int j=maxJ;
    while (i > 0 && j > 0) {
      if ((P[i][j] >= Q[i][j] && P[i][j] == D[i][j]) || j == 0) {
        backOperations.add(Operation.DELETE);
        i--;
      }
 else       if (Q[i][j] == D[i][j] || i == 0) {
        backOperations.add(Operation.INSERT);
        j--;
      }
 else {
        backOperations.add(Operation.MATCH);
        i--;
        j--;
      }
    }
    a1=i;
    b1=j;
    while (i > 0) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    Collections.reverse(backOperations);
    return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,backOperations);
  }
  return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,null);
}",0.9917595734367426
169233,"private final static MinHashBitSketch[] computeSequences(String seq,int kmerSize,int stepSize,int numWords){
  int remainder=seq.length() % stepSize;
  int numSequence=seq.length() / stepSize;
  if (remainder >= kmerSize)   numSequence++;
  MinHashBitSketch[] sequence=new MinHashBitSketch[numSequence];
  int start=0;
  for (int iter=0; iter < sequence.length; iter++) {
    int end=Math.min(seq.length(),start + stepSize);
    sequence[iter]=new MinHashBitSketch(seq.substring(start,end),kmerSize,numWords);
    start+=stepSize;
  }
  return sequence;
}","public final static MinHashBitSketch[] computeSequences(String seq,int nGramSize,int stepSize,int numWords){
  int remainder=seq.length() % stepSize;
  int numSequence=(seq.length() - remainder) / stepSize;
  if (remainder > 0)   numSequence++;
  int start=0;
  MinHashBitSketch[] sequence=new MinHashBitSketch[numSequence];
  for (int iter=0; iter < numSequence; iter++) {
    int end=Math.min(seq.length(),start + stepSize);
    int currStart=Math.max(0,end - stepSize);
    int[] sketch=computeNgramMinHashesWeighted(seq.substring(currStart,end),nGramSize,numWords * 64);
    sequence[iter]=new MinHashBitSketch(sketch);
    start+=stepSize;
  }
  return sequence;
}",0.6421568627450981
169234,"private final static int[] computeNgramMinHashesWeighted(String seq,final int nGramSize,final int numHashes,FrequencyCounts kmerFilter,double repeatWeight){
  final int numberNGrams=seq.length() - nGramSize + 1;
  if (numberNGrams < 1)   throw new SketchRuntimeException(""String_Node_Str"");
  final long[] kmerHashes=HashUtils.computeSequenceHashesLong(seq,nGramSize,0);
  Long2ObjectLinkedOpenHashMap<HitCounter> hitMap=new Long2ObjectLinkedOpenHashMap<HitCounter>(kmerHashes.length);
  int maxCount=0;
  for (  long kmer : kmerHashes) {
    HitCounter counter=hitMap.get(kmer);
    if (counter == null) {
      counter=new HitCounter(1);
      hitMap.put(kmer,counter);
    }
 else     counter.addHit();
    if (maxCount < counter.count)     maxCount=counter.count;
  }
  int[] hashes=new int[Math.max(1,numHashes)];
  long[] best=new long[numHashes];
  Arrays.fill(best,Long.MAX_VALUE);
  for (  Entry<Long,HitCounter> kmer : hitMap.entrySet()) {
    long key=kmer.getKey();
    int weight=kmer.getValue().count;
    if (repeatWeight < 0.0) {
      weight=1;
      if (kmerFilter != null && kmerFilter.contains(key))       weight=0;
    }
 else     if (kmerFilter != null) {
      if (repeatWeight > 0.0 && repeatWeight < 1.0) {
        double td=(double)weight;
        double idf=kmerFilter.scaledIdf(key,REPEAT_SCALE);
        weight=(int)Math.round(td * idf);
        if (weight < 1)         weight=1;
      }
 else       if (repeatWeight >= 1.0) {
        if (kmerFilter.contains(key))         weight=0;
      }
    }
    if (weight <= 0)     continue;
    long x=key;
    for (int word=0; word < numHashes; word++) {
      for (int count=0; count < weight; count++) {
        x^=(x << 21);
        x^=(x >>> 35);
        x^=(x << 4);
        if (x < best[word]) {
          best[word]=x;
          if (word % 2 == 0)           hashes[word]=(int)key;
 else           hashes[word]=(int)(key >>> 32);
        }
      }
    }
  }
  return hashes;
}","private final static int[] computeNgramMinHashesWeighted(String seq,final int nGramSize,final int numHashes,FrequencyCounts kmerFilter,double repeatWeight){
  final int numberNGrams=seq.length() - nGramSize + 1;
  if (numberNGrams < 1)   throw new SketchRuntimeException(""String_Node_Str"");
  final long[] kmerHashes=HashUtils.computeSequenceHashesLong(seq,nGramSize,0);
  Long2ObjectLinkedOpenHashMap<HitCounter> hitMap=new Long2ObjectLinkedOpenHashMap<HitCounter>(kmerHashes.length);
  int maxCount=0;
  for (  long kmer : kmerHashes) {
    HitCounter counter=hitMap.get(kmer);
    if (counter == null) {
      counter=new HitCounter(1);
      hitMap.put(kmer,counter);
    }
 else     counter.addHit();
    if (maxCount < counter.count)     maxCount=counter.count;
  }
  int[] hashes=new int[Math.max(1,numHashes)];
  long[] best=new long[numHashes];
  Arrays.fill(best,Long.MAX_VALUE);
  for (  Entry<Long,HitCounter> kmer : hitMap.entrySet()) {
    long key=kmer.getKey();
    int weight=kmer.getValue().count;
    if (repeatWeight < 0.0) {
      weight=1;
      if (kmerFilter != null && kmerFilter.contains(key))       weight=0;
    }
 else     if (kmerFilter != null) {
      if (repeatWeight >= 0.0 && repeatWeight < 1.0) {
        double td=(double)weight;
        double idf=kmerFilter.scaledIdf(key,REPEAT_SCALE);
        weight=(int)Math.round(td * idf);
        if (weight < 1)         weight=1;
      }
 else       if (repeatWeight >= 1.0) {
        if (kmerFilter.contains(key))         weight=0;
      }
    }
    if (weight <= 0)     continue;
    long x=key;
    for (int word=0; word < numHashes; word++) {
      for (int count=0; count < weight; count++) {
        x^=(x << 21);
        x^=(x >>> 35);
        x^=(x << 4);
        if (x < best[word]) {
          best[word]=x;
          if (word % 2 == 0)           hashes[word]=(int)key;
 else           hashes[word]=(int)(key >>> 32);
        }
      }
    }
  }
  return hashes;
}",0.9997440491425648
169235,"public Alignment<S> localAlignOneSkip(S a,S b){
  float[][] D=new float[a.length() + 1][b.length() + 1];
  float[][] P=new float[a.length() + 1][b.length() + 1];
  float[][] S=new float[a.length() + 1][b.length() + 1];
  float maxValue=0.0f;
  int maxI=0;
  int maxJ=0;
  for (int i=1; i <= a.length(); i++) {
    for (int j=1; j <= b.length(); j++) {
      float sim=(float)a.similarityScore(b,i - 1,j - 1) + this.scoreOffset;
      P[i][j]=Math.max(D[i - 1][j] + this.gapOpen,D[i][j - 1] + this.gapOpen);
      D[i][j]=D[i - 1][j - 1] + sim;
      S[i][j]=Math.max(P[i][j],D[i][j]);
      if (i == a.length())       S[i][j]=Math.max(S[i][j],P[i][j - 1] + this.gapOpen);
      if (j == b.length())       S[i][j]=Math.max(S[i][j],P[i - 1][j] + this.gapOpen);
      if (S[i][j] > maxValue && (i == a.length() || j == a.length())) {
        maxValue=S[i][j];
        maxI=i;
        maxJ=j;
      }
    }
  }
  float score=maxValue;
  int a1=0;
  int a2=maxI;
  int b1=0;
  int b2=maxJ;
  if (storePath) {
    ArrayList<Alignment.Operation> backOperations=new ArrayList<>(a.length() + b.length());
    int i=maxI;
    int j=maxJ;
    while (i > 0 && j > 0) {
      if (S[i][j] == D[i - 1][j] + this.gapOpen) {
        backOperations.add(Operation.DELETE);
        i--;
      }
 else       if (S[i][j] == D[i][j - 1] + this.gapOpen) {
        backOperations.add(Operation.INSERT);
        j--;
      }
 else {
        backOperations.add(Operation.MATCH);
        i--;
        j--;
      }
    }
    a1=i;
    b1=j;
    while (i > 0) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    while (j > 0) {
      backOperations.add(Operation.INSERT);
      j--;
    }
    Collections.reverse(backOperations);
    return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,backOperations);
  }
  return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,null);
}","public Alignment<S> localAlignOneSkip(S a,S b){
  float[][] D=new float[a.length() + 1][b.length() + 1];
  float[][] P=new float[a.length() + 1][b.length() + 1];
  float[][] S=new float[a.length() + 1][b.length() + 1];
  float maxValue=0.0f;
  int maxI=0;
  int maxJ=0;
  for (int i=1; i <= a.length(); i++) {
    for (int j=1; j <= b.length(); j++) {
      float sim=(float)a.similarityScore(b,i - 1,j - 1) + this.scoreOffset;
      P[i][j]=Math.max(D[i - 1][j] + this.gapOpen,D[i][j - 1] + this.gapOpen);
      D[i][j]=D[i - 1][j - 1] + sim;
      S[i][j]=Math.max(P[i][j],D[i][j]);
      if (i == a.length())       S[i][j]=Math.max(S[i][j],P[i][j - 1] + this.gapOpen);
      if (j == b.length())       S[i][j]=Math.max(S[i][j],P[i - 1][j] + this.gapOpen);
      if (S[i][j] > maxValue && (i == a.length() || j == b.length())) {
        maxValue=S[i][j];
        maxI=i;
        maxJ=j;
      }
    }
  }
  float score=maxValue;
  int a1=0;
  int a2=maxI;
  int b1=0;
  int b2=maxJ;
  if (this.storePath) {
    ArrayList<Alignment.Operation> backOperations=new ArrayList<>(a.length() + b.length());
    int i=maxI;
    int j=maxJ;
    while (i > 0 && j > 0) {
      if (S[i][j] == D[i - 1][j] + this.gapOpen) {
        backOperations.add(Operation.DELETE);
        i--;
      }
 else       if (S[i][j] == D[i][j - 1] + this.gapOpen) {
        backOperations.add(Operation.INSERT);
        j--;
      }
 else {
        backOperations.add(Operation.MATCH);
        i--;
        j--;
      }
    }
    a1=i;
    b1=j;
    while (i > 0) {
      backOperations.add(Operation.DELETE);
      i--;
    }
    while (j > 0) {
      backOperations.add(Operation.INSERT);
      j--;
    }
    Collections.reverse(backOperations);
    return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,backOperations);
  }
  return new Alignment<S>(a,b,a1,a2,b1,b2,score,this.gapOpen,null);
}",0.9981288425554664
169236,"public MinHashSearch(SequenceSketchStreamer data,int numHashes,int numMinMatches,int numThreads,boolean storeResults,int minStoreLength,double maxShift,double acceptScore) throws IOException {
  super(numThreads,storeResults);
  this.minStoreLength=minStoreLength;
  this.numMinMatches=numMinMatches;
  this.maxShift=maxShift;
  this.acceptScore=acceptScore;
  this.numberSubSequencesHit=new AtomicLong();
  this.numberSequencesHit=new AtomicLong();
  this.numberSequencesFullyCompared=new AtomicLong();
  this.numberSubSequences=new AtomicLong();
  this.numberSequencesMinHashed=new AtomicLong();
  this.numberElementsProcessed=new AtomicLong();
  this.minhashSearchTime=new AtomicLong();
  this.sortMergeSearchTime=new AtomicLong();
  data.enqueueFullFile(false,this.numThreads);
  this.aligner=new Aligner<AlignElementSketch<MinHashBitSketch>>(true,0.0,0.0,-0.52);
  this.sequenceVectorsHash=new HashMap<SequenceId,SequenceSketch>(data.getNumberProcessed() + 100,(float)0.75);
  this.hashes=new ArrayList<Map<Integer,ArrayList<SequenceId>>>(numHashes);
  for (int iter=0; iter < numHashes; iter++) {
    Map<Integer,ArrayList<SequenceId>> map=new HashMap<Integer,ArrayList<SequenceId>>(data.getNumberSubSequencesProcessed() + 100);
    this.hashes.add(map);
  }
  addData(data);
  System.err.println(""String_Node_Str"" + this.sequenceVectorsHash.size() + ""String_Node_Str"");
}","public MinHashSearch(SequenceSketchStreamer data,int numHashes,int numMinMatches,int numThreads,boolean storeResults,int minStoreLength,double maxShift,double acceptScore,double alignmentOffset) throws IOException {
  super(numThreads,storeResults);
  this.minStoreLength=minStoreLength;
  this.numMinMatches=numMinMatches;
  this.maxShift=maxShift;
  this.acceptScore=acceptScore;
  this.numberSubSequencesHit=new AtomicLong();
  this.numberSequencesHit=new AtomicLong();
  this.numberSequencesFullyCompared=new AtomicLong();
  this.numberSubSequences=new AtomicLong();
  this.numberSequencesMinHashed=new AtomicLong();
  this.numberElementsProcessed=new AtomicLong();
  this.minhashSearchTime=new AtomicLong();
  this.sortMergeSearchTime=new AtomicLong();
  data.enqueueFullFile(false,this.numThreads);
  this.aligner=new Aligner<AlignElementSketch<MinHashBitSketch>>(true,0.0,0.0,alignmentOffset);
  this.sequenceVectorsHash=new HashMap<SequenceId,SequenceSketch>(data.getNumberProcessed() + 100,(float)0.75);
  this.hashes=new ArrayList<Map<Integer,ArrayList<SequenceId>>>(numHashes);
  for (int iter=0; iter < numHashes; iter++) {
    Map<Integer,ArrayList<SequenceId>> map=new HashMap<Integer,ArrayList<SequenceId>>(data.getNumberSubSequencesProcessed() + 100);
    this.hashes.add(map);
  }
  addData(data);
  System.err.println(""String_Node_Str"" + this.sequenceVectorsHash.size() + ""String_Node_Str"");
}",0.9845822875582646
169237,"public static void main(String[] args){
  String a=""String_Node_Str"";
  String b=""String_Node_Str"";
  RandomSequenceGenerator generator=new RandomSequenceGenerator();
  a=generator.generateRandomSequence(2000);
  b=a.substring(500,1600);
  a=generator.addPacBioError(a);
  b=generator.addPacBioError(b);
  Aligner<AlignElementString> aligner=new Aligner<AlignElementString>(true,-2.0,-1 * Float.MAX_VALUE,0.0);
  Alignment<AlignElementString> alignment=aligner.localAlignSmithWaterGotoh(new AlignElementString(a),new AlignElementString(b));
  System.err.println(alignment.getOverlapScore(5));
  System.out.println(alignment.outputAlignment());
  System.err.println(""String_Node_Str"" + alignment.getA1());
  System.err.println(""String_Node_Str"" + alignment.getB1());
  System.err.println(""String_Node_Str"" + alignment.getA2());
  System.err.println(""String_Node_Str"" + alignment.getB2());
  MinHashBitSequenceSubSketches m1=new MinHashBitSequenceSubSketches(a,6,200,20);
  MinHashBitSequenceSubSketches m2=new MinHashBitSequenceSubSketches(b,6,200,20);
  System.err.println(""String_Node_Str"" + m1.length());
  System.err.println(""String_Node_Str"" + m2.length());
  OverlapInfo info=m1.getOverlapInfo(new Aligner<AlignElementSketch<MinHashBitSketch>>(true,0.00,0.0,-0.51),m2);
  System.err.println(""String_Node_Str"");
  System.err.println(info.score);
  System.err.println(info.a1);
  System.err.println(info.b1);
  System.err.println(info.a2);
  System.err.println(info.b2);
  System.exit(1);
  OrderedNGramHashes hashes1=new OrderedNGramHashes(a,10);
  OrderedNGramHashes hashes2=new OrderedNGramHashes(b,10);
  System.err.println(""String_Node_Str"");
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).a1);
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).b1);
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).a2);
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).b2);
}","public static void main(String[] args){
  String a=""String_Node_Str"";
  String b=""String_Node_Str"";
  RandomSequenceGenerator generator=new RandomSequenceGenerator();
  a=generator.generateRandomSequence(2000);
  b=a.substring(500,1600);
  a=generator.addPacBioError(a);
  b=generator.addPacBioError(b);
  Aligner<AlignElementString> aligner=new Aligner<AlignElementString>(true,-2.0,-1 * Float.MAX_VALUE,0.0);
  Alignment<AlignElementString> alignment=aligner.localAlignSmithWaterGotoh(new AlignElementString(a),new AlignElementString(b));
  System.err.println(alignment.getOverlapScore(5));
  System.out.println(alignment.outputAlignment());
  System.err.println(""String_Node_Str"" + alignment.getA1());
  System.err.println(""String_Node_Str"" + alignment.getB1());
  System.err.println(""String_Node_Str"" + alignment.getA2());
  System.err.println(""String_Node_Str"" + alignment.getB2());
  MinHashBitSequenceSubSketches m1=new MinHashBitSequenceSubSketches(a,6,200,20);
  MinHashBitSequenceSubSketches m2=new MinHashBitSequenceSubSketches(b,6,200,20);
  System.err.println(""String_Node_Str"" + m1.length());
  System.err.println(""String_Node_Str"" + m2.length());
  OverlapInfo info=m1.getOverlapInfo(new Aligner<AlignElementSketch<MinHashBitSketch>>(true,0.00,0.0,-0.51),m2);
  System.err.println(""String_Node_Str"");
  System.err.println(info.rawScore);
  System.err.println(info.a1);
  System.err.println(info.b1);
  System.err.println(info.a2);
  System.err.println(info.b2);
  OverlapInfo info2=m2.getOverlapInfo(new Aligner<AlignElementSketch<MinHashBitSketch>>(true,0.00,0.0,-0.51),m1);
  System.err.println(""String_Node_Str"");
  System.err.println(info2.rawScore);
  System.err.println(info2.a1);
  System.err.println(info2.b1);
  System.err.println(info2.a2);
  System.err.println(info2.b2);
  System.exit(1);
  OrderedNGramHashes hashes1=new OrderedNGramHashes(a,10);
  OrderedNGramHashes hashes2=new OrderedNGramHashes(b,10);
  System.err.println(""String_Node_Str"");
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).a1);
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).b1);
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).a2);
  System.err.println(hashes1.getOverlapInfo(hashes2,.2).b2);
}",0.9207968901846452
169238,"public MhapMain(ParseOptions options) throws IOException {
  this.processFile=options.get(""String_Node_Str"").getString();
  this.inFile=options.get(""String_Node_Str"").getString();
  this.toFile=options.get(""String_Node_Str"").getString();
  this.noSelf=options.get(""String_Node_Str"").getBoolean();
  this.numThreads=options.get(""String_Node_Str"").getInteger();
  this.numHashes=options.get(""String_Node_Str"").getInteger();
  this.kmerSize=options.get(""String_Node_Str"").getInteger();
  this.numMinMatches=options.get(""String_Node_Str"").getInteger();
  this.minStoreLength=options.get(""String_Node_Str"").getInteger();
  this.maxShift=options.get(""String_Node_Str"").getDouble();
  this.acceptScore=options.get(""String_Node_Str"").getDouble();
  this.weighted=options.get(""String_Node_Str"").getBoolean();
  this.useAlignment=options.get(""String_Node_Str"").getBoolean();
  String filterFile=options.get(""String_Node_Str"").getString();
  if (!filterFile.isEmpty()) {
    long startTime=System.nanoTime();
    System.err.println(""String_Node_Str"" + filterFile + ""String_Node_Str"");
    try {
      this.filter=Utils.createKmerFilter(filterFile,options.get(""String_Node_Str"").getDouble(),this.kmerSize,0);
    }
 catch (    Exception e) {
      throw new MhapRuntimeException(""String_Node_Str"",e);
    }
    System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
    this.kmerCounter=null;
  }
 else {
    this.filter=null;
    this.kmerCounter=null;
  }
}","public MhapMain(ParseOptions options) throws IOException {
  this.processFile=options.get(""String_Node_Str"").getString();
  this.inFile=options.get(""String_Node_Str"").getString();
  this.toFile=options.get(""String_Node_Str"").getString();
  this.noSelf=options.get(""String_Node_Str"").getBoolean();
  this.numThreads=options.get(""String_Node_Str"").getInteger();
  this.numHashes=options.get(""String_Node_Str"").getInteger();
  this.kmerSize=options.get(""String_Node_Str"").getInteger();
  this.numMinMatches=options.get(""String_Node_Str"").getInteger();
  this.minStoreLength=options.get(""String_Node_Str"").getInteger();
  this.maxShift=options.get(""String_Node_Str"").getDouble();
  this.acceptScore=options.get(""String_Node_Str"").getDouble();
  this.weighted=options.get(""String_Node_Str"").getBoolean();
  this.useAlignment=options.get(""String_Node_Str"").getBoolean();
  this.alignmentOffset=options.get(""String_Node_Str"").getDouble();
  String filterFile=options.get(""String_Node_Str"").getString();
  if (!filterFile.isEmpty()) {
    long startTime=System.nanoTime();
    System.err.println(""String_Node_Str"" + filterFile + ""String_Node_Str"");
    try {
      this.filter=Utils.createKmerFilter(filterFile,options.get(""String_Node_Str"").getDouble(),this.kmerSize,0);
    }
 catch (    Exception e) {
      throw new MhapRuntimeException(""String_Node_Str"",e);
    }
    System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
    this.kmerCounter=null;
  }
 else {
    this.filter=null;
    this.kmerCounter=null;
  }
}",0.9777777777777776
169239,"public MinHashSearch getMatchSearch(SequenceSketchStreamer hashStreamer) throws IOException {
  return new MinHashSearch(hashStreamer,this.numHashes,this.numMinMatches,this.numThreads,false,this.minStoreLength,this.maxShift,this.acceptScore);
}","public MinHashSearch getMatchSearch(SequenceSketchStreamer hashStreamer) throws IOException {
  return new MinHashSearch(hashStreamer,this.numHashes,this.numMinMatches,this.numThreads,false,this.minStoreLength,this.maxShift,this.acceptScore,this.alignmentOffset);
}",0.9587426326129664
169240,"protected AbstractSequenceSubSketches(S[] sequence,int stepSize){
  this.sequence=sequence;
  this.stepSize=stepSize;
}","protected AbstractSequenceSubSketches(S[] sequence,int stepSize,int seqLength){
  this.sequence=sequence;
  this.stepSize=stepSize;
  this.seqLength=seqLength;
}",0.85
169241,"public OverlapInfo getOverlapInfo(Aligner<AlignElementSketch<S>> aligner,T b){
  Alignment<AlignElementSketch<S>> aligment=localAlignOneSkip(aligner,b);
  return new OverlapInfo(aligment.getScore() / 100000.0,aligment.getScore(),aligment.getA1() * stepSize,aligment.getA2() * stepSize,aligment.getB1() * stepSize,aligment.getB2() * stepSize);
}","public OverlapInfo getOverlapInfo(Aligner<AlignElementSketch<S>> aligner,T b){
  Alignment<AlignElementSketch<S>> aligment=localAlignOneSkip(aligner,b);
  int a1=Math.min(getSequenceLength(),aligment.getA1() * this.stepSize);
  int a2=Math.min(this.getSequenceLength(),aligment.getA2() * this.stepSize);
  int b1=Math.min(b.getSequenceLength(),aligment.getB1() * this.stepSize);
  int b2=Math.min(b.getSequenceLength(),aligment.getB2() * this.stepSize);
  return new OverlapInfo(aligment.getScore() / 100000.0,aligment.getScore(),a1,a2,b1,b2);
}",0.530933633295838
169242,"public MinHashBitSequenceSubSketches(String seq,int kmerSize,int stepSize,int numWords){
  super(computeSequences(seq,kmerSize,stepSize,numWords),stepSize);
}","public MinHashBitSequenceSubSketches(String seq,int kmerSize,int stepSize,int numWords){
  super(computeSequences(seq,kmerSize,stepSize,numWords),stepSize,seq.length());
}",0.96048632218845
169243,"public byte[] getAsByteArray(){
  int numWords=this.sequence[0].numberOfWords();
  ByteBuffer bb=ByteBuffer.allocate(8 * numWords * this.sequence.length + 4 + 4 + 4);
  bb.putInt(this.sequence.length);
  bb.putInt(numWords);
  bb.putInt(getStepSize());
  for (int hash=0; hash < this.sequence.length; hash++) {
    MinHashBitSketch sketch=this.sequence[hash];
    for (int word=0; word < numWords; word++)     bb.putLong(sketch.getWord(word));
  }
  return bb.array();
}","public byte[] getAsByteArray(){
  int numWords=this.sequence[0].numberOfWords();
  ByteBuffer bb=ByteBuffer.allocate(8 * numWords * this.sequence.length + 4 + 4 + 4 + 4);
  bb.putInt(this.sequence.length);
  bb.putInt(numWords);
  bb.putInt(getStepSize());
  bb.putInt(getSequenceLength());
  for (int hash=0; hash < this.sequence.length; hash++) {
    MinHashBitSketch sketch=this.sequence[hash];
    for (int word=0; word < numWords; word++)     bb.putLong(sketch.getWord(word));
  }
  return bb.array();
}",0.9611451942740288
169244,"public final static MinHashBitSequenceSubSketches fromByteStream(DataInputStream input) throws IOException {
  try {
    int numSubSequences=input.readInt();
    int numWords=input.readInt();
    int stepSize=input.readInt();
    MinHashBitSketch[] sequence=new MinHashBitSketch[numSubSequences];
    for (int iter=0; iter < numSubSequences; iter++) {
      long[] bits=new long[numWords];
      for (int word=0; word < numWords; word++)       bits[word]=input.readLong();
      sequence[iter]=new MinHashBitSketch(bits);
    }
    return new MinHashBitSequenceSubSketches(sequence,stepSize);
  }
 catch (  EOFException e) {
    return null;
  }
}","public final static MinHashBitSequenceSubSketches fromByteStream(DataInputStream input) throws IOException {
  try {
    int numSubSequences=input.readInt();
    int numWords=input.readInt();
    int stepSize=input.readInt();
    int seqLength=input.readInt();
    MinHashBitSketch[] sequence=new MinHashBitSketch[numSubSequences];
    for (int iter=0; iter < numSubSequences; iter++) {
      long[] bits=new long[numWords];
      for (int word=0; word < numWords; word++)       bits[word]=input.readLong();
      sequence[iter]=new MinHashBitSketch(bits);
    }
    return new MinHashBitSequenceSubSketches(sequence,stepSize,seqLength);
  }
 catch (  EOFException e) {
    return null;
  }
}",0.9663928304705004
169245,"public MinHashSketch(String str,int nGramSize,int numHashes){
  this.minHashes=MinHashSketch.computeNgramMinHashesWeightedIntSuper(str,nGramSize,numHashes,null,null,true);
}","public MinHashSketch(String str,int nGramSize,int numHashes){
  this.minHashes=MinHashSketch.computeNgramMinHashesWeighted(str,nGramSize,numHashes,null,null,true);
}",0.9763313609467456
169246,"@Override public List<MatchResult> findMatches(SequenceMinHashes seqHashes,boolean toSelf){
  MinHash minHash=seqHashes.getMinHashes();
  if (this.hashes.length != minHash.numHashes())   throw new FastAlignRuntimeException(""String_Node_Str"" + this.hashes.length + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  HashMap<SequenceId,HitInfo> bestSequenceHit=new HashMap<SequenceId,HitInfo>(this.numberSequencesMinHashed.intValue() / 5 + 1);
  int[] minHashes=minHash.getMinHashArray();
  int hashIndex=0;
  for (  ArrayList<SequenceId>[] currHash : this.hashes) {
    ArrayList<SequenceId> currentHashMatchList=currHash[UnsignedInts.remainder(minHashes[hashIndex],currHash.length)];
    if (currentHashMatchList != null) {
      this.numberElementsProcessed.getAndAdd(currentHashMatchList.size());
      for (      SequenceId sequenceId : currentHashMatchList) {
        HitInfo currentHitInfo=bestSequenceHit.get(sequenceId);
        if (currentHitInfo == null) {
          currentHitInfo=new HitInfo();
          bestSequenceHit.put(sequenceId,currentHitInfo);
        }
        currentHitInfo.addHit();
      }
    }
    hashIndex++;
  }
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  this.numberSubSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  for (  Entry<SequenceId,HitInfo> match : bestSequenceHit.entrySet()) {
    SequenceId matchId=match.getKey();
    if (toSelf && matchId.getHeaderId() == seqHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue().count >= this.numMinMatches) {
      SequenceMinHashes matchedHashes=this.sequenceVectorsHash.get(match.getKey());
      if (matchedHashes == null)       throw new FastAlignRuntimeException(""String_Node_Str"");
      if (matchedHashes.getSequenceLength() < this.minStoreLength && seqHashes.getSequenceLength() < this.minStoreLength)       continue;
      if (toSelf && matchId.getHeaderId() > seqHashes.getSequenceId().getHeaderId() && matchedHashes.getSequenceLength() >= this.minStoreLength && seqHashes.getSequenceLength() >= this.minStoreLength)       continue;
      if (toSelf && matchedHashes.getSequenceLength() < this.minStoreLength && seqHashes.getSequenceLength() >= this.minStoreLength)       continue;
      OverlapInfo result=seqHashes.getOrderedHashes().getFullScore(matchedHashes.getOrderedHashes(),this.maxShift);
      this.numberSequencesFullyCompared.getAndIncrement();
      if (result.score >= this.acceptScore) {
        MatchResult currResult=new MatchResult(seqHashes.getSequenceId(),matchId,result,seqHashes.getSequenceLength(),matchedHashes.getSequenceLength());
        matches.add(currResult);
      }
    }
  }
  return matches;
}","@Override public List<MatchResult> findMatches(SequenceMinHashes seqHashes,boolean toSelf){
  long startTime=System.currentTimeMillis();
  MinHash minHash=seqHashes.getMinHashes();
  if (this.hashes.length != minHash.numHashes())   throw new FastAlignRuntimeException(""String_Node_Str"" + this.hashes.length + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  HashMap<SequenceId,HitInfo> bestSequenceHit=new HashMap<SequenceId,HitInfo>(this.numberSequencesMinHashed.intValue() / 5 + 1);
  int[] minHashes=minHash.getMinHashArray();
  int hashIndex=0;
  for (  ArrayList<SequenceId>[] currHash : this.hashes) {
    ArrayList<SequenceId> currentHashMatchList=currHash[UnsignedInts.remainder(minHashes[hashIndex],currHash.length)];
    if (currentHashMatchList != null) {
      this.numberElementsProcessed.getAndAdd(currentHashMatchList.size());
      for (      SequenceId sequenceId : currentHashMatchList) {
        HitInfo currentHitInfo=bestSequenceHit.get(sequenceId);
        if (currentHitInfo == null) {
          currentHitInfo=new HitInfo();
          bestSequenceHit.put(sequenceId,currentHitInfo);
        }
        currentHitInfo.addHit();
      }
    }
    hashIndex++;
  }
  this.minhashSearchTime.getAndAdd(System.currentTimeMillis() - startTime);
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  this.numberSubSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  for (  Entry<SequenceId,HitInfo> match : bestSequenceHit.entrySet()) {
    SequenceId matchId=match.getKey();
    if (toSelf && matchId.getHeaderId() == seqHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue().count >= this.numMinMatches) {
      SequenceMinHashes matchedHashes=this.sequenceVectorsHash.get(match.getKey());
      if (matchedHashes == null)       throw new FastAlignRuntimeException(""String_Node_Str"");
      if (matchedHashes.getSequenceLength() < this.minStoreLength && seqHashes.getSequenceLength() < this.minStoreLength)       continue;
      if (toSelf && matchId.getHeaderId() > seqHashes.getSequenceId().getHeaderId() && matchedHashes.getSequenceLength() >= this.minStoreLength && seqHashes.getSequenceLength() >= this.minStoreLength)       continue;
      if (toSelf && matchedHashes.getSequenceLength() < this.minStoreLength && seqHashes.getSequenceLength() >= this.minStoreLength)       continue;
      OverlapInfo result=seqHashes.getOrderedHashes().getFullScore(matchedHashes.getOrderedHashes(),this.maxShift);
      this.numberSequencesFullyCompared.getAndIncrement();
      if (result.score >= this.acceptScore) {
        MatchResult currResult=new MatchResult(seqHashes.getSequenceId(),matchId,result,seqHashes.getSequenceLength(),matchedHashes.getSequenceLength());
        matches.add(currResult);
      }
    }
  }
  return matches;
}",0.9783735478105452
169247,"@SuppressWarnings(""String_Node_Str"") public MinHashSearchArray(AbstractSequenceHashStreamer<SequenceMinHashes> data,int numHashes,int numMinMatches,int numThreads,boolean storeResults,int minStoreLength,double maxShift,double acceptScore) throws IOException {
  super(numThreads,storeResults);
  this.minStoreLength=minStoreLength;
  this.numMinMatches=numMinMatches;
  this.maxShift=maxShift;
  this.acceptScore=acceptScore;
  this.numberSubSequencesHit=new AtomicLong();
  this.numberSequencesHit=new AtomicLong();
  this.numberSequencesFullyCompared=new AtomicLong();
  this.numberSubSequences=new AtomicLong();
  this.numberSequencesMinHashed=new AtomicLong();
  this.numberElementsProcessed=new AtomicLong();
  data.enqueueFullFile(false,this.numThreads);
  this.sequenceVectorsHash=new HashMap<SequenceId,SequenceMinHashes>(data.getNumberProcessed() + 100,(float)0.75);
  this.hashes=new ArrayList[numHashes][];
  int numElements=data.getNumberSubSequencesProcessed() + 100;
  for (int iter=0; iter < numHashes; iter++)   this.hashes[iter]=new ArrayList[numElements * 8];
  addData(data);
}","@SuppressWarnings(""String_Node_Str"") public MinHashSearchArray(AbstractSequenceHashStreamer<SequenceMinHashes> data,int numHashes,int numMinMatches,int numThreads,boolean storeResults,int minStoreLength,double maxShift,double acceptScore) throws IOException {
  super(numThreads,storeResults);
  this.minStoreLength=minStoreLength;
  this.numMinMatches=numMinMatches;
  this.maxShift=maxShift;
  this.acceptScore=acceptScore;
  this.numberSubSequencesHit=new AtomicLong();
  this.numberSequencesHit=new AtomicLong();
  this.numberSequencesFullyCompared=new AtomicLong();
  this.numberSubSequences=new AtomicLong();
  this.numberSequencesMinHashed=new AtomicLong();
  this.numberElementsProcessed=new AtomicLong();
  this.minhashSearchTime=new AtomicLong();
  data.enqueueFullFile(false,this.numThreads);
  this.sequenceVectorsHash=new HashMap<SequenceId,SequenceMinHashes>(data.getNumberProcessed() + 100,(float)0.75);
  this.hashes=new ArrayList[numHashes][];
  int numElements=data.getNumberSubSequencesProcessed() + 100;
  for (int iter=0; iter < numHashes; iter++)   this.hashes[iter]=new ArrayList[numElements * 4];
  addData(data);
}",0.9798657718120806
169248,"public OverlapInfo getFullScore(OrderKmerHashes s,double maxShiftPercent){
  int[][][] allKmerHashes=this.orderedHashes;
  int[][][] sAllKmerHashes=s.orderedHashes;
  int size1=this.size();
  int size2=s.size();
  int valid1Lower=0;
  int valid1Upper=size1;
  int valid2Lower=0;
  int valid2Upper=size2;
  int medianShift=0;
  int overlapSize=Math.min(size1,size2);
  int absMaxShiftInOverlap=Math.max(size1,size2);
  int count=0;
  int[] posShift=new int[Math.min(size1,size2) / 8 + 1];
  int[] pos1Index=new int[posShift.length];
  int[] pos2Index=new int[posShift.length];
  int numScoringRepeats=2;
  if (maxShiftPercent <= 0) {
    numScoringRepeats=1;
    maxShiftPercent=Math.abs(maxShiftPercent);
  }
  for (int repeat=0; repeat < numScoringRepeats; repeat++) {
    count=0;
    int ii1=0;
    int ii2=0;
    int i1=0;
    int i2=0;
    int hash1=0;
    int hash2=0;
    int pos1;
    int pos2;
    while (true) {
      if (i1 >= allKmerHashes[ii1].length) {
        ii1++;
        i1=0;
        if (ii1 >= allKmerHashes.length)         break;
      }
      if (i2 >= sAllKmerHashes[ii2].length) {
        ii2++;
        i2=0;
        if (ii2 >= sAllKmerHashes.length)         break;
      }
      hash1=allKmerHashes[ii1][i1][0];
      pos1=allKmerHashes[ii1][i1][1];
      hash2=sAllKmerHashes[ii2][i2][0];
      pos2=sAllKmerHashes[ii2][i2][1];
      if (hash1 < hash2 || pos1 < valid1Lower || pos1 >= valid1Upper)       i1++;
 else       if (hash2 < hash1 || pos2 < valid2Lower || pos2 >= valid2Upper)       i2++;
 else {
        int currShift=pos2 - pos1;
        if (Math.abs(currShift - medianShift) > absMaxShiftInOverlap) {
          i2++;
          continue;
        }
        if (posShift.length <= count) {
          posShift=Arrays.copyOf(posShift,posShift.length * 2);
          pos1Index=Arrays.copyOf(pos1Index,pos1Index.length * 2);
          pos2Index=Arrays.copyOf(pos2Index,pos2Index.length * 2);
        }
        posShift[count]=currShift;
        pos1Index[count]=pos1;
        pos2Index[count]=pos2;
        count++;
        i2++;
      }
    }
    if (count > 0) {
      if (repeat > 0) {
        int reducedCount=-1;
        for (int iter=0; iter < count; iter++) {
          if (reducedCount >= 0 && pos1Index[reducedCount] == pos1Index[iter]) {
            if (Math.abs(posShift[reducedCount] - medianShift) > Math.abs(posShift[iter] - medianShift)) {
              pos1Index[reducedCount]=pos1Index[iter];
              pos2Index[reducedCount]=pos2Index[iter];
              posShift[reducedCount]=posShift[iter];
            }
          }
 else {
            reducedCount++;
            pos1Index[reducedCount]=pos1Index[iter];
            pos2Index[reducedCount]=pos2Index[iter];
            posShift[reducedCount]=posShift[iter];
          }
        }
        count=reducedCount + 1;
      }
      medianShift=Utils.quickSelect(posShift,count / 2,count);
    }
 else     medianShift=0;
    int leftPosition=Math.max(0,medianShift);
    int rightPosition=Math.min(size2,size1 + medianShift);
    overlapSize=Math.max(50,rightPosition - leftPosition);
    absMaxShiftInOverlap=Math.min(Math.max(size1,size2),(int)((double)overlapSize * maxShiftPercent));
    valid1Lower=Math.max(0,-medianShift - absMaxShiftInOverlap);
    valid1Upper=Math.min(size1,size2 - medianShift + absMaxShiftInOverlap);
    valid2Lower=Math.max(0,medianShift - absMaxShiftInOverlap);
    valid2Upper=Math.min(size2,size1 + medianShift + absMaxShiftInOverlap);
  }
  int leftEdge1=Integer.MAX_VALUE;
  int leftEdge2=Integer.MAX_VALUE;
  int rightEdge1=Integer.MIN_VALUE;
  int rightEdge2=Integer.MIN_VALUE;
  int validCount=0;
  for (int iter=0; iter < count; iter++) {
    int pos1=pos1Index[iter];
    int pos2=pos2Index[iter];
    if (Math.abs(posShift[iter] - medianShift) > absMaxShiftInOverlap)     continue;
    if (pos1 < leftEdge1)     leftEdge1=pos1;
    if (pos2 < leftEdge2)     leftEdge2=pos2;
    if (pos1 > rightEdge1)     rightEdge1=pos1;
    if (pos2 > rightEdge2)     rightEdge2=pos2;
    validCount++;
  }
  int gap1=(int)Math.round((rightEdge1 - validCount) / (double)validCount);
  int gap2=(int)Math.round((rightEdge2 - validCount) / (double)validCount);
  int a1=Math.max(0,leftEdge1 - gap1);
  int a2=Math.max(0,leftEdge2 - gap2);
  int b1=Math.min(this.size() + 20,rightEdge1 + gap1);
  int b2=Math.min(s.size() + 20,rightEdge2 + gap2);
  int ahang=a1 - a2;
  int bhang=(this.size() - b1 > s.size() - b2) ? b1 - this.size() : s.size() - b2;
  double score=(double)validCount / (double)(overlapSize);
  return new OverlapInfo(score,ahang,bhang);
}","public OverlapInfo getFullScore(OrderKmerHashes s,double maxShiftPercent){
  int[][][] allKmerHashes=this.orderedHashes;
  int[][][] sAllKmerHashes=s.orderedHashes;
  int size1=this.size();
  int size2=s.size();
  int valid1Lower=0;
  int valid1Upper=size1;
  int valid2Lower=0;
  int valid2Upper=size2;
  int medianShift=0;
  int overlapSize=Math.min(size1,size2);
  int absMaxShiftInOverlap=Math.max(size1,size2);
  int count=0;
  int[] posShift=new int[Math.min(size1,size2) / 8 + 1];
  int[] pos1Index=new int[posShift.length];
  int[] pos2Index=new int[posShift.length];
  int numScoringRepeats=2;
  if (maxShiftPercent <= 0) {
    numScoringRepeats=1;
    maxShiftPercent=Math.abs(maxShiftPercent);
  }
  for (int repeat=0; repeat < numScoringRepeats; repeat++) {
    count=0;
    int ii1=0;
    int ii2=0;
    int i1=0;
    int i2=0;
    int hash1=0;
    int hash2=0;
    int pos1;
    int pos2;
    while (true) {
      if (i1 >= allKmerHashes[ii1].length) {
        ii1++;
        i1=0;
        if (ii1 >= allKmerHashes.length)         break;
      }
      if (i2 >= sAllKmerHashes[ii2].length) {
        ii2++;
        i2=0;
        if (ii2 >= sAllKmerHashes.length)         break;
      }
      hash1=allKmerHashes[ii1][i1][0];
      pos1=allKmerHashes[ii1][i1][1];
      hash2=sAllKmerHashes[ii2][i2][0];
      pos2=sAllKmerHashes[ii2][i2][1];
      if (hash1 < hash2 || pos1 < valid1Lower || pos1 >= valid1Upper)       i1++;
 else       if (hash2 < hash1 || pos2 < valid2Lower || pos2 >= valid2Upper)       i2++;
 else {
        int currShift=pos2 - pos1;
        if (Math.abs(currShift - medianShift) > absMaxShiftInOverlap) {
          i2++;
          continue;
        }
        if (posShift.length <= count) {
          posShift=Arrays.copyOf(posShift,posShift.length * 2);
          pos1Index=Arrays.copyOf(pos1Index,pos1Index.length * 2);
          pos2Index=Arrays.copyOf(pos2Index,pos2Index.length * 2);
        }
        posShift[count]=currShift;
        pos1Index[count]=pos1;
        pos2Index[count]=pos2;
        count++;
        i2++;
      }
    }
    if (count > 0) {
      if (repeat > 0) {
        int reducedCount=-1;
        for (int iter=0; iter < count; iter++) {
          if (reducedCount >= 0 && pos1Index[reducedCount] == pos1Index[iter]) {
            if (Math.abs(posShift[reducedCount] - medianShift) > Math.abs(posShift[iter] - medianShift)) {
              pos1Index[reducedCount]=pos1Index[iter];
              pos2Index[reducedCount]=pos2Index[iter];
              posShift[reducedCount]=posShift[iter];
            }
          }
 else {
            reducedCount++;
            pos1Index[reducedCount]=pos1Index[iter];
            pos2Index[reducedCount]=pos2Index[iter];
            posShift[reducedCount]=posShift[iter];
          }
        }
        count=reducedCount + 1;
      }
      medianShift=Utils.quickSelect(Arrays.copyOf(posShift,count),count / 2,count);
    }
 else     medianShift=0;
    int leftPosition=Math.max(0,medianShift);
    int rightPosition=Math.min(size2,size1 + medianShift);
    overlapSize=Math.max(50,rightPosition - leftPosition);
    absMaxShiftInOverlap=Math.min(Math.max(size1,size2),(int)((double)overlapSize * maxShiftPercent));
    valid1Lower=Math.max(0,-medianShift - absMaxShiftInOverlap);
    valid1Upper=Math.min(size1,size2 - medianShift + absMaxShiftInOverlap);
    valid2Lower=Math.max(0,medianShift - absMaxShiftInOverlap);
    valid2Upper=Math.min(size2,size1 + medianShift + absMaxShiftInOverlap);
  }
  int leftEdge1=Integer.MAX_VALUE;
  int leftEdge2=Integer.MAX_VALUE;
  int rightEdge1=Integer.MIN_VALUE;
  int rightEdge2=Integer.MIN_VALUE;
  int validCount=0;
  for (int iter=0; iter < count; iter++) {
    int pos1=pos1Index[iter];
    int pos2=pos2Index[iter];
    if (Math.abs(posShift[iter] - medianShift) > absMaxShiftInOverlap)     continue;
    if (pos1 < leftEdge1)     leftEdge1=pos1;
    if (pos2 < leftEdge2)     leftEdge2=pos2;
    if (pos1 > rightEdge1)     rightEdge1=pos1;
    if (pos2 > rightEdge2)     rightEdge2=pos2;
    validCount++;
  }
  double score=(double)validCount / (double)(overlapSize);
  int gap1=(int)Math.round((rightEdge1 - validCount) / (double)validCount);
  int gap2=(int)Math.round((rightEdge2 - validCount) / (double)validCount);
  int a1=Math.max(0,leftEdge1 - gap1);
  int a2=Math.max(0,leftEdge2 - gap2);
  int b1=Math.min(this.size() + 20,rightEdge1 + gap1);
  int b2=Math.min(s.size() + 20,rightEdge2 + gap2);
  int ahang=a1 - a2;
  int bhang=(this.size() - b1 > s.size() - b2) ? b1 - this.size() : s.size() - b2;
  return new OverlapInfo(score,ahang,bhang);
}",0.98313200565894
169249,"public OverlapInfo getFullScore(OrderKmerHashes s,double maxShiftPercent){
  int[][][] allKmerHashes=this.orderedHashes;
  int[][][] sAllKmerHashes=s.orderedHashes;
  int size1=this.size();
  int size2=s.size();
  int valid1Lower=0;
  int valid1Upper=size1;
  int valid2Lower=0;
  int valid2Upper=size2;
  int medianShift=0;
  int overlapSize=Math.min(size1,size2);
  int absMaxShiftInOverlap=Math.max(size1,size2);
  int count=0;
  int[] posShift=new int[Math.min(size1,size2) / 8 + 1];
  int[] pos1Index=new int[posShift.length];
  int[] pos2Index=new int[posShift.length];
  int numScoringRepeats=2;
  if (maxShiftPercent <= 0) {
    numScoringRepeats=1;
    maxShiftPercent=Math.abs(maxShiftPercent);
  }
  for (int repeat=0; repeat < numScoringRepeats; repeat++) {
    count=0;
    int ii1=0;
    int ii2=0;
    int i1=0;
    int i2=0;
    int hash1=0;
    int hash2=0;
    int pos1;
    int pos2;
    while (true) {
      if (i1 >= allKmerHashes[ii1].length) {
        ii1++;
        i1=0;
        if (ii1 >= allKmerHashes.length)         break;
      }
      if (i2 >= sAllKmerHashes[ii2].length) {
        ii2++;
        i2=0;
        if (ii2 >= sAllKmerHashes.length)         break;
      }
      hash1=allKmerHashes[ii1][i1][0];
      pos1=allKmerHashes[ii1][i1][1];
      hash2=sAllKmerHashes[ii2][i2][0];
      pos2=sAllKmerHashes[ii2][i2][1];
      if (hash1 < hash2 || pos1 < valid1Lower || pos1 >= valid1Upper)       i1++;
 else       if (hash2 < hash1 || pos2 < valid2Lower || pos2 >= valid2Upper)       i2++;
 else {
        int currShift=pos2 - pos1;
        if (Math.abs(currShift - medianShift) > absMaxShiftInOverlap) {
          i2++;
          continue;
        }
        if (posShift.length <= count) {
          posShift=Arrays.copyOf(posShift,posShift.length * 2);
          pos1Index=Arrays.copyOf(pos1Index,pos1Index.length * 2);
          pos2Index=Arrays.copyOf(pos2Index,pos2Index.length * 2);
        }
        posShift[count]=currShift;
        pos1Index[count]=pos1;
        pos2Index[count]=pos2;
        count++;
        i2++;
      }
    }
    if (count > 0) {
      if (repeat > 0) {
        int reducedCount=-1;
        for (int iter=0; iter < count; iter++) {
          if (reducedCount >= 0 && pos1Index[reducedCount] == pos1Index[iter]) {
            if (Math.abs(posShift[reducedCount] - medianShift) > Math.abs(posShift[iter] - medianShift)) {
              pos1Index[reducedCount]=pos1Index[iter];
              pos2Index[reducedCount]=pos2Index[iter];
              posShift[reducedCount]=posShift[iter];
            }
          }
 else {
            reducedCount++;
            pos1Index[reducedCount]=pos1Index[iter];
            pos2Index[reducedCount]=pos2Index[iter];
            posShift[reducedCount]=posShift[iter];
          }
        }
        count=reducedCount + 1;
      }
      medianShift=Utils.quickSelect(posShift,count / 2,count);
    }
 else     medianShift=0;
    int leftPosition=Math.max(0,medianShift);
    int rightPosition=Math.min(size2,size1 + medianShift);
    overlapSize=Math.max(50,rightPosition - leftPosition);
    absMaxShiftInOverlap=Math.min(Math.max(size1,size2),(int)((double)overlapSize * maxShiftPercent));
    valid1Lower=Math.max(0,-medianShift - absMaxShiftInOverlap);
    valid1Upper=Math.min(size1,size2 - medianShift + absMaxShiftInOverlap);
    valid2Lower=Math.max(0,medianShift - absMaxShiftInOverlap);
    valid2Upper=Math.min(size2,size1 + medianShift + absMaxShiftInOverlap);
  }
  int leftEdge1=Integer.MAX_VALUE;
  int leftEdge2=Integer.MAX_VALUE;
  int rightEdge1=Integer.MIN_VALUE;
  int rightEdge2=Integer.MIN_VALUE;
  int validCount=0;
  for (int iter=0; iter < count; iter++) {
    int pos1=pos1Index[iter];
    int pos2=pos2Index[iter];
    if (Math.abs(posShift[iter] - medianShift) > absMaxShiftInOverlap)     continue;
    if (pos1 < leftEdge1)     leftEdge1=pos1;
    if (pos2 < leftEdge2)     leftEdge2=pos2;
    if (pos1 > rightEdge1)     rightEdge1=pos1;
    if (pos2 > rightEdge2)     rightEdge2=pos2;
    validCount++;
  }
  int gap1=(int)Math.round((rightEdge1 - validCount) / (double)validCount);
  int gap2=(int)Math.round((rightEdge2 - validCount) / (double)validCount);
  int a1=Math.max(0,leftEdge1 - gap1);
  int a2=Math.max(0,leftEdge2 - gap2);
  int b1=Math.min(this.size() + 20,rightEdge1 + gap1);
  int b2=Math.min(s.size() + 20,rightEdge2 + gap2);
  int ahang=a1 - a2;
  int bhang=(this.size() - b1 > s.size() - b2) ? b1 - this.size() : s.size() - b2;
  double score=(double)validCount / (double)(overlapSize);
  return new OverlapInfo(score,ahang,bhang);
}","public OverlapInfo getFullScore(OrderKmerHashes s,double maxShiftPercent){
  int[][][] allKmerHashes=this.orderedHashes;
  int[][][] sAllKmerHashes=s.orderedHashes;
  int size1=this.size();
  int size2=s.size();
  int valid1Lower=0;
  int valid1Upper=size1;
  int valid2Lower=0;
  int valid2Upper=size2;
  int medianShift=0;
  int overlapSize=Math.min(size1,size2);
  int absMaxShiftInOverlap=Math.max(size1,size2);
  int count=0;
  int[] posShift=new int[Math.min(size1,size2) / 8 + 1];
  int[] pos1Index=new int[posShift.length];
  int[] pos2Index=new int[posShift.length];
  int numScoringRepeats=2;
  if (maxShiftPercent <= 0) {
    numScoringRepeats=1;
    maxShiftPercent=Math.abs(maxShiftPercent);
  }
  for (int repeat=0; repeat < numScoringRepeats; repeat++) {
    count=0;
    int ii1=0;
    int ii2=0;
    int i1=0;
    int i2=0;
    int hash1=0;
    int hash2=0;
    int pos1;
    int pos2;
    while (true) {
      if (i1 >= allKmerHashes[ii1].length) {
        ii1++;
        i1=0;
        if (ii1 >= allKmerHashes.length)         break;
      }
      if (i2 >= sAllKmerHashes[ii2].length) {
        ii2++;
        i2=0;
        if (ii2 >= sAllKmerHashes.length)         break;
      }
      hash1=allKmerHashes[ii1][i1][0];
      pos1=allKmerHashes[ii1][i1][1];
      hash2=sAllKmerHashes[ii2][i2][0];
      pos2=sAllKmerHashes[ii2][i2][1];
      if (hash1 < hash2 || pos1 < valid1Lower || pos1 >= valid1Upper)       i1++;
 else       if (hash2 < hash1 || pos2 < valid2Lower || pos2 >= valid2Upper)       i2++;
 else {
        int currShift=pos2 - pos1;
        if (Math.abs(currShift - medianShift) > absMaxShiftInOverlap) {
          i2++;
          continue;
        }
        if (posShift.length <= count) {
          posShift=Arrays.copyOf(posShift,posShift.length * 2);
          pos1Index=Arrays.copyOf(pos1Index,pos1Index.length * 2);
          pos2Index=Arrays.copyOf(pos2Index,pos2Index.length * 2);
        }
        posShift[count]=currShift;
        pos1Index[count]=pos1;
        pos2Index[count]=pos2;
        count++;
        i2++;
      }
    }
    if (count > 0) {
      if (repeat > 0) {
        int reducedCount=-1;
        for (int iter=0; iter < count; iter++) {
          if (reducedCount >= 0 && pos1Index[reducedCount] == pos1Index[iter]) {
            if (Math.abs(posShift[reducedCount] - medianShift) > Math.abs(posShift[iter] - medianShift)) {
              pos1Index[reducedCount]=pos1Index[iter];
              pos2Index[reducedCount]=pos2Index[iter];
              posShift[reducedCount]=posShift[iter];
            }
          }
 else {
            reducedCount++;
            pos1Index[reducedCount]=pos1Index[iter];
            pos2Index[reducedCount]=pos2Index[iter];
            posShift[reducedCount]=posShift[iter];
          }
        }
        count=reducedCount + 1;
      }
      medianShift=Utils.quickSelect(Arrays.copyOf(posShift,count),count / 2,count);
    }
 else     medianShift=0;
    int leftPosition=Math.max(0,medianShift);
    int rightPosition=Math.min(size2,size1 + medianShift);
    overlapSize=Math.max(50,rightPosition - leftPosition);
    absMaxShiftInOverlap=Math.min(Math.max(size1,size2),(int)((double)overlapSize * maxShiftPercent));
    valid1Lower=Math.max(0,-medianShift - absMaxShiftInOverlap);
    valid1Upper=Math.min(size1,size2 - medianShift + absMaxShiftInOverlap);
    valid2Lower=Math.max(0,medianShift - absMaxShiftInOverlap);
    valid2Upper=Math.min(size2,size1 + medianShift + absMaxShiftInOverlap);
  }
  int leftEdge1=Integer.MAX_VALUE;
  int leftEdge2=Integer.MAX_VALUE;
  int rightEdge1=Integer.MIN_VALUE;
  int rightEdge2=Integer.MIN_VALUE;
  int validCount=0;
  for (int iter=0; iter < count; iter++) {
    int pos1=pos1Index[iter];
    int pos2=pos2Index[iter];
    if (Math.abs(posShift[iter] - medianShift) > absMaxShiftInOverlap)     continue;
    if (pos1 < leftEdge1)     leftEdge1=pos1;
    if (pos2 < leftEdge2)     leftEdge2=pos2;
    if (pos1 > rightEdge1)     rightEdge1=pos1;
    if (pos2 > rightEdge2)     rightEdge2=pos2;
    validCount++;
  }
  double score=(double)validCount / (double)(overlapSize);
  int gap1=(int)Math.round((rightEdge1 - validCount) / (double)validCount);
  int gap2=(int)Math.round((rightEdge2 - validCount) / (double)validCount);
  int a1=Math.max(0,leftEdge1 - gap1);
  int a2=Math.max(0,leftEdge2 - gap2);
  int b1=Math.min(this.size() + 20,rightEdge1 + gap1);
  int b2=Math.min(s.size() + 20,rightEdge2 + gap2);
  int ahang=a1 - a2;
  int bhang=(this.size() - b1 > s.size() - b2) ? b1 - this.size() : s.size() - b2;
  return new OverlapInfo(score,ahang,bhang);
}",0.98313200565894
169250,"private boolean computeDP(String id,String id2){
  if (this.doDP == false) {
    return false;
  }
  Logger logger=Logger.getLogger(SmithWatermanGotoh.class.getName());
  logger.setLevel(Level.OFF);
  logger=Logger.getLogger(MatrixLoader.class.getName());
  logger.setLevel(Level.OFF);
  Overlap ovl=this.ovlInfo.get(getOvlName(id,id2));
  jaligner.Sequence s1=new jaligner.Sequence(this.dataSeq[Integer.parseInt(ovl.id1) - 1].toString().substring(ovl.afirst,ovl.asecond));
  jaligner.Sequence s2=null;
  if (ovl.isFwd) {
    s2=new jaligner.Sequence(this.dataSeq[Integer.parseInt(ovl.id2) - 1].toString().substring(ovl.bfirst,ovl.bsecond));
  }
 else {
    s2=new jaligner.Sequence(this.dataSeq[Integer.parseInt(ovl.id2) - 1].getReverseCompliment().toString().substring(ovl.bfirst,ovl.bsecond));
  }
  Alignment alignment;
  try {
    alignment=SmithWatermanGotoh.align(s1,s2,MatrixLoader.load(""String_Node_Str""),2f,1f);
  }
 catch (  MatrixLoaderException e) {
    return false;
  }
  return (AlignmentHashRun.getScoreWithNoTerminalGaps(alignment) > MIN_IDENTITY);
}","private boolean computeDP(String id,String id2){
  if (this.doDP == false) {
    return false;
  }
  Logger logger=Logger.getLogger(SmithWatermanGotoh.class.getName());
  logger.setLevel(Level.OFF);
  logger=Logger.getLogger(MatrixLoader.class.getName());
  logger.setLevel(Level.OFF);
  Overlap ovl=this.ovlInfo.get(getOvlName(id,id2));
  jaligner.Sequence s1=new jaligner.Sequence(this.dataSeq[Integer.parseInt(ovl.id1) - 1].getString().substring(ovl.afirst,ovl.asecond));
  jaligner.Sequence s2=null;
  if (ovl.isFwd) {
    s2=new jaligner.Sequence(this.dataSeq[Integer.parseInt(ovl.id2) - 1].getString().substring(ovl.bfirst,ovl.bsecond));
  }
 else {
    s2=new jaligner.Sequence(this.dataSeq[Integer.parseInt(ovl.id2) - 1].getReverseCompliment().getString().substring(ovl.bfirst,ovl.bsecond));
  }
  Alignment alignment;
  try {
    alignment=SmithWatermanGotoh.align(s1,s2,MatrixLoader.load(""String_Node_Str""),2f,1f);
  }
 catch (  MatrixLoaderException e) {
    return false;
  }
  return (AlignmentHashRun.getScoreWithNoTerminalGaps(alignment) > MIN_IDENTITY);
}",0.9929873772791024
169251,"@SuppressWarnings(""String_Node_Str"") private Overlap getOverlapInfo(String line){
  Overlap overlap=new Overlap();
  String[] splitLine=line.trim().split(""String_Node_Str"");
  try {
    if (splitLine.length == 7 || splitLine.length == 6) {
      overlap.id1=splitLine[0];
      overlap.id2=splitLine[1];
      double score=Double.parseDouble(splitLine[5]) * 5;
      int aoffset=Integer.parseInt(splitLine[3]);
      int boffset=Integer.parseInt(splitLine[4]);
      boolean isFwd=(""String_Node_Str"".equals(splitLine[2]));
      if (this.dataSeq != null) {
        int alen=this.dataSeq[Integer.parseInt(overlap.id1) - 1].length();
        int blen=this.dataSeq[Integer.parseInt(overlap.id2) - 1].length();
        overlap.afirst=Math.max(0,aoffset);
        overlap.asecond=Math.min(alen,alen + boffset);
        overlap.bfirst=-1 * Math.min(0,aoffset);
        overlap.bsecond=Math.min(blen,blen - boffset);
      }
    }
 else     if (splitLine.length == 13) {
      overlap.afirst=Integer.parseInt(splitLine[5]);
      overlap.asecond=Integer.parseInt(splitLine[6]);
      overlap.bfirst=Integer.parseInt(splitLine[9]);
      overlap.bsecond=Integer.parseInt(splitLine[10]);
      overlap.isFwd=(Integer.parseInt(splitLine[8]) == 0);
      if (!overlap.isFwd) {
        overlap.bsecond=Integer.parseInt(splitLine[11]) - Integer.parseInt(splitLine[9]);
        overlap.bfirst=Integer.parseInt(splitLine[11]) - Integer.parseInt(splitLine[10]);
      }
      overlap.id1=splitLine[0];
      if (overlap.id1.indexOf(""String_Node_Str"") != -1) {
        overlap.id1=overlap.id1.substring(0,splitLine[0].indexOf(""String_Node_Str""));
      }
      if (overlap.id1.indexOf(""String_Node_Str"") != -1) {
        overlap.id1=overlap.id1.split(""String_Node_Str"")[1];
      }
      overlap.id2=splitLine[1];
      if (overlap.id2.indexOf(""String_Node_Str"") != -1) {
        overlap.id2=overlap.id2.split(""String_Node_Str"")[1];
      }
    }
  }
 catch (  NumberFormatException e) {
    System.err.println(""String_Node_Str"" + line + ""String_Node_Str""+ e.getMessage());
  }
  return overlap;
}","private Overlap getOverlapInfo(String line){
  Overlap overlap=new Overlap();
  String[] splitLine=line.trim().split(""String_Node_Str"");
  try {
    if (splitLine.length == 7 || splitLine.length == 6) {
      overlap.id1=splitLine[0];
      overlap.id2=splitLine[1];
      @SuppressWarnings(""String_Node_Str"") double score=Double.parseDouble(splitLine[5]) * 5;
      int aoffset=Integer.parseInt(splitLine[3]);
      int boffset=Integer.parseInt(splitLine[4]);
      overlap.isFwd=""String_Node_Str"".equalsIgnoreCase(splitLine[2]);
      if (this.dataSeq != null) {
        int alen=this.dataSeq[Integer.parseInt(overlap.id1) - 1].length();
        int blen=this.dataSeq[Integer.parseInt(overlap.id2) - 1].length();
        overlap.afirst=Math.max(0,aoffset);
        overlap.asecond=Math.min(alen,alen + boffset);
        overlap.bfirst=-1 * Math.min(0,aoffset);
        overlap.bsecond=Math.min(blen,blen - boffset);
      }
    }
 else     if (splitLine.length == 13) {
      overlap.afirst=Integer.parseInt(splitLine[5]);
      overlap.asecond=Integer.parseInt(splitLine[6]);
      overlap.bfirst=Integer.parseInt(splitLine[9]);
      overlap.bsecond=Integer.parseInt(splitLine[10]);
      overlap.isFwd=(Integer.parseInt(splitLine[8]) == 0);
      if (!overlap.isFwd) {
        overlap.bsecond=Integer.parseInt(splitLine[11]) - Integer.parseInt(splitLine[9]);
        overlap.bfirst=Integer.parseInt(splitLine[11]) - Integer.parseInt(splitLine[10]);
      }
      overlap.id1=splitLine[0];
      if (overlap.id1.indexOf(""String_Node_Str"") != -1) {
        overlap.id1=overlap.id1.substring(0,splitLine[0].indexOf(""String_Node_Str""));
      }
      if (overlap.id1.indexOf(""String_Node_Str"") != -1) {
        overlap.id1=overlap.id1.split(""String_Node_Str"")[1];
      }
      overlap.id2=splitLine[1];
      if (overlap.id2.indexOf(""String_Node_Str"") != -1) {
        overlap.id2=overlap.id2.split(""String_Node_Str"")[1];
      }
    }
  }
 catch (  NumberFormatException e) {
    System.err.println(""String_Node_Str"" + line + ""String_Node_Str""+ e.getMessage());
  }
  return overlap;
}",0.97552783109405
169252,"@Override public String toString(){
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.id1);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.afirst);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.asecond);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.id2);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.bfirst);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.bsecond);
  return stringBuilder.toString();
}","@Override public String toString(){
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"" + this.isFwd);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.id1);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.afirst);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.asecond);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.id2);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.bfirst);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.bsecond);
  stringBuilder.append(""String_Node_Str"");
  return stringBuilder.toString();
}",0.9236700077101002
169253,"private boolean computeDP(String id,String id2){
  if (this.doDP == false) {
    return false;
  }
  Logger logger=Logger.getLogger(SmithWatermanGotoh.class.getName());
  logger.setLevel(Level.OFF);
  logger=Logger.getLogger(MatrixLoader.class.getName());
  logger.setLevel(Level.OFF);
  Overlap ovl=this.ovlInfo.get(getOvlName(id,id2));
  jaligner.Sequence s1=new jaligner.Sequence(this.dataSeq[Integer.parseInt(ovl.id1) - 1].toString().substring(ovl.afirst,ovl.asecond));
  jaligner.Sequence s2=null;
  if (ovl.isFwd) {
    s2=new jaligner.Sequence(this.dataSeq[Integer.parseInt(ovl.id2) - 1].toString().substring(ovl.bfirst,ovl.bsecond));
  }
 else {
    s2=new jaligner.Sequence(this.dataSeq[Integer.parseInt(ovl.id2) - 1].getReverseCompliment().toString().substring(ovl.bfirst,ovl.bsecond));
  }
  Alignment alignment;
  try {
    alignment=SmithWatermanGotoh.align(s1,s2,MatrixLoader.load(""String_Node_Str""),2f,1f);
  }
 catch (  MatrixLoaderException e) {
    return false;
  }
  return (AlignmentHashRun.getScoreWithNoTerminalGaps(alignment) > MIN_IDENTITY);
}","private boolean computeDP(String id,String id2){
  if (this.doDP == false) {
    return false;
  }
  Logger logger=Logger.getLogger(SmithWatermanGotoh.class.getName());
  logger.setLevel(Level.OFF);
  logger=Logger.getLogger(MatrixLoader.class.getName());
  logger.setLevel(Level.OFF);
  Overlap ovl=this.ovlInfo.get(getOvlName(id,id2));
  jaligner.Sequence s1=new jaligner.Sequence(this.dataSeq[Integer.parseInt(ovl.id1) - 1].getString().substring(ovl.afirst,ovl.asecond));
  jaligner.Sequence s2=null;
  if (ovl.isFwd) {
    s2=new jaligner.Sequence(this.dataSeq[Integer.parseInt(ovl.id2) - 1].getString().substring(ovl.bfirst,ovl.bsecond));
  }
 else {
    s2=new jaligner.Sequence(this.dataSeq[Integer.parseInt(ovl.id2) - 1].getReverseCompliment().getString().substring(ovl.bfirst,ovl.bsecond));
  }
  Alignment alignment;
  try {
    alignment=SmithWatermanGotoh.align(s1,s2,MatrixLoader.load(""String_Node_Str""),2f,1f);
  }
 catch (  MatrixLoaderException e) {
    return false;
  }
  return (AlignmentHashRun.getScoreWithNoTerminalGaps(alignment) > MIN_IDENTITY);
}",0.9929873772791024
169254,"@SuppressWarnings(""String_Node_Str"") private Overlap getOverlapInfo(String line){
  Overlap overlap=new Overlap();
  String[] splitLine=line.trim().split(""String_Node_Str"");
  try {
    if (splitLine.length == 7 || splitLine.length == 6) {
      overlap.id1=splitLine[0];
      overlap.id2=splitLine[1];
      double score=Double.parseDouble(splitLine[5]) * 5;
      int aoffset=Integer.parseInt(splitLine[3]);
      int boffset=Integer.parseInt(splitLine[4]);
      boolean isFwd=(""String_Node_Str"".equals(splitLine[2]));
      if (this.dataSeq != null) {
        int alen=this.dataSeq[Integer.parseInt(overlap.id1) - 1].length();
        int blen=this.dataSeq[Integer.parseInt(overlap.id2) - 1].length();
        overlap.afirst=Math.max(0,aoffset);
        overlap.asecond=Math.min(alen,alen + boffset);
        overlap.bfirst=-1 * Math.min(0,aoffset);
        overlap.bsecond=Math.min(blen,blen - boffset);
      }
    }
 else     if (splitLine.length == 13) {
      overlap.afirst=Integer.parseInt(splitLine[5]);
      overlap.asecond=Integer.parseInt(splitLine[6]);
      overlap.bfirst=Integer.parseInt(splitLine[9]);
      overlap.bsecond=Integer.parseInt(splitLine[10]);
      overlap.isFwd=(Integer.parseInt(splitLine[8]) == 0);
      if (!overlap.isFwd) {
        overlap.bsecond=Integer.parseInt(splitLine[11]) - Integer.parseInt(splitLine[9]);
        overlap.bfirst=Integer.parseInt(splitLine[11]) - Integer.parseInt(splitLine[10]);
      }
      overlap.id1=splitLine[0];
      if (overlap.id1.indexOf(""String_Node_Str"") != -1) {
        overlap.id1=overlap.id1.substring(0,splitLine[0].indexOf(""String_Node_Str""));
      }
      if (overlap.id1.indexOf(""String_Node_Str"") != -1) {
        overlap.id1=overlap.id1.split(""String_Node_Str"")[1];
      }
      overlap.id2=splitLine[1];
      if (overlap.id2.indexOf(""String_Node_Str"") != -1) {
        overlap.id2=overlap.id2.split(""String_Node_Str"")[1];
      }
    }
  }
 catch (  NumberFormatException e) {
    System.err.println(""String_Node_Str"" + line + ""String_Node_Str""+ e.getMessage());
  }
  return overlap;
}","private Overlap getOverlapInfo(String line){
  Overlap overlap=new Overlap();
  String[] splitLine=line.trim().split(""String_Node_Str"");
  try {
    if (splitLine.length == 7 || splitLine.length == 6) {
      overlap.id1=splitLine[0];
      overlap.id2=splitLine[1];
      @SuppressWarnings(""String_Node_Str"") double score=Double.parseDouble(splitLine[5]) * 5;
      int aoffset=Integer.parseInt(splitLine[3]);
      int boffset=Integer.parseInt(splitLine[4]);
      overlap.isFwd=""String_Node_Str"".equalsIgnoreCase(splitLine[2]);
      if (this.dataSeq != null) {
        int alen=this.dataSeq[Integer.parseInt(overlap.id1) - 1].length();
        int blen=this.dataSeq[Integer.parseInt(overlap.id2) - 1].length();
        overlap.afirst=Math.max(0,aoffset);
        overlap.asecond=Math.min(alen,alen + boffset);
        overlap.bfirst=-1 * Math.min(0,aoffset);
        overlap.bsecond=Math.min(blen,blen - boffset);
      }
    }
 else     if (splitLine.length == 13) {
      overlap.afirst=Integer.parseInt(splitLine[5]);
      overlap.asecond=Integer.parseInt(splitLine[6]);
      overlap.bfirst=Integer.parseInt(splitLine[9]);
      overlap.bsecond=Integer.parseInt(splitLine[10]);
      overlap.isFwd=(Integer.parseInt(splitLine[8]) == 0);
      if (!overlap.isFwd) {
        overlap.bsecond=Integer.parseInt(splitLine[11]) - Integer.parseInt(splitLine[9]);
        overlap.bfirst=Integer.parseInt(splitLine[11]) - Integer.parseInt(splitLine[10]);
      }
      overlap.id1=splitLine[0];
      if (overlap.id1.indexOf(""String_Node_Str"") != -1) {
        overlap.id1=overlap.id1.substring(0,splitLine[0].indexOf(""String_Node_Str""));
      }
      if (overlap.id1.indexOf(""String_Node_Str"") != -1) {
        overlap.id1=overlap.id1.split(""String_Node_Str"")[1];
      }
      overlap.id2=splitLine[1];
      if (overlap.id2.indexOf(""String_Node_Str"") != -1) {
        overlap.id2=overlap.id2.split(""String_Node_Str"")[1];
      }
    }
  }
 catch (  NumberFormatException e) {
    System.err.println(""String_Node_Str"" + line + ""String_Node_Str""+ e.getMessage());
  }
  return overlap;
}",0.97552783109405
169255,"@Override public String toString(){
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.id1);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.afirst);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.asecond);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.id2);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.bfirst);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.bsecond);
  return stringBuilder.toString();
}","@Override public String toString(){
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"" + this.isFwd);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.id1);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.afirst);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.asecond);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.id2);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.bfirst);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(this.bsecond);
  stringBuilder.append(""String_Node_Str"");
  return stringBuilder.toString();
}",0.9236700077101002
169256,"public static SequenceMinHashes fromByteStream(DataInputStream input,int offset) throws IOException {
  try {
    input.SequenceId id=new SequenceId(input.readInt() + offset,input.readBoolean());
    MinHash mainHashes=MinHash.fromByteStream(input);
    if (mainHashes == null)     throw new FastAlignRuntimeException(""String_Node_Str"");
    int hashLength=input.readInt();
    int[][] completeHash=new int[hashLength][];
    for (int iter=0; iter < hashLength; iter++) {
      completeHash[iter]=new int[2];
      completeHash[iter][0]=input.readInt();
      completeHash[iter][1]=input.readInt();
    }
    return new SequenceMinHashes(id,mainHashes,null);
  }
 catch (  EOFException e) {
    return null;
  }
}","public static SequenceMinHashes fromByteStream(DataInputStream input,int offset) throws IOException {
  try {
    SequenceId id=new SequenceId(input.readInt() + offset,input.readBoolean());
    MinHash mainHashes=MinHash.fromByteStream(input);
    if (mainHashes == null)     throw new FastAlignRuntimeException(""String_Node_Str"");
    int hashLength=input.readInt();
    int[][] completeHash=new int[hashLength][];
    for (int iter=0; iter < hashLength; iter++) {
      completeHash[iter]=new int[2];
      completeHash[iter][0]=input.readInt();
      completeHash[iter][1]=input.readInt();
    }
    return new SequenceMinHashes(id,mainHashes,null);
  }
 catch (  EOFException e) {
    return null;
  }
}",0.995774647887324
169257,"public static SequenceMinHashes fromByteStream(DataInputStream input,int offset) throws IOException {
  try {
    input.SequenceId id=new SequenceId(input.readInt() + offset,input.readBoolean());
    MinHash mainHashes=MinHash.fromByteStream(input);
    if (mainHashes == null)     throw new FastAlignRuntimeException(""String_Node_Str"");
    int hashLength=input.readInt();
    int[][] completeHash=new int[hashLength][];
    for (int iter=0; iter < hashLength; iter++) {
      completeHash[iter]=new int[2];
      completeHash[iter][0]=input.readInt();
      completeHash[iter][1]=input.readInt();
    }
    return new SequenceMinHashes(id,mainHashes,null);
  }
 catch (  EOFException e) {
    return null;
  }
}","public static SequenceMinHashes fromByteStream(DataInputStream input,int offset) throws IOException {
  try {
    SequenceId id=new SequenceId(input.readInt() + offset,input.readBoolean());
    MinHash mainHashes=MinHash.fromByteStream(input);
    if (mainHashes == null)     throw new FastAlignRuntimeException(""String_Node_Str"");
    int hashLength=input.readInt();
    int[][] completeHash=new int[hashLength][];
    for (int iter=0; iter < hashLength; iter++) {
      completeHash[iter]=new int[2];
      completeHash[iter][0]=input.readInt();
      completeHash[iter][1]=input.readInt();
    }
    return new SequenceMinHashes(id,mainHashes,null);
  }
 catch (  EOFException e) {
    return null;
  }
}",0.995774647887324
169258,"public void process() throws NumberFormatException, IOException {
  double variance=0;
  double sum=0;
  int total=0;
  for (  int val : histogram.keySet()) {
    int count=histogram.get(val);
    for (int i=0; i < count; i++) {
      total++;
      double delta=(val - mean);
      mean+=(delta / total);
      variance+=delta * (val - mean);
      sum+=val;
    }
  }
  variance/=total;
  stdev=Math.sqrt(variance);
  double runningSum=0;
  for (  int val : histogram.keySet()) {
    int count=histogram.get(val);
    runningSum+=(double)val * count;
    if ((runningSum / sum) > percent) {
      cut=val;
      break;
    }
  }
}","public void process() throws NumberFormatException, IOException {
  double variance=0;
  double sum=0;
  int total=0;
  for (  int val : this.histogram.keySet()) {
    int count=this.histogram.get(val);
    for (int i=0; i < count; i++) {
      total++;
      double delta=(val - this.mean);
      this.mean+=(delta / total);
      variance+=delta * (val - this.mean);
      sum+=val;
    }
  }
  variance/=total;
  this.stdev=Math.sqrt(variance);
  double runningSum=0;
  for (  int val : this.histogram.keySet()) {
    int count=this.histogram.get(val);
    runningSum+=(double)val * count;
    if ((runningSum / sum) > this.percent) {
      this.cut=val;
      break;
    }
  }
}",0.9421613394216134
169259,"@Override public String toString(){
  return nf.format(mean) + ""String_Node_Str"" + nf.format(stdev)+ ""String_Node_Str""+ ""String_Node_Str""+ cut+ ""String_Node_Str""+ nf.format(mean + NUM_SD * stdev);
}","@Override public String toString(){
  return nf.format(this.mean) + ""String_Node_Str"" + nf.format(this.stdev)+ ""String_Node_Str""+ ""String_Node_Str""+ this.cut+ ""String_Node_Str""+ nf.format(this.mean + NUM_SD * this.stdev);
}",0.7600950118764845
169260,"public GetHistogramStats(String fileName,double p){
  try {
    BufferedReader bf=Utils.getFile(fileName,""String_Node_Str"");
    String line=null;
    while ((line=bf.readLine()) != null) {
      String[] split=line.trim().split(""String_Node_Str"");
      int val=Integer.parseInt(split[0]);
      int count=Integer.parseInt(split[1]);
      histogram.put(val,count);
    }
    bf.close();
    percent=p;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public GetHistogramStats(String fileName,double p){
  try {
    BufferedReader bf=Utils.getFile(fileName,""String_Node_Str"");
    String line=null;
    while ((line=bf.readLine()) != null) {
      String[] split=line.trim().split(""String_Node_Str"");
      int val=Integer.parseInt(split[0]);
      int count=Integer.parseInt(split[1]);
      this.histogram.put(val,count);
    }
    bf.close();
    this.percent=p;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9893162393162394
169261,"public double compareKmers(String first,String second){
  HashSet<String> firstSeqs=new HashSet<String>();
  HashSet<String> totalSeqs=new HashSet<String>();
  HashSet<String> shared=new HashSet<String>();
  for (int i=0; i <= first.length() - this.kmer; i++) {
    String fmer=first.substring(i,i + this.kmer);
    if (!skipMers.containsKey(fmer)) {
      firstSeqs.add(fmer);
    }
    totalSeqs.add(fmer);
  }
  for (int i=0; i <= second.length() - this.kmer; i++) {
    String smer=second.substring(i,i + this.kmer);
    if (firstSeqs.contains(smer)) {
      shared.add(smer);
    }
 else {
      totalSeqs.add(smer);
    }
  }
  this.sharedCount=shared.size();
  return shared.size() / (double)totalSeqs.size();
}","public double compareKmers(String first,String second){
  HashSet<String> firstSeqs=new HashSet<String>();
  HashSet<String> totalSeqs=new HashSet<String>();
  HashSet<String> shared=new HashSet<String>();
  for (int i=0; i <= first.length() - this.kmer; i++) {
    String fmer=first.substring(i,i + this.kmer);
    if (!this.skipMers.containsKey(fmer)) {
      firstSeqs.add(fmer);
    }
    totalSeqs.add(fmer);
  }
  for (int i=0; i <= second.length() - this.kmer; i++) {
    String smer=second.substring(i,i + this.kmer);
    if (firstSeqs.contains(smer)) {
      shared.add(smer);
    }
 else {
      totalSeqs.add(smer);
    }
  }
  this.sharedCount=shared.size();
  return shared.size() / (double)totalSeqs.size();
}",0.996530187369882
169262,"private void loadSkipMers(String file) throws Exception {
  BufferedReader bf=Utils.getFile(file,""String_Node_Str"");
  String line=null;
  while ((line=bf.readLine()) != null) {
    String[] split=line.trim().split(""String_Node_Str"");
    String mer=split[0].trim();
    int count=Integer.parseInt(split[1]);
    skipMers.put(mer,count);
  }
  bf.close();
}","private void loadSkipMers(String file) throws Exception {
  BufferedReader bf=Utils.getFile(file,""String_Node_Str"");
  String line=null;
  while ((line=bf.readLine()) != null) {
    String[] split=line.trim().split(""String_Node_Str"");
    String mer=split[0].trim();
    int count=Integer.parseInt(split[1]);
    this.skipMers.put(mer,count);
  }
  bf.close();
}",0.9930458970792768
169263,"public void simulate(double insertionRate,double delRate,double subRate) throws Exception {
  double errorRate=insertionRate + delRate + subRate;
  double insertionPercentage=insertionRate / errorRate;
  double deletionPercentage=delRate / errorRate;
  double subPercentage=subRate / errorRate;
  if (errorRate < 0 || errorRate > 1) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  System.err.println(""String_Node_Str"");
  FastaData data=null;
  String[] sequences=null;
  if (this.reference != null) {
    data=new FastaData(this.reference);
    data.enqueueFullFile();
    Sequence[] dataSeq=data.toArray();
    sequences=new String[dataSeq.length];
    for (int i=0; i < dataSeq.length; i++) {
      sequences[i]=dataSeq[i].getString().toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  System.err.println(""String_Node_Str"");
  for (int i=0; i < this.totalTrials; i++) {
    if (i % 1000 == 0) {
      System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ this.totalTrials);
    }
    int sequenceLength=(int)this.requestedLength;
    int firstPos=0;
    String sequence=null;
    int seqID=0;
    if (this.reference != null) {
      sequence=null;
      while (sequence == null || sequence.length() < 4 * sequenceLength) {
        seqID=generator.nextInt(sequences.length);
        sequence=sequences[seqID];
      }
      firstPos=generator.nextInt(sequence.length());
    }
 else {
      sequence=buildRandomSequence(sequenceLength * 4);
    }
    StringBuilder firstAdj=new StringBuilder();
    StringBuilder errors=new StringBuilder();
    String firstSeq=getSequence(sequenceLength,firstPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,false);
    int offset=(int)((requestedLength * 2) - this.overlap);
    int secondPos=(firstPos + offset) % sequence.length();
    String secondSeq=getSequence(sequenceLength,secondPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,true);
    if (verbose) {
      System.err.println(""String_Node_Str"" + firstPos + ""String_Node_Str""+ sequence.length()+ ""String_Node_Str""+ secondPos+ ""String_Node_Str""+ offset);
      System.err.println(""String_Node_Str"" + seqID + ""String_Node_Str""+ firstPos+ ""String_Node_Str""+ firstSeq);
      System.err.println(""String_Node_Str"" + seqID + ""String_Node_Str""+ secondPos+ ""String_Node_Str""+ secondSeq);
    }
    if (firstSeq.length() != secondSeq.length() || firstSeq.length() != requestedLength) {
      System.err.println(""String_Node_Str"" + firstSeq.length() + ""String_Node_Str""+ secondSeq.length()+ ""String_Node_Str""+ requestedLength);
      System.exit(1);
    }
    this.sharedJaccard.add(compareKmers(firstSeq,secondSeq));
    this.sharedMerCounts.add(this.sharedCount);
    if (this.reference != null) {
      sequence=null;
      int secondSeqID=0;
      while (sequence == null || sequence.length() < 2 * sequenceLength) {
        secondSeqID=generator.nextInt(sequences.length);
        sequence=sequences[secondSeqID];
      }
      secondPos=generator.nextInt(sequence.length());
      while (seqID == secondSeqID && Utils.getRangeOverlap(firstPos,firstPos + sequenceLength,secondPos,secondPos + sequenceLength) > 0) {
        secondPos=generator.nextInt(sequence.length());
      }
      secondSeq=getSequence(sequenceLength,secondPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,true);
    }
 else {
      secondPos=0;
      secondSeq=buildRandomSequence(sequenceLength);
    }
    if (firstSeq.length() != secondSeq.length() || firstSeq.length() != requestedLength) {
      System.err.println(""String_Node_Str"" + firstSeq.length());
      System.exit(1);
    }
    this.randomJaccard.add(compareKmers(firstSeq,secondSeq));
    this.randomMerCounts.add(this.sharedCount);
  }
  if (this.randomJaccard.size() != this.randomMerCounts.size() || this.sharedJaccard.size() != this.sharedMerCounts.size() || this.sharedJaccard.size() != this.randomJaccard.size()) {
    System.err.println(""String_Node_Str"");
  }
  for (int i=0; i < this.totalTrials; i++) {
    System.out.println(this.sharedMerCounts.get(i) + ""String_Node_Str"" + this.sharedJaccard.get(i)+ ""String_Node_Str""+ this.randomMerCounts.get(i)+ ""String_Node_Str""+ this.randomJaccard.get(i));
  }
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedMerCounts,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedJaccard,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomMerCounts,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomJaccard,System.out);
  System.out.println();
}","public void simulate(double insertionRate,double delRate,double subRate) throws Exception {
  double errorRate=insertionRate + delRate + subRate;
  double insertionPercentage=insertionRate / errorRate;
  double deletionPercentage=delRate / errorRate;
  double subPercentage=subRate / errorRate;
  if (errorRate < 0 || errorRate > 1) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  System.err.println(""String_Node_Str"");
  FastaData data=null;
  String[] sequences=null;
  if (this.reference != null) {
    data=new FastaData(this.reference);
    data.enqueueFullFile();
    Sequence[] dataSeq=data.toArray();
    sequences=new String[dataSeq.length];
    for (int i=0; i < dataSeq.length; i++) {
      sequences[i]=dataSeq[i].getString().toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  System.err.println(""String_Node_Str"");
  for (int i=0; i < this.totalTrials; i++) {
    if (i % 1000 == 0) {
      System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ this.totalTrials);
    }
    int sequenceLength=(int)this.requestedLength;
    int firstPos=0;
    String sequence=null;
    int seqID=0;
    if (this.reference != null) {
      sequence=null;
      while (sequence == null || sequence.length() < 4 * sequenceLength) {
        seqID=generator.nextInt(sequences.length);
        sequence=sequences[seqID];
      }
      firstPos=generator.nextInt(sequence.length());
    }
 else {
      sequence=buildRandomSequence(sequenceLength * 4);
    }
    StringBuilder firstAdj=new StringBuilder();
    StringBuilder errors=new StringBuilder();
    String firstSeq=getSequence(sequenceLength,firstPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,false);
    int offset=(int)((this.requestedLength * 2) - this.overlap);
    int secondPos=(firstPos + offset) % sequence.length();
    String secondSeq=getSequence(sequenceLength,secondPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,true);
    if (this.verbose) {
      System.err.println(""String_Node_Str"" + firstPos + ""String_Node_Str""+ sequence.length()+ ""String_Node_Str""+ secondPos+ ""String_Node_Str""+ offset);
      System.err.println(""String_Node_Str"" + seqID + ""String_Node_Str""+ firstPos+ ""String_Node_Str""+ firstSeq);
      System.err.println(""String_Node_Str"" + seqID + ""String_Node_Str""+ secondPos+ ""String_Node_Str""+ secondSeq);
    }
    if (firstSeq.length() != secondSeq.length() || firstSeq.length() != this.requestedLength) {
      System.err.println(""String_Node_Str"" + firstSeq.length() + ""String_Node_Str""+ secondSeq.length()+ ""String_Node_Str""+ this.requestedLength);
      System.exit(1);
    }
    this.sharedJaccard.add(compareKmers(firstSeq,secondSeq));
    this.sharedMerCounts.add(this.sharedCount);
    if (this.reference != null) {
      sequence=null;
      int secondSeqID=0;
      while (sequence == null || sequence.length() < 2 * sequenceLength) {
        secondSeqID=generator.nextInt(sequences.length);
        sequence=sequences[secondSeqID];
      }
      secondPos=generator.nextInt(sequence.length());
      while (seqID == secondSeqID && Utils.getRangeOverlap(firstPos,firstPos + sequenceLength,secondPos,secondPos + sequenceLength) > 0) {
        secondPos=generator.nextInt(sequence.length());
      }
      secondSeq=getSequence(sequenceLength,secondPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,true);
    }
 else {
      secondPos=0;
      secondSeq=buildRandomSequence(sequenceLength);
    }
    if (firstSeq.length() != secondSeq.length() || firstSeq.length() != this.requestedLength) {
      System.err.println(""String_Node_Str"" + firstSeq.length());
      System.exit(1);
    }
    this.randomJaccard.add(compareKmers(firstSeq,secondSeq));
    this.randomMerCounts.add(this.sharedCount);
  }
  if (this.randomJaccard.size() != this.randomMerCounts.size() || this.sharedJaccard.size() != this.sharedMerCounts.size() || this.sharedJaccard.size() != this.randomJaccard.size()) {
    System.err.println(""String_Node_Str"");
  }
  for (int i=0; i < this.totalTrials; i++) {
    System.out.println(this.sharedMerCounts.get(i) + ""String_Node_Str"" + this.sharedJaccard.get(i)+ ""String_Node_Str""+ this.randomMerCounts.get(i)+ ""String_Node_Str""+ this.randomJaccard.get(i));
  }
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedMerCounts,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedJaccard,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomMerCounts,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomJaccard,System.out);
  System.out.println();
}",0.9973830210405108
169264,"@Override public boolean addDirectionalSequence(Sequence seq){
  SequenceMinHashes currHash=getSequenceHash(seq);
  int[][] currMinHashes=currHash.getMainHashes().getSubSeqMinHashes();
  if (currMinHashes[0].length != this.hashes.size())   throw new FastAlignRuntimeException(""String_Node_Str"");
  SequenceMinHashes minHash=this.sequenceVectorsHash.put(seq.getId(),currHash);
  if (minHash != null) {
    this.sequenceVectorsHash.put(seq.getId(),minHash);
    throw new FastAlignRuntimeException(""String_Node_Str"");
  }
  if (seq.length() < minStoreLength)   return false;
  int count=0;
  for (  HashMap<Integer,ArrayList<SubSequenceId>> hash : this.hashes) {
    for (int subSequences=0; subSequences < currMinHashes.length; subSequences++) {
      ArrayList<SubSequenceId> currList;
      final int hashVal=currMinHashes[subSequences][count];
synchronized (hash) {
        currList=hash.get(hashVal);
        if (currList == null) {
          currList=new ArrayList<SubSequenceId>(2);
          hash.put(hashVal,currList);
        }
      }
synchronized (currList) {
        currList.add(new SubSequenceId(seq.getId(),(short)subSequences));
      }
    }
    count++;
  }
  return true;
}","@Override public boolean addDirectionalSequence(Sequence seq){
  SequenceMinHashes currHash=getSequenceHash(seq);
  int[][] currMinHashes=currHash.getMainHashes().getSubSeqMinHashes();
  if (currMinHashes[0].length != this.hashes.size())   throw new FastAlignRuntimeException(""String_Node_Str"");
  SequenceMinHashes minHash=this.sequenceVectorsHash.put(seq.getId(),currHash);
  if (minHash != null) {
    this.sequenceVectorsHash.put(seq.getId(),minHash);
    throw new FastAlignRuntimeException(""String_Node_Str"");
  }
  if (seq.length() < this.minStoreLength)   return true;
  int count=0;
  for (  HashMap<Integer,ArrayList<SubSequenceId>> hash : this.hashes) {
    for (int subSequences=0; subSequences < currMinHashes.length; subSequences++) {
      ArrayList<SubSequenceId> currList;
      final int hashVal=currMinHashes[subSequences][count];
synchronized (hash) {
        currList=hash.get(hashVal);
        if (currList == null) {
          currList=new ArrayList<SubSequenceId>(2);
          hash.put(hashVal,currList);
        }
      }
synchronized (currList) {
        currList.add(new SubSequenceId(seq.getId(),(short)subSequences));
      }
    }
    count++;
  }
  return true;
}",0.9949706621961442
169265,"@Override public List<MatchResult> findMatches(SequenceMinHashes seqMinHashes,double minScore,boolean allToAll){
  MinHash minHash=seqMinHashes.getMainHashes();
  if (this.hashes.size() != minHash.numHashes())   throw new FastAlignRuntimeException(""String_Node_Str"" + this.hashes.size() + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  HashMap<MatchId,HitInfo> matchHitMap=new HashMap<MatchId,HitInfo>(size() / 10 + 1);
  int[][] subSeqMinHashes=minHash.getSubSeqMinHashes();
  for (int subSequence=0; subSequence < subSeqMinHashes.length; subSequence++) {
    int hashIndex=0;
    for (    HashMap<Integer,ArrayList<SubSequenceId>> currHash : this.hashes) {
      ArrayList<SubSequenceId> currentHashMatchList=currHash.get(subSeqMinHashes[subSequence][hashIndex]);
      if (currentHashMatchList != null) {
        for (        SubSequenceId subSequenceId : currentHashMatchList) {
          MatchId matchedId=new MatchId(subSequenceId,subSequence);
          HitInfo currentHitInfo=matchHitMap.get(matchedId);
          if (currentHitInfo == null) {
            currentHitInfo=new HitInfo();
            matchHitMap.put(matchedId,currentHitInfo);
          }
          currentHitInfo.addHit();
        }
      }
      hashIndex++;
    }
  }
  this.numberSubSequencesHit.getAndAdd(matchHitMap.size());
  HashMap<SequenceId,Integer> bestSequenceHit=new HashMap<SequenceId,Integer>(matchHitMap.size());
  for (  Entry<MatchId,HitInfo> match : matchHitMap.entrySet()) {
    SequenceId currId=match.getKey().id.getId();
    int currValue=match.getValue().count;
    Integer prevBestCount=bestSequenceHit.get(currId);
    if (prevBestCount == null || prevBestCount < currValue)     bestSequenceHit.put(currId,currValue);
  }
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  int[][] fullKmerMatch=null;
  for (  Entry<SequenceId,Integer> match : bestSequenceHit.entrySet()) {
    if (match.getKey().getHeaderId() == seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (allToAll && match.getKey().getHeaderId() > seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue() >= this.numMinMatches) {
      SequenceMinHashes matchedHash=this.sequenceVectorsHash.get(match.getKey());
      if (fullKmerMatch == null)       fullKmerMatch=seqMinHashes.getFullHashes();
      Pair<Double,Integer> result=seqMinHashes.getFullScore(fullKmerMatch,matchedHash,maxShift);
      double matchScore=result.x;
      int shift=result.y;
      int shiftb=-shift - seqMinHashes.getSequenceLength() + matchedHash.getSequenceLength();
      this.numberSequencesFullyCompared.getAndIncrement();
      if (matchScore >= minScore) {
        MatchResult currResult=new MatchResult(seqMinHashes.getSequenceId(),match.getKey(),matchScore,-shift,shiftb);
        matches.add(currResult);
      }
    }
  }
  return matches;
}","@Override public List<MatchResult> findMatches(SequenceMinHashes seqMinHashes,double minScore,boolean allToAll){
  MinHash minHash=seqMinHashes.getMainHashes();
  if (this.hashes.size() != minHash.numHashes())   throw new FastAlignRuntimeException(""String_Node_Str"" + this.hashes.size() + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  HashMap<MatchId,HitInfo> matchHitMap=new HashMap<MatchId,HitInfo>(size() / 10 + 1);
  int[][] subSeqMinHashes=minHash.getSubSeqMinHashes();
  for (int subSequence=0; subSequence < subSeqMinHashes.length; subSequence++) {
    int hashIndex=0;
    for (    HashMap<Integer,ArrayList<SubSequenceId>> currHash : this.hashes) {
      ArrayList<SubSequenceId> currentHashMatchList=currHash.get(subSeqMinHashes[subSequence][hashIndex]);
      if (currentHashMatchList != null) {
        for (        SubSequenceId subSequenceId : currentHashMatchList) {
          MatchId matchedId=new MatchId(subSequenceId,subSequence);
          HitInfo currentHitInfo=matchHitMap.get(matchedId);
          if (currentHitInfo == null) {
            currentHitInfo=new HitInfo();
            matchHitMap.put(matchedId,currentHitInfo);
          }
          currentHitInfo.addHit();
        }
      }
      hashIndex++;
    }
  }
  this.numberSubSequencesHit.getAndAdd(matchHitMap.size());
  HashMap<SequenceId,Integer> bestSequenceHit=new HashMap<SequenceId,Integer>(matchHitMap.size());
  for (  Entry<MatchId,HitInfo> match : matchHitMap.entrySet()) {
    SequenceId currId=match.getKey().id.getId();
    int currValue=match.getValue().count;
    Integer prevBestCount=bestSequenceHit.get(currId);
    if (prevBestCount == null || prevBestCount < currValue)     bestSequenceHit.put(currId,currValue);
  }
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  int[][] fullKmerMatch=null;
  for (  Entry<SequenceId,Integer> match : bestSequenceHit.entrySet()) {
    if (match.getKey().getHeaderId() == seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (allToAll && match.getKey().getHeaderId() > seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue() >= this.numMinMatches) {
      SequenceMinHashes matchedHash=this.sequenceVectorsHash.get(match.getKey());
      if (fullKmerMatch == null)       fullKmerMatch=seqMinHashes.getFullHashes();
      Pair<Double,Integer> result=seqMinHashes.getFullScore(fullKmerMatch,matchedHash,this.maxShift);
      double matchScore=result.x;
      int shift=result.y;
      int shiftb=-shift - seqMinHashes.getSequenceLength() + matchedHash.getSequenceLength();
      this.numberSequencesFullyCompared.getAndIncrement();
      if (matchScore >= minScore) {
        MatchResult currResult=new MatchResult(seqMinHashes.getSequenceId(),match.getKey(),matchScore,-shift,shiftb);
        matches.add(currResult);
      }
    }
  }
  return matches;
}",0.9991448606122798
169266,"public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  double threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  int numThreads=Runtime.getRuntime().availableProcessors() * 2;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Double.parseDouble(args[++i]);
    }
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numWords);
  LogManager.getLogManager().reset();
  double kmerError=MinHashSearch.probabilityKmerMatches(DEFAULT_DATA_ERROR,kmerSize);
  System.out.println(""String_Node_Str"" + kmerError);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile);
  MinHashSearch hashSearch=new MinHashSearch(data.clone(),kmerSize,numWords,DEFAULT_NUM_MIN_MATCHES,DEFAULT_SUB_SEQUENCE_SIZE,numThreads,DEFAULT_LARGE_MEMORY,true,null);
  System.err.println(""String_Node_Str"" + data.getNumberProcessed() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  System.out.println(""String_Node_Str"" + data.getNumberProcessed() + ""String_Node_Str"");
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=hashSearch.findMatches(DEFAULT_THRESHOLD);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  ArrayList<MatchResult> mixedResults=new ArrayList<MatchResult>();
  Collections.sort(results);
  mixedResults.addAll(results.subList(0,Math.min(results.size(),100)));
  mixedResults.addAll(results.subList(Math.max(0,results.size() - 50),results.size()));
  System.out.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  Matrix matrix=MatrixLoader.load(""String_Node_Str"");
  int count=0;
  double mean=0;
  for (  MatchResult match : mixedResults) {
    Sequence s1=data.getSequence(match.getFromId());
    Sequence s2=data.getSequence(match.getToId());
    double score=computeAlignment(s1,s2,matrix);
    System.out.format(""String_Node_Str"",match,match.getScore(),score);
    mean+=match.getScore();
    count++;
    if (count > 200)     break;
  }
  mean=mean / count;
  System.out.println(""String_Node_Str"" + mean);
}","public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  double threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  int numThreads=Runtime.getRuntime().availableProcessors() * 2;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Double.parseDouble(args[++i]);
    }
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numWords);
  LogManager.getLogManager().reset();
  double kmerError=MinHashSearch.probabilityKmerMatches(DEFAULT_DATA_ERROR,kmerSize);
  System.out.println(""String_Node_Str"" + kmerError);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile);
  MinHashSearch hashSearch=new MinHashSearch(data.clone(),kmerSize,numWords,DEFAULT_NUM_MIN_MATCHES,DEFAULT_SUB_SEQUENCE_SIZE,numThreads,DEFAULT_LARGE_MEMORY,true,null,800);
  System.err.println(""String_Node_Str"" + data.getNumberProcessed() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  System.out.println(""String_Node_Str"" + data.getNumberProcessed() + ""String_Node_Str"");
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=hashSearch.findMatches(DEFAULT_THRESHOLD);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  ArrayList<MatchResult> mixedResults=new ArrayList<MatchResult>();
  Collections.sort(results);
  mixedResults.addAll(results.subList(0,Math.min(results.size(),100)));
  mixedResults.addAll(results.subList(Math.max(0,results.size() - 50),results.size()));
  System.out.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  Matrix matrix=MatrixLoader.load(""String_Node_Str"");
  int count=0;
  double mean=0;
  for (  MatchResult match : mixedResults) {
    Sequence s1=data.getSequence(match.getFromId());
    Sequence s2=data.getSequence(match.getToId());
    double score=computeAlignment(s1,s2,matrix);
    System.out.format(""String_Node_Str"",match,match.getScore(),score);
    mean+=match.getScore();
    count++;
    if (count > 200)     break;
  }
  mean=mean / count;
  System.out.println(""String_Node_Str"" + mean);
}",0.9992498124531132
169267,"public MinHashSearch(FastaData data,int kmerSize,int numHashes,int numMinMatches,int subSequenceSize,int numThreads,boolean storeKmerInMemory,boolean storeResults,HashSet<Integer> filter) throws IOException {
  super(kmerSize,numHashes,numThreads,storeResults);
  this.numMinMatches=numMinMatches;
  this.subSequenceSize=subSequenceSize;
  this.storeKmerInMemory=storeKmerInMemory;
  this.numberSubSequencesHit=new AtomicLong();
  this.numberSequencesHit=new AtomicLong();
  this.numberSequencesFullyCompared=new AtomicLong();
  this.filter=filter;
  data.enqueueFullFile();
  this.sequenceVectorsHash=new ConcurrentHashMap<SequenceId,SequenceMinHashes>((int)data.getNumberProcessed() * 2 + 100,(float)0.75,this.numThreads);
  this.hashes=new ArrayList<HashMap<Integer,ArrayList<SubSequenceId>>>(numHashes);
  for (int iter=0; iter < numHashes; iter++)   this.hashes.add(new HashMap<Integer,ArrayList<SubSequenceId>>((int)data.getNumberProcessed() * 2 * 10));
  addData(data);
}","public MinHashSearch(FastaData data,int kmerSize,int numHashes,int numMinMatches,int subSequenceSize,int numThreads,boolean storeKmerInMemory,boolean storeResults,HashSet<Integer> filter,int maxShift) throws IOException {
  super(kmerSize,numHashes,numThreads,storeResults);
  this.numMinMatches=numMinMatches;
  this.subSequenceSize=subSequenceSize;
  this.storeKmerInMemory=storeKmerInMemory;
  this.numberSubSequencesHit=new AtomicLong();
  this.numberSequencesHit=new AtomicLong();
  this.numberSequencesFullyCompared=new AtomicLong();
  this.maxShift=maxShift;
  this.filter=filter;
  data.enqueueFullFile();
  this.sequenceVectorsHash=new ConcurrentHashMap<SequenceId,SequenceMinHashes>((int)data.getNumberProcessed() * 2 + 100,(float)0.75,this.numThreads);
  this.hashes=new ArrayList<HashMap<Integer,ArrayList<SubSequenceId>>>(numHashes);
  for (int iter=0; iter < numHashes; iter++)   this.hashes.add(new HashMap<Integer,ArrayList<SubSequenceId>>((int)data.getNumberProcessed() * 2 * 10));
  addData(data);
}",0.9804511278195488
169268,"@Override public List<MatchResult> findMatches(SequenceMinHashes seqMinHashes,double minScore,boolean allToAll){
  MinHash minHash=seqMinHashes.getMainHashes();
  if (this.hashes.size() != minHash.numHashes())   throw new FastAlignRuntimeException(""String_Node_Str"" + this.hashes.size() + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  HashMap<MatchId,HitInfo> matchHitMap=new HashMap<MatchId,HitInfo>(size() / 10 + 1);
  int[][] subSeqMinHashes=minHash.getSubSeqMinHashes();
  for (int subSequence=0; subSequence < subSeqMinHashes.length; subSequence++) {
    int hashIndex=0;
    for (    HashMap<Integer,ArrayList<SubSequenceId>> currHash : this.hashes) {
      ArrayList<SubSequenceId> currentHashMatchList=currHash.get(subSeqMinHashes[subSequence][hashIndex]);
      if (currentHashMatchList != null) {
        for (        SubSequenceId subSequenceId : currentHashMatchList) {
          MatchId matchedId=new MatchId(subSequenceId,subSequence);
          HitInfo currentHitInfo=matchHitMap.get(matchedId);
          if (currentHitInfo == null) {
            currentHitInfo=new HitInfo();
            matchHitMap.put(matchedId,currentHitInfo);
          }
          currentHitInfo.addHit();
        }
      }
      hashIndex++;
    }
  }
  this.numberSubSequencesHit.getAndAdd(matchHitMap.size());
  HashMap<SequenceId,Integer> bestSequenceHit=new HashMap<SequenceId,Integer>(matchHitMap.size());
  for (  Entry<MatchId,HitInfo> match : matchHitMap.entrySet()) {
    SequenceId currId=match.getKey().id.getId();
    int currValue=match.getValue().count;
    Integer prevBestCount=bestSequenceHit.get(currId);
    if (prevBestCount == null || prevBestCount < currValue)     bestSequenceHit.put(currId,currValue);
  }
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  int[][] fullKmerMatch=null;
  for (  Entry<SequenceId,Integer> match : bestSequenceHit.entrySet()) {
    if (match.getKey().getHeaderId() == seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (allToAll && match.getKey().getHeaderId() > seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue() >= this.numMinMatches) {
      SequenceMinHashes matchedHash=this.sequenceVectorsHash.get(match.getKey());
      if (fullKmerMatch == null)       fullKmerMatch=seqMinHashes.getFullHashes();
      Pair<Double,Integer> result=seqMinHashes.getFullScore(fullKmerMatch,matchedHash);
      double matchScore=result.x;
      int shift=result.y;
      int shiftb=-shift - seqMinHashes.getSequenceLength() + matchedHash.getSequenceLength();
      this.numberSequencesFullyCompared.getAndIncrement();
      if (matchScore >= minScore) {
        MatchResult currResult=new MatchResult(seqMinHashes.getSequenceId(),match.getKey(),matchScore,-shift,shiftb);
        matches.add(currResult);
      }
    }
  }
  return matches;
}","@Override public List<MatchResult> findMatches(SequenceMinHashes seqMinHashes,double minScore,boolean allToAll){
  MinHash minHash=seqMinHashes.getMainHashes();
  if (this.hashes.size() != minHash.numHashes())   throw new FastAlignRuntimeException(""String_Node_Str"" + this.hashes.size() + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  HashMap<MatchId,HitInfo> matchHitMap=new HashMap<MatchId,HitInfo>(size() / 10 + 1);
  int[][] subSeqMinHashes=minHash.getSubSeqMinHashes();
  for (int subSequence=0; subSequence < subSeqMinHashes.length; subSequence++) {
    int hashIndex=0;
    for (    HashMap<Integer,ArrayList<SubSequenceId>> currHash : this.hashes) {
      ArrayList<SubSequenceId> currentHashMatchList=currHash.get(subSeqMinHashes[subSequence][hashIndex]);
      if (currentHashMatchList != null) {
        for (        SubSequenceId subSequenceId : currentHashMatchList) {
          MatchId matchedId=new MatchId(subSequenceId,subSequence);
          HitInfo currentHitInfo=matchHitMap.get(matchedId);
          if (currentHitInfo == null) {
            currentHitInfo=new HitInfo();
            matchHitMap.put(matchedId,currentHitInfo);
          }
          currentHitInfo.addHit();
        }
      }
      hashIndex++;
    }
  }
  this.numberSubSequencesHit.getAndAdd(matchHitMap.size());
  HashMap<SequenceId,Integer> bestSequenceHit=new HashMap<SequenceId,Integer>(matchHitMap.size());
  for (  Entry<MatchId,HitInfo> match : matchHitMap.entrySet()) {
    SequenceId currId=match.getKey().id.getId();
    int currValue=match.getValue().count;
    Integer prevBestCount=bestSequenceHit.get(currId);
    if (prevBestCount == null || prevBestCount < currValue)     bestSequenceHit.put(currId,currValue);
  }
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  int[][] fullKmerMatch=null;
  for (  Entry<SequenceId,Integer> match : bestSequenceHit.entrySet()) {
    if (match.getKey().getHeaderId() == seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (allToAll && match.getKey().getHeaderId() > seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue() >= this.numMinMatches) {
      SequenceMinHashes matchedHash=this.sequenceVectorsHash.get(match.getKey());
      if (fullKmerMatch == null)       fullKmerMatch=seqMinHashes.getFullHashes();
      Pair<Double,Integer> result=seqMinHashes.getFullScore(fullKmerMatch,matchedHash,maxShift);
      double matchScore=result.x;
      int shift=result.y;
      int shiftb=-shift - seqMinHashes.getSequenceLength() + matchedHash.getSequenceLength();
      this.numberSequencesFullyCompared.getAndIncrement();
      if (matchScore >= minScore) {
        MatchResult currResult=new MatchResult(seqMinHashes.getSequenceId(),match.getKey(),matchScore,-shift,shiftb);
        matches.add(currResult);
      }
    }
  }
  return matches;
}",0.9984570546888394
169269,"public Pair<Double,Integer> getFullScore(int[][] allKmerHashes,SequenceMinHashes s){
  if (allKmerHashes == null)   throw new FastAlignRuntimeException(""String_Node_Str"");
  int[][] sAllKmerHashes=s.getFullHashes();
  int valid1Lower=0;
  int valid1Upper=allKmerHashes.length;
  int valid2Lower=0;
  int valid2Upper=sAllKmerHashes.length;
  int overlapSize=0;
  int border=MAX_SHIFT_ALLOWED;
  int count=0;
  int shift=0;
  int[] posShift=new int[Math.min(allKmerHashes.length,sAllKmerHashes.length)];
  for (int repeat=0; repeat < NUM_SCORING_REPEATS; repeat++) {
    count=0;
    int iter1=0;
    int iter2=0;
    while (iter1 < valid1Upper && iter2 < valid2Upper) {
      int[] s1=allKmerHashes[iter1];
      int[] s2=sAllKmerHashes[iter2];
      if (s1[0] < s2[0] || s1[1] < valid1Lower || s1[1] >= valid1Upper)       iter1++;
 else       if (s2[0] < s1[0] || s2[1] < valid2Lower || s2[1] >= valid2Upper)       iter2++;
 else {
        posShift[count]=s2[1] - s1[1];
        count++;
        iter1++;
        iter2++;
      }
    }
    if (count > 0) {
      shift=Utils.quickSelect(posShift,count / 2,count);
    }
 else     shift=0;
    valid1Lower=Math.max(0,-shift - border);
    valid1Upper=Math.min(allKmerHashes.length,sAllKmerHashes.length - shift + border);
    valid2Lower=Math.max(0,shift - border);
    valid2Upper=Math.min(sAllKmerHashes.length,allKmerHashes.length + shift + border);
    int valid2LowerBorder=Math.max(0,shift);
    int valid2UpperBorder=Math.min(sAllKmerHashes.length,allKmerHashes.length + shift);
    overlapSize=valid2UpperBorder - valid2LowerBorder;
  }
  int validCount=0;
  for (int iter=0; iter < count; iter++) {
    if (Math.abs(posShift[iter] - shift) <= MAX_SHIFT_ALLOWED)     validCount++;
  }
  double validShiftPercent=(double)validCount / (double)count;
  double score=0;
  if (overlapSize > 0 && validShiftPercent > SHIFT_CONSENSUS_PERCENTAGE)   score=(double)count / (double)(overlapSize);
  return new Pair<Double,Integer>(score,shift);
}","public Pair<Double,Integer> getFullScore(int[][] allKmerHashes,SequenceMinHashes s,int maxShift){
  if (allKmerHashes == null)   throw new FastAlignRuntimeException(""String_Node_Str"");
  int[][] sAllKmerHashes=s.getFullHashes();
  int valid1Lower=0;
  int valid1Upper=allKmerHashes.length;
  int valid2Lower=0;
  int valid2Upper=sAllKmerHashes.length;
  int overlapSize=0;
  int border=maxShift;
  int count=0;
  int shift=0;
  int[] posShift=new int[Math.min(allKmerHashes.length,sAllKmerHashes.length)];
  int numScoringRepeats=2;
  if (maxShift <= 0)   numScoringRepeats=1;
  maxShift=Math.abs(maxShift);
  for (int repeat=0; repeat < numScoringRepeats; repeat++) {
    count=0;
    int iter1=0;
    int iter2=0;
    while (iter1 < allKmerHashes.length && iter2 < sAllKmerHashes.length) {
      int[] s1=allKmerHashes[iter1];
      int[] s2=sAllKmerHashes[iter2];
      if (s1[0] < s2[0] || s1[1] < valid1Lower || s1[1] >= valid1Upper)       iter1++;
 else       if (s2[0] < s1[0] || s2[1] < valid2Lower || s2[1] >= valid2Upper)       iter2++;
 else {
        posShift[count]=s2[1] - s1[1];
        count++;
        iter1++;
        iter2++;
      }
    }
    if (count > 0) {
      shift=Utils.quickSelect(posShift,count / 2,count);
    }
 else     shift=0;
    valid1Lower=Math.max(0,-shift - border);
    valid1Upper=Math.min(allKmerHashes.length,sAllKmerHashes.length - shift + border);
    valid2Lower=Math.max(0,shift - border);
    valid2Upper=Math.min(sAllKmerHashes.length,allKmerHashes.length + shift + border);
    int valid2LowerBorder=Math.max(0,shift);
    int valid2UpperBorder=Math.min(sAllKmerHashes.length,allKmerHashes.length + shift);
    overlapSize=valid2UpperBorder - valid2LowerBorder;
  }
  int validCount=0;
  for (int iter=0; iter < count; iter++) {
    if (Math.abs(posShift[iter] - shift) <= maxShift)     validCount++;
  }
  double validShiftPercent=(double)validCount / (double)count;
  double score=0;
  if (overlapSize > 0 && validShiftPercent > SHIFT_CONSENSUS_PERCENTAGE)   score=(double)count / (double)(overlapSize);
  return new Pair<Double,Integer>(score,shift);
}",0.9243533430941924
169270,"public void process() throws NumberFormatException, IOException {
  double variance=0;
  double sum=0;
  int total=0;
  for (  int val : histogram.keySet()) {
    int count=histogram.get(val);
    for (int i=0; i < count; i++) {
      total++;
      double delta=(val - mean);
      mean+=(delta / total);
      variance+=delta * (val - mean);
      sum+=val;
    }
  }
  variance/=total;
  stdev=Math.sqrt(variance);
  double runningSum=0;
  for (  int val : histogram.keySet()) {
    int count=histogram.get(val);
    runningSum+=(double)val * count;
    if ((runningSum / sum) > percent) {
      cut=val;
      break;
    }
  }
}","public void process() throws NumberFormatException, IOException {
  double variance=0;
  double sum=0;
  int total=0;
  for (  int val : this.histogram.keySet()) {
    int count=this.histogram.get(val);
    for (int i=0; i < count; i++) {
      total++;
      double delta=(val - this.mean);
      this.mean+=(delta / total);
      variance+=delta * (val - this.mean);
      sum+=val;
    }
  }
  variance/=total;
  this.stdev=Math.sqrt(variance);
  double runningSum=0;
  for (  int val : this.histogram.keySet()) {
    int count=this.histogram.get(val);
    runningSum+=(double)val * count;
    if ((runningSum / sum) > this.percent) {
      this.cut=val;
      break;
    }
  }
}",0.9421613394216134
169271,"@Override public String toString(){
  return nf.format(mean) + ""String_Node_Str"" + nf.format(stdev)+ ""String_Node_Str""+ ""String_Node_Str""+ cut+ ""String_Node_Str""+ nf.format(mean + NUM_SD * stdev);
}","@Override public String toString(){
  return nf.format(this.mean) + ""String_Node_Str"" + nf.format(this.stdev)+ ""String_Node_Str""+ ""String_Node_Str""+ this.cut+ ""String_Node_Str""+ nf.format(this.mean + NUM_SD * this.stdev);
}",0.7600950118764845
169272,"public GetHistogramStats(String fileName,double p){
  try {
    BufferedReader bf=Utils.getFile(fileName,""String_Node_Str"");
    String line=null;
    while ((line=bf.readLine()) != null) {
      String[] split=line.trim().split(""String_Node_Str"");
      int val=Integer.parseInt(split[0]);
      int count=Integer.parseInt(split[1]);
      histogram.put(val,count);
    }
    bf.close();
    percent=p;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public GetHistogramStats(String fileName,double p){
  try {
    BufferedReader bf=Utils.getFile(fileName,""String_Node_Str"");
    String line=null;
    while ((line=bf.readLine()) != null) {
      String[] split=line.trim().split(""String_Node_Str"");
      int val=Integer.parseInt(split[0]);
      int count=Integer.parseInt(split[1]);
      this.histogram.put(val,count);
    }
    bf.close();
    this.percent=p;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9893162393162394
169273,"public double compareKmers(String first,String second){
  HashSet<String> firstSeqs=new HashSet<String>();
  HashSet<String> totalSeqs=new HashSet<String>();
  HashSet<String> shared=new HashSet<String>();
  for (int i=0; i <= first.length() - this.kmer; i++) {
    String fmer=first.substring(i,i + this.kmer);
    if (!skipMers.containsKey(fmer)) {
      firstSeqs.add(fmer);
    }
    totalSeqs.add(fmer);
  }
  for (int i=0; i <= second.length() - this.kmer; i++) {
    String smer=second.substring(i,i + this.kmer);
    if (firstSeqs.contains(smer)) {
      shared.add(smer);
    }
 else {
      totalSeqs.add(smer);
    }
  }
  this.sharedCount=shared.size();
  return shared.size() / (double)totalSeqs.size();
}","public double compareKmers(String first,String second){
  HashSet<String> firstSeqs=new HashSet<String>();
  HashSet<String> totalSeqs=new HashSet<String>();
  HashSet<String> shared=new HashSet<String>();
  for (int i=0; i <= first.length() - this.kmer; i++) {
    String fmer=first.substring(i,i + this.kmer);
    if (!this.skipMers.containsKey(fmer)) {
      firstSeqs.add(fmer);
    }
    totalSeqs.add(fmer);
  }
  for (int i=0; i <= second.length() - this.kmer; i++) {
    String smer=second.substring(i,i + this.kmer);
    if (firstSeqs.contains(smer)) {
      shared.add(smer);
    }
 else {
      totalSeqs.add(smer);
    }
  }
  this.sharedCount=shared.size();
  return shared.size() / (double)totalSeqs.size();
}",0.996530187369882
169274,"private void loadSkipMers(String file) throws Exception {
  BufferedReader bf=Utils.getFile(file,""String_Node_Str"");
  String line=null;
  while ((line=bf.readLine()) != null) {
    String[] split=line.trim().split(""String_Node_Str"");
    String mer=split[0].trim();
    int count=Integer.parseInt(split[1]);
    skipMers.put(mer,count);
  }
  bf.close();
}","private void loadSkipMers(String file) throws Exception {
  BufferedReader bf=Utils.getFile(file,""String_Node_Str"");
  String line=null;
  while ((line=bf.readLine()) != null) {
    String[] split=line.trim().split(""String_Node_Str"");
    String mer=split[0].trim();
    int count=Integer.parseInt(split[1]);
    this.skipMers.put(mer,count);
  }
  bf.close();
}",0.9930458970792768
169275,"public void simulate(double insertionRate,double delRate,double subRate) throws Exception {
  double errorRate=insertionRate + delRate + subRate;
  double insertionPercentage=insertionRate / errorRate;
  double deletionPercentage=delRate / errorRate;
  double subPercentage=subRate / errorRate;
  if (errorRate < 0 || errorRate > 1) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  System.err.println(""String_Node_Str"");
  FastaData data=null;
  String[] sequences=null;
  if (this.reference != null) {
    data=new FastaData(this.reference);
    data.enqueueFullFile();
    Sequence[] dataSeq=data.toArray();
    sequences=new String[dataSeq.length];
    for (int i=0; i < dataSeq.length; i++) {
      sequences[i]=dataSeq[i].getString().toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  System.err.println(""String_Node_Str"");
  for (int i=0; i < this.totalTrials; i++) {
    if (i % 1000 == 0) {
      System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ this.totalTrials);
    }
    int sequenceLength=(int)this.requestedLength;
    int firstPos=0;
    String sequence=null;
    int seqID=0;
    if (this.reference != null) {
      sequence=null;
      while (sequence == null || sequence.length() < 4 * sequenceLength) {
        seqID=generator.nextInt(sequences.length);
        sequence=sequences[seqID];
      }
      firstPos=generator.nextInt(sequence.length());
    }
 else {
      sequence=buildRandomSequence(sequenceLength * 4);
    }
    StringBuilder firstAdj=new StringBuilder();
    StringBuilder errors=new StringBuilder();
    String firstSeq=getSequence(sequenceLength,firstPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,false);
    int offset=(int)((requestedLength * 2) - this.overlap);
    int secondPos=(firstPos + offset) % sequence.length();
    String secondSeq=getSequence(sequenceLength,secondPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,true);
    if (verbose) {
      System.err.println(""String_Node_Str"" + firstPos + ""String_Node_Str""+ sequence.length()+ ""String_Node_Str""+ secondPos+ ""String_Node_Str""+ offset);
      System.err.println(""String_Node_Str"" + seqID + ""String_Node_Str""+ firstPos+ ""String_Node_Str""+ firstSeq);
      System.err.println(""String_Node_Str"" + seqID + ""String_Node_Str""+ secondPos+ ""String_Node_Str""+ secondSeq);
    }
    if (firstSeq.length() != secondSeq.length() || firstSeq.length() != requestedLength) {
      System.err.println(""String_Node_Str"" + firstSeq.length() + ""String_Node_Str""+ secondSeq.length()+ ""String_Node_Str""+ requestedLength);
      System.exit(1);
    }
    this.sharedJaccard.add(compareKmers(firstSeq,secondSeq));
    this.sharedMerCounts.add(this.sharedCount);
    if (this.reference != null) {
      sequence=null;
      int secondSeqID=0;
      while (sequence == null || sequence.length() < 2 * sequenceLength) {
        secondSeqID=generator.nextInt(sequences.length);
        sequence=sequences[secondSeqID];
      }
      secondPos=generator.nextInt(sequence.length());
      while (seqID == secondSeqID && Utils.getRangeOverlap(firstPos,firstPos + sequenceLength,secondPos,secondPos + sequenceLength) > 0) {
        secondPos=generator.nextInt(sequence.length());
      }
      secondSeq=getSequence(sequenceLength,secondPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,true);
    }
 else {
      secondPos=0;
      secondSeq=buildRandomSequence(sequenceLength);
    }
    if (firstSeq.length() != secondSeq.length() || firstSeq.length() != requestedLength) {
      System.err.println(""String_Node_Str"" + firstSeq.length());
      System.exit(1);
    }
    this.randomJaccard.add(compareKmers(firstSeq,secondSeq));
    this.randomMerCounts.add(this.sharedCount);
  }
  if (this.randomJaccard.size() != this.randomMerCounts.size() || this.sharedJaccard.size() != this.sharedMerCounts.size() || this.sharedJaccard.size() != this.randomJaccard.size()) {
    System.err.println(""String_Node_Str"");
  }
  for (int i=0; i < this.totalTrials; i++) {
    System.out.println(this.sharedMerCounts.get(i) + ""String_Node_Str"" + this.sharedJaccard.get(i)+ ""String_Node_Str""+ this.randomMerCounts.get(i)+ ""String_Node_Str""+ this.randomJaccard.get(i));
  }
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedMerCounts,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedJaccard,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomMerCounts,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomJaccard,System.out);
  System.out.println();
}","public void simulate(double insertionRate,double delRate,double subRate) throws Exception {
  double errorRate=insertionRate + delRate + subRate;
  double insertionPercentage=insertionRate / errorRate;
  double deletionPercentage=delRate / errorRate;
  double subPercentage=subRate / errorRate;
  if (errorRate < 0 || errorRate > 1) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  System.err.println(""String_Node_Str"");
  FastaData data=null;
  String[] sequences=null;
  if (this.reference != null) {
    data=new FastaData(this.reference);
    data.enqueueFullFile();
    Sequence[] dataSeq=data.toArray();
    sequences=new String[dataSeq.length];
    for (int i=0; i < dataSeq.length; i++) {
      sequences[i]=dataSeq[i].getString().toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  System.err.println(""String_Node_Str"");
  for (int i=0; i < this.totalTrials; i++) {
    if (i % 1000 == 0) {
      System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ this.totalTrials);
    }
    int sequenceLength=(int)this.requestedLength;
    int firstPos=0;
    String sequence=null;
    int seqID=0;
    if (this.reference != null) {
      sequence=null;
      while (sequence == null || sequence.length() < 4 * sequenceLength) {
        seqID=generator.nextInt(sequences.length);
        sequence=sequences[seqID];
      }
      firstPos=generator.nextInt(sequence.length());
    }
 else {
      sequence=buildRandomSequence(sequenceLength * 4);
    }
    StringBuilder firstAdj=new StringBuilder();
    StringBuilder errors=new StringBuilder();
    String firstSeq=getSequence(sequenceLength,firstPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,false);
    int offset=(int)((this.requestedLength * 2) - this.overlap);
    int secondPos=(firstPos + offset) % sequence.length();
    String secondSeq=getSequence(sequenceLength,secondPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,true);
    if (this.verbose) {
      System.err.println(""String_Node_Str"" + firstPos + ""String_Node_Str""+ sequence.length()+ ""String_Node_Str""+ secondPos+ ""String_Node_Str""+ offset);
      System.err.println(""String_Node_Str"" + seqID + ""String_Node_Str""+ firstPos+ ""String_Node_Str""+ firstSeq);
      System.err.println(""String_Node_Str"" + seqID + ""String_Node_Str""+ secondPos+ ""String_Node_Str""+ secondSeq);
    }
    if (firstSeq.length() != secondSeq.length() || firstSeq.length() != this.requestedLength) {
      System.err.println(""String_Node_Str"" + firstSeq.length() + ""String_Node_Str""+ secondSeq.length()+ ""String_Node_Str""+ this.requestedLength);
      System.exit(1);
    }
    this.sharedJaccard.add(compareKmers(firstSeq,secondSeq));
    this.sharedMerCounts.add(this.sharedCount);
    if (this.reference != null) {
      sequence=null;
      int secondSeqID=0;
      while (sequence == null || sequence.length() < 2 * sequenceLength) {
        secondSeqID=generator.nextInt(sequences.length);
        sequence=sequences[secondSeqID];
      }
      secondPos=generator.nextInt(sequence.length());
      while (seqID == secondSeqID && Utils.getRangeOverlap(firstPos,firstPos + sequenceLength,secondPos,secondPos + sequenceLength) > 0) {
        secondPos=generator.nextInt(sequence.length());
      }
      secondSeq=getSequence(sequenceLength,secondPos,sequence,errorRate,firstAdj,errors,insertionPercentage,deletionPercentage,subPercentage,true);
    }
 else {
      secondPos=0;
      secondSeq=buildRandomSequence(sequenceLength);
    }
    if (firstSeq.length() != secondSeq.length() || firstSeq.length() != this.requestedLength) {
      System.err.println(""String_Node_Str"" + firstSeq.length());
      System.exit(1);
    }
    this.randomJaccard.add(compareKmers(firstSeq,secondSeq));
    this.randomMerCounts.add(this.sharedCount);
  }
  if (this.randomJaccard.size() != this.randomMerCounts.size() || this.sharedJaccard.size() != this.sharedMerCounts.size() || this.sharedJaccard.size() != this.randomJaccard.size()) {
    System.err.println(""String_Node_Str"");
  }
  for (int i=0; i < this.totalTrials; i++) {
    System.out.println(this.sharedMerCounts.get(i) + ""String_Node_Str"" + this.sharedJaccard.get(i)+ ""String_Node_Str""+ this.randomMerCounts.get(i)+ ""String_Node_Str""+ this.randomJaccard.get(i));
  }
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedMerCounts,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.sharedJaccard,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomMerCounts,System.out);
  System.out.println();
  System.out.print(""String_Node_Str"");
  outputStats(this.randomJaccard,System.out);
  System.out.println();
}",0.9973830210405108
169276,"@Override public boolean addDirectionalSequence(Sequence seq){
  SequenceMinHashes currHash=getSequenceHash(seq);
  int[][] currMinHashes=currHash.getMainHashes().getSubSeqMinHashes();
  if (currMinHashes[0].length != this.hashes.size())   throw new FastAlignRuntimeException(""String_Node_Str"");
  SequenceMinHashes minHash=this.sequenceVectorsHash.put(seq.getId(),currHash);
  if (minHash != null) {
    this.sequenceVectorsHash.put(seq.getId(),minHash);
    throw new FastAlignRuntimeException(""String_Node_Str"");
  }
  if (seq.length() < minStoreLength)   return false;
  int count=0;
  for (  HashMap<Integer,ArrayList<SubSequenceId>> hash : this.hashes) {
    for (int subSequences=0; subSequences < currMinHashes.length; subSequences++) {
      ArrayList<SubSequenceId> currList;
      final int hashVal=currMinHashes[subSequences][count];
synchronized (hash) {
        currList=hash.get(hashVal);
        if (currList == null) {
          currList=new ArrayList<SubSequenceId>(2);
          hash.put(hashVal,currList);
        }
      }
synchronized (currList) {
        currList.add(new SubSequenceId(seq.getId(),(short)subSequences));
      }
    }
    count++;
  }
  return true;
}","@Override public boolean addDirectionalSequence(Sequence seq){
  SequenceMinHashes currHash=getSequenceHash(seq);
  int[][] currMinHashes=currHash.getMainHashes().getSubSeqMinHashes();
  if (currMinHashes[0].length != this.hashes.size())   throw new FastAlignRuntimeException(""String_Node_Str"");
  SequenceMinHashes minHash=this.sequenceVectorsHash.put(seq.getId(),currHash);
  if (minHash != null) {
    this.sequenceVectorsHash.put(seq.getId(),minHash);
    throw new FastAlignRuntimeException(""String_Node_Str"");
  }
  if (seq.length() < this.minStoreLength)   return true;
  int count=0;
  for (  HashMap<Integer,ArrayList<SubSequenceId>> hash : this.hashes) {
    for (int subSequences=0; subSequences < currMinHashes.length; subSequences++) {
      ArrayList<SubSequenceId> currList;
      final int hashVal=currMinHashes[subSequences][count];
synchronized (hash) {
        currList=hash.get(hashVal);
        if (currList == null) {
          currList=new ArrayList<SubSequenceId>(2);
          hash.put(hashVal,currList);
        }
      }
synchronized (currList) {
        currList.add(new SubSequenceId(seq.getId(),(short)subSequences));
      }
    }
    count++;
  }
  return true;
}",0.9949706621961442
169277,"@Override public List<MatchResult> findMatches(SequenceMinHashes seqMinHashes,double minScore,boolean allToAll){
  MinHash minHash=seqMinHashes.getMainHashes();
  if (this.hashes.size() != minHash.numHashes())   throw new FastAlignRuntimeException(""String_Node_Str"" + this.hashes.size() + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  HashMap<MatchId,HitInfo> matchHitMap=new HashMap<MatchId,HitInfo>(size() / 10 + 1);
  int[][] subSeqMinHashes=minHash.getSubSeqMinHashes();
  for (int subSequence=0; subSequence < subSeqMinHashes.length; subSequence++) {
    int hashIndex=0;
    for (    HashMap<Integer,ArrayList<SubSequenceId>> currHash : this.hashes) {
      ArrayList<SubSequenceId> currentHashMatchList=currHash.get(subSeqMinHashes[subSequence][hashIndex]);
      if (currentHashMatchList != null) {
        for (        SubSequenceId subSequenceId : currentHashMatchList) {
          MatchId matchedId=new MatchId(subSequenceId,subSequence);
          HitInfo currentHitInfo=matchHitMap.get(matchedId);
          if (currentHitInfo == null) {
            currentHitInfo=new HitInfo();
            matchHitMap.put(matchedId,currentHitInfo);
          }
          currentHitInfo.addHit();
        }
      }
      hashIndex++;
    }
  }
  this.numberSubSequencesHit.getAndAdd(matchHitMap.size());
  HashMap<SequenceId,Integer> bestSequenceHit=new HashMap<SequenceId,Integer>(matchHitMap.size());
  for (  Entry<MatchId,HitInfo> match : matchHitMap.entrySet()) {
    SequenceId currId=match.getKey().id.getId();
    int currValue=match.getValue().count;
    Integer prevBestCount=bestSequenceHit.get(currId);
    if (prevBestCount == null || prevBestCount < currValue)     bestSequenceHit.put(currId,currValue);
  }
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  int[][] fullKmerMatch=null;
  for (  Entry<SequenceId,Integer> match : bestSequenceHit.entrySet()) {
    if (match.getKey().getHeaderId() == seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (allToAll && match.getKey().getHeaderId() > seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue() >= this.numMinMatches) {
      SequenceMinHashes matchedHash=this.sequenceVectorsHash.get(match.getKey());
      if (fullKmerMatch == null)       fullKmerMatch=seqMinHashes.getFullHashes();
      Pair<Double,Integer> result=seqMinHashes.getFullScore(fullKmerMatch,matchedHash,maxShift);
      double matchScore=result.x;
      int shift=result.y;
      int shiftb=-shift - seqMinHashes.getSequenceLength() + matchedHash.getSequenceLength();
      this.numberSequencesFullyCompared.getAndIncrement();
      if (matchScore >= minScore) {
        MatchResult currResult=new MatchResult(seqMinHashes.getSequenceId(),match.getKey(),matchScore,-shift,shiftb);
        matches.add(currResult);
      }
    }
  }
  return matches;
}","@Override public List<MatchResult> findMatches(SequenceMinHashes seqMinHashes,double minScore,boolean allToAll){
  MinHash minHash=seqMinHashes.getMainHashes();
  if (this.hashes.size() != minHash.numHashes())   throw new FastAlignRuntimeException(""String_Node_Str"" + this.hashes.size() + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  HashMap<MatchId,HitInfo> matchHitMap=new HashMap<MatchId,HitInfo>(size() / 10 + 1);
  int[][] subSeqMinHashes=minHash.getSubSeqMinHashes();
  for (int subSequence=0; subSequence < subSeqMinHashes.length; subSequence++) {
    int hashIndex=0;
    for (    HashMap<Integer,ArrayList<SubSequenceId>> currHash : this.hashes) {
      ArrayList<SubSequenceId> currentHashMatchList=currHash.get(subSeqMinHashes[subSequence][hashIndex]);
      if (currentHashMatchList != null) {
        for (        SubSequenceId subSequenceId : currentHashMatchList) {
          MatchId matchedId=new MatchId(subSequenceId,subSequence);
          HitInfo currentHitInfo=matchHitMap.get(matchedId);
          if (currentHitInfo == null) {
            currentHitInfo=new HitInfo();
            matchHitMap.put(matchedId,currentHitInfo);
          }
          currentHitInfo.addHit();
        }
      }
      hashIndex++;
    }
  }
  this.numberSubSequencesHit.getAndAdd(matchHitMap.size());
  HashMap<SequenceId,Integer> bestSequenceHit=new HashMap<SequenceId,Integer>(matchHitMap.size());
  for (  Entry<MatchId,HitInfo> match : matchHitMap.entrySet()) {
    SequenceId currId=match.getKey().id.getId();
    int currValue=match.getValue().count;
    Integer prevBestCount=bestSequenceHit.get(currId);
    if (prevBestCount == null || prevBestCount < currValue)     bestSequenceHit.put(currId,currValue);
  }
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  int[][] fullKmerMatch=null;
  for (  Entry<SequenceId,Integer> match : bestSequenceHit.entrySet()) {
    if (match.getKey().getHeaderId() == seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (allToAll && match.getKey().getHeaderId() > seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue() >= this.numMinMatches) {
      SequenceMinHashes matchedHash=this.sequenceVectorsHash.get(match.getKey());
      if (fullKmerMatch == null)       fullKmerMatch=seqMinHashes.getFullHashes();
      Pair<Double,Integer> result=seqMinHashes.getFullScore(fullKmerMatch,matchedHash,this.maxShift);
      double matchScore=result.x;
      int shift=result.y;
      int shiftb=-shift - seqMinHashes.getSequenceLength() + matchedHash.getSequenceLength();
      this.numberSequencesFullyCompared.getAndIncrement();
      if (matchScore >= minScore) {
        MatchResult currResult=new MatchResult(seqMinHashes.getSequenceId(),match.getKey(),matchScore,-shift,shiftb);
        matches.add(currResult);
      }
    }
  }
  return matches;
}",0.9991448606122798
169278,"public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  double threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  int numThreads=Runtime.getRuntime().availableProcessors() * 2;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Double.parseDouble(args[++i]);
    }
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numWords);
  LogManager.getLogManager().reset();
  double kmerError=MinHashSearch.probabilityKmerMatches(DEFAULT_DATA_ERROR,kmerSize);
  System.out.println(""String_Node_Str"" + kmerError);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile);
  MinHashSearch hashSearch=new MinHashSearch(data.clone(),kmerSize,numWords,DEFAULT_NUM_MIN_MATCHES,DEFAULT_SUB_SEQUENCE_SIZE,numThreads,DEFAULT_LARGE_MEMORY,true,null);
  System.err.println(""String_Node_Str"" + data.getNumberProcessed() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  System.out.println(""String_Node_Str"" + data.getNumberProcessed() + ""String_Node_Str"");
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=hashSearch.findMatches(DEFAULT_THRESHOLD);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  ArrayList<MatchResult> mixedResults=new ArrayList<MatchResult>();
  Collections.sort(results);
  mixedResults.addAll(results.subList(0,Math.min(results.size(),100)));
  mixedResults.addAll(results.subList(Math.max(0,results.size() - 50),results.size()));
  System.out.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  Matrix matrix=MatrixLoader.load(""String_Node_Str"");
  int count=0;
  double mean=0;
  for (  MatchResult match : mixedResults) {
    Sequence s1=data.getSequence(match.getFromId());
    Sequence s2=data.getSequence(match.getToId());
    double score=computeAlignment(s1,s2,matrix);
    System.out.format(""String_Node_Str"",match,match.getScore(),score);
    mean+=match.getScore();
    count++;
    if (count > 200)     break;
  }
  mean=mean / count;
  System.out.println(""String_Node_Str"" + mean);
}","public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  double threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  int numThreads=Runtime.getRuntime().availableProcessors() * 2;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Double.parseDouble(args[++i]);
    }
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numWords);
  LogManager.getLogManager().reset();
  double kmerError=MinHashSearch.probabilityKmerMatches(DEFAULT_DATA_ERROR,kmerSize);
  System.out.println(""String_Node_Str"" + kmerError);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile);
  MinHashSearch hashSearch=new MinHashSearch(data.clone(),kmerSize,numWords,DEFAULT_NUM_MIN_MATCHES,DEFAULT_SUB_SEQUENCE_SIZE,numThreads,DEFAULT_LARGE_MEMORY,true,null,800);
  System.err.println(""String_Node_Str"" + data.getNumberProcessed() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  System.out.println(""String_Node_Str"" + data.getNumberProcessed() + ""String_Node_Str"");
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=hashSearch.findMatches(DEFAULT_THRESHOLD);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  ArrayList<MatchResult> mixedResults=new ArrayList<MatchResult>();
  Collections.sort(results);
  mixedResults.addAll(results.subList(0,Math.min(results.size(),100)));
  mixedResults.addAll(results.subList(Math.max(0,results.size() - 50),results.size()));
  System.out.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  Matrix matrix=MatrixLoader.load(""String_Node_Str"");
  int count=0;
  double mean=0;
  for (  MatchResult match : mixedResults) {
    Sequence s1=data.getSequence(match.getFromId());
    Sequence s2=data.getSequence(match.getToId());
    double score=computeAlignment(s1,s2,matrix);
    System.out.format(""String_Node_Str"",match,match.getScore(),score);
    mean+=match.getScore();
    count++;
    if (count > 200)     break;
  }
  mean=mean / count;
  System.out.println(""String_Node_Str"" + mean);
}",0.9992498124531132
169279,"public static void main(String[] args) throws Exception {
  Locale.setDefault(Locale.US);
  String inFile=null;
  String toFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  double threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  int numMinMatches=DEFAULT_NUM_MIN_MATCHES;
  int subSequenceSize=DEFAULT_SUB_SEQUENCE_SIZE;
  boolean storeInMemory=DEFAULT_LARGE_MEMORY;
  int numThreads=DEFAULT_NUM_THREADS;
  boolean noSelf=DEFAULT_NO_SELF;
  String filterFile=null;
  double filterThreshold=DEFAULT_FILTER_CUTOFF;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      toFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      filterFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Double.parseDouble(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      filterThreshold=Double.parseDouble(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numMinMatches=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      subSequenceSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numThreads=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      storeInMemory=false;
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      noSelf=true;
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + toFile);
  System.err.println(""String_Node_Str"" + filterFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + filterThreshold);
  System.err.println(""String_Node_Str"" + numWords);
  System.err.println(""String_Node_Str"" + numMinMatches);
  System.err.println(""String_Node_Str"" + subSequenceSize);
  System.err.println(""String_Node_Str"" + numThreads);
  System.err.println(""String_Node_Str"" + storeInMemory);
  System.err.println(""String_Node_Str"" + !noSelf);
  long startTotalTime=System.nanoTime();
  FastaData data=new FastaData(inFile);
  long startTime=System.nanoTime();
  HashSet<Integer> filter=null;
  if (filterFile != null) {
    System.err.println(""String_Node_Str"" + filterFile + ""String_Node_Str"");
    filter=Utils.createKmerFilter(filterFile,filterThreshold,kmerSize);
    System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  }
  long processTime=System.nanoTime();
  MinHashSearch hashSearch=new MinHashSearch(data,kmerSize,numWords,numMinMatches,subSequenceSize,numThreads,storeInMemory,false,filter);
  System.err.println(""String_Node_Str"" + data.getNumberProcessed() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - processTime) * 1.0e-9);
  long startTotalScoringTime=System.nanoTime();
  if (toFile == null) {
    startTime=System.nanoTime();
    hashSearch.findMatches(threshold);
    System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  }
 else {
    File file=new File(toFile);
    if (!file.exists())     throw new FastAlignRuntimeException(""String_Node_Str"");
    ArrayList<File> toFiles=new ArrayList<>();
    if (!file.isDirectory()) {
      toFiles.add(file);
    }
 else {
      File[] fileList=file.listFiles(new FilenameFilter(){
        @Override public boolean accept(        File dir,        String name){
          if (!name.startsWith(""String_Node_Str""))           return true;
          return false;
        }
      }
);
      for (      File cf : fileList)       toFiles.add(cf);
    }
    Collections.sort(toFiles);
    startTime=System.nanoTime();
    if (!noSelf) {
      hashSearch.findMatches(threshold);
      System.out.flush();
      System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
    }
    for (    File cf : toFiles) {
      data=new FastaData(cf.getCanonicalPath());
      System.err.println(""String_Node_Str"" + cf.getCanonicalPath() + ""String_Node_Str"");
      startTime=System.nanoTime();
      hashSearch.findMatches(data,threshold);
      System.out.flush();
      System.err.println(""String_Node_Str"" + data.getNumberProcessed() + ""String_Node_Str"");
      System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
    }
  }
  System.out.flush();
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTotalScoringTime) * 1.0e-9);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTotalTime) * 1.0e-9);
  System.err.println(""String_Node_Str"" + hashSearch.getMatchesProcessed());
  System.err.println(""String_Node_Str"" + (double)hashSearch.getMatchesProcessed() / (double)hashSearch.getNumberSequencesSearched() * 100.0);
  System.err.println(""String_Node_Str"" + (double)hashSearch.getNumberSequencesHit() / (double)(hashSearch.size() * hashSearch.getNumberSequencesSearched()) * 100.0);
  System.err.println(""String_Node_Str"" + (double)hashSearch.getMatchesProcessed() / (double)hashSearch.getNumberSequencesHit() * 100.0);
  System.err.println(""String_Node_Str"" + (double)hashSearch.getMatchesProcessed() / (double)hashSearch.getNumberSequencesFullyCompared() * 100.0);
  System.err.flush();
}","public static void main(String[] args) throws Exception {
  Locale.setDefault(Locale.US);
  String inFile=null;
  String toFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  double threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  int numMinMatches=DEFAULT_NUM_MIN_MATCHES;
  int subSequenceSize=DEFAULT_SUB_SEQUENCE_SIZE;
  boolean storeInMemory=DEFAULT_LARGE_MEMORY;
  int numThreads=DEFAULT_NUM_THREADS;
  boolean noSelf=DEFAULT_NO_SELF;
  String filterFile=null;
  double filterThreshold=DEFAULT_FILTER_CUTOFF;
  int maxShift=DEFAULT_MAX_SHIFT_ALLOWED;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      toFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      filterFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Double.parseDouble(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      filterThreshold=Double.parseDouble(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numMinMatches=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      subSequenceSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      maxShift=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numThreads=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      storeInMemory=false;
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      noSelf=true;
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + toFile);
  System.err.println(""String_Node_Str"" + filterFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + filterThreshold);
  System.err.println(""String_Node_Str"" + numWords);
  System.err.println(""String_Node_Str"" + numMinMatches);
  System.err.println(""String_Node_Str"" + subSequenceSize);
  System.err.println(""String_Node_Str"" + maxShift);
  System.err.println(""String_Node_Str"" + numThreads);
  System.err.println(""String_Node_Str"" + storeInMemory);
  System.err.println(""String_Node_Str"" + !noSelf);
  long startTotalTime=System.nanoTime();
  FastaData data=new FastaData(inFile);
  long startTime=System.nanoTime();
  HashSet<Integer> filter=null;
  if (filterFile != null) {
    System.err.println(""String_Node_Str"" + filterFile + ""String_Node_Str"");
    filter=Utils.createKmerFilter(filterFile,filterThreshold,kmerSize);
    System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  }
  long processTime=System.nanoTime();
  MinHashSearch hashSearch=new MinHashSearch(data,kmerSize,numWords,numMinMatches,subSequenceSize,numThreads,storeInMemory,false,filter,maxShift);
  System.err.println(""String_Node_Str"" + data.getNumberProcessed() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - processTime) * 1.0e-9);
  long startTotalScoringTime=System.nanoTime();
  if (toFile == null) {
    startTime=System.nanoTime();
    hashSearch.findMatches(threshold);
    System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  }
 else {
    File file=new File(toFile);
    if (!file.exists())     throw new FastAlignRuntimeException(""String_Node_Str"");
    ArrayList<File> toFiles=new ArrayList<>();
    if (!file.isDirectory()) {
      toFiles.add(file);
    }
 else {
      File[] fileList=file.listFiles(new FilenameFilter(){
        @Override public boolean accept(        File dir,        String name){
          if (!name.startsWith(""String_Node_Str""))           return true;
          return false;
        }
      }
);
      for (      File cf : fileList)       toFiles.add(cf);
    }
    Collections.sort(toFiles);
    startTime=System.nanoTime();
    if (!noSelf) {
      hashSearch.findMatches(threshold);
      System.out.flush();
      System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
    }
    for (    File cf : toFiles) {
      data=new FastaData(cf.getCanonicalPath());
      System.err.println(""String_Node_Str"" + cf.getCanonicalPath() + ""String_Node_Str"");
      startTime=System.nanoTime();
      hashSearch.findMatches(data,threshold);
      System.out.flush();
      System.err.println(""String_Node_Str"" + data.getNumberProcessed() + ""String_Node_Str"");
      System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
    }
  }
  System.out.flush();
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTotalScoringTime) * 1.0e-9);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTotalTime) * 1.0e-9);
  System.err.println(""String_Node_Str"" + hashSearch.getMatchesProcessed());
  System.err.println(""String_Node_Str"" + (double)hashSearch.getMatchesProcessed() / (double)hashSearch.getNumberSequencesSearched() * 100.0);
  System.err.println(""String_Node_Str"" + (double)hashSearch.getNumberSequencesHit() / (double)(hashSearch.size() * hashSearch.getNumberSequencesSearched()) * 100.0);
  System.err.println(""String_Node_Str"" + (double)hashSearch.getMatchesProcessed() / (double)hashSearch.getNumberSequencesHit() * 100.0);
  System.err.println(""String_Node_Str"" + (double)hashSearch.getMatchesProcessed() / (double)hashSearch.getNumberSequencesFullyCompared() * 100.0);
  System.err.flush();
}",0.9795952925239184
169280,"public static void printUsage(String error){
  if (error != null) {
    System.err.println(error);
  }
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + DEFAULT_KMER_SIZE);
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + DEFAULT_NUM_WORDS);
  System.err.println(""String_Node_Str"" + DEFAULT_THRESHOLD);
  System.err.println(""String_Node_Str"" + DEFAULT_NUM_MIN_MATCHES);
  System.err.println(""String_Node_Str"" + DEFAULT_NUM_THREADS);
  System.err.println(""String_Node_Str"" + DEFAULT_SUB_SEQUENCE_SIZE);
  System.err.println(""String_Node_Str"" + DEFAULT_NO_SELF);
  System.exit(1);
}","public static void printUsage(String error){
  if (error != null) {
    System.err.println(error);
  }
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + DEFAULT_KMER_SIZE);
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + DEFAULT_NUM_WORDS);
  System.err.println(""String_Node_Str"" + DEFAULT_THRESHOLD);
  System.err.println(""String_Node_Str"" + DEFAULT_MAX_SHIFT_ALLOWED);
  System.err.println(""String_Node_Str"" + DEFAULT_NUM_MIN_MATCHES);
  System.err.println(""String_Node_Str"" + DEFAULT_NUM_THREADS);
  System.err.println(""String_Node_Str"" + DEFAULT_SUB_SEQUENCE_SIZE);
  System.err.println(""String_Node_Str"" + DEFAULT_NO_SELF);
  System.exit(1);
}",0.952116585704372
169281,"public MinHashSearch(FastaData data,int kmerSize,int numHashes,int numMinMatches,int subSequenceSize,int numThreads,boolean storeKmerInMemory,boolean storeResults,HashSet<Integer> filter) throws IOException {
  super(kmerSize,numHashes,numThreads,storeResults);
  this.numMinMatches=numMinMatches;
  this.subSequenceSize=subSequenceSize;
  this.storeKmerInMemory=storeKmerInMemory;
  this.numberSubSequencesHit=new AtomicLong();
  this.numberSequencesHit=new AtomicLong();
  this.numberSequencesFullyCompared=new AtomicLong();
  this.filter=filter;
  data.enqueueFullFile();
  this.sequenceVectorsHash=new ConcurrentHashMap<SequenceId,SequenceMinHashes>((int)data.getNumberProcessed() * 2 + 100,(float)0.75,this.numThreads);
  this.hashes=new ArrayList<HashMap<Integer,ArrayList<SubSequenceId>>>(numHashes);
  for (int iter=0; iter < numHashes; iter++)   this.hashes.add(new HashMap<Integer,ArrayList<SubSequenceId>>((int)data.getNumberProcessed() * 2 * 10));
  addData(data);
}","public MinHashSearch(FastaData data,int kmerSize,int numHashes,int numMinMatches,int subSequenceSize,int numThreads,boolean storeKmerInMemory,boolean storeResults,HashSet<Integer> filter,int maxShift) throws IOException {
  super(kmerSize,numHashes,numThreads,storeResults);
  this.numMinMatches=numMinMatches;
  this.subSequenceSize=subSequenceSize;
  this.storeKmerInMemory=storeKmerInMemory;
  this.numberSubSequencesHit=new AtomicLong();
  this.numberSequencesHit=new AtomicLong();
  this.numberSequencesFullyCompared=new AtomicLong();
  this.maxShift=maxShift;
  this.filter=filter;
  data.enqueueFullFile();
  this.sequenceVectorsHash=new ConcurrentHashMap<SequenceId,SequenceMinHashes>((int)data.getNumberProcessed() * 2 + 100,(float)0.75,this.numThreads);
  this.hashes=new ArrayList<HashMap<Integer,ArrayList<SubSequenceId>>>(numHashes);
  for (int iter=0; iter < numHashes; iter++)   this.hashes.add(new HashMap<Integer,ArrayList<SubSequenceId>>((int)data.getNumberProcessed() * 2 * 10));
  addData(data);
}",0.9804511278195488
169282,"@Override public List<MatchResult> findMatches(SequenceMinHashes seqMinHashes,double minScore,boolean allToAll){
  MinHash minHash=seqMinHashes.getMainHashes();
  if (this.hashes.size() != minHash.numHashes())   throw new FastAlignRuntimeException(""String_Node_Str"" + this.hashes.size() + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  HashMap<MatchId,HitInfo> matchHitMap=new HashMap<MatchId,HitInfo>(size() / 10 + 1);
  int[][] subSeqMinHashes=minHash.getSubSeqMinHashes();
  for (int subSequence=0; subSequence < subSeqMinHashes.length; subSequence++) {
    int hashIndex=0;
    for (    HashMap<Integer,ArrayList<SubSequenceId>> currHash : this.hashes) {
      ArrayList<SubSequenceId> currentHashMatchList=currHash.get(subSeqMinHashes[subSequence][hashIndex]);
      if (currentHashMatchList != null) {
        for (        SubSequenceId subSequenceId : currentHashMatchList) {
          MatchId matchedId=new MatchId(subSequenceId,subSequence);
          HitInfo currentHitInfo=matchHitMap.get(matchedId);
          if (currentHitInfo == null) {
            currentHitInfo=new HitInfo();
            matchHitMap.put(matchedId,currentHitInfo);
          }
          currentHitInfo.addHit();
        }
      }
      hashIndex++;
    }
  }
  this.numberSubSequencesHit.getAndAdd(matchHitMap.size());
  HashMap<SequenceId,Integer> bestSequenceHit=new HashMap<SequenceId,Integer>(matchHitMap.size());
  for (  Entry<MatchId,HitInfo> match : matchHitMap.entrySet()) {
    SequenceId currId=match.getKey().id.getId();
    int currValue=match.getValue().count;
    Integer prevBestCount=bestSequenceHit.get(currId);
    if (prevBestCount == null || prevBestCount < currValue)     bestSequenceHit.put(currId,currValue);
  }
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  int[][] fullKmerMatch=null;
  for (  Entry<SequenceId,Integer> match : bestSequenceHit.entrySet()) {
    if (match.getKey().getHeaderId() == seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (allToAll && match.getKey().getHeaderId() > seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue() >= this.numMinMatches) {
      SequenceMinHashes matchedHash=this.sequenceVectorsHash.get(match.getKey());
      if (fullKmerMatch == null)       fullKmerMatch=seqMinHashes.getFullHashes();
      Pair<Double,Integer> result=seqMinHashes.getFullScore(fullKmerMatch,matchedHash);
      double matchScore=result.x;
      int shift=result.y;
      int shiftb=-shift - seqMinHashes.getSequenceLength() + matchedHash.getSequenceLength();
      this.numberSequencesFullyCompared.getAndIncrement();
      if (matchScore >= minScore) {
        MatchResult currResult=new MatchResult(seqMinHashes.getSequenceId(),match.getKey(),matchScore,-shift,shiftb);
        matches.add(currResult);
      }
    }
  }
  return matches;
}","@Override public List<MatchResult> findMatches(SequenceMinHashes seqMinHashes,double minScore,boolean allToAll){
  MinHash minHash=seqMinHashes.getMainHashes();
  if (this.hashes.size() != minHash.numHashes())   throw new FastAlignRuntimeException(""String_Node_Str"" + this.hashes.size() + ""String_Node_Str""+ minHash.numHashes()+ ""String_Node_Str"");
  HashMap<MatchId,HitInfo> matchHitMap=new HashMap<MatchId,HitInfo>(size() / 10 + 1);
  int[][] subSeqMinHashes=minHash.getSubSeqMinHashes();
  for (int subSequence=0; subSequence < subSeqMinHashes.length; subSequence++) {
    int hashIndex=0;
    for (    HashMap<Integer,ArrayList<SubSequenceId>> currHash : this.hashes) {
      ArrayList<SubSequenceId> currentHashMatchList=currHash.get(subSeqMinHashes[subSequence][hashIndex]);
      if (currentHashMatchList != null) {
        for (        SubSequenceId subSequenceId : currentHashMatchList) {
          MatchId matchedId=new MatchId(subSequenceId,subSequence);
          HitInfo currentHitInfo=matchHitMap.get(matchedId);
          if (currentHitInfo == null) {
            currentHitInfo=new HitInfo();
            matchHitMap.put(matchedId,currentHitInfo);
          }
          currentHitInfo.addHit();
        }
      }
      hashIndex++;
    }
  }
  this.numberSubSequencesHit.getAndAdd(matchHitMap.size());
  HashMap<SequenceId,Integer> bestSequenceHit=new HashMap<SequenceId,Integer>(matchHitMap.size());
  for (  Entry<MatchId,HitInfo> match : matchHitMap.entrySet()) {
    SequenceId currId=match.getKey().id.getId();
    int currValue=match.getValue().count;
    Integer prevBestCount=bestSequenceHit.get(currId);
    if (prevBestCount == null || prevBestCount < currValue)     bestSequenceHit.put(currId,currValue);
  }
  this.numberSequencesHit.getAndAdd(bestSequenceHit.size());
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>(32);
  int[][] fullKmerMatch=null;
  for (  Entry<SequenceId,Integer> match : bestSequenceHit.entrySet()) {
    if (match.getKey().getHeaderId() == seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (allToAll && match.getKey().getHeaderId() > seqMinHashes.getSequenceId().getHeaderId())     continue;
    if (match.getValue() >= this.numMinMatches) {
      SequenceMinHashes matchedHash=this.sequenceVectorsHash.get(match.getKey());
      if (fullKmerMatch == null)       fullKmerMatch=seqMinHashes.getFullHashes();
      Pair<Double,Integer> result=seqMinHashes.getFullScore(fullKmerMatch,matchedHash,maxShift);
      double matchScore=result.x;
      int shift=result.y;
      int shiftb=-shift - seqMinHashes.getSequenceLength() + matchedHash.getSequenceLength();
      this.numberSequencesFullyCompared.getAndIncrement();
      if (matchScore >= minScore) {
        MatchResult currResult=new MatchResult(seqMinHashes.getSequenceId(),match.getKey(),matchScore,-shift,shiftb);
        matches.add(currResult);
      }
    }
  }
  return matches;
}",0.9984570546888394
169283,"public Pair<Double,Integer> getFullScore(int[][] allKmerHashes,SequenceMinHashes s){
  if (allKmerHashes == null)   throw new FastAlignRuntimeException(""String_Node_Str"");
  int[][] sAllKmerHashes=s.getFullHashes();
  int valid1Lower=0;
  int valid1Upper=allKmerHashes.length;
  int valid2Lower=0;
  int valid2Upper=sAllKmerHashes.length;
  int overlapSize=0;
  int border=MAX_SHIFT_ALLOWED;
  int count=0;
  int shift=0;
  int[] posShift=new int[Math.min(allKmerHashes.length,sAllKmerHashes.length)];
  for (int repeat=0; repeat < NUM_SCORING_REPEATS; repeat++) {
    count=0;
    int iter1=0;
    int iter2=0;
    while (iter1 < valid1Upper && iter2 < valid2Upper) {
      int[] s1=allKmerHashes[iter1];
      int[] s2=sAllKmerHashes[iter2];
      if (s1[0] < s2[0] || s1[1] < valid1Lower || s1[1] >= valid1Upper)       iter1++;
 else       if (s2[0] < s1[0] || s2[1] < valid2Lower || s2[1] >= valid2Upper)       iter2++;
 else {
        posShift[count]=s2[1] - s1[1];
        count++;
        iter1++;
        iter2++;
      }
    }
    if (count > 0) {
      shift=Utils.quickSelect(posShift,count / 2,count);
    }
 else     shift=0;
    valid1Lower=Math.max(0,-shift - border);
    valid1Upper=Math.min(allKmerHashes.length,sAllKmerHashes.length - shift + border);
    valid2Lower=Math.max(0,shift - border);
    valid2Upper=Math.min(sAllKmerHashes.length,allKmerHashes.length + shift + border);
    int valid2LowerBorder=Math.max(0,shift);
    int valid2UpperBorder=Math.min(sAllKmerHashes.length,allKmerHashes.length + shift);
    overlapSize=valid2UpperBorder - valid2LowerBorder;
  }
  int validCount=0;
  for (int iter=0; iter < count; iter++) {
    if (Math.abs(posShift[iter] - shift) <= MAX_SHIFT_ALLOWED)     validCount++;
  }
  double validShiftPercent=(double)validCount / (double)count;
  double score=0;
  if (overlapSize > 0 && validShiftPercent > SHIFT_CONSENSUS_PERCENTAGE)   score=(double)count / (double)(overlapSize);
  return new Pair<Double,Integer>(score,shift);
}","public Pair<Double,Integer> getFullScore(int[][] allKmerHashes,SequenceMinHashes s,int maxShift){
  if (allKmerHashes == null)   throw new FastAlignRuntimeException(""String_Node_Str"");
  int[][] sAllKmerHashes=s.getFullHashes();
  int valid1Lower=0;
  int valid1Upper=allKmerHashes.length;
  int valid2Lower=0;
  int valid2Upper=sAllKmerHashes.length;
  int overlapSize=0;
  int border=maxShift;
  int count=0;
  int shift=0;
  int[] posShift=new int[Math.min(allKmerHashes.length,sAllKmerHashes.length)];
  int numScoringRepeats=2;
  if (maxShift <= 0)   numScoringRepeats=1;
  maxShift=Math.abs(maxShift);
  for (int repeat=0; repeat < numScoringRepeats; repeat++) {
    count=0;
    int iter1=0;
    int iter2=0;
    while (iter1 < allKmerHashes.length && iter2 < sAllKmerHashes.length) {
      int[] s1=allKmerHashes[iter1];
      int[] s2=sAllKmerHashes[iter2];
      if (s1[0] < s2[0] || s1[1] < valid1Lower || s1[1] >= valid1Upper)       iter1++;
 else       if (s2[0] < s1[0] || s2[1] < valid2Lower || s2[1] >= valid2Upper)       iter2++;
 else {
        posShift[count]=s2[1] - s1[1];
        count++;
        iter1++;
        iter2++;
      }
    }
    if (count > 0) {
      shift=Utils.quickSelect(posShift,count / 2,count);
    }
 else     shift=0;
    valid1Lower=Math.max(0,-shift - border);
    valid1Upper=Math.min(allKmerHashes.length,sAllKmerHashes.length - shift + border);
    valid2Lower=Math.max(0,shift - border);
    valid2Upper=Math.min(sAllKmerHashes.length,allKmerHashes.length + shift + border);
    int valid2LowerBorder=Math.max(0,shift);
    int valid2UpperBorder=Math.min(sAllKmerHashes.length,allKmerHashes.length + shift);
    overlapSize=valid2UpperBorder - valid2LowerBorder;
  }
  int validCount=0;
  for (int iter=0; iter < count; iter++) {
    if (Math.abs(posShift[iter] - shift) <= maxShift)     validCount++;
  }
  double validShiftPercent=(double)validCount / (double)count;
  double score=0;
  if (overlapSize > 0 && validShiftPercent > SHIFT_CONSENSUS_PERCENTAGE)   score=(double)count / (double)(overlapSize);
  return new Pair<Double,Integer>(score,shift);
}",0.9243533430941924
169284,"public AbstractSequenceHashes(Sequence seq){
  this.id=seq.getId();
  this.length=seq.length();
}","public AbstractSequenceHashes(Sequence seq){
  this.length=seq.length();
}",0.8654970760233918
169285,"public int numKmers(int kmerSize){
  return this.sequence.length() - kmerSize;
}","public int numKmers(int kmerSize){
  return this.sequence.length() - kmerSize + 1;
}",0.975609756097561
169286,"public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  int threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  int maxSkip=DEFAULT_SKIP;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      maxSkip=Integer.parseInt(args[++i]);
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numWords);
  System.err.println(""String_Node_Str"" + maxSkip);
  LogManager.getLogManager().reset();
  double kmerError=MinHashSearch.probabilityKmerMatches(DEFAULT_DATA_ERROR,kmerSize);
  System.out.println(""String_Node_Str"" + kmerError);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile,fastaSuffix,kmerSize);
  System.out.println(""String_Node_Str"" + data.size() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  MinHashSearch hashSearch=new MinHashSearch(kmerSize,numWords);
  hashSearch.addData(data);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=hashSearch.findMatches(Double.NEGATIVE_INFINITY);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  ArrayList<MatchResult> mixedResults=new ArrayList<MatchResult>();
  Collections.sort(results);
  mixedResults.addAll(results.subList(0,Math.min(results.size(),100)));
  mixedResults.addAll(results.subList(Math.max(0,results.size() - 20),results.size()));
  System.out.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  Matrix matrix=MatrixLoader.load(""String_Node_Str"");
  int count=0;
  double mean=0;
  for (  MatchResult match : mixedResults) {
    Sequence s1=data.getSequence(match.getFromId());
    Sequence s2=data.getSequence(match.getToId());
    if (!match.getFromId().isForward())     s1=s1.getReverseCompliment();
    if (!match.getToId().isForward())     s2=s2.getReverseCompliment();
    double score=computeAlignment(s1,s2,matrix);
    System.out.format(""String_Node_Str"",match.getScore(),score,match.getFromId().toStringInt(),match.getToId().toStringInt(),match.getFromShift());
    mean+=match.getScore();
    count++;
    if (count > 200)     break;
  }
  mean=mean / count;
  System.out.println(""String_Node_Str"" + mean);
}","public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  int threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  int maxSkip=DEFAULT_SKIP;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      maxSkip=Integer.parseInt(args[++i]);
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numWords);
  System.err.println(""String_Node_Str"" + maxSkip);
  LogManager.getLogManager().reset();
  double kmerError=MinHashSearch.probabilityKmerMatches(DEFAULT_DATA_ERROR,kmerSize);
  System.out.println(""String_Node_Str"" + kmerError);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile,fastaSuffix,kmerSize);
  System.out.println(""String_Node_Str"" + data.size() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  MinHashSearch hashSearch=new MinHashSearch(kmerSize,numWords);
  hashSearch.addData(data);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=hashSearch.findMatches(0.07);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  ArrayList<MatchResult> mixedResults=new ArrayList<MatchResult>();
  Collections.sort(results);
  mixedResults.addAll(results.subList(0,Math.min(results.size(),100)));
  mixedResults.addAll(results.subList(Math.max(0,results.size() - 50),results.size()));
  System.out.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  Matrix matrix=MatrixLoader.load(""String_Node_Str"");
  int count=0;
  double mean=0;
  for (  MatchResult match : mixedResults) {
    Sequence s1=data.getSequence(match.getFromId());
    Sequence s2=data.getSequence(match.getToId());
    double score=computeAlignment(s1,s2,matrix);
    System.out.format(""String_Node_Str"",match.getScore(),score,match.getFromId().toStringInt(),match.getToId().toStringInt(),match.getFromShift());
    mean+=match.getScore();
    count++;
    if (count > 200)     break;
  }
  mean=mean / count;
  System.out.println(""String_Node_Str"" + mean);
}",0.96991452991453
169287,"public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  double threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Double.parseDouble(args[++i]);
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numWords);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile,fastaSuffix,kmerSize);
  System.err.println(""String_Node_Str"" + data.size() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  AbstractHashSearch<?,?> hashSearch=new SimHashSearch(kmerSize,numWords);
  hashSearch.addData(data);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=hashSearch.findMatches(threshold);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  Collections.sort(results);
  System.err.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  for (  MatchResult match : results) {
    System.out.format(""String_Node_Str"",match.getScore(),match.getFromId().toStringInt(),match.getToId().toStringInt(),match.getFromShift());
  }
}","public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  double threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Double.parseDouble(args[++i]);
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numWords);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile,fastaSuffix,kmerSize);
  System.err.println(""String_Node_Str"" + data.size() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  MinHashSearch hashSearch=new MinHashSearch(kmerSize,numWords);
  hashSearch.addData(data);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=hashSearch.findMatches(threshold);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  Collections.sort(results);
  System.err.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  for (  MatchResult match : results) {
    System.out.format(""String_Node_Str"",match.getScore(),match.getFromId().toStringInt(),match.getToId().toStringInt(),match.getFromShift());
  }
}",0.988197424892704
169288,"public MinHash(Sequence seq,int kmerSize,int numWords){
  super(seq);
  long[][] hashes=AbstractSequenceHashes.computeKmerHashes(seq,kmerSize,numWords / 2);
  int[] minHashes=new int[numWords];
  int[] pos=new int[numWords];
  Arrays.fill(minHashes,Integer.MAX_VALUE);
  for (int kmerIndex=0; kmerIndex < hashes.length; kmerIndex++)   for (int hashIndex=0; hashIndex < numWords; hashIndex+=2) {
    long val=hashes[kmerIndex][hashIndex / 2];
    int i1=(int)(val >> 32);
    int i2=(int)val;
    if (i1 < minHashes[hashIndex])     minHashes[hashIndex]=i1;
    if (i2 < minHashes[hashIndex + 1])     minHashes[hashIndex + 1]=i2;
  }
  this.minHashes=minHashes;
  this.hashPositions=pos;
}","public MinHash(Sequence seq,int kmerSize,int numWords){
  super(seq);
  long[][] hashes=Utils.computeKmerHashes(seq,kmerSize,numWords / 2);
  int[] minHashes=new int[numWords];
  int[] pos=new int[numWords];
  Arrays.fill(minHashes,Integer.MAX_VALUE);
  for (int kmerIndex=0; kmerIndex < hashes.length; kmerIndex++)   for (int hashIndex=0; hashIndex < numWords; hashIndex+=2) {
    long val=hashes[kmerIndex][hashIndex / 2];
    int i1=(int)(val >> 32);
    int i2=(int)val;
    if (i1 < minHashes[hashIndex])     minHashes[hashIndex]=i1;
    if (i2 < minHashes[hashIndex + 1])     minHashes[hashIndex + 1]=i2;
  }
  this.minHashes=minHashes;
  this.hashPositions=pos;
}",0.9815770081061164
169289,"public AbstractSequenceHashes(Sequence seq){
  this.id=seq.getId();
  this.length=seq.length();
}","public AbstractSequenceHashes(Sequence seq){
  this.length=seq.length();
}",0.8654970760233918
169290,"public int numKmers(int kmerSize){
  return this.sequence.length() - kmerSize;
}","public int numKmers(int kmerSize){
  return this.sequence.length() - kmerSize + 1;
}",0.975609756097561
169291,"public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  int threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  int maxSkip=DEFAULT_SKIP;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      maxSkip=Integer.parseInt(args[++i]);
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numWords);
  System.err.println(""String_Node_Str"" + maxSkip);
  LogManager.getLogManager().reset();
  double kmerError=MinHashSearch.probabilityKmerMatches(DEFAULT_DATA_ERROR,kmerSize);
  System.out.println(""String_Node_Str"" + kmerError);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile,fastaSuffix,kmerSize);
  System.out.println(""String_Node_Str"" + data.size() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  MinHashSearch hashSearch=new MinHashSearch(kmerSize,numWords);
  hashSearch.addData(data);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=hashSearch.findMatches(Double.NEGATIVE_INFINITY);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  ArrayList<MatchResult> mixedResults=new ArrayList<MatchResult>();
  Collections.sort(results);
  mixedResults.addAll(results.subList(0,Math.min(results.size(),100)));
  mixedResults.addAll(results.subList(Math.max(0,results.size() - 20),results.size()));
  System.out.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  Matrix matrix=MatrixLoader.load(""String_Node_Str"");
  int count=0;
  double mean=0;
  for (  MatchResult match : mixedResults) {
    Sequence s1=data.getSequence(match.getFromId());
    Sequence s2=data.getSequence(match.getToId());
    if (!match.getFromId().isForward())     s1=s1.getReverseCompliment();
    if (!match.getToId().isForward())     s2=s2.getReverseCompliment();
    double score=computeAlignment(s1,s2,matrix);
    System.out.format(""String_Node_Str"",match.getScore(),score,match.getFromId().toStringInt(),match.getToId().toStringInt(),match.getFromShift());
    mean+=match.getScore();
    count++;
    if (count > 200)     break;
  }
  mean=mean / count;
  System.out.println(""String_Node_Str"" + mean);
}","public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  int threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  int maxSkip=DEFAULT_SKIP;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      maxSkip=Integer.parseInt(args[++i]);
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numWords);
  System.err.println(""String_Node_Str"" + maxSkip);
  LogManager.getLogManager().reset();
  double kmerError=MinHashSearch.probabilityKmerMatches(DEFAULT_DATA_ERROR,kmerSize);
  System.out.println(""String_Node_Str"" + kmerError);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile,fastaSuffix,kmerSize);
  System.out.println(""String_Node_Str"" + data.size() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  MinHashSearch hashSearch=new MinHashSearch(kmerSize,numWords);
  hashSearch.addData(data);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=hashSearch.findMatches(0.07);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  ArrayList<MatchResult> mixedResults=new ArrayList<MatchResult>();
  Collections.sort(results);
  mixedResults.addAll(results.subList(0,Math.min(results.size(),100)));
  mixedResults.addAll(results.subList(Math.max(0,results.size() - 50),results.size()));
  System.out.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  Matrix matrix=MatrixLoader.load(""String_Node_Str"");
  int count=0;
  double mean=0;
  for (  MatchResult match : mixedResults) {
    Sequence s1=data.getSequence(match.getFromId());
    Sequence s2=data.getSequence(match.getToId());
    double score=computeAlignment(s1,s2,matrix);
    System.out.format(""String_Node_Str"",match.getScore(),score,match.getFromId().toStringInt(),match.getToId().toStringInt(),match.getFromShift());
    mean+=match.getScore();
    count++;
    if (count > 200)     break;
  }
  mean=mean / count;
  System.out.println(""String_Node_Str"" + mean);
}",0.96991452991453
169292,"public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  double threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Double.parseDouble(args[++i]);
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numWords);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile,fastaSuffix,kmerSize);
  System.err.println(""String_Node_Str"" + data.size() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  AbstractHashSearch<?,?> hashSearch=new SimHashSearch(kmerSize,numWords);
  hashSearch.addData(data);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=hashSearch.findMatches(threshold);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  Collections.sort(results);
  System.err.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  for (  MatchResult match : results) {
    System.out.format(""String_Node_Str"",match.getScore(),match.getFromId().toStringInt(),match.getToId().toStringInt(),match.getFromShift());
  }
}","public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  double threshold=DEFAULT_THRESHOLD;
  int numWords=DEFAULT_NUM_WORDS;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numWords=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Double.parseDouble(args[++i]);
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numWords);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile,fastaSuffix,kmerSize);
  System.err.println(""String_Node_Str"" + data.size() + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  MinHashSearch hashSearch=new MinHashSearch(kmerSize,numWords);
  hashSearch.addData(data);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=hashSearch.findMatches(threshold);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  Collections.sort(results);
  System.err.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  for (  MatchResult match : results) {
    System.out.format(""String_Node_Str"",match.getScore(),match.getFromId().toStringInt(),match.getToId().toStringInt(),match.getFromShift());
  }
}",0.988197424892704
169293,"public MinHash(Sequence seq,int kmerSize,int numWords){
  super(seq);
  long[][] hashes=AbstractSequenceHashes.computeKmerHashes(seq,kmerSize,numWords / 2);
  int[] minHashes=new int[numWords];
  int[] pos=new int[numWords];
  Arrays.fill(minHashes,Integer.MAX_VALUE);
  for (int kmerIndex=0; kmerIndex < hashes.length; kmerIndex++)   for (int hashIndex=0; hashIndex < numWords; hashIndex+=2) {
    long val=hashes[kmerIndex][hashIndex / 2];
    int i1=(int)(val >> 32);
    int i2=(int)val;
    if (i1 < minHashes[hashIndex])     minHashes[hashIndex]=i1;
    if (i2 < minHashes[hashIndex + 1])     minHashes[hashIndex + 1]=i2;
  }
  this.minHashes=minHashes;
  this.hashPositions=pos;
}","public MinHash(Sequence seq,int kmerSize,int numWords){
  super(seq);
  long[][] hashes=Utils.computeKmerHashes(seq,kmerSize,numWords / 2);
  int[] minHashes=new int[numWords];
  int[] pos=new int[numWords];
  Arrays.fill(minHashes,Integer.MAX_VALUE);
  for (int kmerIndex=0; kmerIndex < hashes.length; kmerIndex++)   for (int hashIndex=0; hashIndex < numWords; hashIndex+=2) {
    long val=hashes[kmerIndex][hashIndex / 2];
    int i1=(int)(val >> 32);
    int i2=(int)val;
    if (i1 < minHashes[hashIndex])     minHashes[hashIndex]=i1;
    if (i2 < minHashes[hashIndex + 1])     minHashes[hashIndex + 1]=i2;
  }
  this.minHashes=minHashes;
  this.hashPositions=pos;
}",0.9815770081061164
169294,"public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_K;
  int threshold=DEFAULT_THRESHOLD;
  int numHashes=DEFAULT_HASHES;
  int maxSkip=DEFAULT_SKIP;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numHashes=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      maxSkip=Integer.parseInt(args[++i]);
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numHashes);
  System.err.println(""String_Node_Str"" + maxSkip);
  long startTime=System.nanoTime();
  ReadData data=new ReadData(inFile,fastaSuffix,kmerSize);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) / 1.0e-9);
  startTime=System.nanoTime();
  MinHash minHash=new MinHash(numHashes);
  minHash.addData(data);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) / 1.0e-9);
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=new ArrayList<MatchResult>();
  for (  Sequence seq : data.getSequences()) {
    List<MatchResult> matches=minHash.findMatches(seq,0.0);
    results.addAll(matches);
  }
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) / 1.0e-9);
  for (  MatchResult match : results) {
    System.out.format(""String_Node_Str"",match.getFromId(),match.getToId(),match.getScore());
  }
}","public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  int threshold=DEFAULT_THRESHOLD;
  int numHashes=DEFAULT_NUM_HASHES;
  int maxSkip=DEFAULT_SKIP;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numHashes=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      maxSkip=Integer.parseInt(args[++i]);
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numHashes);
  System.err.println(""String_Node_Str"" + maxSkip);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile,fastaSuffix,kmerSize);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  startTime=System.nanoTime();
  MinHash minHash=new MinHash(numHashes);
  minHash.addData(data);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=new ArrayList<MatchResult>();
  for (  Sequence seq : data.getSequences()) {
    List<MatchResult> matches=minHash.findMatches(seq,0.0);
    results.addAll(matches);
  }
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  System.out.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  for (  MatchResult match : results) {
    System.out.format(""String_Node_Str"",match.getFromId(),match.getToId(),match.getScore());
  }
}",0.9714285714285714
169295,"public static void printUsage(String error){
  if (error != null) {
    System.err.println(error);
  }
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + DEFAULT_K);
  System.err.println(""String_Node_Str"" + DEFAULT_HASHES);
  System.err.println(""String_Node_Str"" + DEFAULT_THRESHOLD);
  System.err.println(""String_Node_Str"" + DEFAULT_SKIP);
  System.exit(1);
}","public static void printUsage(String error){
  if (error != null) {
    System.err.println(error);
  }
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + DEFAULT_KMER_SIZE);
  System.err.println(""String_Node_Str"" + DEFAULT_NUM_HASHES);
  System.err.println(""String_Node_Str"" + DEFAULT_THRESHOLD);
  System.err.println(""String_Node_Str"" + DEFAULT_SKIP);
  System.exit(1);
}",0.9863013698630136
169296,"@Override public int compareTo(MatchResult o){
  return Double.compare(this.score,o.score);
}","@Override public int compareTo(MatchResult o){
  return -Double.compare(this.score,o.score);
}",0.9946524064171124
169297,"public List<MatchResult> findMatches(Sequence seq,double threshold){
  HashMap<SequenceId,Integer> counts=new HashMap<SequenceId,Integer>();
  long[] hashes=getHashes(seq);
  for (int hashIndex=0; hashIndex < this.numHashes; hashIndex++) {
    ArrayList<SequenceId> matchedList=this.hashes.get(hashIndex).get(hashes[hashIndex]);
    if (matchedList != null) {
      for (      SequenceId matchedId : matchedList) {
        Integer currentCount=counts.get(matchedId);
        if (currentCount == null)         counts.put(matchedId,1);
 else         counts.put(matchedId,currentCount + 1);
      }
    }
  }
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>();
  for (  SequenceId id : counts.keySet()) {
    int count=counts.get(id);
    double ratio=(double)this.seqLengths.get(id) / (double)seq.length();
    if (ratio < 1.0)     ratio=1.0 / ratio;
    double score=(double)count * ratio;
    if (score > threshold)     matches.add(new MatchResult(seq.getId(),id,score));
  }
  Collections.sort(matches);
  return matches;
}","public List<MatchResult> findMatches(Sequence seq,double threshold){
  HashMap<SequenceId,Integer> counts=new HashMap<SequenceId,Integer>();
  long[] hashes=getHashes(seq);
  for (int hashIndex=0; hashIndex < this.numHashes; hashIndex++) {
    ArrayList<SequenceId> matchedList=this.hashes.get(hashIndex).get(hashes[hashIndex]);
    if (matchedList != null) {
      for (      SequenceId matchedId : matchedList) {
        Integer currentCount=counts.get(matchedId);
        if (currentCount == null)         counts.put(matchedId,1);
 else         counts.put(matchedId,currentCount + 1);
      }
    }
  }
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>();
  for (  SequenceId id : counts.keySet()) {
    int count=counts.get(id);
    double ratio=(double)this.seqLengths.get(id) / (double)seq.length();
    if (ratio < 1.0)     ratio=1.0 / ratio;
    double score=(double)count * ratio / (double)this.numHashes;
    if (score > threshold)     matches.add(new MatchResult(seq.getId(),id,score));
  }
  Collections.sort(matches);
  return matches;
}",0.9880668257756564
169298,"public void addData(ReadData data){
  for (  Sequence seq : data.getSequences()) {
    addSequence(seq);
  }
}","public void addData(FastaData data){
  for (  Sequence seq : data.getSequences()) {
    addSequence(seq);
  }
}",0.9683257918552036
169299,"private long[] getHashes(Sequence seq){
  long[] hashes=new long[this.numHashes];
  for (int iter=0; iter < seq.numKmers(); iter++) {
    String kmer=seq.getKmer(iter);
    for (int hashIndex=0; hashIndex < this.numHashes; hashIndex++) {
      long salt=hashIndex * 10;
      long hash=hashBasic(kmer,salt);
      if (hash < hashes[hashIndex])       hashes[hashIndex]=hash;
    }
  }
  return hashes;
}","private long[] getHashes(Sequence seq){
  long[] hashes=new long[this.numHashes];
  Arrays.fill(hashes,Long.MAX_VALUE);
  for (int iter=0; iter < seq.numKmers(); iter++) {
    String kmer=seq.getKmer(iter);
    for (int hashIndex=0; hashIndex < this.numHashes; hashIndex++) {
      long salt=hashIndex * 10;
      long hash=hashBasic(kmer,salt);
      if (hash < hashes[hashIndex])       hashes[hashIndex]=hash;
    }
  }
  return hashes;
}",0.9548693586698336
169300,"public void addSequence(Sequence seq){
  this.seqLengths.put(seq.getId(),seq.length());
  long[] hashValues=getHashes(seq);
  int count=0;
  for (  HashMap<Long,ArrayList<SequenceId>> hash : this.hashes) {
    ArrayList<SequenceId> currList=hash.get(hashValues[count]);
    if (currList == null)     currList=new ArrayList<SequenceId>();
    currList.add(seq.getId());
    count++;
  }
}","public void addSequence(Sequence seq){
  this.seqLengths.put(seq.getId(),seq.length());
  long[] hashValues=getHashes(seq);
  int count=0;
  for (  HashMap<Long,ArrayList<SequenceId>> hash : this.hashes) {
    ArrayList<SequenceId> currList=hash.get(hashValues[count]);
    if (currList == null) {
      currList=new ArrayList<SequenceId>();
      hash.put(hashValues[count],currList);
    }
    currList.add(seq.getId());
    count++;
  }
}",0.9347826086956522
169301,"public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_K;
  int threshold=DEFAULT_THRESHOLD;
  int numHashes=DEFAULT_HASHES;
  int maxSkip=DEFAULT_SKIP;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numHashes=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      maxSkip=Integer.parseInt(args[++i]);
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numHashes);
  System.err.println(""String_Node_Str"" + maxSkip);
  long startTime=System.nanoTime();
  ReadData data=new ReadData(inFile,fastaSuffix,kmerSize);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) / 1.0e-9);
  startTime=System.nanoTime();
  MinHash minHash=new MinHash(numHashes);
  minHash.addData(data);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) / 1.0e-9);
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=new ArrayList<MatchResult>();
  for (  Sequence seq : data.getSequences()) {
    List<MatchResult> matches=minHash.findMatches(seq,0.0);
    results.addAll(matches);
  }
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) / 1.0e-9);
  for (  MatchResult match : results) {
    System.out.format(""String_Node_Str"",match.getFromId(),match.getToId(),match.getScore());
  }
}","public static void main(String[] args) throws Exception {
  String inFile=null;
  int kmerSize=DEFAULT_KMER_SIZE;
  int threshold=DEFAULT_THRESHOLD;
  int numHashes=DEFAULT_NUM_HASHES;
  int maxSkip=DEFAULT_SKIP;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      kmerSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      inFile=args[++i];
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      numHashes=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      threshold=Integer.parseInt(args[++i]);
    }
 else     if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      maxSkip=Integer.parseInt(args[++i]);
    }
  }
  if (inFile == null) {
    printUsage(""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"" + inFile);
  System.err.println(""String_Node_Str"" + kmerSize);
  System.err.println(""String_Node_Str"" + threshold);
  System.err.println(""String_Node_Str"" + numHashes);
  System.err.println(""String_Node_Str"" + maxSkip);
  long startTime=System.nanoTime();
  FastaData data=new FastaData(inFile,fastaSuffix,kmerSize);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  startTime=System.nanoTime();
  MinHash minHash=new MinHash(numHashes);
  minHash.addData(data);
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  startTime=System.nanoTime();
  ArrayList<MatchResult> results=new ArrayList<MatchResult>();
  for (  Sequence seq : data.getSequences()) {
    List<MatchResult> matches=minHash.findMatches(seq,0.0);
    results.addAll(matches);
  }
  System.err.println(""String_Node_Str"" + (System.nanoTime() - startTime) * 1.0e-9);
  System.out.println(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  for (  MatchResult match : results) {
    System.out.format(""String_Node_Str"",match.getFromId(),match.getToId(),match.getScore());
  }
}",0.9714285714285714
169302,"public static void printUsage(String error){
  if (error != null) {
    System.err.println(error);
  }
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + DEFAULT_K);
  System.err.println(""String_Node_Str"" + DEFAULT_HASHES);
  System.err.println(""String_Node_Str"" + DEFAULT_THRESHOLD);
  System.err.println(""String_Node_Str"" + DEFAULT_SKIP);
  System.exit(1);
}","public static void printUsage(String error){
  if (error != null) {
    System.err.println(error);
  }
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + DEFAULT_KMER_SIZE);
  System.err.println(""String_Node_Str"" + DEFAULT_NUM_HASHES);
  System.err.println(""String_Node_Str"" + DEFAULT_THRESHOLD);
  System.err.println(""String_Node_Str"" + DEFAULT_SKIP);
  System.exit(1);
}",0.9863013698630136
169303,"@Override public int compareTo(MatchResult o){
  return Double.compare(this.score,o.score);
}","@Override public int compareTo(MatchResult o){
  return -Double.compare(this.score,o.score);
}",0.9946524064171124
169304,"public List<MatchResult> findMatches(Sequence seq,double threshold){
  HashMap<SequenceId,Integer> counts=new HashMap<SequenceId,Integer>();
  long[] hashes=getHashes(seq);
  for (int hashIndex=0; hashIndex < this.numHashes; hashIndex++) {
    ArrayList<SequenceId> matchedList=this.hashes.get(hashIndex).get(hashes[hashIndex]);
    if (matchedList != null) {
      for (      SequenceId matchedId : matchedList) {
        Integer currentCount=counts.get(matchedId);
        if (currentCount == null)         counts.put(matchedId,1);
 else         counts.put(matchedId,currentCount + 1);
      }
    }
  }
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>();
  for (  SequenceId id : counts.keySet()) {
    int count=counts.get(id);
    double ratio=(double)this.seqLengths.get(id) / (double)seq.length();
    if (ratio < 1.0)     ratio=1.0 / ratio;
    double score=(double)count * ratio;
    if (score > threshold)     matches.add(new MatchResult(seq.getId(),id,score));
  }
  Collections.sort(matches);
  return matches;
}","public List<MatchResult> findMatches(Sequence seq,double threshold){
  HashMap<SequenceId,Integer> counts=new HashMap<SequenceId,Integer>();
  long[] hashes=getHashes(seq);
  for (int hashIndex=0; hashIndex < this.numHashes; hashIndex++) {
    ArrayList<SequenceId> matchedList=this.hashes.get(hashIndex).get(hashes[hashIndex]);
    if (matchedList != null) {
      for (      SequenceId matchedId : matchedList) {
        Integer currentCount=counts.get(matchedId);
        if (currentCount == null)         counts.put(matchedId,1);
 else         counts.put(matchedId,currentCount + 1);
      }
    }
  }
  ArrayList<MatchResult> matches=new ArrayList<MatchResult>();
  for (  SequenceId id : counts.keySet()) {
    int count=counts.get(id);
    double ratio=(double)this.seqLengths.get(id) / (double)seq.length();
    if (ratio < 1.0)     ratio=1.0 / ratio;
    double score=(double)count * ratio / (double)this.numHashes;
    if (score > threshold)     matches.add(new MatchResult(seq.getId(),id,score));
  }
  Collections.sort(matches);
  return matches;
}",0.9880668257756564
169305,"public void addData(ReadData data){
  for (  Sequence seq : data.getSequences()) {
    addSequence(seq);
  }
}","public void addData(FastaData data){
  for (  Sequence seq : data.getSequences()) {
    addSequence(seq);
  }
}",0.9683257918552036
169306,"private long[] getHashes(Sequence seq){
  long[] hashes=new long[this.numHashes];
  for (int iter=0; iter < seq.numKmers(); iter++) {
    String kmer=seq.getKmer(iter);
    for (int hashIndex=0; hashIndex < this.numHashes; hashIndex++) {
      long salt=hashIndex * 10;
      long hash=hashBasic(kmer,salt);
      if (hash < hashes[hashIndex])       hashes[hashIndex]=hash;
    }
  }
  return hashes;
}","private long[] getHashes(Sequence seq){
  long[] hashes=new long[this.numHashes];
  Arrays.fill(hashes,Long.MAX_VALUE);
  for (int iter=0; iter < seq.numKmers(); iter++) {
    String kmer=seq.getKmer(iter);
    for (int hashIndex=0; hashIndex < this.numHashes; hashIndex++) {
      long salt=hashIndex * 10;
      long hash=hashBasic(kmer,salt);
      if (hash < hashes[hashIndex])       hashes[hashIndex]=hash;
    }
  }
  return hashes;
}",0.9548693586698336
169307,"public void addSequence(Sequence seq){
  this.seqLengths.put(seq.getId(),seq.length());
  long[] hashValues=getHashes(seq);
  int count=0;
  for (  HashMap<Long,ArrayList<SequenceId>> hash : this.hashes) {
    ArrayList<SequenceId> currList=hash.get(hashValues[count]);
    if (currList == null)     currList=new ArrayList<SequenceId>();
    currList.add(seq.getId());
    count++;
  }
}","public void addSequence(Sequence seq){
  this.seqLengths.put(seq.getId(),seq.length());
  long[] hashValues=getHashes(seq);
  int count=0;
  for (  HashMap<Long,ArrayList<SequenceId>> hash : this.hashes) {
    ArrayList<SequenceId> currList=hash.get(hashValues[count]);
    if (currList == null) {
      currList=new ArrayList<SequenceId>();
      hash.put(hashValues[count],currList);
    }
    currList.add(seq.getId());
    count++;
  }
}",0.9347826086956522
169308,"public Ball(){
  this.name=""String_Node_Str"";
  Pixmap ballPixmap=new Pixmap(10,10,Pixmap.Format.RGBA8888);
  ballPixmap.setColor(Color.PINK);
  ballPixmap.fill();
  ballImage=new Texture(ballPixmap);
  resetPosition();
  this.width=ballImage.getWidth();
  this.height=ballImage.getHeight();
  this.xVel=-200f;
  this.yVel=-200f;
}","public Ball(){
  this.name=""String_Node_Str"";
  Pixmap ballPixmap=new Pixmap(12,12,Pixmap.Format.RGBA8888);
  ballPixmap.setColor(Color.WHITE);
  ballPixmap.fill();
  ballImage=new Texture(ballPixmap);
  resetPosition();
  this.width=ballImage.getWidth();
  this.height=ballImage.getHeight();
  this.xVel=-200f;
  this.yVel=-200f;
}",0.9834087481146304
169309,"public ParticleEmitter(){
  bigTexture=makeParticle(3,3,Color.ORANGE);
  mediumTexture=makeParticle(2,2,Color.YELLOW);
  smallTexture=makeParticle(1,1,Color.YELLOW);
  timer=TimeUtils.millis();
}","public ParticleEmitter(){
  bigTexture=makeParticle(4,4,Color.ORANGE);
  mediumTexture=makeParticle(3,3,Color.YELLOW);
  smallTexture=makeParticle(2,2,Color.YELLOW);
  timer=TimeUtils.millis();
}",0.9692307692307692
169310,"public void update(Ball ball,float delta){
  makeParticles(ball,delta);
  updateParticles(delta);
  killOldParticles();
}","public void update(Ball ball,float delta){
  if (state.equals(""String_Node_Str"")) {
    makeParticles(ball,delta);
    updateParticles(delta);
    killOldParticles();
  }
 else {
    updateParticles(delta);
    killOldParticles();
  }
}",0.5434173669467787
169311,"private void killOldParticles(){
  Iterator<Particle> itr=particles.iterator();
  while (itr.hasNext()) {
    Particle particle=itr.next();
    if (TimeUtils.timeSinceMillis(particle.birthTime) > 500) {
      particle.dispose();
      itr.remove();
    }
  }
}","private void killOldParticles(){
  Iterator<Particle> itr=particles.iterator();
  while (itr.hasNext()) {
    Particle particle=itr.next();
    if (TimeUtils.timeSinceMillis(particle.birthTime) > 500) {
      itr.remove();
    }
  }
}",0.9109311740890688
169312,"private void startScreenShake(){
  timeToShake=true;
  startOfShakeTime=TimeUtils.millis();
}","private void startScreenShake(){
  if (allowScreenShake) {
    timeToShake=true;
    startOfShakeTime=TimeUtils.millis();
  }
}",0.8454545454545455
169313,"private void checkTotalPaddleHits(){
  if (paddleHits >= 3) {
    state=""String_Node_Str"";
  }
}","private void checkTotalPaddleHits(){
  if (paddleHits >= 3) {
    particleEmitter.setState(""String_Node_Str"");
    allowScreenShake=true;
  }
}",0.7949790794979079
169314,"@Override public void render(float delta){
  camera.update();
  screenShake();
  updateBallMovement(delta);
  checkPaddleOutOfBounds();
  checkForGameOver();
  checkTotalPaddleHits();
  if (state.equals(""String_Node_Str"")) {
    particleEmitter.update(ball,delta);
  }
  Gdx.gl.glClearColor(0,0,0,1);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  batchDraw();
}","@Override public void render(float delta){
  camera.update();
  screenShake();
  updateBallMovement(delta);
  checkPaddleOutOfBounds();
  checkForGameOver();
  checkTotalPaddleHits();
  particleEmitter.update(ball,delta);
  Gdx.gl.glClearColor(0,0,0,1);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  batchDraw();
}",0.9303703703703704
169315,"private void enterNormalState(){
  paddleHits=0;
  state=""String_Node_Str"";
}","private void enterNormalState(){
  paddleHits=0;
  particleEmitter.setState(""String_Node_Str"");
  allowScreenShake=false;
}",0.76
169316,"public PongBoard(final PongForAndroid gam){
  this.game=gam;
  state=""String_Node_Str"";
  timeToShake=false;
  arialFont=new BitmapFont();
  arialFont.scale(3);
  player1Score=0;
  player2Score=0;
  paddleHits=0;
  paddleCollisionSound=Gdx.audio.newSound(Gdx.files.internal(""String_Node_Str""));
  mainMusic=Gdx.audio.newMusic(Gdx.files.internal(""String_Node_Str""));
  setupPaddles();
  setupNet();
  ball=new Ball();
  camera=new OrthographicCamera();
  camera.setToOrtho(false,800,480);
  particleEmitter=new ParticleEmitter();
  Gdx.input.setInputProcessor(new MainInputProcessor());
}","public PongBoard(final PongForAndroid gam){
  this.game=gam;
  timeToShake=false;
  arialFont=new BitmapFont();
  arialFont.scale(3);
  player1Score=0;
  player2Score=0;
  paddleHits=0;
  paddleCollisionSound=Gdx.audio.newSound(Gdx.files.internal(""String_Node_Str""));
  mainMusic=Gdx.audio.newMusic(Gdx.files.internal(""String_Node_Str""));
  setupPaddles();
  setupNet();
  ball=new Ball();
  camera=new OrthographicCamera();
  camera.setToOrtho(false,800,480);
  particleEmitter=new ParticleEmitter();
  Gdx.input.setInputProcessor(new MainInputProcessor());
}",0.976460331299041
169317,"private void batchDraw(){
  game.batch.setProjectionMatrix(camera.combined);
  game.batch.begin();
  game.batch.draw(paddle1.paddleImage,paddle1.x,paddle1.y);
  game.batch.draw(paddle2.paddleImage,paddle2.x,paddle2.y);
  game.batch.draw(ball.ballImage,ball.x,ball.y);
  for (  Rectangle netPiece : net) {
    game.batch.draw(netTexture,netPiece.getX(),netPiece.getY());
  }
  arialFont.draw(game.batch,String.valueOf(player1Score),200,HEIGHT - 50);
  arialFont.draw(game.batch,String.valueOf(player2Score),WIDTH - 200,HEIGHT - 50);
  particleEmitter.drawParticles(game.batch);
  game.batch.end();
}","private void batchDraw(){
  game.batch.setProjectionMatrix(camera.combined);
  game.batch.begin();
  game.batch.draw(paddle1.paddleImage,paddle1.x,paddle1.y);
  game.batch.draw(paddle2.paddleImage,paddle2.x,paddle2.y);
  for (  Rectangle netPiece : net) {
    game.batch.draw(netTexture,netPiece.getX(),netPiece.getY());
  }
  arialFont.draw(game.batch,String.valueOf(player1Score),200,HEIGHT - 50);
  arialFont.draw(game.batch,String.valueOf(player2Score),WIDTH - 200,HEIGHT - 50);
  particleEmitter.drawParticles(game.batch);
  game.batch.draw(ball.ballImage,ball.x,ball.y);
  game.batch.end();
}",0.9180602006688964
169318,"public void setPaddleLocation(int screenX,int screenY){
  if (screenX < (WIDTH / 2)) {
    paddle1.setCenterY(HEIGHT - screenY);
  }
 else   if (screenX > (WIDTH / 2)) {
    paddle2.setCenterY(HEIGHT - screenY);
  }
}","public void setPaddleLocation(Vector3 pos){
  if (pos.x < (WIDTH / 2)) {
    paddle1.setCenterY(pos.y);
  }
 else   if (pos.x > (WIDTH / 2)) {
    paddle2.setCenterY(pos.y);
  }
}",0.7828282828282829
169319,"private void checkPaddleOutOfBounds(){
  for (  Paddle paddle : paddleList) {
    if (paddle.getTop() > PongForAndroid.HEIGHT) {
      paddle.y=PongForAndroid.HEIGHT - paddle.height;
    }
 else     if (paddle.y < 0) {
      paddle.y=0;
    }
  }
}","private void checkPaddleOutOfBounds(){
  for (  Paddle paddle : paddleList) {
    if (paddle.getTop() > HEIGHT) {
      paddle.setTop(HEIGHT);
    }
 else     if (paddle.y < 0) {
      paddle.setY(0);
    }
  }
}",0.8608695652173913
169320,"public PongBoard(final PongForAndroid gam){
  this.game=gam;
  setupPaddles();
  setupNet();
  ball=new Ball();
  camera=new OrthographicCamera();
  camera.setToOrtho(false,PongForAndroid.WIDTH,PongForAndroid.HEIGHT);
  Gdx.input.setInputProcessor(new MainInputProcessor());
}","public PongBoard(final PongForAndroid gam){
  this.game=gam;
  setupPaddles();
  setupNet();
  ball=new Ball();
  camera=new OrthographicCamera();
  camera.setToOrtho(false,800,480);
  Gdx.input.setInputProcessor(new MainInputProcessor());
}",0.7504835589941973
169321,"@Override public boolean touchDown(int screenX,int screenY,int pointer,int button){
  setPaddleLocation(screenX,screenY);
  return true;
}","@Override public boolean touchDown(int screenX,int screenY,int pointer,int button){
  setPaddleLocation(camera.unproject(tmpV.set(screenX,screenY,0)));
  return true;
}",0.9019607843137256
169322,"@Override public boolean touchDragged(int screenX,int screenY,int pointer){
  setPaddleLocation(screenX,screenY);
  return true;
}","@Override public boolean touchDragged(int screenX,int screenY,int pointer){
  setPaddleLocation(camera.unproject(tmpV.set(screenX,screenY,0)));
  return true;
}",0.896551724137931
169323,"private void checkForWallCollision(){
  if (ball.getTop() > PongForAndroid.HEIGHT) {
    ball.reverseDirectionY();
  }
 else   if (ball.getY() < 0) {
    ball.reverseDirectionY();
  }
}","private void checkForWallCollision(){
  if (ball.getTop() > HEIGHT) {
    ball.reverseDirectionY();
    ball.setTop(HEIGHT);
  }
 else   if (ball.getY() < 0) {
    ball.reverseDirectionY();
    ball.setBottom(0f);
  }
}",0.8415841584158416
169324,"public void setupNet(){
  net=new ArrayList<Rectangle>();
  for (int i=0; i < 6; i++) {
    int xPos=(PongForAndroid.WIDTH / 2);
    int yPos=0;
    Pixmap netPixmap=new Pixmap(5,5,Pixmap.Format.RGBA8888);
    netPixmap.setColor(Color.WHITE);
    netPixmap.fill();
    netTexture=new Texture(netPixmap);
    Rectangle newNetPiece=new Rectangle();
    newNetPiece.x=xPos;
    newNetPiece.y=yPos + (i * PongForAndroid.HEIGHT / 6) + 35;
    newNetPiece.width=netTexture.getWidth();
    newNetPiece.height=netTexture.getHeight();
    net.add(newNetPiece);
    netPixmap.dispose();
  }
}","public void setupNet(){
  net=new ArrayList<Rectangle>();
  for (int i=0; i < 6; i++) {
    int xPos=(WIDTH / 2);
    int yPos=0;
    Pixmap netPixmap=new Pixmap(5,5,Pixmap.Format.RGBA8888);
    netPixmap.setColor(Color.WHITE);
    netPixmap.fill();
    netTexture=new Texture(netPixmap);
    Rectangle newNetPiece=new Rectangle();
    newNetPiece.x=xPos;
    newNetPiece.y=yPos + (i * HEIGHT / 6) + 35;
    newNetPiece.width=netTexture.getWidth();
    newNetPiece.height=netTexture.getHeight();
    net.add(newNetPiece);
    netPixmap.dispose();
  }
}",0.9735449735449736
169325,"private void checkForBallOutOfBounds(){
  if (ball.x < 0 || ball.getRight() > PongForAndroid.WIDTH) {
    ball.resetPosition();
    ball.reverseDirectionX();
    ball.reverseDirectionY();
  }
}","private void checkForBallOutOfBounds(){
  if (ball.x < 0 || ball.getRight() > WIDTH) {
    ball.resetPosition();
    ball.reverseDirectionX();
    ball.reverseDirectionY();
  }
}",0.9595687331536388
169326,"public final synchronized int getRelativePollValue(int current_abs_value){
  int rel_value=current_abs_value - last_poll_value;
  last_poll_value=current_abs_value;
  return rel_value;
}","public final synchronized int getRelativePollValue(int current_abs_value){
  if (device.areAxesRelative())   return current_abs_value;
  int rel_value=current_abs_value - last_poll_value;
  last_poll_value=current_abs_value;
  return rel_value;
}",0.8611111111111112
169327,"private final boolean isAxis(){
  return (type & IDirectInputDevice.DIDFT_AXIS) != 0;
}","public final boolean isAxis(){
  return (type & IDirectInputDevice.DIDFT_AXIS) != 0;
}",0.9479768786127168
169328,"public final synchronized int getRelativeEventValue(int current_abs_value){
  int rel_value=current_abs_value - last_event_value;
  last_event_value=current_abs_value;
  return rel_value;
}","public final synchronized int getRelativeEventValue(int current_abs_value){
  if (device.areAxesRelative())   return current_abs_value;
  int rel_value=current_abs_value - last_event_value;
  last_event_value=current_abs_value;
  return rel_value;
}",0.863013698630137
169329,"protected final synchronized boolean getNextDeviceEvent(Event event) throws IOException {
  while (true) {
switch (event_state) {
case EVENT_DONE:
      if (!device.getNextMouseEvent(current_event))       return false;
    event_state=EVENT_X;
  break;
case EVENT_X:
int rel_x=device.getEventRelativeX();
event_state=EVENT_Y;
if (rel_x != 0) {
event.set(getX(),rel_x,current_event.getNanos());
return true;
}
break;
case EVENT_Y:
int rel_y=device.getEventRelativeY();
event_state=EVENT_Z;
if (rel_y != 0) {
event.set(getY(),rel_y,current_event.getNanos());
return true;
}
break;
case EVENT_Z:
int wheel=current_event.getWheelDelta();
event_state=EVENT_BUTTON_0;
if (wheel != 0) {
event.set(getWheel(),wheel,current_event.getNanos());
return true;
}
break;
case EVENT_BUTTON_0:
event_state=EVENT_BUTTON_1;
if (makeButtonEvent(current_event,event,getLeft(),RawDevice.RI_MOUSE_BUTTON_1_DOWN,RawDevice.RI_MOUSE_BUTTON_1_UP)) return true;
break;
case EVENT_BUTTON_1:
event_state=EVENT_BUTTON_2;
if (makeButtonEvent(current_event,event,getLeft(),RawDevice.RI_MOUSE_BUTTON_2_DOWN,RawDevice.RI_MOUSE_BUTTON_2_UP)) return true;
break;
case EVENT_BUTTON_2:
event_state=EVENT_BUTTON_3;
if (makeButtonEvent(current_event,event,getLeft(),RawDevice.RI_MOUSE_BUTTON_3_DOWN,RawDevice.RI_MOUSE_BUTTON_3_UP)) return true;
break;
case EVENT_BUTTON_3:
event_state=EVENT_BUTTON_4;
if (makeButtonEvent(current_event,event,getLeft(),RawDevice.RI_MOUSE_BUTTON_4_DOWN,RawDevice.RI_MOUSE_BUTTON_4_UP)) return true;
break;
case EVENT_BUTTON_4:
event_state=EVENT_DONE;
if (makeButtonEvent(current_event,event,getLeft(),RawDevice.RI_MOUSE_BUTTON_5_DOWN,RawDevice.RI_MOUSE_BUTTON_5_UP)) return true;
break;
default :
throw new RuntimeException(""String_Node_Str"" + event_state);
}
}
}","protected final synchronized boolean getNextDeviceEvent(Event event) throws IOException {
  while (true) {
switch (event_state) {
case EVENT_DONE:
      if (!device.getNextMouseEvent(current_event))       return false;
    event_state=EVENT_X;
  break;
case EVENT_X:
int rel_x=device.getEventRelativeX();
event_state=EVENT_Y;
if (rel_x != 0) {
event.set(getX(),rel_x,current_event.getNanos());
return true;
}
break;
case EVENT_Y:
int rel_y=device.getEventRelativeY();
event_state=EVENT_Z;
if (rel_y != 0) {
event.set(getY(),rel_y,current_event.getNanos());
return true;
}
break;
case EVENT_Z:
int wheel=current_event.getWheelDelta();
event_state=EVENT_BUTTON_0;
if (wheel != 0) {
event.set(getWheel(),wheel,current_event.getNanos());
return true;
}
break;
case EVENT_BUTTON_0:
event_state=EVENT_BUTTON_1;
if (makeButtonEvent(current_event,event,getLeft(),RawDevice.RI_MOUSE_BUTTON_1_DOWN,RawDevice.RI_MOUSE_BUTTON_1_UP)) return true;
break;
case EVENT_BUTTON_1:
event_state=EVENT_BUTTON_2;
if (makeButtonEvent(current_event,event,getRight(),RawDevice.RI_MOUSE_BUTTON_2_DOWN,RawDevice.RI_MOUSE_BUTTON_2_UP)) return true;
break;
case EVENT_BUTTON_2:
event_state=EVENT_BUTTON_3;
if (makeButtonEvent(current_event,event,getMiddle(),RawDevice.RI_MOUSE_BUTTON_3_DOWN,RawDevice.RI_MOUSE_BUTTON_3_UP)) return true;
break;
case EVENT_BUTTON_3:
event_state=EVENT_BUTTON_4;
if (makeButtonEvent(current_event,event,getSide(),RawDevice.RI_MOUSE_BUTTON_4_DOWN,RawDevice.RI_MOUSE_BUTTON_4_UP)) return true;
break;
case EVENT_BUTTON_4:
event_state=EVENT_DONE;
if (makeButtonEvent(current_event,event,getExtra(),RawDevice.RI_MOUSE_BUTTON_5_DOWN,RawDevice.RI_MOUSE_BUTTON_5_UP)) return true;
break;
default :
throw new RuntimeException(""String_Node_Str"" + event_state);
}
}
}",0.9903133903133904
169330,"/** 
 * Returns the data from the last time the control has been polled. If this axis is a button, the value returned will be either 0.0f or 1.0f. If this axis is normalized, the value returned will be between -1.0f and 1.0f.
 * @return A float between -1.0 and 1.0
 */
public float getPollData(){
}","/** 
 * Returns the data from the last time the control has been polled. If this axis is a button, the value returned will be either 0.0f or 1.0f. If this axis is normalized, the value returned will be between -1.0f and 1.0f.
 * @return A float between -1.0 and 1.0
 */
public float getPollData(){
  int data=0;
  try {
    data=((device.data[offset] >> bitshift) & bitmask);
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.out.println(""String_Node_Str"" + this.getName() + ""String_Node_Str""+ offset+ ""String_Node_Str""+ device.data.length+ ""String_Node_Str"");
  }
  if ((type & DIDFT_BUTTON) != 0) {
    return (float)((data & 0x80) >> 7);
  }
 else   if ((type & DIDFT_AXIS) != 0) {
    return ((float)data) / 32768;
  }
 else   if ((type & DIDFT_POV) != 0) {
    if (data == -1) {
      return Component.POV.OFF;
    }
 else     if (data == 0.0) {
      return Component.POV.UP;
    }
 else     if (data == 4500) {
      return Component.POV.UP_RIGHT;
    }
 else     if (data == 9000) {
      return Component.POV.RIGHT;
    }
 else     if (data == 13500) {
      return Component.POV.DOWN_RIGHT;
    }
 else     if (data == 18000) {
      return Component.POV.DOWN;
    }
 else     if (data == 22500) {
      return Component.POV.DOWN_LEFT;
    }
 else     if (data == 27000) {
      return Component.POV.LEFT;
    }
 else     if (data == 31500) {
      return Component.POV.UP_LEFT;
    }
 else {
      System.err.print(""String_Node_Str"" + data);
      return Component.POV.OFF;
    }
  }
 else {
    return (float)data;
  }
}",0.3235613463626492
169331,"/** 
 * Return the enumeration of supported button types for this device
 * @param supportedButtons Array to populate
 */
private void getSupportedButtons(int supportedButtons[]){
  getNativeSupportedButtons(nativeID,supportedButtons);
}","/** 
 * Return the enumeration of supported button types for this device
 * @param supportedButtons Array to populate
 */
private void getSupportedButtons(int supportedButtons[]){
  if (supportedButtons.length == 0) {
    return;
  }
  getNativeSupportedButtons(nativeID,supportedButtons);
}",0.8977272727272727
169332,"/** 
 * Create the buttons for the device
 * @param numButtons The number of buttons the device has
 */
private void createButtons(int numButtons){
  int supportedButtons[]=new int[numButtons];
  getSupportedButtons(supportedButtons);
  buttons=new LinuxAxis[numButtons];
  for (int i=0; i < numButtons; i++) {
    buttons[i]=createButton(i,supportedButtons[i]);
  }
}","/** 
 * Create the buttons for the device
 * @param numButtons The number of buttons the device has
 */
private void createButtons(int numButtons){
  int supportedButtons[]=new int[numButtons];
  buttons=new LinuxAxis[numButtons];
  if (numButtons > 0) {
    getSupportedButtons(supportedButtons);
    for (int i=0; i < numButtons; i++) {
      buttons[i]=createButton(i,supportedButtons[i]);
    }
  }
}",0.8471502590673575
169333,"/** 
 * Take a guess at the device type.
 */
private void guessType(){
  int joystickCharacteristic=0;
  int digitiserCharacteristic=0;
  int gamepadCharacteristic=0;
  int miscCharacteristic=0;
  int mouseCharacteristic=0;
  int supportedButtons[]=new int[numButtons];
  getSupportedButtons(supportedButtons);
  for (int i=0; i < numButtons; i++) {
switch (supportedButtons[i]) {
case NativeDefinitions.BTN_TRIGGER:
case NativeDefinitions.BTN_THUMB:
case NativeDefinitions.BTN_THUMB2:
case NativeDefinitions.BTN_TOP:
case NativeDefinitions.BTN_TOP2:
case NativeDefinitions.BTN_PINKIE:
case NativeDefinitions.BTN_BASE:
case NativeDefinitions.BTN_BASE2:
case NativeDefinitions.BTN_BASE3:
case NativeDefinitions.BTN_BASE4:
case NativeDefinitions.BTN_BASE5:
case NativeDefinitions.BTN_BASE6:
case NativeDefinitions.BTN_DEAD:
      joystickCharacteristic++;
    break;
case NativeDefinitions.BTN_A:
case NativeDefinitions.BTN_B:
case NativeDefinitions.BTN_C:
case NativeDefinitions.BTN_X:
case NativeDefinitions.BTN_Y:
case NativeDefinitions.BTN_Z:
case NativeDefinitions.BTN_TL:
case NativeDefinitions.BTN_TR:
case NativeDefinitions.BTN_TL2:
case NativeDefinitions.BTN_TR2:
case NativeDefinitions.BTN_SELECT:
case NativeDefinitions.BTN_MODE:
case NativeDefinitions.BTN_THUMBL:
case NativeDefinitions.BTN_THUMBR:
  gamepadCharacteristic++;
break;
case NativeDefinitions.BTN_0:
case NativeDefinitions.BTN_1:
case NativeDefinitions.BTN_2:
case NativeDefinitions.BTN_3:
case NativeDefinitions.BTN_4:
case NativeDefinitions.BTN_5:
case NativeDefinitions.BTN_6:
case NativeDefinitions.BTN_7:
case NativeDefinitions.BTN_8:
case NativeDefinitions.BTN_9:
miscCharacteristic++;
break;
case NativeDefinitions.BTN_LEFT:
case NativeDefinitions.BTN_RIGHT:
case NativeDefinitions.BTN_MIDDLE:
case NativeDefinitions.BTN_SIDE:
case NativeDefinitions.BTN_EXTRA:
case NativeDefinitions.BTN_FORWARD:
case NativeDefinitions.BTN_BACK:
mouseCharacteristic++;
break;
case NativeDefinitions.BTN_TOOL_PEN:
case NativeDefinitions.BTN_TOOL_RUBBER:
case NativeDefinitions.BTN_TOOL_BRUSH:
case NativeDefinitions.BTN_TOOL_PENCIL:
case NativeDefinitions.BTN_TOOL_AIRBRUSH:
case NativeDefinitions.BTN_TOOL_FINGER:
case NativeDefinitions.BTN_TOOL_MOUSE:
case NativeDefinitions.BTN_TOOL_LENS:
case NativeDefinitions.BTN_TOUCH:
case NativeDefinitions.BTN_STYLUS:
case NativeDefinitions.BTN_STYLUS2:
digitiserCharacteristic++;
break;
default :
}
}
if ((joystickCharacteristic >= digitiserCharacteristic) && (joystickCharacteristic >= gamepadCharacteristic) && (joystickCharacteristic >= miscCharacteristic)&& (joystickCharacteristic >= mouseCharacteristic)) {
typeGuess=Type.STICK;
}
 else if ((gamepadCharacteristic >= digitiserCharacteristic) && (gamepadCharacteristic >= joystickCharacteristic) && (gamepadCharacteristic >= miscCharacteristic)&& (gamepadCharacteristic >= mouseCharacteristic)) {
typeGuess=Type.GAMEPAD;
}
 else if ((digitiserCharacteristic >= gamepadCharacteristic) && (digitiserCharacteristic >= joystickCharacteristic) && (digitiserCharacteristic >= miscCharacteristic)&& (digitiserCharacteristic >= mouseCharacteristic)) {
typeGuess=Type.TRACKPAD;
}
 else if ((miscCharacteristic >= gamepadCharacteristic) && (miscCharacteristic >= joystickCharacteristic) && (miscCharacteristic >= miscCharacteristic)&& (miscCharacteristic >= mouseCharacteristic)) {
typeGuess=Type.STICK;
}
 else if ((mouseCharacteristic >= digitiserCharacteristic) && (mouseCharacteristic >= joystickCharacteristic) && (mouseCharacteristic >= miscCharacteristic)&& (mouseCharacteristic >= gamepadCharacteristic)) {
typeGuess=Type.MOUSE;
}
}","/** 
 * Take a guess at the device type.
 */
private void guessType(){
  int joystickCharacteristic=0;
  int digitiserCharacteristic=0;
  int gamepadCharacteristic=0;
  int miscCharacteristic=0;
  int mouseCharacteristic=0;
  int supportedButtons[]=new int[numButtons];
  getSupportedButtons(supportedButtons);
  for (int i=0; i < numButtons; i++) {
switch (supportedButtons[i]) {
case NativeDefinitions.BTN_TRIGGER:
case NativeDefinitions.BTN_THUMB:
case NativeDefinitions.BTN_THUMB2:
case NativeDefinitions.BTN_TOP:
case NativeDefinitions.BTN_TOP2:
case NativeDefinitions.BTN_PINKIE:
case NativeDefinitions.BTN_BASE:
case NativeDefinitions.BTN_BASE2:
case NativeDefinitions.BTN_BASE3:
case NativeDefinitions.BTN_BASE4:
case NativeDefinitions.BTN_BASE5:
case NativeDefinitions.BTN_BASE6:
case NativeDefinitions.BTN_DEAD:
      joystickCharacteristic++;
    break;
case NativeDefinitions.BTN_A:
case NativeDefinitions.BTN_B:
case NativeDefinitions.BTN_C:
case NativeDefinitions.BTN_X:
case NativeDefinitions.BTN_Y:
case NativeDefinitions.BTN_Z:
case NativeDefinitions.BTN_TL:
case NativeDefinitions.BTN_TR:
case NativeDefinitions.BTN_TL2:
case NativeDefinitions.BTN_TR2:
case NativeDefinitions.BTN_SELECT:
case NativeDefinitions.BTN_MODE:
case NativeDefinitions.BTN_THUMBL:
case NativeDefinitions.BTN_THUMBR:
  gamepadCharacteristic++;
break;
case NativeDefinitions.BTN_0:
case NativeDefinitions.BTN_1:
case NativeDefinitions.BTN_2:
case NativeDefinitions.BTN_3:
case NativeDefinitions.BTN_4:
case NativeDefinitions.BTN_5:
case NativeDefinitions.BTN_6:
case NativeDefinitions.BTN_7:
case NativeDefinitions.BTN_8:
case NativeDefinitions.BTN_9:
miscCharacteristic++;
break;
case NativeDefinitions.BTN_LEFT:
case NativeDefinitions.BTN_RIGHT:
case NativeDefinitions.BTN_MIDDLE:
case NativeDefinitions.BTN_SIDE:
case NativeDefinitions.BTN_EXTRA:
case NativeDefinitions.BTN_FORWARD:
case NativeDefinitions.BTN_BACK:
mouseCharacteristic++;
break;
case NativeDefinitions.BTN_TOOL_PEN:
case NativeDefinitions.BTN_TOOL_RUBBER:
case NativeDefinitions.BTN_TOOL_BRUSH:
case NativeDefinitions.BTN_TOOL_PENCIL:
case NativeDefinitions.BTN_TOOL_AIRBRUSH:
case NativeDefinitions.BTN_TOOL_FINGER:
case NativeDefinitions.BTN_TOOL_MOUSE:
case NativeDefinitions.BTN_TOOL_LENS:
case NativeDefinitions.BTN_TOUCH:
case NativeDefinitions.BTN_STYLUS:
case NativeDefinitions.BTN_STYLUS2:
digitiserCharacteristic++;
break;
default :
}
}
if ((joystickCharacteristic >= digitiserCharacteristic) && (joystickCharacteristic >= gamepadCharacteristic) && (joystickCharacteristic >= miscCharacteristic)&& (joystickCharacteristic >= mouseCharacteristic)) {
typeGuess=Type.STICK;
}
 else if ((gamepadCharacteristic >= digitiserCharacteristic) && (gamepadCharacteristic >= joystickCharacteristic) && (gamepadCharacteristic >= miscCharacteristic)&& (gamepadCharacteristic >= mouseCharacteristic)) {
typeGuess=Type.GAMEPAD;
}
 else if ((digitiserCharacteristic >= gamepadCharacteristic) && (digitiserCharacteristic >= joystickCharacteristic) && (digitiserCharacteristic >= miscCharacteristic)&& (digitiserCharacteristic >= mouseCharacteristic)) {
typeGuess=Type.TRACKPAD;
}
 else if ((miscCharacteristic >= gamepadCharacteristic) && (miscCharacteristic >= joystickCharacteristic) && (miscCharacteristic >= miscCharacteristic)&& (miscCharacteristic >= mouseCharacteristic)) {
typeGuess=Type.STICK;
}
 else if ((mouseCharacteristic >= digitiserCharacteristic) && (mouseCharacteristic >= joystickCharacteristic) && (mouseCharacteristic >= miscCharacteristic)&& (mouseCharacteristic >= gamepadCharacteristic)) {
typeGuess=Type.MOUSE;
}
if (typeGuess == Type.STICK) {
String tempName=getName().toLowerCase();
if ((tempName.indexOf(""String_Node_Str"") > -1) || (tempName.indexOf(""String_Node_Str"") > -1)) {
typeGuess=Type.GAMEPAD;
}
}
}",0.9734417344173442
169334,"/** 
 * Creates a new device, adding it to the list supplied.
 * @param lpDevice A pointer to the IDirectInputDevice for the device.
 * @param type The type of device to create, as defined by the constantsin dinput.h (see DI8DEVTYPE constants above).
 * @param productName The product name for the device
 * @param instanceName The name of the device
 */
private void addDevice(ArrayList list,long lpDevice,int type,String productName,String instanceName,boolean polled){
}","/** 
 * Creates a new device, adding it to the list supplied.
 * @param lpDevice A pointer to the IDirectInputDevice for the device.
 * @param type The type of device to create, as defined by the constantsin dinput.h (see DI8DEVTYPE constants above).
 * @param productName The product name for the device
 * @param instanceName The name of the device
 */
private void addDevice(ArrayList list,long lpDevice,int type,String productName,String instanceName,boolean polled){
  Controller c;
  int category=GET_DIDEVICE_TYPE(type);
  int subtype=GET_DIDEVICE_SUBTYPE(type);
  if (category == DI8DEVTYPE_MOUSE) {
    c=DirectInputMouse.createMouse(lpDevice,subtype,productName,instanceName);
  }
 else   if (category == DI8DEVTYPE_KEYBOARD) {
    c=DirectInputKeyboard.createKeyboard(lpDevice,subtype,productName,instanceName);
  }
 else {
    c=DirectInputDevice.createDevice(lpDevice,subtype,productName,instanceName,polled);
  }
  if (c != null) {
    list.add(c);
  }
}",0.6564885496183206
169335,"/** 
 * Public constructor
 */
public ButtonsImpl(){
  super(DirectInputMouse.this.getName() + ""String_Node_Str"");
  left=new ButtonImpl(ButtonID.LEFT);
  right=new ButtonImpl(ButtonID.RIGHT);
  middle=new ButtonImpl(ButtonID.MIDDLE);
}","/** 
 * Public constructor
 */
public ButtonsImpl(){
  super(DirectInputMouse.this.getName() + ""String_Node_Str"");
  numButtons=getNumButtons(lpDevice);
  left=new ButtonImpl(ButtonID.LEFT);
  right=new ButtonImpl(ButtonID.RIGHT);
  if (numButtons > 2) {
    middle=new ButtonImpl(ButtonID.MIDDLE);
  }
  if (numButtons > 3) {
    side=new ButtonImpl(ButtonID.SIDE);
  }
  if (numButtons > 4) {
    extra=new ButtonImpl(ButtonID.EXTRA);
  }
  if (numButtons > 5) {
    forward=new ButtonImpl(ButtonID.FORWARD);
  }
  if (numButtons > 6) {
    back=new ButtonImpl(ButtonID.BACK);
  }
}",0.5756097560975609
169336,"/** 
 * Returns the data from the last time the control has been polled. If this axis is a button, the value returned will be either 0.0f or 1.0f. If this axis is normalized, the value returned will be between -1.0f and 1.0f.
 * @return  data.  (Note that mice queue state in DX8 so whatis returned is the next stae in the queue, not necessarily the most current one.)
 */
public float getPollData(){
  int data=((int)mouseData[index] << 12) | ((int)mouseData[index + 1] << 8) | ((int)mouseData[index + 2] << 4)| ((int)mouseData[index + 3]);
  if (data == -1) {
    return -1.0f;
  }
 else   if (data >= 1) {
    return 1.0f;
  }
 else {
    return 0.0f;
  }
}","/** 
 * Returns the data from the last time the control has been polled.
 * @return data The total mouse axis change since the last poll
 */
public float getPollData(){
  int data=((int)mouseData[index + 3] << 24) | ((int)mouseData[index + 2] << 16) | ((int)mouseData[index + 1] << 8)| ((int)mouseData[index]);
  return (float)data;
}",0.289738430583501
169337,"/** 
 * Public constructor
 */
public BallImpl(){
  super(DirectInputMouse.this.getName() + ""String_Node_Str"");
  x=new BallAxis(Axis.Identifier.X);
  y=new BallAxis(Axis.Identifier.Y);
  wheel=new BallAxis(Axis.Identifier.SLIDER);
}","/** 
 * Public constructor
 */
public BallImpl(){
  super(DirectInputMouse.this.getName() + ""String_Node_Str"");
  numAxes=getNumAxes(lpDevice);
  x=new BallAxis(Axis.Identifier.X);
  y=new BallAxis(Axis.Identifier.Y);
  if (numAxes > 2) {
    wheel=new BallAxis(Axis.Identifier.SLIDER);
  }
}",0.8876190476190476
169338,"/** 
 * Public constructor
 * @param id An ID of a button to create an obejct to represent.
 */
public ButtonImpl(ButtonID id){
  super(id.getName(),id);
  if (id == ButtonID.LEFT) {
    index=12;
  }
 else   if (id == ButtonID.RIGHT) {
    index=13;
  }
 else   if (id == ButtonID.MIDDLE) {
    index=14;
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Public constructor
 * @param id An ID of a button to create an obejct to represent.
 */
public ButtonImpl(ButtonID id){
  super(id.getName(),id);
  if (id == ButtonID.LEFT) {
    index=12;
  }
 else   if (id == ButtonID.RIGHT) {
    index=13;
  }
 else   if (id == ButtonID.MIDDLE) {
    index=14;
  }
 else   if (id == ButtonID.SIDE) {
    index=15;
  }
 else   if (id == ButtonID.EXTRA) {
    index=16;
  }
 else   if (id == ButtonID.FORWARD) {
    index=17;
  }
 else   if (id == ButtonID.BACK) {
    index=18;
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.7759336099585062
169339,"/** 
 * Private constructor
 * @param lpDevice A pointer to the IDirectInputDevice for the device.
 * @param subtype The subtype of mouse, as defined in the DIDEVTYPEconstants above
 * @param productName The product name for the device
 * @param instanceName The name of the device
 */
private DirectInputMouse(long lpDevice,int subtype,String productName,String instanceName){
  super(productName + ""String_Node_Str"" + instanceName);
  buttons=new ButtonsImpl();
  ball=new BallImpl();
  this.lpDevice=lpDevice;
switch (subtype) {
case DIDEVTYPEMOUSE_FINGERSTICK:
    type=Type.FINGERSTICK;
  break;
case DIDEVTYPEMOUSE_TOUCHPAD:
type=Type.TRACKPAD;
break;
case DIDEVTYPEMOUSE_TRACKBALL:
type=Type.TRACKBALL;
break;
case DIDEVTYPEMOUSE_TRADITIONAL:
case DIDEVTYPEMOUSE_UNKNOWN:
default :
type=Type.MOUSE;
break;
}
renameAxes(lpDevice);
}","/** 
 * Private constructor
 * @param lpDevice A pointer to the IDirectInputDevice for the device.
 * @param subtype The subtype of mouse, as defined in the DIDEVTYPEconstants above
 * @param productName The product name for the device
 * @param instanceName The name of the device
 */
private DirectInputMouse(long lpDevice,int subtype,String productName,String instanceName){
  super(productName + ""String_Node_Str"" + instanceName);
  this.lpDevice=lpDevice;
  buttons=new ButtonsImpl();
  ball=new BallImpl();
switch (subtype) {
case DIDEVTYPEMOUSE_FINGERSTICK:
    type=Type.FINGERSTICK;
  break;
case DIDEVTYPEMOUSE_TOUCHPAD:
type=Type.TRACKPAD;
break;
case DIDEVTYPEMOUSE_TRACKBALL:
type=Type.TRACKBALL;
break;
case DIDEVTYPEMOUSE_TRADITIONAL:
case DIDEVTYPEMOUSE_UNKNOWN:
default :
type=Type.MOUSE;
break;
}
renameAxes(lpDevice);
}",0.9689737470167064
169340,"@Override public void populateSolrInputDocument(SolrInputDocument solrInputDocument){
  if (timestamp != null)   solrInputDocument.addField(DATE,timestamp);
  if (params != null)   solrInputDocument.addField(PARAMS,params);
  if (qtime != -1)   solrInputDocument.addField(QTIME,qtime);
  solrInputDocument.addField(STATUS,""String_Node_Str"");
  if (hits != -1)   solrInputDocument.addField(HITS,hits);
  String bitmask=new Classifier(this.getParams()).createBitMask();
  if (bitmask != ""String_Node_Str"")   solrInputDocument.addField(BITMASK,bitmask);
  solrInputDocument.addField(SLOWQUERY_TAG,slowQueryTagPresent);
  solrInputDocument.addField(SLOWQUERY_VALIDITY_PREDICTION,slowQueryTagPresent == QueryUtil.isSlowQuery((int)qtime));
}","@Override public void populateSolrInputDocument(SolrInputDocument solrInputDocument){
  if (timestamp != null)   solrInputDocument.addField(DATE,timestamp.toDate());
  if (params != null)   solrInputDocument.addField(PARAMS,params);
  if (qtime != -1)   solrInputDocument.addField(QTIME,qtime);
  solrInputDocument.addField(STATUS,""String_Node_Str"");
  if (hits != -1)   solrInputDocument.addField(HITS,hits);
  String bitmask=new Classifier(this.getParams()).createBitMask();
  if (bitmask != ""String_Node_Str"")   solrInputDocument.addField(BITMASK,bitmask);
  solrInputDocument.addField(SLOWQUERY_TAG,slowQueryTagPresent);
  solrInputDocument.addField(SLOWQUERY_VALIDITY_PREDICTION,slowQueryTagPresent == QueryUtil.isSlowQuery((int)qtime));
}",0.9939148073022313
169341,"public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  JLabel label=(JLabel)super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  label.setHorizontalAlignment(JLabel.CENTER);
  if (row == -1) {
    label.setForeground(getColors().getColor(ComponentColorDefaults.Key.FG_GRID_HEADER));
    label.setBackground(getColors().getColor(ComponentColorDefaults.Key.BG_GRID_HEADER));
    label.setHorizontalAlignment(JLabel.CENTER);
    return label;
  }
  Calendar todayCal=Calendar.getInstance();
  Calendar selectedCal=Calendar.getInstance();
  selectedCal.set(internalModel.getModel().getYear(),internalModel.getModel().getMonth(),internalModel.getModel().getDay());
  int cellDayValue=(Integer)value;
  int lastDayOfMonth=selectedCal.getActualMaximum(Calendar.DAY_OF_MONTH);
  if (cellDayValue < 1 || cellDayValue > lastDayOfMonth) {
    label.setForeground(getColors().getColor(ComponentColorDefaults.Key.FG_GRID_OTHER_MONTH));
    Calendar calForDay=Calendar.getInstance();
    calForDay.set(internalModel.getModel().getYear(),internalModel.getModel().getMonth(),cellDayValue);
    DateModel<Calendar> modelForDay=new UtilCalendarModel(calForDay);
    label.setBackground(checkConstraints(modelForDay) ? getColors().getColor(ComponentColorDefaults.Key.BG_GRID) : getColors().getColor(ComponentColorDefaults.Key.BG_GRID_NOT_SELECTABLE));
    if (cellDayValue > lastDayOfMonth) {
      label.setText(Integer.toString(cellDayValue - lastDayOfMonth));
    }
 else {
      Calendar lastMonth=new GregorianCalendar();
      lastMonth.set(selectedCal.get(Calendar.YEAR),selectedCal.get(Calendar.MONTH) - 1,1);
      int lastDayLastMonth=lastMonth.getActualMaximum(Calendar.DAY_OF_MONTH);
      label.setText(Integer.toString(lastDayLastMonth + cellDayValue));
    }
  }
 else {
    label.setForeground(getColors().getColor(ComponentColorDefaults.Key.FG_GRID_THIS_MONTH));
    Calendar calForDay=Calendar.getInstance();
    calForDay.set(internalModel.getModel().getYear(),internalModel.getModel().getMonth(),cellDayValue);
    DateModel<Calendar> modelForDay=new UtilCalendarModel(calForDay);
    label.setBackground(checkConstraints(modelForDay) ? getColors().getColor(ComponentColorDefaults.Key.BG_GRID) : getColors().getColor(ComponentColorDefaults.Key.BG_GRID_NOT_SELECTABLE));
    if (todayCal.get(Calendar.DATE) == cellDayValue && todayCal.get(Calendar.MONTH) == internalModel.getModel().getMonth() && todayCal.get(Calendar.YEAR) == internalModel.getModel().getYear()) {
      label.setForeground(getColors().getColor(ComponentColorDefaults.Key.FG_GRID_TODAY));
      if (internalModel.getModel().isSelected() && selectedCal.get(Calendar.DATE) == cellDayValue) {
        label.setForeground(getColors().getColor(ComponentColorDefaults.Key.FG_GRID_TODAY_SELECTED));
        label.setBackground(getColors().getColor(ComponentColorDefaults.Key.BG_GRID_TODAY_SELECTED));
      }
    }
 else {
      if (internalModel.getModel().isSelected() && selectedCal.get(Calendar.DATE) == cellDayValue) {
        label.setForeground(getColors().getColor(ComponentColorDefaults.Key.FG_GRID_SELECTED));
        label.setBackground(getColors().getColor(ComponentColorDefaults.Key.BG_GRID_SELECTED));
      }
    }
  }
  return label;
}","public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  if (value == null) {
    return super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  }
  JLabel label=(JLabel)super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  label.setHorizontalAlignment(JLabel.CENTER);
  if (row == -1) {
    label.setForeground(getColors().getColor(ComponentColorDefaults.Key.FG_GRID_HEADER));
    label.setBackground(getColors().getColor(ComponentColorDefaults.Key.BG_GRID_HEADER));
    label.setHorizontalAlignment(JLabel.CENTER);
    return label;
  }
  Calendar todayCal=Calendar.getInstance();
  Calendar selectedCal=Calendar.getInstance();
  selectedCal.set(internalModel.getModel().getYear(),internalModel.getModel().getMonth(),internalModel.getModel().getDay());
  int cellDayValue=(Integer)value;
  int lastDayOfMonth=selectedCal.getActualMaximum(Calendar.DAY_OF_MONTH);
  if (cellDayValue < 1 || cellDayValue > lastDayOfMonth) {
    label.setForeground(getColors().getColor(ComponentColorDefaults.Key.FG_GRID_OTHER_MONTH));
    Calendar calForDay=Calendar.getInstance();
    calForDay.set(internalModel.getModel().getYear(),internalModel.getModel().getMonth(),cellDayValue);
    DateModel<Calendar> modelForDay=new UtilCalendarModel(calForDay);
    label.setBackground(checkConstraints(modelForDay) ? getColors().getColor(ComponentColorDefaults.Key.BG_GRID) : getColors().getColor(ComponentColorDefaults.Key.BG_GRID_NOT_SELECTABLE));
    if (cellDayValue > lastDayOfMonth) {
      label.setText(Integer.toString(cellDayValue - lastDayOfMonth));
    }
 else {
      Calendar lastMonth=new GregorianCalendar();
      lastMonth.set(selectedCal.get(Calendar.YEAR),selectedCal.get(Calendar.MONTH) - 1,1);
      int lastDayLastMonth=lastMonth.getActualMaximum(Calendar.DAY_OF_MONTH);
      label.setText(Integer.toString(lastDayLastMonth + cellDayValue));
    }
  }
 else {
    label.setForeground(getColors().getColor(ComponentColorDefaults.Key.FG_GRID_THIS_MONTH));
    Calendar calForDay=Calendar.getInstance();
    calForDay.set(internalModel.getModel().getYear(),internalModel.getModel().getMonth(),cellDayValue);
    DateModel<Calendar> modelForDay=new UtilCalendarModel(calForDay);
    label.setBackground(checkConstraints(modelForDay) ? getColors().getColor(ComponentColorDefaults.Key.BG_GRID) : getColors().getColor(ComponentColorDefaults.Key.BG_GRID_NOT_SELECTABLE));
    if (todayCal.get(Calendar.DATE) == cellDayValue && todayCal.get(Calendar.MONTH) == internalModel.getModel().getMonth() && todayCal.get(Calendar.YEAR) == internalModel.getModel().getYear()) {
      label.setForeground(getColors().getColor(ComponentColorDefaults.Key.FG_GRID_TODAY));
      if (internalModel.getModel().isSelected() && selectedCal.get(Calendar.DATE) == cellDayValue) {
        label.setForeground(getColors().getColor(ComponentColorDefaults.Key.FG_GRID_TODAY_SELECTED));
        label.setBackground(getColors().getColor(ComponentColorDefaults.Key.BG_GRID_TODAY_SELECTED));
      }
    }
 else {
      if (internalModel.getModel().isSelected() && selectedCal.get(Calendar.DATE) == cellDayValue) {
        label.setForeground(getColors().getColor(ComponentColorDefaults.Key.FG_GRID_SELECTED));
        label.setBackground(getColors().getColor(ComponentColorDefaults.Key.BG_GRID_SELECTED));
      }
    }
  }
  return label;
}",0.9823886340091756
169342,"@Override public DateModel<Calendar> createModel(Calendar value){
  return (DateModel<Calendar>)new UtilCalendarModel(value);
}","@Override public DateModel<Calendar> createModel(Calendar value){
  return new UtilCalendarModel(value);
}",0.9098712446351932
169343,"/** 
 * Create by specifying the initial value of the widget.
 * @param value value
 * @return A new Datepanel
 */
public JDatePanel createJDatePanel(T value){
  if (value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DateModel<T> model=createModel(value);
  return new JDatePanelImpl(model);
}","/** 
 * Create by specifying the initial value of the widget.
 * @param value value
 * @return A new Datepanel
 */
public DatePanel createJDatePanel(T value){
  if (value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DateModel<T> model=createModel(value);
  return new JDatePanel(model);
}",0.989113530326594
169344,"/** 
 * Create by specifying the initial value of the widget.
 * @param value value
 * @return A new Datepicker
 */
public JDatePicker createJDatePicker(T value){
  if (value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DateModel<T> model=createModel(value);
  return new JDatePickerImpl(new JDatePanelImpl(model));
}","/** 
 * Create by specifying the initial value of the widget.
 * @param value value
 * @return A new Datepicker
 */
public DatePicker createJDatePicker(T value){
  if (value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DateModel<T> model=createModel(value);
  return new JDatePicker(model);
}",0.947839046199702
169345,"public T getValue(){
  if (!selected) {
    return null;
  }
  T value=fromCalendar(calendarValue);
  return value;
}","public T getValue(){
  if (!selected) {
    return null;
  }
  return fromCalendar(calendarValue);
}",0.8663594470046083
169346,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
public void setMonth(int month);","/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
void setMonth(int month);",0.966824644549763
169347,"/** 
 * Set the value as selected.
 * @param selected
 */
public void setSelected(boolean selected);","/** 
 * Set the value as selected.
 * @param selected
 */
void setSelected(boolean selected);",0.9637305699481864
169348,"/** 
 * Add or substract number of months.
 * @param add
 */
public void addMonth(int add);","/** 
 * Add or substract number of months.
 * @param add
 */
void addMonth(int add);",0.96
169349,"/** 
 * Removes a PropertyChangeListener from the list of bean listeners. This method should be used to remove PropertyChangeListeners that were registered for all bound properties of the target bean.
 * @param listener      the PropertyChangeListener to be removed
 * @see #addPropertyChangeListener(PropertyChangeListener)
 */
public void removePropertyChangeListener(PropertyChangeListener listener);","/** 
 * Removes a PropertyChangeListener from the list of bean listeners. This method should be used to remove PropertyChangeListeners that were registered for all bound properties of the target bean.
 * @param listener      the PropertyChangeListener to be removed
 * @see #addPropertyChangeListener(PropertyChangeListener)
 */
void removePropertyChangeListener(PropertyChangeListener listener);",0.9912390488110138
169350,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
public void setYear(int year);","/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
void setYear(int year);",0.966183574879227
169351,"/** 
 * Adds a ChangeListener. ChangeListeners will be notified when the internal state of the control changes. This means that as a user scrolls through dates the internal model changes, which fires a ChangeEvent each time it changes.
 * @param changeListener
 */
public void addChangeListener(ChangeListener changeListener);","/** 
 * Adds a ChangeListener. ChangeListeners will be notified when the internal state of the control changes. This means that as a user scrolls through dates the internal model changes, which fires a ChangeEvent each time it changes.
 * @param changeListener
 */
void addChangeListener(ChangeListener changeListener);",0.9891472868217054
169352,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
public int getDay();","/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
int getDay();",0.962566844919786
169353,"/** 
 * Add or substract number of day.
 * @param add
 */
public void addDay(int add);","/** 
 * Add or substract number of day.
 * @param add
 */
void addDay(int add);",0.9575757575757576
169354,"/** 
 * Get the value this model represents.
 * @return
 */
public T getValue();","/** 
 * Get the value this model represents.
 * @return
 */
T getValue();",0.954248366013072
169355,"/** 
 * Removes the specified ChangeListener. ChangeListeners will be notified when the selected date is changed.
 * @param changeListener
 */
public void removeChangeListener(ChangeListener changeListener);","/** 
 * Removes the specified ChangeListener. ChangeListeners will be notified when the selected date is changed.
 * @param changeListener
 */
void removeChangeListener(ChangeListener changeListener);",0.9828009828009828
169356,"/** 
 * Add or substract number of years.
 * @param add
 */
public void addYear(int add);","/** 
 * Add or substract number of years.
 * @param add
 */
void addYear(int add);",0.95906432748538
169357,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
public int getYear();","/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
int getYear();",0.9629629629629628
169358,"/** 
 * Set the value this model represents.
 * @param value
 */
public void setValue(T value);","/** 
 * Set the value this model represents.
 * @param value
 */
void setValue(T value);",0.9617486338797814
169359,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
public void setDay(int day);","/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
void setDay(int day);",0.9655172413793104
169360,"/** 
 * Is the value selected or is it not.
 * @return
 */
public boolean isSelected();","/** 
 * Is the value selected or is it not.
 * @return
 */
boolean isSelected();",0.9580838323353292
169361,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
public void setDate(int year,int month,int day);","/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
void setDate(int year,int month,int day);",0.97119341563786
169362,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
public int getMonth();","/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
int getMonth();",0.9633507853403142
169363,"/** 
 * Adds a PropertyChangeListener to the list of bean listeners. The listener is registered for all bound properties of the target bean.
 * @param listener      the PropertyChangeListener to be added
 * @see #removePropertyChangeListener(PropertyChangeListener)
 */
public void addPropertyChangeListener(PropertyChangeListener listener);","/** 
 * Adds a PropertyChangeListener to the list of bean listeners. The listener is registered for all bound properties of the target bean.
 * @param listener      the PropertyChangeListener to be added
 * @see #removePropertyChangeListener(PropertyChangeListener)
 */
void addPropertyChangeListener(PropertyChangeListener listener);",0.9896296296296296
169364,"/** 
 * Returns the value of the currently represented date in the component. Depending on the version of the library used this type will one of the following: - java.util.Calendar - org.joda.time.DateMidnight - java.util.Date
 * @return
 */
public CalendarModel<?> getModel();","/** 
 * Returns the value of the currently represented date in the component. Depending on the version of the library used this type will one of the following: - java.util.Calendar - org.joda.time.DateMidnight - java.util.Date
 * @return
 */
CalendarModel<?> getModel();",0.9872029250457038
169365,"/** 
 * Removes the ActionListener. The actionListener is notified when a user clicks on a date.
 * @param arg
 */
public void removeActionListener(ActionListener actionListener);","/** 
 * Removes the ActionListener. The actionListener is notified when a user clicks on a date.
 * @param actionListener
 */
void removeActionListener(ActionListener actionListener);",0.9447513812154696
169366,"/** 
 * Adds an ActionListener. The actionListener is notified when a user clicks on a date. Deliberately selecting a date will trigger this event, not scrolling which fires a ChangeEvent for ChangeListeners.
 * @param actionListener
 */
public void addActionListener(ActionListener actionListener);","/** 
 * Adds an ActionListener. The actionListener is notified when a user clicks on a date. Deliberately selecting a date will trigger this event, not scrolling which fires a ChangeEvent for ChangeListeners.
 * @param actionListener
 */
void addActionListener(ActionListener actionListener);",0.988155668358714
169367,"/** 
 * This changes the behaviour of the control to require a double click on actionable clicks. If this is set the ActionEvent will only be thrown when double clicked on a date. Defaults to false.
 * @param doubleClickAction
 */
public abstract void setDoubleClickAction(boolean doubleClickAction);","/** 
 * This changes the behaviour of the control to require a double click on actionable clicks. If this is set the ActionEvent will only be thrown when double clicked on a date. Defaults to false.
 * @param doubleClickAction
 */
void setDoubleClickAction(boolean doubleClickAction);",0.9726027397260274
169368,"/** 
 * Is the year navigation buttons active.
 * @return visiblity of the year
 */
public abstract boolean isShowYearButtons();","/** 
 * Is the year navigation buttons active.
 * @return visiblity of the year
 */
boolean isShowYearButtons();",0.9333333333333332
169369,"/** 
 * Is a double click required to throw a ActionEvent.
 * @return
 */
public abstract boolean isDoubleClickAction();","/** 
 * Is a double click required to throw a ActionEvent.
 * @return
 */
boolean isDoubleClickAction();",0.9285714285714286
169370,"/** 
 * Sets the visibilty of the Year navigation buttons. Defaults to false.
 * @param showYearButtons
 */
public abstract void setShowYearButtons(boolean showYearButtons);","/** 
 * Sets the visibilty of the Year navigation buttons. Defaults to false.
 * @param showYearButtons
 */
void setShowYearButtons(boolean showYearButtons);",0.9515151515151516
169371,"/** 
 * Is the text component editable or not. Defaults to false.
 * @param editable
 */
public abstract void setTextEditable(boolean editable);","/** 
 * Is the text component editable or not. Defaults to false.
 * @param editable
 */
void setTextEditable(boolean editable);",0.9411764705882352
169372,"/** 
 * Sets the image on the button.
 * @param icon the icon to use
 */
public abstract void setButtonIcon(Icon icon);","/** 
 * Sets the image on the button.
 * @param icon the icon to use
 */
void setButtonIcon(Icon icon);",0.927927927927928
169373,"/** 
 * Is the button focusable.
 * @return
 */
public abstract boolean getButtonFocusable();","/** 
 * Is the button focusable.
 * @return
 */
boolean getButtonFocusable();",0.9058823529411764
169374,"/** 
 * Returns the size of the underlying textfield
 * @return Columns
 */
public abstract int getTextfieldColumns();","/** 
 * Returns the size of the underlying textfield
 * @return Columns
 */
int getTextfieldColumns();",0.9272727272727272
169375,"/** 
 * Sets the size of the underlying textfield in columns
 * @param columns {@link JTextField#setColumns(int)}
 */
public abstract void setTextfieldColumns(int columns);","/** 
 * Sets the size of the underlying textfield in columns
 * @param columns {@link JTextField#setColumns(int)}
 */
void setTextfieldColumns(int columns);",0.951219512195122
169376,"/** 
 * Sets the button to be focusable. Defaults to true.
 * @param focusable
 */
public abstract void setButtonFocusable(boolean focusable);","/** 
 * Sets the button to be focusable. Defaults to true.
 * @param focusable
 */
void setButtonFocusable(boolean focusable);",0.9402985074626866
169377,"/** 
 * The icon on the button.
 * @return Icon on Button
 */
public abstract Icon getButtonIcon();","/** 
 * The icon on the button.
 * @return Icon on Button
 */
Icon getButtonIcon();",0.912087912087912
169378,"/** 
 * Is the text component editable or not.
 * @return
 */
public abstract boolean isTextEditable();","/** 
 * Is the text component editable or not.
 * @return
 */
boolean isTextEditable();",0.9157894736842104
169379,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  RangeConstraint other=(RangeConstraint)obj;
  if (after == null) {
    if (other.after != null)     return false;
  }
 else   if (!after.equals(other.after))   return false;
  if (before == null) {
    if (other.before != null)     return false;
  }
 else   if (!before.equals(other.before))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  RangeConstraint other=(RangeConstraint)obj;
  if (after == null) {
    if (other.after != null) {
      return false;
    }
  }
 else   if (!after.equals(other.after)) {
    return false;
  }
  if (before == null) {
    if (other.before != null) {
      return false;
    }
  }
 else   if (!before.equals(other.before)) {
    return false;
  }
  return true;
}",0.7030651340996169
169380,"public void propertyChange(PropertyChangeEvent evt){
  if (formattedTextField.isEditable() && formattedTextField.getValue() != null) {
    Calendar value=(Calendar)formattedTextField.getValue();
    DateModel model=new UtilCalendarModel(value);
    if (!datePanel.checkConstraints(model)) {
      formattedTextField.setValue(evt.getOldValue());
      return;
    }
    datePanel.getModel().setDate(value.get(Calendar.YEAR),value.get(Calendar.MONTH),value.get(Calendar.DATE));
    datePanel.getModel().setSelected(true);
  }
}","public void propertyChange(PropertyChangeEvent evt){
  if (formattedTextField.isEditable() && formattedTextField.getValue() != null) {
    Calendar value=(Calendar)formattedTextField.getValue();
    DateModel model=new UtilCalendarModel(value);
    if (!datePanel.checkConstraints(model)) {
      formattedTextField.setValue(evt.getOldValue());
      return;
    }
    datePanel.getModel().setDate(value.get(Calendar.YEAR),value.get(Calendar.MONTH),value.get(Calendar.DATE));
    datePanel.getModel().setSelected(true);
  }
  if (formattedTextField.isEditable() && evt.getNewValue() == null && ignoreFurtherPropertyEvents.compareAndSet(false,true)) {
    getModel().setValue(null);
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        ignoreFurtherPropertyEvents.set(false);
      }
    }
);
  }
}",0.7783543365455893
169381,"@Override public void setButtonIcon(Icon icon){
  button.setIcon(icon);
  if (icon == null) {
    button.setText(""String_Node_Str"");
  }
 else {
    button.setText(""String_Node_Str"");
  }
}","public void setButtonIcon(Icon icon){
  button.setIcon(icon);
  if (icon == null) {
    button.setText(""String_Node_Str"");
  }
 else {
    button.setText(""String_Node_Str"");
  }
}",0.9728260869565216
169382,"@Override public Icon getButtonIcon(){
  return button.getIcon();
}","public Icon getButtonIcon(){
  return button.getIcon();
}",0.9193548387096774
169383,"/** 
 * Part of TableModel, day
 */
public Object getValueAt(int arg0,int arg1){
  Calendar firstDayOfMonth=Calendar.getInstance();
  firstDayOfMonth.set(model.getYear(),model.getMonth(),1);
  int DOW=firstDayOfMonth.get(Calendar.DAY_OF_WEEK);
  int value=arg1 - DOW + arg0 * 7 + 1 + firstDayOfWeek;
  return new Integer(value);
}","/** 
 * Part of TableModel, day
 */
public Object getValueAt(int arg0,int arg1){
  Calendar firstDayOfMonth=Calendar.getInstance();
  firstDayOfMonth.set(model.getYear(),model.getMonth(),1);
  int DOW=firstDayOfMonth.get(Calendar.DAY_OF_WEEK);
  int value=arg1 - DOW + arg0 * 7 + 1 + (firstDayOfWeek % 7);
  return new Integer(value);
}",0.990990990990991
169384,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
void setMonth(int month);","/** 
 * Getters and setters which represent a gregorian date.
 * @param month month
 */
void setMonth(int month);",0.9209302325581395
169385,"/** 
 * Set the value as selected.
 * @param selected
 */
void setSelected(boolean selected);","/** 
 * Set the value as selected.
 * @param selected select this value?
 */
void setSelected(boolean selected);",0.9073170731707316
169386,"/** 
 * Add or substract number of months.
 * @param add
 */
void addMonth(int add);","/** 
 * Add or substract number of months.
 * @param add months
 */
void addMonth(int add);",0.96
169387,"/** 
 * Removes a PropertyChangeListener from the list of bean listeners. This method should be used to remove PropertyChangeListeners that were registered for all bound properties of the target bean.
 * @param listener      the PropertyChangeListener to be removed
 * @see #addPropertyChangeListener(PropertyChangeListener)
 */
void removePropertyChangeListener(PropertyChangeListener listener);","/** 
 * Removes a PropertyChangeListener from the list of bean listeners. This method should be used to remove PropertyChangeListeners that were registered for all bound properties of the target bean.
 * @param listener The PropertyChangeListener to be removed
 * @see #addPropertyChangeListener(PropertyChangeListener)
 */
void removePropertyChangeListener(PropertyChangeListener listener);",0.9911054637865312
169388,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
void setYear(int year);","/** 
 * Getters and setters which represent a gregorian date.
 * @param year year
 */
void setYear(int year);",0.9282296650717704
169389,"/** 
 * Adds a ChangeListener. ChangeListeners will be notified when the internal state of the control changes. This means that as a user scrolls through dates the internal model changes, which fires a ChangeEvent each time it changes.
 * @param changeListener
 */
void addChangeListener(ChangeListener changeListener);","/** 
 * Adds a ChangeListener. ChangeListeners will be notified when the internal state of the control changes. This means that as a user scrolls through dates the internal model changes, which fires a ChangeEvent each time it changes.
 * @param changeListener The changelistener to add.
 */
void addChangeListener(ChangeListener changeListener);",0.9593984962406016
169390,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
int getDay();","/** 
 * Getters and setters which represent a gregorian date.
 * @return day
 */
int getDay();",0.9782608695652174
169391,"/** 
 * Add or substract number of day.
 * @param add
 */
void addDay(int add);","/** 
 * Add or substract number of day.
 * @param add days
 */
void addDay(int add);",0.9693251533742332
169392,"/** 
 * Get the value this model represents.
 * @return
 */
T getValue();","/** 
 * Get the value this model represents.
 * @return current value
 */
T getValue();",0.9125
169393,"/** 
 * Removes the specified ChangeListener. ChangeListeners will be notified when the selected date is changed.
 * @param changeListener
 */
void removeChangeListener(ChangeListener changeListener);","/** 
 * Removes the specified ChangeListener. ChangeListeners will be notified when the selected date is changed.
 * @param changeListener The changelistener to remove.
 */
void removeChangeListener(ChangeListener changeListener);",0.9302325581395348
169394,"/** 
 * Add or substract number of years.
 * @param add
 */
void addYear(int add);","/** 
 * Add or substract number of years.
 * @param add years
 */
void addYear(int add);",0.9647058823529412
169395,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
int getYear();","/** 
 * Getters and setters which represent a gregorian date.
 * @return year
 */
int getYear();",0.9732620320855616
169396,"/** 
 * Set the value this model represents.
 * @param value
 */
void setValue(T value);","/** 
 * Set the value this model represents.
 * @param value new value
 */
void setValue(T value);",0.946236559139785
169397,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
void setDay(int day);","/** 
 * Getters and setters which represent a gregorian date.
 * @param day day
 */
void setDay(int day);",0.916256157635468
169398,"/** 
 * Is the value selected or is it not.
 * @return
 */
boolean isSelected();","/** 
 * @return Is the value selected or is it not.
 */
boolean isSelected();",0.8789808917197452
169399,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
void setDate(int year,int month,int day);","/** 
 * Getters and setters which represent a gregorian date.
 * @param year year
 * @param month month
 * @param day day
 */
void setDate(int year,int month,int day);",0.8140350877192982
169400,"/** 
 * Getters and setters which represent a gregorian date.
 * @return
 */
int getMonth();","/** 
 * Getters and setters which represent a gregorian date.
 * @return month
 */
int getMonth();",0.968421052631579
169401,"/** 
 * Adds a PropertyChangeListener to the list of bean listeners. The listener is registered for all bound properties of the target bean.
 * @param listener      the PropertyChangeListener to be added
 * @see #removePropertyChangeListener(PropertyChangeListener)
 */
void addPropertyChangeListener(PropertyChangeListener listener);","/** 
 * Adds a PropertyChangeListener to the list of bean listeners. The listener is registered for all bound properties of the target bean.
 * @param listener The PropertyChangeListener to be added
 * @see #removePropertyChangeListener(PropertyChangeListener)
 */
void addPropertyChangeListener(PropertyChangeListener listener);",0.9894419306184012
169402,"/** 
 * Returns the value of the currently represented date in the component. Depending on the version of the library used this type will one of the following: - java.util.Calendar - org.joda.time.DateMidnight - java.util.Date
 * @return
 */
DateModel<?> getModel();","/** 
 * Returns the value of the currently represented date in the component. Depending on the version of the library used this type will one of the following: - java.util.Calendar - org.joda.time.DateMidnight - java.util.Date
 * @return A new Model
 */
DateModel<?> getModel();",0.9779411764705882
169403,"/** 
 * Removes the ActionListener. The actionListener is notified when a user clicks on a date.
 * @param actionListener
 */
void removeActionListener(ActionListener actionListener);","/** 
 * Removes the ActionListener. The actionListener is notified when a user clicks on a date.
 * @param actionListener The listener to remove
 */
void removeActionListener(ActionListener actionListener);",0.9408740359897172
169404,"/** 
 * Adds an ActionListener. The actionListener is notified when a user clicks on a date. Deliberately selecting a date will trigger this event, not scrolling which fires a ChangeEvent for ChangeListeners.
 * @param actionListener
 */
void addActionListener(ActionListener actionListener);","/** 
 * Adds an ActionListener. The actionListener is notified when a user clicks on a date. Deliberately selecting a date will trigger this event, not scrolling which fires a ChangeEvent for ChangeListeners.
 * @param actionListener The listener to add
 */
void addActionListener(ActionListener actionListener);",0.9668874172185432
169405,"/** 
 * Adds an constraint on selectable dates.
 * @param constraint the constraint to check on selection
 */
void addDateSelectionConstraint(DateSelectionConstraint constraint);","/** 
 * Adds an constraint on selectable dates.
 * @param constraint the constraint to add
 */
void addDateSelectionConstraint(DateSelectionConstraint constraint);",0.93841642228739
169406,"/** 
 * Removes an constraint on selectable dates.
 * @param constraint the constraint to check on selection
 */
void removeDateSelectionConstraint(DateSelectionConstraint constraint);","/** 
 * Removes an constraint on selectable dates.
 * @param constraint the constraint to remove
 */
void removeDateSelectionConstraint(DateSelectionConstraint constraint);",0.949438202247191
169407,"/** 
 * Create by specifying the initial value of the widget.
 * @param value
 * @return
 */
public JDatePanel createJDatePanel(T value){
  if (value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DateModel<T> model=createModel(value);
  return new JDatePanelImpl(model);
}","/** 
 * Create by specifying the initial value of the widget.
 * @param value value
 * @return A new Datepanel
 */
public JDatePanel createJDatePanel(T value){
  if (value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DateModel<T> model=createModel(value);
  return new JDatePanelImpl(model);
}",0.9648562300319488
169408,"/** 
 * Create by specifying the initial value of the widget.
 * @param value
 * @return
 */
public JDatePicker createJDatePicker(T value){
  if (value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DateModel<T> model=createModel(value);
  return new JDatePickerImpl(new JDatePanelImpl(model));
}","/** 
 * Create by specifying the initial value of the widget.
 * @param value value
 * @return A new Datepicker
 */
public JDatePicker createJDatePicker(T value){
  if (value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DateModel<T> model=createModel(value);
  return new JDatePickerImpl(new JDatePanelImpl(model));
}",0.9658246656760772
169409,"/** 
 * Create a DateModel based on the type of the value.
 * @param value
 * @return
 */
public abstract DateModel<T> createModel(T value);","/** 
 * Create a DateModel based on the type of the value.
 * @param value value
 * @return A new model
 */
public abstract DateModel<T> createModel(T value);",0.9395973154362416
169410,"/** 
 * This changes the behaviour of the control to require a double click on actionable clicks. If this is set the ActionEvent will only be thrown when double clicked on a date. Defaults to false.
 * @param doubleClickAction
 */
void setDoubleClickAction(boolean doubleClickAction);","/** 
 * This changes the behaviour of the control to require a double click on actionable clicks. If this is set the ActionEvent will only be fired when double clicked on a date. Defaults to false.
 * @param doubleClickAction use double clicks?
 */
void setDoubleClickAction(boolean doubleClickAction);",0.9488054607508531
169411,"/** 
 * Is a double click required to throw a ActionEvent.
 * @return
 */
boolean isDoubleClickAction();","/** 
 * @return Is a double click required to fire a ActionEvent.
 */
boolean isDoubleClickAction();",0.8725490196078431
169412,"/** 
 * Sets the visibilty of the Year navigation buttons. Defaults to false.
 * @param showYearButtons
 */
void setShowYearButtons(boolean showYearButtons);","/** 
 * Sets the visibilty of the Year navigation buttons. Defaults to false.
 * @param showYearButtons show the button?
 */
void setShowYearButtons(boolean showYearButtons);",0.9486404833836858
169413,"/** 
 * Is the text component editable or not. Defaults to false.
 * @param editable
 */
void setTextEditable(boolean editable);","/** 
 * Is the text component editable or not. Defaults to false.
 * @param editable should the textfield be editable?
 */
void setTextEditable(boolean editable);",0.8827586206896552
169414,"/** 
 * Is the button focusable.
 * @return
 */
boolean getButtonFocusable();","/** 
 * @return Is the button focusable?
 */
boolean getButtonFocusable();",0.8609271523178808
169415,"/** 
 * Returns the size of the underlying textfield
 * @return Columns
 */
int getTextfieldColumns();","/** 
 * @return Columns the size of the underlying textfield
 */
int getTextfieldColumns();",0.8497409326424871
169416,"/** 
 * Sets the button to be focusable. Defaults to true.
 * @param focusable
 */
void setButtonFocusable(boolean focusable);","/** 
 * Sets the button to be focusable. Defaults to true.
 * @param focusable should the button be focusable?
 */
void setButtonFocusable(boolean focusable);",0.8873239436619719
169417,"/** 
 * Is the text component editable or not.
 * @return
 */
boolean isTextEditable();","/** 
 * @return Is the text component editable?
 */
boolean isTextEditable();",0.8292682926829268
169418,boolean isValidSelection(DateModel<?> model);,"/** 
 * Check the models value to be a valid, selectable date.
 * @param model The model to check
 * @return <code>true</code> if the models value is valid, else returns<code>false</code>
 */
boolean isValidSelection(DateModel<?> model);",0.3191489361702128
169419,"/** 
 * This method initializes dayTable	
 * @return javax.swing.JTable	
 */
private javax.swing.JTable getDayTable(){
  if (dayTable == null) {
    dayTable=new javax.swing.JTable();
    dayTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
    dayTable.setPreferredSize(new java.awt.Dimension(100,80));
    dayTable.setModel(getCalenderModel());
    dayTable.setShowGrid(true);
    dayTable.setGridColor(Color.WHITE);
    dayTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    dayTable.setCellSelectionEnabled(true);
    dayTable.setRowSelectionAllowed(true);
    dayTable.setFocusable(false);
    dayTable.addMouseListener(getEventHandler());
    TableColumn column=null;
    for (int i=0; i < 7; i++) {
      column=dayTable.getColumnModel().getColumn(i);
      column.setPreferredWidth(15);
      column.setCellRenderer(getDayTableCellRenderer());
    }
  }
  return dayTable;
}","/** 
 * This method initializes dayTable	
 * @return javax.swing.JTable	
 */
private javax.swing.JTable getDayTable(){
  if (dayTable == null) {
    dayTable=new javax.swing.JTable();
    dayTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
    dayTable.setRowHeight(18);
    dayTable.setPreferredSize(new java.awt.Dimension(100,80));
    dayTable.setModel(getCalenderModel());
    dayTable.setShowGrid(true);
    dayTable.setGridColor(Color.WHITE);
    dayTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    dayTable.setCellSelectionEnabled(true);
    dayTable.setRowSelectionAllowed(true);
    dayTable.setFocusable(false);
    dayTable.addMouseListener(getEventHandler());
    TableColumn column=null;
    for (int i=0; i < 7; i++) {
      column=dayTable.getColumnModel().getColumn(i);
      column.setPreferredWidth(15);
      column.setCellRenderer(getDayTableCellRenderer());
    }
  }
  return dayTable;
}",0.9833243679397524
169420,"/** 
 * This method initializes this
 * @return void
 */
private void initialize(){
  this.setLayout(new java.awt.BorderLayout());
  this.setSize(200,160);
  this.setPreferredSize(new java.awt.Dimension(200,160));
  this.setBackground(java.awt.SystemColor.activeCaptionText);
  this.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.black,1));
  this.setOpaque(false);
  this.add(getNorthPanel(),java.awt.BorderLayout.NORTH);
  this.add(getSouthPanel(),java.awt.BorderLayout.SOUTH);
  this.add(getCenterPanel(),java.awt.BorderLayout.CENTER);
}","/** 
 * This method initializes this
 * @return void
 */
private void initialize(){
  this.setLayout(new java.awt.BorderLayout());
  this.setSize(200,220);
  this.setPreferredSize(new java.awt.Dimension(200,220));
  this.setBackground(java.awt.SystemColor.activeCaptionText);
  this.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.black,1));
  this.setOpaque(false);
  this.add(getNorthPanel(),java.awt.BorderLayout.NORTH);
  this.add(getSouthPanel(),java.awt.BorderLayout.SOUTH);
  this.add(getCenterPanel(),java.awt.BorderLayout.CENTER);
}",0.9928698752228164
169421,"public static boolean canInterfaceWith(TileEntity tile,ForgeDirection direction,PneumaticTube requester,boolean canInterfaceWithIInventory){
  PneumaticTube tube=tile != null ? MultipartCompatibility.getPart(tile.getWorldObj(),tile.xCoord,tile.yCoord,tile.zCoord,PneumaticTube.class) : null;
  if (tube != null && tube.isConnected(direction,requester))   return true;
  if (!canInterfaceWithIInventory)   return false;
  if (tile instanceof IInventory) {
    return !(tile instanceof ISidedInventory) || ((ISidedInventory)tile).getAccessibleSlotsFromSide(direction.ordinal()).length > 0;
  }
  return false;
}","public static boolean canInterfaceWith(TileEntity tile,ForgeDirection direction,PneumaticTube requester,boolean canInterfaceWithIInventory){
  PneumaticTube tube=tile != null ? MultipartCompatibility.getPart(tile.getWorldObj(),tile.xCoord,tile.yCoord,tile.zCoord,PneumaticTube.class) : null;
  if (tube != null && tube.isConnected(direction,requester))   return true;
  if (!canInterfaceWithIInventory)   return false;
  if (tile instanceof ITubeConnection) {
    return true;
  }
  if (tile instanceof IInventory) {
    return !(tile instanceof ISidedInventory) || ((ISidedInventory)tile).getAccessibleSlotsFromSide(direction.ordinal()).length > 0;
  }
  return false;
}",0.9515625
169422,"@Override public void handleClientSide(EntityPlayer player){
  TubeStack.tickTimeMultiplier=Math.min(1,50D / (tickTime - 5));
}","@Override public void handleClientSide(EntityPlayer player){
  TubeStack.tickTimeMultiplier=Math.min(1,50D / Math.max(tickTime - 5,0.01));
}",0.951310861423221
169423,"private void ejectItems(){
  for (Iterator<TubeStack> iterator=internalItemStackBuffer.iterator(); iterator.hasNext(); ) {
    TubeStack tubeStack=iterator.next();
    if (IOHelper.canInterfaceWith(getTileCache(getOutputDirection()),getFacingDirection())) {
      ItemStack returnedStack=IOHelper.insert(getTileCache(getOutputDirection()),tubeStack.stack,getFacingDirection(),tubeStack.color,false);
      if (returnedStack == null) {
        iterator.remove();
        markDirty();
        if (!ejectionScheduled)         break;
      }
 else       if (returnedStack.stackSize != tubeStack.stack.stackSize) {
        markDirty();
        if (!ejectionScheduled)         break;
      }
 else {
        break;
      }
    }
 else     if (spawnItemsInWorld) {
      ForgeDirection direction=getFacingDirection().getOpposite();
      if (worldObj.getBlock(xCoord + direction.offsetX,yCoord + direction.offsetY,zCoord + direction.offsetZ).getBlocksMovement(worldObj,xCoord + direction.offsetX,yCoord + direction.offsetY,zCoord + direction.offsetZ)) {
        ejectItemInWorld(tubeStack.stack,direction);
        iterator.remove();
        markDirty();
      }
 else {
        break;
      }
    }
  }
}","private void ejectItems(){
  for (Iterator<TubeStack> iterator=internalItemStackBuffer.iterator(); iterator.hasNext(); ) {
    TubeStack tubeStack=iterator.next();
    if (IOHelper.canInterfaceWith(getTileCache(getOutputDirection()),getFacingDirection())) {
      ItemStack returnedStack=IOHelper.insert(getTileCache(getOutputDirection()),tubeStack.stack,getFacingDirection(),tubeStack.color,false);
      if (returnedStack == null) {
        iterator.remove();
        markDirty();
        if (!ejectionScheduled)         break;
      }
 else       if (returnedStack.stackSize != tubeStack.stack.stackSize) {
        markDirty();
        if (!ejectionScheduled)         break;
      }
 else {
        break;
      }
    }
 else     if (spawnItemsInWorld) {
      ForgeDirection direction=getFacingDirection().getOpposite();
      if ((worldObj.getBlock(xCoord + direction.offsetX,yCoord + direction.offsetY,zCoord + direction.offsetZ).getBlocksMovement(worldObj,xCoord + direction.offsetX,yCoord + direction.offsetY,zCoord + direction.offsetZ)) || (worldObj.getBlock(xCoord + direction.offsetX,yCoord + direction.offsetY,zCoord + direction.offsetZ) instanceof BlockLiquid) || (worldObj.getBlock(xCoord + direction.offsetX,yCoord + direction.offsetY,zCoord + direction.offsetZ) instanceof IFluidBlock)) {
        ejectItemInWorld(tubeStack.stack,direction);
        iterator.remove();
        markDirty();
      }
 else {
        break;
      }
    }
  }
}",0.9027882441597588
169424,"private void updateCraftingGrid(){
  craftResult.setInventorySlotContents(0,CraftingManager.getInstance().findMatchingRecipe(getCraftingGrid(),getWorldObj()));
}","protected void updateCraftingGrid(){
  craftResult.setInventorySlotContents(0,CraftingManager.getInstance().findMatchingRecipe(getCraftingGrid(),getWorldObj()));
}",0.9753086419753086
169425,"private void craft(){
  for (int i=0; i < craftingGrid.length; ++i) {
    ItemStack itemstack1=craftingGrid[i];
    if (itemstack1 != null) {
      boolean pulledFromInventory=false;
      if (craftingGrid[i].stackSize == 1) {
        ItemStack stackFromTable=ContainerProjectTable.extractStackFromTable(this,craftingGrid[i],false);
        pulledFromInventory=stackFromTable != null;
      }
      if (!pulledFromInventory) {
        craftingGrid[i].stackSize--;
        if (craftingGrid[i].stackSize <= 0)         craftingGrid[i]=null;
      }
      if (itemstack1.getItem().hasContainerItem(itemstack1)) {
        ItemStack itemstack2=itemstack1.getItem().getContainerItem(itemstack1);
        if (itemstack2 != null && itemstack2.isItemStackDamageable() && itemstack2.getItemDamage() > itemstack2.getMaxDamage()) {
          continue;
        }
        if (!itemstack1.getItem().doesContainerItemLeaveCraftingGrid(itemstack1)) {
          ItemStack remainder=IOHelper.insert(this,itemstack2,0,false);
          if (remainder != null) {
            worldObj.spawnEntityInWorld(new EntityItem(worldObj,xCoord,yCoord,zCoord,remainder));
          }
        }
      }
    }
  }
}","protected void craft(){
  for (int i=0; i < craftingGrid.length; ++i) {
    ItemStack itemstack1=craftingGrid[i];
    if (itemstack1 != null) {
      boolean pulledFromInventory=false;
      if (craftingGrid[i].stackSize == 1) {
        ItemStack stackFromTable=ContainerProjectTable.extractStackFromTable(this,craftingGrid[i],false);
        pulledFromInventory=stackFromTable != null;
      }
      if (!pulledFromInventory) {
        craftingGrid[i].stackSize--;
        if (craftingGrid[i].stackSize <= 0)         craftingGrid[i]=null;
      }
      if (itemstack1.getItem().hasContainerItem(itemstack1)) {
        ItemStack itemstack2=itemstack1.getItem().getContainerItem(itemstack1);
        if (itemstack2 != null && itemstack2.isItemStackDamageable() && itemstack2.getItemDamage() > itemstack2.getMaxDamage()) {
          continue;
        }
        if (!itemstack1.getItem().doesContainerItemLeaveCraftingGrid(itemstack1)) {
          ItemStack remainder=IOHelper.insert(this,itemstack2,0,false);
          if (remainder != null) {
            worldObj.spawnEntityInWorld(new EntityItem(worldObj,xCoord,yCoord,zCoord,remainder));
          }
        }
      }
    }
  }
}",0.994915254237288
169426,"@Override public ItemStack getStackInSlot(int i){
  return i < inventory.length ? inventory[i] : craftResult.getStackInSlot(0);
}","@Override public ItemStack getStackInSlot(int i){
  return inventory[i];
}",0.729064039408867
169427,"@Override public void setInventorySlotContents(int i,ItemStack itemStack){
  if (i < inventory.length) {
    inventory[i]=itemStack;
  }
 else {
    craftResult.setInventorySlotContents(0,itemStack);
    craft();
  }
  updateCraftingGrid();
}","@Override public void setInventorySlotContents(int i,ItemStack itemStack){
  inventory[i]=itemStack;
}",0.5930232558139535
169428,"@Override public boolean canExtractItem(int slot,ItemStack extractedStack,int side){
  if (slot == 18) {
    if (extractedStack != null && getStackInSlot(18) != null && getStackInSlot(18).stackSize != extractedStack.stackSize)     return false;
    Map<ItemStack,Integer> recipeItems=new HashMap<ItemStack,Integer>();
    for (    ItemStack stack : craftingGrid) {
      if (stack != null) {
        addItem(recipeItems,stack);
      }
    }
    for (    Map.Entry<ItemStack,Integer> entry : recipeItems.entrySet()) {
      ItemStack stack=entry.getKey().copy();
      stack.stackSize=entry.getValue();
      ItemStack extracted=IOHelper.extract(this,ForgeDirection.UNKNOWN,stack,true,true);
      if (extracted == null)       return false;
    }
    return true;
  }
 else {
    return side > 5;
  }
}","@Override public boolean canExtractItem(int slot,ItemStack extractedStack,int side){
  if (slot == 18) {
    return true;
  }
 else {
    return side > 5;
  }
}",0.3326403326403326
169429,"@Override public void tick(){
}","@Override public void tick(){
  if (getWorld().isRemote)   return;
  if ((power != right().getInput() || left().getInput()) && !power) {
    state=!state;
    playTickSound();
  }
  power=right().getInput() || left().getInput();
  front().setOutput(state);
  back().setOutput(!state);
  t1.setState(!state);
  t2.setState(state);
  l.setState(state);
}",0.1618798955613577
169430,"@Override public void doLogic(){
  if ((power != right().getInput() || left().getInput()) && !power) {
    state=!state;
    playTickSound();
  }
  power=right().getInput() || left().getInput();
  front().setOutput(state);
  back().setOutput(!state);
  t1.setState(!state);
  t2.setState(state);
  l.setState(state);
}","@Override public void doLogic(){
}",0.1931818181818181
169431,"@Override public TubeStack acceptItemFromTube(TubeStack stack,ForgeDirection from,boolean simulate){
  if (from == getFacingDirection())   return stack;
  stack.stack=IOHelper.insert((IInventory)this,stack.stack,from.ordinal(),simulate);
  return stack.stack == null ? null : stack;
}","@Override public TubeStack acceptItemFromTube(TubeStack stack,ForgeDirection from,boolean simulate){
  stack.stack=IOHelper.insert(this,stack.stack,from.ordinal(),simulate);
  return stack.stack == null ? null : stack;
}",0.873015873015873
169432,"public void readData(DataInput buffer){
}","public void readData(DataInput buffer) throws IOException {
  readFromNBT(PacketHelper.readNBT(buffer));
}",0.5578231292517006
169433,"public void writeData(DataOutput buffer){
}","public void writeData(DataOutput buffer) throws IOException {
  NBTTagCompound tag=new NBTTagCompound();
  writeToNBT(tag);
  PacketHelper.writeNBT(buffer,tag);
}",0.4195121951219512
169434,"@Override public IConnectionCache<? extends IRedstoneDevice> getRedstoneConnectionCache(){
  return connections;
}","@Override public RedstoneConnectionCache getRedstoneConnectionCache(){
  return connections;
}",0.8269230769230769
169435,"@SubscribeEvent public void onRenderDebugScreen(RenderGameOverlayEvent event){
  if (event.type.equals(RenderGameOverlayEvent.ElementType.DEBUG)) {
    Minecraft mc=Minecraft.getMinecraft();
    FontRenderer fr=mc.fontRenderer;
    MinecraftServer sv=MinecraftServer.getServer();
    boolean isLocal=sv instanceof IntegratedServer;
    List<String> text=new ArrayList<String>();
{
      fr.drawStringWithShadow(""String_Node_Str"",event.resolution.getScaledWidth() - 165,75,0xFFFFFF44);
    }
    if (sv != null) {
      double ms=MathHelper.mean(sv.worldTickTimes.get(mc.theWorld.provider.dimensionId)) * 1.0E-6D;
      double tps=Math.min(1000.0 / ms,20);
      text.add(""String_Node_Str"" + df.format(tps) + ""String_Node_Str""+ df.format(ms)+ ""String_Node_Str"");
    }
 else {
      text.add(""String_Node_Str"");
    }
    int i=0;
    for (    String s : text) {
      fr.drawStringWithShadow(s,event.resolution.getScaledWidth() - 160,90 + 10 * i,0xFFFFFF77);
      i++;
    }
  }
}","@SubscribeEvent public void onRenderDebugScreen(RenderGameOverlayEvent event){
  if (event.type == RenderGameOverlayEvent.ElementType.DEBUG) {
    Minecraft mc=Minecraft.getMinecraft();
    FontRenderer fr=mc.fontRenderer;
    MinecraftServer sv=MinecraftServer.getServer();
    boolean isLocal=sv instanceof IntegratedServer;
    List<String> text=new ArrayList<String>();
{
      fr.drawStringWithShadow(""String_Node_Str"",event.resolution.getScaledWidth() - 165,75,0xFFFFFF44);
    }
    if (sv != null) {
      double ms=MathHelper.mean(sv.worldTickTimes.get(mc.theWorld.provider.dimensionId)) * 1.0E-6D;
      double tps=Math.min(1000.0 / ms,20);
      text.add(""String_Node_Str"" + df.format(tps) + ""String_Node_Str""+ df.format(ms)+ ""String_Node_Str"");
    }
 else {
      text.add(""String_Node_Str"");
    }
    int i=0;
    for (    String s : text) {
      fr.drawStringWithShadow(s,event.resolution.getScaledWidth() - 160,90 + 10 * i,0xFFFFFF77);
      i++;
    }
  }
}",0.9933571793561574
169436,"protected List<IConnection<IRedstoneDevice>> performPropagation(){
  List<IConnection<IRedstoneDevice>> connections=new ArrayList<IConnection<IRedstoneDevice>>();
  IConnection<IRedstoneDevice> firstCon=(IConnection<IRedstoneDevice>)getDevice().getRedstoneConnectionCache().getConnectionOnSide(getSide());
  if (firstCon != null)   connections.add(firstCon);
  List<IConnection<IRedstoneDevice>> current=new ArrayList<IConnection<IRedstoneDevice>>();
  for (  Entry<IConnection<IRedstoneDevice>,Boolean> p : getPropagation(getDevice(),getSide())) {
    if (p.getValue()) {
      schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
    }
 else {
      if (p.getKey().getB() instanceof IRedstoneConductor && ((IRedstoneConductor)p.getKey().getB()).hasLoss(p.getKey().getSideB()) != (this instanceof LossyPropagator)) {
        schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
      }
 else {
        current.add(p.getKey());
      }
    }
  }
  if (current.size() == 0 && connections.size() == 0)   return connections;
  List<IConnection<IRedstoneDevice>> newDevices=new ArrayList<IConnection<IRedstoneDevice>>();
  List<Entry<IConnection<IRedstoneDevice>,Boolean>> tmp=new ArrayList<Entry<IConnection<IRedstoneDevice>,Boolean>>();
  while (current.size() > 0) {
    for (    IConnection<IRedstoneDevice> c : current) {
      tmp.addAll(getPropagation(c.getB(),c.getSideB()));
      for (      Entry<IConnection<IRedstoneDevice>,Boolean> p : tmp)       if (p.getValue())       schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
 else       if (!connections.contains(p) && !current.contains(p) && !tmp.contains(p))       newDevices.add(p.getKey());
      tmp.clear();
    }
    for (    IConnection<IRedstoneDevice> c : current)     if (!connections.contains(c))     connections.add(c);
    current.clear();
    for (    IConnection<IRedstoneDevice> c : newDevices)     if (!connections.contains(c))     current.add(c);
    newDevices.clear();
  }
  return connections;
}","protected List<IConnection<IRedstoneDevice>> performPropagation(){
  List<IConnection<IRedstoneDevice>> connections=new ArrayList<IConnection<IRedstoneDevice>>();
  IConnection<IRedstoneDevice> firstCon=(IConnection<IRedstoneDevice>)getDevice().getRedstoneConnectionCache().getConnectionOnSide(getSide());
  if (firstCon != null)   connections.add(firstCon);
  List<IConnection<IRedstoneDevice>> current=new ArrayList<IConnection<IRedstoneDevice>>();
  for (  Entry<IConnection<IRedstoneDevice>,Boolean> p : getPropagation(getDevice(),getSide())) {
    if (p.getValue()) {
      schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
    }
 else {
      if (p.getKey().getB() instanceof IRedstoneConductor && ((IRedstoneConductor)p.getKey().getB()).hasLoss(p.getKey().getSideB()) != (this instanceof LossyPropagator)) {
        schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
      }
 else {
        current.add(p.getKey());
      }
    }
  }
  if (current.size() == 0 && connections.size() == 0)   return connections;
  List<IConnection<IRedstoneDevice>> newDevices=new ArrayList<IConnection<IRedstoneDevice>>();
  while (current.size() > 0) {
    List<Entry<IConnection<IRedstoneDevice>,Boolean>> tmp=new ArrayList<Entry<IConnection<IRedstoneDevice>,Boolean>>();
    for (    IConnection<IRedstoneDevice> c : current) {
      tmp.addAll(getPropagation(c.getB(),c.getSideB()));
      for (      Entry<IConnection<IRedstoneDevice>,Boolean> p : tmp) {
        if (p.getValue()) {
          schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
        }
 else         if (!connections.contains(p)) {
          newDevices.add(p.getKey());
        }
      }
      tmp.clear();
    }
    connections.addAll(current);
    current.clear();
    for (    IConnection<IRedstoneDevice> c : newDevices)     if (!connections.contains(c))     current.add(c);
    newDevices.clear();
  }
  return connections;
}",0.8153923541247485
169437,"public static void init(){
  for (int i=0; i < MinecraftColor.VALID_COLORS.length; i++)   blockLamp[i]=new BlockLamp(false,MinecraftColor.VALID_COLORS[i]);
  for (int i=0; i < MinecraftColor.VALID_COLORS.length; i++)   blockLampInverted[i]=new BlockLamp(true,MinecraftColor.VALID_COLORS[i]);
  registerBlocks();
  initModDependantBlocks();
}","public static void init(){
  instantiateBlocks();
  registerBlocks();
  initModDependantBlocks();
}",0.4181818181818181
169438,"protected List<IConnection<IRedstoneDevice>> performPropagation(){
  List<IConnection<IRedstoneDevice>> connections=new ArrayList<IConnection<IRedstoneDevice>>();
  IConnection<IRedstoneDevice> firstCon=(IConnection<IRedstoneDevice>)getDevice().getRedstoneConnectionCache().getConnectionOnSide(getSide());
  if (firstCon != null)   connections.add(firstCon);
  List<IConnection<IRedstoneDevice>> current=new ArrayList<IConnection<IRedstoneDevice>>();
  for (  Entry<IConnection<IRedstoneDevice>,Boolean> p : getPropagation(getDevice(),getSide())) {
    if (p.getValue()) {
      schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
    }
 else {
      if (p.getKey().getB() instanceof IRedstoneConductor && ((IRedstoneConductor)p.getKey().getB()).hasLoss(p.getKey().getSideB()) != (this instanceof LossyPropagator)) {
        schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
      }
 else {
        current.add(p.getKey());
      }
    }
  }
  if (current.size() == 0 && connections.size() == 0)   return connections;
  List<IConnection<IRedstoneDevice>> newDevices=new ArrayList<IConnection<IRedstoneDevice>>();
  return connections;
}","protected List<IConnection<IRedstoneDevice>> performPropagation(){
  List<IConnection<IRedstoneDevice>> connections=new ArrayList<IConnection<IRedstoneDevice>>();
  IConnection<IRedstoneDevice> firstCon=(IConnection<IRedstoneDevice>)getDevice().getRedstoneConnectionCache().getConnectionOnSide(getSide());
  if (firstCon != null)   connections.add(firstCon);
  List<IConnection<IRedstoneDevice>> current=new ArrayList<IConnection<IRedstoneDevice>>();
  for (  Entry<IConnection<IRedstoneDevice>,Boolean> p : getPropagation(getDevice(),getSide())) {
    if (p.getValue()) {
      schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
    }
 else {
      if (p.getKey().getB() instanceof IRedstoneConductor && ((IRedstoneConductor)p.getKey().getB()).hasLoss(p.getKey().getSideB()) != (this instanceof LossyPropagator)) {
        schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
      }
 else {
        current.add(p.getKey());
      }
    }
  }
  if (current.size() == 0 && connections.size() == 0)   return connections;
  List<IConnection<IRedstoneDevice>> newDevices=new ArrayList<IConnection<IRedstoneDevice>>();
  while (current.size() > 0) {
    List<Entry<IConnection<IRedstoneDevice>,Boolean>> tmp=new ArrayList<Entry<IConnection<IRedstoneDevice>,Boolean>>();
    for (    IConnection<IRedstoneDevice> c : current) {
      tmp.addAll(getPropagation(c.getB(),c.getSideB()));
      for (      Entry<IConnection<IRedstoneDevice>,Boolean> p : tmp) {
        if (p.getValue()) {
        }
 else         if (!connections.contains(p.getKey()) && !newDevices.contains(p.getKey())) {
          newDevices.add(p.getKey());
        }
      }
      tmp.clear();
    }
    connections.addAll(current);
    current.clear();
    for (    IConnection<IRedstoneDevice> c : newDevices)     if (!connections.contains(c))     current.add(c);
    newDevices.clear();
  }
  return connections;
}",0.7497572029783102
169439,"@SubscribeEvent public void onRenderDebugScreen(RenderGameOverlayEvent event){
  if (event.type.equals(RenderGameOverlayEvent.ElementType.DEBUG)) {
    Minecraft mc=Minecraft.getMinecraft();
    FontRenderer fr=mc.fontRenderer;
    MinecraftServer sv=MinecraftServer.getServer();
    boolean isLocal=sv instanceof IntegratedServer;
    List<String> text=new ArrayList<String>();
{
      fr.drawStringWithShadow(""String_Node_Str"",event.resolution.getScaledWidth() - 165,75,0xFFFFFF44);
    }
    if (sv != null) {
      double ms=MathHelper.mean(sv.worldTickTimes.get(mc.theWorld.provider.dimensionId)) * 1.0E-6D;
      double tps=Math.min(1000.0 / ms,20);
      text.add(""String_Node_Str"" + tps + ""String_Node_Str""+ new DecimalFormat(""String_Node_Str"").format(ms)+ ""String_Node_Str"");
    }
 else {
      text.add(""String_Node_Str"");
    }
    int i=0;
    for (    String s : text) {
      fr.drawStringWithShadow(s,event.resolution.getScaledWidth() - 160,90 + 10 * i,0xFFFFFF77);
      i++;
    }
  }
}","@SubscribeEvent public void onRenderDebugScreen(RenderGameOverlayEvent event){
  if (event.type.equals(RenderGameOverlayEvent.ElementType.DEBUG)) {
    Minecraft mc=Minecraft.getMinecraft();
    FontRenderer fr=mc.fontRenderer;
    MinecraftServer sv=MinecraftServer.getServer();
    boolean isLocal=sv instanceof IntegratedServer;
    List<String> text=new ArrayList<String>();
{
      fr.drawStringWithShadow(""String_Node_Str"",event.resolution.getScaledWidth() - 165,75,0xFFFFFF44);
    }
    if (sv != null) {
      double ms=MathHelper.mean(sv.worldTickTimes.get(mc.theWorld.provider.dimensionId)) * 1.0E-6D;
      double tps=Math.min(1000.0 / ms,20);
      text.add(""String_Node_Str"" + df.format(tps) + ""String_Node_Str""+ df.format(ms)+ ""String_Node_Str"");
    }
 else {
      text.add(""String_Node_Str"");
    }
    int i=0;
    for (    String s : text) {
      fr.drawStringWithShadow(s,event.resolution.getScaledWidth() - 160,90 + 10 * i,0xFFFFFF77);
      i++;
    }
  }
}",0.9309823677581864
169440,"@Override protected void drawGuiContainerBackgroundLayer(float f,int i,int j){
  super.drawGuiContainerBackgroundLayer(f,i,j);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  int burningPercentage=(int)(furnace.getBurningPercentage() * 14);
  drawTexturedModalRect(x + 22,y + 54 + 14 - burningPercentage,177,14 - burningPercentage,14,burningPercentage + 0);
  int processPercentage=(int)(furnace.getProcessPercentage() * 22);
  drawTexturedModalRect(x + 103,y + 35,178,14,processPercentage,15);
}","@Override protected void drawGuiContainerBackgroundLayer(float f,int i,int j){
  super.drawGuiContainerBackgroundLayer(f,i,j);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  mc.renderEngine.bindTexture(resLoc);
  int burningPercentage=(int)(furnace.getBurningPercentage() * 14);
  drawTexturedModalRect(x + 22,y + 54 + 14 - burningPercentage,177,14 - burningPercentage,14,burningPercentage + 0);
  int processPercentage=(int)(furnace.getProcessPercentage() * 22);
  drawTexturedModalRect(x + 103,y + 35,178,14,processPercentage,15);
}",0.9631031220435194
169441,"@Override @SideOnly(Side.CLIENT) public boolean renderStatic(Vec3i translation,RenderHelper renderer,RenderBlocks renderBlocks,int pass){
switch (getFace()) {
case DOWN:
    break;
case UP:
  renderer.addTransformation(new Rotation(180,180,0,Vec3d.center));
break;
case NORTH:
renderer.addTransformation(new Rotation(90,0,0,Vec3d.center));
break;
case SOUTH:
renderer.addTransformation(new Rotation(-90,0,0,Vec3d.center));
break;
case WEST:
renderer.addTransformation(new Rotation(0,0,-90,Vec3d.center));
break;
case EAST:
renderer.addTransformation(new Rotation(0,0,90,Vec3d.center));
break;
default :
break;
}
int rotation=getRotation();
if (rotation != -1) renderer.addTransformation(new Rotation(0,90 * -rotation,0));
renderer.renderBox(BOX,getIcon(ForgeDirection.DOWN),getIcon(ForgeDirection.UP),getIcon(ForgeDirection.WEST),getIcon(ForgeDirection.EAST),getIcon(ForgeDirection.NORTH),getIcon(ForgeDirection.SOUTH));
for (IGateComponent c : getComponents()) c.renderStatic(translation,renderer,pass);
return true;
}","@Override @SideOnly(Side.CLIENT) public boolean renderStatic(Vec3i translation,RenderHelper renderer,RenderBlocks renderBlocks,int pass){
  Transformation t=null;
  if (getFace() == ForgeDirection.UP)   t=new Rotation(180,180,0,Vec3d.center);
  if (getFace() == ForgeDirection.NORTH)   t=new Rotation(90,0,0,Vec3d.center);
  if (getFace() == ForgeDirection.SOUTH)   t=new Rotation(-90,0,0,Vec3d.center);
  if (getFace() == ForgeDirection.WEST)   t=new Rotation(0,0,-90,Vec3d.center);
  if (getFace() == ForgeDirection.EAST)   t=new Rotation(0,0,90,Vec3d.center);
  if (t != null)   renderer.addTransformation(t);
  int rotation=getRotation();
  if (rotation != -1)   renderer.addTransformation(new Rotation(0,90 * -rotation,0));
  renderer.renderBox(BOX,getIcon(ForgeDirection.DOWN),getIcon(ForgeDirection.UP),getIcon(ForgeDirection.WEST),getIcon(ForgeDirection.EAST),getIcon(ForgeDirection.NORTH),getIcon(ForgeDirection.SOUTH));
  for (  IGateComponent c : getComponents())   c.renderStatic(translation,renderer,pass);
  if (rotation != -1)   renderer.removeTransformation();
  if (t != null)   renderer.removeTransformation();
  return true;
}",0.1802218114602587
169442,"@SuppressWarnings(""String_Node_Str"") @Override public IConnection<IRedstoneDevice> getConnectionOnSide(ForgeDirection side){
  if (wrapper.device instanceof IInsulatedRedwire && ((IRedstoneDevice)wrapper.device).getRedstoneConnectionCache() != null) {
    return (IConnection<IRedstoneDevice>)((IRedstoneDevice)wrapper.device).getRedstoneConnectionCache().getConnectionOnSide(side);
  }
 else {
    IConnection<? extends IBundledDevice> original=wrapper.device.getBundledConnectionCache().getConnectionOnSide(side);
    if (original != originalCons[side.ordinal()]) {
      if (original != null) {
        if (!(original.getB() instanceof IInsulatedRedstoneDevice) || (original.getB() instanceof IInsulatedRedstoneDevice && wrapper.color.equals(((IInsulatedRedstoneDevice)original.getB()).getInsulationColor(original.getSideB()))))         cons[side.ordinal()]=new RedstoneConnection(BundledDeviceWrapper.this,wrap(original.getB(),color),side,original.getSideB(),original.getType());
 else         cons[side.ordinal()]=null;
      }
 else {
        cons[side.ordinal()]=null;
      }
      originalCons[side.ordinal()]=original;
    }
    return cons[side.ordinal()];
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public IConnection<IRedstoneDevice> getConnectionOnSide(ForgeDirection side){
  if (wrapper.device instanceof IInsulatedRedwire && ((IRedstoneDevice)wrapper.device).getRedstoneConnectionCache() != null) {
    IConnection<IRedstoneDevice> c=(IConnection<IRedstoneDevice>)((IRedstoneDevice)wrapper.device).getRedstoneConnectionCache().getConnectionOnSide(side);
    if (c != null)     return c;
  }
  IConnection<? extends IBundledDevice> original=wrapper.device.getBundledConnectionCache().getConnectionOnSide(side);
  if (original != originalCons[side.ordinal()]) {
    if (original != null) {
      if (!(original.getB() instanceof IInsulatedRedstoneDevice) || (original.getB() instanceof IInsulatedRedstoneDevice && wrapper.color.equals(((IInsulatedRedstoneDevice)original.getB()).getInsulationColor(original.getSideB()))))       cons[side.ordinal()]=new RedstoneConnection(BundledDeviceWrapper.this,wrap(original.getB(),color),side,original.getSideB(),original.getType());
 else       cons[side.ordinal()]=null;
    }
 else {
      cons[side.ordinal()]=null;
    }
    originalCons[side.ordinal()]=original;
  }
  return cons[side.ordinal()];
}",0.9514152936206168
169443,"protected List<IConnection<IRedstoneDevice>> performPropagation(){
  List<IConnection<IRedstoneDevice>> connections=new ArrayList<IConnection<IRedstoneDevice>>();
  IConnection<IRedstoneDevice> firstCon=(IConnection<IRedstoneDevice>)getDevice().getRedstoneConnectionCache().getConnectionOnSide(getSide());
  if (firstCon != null)   connections.add(firstCon);
  List<IConnection<IRedstoneDevice>> current=new ArrayList<IConnection<IRedstoneDevice>>();
  for (  Entry<IConnection<IRedstoneDevice>,Boolean> p : getPropagation(getDevice(),getSide())) {
    if (p.getValue()) {
      schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
    }
 else {
      if (p.getKey().getB() instanceof IRedstoneConductor && ((IRedstoneConductor)p.getKey().getB()).hasLoss(p.getKey().getSideB()) != (this instanceof LossyPropagator)) {
        schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
      }
 else {
        current.add(p.getKey());
      }
    }
  }
  if (current.size() == 0 && connections.size() == 0)   return connections;
  List<IConnection<IRedstoneDevice>> newDevices=new ArrayList<IConnection<IRedstoneDevice>>();
  while (current.size() > 0) {
    List<Entry<IConnection<IRedstoneDevice>,Boolean>> tmp=new ArrayList<Entry<IConnection<IRedstoneDevice>,Boolean>>();
    for (    IConnection<IRedstoneDevice> c : current) {
      tmp.addAll(getPropagation(c.getB(),c.getSideB()));
      for (      Entry<IConnection<IRedstoneDevice>,Boolean> p : tmp) {
        if (p.getValue()) {
          schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
        }
 else         if (!connections.contains(p)) {
          newDevices.add(p.getKey());
        }
      }
      tmp.clear();
    }
    connections.addAll(current);
    current.clear();
    for (    IConnection<IRedstoneDevice> c : newDevices)     if (!connections.contains(c))     current.add(c);
    newDevices.clear();
  }
  return connections;
}","protected List<IConnection<IRedstoneDevice>> performPropagation(){
  List<IConnection<IRedstoneDevice>> connections=new ArrayList<IConnection<IRedstoneDevice>>();
  IConnection<IRedstoneDevice> firstCon=(IConnection<IRedstoneDevice>)getDevice().getRedstoneConnectionCache().getConnectionOnSide(getSide());
  if (firstCon != null)   connections.add(firstCon);
  List<IConnection<IRedstoneDevice>> current=new ArrayList<IConnection<IRedstoneDevice>>();
  for (  Entry<IConnection<IRedstoneDevice>,Boolean> p : getPropagation(getDevice(),getSide())) {
    if (p.getValue()) {
      schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
    }
 else {
      if (p.getKey().getB() instanceof IRedstoneConductor && ((IRedstoneConductor)p.getKey().getB()).hasLoss(p.getKey().getSideB()) != (this instanceof LossyPropagator)) {
        schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
      }
 else {
        current.add(p.getKey());
      }
    }
  }
  if (current.size() == 0 && connections.size() == 0)   return connections;
  List<IConnection<IRedstoneDevice>> newDevices=new ArrayList<IConnection<IRedstoneDevice>>();
  List<Entry<IConnection<IRedstoneDevice>,Boolean>> tmp=new ArrayList<Entry<IConnection<IRedstoneDevice>,Boolean>>();
  while (current.size() > 0) {
    for (    IConnection<IRedstoneDevice> c : current) {
      tmp.addAll(getPropagation(c.getB(),c.getSideB()));
      for (      Entry<IConnection<IRedstoneDevice>,Boolean> p : tmp)       if (p.getValue())       schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
 else       if (!connections.contains(p) && !current.contains(p) && !tmp.contains(p))       newDevices.add(p.getKey());
      tmp.clear();
    }
    for (    IConnection<IRedstoneDevice> c : current)     if (!connections.contains(c))     connections.add(c);
    current.clear();
    for (    IConnection<IRedstoneDevice> c : newDevices)     if (!connections.contains(c))     current.add(c);
    newDevices.clear();
  }
  return connections;
}",0.7671026156941649
169444,"@Override public boolean renderStatic(Vec3i translation,RenderHelper renderer,RenderBlocks renderBlocks,int pass){
  super.renderStatic(translation,renderer,renderBlocks,pass);
  ForgeDirection d1=ForgeDirection.NORTH;
  ForgeDirection d2=ForgeDirection.SOUTH;
  ForgeDirection d3=ForgeDirection.WEST;
  ForgeDirection d4=ForgeDirection.EAST;
  if (getFace() == ForgeDirection.NORTH) {
    d1=ForgeDirection.UP;
    d2=ForgeDirection.DOWN;
  }
 else   if (getFace() == ForgeDirection.SOUTH) {
    d1=ForgeDirection.DOWN;
    d2=ForgeDirection.UP;
  }
 else   if (getFace() == ForgeDirection.WEST) {
    d3=ForgeDirection.UP;
    d4=ForgeDirection.DOWN;
  }
 else   if (getFace() == ForgeDirection.EAST) {
    d3=ForgeDirection.DOWN;
    d4=ForgeDirection.UP;
  }
 else   if (getFace() == ForgeDirection.UP) {
    d3=ForgeDirection.EAST;
    d4=ForgeDirection.WEST;
  }
  if (getFace() == ForgeDirection.NORTH || getFace() == ForgeDirection.SOUTH) {
    d1=d1.getRotation(getFace());
    d2=d2.getRotation(getFace());
    d3=d3.getRotation(getFace());
    d4=d4.getRotation(getFace());
  }
  boolean s1=shouldRenderConnection(d1);
  boolean s2=shouldRenderConnection(d2);
  boolean s3=shouldRenderConnection(d3);
  boolean s4=shouldRenderConnection(d4);
  boolean[] openConnections=new boolean[6];
  double size=1 / 64D;
  double width=1 / 48D;
  double height=getHeight() / 16D;
  renderer.setColor(WireHelper.getColorForPowerLevel(getRedwireType(ForgeDirection.UNKNOWN),(byte)(255 / 2)));
  if ((s1 && s3) || (s3 && s2) || (s2 && s4)|| (s4 && s1)) {
    renderer.renderBox(new Vec3dCube(8 / 16D - width - size,height,8 / 16D - width - size,8 / 16D + width + size,height + size,8 / 16D + width + size),IconSupplier.wire);
  }
 else {
    renderer.renderBox(new Vec3dCube(8 / 16D - width,height,8 / 16D - width,8 / 16D + width,height + size,8 / 16D + width),IconSupplier.wire);
  }
  if (s4 || s3) {
    if (s3 || (!s1 && !s2))     renderer.renderBox(new Vec3dCube(s3 ? (openConnections[d3.ordinal()] ? -height - size : 0) : 5 / 16D,height,8 / 16D - width,8 / 16D - width,height + size,8 / 16D + width),IconSupplier.wire);
    if (s4 || (!s1 && !s2))     renderer.renderBox(new Vec3dCube(8 / 16D + width,height,8 / 16D - width,s4 ? (openConnections[d4.ordinal()] ? 1 + height + size : 1) : 11 / 16D,height + size,8 / 16D + width),IconSupplier.wire);
    if (s1)     renderer.renderBox(new Vec3dCube(8 / 16D - width,height,s1 ? (openConnections[d1.ordinal()] ? -height - size : 0) : 4 / 16D,8 / 16D + width,height + size,8 / 16D - width),IconSupplier.wire);
    if (s2)     renderer.renderBox(new Vec3dCube(8 / 16D - width,height,8 / 16D + width,8 / 16D + width,height + size,s2 ? (openConnections[d2.ordinal()] ? 1 + height + size : 1) : 12 / 16D),IconSupplier.wire);
  }
 else {
    renderer.renderBox(new Vec3dCube(8 / 16D - width,height,s1 ? (openConnections[d1.ordinal()] ? -height - size : 0) : 5 / 16D,8 / 16D + width,height + size,8 / 16D - width),IconSupplier.wire);
    renderer.renderBox(new Vec3dCube(8 / 16D - width,height,8 / 16D + width,8 / 16D + width,height + size,s2 ? (openConnections[d2.ordinal()] ? 1 + height + size : 1) : 11 / 16D),IconSupplier.wire);
  }
  return true;
}","@Override public boolean renderStatic(Vec3i translation,RenderHelper renderer,RenderBlocks renderBlocks,int pass){
  super.renderStatic(translation,renderer,renderBlocks,pass);
  ForgeDirection d1=ForgeDirection.NORTH;
  ForgeDirection d2=ForgeDirection.SOUTH;
  ForgeDirection d3=ForgeDirection.WEST;
  ForgeDirection d4=ForgeDirection.EAST;
  if (getFace() == ForgeDirection.NORTH) {
    d1=ForgeDirection.UP;
    d2=ForgeDirection.DOWN;
  }
 else   if (getFace() == ForgeDirection.SOUTH) {
    d1=ForgeDirection.DOWN;
    d2=ForgeDirection.UP;
  }
 else   if (getFace() == ForgeDirection.WEST) {
    d3=ForgeDirection.UP;
    d4=ForgeDirection.DOWN;
  }
 else   if (getFace() == ForgeDirection.EAST) {
    d3=ForgeDirection.DOWN;
    d4=ForgeDirection.UP;
  }
 else   if (getFace() == ForgeDirection.UP) {
    d3=ForgeDirection.EAST;
    d4=ForgeDirection.WEST;
  }
  if (getFace() == ForgeDirection.NORTH || getFace() == ForgeDirection.SOUTH) {
    d1=d1.getRotation(getFace());
    d2=d2.getRotation(getFace());
    d3=d3.getRotation(getFace());
    d4=d4.getRotation(getFace());
  }
  boolean s1=shouldRenderConnection(d1);
  boolean s2=shouldRenderConnection(d2);
  boolean s3=shouldRenderConnection(d3);
  boolean s4=shouldRenderConnection(d4);
  double size=1 / 64D;
  double width=1 / 48D;
  double height=getHeight() / 16D;
  renderer.setColor(WireHelper.getColorForPowerLevel(getRedwireType(ForgeDirection.UNKNOWN),(byte)(255 / 2)));
  if ((s1 && s3) || (s3 && s2) || (s2 && s4)|| (s4 && s1)) {
    renderer.renderBox(new Vec3dCube(8 / 16D - width - size,height,8 / 16D - width - size,8 / 16D + width + size,height + size,8 / 16D + width + size),IconSupplier.wire);
  }
 else {
    renderer.renderBox(new Vec3dCube(8 / 16D - width,height,8 / 16D - width,8 / 16D + width,height + size,8 / 16D + width),IconSupplier.wire);
  }
  if (s4 || s3) {
    if (s3 || (!s1 && !s2))     renderer.renderBox(new Vec3dCube(s3 ? (cornerConnect[d3.ordinal()] ? -height - size : 0) : 5 / 16D,height,8 / 16D - width,8 / 16D - width,height + size,8 / 16D + width),IconSupplier.wire);
    if (s4 || (!s1 && !s2))     renderer.renderBox(new Vec3dCube(8 / 16D + width,height,8 / 16D - width,s4 ? (cornerConnect[d4.ordinal()] ? 1 + height + size : 1) : 11 / 16D,height + size,8 / 16D + width),IconSupplier.wire);
    if (s1)     renderer.renderBox(new Vec3dCube(8 / 16D - width,height,s1 ? (cornerConnect[d1.ordinal()] ? -height - size : 0) : 4 / 16D,8 / 16D + width,height + size,8 / 16D - width),IconSupplier.wire);
    if (s2)     renderer.renderBox(new Vec3dCube(8 / 16D - width,height,8 / 16D + width,8 / 16D + width,height + size,s2 ? (cornerConnect[d2.ordinal()] ? 1 + height + size : 1) : 12 / 16D),IconSupplier.wire);
  }
 else {
    renderer.renderBox(new Vec3dCube(8 / 16D - width,height,s1 ? (cornerConnect[d1.ordinal()] ? -height - size : 0) : 5 / 16D,8 / 16D + width,height + size,8 / 16D - width),IconSupplier.wire);
    renderer.renderBox(new Vec3dCube(8 / 16D - width,height,8 / 16D + width,8 / 16D + width,height + size,s2 ? (cornerConnect[d2.ordinal()] ? 1 + height + size : 1) : 11 / 16D),IconSupplier.wire);
  }
  return true;
}",0.9797788309636652
169445,"@Override public void writeUpdateData(DataOutput buffer) throws IOException {
  super.writeUpdateData(buffer);
}","@Override public void writeUpdateData(DataOutput buffer) throws IOException {
  super.writeUpdateData(buffer);
  for (int i=0; i < 6; i++) {
    boolean connected=false;
    boolean render=false;
    IConnection<? extends IBundledDevice> bc=getBundledConnectionCache().getConnectionOnSide(ForgeDirection.getOrientation(i));
    if (bc != null) {
      IBundledDevice dev=bc.getB();
      if (dev instanceof IFace && ((IFace)dev).getFace() == ForgeDirection.getOrientation(i).getOpposite()) {
        if (dev instanceof IRedwire) {
          if (getFace().ordinal() > ((PartRedwireFace)dev).getFace().ordinal()) {
            if (!(dev instanceof IInsulatedRedstoneDevice) && dev instanceof IRedwire) {
              render=true;
              connected=true;
            }
          }
 else           if (dev instanceof PartRedwireFaceBundled) {
            connected=true;
          }
        }
 else {
          connected=true;
          render=true;
        }
      }
    }
    buffer.writeBoolean(connected);
    buffer.writeBoolean(render);
  }
}",0.1926053310404127
169446,"@Override public IBundledDevice getBundledDeviceAt(World world,int x,int y,int z,ForgeDirection face,ForgeDirection side){
  ITilePartHolder holder=MultipartCompatibility.getPartHolder(world,x,y,z);
  if (holder != null) {
    for (    IPart p : holder.getParts()) {
      if (p instanceof IBundledDeviceWrapper) {
        if (p instanceof IFace) {
          if (((IFace)p).getFace() == face)           return ((IBundledDeviceWrapper)p).getBundledDeviceOnSide(side);
        }
 else {
          if (face == ForgeDirection.UNKNOWN)           return ((IBundledDeviceWrapper)p).getBundledDeviceOnSide(side);
        }
      }
 else       if (p instanceof IBundledDevice) {
        if (p instanceof IFace) {
          if (((IFace)p).getFace() == face)           return (IBundledDevice)p;
        }
 else {
          if (face == ForgeDirection.UNKNOWN)           return (IBundledDevice)p;
        }
      }
    }
  }
  return null;
}","@Override public IBundledDevice getBundledDeviceAt(World world,int x,int y,int z,ForgeDirection face,ForgeDirection side){
  ITilePartHolder holder=MultipartCompatibility.getPartHolder(world,x,y,z);
  if (holder != null) {
    boolean foundOnlyFace=holder.getParts().size() > 0;
    for (    IPart p : holder.getParts()) {
      if (p instanceof IBundledDeviceWrapper) {
        if (p instanceof IFace) {
          if (((IFace)p).getFace() == face)           return ((IBundledDeviceWrapper)p).getBundledDeviceOnSide(side);
        }
 else {
          if (face == ForgeDirection.UNKNOWN)           return ((IBundledDeviceWrapper)p).getBundledDeviceOnSide(side);
        }
      }
 else       if (p instanceof IBundledDevice) {
        if (p instanceof IFace) {
          if (((IFace)p).getFace() == face)           return (IBundledDevice)p;
        }
 else {
          if (face == ForgeDirection.UNKNOWN)           return (IBundledDevice)p;
        }
        foundOnlyFace=true;
      }
 else {
        if (!(p instanceof IFace))         foundOnlyFace=false;
      }
    }
    if (foundOnlyFace)     return null;
  }
  return null;
}",0.9009708737864076
169447,"@Override public final void update(){
  if (getLayout() == null && !getWorld().isRemote)   loadLayout();
  if (!getWorld().isRemote) {
    getRedstoneConnectionCache().recalculateConnections();
    getBundledConnectionCache().recalculateConnections();
    for (    GateConnectionBase c : getConnections())     if (c != null)     c.refresh();
  }
  logic().tick();
  for (  IGateComponent c : getComponents())   c.tick();
  if (!getWorld().isRemote) {
    for (    GateConnectionBase c : getConnections())     if (c != null)     c.notifyUpdateIfNeeded();
    sendUpdateIfNeeded();
  }
}","@Override public final void update(){
  if (getLayout() == null && !getWorld().isRemote)   loadLayout();
  logic().tick();
  for (  IGateComponent c : getComponents())   c.tick();
  if (!getWorld().isRemote) {
    for (    GateConnectionBase c : getConnections())     if (c != null)     c.notifyUpdateIfNeeded();
    sendUpdateIfNeeded();
  }
}",0.5791173304628633
169448,"@Override public void onUpdate(){
  if (getLayout() == null && !getWorld().isRemote)   loadLayout();
  if (RedstoneApi.getInstance().shouldWiresHandleUpdates()) {
    getRedstoneConnectionCache().recalculateConnections();
    getBundledConnectionCache().recalculateConnections();
    for (    GateConnectionBase c : getConnections())     if (c != null)     c.refresh();
    for (    GateConnectionBase c : getConnections())     if (c != null)     RedstoneApi.getInstance().getRedstonePropagator(this,c.getForgeDirection()).propagate();
  }
  logic().doLogic();
  sendUpdateIfNeeded();
}","@Override public void onUpdate(){
  if (getLayout() == null && !getWorld().isRemote)   loadLayout();
  if (RedstoneApi.getInstance().shouldWiresHandleUpdates()) {
    getRedstoneConnectionCache().recalculateConnections();
    getBundledConnectionCache().recalculateConnections();
    for (    GateConnectionBase c : getConnections())     if (c != null)     c.refresh();
    for (    GateConnectionBase c : getConnections())     if (c != null)     if (getRedstoneConnectionCache().getConnectionOnSide(c.getForgeDirection()) != null)     RedstoneApi.getInstance().getRedstonePropagator(this,c.getForgeDirection()).propagate();
  }
  logic().doLogic();
  sendUpdateIfNeeded();
}",0.929421094369548
169449,"@Override public void renderStatic(Vec3i translation,RenderHelper renderer,int pass){
  byte power=getPower();
  int colorMin=isEnabled() ? type.getMinColor() : 0x6A6A6A;
  int colorMax=isEnabled() ? type.getMaxColor() : 0x6A6A6A;
  renderer.setColor(WireHelper.getColorForPowerLevel(colorMin,colorMax,power));
  double height=1 / 48D;
  double scale=1D / getGate().getLayout().getLayout(layoutColor).getWidth();
  renderer.setRenderSides(false,true,true,true,true,true);
  Transformation transformation=new Scale(scale,1,scale);
  for (  Rectangle r : getGate().getLayout().getSimplifiedLayout(layoutColor).getRectangles())   renderer.renderBox(new Vec2dRect(r).extrude(height).transform(transformation).add(-0.5 + 1 / 64D,2 / 16D,-0.5 + 1 / 64D),IconSupplier.wire);
  renderer.resetRenderedSides();
  renderer.setColor(0xFFFFFF);
}","@Override public void renderStatic(Vec3i translation,RenderHelper renderer,int pass){
  byte power=getPower();
  int colorMin=isEnabled() ? type.getMinColor() : 0x6A6A6A;
  int colorMax=isEnabled() ? type.getMaxColor() : 0x6A6A6A;
  renderer.setColor(WireHelper.getColorForPowerLevel(colorMin,colorMax,power));
  double height=1 / 32D;
  double scale=1D / getGate().getLayout().getLayout(layoutColor).getWidth();
  renderer.setRenderSides(false,true,true,true,true,true);
  Transformation transformation=new Scale(scale,1,scale);
  for (  Rectangle r : getGate().getLayout().getSimplifiedLayout(layoutColor).getRectangles())   renderer.renderBox(new Vec2dRect(r).extrude(height).transform(transformation).add(-0.5 + 1 / 64D,2 / 16D,-0.5 + 1 / 64D),IconSupplier.wire);
  renderer.resetRenderedSides();
  renderer.setColor(0xFFFFFF);
}",0.9975990396158464
169450,"@Override public void refresh(){
  IConnection<? extends IRedstoneDevice> c=gate.getRedstoneConnectionCache().getConnectionOnSide(getForgeDirection());
  if (c == null || c.getB() instanceof DummyRedstoneDevice)   input=RedstoneHelper.getInput(getGate().getWorld(),getGate().getX(),getGate().getY(),getGate().getZ(),getForgeDirection(),getGate().getFace()) > 0;
}","@Override public void refresh(){
  IConnection<? extends IRedstoneDevice> c=gate.getRedstoneConnectionCache().getConnectionOnSide(getForgeDirection());
  if (c == null || c.getB() instanceof DummyRedstoneDevice) {
    input=RedstoneHelper.getInput(getGate().getWorld(),getGate().getX(),getGate().getY(),getGate().getZ(),getForgeDirection(),getGate().getFace()) > 0;
  }
}",0.989100817438692
169451,"@Override public boolean canStay(){
  Vec3i loc=new Vec3i(this).add(getFace());
  if (MultipartCompatibility.getPartHolder(getWorld(),loc) != null)   return MultipartCompatibility.getPart(getWorld(),loc,PartRedwireFreestanding.class) != null;
  return super.canStay();
}","@Override public boolean canStay(){
  Vec3i loc=new Vec3i(this).add(getFace());
  if (MultipartCompatibility.getPartHolder(getWorld(),loc) != null) {
    if (MultipartCompatibility.getPart(getWorld(),loc,PartRedwireFreestanding.class) != null)     return true;
    PneumaticTube t=MultipartCompatibility.getPart(getWorld(),loc,PneumaticTube.class);
    if (t != null && t.getRedwireType() != null)     return true;
  }
  return super.canStay();
}",0.729050279329609
169452,"/** 
 * @author Koen Beckers (K4Unl)
 */
@Override @SideOnly(Side.CLIENT) public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  power=(byte)255;
  RenderHelper rh=RenderHelper.instance;
  rh.setRenderCoords(null,0,0,0);
  Minecraft.getMinecraft().renderEngine.bindTexture(TextureMap.locationBlocksTexture);
  Tessellator.instance.startDrawingQuads();
  renderStatic(new Vec3i(0,0,0),rh,RenderBlocks.getInstance(),0);
  Tessellator.instance.draw();
  rh.reset();
  GL11.glPushMatrix();
  renderGlow(1);
  GL11.glPopMatrix();
  Minecraft.getMinecraft().renderEngine.bindTexture(TextureMap.locationItemsTexture);
}","/** 
 * @author Koen Beckers (K4Unl)
 */
@Override @SideOnly(Side.CLIENT) public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  power=(byte)0;
  RenderHelper rh=RenderHelper.instance;
  rh.setRenderCoords(null,0,0,0);
  Minecraft.getMinecraft().renderEngine.bindTexture(TextureMap.locationBlocksTexture);
  Tessellator.instance.startDrawingQuads();
  renderStatic(new Vec3i(0,0,0),rh,RenderBlocks.getInstance(),0);
  Tessellator.instance.draw();
  rh.reset();
  GL11.glPushMatrix();
  renderGlow(1);
  GL11.glPopMatrix();
  Minecraft.getMinecraft().renderEngine.bindTexture(TextureMap.locationItemsTexture);
}",0.9968404423380728
169453,"@Override public boolean canConnect(ForgeDirection side,IRedstoneDevice dev,ConnectionType type){
  if (side == ForgeDirection.UNKNOWN)   return false;
  if (OcclusionHelper.microblockOcclusionTest(getParent(),MicroblockShape.EDGE,1,getFace(),side))   return false;
  return true;
}","@Override public boolean canConnect(ForgeDirection side,IRedstoneDevice dev,ConnectionType type){
  if (side == ForgeDirection.UNKNOWN)   return false;
  if (!OcclusionHelper.microblockOcclusionTest(getParent(),MicroblockShape.EDGE,1,getFace(),side))   return false;
  return true;
}",0.9982300884955752
169454,"public boolean isConnected(ForgeDirection dir,PneumaticTube otherTube){
  if (otherTube != null) {
    if (!(this instanceof Accelerator) && this instanceof MagTube != otherTube instanceof MagTube && !(otherTube instanceof Accelerator))     return false;
    TubeColor otherTubeColor=otherTube.getColor(dir.getOpposite());
    if (otherTubeColor != TubeColor.NONE && getColor(dir) != TubeColor.NONE && getColor(dir) != otherTubeColor)     return false;
  }
  return getWorld() == null || OcclusionHelper.microblockOcclusionTest(getParent(),MicroblockShape.FACE_HOLLOW,8,dir);
}","public boolean isConnected(ForgeDirection dir,PneumaticTube otherTube){
  if (otherTube != null) {
    if (!(this instanceof Accelerator) && this instanceof MagTube != otherTube instanceof MagTube && !(otherTube instanceof Accelerator))     return false;
    TubeColor otherTubeColor=otherTube.getColor(dir.getOpposite());
    if (otherTubeColor != TubeColor.NONE && getColor(dir) != TubeColor.NONE && getColor(dir) != otherTubeColor)     return false;
  }
  return getWorld() == null || OcclusionHelper.microblockOcclusionTest(getParent(),true,MicroblockShape.FACE_HOLLOW,8,dir);
}",0.9956859361518552
169455,"/** 
 * Event called whenever a nearby block updates
 */
@Override public void onUpdate(){
  if (getParent() != null && getWorld() != null) {
    RedstoneConductorTube device=RedstoneConductorTube.getDevice(this);
    device.getRedstoneConnectionCache().recalculateConnections();
    ForgeDirection d=ForgeDirection.UNKNOWN;
    for (    ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS)     if (device.getDeviceOnSide(dir) != null)     d=dir;
    RedstoneApi.getInstance().getRedstonePropagator(device,d).propagate();
    sendUpdatePacket();
    clearCache();
    updateConnections();
  }
}","/** 
 * Event called whenever a nearby block updates
 */
@Override public void onUpdate(){
  if (getParent() != null && getWorld() != null) {
    if (RedstoneApi.getInstance().shouldWiresHandleUpdates()) {
      RedstoneConductorTube device=RedstoneConductorTube.getDevice(this);
      device.getRedstoneConnectionCache().recalculateConnections();
      ForgeDirection d=ForgeDirection.UNKNOWN;
      for (      ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS)       if (device.getDeviceOnSide(dir) != null)       d=dir;
      RedstoneApi.getInstance().getRedstonePropagator(device,d).propagate();
      sendUpdatePacket();
    }
    clearCache();
    updateConnections();
  }
}",0.9311424100156496
169456,"@Override public void onRedstoneUpdate(){
  tube.sendUpdatePacket();
}","@Override public void onRedstoneUpdate(){
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    IConnection<IRedstoneDevice> c=connections.getConnectionOnSide(dir);
    IRedstoneDevice dev=null;
    if (c != null)     dev=c.getB();
    if (dev == null || dev instanceof DummyRedstoneDevice)     RedstoneHelper.notifyRedstoneUpdate(getWorld(),getX(),getY(),getZ(),dir,false);
  }
  tube.sendUpdatePacket();
}",0.2520325203252032
169457,"@Override public boolean canConnect(ForgeDirection side,IRedstoneDevice device,ConnectionType type){
  if (type == ConnectionType.STRAIGHT) {
    if (getRedwireType(side) == null)     return false;
    if (device instanceof IRedwire) {
      RedwireType rwt=getRedwireType(side);
      if (type == null)       return false;
      RedwireType rwt_=((IRedwire)device).getRedwireType(type == ConnectionType.STRAIGHT ? side.getOpposite() : side.getOpposite());
      if (rwt_ == null)       return false;
      if (!rwt.canConnectTo(rwt_))       return false;
    }
    if (device instanceof IFace)     return false;
    if (!OcclusionHelper.microblockOcclusionTest(new Vec3i(this),MicroblockShape.FACE_HOLLOW,8,side))     return false;
    if (device instanceof RedstoneConductorTube)     if (((RedstoneConductorTube)device).tube instanceof MagTube != tube instanceof MagTube)     return false;
    return true;
  }
  return false;
}","@Override public boolean canConnect(ForgeDirection side,IRedstoneDevice device,ConnectionType type){
  if (type == ConnectionType.STRAIGHT) {
    if (getRedwireType(side) == null)     return false;
    if (device instanceof IRedwire) {
      RedwireType rwt=getRedwireType(side);
      if (type == null)       return false;
      RedwireType rwt_=((IRedwire)device).getRedwireType(type == ConnectionType.STRAIGHT ? side.getOpposite() : side.getOpposite());
      if (rwt_ == null)       return false;
      if (!rwt.canConnectTo(rwt_))       return false;
    }
    if (device instanceof IFace)     return ((IFace)device).getFace() == side.getOpposite();
    if (!OcclusionHelper.microblockOcclusionTest(new Vec3i(this),MicroblockShape.FACE_HOLLOW,8,side))     return false;
    if (device instanceof RedstoneConductorTube)     if (((RedstoneConductorTube)device).tube instanceof MagTube != tube instanceof MagTube)     return false;
    return true;
  }
  return false;
}",0.9726603575184016
169458,"@Override public List<Vec3dCube> getOcclusionBoxes(){
  List<Vec3dCube> boxes=new ArrayList<Vec3dCube>();
  double h=getHeight() / 16D;
  double d=0.25;
  boxes.add(new Vec3dCube(d,0,d,1 - d,h,1 - d));
  VectorHelper.rotateBoxes(boxes,getFace(),0);
  return boxes;
}","@Override public List<Vec3dCube> getOcclusionBoxes(){
  List<Vec3dCube> boxes=new ArrayList<Vec3dCube>();
  double h=getHeight() / 16D;
  double d=4 / 16D;
  boxes.add(new Vec3dCube(d,0,d,1 - d,h,1 - d));
  VectorHelper.rotateBoxes(boxes,getFace(),0);
  return boxes;
}",0.6392523364485981
169459,"/** 
 * Can this block stay at this position. Similar to canPlaceBlockAt except gets checked often with plants.
 */
@Override public boolean canBlockStay(World world,int x,int y,int z){
  if (world.getBlock(x,y,z) != this)   return super.canBlockStay(world,x,y,z);
  if (world.getBlock(x,y - 1,z).canSustainPlant(world,x,y,z,ForgeDirection.UP,this) && world.getBlock(x,y - 1,z).isFertile(world,x,y,z)) {
    return true;
  }
  return (world.getBlock(x,y - 1,z) instanceof com.bluepowermod.block.worldgen.BlockCrop) && (world.getBlockMetadata(x,y - 1,z) == 7);
}","/** 
 * Can this block stay at this position. Similar to canPlaceBlockAt except gets checked often with plants.
 */
@Override public boolean canBlockStay(World world,int x,int y,int z){
  if (world.getBlock(x,y,z) != this)   return super.canBlockStay(world,x,y,z);
  if (world.getBlock(x,y - 1,z).canSustainPlant(world,x,y - 1,z,ForgeDirection.UP,this) && world.getBlock(x,y - 1,z).isFertile(world,x,y - 1,z)) {
    return true;
  }
  return (world.getBlock(x,y - 1,z) instanceof com.bluepowermod.block.worldgen.BlockCrop) && (world.getBlockMetadata(x,y - 1,z) == 7);
}",0.9929203539823008
169460,"@Override public void onUpdate(){
  getRedstoneConnectionCache().recalculateConnections();
  getBundledConnectionCache().recalculateConnections();
  for (  GateConnectionBase c : getConnections())   if (c != null)   c.refesh();
  if (!RedstoneApi.getInstance().shouldWiresHandleUpdates())   return;
  for (  GateConnectionBase c : getConnections())   if (c != null)   RedstoneApi.getInstance().getRedstonePropagator(this,c.getForgeDirection()).propagate();
  doLogicStuff();
}","@Override public void onUpdate(){
  getRedstoneConnectionCache().recalculateConnections();
  getBundledConnectionCache().recalculateConnections();
  for (  GateConnectionBase c : getConnections())   if (c != null)   c.refesh();
  for (  GateConnectionBase c : getConnections())   if (c != null)   RedstoneApi.getInstance().getRedstonePropagator(this,c.getForgeDirection()).propagate();
  doLogicStuff();
  for (  GateConnectionBase c : getConnections())   if (c != null)   c.notifyUpdateIfNeeded();
  sendUpdateIfNeeded();
}",0.81
169461,"protected List<IConnection<IRedstoneDevice>> performPropagation(){
  List<IConnection<IRedstoneDevice>> connections=new ArrayList<IConnection<IRedstoneDevice>>();
  IConnection<IRedstoneDevice> firstCon=(IConnection<IRedstoneDevice>)getDevice().getRedstoneConnectionCache().getConnectionOnSide(getSide());
  if (firstCon != null)   connections.add(firstCon);
  List<IConnection<IRedstoneDevice>> current=new ArrayList<IConnection<IRedstoneDevice>>();
  for (  Entry<IConnection<IRedstoneDevice>,Boolean> p : getPropagation(getDevice(),getSide())) {
    if (p.getValue()) {
      schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
    }
 else {
      current.add(p.getKey());
    }
  }
  if (current.size() == 0 && connections.size() == 0)   return connections;
  List<IConnection<IRedstoneDevice>> newDevices=new ArrayList<IConnection<IRedstoneDevice>>();
  while (current.size() > 0) {
    List<Entry<IConnection<IRedstoneDevice>,Boolean>> tmp=new ArrayList<Entry<IConnection<IRedstoneDevice>,Boolean>>();
    for (    IConnection<IRedstoneDevice> c : current) {
      tmp.addAll(getPropagation(c.getB(),c.getSideB()));
      for (      Entry<IConnection<IRedstoneDevice>,Boolean> p : tmp) {
        if (p.getValue()) {
          schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
        }
 else         if (!connections.contains(p)) {
          newDevices.add(p.getKey());
        }
      }
      tmp.clear();
    }
    connections.addAll(current);
    current.clear();
    for (    IConnection<IRedstoneDevice> c : newDevices)     if (!connections.contains(c))     current.add(c);
    newDevices.clear();
  }
  return connections;
}","protected List<IConnection<IRedstoneDevice>> performPropagation(){
  List<IConnection<IRedstoneDevice>> connections=new ArrayList<IConnection<IRedstoneDevice>>();
  IConnection<IRedstoneDevice> firstCon=(IConnection<IRedstoneDevice>)getDevice().getRedstoneConnectionCache().getConnectionOnSide(getSide());
  if (firstCon != null)   connections.add(firstCon);
  List<IConnection<IRedstoneDevice>> current=new ArrayList<IConnection<IRedstoneDevice>>();
  for (  Entry<IConnection<IRedstoneDevice>,Boolean> p : getPropagation(getDevice(),getSide())) {
    if (p.getValue()) {
      schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
    }
 else {
      if (p.getKey().getB() instanceof IRedstoneConductor && ((IRedstoneConductor)p.getKey().getB()).hasLoss(p.getKey().getSideB()) != (this instanceof LossyPropagator)) {
        schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
      }
 else {
        current.add(p.getKey());
      }
    }
  }
  if (current.size() == 0 && connections.size() == 0)   return connections;
  List<IConnection<IRedstoneDevice>> newDevices=new ArrayList<IConnection<IRedstoneDevice>>();
  while (current.size() > 0) {
    List<Entry<IConnection<IRedstoneDevice>,Boolean>> tmp=new ArrayList<Entry<IConnection<IRedstoneDevice>,Boolean>>();
    for (    IConnection<IRedstoneDevice> c : current) {
      tmp.addAll(getPropagation(c.getB(),c.getSideB()));
      for (      Entry<IConnection<IRedstoneDevice>,Boolean> p : tmp) {
        if (p.getValue()) {
          schedule(new RedPropagator(p.getKey().getB(),p.getKey().getSideB()));
        }
 else         if (!connections.contains(p)) {
          newDevices.add(p.getKey());
        }
      }
      tmp.clear();
    }
    connections.addAll(current);
    current.clear();
    for (    IConnection<IRedstoneDevice> c : newDevices)     if (!connections.contains(c))     current.add(c);
    newDevices.clear();
  }
  return connections;
}",0.9177704194260484
169462,"@Override protected void doPropagate(){
  if (getDevice().getWorld().isRemote)   return;
  if (getDevice() instanceof IRedConductor) {
    if (((IRedConductor)getDevice()).hasLoss(getSide())) {
      try {
        new LossyPropagator(getDevice(),getSide()).propagate();
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
 else {
      try {
        new LosslessPropagator(getDevice(),getSide()).propagate();
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    return;
  }
 else   if (getDevice() instanceof GateBase<?,?,?,?,?,?>) {
    IGateConnection c=((GateBase<?,?,?,?,?,?>)getDevice()).getConnection(getSide());
    if (c != null) {
      if (c instanceof GateConnectionAnalogue) {
        try {
          new LossyPropagator(getDevice(),getSide()).propagate();
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
 else       if (c instanceof GateConnectionDigital) {
        try {
          new LosslessPropagator(getDevice(),getSide()).propagate();
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
      return;
    }
  }
  try {
    new LosslessPropagator(getDevice(),getSide()).propagate();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","@Override protected void doPropagate(){
  if (getDevice().getWorld().isRemote)   return;
  if (getDevice() instanceof IRedConductor) {
    if (((IRedConductor)getDevice()).hasLoss(getSide())) {
      try {
        new LossyPropagator(getDevice(),getSide()).propagate();
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
 else {
      try {
        new LosslessPropagator(getDevice(),getSide()).propagate();
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    return;
  }
 else   if (getDevice() instanceof GateBase<?,?,?,?,?,?>) {
    IGateConnection c=((GateBase<?,?,?,?,?,?>)getDevice()).getConnection(getSide());
    IConnection<IRedstoneDevice> con=(IConnection<IRedstoneDevice>)getDevice().getRedstoneConnectionCache().getConnectionOnSide(getSide());
    if (c != null) {
      if (con != null && con.getB() instanceof IRedConductor && ((IRedConductor)con.getB()).hasLoss(con.getSideB())) {
        try {
          new LossyPropagator(getDevice(),getSide()).propagate();
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
 else       if (c instanceof GateConnectionDigital) {
        try {
          new LosslessPropagator(getDevice(),getSide()).propagate();
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
      return;
    }
  }
  try {
    new LosslessPropagator(getDevice(),getSide()).propagate();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.9130127298444132
169463,"private void propagate(IRedstoneDevice dev,ForgeDirection side,byte power){
  if (shouldPreventStackOverflows())   return;
  if ((power & 0xFF) < 0)   return;
  if ((dev.getRedstonePower(side) & 0xFF) > (power & 0xFF))   return;
  for (  Entry<IConnection<IRedstoneDevice>,Boolean> e : getPropagation(dev,side)) {
    e.getKey().getA().setRedstonePower(e.getKey().getSideA(),power);
    boolean found=false;
    for (    RedstonePropagator p : getScheduledPropagations()) {
      if (p.getDevice() == e.getKey().getB() && p.getSide() == e.getKey().getSideB()) {
        found=true;
        break;
      }
    }
    if (!found)     propagate(e.getKey().getB(),e.getKey().getSideB(),(byte)((power & 0xFF) - 1));
  }
}","private void propagate(IRedstoneDevice dev,ForgeDirection side,byte power){
  if (shouldPreventStackOverflows())   return;
  if ((power & 0xFF) < 0)   return;
  if ((dev.getRedstonePower(side) & 0xFF) > (power & 0xFF))   return;
  for (  Entry<IConnection<IRedstoneDevice>,Boolean> e : getPropagation(dev,side)) {
    e.getKey().getA().setRedstonePower(e.getKey().getSideA(),power);
    boolean found=false;
    for (    RedstonePropagator p : getScheduledPropagations()) {
      if (p.getDevice() == e.getKey().getB() && p.getSide() == e.getKey().getSideB()) {
        found=true;
        break;
      }
    }
    if (!found)     propagate(e.getKey().getB(),e.getKey().getSideB(),(byte)((power & 0xFF) - (dev instanceof IRedstoneConductor ? 1 : 0)));
  }
}",0.9714673913043478
169464,"@Override public void refesh(){
}","@Override public void refesh(){
  if (getGate().getRedstoneConnectionCache().getConnectionOnSide(getForgeDirection()) == null)   input=(byte)MathHelper.map(RedstoneHelper.getInput(getGate().getWorld(),getGate().getX(),getGate().getY(),getGate().getZ(),getForgeDirection(),getGate().getFace()),0,15,0,255);
}",0.1941176470588235
169465,"@Override public void refesh(){
}","@Override public void refesh(){
  if (getGate().getRedstoneConnectionCache().getConnectionOnSide(getForgeDirection()) == null)   input=RedstoneHelper.getInput(getGate().getWorld(),getGate().getX(),getGate().getY(),getGate().getZ(),getForgeDirection(),getGate().getFace()) > 0;
}",0.2122186495176848
169466,"@Override public void addWAILABody(List<String> text){
  super.addWAILABody(text);
}","@Override public void addWAILABody(List<String> text){
  super.addWAILABody(text);
  text.add(""String_Node_Str"" + (power & 0xFF));
}",0.7777777777777778
169467,"public static BundledConnection getBundledNeighbor(IBundledDevice device,ForgeDirection side){
  ForgeDirection face=ForgeDirection.UNKNOWN;
  if (device instanceof IFace)   face=((IFace)device).getFace();
  do {
    Vec3i loc=new Vec3i(device);
    IBundledDevice dev=RedstoneApi.getInstance().getBundledDevice(loc.getWorld(),loc.getX(),loc.getY(),loc.getZ(),side,face == ForgeDirection.UNKNOWN ? side.getOpposite() : face);
    if (dev == null)     break;
    ConnectionType type=(!(device instanceof IFace) || !(dev instanceof IFace)) && !(device instanceof IFace == dev instanceof IFace) ? ConnectionType.STRAIGHT : ConnectionType.CLOSED_CORNER;
    if (device.canConnect(side,dev,type) && dev.canConnect(face,device,type))     return RedstoneApi.getInstance().createConnection(device,dev,side,face,type);
  }
 while (false);
  if (face != ForgeDirection.UNKNOWN) {
    do {
      Vec3i loc=new Vec3i(device).add(face).add(side);
      IBundledDevice dev=RedstoneApi.getInstance().getBundledDevice(loc.getWorld(),loc.getX(),loc.getY(),loc.getZ(),side.getOpposite(),face.getOpposite());
      if (dev == null)       break;
      Vec3i block=new Vec3i(device).add(side);
      if (block.getBlock().isNormalCube(block.getWorld(),block.getX(),block.getY(),block.getZ()))       break;
      if (OcclusionHelper.microblockOcclusionTest(block,MicroblockShape.EDGE,1,face,side.getOpposite()))       break;
      if (device.canConnect(side,dev,ConnectionType.OPEN_CORNER) && dev.canConnect(face.getOpposite(),device,ConnectionType.OPEN_CORNER))       return RedstoneApi.getInstance().createConnection(device,dev,side,face.getOpposite(),ConnectionType.OPEN_CORNER);
    }
 while (false);
  }
  do {
    Vec3i loc=new Vec3i(device).add(side);
    IBundledDevice dev=RedstoneApi.getInstance().getBundledDevice(loc.getWorld(),loc.getX(),loc.getY(),loc.getZ(),face,side.getOpposite());
    if (dev == null)     break;
    if (device.canConnect(side,dev,ConnectionType.STRAIGHT) && dev.canConnect(side.getOpposite(),device,ConnectionType.STRAIGHT))     return RedstoneApi.getInstance().createConnection(device,dev,side,side.getOpposite(),ConnectionType.STRAIGHT);
  }
 while (false);
  return null;
}","public static BundledConnection getBundledNeighbor(IBundledDevice device,ForgeDirection side){
  ForgeDirection face=ForgeDirection.UNKNOWN;
  if (device instanceof IFace)   face=((IFace)device).getFace();
  do {
    Vec3i loc=new Vec3i(device);
    IBundledDevice dev=RedstoneApi.getInstance().getBundledDevice(loc.getWorld(),loc.getX(),loc.getY(),loc.getZ(),side,face == ForgeDirection.UNKNOWN ? side.getOpposite() : face);
    if (dev == null)     break;
    ConnectionType type=(!(device instanceof IFace) || !(dev instanceof IFace)) && !(device instanceof IFace == dev instanceof IFace) ? ConnectionType.STRAIGHT : ConnectionType.CLOSED_CORNER;
    if (device.canConnect(side,dev,type) && dev.canConnect(face,device,type))     return RedstoneApi.getInstance().createConnection(device,dev,side,face,type);
  }
 while (false);
  if (face != ForgeDirection.UNKNOWN) {
    do {
      Vec3i loc=new Vec3i(device).add(face).add(side);
      IBundledDevice dev=RedstoneApi.getInstance().getBundledDevice(loc.getWorld(),loc.getX(),loc.getY(),loc.getZ(),side.getOpposite(),face.getOpposite());
      if (dev == null)       break;
      Vec3i block=new Vec3i(device).add(side);
      if (block.getBlock().isNormalCube(block.getWorld(),block.getX(),block.getY(),block.getZ()))       break;
      if (OcclusionHelper.microblockOcclusionTest(block,MicroblockShape.EDGE,1,face,side.getOpposite()))       break;
      if (device.canConnect(side,dev,ConnectionType.OPEN_CORNER) && dev.canConnect(face.getOpposite(),device,ConnectionType.OPEN_CORNER))       return RedstoneApi.getInstance().createConnection(device,dev,side,face.getOpposite(),ConnectionType.OPEN_CORNER);
    }
 while (false);
  }
  do {
    Vec3i loc=new Vec3i(device).add(side);
    IBundledDevice dev=RedstoneApi.getInstance().getBundledDevice(loc.getWorld(),loc.getX(),loc.getY(),loc.getZ(),face,side.getOpposite());
    if (dev == null) {
      dev=RedstoneApi.getInstance().getBundledDevice(loc.getWorld(),loc.getX(),loc.getY(),loc.getZ(),side.getOpposite(),side.getOpposite());
      if (dev == null && face == ForgeDirection.UNKNOWN) {
        for (        ForgeDirection d : ForgeDirection.VALID_DIRECTIONS) {
          if (d != side && d != side.getOpposite()) {
            dev=RedstoneApi.getInstance().getBundledDevice(loc.getWorld(),loc.getX(),loc.getY(),loc.getZ(),d,side.getOpposite());
            if (dev != null)             break;
          }
        }
      }
    }
    if (dev == null)     break;
    if (device.canConnect(side,dev,ConnectionType.STRAIGHT) && dev.canConnect(side.getOpposite(),device,ConnectionType.STRAIGHT))     return RedstoneApi.getInstance().createConnection(device,dev,side,side.getOpposite(),ConnectionType.STRAIGHT);
  }
 while (false);
  return null;
}",0.8855177993527508
169468,"@Override public boolean canConnect(ForgeDirection side,IBundledDevice dev,ConnectionType type){
  if (dev instanceof IInsulatedRedstoneDevice)   return false;
  return type == ConnectionType.STRAIGHT && side != ForgeDirection.UNKNOWN;
}","@Override public boolean canConnect(ForgeDirection side,IBundledDevice dev,ConnectionType type){
  if (dev instanceof IInsulatedRedstoneDevice)   return false;
  if (dev instanceof TileLamp)   return false;
  return type == ConnectionType.STRAIGHT && side != ForgeDirection.UNKNOWN;
}",0.90978886756238
169469,"public void onUpdate(){
  if (blockType instanceof BlockLampRGB) {
    int pow=0;
    if (((BlockLamp)blockType).isInverted()) {
      pow=255 - Math.min(Math.min(bundledPower[MinecraftColor.RED.ordinal()] & 0xFF,bundledPower[MinecraftColor.GREEN.ordinal()] & 0xFF),bundledPower[MinecraftColor.BLUE.ordinal()] & 0xFF);
    }
 else {
      pow=Math.max(Math.max(bundledPower[MinecraftColor.RED.ordinal()] & 0xFF,bundledPower[MinecraftColor.GREEN.ordinal()] & 0xFF),bundledPower[MinecraftColor.BLUE.ordinal()] & 0xFF);
    }
    power=(int)((pow / 256D) * 15);
    sendUpdatePacket();
  }
 else {
    int pow=RedstoneHelper.getInput(getWorldObj(),xCoord,yCoord,zCoord);
    if (pow != power) {
      power=pow;
      sendUpdatePacket();
      getWorldObj().markBlockRangeForRenderUpdate(xCoord,yCoord,zCoord,xCoord,yCoord,zCoord);
      try {
        getWorldObj().updateLightByType(EnumSkyBlock.Block,xCoord,yCoord,zCoord);
      }
 catch (      Exception ex) {
      }
      getWorldObj().notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,getBlockType());
    }
  }
}","public void onUpdate(){
  if (blockType instanceof BlockLampRGB) {
    connections.recalculateConnections();
    int connected=0;
    for (    ForgeDirection s : ForgeDirection.VALID_DIRECTIONS)     connected+=(connections.getConnectionOnSide(s) != null) ? 1 : 0;
    if (connected == 0)     bundledPower=new byte[16];
    int pow=0;
    if (((BlockLamp)blockType).isInverted()) {
      pow=255 - Math.min(Math.min(bundledPower[MinecraftColor.RED.ordinal()] & 0xFF,bundledPower[MinecraftColor.GREEN.ordinal()] & 0xFF),bundledPower[MinecraftColor.BLUE.ordinal()] & 0xFF);
    }
 else {
      pow=Math.max(Math.max(bundledPower[MinecraftColor.RED.ordinal()] & 0xFF,bundledPower[MinecraftColor.GREEN.ordinal()] & 0xFF),bundledPower[MinecraftColor.BLUE.ordinal()] & 0xFF);
    }
    power=(int)((pow / 256D) * 15);
    sendUpdatePacket();
  }
 else {
    int pow=RedstoneHelper.getInput(getWorldObj(),xCoord,yCoord,zCoord);
    if (pow != power) {
      power=pow;
      sendUpdatePacket();
      getWorldObj().markBlockRangeForRenderUpdate(xCoord,yCoord,zCoord,xCoord,yCoord,zCoord);
      try {
        getWorldObj().updateLightByType(EnumSkyBlock.Block,xCoord,yCoord,zCoord);
      }
 catch (      Exception ex) {
      }
      getWorldObj().notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,getBlockType());
    }
  }
}",0.8943839061190276
169470,"@Override protected void drawGuiContainerBackgroundLayer(float f,int i,int j){
  super.drawGuiContainerBackgroundLayer(f,i,j);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  int burningPercentage=(int)(furnace.getBurningPercentage() * 14);
  drawTexturedModalRect(x + 22,y + 54 + 14 - burningPercentage,177,14 - burningPercentage,14,burningPercentage + 0);
  int processPercentage=(int)(furnace.getProcessPercentage() * 22);
  drawTexturedModalRect(x + 103,y + 35,178,14,processPercentage,15);
}","@Override protected void drawGuiContainerBackgroundLayer(float f,int i,int j){
  super.drawGuiContainerBackgroundLayer(f,i,j);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  mc.renderEngine.bindTexture(resLoc);
  int burningPercentage=(int)(furnace.getBurningPercentage() * 14);
  drawTexturedModalRect(x + 22,y + 54 + 14 - burningPercentage,177,14 - burningPercentage,14,burningPercentage + 0);
  int processPercentage=(int)(furnace.getProcessPercentage() * 22);
  drawTexturedModalRect(x + 103,y + 35,178,14,processPercentage,15);
}",0.9631031220435194
169471,"private void unloadWorld(){
  FakeWorldIC.getInstance().setIC(null);
}","public void unloadWorld(){
  FakeWorldIC.getInstance().setIC(null);
}",0.935251798561151
169472,"private void loadWorld(){
  FakeWorldIC.getInstance().setIC(this);
}","public void loadWorld(){
  FakeWorldIC.getInstance().setIC(this);
}",0.9333333333333332
169473,"@Override public boolean canConnectBundledStraight(ForgeDirection side,IBundledDevice device){
  if (!(device instanceof IFaceBundledDevice))   if (OcclusionHelper.microblockOcclusionTest(new Vec3i(this),MicroblockShape.FACE_HOLLOW,8,side))   return false;
  return WireCommons.canConnect(this,device,side,side.getOpposite());
}","@Override public boolean canConnectBundledStraight(ForgeDirection side,IBundledDevice device){
  if (!(device instanceof IFaceBundledDevice))   if (OcclusionHelper.microblockOcclusionTest(new Vec3i(this),MicroblockShape.FACE_HOLLOW,8,side))   return false;
  if (device instanceof IRedstoneDevice) {
    MinecraftColor insulation=((IRedstoneDevice)device).getInsulationColor(side.getOpposite());
    MinecraftColor myInsulation=getInsulationColor(side);
    if (insulation != null && getInsulationColor(side) != null)     if (!insulation.matches(myInsulation))     return false;
  }
  return WireCommons.canConnect(this,device,side,side.getOpposite());
}",0.5743380855397149
169474,"@Override public boolean canConnectBundledOpenCorner(ForgeDirection side,IBundledDevice device){
  if (!(device instanceof IFaceBundledDevice))   if (OcclusionHelper.microblockOcclusionTest(new Vec3i(this),MicroblockShape.FACE_HOLLOW,8,side))   return false;
  return WireCommons.canConnect(this,device);
}","@Override public boolean canConnectBundledOpenCorner(ForgeDirection side,IBundledDevice device){
  if (!(device instanceof IFaceBundledDevice))   if (OcclusionHelper.microblockOcclusionTest(new Vec3i(this),MicroblockShape.FACE_HOLLOW,8,side))   return false;
  if (device instanceof IRedstoneDevice) {
    MinecraftColor insulation=((IRedstoneDevice)device).getInsulationColor(side.getOpposite());
    MinecraftColor myInsulation=getInsulationColor(side);
    if (insulation != null && getInsulationColor(side) != null)     if (!insulation.matches(myInsulation))     return false;
  }
  return WireCommons.canConnect(this,device);
}",0.652452025586354
169475,"@Override public boolean canConnectRedstone(ForgeDirection side){
  return false;
}","@Override public boolean canConnectRedstone(ForgeDirection side){
  return !bundled;
}",0.9467455621301776
169476,"@Override public void tick(){
  if (!getWorld().isRemote) {
    front().setOutput(false);
    left().setOutput(false);
    right().setOutput(false);
    t.setState(false);
    left().notifyUpdateIfNeeded();
    right().notifyUpdateIfNeeded();
  }
  if (!back().getInput() && !(!front().getOutput() && (left().getInput() || right().getInput()))) {
    p.setState(true);
    p.setIncrement(1 / (double)time);
    if (++curTime >= time) {
      if (!getWorld().isRemote) {
        front().setOutput(true);
        left().setOutput(true);
        right().setOutput(true);
        t.setState(true);
      }
      playTickSound();
      curTime=0;
    }
  }
 else {
    curTime=0;
    p.setState(false);
    p.setAngle(0);
  }
}","@Override public void tick(){
  if (!getWorld().isRemote) {
    front().setOutput(false);
    left().setOutput(false);
    right().setOutput(false);
    t.setState(false);
    left().notifyUpdateIfNeeded();
    right().notifyUpdateIfNeeded();
  }
  if (!back().getInput() && !(!front().getOutput() && (left().getInput() || right().getInput()))) {
    p.setState(true);
    p.setIncrement(1 / (double)time);
    if (++curTime >= time) {
      if (!getWorld().isRemote) {
        front().setOutput(true);
        left().setOutput(true);
        right().setOutput(true);
        t.setState(true);
        p.setAngle(0);
      }
      playTickSound();
      curTime=0;
    }
  }
 else {
    curTime=0;
    p.setState(false);
    p.setAngle(0);
  }
}",0.9843217450579412
169477,"public ItemStackDatabase(){
  saveLocation=BluePower.proxy.getSavePath() + ""String_Node_Str"" + DATABASE_FOLDER_NAME;
}","public ItemStackDatabase(){
  saveLocation=BluePower.proxy.getSavePath() + File.separator + DATABASE_FOLDER_NAME;
}",0.8841201716738197
169478,"@Override protected void drawGuiContainerBackgroundLayer(float f,int i,int j){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  mc.renderEngine.bindTexture(resLoc);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  drawTexturedModalRect(x,y,0,0,xSize,ySize);
  for (  IGuiWidget widget : widgets) {
    widget.render(i,j);
  }
}","@Override protected void drawGuiContainerBackgroundLayer(float f,int i,int j){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  mc.renderEngine.bindTexture(resLoc);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  drawTexturedModalRect(x,y,0,0,xSize,ySize);
  for (  IGuiWidget widget : widgets) {
    widget.render(i,j,f);
  }
}",0.9969879518072288
169479,"@Override public TubeStack acceptItemFromTube(TubeStack stack,ForgeDirection from,boolean simulate){
  if (from == getOutputDirection()) {
    return super.acceptItemFromTube(stack,from,simulate);
  }
 else {
    boolean success=!ItemStack.areItemStacksEqual(stack.stack,nonAcceptedStack) && tryProcessItem(stack.stack,simulate);
    if (success) {
      nonAcceptedStack=stack.stack;
      if (stack.stack.stackSize <= 0) {
        return null;
      }
 else {
        return stack;
      }
    }
 else {
      return stack;
    }
  }
}","@Override public TubeStack acceptItemFromTube(TubeStack stack,ForgeDirection from,boolean simulate){
  if (from == getOutputDirection()) {
    return super.acceptItemFromTube(stack,from,simulate);
  }
 else   if (!isBufferEmpty() && !ejectionScheduled) {
    return stack;
  }
 else {
    boolean success=!ItemStack.areItemStacksEqual(stack.stack,nonAcceptedStack) && tryProcessItem(stack.stack,simulate);
    if (success) {
      nonAcceptedStack=stack.stack;
      if (stack.stack.stackSize <= 0) {
        return null;
      }
 else {
        return stack;
      }
    }
 else {
      return stack;
    }
  }
}",0.9339130434782608
169480,"private void ejectItems(){
  for (Iterator<TubeStack> iterator=internalItemStackBuffer.iterator(); iterator.hasNext(); ) {
    TubeStack tubeStack=iterator.next();
    if (IOHelper.canInterfaceWith(getTileCache(getOutputDirection()),getFacingDirection())) {
      ItemStack returnedStack=IOHelper.insert(getTileCache(getOutputDirection()),tubeStack.stack,getFacingDirection(),tubeStack.color,false);
      if (returnedStack == null) {
        iterator.remove();
        markDirty();
        if (!ejectionScheduled)         break;
      }
 else       if (returnedStack.stackSize != tubeStack.stack.stackSize) {
        markDirty();
        if (!ejectionScheduled)         break;
      }
 else {
        break;
      }
    }
 else     if (spawnItemsInWorld) {
      ForgeDirection direction=getFacingDirection().getOpposite();
      if (worldObj.isAirBlock(xCoord + direction.offsetX,yCoord + direction.offsetY,zCoord + direction.offsetZ)) {
        ejectItemInWorld(tubeStack.stack,direction);
        iterator.remove();
        markDirty();
      }
 else {
        break;
      }
    }
  }
}","private void ejectItems(){
  for (Iterator<TubeStack> iterator=internalItemStackBuffer.iterator(); iterator.hasNext(); ) {
    TubeStack tubeStack=iterator.next();
    if (IOHelper.canInterfaceWith(getTileCache(getOutputDirection()),getFacingDirection())) {
      ItemStack returnedStack=IOHelper.insert(getTileCache(getOutputDirection()),tubeStack.stack,getFacingDirection(),tubeStack.color,false);
      if (returnedStack == null) {
        iterator.remove();
        markDirty();
        if (!ejectionScheduled)         break;
      }
 else       if (returnedStack.stackSize != tubeStack.stack.stackSize) {
        markDirty();
        if (!ejectionScheduled)         break;
      }
 else {
        break;
      }
    }
 else     if (spawnItemsInWorld) {
      ForgeDirection direction=getFacingDirection().getOpposite();
      if (worldObj.getBlock(xCoord + direction.offsetX,yCoord + direction.offsetY,zCoord + direction.offsetZ).getBlocksMovement(worldObj,xCoord + direction.offsetX,yCoord + direction.offsetY,zCoord + direction.offsetZ)) {
        ejectItemInWorld(tubeStack.stack,direction);
        iterator.remove();
        markDirty();
      }
 else {
        break;
      }
    }
  }
}",0.948885976408912
169481,"@Override public void init(FMLInitializationEvent ev){
}","@Override public void init(FMLInitializationEvent ev){
  RedstoneApi.getInstance().registerRedstoneProvider(new RedstoneProviderCC());
  RedstoneApi.getInstance().registerBundledUpdateHandler(new BundledUpdateHandlerCC());
}",0.4
169482,"@Override public void preInit(FMLPreInitializationEvent ev){
  ComputerCraftAPI.registerPeripheralProvider(PeripheralProvider.INSTANCE);
}","@Override public void preInit(FMLPreInitializationEvent ev){
  ComputerCraftAPI.registerPeripheralProvider(PeripheralProvider.INSTANCE);
  ComputerCraftAPI.registerBundledRedstoneProvider(new BundledRedstoneProviderCC());
}",0.7645429362880887
169483,"@Override @SideOnly(Side.CLIENT) protected IIcon getSideIcon(ForgeDirection side){
  return getPartCache(side) instanceof MagTube ? IconSupplier.magTubeSide : IconSupplier.pneumaticTubeSide;
}","@Override @SideOnly(Side.CLIENT) protected IIcon getSideIcon(){
  return null;
}",0.5882352941176471
169484,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  Block block=world.getBlock(x,y,z);
  if (player.isSneaking()) {
    ITilePartHolder itph=MultipartCompatibility.getPartHolder(world,new Vec3i(x,y,z));
    if (itph != null) {
      QMovingObjectPosition mop=itph.rayTrace(RayTracer.instance().getStartVector(player),RayTracer.instance().getEndVector(player));
      if (mop == null)       return false;
      IPart p=mop.getPart();
      if (p instanceof BPPartFaceRotate) {
        ((BPPartFaceRotate)p).setRotation((((BPPartFaceRotate)p).getRotation() + 1) % 4);
      }
    }
  }
  if (block instanceof BlockContainerBase) {
    if (((BlockContainerBase)block).getGuiID() != GuiIDs.INVALID) {
      if (player.isSneaking()) {
        block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
        if (!player.capabilities.isCreativeMode) {
          stack.setItemDamage(stack.getItemDamage() + 1);
        }
      }
    }
 else     if (block.getValidRotations(world,x,y,z).length > 1) {
      block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
      if (!player.capabilities.isCreativeMode) {
        stack.setItemDamage(stack.getItemDamage() + 1);
      }
    }
  }
 else   if (block.getValidRotations(world,x,y,z).length > 1) {
    block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
    if (!player.capabilities.isCreativeMode) {
      stack.setItemDamage(stack.getItemDamage() + 1);
    }
  }
  return false;
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  Block block=world.getBlock(x,y,z);
  if (player.isSneaking()) {
    ITilePartHolder itph=MultipartCompatibility.getPartHolder(world,new Vec3i(x,y,z));
    if (itph != null) {
      QMovingObjectPosition mop=itph.rayTrace(RayTracer.instance().getStartVector(player),RayTracer.instance().getEndVector(player));
      if (mop == null)       return false;
      IPart p=mop.getPart();
      if (p instanceof BPPartFaceRotate) {
        ((BPPartFaceRotate)p).setRotation((((BPPartFaceRotate)p).getRotation() + 1) % 4);
      }
    }
  }
  if (block instanceof BlockContainerBase) {
    if (((BlockContainerBase)block).getGuiID() != GuiIDs.INVALID) {
      if (player.isSneaking()) {
        block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
        if (!player.capabilities.isCreativeMode)         stack.damageItem(1,player);
      }
    }
 else {
      if (block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side)) && !player.capabilities.isCreativeMode)       stack.damageItem(1,player);
    }
  }
 else {
    if (block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side)) && !player.capabilities.isCreativeMode)     stack.damageItem(1,player);
  }
  return false;
}",0.6781056966369252
169485,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  Block block=world.getBlock(x,y,z);
  if (player.isSneaking()) {
    ITilePartHolder itph=MultipartCompatibility.getPartHolder(world,new Vec3i(x,y,z));
    if (itph != null) {
      QMovingObjectPosition mop=itph.rayTrace(RayTracer.instance().getStartVector(player),RayTracer.instance().getEndVector(player));
      if (mop == null)       return false;
      IPart p=mop.getPart();
      if (p instanceof BPPartFaceRotate) {
        ((BPPartFaceRotate)p).setRotation((((BPPartFaceRotate)p).getRotation() + 1) % 4);
      }
    }
  }
  if (block instanceof BlockContainerBase) {
    if (((BlockContainerBase)block).getGuiID() != GuiIDs.INVALID) {
      if (player.isSneaking()) {
        block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
        if (!player.capabilities.isCreativeMode) {
          stack.setItemDamage(stack.getItemDamage() + 1);
        }
      }
    }
 else {
      block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
      if (!player.capabilities.isCreativeMode) {
        stack.setItemDamage(stack.getItemDamage() + 1);
      }
    }
  }
 else {
    block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
    if (!player.capabilities.isCreativeMode) {
      stack.setItemDamage(stack.getItemDamage() + 1);
    }
  }
  return false;
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  Block block=world.getBlock(x,y,z);
  if (player.isSneaking()) {
    ITilePartHolder itph=MultipartCompatibility.getPartHolder(world,new Vec3i(x,y,z));
    if (itph != null) {
      QMovingObjectPosition mop=itph.rayTrace(RayTracer.instance().getStartVector(player),RayTracer.instance().getEndVector(player));
      if (mop == null)       return false;
      IPart p=mop.getPart();
      if (p instanceof BPPartFaceRotate) {
        ((BPPartFaceRotate)p).setRotation((((BPPartFaceRotate)p).getRotation() + 1) % 4);
      }
    }
  }
  if (block instanceof BlockContainerBase) {
    if (((BlockContainerBase)block).getGuiID() != GuiIDs.INVALID) {
      if (player.isSneaking()) {
        block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
        if (!player.capabilities.isCreativeMode) {
          stack.setItemDamage(stack.getItemDamage() + 1);
        }
      }
    }
 else     if (block.getValidRotations(world,x,y,z).length > 1) {
      block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
      if (!player.capabilities.isCreativeMode) {
        stack.setItemDamage(stack.getItemDamage() + 1);
      }
    }
  }
 else   if (block.getValidRotations(world,x,y,z).length > 1) {
    block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
    if (!player.capabilities.isCreativeMode) {
      stack.setItemDamage(stack.getItemDamage() + 1);
    }
  }
  return false;
}",0.9628647214854112
169486,"@Override public boolean renderStatic(Vec3i translation,RenderHelper renderer,RenderBlocks renderBlocks,int pass){
switch (getFace()) {
case DOWN:
    break;
case UP:
  renderer.addTransformation(new Rotation(180,180,0,Vec3d.center));
break;
case NORTH:
renderer.addTransformation(new Rotation(90,0,0,Vec3d.center));
break;
case SOUTH:
renderer.addTransformation(new Rotation(-90,0,0,Vec3d.center));
break;
case WEST:
renderer.addTransformation(new Rotation(0,0,-90,Vec3d.center));
break;
case EAST:
renderer.addTransformation(new Rotation(0,0,90,Vec3d.center));
break;
default :
break;
}
int rotation=getRotation();
renderer.addTransformation(new Rotation(0,90 * -rotation,0));
if (rendering == null) rendering=this;
renderer.renderBox(BOX.clone().expand(-0.001),getIcon(ForgeDirection.DOWN),getIcon(ForgeDirection.UP),getIcon(ForgeDirection.WEST),getIcon(ForgeDirection.EAST),getIcon(ForgeDirection.NORTH),getIcon(ForgeDirection.SOUTH));
rendering=null;
return true;
}","@Override public boolean renderStatic(Vec3i translation,RenderHelper renderer,RenderBlocks renderBlocks,int pass){
switch (getFace()) {
case DOWN:
    break;
case UP:
  renderer.addTransformation(new Rotation(180,180,0,Vec3d.center));
break;
case NORTH:
renderer.addTransformation(new Rotation(90,0,0,Vec3d.center));
break;
case SOUTH:
renderer.addTransformation(new Rotation(-90,0,0,Vec3d.center));
break;
case WEST:
renderer.addTransformation(new Rotation(0,0,-90,Vec3d.center));
break;
case EAST:
renderer.addTransformation(new Rotation(0,0,90,Vec3d.center));
break;
default :
break;
}
int rotation=getRotation();
renderer.addTransformation(new Rotation(0,90 * -rotation,0));
if (rendering == null) rendering=this;
renderer.renderBox(BOX.clone().expand(-0.001),getIcon(ForgeDirection.DOWN),getIcon(ForgeDirection.UP),getIcon(ForgeDirection.WEST),getIcon(ForgeDirection.EAST),getIcon(ForgeDirection.NORTH),getIcon(ForgeDirection.SOUTH));
rendering=null;
renderer.resetTransformations();
return true;
}",0.983274201723264
169487,"public RedstoneConnection getConnection(ForgeDirection direction){
  try {
    return connections[Dir.getDirection(direction,getFace(),getRotation()).ordinal()];
  }
 catch (  Exception ex) {
  }
  return null;
}","public RedstoneConnection getConnection(ForgeDirection direction){
  for (  RedstoneConnection c : connections)   if (c.getDirection().toForgeDirection(getFace(),getRotation()) == direction)   return c;
  return null;
}",0.5846867749419954
169488,"@Override public boolean renderStatic(Vec3i translation,RenderHelper renderer,RenderBlocks renderBlocks,int pass){
  double height=getHeight() / 16D;
  double width=getWidth() / 32D;
  IIcon[] icons=new IIcon[]{getWireIcon(ForgeDirection.DOWN),getWireIcon(ForgeDirection.UP),getWireIcon(ForgeDirection.WEST),getWireIcon(ForgeDirection.EAST),getWireIcon(ForgeDirection.NORTH),getWireIcon(ForgeDirection.SOUTH)};
  int color=getColorMultiplier();
  ForgeDirection d1=ForgeDirection.NORTH;
  ForgeDirection d2=ForgeDirection.SOUTH;
  ForgeDirection d3=ForgeDirection.WEST;
  ForgeDirection d4=ForgeDirection.EAST;
  if (getFace() == ForgeDirection.NORTH) {
    d1=ForgeDirection.UP;
    d2=ForgeDirection.DOWN;
  }
 else   if (getFace() == ForgeDirection.SOUTH) {
    d1=ForgeDirection.DOWN;
    d2=ForgeDirection.UP;
  }
 else   if (getFace() == ForgeDirection.WEST) {
    d3=ForgeDirection.UP;
    d4=ForgeDirection.DOWN;
  }
 else   if (getFace() == ForgeDirection.EAST) {
    d3=ForgeDirection.DOWN;
    d4=ForgeDirection.UP;
  }
 else   if (getFace() == ForgeDirection.UP) {
    d3=ForgeDirection.EAST;
    d4=ForgeDirection.WEST;
  }
switch (getFace()) {
case DOWN:
    break;
case UP:
  renderer.addTransformation(new Rotation(180,180,0,Vec3d.center));
break;
case NORTH:
renderer.addTransformation(new Rotation(90,90,0,Vec3d.center));
d1=d1.getRotation(getFace());
d2=d2.getRotation(getFace());
d3=d3.getRotation(getFace());
d4=d4.getRotation(getFace());
break;
case SOUTH:
renderer.addTransformation(new Rotation(-90,90,0,Vec3d.center));
d1=d1.getRotation(getFace());
d2=d2.getRotation(getFace());
d3=d3.getRotation(getFace());
d4=d4.getRotation(getFace());
break;
case WEST:
renderer.addTransformation(new Rotation(0,0,-90,Vec3d.center));
break;
case EAST:
renderer.addTransformation(new Rotation(0,0,90,Vec3d.center));
break;
default :
break;
}
boolean s1=shouldRenderConnection(d1);
boolean s2=shouldRenderConnection(d2);
boolean s3=shouldRenderConnection(d3);
boolean s4=shouldRenderConnection(d4);
renderer.setColor(color);
renderer.renderBox(new Vec3dCube(8 / 16D - width,0,8 / 16D - width,8 / 16D + width,height,8 / 16D + width),icons);
if (s4 || s3) {
if (s3 || (!s3 && s4 && !s1&& !s2)) renderer.renderBox(new Vec3dCube(s3 ? 0 : 4 / 16D,0,8 / 16D - width,8 / 16D - width,height,8 / 16D + width),icons);
if (s4 || (s3 && !s4 && !s1&& !s2)) renderer.renderBox(new Vec3dCube(8 / 16D + width,0,8 / 16D - width,s4 ? 1 : 12 / 16D,height,8 / 16D + width),icons);
if (s1) renderer.renderBox(new Vec3dCube(8 / 16D - width,0,s1 ? 0 : 4 / 16D,8 / 16D + width,height,8 / 16D - width),icons);
if (s2) renderer.renderBox(new Vec3dCube(8 / 16D - width,0,8 / 16D + width,8 / 16D + width,height,s2 ? 1 : 12 / 16D),icons);
}
 else {
renderer.renderBox(new Vec3dCube(8 / 16D - width,0,s1 ? 0 : 4 / 16D,8 / 16D + width,height,8 / 16D - width),icons);
renderer.renderBox(new Vec3dCube(8 / 16D - width,0,8 / 16D + width,8 / 16D + width,height,s2 ? 1 : 12 / 16D),icons);
}
renderer.resetTransformations();
return true;
}","@Override public boolean renderStatic(Vec3i translation,RenderHelper renderer,RenderBlocks renderBlocks,int pass){
  double height=getHeight() / 16D;
  double width=getWidth() / 32D;
  IIcon[] icons=new IIcon[]{getWireIcon(ForgeDirection.DOWN),getWireIcon(ForgeDirection.UP),getWireIcon(ForgeDirection.WEST),getWireIcon(ForgeDirection.EAST),getWireIcon(ForgeDirection.NORTH),getWireIcon(ForgeDirection.SOUTH)};
  int color=getColorMultiplier();
  ForgeDirection d1=ForgeDirection.NORTH;
  ForgeDirection d2=ForgeDirection.SOUTH;
  ForgeDirection d3=ForgeDirection.WEST;
  ForgeDirection d4=ForgeDirection.EAST;
  if (getFace() == ForgeDirection.NORTH) {
    d1=ForgeDirection.UP;
    d2=ForgeDirection.DOWN;
  }
 else   if (getFace() == ForgeDirection.SOUTH) {
    d1=ForgeDirection.DOWN;
    d2=ForgeDirection.UP;
  }
 else   if (getFace() == ForgeDirection.WEST) {
    d3=ForgeDirection.UP;
    d4=ForgeDirection.DOWN;
  }
 else   if (getFace() == ForgeDirection.EAST) {
    d3=ForgeDirection.DOWN;
    d4=ForgeDirection.UP;
  }
 else   if (getFace() == ForgeDirection.UP) {
    d3=ForgeDirection.EAST;
    d4=ForgeDirection.WEST;
  }
switch (getFace()) {
case DOWN:
    break;
case UP:
  renderer.addTransformation(new Rotation(180,180,0,Vec3d.center));
break;
case NORTH:
renderer.addTransformation(new Rotation(90,90,0,Vec3d.center));
d1=d1.getRotation(getFace());
d2=d2.getRotation(getFace());
d3=d3.getRotation(getFace());
d4=d4.getRotation(getFace());
break;
case SOUTH:
renderer.addTransformation(new Rotation(-90,90,0,Vec3d.center));
d1=d1.getRotation(getFace());
d2=d2.getRotation(getFace());
d3=d3.getRotation(getFace());
d4=d4.getRotation(getFace());
break;
case WEST:
renderer.addTransformation(new Rotation(0,0,-90,Vec3d.center));
break;
case EAST:
renderer.addTransformation(new Rotation(0,0,90,Vec3d.center));
break;
default :
break;
}
boolean s1=shouldRenderConnection(d1);
boolean s2=shouldRenderConnection(d2);
boolean s3=shouldRenderConnection(d3);
boolean s4=shouldRenderConnection(d4);
renderer.setColor(color);
renderer.renderBox(new Vec3dCube(8 / 16D - width,0,8 / 16D - width,8 / 16D + width,height,8 / 16D + width),icons);
if (s4 || s3) {
if (s3 || (!s3 && s4 && !s1&& !s2)) renderer.renderBox(new Vec3dCube(s3 ? 0 : 4 / 16D,0,8 / 16D - width,8 / 16D - width,height,8 / 16D + width),icons);
if (s4 || (s3 && !s4 && !s1&& !s2)) renderer.renderBox(new Vec3dCube(8 / 16D + width,0,8 / 16D - width,s4 ? 1 : 12 / 16D,height,8 / 16D + width),icons);
if (s1) renderer.renderBox(new Vec3dCube(8 / 16D - width,0,s1 ? 0 : 4 / 16D,8 / 16D + width,height,8 / 16D - width),icons);
if (s2) renderer.renderBox(new Vec3dCube(8 / 16D - width,0,8 / 16D + width,8 / 16D + width,height,s2 ? 1 : 12 / 16D),icons);
}
 else {
renderer.renderBox(new Vec3dCube(8 / 16D - width,0,s1 ? 0 : 4 / 16D,8 / 16D + width,height,8 / 16D - width),icons);
renderer.renderBox(new Vec3dCube(8 / 16D - width,0,8 / 16D + width,8 / 16D + width,height,s2 ? 1 : 12 / 16D),icons);
}
renderer.setColor(0xFFFFFF);
renderer.resetTransformations();
return true;
}",0.9952089872790352
169489,"@Override public int[] getAccessibleSlotsFromSide(int var1){
  ForgeDirection access=ForgeDirection.getOrientation(var1);
  ForgeDirection dir=ForgeDirection.getOrientation(getBlockMetadata());
  if (access == dir) {
    int[] allSlots=new int[allInventories.length];
    for (int i=0; i < allSlots.length; i++)     allSlots[i]=i;
    return allSlots;
  }
  if (var1 > dir.getOpposite().ordinal())   var1--;
  int[] slots=new int[4];
  for (int i=0; i < 4; i++) {
    slots[i]=var1 + i * 5;
  }
  return slots;
}","@Override public int[] getAccessibleSlotsFromSide(int var1){
  ForgeDirection access=ForgeDirection.getOrientation(var1);
  ForgeDirection dir=getFacingDirection();
  if (access == dir) {
    int[] allSlots=new int[allInventories.length];
    for (int i=0; i < allSlots.length; i++)     allSlots[i]=i;
    return allSlots;
  }
  if (var1 > dir.getOpposite().ordinal())   var1--;
  int[] slots=new int[4];
  for (int i=0; i < 4; i++) {
    slots[i]=var1 + i * 5;
  }
  return slots;
}",0.9527638190954774
169490,"@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block block){
  super.onNeighborBlockChange(world,x,y,z,block);
  if ((world.getBlockMetadata(x,y,z) == 7) && (world.getBlock(x,y + 1,z) == Blocks.air)) {
    world.setBlockMetadataWithNotify(x,y,z,5,2);
  }
  this.checkAndDropBlock(world,x,y,z);
}","@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block block){
  super.onNeighborBlockChange(world,x,y,z,block);
  if ((world.getBlockMetadata(x,y,z) == 7) && (world.getBlock(x,y + 1,z) == Blocks.air)) {
    world.setBlockMetadataWithNotify(x,y,z,5,2);
  }
  if ((world.getBlockMetadata(x,y,z) == 8) && (world.getBlockMetadata(x,y - 1,z) != 7)) {
    world.setBlockToAir(x,y,z);
  }
  if ((world.getBlockMetadata(x,y,z) < 8) && (world.getBlock(x,y - 1,z) instanceof BlockCrop)) {
    world.setBlockToAir(x,y,z);
  }
  this.checkAndDropBlock(world,x,y,z);
}",0.6910299003322259
169491,"@Override public boolean hitEntity(ItemStack stack,EntityLivingBase entity,EntityLivingBase player){
  this.damageDealt=athameMaterial.getDamageVsEntity();
  if ((entity instanceof EntityEnderman) || (entity instanceof EntityDragon)) {
    this.damageDealt+=25.0F;
  }
  entity.attackEntityFrom(DamageSource.causePlayerDamage((EntityPlayer)player),this.damageDealt);
  return super.hitEntity(stack,entity,player);
}","@Override public boolean hitEntity(ItemStack stack,EntityLivingBase entity,EntityLivingBase player){
  this.damageDealt=athameMaterial.getDamageVsEntity();
  if ((entity instanceof EntityEnderman) || (entity instanceof EntityDragon)) {
    this.damageDealt+=18.0F;
  }
  entity.attackEntityFrom(DamageSource.causePlayerDamage((EntityPlayer)player),this.damageDealt);
  return super.hitEntity(stack,entity,player);
}",0.9951807228915662
169492,"/** 
 * Can this block stay at this position. Similar to canPlaceBlockAt except gets checked often with plants.
 */
@Override public boolean canBlockStay(World world,int x,int y,int z){
  if (world.getBlock(x,y,z) != this)   return super.canBlockStay(world,x,y,z);
  return (world.getBlock(x,y - 1,z) instanceof BlockFarmland) || (world.getBlock(x,y - 1,z) instanceof BlockCrop);
}","/** 
 * Can this block stay at this position. Similar to canPlaceBlockAt except gets checked often with plants.
 */
@Override public boolean canBlockStay(World world,int x,int y,int z){
  if (world.getBlock(x,y,z) != this)   return super.canBlockStay(world,x,y,z);
  return (world.getBlock(x,y - 1,z) instanceof BlockFarmland) || ((world.getBlock(x,y - 1,z) instanceof BlockCrop) && (world.getBlockMetadata(x,y - 1,z) != 7));
}",0.943069306930693
169493,"/** 
 * Ticks the block if it's been scheduled
 */
@Override public void updateTick(World world,int x,int y,int z,Random random){
  super.updateTick(world,x,y,z,random);
  if (world.getBlockLightValue(x,y + 1,z) >= 9) {
    int meta=world.getBlockMetadata(x,y,z);
    if ((meta == 4) || (meta == 5)) {
      return;
    }
    if (!(world.getBlock(x,y - 1,z) instanceof BlockFarmland) || (world.getBlock(x,y - 1,z) == BPBlocks.flax_crop) || (!world.isAirBlock(x,y + 1,z))) {
      return;
    }
    if (random.nextInt(45) == 0) {
      world.setBlockMetadataWithNotify(x,y,z,meta + 1,2);
    }
    if ((meta > 6) && (world.getBlock(x,y - 1,z) instanceof BlockFarmland) && (world.getBlock(x,y + 1,z) instanceof BlockAir)) {
      if (meta == 7) {
        world.setBlock(x,y + 1,z,BPBlocks.flax_crop,8,2);
      }
      world.setBlockMetadataWithNotify(x,y,z,7,2);
    }
    if ((meta > 7) && (world.getBlock(x,y - 1,z) instanceof BlockFarmland)) {
      world.setBlockMetadataWithNotify(x,y,z,7,2);
      world.setBlock(x,y + 1,z,BPBlocks.flax_crop,8,2);
    }
    if ((meta < 8) && ((world.getBlock(x,y - 1,z) instanceof BlockCrop))) {
      world.setBlockToAir(x,y,z);
    }
  }
}","/** 
 * Ticks the block if it's been scheduled
 */
@Override public void updateTick(World world,int x,int y,int z,Random random){
  if (world.getBlockLightValue(x,y + 1,z) >= 9) {
    int meta=world.getBlockMetadata(x,y,z);
    if (!(world.getBlock(x,y - 1,z) instanceof BlockFarmland) || (world.getBlock(x,y - 1,z) == BPBlocks.flax_crop) || (!world.isAirBlock(x,y + 1,z))) {
      return;
    }
    if ((meta > 6) && (world.getBlock(x,y - 1,z) instanceof BlockFarmland) && (world.getBlock(x,y + 1,z) instanceof BlockAir)) {
      if (meta == 7) {
        world.setBlock(x,y + 1,z,BPBlocks.flax_crop,8,2);
      }
      world.setBlockMetadataWithNotify(x,y,z,7,2);
    }
    if ((meta > 7) && (world.getBlock(x,y - 1,z) instanceof BlockFarmland)) {
      world.setBlockMetadataWithNotify(x,y,z,7,2);
      world.setBlock(x,y + 1,z,BPBlocks.flax_crop,8,2);
    }
    if (random.nextInt(30) == 0) {
      world.setBlockMetadataWithNotify(x,y,z,meta + 1,2);
    }
  }
}",0.3793103448275862
169494,"public ContainerSortingMachine(InventoryPlayer invPlayer,TileSortingMachine sortingMachine){
  this.sortingMachine=sortingMachine;
  for (int i=0; i < 5; i++) {
    for (int j=0; j < 8; j++) {
      addSlotToContainer(new SlotPhantom(sortingMachine,i * 8 + j,26 + j * 18,18 + i * 18));
    }
  }
  bindPlayerInventory(invPlayer);
}","public ContainerSortingMachine(InventoryPlayer invPlayer,TileSortingMachine sortingMachine){
  this.sortingMachine=sortingMachine;
  for (int i=0; i < 5; i++) {
    for (int j=0; j < 8; j++) {
      addSlotToContainer(new SlotPhantom(sortingMachine,i * 8 + j,26 + j * 18,18 + i * 18));
    }
  }
  bindPlayerInventory(invPlayer);
  Arrays.fill(colors,-1);
  Arrays.fill(fuzzySettings,-1);
}",0.9181692094313454
169495,"private void generateLavaColumn(World world,int x,int topY,int z,Random rand){
  if (rand.nextDouble() < Config.volcanoActiveToInactiveRatio) {
    world.setBlock(x,topY,z,BPBlocks.cracked_basalt_lava);
  }
 else {
    world.setBlock(x,topY + 1,z,Blocks.lava);
    world.setBlock(x,topY,z,Blocks.lava);
  }
  for (int y=topY - 1; y >= 10; y--) {
    world.setBlock(x + 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x - 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z + 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z - 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z,Blocks.lava,0,0);
  }
}","private void generateLavaColumn(World world,int x,int topY,int z,Random rand){
  if (rand.nextDouble() < Config.volcanoActiveToInactiveRatio) {
    world.setBlock(x,topY,z,BPBlocks.cracked_basalt_lava);
  }
 else {
    world.setBlock(x,topY + 1,z,Blocks.lava);
    world.setBlock(x,topY,z,Blocks.lava);
  }
  for (int y=topY - 1; y >= 10; y--) {
    world.setBlock(x + 1,y,z,BPBlocks.basalt,0,2);
    world.setBlock(x - 1,y,z,BPBlocks.basalt,0,2);
    world.setBlock(x,y,z + 1,BPBlocks.basalt,0,2);
    world.setBlock(x,y,z - 1,BPBlocks.basalt,0,2);
    world.setBlock(x,y,z,Blocks.lava,0,2);
  }
}",0.7123745819397993
169496,"public void generate(World world,Random rand,int middleX,int vulcanoHeight,int middleZ){
  List<Pos>[] distMap=calculateDistMap();
  boolean first=true;
  for (int dist=0; dist < distMap.length; dist++) {
    List<Pos> distList=distMap[dist];
    boolean isFinished=true;
    for (    Pos p : distList) {
      int worldHeight=world.getHeightValue(p.x + middleX,p.z + middleZ) - 1;
      int posHeight=first ? vulcanoHeight : getNewVulcanoHeight(worldHeight,p,rand,dist);
      if (posHeight >= 0 && (posHeight > worldHeight || canReplace(world,p.x + middleX,posHeight,p.z + middleZ))) {
        vulcanoMap.put(p,posHeight);
        if (!first) {
          for (int i=posHeight; i > 0 && (i > worldHeight || canReplace(world,p.x + middleX,i,p.z + middleZ)); i--) {
            world.setBlock(p.x + middleX,i,p.z + middleZ,BPBlocks.basalt,0,0);
          }
          for (int i=posHeight + 1; i < vulcanoHeight; i++) {
            if (canReplace(world,p.x + middleX,i,p.z + middleZ) && world.getBlock(p.x + middleX,i,p.z + middleZ).getMaterial() != Material.water)             world.setBlock(p.x + middleX,i,p.z + middleZ,Blocks.air,0,0);
          }
        }
        isFinished=false;
      }
      first=false;
    }
    if (isFinished)     break;
  }
  generateLavaColumn(world,middleX,vulcanoHeight,middleZ,rand);
}","public void generate(World world,Random rand,int middleX,int vulcanoHeight,int middleZ){
  List<Pos>[] distMap=calculateDistMap();
  boolean first=true;
  for (int dist=0; dist < distMap.length; dist++) {
    List<Pos> distList=distMap[dist];
    boolean isFinished=true;
    for (    Pos p : distList) {
      int worldHeight=world.getHeightValue(p.x + middleX,p.z + middleZ) - 1;
      int posHeight=first ? vulcanoHeight : getNewVulcanoHeight(worldHeight,p,rand,dist);
      if (posHeight >= 0 && (posHeight > worldHeight || canReplace(world,p.x + middleX,posHeight,p.z + middleZ))) {
        vulcanoMap.put(p,posHeight);
        if (!first) {
          for (int i=posHeight; i > 0 && (i > worldHeight || canReplace(world,p.x + middleX,i,p.z + middleZ)); i--) {
            world.setBlock(p.x + middleX,i,p.z + middleZ,BPBlocks.basalt,0,2);
          }
          for (int i=posHeight + 1; i < vulcanoHeight; i++) {
            if (canReplace(world,p.x + middleX,i,p.z + middleZ) && world.getBlock(p.x + middleX,i,p.z + middleZ).getMaterial() != Material.water)             world.setBlock(p.x + middleX,i,p.z + middleZ,Blocks.air,0,2);
          }
        }
        isFinished=false;
      }
      first=false;
    }
    if (isFinished)     break;
  }
  generateLavaColumn(world,middleX,vulcanoHeight,middleZ,rand);
}",0.9984836997725548
169497,"/** 
 * Can this block stay at this position. Similar to canPlaceBlockAt except gets checked often with plants.
 */
@Override public boolean canBlockStay(World world,int x,int y,int z){
  if (world.getBlock(x,y,z) != this)   return super.canBlockStay(world,x,y,z);
  return (world.getBlock(x,y - 1,z) instanceof BlockFarmland) || ((world.getBlock(x,y - 1,z) instanceof BlockCrop) && (world.getBlockMetadata(x,y - 1,z) != 7));
}","/** 
 * Can this block stay at this position. Similar to canPlaceBlockAt except gets checked often with plants.
 */
@Override public boolean canBlockStay(World world,int x,int y,int z){
  if (world.getBlock(x,y,z) != this)   return super.canBlockStay(world,x,y,z);
  if ((world.getBlock(x,y - 1,z) instanceof BlockFarmland) && (world.getBlock(x,y - 1,z).isFertile(world,x,y - 1,z))) {
    return true;
  }
  if ((world.getBlock(x,y - 1,z) instanceof BlockCrop) && (world.getBlockMetadata(x,y - 1,z) == 7)) {
    return true;
  }
  return false;
}",0.7523124357656732
169498,"@Override public TubeStack acceptItemFromTube(TubeStack stack,ForgeDirection from,boolean simulate){
  if (from == getOutputDirection()) {
    return super.acceptItemFromTube(stack,from,simulate);
  }
 else {
    boolean success=tryProcessItem(stack.stack,simulate);
    if (success) {
      if (stack.stack.stackSize <= 0) {
        return null;
      }
 else {
        return stack;
      }
    }
 else {
      return stack;
    }
  }
}","@Override public TubeStack acceptItemFromTube(TubeStack stack,ForgeDirection from,boolean simulate){
  if (from == getOutputDirection()) {
    return super.acceptItemFromTube(stack,from,simulate);
  }
 else {
    boolean success=!ItemStack.areItemStacksEqual(stack.stack,nonAcceptedStack) && tryProcessItem(stack.stack,simulate);
    if (success) {
      nonAcceptedStack=stack.stack;
      if (stack.stack.stackSize <= 0) {
        return null;
      }
 else {
        return stack;
      }
    }
 else {
      return stack;
    }
  }
}",0.8984615384615384
169499,"@Override public void updateEntity(){
  super.updateEntity();
  if (!sweepTriggered && savedPulses > 0) {
    savedPulses--;
    sweepTriggered=true;
  }
  if (!worldObj.isRemote && worldObj.getWorldTime() % TileMachineBase.BUFFER_EMPTY_INTERVAL == 0 && (pullMode == PullMode.SINGLE_SWEEP && sweepTriggered || pullMode == PullMode.AUTOMATIC)) {
    triggerSorting();
  }
}","@Override public void updateEntity(){
  nonAcceptedStack=null;
  super.updateEntity();
  if (!sweepTriggered && savedPulses > 0) {
    savedPulses--;
    sweepTriggered=true;
  }
  if (!worldObj.isRemote && worldObj.getWorldTime() % TileMachineBase.BUFFER_EMPTY_INTERVAL == 0 && (pullMode == PullMode.SINGLE_SWEEP && sweepTriggered || pullMode == PullMode.AUTOMATIC)) {
    triggerSorting();
  }
}",0.9674902470741222
169500,"public static void registerParts(){
  PartRegistry.registerFactory(new PartFactory());
  registerPart(GateAnd.class);
}","public static void registerParts(){
  PartRegistry.registerFactory(new PartFactory());
  registerPart(GateAnd.class);
  registerPart(GateNot.class);
}",0.8847583643122676
169501,"@Override public void registerIcons(IIconRegister reg){
  iconBottom=reg.registerIcon(Refs.MODID + ""String_Node_Str"");
  iconSide=reg.registerIcon(Refs.MODID + ""String_Node_Str"");
  iconTop=reg.registerIcon(Refs.MODID + ""String_Node_Str"" + getId()+ ""String_Node_Str"");
}","@Override public void registerIcons(IIconRegister reg){
  if (iconBottom == null)   iconBottom=reg.registerIcon(Refs.MODID + ""String_Node_Str"");
  if (iconSide == null)   iconSide=reg.registerIcon(Refs.MODID + ""String_Node_Str"");
  iconTop=reg.registerIcon(Refs.MODID + ""String_Node_Str"" + getId()+ ""String_Node_Str"");
}",0.9152542372881356
169502,"@Override public IIcon getIcon(IBlockAccess w,int x,int y,int z,int face){
  ForgeDirection f=ForgeDirection.getOrientation(face);
  if (f == rendering.getFace())   return iconBottom;
  if (f == rendering.getFace().getOpposite())   return iconTop;
  return iconSide;
}","@Override public IIcon getIcon(IBlockAccess w,int x,int y,int z,int face){
  ForgeDirection f=ForgeDirection.getOrientation(face);
  if (f == rendering.getFace())   return iconBottom;
  if (f == rendering.getFace().getOpposite())   return ((GateBase)PartManager.getExample(rendering.getType())).iconTop;
  return iconSide;
}",0.8918918918918919
169503,"@Override public String getSavePath(){
  String mcDataLocation=Minecraft.getMinecraft().mcDataDir.getAbsolutePath();
  return mcDataLocation.substring(0,mcDataLocation.length() - 2);
}","@Override public String getSavePath(){
  return Minecraft.getMinecraft().mcDataDir.getAbsolutePath();
}",0.6968641114982579
169504,"public String getSavePath(){
  String mcDataLocation=FMLServerHandler.instance().getSavesDirectory().getAbsolutePath();
  return mcDataLocation.substring(0,mcDataLocation.length() - 2);
}","public String getSavePath(){
  return FMLServerHandler.instance().getSavesDirectory().getAbsolutePath();
}",0.7030716723549488
169505,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void propagate(List<Entry<WireBluestone,Integer>> wires,int[] power,int colorId){
  if (!isBundled)   recalculatePower();
  wires.add(new AbstractMap.SimpleEntry(this,isBundled ? colorId : this.colorId));
  power[0]=Math.max(power[0],powerSelf);
  for (int i=0; i < 6; i++)   if (connections[i] != null)   if (connections[i] instanceof WireBluestone)   if (((WireBluestone)connections[i]).colorId == colorId || colorId == -1 || ((WireBluestone)connections[i]).colorId == -1)   if (!isInList(wires,(WireBluestone)connections[i]))   ((WireBluestone)connections[i]).propagate(wires,power,isBundled ? colorId : this.colorId);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void propagate(List<Entry<WireBluestone,Integer>> wires,int[] power,int colorId){
  if (!isBundled)   recalculatePower();
  wires.add(new AbstractMap.SimpleEntry(this,isBundled ? colorId : this.colorId));
  power[0]=Math.max(power[0],powerSelf);
  for (int i=0; i < 6; i++)   if (connections[i] != null)   if (connections[i] instanceof WireBluestone)   if (((WireBluestone)connections[i]).colorId == this.colorId || this.colorId == -1 || ((WireBluestone)connections[i]).colorId == -1)   if (!isInList(wires,(WireBluestone)connections[i]))   ((WireBluestone)connections[i]).propagate(wires,power,isBundled ? colorId : this.colorId);
}",0.9927849927849928
169506,"private void suckEntity(){
  ForgeDirection direction=getFacingDirection();
  AxisAlignedBB box=AxisAlignedBB.getBoundingBox(xCoord + direction.offsetX,yCoord + direction.offsetY,zCoord + direction.offsetZ,xCoord + direction.offsetX + 1,yCoord + direction.offsetY + 1,zCoord + direction.offsetZ + 1);
  for (  EntityItem entity : (List<EntityItem>)worldObj.getEntitiesWithinAABB(EntityItem.class,box)) {
    ItemStack stack=entity.getEntityItem();
    if (isItemAccepted(stack)) {
      addItemToOutputBuffer(stack,getAcceptedItemColor(stack));
      entity.setDead();
    }
  }
}","private void suckEntity(){
  ForgeDirection direction=getFacingDirection();
  AxisAlignedBB box=AxisAlignedBB.getBoundingBox(xCoord + direction.offsetX,yCoord + direction.offsetY,zCoord + direction.offsetZ,xCoord + direction.offsetX + 1,yCoord + direction.offsetY + 1,zCoord + direction.offsetZ + 1);
  for (  EntityItem entity : (List<EntityItem>)worldObj.getEntitiesWithinAABB(EntityItem.class,box)) {
    ItemStack stack=entity.getEntityItem();
    if (isItemAccepted(stack) && !entity.isDead) {
      addItemToOutputBuffer(stack,getAcceptedItemColor(stack));
      entity.setDead();
    }
  }
}",0.9847198641765704
169507,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  event.getModMetadata().version=Refs.fullVersionString();
  log=event.getModLog();
  config=new Configuration(event.getSuggestedConfigurationFile());
  BPApi.init(new BluePowerAPI());
  Config.syncConfig(config);
  BPBlocks.init();
  BPItems.init();
  TileEntities.init();
  OreDictionarySetup.init();
  GameRegistry.registerWorldGenerator(new WorldGenerationHandler(),0);
  BPEnchantments.init();
  CompatibilityUtils.preInit(event);
  FMLCommonHandler.instance().bus().register(new Config());
  BPEventHandler eventHandler=new BPEventHandler();
  MinecraftForge.EVENT_BUS.register(eventHandler);
  FMLCommonHandler.instance().bus().register(eventHandler);
  PartRegister.registerParts();
  BPApi.getInstance().getBluestoneApi();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  event.getModMetadata().version=Refs.fullVersionString();
  log=event.getModLog();
  config=new Configuration(event.getSuggestedConfigurationFile());
  BPApi.init(new BluePowerAPI());
  Config.syncConfig(config);
  PartRegister.registerParts();
  BPBlocks.init();
  BPItems.init();
  TileEntities.init();
  OreDictionarySetup.init();
  GameRegistry.registerWorldGenerator(new WorldGenerationHandler(),0);
  BPEnchantments.init();
  CompatibilityUtils.preInit(event);
  FMLCommonHandler.instance().bus().register(new Config());
  BPEventHandler eventHandler=new BPEventHandler();
  MinecraftForge.EVENT_BUS.register(eventHandler);
  FMLCommonHandler.instance().bus().register(eventHandler);
  BPApi.getInstance().getBluestoneApi();
}",0.9600499375780276
169508,"public static void init(){
  OreDictionary.registerOre(""String_Node_Str"",BPBlocks.copper_ore);
  OreDictionary.registerOre(""String_Node_Str"",BPBlocks.zinc_ore);
  OreDictionary.registerOre(""String_Node_Str"",BPBlocks.silver_ore);
  OreDictionary.registerOre(""String_Node_Str"",BPBlocks.tungsten_ore);
  OreDictionary.registerOre(""String_Node_Str"",BPBlocks.marble);
  OreDictionary.registerOre(""String_Node_Str"",BPBlocks.basalt);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.ruby_gem);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.amethyst_gem);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.sapphire_gem);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.teslatite_dust);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.copper_ingot);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.zinc_ingot);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.silver_ingot);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.brass_ingot);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.tungsten_ingot);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.indigo_dye);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.blue_alloy_ingot);
}","public static void init(){
  OreDictionary.registerOre(""String_Node_Str"",BPBlocks.copper_ore);
  OreDictionary.registerOre(""String_Node_Str"",BPBlocks.zinc_ore);
  OreDictionary.registerOre(""String_Node_Str"",BPBlocks.silver_ore);
  OreDictionary.registerOre(""String_Node_Str"",BPBlocks.tungsten_ore);
  OreDictionary.registerOre(""String_Node_Str"",BPBlocks.marble);
  OreDictionary.registerOre(""String_Node_Str"",BPBlocks.basalt);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.ruby_gem);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.amethyst_gem);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.sapphire_gem);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.teslatite_dust);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.copper_ingot);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.zinc_ingot);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.silver_ingot);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.brass_ingot);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.tungsten_ingot);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.indigo_dye);
  OreDictionary.registerOre(""String_Node_Str"",BPItems.blue_alloy_ingot);
  for (int i=0; i < 16; i++) {
    OreDictionary.registerOre(""String_Node_Str"",PartRegistry.getInstance().getItemForPart(""String_Node_Str"" + ItemDye.field_150921_b[i]));
  }
}",0.9316575019638648
169509,"@Override protected void pullItem(){
  if (isBufferEmpty()) {
    TileEntity extractingInventory=getTileCache()[getFacingDirection().ordinal()].getTileEntity();
    IMultipartCompat compat=(IMultipartCompat)CompatibilityUtils.getModule(Dependencies.FMP);
    PneumaticTube tube=compat.getBPPart(extractingInventory,PneumaticTube.class);
    if (tube != null) {
      boolean everythingNull=true;
      for (int i=0; i < inventory.length; i++) {
        if (mode == 1 || slotIndex == i) {
          ItemStack stack=inventory[i];
          if (stack != null) {
            if (tube.getLogic().retrieveStack(this,getFacingDirection(),stack)) {
              if (mode == 0) {
                slotIndex++;
                while (slotIndex != i) {
                  if (inventory[slotIndex] != null)                   break;
                  if (++slotIndex >= inventory.length)                   slotIndex=0;
                }
              }
              return;
            }
            everythingNull=false;
          }
        }
      }
      if (everythingNull) {
        tube.getLogic().retrieveStack(this,getFacingDirection(),null);
        slotIndex=0;
      }
    }
 else {
      super.pullItem();
    }
  }
}","@Override protected void pullItem(){
  if (isBufferEmpty()) {
    TileEntity extractingInventory=getTileCache()[getFacingDirection().ordinal()].getTileEntity();
    IMultipartCompat compat=(IMultipartCompat)CompatibilityUtils.getModule(Dependencies.FMP);
    PneumaticTube tube=compat.getBPPart(extractingInventory,PneumaticTube.class);
    if (tube != null) {
      boolean everythingNull=true;
      for (int i=0; i < inventory.length; i++) {
        if (mode == 1 || slotIndex == i) {
          ItemStack stack=inventory[i];
          if (stack != null) {
            if (tube.getLogic().retrieveStack(this,getFacingDirection(),stack)) {
              if (mode == 0) {
                if (++slotIndex >= inventory.length)                 slotIndex=0;
                while (slotIndex != i) {
                  if (inventory[slotIndex] != null)                   break;
                  if (++slotIndex >= inventory.length)                   slotIndex=0;
                }
              }
              return;
            }
            everythingNull=false;
          }
        }
      }
      if (everythingNull) {
        tube.getLogic().retrieveStack(this,getFacingDirection(),null);
        slotIndex=0;
      }
    }
 else {
      super.pullItem();
    }
  }
}",0.9714285714285714
169510,"/** 
 * Retrieves an item from the specified inventory. This item can be specified.
 * @param tile
 * @param direction
 * @param requestedStack
 * @param useItemCount if true, it'll only retrieve the stack of the exact item count given. it'll look in multiple slots of the inventory. if false, the first matching stack, ignoring item count, will be returned.
 * @param simulate
 * @param fuzzySetting ,
 * @return
 */
public static ItemStack extract(TileEntity tile,ForgeDirection direction,ItemStack requestedStack,boolean useItemCount,boolean simulate,int fuzzySetting){
  if (requestedStack == null)   return requestedStack;
  IInventory inv=getInventoryForTE(tile);
  if (inv != null) {
    int[] accessibleSlots;
    if (inv instanceof ISidedInventory) {
      accessibleSlots=((ISidedInventory)inv).getAccessibleSlotsFromSide(direction.ordinal());
    }
 else {
      accessibleSlots=new int[inv.getSizeInventory()];
      for (int i=0; i < accessibleSlots.length; i++)       accessibleSlots[i]=i;
    }
    int itemsFound=0;
    for (    int slot : accessibleSlots) {
      ItemStack stack=inv.getStackInSlot(slot);
      if (stack != null && WidgetFuzzySetting.areStacksEqual(stack,requestedStack,fuzzySetting) && IOHelper.canExtractItemFromInventory(inv,stack,slot,direction.ordinal())) {
        if (!useItemCount) {
          if (!simulate) {
            inv.setInventorySlotContents(slot,null);
          }
          return stack;
        }
        itemsFound+=stack.stackSize;
      }
    }
    if (itemsFound >= requestedStack.stackSize) {
      ItemStack exportedStack=null;
      int itemsNeeded=requestedStack.stackSize;
      for (      int slot : accessibleSlots) {
        ItemStack stack=inv.getStackInSlot(slot);
        if (stack != null && WidgetFuzzySetting.areStacksEqual(stack,requestedStack,fuzzySetting) && IOHelper.canExtractItemFromInventory(inv,stack,slot,direction.ordinal())) {
          int itemsSubstracted=Math.min(itemsNeeded,stack.stackSize);
          if (itemsSubstracted > 0)           exportedStack=stack;
          itemsNeeded-=itemsSubstracted;
          if (!simulate) {
            stack.stackSize-=itemsSubstracted;
            if (stack.stackSize == 0)             inv.setInventorySlotContents(slot,null);
            tile.markDirty();
          }
        }
      }
      exportedStack=exportedStack.copy();
      exportedStack.stackSize=requestedStack.stackSize;
      return exportedStack;
    }
  }
  return null;
}","/** 
 * Retrieves an item from the specified inventory. This item can be specified.
 * @param tile
 * @param direction
 * @param requestedStack
 * @param useItemCount if true, it'll only retrieve the stack of the exact item count given. it'll look in multiple slots of the inventory. if false, the first matching stack, ignoring item count, will be returned.
 * @param simulate
 * @param fuzzySetting ,
 * @return
 */
public static ItemStack extract(TileEntity tile,ForgeDirection direction,ItemStack requestedStack,boolean useItemCount,boolean simulate,int fuzzySetting){
  if (requestedStack == null)   return requestedStack;
  IInventory inv=getInventoryForTE(tile);
  if (inv != null) {
    int[] accessibleSlots;
    if (inv instanceof ISidedInventory) {
      accessibleSlots=((ISidedInventory)inv).getAccessibleSlotsFromSide(direction.ordinal());
    }
 else {
      accessibleSlots=new int[inv.getSizeInventory()];
      for (int i=0; i < accessibleSlots.length; i++)       accessibleSlots[i]=i;
    }
    int itemsFound=0;
    for (    int slot : accessibleSlots) {
      ItemStack stack=inv.getStackInSlot(slot);
      if (stack != null && ItemStackHelper.areStacksEqual(stack,requestedStack,fuzzySetting) && IOHelper.canExtractItemFromInventory(inv,stack,slot,direction.ordinal())) {
        if (!useItemCount) {
          if (!simulate) {
            inv.setInventorySlotContents(slot,null);
          }
          return stack;
        }
        itemsFound+=stack.stackSize;
      }
    }
    if (itemsFound >= requestedStack.stackSize) {
      ItemStack exportedStack=null;
      int itemsNeeded=requestedStack.stackSize;
      for (      int slot : accessibleSlots) {
        ItemStack stack=inv.getStackInSlot(slot);
        if (stack != null && ItemStackHelper.areStacksEqual(stack,requestedStack,fuzzySetting) && IOHelper.canExtractItemFromInventory(inv,stack,slot,direction.ordinal())) {
          int itemsSubstracted=Math.min(itemsNeeded,stack.stackSize);
          if (itemsSubstracted > 0)           exportedStack=stack;
          itemsNeeded-=itemsSubstracted;
          if (!simulate) {
            stack.stackSize-=itemsSubstracted;
            if (stack.stackSize == 0)             inv.setInventorySlotContents(slot,null);
            tile.markDirty();
          }
        }
      }
      exportedStack=exportedStack.copy();
      exportedStack.stackSize=requestedStack.stackSize;
      return exportedStack;
    }
  }
  return null;
}",0.5921266233766234
169511,"public static int getItemCount(ItemStack type,TileEntity inv,ForgeDirection side,int fuzzySetting){
  IInventory inventory=getInventoryForTE(inv);
  int[] slots=getAccessibleSlotsForInventory(inventory,side);
  int count=0;
  for (  int slot : slots) {
    ItemStack invStack=inventory.getStackInSlot(slot);
    if (invStack != null) {
      if (WidgetFuzzySetting.areStacksEqual(invStack,type,fuzzySetting)) {
        count+=invStack.stackSize;
      }
    }
  }
  return count;
}","public static int getItemCount(ItemStack type,TileEntity inv,ForgeDirection side,int fuzzySetting){
  IInventory inventory=getInventoryForTE(inv);
  int[] slots=getAccessibleSlotsForInventory(inventory,side);
  int count=0;
  for (  int slot : slots) {
    ItemStack invStack=inventory.getStackInSlot(slot);
    if (invStack != null) {
      if (ItemStackHelper.areStacksEqual(invStack,type,fuzzySetting)) {
        count+=invStack.stackSize;
      }
    }
  }
  return count;
}",0.8279457768508863
169512,"/** 
 * compares ItemStack argument to the instance ItemStack; returns true if both ItemStacks are equal
 */
public static boolean areItemStacksEqual(ItemStack itemStack1,ItemStack itemStack2){
  return itemStack1 == null && itemStack2 == null || (!(itemStack1 == null || itemStack2 == null) && (itemStack1.getItem() == itemStack2.getItem() && (itemStack1.getItemDamage() == itemStack2.getItemDamage() && (!(itemStack1.stackTagCompound == null && itemStack2.stackTagCompound != null) && (itemStack1.stackTagCompound == null || itemStack1.stackTagCompound.equals(itemStack2.stackTagCompound))))));
}","/** 
 * compares ItemStack argument to the instance ItemStack; returns true if both ItemStacks are equal
 */
public static boolean areItemStacksEqual(ItemStack itemStack1,ItemStack itemStack2){
  return itemStack1 == null && itemStack2 == null || !(itemStack1 == null || itemStack2 == null) && itemStack1.getItem() == itemStack2.getItem() && itemStack1.getItemDamage() == itemStack2.getItemDamage() && !(itemStack1.stackTagCompound == null && itemStack2.stackTagCompound != null) && (itemStack1.stackTagCompound == null || itemStack1.stackTagCompound.equals(itemStack2.stackTagCompound));
}",0.9124579124579124
169513,"@Override protected boolean isItemAccepted(ItemStack item){
  boolean everythingNull=true;
  for (  ItemStack invStack : inventory) {
    if (invStack != null) {
      if (WidgetFuzzySetting.areStacksEqual(invStack,item,fuzzySetting)) {
        return true;
      }
      everythingNull=false;
    }
  }
  return everythingNull;
}","@Override protected boolean isItemAccepted(ItemStack item){
  boolean everythingNull=true;
  for (  ItemStack invStack : inventory) {
    if (invStack != null) {
      if (ItemStackHelper.areStacksEqual(invStack,item,fuzzySetting)) {
        return true;
      }
      everythingNull=false;
    }
  }
  return everythingNull;
}",0.9497716894977168
169514,"private boolean isItemAccepted(ItemStack item){
  boolean everythingNull=true;
  for (  ItemStack invStack : inventory) {
    if (invStack != null) {
      if (WidgetFuzzySetting.areStacksEqual(invStack,item,fuzzySetting)) {
        return true;
      }
      everythingNull=false;
    }
  }
  return everythingNull;
}","private boolean isItemAccepted(ItemStack item){
  boolean everythingNull=true;
  for (  ItemStack invStack : inventory) {
    if (invStack != null) {
      if (ItemStackHelper.areStacksEqual(invStack,item,fuzzySetting)) {
        return true;
      }
      everythingNull=false;
    }
  }
  return everythingNull;
}",0.9478672985781992
169515,"private int getItemsInSection(ItemStack type,EnumSection section){
  int count=0;
  for (int i=section.ordinal() * 9; i < section.ordinal() * 9 + 9; i++) {
    if (inventory[i] != null && WidgetFuzzySetting.areStacksEqual(type,inventory[i],fuzzySetting))     count+=inventory[i].stackSize;
  }
  return count;
}","private int getItemsInSection(ItemStack type,EnumSection section){
  int count=0;
  for (int i=section.ordinal() * 9; i < section.ordinal() * 9 + 9; i++) {
    if (inventory[i] != null && ItemStackHelper.areStacksEqual(type,inventory[i],fuzzySetting))     count+=inventory[i].stackSize;
  }
  return count;
}",0.9466882067851372
169516,"@Override public void updateEntity(){
  super.updateEntity();
  if (!worldObj.isRemote && isBufferEmpty()) {
    boolean ratiosMatch=true;
    for (int i=0; i < 9; i++) {
      if (inventory[i] != null) {
        int inputFilterItems=getItemsInSection(inventory[i],EnumSection.INPUT_FILTER);
        int bufferItems=getItemsInSection(inventory[i],EnumSection.BUFFER);
        if (bufferItems < inputFilterItems) {
          ratiosMatch=false;
          break;
        }
      }
    }
    if (ratiosMatch && !isEjecting())     checkIndividualOutputFilterAndEject();
    if (mode == 1 && !isEjecting()) {
      IInventory inv=IOHelper.getInventoryForTE(getTileCache()[getOutputDirection().ordinal()].getTileEntity());
      if (inv != null) {
        int[] accessibleSlots;
        if (inv instanceof ISidedInventory) {
          accessibleSlots=((ISidedInventory)inv).getAccessibleSlotsFromSide(getFacingDirection().ordinal());
        }
 else {
          accessibleSlots=new int[inv.getSizeInventory()];
          for (int i=0; i < accessibleSlots.length; i++)           accessibleSlots[i]=i;
        }
        for (int i=18; i < 27; i++) {
          if (inventory[i] != null) {
            int outputFilterItems=getItemsInSection(inventory[i],EnumSection.OUTPUT_FILTER);
            int supplyingInvCount=0;
            for (            int slot : accessibleSlots) {
              ItemStack stackInSlot=inv.getStackInSlot(slot);
              if (stackInSlot != null && WidgetFuzzySetting.areStacksEqual(stackInSlot,inventory[i],fuzzySetting) && IOHelper.canInsertItemToInventory(inv,inventory[i],slot,getFacingDirection().ordinal())) {
                supplyingInvCount+=stackInSlot.stackSize;
              }
            }
            if (supplyingInvCount < outputFilterItems) {
              ItemStack requestedStack=inventory[i].copy();
              requestedStack.stackSize=outputFilterItems - supplyingInvCount;
              ItemStack bufferItems=IOHelper.extract(this,ForgeDirection.UNKNOWN,requestedStack,true,false,fuzzySetting);
              if (bufferItems != null) {
                ItemStack remainder=IOHelper.insert(inv,bufferItems,getFacingDirection().ordinal(),false);
                if (remainder != null) {
                  IOHelper.insert(this,remainder,ForgeDirection.UNKNOWN,false);
                }
              }
            }
          }
        }
      }
    }
    boolean shouldEmitRedstone=isSatisfied() || animationTicker >= 0;
    if (isEjecting() != shouldEmitRedstone) {
      setOutputtingRedstone(shouldEmitRedstone);
      sendUpdatePacket();
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (!worldObj.isRemote && isBufferEmpty()) {
    boolean ratiosMatch=true;
    for (int i=0; i < 9; i++) {
      if (inventory[i] != null) {
        int inputFilterItems=getItemsInSection(inventory[i],EnumSection.INPUT_FILTER);
        int bufferItems=getItemsInSection(inventory[i],EnumSection.BUFFER);
        if (bufferItems < inputFilterItems) {
          ratiosMatch=false;
          break;
        }
      }
    }
    if (ratiosMatch && !isEjecting())     checkIndividualOutputFilterAndEject();
    if (mode == 1 && !isEjecting()) {
      IInventory inv=IOHelper.getInventoryForTE(getTileCache()[getOutputDirection().ordinal()].getTileEntity());
      if (inv != null) {
        int[] accessibleSlots;
        if (inv instanceof ISidedInventory) {
          accessibleSlots=((ISidedInventory)inv).getAccessibleSlotsFromSide(getFacingDirection().ordinal());
        }
 else {
          accessibleSlots=new int[inv.getSizeInventory()];
          for (int i=0; i < accessibleSlots.length; i++)           accessibleSlots[i]=i;
        }
        for (int i=18; i < 27; i++) {
          if (inventory[i] != null) {
            int outputFilterItems=getItemsInSection(inventory[i],EnumSection.OUTPUT_FILTER);
            int supplyingInvCount=0;
            for (            int slot : accessibleSlots) {
              ItemStack stackInSlot=inv.getStackInSlot(slot);
              if (stackInSlot != null && ItemStackHelper.areStacksEqual(stackInSlot,inventory[i],fuzzySetting) && IOHelper.canInsertItemToInventory(inv,inventory[i],slot,getFacingDirection().ordinal())) {
                supplyingInvCount+=stackInSlot.stackSize;
              }
            }
            if (supplyingInvCount < outputFilterItems) {
              ItemStack requestedStack=inventory[i].copy();
              requestedStack.stackSize=outputFilterItems - supplyingInvCount;
              ItemStack bufferItems=IOHelper.extract(this,ForgeDirection.UNKNOWN,requestedStack,true,false,fuzzySetting);
              if (bufferItems != null) {
                ItemStack remainder=IOHelper.insert(inv,bufferItems,getFacingDirection().ordinal(),false);
                if (remainder != null) {
                  IOHelper.insert(this,remainder,ForgeDirection.UNKNOWN,false);
                }
              }
            }
          }
        }
      }
    }
    boolean shouldEmitRedstone=isSatisfied() || animationTicker >= 0;
    if (isEjecting() != shouldEmitRedstone) {
      setOutputtingRedstone(shouldEmitRedstone);
      sendUpdatePacket();
    }
  }
}",0.9936452917388792
169517,"/** 
 * Returns true if the supplying inventory has the items stated in the output filter.
 * @return
 */
private boolean isSatisfied(){
  IInventory inv=IOHelper.getInventoryForTE(getTileCache()[getOutputDirection().ordinal()].getTileEntity());
  if (inv != null) {
    int[] accessibleSlots;
    if (inv instanceof ISidedInventory) {
      accessibleSlots=((ISidedInventory)inv).getAccessibleSlotsFromSide(getFacingDirection().ordinal());
    }
 else {
      accessibleSlots=new int[inv.getSizeInventory()];
      for (int i=0; i < accessibleSlots.length; i++)       accessibleSlots[i]=i;
    }
    boolean everythingNull=true;
    for (int i=18; i < 27; i++) {
      if (inventory[i] != null) {
        everythingNull=false;
        int outputFilterItems=getItemsInSection(inventory[i],EnumSection.OUTPUT_FILTER);
        int supplyingInvCount=0;
        for (        int slot : accessibleSlots) {
          ItemStack stackInSlot=inv.getStackInSlot(slot);
          if (stackInSlot != null && WidgetFuzzySetting.areStacksEqual(stackInSlot,inventory[i],fuzzySetting) && IOHelper.canInsertItemToInventory(inv,inventory[i],slot,getFacingDirection().ordinal())) {
            supplyingInvCount+=stackInSlot.stackSize;
          }
        }
        if (supplyingInvCount < outputFilterItems)         return false;
      }
    }
    return !everythingNull;
  }
  return false;
}","/** 
 * Returns true if the supplying inventory has the items stated in the output filter.
 * @return
 */
private boolean isSatisfied(){
  IInventory inv=IOHelper.getInventoryForTE(getTileCache()[getOutputDirection().ordinal()].getTileEntity());
  if (inv != null) {
    int[] accessibleSlots;
    if (inv instanceof ISidedInventory) {
      accessibleSlots=((ISidedInventory)inv).getAccessibleSlotsFromSide(getFacingDirection().ordinal());
    }
 else {
      accessibleSlots=new int[inv.getSizeInventory()];
      for (int i=0; i < accessibleSlots.length; i++)       accessibleSlots[i]=i;
    }
    boolean everythingNull=true;
    for (int i=18; i < 27; i++) {
      if (inventory[i] != null) {
        everythingNull=false;
        int outputFilterItems=getItemsInSection(inventory[i],EnumSection.OUTPUT_FILTER);
        int supplyingInvCount=0;
        for (        int slot : accessibleSlots) {
          ItemStack stackInSlot=inv.getStackInSlot(slot);
          if (stackInSlot != null && ItemStackHelper.areStacksEqual(stackInSlot,inventory[i],fuzzySetting) && IOHelper.canInsertItemToInventory(inv,inventory[i],slot,getFacingDirection().ordinal())) {
            supplyingInvCount+=stackInSlot.stackSize;
          }
        }
        if (supplyingInvCount < outputFilterItems)         return false;
      }
    }
    return !everythingNull;
  }
  return false;
}",0.7659264652348016
169518,"private boolean tryProcessItem(ItemStack stack,boolean simulate){
switch (sortMode) {
case ANYSTACK_SEQUENTIAL:
    break;
case ALLSTACK_SEQUENTIAL:
  break;
case RANDOM_ALLSTACKS:
break;
case ANY_ITEM:
case ANY_ITEM_DEFAULT:
for (int i=0; i < inventory.length; i++) {
ItemStack filter=inventory[i];
if (filter != null && WidgetFuzzySetting.areStacksEqual(filter,stack,fuzzySettings[i % 8]) && stack.stackSize >= filter.stackSize) {
  if (!simulate) {
    addItemToOutputBuffer(filter.copy(),colors[i % 8]);
    stack.stackSize-=filter.stackSize;
  }
  return true;
}
}
if (sortMode == SortMode.ANY_ITEM_DEFAULT) {
if (!simulate) {
addItemToOutputBuffer(stack.copy(),colors[8]);
stack.stackSize=0;
}
return true;
}
break;
case ANY_STACK:
case ANY_STACK_DEFAULT:
for (int i=0; i < inventory.length; i++) {
ItemStack filter=inventory[i];
if (filter != null && WidgetFuzzySetting.areStacksEqual(filter,stack,fuzzySettings[i % 8])) {
if (!simulate) {
addItemToOutputBuffer(stack.copy(),colors[i % 8]);
stack.stackSize=0;
}
return true;
}
}
if (sortMode == SortMode.ANY_STACK_DEFAULT) {
if (!simulate) {
addItemToOutputBuffer(stack.copy(),colors[8]);
stack.stackSize=0;
}
return true;
}
break;
}
return false;
}","private boolean tryProcessItem(ItemStack stack,boolean simulate){
switch (sortMode) {
case ANYSTACK_SEQUENTIAL:
    break;
case ALLSTACK_SEQUENTIAL:
  break;
case RANDOM_ALLSTACKS:
break;
case ANY_ITEM:
case ANY_ITEM_DEFAULT:
for (int i=0; i < inventory.length; i++) {
ItemStack filter=inventory[i];
if (filter != null && ItemStackHelper.areStacksEqual(filter,stack,fuzzySettings[i % 8]) && stack.stackSize >= filter.stackSize) {
  if (!simulate) {
    addItemToOutputBuffer(filter.copy(),colors[i % 8]);
    stack.stackSize-=filter.stackSize;
  }
  return true;
}
}
if (sortMode == SortMode.ANY_ITEM_DEFAULT) {
if (!simulate) {
addItemToOutputBuffer(stack.copy(),colors[8]);
stack.stackSize=0;
}
return true;
}
break;
case ANY_STACK:
case ANY_STACK_DEFAULT:
for (int i=0; i < inventory.length; i++) {
ItemStack filter=inventory[i];
if (filter != null && ItemStackHelper.areStacksEqual(filter,stack,fuzzySettings[i % 8])) {
if (!simulate) {
addItemToOutputBuffer(stack.copy(),colors[i % 8]);
stack.stackSize=0;
}
return true;
}
}
if (sortMode == SortMode.ANY_STACK_DEFAULT) {
if (!simulate) {
addItemToOutputBuffer(stack.copy(),colors[8]);
stack.stackSize=0;
}
return true;
}
break;
}
return false;
}",0.972568578553616
169519,"private boolean matchAndProcessColumn(IInventory inputInventory,int[] accessibleSlots,int column){
  List<ItemStack> requirements=new ArrayList<ItemStack>();
  for (int i=0; i < 5; i++) {
    ItemStack filterStack=inventory[column + 8 * i];
    if (filterStack != null) {
      boolean duplicate=false;
      for (      ItemStack requirement : requirements) {
        if (WidgetFuzzySetting.areStacksEqual(requirement,filterStack,fuzzySettings[column])) {
          requirement.stackSize+=filterStack.stackSize;
          duplicate=true;
          break;
        }
      }
      if (!duplicate)       requirements.add(filterStack.copy());
    }
  }
  if (requirements.size() == 0)   return false;
  ItemStack[] copy=new ItemStack[requirements.size()];
  for (int i=0; i < copy.length; i++)   copy[i]=requirements.get(i).copy();
  Iterator<ItemStack> iterator=requirements.iterator();
  while (iterator.hasNext()) {
    ItemStack stack=iterator.next();
    for (    int slot : accessibleSlots) {
      ItemStack invStack=inputInventory.getStackInSlot(slot);
      if (invStack != null && WidgetFuzzySetting.areStacksEqual(invStack,stack,fuzzySettings[column])) {
        stack.stackSize-=invStack.stackSize;
        if (stack.stackSize <= 0) {
          iterator.remove();
          break;
        }
      }
    }
  }
  if (requirements.isEmpty()) {
    for (    ItemStack stack : copy) {
      for (      int slot : accessibleSlots) {
        if (stack.stackSize > 0) {
          ItemStack invStack=inputInventory.getStackInSlot(slot);
          if (invStack != null && WidgetFuzzySetting.areStacksEqual(invStack,stack,fuzzySettings[column])) {
            int substracted=Math.min(stack.stackSize,invStack.stackSize);
            stack.stackSize-=substracted;
            invStack.stackSize-=substracted;
            if (invStack.stackSize <= 0) {
              inputInventory.setInventorySlotContents(slot,null);
            }
            ItemStack bufferStack=invStack.copy();
            bufferStack.stackSize=substracted;
            addItemToOutputBuffer(bufferStack,colors[column]);
          }
        }
      }
    }
    inputInventory.markDirty();
    return true;
  }
 else {
    return false;
  }
}","private boolean matchAndProcessColumn(IInventory inputInventory,int[] accessibleSlots,int column){
  List<ItemStack> requirements=new ArrayList<ItemStack>();
  for (int i=0; i < 5; i++) {
    ItemStack filterStack=inventory[column + 8 * i];
    if (filterStack != null) {
      boolean duplicate=false;
      for (      ItemStack requirement : requirements) {
        if (ItemStackHelper.areStacksEqual(requirement,filterStack,fuzzySettings[column])) {
          requirement.stackSize+=filterStack.stackSize;
          duplicate=true;
          break;
        }
      }
      if (!duplicate)       requirements.add(filterStack.copy());
    }
  }
  if (requirements.size() == 0)   return false;
  ItemStack[] copy=new ItemStack[requirements.size()];
  for (int i=0; i < copy.length; i++)   copy[i]=requirements.get(i).copy();
  Iterator<ItemStack> iterator=requirements.iterator();
  while (iterator.hasNext()) {
    ItemStack stack=iterator.next();
    for (    int slot : accessibleSlots) {
      ItemStack invStack=inputInventory.getStackInSlot(slot);
      if (invStack != null && ItemStackHelper.areStacksEqual(invStack,stack,fuzzySettings[column])) {
        stack.stackSize-=invStack.stackSize;
        if (stack.stackSize <= 0) {
          iterator.remove();
          break;
        }
      }
    }
  }
  if (requirements.isEmpty()) {
    for (    ItemStack stack : copy) {
      for (      int slot : accessibleSlots) {
        if (stack.stackSize > 0) {
          ItemStack invStack=inputInventory.getStackInSlot(slot);
          if (invStack != null && ItemStackHelper.areStacksEqual(invStack,stack,fuzzySettings[column])) {
            int substracted=Math.min(stack.stackSize,invStack.stackSize);
            stack.stackSize-=substracted;
            invStack.stackSize-=substracted;
            if (invStack.stackSize <= 0) {
              inputInventory.setInventorySlotContents(slot,null);
            }
            ItemStack bufferStack=invStack.copy();
            bufferStack.stackSize=substracted;
            addItemToOutputBuffer(bufferStack,colors[column]);
          }
        }
      }
    }
    inputInventory.markDirty();
    return true;
  }
 else {
    return false;
  }
}",0.3459532985717524
169520,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  event.getModMetadata().version=Refs.fullVersionString();
  log=event.getModLog();
  config=new Configuration(event.getSuggestedConfigurationFile());
  BPApi.init(new BluePowerAPI());
  CustomTabs.init();
  Config.syncConfig(config);
  BPBlocks.init();
  BPItems.init();
  TileEntities.init();
  OreDictionarySetup.init();
  GameRegistry.registerWorldGenerator(new WorldGenerationHandler(),0);
  BPEnchantments.init();
  CompatibilityUtils.preInit(event);
  FMLCommonHandler.instance().bus().register(new Config());
  BPEventHandler eventHandler=new BPEventHandler();
  MinecraftForge.EVENT_BUS.register(eventHandler);
  FMLCommonHandler.instance().bus().register(eventHandler);
  PartRegister.registerParts();
  BPApi.getInstance().getBluestoneApi();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  event.getModMetadata().version=Refs.fullVersionString();
  log=event.getModLog();
  config=new Configuration(event.getSuggestedConfigurationFile());
  BPApi.init(new BluePowerAPI());
  Config.syncConfig(config);
  BPBlocks.init();
  BPItems.init();
  TileEntities.init();
  OreDictionarySetup.init();
  GameRegistry.registerWorldGenerator(new WorldGenerationHandler(),0);
  BPEnchantments.init();
  CompatibilityUtils.preInit(event);
  FMLCommonHandler.instance().bus().register(new Config());
  BPEventHandler eventHandler=new BPEventHandler();
  MinecraftForge.EVENT_BUS.register(eventHandler);
  FMLCommonHandler.instance().bus().register(eventHandler);
  PartRegister.registerParts();
  BPApi.getInstance().getBluestoneApi();
}",0.9870609981515712
169521,"@Override public boolean onItemUse(ItemStack par1ItemStack,EntityPlayer par2EntityPlayer,World par3World,int posX,int posY,int posZ,int par7,float par8,float par9,float par10){
  if (par2EntityPlayer.isSneaking()) {
    return false;
  }
  IInventory seedBagInventory=InventoryItem.getItemInventory(par2EntityPlayer,par2EntityPlayer.getCurrentEquippedItem(),""String_Node_Str"",9);
  seedBagInventory.openInventory();
  ItemStack seed=getSeedType(par1ItemStack);
  if (seed != null && seed.getItem() instanceof IPlantable) {
    IPlantable plant=(IPlantable)seed.getItem();
    for (int modX=-2; modX < 3; modX++) {
      for (int modZ=-2; modZ < 3; modZ++) {
        Block b=par3World.getBlock(posX + modX,posY,posZ + modZ);
        if (b.canSustainPlant(par3World,posX,posY,posZ,ForgeDirection.UP,plant) && par3World.isAirBlock(posX + modX,posY + 1,posZ + modZ)) {
          for (int i=0; i < seedBagInventory.getSizeInventory(); i++) {
            ItemStack is=seedBagInventory.getStackInSlot(i);
            if (is != null) {
              seedBagInventory.decrStackSize(i,1);
              par3World.setBlock(posX + modX,posY + 1,posZ + modZ,plant.getPlant(par3World,posX + modX,posY + 1,posZ + modZ),plant.getPlantMetadata(par3World,posX + modX,posY + 1,modZ + modZ),0x3);
              break;
            }
          }
        }
      }
    }
    return true;
  }
  seedBagInventory.closeInventory();
  return false;
}","@Override public boolean onItemUse(ItemStack par1ItemStack,EntityPlayer par2EntityPlayer,World par3World,int posX,int posY,int posZ,int par7,float par8,float par9,float par10){
  if (par2EntityPlayer.isSneaking()) {
    return false;
  }
  IInventory seedBagInventory=InventoryItem.getItemInventory(par2EntityPlayer,par2EntityPlayer.getCurrentEquippedItem(),""String_Node_Str"",9);
  seedBagInventory.openInventory();
  ItemStack seed=getSeedType(par1ItemStack);
  if (seed != null && seed.getItem() instanceof IPlantable) {
    IPlantable plant=(IPlantable)seed.getItem();
    for (int modX=-2; modX < 3; modX++) {
      for (int modZ=-2; modZ < 3; modZ++) {
        Block b=par3World.getBlock(posX + modX,posY,posZ + modZ);
        if (b.canSustainPlant(par3World,posX,posY,posZ,ForgeDirection.UP,plant) && par3World.isAirBlock(posX + modX,posY + 1,posZ + modZ)) {
          for (int i=0; i < seedBagInventory.getSizeInventory(); i++) {
            ItemStack is=seedBagInventory.getStackInSlot(i);
            if (is != null) {
              Item item=is.getItem();
              item.onItemUse(is,par2EntityPlayer,par3World,posX + modX,posY,posZ + modZ,par7,par8 + modX,par9,par10 + modZ);
              seedBagInventory.decrStackSize(i,0);
              break;
            }
          }
        }
      }
    }
    return true;
  }
  seedBagInventory.closeInventory();
  return false;
}",0.8573461401636429
169522,"/** 
 * Callback for when the crafting matrix is changed.
 */
@Override public void onCraftMatrixChanged(IInventory p_75130_1_){
  if (craftingGrid != null)   projectTable.craftResult.setInventorySlotContents(0,CraftingManager.getInstance().findMatchingRecipe(craftingGrid,projectTable.getWorldObj()));
}","/** 
 * Callback for when the crafting matrix is changed.
 */
@Override public void onCraftMatrixChanged(IInventory p_75130_1_){
  if (craftingGrid != null)   craftResult.setInventorySlotContents(0,CraftingManager.getInstance().findMatchingRecipe(craftingGrid,projectTable.getWorldObj()));
}",0.9781512605042016
169523,"public ContainerProjectTable(InventoryPlayer invPlayer,TileProjectTable projectTable){
  this.projectTable=projectTable;
  craftingGrid=projectTable.getCraftingGrid(this);
  for (int i=0; i < 3; ++i) {
    for (int j=0; j < 3; ++j) {
      addSlotToContainer(new Slot(craftingGrid,j + i * 3,34 + j * 18,16 + i * 18));
    }
  }
  addSlotToContainer(new SlotProjectTableCrafting(projectTable,invPlayer.player,craftingGrid,projectTable.craftResult,0,127,34));
  for (int i=0; i < 2; ++i) {
    for (int j=0; j < 9; ++j) {
      addSlotToContainer(new Slot(projectTable,j + i * 9,8 + j * 18,79 + i * 18));
    }
  }
  bindPlayerInventory(invPlayer);
}","public ContainerProjectTable(InventoryPlayer invPlayer,TileProjectTable projectTable){
  this.projectTable=projectTable;
  craftingGrid=projectTable.getCraftingGrid(this);
  for (int i=0; i < 3; ++i) {
    for (int j=0; j < 3; ++j) {
      addSlotToContainer(new Slot(craftingGrid,j + i * 3,34 + j * 18,16 + i * 18));
    }
  }
  addSlotToContainer(new SlotProjectTableCrafting(projectTable,invPlayer.player,craftingGrid,craftResult,0,127,34));
  for (int i=0; i < 2; ++i) {
    for (int j=0; j < 9; ++j) {
      addSlotToContainer(new Slot(projectTable,j + i * 9,8 + j * 18,79 + i * 18));
    }
  }
  bindPlayerInventory(invPlayer);
}",0.989867498051442
169524,"@SideOnly(Side.CLIENT) public void renderBox(int minx,int miny,int minz,int maxx,int maxy,int maxz);","@SideOnly(Side.CLIENT) public void renderBox(int minx,int miny,int minz,int maxx,int maxy,int maxz,int textureSize);",0.925925925925926
169525,"@Override public final int getWeakOutput(ForgeDirection side){
  RedstoneConnection con=getConnection(side);
  if (con == null)   return 0;
  ForgeDirection face=ForgeDirection.getOrientation(getFace()).getOpposite();
  int p=RedstoneHelper.setOutput(getWorld(),getX(),getY(),getZ(),side,face,con.getPower());
  return con.isOutput() ? p : 0;
}","@Override public final int getWeakOutput(ForgeDirection side){
  RedstoneConnection con=getConnection(side);
  if (con == null)   return 0;
  ForgeDirection face=ForgeDirection.getOrientation(getFace()).getOpposite();
  int p=RedstoneHelper.setOutput(getWorld(),getX(),getY(),getZ(),side,face,con.getPower());
  return con.isOutput() ? p : 5;
}",0.997093023255814
169526,"@Override public final int getStrongOutput(ForgeDirection side){
  return getWeakOutput(side);
}","@Override public final int getStrongOutput(ForgeDirection side){
  return 0;
}",0.8850574712643678
169527,"@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  if (pass == 0) {
    BlockLamp bLamp=(BlockLamp)block;
    int redMask=0xFF0000, greenMask=0xFF00, blueMask=0xFF;
    int r=(bLamp.getColor() & redMask) >> 16;
    int g=(bLamp.getColor() & greenMask) >> 8;
    int b=(bLamp.getColor() & blueMask);
    Vector3Cube vector=new Vector3Cube(0.0,0.0,0.0,1.0,1.0,1.0);
    Tessellator t=Tessellator.instance;
    t.addTranslation(x,y,z);
    t.setColorOpaque(r,g,b);
    IIcon iconToUse;
    int power=((TileLamp)world.getTileEntity(x,y,z)).getPower();
    OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,240f,240f);
    if (bLamp.isInverted()) {
      power=15 - power;
    }
    if (power == 0) {
      iconToUse=IconSupplier.lampOn;
    }
 else {
      iconToUse=IconSupplier.lampOff;
    }
    double minU=iconToUse.getMinU();
    double maxU=iconToUse.getMaxU();
    double minV=iconToUse.getMinV();
    double maxV=iconToUse.getMaxV();
    t.setNormal(0,-1,0);
    t.addVertexWithUV(vector.getMaxX(),vector.getMinY(),vector.getMaxZ(),minU,maxV);
    t.addVertexWithUV(vector.getMinX(),vector.getMinY(),vector.getMaxZ(),minU,minV);
    t.addVertexWithUV(vector.getMinX(),vector.getMinY(),vector.getMinZ(),maxU,minV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMinY(),vector.getMinZ(),maxU,maxV);
    t.setNormal(0,1,0);
    t.addVertexWithUV(vector.getMinX(),vector.getMaxY(),vector.getMaxZ(),minU,maxV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMaxY(),vector.getMaxZ(),minU,minV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMaxY(),vector.getMinZ(),maxU,minV);
    t.addVertexWithUV(vector.getMinX(),vector.getMaxY(),vector.getMinZ(),maxU,maxV);
    t.setNormal(-1,0,0);
    t.addVertexWithUV(vector.getMinX(),vector.getMinY(),vector.getMaxZ(),minU,maxV);
    t.addVertexWithUV(vector.getMinX(),vector.getMaxY(),vector.getMaxZ(),minU,minV);
    t.addVertexWithUV(vector.getMinX(),vector.getMaxY(),vector.getMinZ(),maxU,minV);
    t.addVertexWithUV(vector.getMinX(),vector.getMinY(),vector.getMinZ(),maxU,maxV);
    t.setNormal(1,0,0);
    t.addVertexWithUV(vector.getMaxX(),vector.getMinY(),vector.getMinZ(),minU,maxV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMaxY(),vector.getMinZ(),minU,minV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMaxY(),vector.getMaxZ(),maxU,minV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMinY(),vector.getMaxZ(),maxU,maxV);
    t.setNormal(0,0,-1);
    t.addVertexWithUV(vector.getMinX(),vector.getMinY(),vector.getMinZ(),minU,maxV);
    t.addVertexWithUV(vector.getMinX(),vector.getMaxY(),vector.getMinZ(),minU,minV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMaxY(),vector.getMinZ(),maxU,minV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMinY(),vector.getMinZ(),maxU,maxV);
    t.setNormal(0,0,1);
    t.addVertexWithUV(vector.getMinX(),vector.getMinY(),vector.getMaxZ(),minU,maxV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMinY(),vector.getMaxZ(),maxU,maxV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMaxY(),vector.getMaxZ(),maxU,minV);
    t.addVertexWithUV(vector.getMinX(),vector.getMaxY(),vector.getMaxZ(),minU,minV);
    t.addTranslation(-x,-y,-z);
    return true;
  }
  return false;
}","@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  if (pass == 0) {
    BlockLamp bLamp=(BlockLamp)block;
    int redMask=0xFF0000, greenMask=0xFF00, blueMask=0xFF;
    int r=(bLamp.getColor() & redMask) >> 16;
    int g=(bLamp.getColor() & greenMask) >> 8;
    int b=(bLamp.getColor() & blueMask);
    Vector3Cube vector=new Vector3Cube(0.0,0.0,0.0,1.0,1.0,1.0);
    Tessellator t=Tessellator.instance;
    t.addTranslation(x,y,z);
    t.setColorOpaque(r,g,b);
    IIcon iconToUse;
    int power=((TileLamp)world.getTileEntity(x,y,z)).getPower();
    if (bLamp.isInverted()) {
      power=15 - power;
    }
    if (power == 0) {
      iconToUse=IconSupplier.lampOn;
    }
 else {
      iconToUse=IconSupplier.lampOff;
    }
    double minU=iconToUse.getMinU();
    double maxU=iconToUse.getMaxU();
    double minV=iconToUse.getMinV();
    double maxV=iconToUse.getMaxV();
    t.setNormal(0,-1,0);
    t.addVertexWithUV(vector.getMaxX(),vector.getMinY(),vector.getMaxZ(),minU,maxV);
    t.addVertexWithUV(vector.getMinX(),vector.getMinY(),vector.getMaxZ(),minU,minV);
    t.addVertexWithUV(vector.getMinX(),vector.getMinY(),vector.getMinZ(),maxU,minV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMinY(),vector.getMinZ(),maxU,maxV);
    t.setNormal(0,1,0);
    t.addVertexWithUV(vector.getMinX(),vector.getMaxY(),vector.getMaxZ(),minU,maxV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMaxY(),vector.getMaxZ(),minU,minV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMaxY(),vector.getMinZ(),maxU,minV);
    t.addVertexWithUV(vector.getMinX(),vector.getMaxY(),vector.getMinZ(),maxU,maxV);
    t.setNormal(-1,0,0);
    t.addVertexWithUV(vector.getMinX(),vector.getMinY(),vector.getMaxZ(),minU,maxV);
    t.addVertexWithUV(vector.getMinX(),vector.getMaxY(),vector.getMaxZ(),minU,minV);
    t.addVertexWithUV(vector.getMinX(),vector.getMaxY(),vector.getMinZ(),maxU,minV);
    t.addVertexWithUV(vector.getMinX(),vector.getMinY(),vector.getMinZ(),maxU,maxV);
    t.setNormal(1,0,0);
    t.addVertexWithUV(vector.getMaxX(),vector.getMinY(),vector.getMinZ(),minU,maxV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMaxY(),vector.getMinZ(),minU,minV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMaxY(),vector.getMaxZ(),maxU,minV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMinY(),vector.getMaxZ(),maxU,maxV);
    t.setNormal(0,0,-1);
    t.addVertexWithUV(vector.getMinX(),vector.getMinY(),vector.getMinZ(),minU,maxV);
    t.addVertexWithUV(vector.getMinX(),vector.getMaxY(),vector.getMinZ(),minU,minV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMaxY(),vector.getMinZ(),maxU,minV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMinY(),vector.getMinZ(),maxU,maxV);
    t.setNormal(0,0,1);
    t.addVertexWithUV(vector.getMinX(),vector.getMinY(),vector.getMaxZ(),minU,maxV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMinY(),vector.getMaxZ(),maxU,maxV);
    t.addVertexWithUV(vector.getMaxX(),vector.getMaxY(),vector.getMaxZ(),maxU,minV);
    t.addVertexWithUV(vector.getMinX(),vector.getMaxY(),vector.getMaxZ(),minU,minV);
    t.addTranslation(-x,-y,-z);
    return true;
  }
  return false;
}",0.987228804431451
169528,"/** 
 * TESR 
 */
@Override public void renderTileEntityAt(TileEntity te,double x,double y,double z,float f){
  if (pass != 0) {
    OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,240f,240f);
    int power=((TileLamp)te).getPower();
    BlockLamp bLamp=(BlockLamp)te.getBlockType();
    int redMask=0xFF0000, greenMask=0xFF00, blueMask=0xFF;
    int r=(bLamp.getColor() & redMask) >> 16;
    int g=(bLamp.getColor() & greenMask) >> 8;
    int b=(bLamp.getColor() & blueMask);
    if (bLamp.isInverted()) {
      power=15 - power;
    }
    Vector3Cube vector=new Vector3Cube(0.0,0.0,0.0,1.0,1.0,1.0);
    GL11.glTranslated(x,y,z);
    GL11.glEnable(GL11.GL_BLEND);
    GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE);
    GL11.glDisable(GL11.GL_TEXTURE_2D);
    GL11.glDisable(GL11.GL_LIGHTING);
    GL11.glDepthMask(false);
    GL11.glBegin(GL11.GL_QUADS);
    double powerDivision=(power / 15D);
    RenderHelper.drawColoredCube(vector.clone().expand(0.8 / 16D),r / 256D,g / 256D,b / 256D,powerDivision * 0.625D);
    GL11.glEnd();
    GL11.glDepthMask(true);
    GL11.glEnable(GL11.GL_CULL_FACE);
    GL11.glEnable(GL11.GL_LIGHTING);
    GL11.glEnable(GL11.GL_TEXTURE_2D);
    GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
    GL11.glDisable(GL11.GL_BLEND);
    GL11.glTranslated(-x,-y,-z);
  }
}","/** 
 * TESR 
 */
@Override public void renderTileEntityAt(TileEntity te,double x,double y,double z,float f){
  if (pass != 0) {
    int power=((TileLamp)te).getPower();
    BlockLamp bLamp=(BlockLamp)te.getBlockType();
    int redMask=0xFF0000, greenMask=0xFF00, blueMask=0xFF;
    int r=(bLamp.getColor() & redMask) >> 16;
    int g=(bLamp.getColor() & greenMask) >> 8;
    int b=(bLamp.getColor() & blueMask);
    if (bLamp.isInverted()) {
      power=15 - power;
    }
    Vector3Cube vector=new Vector3Cube(0.0,0.0,0.0,1.0,1.0,1.0);
    GL11.glTranslated(x,y,z);
    GL11.glEnable(GL11.GL_BLEND);
    GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE);
    GL11.glDisable(GL11.GL_TEXTURE_2D);
    GL11.glDisable(GL11.GL_LIGHTING);
    GL11.glDepthMask(false);
    GL11.glBegin(GL11.GL_QUADS);
    double powerDivision=(power / 15D);
    RenderHelper.drawColoredCube(vector.clone().expand(0.8 / 16D),r / 256D,g / 256D,b / 256D,powerDivision * 0.625D);
    GL11.glEnd();
    GL11.glDepthMask(true);
    GL11.glEnable(GL11.GL_CULL_FACE);
    GL11.glEnable(GL11.GL_LIGHTING);
    GL11.glEnable(GL11.GL_TEXTURE_2D);
    GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
    GL11.glDisable(GL11.GL_BLEND);
    GL11.glTranslated(-x,-y,-z);
  }
}",0.967990744311608
169529,"@Override public void addOcclusionBoxes(List<AxisAlignedBB> boxes){
}","@Override public void addOcclusionBoxes(List<AxisAlignedBB> boxes){
  boxes.add(OCCLUSION_BOX.clone().toAABB());
}",0.7540983606557377
169530,"/** 
 * Be sure to set up the fake player's hotbar with the right clicked items. starting with hotbar slot 0.
 * @param player
 * @param useItems this method will set the current selected slot of the fake player to 0, and move on to the next slot useItems - 1 times.So to use the first slot only, pass 1, to use the full hotbar, 9.
 * @return
 */
protected boolean rightClick(FakePlayer player,int useItems){
  if (useItems > 9)   throw new IllegalArgumentException(""String_Node_Str"" + useItems + ""String_Node_Str"");
  ForgeDirection faceDir=getFacingDirection();
  int dx=faceDir.offsetX;
  int dy=faceDir.offsetY;
  int dz=faceDir.offsetZ;
  int x=xCoord + dx;
  int y=yCoord + dy;
  int z=zCoord + dz;
  player.setPosition(x,y,z);
  player.rotationPitch=faceDir.offsetY * -90;
switch (faceDir) {
case NORTH:
    player.rotationYaw=180;
  break;
case SOUTH:
player.rotationYaw=0;
break;
case WEST:
player.rotationYaw=90;
break;
case EAST:
player.rotationYaw=-90;
}
try {
PlayerInteractEvent event=ForgeEventFactory.onPlayerInteract(player,Action.RIGHT_CLICK_AIR,x,y,z,faceDir.ordinal(),worldObj);
if (event.isCanceled()) return false;
Block block=worldObj.getBlock(x,y,z);
List<EntityLivingBase> detectedEntities=worldObj.getEntitiesWithinAABB(EntityLivingBase.class,AxisAlignedBB.getBoundingBox(x,y,z,x + 1,y + 1,z + 1));
Entity entity=detectedEntities.isEmpty() ? null : detectedEntities.get(worldObj.rand.nextInt(detectedEntities.size()));
if (entity != null) {
for (int i=0; i < useItems; i++) {
player.inventory.currentItem=i;
ItemStack stack=player.getCurrentEquippedItem();
if (canDeployItem(stack) && stack.getItem().itemInteractionForEntity(stack,player,(EntityLivingBase)entity)) return true;
if (entity instanceof EntityAnimal && ((EntityAnimal)entity).interact(player)) return true;
}
}
for (int i=0; i < useItems; i++) {
player.inventory.currentItem=i;
ItemStack stack=player.getCurrentEquippedItem();
if (canDeployItem(stack) && stack.getItem().onItemUseFirst(stack,player,worldObj,x,y,z,faceDir.ordinal(),dx,dy,dz)) return true;
}
for (int i=0; i < useItems; i++) {
player.inventory.currentItem=i;
if (!worldObj.isAirBlock(x,y,x) && block.onBlockActivated(worldObj,x,y,z,player,faceDir.ordinal(),dx,dy,dz)) return true;
}
for (int i=0; i < useItems; i++) {
player.inventory.currentItem=i;
ItemStack stack=player.getCurrentEquippedItem();
if (canDeployItem(stack) && stack.getItem().onItemUse(stack,player,worldObj,x,y,z,faceDir.ordinal(),dx,dy,dz)) return true;
}
for (int i=0; i < useItems; i++) {
player.inventory.currentItem=i;
ItemStack stack=player.getCurrentEquippedItem();
if (canDeployItem(stack)) {
ItemStack copy=stack.copy();
stack.getItem().onItemRightClick(stack,worldObj,player);
if (!copy.isItemEqual(stack)) return true;
}
}
return false;
}
 catch (Throwable e) {
BluePower.log.error(""String_Node_Str"");
e.printStackTrace();
return true;
}
}","/** 
 * Be sure to set up the fake player's hotbar with the right clicked items. starting with hotbar slot 0.
 * @param player
 * @param useItems this method will set the current selected slot of the fake player to 0, and move on to the next slot useItems - 1 times.So to use the first slot only, pass 1, to use the full hotbar, 9.
 * @return
 */
protected boolean rightClick(FakePlayer player,int useItems){
  if (useItems > 9)   throw new IllegalArgumentException(""String_Node_Str"" + useItems + ""String_Node_Str"");
  ForgeDirection faceDir=getFacingDirection();
  int dx=faceDir.offsetX;
  int dy=faceDir.offsetY;
  int dz=faceDir.offsetZ;
  int x=xCoord + dx;
  int y=yCoord + dy;
  int z=zCoord + dz;
  player.setPosition(x,y,z);
  player.rotationPitch=faceDir.offsetY * -90;
switch (faceDir) {
case NORTH:
    player.rotationYaw=180;
  break;
case SOUTH:
player.rotationYaw=0;
break;
case WEST:
player.rotationYaw=90;
break;
case EAST:
player.rotationYaw=-90;
}
try {
PlayerInteractEvent event=ForgeEventFactory.onPlayerInteract(player,Action.RIGHT_CLICK_AIR,x,y,z,faceDir.ordinal(),worldObj);
if (event.isCanceled()) return false;
Block block=worldObj.getBlock(x,y,z);
List<EntityLivingBase> detectedEntities=worldObj.getEntitiesWithinAABB(EntityLivingBase.class,AxisAlignedBB.getBoundingBox(x,y,z,x + 1,y + 1,z + 1));
Entity entity=detectedEntities.isEmpty() ? null : detectedEntities.get(worldObj.rand.nextInt(detectedEntities.size()));
if (entity != null) {
for (int i=0; i < useItems; i++) {
player.inventory.currentItem=i;
ItemStack stack=player.getCurrentEquippedItem();
if (canDeployItem(stack) && stack.getItem().itemInteractionForEntity(stack,player,(EntityLivingBase)entity)) return true;
if (entity instanceof EntityAnimal && ((EntityAnimal)entity).interact(player)) return true;
}
}
for (int i=0; i < useItems; i++) {
player.inventory.currentItem=i;
ItemStack stack=player.getCurrentEquippedItem();
if (canDeployItem(stack) && stack.getItem().onItemUseFirst(stack,player,worldObj,xCoord,yCoord,zCoord,faceDir.ordinal(),dx,dy,dz)) return true;
}
for (int i=0; i < useItems; i++) {
player.inventory.currentItem=i;
if (!worldObj.isAirBlock(x,y,x) && block.onBlockActivated(worldObj,x,y,z,player,faceDir.ordinal(),dx,dy,dz)) return true;
}
for (int i=0; i < useItems; i++) {
player.inventory.currentItem=i;
ItemStack stack=player.getCurrentEquippedItem();
if (canDeployItem(stack) && stack.getItem().onItemUse(stack,player,worldObj,xCoord,yCoord,zCoord,faceDir.ordinal(),dx,dy,dz)) return true;
}
for (int i=0; i < useItems; i++) {
player.inventory.currentItem=i;
ItemStack stack=player.getCurrentEquippedItem();
if (canDeployItem(stack)) {
ItemStack copy=stack.copy();
stack.getItem().onItemRightClick(stack,worldObj,player);
if (!copy.isItemEqual(stack)) return true;
}
}
return false;
}
 catch (Throwable e) {
BluePower.log.error(""String_Node_Str"");
e.printStackTrace();
return true;
}
}",0.993423329871928
169531,"@Override public final void renderItem(ItemRenderType type,ItemStack item,Object... data){
  GL11.glPushMatrix();
{
    if (type == ItemRenderType.INVENTORY) {
      GL11.glTranslated(0,0.5,0);
      GL11.glRotated(-12,-1,0,1);
    }
    renderTop();
    Minecraft.getMinecraft().renderEngine.bindTexture(new ResourceLocation(Refs.MODID + ""String_Node_Str""));
    GL11.glBegin(GL11.GL_QUADS);
    GL11.glNormal3d(0,-1,0);
    RenderHelper.addVertexWithTexture(0,0,0,0,0);
    RenderHelper.addVertexWithTexture(1,0,0,1,0);
    RenderHelper.addVertexWithTexture(1,0,1,1,1);
    RenderHelper.addVertexWithTexture(0,0,1,0,1);
    GL11.glEnd();
    Minecraft.getMinecraft().renderEngine.bindTexture(new ResourceLocation(Refs.MODID + ""String_Node_Str""));
    GL11.glBegin(GL11.GL_QUADS);
    GL11.glNormal3d(1,0,0);
    RenderHelper.addVertexWithTexture(1,0,0,0,0);
    RenderHelper.addVertexWithTexture(1,1D / 8D,0,1,0);
    RenderHelper.addVertexWithTexture(1,1D / 8D,1,1,1);
    RenderHelper.addVertexWithTexture(1,0,1,0,1);
    GL11.glNormal3d(-1,0,0);
    RenderHelper.addVertexWithTexture(0,0,0,0,0);
    RenderHelper.addVertexWithTexture(0,0,1,0,1);
    RenderHelper.addVertexWithTexture(0,1D / 8D,1,1,1);
    RenderHelper.addVertexWithTexture(0,1D / 8D,0,1,0);
    GL11.glNormal3d(0,0,-1);
    RenderHelper.addVertexWithTexture(0,0,0,0,0);
    RenderHelper.addVertexWithTexture(0,1D / 8D,0,1,0);
    RenderHelper.addVertexWithTexture(1,1D / 8D,0,1,1);
    RenderHelper.addVertexWithTexture(1,0,0,0,1);
    GL11.glNormal3d(0,0,1);
    RenderHelper.addVertexWithTexture(0,0,1,0,0);
    RenderHelper.addVertexWithTexture(1,0,1,0,1);
    RenderHelper.addVertexWithTexture(1,1D / 8D,1,1,1);
    RenderHelper.addVertexWithTexture(0,1D / 8D,1,1,0);
    GL11.glEnd();
  }
  GL11.glPopMatrix();
}","@Override public final void renderItem(ItemRenderType type,ItemStack item,Object... data){
  GL11.glPushMatrix();
{
    if (type == ItemRenderType.INVENTORY) {
      GL11.glTranslated(0,0.5,0);
      GL11.glRotated(-12,-1,0,1);
    }
    GL11.glEnable(GL11.GL_BLEND);
    renderTop();
    Minecraft.getMinecraft().renderEngine.bindTexture(new ResourceLocation(Refs.MODID + ""String_Node_Str""));
    GL11.glBegin(GL11.GL_QUADS);
    GL11.glNormal3d(0,-1,0);
    RenderHelper.addVertexWithTexture(0,0,0,0,0);
    RenderHelper.addVertexWithTexture(1,0,0,1,0);
    RenderHelper.addVertexWithTexture(1,0,1,1,1);
    RenderHelper.addVertexWithTexture(0,0,1,0,1);
    GL11.glEnd();
    Minecraft.getMinecraft().renderEngine.bindTexture(new ResourceLocation(Refs.MODID + ""String_Node_Str""));
    GL11.glBegin(GL11.GL_QUADS);
    GL11.glNormal3d(1,0,0);
    RenderHelper.addVertexWithTexture(1,0,0,0,0);
    RenderHelper.addVertexWithTexture(1,1D / 8D,0,1,0);
    RenderHelper.addVertexWithTexture(1,1D / 8D,1,1,1);
    RenderHelper.addVertexWithTexture(1,0,1,0,1);
    GL11.glNormal3d(-1,0,0);
    RenderHelper.addVertexWithTexture(0,0,0,0,0);
    RenderHelper.addVertexWithTexture(0,0,1,0,1);
    RenderHelper.addVertexWithTexture(0,1D / 8D,1,1,1);
    RenderHelper.addVertexWithTexture(0,1D / 8D,0,1,0);
    GL11.glNormal3d(0,0,-1);
    RenderHelper.addVertexWithTexture(0,0,0,0,0);
    RenderHelper.addVertexWithTexture(0,1D / 8D,0,1,0);
    RenderHelper.addVertexWithTexture(1,1D / 8D,0,1,1);
    RenderHelper.addVertexWithTexture(1,0,0,0,1);
    GL11.glNormal3d(0,0,1);
    RenderHelper.addVertexWithTexture(0,0,1,0,0);
    RenderHelper.addVertexWithTexture(1,0,1,0,1);
    RenderHelper.addVertexWithTexture(1,1D / 8D,1,1,1);
    RenderHelper.addVertexWithTexture(0,1D / 8D,1,1,0);
    GL11.glEnd();
    GL11.glDisable(GL11.GL_BLEND);
  }
  GL11.glPopMatrix();
}",0.981080340005484
169532,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int par6,float par7,float par8,float par9){
  if (player.isSneaking()) {
    return false;
  }
  TileEntity entity=world.getTileEntity(x,y,z);
  if (entity == null || !(entity instanceof TileBase)) {
    return false;
  }
  if (getGuiID() != GuiIDs.INVALID) {
    player.openGui(BluePower.instance,getGuiID().ordinal(),world,x,y,z);
    return true;
  }
  return false;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int par6,float par7,float par8,float par9){
  if (player.isSneaking()) {
    if (player.getHeldItem() != null) {
      if (player.getHeldItem().getItem() == BPItems.screwdriver) {
        return false;
      }
    }
  }
  if (player.isSneaking()) {
    return false;
  }
  TileEntity entity=world.getTileEntity(x,y,z);
  if (entity == null || !(entity instanceof TileBase)) {
    return false;
  }
  if (getGuiID() != GuiIDs.INVALID) {
    player.openGui(BluePower.instance,getGuiID().ordinal(),world,x,y,z);
    return true;
  }
  return false;
}",0.8402903811252269
169533,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  Block block=world.getBlock(x,y,z);
  if (block == BPBlocks.multipart) {
    IMultipartCompat compat=(IMultipartCompat)CompatibilityUtils.getModule(Dependencies.FMP);
    BPPart p=compat.getClickedPart(new Vector3(x,y,z,world),new Vector3(hitX,hitY,hitZ),player,null);
    if (p != null && player.isSneaking()) {
      p.onActivated(player,new MovingObjectPosition(x,y,z,side,Vec3.createVectorHelper(x + hitX,y + hitY,z + hitZ)),stack);
    }
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te != null && te instanceof IRedBusWindow && player.isSneaking() && !(te instanceof TileCPU)) {
    player.openGui(BluePower.instance,GuiIDs.REDBUS_ID.ordinal(),world,x,y,z);
  }
  block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
  if (!player.capabilities.isCreativeMode) {
    stack.setItemDamage(stack.getItemDamage() + 1);
  }
  return false;
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  Block block=world.getBlock(x,y,z);
  if (block == BPBlocks.multipart) {
    IMultipartCompat compat=(IMultipartCompat)CompatibilityUtils.getModule(Dependencies.FMP);
    BPPart p=compat.getClickedPart(new Vector3(x,y,z,world),new Vector3(hitX,hitY,hitZ),player,null);
    if (p != null && player.isSneaking()) {
      p.onActivated(player,new MovingObjectPosition(x,y,z,side,Vec3.createVectorHelper(x + hitX,y + hitY,z + hitZ)),stack);
    }
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te != null && te instanceof IRedBusWindow && player.isSneaking() && !(te instanceof TileCPU)) {
    player.openGui(BluePower.instance,GuiIDs.REDBUS_ID.ordinal(),world,x,y,z);
  }
  if (block instanceof BlockContainerBase) {
    if (((BlockContainerBase)block).getGuiID() != GuiIDs.INVALID) {
      if (player.isSneaking()) {
        block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
        if (!player.capabilities.isCreativeMode) {
          stack.setItemDamage(stack.getItemDamage() + 1);
        }
      }
    }
 else {
      block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
      if (!player.capabilities.isCreativeMode) {
        stack.setItemDamage(stack.getItemDamage() + 1);
      }
    }
  }
 else {
    block.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side));
    if (!player.capabilities.isCreativeMode) {
      stack.setItemDamage(stack.getItemDamage() + 1);
    }
  }
  return false;
}",0.7755102040816326
169534,"public static ItemStack getItemForPart(String id,int stacksize){
  if (parts.containsKey(id)) {
    ItemStack is=new ItemStack(BPItems.multipart);
    NBTTagCompound tag=new NBTTagCompound();
    tag.setString(""String_Node_Str"",id);
    is.setTagCompound(tag);
    is.stackSize=stacksize;
    return is;
  }
  return null;
}","public static ItemStack getItemForPart(String id,int stacksize){
  if (parts.containsKey(id)) {
    ItemStack is=new ItemStack(BPItems.multipart);
    NBTTagCompound tag=new NBTTagCompound();
    tag.setString(""String_Node_Str"",id);
    is.setTagCompound(tag);
    is.stackSize=stacksize;
    is.setItemDamage(getStackMetadata(is));
    return is;
  }
  return null;
}",0.9364161849710982
169535,"@Override public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer,int par2){
  ItemStack itemstack=null;
  Slot slot=(Slot)this.inventorySlots.get(par2);
  if (slot != null && slot.getHasStack()) {
    ItemStack itemstack1=slot.getStack();
    itemstack=itemstack1.copy();
    if (par2 < 27) {
      if (!this.mergeItemStack(itemstack1,27,63,true)) {
        return null;
      }
    }
 else     if (!this.mergeItemStack(itemstack1,0,27,false)) {
      return null;
    }
    if (itemstack1.stackSize == 0) {
      slot.putStack((ItemStack)null);
    }
 else {
      slot.onSlotChanged();
    }
    if (itemstack1.stackSize == itemstack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(par1EntityPlayer,itemstack1);
  }
  return itemstack;
}","@Override public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer,int par2){
  ItemStack itemstack=null;
  Slot slot=(Slot)inventorySlots.get(par2);
  if (slot != null && slot.getHasStack()) {
    ItemStack itemstack1=slot.getStack();
    itemstack=itemstack1.copy();
    if (par2 < 27) {
      if (!mergeItemStack(itemstack1,27,63,true)) {
        return null;
      }
    }
 else     if (!mergeItemStack(itemstack1,0,27,false)) {
      return null;
    }
    if (itemstack1.stackSize == 0) {
      slot.putStack((ItemStack)null);
    }
 else {
      slot.onSlotChanged();
    }
    if (itemstack1.stackSize == itemstack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(par1EntityPlayer,itemstack1);
  }
  return itemstack;
}",0.990125082290981
169536,"public ContainerCanvasBag(ItemStack bag,IInventory playerInventory,IInventory canvasBagInventory){
  this.bag=bag;
  int i=-1 * 18;
  canvasBagInventory.openInventory();
  for (int j=0; j < 3; ++j) {
    for (int k=0; k < 9; ++k) {
      this.addSlotToContainer(new SlotExclude(canvasBagInventory,k + j * 9,8 + k * 18,18 + j * 18,BPItems.canvas_bag));
    }
  }
  for (int j=0; j < 3; ++j) {
    for (int k=0; k < 9; ++k) {
      this.addSlotToContainer(new Slot(playerInventory,k + j * 9 + 9,8 + k * 18,103 + j * 18 + i));
    }
  }
  for (int j=0; j < 9; ++j) {
    if (playerInventory.getStackInSlot(j) == ((InventoryItem)canvasBagInventory).getItem()) {
      this.addSlotToContainer(new SlotLocked(playerInventory,j,8 + j * 18,161 + i));
    }
 else {
      this.addSlotToContainer(new Slot(playerInventory,j,8 + j * 18,161 + i));
    }
    this.addSlotToContainer(new Slot(playerInventory,j,8 + j * 18,161 + i));
  }
  this.canvasBagInventory=canvasBagInventory;
}","public ContainerCanvasBag(ItemStack bag,IInventory playerInventory,IInventory canvasBagInventory){
  this.bag=bag;
  int i=-1 * 18;
  canvasBagInventory.openInventory();
  for (int j=0; j < 3; ++j) {
    for (int k=0; k < 9; ++k) {
      addSlotToContainer(new SlotExclude(canvasBagInventory,k + j * 9,8 + k * 18,18 + j * 18,BPItems.canvas_bag));
    }
  }
  for (int j=0; j < 3; ++j) {
    for (int k=0; k < 9; ++k) {
      addSlotToContainer(new Slot(playerInventory,k + j * 9 + 9,8 + k * 18,103 + j * 18 + i));
    }
  }
  for (int j=0; j < 9; ++j) {
    if (playerInventory.getStackInSlot(j) == ((InventoryItem)canvasBagInventory).getItem()) {
      addSlotToContainer(new SlotLocked(playerInventory,j,8 + j * 18,161 + i));
    }
 else {
      addSlotToContainer(new Slot(playerInventory,j,8 + j * 18,161 + i));
    }
    addSlotToContainer(new Slot(playerInventory,j,8 + j * 18,161 + i));
  }
  this.canvasBagInventory=canvasBagInventory;
}",0.6892950391644909
169537,"@Override public boolean mergeItemStack(ItemStack par1ItemStack,int par2,int par3,boolean par4){
  boolean flag1=false;
  int k=par2;
  if (par4) {
    k=par3 - 1;
  }
  Slot slot;
  ItemStack itemstack1;
  if (par1ItemStack.isStackable()) {
    while (par1ItemStack.stackSize > 0 && (!par4 && k < par3 || par4 && k >= par2)) {
      slot=(Slot)this.inventorySlots.get(k);
      itemstack1=slot.getStack();
      if (itemstack1 != null && itemstack1.getItem() == par1ItemStack.getItem() && (!par1ItemStack.getHasSubtypes() || par1ItemStack.getItemDamage() == itemstack1.getItemDamage()) && ItemStack.areItemStackTagsEqual(par1ItemStack,itemstack1) && slot.isItemValid(par1ItemStack)) {
        int l=itemstack1.stackSize + par1ItemStack.stackSize;
        if (l <= par1ItemStack.getMaxStackSize()) {
          par1ItemStack.stackSize=0;
          itemstack1.stackSize=l;
          slot.onSlotChanged();
          flag1=true;
        }
 else         if (itemstack1.stackSize < par1ItemStack.getMaxStackSize()) {
          par1ItemStack.stackSize-=par1ItemStack.getMaxStackSize() - itemstack1.stackSize;
          itemstack1.stackSize=par1ItemStack.getMaxStackSize();
          slot.onSlotChanged();
          flag1=true;
        }
      }
      if (par4) {
        --k;
      }
 else {
        ++k;
      }
    }
  }
  if (par1ItemStack.stackSize > 0) {
    if (par4) {
      k=par3 - 1;
    }
 else {
      k=par2;
    }
    while (!par4 && k < par3 || par4 && k >= par2) {
      slot=(Slot)this.inventorySlots.get(k);
      itemstack1=slot.getStack();
      if (itemstack1 == null && slot.isItemValid(par1ItemStack)) {
        if (1 < par1ItemStack.stackSize) {
          ItemStack copy=par1ItemStack.copy();
          copy.stackSize=1;
          slot.putStack(copy);
          par1ItemStack.stackSize-=1;
          flag1=true;
          break;
        }
 else {
          slot.putStack(par1ItemStack.copy());
          slot.onSlotChanged();
          par1ItemStack.stackSize=0;
          flag1=true;
          break;
        }
      }
      if (par4) {
        --k;
      }
 else {
        ++k;
      }
    }
  }
  return flag1;
}","@Override public boolean mergeItemStack(ItemStack par1ItemStack,int par2,int par3,boolean par4){
  boolean flag1=false;
  int k=par2;
  if (par4) {
    k=par3 - 1;
  }
  Slot slot;
  ItemStack itemstack1;
  if (par1ItemStack.isStackable()) {
    while (par1ItemStack.stackSize > 0 && (!par4 && k < par3 || par4 && k >= par2)) {
      slot=(Slot)inventorySlots.get(k);
      itemstack1=slot.getStack();
      if (itemstack1 != null && itemstack1.getItem() == par1ItemStack.getItem() && (!par1ItemStack.getHasSubtypes() || par1ItemStack.getItemDamage() == itemstack1.getItemDamage()) && ItemStack.areItemStackTagsEqual(par1ItemStack,itemstack1) && slot.isItemValid(par1ItemStack)) {
        int l=itemstack1.stackSize + par1ItemStack.stackSize;
        if (l <= par1ItemStack.getMaxStackSize()) {
          par1ItemStack.stackSize=0;
          itemstack1.stackSize=l;
          slot.onSlotChanged();
          flag1=true;
        }
 else         if (itemstack1.stackSize < par1ItemStack.getMaxStackSize()) {
          par1ItemStack.stackSize-=par1ItemStack.getMaxStackSize() - itemstack1.stackSize;
          itemstack1.stackSize=par1ItemStack.getMaxStackSize();
          slot.onSlotChanged();
          flag1=true;
        }
      }
      if (par4) {
        --k;
      }
 else {
        ++k;
      }
    }
  }
  if (par1ItemStack.stackSize > 0) {
    if (par4) {
      k=par3 - 1;
    }
 else {
      k=par2;
    }
    while (!par4 && k < par3 || par4 && k >= par2) {
      slot=(Slot)inventorySlots.get(k);
      itemstack1=slot.getStack();
      if (itemstack1 == null && slot.isItemValid(par1ItemStack)) {
        if (1 < par1ItemStack.stackSize) {
          ItemStack copy=par1ItemStack.copy();
          copy.stackSize=1;
          slot.putStack(copy);
          par1ItemStack.stackSize-=1;
          flag1=true;
          break;
        }
 else {
          slot.putStack(par1ItemStack.copy());
          slot.onSlotChanged();
          par1ItemStack.stackSize=0;
          flag1=true;
          break;
        }
      }
      if (par4) {
        --k;
      }
 else {
        ++k;
      }
    }
  }
  return flag1;
}",0.997649271274095
169538,"private void addOreToGenerate(int veinCount,int veinSize,int minY,int maxY,Block block,World world,int chunkX,int chunkZ){
  Random rand=new Random(Integer.valueOf(chunkX).hashCode() + Integer.valueOf(chunkZ).hashCode());
  for (int i=0; i < veinCount; i++) {
    int x=chunkX * 16 + rand.nextInt(16);
    int y=rand.nextInt(maxY - minY) + minY;
    int z=chunkZ * 16 + rand.nextInt(16);
    (new WorldGenMinable(block,veinSize)).generate(world,rand,x,y,z);
  }
}","private void addOreToGenerate(Random random,int veinCount,int veinSize,int minY,int maxY,Block block,World world,int chunkX,int chunkZ){
  for (int i=0; i < veinCount; i++) {
    int x=chunkX * 16 + random.nextInt(16);
    int y=random.nextInt(maxY - minY) + minY;
    int z=chunkZ * 16 + random.nextInt(16);
    (new WorldGenMinable(block,veinSize)).generate(world,random,x,y,z);
  }
}",0.8574793875147232
169539,"@Override public void generate(Random random,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  if (!world.provider.isSurfaceWorld()) {
    return;
  }
  if (Config.generateAmethyst) {
    this.addOreToGenerate(Config.veinCountAmethyst,Config.veinSizeAmethyst,Config.minAmethystY,Config.maxAmethystY,BPBlocks.amethyst_ore,world,chunkX,chunkZ);
  }
  if (Config.generateRuby) {
    this.addOreToGenerate(Config.veinCountRuby,Config.veinSizeRuby,Config.minRubyY,Config.maxRubyY,BPBlocks.ruby_ore,world,chunkX,chunkZ);
  }
  if (Config.generateSapphire) {
    this.addOreToGenerate(Config.veinCountSapphire,Config.veinSizeSapphire,Config.minSapphireY,Config.maxSapphireY,BPBlocks.sapphire_ore,world,chunkX,chunkZ);
  }
  if (Config.generateSilver) {
    this.addOreToGenerate(Config.veinCountSilver,Config.veinSizeSilver,Config.minSilverY,Config.maxSilverY,BPBlocks.silver_ore,world,chunkX,chunkZ);
  }
  if (Config.generateNikolite) {
    this.addOreToGenerate(Config.veinCountNikolite,Config.veinSizeNikolite,Config.minNikoliteY,Config.maxNikoliteY,BPBlocks.nikolite_ore,world,chunkX,chunkZ);
  }
  if (Config.generateTin) {
    this.addOreToGenerate(Config.veinCountTin,Config.veinSizeTin,Config.minTinY,Config.maxTinY,BPBlocks.tin_ore,world,chunkX,chunkZ);
  }
  if (Config.generateCopper) {
    this.addOreToGenerate(Config.veinCountCopper,Config.veinSizeCopper,Config.minCopperY,Config.maxCopperY,BPBlocks.copper_ore,world,chunkX,chunkZ);
  }
  BiomeGenBase bgb=world.getWorldChunkManager().getBiomeGenAt(chunkX * 16 + 16,chunkZ * 16 + 16);
  int n=0;
  if (bgb == BiomeGenBase.birchForest)   n=1;
 else   if (bgb == BiomeGenBase.birchForestHills)   n=1;
 else   if (bgb == BiomeGenBase.plains)   n=1;
 else   if (bgb == BiomeGenBase.forest)   n=4;
 else   if (bgb == BiomeGenBase.roofedForest)   n=4;
  for (int i=0; i < n; i++) {
    int x=chunkX * 16 + random.nextInt(16) + 8;
    int y=random.nextInt(128);
    int z=chunkZ * 16 + random.nextInt(16) + 8;
    new WorldGenFlowers(BPBlocks.indigo_flower).generate(world,random,x,y,z);
  }
  for (int i=0; i < 4; i++) {
    int x=chunkX * 16 + random.nextInt(16);
    int y=32 + random.nextInt(32);
    int z=chunkZ * 16 + random.nextInt(16);
    new WorldGenMarble(BPBlocks.marble,random.nextInt(4096)).generate(world,random,x,y,z);
  }
  if (random.nextDouble() < Config.volcanoSpawnChance) {
    int x=chunkX * 16 + random.nextInt(16);
    int z=chunkZ * 16 + random.nextInt(16);
    int y=world.getHeightValue(x,z) + 20 + random.nextInt(10);
    if (world.getBlock(x,10,z) == Blocks.lava)     new WorldGenVolcano().generate(world,random,x,y,z);
  }
}","@Override public void generate(Random random,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  if (!world.provider.isSurfaceWorld()) {
    return;
  }
  if (Config.generateAmethyst) {
    this.addOreToGenerate(random,Config.veinCountAmethyst,Config.veinSizeAmethyst,Config.minAmethystY,Config.maxAmethystY,BPBlocks.amethyst_ore,world,chunkX,chunkZ);
  }
  if (Config.generateRuby) {
    this.addOreToGenerate(random,Config.veinCountRuby,Config.veinSizeRuby,Config.minRubyY,Config.maxRubyY,BPBlocks.ruby_ore,world,chunkX,chunkZ);
  }
  if (Config.generateSapphire) {
    this.addOreToGenerate(random,Config.veinCountSapphire,Config.veinSizeSapphire,Config.minSapphireY,Config.maxSapphireY,BPBlocks.sapphire_ore,world,chunkX,chunkZ);
  }
  if (Config.generateSilver) {
    this.addOreToGenerate(random,Config.veinCountSilver,Config.veinSizeSilver,Config.minSilverY,Config.maxSilverY,BPBlocks.silver_ore,world,chunkX,chunkZ);
  }
  if (Config.generateNikolite) {
    this.addOreToGenerate(random,Config.veinCountNikolite,Config.veinSizeNikolite,Config.minNikoliteY,Config.maxNikoliteY,BPBlocks.nikolite_ore,world,chunkX,chunkZ);
  }
  if (Config.generateTin) {
    this.addOreToGenerate(random,Config.veinCountTin,Config.veinSizeTin,Config.minTinY,Config.maxTinY,BPBlocks.tin_ore,world,chunkX,chunkZ);
  }
  if (Config.generateCopper) {
    this.addOreToGenerate(random,Config.veinCountCopper,Config.veinSizeCopper,Config.minCopperY,Config.maxCopperY,BPBlocks.copper_ore,world,chunkX,chunkZ);
  }
  BiomeGenBase bgb=world.getWorldChunkManager().getBiomeGenAt(chunkX * 16 + 16,chunkZ * 16 + 16);
  int n=0;
  if (bgb == BiomeGenBase.birchForest)   n=1;
 else   if (bgb == BiomeGenBase.birchForestHills)   n=1;
 else   if (bgb == BiomeGenBase.plains)   n=1;
 else   if (bgb == BiomeGenBase.forest)   n=4;
 else   if (bgb == BiomeGenBase.roofedForest)   n=4;
  for (int i=0; i < n; i++) {
    int x=chunkX * 16 + random.nextInt(16) + 8;
    int y=random.nextInt(128);
    int z=chunkZ * 16 + random.nextInt(16) + 8;
    new WorldGenFlowers(BPBlocks.indigo_flower).generate(world,random,x,y,z);
  }
  for (int i=0; i < 4; i++) {
    int x=chunkX * 16 + random.nextInt(16);
    int y=32 + random.nextInt(32);
    int z=chunkZ * 16 + random.nextInt(16);
    new WorldGenMarble(BPBlocks.marble,random.nextInt(4096)).generate(world,random,x,y,z);
  }
  if (random.nextDouble() < Config.volcanoSpawnChance) {
    int x=chunkX * 16 + random.nextInt(16);
    int z=chunkZ * 16 + random.nextInt(16);
    int y=world.getHeightValue(x,z) + 20 + random.nextInt(10);
    if (world.getBlock(x,10,z) == Blocks.lava)     new WorldGenVolcano().generate(world,random,x,y,z);
  }
}",0.9908530894157176
169540,"/** 
 * Can this block stay at this position.  Similar to canPlaceBlockAt except gets checked often with plants.
 */
@Override public boolean canBlockStay(World world,int x,int y,int z){
  if (world.getBlock(x,y,z) != this)   return super.canBlockStay(world,x,y,z);
  if ((world.getBlock(x,y - 1,z) instanceof BlockFarmland) || (world.getBlock(x,y - 1,z) instanceof BlockCrop)) {
    return true;
  }
 else   return false;
}","/** 
 * Can this block stay at this position.  Similar to canPlaceBlockAt except gets checked often with plants.
 */
@Override public boolean canBlockStay(World world,int x,int y,int z){
  if (world.getBlock(x,y,z) != this)   return super.canBlockStay(world,x,y,z);
  return (world.getBlock(x,y - 1,z) instanceof BlockFarmland) || (world.getBlock(x,y - 1,z) instanceof BlockCrop);
}",0.9305210918114144
169541,"public static void init(){
  basalt=new BlockStoneOre(Refs.BASALT_NAME);
  marble=new BlockStoneOre(Refs.MARBLE_NAME);
  basalt_cobble=new BlockStoneOre(Refs.BASALTCOBBLE_NAME);
  basalt_brick=new BlockStoneOre(Refs.BASALTBRICK_NAME);
  marble_brick=new BlockStoneOre(Refs.MARBLEBRICK_NAME);
  cracked_basalt=new BlockCrackedBasalt(Refs.CRACKED_BASALT);
  basaltbrick_cracked=new BlockStoneOre(Refs.CRACKEDBASALTBRICK_NAME);
  basalt_brick_small=new BlockStoneOre(Refs.SMALLBASALTBRICK_NAME);
  marble_brick_small=new BlockStoneOre(Refs.SMALLMARBLEBRICK_NAME);
  fancy_basalt=new BlockStoneOre(Refs.CHISELEDBASALTBRICK_NAME);
  fancy_marble=new BlockStoneOre(Refs.CHISELEDMARBLEBRICK_NAME);
  marble_tile=new BlockStoneOreConnected(Refs.MARBLETILE_NAME);
  basalt_tile=new BlockStoneOreConnected(Refs.BASALTTILE_NAME);
  marble_paver=new BlockStoneOre(Refs.MARBLEPAVER_NAME);
  basalt_paver=new BlockStoneOre(Refs.BASALTPAVER_NAME);
  nikolite_ore=new BlockItemOre(Refs.NIKOLITEORE_NAME);
  ruby_ore=new BlockItemOre(Refs.RUBYORE_NAME);
  sapphire_ore=new BlockItemOre(Refs.SAPPHIREORE_NAME);
  amethyst_ore=new BlockItemOre(Refs.AMETHYSTORE_NAME);
  copper_ore=new BlockStoneOre(Refs.COPPERORE_NAME);
  silver_ore=new BlockStoneOre(Refs.SILVERORE_NAME);
  tin_ore=new BlockStoneOre(Refs.TINORE_NAME);
  ruby_block=new BlockStoneOre(Refs.RUBYBLOCK_NAME);
  sapphire_block=new BlockStoneOre(Refs.SAPPHIREBLOCK_NAME);
  amethyst_block=new BlockStoneOre(Refs.AMETHYSTBLOCK_NAME);
  nikolite_block=new BlockStoneOre(Refs.NIKOLITEBLOCK_NAME);
  copper_block=new BlockStoneOre(Refs.COPPERBLOCK_NAME);
  silver_block=new BlockStoneOre(Refs.SILVERBLOCK_NAME);
  tin_block=new BlockStoneOre(Refs.TINBLOCK_NAME);
  flax_crop=new BlockCrop().setBlockName(Refs.FLAXCROP_NAME);
  indigo_flower=new BlockCustomFlower(Refs.INDIGOFLOWER_NAME);
  alloy_furnace=new BlockAlloyFurnace();
  lamp_white=new BlockCustomLamp(Refs.LAMP_WHITE,0,false);
  invertedlamp_white=new BlockCustomLamp(Refs.INVERTEDLAMP_WHITE,0,true);
  lamp_orange=new BlockCustomLamp(Refs.LAMP_ORANGE,1,false);
  invertedlamp_orange=new BlockCustomLamp(Refs.INVERTEDLAMP_ORANGE,1,true);
  lamp_magenta=new BlockCustomLamp(Refs.LAMP_MAGENTA,2,false);
  invertedlamp_magenta=new BlockCustomLamp(Refs.INVERTEDLAMP_MAGENTA,2,true);
  lamp_lightblue=new BlockCustomLamp(Refs.LAMP_LIGHTBLUE,3,false);
  invertedlamp_lightblue=new BlockCustomLamp(Refs.INVERTEDLAMP_LIGHTBLUE,3,true);
  lamp_yellow=new BlockCustomLamp(Refs.LAMP_YELLOW,4,false);
  invertedlamp_yellow=new BlockCustomLamp(Refs.INVERTEDLAMP_YELLOW,4,true);
  lamp_lime=new BlockCustomLamp(Refs.LAMP_LIME,5,false);
  invertedlamp_lime=new BlockCustomLamp(Refs.INVERTEDLAMP_LIME,5,true);
  lamp_pink=new BlockCustomLamp(Refs.LAMP_PINK,6,false);
  invertedlamp_pink=new BlockCustomLamp(Refs.INVERTEDLAMP_PINK,6,true);
  lamp_gray=new BlockCustomLamp(Refs.LAMP_GRAY,7,false);
  invertedlamp_gray=new BlockCustomLamp(Refs.INVERTEDLAMP_GRAY,7,true);
  lamp_lightgray=new BlockCustomLamp(Refs.LAMP_LIGHTGRAY,8,false);
  invertedlamp_lightgray=new BlockCustomLamp(Refs.INVERTEDLAMP_LIGHTGRAY,8,true);
  lamp_cyan=new BlockCustomLamp(Refs.LAMP_CYAN,9,false);
  invertedlamp_cyan=new BlockCustomLamp(Refs.INVERTEDLAMP_CYAN,9,true);
  lamp_purple=new BlockCustomLamp(Refs.LAMP_PURPLE,10,false);
  invertedlamp_purple=new BlockCustomLamp(Refs.INVERTEDLAMP_PURPLE,10,true);
  lamp_blue=new BlockCustomLamp(Refs.LAMP_BLUE,11,false);
  invertedlamp_blue=new BlockCustomLamp(Refs.INVERTEDLAMP_BLUE,11,true);
  lamp_brown=new BlockCustomLamp(Refs.LAMP_BROWN,12,false);
  invertedlamp_brown=new BlockCustomLamp(Refs.INVERTEDLAMP_BROWN,12,true);
  lamp_green=new BlockCustomLamp(Refs.LAMP_GREEN,13,false);
  invertedlamp_green=new BlockCustomLamp(Refs.INVERTEDLAMP_GREEN,13,true);
  lamp_red=new BlockCustomLamp(Refs.LAMP_RED,14,false);
  invertedlamp_red=new BlockCustomLamp(Refs.INVERTEDLAMP_RED,14,true);
  lamp_black=new BlockCustomLamp(Refs.LAMP_BLACK,15,false);
  invertedlamp_black=new BlockCustomLamp(Refs.INVERTEDLAMP_BLACK,15,true);
  registerBlocks();
}","public static void init(){
  basalt=new BlockStoneOre(Refs.BASALT_NAME);
  marble=new BlockStoneOre(Refs.MARBLE_NAME);
  basalt_cobble=new BlockStoneOre(Refs.BASALTCOBBLE_NAME);
  basalt_brick=new BlockStoneOre(Refs.BASALTBRICK_NAME);
  marble_brick=new BlockStoneOre(Refs.MARBLEBRICK_NAME);
  cracked_basalt=new BlockCrackedBasalt(Refs.CRACKED_BASALT);
  basaltbrick_cracked=new BlockStoneOre(Refs.CRACKEDBASALTBRICK_NAME);
  basalt_brick_small=new BlockStoneOre(Refs.SMALLBASALTBRICK_NAME);
  marble_brick_small=new BlockStoneOre(Refs.SMALLMARBLEBRICK_NAME);
  fancy_basalt=new BlockStoneOre(Refs.CHISELEDBASALTBRICK_NAME);
  fancy_marble=new BlockStoneOre(Refs.CHISELEDMARBLEBRICK_NAME);
  marble_tile=new BlockStoneOreConnected(Refs.MARBLETILE_NAME);
  basalt_tile=new BlockStoneOreConnected(Refs.BASALTTILE_NAME);
  marble_paver=new BlockStoneOre(Refs.MARBLEPAVER_NAME);
  basalt_paver=new BlockStoneOre(Refs.BASALTPAVER_NAME);
  nikolite_ore=new BlockItemOre(Refs.NIKOLITEORE_NAME);
  ruby_ore=new BlockItemOre(Refs.RUBYORE_NAME);
  sapphire_ore=new BlockItemOre(Refs.SAPPHIREORE_NAME);
  amethyst_ore=new BlockItemOre(Refs.AMETHYSTORE_NAME);
  copper_ore=new BlockStoneOre(Refs.COPPERORE_NAME);
  silver_ore=new BlockStoneOre(Refs.SILVERORE_NAME);
  tin_ore=new BlockStoneOre(Refs.TINORE_NAME);
  ruby_block=new BlockStoneOre(Refs.RUBYBLOCK_NAME);
  sapphire_block=new BlockStoneOre(Refs.SAPPHIREBLOCK_NAME);
  amethyst_block=new BlockStoneOre(Refs.AMETHYSTBLOCK_NAME);
  nikolite_block=new BlockStoneOre(Refs.NIKOLITEBLOCK_NAME);
  copper_block=new BlockStoneOre(Refs.COPPERBLOCK_NAME);
  silver_block=new BlockStoneOre(Refs.SILVERBLOCK_NAME);
  tin_block=new BlockStoneOre(Refs.TINBLOCK_NAME);
  flax_crop=new BlockCrop().setBlockName(Refs.FLAXCROP_NAME);
  indigo_flower=new BlockCustomFlower(Refs.INDIGOFLOWER_NAME);
  alloy_furnace=new BlockAlloyFurnace();
  registerBlocks();
}",0.6352624495289367
169542,"private static void registerBlocks(){
  GameRegistry.registerBlock(basalt,Refs.BASALT_NAME);
  GameRegistry.registerBlock(basalt_cobble,Refs.BASALTCOBBLE_NAME);
  GameRegistry.registerBlock(basalt_brick,Refs.BASALTBRICK_NAME);
  GameRegistry.registerBlock(basaltbrick_cracked,Refs.CRACKEDBASALTBRICK_NAME);
  GameRegistry.registerBlock(fancy_basalt,Refs.CHISELEDBASALTBRICK_NAME);
  GameRegistry.registerBlock(basalt_brick_small,Refs.SMALLBASALTBRICK_NAME);
  GameRegistry.registerBlock(cracked_basalt,Refs.CRACKED_BASALT);
  GameRegistry.registerBlock(basalt_tile,Refs.BASALTTILE_NAME);
  GameRegistry.registerBlock(basalt_paver,Refs.BASALTPAVER_NAME);
  GameRegistry.registerBlock(marble,Refs.MARBLE_NAME);
  GameRegistry.registerBlock(marble_brick,Refs.MARBLEBRICK_NAME);
  GameRegistry.registerBlock(fancy_marble,Refs.CHISELEDMARBLEBRICK_NAME);
  GameRegistry.registerBlock(marble_brick_small,Refs.SMALLMARBLEBRICK_NAME);
  GameRegistry.registerBlock(marble_tile,Refs.MARBLETILE_NAME);
  GameRegistry.registerBlock(marble_paver,Refs.MARBLEPAVER_NAME);
  GameRegistry.registerBlock(nikolite_ore,Refs.NIKOLITEORE_NAME);
  GameRegistry.registerBlock(copper_ore,Refs.COPPERORE_NAME);
  GameRegistry.registerBlock(silver_ore,Refs.SILVERORE_NAME);
  GameRegistry.registerBlock(tin_ore,Refs.TINORE_NAME);
  GameRegistry.registerBlock(ruby_ore,Refs.RUBYORE_NAME);
  GameRegistry.registerBlock(sapphire_ore,Refs.SAPPHIREORE_NAME);
  GameRegistry.registerBlock(amethyst_ore,Refs.AMETHYSTORE_NAME);
  GameRegistry.registerBlock(ruby_block,Refs.RUBYBLOCK_NAME);
  GameRegistry.registerBlock(sapphire_block,Refs.SAPPHIREBLOCK_NAME);
  GameRegistry.registerBlock(amethyst_block,Refs.AMETHYSTBLOCK_NAME);
  GameRegistry.registerBlock(nikolite_block,Refs.NIKOLITEBLOCK_NAME);
  GameRegistry.registerBlock(copper_block,Refs.COPPERBLOCK_NAME);
  GameRegistry.registerBlock(silver_block,Refs.SILVERBLOCK_NAME);
  GameRegistry.registerBlock(tin_block,Refs.TINBLOCK_NAME);
  GameRegistry.registerBlock(flax_crop,Refs.FLAXCROP_NAME);
  GameRegistry.registerBlock(indigo_flower,Refs.INDIGOFLOWER_NAME);
  GameRegistry.registerBlock(alloy_furnace,Refs.ALLOYFURNACE_NAME);
  GameRegistry.registerBlock(lamp_white,Refs.LAMP_WHITE);
  GameRegistry.registerBlock(invertedlamp_white,Refs.INVERTEDLAMP_WHITE);
  GameRegistry.registerBlock(lamp_orange,Refs.LAMP_ORANGE);
  GameRegistry.registerBlock(invertedlamp_orange,Refs.INVERTEDLAMP_ORANGE);
  GameRegistry.registerBlock(lamp_magenta,Refs.LAMP_MAGENTA);
  GameRegistry.registerBlock(invertedlamp_magenta,Refs.INVERTEDLAMP_MAGENTA);
  GameRegistry.registerBlock(lamp_lightblue,Refs.LAMP_LIGHTBLUE);
  GameRegistry.registerBlock(invertedlamp_lightblue,Refs.INVERTEDLAMP_LIGHTBLUE);
  GameRegistry.registerBlock(lamp_yellow,Refs.LAMP_YELLOW);
  GameRegistry.registerBlock(invertedlamp_yellow,Refs.INVERTEDLAMP_YELLOW);
  GameRegistry.registerBlock(lamp_lime,Refs.LAMP_LIME);
  GameRegistry.registerBlock(invertedlamp_lime,Refs.INVERTEDLAMP_LIME);
  GameRegistry.registerBlock(lamp_pink,Refs.LAMP_PINK);
  GameRegistry.registerBlock(invertedlamp_pink,Refs.INVERTEDLAMP_PINK);
  GameRegistry.registerBlock(lamp_gray,Refs.LAMP_GRAY);
  GameRegistry.registerBlock(invertedlamp_gray,Refs.INVERTEDLAMP_GRAY);
  GameRegistry.registerBlock(lamp_lightgray,Refs.LAMP_LIGHTGRAY);
  GameRegistry.registerBlock(invertedlamp_lightgray,Refs.INVERTEDLAMP_LIGHTGRAY);
  GameRegistry.registerBlock(lamp_cyan,Refs.LAMP_CYAN);
  GameRegistry.registerBlock(invertedlamp_cyan,Refs.INVERTEDLAMP_CYAN);
  GameRegistry.registerBlock(lamp_purple,Refs.LAMP_PURPLE);
  GameRegistry.registerBlock(invertedlamp_purple,Refs.INVERTEDLAMP_PURPLE);
  GameRegistry.registerBlock(lamp_blue,Refs.LAMP_BLUE);
  GameRegistry.registerBlock(invertedlamp_blue,Refs.INVERTEDLAMP_BLUE);
  GameRegistry.registerBlock(lamp_brown,Refs.LAMP_BROWN);
  GameRegistry.registerBlock(invertedlamp_brown,Refs.INVERTEDLAMP_BROWN);
  GameRegistry.registerBlock(lamp_green,Refs.LAMP_GREEN);
  GameRegistry.registerBlock(invertedlamp_green,Refs.INVERTEDLAMP_GREEN);
  GameRegistry.registerBlock(lamp_red,Refs.LAMP_RED);
  GameRegistry.registerBlock(invertedlamp_red,Refs.INVERTEDLAMP_RED);
  GameRegistry.registerBlock(lamp_black,Refs.LAMP_BLACK);
  GameRegistry.registerBlock(invertedlamp_black,Refs.INVERTEDLAMP_BLACK);
}","private static void registerBlocks(){
  GameRegistry.registerBlock(basalt,Refs.BASALT_NAME);
  GameRegistry.registerBlock(basalt_cobble,Refs.BASALTCOBBLE_NAME);
  GameRegistry.registerBlock(basalt_brick,Refs.BASALTBRICK_NAME);
  GameRegistry.registerBlock(basaltbrick_cracked,Refs.CRACKEDBASALTBRICK_NAME);
  GameRegistry.registerBlock(fancy_basalt,Refs.CHISELEDBASALTBRICK_NAME);
  GameRegistry.registerBlock(basalt_brick_small,Refs.SMALLBASALTBRICK_NAME);
  GameRegistry.registerBlock(cracked_basalt,Refs.CRACKED_BASALT);
  GameRegistry.registerBlock(basalt_tile,Refs.BASALTTILE_NAME);
  GameRegistry.registerBlock(basalt_paver,Refs.BASALTPAVER_NAME);
  GameRegistry.registerBlock(marble,Refs.MARBLE_NAME);
  GameRegistry.registerBlock(marble_brick,Refs.MARBLEBRICK_NAME);
  GameRegistry.registerBlock(fancy_marble,Refs.CHISELEDMARBLEBRICK_NAME);
  GameRegistry.registerBlock(marble_brick_small,Refs.SMALLMARBLEBRICK_NAME);
  GameRegistry.registerBlock(marble_tile,Refs.MARBLETILE_NAME);
  GameRegistry.registerBlock(marble_paver,Refs.MARBLEPAVER_NAME);
  GameRegistry.registerBlock(nikolite_ore,Refs.NIKOLITEORE_NAME);
  GameRegistry.registerBlock(copper_ore,Refs.COPPERORE_NAME);
  GameRegistry.registerBlock(silver_ore,Refs.SILVERORE_NAME);
  GameRegistry.registerBlock(tin_ore,Refs.TINORE_NAME);
  GameRegistry.registerBlock(ruby_ore,Refs.RUBYORE_NAME);
  GameRegistry.registerBlock(sapphire_ore,Refs.SAPPHIREORE_NAME);
  GameRegistry.registerBlock(amethyst_ore,Refs.AMETHYSTORE_NAME);
  GameRegistry.registerBlock(ruby_block,Refs.RUBYBLOCK_NAME);
  GameRegistry.registerBlock(sapphire_block,Refs.SAPPHIREBLOCK_NAME);
  GameRegistry.registerBlock(amethyst_block,Refs.AMETHYSTBLOCK_NAME);
  GameRegistry.registerBlock(nikolite_block,Refs.NIKOLITEBLOCK_NAME);
  GameRegistry.registerBlock(copper_block,Refs.COPPERBLOCK_NAME);
  GameRegistry.registerBlock(silver_block,Refs.SILVERBLOCK_NAME);
  GameRegistry.registerBlock(tin_block,Refs.TINBLOCK_NAME);
  GameRegistry.registerBlock(flax_crop,Refs.FLAXCROP_NAME);
  GameRegistry.registerBlock(indigo_flower,Refs.INDIGOFLOWER_NAME);
  GameRegistry.registerBlock(alloy_furnace,Refs.ALLOYFURNACE_NAME);
}",0.668425954672462
169543,"private void generateLavaColumn(World world,int x,int topY,int z,Random rand){
  if (rand.nextDouble() < Config.volcanoActiveToInactiveRatio) {
    world.setBlock(x,topY,z,BPBlocks.cracked_basalt);
  }
 else {
    world.setBlock(x,topY + 1,z,Blocks.lava);
    world.setBlock(x,topY,z,Blocks.lava);
  }
  for (int y=10; y < topY; y++) {
    world.setBlock(x + 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x - 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z + 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z - 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z,Blocks.lava,0,0);
  }
}","private void generateLavaColumn(World world,int x,int topY,int z,Random rand){
  if (rand.nextDouble() < Config.volcanoActiveToInactiveRatio) {
    world.setBlock(x,topY,z,BPBlocks.cracked_basalt);
  }
 else {
    world.setBlock(x,topY + 1,z,Blocks.lava);
    world.setBlock(x,topY,z,Blocks.lava);
  }
  for (int y=topY - 1; y >= 10; y--) {
    world.setBlock(x + 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x - 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z + 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z - 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z,Blocks.lava,0,0);
  }
}",0.7434377646062659
169544,"private void generateLavaColumn(World world,int x,int topY,int z,Random rand){
  if (rand.nextDouble() < Config.volcanoActiveToInactiveRatio) {
    world.setBlock(x,topY,z,BPBlocks.cracked_basalt);
  }
 else {
    world.setBlock(x,topY + 1,z,Blocks.lava);
    world.setBlock(x,topY,z,Blocks.lava);
  }
  for (int y=10; y < topY; y++) {
    world.setBlock(x,y,z,Blocks.lava,0,0);
    world.setBlock(x + 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x - 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z + 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z - 1,BPBlocks.basalt,0,0);
  }
}","private void generateLavaColumn(World world,int x,int topY,int z,Random rand){
  if (rand.nextDouble() < Config.volcanoActiveToInactiveRatio) {
    world.setBlock(x,topY,z,BPBlocks.cracked_basalt);
  }
 else {
    world.setBlock(x,topY + 1,z,Blocks.lava);
    world.setBlock(x,topY,z,Blocks.lava);
  }
  for (int y=10; y < topY; y++) {
    world.setBlock(x + 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x - 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z + 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z - 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z,Blocks.lava,0,0);
  }
}",0.9268707482993196
169545,"public void generate(World world,Random rand,int middleX,int vulcanoHeight,int middleZ){
  List<Pos>[] distMap=calculateDistMap();
  boolean first=true;
  for (int dist=0; dist < distMap.length; dist++) {
    List<Pos> distList=distMap[dist];
    boolean isFinished=true;
    for (    Pos p : distList) {
      int worldHeight=world.getHeightValue(p.x + middleX,p.z + middleZ) - 1;
      int posHeight=first ? vulcanoHeight : getNewVulcanoHeight(worldHeight,p,rand,dist);
      if (posHeight >= 0 && (posHeight > worldHeight || canReplace(world,p.x + middleX,posHeight,p.z + middleZ))) {
        vulcanoMap.put(p,posHeight);
        if (!first) {
          for (int i=posHeight; i > 0 && (i > worldHeight || canReplace(world,p.x + middleX,i,p.z + middleZ)); i--) {
            world.setBlock(p.x + middleX,i,p.z + middleZ,BPBlocks.basalt,0,0);
          }
          for (int i=posHeight + 1; i < vulcanoHeight; i++) {
            if (canReplace(world,p.x + middleX,i,p.z + middleZ))             world.setBlock(p.x + middleX,i,p.z + middleZ,Blocks.air,0,0);
          }
        }
        isFinished=false;
      }
      first=false;
    }
    if (isFinished)     break;
  }
  generateLavaColumn(world,middleX,vulcanoHeight,middleZ,rand);
}","public void generate(World world,Random rand,int middleX,int vulcanoHeight,int middleZ){
  List<Pos>[] distMap=calculateDistMap();
  boolean first=true;
  for (int dist=0; dist < distMap.length; dist++) {
    List<Pos> distList=distMap[dist];
    boolean isFinished=true;
    for (    Pos p : distList) {
      int worldHeight=world.getHeightValue(p.x + middleX,p.z + middleZ) - 1;
      int posHeight=first ? vulcanoHeight : getNewVulcanoHeight(worldHeight,p,rand,dist);
      if (posHeight >= 0 && (posHeight > worldHeight || canReplace(world,p.x + middleX,posHeight,p.z + middleZ))) {
        vulcanoMap.put(p,posHeight);
        if (!first) {
          for (int i=posHeight; i > 0 && (i > worldHeight || canReplace(world,p.x + middleX,i,p.z + middleZ)); i--) {
            world.setBlock(p.x + middleX,i,p.z + middleZ,BPBlocks.basalt,0,0);
          }
          for (int i=posHeight + 1; i < vulcanoHeight; i++) {
            if (canReplace(world,p.x + middleX,i,p.z + middleZ) && world.getBlock(p.x + middleX,i,p.z + middleZ).getMaterial() != Material.water)             world.setBlock(p.x + middleX,i,p.z + middleZ,Blocks.air,0,0);
          }
        }
        isFinished=false;
      }
      first=false;
    }
    if (isFinished)     break;
  }
  generateLavaColumn(world,middleX,vulcanoHeight,middleZ,rand);
}",0.9683222526398124
169546,"@Override public int getLightValue(IBlockAccess world,int x,int y,int z){
}","@Override public int getLightValue(IBlockAccess world,int x,int y,int z){
  int metadata=world.getBlockMetadata(x,y,z);
  if ((metadata & 8) != 0) {
    return 13;
  }
  return 0;
}",0.5859375
169547,"@Override @SideOnly(Side.CLIENT) public IIcon getIcon(int side,int meta){
}","@Override @SideOnly(Side.CLIENT) public IIcon getIcon(int side,int meta){
  ForgeDirection s=ForgeDirection.getOrientation(side);
  if ((meta & 7) == side) {
    if ((meta & 8) != 0) {
      return this.textureFrontOn;
    }
 else {
      return this.textureFrontOff;
    }
  }
switch (s) {
case UP:
    return textureTop;
case DOWN:
  return textureBottom;
case EAST:
case NORTH:
case SOUTH:
case WEST:
case UNKNOWN:
return textureSide;
default :
break;
}
return null;
}",0.2747252747252747
169548,"/** 
 * Function gets called every tick. Do not forget to call the super method!
 */
@Override public void updateEntity(){
}","/** 
 * Function gets called every tick. Do not forget to call the super method!
 */
@Override public void updateEntity(){
  super.updateEntity();
  if (!metaSet) {
    metaSet=true;
    int newMeta=getBlockMetadata();
    newMeta=newMeta & 7;
    newMeta|=(isActive == true ? 8 : 0);
    getWorldObj().setBlockMetadataWithNotify(xCoord,yCoord,zCoord,newMeta,2);
  }
}",0.5040650406504065
169549,"public BlockCrop(){
  this.setTickRandomly(true);
  float f=0.5F;
  this.setBlockBounds(0.5F - f,0.0F,0.5F - f,0.5F + f,0.25F,0.5F + f);
  this.setCreativeTab((CreativeTabs)null);
  this.setHardness(0.0F);
  this.setStepSound(soundTypeGrass);
  this.disableStats();
  this.setBlockName(Refs.FLAXCROP_NAME);
}","public BlockCrop(){
  this.setTickRandomly(true);
  float f=0.5F;
  this.setBlockBounds(0.5F - f,0.0F,0.5F - f,0.5F + f,0.25F,0.5F + f);
  this.setCreativeTab((CreativeTabs)null);
  this.setHardness(0.0F);
  this.setStepSound(soundTypeGrass);
  this.disableStats();
  this.setBlockName(Refs.FLAXCROP_NAME);
  this.setBlockTextureName(Refs.MODID + ""String_Node_Str"" + Refs.FLAXCROP_NAME);
}",0.8837876614060258
169550,"/** 
 * Ticks the block if it's been scheduled
 */
public void updateTick(World world,int x,int y,int z,Random random){
  super.updateTick(world,x,y,z,random);
  if (world.getBlockLightValue(x,y + 1,z) >= 9) {
    int l=world.getBlockMetadata(x,y,z);
    if (l < 7) {
      float f=this.func_149864_n(world,x,y,z);
      if (random.nextInt((int)(25.0F / f) + 1) == 0) {
        ++l;
        world.setBlockMetadataWithNotify(x,y,z,l,2);
      }
    }
  }
}","/** 
 * Ticks the block if it's been scheduled
 */
public void updateTick(World world,int x,int y,int z,Random random){
  super.updateTick(world,x,y,z,random);
  if (world.getBlockLightValue(x,y + 1,z) >= 9) {
    int meta=world.getBlockMetadata(x,y,z);
    if ((meta == 4) || (meta == 5)) {
      return;
    }
    if ((world.getBlock(x,y - 1,z) != Blocks.farmland) || (world.getBlock(x,y - 1,z) == Blocks.air) || (!world.isAirBlock(x,y + 1,z))) {
      return;
    }
    if (random.nextInt(30) == 0) {
      world.setBlockMetadataWithNotify(x,y,z,meta + 1,2);
      if (meta == 3)       world.setBlock(x,y + 1,z,BPBlocks.flax_crop,5,2);
    }
  }
}",0.669683257918552
169551,"public static void init(){
  GameRegistry.registerItem(malachite,Refs.ITEMMALACHITE_NAME);
  GameRegistry.registerItem(sapphire,Refs.ITEMSAPPHIRE_NAME);
  GameRegistry.registerItem(ruby,Refs.ITEMRUBY_NAME);
  GameRegistry.registerItem(nikolite,Refs.ITEMNIKOLITE_NAME);
  GameRegistry.registerItem(copper_ingot,Refs.ITEMCOPPERINGOT_NAME);
  GameRegistry.registerItem(silver_ingot,Refs.ITEMSILVERINGOT_NAME);
  GameRegistry.registerItem(tin_ingot,Refs.ITEMTININGOT_NAME);
  GameRegistry.registerItem(ruby_axe,Refs.RUBYAXE_NAME);
  GameRegistry.registerItem(ruby_sword,Refs.RUBYSWORD_NAME);
  GameRegistry.registerItem(ruby_pickaxe,Refs.RUBYPICKAXE_NAME);
  GameRegistry.registerItem(ruby_spade,Refs.RUBYSPADE_NAME);
  GameRegistry.registerItem(ruby_hoe,Refs.RUBYHOE_NAME);
  GameRegistry.registerItem(ruby_sickle,Refs.RUBYSICKLE_NAME);
  GameRegistry.registerItem(sapphire_axe,Refs.SAPPHIREAXE_NAME);
  GameRegistry.registerItem(sapphire_sword,Refs.SAPPHIRESWORD_NAME);
  GameRegistry.registerItem(sapphire_pickaxe,Refs.SAPPHIREPICKAXE_NAME);
  GameRegistry.registerItem(sapphire_spade,Refs.SAPPHIRESPADE_NAME);
  GameRegistry.registerItem(sapphire_hoe,Refs.SAPPHIREHOE_NAME);
  GameRegistry.registerItem(sapphire_sickle,Refs.SAPPHIRESICKLE_NAME);
  GameRegistry.registerItem(malachite_axe,Refs.MALACHITEAXE_NAME);
  GameRegistry.registerItem(malachite_sword,Refs.MALACHITESWORD_NAME);
  GameRegistry.registerItem(malachite_pickaxe,Refs.MALACHITEPICKAXE_NAME);
  GameRegistry.registerItem(malachite_spade,Refs.MALACHITESPADE_NAME);
  GameRegistry.registerItem(malachite_hoe,Refs.MALACHITEHOE_NAME);
  GameRegistry.registerItem(malachite_sickle,Refs.MALACHITESICKLE_NAME);
  GameRegistry.registerItem(wood_sickle,Refs.WOODSICKLE_NAME);
  GameRegistry.registerItem(stone_sickle,Refs.STONESICKLE_NAME);
  GameRegistry.registerItem(iron_sickle,Refs.IRONSICKLE_NAME);
  GameRegistry.registerItem(gold_sickle,Refs.GOLDSICKLE_NAME);
  GameRegistry.registerItem(diamond_sickle,Refs.DIAMONDSICKLE_NAME);
  GameRegistry.registerItem(flax_seed,Refs.FLAXSEED_NAME);
  GameRegistry.registerItem(indigo_dye,Refs.INDIGODYE_NAME);
}","public static void init(){
  GameRegistry.registerItem(malachite,Refs.ITEMMALACHITE_NAME);
  GameRegistry.registerItem(sapphire,Refs.ITEMSAPPHIRE_NAME);
  GameRegistry.registerItem(ruby,Refs.ITEMRUBY_NAME);
  GameRegistry.registerItem(nikolite,Refs.ITEMNIKOLITE_NAME);
  GameRegistry.registerItem(copper_ingot,Refs.ITEMCOPPERINGOT_NAME);
  GameRegistry.registerItem(silver_ingot,Refs.ITEMSILVERINGOT_NAME);
  GameRegistry.registerItem(tin_ingot,Refs.ITEMTININGOT_NAME);
  GameRegistry.registerItem(ruby_axe,Refs.RUBYAXE_NAME);
  GameRegistry.registerItem(ruby_sword,Refs.RUBYSWORD_NAME);
  GameRegistry.registerItem(ruby_pickaxe,Refs.RUBYPICKAXE_NAME);
  GameRegistry.registerItem(ruby_spade,Refs.RUBYSPADE_NAME);
  GameRegistry.registerItem(ruby_hoe,Refs.RUBYHOE_NAME);
  GameRegistry.registerItem(ruby_sickle,Refs.RUBYSICKLE_NAME);
  GameRegistry.registerItem(sapphire_axe,Refs.SAPPHIREAXE_NAME);
  GameRegistry.registerItem(sapphire_sword,Refs.SAPPHIRESWORD_NAME);
  GameRegistry.registerItem(sapphire_pickaxe,Refs.SAPPHIREPICKAXE_NAME);
  GameRegistry.registerItem(sapphire_spade,Refs.SAPPHIRESPADE_NAME);
  GameRegistry.registerItem(sapphire_hoe,Refs.SAPPHIREHOE_NAME);
  GameRegistry.registerItem(sapphire_sickle,Refs.SAPPHIRESICKLE_NAME);
  GameRegistry.registerItem(malachite_axe,Refs.MALACHITEAXE_NAME);
  GameRegistry.registerItem(malachite_sword,Refs.MALACHITESWORD_NAME);
  GameRegistry.registerItem(malachite_pickaxe,Refs.MALACHITEPICKAXE_NAME);
  GameRegistry.registerItem(malachite_spade,Refs.MALACHITESPADE_NAME);
  GameRegistry.registerItem(malachite_hoe,Refs.MALACHITEHOE_NAME);
  GameRegistry.registerItem(malachite_sickle,Refs.MALACHITESICKLE_NAME);
  GameRegistry.registerItem(wood_sickle,Refs.WOODSICKLE_NAME);
  GameRegistry.registerItem(stone_sickle,Refs.STONESICKLE_NAME);
  GameRegistry.registerItem(iron_sickle,Refs.IRONSICKLE_NAME);
  GameRegistry.registerItem(gold_sickle,Refs.GOLDSICKLE_NAME);
  GameRegistry.registerItem(diamond_sickle,Refs.DIAMONDSICKLE_NAME);
  GameRegistry.registerItem(flax_seed,Refs.FLAXSEED_NAME);
  GameRegistry.registerItem(indigo_dye,Refs.INDIGODYE_NAME);
  MinecraftForge.addGrassSeed(new ItemStack(flax_seed),5);
}",0.986237462094705
169552,"public boolean onItemUse(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (side != 1) {
    return false;
  }
 else   if (player.canPlayerEdit(x,y,z,side,itemStack) && player.canPlayerEdit(x,y + 1,z,side,itemStack)) {
    if (world.getBlock(x,y,z).canSustainPlant(world,x,y,z,ForgeDirection.UP,this) && world.isAirBlock(x,y + 1,z)) {
      world.setBlock(x,y + 1,z,this.field_150925_a);
      --itemStack.stackSize;
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}","public boolean onItemUse(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (side != 1) {
    return false;
  }
 else   if (player.canPlayerEdit(x,y,z,side,itemStack) && player.canPlayerEdit(x,y + 1,z,side,itemStack)) {
    if (world.getBlock(x,y,z).canSustainPlant(world,x,y,z,ForgeDirection.UP,this) && world.isAirBlock(x,y + 1,z)) {
      world.setBlock(x,y + 1,z,this.field_150925_a,0,2);
      --itemStack.stackSize;
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}",0.9965635738831616
169553,"@EventHandler public void PreInit(FMLPreInitializationEvent event){
  event.getModMetadata().version=Refs.fullVersionString();
  Logger log=event.getModLog();
  Configuration config=new Configuration(event.getSuggestedConfigurationFile());
  config.load();
  Config.setUp(config);
  config.save();
  Blocks.init();
  Items.init();
}","@EventHandler public void PreInit(FMLPreInitializationEvent event){
  event.getModMetadata().version=Refs.fullVersionString();
  Logger log=event.getModLog();
  Configuration config=new Configuration(event.getSuggestedConfigurationFile());
  CustomTabs.init();
  config.load();
  Config.setUp(config);
  config.save();
  Blocks.init();
  Items.init();
}",0.9693430656934306
169554,"public BlockGemOre(String type){
  super(Material.iron);
  this.setCreativeTab(BluePower.creativeTab);
  this.setStepSound(soundTypeStone);
  this.setHardness(2.5F);
  this.setResistance(10.0F);
  this.textureName=Refs.MODID + ""String_Node_Str"" + type;
  this.setBlockName(type);
}","public BlockGemOre(String type){
  super(Material.iron);
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
  this.setStepSound(soundTypeStone);
  this.setHardness(2.5F);
  this.setResistance(10.0F);
  this.textureName=Refs.MODID + ""String_Node_Str"" + type;
  this.setBlockName(type);
}",0.9438596491228072
169555,"public BlockNikoliteBlock(String name){
  super(Material.rock);
  this.textureName=Refs.MODID + ""String_Node_Str"" + name;
  this.setCreativeTab(CreativeTabs.tabBlock);
  this.setStepSound(soundTypeStone);
  this.setHardness(1.9F);
  this.setResistance(10.0F);
  this.setBlockName(name);
}","public BlockNikoliteBlock(String name){
  super(Material.rock);
  this.textureName=Refs.MODID + ""String_Node_Str"" + name;
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
  this.setStepSound(soundTypeStone);
  this.setHardness(1.9F);
  this.setResistance(10.0F);
  this.setBlockName(name);
}",0.952054794520548
169556,"public BlockNikoliteOre(String name){
  super(Material.rock);
  this.textureName=Refs.MODID + ""String_Node_Str"" + name;
  this.setCreativeTab(BluePower.creativeTab);
  this.setStepSound(soundTypeStone);
  this.setHardness(1.9F);
  this.setResistance(10.0F);
  this.setBlockName(name);
}","public BlockNikoliteOre(String name){
  super(Material.rock);
  this.textureName=Refs.MODID + ""String_Node_Str"" + name;
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
  this.setStepSound(soundTypeStone);
  this.setHardness(1.9F);
  this.setResistance(10.0F);
  this.setBlockName(name);
}",0.9448275862068966
169557,"public BlockStoneOre(String name){
  super(Material.rock);
  this.setBlockName(name);
  this.setHardness(1.9F);
  if (name == Refs.BASALT_NAME) {
    this.setResistance(25.0F);
  }
 else {
    this.setResistance(10.0F);
  }
  this.textureName=Refs.MODID + ""String_Node_Str"" + name;
  this.setCreativeTab(BluePower.creativeTab);
  this.setStepSound(soundTypeStone);
}","public BlockStoneOre(String name){
  super(Material.rock);
  this.setBlockName(name);
  this.setHardness(1.9F);
  if (name == Refs.BASALT_NAME) {
    this.setResistance(25.0F);
  }
 else {
    this.setResistance(10.0F);
  }
  this.textureName=Refs.MODID + ""String_Node_Str"" + name;
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
  this.setStepSound(soundTypeStone);
}",0.9567567567567568
169558,"public ContainerAlloyFurnace(){
  super(Material.rock);
  this.setHardness(1.5F);
  this.setResistance(20.0F);
  this.setCreativeTab(BluePower.creativeTab);
}","public ContainerAlloyFurnace(){
  super(Material.rock);
  this.setHardness(1.5F);
  this.setResistance(20.0F);
  this.setCreativeTab(CustomTabs.tabBluePowerMachines);
}",0.9079754601226994
169559,"public ItemMalachite(){
  super();
  this.setUnlocalizedName(Refs.ITEMMALACHITE_NAME);
  this.setCreativeTab(BluePower.creativeTab);
}","public ItemMalachite(){
  super();
  this.setUnlocalizedName(Refs.ITEMMALACHITE_NAME);
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
}",0.8913043478260869
169560,"public ItemNikolite(){
  super();
  this.setUnlocalizedName(Refs.ITEMNIKOLITE_NAME);
  this.setCreativeTab(BluePower.creativeTab);
}","public ItemNikolite(){
  super();
  this.setUnlocalizedName(Refs.ITEMNIKOLITE_NAME);
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
}",0.8897058823529411
169561,"public ItemRuby(){
  super();
  this.setUnlocalizedName(Refs.ITEMRUBY_NAME);
  this.setCreativeTab(BluePower.creativeTab);
}","public ItemRuby(){
  super();
  this.setUnlocalizedName(Refs.ITEMRUBY_NAME);
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
}",0.8828125
169562,"public ItemSapphire(){
  super();
  this.setUnlocalizedName(Refs.ITEMSAPPHIRE_NAME);
  this.setCreativeTab(BluePower.creativeTab);
}","public ItemSapphire(){
  super();
  this.setUnlocalizedName(Refs.ITEMSAPPHIRE_NAME);
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
}",0.8897058823529411
169563,"public Boolean getImmutable(){
  return immutable;
}","public boolean getImmutable(){
  return immutable;
}",0.9807692307692308
169564,"/** 
 * {@inheritDoc}
 */
@Override public int hashCode(){
  int result=super.hashCode();
  result=31 * result + uuidGenerator.hashCode();
  result=31 * result + uuidProperty.hashCode();
  result=31 * result + uuidIndex.hashCode();
  result=31 * result + uuidRelationshipIndex.hashCode();
  result=31 * result + stripHyphens.hashCode();
  result=31 * result + immutable.hashCode();
  return result;
}","@Override public int hashCode(){
  int result=super.hashCode();
  result=31 * result + uuidGenerator.hashCode();
  result=31 * result + uuidProperty.hashCode();
  result=31 * result + uuidIndex.hashCode();
  result=31 * result + uuidRelationshipIndex.hashCode();
  result=31 * result + (stripHyphens ? 1 : 0);
  result=31 * result + (immutable ? 1 : 0);
  return result;
}",0.8497409326424871
169565,"/** 
 * Create a new instance of this   {@link UuidConfiguration} with a custom immutability setting.
 * @param immutability property of new instance.
 * @return new instance.
 */
public UuidConfiguration withImmutability(boolean immutability){
  return new UuidConfiguration(getInclusionPolicies(),initializeUntil(),getUuidGenerator(),getUuidProperty(),stripHyphens,getUuidIndex(),getUuidRelationshipIndex(),immutability);
}","/** 
 * Create a new instance of this   {@link UuidConfiguration} with a custom immutability setting.
 * @param immutability property of new instance.
 * @return new instance.
 */
public UuidConfiguration withImmutability(boolean immutability){
  return new UuidConfiguration(getInclusionPolicies(),initializeUntil(),getUuidGenerator(),getUuidProperty(),shouldStripHyphens(),getUuidIndex(),getUuidRelationshipIndex(),immutability);
}",0.9906759906759908
169566,"/** 
 * {@inheritDoc}
 */
@Override public Void beforeCommit(ImprovedTransactionData transactionData) throws DeliberateTransactionRollbackException {
  for (  Node node : transactionData.getAllCreatedNodes()) {
    assignUuid(node);
  }
  for (  Node node : transactionData.getAllDeletedNodes()) {
    uuidIndexer.deleteNodeFromIndex(node);
  }
  for (  Change<Node> change : transactionData.getAllChangedNodes()) {
    if (!change.getCurrent().hasProperty(uuidConfiguration.getUuidProperty())) {
      if (isImmutable()) {
        throw new DeliberateTransactionRollbackException(""String_Node_Str"" + uuidConfiguration.getUuidProperty() + ""String_Node_Str"");
      }
 else {
        uuidIndexer.deleteNodeFromIndex(change.getCurrent());
      }
    }
    if (!change.getPrevious().getProperty(uuidConfiguration.getUuidProperty()).equals(change.getCurrent().getProperty(uuidConfiguration.getUuidProperty()))) {
      if (isImmutable()) {
        throw new DeliberateTransactionRollbackException(""String_Node_Str"" + uuidConfiguration.getUuidProperty() + ""String_Node_Str"");
      }
 else {
        uuidIndexer.deleteNodeFromIndex(change.getCurrent());
        assignUuid(change.getCurrent());
      }
    }
  }
  for (  Relationship relationship : transactionData.getAllCreatedRelationships()) {
    assignUuid(relationship);
  }
  for (  Relationship rel : transactionData.getAllDeletedRelationships()) {
    uuidIndexer.deleteRelationshipFromIndex(rel);
  }
  for (  Change<Relationship> change : transactionData.getAllChangedRelationships()) {
    if (!change.getCurrent().hasProperty(uuidConfiguration.getUuidProperty())) {
      if (isImmutable()) {
        throw new DeliberateTransactionRollbackException(""String_Node_Str"" + uuidConfiguration.getUuidProperty() + ""String_Node_Str"");
      }
 else {
        uuidIndexer.deleteRelationshipFromIndex(change.getCurrent());
      }
    }
    if (!change.getPrevious().getProperty(uuidConfiguration.getUuidProperty()).equals(change.getCurrent().getProperty(uuidConfiguration.getUuidProperty()))) {
      if (isImmutable()) {
        throw new DeliberateTransactionRollbackException(""String_Node_Str"" + uuidConfiguration.getUuidProperty() + ""String_Node_Str"");
      }
 else {
        uuidIndexer.deleteRelationshipFromIndex(change.getCurrent());
        assignUuid(change.getCurrent());
      }
    }
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
@Override public Void beforeCommit(ImprovedTransactionData transactionData) throws DeliberateTransactionRollbackException {
  for (  Node node : transactionData.getAllCreatedNodes()) {
    assignUuid(node);
  }
  for (  Node node : transactionData.getAllDeletedNodes()) {
    uuidIndexer.deleteNodeFromIndex(node);
  }
  for (  Change<Node> change : transactionData.getAllChangedNodes()) {
    if (!change.getCurrent().hasProperty(uuidConfiguration.getUuidProperty())) {
      if (isImmutable()) {
        throw new DeliberateTransactionRollbackException(""String_Node_Str"" + uuidConfiguration.getUuidProperty() + ""String_Node_Str"");
      }
 else {
        uuidIndexer.deleteNodeFromIndex(change.getCurrent());
        continue;
      }
    }
    if (!change.getPrevious().getProperty(uuidConfiguration.getUuidProperty()).equals(change.getCurrent().getProperty(uuidConfiguration.getUuidProperty()))) {
      if (isImmutable()) {
        throw new DeliberateTransactionRollbackException(""String_Node_Str"" + uuidConfiguration.getUuidProperty() + ""String_Node_Str"");
      }
 else {
        uuidIndexer.deleteNodeFromIndex(change.getCurrent());
        assignUuid(change.getCurrent());
      }
    }
  }
  for (  Relationship relationship : transactionData.getAllCreatedRelationships()) {
    assignUuid(relationship);
  }
  for (  Relationship rel : transactionData.getAllDeletedRelationships()) {
    uuidIndexer.deleteRelationshipFromIndex(rel);
  }
  for (  Change<Relationship> change : transactionData.getAllChangedRelationships()) {
    if (!change.getCurrent().hasProperty(uuidConfiguration.getUuidProperty())) {
      if (isImmutable()) {
        throw new DeliberateTransactionRollbackException(""String_Node_Str"" + uuidConfiguration.getUuidProperty() + ""String_Node_Str"");
      }
 else {
        uuidIndexer.deleteRelationshipFromIndex(change.getCurrent());
        continue;
      }
    }
    if (!change.getPrevious().getProperty(uuidConfiguration.getUuidProperty()).equals(change.getCurrent().getProperty(uuidConfiguration.getUuidProperty()))) {
      if (isImmutable()) {
        throw new DeliberateTransactionRollbackException(""String_Node_Str"" + uuidConfiguration.getUuidProperty() + ""String_Node_Str"");
      }
 else {
        uuidIndexer.deleteRelationshipFromIndex(change.getCurrent());
        assignUuid(change.getCurrent());
      }
    }
  }
  return null;
}",0.992462311557789
169567,"@Test public void testUuidCanBeChangedWhenImmutableIsFalse() throws InterruptedException {
  database=new TestGraphDatabaseFactory().newImpermanentDatabaseBuilder().loadPropertiesFromFile(this.getClass().getClassLoader().getResource(""String_Node_Str"").getPath()).newGraphDatabase();
  getRuntime(database).waitUntilStarted();
  UuidApi api=new UuidApi(database);
  try (Transaction tx=database.beginTx()){
    Node node=database.createNode();
    node.addLabel(personLabel);
    node.setProperty(""String_Node_Str"",""String_Node_Str"");
    tx.success();
  }
   try (Transaction tx=database.beginTx()){
    for (    Node node : asIterable(database.findNodes(personLabel))) {
      assertTrue(node.hasProperty(UUID));
      assertFalse(node.getProperty(UUID).toString().contains(""String_Node_Str""));
      assertEquals(Long.valueOf(node.getId()),api.getNodeIdByUuid((String)node.getProperty(UUID)));
    }
    tx.success();
  }
   try (Transaction tx=database.beginTx()){
    for (    Node node : asIterable(database.findNodes(personLabel))) {
      node.setProperty(UUID,""String_Node_Str"" + String.valueOf(node.getId()));
    }
    tx.success();
  }
   try (Transaction tx=database.beginTx()){
    for (    Node node : asIterable(database.findNodes(personLabel))) {
      assertEquals(""String_Node_Str"" + String.valueOf(node.getId()),node.getProperty(UUID).toString());
    }
    tx.success();
  }
 }","@Test public void testUuidCanBeChangedWhenImmutableIsFalse() throws InterruptedException {
  database=new TestGraphDatabaseFactory().newImpermanentDatabaseBuilder().loadPropertiesFromFile(this.getClass().getClassLoader().getResource(""String_Node_Str"").getPath()).newGraphDatabase();
  getRuntime(database).waitUntilStarted();
  UuidApi api=new UuidApi(database);
  try (Transaction tx=database.beginTx()){
    Node node=database.createNode();
    node.addLabel(personLabel);
    node.setProperty(""String_Node_Str"",""String_Node_Str"");
    tx.success();
  }
   Long nodeId=null;
  String oldUuid=null;
  String newUuid=null;
  try (Transaction tx=database.beginTx()){
    for (    Node node : asIterable(database.findNodes(personLabel))) {
      assertTrue(node.hasProperty(UUID));
      nodeId=node.getId();
      oldUuid=(String)node.getProperty(UUID);
      assertEquals(nodeId,api.getNodeIdByUuid(oldUuid));
    }
    tx.success();
  }
   try (Transaction tx=database.beginTx()){
    for (    Node node : asIterable(database.findNodes(personLabel))) {
      newUuid=""String_Node_Str"" + nodeId;
      node.setProperty(UUID,newUuid);
    }
    tx.success();
  }
   try (Transaction tx=database.beginTx()){
    for (    Node node : asIterable(database.findNodes(personLabel))) {
      assertEquals(newUuid,node.getProperty(UUID).toString());
    }
    tx.success();
  }
   try (Transaction tx=database.beginTx()){
    assertEquals(nodeId,api.getNodeIdByUuid(newUuid));
    tx.success();
  }
   try (Transaction tx=database.beginTx()){
    try {
      api.getNodeIdByUuid(oldUuid);
      fail();
    }
 catch (    NotFoundException e) {
    }
  }
 }",0.5394218134034166
169568,"/** 
 * {@inheritDoc}
 */
@Override public void initialize(GraphDatabaseService database){
  new IterableInputBatchTransactionExecutor<>(database,BATCH_SIZE,new AllNodes(database,BATCH_SIZE),(db,node,batchNumber,stepNumber) -> {
    if (getConfiguration().getInclusionPolicies().getNodeInclusionPolicy().include(node)) {
      assignUuid(node);
    }
  }
).execute();
  new IterableInputBatchTransactionExecutor<>(database,BATCH_SIZE,new AllRelationships(database,BATCH_SIZE),(db,rel,batchNumber,stepNumber) -> {
    if (getConfiguration().getInclusionPolicies().getRelationshipInclusionPolicy().include(rel)) {
      assignUuid(rel);
    }
  }
).execute();
}","/** 
 * {@inheritDoc}
 */
@Override public void initialize(GraphDatabaseService database){
  if (new InstanceRoleUtils(database).getInstaceRole().isWritable()) {
    new IterableInputBatchTransactionExecutor<>(database,BATCH_SIZE,new AllNodes(database,BATCH_SIZE),(db,node,batchNumber,stepNumber) -> {
      if (getConfiguration().getInclusionPolicies().getNodeInclusionPolicy().include(node)) {
        assignUuid(node);
      }
    }
).execute();
    new IterableInputBatchTransactionExecutor<>(database,BATCH_SIZE,new AllRelationships(database,BATCH_SIZE),(db,rel,batchNumber,stepNumber) -> {
      if (getConfiguration().getInclusionPolicies().getRelationshipInclusionPolicy().include(rel)) {
        assignUuid(rel);
      }
    }
).execute();
  }
}",0.9327671620665252
169569,"/** 
 * {@inheritDoc}
 */
@Override public void initialize(GraphDatabaseService database){
  new IterableInputBatchTransactionExecutor<>(database,BATCH_SIZE,new TransactionCallback<Iterable<Node>>(){
    @Override public Iterable<Node> doInTransaction(    GraphDatabaseService database) throws Exception {
      return GlobalGraphOperations.at(database).getAllNodes();
    }
  }
,new UnitOfWork<Node>(){
    @Override public void execute(    GraphDatabaseService database,    Node node,    int batchNumber,    int stepNumber){
      assignUuid(node);
    }
  }
).execute();
}","/** 
 * {@inheritDoc}
 */
@Override public void initialize(GraphDatabaseService database){
  new IterableInputBatchTransactionExecutor<>(database,BATCH_SIZE,new TransactionCallback<Iterable<Node>>(){
    @Override public Iterable<Node> doInTransaction(    GraphDatabaseService database) throws Exception {
      return GlobalGraphOperations.at(database).getAllNodes();
    }
  }
,new UnitOfWork<Node>(){
    @Override public void execute(    GraphDatabaseService database,    Node node,    int batchNumber,    int stepNumber){
      if (getConfiguration().getInclusionStrategies().getNodeInclusionStrategy().include(node) && nodeToBeConsideredByModule(node)) {
        assignUuid(node);
      }
    }
  }
).execute();
}",0.8825347758887172
169570,"@Override public void execute(GraphDatabaseService database,Node node,int batchNumber,int stepNumber){
  assignUuid(node);
}","@Override public void execute(GraphDatabaseService database,Node node,int batchNumber,int stepNumber){
  if (getConfiguration().getInclusionStrategies().getNodeInclusionStrategy().include(node) && nodeToBeConsideredByModule(node)) {
    assignUuid(node);
  }
}",0.6458333333333334
169571,"public static void setHasFileDownloaded(Context context){
  File file=RomUpdate.getFullFile(context);
  int filesize=RomUpdate.getFileSize(context);
  boolean status=false;
  if (DEBUGGING)   Log.d(TAG,""String_Node_Str"" + file.getAbsolutePath());
  Log.d(TAG,""String_Node_Str"" + file.length());
  Log.d(TAG,""String_Node_Str"" + filesize);
  if (file.length() != 0 && file.length() == filesize) {
    status=true;
  }
  Preferences.setDownloadFinished(context,status);
}","public static void setHasFileDownloaded(Context context){
  File file=RomUpdate.getFullFile(context);
  int filesize=RomUpdate.getFileSize(context);
  boolean status=false;
  if (DEBUGGING) {
    Log.d(TAG,""String_Node_Str"" + file.getAbsolutePath());
    Log.d(TAG,""String_Node_Str"" + file.length());
    Log.d(TAG,""String_Node_Str"" + filesize);
  }
  if (file.length() != 0 && file.length() == filesize) {
    status=true;
  }
  Preferences.setDownloadFinished(context,status);
}",0.9873417721518988
169572,"@Override public IModule build(ItemStack stack){
  if (stack != null && stack.getItem() instanceof IModuleItem) {
  }
  return super.build(stack);
}","@Override public IModule build(ItemStack stack){
  if (stack != null && stack.getItem() instanceof IModuleItem) {
    IModule module=((IModuleItem)stack.getItem()).getModule(stack);
    if (module != null) {
      return module;
    }
  }
  return super.build(stack);
}",0.709832134292566
169573,"@Override public NBTTagCompound save(NBTTagCompound nbt){
  if (explosive != null) {
    nbt.setTag(""String_Node_Str"",explosive.writeToNBT(new NBTTagCompound()));
  }
  return nbt;
}","@Override public NBTTagCompound save(NBTTagCompound nbt){
  if (explosive != null) {
    nbt.setTag(NBT_EXPLOSIVE_ITEMSTACK,explosive.writeToNBT(new NBTTagCompound()));
  }
  return nbt;
}",0.9081081081081082
169574,"/** 
 * Loads the explosive item from the item save for the warhead.
 * @param nbt - warhead save data
 * @return new ItemStack as long as the nbt has the tag exItem
 */
public static ItemStack loadExplosiveItemFromNBT(NBTTagCompound nbt){
  if (nbt != null && nbt.hasKey(""String_Node_Str"")) {
    ItemStack explosive=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (explosive == null) {
      Engine.error(""String_Node_Str"");
    }
    return explosive;
  }
  return null;
}","/** 
 * Loads the explosive item from the item save for the warhead.
 * @param nbt - warhead save data
 * @return new ItemStack as long as the nbt has the tag exItem
 */
public static ItemStack loadExplosiveItemFromNBT(NBTTagCompound nbt){
  if (nbt != null && nbt.hasKey(NBT_EXPLOSIVE_ITEMSTACK)) {
    NBTTagCompound explosiveItemSave=nbt.getCompoundTag(NBT_EXPLOSIVE_ITEMSTACK);
    ItemStack explosiveItemStack=ItemStack.loadItemStackFromNBT(explosiveItemSave);
    if (explosiveItemStack == null) {
      Engine.error(""String_Node_Str"");
    }
    return explosiveItemStack;
  }
  return null;
}",0.7366515837104073
169575,"@Override public IWarhead getModule(ItemStack stack){
  return WarheadCasings.get(stack).buildModule(stack);
}","@Override public IWarhead getModule(ItemStack stack){
  IWarhead warhead=WarheadCasings.get(stack).buildModule(stack);
  if (warhead != null && stack.getTagCompound() != null) {
    warhead.load(stack.getTagCompound());
  }
  return warhead;
}",0.5835694050991501
169576,"/** 
 * Reads a tile entity from NBT.
 */
@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  setWarhead(null);
  if (nbt.hasKey(""String_Node_Str"")) {
    setWarhead(MissileModuleBuilder.INSTANCE.buildWarhead(ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""))));
  }
}","/** 
 * Reads a tile entity from NBT.
 */
@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  setWarhead(null);
  if (nbt.hasKey(""String_Node_Str"")) {
    NBTTagCompound warheadSave=nbt.getCompoundTag(""String_Node_Str"");
    ItemStack warheadStack=ItemStack.loadItemStackFromNBT(warheadSave);
    setWarhead(MissileModuleBuilder.INSTANCE.buildWarhead(warheadStack));
  }
}",0.7045769764216366
169577,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(FragmentEventHandler.INSTANCE);
  FMLCommonHandler.instance().bus().register(this);
  Engine.heatedRockRequested=true;
  Engine.requestOres();
  Engine.requestResources();
  Engine.requestSheetMetalContent();
  Engine.requestMultiBlock();
  Engine.requestSimpleTools();
  Engine.requestCircuits();
  Engine.requestCraftingParts();
  loader.applyModule(OCProxyICBM.class,Mods.OC.isLoaded());
  loader.applyModule(CCProxyICBM.class,Mods.CC.isLoaded());
  if (Loader.isModLoaded(""String_Node_Str"") && !getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"")) {
  }
  ANTIMATTER_BREAK_UNBREAKABLE=getConfig().getBoolean(""String_Node_Str"",Configuration.CATEGORY_GENERAL,true,""String_Node_Str"");
  DEBUG_MISSILE_MANAGER=getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",Engine.runningAsDev,""String_Node_Str"");
  missile_firing_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  missile_engine_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  ams_gun_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,4,""String_Node_Str"");
  ams_rotation_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  loader.preInit();
  blockWarhead=manager.newBlock(TileWarhead.class);
  blockCrashMissile=manager.newBlock(""String_Node_Str"",TileCrashedMissile.class);
  blockLauncherFrame=manager.newBlock(""String_Node_Str"",TileLauncherFrame.class);
  blockLauncherParts=manager.newBlock(""String_Node_Str"",BlockLauncherPart.class,ItemBlockMetadata.class);
  if (blockDirectSiloController == null) {
    blockDirectSiloController=manager.newBlock(""String_Node_Str"",TileSiloController.class);
  }
  blockAntenna=manager.newBlock(""String_Node_Str"",BlockAntennaParts.class,ItemBlockMetadata.class);
  blockCommandCentral=manager.newBlock(""String_Node_Str"",TileCommandController.class);
  blockCommandSiloConnector=manager.newBlock(""String_Node_Str"",TileCommandSiloConnector.class);
  blockLaunchPad=manager.newBlock(""String_Node_Str"",BlockLaunchPad.class,ItemBlockMetadata.class);
  blockCake=manager.newBlock(""String_Node_Str"",BlockFakeCake.class);
  NEIProxy.hideItem(blockCrashMissile);
  blockSiloController=manager.newBlock(""String_Node_Str"",TileLocalController.class);
  blockDisplayMissile=manager.newBlock(TileMissile.class);
  if (Engine.runningAsDev) {
    blockExplosiveMarker=manager.newBlock(BlockExplosiveMarker.class,ItemBlockMetadata.class);
  }
  manager.newBlock(""String_Node_Str"",TileSmallMag.class);
  itemMissileCart=manager.newItem(""String_Node_Str"",ItemMissileCart.class);
  itemMissile=manager.newItem(""String_Node_Str"",ItemMissile.class);
  itemRocketLauncher=manager.newItem(""String_Node_Str"",ItemRocketLauncher.class);
  itemEngineModules=manager.newItem(""String_Node_Str"",ItemEngineModules.class);
  itemGuidanceModules=manager.newItem(""String_Node_Str"",ItemGuidanceModules.class);
  itemLinkTool=manager.newItem(""String_Node_Str"",ItemLinkTool.class);
  itemGPSTool=manager.newItem(""String_Node_Str"",ItemGPSFlag.class);
  itemRadarGun=manager.newItem(""String_Node_Str"",ItemRadarGun.class);
  itemLaserDet=manager.newItem(""String_Node_Str"",ItemLaserDetonator.class);
  itemMissileParts=manager.newItem(""String_Node_Str"",ItemMissileParts.class);
  itemExplosive=manager.newItem(""String_Node_Str"",ItemExplosive.class);
  itemExplosivePart=manager.newItem(""String_Node_Str"",ItemExplosiveParts.class);
  itemRemoteDetonator=manager.newItem(""String_Node_Str"",ItemRemoteDetonator.class);
  itemTrigger=manager.newItem(""String_Node_Str"",ItemTriggerModules.class);
  NEIProxy.hideItem(ItemExplosive.ExplosiveItems.NBT.newItem());
  MissileCasings.register();
  WarheadCasings.register();
  Engines.register();
  GuidanceModules.register();
  Triggers.register();
  CREATIVE_TAB.itemStack=new ItemStack(itemRemoteDetonator);
  warheadsTab.itemStack=new ItemStack(blockWarhead);
  explosiveTab.itemStack=ItemExplosiveParts.ExplosiveParts.GUNPOWDER_CHARGE.newItem();
  getProxy().registerExplosives();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(FragmentEventHandler.INSTANCE);
  FMLCommonHandler.instance().bus().register(this);
  Engine.heatedRockRequested=true;
  Engine.requestOres();
  Engine.requestResources();
  Engine.requestSheetMetalContent();
  Engine.requestMultiBlock();
  Engine.requestSimpleTools();
  Engine.requestCircuits();
  Engine.requestCraftingParts();
  loader.applyModule(OCProxyICBM.class,Mods.OC.isLoaded());
  loader.applyModule(CCProxyICBM.class,Mods.CC.isLoaded());
  if (Loader.isModLoaded(""String_Node_Str"") && !getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"")) {
  }
  ANTIMATTER_BREAK_UNBREAKABLE=getConfig().getBoolean(""String_Node_Str"",Configuration.CATEGORY_GENERAL,true,""String_Node_Str"");
  DEBUG_MISSILE_MANAGER=getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",Engine.runningAsDev,""String_Node_Str"");
  missile_firing_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  missile_engine_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  ams_gun_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,4,""String_Node_Str"");
  ams_rotation_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  loader.preInit();
  blockWarhead=manager.newBlock(TileWarhead.class);
  blockCrashMissile=manager.newBlock(""String_Node_Str"",TileCrashedMissile.class);
  blockLauncherFrame=manager.newBlock(""String_Node_Str"",TileLauncherFrame.class);
  blockLauncherParts=manager.newBlock(""String_Node_Str"",BlockLauncherPart.class,ItemBlockMetadata.class);
  if (blockDirectSiloController == null) {
    blockDirectSiloController=manager.newBlock(""String_Node_Str"",TileSiloController.class);
  }
  blockAntenna=manager.newBlock(""String_Node_Str"",BlockAntennaParts.class,ItemBlockMetadata.class);
  blockCommandCentral=manager.newBlock(""String_Node_Str"",TileCommandController.class);
  blockCommandSiloConnector=manager.newBlock(""String_Node_Str"",TileCommandSiloConnector.class);
  blockLaunchPad=manager.newBlock(""String_Node_Str"",BlockLaunchPad.class,ItemBlockMetadata.class);
  blockCake=manager.newBlock(""String_Node_Str"",BlockFakeCake.class);
  NEIProxy.hideItem(blockCrashMissile);
  blockDisplayMissile=manager.newBlock(TileMissile.class);
  if (Engine.runningAsDev) {
    blockExplosiveMarker=manager.newBlock(BlockExplosiveMarker.class,ItemBlockMetadata.class);
  }
  manager.newBlock(""String_Node_Str"",TileSmallMag.class);
  itemMissileCart=manager.newItem(""String_Node_Str"",ItemMissileCart.class);
  itemMissile=manager.newItem(""String_Node_Str"",ItemMissile.class);
  itemRocketLauncher=manager.newItem(""String_Node_Str"",ItemRocketLauncher.class);
  itemEngineModules=manager.newItem(""String_Node_Str"",ItemEngineModules.class);
  itemGuidanceModules=manager.newItem(""String_Node_Str"",ItemGuidanceModules.class);
  itemLinkTool=manager.newItem(""String_Node_Str"",ItemLinkTool.class);
  itemGPSTool=manager.newItem(""String_Node_Str"",ItemGPSFlag.class);
  itemRadarGun=manager.newItem(""String_Node_Str"",ItemRadarGun.class);
  itemLaserDet=manager.newItem(""String_Node_Str"",ItemLaserDetonator.class);
  itemMissileParts=manager.newItem(""String_Node_Str"",ItemMissileParts.class);
  itemExplosive=manager.newItem(""String_Node_Str"",ItemExplosive.class);
  itemExplosivePart=manager.newItem(""String_Node_Str"",ItemExplosiveParts.class);
  itemRemoteDetonator=manager.newItem(""String_Node_Str"",ItemRemoteDetonator.class);
  itemTrigger=manager.newItem(""String_Node_Str"",ItemTriggerModules.class);
  NEIProxy.hideItem(ItemExplosive.ExplosiveItems.NBT.newItem());
  MissileCasings.register();
  WarheadCasings.register();
  Engines.register();
  GuidanceModules.register();
  Triggers.register();
  CREATIVE_TAB.itemStack=new ItemStack(itemRemoteDetonator);
  warheadsTab.itemStack=new ItemStack(blockWarhead);
  explosiveTab.itemStack=ItemExplosiveParts.ExplosiveParts.GUNPOWDER_CHARGE.newItem();
  getProxy().registerExplosives();
}",0.9898845650362964
169578,"@Override public void displayAllReleventItems(List list){
  add(list,ICBM.blockAMS);
  add(list,ICBM.blockFoFStation);
  add(list,ICBM.blockLauncherFrame);
  add(list,ICBM.blockLauncherParts);
  add(list,InventoryUtility.getBlock(""String_Node_Str""));
  add(list,ICBM.itemLinkTool);
  add(list,ICBM.itemGPSTool);
  add(list,ICBM.blockAntenna);
  add(list,ICBM.blockCommandCentral);
  add(list,ICBM.blockCommandSiloConnector);
  add(list,ICBM.blockCommandSiloDisplay);
  add(list,ICBM.itemRemoteDetonator);
  add(list,ICBM.itemRadarGun);
  add(list,ICBM.itemLaserDet);
  add(list,InventoryUtility.getBlock(""String_Node_Str""));
  add(list,ICBM.blockSiloController);
  add(list,ICBM.blockMissileWorkstation);
  add(list,ICBM.blockWarheadWorkstation);
  add(list,ICBM.blockSMAuto);
  add(list,ICBM.itemMissileCart);
  add(list,InventoryUtility.getBlock(""String_Node_Str""));
  add(list,ICBM.itemRocketLauncher);
  add(list,ICBM.itemEngineModules);
  add(list,ICBM.itemGuidanceModules);
  add(list,ICBM.itemMissileParts);
  add(list,ICBM.itemTrigger);
  add(list,ICBM.blockLaunchPad);
}","@Override public void displayAllReleventItems(List list){
  add(list,ICBM.blockAMS);
  add(list,ICBM.blockFoFStation);
  add(list,ICBM.blockLauncherFrame);
  add(list,ICBM.blockLauncherParts);
  add(list,InventoryUtility.getBlock(""String_Node_Str""));
  add(list,ICBM.itemLinkTool);
  add(list,ICBM.itemGPSTool);
  add(list,ICBM.blockAntenna);
  add(list,ICBM.blockCommandCentral);
  add(list,ICBM.blockCommandSiloConnector);
  add(list,ICBM.blockCommandSiloDisplay);
  add(list,ICBM.itemRemoteDetonator);
  add(list,ICBM.itemRadarGun);
  add(list,ICBM.itemLaserDet);
  add(list,InventoryUtility.getBlock(""String_Node_Str""));
  add(list,InventoryUtility.getBlock(""String_Node_Str""));
  add(list,ICBM.blockMissileWorkstation);
  add(list,ICBM.blockWarheadWorkstation);
  add(list,ICBM.blockSMAuto);
  add(list,ICBM.itemMissileCart);
  add(list,InventoryUtility.getBlock(""String_Node_Str""));
  add(list,ICBM.itemRocketLauncher);
  add(list,ICBM.itemEngineModules);
  add(list,ICBM.itemGuidanceModules);
  add(list,ICBM.itemMissileParts);
  add(list,ICBM.itemTrigger);
  add(list,ICBM.blockLaunchPad);
}",0.820018365472911
169579,"@Override public void onPostInit(){
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBM.blockFoFStation),""String_Node_Str"",""String_Node_Str"",'C',ICBM.blockSiloController,'R',UniversalRecipe.CIRCUIT_T2.get(),'P',UniversalRecipe.PRIMARY_PLATE.get()));
}","@Override public void onPostInit(){
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBM.blockFoFStation),""String_Node_Str"",""String_Node_Str"",'C',InventoryUtility.getBlock(""String_Node_Str""),'R',UniversalRecipe.CIRCUIT_T2.get(),'P',UniversalRecipe.PRIMARY_PLATE.get()));
}",0.8974358974358975
169580,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hit_x,float hit_y,float hit_z){
  if (player != null && stack != null && stack.getItem() == this) {
    if (world.isRemote) {
      return true;
    }
    final Location location=new Location(world,x,y,z);
    TileEntity tile=location.getTileEntity();
    if (tile instanceof IMultiTile) {
      IMultiTileHost host=((IMultiTile)tile).getHost();
      if (host instanceof TileEntity) {
        tile=(TileEntity)host;
      }
    }
    if (player.isSneaking()) {
      Location storedLocation=getLocation(stack);
      if (storedLocation != null && storedLocation.equals(location)) {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
        return true;
      }
      setLocation(stack,location);
      LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
      if (tile instanceof IPassCode) {
        setCode(stack,((IPassCode)tile).getCode());
      }
 else       if (tile instanceof ITileNodeHost && ((ITileNodeHost)tile).getTileNode() instanceof IPassCode) {
        setCode(stack,((IPassCode)((ITileNodeHost)tile).getTileNode()).getCode());
      }
      stack.setItemDamage(1);
      player.inventoryContainer.detectAndSendChanges();
      return true;
    }
 else {
      Location storedLocation=getLocation(stack);
      if (storedLocation != null) {
        if (!storedLocation.equals(location)) {
          if (!storedLocation.isAboveBedrock()) {
            LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            return true;
          }
 else           if (tile instanceof ILinkable) {
            String result=((ILinkable)tile).link(storedLocation,getCode(stack));
            if (result != null && !result.isEmpty()) {
              if (result.contains(""String_Node_Str"")) {
                String translation=LanguageUtility.getLocalName(result);
                if (translation == null || translation.isEmpty()) {
                  translation=""String_Node_Str"";
                }
                player.addChatComponentMessage(new ChatComponentText(TextColor.RED.getColorString() + translation));
              }
 else {
                LanguageUtility.addChatToPlayer(player,result);
              }
            }
 else {
              LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            }
            return true;
          }
 else {
            LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            return true;
          }
        }
 else {
          LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
          return true;
        }
      }
 else {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
        return true;
      }
    }
  }
  return false;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hit_x,float hit_y,float hit_z){
  if (player != null && stack != null && stack.getItem() == this) {
    if (world.isRemote) {
      return true;
    }
    final Location location=new Location(world,x,y,z);
    TileEntity tile=location.getTileEntity();
    if (tile instanceof IMultiTile) {
      IMultiTileHost host=((IMultiTile)tile).getHost();
      if (host instanceof TileEntity) {
        tile=(TileEntity)host;
      }
    }
    if (player.isSneaking()) {
      Location storedLocation=getLocation(stack);
      if (storedLocation != null && storedLocation.equals(location)) {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
        return true;
      }
      setLocation(stack,location);
      LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
      if (tile instanceof IPassCode) {
        setCode(stack,((IPassCode)tile).getCode());
      }
 else       if (tile instanceof ITileNodeHost && ((ITileNodeHost)tile).getTileNode() instanceof IPassCode) {
        setCode(stack,((IPassCode)((ITileNodeHost)tile).getTileNode()).getCode());
      }
      stack.setItemDamage(1);
      player.inventoryContainer.detectAndSendChanges();
      return true;
    }
 else {
      Location storedLocation=getLocation(stack);
      if (storedLocation != null) {
        if (!storedLocation.equals(location)) {
          if (!storedLocation.isAboveBedrock()) {
            LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            return true;
          }
 else           if (tile instanceof ILinkable || tile instanceof ITileNodeHost && ((ITileNodeHost)tile).getTileNode() instanceof ILinkable) {
            ILinkable linkable=tile instanceof ILinkable ? (ILinkable)tile : (ILinkable)((ITileNodeHost)tile).getTileNode();
            String result=linkable.link(storedLocation,getCode(stack));
            if (result != null && !result.isEmpty()) {
              if (result.contains(""String_Node_Str"")) {
                String translation=LanguageUtility.getLocalName(result);
                if (translation == null || translation.isEmpty()) {
                  translation=""String_Node_Str"";
                }
                player.addChatComponentMessage(new ChatComponentText(TextColor.RED.getColorString() + translation));
              }
 else {
                LanguageUtility.addChatToPlayer(player,result);
              }
            }
 else {
              LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            }
            return true;
          }
 else {
            LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            return true;
          }
        }
 else {
          LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
          return true;
        }
      }
 else {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
        return true;
      }
    }
  }
  return false;
}",0.951215307705568
169581,"@Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  super.drawGuiContainerForegroundLayer(mouseX,mouseY);
  if (ticks++ >= updateGuiTicks) {
    reloadData();
  }
  String name=LanguageUtility.getLocalName(controller.getInventoryName());
  if (editMode) {
    if (controller != null && controller.launcherData != null && controller.launcherData.size() > editMissile) {
      LauncherData data=controller.launcherData.get(editMissile);
      if (data.location != null) {
        Block block=data.location.getBlock(controller.world());
        if (block != null) {
          String localization=block.getLocalizedName();
          if (localization != null && !localization.contains(""String_Node_Str"")) {
            name=localization;
          }
        }
      }
    }
  }
  drawStringCentered(name,85,10);
  if (!editMode && (controller.launcherData == null || controller.launcherData.size() == 0)) {
    drawStringCentered(LanguageUtility.getLocal(""String_Node_Str""),85,40);
    drawStringCentered(LanguageUtility.getLocal(""String_Node_Str""),85,50);
  }
 else   if (editMode) {
    drawString(LanguageUtility.getLocalName(""String_Node_Str""),10,30);
    drawString(LanguageUtility.getLocalName(""String_Node_Str""),10,70);
  }
}","@Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  super.drawGuiContainerForegroundLayer(mouseX,mouseY);
  if (ticks++ >= updateGuiTicks) {
    reloadData();
  }
  String name=LanguageUtility.getLocalName(controller.getInventory().getInventoryName());
  if (editMode) {
    if (controller != null && controller.launcherData != null && controller.launcherData.size() > editMissile) {
      LauncherData data=controller.launcherData.get(editMissile);
      if (data.location != null) {
        Block block=data.location.getBlock(controller.world());
        if (block != null) {
          String localization=block.getLocalizedName();
          if (localization != null && !localization.contains(""String_Node_Str"")) {
            name=localization;
          }
        }
      }
    }
  }
  drawStringCentered(name,85,10);
  if (!editMode && (controller.launcherData == null || controller.launcherData.size() == 0)) {
    drawStringCentered(LanguageUtility.getLocal(""String_Node_Str""),85,40);
    drawStringCentered(LanguageUtility.getLocal(""String_Node_Str""),85,50);
  }
 else   if (editMode) {
    drawString(LanguageUtility.getLocalName(""String_Node_Str""),10,30);
    drawString(LanguageUtility.getLocalName(""String_Node_Str""),10,70);
  }
}",0.9940734887396286
169582,"@Override public void initGui(){
  super.initGui();
  int x=this.guiLeft + 10;
  int y=this.guiTop + 20;
  if (!editMode) {
    if (controller.launcherData != null) {
      String launcherName=LanguageUtility.getLocalName(""String_Node_Str"");
      String siloName=LanguageUtility.getLocalName(""String_Node_Str"");
      for (int i=0; i < controller.launcherData.size(); i++) {
        buttons=new GuiButton[controller.launcherData.size() * 2];
        String buttonName=launcherName;
        String name=""String_Node_Str"" + i;
        ITileNode tile=controller.launcherData.get(i).location.getTileNode(controller.world());
        if (tile instanceof TileAbstractLauncher) {
          if (tile instanceof TileSmallSilo || tile instanceof TileStandardSilo) {
            buttonName=siloName;
          }
          String n=((TileAbstractLauncher)tile).getCustomName();
          if (n != null && !n.isEmpty() && !n.equals(""String_Node_Str"")) {
            if (n.length() > 12) {
              n=n.substring(0,11) + ""String_Node_Str"";
            }
            name=n;
          }
        }
        buttonName+=""String_Node_Str"" + name + ""String_Node_Str"";
        buttons[i]=new GuiButton(i,x,y,120,20,buttonName);
        this.buttonList.add(buttons[i]);
        buttons[i + controller.launcherData.size()]=new GuiButton(i + controller.launcherData.size(),x + 125,y,30,20,LanguageUtility.getLocalName(""String_Node_Str""));
        if (controller.launcherData.get(i).missile == null) {
          buttons[i + controller.launcherData.size()].enabled=false;
        }
        this.buttonList.add(buttons[i + controller.launcherData.size()]);
        y+=22;
      }
    }
  }
 else {
    this.buttonList.add(new GuiButton(0,x + 65,y + 85,30,20,LanguageUtility.getLocalName(""String_Node_Str"")));
    this.buttonList.add(new GuiButton(1,x + 100,y + 85,50,20,LanguageUtility.getLocalName(""String_Node_Str"")));
    x=guiLeft + 10;
    y=guiTop + 42;
    ITileNode tile=controller.launcherData.get(editMissile).location.getTileNode(controller.world());
    if (tile instanceof TileAbstractLauncher && ((TileAbstractLauncher)tile).target != null) {
      this.x_field=this.newField(x,y,40,20,""String_Node_Str"" + ((TileAbstractLauncher)tile).target.xi());
      this.y_field=this.newField(x + 45,y,40,20,""String_Node_Str"" + ((TileAbstractLauncher)tile).target.yi());
      this.z_field=this.newField(x + 90,y,40,20,""String_Node_Str"" + ((TileAbstractLauncher)tile).target.zi());
      this.name_field=this.newField(x,y + 38,90,20,((TileAbstractLauncher)tile).getCustomName() != null ? ((TileAbstractLauncher)tile).getCustomName() : ""String_Node_Str"");
    }
  }
}","@Override public void initGui(){
  super.initGui();
  int x=this.guiLeft + 10;
  int y=this.guiTop + 20;
  if (!editMode) {
    if (controller.launcherData != null) {
      String launcherName=LanguageUtility.getLocalName(""String_Node_Str"");
      String siloName=LanguageUtility.getLocalName(""String_Node_Str"");
      for (int i=0; i < controller.launcherData.size(); i++) {
        buttons=new GuiButton[controller.launcherData.size() * 2];
        String buttonName=launcherName;
        String name=""String_Node_Str"" + i;
        ITileNode tile=controller.launcherData.get(i).location.getTileNode(controller.world());
        if (tile instanceof TileAbstractLauncher) {
          if (tile instanceof TileSmallSilo || tile instanceof TileStandardSilo) {
            buttonName=siloName;
          }
          String n=((TileAbstractLauncher)tile).getCustomName();
          if (n != null && !n.isEmpty() && !n.equals(""String_Node_Str"")) {
            if (n.length() > 12) {
              n=n.substring(0,11) + ""String_Node_Str"";
            }
            name=n;
          }
        }
        buttonName+=""String_Node_Str"" + name + ""String_Node_Str"";
        buttons[i]=new GuiButton(i,x,y,120,20,buttonName);
        this.buttonList.add(buttons[i]);
        buttons[i + controller.launcherData.size()]=new GuiButton(i + controller.launcherData.size(),x + 125,y,30,20,LanguageUtility.getLocalName(""String_Node_Str""));
        if (controller.launcherData.get(i).missile == null) {
          buttons[i + controller.launcherData.size()].enabled=false;
        }
        this.buttonList.add(buttons[i + controller.launcherData.size()]);
        y+=22;
      }
    }
  }
 else {
    this.buttonList.add(new GuiButton(0,x + 65,y + 85,30,20,LanguageUtility.getLocalName(""String_Node_Str"")));
    this.buttonList.add(new GuiButton(1,x + 100,y + 85,50,20,LanguageUtility.getLocalName(""String_Node_Str"")));
    x=guiLeft + 10;
    y=guiTop + 42;
    Pos location=controller.launcherData.get(editMissile).location;
    ITileNode tile=location.getTileNode(controller.world());
    if (tile instanceof TileAbstractLauncher && ((TileAbstractLauncher)tile).target != null) {
      this.x_field=this.newField(x,y,40,20,""String_Node_Str"" + ((TileAbstractLauncher)tile).target.xi());
      this.y_field=this.newField(x + 45,y,40,20,""String_Node_Str"" + ((TileAbstractLauncher)tile).target.yi());
      this.z_field=this.newField(x + 90,y,40,20,""String_Node_Str"" + ((TileAbstractLauncher)tile).target.zi());
      this.name_field=this.newField(x,y + 38,90,20,((TileAbstractLauncher)tile).getCustomName() != null ? ((TileAbstractLauncher)tile).getCustomName() : ""String_Node_Str"");
    }
  }
}",0.9795228254743564
169583,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hit_x,float hit_y,float hit_z){
  if (player != null && stack != null && stack.getItem() == this) {
    if (world.isRemote) {
      return true;
    }
    final Location location=new Location(world,x,y,z);
    TileEntity tile=location.getTileEntity();
    if (tile instanceof IMultiTile) {
      IMultiTileHost host=((IMultiTile)tile).getHost();
      if (host instanceof TileEntity) {
        tile=(TileEntity)host;
      }
    }
    if (player.isSneaking()) {
      Location storedLocation=getLocation(stack);
      if (storedLocation != null && storedLocation.equals(location)) {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
        return true;
      }
      setLocation(stack,location);
      LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
      if (tile instanceof IPassCode) {
        setCode(stack,((IPassCode)tile).getCode());
      }
      stack.setItemDamage(1);
      player.inventoryContainer.detectAndSendChanges();
      return true;
    }
 else {
      Location storedLocation=getLocation(stack);
      if (storedLocation != null) {
        if (!storedLocation.equals(location)) {
          if (!storedLocation.isAboveBedrock()) {
            LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            return true;
          }
 else           if (tile instanceof ILinkable) {
            String result=((ILinkable)tile).link(storedLocation,getCode(stack));
            if (result != null && !result.isEmpty()) {
              if (result.contains(""String_Node_Str"")) {
                String translation=LanguageUtility.getLocalName(result);
                if (translation == null || translation.isEmpty()) {
                  translation=""String_Node_Str"";
                }
                player.addChatComponentMessage(new ChatComponentText(TextColor.RED.getColorString() + translation));
              }
 else {
                LanguageUtility.addChatToPlayer(player,result);
              }
            }
 else {
              LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            }
            return true;
          }
 else {
            LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            return true;
          }
        }
 else {
          LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
          return true;
        }
      }
 else {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
        return true;
      }
    }
  }
  return false;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hit_x,float hit_y,float hit_z){
  if (player != null && stack != null && stack.getItem() == this) {
    if (world.isRemote) {
      return true;
    }
    final Location location=new Location(world,x,y,z);
    TileEntity tile=location.getTileEntity();
    if (tile instanceof IMultiTile) {
      IMultiTileHost host=((IMultiTile)tile).getHost();
      if (host instanceof TileEntity) {
        tile=(TileEntity)host;
      }
    }
    if (player.isSneaking()) {
      Location storedLocation=getLocation(stack);
      if (storedLocation != null && storedLocation.equals(location)) {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
        return true;
      }
      setLocation(stack,location);
      LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
      if (tile instanceof IPassCode) {
        setCode(stack,((IPassCode)tile).getCode());
      }
 else       if (tile instanceof ITileNodeHost && ((ITileNodeHost)tile).getTileNode() instanceof IPassCode) {
        setCode(stack,((IPassCode)((ITileNodeHost)tile).getTileNode()).getCode());
      }
      stack.setItemDamage(1);
      player.inventoryContainer.detectAndSendChanges();
      return true;
    }
 else {
      Location storedLocation=getLocation(stack);
      if (storedLocation != null) {
        if (!storedLocation.equals(location)) {
          if (!storedLocation.isAboveBedrock()) {
            LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            return true;
          }
 else           if (tile instanceof ILinkable) {
            String result=((ILinkable)tile).link(storedLocation,getCode(stack));
            if (result != null && !result.isEmpty()) {
              if (result.contains(""String_Node_Str"")) {
                String translation=LanguageUtility.getLocalName(result);
                if (translation == null || translation.isEmpty()) {
                  translation=""String_Node_Str"";
                }
                player.addChatComponentMessage(new ChatComponentText(TextColor.RED.getColorString() + translation));
              }
 else {
                LanguageUtility.addChatToPlayer(player,result);
              }
            }
 else {
              LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            }
            return true;
          }
 else {
            LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            return true;
          }
        }
 else {
          LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
          return true;
        }
      }
 else {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
        return true;
      }
    }
  }
  return false;
}",0.9629080118694362
169584,"@Override public ILauncher getSilo(){
  if (launcher instanceof TileEntity && ((TileEntity)launcher).isInvalid() || launcher instanceof Entity && !((Entity)launcher).isEntityAlive()) {
    launcher=null;
  }
  if (world() != null && launcher == null) {
    if (world().blockExists(x,y,z)) {
      TileEntity tile=world().getTileEntity(x,y,z);
      if (tile instanceof ILauncher) {
        launcher=(ILauncher)tile;
      }
    }
  }
  return launcher;
}","@Override public ILauncher getSilo(){
  if (launcher instanceof TileEntity && ((TileEntity)launcher).isInvalid() || launcher instanceof Entity && !((Entity)launcher).isEntityAlive() || launcher instanceof ITileNode && !((ITileNode)launcher).getHost().isHostValid()) {
    launcher=null;
  }
  if (world() != null && launcher == null) {
    if (world().blockExists(x,y,z)) {
      TileEntity tile=world().getTileEntity(x,y,z);
      if (tile instanceof ILauncher) {
        launcher=(ILauncher)tile;
      }
 else       if (tile instanceof ITileNodeHost && ((ITileNodeHost)tile).getTileNode() instanceof ILauncher) {
        launcher=(ILauncher)((ITileNodeHost)tile).getTileNode();
      }
    }
  }
  return launcher;
}",0.7740835464620631
169585,"@Override public String link(Location loc,short code){
  if (loc.world != world()) {
    return ""String_Node_Str"";
  }
  Pos pos=loc.toPos();
  if (!pos.isAboveBedrock()) {
    return ""String_Node_Str"";
  }
  if (distance(pos) > MAX_LINK_DISTANCE) {
    return ""String_Node_Str"";
  }
  TileEntity tile=pos.getTileEntity(loc.world());
  if (!(tile instanceof ILauncher)) {
    return ""String_Node_Str"";
  }
  if (tile instanceof IPassCode && ((IPassCode)tile).getCode() != code) {
    return ""String_Node_Str"";
  }
  if (!posToData.containsKey(pos)) {
    ISiloConnectionData data=new SiloConnectionData((ILauncher)tile);
    if (!siloData.contains(data)) {
      if (siloData.size() < MAX_CONNECTIONS) {
        siloData.add(data);
        posToData.put(pos,data);
        ((ILinkFeedback)tile).onLinked(toLocation());
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
 else {
      data=posToData.get(pos);
      siloData.add(data);
      posToData.put(pos,data);
      ((ILinkFeedback)tile).onLinked(toLocation());
      return ""String_Node_Str"";
    }
  }
 else {
    ISiloConnectionData data=posToData.get(pos);
    siloData.remove(data);
    posToData.remove(pos);
    return ""String_Node_Str"";
  }
}","@Override public String link(Location loc,short code){
  if (loc.world != world()) {
    return ""String_Node_Str"";
  }
  if (!loc.isAboveBedrock()) {
    return ""String_Node_Str"";
  }
  if (distance(loc) > MAX_LINK_DISTANCE) {
    return ""String_Node_Str"";
  }
  ILauncher launcher=getLauncher(loc);
  if (launcher != null) {
    if (launcher instanceof IPassCode && ((IPassCode)launcher).getCode() != code) {
      return ""String_Node_Str"";
    }
    Pos pos=loc.toPos();
    if (!posToData.containsKey(pos)) {
      ISiloConnectionData data=new SiloConnectionData(launcher);
      if (!siloData.contains(data)) {
        if (siloData.size() < MAX_CONNECTIONS) {
          siloData.add(data);
          posToData.put(pos,data);
          if (launcher instanceof ILinkFeedback) {
            ((ILinkFeedback)launcher).onLinked(toLocation());
          }
          return ""String_Node_Str"";
        }
 else {
          return ""String_Node_Str"";
        }
      }
 else {
        data=posToData.get(pos);
        siloData.add(data);
        posToData.put(pos,data);
        if (launcher instanceof ILinkFeedback) {
          ((ILinkFeedback)launcher).onLinked(toLocation());
        }
        return ""String_Node_Str"";
      }
    }
 else {
      ISiloConnectionData data=posToData.get(pos);
      siloData.remove(data);
      posToData.remove(pos);
      return ""String_Node_Str"";
    }
  }
 else {
    return ""String_Node_Str"";
  }
}",0.6552494415487714
169586,"@Override public BlockEdit changeBlock(Location location){
  if (location.getBlock() == Blocks.air)   return null;
  return new BlockEdit(location).set(Blocks.air,0,false,false);
}","@Override public BlockEdit changeBlock(Location location){
  if (location.getBlock() == Blocks.air)   return null;
  return new BlockEdit(location).set(Blocks.air,0,false,true);
}",0.98050139275766
169587,"@Override public void doEffectOther(boolean beforeBlocksPlaced){
  if (!beforeBlocksPlaced) {
    AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(x - size,y - size,z - size,z + size,y + size,z + size);
    List<EntityLivingBase> list=world.getEntitiesWithinAABB(EntityLivingBase.class,bounds);
    for (    EntityLivingBase entity : list) {
      double distanceToCenter=new Pos(entity).distance(x,y,z);
      if (distanceToCenter < (size / 2)) {
        float damage=(float)(size / 10);
        damage=(float)(damage - damage * (distanceToCenter / (size / 2)));
        int armorCount=InventoryUtility.getWornMetalCount(entity);
        if (armorCount > 0) {
          damage+=damage * armorCount * 0.25;
        }
        world.playSoundEffect(x,y,z,""String_Node_Str"",0.2F + world.rand.nextFloat() * 0.2F,0.9F + world.rand.nextFloat() * 0.15F);
        entity.attackEntityFrom(new DamageMicrowave(cause instanceof TriggerCause.TriggerCauseEntity ? ((TriggerCause.TriggerCauseEntity)cause).source : this,new Location(entity)),damage);
      }
      entity.setFire((int)(10 - 5 * (distanceToCenter / size)));
    }
    for (    Pos pos : metalBlocks) {
      double distanceToCenter=pos.distance(x,y,z);
      float damage=(float)(6 - 5 * (distanceToCenter / size));
      for (      EntityLivingBase entity : list) {
        if (pos.distance(entity) < 4 && world.rand.nextBoolean()) {
          world.playSoundEffect(pos.x(),pos.y(),pos.z(),""String_Node_Str"",0.2F + world.rand.nextFloat() * 0.2F,0.9F + world.rand.nextFloat() * 0.15F);
          entity.attackEntityFrom(new DamageElectrical(cause instanceof TriggerCause.TriggerCauseEntity ? ((TriggerCause.TriggerCauseEntity)cause).source : this,new Location(world,pos)),damage);
        }
      }
    }
  }
}","@Override public void doEffectOther(boolean beforeBlocksPlaced){
  AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(x - size,y - size,z - size,z + size,y + size,z + size);
  List<EntityLivingBase> list=world.getEntitiesWithinAABB(EntityLivingBase.class,bounds);
  for (  EntityLivingBase entity : list) {
    double distanceToCenter=new Pos(entity).distance(x,y,z);
    if (distanceToCenter < (size / 2)) {
      float damage=(float)(size / 10);
      damage=(float)(damage - damage * (distanceToCenter / (size / 2)));
      int armorCount=InventoryUtility.getWornMetalCount(entity);
      if (armorCount > 0) {
        damage+=damage * armorCount * 0.25;
      }
      world.playSoundEffect(x,y,z,""String_Node_Str"",0.2F + world.rand.nextFloat() * 0.2F,0.9F + world.rand.nextFloat() * 0.15F);
      entity.attackEntityFrom(new DamageMicrowave(cause instanceof TriggerCause.TriggerCauseEntity ? ((TriggerCause.TriggerCauseEntity)cause).source : this,new Location(entity)),damage);
    }
    entity.setFire((int)(10 - 5 * (distanceToCenter / size)));
  }
  if (!beforeBlocksPlaced) {
    for (    Pos pos : metalBlocks) {
      double distanceToCenter=pos.distance(x,y,z);
      float damage=(float)(6 - 5 * (distanceToCenter / size));
      for (      EntityLivingBase entity : list) {
        if (pos.distance(entity) < 4 && world.rand.nextBoolean()) {
          world.playSoundEffect(pos.x(),pos.y(),pos.z(),""String_Node_Str"",0.2F + world.rand.nextFloat() * 0.2F,0.9F + world.rand.nextFloat() * 0.15F);
          entity.attackEntityFrom(new DamageElectrical(cause instanceof TriggerCause.TriggerCauseEntity ? ((TriggerCause.TriggerCauseEntity)cause).source : this,new Location(world,pos)),damage);
        }
      }
    }
  }
}",0.9707903780068728
169588,"@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean b){
  String translation=Colors.DARK_GREY.code + LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
  list.add(translation);
  if (stack.getItemDamage() != ExplosiveItems.FRAGMENT.ordinal()) {
    final String translationKey=getUnlocalizedName(stack) + ""String_Node_Str"";
    translation=LanguageUtility.getLocal(translationKey);
    if (!translation.isEmpty() && !translation.equals(translationKey)) {
      if (translation.contains(""String_Node_Str"")) {
        String[] split=translation.split(""String_Node_Str"");
        for (        String s : split) {
          list.add(s.trim());
        }
      }
 else {
        list.add(translation);
      }
    }
  }
  if (stack.getItemDamage() == ExplosiveItems.BIOME_CHANGE.ordinal()) {
    int id=ExBiomeChange.getBiomeID(stack);
    if (id >= 0) {
      list.add(Colors.RED.code + LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str""));
      list.add(Colors.RED.code + LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str""));
      translation=LanguageUtility.getLocal(getUnlocalizedName(stack) + ""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + (BiomeGenBase.getBiome(id) == null ? Colors.RED.code + ""String_Node_Str"" : BiomeGenBase.getBiome(id).biomeName));
      list.add(translation);
    }
  }
  if (stack.getItemDamage() == ExplosiveItems.FRAGMENT.ordinal()) {
    list.add(Colors.RED.code + LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str""));
    final FragBlastType type=ExFragment.getFragmentType(stack);
    if (type == FragBlastType.ARROW) {
      translation=LanguageUtility.getLocal(getUnlocalizedName(stack) + ""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + BlastArrows.ARROWS);
      list.add(translation);
    }
 else     if (type == FragBlastType.BLAZE) {
      translation=LanguageUtility.getLocal(getUnlocalizedName(stack) + ""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + BlastArrows.ARROWS);
      list.add(translation);
    }
 else {
      translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
      list.add(translation);
      if (type.blockMaterial != null) {
        translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
        translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + (type.blockMaterial.blockHardness * BlastFragments.START_VELOCITY));
        list.add(translation);
      }
      int count=stack.stackSize * (int)ExplosiveItems.FRAGMENT.sizePerUnit;
      translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + count);
      list.add(translation);
      if (Engine.proxy.isShiftHeld()) {
        list.add(LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str""));
        translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
        translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + BlastFragments.START_VELOCITY);
        list.add(translation);
        translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
        translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + ExplosiveItems.FRAGMENT.sizePerUnit);
        list.add(translation);
      }
 else {
        translation=LanguageUtility.getLocal(""String_Node_Str"");
        translation=translation.replace(""String_Node_Str"",Colors.AQUA.code + ""String_Node_Str"");
        list.add(translation);
      }
    }
  }
 else {
    if (Engine.proxy.isShiftHeld()) {
      if (stack.getItemDamage() == ExplosiveItems.BIOME_CHANGE.ordinal()) {
        int id=ExBiomeChange.getBiomeID(stack);
        if (id >= 0) {
          translation=LanguageUtility.getLocal(getUnlocalizedName(stack) + ""String_Node_Str"");
          translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + id);
          list.add(translation);
        }
      }
      IExplosiveHandler handler=getExplosive(stack);
      translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + LanguageUtility.getLocal(handler.getTranslationKey()));
      list.add(translation);
      translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + ((int)((ExplosiveItems.values()[stack.getItemDamage()].sizePerUnit * handler.getYieldModifier()) * 100) / 100));
      list.add(translation);
    }
 else {
      translation=LanguageUtility.getLocal(""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",Colors.AQUA.code + ""String_Node_Str"");
      list.add(translation);
    }
  }
}","@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean b){
  String translation=Colors.DARK_GREY.code + LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
  list.add(translation);
  if (stack.getItemDamage() != ExplosiveItems.FRAGMENT.ordinal()) {
    final String translationKey=getUnlocalizedName(stack) + ""String_Node_Str"";
    translation=LanguageUtility.getLocal(translationKey);
    if (!translation.isEmpty() && !translation.equals(translationKey)) {
      if (translation.contains(""String_Node_Str"")) {
        String[] split=translation.split(""String_Node_Str"");
        for (        String s : split) {
          list.add(s.trim());
        }
      }
 else {
        list.add(translation);
      }
    }
  }
  if (stack.getItemDamage() == ExplosiveItems.BIOME_CHANGE.ordinal()) {
    int id=ExBiomeChange.getBiomeID(stack);
    if (id >= 0) {
      list.add(Colors.RED.code + LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str""));
      list.add(Colors.RED.code + LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str""));
      translation=LanguageUtility.getLocal(getUnlocalizedName(stack) + ""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + (BiomeGenBase.getBiome(id) == null ? Colors.RED.code + ""String_Node_Str"" : BiomeGenBase.getBiome(id).biomeName));
      list.add(translation);
    }
  }
  if (stack.getItemDamage() == ExplosiveItems.FRAGMENT.ordinal()) {
    list.add(Colors.RED.code + LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str""));
    final FragBlastType type=ExFragment.getFragmentType(stack);
    if (type == FragBlastType.ARROW) {
      translation=LanguageUtility.getLocal(getUnlocalizedName(stack) + ""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + BlastArrows.ARROWS);
      list.add(translation);
    }
 else     if (type == FragBlastType.BLAZE) {
      translation=LanguageUtility.getLocal(getUnlocalizedName(stack) + ""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + BlastArrows.ARROWS);
      list.add(translation);
    }
 else {
      translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
      list.add(translation);
      if (type.blockMaterial != null) {
        translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
        translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + (type.blockMaterial.blockHardness * BlastFragments.START_VELOCITY));
        list.add(translation);
      }
      int count=stack.stackSize * (int)ExplosiveItems.FRAGMENT.sizePerUnit;
      translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + count);
      list.add(translation);
      if (Engine.proxy.isShiftHeld()) {
        list.add(LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str""));
        translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
        translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + BlastFragments.START_VELOCITY);
        list.add(translation);
        translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
        translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + ExplosiveItems.FRAGMENT.sizePerUnit);
        list.add(translation);
      }
 else {
        translation=LanguageUtility.getLocal(""String_Node_Str"");
        translation=translation.replace(""String_Node_Str"",Colors.AQUA.code + ""String_Node_Str"");
        list.add(translation);
      }
    }
  }
 else {
    if (Engine.proxy.isShiftHeld()) {
      if (stack.getItemDamage() == ExplosiveItems.BIOME_CHANGE.ordinal()) {
        int id=ExBiomeChange.getBiomeID(stack);
        if (id >= 0) {
          translation=LanguageUtility.getLocal(getUnlocalizedName(stack) + ""String_Node_Str"");
          translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + id);
          list.add(translation);
        }
      }
      IExplosiveHandler handler=getExplosive(stack);
      translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + LanguageUtility.getLocalName(handler.getTranslationKey()));
      list.add(translation);
      translation=LanguageUtility.getLocal(getUnlocalizedName() + ""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",""String_Node_Str"" + ((int)((ExplosiveItems.values()[stack.getItemDamage()].sizePerUnit * handler.getYieldModifier()) * 100) / 100));
      list.add(translation);
    }
 else {
      translation=LanguageUtility.getLocal(""String_Node_Str"");
      translation=translation.replace(""String_Node_Str"",Colors.AQUA.code + ""String_Node_Str"");
      list.add(translation);
    }
  }
}",0.9995988768551946
169589,"@EventHandler public void init(FMLInitializationEvent event){
  EntityRegistry.registerGlobalEntityID(EntityMissile.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityMissile.class,""String_Node_Str"",ENTITY_ID_PREFIX + 3,this,500,1,true);
  EntityRegistry.registerGlobalEntityID(EntityFragment.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityFragment.class,""String_Node_Str"",ENTITY_ID_PREFIX + 4,this,500,1,true);
  EntityRegistry.registerGlobalEntityID(EntityCart.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityCart.class,""String_Node_Str"",ENTITY_ID_PREFIX + 5,this,500,1,true);
  super.init(event);
}","@EventHandler public void init(FMLInitializationEvent event){
  EntityRegistry.registerGlobalEntityID(EntityMissile.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityMissile.class,""String_Node_Str"",ENTITY_ID_PREFIX + 3,this,500,1,true);
  EntityRegistry.registerGlobalEntityID(EntityFragment.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityFragment.class,""String_Node_Str"",ENTITY_ID_PREFIX + 4,this,500,1,true);
  EntityRegistry.registerGlobalEntityID(EntityCart.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityCart.class,""String_Node_Str"",ENTITY_ID_PREFIX + 5,this,500,1,true);
  EntityRegistry.registerGlobalEntityID(EntitySlimeRain.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntitySlimeRain.class,""String_Node_Str"",ENTITY_ID_PREFIX + 6,this,500,1,true);
  super.init(event);
}",0.8679245283018868
169590,"/** 
 * Registers the explosives. Under normal runtime never call this method outside of the ICBM.class.
 */
public static void registerExplosives(){
  if (!registerExplosives) {
    registerExplosives=true;
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExplosiveHandlerSpawn());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExExoThermic());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExEndoThermic());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExFragment());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",ExplosiveRegistry.get(""String_Node_Str""));
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExAntimatter());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExFireBomb());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExFlashFire());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExEnderBlocks());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExTorchEater());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExAntiPlant());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExPlantLife());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExRegen());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExRegenLocal());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExMicroQuake());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExCake());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExBiomeChange());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExOrePuller());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExSlimeRain());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExEmp());
    if (Engine.runningAsDev) {
      ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,1));
      ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,2));
      ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,3));
      ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,10));
      ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,20));
    }
  }
}","/** 
 * Registers the explosives. Under normal runtime never call this method outside of the ICBM.class.
 */
public static void registerExplosives(){
  if (!registerExplosives) {
    registerExplosives=true;
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExplosiveHandlerSpawn());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExExoThermic());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExEndoThermic());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExFragment());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",ExplosiveRegistry.get(""String_Node_Str""));
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExAntimatter());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExFireBomb());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExFlashFire());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExEnderBlocks());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExTorchEater());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExAntiPlant());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExPlantLife());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExRegen());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExRegenLocal());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExMicroQuake());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExCake());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExBiomeChange());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExOrePuller());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExSlimeRain());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExEmp());
    ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExGravity());
    if (Engine.runningAsDev) {
      ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,1));
      ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,2));
      ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,3));
      ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,10));
      ExplosiveRegistry.registerOrGetExplosive(DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,20));
    }
  }
}",0.949438202247191
169591,"@Override public void init(){
  super.init();
  SharedAssets.loadModels();
  ClientRegistry.bindTileEntitySpecialRenderer(TileAntennaPart.class,new TESRAntenna());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(ICBM.blockAntenna),new ItemRendererAntennaFrame());
  MinecraftForgeClient.registerItemRenderer(ICBM.itemRocketLauncher,new RenderRocketLauncher());
  MinecraftForgeClient.registerItemRenderer(ICBM.itemMissile,RenderMissile.INSTANCE);
  RenderingRegistry.registerEntityRenderingHandler(EntityMissile.class,RenderMissile.INSTANCE);
  RenderingRegistry.registerEntityRenderingHandler(EntityCart.class,new RenderCart());
  RenderingRegistry.registerEntityRenderingHandler(EntityFragment.class,new RenderFragment());
  MinecraftForge.EVENT_BUS.register(this);
  FMLCommonHandler.instance().bus().register(this);
}","@Override public void init(){
  super.init();
  SharedAssets.loadModels();
  ClientRegistry.bindTileEntitySpecialRenderer(TileAntennaPart.class,new TESRAntenna());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(ICBM.blockAntenna),new ItemRendererAntennaFrame());
  MinecraftForgeClient.registerItemRenderer(ICBM.itemRocketLauncher,new RenderRocketLauncher());
  MinecraftForgeClient.registerItemRenderer(ICBM.itemMissile,RenderMissile.INSTANCE);
  RenderingRegistry.registerEntityRenderingHandler(EntityMissile.class,RenderMissile.INSTANCE);
  RenderingRegistry.registerEntityRenderingHandler(EntityCart.class,new RenderCart());
  RenderingRegistry.registerEntityRenderingHandler(EntityFragment.class,new RenderFragment());
  RenderingRegistry.registerEntityRenderingHandler(EntitySlimeRain.class,new RenderSlimeRain());
  MinecraftForge.EVENT_BUS.register(this);
  FMLCommonHandler.instance().bus().register(this);
}",0.9453521126760565
169592,"@Override public void registerExplosives(){
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExplosiveHandlerSpawn());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECExo());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECEndo());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECFragment());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",ExplosiveRegistry.get(""String_Node_Str""));
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECAntimatter());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECFireBomb());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECFlashFire());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECEnderBlocks());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECTorchEater());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECPlantLife());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECAntiPlant());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExRegen());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExRegenLocal());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExMicroQuake());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECCake());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECBiomeChange());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExOrePuller());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExSlimeRain());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECEmp());
  if (Engine.runningAsDev) {
    ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,1));
    ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,2));
    ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,3));
    ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,10));
    ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,20));
  }
}","@Override public void registerExplosives(){
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExplosiveHandlerSpawn());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECExo());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECEndo());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECFragment());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",ExplosiveRegistry.get(""String_Node_Str""));
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECAntimatter());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECFireBomb());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECFlashFire());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECEnderBlocks());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECTorchEater());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECPlantLife());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECAntiPlant());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExRegen());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExRegenLocal());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExMicroQuake());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECCake());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECBiomeChange());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExOrePuller());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExSlimeRain());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ECEmp());
  ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExGravity());
  if (Engine.runningAsDev) {
    ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,1));
    ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,2));
    ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,3));
    ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,10));
    ExplosiveRegistry.registerOrGetExplosive(ICBM.DOMAIN,""String_Node_Str"",new ExplosiveHandlerGeneric(""String_Node_Str"",BlastPathTester.class,20));
  }
}",0.9833850648165052
169593,"@Override public void displayAllReleventItems(List list){
  add(list,ICBM.blockAMS);
  add(list,ICBM.blockFoFStation);
  add(list,ICBM.blockLauncherFrame);
  add(list,ICBM.blockSmallSilo);
  add(list,ICBM.itemLinkTool);
  add(list,ICBM.itemGPSTool);
  add(list,ICBM.blockAntenna);
  add(list,ICBM.blockCommandCentral);
  add(list,ICBM.blockCommandSiloConnector);
  add(list,ICBM.blockCommandSiloDisplay);
  add(list,ICBM.itemRemoteDetonator);
  add(list,ICBM.itemRadarGun);
  add(list,ICBM.itemLaserDet);
  if (Engine.runningAsDev) {
    add(list,ICBM.blockStandardSilo);
  }
  add(list,ICBM.blockSiloController);
  add(list,ICBM.blockSmallPortableLauncher);
  add(list,ICBM.blockMissileWorkstation);
  add(list,ICBM.blockWarheadWorkstation);
  add(list,ICBM.blockSMAuto);
  add(list,ICBM.itemMissileCart);
  add(list,ICBM.blockSmallMissileMag);
  add(list,ICBM.itemRocketLauncher);
  add(list,ICBM.blockLauncherParts);
  add(list,ICBM.itemEngineModules);
  add(list,ICBM.itemGuidanceModules);
  add(list,ICBM.itemMissileParts);
  add(list,ICBM.itemTrigger);
  add(list,ICBM.blockLaunchPad);
}","@Override public void displayAllReleventItems(List list){
  add(list,ICBM.blockAMS);
  add(list,ICBM.blockFoFStation);
  add(list,ICBM.blockLauncherFrame);
  add(list,ICBM.blockLauncherParts);
  add(list,ICBM.blockSmallSilo);
  add(list,ICBM.itemLinkTool);
  add(list,ICBM.itemGPSTool);
  add(list,ICBM.blockAntenna);
  add(list,ICBM.blockCommandCentral);
  add(list,ICBM.blockCommandSiloConnector);
  add(list,ICBM.blockCommandSiloDisplay);
  add(list,ICBM.itemRemoteDetonator);
  add(list,ICBM.itemRadarGun);
  add(list,ICBM.itemLaserDet);
  if (Engine.runningAsDev) {
    add(list,ICBM.blockStandardSilo);
  }
  add(list,ICBM.blockSiloController);
  add(list,ICBM.blockSmallPortableLauncher);
  add(list,ICBM.blockMissileWorkstation);
  add(list,ICBM.blockWarheadWorkstation);
  add(list,ICBM.blockSMAuto);
  add(list,ICBM.itemMissileCart);
  add(list,ICBM.blockSmallMissileMag);
  add(list,ICBM.itemRocketLauncher);
  add(list,ICBM.itemEngineModules);
  add(list,ICBM.itemGuidanceModules);
  add(list,ICBM.itemMissileParts);
  add(list,ICBM.itemTrigger);
  add(list,ICBM.blockLaunchPad);
}",0.9661482159194876
169594,"@Override public boolean read(ByteBuf buf,int id,EntityPlayer player,PacketType type){
  if (!super.read(buf,id,player,type)) {
    if (isClient()) {
      if (id == 0) {
        NBTTagCompound tag=ByteBufUtils.readTag(buf);
        launcherData=new ArrayList();
        if (tag.hasKey(""String_Node_Str"")) {
          NBTTagList list=tag.getTagList(""String_Node_Str"",10);
          for (int i=0; i < list.tagCount(); i++) {
            launcherData.add(new LauncherData(list.getCompoundTagAt(i)));
          }
        }
        if (Minecraft.getMinecraft().currentScreen instanceof GuiLocalController) {
          ((GuiLocalController)Minecraft.getMinecraft().currentScreen).reloadData();
        }
        return true;
      }
    }
 else {
      if (id == 1) {
        removeLauncher(new Pos(buf));
        return true;
      }
 else       if (id == 2) {
        int index=buf.readInt();
        if (index == -1)         fireAllLaunchers(player);
 else         fireLauncher(index,player);
        return true;
      }
    }
    return false;
  }
  return true;
}","@Override public boolean read(ByteBuf buf,int id,EntityPlayer player,PacketType type){
  if (!super.read(buf,id,player,type)) {
    if (isClient()) {
      if (id == 0) {
        NBTTagCompound tag=ByteBufUtils.readTag(buf);
        launcherData=new ArrayList();
        if (tag.hasKey(""String_Node_Str"")) {
          NBTTagList list=tag.getTagList(""String_Node_Str"",10);
          for (int i=0; i < list.tagCount(); i++) {
            launcherData.add(new LauncherData(list.getCompoundTagAt(i)));
          }
        }
        if (Minecraft.getMinecraft().currentScreen instanceof GuiLocalController) {
          ((GuiLocalController)Minecraft.getMinecraft().currentScreen).reloadData();
        }
        return true;
      }
    }
 else {
      if (id == 1) {
        removeLauncher(new Pos(buf));
        return true;
      }
 else       if (id == 2) {
        int index=buf.readInt();
        if (index == -1) {
          fireAllLaunchers(player);
        }
 else {
          fireLauncher(index,player);
        }
        return true;
      }
    }
    return false;
  }
  return true;
}",0.9230055658627088
169595,"@Override public void doUpdateGuiUsers(){
  if (launcherLocations.size() > 0) {
    PacketTile packet;
    NBTTagCompound nbt=new NBTTagCompound();
    NBTTagList list=new NBTTagList();
    for (    TileAbstractLauncher launcher : getLaunchers()) {
      if (launcher.world() == world()) {
        list.appendTag(new LauncherData(launcher).toNBT());
      }
    }
    nbt.setTag(""String_Node_Str"",list);
    packet=new PacketTile(this,0,nbt);
    sendPacketToGuiUsers(packet);
  }
}","@Override public void doUpdateGuiUsers(){
  if (isServer() && launcherLocations.size() > 0) {
    PacketTile packet;
    NBTTagCompound nbt=new NBTTagCompound();
    NBTTagList list=new NBTTagList();
    for (    TileAbstractLauncher launcher : getLaunchers()) {
      if (launcher != null && !launcher.isInvalid() && launcher.world() == world()) {
        list.appendTag(new LauncherData(launcher).toNBT());
      }
    }
    nbt.setTag(""String_Node_Str"",list);
    packet=new PacketTile(this,0,nbt);
    sendPacketToGuiUsers(packet);
  }
}",0.9423264907135877
169596,"@Override public String link(Location loc,short code){
  if (loc.world != world())   return ""String_Node_Str"";
  Pos pos=loc.toPos();
  if (!pos.isAboveBedrock())   return ""String_Node_Str"";
  if (distance(pos) > MAX_LINK_DISTANCE)   return ""String_Node_Str"";
  TileEntity tile=pos.getTileEntity(loc.world());
  if (!(tile instanceof TileAbstractLauncher))   return ""String_Node_Str"";
  if (((IPassCode)tile).getCode() != code)   return ""String_Node_Str"";
  if (!launcherLocations.contains(pos)) {
    if (launcherLocations.size() < MAX_LAUNCHER_LINK) {
      launcherLocations.add(pos);
      ((ILinkFeedback)tile).onLinked(toLocation());
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    return ""String_Node_Str"";
  }
}","@Override public String link(Location loc,short code){
  if (loc.world != world()) {
    return ""String_Node_Str"";
  }
  Pos pos=loc.toPos();
  if (!pos.isAboveBedrock()) {
    return ""String_Node_Str"";
  }
  if (distance(pos) > MAX_LINK_DISTANCE) {
    return ""String_Node_Str"";
  }
  TileEntity tile=pos.getTileEntity(loc.world());
  if (!(tile instanceof TileAbstractLauncher)) {
    return ""String_Node_Str"";
  }
  if (((IPassCode)tile).getCode() != code) {
    return ""String_Node_Str"";
  }
  if (!launcherLocations.contains(pos)) {
    if (launcherLocations.size() < MAX_LAUNCHER_LINK) {
      launcherLocations.add(pos);
      ((ILinkFeedback)tile).onLinked(toLocation());
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    return ""String_Node_Str"";
  }
}",0.8040455120101138
169597,"/** 
 * Called to remove the launcher from the list
 * @param pos - location of the launcher
 */
protected void removeLauncher(Pos pos){
  if (isServer())   launcherLocations.remove(pos);
 else   sendPacketToServer(new PacketTile(this,1,pos));
}","/** 
 * Called to remove the launcher from the list
 * @param pos - location of the launcher
 */
protected void removeLauncher(Pos pos){
  if (isServer()) {
    launcherLocations.remove(pos);
  }
 else {
    sendPacketToServer(new PacketTile(this,1,pos));
  }
}",0.9525691699604744
169598,"/** 
 * Called to fire the launcher in the list of linked launchers
 * @param index - # in the launcher list
 * @param player
 */
protected void fireLauncher(int index,EntityPlayer player){
  if (isServer()) {
    if (index >= 0 && index < launcherLocations.size()) {
      Pos pos=launcherLocations.get(index);
      TileEntity tile=pos.getTileEntity(world());
      if (tile instanceof TileAbstractLauncher) {
        if (((TileAbstractLauncher)tile).fireMissile()) {
          ICBM.INSTANCE.logger().info(""String_Node_Str"" + player + ""String_Node_Str""+ tile);
        }
 else {
          ICBM.INSTANCE.logger().info(""String_Node_Str"" + player + ""String_Node_Str""+ tile);
        }
      }
    }
  }
 else {
    sendPacketToServer(new PacketTile(this,2,index));
  }
}","/** 
 * Called to fire the launcher in the list of linked launchers
 * @param index  - # in the launcher list
 * @param player
 */
protected void fireLauncher(int index,EntityPlayer player){
  if (isServer()) {
    if (index >= 0 && index < launcherLocations.size()) {
      Pos pos=launcherLocations.get(index);
      TileEntity tile=pos.getTileEntity(world());
      if (tile instanceof TileAbstractLauncher) {
        if (((TileAbstractLauncher)tile).fireMissile()) {
          ICBM.INSTANCE.logger().info(""String_Node_Str"" + player + ""String_Node_Str""+ tile);
        }
 else {
          ICBM.INSTANCE.logger().info(""String_Node_Str"" + player + ""String_Node_Str""+ tile);
        }
      }
    }
  }
 else {
    sendPacketToServer(new PacketTile(this,2,index));
  }
}",0.9993502274204028
169599,"@Override protected boolean onPlayerRightClick(EntityPlayer player,int side,Pos hit){
  if (player.getHeldItem() != null && player.getHeldItem().getItem() instanceof IWorldPosItem)   return false;
  if (isServer())   openGui(player,ICBM.INSTANCE);
  return true;
}","@Override protected boolean onPlayerRightClick(EntityPlayer player,int side,Pos hit){
  if (player.getHeldItem() != null && player.getHeldItem().getItem() instanceof IWorldPosItem) {
    return false;
  }
  if (isServer()) {
    openGui(player,ICBM.INSTANCE);
  }
  return true;
}",0.9705882352941176
169600,"private static boolean isRod(final ItemStack stack){
  return hasOreName(ROD_ORE_NAME,stack);
}","private static boolean isRod(final ItemStack stack){
  return hasOreName(OreNames.ROD_IRON,stack);
}",0.9128205128205128
169601,"private static boolean isPlate(final ItemStack stack){
  return hasOreName(PLATE_ORE_NAME,stack);
}","private static boolean isPlate(final ItemStack stack){
  return hasOreName(OreNames.PLATE_IRON,stack);
}",0.916256157635468
169602,"@Override public void load(NBTTagCompound nbt){
  int rods=nbt.getInteger(""String_Node_Str"");
  int plates=nbt.getInteger(""String_Node_Str"");
  if (rods > 0) {
    addRods(rods);
  }
  if (plates > 0) {
    addPlates(plates);
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    rocketComputer=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (rocketComputer != null && !(rocketComputer.getItem() instanceof IModuleItem)) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    rocketEngine=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (rocketEngine != null && !(rocketEngine.getItem() instanceof IModuleItem)) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    warhead=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (warhead != null && !(warhead.getItem() instanceof IModuleItem)) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (nbt.hasKey(""String_Node_Str"",10)) {
    itemsUsed.clear();
    NBTTagList list=nbt.getTagList(""String_Node_Str"",10);
    for (int i=0; i < list.tagCount(); i++) {
      ItemStack stack=ItemStack.loadItemStackFromNBT(list.getCompoundTagAt(i));
      if (stack != null) {
        itemsUsed.add(stack);
      }
 else {
        Engine.error(""String_Node_Str"" + this + ""String_Node_Str""+ list.getStringTagAt(i));
      }
    }
  }
 else {
    if (rods > 0) {
      addItems(ROD_ORE_NAME,rods);
    }
    if (plates > 0) {
      addItems(PLATE_ORE_NAME,plates);
    }
  }
}","@Override public void load(NBTTagCompound nbt){
  int rods=nbt.getInteger(""String_Node_Str"");
  int plates=nbt.getInteger(""String_Node_Str"");
  if (rods > 0) {
    addRods(rods);
  }
  if (plates > 0) {
    addPlates(plates);
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    rocketComputer=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (rocketComputer != null && !(rocketComputer.getItem() instanceof IModuleItem)) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    rocketEngine=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (rocketEngine != null && !(rocketEngine.getItem() instanceof IModuleItem)) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    warhead=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (warhead != null && !(warhead.getItem() instanceof IModuleItem)) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (nbt.hasKey(""String_Node_Str"",10)) {
    itemsUsed.clear();
    NBTTagList list=nbt.getTagList(""String_Node_Str"",10);
    for (int i=0; i < list.tagCount(); i++) {
      ItemStack stack=ItemStack.loadItemStackFromNBT(list.getCompoundTagAt(i));
      if (stack != null) {
        itemsUsed.add(stack);
      }
 else {
        Engine.error(""String_Node_Str"" + this + ""String_Node_Str""+ list.getStringTagAt(i));
      }
    }
  }
 else {
    if (rods > 0) {
      addItems(OreNames.ROD_IRON,rods);
    }
    if (plates > 0) {
      addItems(OreNames.PLATE_IRON,plates);
    }
  }
}",0.9881026925485284
169603,"@Override public ItemStack getCraftingResult(InventoryCrafting grid){
  Warhead warhead=null;
  ItemStack explosive=null;
  for (int i=0; i < grid.getSizeInventory(); i++) {
    final ItemStack slotStack=grid.getStackInSlot(i);
    final IExplosiveHandler slotExplosiveHandler=ExplosiveRegistry.get(slotStack);
    if (slotStack != null) {
      if (slotStack.getItem() instanceof IModuleItem) {
        IModule module=((IModuleItem)slotStack.getItem()).getModule(slotStack);
        if (module instanceof Warhead) {
          if (((Warhead)module).getExplosive() == null || ((Warhead)module).getExplosive() == craftingResult.getExplosive()) {
            warhead=((Warhead)module).clone();
          }
 else {
            return null;
          }
        }
      }
 else       if (slotExplosiveHandler == craftingResult.getExplosive()) {
        if (explosive == null) {
          explosive=slotStack.copy();
          explosive.stackSize=1;
        }
 else         if (InventoryUtility.stacksMatch(explosive,slotStack)) {
          explosive.stackSize+=1;
        }
 else {
          return null;
        }
      }
    }
  }
  if (warhead != null && explosive != null) {
    if (warhead.getExplosiveStack() == null) {
      warhead.setExplosiveStack(explosive.copy());
      return warhead.toStack();
    }
 else     if (warhead.getExplosiveStack().stackSize + explosive.stackSize <= warhead.getMaxExplosives()) {
      warhead.getExplosiveStack().stackSize+=explosive.stackSize;
      return warhead.toStack();
    }
  }
  return null;
}","@Override public ItemStack getCraftingResult(InventoryCrafting grid){
  Warhead warhead=null;
  ItemStack explosive=null;
  for (int i=0; i < grid.getSizeInventory(); i++) {
    final ItemStack slotStack=grid.getStackInSlot(i);
    final IExplosiveHandler slotExplosiveHandler=ExplosiveRegistry.get(slotStack);
    if (slotStack != null) {
      if (slotStack.getItem() instanceof IModuleItem) {
        IModule module=((IModuleItem)slotStack.getItem()).getModule(slotStack);
        if (module instanceof Warhead) {
          if (((Warhead)module).getExplosiveStack() == null || ((Warhead)module).getExplosive() == null || ((Warhead)module).getExplosive() == craftingResult.getExplosive()) {
            warhead=((Warhead)module).clone();
          }
 else {
            return null;
          }
        }
      }
 else       if (slotExplosiveHandler == craftingResult.getExplosive()) {
        if (explosive == null) {
          explosive=slotStack.copy();
          explosive.stackSize=1;
        }
 else         if (InventoryUtility.stacksMatch(explosive,slotStack)) {
          explosive.stackSize+=1;
        }
 else {
          return null;
        }
      }
    }
  }
  if (warhead != null && explosive != null) {
    if (warhead.getExplosiveStack() == null) {
      warhead.setExplosiveStack(explosive.copy());
      return warhead.toStack();
    }
 else     if (warhead.getExplosiveStack().stackSize + explosive.stackSize <= warhead.getMaxExplosives()) {
      warhead.getExplosiveStack().stackSize+=explosive.stackSize;
      return warhead.toStack();
    }
  }
  return null;
}",0.9843400447427292
169604,"@Override public boolean matches(InventoryCrafting grid,World world){
  Warhead warhead=null;
  boolean ex=false;
  int ex_count=0;
  for (int x=0; x < grid.getSizeInventory(); x++) {
    ItemStack slotStack=grid.getStackInSlot(x);
    if (slotStack != null) {
      if (slotStack.getItem() instanceof IModuleItem) {
        IModule module=((IModuleItem)slotStack.getItem()).getModule(slotStack);
        if (module instanceof Warhead) {
          if (warhead != null) {
            return false;
          }
 else           if (((Warhead)module).getExplosiveStack() == null || InventoryUtility.stacksMatch(((Warhead)module).getExplosiveStack(),inputTarget)) {
            warhead=((Warhead)module);
            if (warhead.getExplosiveStack() != null) {
              ex_count=warhead.getExplosiveStack().stackSize;
            }
          }
 else {
            return false;
          }
        }
      }
 else       if (InventoryUtility.stacksMatch(slotStack,inputTarget)) {
        ex_count++;
        ex=true;
      }
 else {
        return false;
      }
    }
  }
  return warhead != null && ex && warhead.getMaxExplosives() >= ex_count;
}","@Override public boolean matches(InventoryCrafting grid,World world){
  Warhead warhead=null;
  boolean ex=false;
  int ex_count=0;
  for (int x=0; x < grid.getSizeInventory(); x++) {
    ItemStack slotStack=grid.getStackInSlot(x);
    if (slotStack != null) {
      if (slotStack.getItem() instanceof IModuleItem) {
        IModule module=((IModuleItem)slotStack.getItem()).getModule(slotStack);
        if (module instanceof Warhead) {
          if (warhead != null) {
            return false;
          }
 else           if (((Warhead)module).getExplosive() == null || ((Warhead)module).getExplosiveStack() == null || InventoryUtility.stacksMatch(((Warhead)module).getExplosiveStack(),inputTarget)) {
            warhead=((Warhead)module);
            if (warhead.getExplosiveStack() != null) {
              ex_count+=warhead.getExplosiveStack().stackSize;
            }
          }
 else {
            return false;
          }
        }
      }
 else       if (InventoryUtility.stacksMatch(slotStack,inputTarget)) {
        ex_count++;
        ex=true;
      }
 else {
        return false;
      }
    }
  }
  return warhead != null && ex && warhead.getMaxExplosives() >= ex_count;
}",0.9764655541292256
169605,"public TileAMS(){
  super(""String_Node_Str"",Material.iron);
  this.hardness=15f;
  this.resistance=50f;
  this.itemBlock=ItemBlockICBM.class;
  this.renderNormalBlock=false;
  this.addInventoryModule(10);
}","public TileAMS(){
  super(""String_Node_Str"",Material.iron);
  this.itemBlock=ItemBlockAMSTurret.class;
  this.hardness=15f;
  this.resistance=50f;
  this.itemBlock=ItemBlockICBM.class;
  this.renderNormalBlock=false;
  this.addInventoryModule(10);
}",0.9054945054945056
169606,"@Override public void update(){
  super.update();
  if (isServer()) {
    deltaTime=(System.nanoTime() - lastRotationUpdate) / 10000000000.0;
    lastRotationUpdate=System.nanoTime();
    if (selector == null) {
      selector=new EntityTargetingSelector(this);
    }
    if (fireArea == null) {
      fireArea=new Cube(toPos().add(-100,-200,-100),toPos().add(100,200,100));
    }
    if (target != null && (target.isDead || !selector.isEntityApplicable(target) || toPos().distance(target) > 200)) {
      target=null;
    }
    if (target == null) {
      target=getClosestTarget();
    }
    if (ticks % 10 == 0 && !aim.isWithin(currentAim,ROTATION_SPEED)) {
    }
    currentAim.moveTowards(aim,ROTATION_SPEED,deltaTime).clampTo360();
    if (target != null) {
      if (ticks % 3 == 0) {
        Pos aimPoint=new Pos(this.target);
        Pos center=toPos().add(0.5);
        if (Engine.runningAsDev) {
          sendPacket(new PacketSpawnParticleStream(world().provider.dimensionId,center,aimPoint));
        }
        aim.set(center.toEulerAngle(aimPoint).clampTo360());
        sendAimPacket();
      }
      if (ticks % 5 == 0 && aim.isWithin(currentAim,3)) {
        fireAt(target);
      }
    }
 else     if (ticks % 3 == 0 && !aim.isZero()) {
      aim.set(defaultAim);
      sendAimPacket();
    }
  }
}","@Override public void update(){
  super.update();
  if (isServer()) {
    deltaTime=(System.nanoTime() - lastRotationUpdate) / 100000000.0;
    lastRotationUpdate=System.nanoTime();
    if (selector == null) {
      selector=new EntityTargetingSelector(this);
    }
    if (fireArea == null) {
      fireArea=new Cube(toPos().add(-100,-200,-100),toPos().add(100,200,100));
    }
    if (target != null && (target.isDead || !selector.isEntityApplicable(target) || toPos().distance(target) > 200)) {
      target=null;
    }
    if (target == null) {
      target=getClosestTarget();
    }
    if (ticks % 10 == 0 && !aim.isWithin(currentAim,ROTATION_SPEED)) {
    }
    currentAim.moveTowards(aim,ROTATION_SPEED,deltaTime).clampTo360();
    if (target != null) {
      if (ticks % 3 == 0) {
        Pos aimPoint=new Pos(this.target);
        Pos center=toPos().add(0.5);
        if (Engine.runningAsDev) {
          sendPacket(new PacketSpawnParticleStream(world().provider.dimensionId,center,aimPoint));
        }
        aim.set(center.toEulerAngle(aimPoint).clampTo360());
        sendAimPacket();
      }
      if (aim.isWithin(currentAim,1) && weaponTicks++ % 20 == 0) {
        fireAt(target);
        weaponTicks=0;
      }
    }
 else     if (ticks % 3 == 0 && !aim.isZero()) {
      aim.set(defaultAim);
      sendAimPacket();
    }
  }
}",0.9383921863260706
169607,"@Override public void renderInventoryItem(IItemRenderer.ItemRenderType type,ItemStack itemStack,Object... data){
  GL11.glTranslatef(0.5f,0,0.5f);
  GL11.glRotatef(90,0,1,0);
  FMLClientHandler.instance().getClient().renderEngine.bindTexture(Assets.AMS_TEXTURE);
  Assets.AMS_BOTTOM_MODEL.renderAll();
  GL11.glTranslatef(0,0.5f,0);
  FMLClientHandler.instance().getClient().renderEngine.bindTexture(Assets.AMS_TEXTURE);
  Assets.AMS_TOP_MODEL.renderAll();
}","@Override public void renderInventoryItem(IItemRenderer.ItemRenderType type,ItemStack itemStack,Object... data){
  GL11.glTranslatef(0.5f,0,0.5f);
  GL11.glRotatef(90,0,1,0);
  FMLClientHandler.instance().getClient().renderEngine.bindTexture(Assets.AMS_TEXTURE);
  Assets.AMS_BOTTOM_MODEL.renderAll();
  GL11.glTranslatef(0,0.5f,0);
  Assets.AMS_TOP_MODEL.renderAll();
}",0.893719806763285
169608,"@Override protected boolean onPlayerRightClick(EntityPlayer player,int side,Pos hit){
  if (isServer() && Engine.runningAsDev && player.getHeldItem() != null && player.getHeldItem().getItem() == Items.stick) {
    if (debugWindow == null) {
      debugWindow=new WindowAMSDebug(this);
      debugWindow.open();
    }
 else {
      debugWindow.close();
      debugWindow=null;
    }
    return true;
  }
  return super.onPlayerRightClick(player,side,hit);
}","@Override protected boolean onPlayerRightClick(EntityPlayer player,int side,Pos hit){
  if (Engine.runningAsDev && player.getHeldItem() != null && player.getHeldItem().getItem() == Items.stick) {
    if (debugWindow == null) {
      debugWindow=new WindowAMSDebug(this);
      debugWindow.open();
    }
 else {
      debugWindow.close();
      debugWindow=null;
    }
    return true;
  }
  return super.onPlayerRightClick(player,side,hit);
}",0.9844097995545658
169609,"@SideOnly(Side.CLIENT) public void renderDynamic(Pos pos,float deltaTime,int pass){
  if (!currentAim.isWithin(aim,1)) {
    currentAim.moveTowards(aim,ROTATION_SPEED,deltaTime).clampTo360();
  }
  lastRotationUpdate=System.nanoTime();
  GL11.glPushMatrix();
  GL11.glTranslatef(pos.xf() + 0.5f,pos.yf(),pos.zf() + 0.5f);
  GL11.glRotatef((float)((currentAim.yaw() + 90f) % 360),0,1,0);
  FMLClientHandler.instance().getClient().renderEngine.bindTexture(Assets.AMS_TEXTURE);
  Assets.AMS_BOTTOM_MODEL.renderAll();
  GL11.glTranslatef(0,0.5f,0);
  GL11.glRotatef((float)currentAim.pitch(),0,0,1);
  FMLClientHandler.instance().getClient().renderEngine.bindTexture(Assets.AMS_TEXTURE);
  Assets.AMS_TOP_MODEL.renderAll();
  GL11.glPopMatrix();
}","@SideOnly(Side.CLIENT) public void renderDynamic(Pos pos,float deltaTime,int pass){
  if (!currentAim.isWithin(aim,1)) {
    currentAim.moveTowards(aim,ROTATION_SPEED,deltaTime).clampTo360();
  }
  lastRotationUpdate=System.nanoTime();
  GL11.glPushMatrix();
  GL11.glTranslatef(pos.xf() + 0.5f,pos.yf(),pos.zf() + 0.5f);
  GL11.glRotatef((float)((currentAim.yaw() + 90f) % 360),0,1,0);
  FMLClientHandler.instance().getClient().renderEngine.bindTexture(Assets.AMS_TEXTURE);
  Assets.AMS_BOTTOM_MODEL.renderAll();
  GL11.glTranslatef(0,0.5f,0);
  GL11.glRotatef((float)currentAim.pitch(),0,0,1);
  Assets.AMS_TOP_MODEL.renderAll();
  GL11.glPopMatrix();
}",0.9370529327610873
169610,"public WindowAMSDebug(TileAMS ams){
  this.tile=ams;
  setLayout(new FlowLayout());
  yaw_label=new Label(""String_Node_Str"");
  pitch_label=new Label(""String_Node_Str"");
  add(yaw_label);
  add(pitch_label);
  setTitle(""String_Node_Str"");
  setSize(250,100);
}","public WindowAMSDebug(TileAMS ams){
  this.tile=ams;
  setLayout(new FlowLayout());
  yaw_label=new Label(""String_Node_Str"");
  pitch_label=new Label(""String_Node_Str"");
  add(yaw_label);
  add(pitch_label);
  if (tile.world().isRemote) {
    setTitle(""String_Node_Str"");
  }
 else {
    setTitle(""String_Node_Str"");
  }
  setSize(250,100);
}",0.8637873754152824
169611,"@Override public boolean update(){
  yaw_label.setText(String.format(""String_Node_Str"",tile.currentAim.yaw(),tile.aim.yaw()));
  yaw_label.setText(String.format(""String_Node_Str"",tile.currentAim.pitch(),tile.aim.pitch()));
  return true;
}","@Override public boolean update(){
  yaw_label.setText(String.format(""String_Node_Str"",tile.currentAim.yaw(),tile.aim.yaw()));
  pitch_label.setText(String.format(""String_Node_Str"",tile.currentAim.pitch(),tile.aim.pitch()));
  return true;
}",0.9833333333333332
169612,"@Override public boolean onPlayerRightClick(EntityPlayer player,int side,Pos hit){
  if (player.getHeldItem() != null && player.getHeldItem().getItem() == Items.stick) {
    if (Engine.runningAsDev) {
      if (isServer()) {
        player.addChatComponentMessage(new ChatComponentText(""String_Node_Str"" + getMissile()));
      }
      return true;
    }
  }
  if (getMissile() == null) {
    if (player.getHeldItem() != null && player.getHeldItem().getItem() instanceof IModularMissileItem) {
      if (isServer()) {
        Missile missile=MissileModuleBuilder.INSTANCE.buildMissile(player.getHeldItem());
        if (missile != null) {
          if (canAcceptMissile(missile)) {
            ItemStack copy=player.getHeldItem().copy();
            copy.stackSize=1;
            this.setInventorySlotContents(0,copy);
            if (!player.capabilities.isCreativeMode) {
              if (player.getHeldItem().stackSize <= 0) {
                copy=player.getHeldItem().copy();
                copy.stackSize--;
                if (copy.stackSize <= 0) {
                  player.inventory.setInventorySlotContents(player.inventory.currentItem,null);
                }
 else {
                  player.inventory.setInventorySlotContents(player.inventory.currentItem,copy);
                }
              }
              player.inventoryContainer.detectAndSendChanges();
            }
          }
 else {
            player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
          }
        }
 else {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        }
      }
      return true;
    }
    if (StandardMissileCrafting.isPartOfRecipe(player.getHeldItem())) {
      if (recipe == null) {
        triggerCraftingMode();
        this.recipe=new StandardMissileCrafting();
        player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
      }
      ItemStack heldItem=player.getHeldItem();
      if (heldItem != null) {
        if (isServer()) {
          heldItem=heldItem.copy();
          if (recipe.canAddItem(heldItem)) {
            if (!recipe.addItem(heldItem)) {
              if (!recipe.isFinished()) {
                player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
              }
 else {
                player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
              }
            }
 else             if (!InventoryUtility.stacksMatchExact(player.getHeldItem(),heldItem)) {
              if (heldItem.stackSize <= 0) {
                heldItem=null;
              }
              player.inventory.setInventorySlotContents(player.inventory.currentItem,heldItem);
              player.inventoryContainer.detectAndSendChanges();
              sendDescPacket();
            }
          }
 else {
            player.addChatComponentMessage(recipe.getCurrentRecipeChat());
          }
          return true;
        }
 else         if (Block.getBlockFromItem(player.getHeldItem().getItem()) == null) {
          if (isServer()) {
            player.addChatComponentMessage(recipe.getCurrentRecipeChat());
          }
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean onPlayerRightClick(EntityPlayer player,int side,Pos hit){
  if (player.getHeldItem() != null && player.getHeldItem().getItem() == Items.stick) {
    if (Engine.runningAsDev) {
      if (isServer()) {
        player.addChatComponentMessage(new ChatComponentText(""String_Node_Str"" + getMissile()));
      }
      return true;
    }
  }
  if (getMissile() == null) {
    if (player.getHeldItem() != null && player.getHeldItem().getItem() instanceof IModularMissileItem) {
      if (isServer()) {
        Missile missile=MissileModuleBuilder.INSTANCE.buildMissile(player.getHeldItem());
        if (missile != null) {
          if (canAcceptMissile(missile)) {
            ItemStack copy=player.getHeldItem().copy();
            copy.stackSize=1;
            this.setInventorySlotContents(0,copy);
            if (!player.capabilities.isCreativeMode) {
              player.getHeldItem().stackSize--;
              if (player.getHeldItem().stackSize <= 0) {
                player.inventory.setInventorySlotContents(player.inventory.currentItem,null);
              }
              player.inventoryContainer.detectAndSendChanges();
            }
          }
 else {
            player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
          }
        }
 else {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        }
      }
      return true;
    }
    if (StandardMissileCrafting.isPartOfRecipe(player.getHeldItem())) {
      if (recipe == null) {
        triggerCraftingMode();
        this.recipe=new StandardMissileCrafting();
        player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
      }
      ItemStack heldItem=player.getHeldItem();
      if (heldItem != null) {
        if (isServer()) {
          heldItem=heldItem.copy();
          if (recipe.canAddItem(heldItem)) {
            if (!recipe.addItem(heldItem)) {
              if (!recipe.isFinished()) {
                player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
              }
 else {
                player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
              }
            }
 else             if (!InventoryUtility.stacksMatchExact(player.getHeldItem(),heldItem)) {
              if (heldItem.stackSize <= 0) {
                heldItem=null;
              }
              player.inventory.setInventorySlotContents(player.inventory.currentItem,heldItem);
              player.inventoryContainer.detectAndSendChanges();
              sendDescPacket();
            }
          }
 else {
            player.addChatComponentMessage(recipe.getCurrentRecipeChat());
          }
          return true;
        }
 else         if (Block.getBlockFromItem(player.getHeldItem().getItem()) == null) {
          if (isServer()) {
            player.addChatComponentMessage(recipe.getCurrentRecipeChat());
          }
          return true;
        }
      }
    }
  }
  return false;
}",0.9580857555805364
169613,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hit_x,float hit_y,float hit_z){
  if (player != null && stack != null && stack.getItem() == this) {
    if (world.isRemote) {
      return true;
    }
    final Location location=new Location(world,x,y,z);
    TileEntity tile=location.getTileEntity();
    if (tile instanceof IMultiTile) {
      IMultiTileHost host=((IMultiTile)tile).getHost();
      if (host instanceof TileEntity) {
        tile=(TileEntity)host;
      }
    }
    if (player.isSneaking()) {
      setLocation(stack,location);
      LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
      if (tile instanceof IPassCode) {
        setCode(stack,((IPassCode)tile).getCode());
      }
      stack.setItemDamage(1);
      player.inventoryContainer.detectAndSendChanges();
      return true;
    }
 else {
      Location storedLocation=getLocation(stack);
      if (storedLocation == null || !storedLocation.isAboveBedrock()) {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
        return true;
      }
 else       if (tile instanceof ILinkable) {
        String result=((ILinkable)tile).link(getLocation(stack),getCode(stack));
        if (result != null && result != ""String_Node_Str"") {
          if (result.contains(""String_Node_Str"")) {
            String translation=LanguageUtility.getLocalName(result);
            if (translation == null || translation.isEmpty()) {
              translation=""String_Node_Str"";
            }
            player.addChatComponentMessage(new ChatComponentText(TextColor.RED.getColorString() + translation));
          }
 else {
            LanguageUtility.addChatToPlayer(player,result);
          }
        }
 else {
          LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
        }
        return true;
      }
    }
  }
  return false;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hit_x,float hit_y,float hit_z){
  if (player != null && stack != null && stack.getItem() == this) {
    if (world.isRemote) {
      return true;
    }
    final Location location=new Location(world,x,y,z);
    TileEntity tile=location.getTileEntity();
    if (tile instanceof IMultiTile) {
      IMultiTileHost host=((IMultiTile)tile).getHost();
      if (host instanceof TileEntity) {
        tile=(TileEntity)host;
      }
    }
    if (player.isSneaking()) {
      Location storedLocation=getLocation(stack);
      if (storedLocation != null && storedLocation.equals(location)) {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
        return true;
      }
      setLocation(stack,location);
      LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
      if (tile instanceof IPassCode) {
        setCode(stack,((IPassCode)tile).getCode());
      }
      stack.setItemDamage(1);
      player.inventoryContainer.detectAndSendChanges();
      return true;
    }
 else {
      Location storedLocation=getLocation(stack);
      if (storedLocation != null) {
        if (!storedLocation.equals(location)) {
          if (!storedLocation.isAboveBedrock()) {
            LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            return true;
          }
 else           if (tile instanceof ILinkable) {
            String result=((ILinkable)tile).link(storedLocation,getCode(stack));
            if (result != null && result != ""String_Node_Str"") {
              if (result.contains(""String_Node_Str"")) {
                String translation=LanguageUtility.getLocalName(result);
                if (translation == null || translation.isEmpty()) {
                  translation=""String_Node_Str"";
                }
                player.addChatComponentMessage(new ChatComponentText(TextColor.RED.getColorString() + translation));
              }
 else {
                LanguageUtility.addChatToPlayer(player,result);
              }
            }
 else {
              LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
            }
            return true;
          }
        }
 else {
          LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
          return true;
        }
      }
 else {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
        return true;
      }
    }
  }
  return false;
}",0.6382881857500569
169614,"@Override public String link(Location loc,short code){
  if (loc.world != world()) {
    return ""String_Node_Str"";
  }
  Pos pos=loc.toPos();
  if (!pos.isAboveBedrock()) {
    return ""String_Node_Str"";
  }
  if (distance(pos) > MAX_LINK_DISTANCE) {
    return ""String_Node_Str"";
  }
  TileEntity tile=pos.getTileEntity(loc.world());
  if (!(tile instanceof ILauncher)) {
    return ""String_Node_Str"";
  }
  if (tile instanceof IPassCode && ((IPassCode)tile).getCode() != code) {
    return ""String_Node_Str"";
  }
  if (!posToData.containsKey(pos)) {
    ISiloConnectionData data=new SiloConnectionData((ILauncher)tile);
    if (!siloData.contains(data)) {
      if (siloData.size() > MAX_CONNECTIONS) {
        siloData.add(data);
        posToData.put(pos,data);
        ((ILinkFeedback)tile).onLinked(toLocation());
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
 else {
      data=posToData.get(pos);
      siloData.add(data);
      posToData.put(pos,data);
      ((ILinkFeedback)tile).onLinked(toLocation());
      return ""String_Node_Str"";
    }
  }
 else {
    ISiloConnectionData data=posToData.get(pos);
    siloData.remove(data);
    posToData.remove(pos);
    return ""String_Node_Str"";
  }
}","@Override public String link(Location loc,short code){
  if (loc.world != world()) {
    return ""String_Node_Str"";
  }
  Pos pos=loc.toPos();
  if (!pos.isAboveBedrock()) {
    return ""String_Node_Str"";
  }
  if (distance(pos) > MAX_LINK_DISTANCE) {
    return ""String_Node_Str"";
  }
  TileEntity tile=pos.getTileEntity(loc.world());
  if (!(tile instanceof ILauncher)) {
    return ""String_Node_Str"";
  }
  if (tile instanceof IPassCode && ((IPassCode)tile).getCode() != code) {
    return ""String_Node_Str"";
  }
  if (!posToData.containsKey(pos)) {
    ISiloConnectionData data=new SiloConnectionData((ILauncher)tile);
    if (!siloData.contains(data)) {
      if (siloData.size() < MAX_CONNECTIONS) {
        siloData.add(data);
        posToData.put(pos,data);
        ((ILinkFeedback)tile).onLinked(toLocation());
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
 else {
      data=posToData.get(pos);
      siloData.add(data);
      posToData.put(pos,data);
      ((ILinkFeedback)tile).onLinked(toLocation());
      return ""String_Node_Str"";
    }
  }
 else {
    ISiloConnectionData data=posToData.get(pos);
    siloData.remove(data);
    posToData.remove(pos);
    return ""String_Node_Str"";
  }
}",0.9992019154030328
169615,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  MinecraftForge.EVENT_BUS.register(this);
  FMLCommonHandler.instance().bus().register(this);
  Engine.heatedRockRequested=true;
  Engine.requestOres();
  Engine.requestResources();
  Engine.requestSheetMetalContent();
  Engine.requestMultiBlock();
  Engine.requestSimpleTools();
  Engine.requestCircuits();
  loader.applyModule(OCProxyICBM.class,Mods.OC.isLoaded());
  loader.applyModule(CCProxyICBM.class,Mods.CC.isLoaded());
  if (Loader.isModLoaded(""String_Node_Str"") && !getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"")) {
    loader.applyModule(ThaumBlastLoader.class);
  }
  ANTIMATTER_BREAK_UNBREAKABLE=getConfig().getBoolean(""String_Node_Str"",Configuration.CATEGORY_GENERAL,true,""String_Node_Str"");
  DEBUG_MISSILE_MANAGER=getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",Engine.runningAsDev,""String_Node_Str"");
  missile_firing_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  missile_engine_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  ams_gun_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,4,""String_Node_Str"");
  ams_rotation_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  loader.preInit();
  blockWarhead=manager.newBlock(TileWarhead.class);
  blockMissileDisplay=manager.newBlock(TileMissileDisplay.class);
  blockLauncherFrame=manager.newBlock(""String_Node_Str"",BlockLauncherFrame.class,ItemBlockMetadata.class);
  blockLauncherParts=manager.newBlock(""String_Node_Str"",BlockLauncherPart.class,ItemBlockMetadata.class);
  if (blockDirectSiloController == null) {
    blockDirectSiloController=manager.newBlock(""String_Node_Str"",TileSiloController.class);
  }
  blockAntenna=manager.newBlock(""String_Node_Str"",BlockAntennaParts.class,ItemBlockMetadata.class);
  blockCommandCentral=manager.newBlock(""String_Node_Str"",TileCommandController.class);
  blockCommandSiloConnector=manager.newBlock(""String_Node_Str"",TileCommandSiloConnector.class);
  blockCommandSiloDisplay=manager.newBlock(""String_Node_Str"",TileSiloInterface.class);
  blockLaunchPad=manager.newBlock(""String_Node_Str"",BlockLaunchPad.class,ItemBlockMetadata.class);
  blockSmallPortableLauncher=manager.newBlock(TileSmallLauncher.class);
  blockSmallSilo=manager.newBlock(TileSmallSilo.class);
  blockStandardSilo=manager.newBlock(TileStandardSilo.class);
  blockMediumLauncher=manager.newBlock(TileMediumLauncher.class);
  blockLargeLauncher=manager.newBlock(TileLargeLauncher.class);
  blockCake=manager.newBlock(""String_Node_Str"",BlockFakeCake.class);
  blockMediumLauncher.setCreativeTab(null);
  blockLargeLauncher.setCreativeTab(null);
  NEIProxy.hideItem(blockMediumLauncher);
  NEIProxy.hideItem(blockLargeLauncher);
  blockSiloController=manager.newBlock(""String_Node_Str"",TileLocalController.class);
  blockMissile=manager.newBlock(TileMissile.class);
  if (Engine.runningAsDev) {
    blockExplosiveMarker=manager.newBlock(BlockExplosiveMarker.class,ItemBlockMetadata.class);
    manager.newBlock(TileRotationTest.class);
  }
  itemMissile=manager.newItem(""String_Node_Str"",ItemMissile.class);
  itemRocketLauncher=manager.newItem(""String_Node_Str"",ItemRocketLauncher.class);
  itemEngineModules=manager.newItem(""String_Node_Str"",ItemEngineModules.class);
  itemGuidanceModules=manager.newItem(""String_Node_Str"",ItemGuidanceModules.class);
  itemLinkTool=manager.newItem(""String_Node_Str"",ItemLinkTool.class);
  itemGPSTool=manager.newItem(""String_Node_Str"",ItemGPSFlag.class);
  itemMissileParts=manager.newItem(""String_Node_Str"",ItemMissileParts.class);
  itemExplosive=manager.newItem(""String_Node_Str"",ItemExplosive.class);
  itemExplosivePart=manager.newItem(""String_Node_Str"",ItemExplosiveParts.class);
  NEIProxy.hideItem(ItemExplosive.ExplosiveItems.NBT.newItem());
  MissileCasings.register();
  WarheadCasings.register();
  Engines.register();
  GuidanceModules.register();
  CREATIVE_TAB.itemStack=MissileCasings.SMALL.newModuleStack();
  getProxy().registerExplosives();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  MinecraftForge.EVENT_BUS.register(this);
  FMLCommonHandler.instance().bus().register(this);
  Engine.heatedRockRequested=true;
  Engine.requestOres();
  Engine.requestResources();
  Engine.requestSheetMetalContent();
  Engine.requestMultiBlock();
  Engine.requestSimpleTools();
  Engine.requestCircuits();
  loader.applyModule(OCProxyICBM.class,Mods.OC.isLoaded());
  loader.applyModule(CCProxyICBM.class,Mods.CC.isLoaded());
  if (Loader.isModLoaded(""String_Node_Str"") && !getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"")) {
    loader.applyModule(ThaumBlastLoader.class);
  }
  ANTIMATTER_BREAK_UNBREAKABLE=getConfig().getBoolean(""String_Node_Str"",Configuration.CATEGORY_GENERAL,true,""String_Node_Str"");
  DEBUG_MISSILE_MANAGER=getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",Engine.runningAsDev,""String_Node_Str"");
  missile_firing_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  missile_engine_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  ams_gun_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,4,""String_Node_Str"");
  ams_rotation_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  loader.preInit();
  blockWarhead=manager.newBlock(TileWarhead.class);
  blockMissileDisplay=manager.newBlock(TileMissileDisplay.class);
  blockLauncherFrame=manager.newBlock(""String_Node_Str"",BlockLauncherFrame.class,ItemBlockMetadata.class);
  blockLauncherParts=manager.newBlock(""String_Node_Str"",BlockLauncherPart.class,ItemBlockMetadata.class);
  if (blockDirectSiloController == null) {
    blockDirectSiloController=manager.newBlock(""String_Node_Str"",TileSiloController.class);
  }
  blockAntenna=manager.newBlock(""String_Node_Str"",BlockAntennaParts.class,ItemBlockMetadata.class);
  blockCommandCentral=manager.newBlock(""String_Node_Str"",TileCommandController.class);
  blockCommandSiloConnector=manager.newBlock(""String_Node_Str"",TileCommandSiloConnector.class);
  blockCommandSiloDisplay=manager.newBlock(""String_Node_Str"",TileSiloInterface.class);
  blockLaunchPad=manager.newBlock(""String_Node_Str"",BlockLaunchPad.class,ItemBlockMetadata.class);
  blockSmallPortableLauncher=manager.newBlock(TileSmallLauncher.class);
  blockSmallSilo=manager.newBlock(TileSmallSilo.class);
  blockStandardSilo=manager.newBlock(TileStandardSilo.class);
  blockMediumLauncher=manager.newBlock(TileMediumLauncher.class);
  blockLargeLauncher=manager.newBlock(TileLargeLauncher.class);
  blockCake=manager.newBlock(""String_Node_Str"",BlockFakeCake.class);
  blockMediumLauncher.setCreativeTab(null);
  blockLargeLauncher.setCreativeTab(null);
  NEIProxy.hideItem(blockMediumLauncher);
  NEIProxy.hideItem(blockLargeLauncher);
  blockSiloController=manager.newBlock(""String_Node_Str"",TileLocalController.class);
  blockMissile=manager.newBlock(TileMissile.class);
  if (Engine.runningAsDev) {
    blockExplosiveMarker=manager.newBlock(BlockExplosiveMarker.class,ItemBlockMetadata.class);
    manager.newBlock(TileRotationTest.class);
  }
  itemMissile=manager.newItem(""String_Node_Str"",ItemMissile.class);
  itemRocketLauncher=manager.newItem(""String_Node_Str"",ItemRocketLauncher.class);
  itemEngineModules=manager.newItem(""String_Node_Str"",ItemEngineModules.class);
  itemGuidanceModules=manager.newItem(""String_Node_Str"",ItemGuidanceModules.class);
  itemLinkTool=manager.newItem(""String_Node_Str"",ItemLinkTool.class);
  itemGPSTool=manager.newItem(""String_Node_Str"",ItemGPSFlag.class);
  itemMissileParts=manager.newItem(""String_Node_Str"",ItemMissileParts.class);
  itemExplosive=manager.newItem(""String_Node_Str"",ItemExplosive.class);
  itemExplosivePart=manager.newItem(""String_Node_Str"",ItemExplosiveParts.class);
  itemRemoteDetonator=manager.newItem(""String_Node_Str"",ItemRemoteDetonator.class);
  NEIProxy.hideItem(ItemExplosive.ExplosiveItems.NBT.newItem());
  MissileCasings.register();
  WarheadCasings.register();
  Engines.register();
  GuidanceModules.register();
  CREATIVE_TAB.itemStack=MissileCasings.SMALL.newModuleStack();
  getProxy().registerExplosives();
}",0.9900450343683336
169616,"/** 
 * Called to open the GUI for adjusting this silo's settings. <p> Close the existing GUI, but keep track of its data. This way the Gui can be reopened. <p> If client side ignore the call. This should always be called server side to ensure the container opens on the server.
 * @param player   - player to open the GUI for
 * @param location - location of the tile to reopen the GUI for
 */
void openGui(EntityPlayer player,IWorldPosition location);","/** 
 * Called to open the GUI for adjusting this silo's settings. <p> Close the existing GUI, but keep track of its data. This way the Gui can be reopened. <p> If client side ignore the call. This should always be called server side to ensure the container opens on the server.
 * @param player      - player to open the GUI for
 * @param openingTile - tile that opened the GUI
 * @param connector       - tile that provided the connection
 */
void openGui(EntityPlayer player,TileEntity openingTile,ISiloConnectionPoint connector);",0.7931034482758621
169617,"@Override public void displayAllReleventItems(List list){
  add(list,ICBM.blockAMS);
  add(list,ICBM.blockFoFStation);
  add(list,ICBM.blockLauncherFrame);
  add(list,ICBM.blockSmallSilo);
  add(list,ICBM.blockAntenna);
  add(list,ICBM.blockCommandCentral);
  add(list,ICBM.blockCommandSiloConnector);
  add(list,ICBM.blockCommandSiloDisplay);
  if (Engine.runningAsDev) {
    add(list,ICBM.blockStandardSilo);
  }
  add(list,ICBM.blockSiloController);
  add(list,ICBM.blockSmallPortableLauncher);
  add(list,ICBM.blockMissileWorkstation);
  add(list,ICBM.itemLinkTool);
  add(list,ICBM.itemGPSTool);
  add(list,ICBM.itemRocketLauncher);
  add(list,ICBM.blockLauncherParts);
  add(list,ICBM.itemMissile);
  add(list,ICBM.blockWarhead);
  add(list,ICBM.itemExplosive);
  add(list,ICBM.itemEngineModules);
  add(list,ICBM.itemGuidanceModules);
  add(list,ICBM.itemMissileParts);
  add(list,ICBM.itemExplosivePart);
}","@Override public void displayAllReleventItems(List list){
  add(list,ICBM.blockAMS);
  add(list,ICBM.blockFoFStation);
  add(list,ICBM.blockLauncherFrame);
  add(list,ICBM.blockSmallSilo);
  add(list,ICBM.blockAntenna);
  add(list,ICBM.blockCommandCentral);
  add(list,ICBM.blockCommandSiloConnector);
  add(list,ICBM.blockCommandSiloDisplay);
  add(list,ICBM.itemRemoteDetonator);
  if (Engine.runningAsDev) {
    add(list,ICBM.blockStandardSilo);
  }
  add(list,ICBM.blockSiloController);
  add(list,ICBM.blockSmallPortableLauncher);
  add(list,ICBM.blockMissileWorkstation);
  add(list,ICBM.itemLinkTool);
  add(list,ICBM.itemGPSTool);
  add(list,ICBM.itemRocketLauncher);
  add(list,ICBM.blockLauncherParts);
  add(list,ICBM.itemMissile);
  add(list,ICBM.blockWarhead);
  add(list,ICBM.itemExplosive);
  add(list,ICBM.itemEngineModules);
  add(list,ICBM.itemGuidanceModules);
  add(list,ICBM.itemMissileParts);
  add(list,ICBM.itemExplosivePart);
}",0.979635584137192
169618,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  MinecraftForge.EVENT_BUS.register(this);
  FMLCommonHandler.instance().bus().register(this);
  Engine.heatedRockRequested=true;
  Engine.requestOres();
  Engine.requestResources();
  Engine.requestSheetMetalContent();
  Engine.requestMultiBlock();
  Engine.requestSimpleTools();
  Engine.requestCircuits();
  loader.applyModule(OCProxyICBM.class,Mods.OC.isLoaded());
  loader.applyModule(CCProxyICBM.class,Mods.CC.isLoaded());
  if (Loader.isModLoaded(""String_Node_Str"") && !getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"")) {
    loader.applyModule(ThaumBlastLoader.class);
  }
  ANTIMATTER_BREAK_UNBREAKABLE=getConfig().getBoolean(""String_Node_Str"",Configuration.CATEGORY_GENERAL,true,""String_Node_Str"");
  DEBUG_MISSILE_MANAGER=getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",Engine.runningAsDev,""String_Node_Str"");
  missile_firing_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  missile_engine_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  ams_gun_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,4,""String_Node_Str"");
  ams_rotation_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  loader.preInit();
  blockWarhead=manager.newBlock(TileWarhead.class);
  blockMissileDisplay=manager.newBlock(TileMissileDisplay.class);
  blockLauncherFrame=manager.newBlock(""String_Node_Str"",BlockLauncherFrame.class,ItemBlockMetadata.class);
  blockLauncherParts=manager.newBlock(""String_Node_Str"",BlockLauncherPart.class,ItemBlockMetadata.class);
  if (blockDirectSiloController == null) {
    blockDirectSiloController=manager.newBlock(""String_Node_Str"",TileSiloController.class);
  }
  blockAntenna=manager.newBlock(""String_Node_Str"",BlockAntennaParts.class,ItemBlockMetadata.class);
  blockCommandCentral=manager.newBlock(""String_Node_Str"",TileCommandController.class);
  blockLaunchPad=manager.newBlock(""String_Node_Str"",BlockLaunchPad.class,ItemBlockMetadata.class);
  blockSmallPortableLauncher=manager.newBlock(TileSmallLauncher.class);
  blockSmallSilo=manager.newBlock(TileSmallSilo.class);
  blockStandardSilo=manager.newBlock(TileStandardSilo.class);
  blockMediumLauncher=manager.newBlock(TileMediumLauncher.class);
  blockLargeLauncher=manager.newBlock(TileLargeLauncher.class);
  blockCake=manager.newBlock(""String_Node_Str"",BlockFakeCake.class);
  blockMediumLauncher.setCreativeTab(null);
  blockLargeLauncher.setCreativeTab(null);
  NEIProxy.hideItem(blockMediumLauncher);
  NEIProxy.hideItem(blockLargeLauncher);
  blockSiloController=manager.newBlock(""String_Node_Str"",TileController.class);
  blockMissile=manager.newBlock(TileMissile.class);
  if (Engine.runningAsDev) {
    blockExplosiveMarker=manager.newBlock(BlockExplosiveMarker.class,ItemBlockMetadata.class);
    manager.newBlock(TileRotationTest.class);
  }
  itemMissile=manager.newItem(""String_Node_Str"",ItemMissile.class);
  itemRocketLauncher=manager.newItem(""String_Node_Str"",ItemRocketLauncher.class);
  itemEngineModules=manager.newItem(""String_Node_Str"",ItemEngineModules.class);
  itemGuidanceModules=manager.newItem(""String_Node_Str"",ItemGuidanceModules.class);
  itemLinkTool=manager.newItem(""String_Node_Str"",ItemLinkTool.class);
  itemGPSTool=manager.newItem(""String_Node_Str"",ItemGPSFlag.class);
  itemMissileParts=manager.newItem(""String_Node_Str"",ItemMissileParts.class);
  itemExplosive=manager.newItem(""String_Node_Str"",ItemExplosive.class);
  itemExplosivePart=manager.newItem(""String_Node_Str"",ItemExplosiveParts.class);
  NEIProxy.hideItem(ItemExplosive.ExplosiveItems.NBT.newItem());
  MissileCasings.register();
  WarheadCasings.register();
  Engines.register();
  GuidanceModules.register();
  CREATIVE_TAB.itemStack=MissileCasings.SMALL.newModuleStack();
  getProxy().registerExplosives();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  MinecraftForge.EVENT_BUS.register(this);
  FMLCommonHandler.instance().bus().register(this);
  FMLCommonHandler.instance().bus().register(new WirelessGridManager());
  Engine.heatedRockRequested=true;
  Engine.requestOres();
  Engine.requestResources();
  Engine.requestSheetMetalContent();
  Engine.requestMultiBlock();
  Engine.requestSimpleTools();
  Engine.requestCircuits();
  loader.applyModule(OCProxyICBM.class,Mods.OC.isLoaded());
  loader.applyModule(CCProxyICBM.class,Mods.CC.isLoaded());
  if (Loader.isModLoaded(""String_Node_Str"") && !getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"")) {
    loader.applyModule(ThaumBlastLoader.class);
  }
  ANTIMATTER_BREAK_UNBREAKABLE=getConfig().getBoolean(""String_Node_Str"",Configuration.CATEGORY_GENERAL,true,""String_Node_Str"");
  DEBUG_MISSILE_MANAGER=getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",Engine.runningAsDev,""String_Node_Str"");
  missile_firing_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  missile_engine_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  ams_gun_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,4,""String_Node_Str"");
  ams_rotation_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,1,""String_Node_Str"");
  loader.preInit();
  blockWarhead=manager.newBlock(TileWarhead.class);
  blockMissileDisplay=manager.newBlock(TileMissileDisplay.class);
  blockLauncherFrame=manager.newBlock(""String_Node_Str"",BlockLauncherFrame.class,ItemBlockMetadata.class);
  blockLauncherParts=manager.newBlock(""String_Node_Str"",BlockLauncherPart.class,ItemBlockMetadata.class);
  if (blockDirectSiloController == null) {
    blockDirectSiloController=manager.newBlock(""String_Node_Str"",TileSiloController.class);
  }
  blockAntenna=manager.newBlock(""String_Node_Str"",BlockAntennaParts.class,ItemBlockMetadata.class);
  blockCommandCentral=manager.newBlock(""String_Node_Str"",TileCommandController.class);
  blockLaunchPad=manager.newBlock(""String_Node_Str"",BlockLaunchPad.class,ItemBlockMetadata.class);
  blockSmallPortableLauncher=manager.newBlock(TileSmallLauncher.class);
  blockSmallSilo=manager.newBlock(TileSmallSilo.class);
  blockStandardSilo=manager.newBlock(TileStandardSilo.class);
  blockMediumLauncher=manager.newBlock(TileMediumLauncher.class);
  blockLargeLauncher=manager.newBlock(TileLargeLauncher.class);
  blockCake=manager.newBlock(""String_Node_Str"",BlockFakeCake.class);
  blockMediumLauncher.setCreativeTab(null);
  blockLargeLauncher.setCreativeTab(null);
  NEIProxy.hideItem(blockMediumLauncher);
  NEIProxy.hideItem(blockLargeLauncher);
  blockSiloController=manager.newBlock(""String_Node_Str"",TileController.class);
  blockMissile=manager.newBlock(TileMissile.class);
  if (Engine.runningAsDev) {
    blockExplosiveMarker=manager.newBlock(BlockExplosiveMarker.class,ItemBlockMetadata.class);
    manager.newBlock(TileRotationTest.class);
  }
  itemMissile=manager.newItem(""String_Node_Str"",ItemMissile.class);
  itemRocketLauncher=manager.newItem(""String_Node_Str"",ItemRocketLauncher.class);
  itemEngineModules=manager.newItem(""String_Node_Str"",ItemEngineModules.class);
  itemGuidanceModules=manager.newItem(""String_Node_Str"",ItemGuidanceModules.class);
  itemLinkTool=manager.newItem(""String_Node_Str"",ItemLinkTool.class);
  itemGPSTool=manager.newItem(""String_Node_Str"",ItemGPSFlag.class);
  itemMissileParts=manager.newItem(""String_Node_Str"",ItemMissileParts.class);
  itemExplosive=manager.newItem(""String_Node_Str"",ItemExplosive.class);
  itemExplosivePart=manager.newItem(""String_Node_Str"",ItemExplosiveParts.class);
  NEIProxy.hideItem(ItemExplosive.ExplosiveItems.NBT.newItem());
  MissileCasings.register();
  WarheadCasings.register();
  Engines.register();
  GuidanceModules.register();
  CREATIVE_TAB.itemStack=MissileCasings.SMALL.newModuleStack();
  getProxy().registerExplosives();
}",0.9909328033784623
169619,"@Override public void displayAllReleventItems(List list){
  add(list,ICBM.blockAMS);
  add(list,ICBM.blockFoFStation);
  add(list,ICBM.blockLauncherFrame);
  add(list,ICBM.blockSmallSilo);
  add(list,ICBM.blockAntenna);
  if (Engine.runningAsDev) {
    add(list,ICBM.blockStandardSilo);
  }
  add(list,ICBM.blockSiloController);
  add(list,ICBM.blockSmallPortableLauncher);
  add(list,ICBM.blockMissileWorkstation);
  add(list,ICBM.itemLinkTool);
  add(list,ICBM.itemGPSTool);
  add(list,ICBM.itemRocketLauncher);
  add(list,ICBM.blockLauncherParts);
  add(list,ICBM.itemMissile);
  add(list,ICBM.blockWarhead);
  add(list,ICBM.itemExplosive);
  add(list,ICBM.itemEngineModules);
  add(list,ICBM.itemGuidanceModules);
  add(list,ICBM.itemMissileParts);
  add(list,ICBM.itemExplosivePart);
}","@Override public void displayAllReleventItems(List list){
  add(list,ICBM.blockAMS);
  add(list,ICBM.blockFoFStation);
  add(list,ICBM.blockLauncherFrame);
  add(list,ICBM.blockSmallSilo);
  add(list,ICBM.blockAntenna);
  add(list,ICBM.blockCommandCentral);
  if (Engine.runningAsDev) {
    add(list,ICBM.blockStandardSilo);
  }
  add(list,ICBM.blockSiloController);
  add(list,ICBM.blockSmallPortableLauncher);
  add(list,ICBM.blockMissileWorkstation);
  add(list,ICBM.itemLinkTool);
  add(list,ICBM.itemGPSTool);
  add(list,ICBM.itemRocketLauncher);
  add(list,ICBM.blockLauncherParts);
  add(list,ICBM.itemMissile);
  add(list,ICBM.blockWarhead);
  add(list,ICBM.itemExplosive);
  add(list,ICBM.itemEngineModules);
  add(list,ICBM.itemGuidanceModules);
  add(list,ICBM.itemMissileParts);
  add(list,ICBM.itemExplosivePart);
}",0.976514215080346
169620,"public boolean equals(Object object){
  if (object == this) {
    return true;
  }
  if (object instanceof WirelessGrid) {
    return ((WirelessGrid)object).name.equals(name) && ((WirelessGrid)object).key == key;
  }
  return false;
}","@Override public boolean equals(Object object){
  if (object == this) {
    return true;
  }
  if (object instanceof WirelessGrid) {
    return ((WirelessGrid)object).name.equals(name) && ((WirelessGrid)object).key == key;
  }
  return false;
}",0.9790794979079498
169621,"/** 
 * Connects a sender to the grid
 * @param tile
 * @return
 */
public boolean connect(IRadioWaveSender tile){
  boolean connected=false;
  Cube cube=tile.getRadioSenderRange();
  if (cube != null) {
    for (    WirelessNetworkSend network : senderNetworks) {
      if (network.overlaps(cube) && network.addSender(tile)) {
        connected=true;
        for (        TileEntity t : network.connectedTiles) {
          if (t != tile && t instanceof IWirelessGridConnector) {
            ((IWirelessGridConnector)t).onCoverageAreaChanged(network);
          }
        }
      }
    }
    if (!connected) {
      WirelessNetworkSend network=new WirelessNetworkSend();
      network.addSender(tile);
      return connect(network);
    }
  }
  return connected;
}","/** 
 * Connects a sender to the grid
 * @param tile
 * @return
 */
public boolean connect(IRadioWaveSender tile){
  boolean connected=false;
  Cube cube=tile.getRadioSenderRange();
  if (cube != null) {
    for (    WirelessNetworkSend network : senderNetworks) {
      if ((network.coverageArea.size() == 0 || network.overlaps(cube)) && network.addSender(tile)) {
        connected=true;
        for (        TileEntity t : network.connectedTiles) {
          if (t != tile && t instanceof IWirelessGridConnector) {
            ((IWirelessGridConnector)t).onCoverageAreaChanged(network);
          }
        }
      }
    }
    if (!connected) {
      WirelessNetworkSend network=new WirelessNetworkSend();
      network.addSender(tile);
      return connect(network);
    }
  }
  return connected;
}",0.9757343550447
169622,"public boolean removeReceiver(IRadioWaveReceiver receiver){
  if (receivers.contains(receiver)) {
    return receivers.remove(receiver);
  }
  return false;
}","public boolean removeReceiver(IRadioWaveReceiver receiver){
  if (receivers.contains(receiver)) {
    if (this.receivers.size() == 0) {
      isInvalid=true;
    }
    return receivers.remove(receiver);
  }
  return false;
}",0.8272251308900523
169623,"public boolean addReceiver(IRadioWaveReceiver receiver){
  if (!receivers.contains(receiver)) {
    return receivers.add(receiver);
  }
  return false;
}","public boolean addReceiver(IRadioWaveReceiver receiver){
  if (!receivers.contains(receiver) && receiver.getRadioReceiverRange() != null) {
    isInvalid=false;
    coverageArea.add(receiver.getRadioReceiverRange());
    return receivers.add(receiver);
  }
  return false;
}",0.7166276346604216
169624,"public boolean addSender(IRadioWaveSender sender){
  if (!senders.contains(sender)) {
    return senders.add(sender);
  }
  return false;
}","public boolean addSender(IRadioWaveSender sender){
  if (!senders.contains(sender) && sender.getRadioSenderRange() != null) {
    isInvalid=false;
    coverageArea.add(sender.getRadioSenderRange());
    return senders.add(sender);
  }
  return false;
}",0.710997442455243
169625,"public boolean removeSender(IRadioWaveSender sender){
  if (senders.contains(sender)) {
    return senders.remove(sender);
  }
  return false;
}","public boolean removeSender(IRadioWaveSender sender){
  if (senders.contains(sender)) {
    if (this.senders.size() == 0) {
      isInvalid=true;
    }
    return senders.remove(sender);
  }
  return false;
}",0.8181818181818182
169626,"@Override public void update(){
  super.update();
  if (ticks % 60 == 0) {
    HashMap<ForgeDirection,TileEntity> oldConnections=connections;
    connections=new HashMap();
    boolean sender=false;
    boolean receiver=false;
    for (    ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
      TileEntity tile=toPos().add(dir).getTileEntity(world());
      if (tile != null) {
        connections.put(dir,tile);
        if (tile instanceof IRadioWaveSender) {
          sender=true;
        }
        if (tile instanceof IRadioWaveReceiver) {
          receiver=true;
        }
      }
    }
    if (sender && receiver) {
      if (grid == null) {
        grid=WirelessGridManager.getOrCreateGrid(world(),this,gridName,gridKey);
        for (        TileEntity tile : connections.values()) {
          if (tile instanceof IRadioWaveReceiver) {
            grid.connect((IRadioWaveReceiver)tile);
          }
          if (tile instanceof IRadioWaveSender) {
            grid.connect((IRadioWaveSender)tile);
          }
        }
        grid.connect(this,null);
      }
 else {
        for (        TileEntity tile : oldConnections.values()) {
          if (!connections.values().contains(tile)) {
            if (tile instanceof IRadioWaveReceiver) {
              grid.disconnect((IRadioWaveReceiver)tile);
            }
            if (tile instanceof IRadioWaveSender) {
              grid.disconnect((IRadioWaveSender)tile);
            }
          }
        }
        for (        TileEntity tile : connections.values()) {
          if (!oldConnections.values().contains(tile)) {
            if (tile instanceof IRadioWaveReceiver) {
              grid.connect((IRadioWaveReceiver)tile);
            }
            if (tile instanceof IRadioWaveSender) {
              grid.connect((IRadioWaveSender)tile);
            }
          }
        }
        if (!grid.overlaps(new Pos(this))) {
          grid.disconnect(this);
        }
      }
    }
 else     if (grid != null) {
      grid.disconnect(this);
      grid=null;
    }
  }
}","@Override public void update(){
  super.update();
  if (isServer() && ticks % 60 == 0) {
    HashMap<ForgeDirection,TileEntity> oldConnections=connections;
    connections=new HashMap();
    boolean sender=false;
    boolean receiver=false;
    for (    ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
      TileEntity tile=toPos().add(dir).getTileEntity(world());
      if (tile != null) {
        connections.put(dir,tile);
        if (tile instanceof IRadioWaveSender) {
          sender=true;
        }
        if (tile instanceof IRadioWaveReceiver) {
          receiver=true;
        }
      }
    }
    if (sender && receiver) {
      if (grid == null) {
        grid=WirelessGridManager.getOrCreateGrid(world(),this,gridName,gridKey);
        for (        TileEntity tile : connections.values()) {
          if (tile instanceof IRadioWaveReceiver) {
            grid.connect((IRadioWaveReceiver)tile);
          }
          if (tile instanceof IRadioWaveSender) {
            grid.connect((IRadioWaveSender)tile);
          }
        }
        grid.connect(this,null);
      }
 else {
        for (        TileEntity tile : oldConnections.values()) {
          if (!connections.values().contains(tile)) {
            if (tile instanceof IRadioWaveReceiver) {
              grid.disconnect((IRadioWaveReceiver)tile);
            }
            if (tile instanceof IRadioWaveSender) {
              grid.disconnect((IRadioWaveSender)tile);
            }
          }
        }
        for (        TileEntity tile : connections.values()) {
          if (!oldConnections.values().contains(tile)) {
            if (tile instanceof IRadioWaveReceiver) {
              grid.connect((IRadioWaveReceiver)tile);
            }
            if (tile instanceof IRadioWaveSender) {
              grid.connect((IRadioWaveSender)tile);
            }
          }
        }
        if (!grid.overlaps(new Pos(this))) {
          grid.disconnect(this);
        }
      }
    }
 else     if (grid != null) {
      grid.disconnect(this);
      grid=null;
    }
  }
}",0.996590355577204
169627,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float xx,float yy,float zz){
  if (player.getHeldItem() != null) {
    if (player.getHeldItem().getItem() == Item.getItemFromBlock(this)) {
      return false;
    }
 else     if (!world.isRemote && Engine.runningAsDev && player.getHeldItem().getItem() == Items.stick) {
      TileEntity tile=world.getTileEntity(x,y,z);
      if (tile instanceof TileAntennaPart) {
        if (((TileAntennaPart)tile).network != null) {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str"" + ((TileAntennaPart)tile).network.size() + ""String_Node_Str""+ ((TileAntennaPart)tile).network.base));
        }
 else {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        }
      }
      return true;
    }
  }
  int meta=world.getBlockMetadata(x,y,z);
  if (meta == 2) {
    player.openGui(ICBM.INSTANCE,0,world,x,y,z);
  }
  return true;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float xx,float yy,float zz){
  int meta=world.getBlockMetadata(x,y,z);
  if (player.getHeldItem() != null) {
    if (player.getHeldItem().getItem() == Item.getItemFromBlock(this)) {
      return false;
    }
 else     if (!world.isRemote && Engine.runningAsDev) {
      if (player.getHeldItem().getItem() == Items.stick) {
        TileEntity tile=world.getTileEntity(x,y,z);
        if (tile instanceof TileAntennaPart) {
          if (((TileAntennaPart)tile).network != null) {
            player.addChatComponentMessage(new ChatComponentText(""String_Node_Str"" + ((TileAntennaPart)tile).network.size() + ""String_Node_Str""+ ((TileAntennaPart)tile).network.base));
          }
 else {
            player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
          }
        }
        return true;
      }
 else       if (player.getHeldItem().getItem() == Items.blaze_rod) {
        TileEntity tile=world.getTileEntity(x,y,z);
        if (tile instanceof TileAntennaPart) {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str"" + ((TileAntennaPart)tile).connections.size() + ""String_Node_Str""));
        }
        return true;
      }
    }
  }
  if (meta == 2) {
    if (!world.isRemote) {
      player.openGui(ICBM.INSTANCE,0,world,x,y,z);
    }
    return true;
  }
  return false;
}",0.212184003315375
169628,"/** 
 * Mainly updates data used by the client renderer(e.g. Metadata)
 */
public void updateRenderState(){
  int meta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord);
  int antennaParts=connections.size();
  if (antennaParts > 3) {
    if (meta != 3) {
      worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,3,3);
    }
  }
 else   if (antennaParts == 2) {
    if (connections.get(ForgeDirection.UP) != null && connections.get(ForgeDirection.DOWN) != null) {
      TileEntity above=connections.get(ForgeDirection.UP);
      TileEntity bellow=connections.get(ForgeDirection.DOWN);
      boolean found=false;
      if (above instanceof TileAntennaPart && bellow instanceof TileAntennaPart) {
        boolean connectionA=((TileAntennaPart)above).connections.get(ForgeDirection.UP) != null && ((TileAntennaPart)above).connections.get(ForgeDirection.DOWN) != null;
        boolean connectionB=((TileAntennaPart)bellow).connections.get(ForgeDirection.UP) != null && ((TileAntennaPart)bellow).connections.get(ForgeDirection.DOWN) != null;
        if (connectionA && !connectionB || connectionB && !connectionA) {
          found=true;
          if (!found && meta != 4) {
            worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,4,3);
          }
        }
      }
      if (!found && meta != 1) {
        worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,1,3);
      }
    }
 else     if (connections.get(ForgeDirection.EAST) != null && connections.get(ForgeDirection.WEST) != null) {
      if (meta != 6) {
        worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,6,3);
      }
    }
 else     if (connections.get(ForgeDirection.NORTH) != null && connections.get(ForgeDirection.SOUTH) != null) {
      if (meta != 7) {
        worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,7,3);
      }
    }
 else     if (meta != 3) {
      worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,3,3);
    }
  }
 else   if (antennaParts == 1) {
    if (connections.get(ForgeDirection.DOWN) != null) {
      if (meta != 5) {
        worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,5,3);
      }
    }
 else     if (connections.get(ForgeDirection.EAST) != null || connections.get(ForgeDirection.WEST) != null) {
      if (meta != 6) {
        worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,6,3);
      }
    }
 else     if (connections.get(ForgeDirection.NORTH) != null || connections.get(ForgeDirection.SOUTH) != null) {
      if (meta != 7) {
        worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,7,3);
      }
    }
  }
}","/** 
 * Mainly updates data used by the client renderer(e.g. Metadata)
 */
public void updateRenderState(){
  int meta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord);
  int antennaParts=connections.size();
  if (antennaParts > 3) {
    if (meta != 3) {
      worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,3,3);
    }
  }
 else   if (antennaParts == 2) {
    if (connections.get(ForgeDirection.UP) != null && connections.get(ForgeDirection.DOWN) != null) {
      TileEntity above=connections.get(ForgeDirection.UP);
      TileEntity bellow=connections.get(ForgeDirection.DOWN);
      boolean found=false;
      if (above instanceof TileAntennaPart && bellow instanceof TileAntennaPart) {
        boolean connectionA=((TileAntennaPart)above).connections.get(ForgeDirection.UP) != null && ((TileAntennaPart)above).connections.get(ForgeDirection.DOWN) != null;
        boolean connectionB=((TileAntennaPart)bellow).connections.get(ForgeDirection.UP) != null && ((TileAntennaPart)bellow).connections.get(ForgeDirection.DOWN) != null;
        if (connectionA && !connectionB || connectionB && !connectionA) {
          found=true;
          if (found && meta != 4) {
            worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,4,3);
          }
        }
      }
      if (!found && meta != 1) {
        worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,1,3);
      }
    }
 else     if (connections.get(ForgeDirection.EAST) != null && connections.get(ForgeDirection.WEST) != null) {
      if (meta != 6) {
        worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,6,3);
      }
    }
 else     if (connections.get(ForgeDirection.NORTH) != null && connections.get(ForgeDirection.SOUTH) != null) {
      if (meta != 7) {
        worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,7,3);
      }
    }
 else     if (meta != 3) {
      worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,3,3);
    }
  }
 else   if (antennaParts == 1) {
    if (connections.get(ForgeDirection.DOWN) != null) {
      if (meta != 5) {
        worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,5,3);
      }
    }
 else     if (connections.get(ForgeDirection.EAST) != null || connections.get(ForgeDirection.WEST) != null) {
      if (meta != 6) {
        worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,6,3);
      }
    }
 else     if (connections.get(ForgeDirection.NORTH) != null || connections.get(ForgeDirection.SOUTH) != null) {
      if (meta != 7) {
        worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,7,3);
      }
    }
  }
}",0.9998062391009496
169629,"/** 
 * Called to split a network when a tile is removed
 * @param splitPoint
 */
public void split(TileAntennaPart splitPoint){
  if (splitPoint == base) {
    base=null;
    kill();
  }
 else   if (splitPoint.connections.size() > 1) {
    kill();
  }
 else {
    remove(splitPoint);
    splitPoint.network=null;
    base=null;
  }
}","/** 
 * Called to split a network when a tile is removed
 * @param splitPoint
 */
public void split(TileAntennaPart splitPoint){
  TileAntenna base=this.base;
  kill();
  if (splitPoint != base) {
    base.doInitScan();
  }
}",0.6118067978533095
169630,"public void kill(){
  for (  TileAntennaPart tile : this) {
    tile.network=null;
  }
  this.clear();
  if (base != null) {
    base.doInitScan();
  }
}","public void kill(){
  for (  TileAntennaPart tile : this) {
    tile.network=null;
  }
  this.clear();
  base=null;
}",0.8666666666666667
169631,"@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile instanceof TileAntennaPart && ((TileAntennaPart)tile).network != null) {
    ((TileAntennaPart)tile).network.split((TileAntennaPart)tile);
    if (((TileAntennaPart)tile).connections.size() > 0) {
      for (      TileEntity t : ((TileAntennaPart)tile).connections.values()) {
        if (t instanceof TileAntennaPart) {
          ((TileAntennaPart)t).doConnectionUpdate=true;
        }
      }
    }
  }
  super.breakBlock(world,x,y,z,block,meta);
}","@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  if (!world.isRemote) {
    TileEntity tile=world.getTileEntity(x,y,z);
    if (tile instanceof TileAntennaPart && ((TileAntennaPart)tile).network != null) {
      ((TileAntennaPart)tile).network.split((TileAntennaPart)tile);
      if (((TileAntennaPart)tile).connections.size() > 0) {
        for (        TileEntity t : ((TileAntennaPart)tile).connections.values()) {
          if (t instanceof TileAntennaPart) {
            ((TileAntennaPart)t).doConnectionUpdate=true;
          }
        }
      }
    }
  }
  super.breakBlock(world,x,y,z,block,meta);
}",0.9572235673930588
169632,"@Override public void updateEntity(){
  super.updateEntity();
  if (ticks % randomTick == 0) {
    randomTick=MathHelper.rand.nextInt(200) + 1000;
    if (ticks != 30 || !hasInitScanned) {
      doInitScan();
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (!world().isRemote) {
    if (ticks >= randomTick) {
      int addition=MathHelper.rand.nextInt(200) + 1000;
      if (addition + ticks < 0) {
        randomTick=addition - (Integer.MAX_VALUE - ticks);
      }
 else {
        randomTick=ticks + addition;
      }
      doInitScan();
    }
  }
}",0.3648881239242685
169633,"@Override public void invalidate(){
  super.invalidate();
  network.kill();
  RadioRegistry.remove(this);
}","@Override public void invalidate(){
  super.invalidate();
  if (network != null) {
    network.kill();
  }
  RadioRegistry.remove(this);
}",0.8734693877551021
169634,"/** 
 * Called to scan the structure of the antenna
 */
public void doInitScan(){
  hasInitScanned=true;
  if (network == null) {
    network=new AntennaNetwork();
    network.base=this;
  }
  if (connections.isEmpty()) {
    updateConnections();
  }
  long time=System.nanoTime();
  ICBM.INSTANCE.logger().info(this + ""String_Node_Str"");
  List<TileAntennaPart> pathedTiles=new ArrayList();
  Queue<TileAntennaPart> stack=new LinkedList();
  stack.offer(this);
  while (!stack.isEmpty()) {
    TileAntennaPart currentNode=stack.poll();
    pathedTiles.add(currentNode);
    if (currentNode != this) {
      network.add(currentNode);
    }
    if (currentNode.connections.size() == 0) {
      currentNode.updateConnections();
    }
    if (currentNode.connections.size() > 1) {
      for (      TileEntity tile : currentNode.connections.values()) {
        if (tile instanceof TileAntennaPart && !pathedTiles.contains(tile)) {
          stack.offer((TileAntennaPart)tile);
        }
      }
    }
  }
  time=System.nanoTime() - time;
  ICBM.INSTANCE.logger().info(this + ""String_Node_Str"" + StringHelpers.formatNanoTime(time));
  network.updateBounds();
  RadioRegistry.addOrUpdate(this);
  this.invalidate();
}","/** 
 * Called to scan the structure of the antenna
 */
public void doInitScan(){
  hasInitScanned=true;
  if (network == null) {
    network=new AntennaNetwork();
    network.add(this);
    network.base=this;
  }
  if (connections.isEmpty()) {
    updateConnections();
  }
  long time=System.nanoTime();
  ICBM.INSTANCE.logger().info(this + ""String_Node_Str"");
  List<TileAntennaPart> pathedTiles=new ArrayList();
  Queue<TileAntennaPart> stack=new LinkedList();
  stack.offer(this);
  while (!stack.isEmpty()) {
    TileAntennaPart currentNode=stack.poll();
    pathedTiles.add(currentNode);
    if (currentNode != this) {
      network.add(currentNode);
    }
    if (currentNode.connections.size() == 0) {
      currentNode.updateConnections();
    }
    if (currentNode.connections.size() > 1) {
      for (      TileEntity tile : currentNode.connections.values()) {
        if (tile instanceof TileAntennaPart && !pathedTiles.contains(tile)) {
          stack.offer((TileAntennaPart)tile);
        }
      }
    }
  }
  time=System.nanoTime() - time;
  ICBM.INSTANCE.logger().info(this + ""String_Node_Str"" + StringHelpers.formatNanoTime(time));
  network.updateBounds();
  RadioRegistry.addOrUpdate(this);
}",0.9818481848184818
169635,"private void nodeWarheadRecipes(){
  ItemStack micro_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_MICRO,(ItemStack)null).toStack();
  ItemStack small_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_SMALL,(ItemStack)null).toStack();
  ItemStack taintBottleMicroMissile=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_MICRO,ExplosiveRegistry.get(""String_Node_Str"")).toStack();
  AspectList aspects=new AspectList();
  aspects.add(Aspect.TOOL,1).add(Aspect.MECHANISM,2).add(Aspect.TRAVEL,1);
  InfusionRecipeJar recipeJar=new InfusionRecipeJar(""String_Node_Str"",0,new AspectList().add(Aspect.ORDER,25).add(Aspect.FIRE,25),new ItemStack[]{micro_warhead_empty});
  InfusionRecipeJar recipeJar1=new InfusionRecipeJar(""String_Node_Str"",0,new AspectList().add(Aspect.ORDER,25).add(Aspect.FIRE,25),new ItemStack[]{small_warhead_empty});
  ResearchItem researchPage=new ResearchItemICBM(""String_Node_Str"",ICBM.NAME,aspects,-3,4,3,taintBottleMicroMissile);
  researchPage.setPages(new ResearchPage[]{getResearchPage(""String_Node_Str""),new ResearchPage(recipeJar),new ResearchPage(recipeJar1)}).setParents(""String_Node_Str"").registerResearchItem();
}","private void nodeWarheadRecipes(){
  ItemStack micro_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_MICRO,(ItemStack)null).toStack();
  ItemStack small_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_SMALL,(ItemStack)null).toStack();
  ItemStack taintBottleMicroMissile=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_MICRO,ExplosiveRegistry.get(""String_Node_Str"")).toStack();
  AspectList aspects=new AspectList();
  aspects.add(Aspect.TOOL,1).add(Aspect.MECHANISM,2).add(Aspect.TRAVEL,1);
}",0.6419889502762431
169636,"/** 
 * Builds a warhead using a size and explosive handler
 * @param size      - casing size
 * @param explosive - item to use as an explosive, does not check if valid
 * @return new Warhead instance of the size
 */
public Warhead buildWarhead(WarheadCasings size,ItemStack explosive){
  try {
    Warhead warhead=size.warhead_clazz.getConstructor(ItemStack.class).newInstance(new ItemStack(ICBM.blockWarhead,1,size.ordinal()));
    warhead.setExplosive(explosive);
    return warhead;
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * Builds a warhead using a size given
 * @param size - casing size
 * @return new Warhead instance of the size
 */
public Warhead buildWarhead(WarheadCasings size){
  try {
    return size.warhead_clazz.getConstructor(ItemStack.class).newInstance(new ItemStack(ICBM.blockWarhead,1,size.ordinal()));
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
  return null;
}",0.6734992679355783
169637,"@Override public double getExplosiveSize(){
  if (explosive != null && explosive.getItem() instanceof IExplosiveHolderItem) {
    return ((IExplosiveHolderItem)explosive.getItem()).getExplosiveSize(explosive);
  }
  return -1;
}","@Override public double getExplosiveSize(){
  return ExplosiveRegistry.getExplosiveSize(explosive);
}",0.5531914893617021
169638,"@Override public IExplosiveHandler getExplosive(){
  if (explosive != null && explosive.getItem() instanceof IExplosiveItem) {
    return ((IExplosiveItem)explosive.getItem()).getExplosive(explosive);
  }
  return null;
}","@Override public IExplosiveHandler getExplosive(){
  return ExplosiveRegistry.get(explosive);
}",0.5379746835443038
169639,"public static void getRecipes(IExplosiveHandler handler,List<IRecipe> recipes){
  final ItemStack micro_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_MICRO,(ItemStack)null).toStack();
  final ItemStack small_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_SMALL,(ItemStack)null).toStack();
  final ItemStack medium_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_STANDARD,(ItemStack)null).toStack();
  List<ItemStackWrapper> items=ExplosiveRegistry.getItems(handler);
  if (items != null) {
    for (    ItemStackWrapper wrapper : items) {
      ItemStack stack=wrapper.itemStack.copy();
      stack.stackSize=1;
      double size=ExplosiveRegistry.getExplosiveSize(wrapper);
      WarheadRecipe microWarheadRecipe=new WarheadRecipe(WarheadCasings.EXPLOSIVE_MICRO,handler,size,stack,micro_warhead_empty);
      recipes.add(microWarheadRecipe);
      recipes.add(new MicroMissileRecipe(wrapper.itemStack,MissileModuleBuilder.INSTANCE.buildMissile(MissileCasings.MICRO,(ItemStack)null).toStack(),microWarheadRecipe.getRecipeOutput()));
      recipes.add(new WarheadRecipe(WarheadCasings.EXPLOSIVE_SMALL,handler,size,stack,small_warhead_empty));
      recipes.add(new WarheadRecipe(WarheadCasings.EXPLOSIVE_STANDARD,handler,size,stack,medium_warhead_empty));
    }
  }
}","/** 
 * Gets a list of warhead recipes for the given explosive. Will return an empty list if the explosive has no items registered.
 * @param handler - explosive, with valid items
 * @param recipes - list to add recipes to
 */
public static void getRecipes(IExplosiveHandler handler,List<IRecipe> recipes){
  List<ItemStackWrapper> items=ExplosiveRegistry.getItems(handler);
  if (items != null) {
    final ItemStack micro_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_MICRO,(ItemStack)null).toStack();
    final ItemStack small_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_SMALL,(ItemStack)null).toStack();
    final ItemStack medium_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_STANDARD,(ItemStack)null).toStack();
    for (    ItemStackWrapper wrapper : items) {
      if (wrapper != null && wrapper.itemStack != null) {
        ItemStack stack=wrapper.itemStack.copy();
        stack.stackSize=1;
        WarheadRecipe microWarheadRecipe=new WarheadRecipe(WarheadCasings.EXPLOSIVE_MICRO,stack,stack,micro_warhead_empty);
        recipes.add(microWarheadRecipe);
        recipes.add(new MicroMissileRecipe(wrapper.itemStack,MissileModuleBuilder.INSTANCE.buildMissile(MissileCasings.MICRO,(ItemStack)null).toStack(),microWarheadRecipe.getRecipeOutput()));
        recipes.add(new WarheadRecipe(WarheadCasings.EXPLOSIVE_SMALL,stack,stack,small_warhead_empty));
        recipes.add(new WarheadRecipe(WarheadCasings.EXPLOSIVE_STANDARD,stack,stack,medium_warhead_empty));
      }
 else {
        Engine.error(""String_Node_Str"" + handler + ""String_Node_Str""+ wrapper);
      }
    }
  }
}",0.742745353765895
169640,"@Test public void testWarheadCasings(){
  for (  WarheadCasings casing : WarheadCasings.values()) {
    Warhead warhead=MissileModuleBuilder.INSTANCE.buildWarhead(casing,(ItemStack)null);
    assertNotNull(warhead);
    assertNotNull(warhead.toStack());
    assertNotNull(warhead.toStack().getItem());
    assertNull(warhead.getExplosive());
    assertNull(warhead.explosive);
    assertTrue(warhead.getAdditionalExplosiveData() == null || warhead.getAdditionalExplosiveData().hasNoTags());
    for (    IExplosiveHandler ex : ExplosiveRegistry.getExplosives()) {
      warhead=MissileModuleBuilder.INSTANCE.buildWarhead(casing,ex);
      assertNotNull(warhead);
      assertNotNull(warhead.toStack());
      assertNotNull(warhead.toStack().getItem());
      assertEquals(warhead.getExplosive(),ex);
    }
    for (    ItemExplosive.ExplosiveItems exItem : ItemExplosive.ExplosiveItems.values()) {
      if (exItem.ex_name != null) {
        assertTrue(exItem.ex_name,exItem.getExplosive() != null);
        warhead=MissileModuleBuilder.INSTANCE.buildWarhead(casing,exItem.getExplosive());
        assertNotNull(warhead);
        assertNotNull(warhead.toStack());
        assertNotNull(warhead.toStack().getItem());
        assertEquals(warhead.getExplosive(),exItem.getExplosive());
      }
    }
  }
}","@Test public void testWarheadCasings(){
  for (  WarheadCasings casing : WarheadCasings.values()) {
    Warhead warhead=MissileModuleBuilder.INSTANCE.buildWarhead(casing,(ItemStack)null);
    assertNotNull(warhead);
    assertNotNull(warhead.toStack());
    assertNotNull(warhead.toStack().getItem());
    assertNull(warhead.getExplosive());
    assertNull(warhead.explosive);
    assertTrue(warhead.getAdditionalExplosiveData() == null || warhead.getAdditionalExplosiveData().hasNoTags());
    for (    ItemExplosive.ExplosiveItems exItem : ItemExplosive.ExplosiveItems.values()) {
      if (exItem.ex_name != null) {
        assertTrue(exItem.ex_name,exItem.getExplosive() != null);
        warhead=MissileModuleBuilder.INSTANCE.buildWarhead(casing,exItem.newItem());
        assertNotNull(warhead);
        assertNotNull(warhead.toStack());
        assertNotNull(warhead.toStack().getItem());
        assertEquals(warhead.getExplosive(),exItem.getExplosive());
      }
    }
  }
}",0.6412948381452318
169641,"public AbstractModule(ItemStack item,String name){
  this.item=item;
  this.name=name;
}","public AbstractModule(ItemStack item,String name){
  this.item=item.copy();
  this.name=name;
}",0.9617486338797814
169642,"/** 
 * Gets a list of warhead recipes for the given explosive. Will return an empty list if the explosive has no items registered.
 * @param handler - explosive, with valid items
 * @param recipes - list to add recipes to
 */
public static void getRecipes(IExplosiveHandler handler,List<IRecipe> recipes){
  System.out.println(""String_Node_Str"" + handler);
  List<ItemStackWrapper> items=ExplosiveRegistry.getItems(handler);
  if (items != null) {
    System.out.println(""String_Node_Str"" + items.size() + ""String_Node_Str"");
    final ItemStack micro_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_MICRO,(ItemStack)null).toStack();
    final ItemStack small_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_SMALL,(ItemStack)null).toStack();
    final ItemStack medium_warhead_empty=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_STANDARD,(ItemStack)null).toStack();
    for (    ItemStackWrapper wrapper : items) {
      if (wrapper != null && wrapper.itemStack != null) {
        System.out.println(""String_Node_Str"" + wrapper.itemStack);
        ItemStack stack=wrapper.itemStack.copy();
        stack.stackSize=1;
        final Warhead micro_warhead=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_MICRO,stack);
        final Warhead small_warhead=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_SMALL,stack);
        final Warhead medium_warhead=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_STANDARD,stack);
        WarheadRecipe microWarheadRecipe=new WarheadRecipe(micro_warhead,stack,micro_warhead_empty);
        recipes.add(microWarheadRecipe);
        recipes.add(new MicroMissileRecipe(wrapper.itemStack,MissileModuleBuilder.INSTANCE.buildMissile(MissileCasings.MICRO,(ItemStack)null).toStack(),microWarheadRecipe.getRecipeOutput()));
        recipes.add(new WarheadRecipe(small_warhead,stack,small_warhead_empty));
        recipes.add(new WarheadRecipe(medium_warhead,stack,medium_warhead_empty));
        for (        WarheadCasings casing : new WarheadCasings[]{WarheadCasings.EXPLOSIVE_SMALL,WarheadCasings.EXPLOSIVE_STANDARD}) {
          System.out.println(""String_Node_Str"" + casing);
          Warhead warhead=MissileModuleBuilder.INSTANCE.buildWarhead(casing,stack);
          for (int i=1; i < warhead.getMaxExplosives(); i++) {
            System.out.println(""String_Node_Str"" + i);
            System.out.println(""String_Node_Str"" + warhead + ""String_Node_Str""+ warhead.explosive);
            ItemStack nextStack=stack.copy();
            nextStack.stackSize=i + 1;
            Warhead nextWarhead=MissileModuleBuilder.INSTANCE.buildWarhead(casing,nextStack);
            System.out.println(""String_Node_Str"" + nextWarhead + ""String_Node_Str""+ nextWarhead.explosive);
            recipes.add(new WarheadRecipe(nextWarhead,stack,warhead.toStack()));
            warhead=nextWarhead.clone();
          }
        }
      }
 else {
        Engine.error(""String_Node_Str"" + handler + ""String_Node_Str""+ wrapper);
      }
    }
  }
}","/** 
 * Gets a list of warhead recipes for the given explosive. Will return an empty list if the explosive has no items registered.
 * @param handler - explosive, with valid items
 * @param recipes - list to add recipes to
 */
public static void getRecipes(IExplosiveHandler handler,List<IRecipe> recipes){
  System.out.println(""String_Node_Str"" + handler);
  List<ItemStackWrapper> items=ExplosiveRegistry.getItems(handler);
  if (items != null) {
    System.out.println(""String_Node_Str"" + items.size() + ""String_Node_Str"");
    for (    ItemStackWrapper wrapper : items) {
      if (wrapper != null && wrapper.itemStack != null) {
        System.out.println(""String_Node_Str"" + wrapper.itemStack);
        ItemStack stack=wrapper.itemStack.copy();
        stack.stackSize=1;
        final Warhead micro_warhead=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_MICRO,stack);
        final Warhead small_warhead=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_SMALL,stack);
        final Warhead medium_warhead=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_STANDARD,stack);
        WarheadRecipe microWarheadRecipe=new WarheadRecipe(micro_warhead,stack);
        recipes.add(microWarheadRecipe);
        recipes.add(new MicroMissileRecipe(wrapper.itemStack,MissileModuleBuilder.INSTANCE.buildMissile(MissileCasings.MICRO,(ItemStack)null).toStack(),microWarheadRecipe.getRecipeOutput()));
        recipes.add(new WarheadRecipe(small_warhead,stack));
        recipes.add(new WarheadRecipe(medium_warhead,stack));
        for (        WarheadCasings casing : new WarheadCasings[]{WarheadCasings.EXPLOSIVE_SMALL,WarheadCasings.EXPLOSIVE_STANDARD}) {
          final int s=MissileModuleBuilder.INSTANCE.buildWarhead(casing,stack).getMaxExplosives();
          for (int i=1; i < s; i++) {
            ItemStack nextStack=stack.copy();
            nextStack.stackSize=i + 1;
            recipes.add(new WarheadRecipe(MissileModuleBuilder.INSTANCE.buildWarhead(casing,nextStack),stack));
          }
        }
      }
 else {
        Engine.error(""String_Node_Str"" + handler + ""String_Node_Str""+ wrapper);
      }
    }
  }
}",0.5370931112793338
169643,"public WarheadRecipe(Warhead warhead,Object... recipe){
  super(warhead.toStack(),recipe);
  craftingResult=warhead;
}","public WarheadRecipe(Warhead warhead,ItemStack inputTarget){
  this.craftingResult=warhead;
  this.inputTarget=inputTarget;
}",0.6090534979423868
169644,"@Override public void preInit(){
  super.preInit();
  ICBM.blockMissileWorkstation=ICBM.INSTANCE.getManager().newBlock(""String_Node_Str"",TileSmallMissileWorkstationClient.class);
}","@Override public void preInit(){
  super.preInit();
  ICBM.blockMissileWorkstation=ICBM.INSTANCE.getManager().newBlock(""String_Node_Str"",TileSmallMissileWorkstationClient.class);
  ICBM.blockStandardLauncher=ICBM.INSTANCE.getManager().newBlock(""String_Node_Str"",TileStandardLauncherClient.class);
  ICBM.blockStandardLauncher.setCreativeTab(null);
  NEIProxy.hideItem(ICBM.blockStandardLauncher);
}",0.6228373702422145
169645,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(proxy);
  FMLCommonHandler.instance().bus().register(this);
  Engine.heatedRockRequested=true;
  Engine.requestOres();
  Engine.requestResources();
  Engine.requestSheetMetalContent();
  Engine.requestMultiBlock();
  Engine.requestSimpleTools();
  Engine.requestCircuits();
  if (Loader.isModLoaded(""String_Node_Str"") && !getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"")) {
    loader.applyModule(ThaumBlastLoader.class);
  }
  ANTIMATTER_BREAK_UNBREAKABLE=getConfig().getBoolean(""String_Node_Str"",Configuration.CATEGORY_GENERAL,true,""String_Node_Str"");
  DEBUG_MISSILE_MANAGER=getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",Engine.runningAsDev,""String_Node_Str"");
  missile_firing_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,4,""String_Node_Str"");
  blockWarhead=manager.newBlock(TileWarhead.class);
  blockMissileDisplay=manager.newBlock(TileMissileDisplay.class);
  blockLauncherFrame=manager.newBlock(""String_Node_Str"",BlockLauncherFrame.class,ItemBlockMetadata.class);
  blockLauncherParts=manager.newBlock(""String_Node_Str"",BlockLauncherPart.class,ItemBlockMetadata.class);
  blockLaunchPad=manager.newBlock(""String_Node_Str"",BlockLaunchPad.class,ItemBlockMetadata.class);
  blockSmallPortableLauncher=manager.newBlock(TileSmallLauncher.class);
  blockSmallSilo=manager.newBlock(TileSmallSilo.class);
  blockStandardLauncher=manager.newBlock(TileStandardLauncher.class);
  blockMediumLauncher=manager.newBlock(TileMediumLauncher.class);
  blockLargeLauncher=manager.newBlock(TileLargeLauncher.class);
  blockStandardLauncher.setCreativeTab(null);
  blockMediumLauncher.setCreativeTab(null);
  blockLargeLauncher.setCreativeTab(null);
  NEIProxy.hideItem(blockStandardLauncher);
  NEIProxy.hideItem(blockMediumLauncher);
  NEIProxy.hideItem(blockLargeLauncher);
  blockSiloController=manager.newBlock(""String_Node_Str"",TileController.class);
  blockMissile=manager.newBlock(TileMissile.class);
  if (Engine.runningAsDev) {
    blockExplosiveMarker=manager.newBlock(BlockExplosiveMarker.class,ItemBlockMetadata.class);
    manager.newBlock(TileRotationTest.class);
  }
  itemMissile=manager.newItem(""String_Node_Str"",ItemMissile.class);
  itemRocketLauncher=manager.newItem(""String_Node_Str"",ItemRocketLauncher.class);
  itemEngineModules=manager.newItem(""String_Node_Str"",ItemEngineModules.class);
  itemGuidanceModules=manager.newItem(""String_Node_Str"",ItemGuidanceModules.class);
  itemLinkTool=manager.newItem(""String_Node_Str"",ItemLinkTool.class);
  itemGPSTool=manager.newItem(""String_Node_Str"",ItemGPSFlag.class);
  itemMissileParts=manager.newItem(""String_Node_Str"",ItemMissileParts.class);
  MissileCasings.register();
  WarheadCasings.register();
  Engines.register();
  GuidanceModules.register();
  CREATIVE_TAB.itemStack=MissileCasings.SMALL.newModuleStack();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(proxy);
  FMLCommonHandler.instance().bus().register(this);
  Engine.heatedRockRequested=true;
  Engine.requestOres();
  Engine.requestResources();
  Engine.requestSheetMetalContent();
  Engine.requestMultiBlock();
  Engine.requestSimpleTools();
  Engine.requestCircuits();
  if (Loader.isModLoaded(""String_Node_Str"") && !getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"")) {
    loader.applyModule(ThaumBlastLoader.class);
  }
  ANTIMATTER_BREAK_UNBREAKABLE=getConfig().getBoolean(""String_Node_Str"",Configuration.CATEGORY_GENERAL,true,""String_Node_Str"");
  DEBUG_MISSILE_MANAGER=getConfig().getBoolean(""String_Node_Str"",""String_Node_Str"",Engine.runningAsDev,""String_Node_Str"");
  missile_firing_volume=getConfig().getFloat(""String_Node_Str"",""String_Node_Str"",1.0F,0,4,""String_Node_Str"");
  blockWarhead=manager.newBlock(TileWarhead.class);
  blockMissileDisplay=manager.newBlock(TileMissileDisplay.class);
  blockLauncherFrame=manager.newBlock(""String_Node_Str"",BlockLauncherFrame.class,ItemBlockMetadata.class);
  blockLauncherParts=manager.newBlock(""String_Node_Str"",BlockLauncherPart.class,ItemBlockMetadata.class);
  blockLaunchPad=manager.newBlock(""String_Node_Str"",BlockLaunchPad.class,ItemBlockMetadata.class);
  blockSmallPortableLauncher=manager.newBlock(TileSmallLauncher.class);
  blockSmallSilo=manager.newBlock(TileSmallSilo.class);
  blockMediumLauncher=manager.newBlock(TileMediumLauncher.class);
  blockLargeLauncher=manager.newBlock(TileLargeLauncher.class);
  blockMediumLauncher.setCreativeTab(null);
  blockLargeLauncher.setCreativeTab(null);
  NEIProxy.hideItem(blockMediumLauncher);
  NEIProxy.hideItem(blockLargeLauncher);
  blockSiloController=manager.newBlock(""String_Node_Str"",TileController.class);
  blockMissile=manager.newBlock(TileMissile.class);
  if (Engine.runningAsDev) {
    blockExplosiveMarker=manager.newBlock(BlockExplosiveMarker.class,ItemBlockMetadata.class);
    manager.newBlock(TileRotationTest.class);
  }
  itemMissile=manager.newItem(""String_Node_Str"",ItemMissile.class);
  itemRocketLauncher=manager.newItem(""String_Node_Str"",ItemRocketLauncher.class);
  itemEngineModules=manager.newItem(""String_Node_Str"",ItemEngineModules.class);
  itemGuidanceModules=manager.newItem(""String_Node_Str"",ItemGuidanceModules.class);
  itemLinkTool=manager.newItem(""String_Node_Str"",ItemLinkTool.class);
  itemGPSTool=manager.newItem(""String_Node_Str"",ItemGPSFlag.class);
  itemMissileParts=manager.newItem(""String_Node_Str"",ItemMissileParts.class);
  MissileCasings.register();
  WarheadCasings.register();
  Engines.register();
  GuidanceModules.register();
  CREATIVE_TAB.itemStack=MissileCasings.SMALL.newModuleStack();
}",0.9473147518694766
169646,"@Override public void preInit(){
  super.preInit();
  ICBM.blockMissileWorkstation=ICBM.INSTANCE.getManager().newBlock(""String_Node_Str"",TileSmallMissileWorkstation.class);
}","@Override public void preInit(){
  super.preInit();
  ICBM.blockMissileWorkstation=ICBM.INSTANCE.getManager().newBlock(""String_Node_Str"",TileSmallMissileWorkstation.class);
  ICBM.blockStandardLauncher=ICBM.INSTANCE.getManager().newBlock(""String_Node_Str"",TileStandardLauncher.class);
}",0.7565217391304347
169647,"protected int addRods(int count){
  if (!frameCompleted) {
    int addition=Math.min(count,Math.max(MAX_ROD_COUNT - rodsContained,0));
    if (addition > 0) {
      rodsContained+=addition;
      frameLevel=rodsContained % ROD_PER_LEVEL_COUNT;
      if (frameLevel >= MAX_ROD_LEVEL_COUNT) {
        frameCompleted=true;
      }
    }
    return addition;
  }
  return 0;
}","protected int addRods(int count){
  if (!frameCompleted) {
    int addition=Math.min(count,Math.max(MAX_ROD_COUNT - rodsContained,0));
    if (addition > 0) {
      rodsContained+=addition;
      frameLevel=rodsContained / ROD_PER_LEVEL_COUNT;
      if (frameLevel >= MAX_ROD_LEVEL_COUNT) {
        frameCompleted=true;
      }
    }
    return addition;
  }
  return 0;
}",0.9973118279569892
169648,"protected int addPlates(int count){
  if (!skinCompleted) {
    int addition=Math.min(count,Math.max(MAX_PLATE_COUNT - platesContained,0));
    if (addition > 0) {
      platesContained+=addition;
      plateLevel=platesContained % PLATE_PER_LEVEL_COUNT;
      if (plateLevel >= MAX_PLATE_LEVEL_COUNT) {
        skinCompleted=true;
      }
    }
    return addition;
  }
  return 0;
}","protected int addPlates(int count){
  if (!skinCompleted) {
    int addition=Math.min(count,Math.max(MAX_PLATE_COUNT - platesContained,0));
    if (addition > 0) {
      platesContained+=addition;
      plateLevel=platesContained / PLATE_PER_LEVEL_COUNT;
      if (plateLevel >= MAX_PLATE_LEVEL_COUNT) {
        skinCompleted=true;
      }
    }
    return addition;
  }
  return 0;
}",0.9973958333333334
169649,"@Override public NBTTagCompound save(NBTTagCompound nbt){
  nbt.setInteger(""String_Node_Str"",rodsContained);
  nbt.setInteger(""String_Node_Str"",platesContained);
  if (rocketComputer != null) {
    NBTTagCompound cTag=new NBTTagCompound();
    rocketComputer.writeToNBT(cTag);
    nbt.setTag(""String_Node_Str"",cTag);
  }
  if (rocketEngine != null) {
    NBTTagCompound cTag=new NBTTagCompound();
    rocketEngine.writeToNBT(cTag);
    nbt.setTag(""String_Node_Str"",cTag);
  }
  if (warhead != null) {
    NBTTagCompound cTag=new NBTTagCompound();
    warhead.writeToNBT(cTag);
    nbt.setTag(""String_Node_Str"",cTag);
  }
  return nbt;
}","@Override public NBTTagCompound save(NBTTagCompound nbt){
  nbt.setInteger(""String_Node_Str"",rodsContained);
  nbt.setInteger(""String_Node_Str"",platesContained);
  if (rocketComputer != null) {
    NBTTagCompound cTag=new NBTTagCompound();
    rocketComputer.writeToNBT(cTag);
    nbt.setTag(""String_Node_Str"",cTag);
  }
  if (rocketEngine != null) {
    NBTTagCompound cTag=new NBTTagCompound();
    rocketEngine.writeToNBT(cTag);
    nbt.setTag(""String_Node_Str"",cTag);
  }
  if (warhead != null) {
    NBTTagCompound cTag=new NBTTagCompound();
    warhead.writeToNBT(cTag);
    nbt.setTag(""String_Node_Str"",cTag);
  }
  if (rocketComputer != null && rocketEngine != null) {
    this.gutsCompleted=true;
  }
  return nbt;
}",0.93460690668626
169650,"/** 
 * Assumes canAddItem was already called, but still checks for sanity at some level. Will always consume item as it only checks type.
 * @param stack - item being added
 * @return true if the item was accepted
 */
public boolean addItem(final ItemStack stack){
  if (stack != null) {
    if (isRod(stack) && !frameCompleted) {
      int added=addRods(stack.stackSize);
      stack.stackSize-=added;
      return added > 0;
    }
 else     if (isPlate(stack) && !skinCompleted) {
      int added=addPlates(stack.stackSize);
      stack.stackSize-=added;
      return added > 0;
    }
 else {
      Item item=stack.getItem();
      boolean added=false;
      if (item instanceof IRocketEngine) {
        if (((IMissileModule)item).getMissileSize() == MissileCasings.STANDARD.ordinal()) {
          if (rocketEngine == null) {
            rocketEngine=stack.copy();
            rocketEngine.stackSize=1;
            stack.stackSize--;
            added=true;
          }
        }
      }
 else       if (item instanceof IWarhead) {
        if (warhead == null) {
          warhead=stack.copy();
          warhead.stackSize=1;
          stack.stackSize--;
          added=true;
        }
      }
 else       if (item instanceof IGuidance) {
        if (rocketComputer == null) {
          rocketComputer=stack.copy();
          rocketComputer.stackSize=1;
          stack.stackSize--;
          added=true;
        }
      }
      if (rocketComputer != null && rocketEngine != null) {
        this.gutsCompleted=true;
      }
      return added;
    }
  }
  return false;
}","/** 
 * Assumes canAddItem was already called, but still checks for sanity at some level. Will always consume item as it only checks type.
 * @param stack - item being added
 * @return true if the item was accepted
 */
public boolean addItem(final ItemStack stack){
  if (stack != null) {
    if (isRod(stack) && !frameCompleted) {
      int added=addRods(stack.stackSize);
      stack.stackSize-=added;
      return added > 0;
    }
 else     if (isPlate(stack) && !skinCompleted) {
      int added=addPlates(stack.stackSize);
      stack.stackSize-=added;
      return added > 0;
    }
 else {
      Item item=stack.getItem();
      boolean added=false;
      if (item instanceof IModuleItem) {
        IModule module=((IModuleItem)item).getModule(stack);
        if (module instanceof IRocketEngine) {
          if (((IMissileModule)item).getMissileSize() == MissileCasings.STANDARD.ordinal()) {
            if (rocketEngine == null) {
              rocketEngine=stack.copy();
              rocketEngine.stackSize=1;
              stack.stackSize--;
              added=true;
            }
          }
        }
 else         if (module instanceof IWarhead) {
          if (warhead == null) {
            warhead=stack.copy();
            warhead.stackSize=1;
            stack.stackSize--;
            added=true;
          }
        }
 else         if (module instanceof IGuidance) {
          if (rocketComputer == null) {
            rocketComputer=stack.copy();
            rocketComputer.stackSize=1;
            stack.stackSize--;
            added=true;
          }
        }
        if (rocketComputer != null && rocketEngine != null) {
          this.gutsCompleted=true;
        }
        return added;
      }
    }
  }
  return false;
}",0.8989777510523151
169651,"@Override public ByteBuf writeBytes(ByteBuf buf){
  return buf;
}","@Override public ByteBuf writeBytes(ByteBuf buf){
  buf.writeInt(frameLevel);
  buf.writeInt(plateLevel);
  ByteBufUtils.writeItemStack(buf,warhead != null ? warhead : new ItemStack(Blocks.stone));
  ByteBufUtils.writeItemStack(buf,rocketComputer != null ? rocketComputer : new ItemStack(Blocks.stone));
  ByteBufUtils.writeItemStack(buf,rocketEngine != null ? rocketEngine : new ItemStack(Blocks.stone));
  return buf;
}",0.2674897119341564
169652,"@Override public void load(NBTTagCompound nbt){
  int rods=nbt.getInteger(""String_Node_Str"");
  int plates=nbt.getInteger(""String_Node_Str"");
  if (rods > 0) {
    addRods(rods);
  }
  if (plates > 0) {
    addPlates(plates);
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    rocketComputer=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (rocketComputer != null && !(rocketComputer.getItem() instanceof IGuidance)) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    rocketEngine=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (rocketEngine != null && !(rocketEngine.getItem() instanceof IRocketEngine)) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    warhead=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (warhead != null && !(warhead.getItem() instanceof IWarhead)) {
      System.out.println(""String_Node_Str"");
    }
  }
}","@Override public void load(NBTTagCompound nbt){
  int rods=nbt.getInteger(""String_Node_Str"");
  int plates=nbt.getInteger(""String_Node_Str"");
  if (rods > 0) {
    addRods(rods);
  }
  if (plates > 0) {
    addPlates(plates);
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    rocketComputer=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (rocketComputer != null && !(rocketComputer.getItem() instanceof IModuleItem)) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    rocketEngine=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (rocketEngine != null && !(rocketEngine.getItem() instanceof IModuleItem)) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    warhead=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    if (warhead != null && !(warhead.getItem() instanceof IModuleItem)) {
      System.out.println(""String_Node_Str"");
    }
  }
}",0.9720176730486008
169653,"/** 
 * Checks if the item is part of the recipe, and is still required by the recipe.
 * @param stack - stack being added,can be null but will return false
 * @return true if the item can be added.
 */
public boolean canAddItem(final ItemStack stack){
  if (stack != null) {
    if (isRod(stack) && !frameCompleted) {
      return true;
    }
 else     if (isPlate(stack) && !skinCompleted) {
      return true;
    }
 else {
      Item item=stack.getItem();
      if (item instanceof IRocketEngine) {
        return ((IMissileModule)item).getMissileSize() == MissileCasings.STANDARD.ordinal();
      }
 else       if (item instanceof IWarhead) {
        return true;
      }
 else       if (item instanceof IGuidance) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Checks if the item is part of the recipe, and is still required by the recipe.
 * @param stack - stack being added,can be null but will return false
 * @return true if the item can be added.
 */
public boolean canAddItem(final ItemStack stack){
  if (stack != null) {
    if (isRod(stack) && !frameCompleted) {
      return rodsContained < MAX_ROD_COUNT;
    }
 else     if (frameCompleted) {
      if (isPlate(stack) && !skinCompleted) {
        return platesContained < MAX_PLATE_COUNT;
      }
 else {
        Item item=stack.getItem();
        if (item instanceof IModuleItem) {
          IModule module=((IModuleItem)item).getModule(stack);
          if (rocketEngine == null && module instanceof IRocketEngine) {
            return ((IMissileModule)item).getMissileSize() == MissileCasings.STANDARD.ordinal();
          }
 else           if (warhead == null && module instanceof IWarhead) {
            return true;
          }
 else           if (rocketComputer == null && module instanceof IGuidance) {
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.7865886109632784
169654,"@Override public StandardMissileCrafting readBytes(ByteBuf buf){
  return this;
}","@Override public StandardMissileCrafting readBytes(ByteBuf buf){
  frameLevel=buf.readInt();
  plateLevel=buf.readInt();
  ItemStack stack=ByteBufUtils.readItemStack(buf);
  if (stack.getItem() instanceof IModuleItem) {
    warhead=stack;
  }
  stack=ByteBufUtils.readItemStack(buf);
  if (stack.getItem() instanceof IModuleItem) {
    rocketComputer=stack;
  }
  stack=ByteBufUtils.readItemStack(buf);
  if (stack.getItem() instanceof IModuleItem) {
    rocketEngine=stack;
  }
  return this;
}",0.2395833333333333
169655,"protected int addRods(int count){
  if (!frameCompleted) {
    int addition=Math.min(count,Math.max(MAX_ROD_COUNT - rodsContained,0));
    if (addition > 0) {
      rodsContained+=addition;
      frameLevel=rodsContained / ROD_PER_LEVEL_COUNT;
      if (frameLevel >= MAX_ROD_LEVEL_COUNT) {
        frameCompleted=true;
      }
    }
    return addition;
  }
  return 0;
}","protected int addRods(int count){
  if (!frameCompleted) {
    int addition=Math.min(count,Math.max(MAX_ROD_COUNT - rodsContained,0));
    if (addition > 0) {
      rodsContained+=addition;
      frameLevel=rodsContained / ROD_PER_LEVEL_COUNT;
      if (rodsContained >= MAX_ROD_COUNT) {
        frameCompleted=true;
      }
    }
    return addition;
  }
  return 0;
}",0.9608636977058028
169656,"protected int addPlates(int count){
  if (!skinCompleted) {
    int addition=Math.min(count,Math.max(MAX_PLATE_COUNT - platesContained,0));
    if (addition > 0) {
      platesContained+=addition;
      plateLevel=platesContained / PLATE_PER_LEVEL_COUNT;
      if (plateLevel >= MAX_PLATE_LEVEL_COUNT) {
        skinCompleted=true;
      }
    }
    return addition;
  }
  return 0;
}","protected int addPlates(int count){
  if (!skinCompleted) {
    int addition=Math.min(count,Math.max(MAX_PLATE_COUNT - platesContained,0));
    if (addition > 0) {
      platesContained+=addition;
      plateLevel=platesContained / PLATE_PER_LEVEL_COUNT;
      if (platesContained >= MAX_PLATE_COUNT) {
        skinCompleted=true;
      }
    }
    return addition;
  }
  return 0;
}",0.9726205997392438
169657,"/** 
 * Checks if the item is part of the recipe, and is still required by the recipe.
 * @param stack - stack being added,can be null but will return false
 * @return true if the item can be added.
 */
public boolean canAddItem(final ItemStack stack){
  if (stack != null) {
    if (isRod(stack) && !frameCompleted) {
      return rodsContained < MAX_ROD_COUNT;
    }
 else     if (frameCompleted) {
      if (isPlate(stack) && !skinCompleted) {
        return platesContained < MAX_PLATE_COUNT;
      }
 else {
        Item item=stack.getItem();
        if (item instanceof IModuleItem) {
          IModule module=((IModuleItem)item).getModule(stack);
          if (module instanceof IRocketEngine) {
            return rocketEngine == null;
          }
 else           if (module instanceof IWarhead) {
            return warhead == null;
          }
 else           if (module instanceof IGuidance) {
            return rocketComputer == null;
          }
        }
      }
    }
  }
  return false;
}","/** 
 * Checks if the item is part of the recipe, and is still required by the recipe.
 * @param stack - stack being added,can be null but will return false
 * @return true if the item can be added.
 */
public boolean canAddItem(final ItemStack stack){
  if (stack != null) {
    if (isRod(stack)) {
      return rodsContained < MAX_ROD_COUNT;
    }
 else     if (frameCompleted) {
      if (isPlate(stack)) {
        return platesContained < MAX_PLATE_COUNT;
      }
 else {
        Item item=stack.getItem();
        if (item instanceof IModuleItem) {
          IModule module=((IModuleItem)item).getModule(stack);
          if (module instanceof IRocketEngine) {
            return rocketEngine == null;
          }
 else           if (module instanceof IWarhead) {
            return warhead == null;
          }
 else           if (module instanceof IGuidance) {
            return rocketComputer == null;
          }
        }
      }
    }
  }
  return false;
}",0.9812468322351748
169658,"@Override @SideOnly(Side.CLIENT) public void renderDynamic(Pos center,float f,int pass){
  if (missile != null) {
    GL11.glPushMatrix();
    Pos pos=center;
switch (ForgeDirection.getOrientation(getMetadata())) {
case NORTH:
      pos=pos.add(0.7,-0.5,1.9);
    break;
case SOUTH:
  pos=pos.add(0.7,-0.5,3.86);
break;
case EAST:
pos=pos.add(1.7,-0.5,2.86);
break;
case WEST:
pos=pos.add(-0.3,-0.5,2.86);
break;
}
GL11.glTranslatef(pos.xf(),pos.yf(),pos.zf());
GL11.glRotatef(45f,0,1,0);
FMLClientHandler.instance().getClient().renderEngine.bindTexture(Assets.GREY_FAKE_TEXTURE);
Assets.STANDARD_MISSILE_MODEL.renderAll();
GL11.glPopMatrix();
}
 else if (recipe != null) {
if (!processedModel) {
processModel();
}
GL11.glPushMatrix();
Pos pos=center;
final float yf=2.2f;
switch (ForgeDirection.getOrientation(getMetadata())) {
case NORTH:
pos=pos.add(-0.65,yf,0.95);
break;
case SOUTH:
pos=pos.add(-0.65,yf,2.95);
break;
case EAST:
pos=pos.add(.35,yf,1.95);
break;
case WEST:
pos=pos.add(-1.65,yf,1.95);
break;
}
GL11.glTranslatef(pos.xf(),pos.yf(),pos.zf());
GL11.glRotatef(45f,0,1,0);
GL11.glScalef(0.85f,0.85f,0.85f);
FMLClientHandler.instance().getClient().renderEngine.bindTexture(Assets.GREY_FAKE_TEXTURE);
tick++;
if (tick == 1) {
recipe.warhead=MissileModuleBuilder.INSTANCE.buildWarhead(WarheadCasings.EXPLOSIVE_STANDARD,null).toStack();
recipe.rocketEngine=Engines.COAL_ENGINE.newModuleStack();
recipe.rocketComputer=GuidanceModules.CHIP_ONE.newModuleStack();
}
if (recipe.platesContained >= StandardMissileCrafting.MAX_PLATE_COUNT) {
tick=0;
recipe.platesContained=0;
recipe.rodsContained=0;
recipe.frameCompleted=false;
recipe.skinCompleted=false;
}
if (tick % 100 == 0) {
recipe.addPlates(1);
}
for (int i=0; i < recipe.frameLevel && i < frame.length; i++) {
frame[i].render();
}
if (recipe.frameCompleted) {
if (recipe.warhead != null) {
warhead.render();
}
if (recipe.rocketComputer != null) {
guidance.render();
}
if (recipe.rocketEngine != null) {
for (GroupObject o : engine) {
o.render();
}
}
}
if (recipe.platesContained > 0) {
for (int i=0; i < recipe.platesContained; i++) {
int layer=i / StandardMissileCrafting.PLATE_PER_LEVEL_COUNT;
int set=i % StandardMissileCrafting.PLATE_PER_LEVEL_COUNT;
if (layer < skinLayers.length) {
skinLayers[layer][set].render();
}
}
}
GL11.glPopMatrix();
}
}","@Override @SideOnly(Side.CLIENT) public void renderDynamic(Pos center,float f,int pass){
  if (missile != null) {
    GL11.glPushMatrix();
    Pos pos=center;
switch (ForgeDirection.getOrientation(getMetadata())) {
case NORTH:
      pos=pos.add(0.7,-0.5,1.9);
    break;
case SOUTH:
  pos=pos.add(0.7,-0.5,3.86);
break;
case EAST:
pos=pos.add(1.7,-0.5,2.86);
break;
case WEST:
pos=pos.add(-0.3,-0.5,2.86);
break;
}
GL11.glTranslatef(pos.xf(),pos.yf(),pos.zf());
GL11.glRotatef(45f,0,1,0);
FMLClientHandler.instance().getClient().renderEngine.bindTexture(Assets.GREY_FAKE_TEXTURE);
Assets.STANDARD_MISSILE_MODEL.renderAll();
GL11.glPopMatrix();
}
 else if (recipe != null) {
if (!processedModel) {
processModel();
}
GL11.glPushMatrix();
Pos pos=center;
final float yf=2.2f;
switch (ForgeDirection.getOrientation(getMetadata())) {
case NORTH:
pos=pos.add(-0.65,yf,0.95);
break;
case SOUTH:
pos=pos.add(-0.65,yf,2.95);
break;
case EAST:
pos=pos.add(.35,yf,1.95);
break;
case WEST:
pos=pos.add(-1.65,yf,1.95);
break;
}
GL11.glTranslatef(pos.xf(),pos.yf(),pos.zf());
GL11.glRotatef(45f,0,1,0);
GL11.glScalef(0.85f,0.85f,0.85f);
FMLClientHandler.instance().getClient().renderEngine.bindTexture(Assets.GREY_FAKE_TEXTURE);
for (int i=0; i < recipe.frameLevel && i < frame.length; i++) {
frame[i].render();
}
if (recipe.frameCompleted) {
if (recipe.warhead != null) {
warhead.render();
}
if (recipe.rocketComputer != null) {
guidance.render();
}
if (recipe.rocketEngine != null) {
for (GroupObject o : engine) {
o.render();
}
}
}
if (recipe.platesContained > 0) {
for (int i=0; i < recipe.platesContained; i++) {
int layer=i / StandardMissileCrafting.PLATE_PER_LEVEL_COUNT;
int set=i % StandardMissileCrafting.PLATE_PER_LEVEL_COUNT;
if (layer < skinLayers.length) {
skinLayers[layer][set].render();
}
}
}
GL11.glPopMatrix();
}
}",0.6697314299540286
169659,"@Override public boolean shouldPath(Location location){
  if (location.getHardness() < 0) {
    return false;
  }
 else   if (location.getTileEntity() != null) {
    return false;
  }
 else   if (location.isAirBlock()) {
    return false;
  }
  Block block=location.getBlock();
  if (block == Blocks.portal) {
    return false;
  }
 else   if (block == Blocks.end_portal) {
    return false;
  }
 else   if (block == Blocks.end_portal_frame) {
    return false;
  }
  return super.shouldPath(location);
}","@Override public boolean shouldPath(Location location){
  if (super.shouldPath(location)) {
    if (location.getHardness() < 0) {
      return false;
    }
 else     if (location.getTileEntity() != null) {
      return false;
    }
 else     if (location.isAirBlock()) {
      return false;
    }
    Block block=location.getBlock();
    if (block == Blocks.portal) {
      return false;
    }
 else     if (block == Blocks.end_portal) {
      return false;
    }
 else     if (block == Blocks.end_portal_frame) {
      return false;
    }
    return true;
  }
  return false;
}",0.6247689463955638
169660,"@Override public void getEffectedBlocks(List<IWorldEdit> list){
  super.getEffectedBlocks(list);
  Iterator<IWorldEdit> it=list.iterator();
  List<IWorldEdit> newList=new ArrayList();
  while (it.hasNext()) {
    IWorldEdit edit=it.next();
    System.out.println(edit);
    Location location=getRandomLocationChecked();
    if (location != null) {
      System.out.println(""String_Node_Str"" + location);
      newList.add(new BlockEdit(location).set(edit.getBlock(),edit.getBlockMetadata(),false,true));
      newList.add(new BlockEdit(edit.world(),edit.x(),edit.y(),edit.z()).set(Blocks.air,0,false,true));
    }
    it.remove();
  }
  list.addAll(newList);
}","@Override public void getEffectedBlocks(List<IWorldEdit> list){
  super.getEffectedBlocks(list);
  Iterator<IWorldEdit> it=list.iterator();
  List<IWorldEdit> newList=new ArrayList();
  System.out.println(list.size());
  for (  IWorldEdit edit : list) {
    System.out.println(edit);
  }
  while (it.hasNext()) {
    IWorldEdit edit=it.next();
    if (!newList.contains(edit)) {
      Location location=getRandomLocationChecked();
      if (location != null) {
        newList.add(new BlockEdit(location).set(edit.getBlock(),edit.getBlockMetadata(),false,true));
      }
    }
  }
  list.addAll(newList);
  System.out.println(""String_Node_Str"" + list.size());
}",0.5601816805450416
169661,"@Override public void onPostInit(){
  if (Engine.itemSheetMetal != null) {
    RocketEngineCoalPowered engine=new RocketEngineCoalPowered(new ItemStack(ICBM.itemEngineModules,1,Engines.COAL_ENGINE.ordinal()));
    ItemStack engineStack=engine.toStack();
    GameRegistry.addRecipe(new ShapedOreRecipe(engineStack,""String_Node_Str"",""String_Node_Str"",'R',Items.redstone,'F',Blocks.furnace,'L',Items.flint_and_steel,'C',ItemSheetMetal.SheetMetal.CONE_SMALL));
    engine.getInventory().setInventorySlotContents(0,new ItemStack(Items.coal,5));
    GameRegistry.addShapelessRecipe(engine.toStack(),engineStack,Items.coal,Items.coal,Items.coal,Items.coal,Items.coal);
    engine.getInventory().setInventorySlotContents(0,new ItemStack(Items.coal,5,1));
    GameRegistry.addShapelessRecipe(engine.toStack(),engineStack,new ItemStack(Items.coal,1,1),new ItemStack(Items.coal,1,1),new ItemStack(Items.coal,1,1),new ItemStack(Items.coal,1,1),new ItemStack(Items.coal,1,1));
  }
}","@Override public void onPostInit(){
  if (Engine.itemSheetMetal != null) {
    RocketEngineCoalPowered engine=new RocketEngineCoalPowered(new ItemStack(ICBM.itemEngineModules,1,Engines.COAL_ENGINE.ordinal()));
    ItemStack engineStack=engine.toStack();
    GameRegistry.addRecipe(new ShapedOreRecipe(engineStack,""String_Node_Str"",""String_Node_Str"",'R',Items.redstone,'F',Blocks.furnace,'L',Items.flint_and_steel,'C',ItemSheetMetal.SheetMetal.CONE_SMALL.stack()));
    engine.getInventory().setInventorySlotContents(0,new ItemStack(Items.coal,5));
    GameRegistry.addShapelessRecipe(engine.toStack(),engineStack,Items.coal,Items.coal,Items.coal,Items.coal,Items.coal);
    engine.getInventory().setInventorySlotContents(0,new ItemStack(Items.coal,5,1));
    GameRegistry.addShapelessRecipe(engine.toStack(),engineStack,new ItemStack(Items.coal,1,1),new ItemStack(Items.coal,1,1),new ItemStack(Items.coal,1,1),new ItemStack(Items.coal,1,1),new ItemStack(Items.coal,1,1));
  }
}",0.9958890030832476
169662,"@Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  super.drawGuiContainerForegroundLayer(mouseX,mouseY);
  if (ticks++ >= updateGuiTicks) {
    reloadData();
  }
  drawStringCentered(LanguageUtility.getLocalName(controller.getInventoryName()),85,10);
  if (!editMode && (controller.launcherData == null || controller.launcherData.size() == 0)) {
    drawStringCentered(""String_Node_Str"",85,40);
  }
}","@Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  super.drawGuiContainerForegroundLayer(mouseX,mouseY);
  if (ticks++ >= updateGuiTicks) {
    reloadData();
  }
  drawStringCentered(LanguageUtility.getLocalName(controller.getInventoryName()),85,10);
  if (!editMode && (controller.launcherData == null || controller.launcherData.size() == 0)) {
    drawStringCentered(LanguageUtility.getLocal(""String_Node_Str""),85,40);
    drawStringCentered(LanguageUtility.getLocal(""String_Node_Str""),85,50);
  }
}",0.8953367875647669
169663,"@Override protected void updateMotion(){
  super.updateMotion();
  if (target_pos != null) {
    if (this.posY >= 1000) {
      MissileTracker.addToTracker(this);
    }
  }
  if (this.ticksInAir > 0)   this.spawnMissileSmoke();
}","@Override protected void updateMotion(){
  super.updateMotion();
  if (target_pos != null) {
    if (this.posY >= MissileTracker.MAX_SPAWN_OUT_Y) {
      MissileTracker.addToTracker(this);
    }
  }
  if (this.ticksInAir > 0)   this.spawnMissileSmoke();
}",0.9297520661157024
169664,"public static void spawnMissileOverTarget(Missile missileModuleData,Location location){
  EntityMissile missile=new EntityMissile(location.world);
  missile.setMissile(missileModuleData);
  Random rand=location.world.rand;
  Pos pos=location.toPos();
  pos.sub(0,100 + (100 * rand.nextInt()),0);
  float accuracy=100f;
  if (missile.getMissile() != null && missile.getMissile().getGuidance() != null) {
    accuracy=missile.getMissile().getGuidance().getFallOffRange(missile.getMissile());
  }
  pos.add(accuracy * rand.nextFloat() - accuracy * rand.nextFloat(),0,0);
  pos.add(0,accuracy * rand.nextFloat() - accuracy * rand.nextFloat(),0);
  pos.add(0,0,accuracy * rand.nextFloat() - accuracy * rand.nextFloat());
  missile.setPosition(pos.x(),pos.y(),pos.z());
  missile.setVelocity(0,-1,0);
  location.world.spawnEntityInWorld(missile);
  missile.setIntoMotion();
  debug(""String_Node_Str"" + missile.getUniqueID() + ""String_Node_Str""+ location+ ""String_Node_Str""+ missileModuleData);
}","public static void spawnMissileOverTarget(Missile missileModuleData,Location location){
  EntityMissile missile=new EntityMissile(location.world);
  missile.setMissile(missileModuleData);
  Random rand=location.world.rand;
  Pos pos=location.toPos();
  pos.sub(0,10 + (100 * rand.nextFloat()),0);
  float accuracy=100f;
  if (missile.getMissile() != null && missile.getMissile().getGuidance() != null) {
    accuracy=missile.getMissile().getGuidance().getFallOffRange(missile.getMissile());
  }
  pos.add(accuracy * rand.nextFloat() - accuracy * rand.nextFloat(),0,0);
  pos.add(0,accuracy * rand.nextFloat() - accuracy * rand.nextFloat(),0);
  pos.add(0,0,accuracy * rand.nextFloat() - accuracy * rand.nextFloat());
  missile.setPosition(pos.x(),pos.y(),pos.z());
  missile.setVelocity(0,-1,0);
  location.world.spawnEntityInWorld(missile);
  missile.setIntoMotion();
  debug(""String_Node_Str"" + missile.getUniqueID() + ""String_Node_Str""+ location+ ""String_Node_Str""+ missileModuleData);
}",0.9964628600303184
169665,"public boolean update(World world){
  Iterator<MissileTrackingData> it=missiles.iterator();
  while (it.hasNext()) {
    MissileTrackingData data=it.next();
    if (data.isValid()) {
      data.ticks++;
      if (data.shouldRespawn()) {
        Location loc=new Location(world,data.target);
        if (loc.isChunkLoaded()) {
          Entity entity=EntityList.createEntityFromNBT(data.m_save,world);
          if (entity instanceof EntityMissile) {
            spawnMissileOverTarget(((EntityMissile)entity).getMissile(),new Location(loc.world,loc.x(),1000,loc.z()));
          }
 else {
            debug(""String_Node_Str"" + data);
          }
          it.remove();
        }
      }
    }
 else {
      debug(""String_Node_Str"" + data);
      it.remove();
    }
  }
  return true;
}","public boolean update(World world){
  Iterator<MissileTrackingData> it=missiles.iterator();
  while (it.hasNext()) {
    MissileTrackingData data=it.next();
    if (data.isValid()) {
      data.ticks++;
      if (data.shouldRespawn()) {
        Location loc=new Location(world,data.target);
        if (loc.isChunkLoaded()) {
          Entity entity=EntityList.createEntityFromNBT(data.m_save,world);
          if (entity instanceof EntityMissile) {
            spawnMissileOverTarget(((EntityMissile)entity).getMissile(),new Location(loc.world,loc.x(),MAX_SPAWN_OUT_Y,loc.z()));
          }
 else {
            debug(""String_Node_Str"" + data);
          }
          it.remove();
        }
      }
    }
 else {
      debug(""String_Node_Str"" + data);
      it.remove();
    }
  }
  return true;
}",0.9879822896900696
169666,"@Override public boolean onMultiTileActivated(IMultiTile tile,EntityPlayer player,int side,IPos3D hit){
  if (isServer()) {
    Pos pos=new Pos((TileEntity)tile).sub(xi(),yi(),zi());
    if (getLayoutOfMultiBlock().containsKey(pos)) {
      if (getMissile() != null) {
        IModule module=null;
        if (player.getHeldItem() != null)         module=((IModuleItem)player.getHeldItem().getItem()).getModule(player.getHeldItem());
        if (isWarheadSide(pos)) {
          if (module == null) {
            if (getMissile().getWarhead() != null) {
              ItemStack stack=getMissile().getWarhead().toStack();
              player.inventory.setInventorySlotContents(player.inventory.currentItem,stack);
              getMissile().setWarhead(null);
              updateMissileItem();
              player.inventoryContainer.detectAndSendChanges();
            }
          }
 else           if (module instanceof Warhead) {
            if (missile.getWarhead() == null) {
              getMissile().setWarhead((Warhead)module);
              reducePlayerHeldItem(player);
              updateMissileItem();
            }
 else {
              player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
            }
          }
 else {
            player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
          }
        }
 else {
          if (module == null) {
            if (getMissile().getEngine() != null) {
              ItemStack stack=getMissile().getEngine().toStack();
              player.inventory.setInventorySlotContents(player.inventory.currentItem,stack);
              getMissile().setEngine(null);
              updateMissileItem();
              player.inventoryContainer.detectAndSendChanges();
            }
          }
 else           if (module instanceof RocketEngine) {
            if (missile.getEngine() == null) {
              getMissile().setEngine((RocketEngine)module);
              reducePlayerHeldItem(player);
              updateMissileItem();
            }
 else {
              player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
            }
          }
 else {
            player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
          }
        }
      }
 else       if (player.getHeldItem() != null) {
        return onPlayerRightClick(player,side,new Pos(hit));
      }
    }
  }
  return true;
}","@Override public boolean onMultiTileActivated(IMultiTile tile,EntityPlayer player,int side,IPos3D hit){
  if (isServer()) {
    Pos pos=new Pos((TileEntity)tile).sub(xi(),yi(),zi());
    if (getLayoutOfMultiBlock().containsKey(pos)) {
      if (getMissile() != null && player.getHeldItem().getItem() instanceof IModule) {
        IModule module=null;
        if (player.getHeldItem() != null)         module=((IModuleItem)player.getHeldItem().getItem()).getModule(player.getHeldItem());
        if (isWarheadSide(pos)) {
          if (module == null) {
            if (getMissile().getWarhead() != null) {
              ItemStack stack=getMissile().getWarhead().toStack();
              player.inventory.setInventorySlotContents(player.inventory.currentItem,stack);
              getMissile().setWarhead(null);
              updateMissileItem();
              player.inventoryContainer.detectAndSendChanges();
            }
          }
 else           if (module instanceof Warhead) {
            if (missile.getWarhead() == null) {
              getMissile().setWarhead((Warhead)module);
              reducePlayerHeldItem(player);
              updateMissileItem();
            }
 else {
              player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
            }
          }
 else {
            player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
          }
        }
 else {
          if (module == null) {
            if (getMissile().getEngine() != null) {
              ItemStack stack=getMissile().getEngine().toStack();
              player.inventory.setInventorySlotContents(player.inventory.currentItem,stack);
              getMissile().setEngine(null);
              updateMissileItem();
              player.inventoryContainer.detectAndSendChanges();
            }
          }
 else           if (module instanceof RocketEngine) {
            if (missile.getEngine() == null) {
              getMissile().setEngine((RocketEngine)module);
              reducePlayerHeldItem(player);
              updateMissileItem();
            }
 else {
              player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
            }
          }
 else {
            player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
          }
        }
      }
 else       if (player.getHeldItem() != null) {
        return onPlayerRightClick(player,side,new Pos(hit));
      }
    }
  }
  return true;
}",0.9892122939141056
169667,"@Override public boolean onPlayerRightClick(EntityPlayer player,int side,Pos hit){
  if (isServer()) {
    if (player.getHeldItem() != null) {
      if (getMissileItem() == null) {
        if (isItemValidForSlot(INPUT_SLOT,player.getHeldItem())) {
          if (InventoryUtility.addItemToSlot(player,this,INPUT_SLOT)) {
            updateMissile();
          }
 else {
            player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
          }
        }
 else {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        }
      }
 else       if (getMissile() != null) {
        IModule module=null;
        if (player.getHeldItem() != null)         module=((IModuleItem)player.getHeldItem().getItem()).getModule(player.getHeldItem());
        if (module instanceof Guidance) {
          if (getMissile().getGuidance() == null) {
            getMissile().setGuidance((Guidance)module);
            player.getHeldItem().stackSize--;
            if (player.getHeldItem().stackSize <= 0)             player.inventory.setInventorySlotContents(player.inventory.currentItem,null);
            player.inventoryContainer.detectAndSendChanges();
            updateMissileItem();
          }
 else {
            player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
          }
        }
 else         if (module instanceof RocketEngine) {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        }
 else         if (module instanceof Warhead) {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        }
 else {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        }
      }
    }
 else     if (player.isSneaking()) {
      InventoryUtility.removeItemFromSlot(player,this,INPUT_SLOT);
      updateMissile();
    }
 else     if (getMissile() != null && getMissile().getGuidance() != null) {
      ItemStack stack=getMissile().getGuidance().toStack();
      player.inventory.setInventorySlotContents(player.inventory.currentItem,stack);
      getMissile().setGuidance(null);
      updateMissileItem();
      player.inventoryContainer.detectAndSendChanges();
    }
  }
  return true;
}","@Override public boolean onPlayerRightClick(EntityPlayer player,int side,Pos hit){
  if (isServer()) {
    if (player.getHeldItem() != null) {
      if (getMissileItem() == null) {
        if (isItemValidForSlot(INPUT_SLOT,player.getHeldItem())) {
          if (InventoryUtility.addItemToSlot(player,this,INPUT_SLOT)) {
            updateMissile();
          }
 else {
            player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
          }
        }
 else {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        }
      }
 else       if (getMissile() != null && player.getHeldItem().getItem() instanceof IModule) {
        IModule module=null;
        if (player.getHeldItem() != null) {
          module=((IModuleItem)player.getHeldItem().getItem()).getModule(player.getHeldItem());
        }
        if (module instanceof Guidance) {
          if (getMissile().getGuidance() == null) {
            getMissile().setGuidance((Guidance)module);
            player.getHeldItem().stackSize--;
            if (player.getHeldItem().stackSize <= 0)             player.inventory.setInventorySlotContents(player.inventory.currentItem,null);
            player.inventoryContainer.detectAndSendChanges();
            updateMissileItem();
          }
 else {
            player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
          }
        }
 else         if (module instanceof RocketEngine) {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        }
 else         if (module instanceof Warhead) {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        }
 else {
          player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        }
      }
    }
 else     if (player.isSneaking()) {
      InventoryUtility.removeItemFromSlot(player,this,INPUT_SLOT);
      updateMissile();
    }
 else     if (getMissile() != null && getMissile().getGuidance() != null) {
      ItemStack stack=getMissile().getGuidance().toStack();
      player.inventory.setInventorySlotContents(player.inventory.currentItem,stack);
      getMissile().setGuidance(null);
      updateMissileItem();
      player.inventoryContainer.detectAndSendChanges();
    }
  }
  return true;
}",0.9853807549639974
169668,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hit_x,float hit_y,float hit_z){
  if (world.isRemote)   return true;
  Location location=new Location(world,x,y,z);
  TileEntity tile=location.getTileEntity();
  if (player.isSneaking()) {
    setLocation(stack,location);
    LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
    if (tile instanceof IPassCode) {
      setCode(stack,((IPassCode)tile).getCode());
    }
    stack.setItemDamage(1);
    return true;
  }
 else {
    Location storedLocation=getLocation(stack);
    if (storedLocation == null || !storedLocation.isAboveBedrock()) {
      LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
      return true;
    }
 else     if (tile instanceof ILinkable) {
      String result=((ILinkable)tile).link(getLocation(stack),getCode(stack));
      if (result != null && result != ""String_Node_Str"") {
        if (result.contains(""String_Node_Str"")) {
          String translation=LanguageUtility.getLocalName(result);
          if (translation == null || translation.isEmpty())           translation=""String_Node_Str"";
          player.addChatComponentMessage(new ChatComponentText(TextColor.RED.getColorString() + translation));
        }
 else {
          LanguageUtility.addChatToPlayer(player,result);
        }
      }
 else {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
      }
      return true;
    }
  }
  return false;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hit_x,float hit_y,float hit_z){
  if (world.isRemote)   return true;
  Location location=new Location(world,x,y,z);
  TileEntity tile=location.getTileEntity();
  if (player.isSneaking()) {
    setLocation(stack,location);
    LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
    if (tile instanceof IPassCode) {
      setCode(stack,((IPassCode)tile).getCode());
    }
    stack.setItemDamage(1);
    player.inventoryContainer.detectAndSendChanges();
    return true;
  }
 else {
    Location storedLocation=getLocation(stack);
    if (storedLocation == null || !storedLocation.isAboveBedrock()) {
      LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
      return true;
    }
 else     if (tile instanceof ILinkable) {
      String result=((ILinkable)tile).link(getLocation(stack),getCode(stack));
      if (result != null && result != ""String_Node_Str"") {
        if (result.contains(""String_Node_Str"")) {
          String translation=LanguageUtility.getLocalName(result);
          if (translation == null || translation.isEmpty())           translation=""String_Node_Str"";
          player.addChatComponentMessage(new ChatComponentText(TextColor.RED.getColorString() + translation));
        }
 else {
          LanguageUtility.addChatToPlayer(player,result);
        }
      }
 else {
        LanguageUtility.addChatToPlayer(player,""String_Node_Str"");
      }
      return true;
    }
  }
  return false;
}",0.9822251481237656
169669,"@Override public boolean read(ByteBuf buf,int id,EntityPlayer player,PacketType type){
  if (isServer()) {
    if (id == 1) {
      this.target=new Pos(buf);
      return true;
    }
  }
 else {
    if (id == 0) {
      this.target=new Pos(buf);
      ItemStack stack=ByteBufUtils.readItemStack(buf);
      if (stack.getItem() instanceof IMissileItem)       this.setInventorySlotContents(0,stack);
 else       this.setInventorySlotContents(0,null);
      return true;
    }
  }
  return false;
}","@Override public boolean read(ByteBuf buf,int id,EntityPlayer player,PacketType type){
  if (id == 1) {
    this.target=new Pos(buf);
    return true;
  }
  return super.read(buf,id,player,type);
}",0.4913294797687861
169670,"@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  this.target=new Pos(nbt);
}","@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  if (nbt.hasKey(""String_Node_Str""))   this.target=new Pos(nbt.getCompoundTag(""String_Node_Str""));
}",0.7560137457044673
169671,"@Override public boolean read(ByteBuf buf,int id,EntityPlayer player,PacketType type){
  if (isServer()) {
    if (id == 1) {
      this.target=new Pos(buf);
      return true;
    }
  }
 else {
  }
  return false;
}","@Override public boolean read(ByteBuf buf,int id,EntityPlayer player,PacketType type){
  if (isServer()) {
    if (id == 1) {
      this.target=new Pos(buf);
      return true;
    }
  }
 else {
    if (id == 0) {
      this.target=new Pos(buf);
      ItemStack stack=ByteBufUtils.readItemStack(buf);
      if (stack.getItem() != Item.getItemFromBlock(Blocks.stone))       this.setInventorySlotContents(0,stack);
      return true;
    }
  }
  return false;
}",0.5985185185185186
169672,"@Override public void update(){
  super.update();
  if (ticks % 20 == 0) {
    if (world().isBlockIndirectlyGettingPowered(xi(),yi(),zi())) {
      fireMissile();
    }
  }
}","@Override public void update(){
  super.update();
  if (isServer()) {
    if (ticks % 20 == 0) {
      if (world().isBlockIndirectlyGettingPowered(xi(),yi(),zi())) {
        fireMissile();
      }
    }
  }
}",0.8743455497382199
169673,"public void setTarget(Pos target){
  this.target=target;
  if (isClient()) {
    sendPacket(new PacketTile(this,1,target));
  }
}","public void setTarget(Pos target){
  this.target=target;
  if (isClient() && world() != null) {
    sendPacket(new PacketTile(this,1,target));
  }
}",0.9314079422382672
169674,"@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  this.target.writeNBT(nbt);
}","@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  if (target != null)   nbt.setTag(""String_Node_Str"",target.toNBT());
}",0.7644787644787645
169675,"@Override public PacketTile getDescPacket(){
  NBTTagCompound tag=new NBTTagCompound();
  writeToNBT(tag);
  return new PacketTile(this,0,tag);
}","@Override public PacketTile getDescPacket(){
  return new PacketTile(this,getSaveData());
}",0.6779661016949152
169676,"@Override public boolean onPlayerRightClick(EntityPlayer player,int side,Pos hit){
  if (isServer()) {
    ItemStack stack=player.getHeldItem();
    if (getMissile() != null) {
      if (stack == null) {
        player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        player.inventory.mainInventory[player.inventory.currentItem]=getMissile().toStack();
        setMissile(null);
        player.inventoryContainer.detectAndSendChanges();
        updateClient();
        return true;
      }
    }
 else     if (stack.getItem() instanceof ItemMissile) {
      player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
      setMissile(MissileModuleBuilder.INSTANCE.buildMissile(stack));
      if (!player.capabilities.isCreativeMode) {
        stack.stackSize--;
        if (stack.stackSize <= 0) {
          player.inventory.mainInventory[player.inventory.currentItem]=null;
        }
        player.inventoryContainer.detectAndSendChanges();
        updateClient();
      }
      return true;
    }
  }
  return false;
}","@Override public boolean onPlayerRightClick(EntityPlayer player,int side,Pos hit){
  if (isServer()) {
    ItemStack stack=player.getHeldItem();
    if (getMissile() != null) {
      if (stack == null) {
        player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
        player.inventory.mainInventory[player.inventory.currentItem]=getMissile().toStack();
        setMissile(null);
        player.inventoryContainer.detectAndSendChanges();
        sendDescPacket();
        return true;
      }
    }
 else     if (stack.getItem() instanceof ItemMissile) {
      player.addChatComponentMessage(new ChatComponentText(""String_Node_Str""));
      setMissile(MissileModuleBuilder.INSTANCE.buildMissile(stack));
      if (!player.capabilities.isCreativeMode) {
        stack.stackSize--;
        if (stack.stackSize <= 0) {
          player.inventory.mainInventory[player.inventory.currentItem]=null;
        }
        player.inventoryContainer.detectAndSendChanges();
        sendDescPacket();
      }
      return true;
    }
  }
  return false;
}",0.9774436090225564
169677,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  NetworkRegistry.INSTANCE.registerGuiHandler(this,proxy);
  Modstats.instance().getReporter().registerMod(INSTANCE);
  MinecraftForge.EVENT_BUS.register(INSTANCE);
  MinecraftForge.EVENT_BUS.register(proxy);
  blockExplosive=manager.newBlock(TileWarhead.class);
  if (ResonantEngine.runningAsDev)   blockExplosiveMarker=manager.newBlock(BlockExplosiveMarker.class,ItemBlockMetadata.class);
  itemMissile=manager.newItem(ItemMissile.class);
  itemRocketLauncher=manager.newItem(ItemRocketLauncher.class);
  itemMissileModules=manager.newItem(ItemMissileModules.class);
  for (  MissileSizes size : MissileSizes.values()) {
    MissileModuleBuilder.INSTANCE.register(DOMAIN,""String_Node_Str"" + size.name().toLowerCase(),size.warhead_clazz);
  }
  EnumModule.register();
  CREATIVE_TAB.itemStack=new ItemStack(itemMissile);
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  NetworkRegistry.INSTANCE.registerGuiHandler(this,proxy);
  Modstats.instance().getReporter().registerMod(INSTANCE);
  MinecraftForge.EVENT_BUS.register(INSTANCE);
  MinecraftForge.EVENT_BUS.register(proxy);
  blockExplosive=manager.newBlock(TileWarhead.class);
  if (ResonantEngine.runningAsDev)   blockExplosiveMarker=manager.newBlock(BlockExplosiveMarker.class,ItemBlockMetadata.class);
  itemMissile=manager.newItem(ItemMissile.class);
  itemRocketLauncher=manager.newItem(ItemRocketLauncher.class);
  itemMissileModules=manager.newItem(ItemMissileModules.class);
  for (  MissileSizes size : MissileSizes.values()) {
    MissileModuleBuilder.INSTANCE.register(DOMAIN,""String_Node_Str"" + size.name().toLowerCase(),size.warhead_clazz);
  }
  Engines.register();
  CREATIVE_TAB.itemStack=new ItemStack(itemMissile);
}",0.9928845101258894
169678,"public String getUnlocaizedName(){
  return ""String_Node_Str"" + ICBM.PREFIX + name+ ""String_Node_Str"";
}","public String getUnlocaizedName(){
  return ""String_Node_Str"" + ICBM.PREFIX + name;
}",0.8994708994708994
169679,"/** 
 * Builds the module from the item stack
 * @param stack - item stack that is a module containing the NBT string idto use to construct the module
 * @return the module or null if something went wrong
 */
public AbstractModule build(ItemStack stack){
  if (stack.getTagCompound() != null && stack.getTagCompound().hasKey(SAVE_ID)) {
    String id=stack.getTagCompound().getString(SAVE_ID);
    if (idToCLassMap.containsKey(id)) {
      if (idToCLassMap.get(id) != null) {
        try {
          return idToCLassMap.get(id).getConstructor(ItemStack.class).newInstance(stack);
        }
 catch (        InstantiationException e) {
          ICBM.LOGGER.error(""String_Node_Str"" + idToCLassMap.get(id));
          if (ResonantEngine.runningAsDev)           e.printStackTrace();
        }
catch (        IllegalAccessException e) {
          ICBM.LOGGER.error(""String_Node_Str"" + idToCLassMap.get(id));
          if (ResonantEngine.runningAsDev)           e.printStackTrace();
        }
catch (        NoSuchMethodException e) {
          ICBM.LOGGER.error(""String_Node_Str"" + idToCLassMap.get(id));
          if (ResonantEngine.runningAsDev)           e.printStackTrace();
        }
catch (        InvocationTargetException e) {
          ICBM.LOGGER.error(""String_Node_Str"" + idToCLassMap.get(id));
          if (ResonantEngine.runningAsDev)           e.printStackTrace();
        }
      }
 else {
        ICBM.LOGGER.error(""String_Node_Str"" + id + ""String_Node_Str"");
      }
    }
  }
 else {
    ICBM.LOGGER.error(""String_Node_Str"" + (stack.getTagCompound() == null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ stack);
  }
  return null;
}","/** 
 * Builds the module from the item stack
 * @param stack - item stack that is a module containing the NBT string idto use to construct the module
 * @return the module or null if something went wrong
 */
public AbstractModule build(ItemStack stack){
  if (stack.getTagCompound() != null && stack.getTagCompound().hasKey(SAVE_ID)) {
    String id=stack.getTagCompound().getString(SAVE_ID);
    if (idToCLassMap.containsKey(id)) {
      if (idToCLassMap.get(id) != null) {
        try {
          return idToCLassMap.get(id).getConstructor(ItemStack.class).newInstance(stack).load();
        }
 catch (        InstantiationException e) {
          ICBM.LOGGER.error(""String_Node_Str"" + idToCLassMap.get(id));
          if (ResonantEngine.runningAsDev)           e.printStackTrace();
        }
catch (        IllegalAccessException e) {
          ICBM.LOGGER.error(""String_Node_Str"" + idToCLassMap.get(id));
          if (ResonantEngine.runningAsDev)           e.printStackTrace();
        }
catch (        NoSuchMethodException e) {
          ICBM.LOGGER.error(""String_Node_Str"" + idToCLassMap.get(id));
          if (ResonantEngine.runningAsDev)           e.printStackTrace();
        }
catch (        InvocationTargetException e) {
          ICBM.LOGGER.error(""String_Node_Str"" + idToCLassMap.get(id));
          if (ResonantEngine.runningAsDev)           e.printStackTrace();
        }
      }
 else {
        ICBM.LOGGER.error(""String_Node_Str"" + id + ""String_Node_Str"");
      }
    }
  }
 else {
    ICBM.LOGGER.error(""String_Node_Str"" + (stack.getTagCompound() == null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ stack);
  }
  return null;
}",0.9978985289702792
169680,"@Override public void load(NBTTagCompound nbt){
  ex=ExplosiveItemUtility.getExplosive(nbt);
  size=ExplosiveItemUtility.getSize(nbt);
  tag=nbt.getCompoundTag(""String_Node_Str"");
}","@Override public void load(NBTTagCompound nbt){
  if (nbt.hasKey(ExplosiveItemUtility.EXPLOSIVE_SAVE))   ex=ExplosiveItemUtility.getExplosive(nbt);
  if (nbt.hasKey(""String_Node_Str""))   tag=nbt.getCompoundTag(""String_Node_Str"");
  size=ExplosiveItemUtility.getSize(nbt);
}",0.5991189427312775
169681,"@Override public void save(NBTTagCompound nbt){
  ExplosiveItemUtility.setExplosive(nbt,ex);
  ExplosiveItemUtility.setSize(nbt,size);
  nbt.setTag(""String_Node_Str"",tag);
}","@Override public void save(NBTTagCompound nbt){
  if (ex != null)   ExplosiveItemUtility.setExplosive(nbt,ex);
  if (tag != null)   nbt.setTag(""String_Node_Str"",tag);
  ExplosiveItemUtility.setSize(nbt,size);
}",0.7101827676240209
169682,"/** 
 * Triggers the warhead to set its explosive off 
 */
public WorldChangeHelper.ChangeResult trigger(TriggerCause triggerCause,World world,double x,double y,double z){
  return ExplosiveRegistry.triggerExplosive(world,x,y,z,ex,triggerCause,size,tag);
}","/** 
 * Triggers the warhead to set its explosive off
 */
public WorldChangeHelper.ChangeResult trigger(TriggerCause triggerCause,World world,double x,double y,double z){
  return ExplosiveRegistry.triggerExplosive(world,x,y,z,ex,triggerCause,size,tag);
}",0.9980430528375732
169683,"@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean bool){
  super.addInformation(stack,player,list,bool);
  Missile missile=MissileSizes.loadMissile(stack);
  IExplosive ex=missile.getWarhead() != null ? missile.getWarhead().ex : null;
  String ex_translation=LanguageUtility.getLocal(""String_Node_Str"" + ICBM.PREFIX + ""String_Node_Str"") + ""String_Node_Str"";
  if (ex != null) {
    ex_translation+=LanguageUtility.getLocal(getExplosive(stack).getTranslationKey());
    list.add(ex_translation);
    List<String> l=new ArrayList();
    ex.addInfoToItem(stack,l);
    for (    String s : l)     list.add(s);
  }
 else {
    ex_translation+=""String_Node_Str"";
    list.add(ex_translation);
  }
  String engine_translation=LanguageUtility.getLocal(""String_Node_Str"" + ICBM.PREFIX + ""String_Node_Str"") + ""String_Node_Str"";
  if (missile.getEngine() != null) {
    engine_translation+=LanguageUtility.getLocal(missile.getEngine().getUnlocaizedName());
  }
 else {
    engine_translation+=""String_Node_Str"";
  }
  list.add(engine_translation);
}","@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean bool){
  super.addInformation(stack,player,list,bool);
  Missile missile=MissileSizes.loadMissile(stack);
  IExplosive ex=missile.getWarhead() != null ? missile.getWarhead().ex : null;
  String ex_translation=LanguageUtility.getLocal(""String_Node_Str"" + ICBM.PREFIX + ""String_Node_Str"") + ""String_Node_Str"";
  if (ex != null) {
    ex_translation+=LanguageUtility.getLocal(ex.getTranslationKey() + ""String_Node_Str"");
    list.add(ex_translation);
    List<String> l=new ArrayList();
    ex.addInfoToItem(stack,l);
    for (    String s : l)     list.add(s);
  }
 else {
    ex_translation+=""String_Node_Str"";
    list.add(ex_translation);
  }
  String engine_translation=LanguageUtility.getLocal(""String_Node_Str"" + ICBM.PREFIX + ""String_Node_Str"") + ""String_Node_Str"";
  if (missile.getEngine() != null) {
    engine_translation+=LanguageUtility.getLocal(missile.getEngine().getUnlocaizedName() + ""String_Node_Str"");
  }
 else {
    engine_translation+=""String_Node_Str"";
  }
  list.add(engine_translation);
}",0.9729481889041725
169684,"public BlockExplosiveMarker(){
  setBlockBounds(0.45F,0.45F,0.45F,0.55F,0.55F,0.55F);
}","public BlockExplosiveMarker(){
  super(Material.circuits);
  setBlockBounds(0.45F,0.45F,0.45F,0.55F,0.55F,0.55F);
}",0.8613861386138614
169685,"@Override public IIcon getIcon(int side,int meta){
  return Blocks.glass.getIcon(side,meta);
}","@Override public IIcon getIcon(int side,int meta){
  return Blocks.stone.getIcon(side,meta);
}",0.9574468085106383
169686,"@Override public void getEffectedBlocks(List<Placement> list){
  long start=System.nanoTime();
  long t=start;
  StringBuilder stringBuilder=new StringBuilder();
  HashMap<Placement,Float> map=new HashMap();
  if (cause instanceof TriggerCause.TriggerCauseEntity) {
    explosionBlameEntity=((TriggerCause.TriggerCauseEntity)cause).source;
  }
  if (explosionBlameEntity == null) {
    explosionBlameEntity=new EntityTNTPrimed(world);
    explosionBlameEntity.setPosition(x,y,z);
  }
  wrapperExplosion=new WrapperExplosion(this);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"" + new Vector3(this));
  stringBuilder.append(""String_Node_Str"" + energy);
  stringBuilder.append(""String_Node_Str"" + radius);
  triggerPathFinder(map,new Vector3(this),energy);
  stringBuilder.append(""String_Node_Str"" + getTimeDifference(t));
  t=System.nanoTime();
  list.addAll(map.keySet());
  Collections.sort(list,new Vector3DistanceComparator(new Vector3(this)));
  if (ResonantEngine.runningAsDev) {
    stringBuilder.append(""String_Node_Str"" + getTimeDifference(t));
    stringBuilder.append(""String_Node_Str"" + getTimeDifference(start));
    stringBuilder.append(""String_Node_Str"" + snum(list.size(),5));
    stringBuilder.append(""String_Node_Str"" + snum(tilesPathed,5));
    stringBuilder.append(""String_Node_Str"" + snum(airBlocksPathed,5));
    stringBuilder.append(""String_Node_Str"" + snum(blocksRemoved,5));
    stringBuilder.append(""String_Node_Str"");
    System.out.println(stringBuilder);
    if (cause instanceof TriggerCause.TriggerCauseEntity) {
      Entity ent=((TriggerCause.TriggerCauseEntity)cause).source;
      EntityPlayer player=null;
      if (ent instanceof EntityPlayer)       player=(EntityPlayer)ent;
      if (ent instanceof EntityProjectile && ((EntityProjectile)ent).firedByEntity instanceof EntityPlayer)       player=(EntityPlayer)((EntityProjectile)ent).firedByEntity;
      if (player != null)       player.addChatComponentMessage(new ChatComponentText(""String_Node_Str"" + getTimeDifference(start)));
    }
  }
}","@Override public void getEffectedBlocks(List<Placement> list){
  long start=System.nanoTime();
  long timeStartPath;
  long timeEndPath;
  long timeStartSort;
  long end;
  HashMap<Placement,Float> map=new HashMap();
  if (cause instanceof TriggerCause.TriggerCauseEntity) {
    explosionBlameEntity=((TriggerCause.TriggerCauseEntity)cause).source;
  }
  if (explosionBlameEntity == null) {
    explosionBlameEntity=new EntityTNTPrimed(world);
    explosionBlameEntity.setPosition(x,y,z);
  }
  wrapperExplosion=new WrapperExplosion(this);
  timeStartPath=System.nanoTime();
  triggerPathFinder(map,new Vector3(this),energy);
  timeEndPath=System.nanoTime();
  list.addAll(map.keySet());
  timeStartSort=System.nanoTime();
  Collections.sort(list,new Vector3DistanceComparator(new Vector3(this)));
  end=System.nanoTime();
  if (ResonantEngine.runningAsDev) {
    StringBuilder stringBuilder=new StringBuilder();
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(""String_Node_Str"" + new Vector3(this));
    stringBuilder.append(""String_Node_Str"" + energy);
    stringBuilder.append(""String_Node_Str"" + radius);
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(""String_Node_Str"" + getTime(timeEndPath - timeStartPath));
    stringBuilder.append(""String_Node_Str"" + getTime(end - timeStartSort));
    stringBuilder.append(""String_Node_Str"" + getTime(end - start));
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(""String_Node_Str"" + snum(list.size(),5));
    stringBuilder.append(""String_Node_Str"" + snum(tilesPathed,5));
    stringBuilder.append(""String_Node_Str"" + snum(airBlocksPathed,5));
    stringBuilder.append(""String_Node_Str"" + snum(blocksRemoved,5));
    stringBuilder.append(""String_Node_Str"");
    System.out.println(stringBuilder);
    if (cause instanceof TriggerCause.TriggerCauseEntity) {
      Entity ent=((TriggerCause.TriggerCauseEntity)cause).source;
      EntityPlayer player=null;
      if (ent instanceof EntityPlayer)       player=(EntityPlayer)ent;
      if (ent instanceof EntityProjectile && ((EntityProjectile)ent).firedByEntity instanceof EntityPlayer)       player=(EntityPlayer)((EntityProjectile)ent).firedByEntity;
      if (player != null)       player.addChatComponentMessage(new ChatComponentText(""String_Node_Str"" + getTimeDifference(start)));
    }
  }
}",0.2687174847319611
169687,"@Override public void getEffectedBlocks(List<Placement> list){
  long start=System.nanoTime();
  long t=start;
  StringBuilder stringBuilder=new StringBuilder();
  HashMap<Placement,Float> map=new HashMap();
  if (cause instanceof TriggerCause.TriggerCauseEntity) {
    explosionBlameEntity=((TriggerCause.TriggerCauseEntity)cause).source;
  }
  if (explosionBlameEntity == null) {
    explosionBlameEntity=new EntityTNTPrimed(world);
    explosionBlameEntity.setPosition(x,y,z);
  }
  wrapperExplosion=new WrapperExplosion(this);
  stringBuilder.append(""String_Node_Str"");
  triggerPathFinder(map,new Vector3(this),energy);
  stringBuilder.append(""String_Node_Str"" + getTimeDifference(t));
  t=System.nanoTime();
  list.addAll(map.keySet());
  Collections.sort(list,new Vector3DistanceComparator(new Vector3(this)));
  if (ResonantEngine.runningAsDev) {
    stringBuilder.append(""String_Node_Str"" + getTimeDifference(t));
    stringBuilder.append(""String_Node_Str"" + getTimeDifference(start));
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(""String_Node_Str"" + snum(tilesPathed,5) + ""String_Node_Str"");
    stringBuilder.append(""String_Node_Str"" + snum(airBlocksPathed,5) + ""String_Node_Str"");
    stringBuilder.append(""String_Node_Str"" + snum(blocksRemoved,5) + ""String_Node_Str"");
    stringBuilder.append(""String_Node_Str"" + snum(list.size(),5) + ""String_Node_Str"");
    stringBuilder.append(""String_Node_Str"");
    System.out.println(stringBuilder);
    if (cause instanceof TriggerCause.TriggerCauseEntity) {
      Entity ent=((TriggerCause.TriggerCauseEntity)cause).source;
      EntityPlayer player=null;
      if (ent instanceof EntityPlayer)       player=(EntityPlayer)ent;
      if (ent instanceof EntityProjectile && ((EntityProjectile)ent).firedByEntity instanceof EntityPlayer)       player=(EntityPlayer)((EntityProjectile)ent).firedByEntity;
      if (player != null)       ((EntityPlayer)((TriggerCause.TriggerCauseEntity)cause).source).addChatComponentMessage(new ChatComponentText(""String_Node_Str"" + getTimeDifference(start)));
    }
  }
}","@Override public void getEffectedBlocks(List<Placement> list){
  long start=System.nanoTime();
  long t=start;
  StringBuilder stringBuilder=new StringBuilder();
  HashMap<Placement,Float> map=new HashMap();
  if (cause instanceof TriggerCause.TriggerCauseEntity) {
    explosionBlameEntity=((TriggerCause.TriggerCauseEntity)cause).source;
  }
  if (explosionBlameEntity == null) {
    explosionBlameEntity=new EntityTNTPrimed(world);
    explosionBlameEntity.setPosition(x,y,z);
  }
  wrapperExplosion=new WrapperExplosion(this);
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"" + new Vector3(this));
  stringBuilder.append(""String_Node_Str"" + energy);
  stringBuilder.append(""String_Node_Str"" + radius);
  triggerPathFinder(map,new Vector3(this),energy);
  stringBuilder.append(""String_Node_Str"" + getTimeDifference(t));
  t=System.nanoTime();
  list.addAll(map.keySet());
  Collections.sort(list,new Vector3DistanceComparator(new Vector3(this)));
  if (ResonantEngine.runningAsDev) {
    stringBuilder.append(""String_Node_Str"" + getTimeDifference(t));
    stringBuilder.append(""String_Node_Str"" + getTimeDifference(start));
    stringBuilder.append(""String_Node_Str"" + snum(list.size(),5));
    stringBuilder.append(""String_Node_Str"" + snum(tilesPathed,5));
    stringBuilder.append(""String_Node_Str"" + snum(airBlocksPathed,5));
    stringBuilder.append(""String_Node_Str"" + snum(blocksRemoved,5));
    stringBuilder.append(""String_Node_Str"");
    System.out.println(stringBuilder);
    if (cause instanceof TriggerCause.TriggerCauseEntity) {
      Entity ent=((TriggerCause.TriggerCauseEntity)cause).source;
      EntityPlayer player=null;
      if (ent instanceof EntityPlayer)       player=(EntityPlayer)ent;
      if (ent instanceof EntityProjectile && ((EntityProjectile)ent).firedByEntity instanceof EntityPlayer)       player=(EntityPlayer)((EntityProjectile)ent).firedByEntity;
      if (player != null)       player.addChatComponentMessage(new ChatComponentText(""String_Node_Str"" + getTimeDifference(start)));
    }
  }
}",0.8233309231140034
169688,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.INSTANCE.registerGuiHandler(this,proxy);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(proxy);
  blockExplosive=ICBMCore.contentRegistry.newBlock(BlockExplosive.class,ItemBlockExplosive.class);
  blockMissileAssembler=ICBMCore.contentRegistry.newBlock(TileMissileAssembler.class);
  itemMissile=ICBMCore.contentRegistry.newItem(ItemMissile.class);
  itemDefuser=ICBMCore.contentRegistry.newItem(ItemDefuser.class);
  itemRadarGun=ICBMCore.contentRegistry.newItem(ItemRadarGun.class);
  itemRemoteDetonator=ICBMCore.contentRegistry.newItem(ItemRemoteDetonator.class);
  itemLaserDesignator=ICBMCore.contentRegistry.newItem(ItemLaserDesignator.class);
  itemRocketLauncher=ICBMCore.contentRegistry.newItem(ItemRocketLauncher.class);
  itemGrenade=ICBMCore.contentRegistry.newItem(ItemGrenade.class);
  itemBombCart=ICBMCore.contentRegistry.newItem(ItemBombCart.class);
  PoisonToxin.INSTANCE=new PoisonToxin(PotionUtility.getNextOptimalPotId(),true,5149489,""String_Node_Str"");
  PoisonContagion.INSTANCE=new PoisonContagion(PotionUtility.getNextOptimalPotId(),false,5149489,""String_Node_Str"");
  PoisonFrostBite.INSTANCE=new PoisonFrostBite(PotionUtility.getNextOptimalPotId(),false,5149489,""String_Node_Str"");
  if (!Loader.isModLoaded(""String_Node_Str""))   TabICBM.itemStack=new ItemStack(blockExplosive);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemGrenade,new IBehaviorDispenseItem(){
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing enumFacing=EnumFacing.getFront(blockSource.getBlockMetadata());
        EntityGrenade entity=new EntityGrenade(world,new Vector3(x,y,z),itemStack.getItemDamage());
        entity.setThrowableHeading(enumFacing.getFrontOffsetX(),0.10000000149011612D,enumFacing.getFrontOffsetZ(),0.5F,1.0F);
        world.spawnEntityInWorld(entity);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemBombCart,new IBehaviorDispenseItem(){
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior=new BehaviorDefaultDispenseItem();
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing var3=EnumFacing.getFront(blockSource.getBlockMetadata());
        double var5=blockSource.getX() + var3.getFrontOffsetX() * 1.125F;
        double var7=blockSource.getY();
        double var9=blockSource.getZ() + var3.getFrontOffsetZ() * 1.125F;
        int var11=blockSource.getXInt() + var3.getFrontOffsetX();
        int var12=blockSource.getYInt();
        int var13=blockSource.getZInt() + var3.getFrontOffsetZ();
        Block block=world.getBlock(var11,var12,var13);
        double var15;
        if (block instanceof BlockRailBase) {
          var15=0.0D;
        }
 else {
          block=world.getBlock(var11,var12 - 1,var13);
          if (block != null && block.isAir(world,var11,var12,var13) || block instanceof BlockRailBase) {
            return this.defaultItemDispenseBehavior.dispense(blockSource,itemStack);
          }
          var15=-1.0D;
        }
        EntityBombCart var22=new EntityBombCart(world,var5,var7 + var15,var9,itemStack.getItemDamage());
        world.spawnEntityInWorld(var22);
        world.playAuxSFX(1000,x,y,z,0);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  ForgeChunkManager.setForcedChunkLoadingCallback(this,new LoadingCallback(){
    @Override public void ticketsLoaded(    List<Ticket> tickets,    World world){
      for (      Ticket ticket : tickets) {
        if (ticket.getEntity() instanceof IChunkLoadHandler) {
          ((IChunkLoadHandler)ticket.getEntity()).chunkLoaderInit(ticket);
        }
 else {
          if (ticket.getModData() != null) {
            Vector3 position=new Vector3(ticket.getModData());
            TileEntity tileEntity=position.getTileEntity(ticket.world);
            if (tileEntity instanceof IChunkLoadHandler) {
              ((IChunkLoadHandler)tileEntity).chunkLoaderInit(ticket);
            }
          }
        }
      }
    }
  }
);
  ExplosiveHelper.explosionManager=ExplosiveRegistry.class;
  proxy.preInit();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.INSTANCE.registerGuiHandler(this,proxy);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(proxy);
  blockExplosive=ICBMCore.contentRegistry.newBlock(TileExplosive.class);
  blockMissileAssembler=ICBMCore.contentRegistry.newBlock(TileMissileAssembler.class);
  itemMissile=ICBMCore.contentRegistry.newItem(ItemMissile.class);
  itemDefuser=ICBMCore.contentRegistry.newItem(ItemDefuser.class);
  itemRadarGun=ICBMCore.contentRegistry.newItem(ItemRadarGun.class);
  itemRemoteDetonator=ICBMCore.contentRegistry.newItem(ItemRemoteDetonator.class);
  itemLaserDesignator=ICBMCore.contentRegistry.newItem(ItemLaserDesignator.class);
  itemRocketLauncher=ICBMCore.contentRegistry.newItem(ItemRocketLauncher.class);
  itemGrenade=ICBMCore.contentRegistry.newItem(ItemGrenade.class);
  itemBombCart=ICBMCore.contentRegistry.newItem(ItemBombCart.class);
  PoisonToxin.INSTANCE=new PoisonToxin(PotionUtility.getNextOptimalPotId(),true,5149489,""String_Node_Str"");
  PoisonContagion.INSTANCE=new PoisonContagion(PotionUtility.getNextOptimalPotId(),false,5149489,""String_Node_Str"");
  PoisonFrostBite.INSTANCE=new PoisonFrostBite(PotionUtility.getNextOptimalPotId(),false,5149489,""String_Node_Str"");
  if (!Loader.isModLoaded(""String_Node_Str""))   TabICBM.itemStack=new ItemStack(blockExplosive);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemGrenade,new IBehaviorDispenseItem(){
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing enumFacing=EnumFacing.getFront(blockSource.getBlockMetadata());
        EntityGrenade entity=new EntityGrenade(world,new Vector3(x,y,z),itemStack.getItemDamage());
        entity.setThrowableHeading(enumFacing.getFrontOffsetX(),0.10000000149011612D,enumFacing.getFrontOffsetZ(),0.5F,1.0F);
        world.spawnEntityInWorld(entity);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemBombCart,new IBehaviorDispenseItem(){
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior=new BehaviorDefaultDispenseItem();
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing var3=EnumFacing.getFront(blockSource.getBlockMetadata());
        double var5=blockSource.getX() + var3.getFrontOffsetX() * 1.125F;
        double var7=blockSource.getY();
        double var9=blockSource.getZ() + var3.getFrontOffsetZ() * 1.125F;
        int var11=blockSource.getXInt() + var3.getFrontOffsetX();
        int var12=blockSource.getYInt();
        int var13=blockSource.getZInt() + var3.getFrontOffsetZ();
        Block block=world.getBlock(var11,var12,var13);
        double var15;
        if (block instanceof BlockRailBase) {
          var15=0.0D;
        }
 else {
          block=world.getBlock(var11,var12 - 1,var13);
          if (block != null && block.isAir(world,var11,var12,var13) || block instanceof BlockRailBase) {
            return this.defaultItemDispenseBehavior.dispense(blockSource,itemStack);
          }
          var15=-1.0D;
        }
        EntityBombCart var22=new EntityBombCart(world,var5,var7 + var15,var9,itemStack.getItemDamage());
        world.spawnEntityInWorld(var22);
        world.playAuxSFX(1000,x,y,z,0);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  ForgeChunkManager.setForcedChunkLoadingCallback(this,new LoadingCallback(){
    @Override public void ticketsLoaded(    List<Ticket> tickets,    World world){
      for (      Ticket ticket : tickets) {
        if (ticket.getEntity() instanceof IChunkLoadHandler) {
          ((IChunkLoadHandler)ticket.getEntity()).chunkLoaderInit(ticket);
        }
 else {
          if (ticket.getModData() != null) {
            Vector3 position=new Vector3(ticket.getModData());
            TileEntity tileEntity=position.getTileEntity(ticket.world);
            if (tileEntity instanceof IChunkLoadHandler) {
              ((IChunkLoadHandler)tileEntity).chunkLoaderInit(ticket);
            }
          }
        }
      }
    }
  }
);
  ExplosiveHelper.explosionManager=ExplosiveRegistry.class;
  proxy.preInit();
}",0.9963409384416704
169689,"@Override public void doExplode(){
  int r=this.callCount;
  if (!this.world().isRemote) {
    if (this.thread != null && this.thread.isComplete) {
      Iterator<Vector3> it=this.thread.results.iterator();
      while (it.hasNext()) {
        Vector3 targetPosition=it.next();
        double distance=targetPosition.add(position).magnitude();
        if (distance > r || distance < r - 3)         continue;
        Block blockID=targetPosition.getBlock(world());
        double hardness=targetPosition.getHardness(world());
        if (hardness < 0 || hardness > 10000)         continue;
        int metadata=this.world().getBlockMetadata(targetPosition.xi(),targetPosition.yi(),targetPosition.zi());
        if (distance < r - 1 || this.world().rand.nextInt(3) > 0) {
          if (blockID == ICBMExplosion.blockExplosive) {
            BlockExplosive.yinZha(this.world(),targetPosition.xi(),targetPosition.yi(),targetPosition.zi(),((TileExplosive)this.world().getTileEntity(targetPosition.xi(),targetPosition.yi(),targetPosition.zi())).explosiveID,1);
          }
 else {
            this.world().setBlockToAir(targetPosition.xi(),targetPosition.yi(),targetPosition.zi());
          }
          targetPosition.add(0.5D);
          if (this.world().rand.nextFloat() < 0.3 * (this.getRadius() - r)) {
            EntityFlyingBlock entity=new EntityFlyingBlock(this.world(),targetPosition,blockID,metadata);
            this.world().spawnEntityInWorld(entity);
            entity.yawChange=50 * this.world().rand.nextFloat();
            entity.pitchChange=100 * this.world().rand.nextFloat();
          }
          it.remove();
        }
      }
    }
  }
  int radius=2 * this.callCount;
  AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.x() - radius,position.y() - radius,position.z() - radius,position.x() + radius,position.y() + radius,position.z() + radius);
  List<Entity> allEntities=this.world().getEntitiesWithinAABB(Entity.class,bounds);
synchronized (allEntities) {
    for (Iterator it=allEntities.iterator(); it.hasNext(); ) {
      Entity entity=(Entity)it.next();
      if (entity instanceof EntityMissile) {
        ((EntityMissile)entity).setExplode();
        break;
      }
 else {
        double xDifference=entity.posX - position.x();
        double zDifference=entity.posZ - position.z();
        r=(int)this.getRadius();
        if (xDifference < 0)         r=(int)-this.getRadius();
        entity.motionX+=(r - xDifference) * 0.02 * this.world().rand.nextFloat();
        entity.motionY+=3 * this.world().rand.nextFloat();
        r=(int)this.getRadius();
        if (zDifference < 0)         r=(int)-this.getRadius();
        entity.motionZ+=(r - zDifference) * 0.02 * this.world().rand.nextFloat();
      }
    }
  }
  if (this.callCount > this.getRadius()) {
    this.controller.endExplosion();
  }
}","@Override public void doExplode(){
  int r=this.callCount;
  if (!this.world().isRemote) {
    if (this.thread != null && this.thread.isComplete) {
      Iterator<Vector3> it=this.thread.results.iterator();
      while (it.hasNext()) {
        Vector3 targetPosition=it.next();
        double distance=targetPosition.add(position).magnitude();
        if (distance > r || distance < r - 3)         continue;
        Block blockID=targetPosition.getBlock(world());
        TileEntity ent=targetPosition.getTileEntity(world());
        double hardness=targetPosition.getHardness(world());
        if (hardness < 0 || hardness > 10000)         continue;
        int metadata=this.world().getBlockMetadata(targetPosition.xi(),targetPosition.yi(),targetPosition.zi());
        if (distance < r - 1 || this.world().rand.nextInt(3) > 0) {
          if (ent instanceof TileExplosive) {
            ((TileExplosive)ent).explode(1);
          }
 else {
            this.world().setBlockToAir(targetPosition.xi(),targetPosition.yi(),targetPosition.zi());
          }
          targetPosition.add(0.5D);
          if (this.world().rand.nextFloat() < 0.3 * (this.getRadius() - r)) {
            EntityFlyingBlock entity=new EntityFlyingBlock(this.world(),targetPosition,blockID,metadata);
            this.world().spawnEntityInWorld(entity);
            entity.yawChange=50 * this.world().rand.nextFloat();
            entity.pitchChange=100 * this.world().rand.nextFloat();
          }
          it.remove();
        }
      }
    }
  }
  int radius=2 * this.callCount;
  AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.x() - radius,position.y() - radius,position.z() - radius,position.x() + radius,position.y() + radius,position.z() + radius);
  List<Entity> allEntities=this.world().getEntitiesWithinAABB(Entity.class,bounds);
synchronized (allEntities) {
    for (Iterator it=allEntities.iterator(); it.hasNext(); ) {
      Entity entity=(Entity)it.next();
      if (entity instanceof EntityMissile) {
        ((EntityMissile)entity).setExplode();
        break;
      }
 else {
        double xDifference=entity.posX - position.x();
        double zDifference=entity.posZ - position.z();
        r=(int)this.getRadius();
        if (xDifference < 0)         r=(int)-this.getRadius();
        entity.motionX+=(r - xDifference) * 0.02 * this.world().rand.nextFloat();
        entity.motionY+=3 * this.world().rand.nextFloat();
        r=(int)this.getRadius();
        if (zDifference < 0)         r=(int)-this.getRadius();
        entity.motionZ+=(r - zDifference) * 0.02 * this.world().rand.nextFloat();
      }
    }
  }
  if (this.callCount > this.getRadius()) {
    this.controller.endExplosion();
  }
}",0.9351117519826964
169690,"@SideOnly(Side.CLIENT) @Override public IModelCustom getMissileModel(){
  try {
    if (this.model == null)     model=AdvancedModelLoader.loadModel(new ResourceLocation(Reference.DOMAIN,Reference.MODEL_DIRECTORY + this.modelName));
  }
 catch (  ModelFormatException e) {
    System.out.println(""String_Node_Str"" + this.modelName);
    e.printStackTrace();
  }
  return model;
}","@SideOnly(Side.CLIENT) @Override public IModelCustom getMissileModel(){
  try {
    if (this.model == null)     model=AdvancedModelLoader.loadModel(new ResourceLocation(Reference.DOMAIN,Reference.MODEL_PREFIX + this.modelName));
  }
 catch (  ModelFormatException e) {
    Reference.LOGGER.error(""String_Node_Str"" + this.modelName);
    Reference.LOGGER.catching(Level.INFO,e);
  }
  return model;
}",0.8571428571428571
169691,"/** 
 * The interval in ticks before the next procedural call of this explosive
 * @param return - Return -1 if this explosive does not need proceudral calls 
 */
@Override public int proceduralInterval(){
  return 4;
}","/** 
 * The interval in ticks before the next procedural call of this explosive
 * @return - Return -1 if this explosive does not need proceudral calls 
 */
@Override public int proceduralInterval(){
  return 4;
}",0.9861111111111112
169692,"@Override public void doExplode(){
  if (!this.world().isRemote) {
    if (this.callCount > 100 / this.proceduralInterval() && this.thread.isComplete) {
      this.controller.endExplosion();
    }
    if (this.canFocusBeam(this.world(),position)) {
      Vector3 currentPos;
      Block block;
      int metadata;
      double dist;
      int r=radius;
      for (int x=-r; x < r; x++) {
        for (int y=-r; y < r; y++) {
          for (int z=-r; z < r; z++) {
            dist=MathHelper.sqrt_double((x * x + y * y + z * z));
            if (dist > r || dist < r - 3) {
              continue;
            }
            currentPos=new Vector3(position.x() + x,position.y() + y,position.z() + z);
            block=this.world().getBlock(currentPos.xi(),currentPos.yi(),currentPos.zi());
            if (block == null || block.isAir(this.world(),x,y,z) || block.getBlockHardness(this.world(),x,y,x) < 0) {
              continue;
            }
            metadata=this.world().getBlockMetadata(currentPos.xi(),currentPos.yi(),currentPos.zi());
            if (this.world().rand.nextInt(2) > 0) {
              this.world().setBlockToAir(currentPos.xi(),currentPos.yi(),currentPos.zi());
              currentPos.add(0.5D);
              EntityFlyingBlock entity=new EntityFlyingBlock(this.world(),currentPos,block,metadata);
              this.world().spawnEntityInWorld(entity);
              this.feiBlocks.add(entity);
              entity.pitchChange=50 * this.world().rand.nextFloat();
            }
          }
        }
      }
    }
 else {
      this.controller.endExplosion();
    }
    for (    EntityFlyingBlock entity : this.feiBlocks) {
      Vector3 entityPosition=new Vector3(entity);
      Vector3 centeredPosition=entityPosition.clone().translate(this.position.invert());
      centeredPosition.rotate(2);
      Vector3 newPosition=this.position.clone().translate(centeredPosition);
      entity.motionX/=3;
      entity.motionY/=3;
      entity.motionZ/=3;
      entity.addVelocity((newPosition.x - entityPosition.x) * 0.5 * this.proceduralInterval(),0.09 * this.proceduralInterval(),(newPosition.z - entityPosition.z) * 0.5 * this.proceduralInterval());
      entity.yawChange+=3 * this.world().rand.nextFloat();
    }
  }
}","@Override public void doExplode(){
  if (!this.world().isRemote) {
    if (this.callCount > 100 / this.proceduralInterval() && this.thread.isComplete) {
      this.controller.endExplosion();
    }
    if (this.canFocusBeam(this.world(),position)) {
      Vector3 currentPos;
      Block block;
      int metadata;
      double dist;
      int r=radius;
      for (int x=-r; x < r; x++) {
        for (int y=-r; y < r; y++) {
          for (int z=-r; z < r; z++) {
            dist=MathHelper.sqrt_double((x * x + y * y + z * z));
            if (dist > r || dist < r - 3) {
              continue;
            }
            currentPos=new Vector3(position.x() + x,position.y() + y,position.z() + z);
            block=this.world().getBlock(currentPos.xi(),currentPos.yi(),currentPos.zi());
            if (block == null || block.isAir(this.world(),x,y,z) || block.getBlockHardness(this.world(),x,y,x) < 0) {
              continue;
            }
            metadata=this.world().getBlockMetadata(currentPos.xi(),currentPos.yi(),currentPos.zi());
            if (this.world().rand.nextInt(2) > 0) {
              this.world().setBlockToAir(currentPos.xi(),currentPos.yi(),currentPos.zi());
              currentPos.add(0.5D);
              EntityFlyingBlock entity=new EntityFlyingBlock(this.world(),currentPos,block,metadata);
              this.world().spawnEntityInWorld(entity);
              this.feiBlocks.add(entity);
              entity.pitchChange=50 * this.world().rand.nextFloat();
            }
          }
        }
      }
    }
 else {
      this.controller.endExplosion();
    }
    for (    EntityFlyingBlock entity : this.feiBlocks) {
      Vector3 entityPosition=new Vector3(entity);
      Vector3 centeredPosition=entityPosition.clone().subtract(this.position);
      Vector3 newPosition=this.position.clone().add(centeredPosition);
      entity.motionX/=3;
      entity.motionY/=3;
      entity.motionZ/=3;
      entity.addVelocity((newPosition.x() - entityPosition.x()) * 0.5 * this.proceduralInterval(),0.09 * this.proceduralInterval(),(newPosition.z() - entityPosition.z()) * 0.5 * this.proceduralInterval());
      entity.yawChange+=3 * this.world().rand.nextFloat();
    }
  }
}",0.982030548068284
169693,"@Override public void doExplode(){
  float radius=this.getRadius();
  if (this.world().isRemote) {
    for (int i=0; i < 200; i++) {
      Vector3 diDian=new Vector3();
      diDian.x=Math.random() * radius / 2 - radius / 4;
      diDian.y=Math.random() * radius / 2 - radius / 4;
      diDian.z=Math.random() * radius / 2 - radius / 4;
      diDian.scale(Math.min(radius,callCount) / 10);
      if (diDian.magnitude() <= radius) {
        diDian.translate(this.position);
        ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.world(),diDian,(Math.random() - 0.5) / 2,(Math.random() - 0.5) / 2,(Math.random() - 0.5) / 2,this.red,this.green,this.blue,7.0F,8);
      }
    }
  }
  AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.x() - radius,position.y() - radius,position.z() - radius,position.x() + radius,position.y() + radius,position.z() + radius);
  List<EntityLivingBase> allEntities=world().getEntitiesWithinAABB(EntityLivingBase.class,bounds);
  for (  EntityLivingBase entity : allEntities) {
    if (this.isContagious) {
      ICBMExplosion.contagios_potion.poisonEntity(position,entity);
    }
    if (this.isPoisonous) {
      ICBMExplosion.poisonous_potion.poisonEntity(position,entity);
    }
    if (this.isConfuse) {
      entity.addPotionEffect(new CustomPotionEffect(Potion.confusion.id,18 * 20,0));
      entity.addPotionEffect(new CustomPotionEffect(Potion.digSlowdown.id,20 * 60,0));
      entity.addPotionEffect(new CustomPotionEffect(Potion.moveSlowdown.id,20 * 60,2));
    }
  }
  if (this.isMutate) {
    new BlastMutation(world(),this.exploder,position.x(),position.y(),position.z(),this.getRadius()).explode();
  }
  if (this.playShortSoundFX) {
    world().playSoundEffect(position.x() + 0.5D,position.y() + 0.5D,position.z() + 0.5D,Reference.PREFIX + ""String_Node_Str"",4.0F,(1.0F + (world().rand.nextFloat() - world().rand.nextFloat()) * 0.2F) * 1F);
  }
  if (this.callCount > this.duration) {
    this.controller.endExplosion();
  }
}","@Override public void doExplode(){
  float radius=this.getRadius();
  if (this.world().isRemote) {
    for (int i=0; i < 200; i++) {
      Vector3 diDian=new Vector3();
      diDian.x_$eq(Math.random() * radius / 2 - radius / 4);
      diDian.y_$eq(Math.random() * radius / 2 - radius / 4);
      diDian.z_$eq(Math.random() * radius / 2 - radius / 4);
      diDian.multiply(Math.min(radius,callCount) / 10);
      if (diDian.magnitude() <= radius) {
        diDian.add(this.position);
        ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.world(),diDian,(Math.random() - 0.5) / 2,(Math.random() - 0.5) / 2,(Math.random() - 0.5) / 2,this.red,this.green,this.blue,7.0F,8);
      }
    }
  }
  AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.x() - radius,position.y() - radius,position.z() - radius,position.x() + radius,position.y() + radius,position.z() + radius);
  List<EntityLivingBase> allEntities=world().getEntitiesWithinAABB(EntityLivingBase.class,bounds);
  for (  EntityLivingBase entity : allEntities) {
    if (this.isContagious) {
      ICBMExplosion.contagios_potion.poisonEntity(position,entity);
    }
    if (this.isPoisonous) {
      ICBMExplosion.poisonous_potion.poisonEntity(position,entity);
    }
    if (this.isConfuse) {
      entity.addPotionEffect(new CustomPotionEffect(Potion.confusion.id,18 * 20,0));
      entity.addPotionEffect(new CustomPotionEffect(Potion.digSlowdown.id,20 * 60,0));
      entity.addPotionEffect(new CustomPotionEffect(Potion.moveSlowdown.id,20 * 60,2));
    }
  }
  if (this.isMutate) {
    new BlastMutation(world(),this.exploder,position.x(),position.y(),position.z(),this.getRadius()).explode();
  }
  if (this.playShortSoundFX) {
    world().playSoundEffect(position.x() + 0.5D,position.y() + 0.5D,position.z() + 0.5D,Reference.PREFIX + ""String_Node_Str"",4.0F,(1.0F + (world().rand.nextFloat() - world().rand.nextFloat()) * 0.2F) * 1F);
  }
  if (this.callCount > this.duration) {
    this.controller.endExplosion();
  }
}",0.988453815261044
169694,"@Override public void doExplode(){
  if (!this.world().isRemote) {
    int radius=(int)this.getRadius();
    for (int x=0; x < radius; ++x) {
      for (int y=0; y < radius; ++y) {
        for (int z=0; z < radius; ++z) {
          if (x == 0 || x == radius - 1 || y == 0 || y == radius - 1 || z == 0 || z == radius - 1) {
            double xStep=x / (radius - 1.0F) * 2.0F - 1.0F;
            double yStep=y / (radius - 1.0F) * 2.0F - 1.0F;
            double zStep=z / (radius - 1.0F) * 2.0F - 1.0F;
            double diagonalDistance=Math.sqrt(xStep * xStep + yStep * yStep + zStep * zStep);
            xStep/=diagonalDistance;
            yStep/=diagonalDistance;
            zStep/=diagonalDistance;
            float var14=radius * (0.7F + world().rand.nextFloat() * 0.6F);
            double var15=position.x;
            double var17=position.y;
            double var19=position.z;
            for (float var21=0.3F; var14 > 0.0F; var14-=var21 * 0.75F) {
              Vector3 targetPosition=new Vector3(var15,var17,var19);
              double distanceFromCenter=position.distance(targetPosition);
              int var25=world().getBlockId(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ());
              if (var25 > 0) {
                var14-=(Block.blocksList[var25].getExplosionResistance(this.exploder,world(),targetPosition.intX(),targetPosition.intY(),targetPosition.intZ(),position.intX(),position.intY(),position.intZ()) + 0.3F) * var21;
              }
              if (var14 > 0.0F) {
                double chance=radius - (Math.random() * distanceFromCenter);
                if (chance > distanceFromCenter * 0.55) {
                  int blockID=world().getBlockId((int)targetPosition.x,(int)targetPosition.y,(int)targetPosition.z);
                  if ((blockID == 0 || blockID == Block.snow.blockID) && world().getBlockMaterial((int)targetPosition.x,(int)targetPosition.y - 1,(int)targetPosition.z).isSolid()) {
                    world().setBlock((int)targetPosition.x,(int)targetPosition.y,(int)targetPosition.z,Block.fire.blockID,0,2);
                  }
 else                   if (blockID == Block.ice.blockID) {
                    world().setBlock((int)targetPosition.x,(int)targetPosition.y,(int)targetPosition.z,0,0,2);
                  }
                }
              }
              var15+=xStep * var21;
              var17+=yStep * var21;
              var19+=zStep * var21;
            }
          }
        }
      }
    }
  }
  world().playSoundEffect(position.x + 0.5D,position.y + 0.5D,position.z + 0.5D,Reference.PREFIX + ""String_Node_Str"",4.0F,(1.0F + (world().rand.nextFloat() - world().rand.nextFloat()) * 0.2F) * 1F);
}","@Override public void doExplode(){
  if (!this.world().isRemote) {
    int radius=(int)this.getRadius();
    for (int x=0; x < radius; ++x) {
      for (int y=0; y < radius; ++y) {
        for (int z=0; z < radius; ++z) {
          if (x == 0 || x == radius - 1 || y == 0 || y == radius - 1 || z == 0 || z == radius - 1) {
            double xStep=x / (radius - 1.0F) * 2.0F - 1.0F;
            double yStep=y / (radius - 1.0F) * 2.0F - 1.0F;
            double zStep=z / (radius - 1.0F) * 2.0F - 1.0F;
            double diagonalDistance=Math.sqrt(xStep * xStep + yStep * yStep + zStep * zStep);
            xStep/=diagonalDistance;
            yStep/=diagonalDistance;
            zStep/=diagonalDistance;
            float var14=radius * (0.7F + world().rand.nextFloat() * 0.6F);
            double var15=position.x();
            double var17=position.y();
            double var19=position.z();
            for (float var21=0.3F; var14 > 0.0F; var14-=var21 * 0.75F) {
              Vector3 targetPosition=new Vector3(var15,var17,var19);
              double distanceFromCenter=position.distance(targetPosition);
              Block var25=world().getBlock(targetPosition.xi(),targetPosition.yi(),targetPosition.zi());
              if (var25 != null) {
                var14-=(var25.getExplosionResistance(this.exploder,world(),targetPosition.xi(),targetPosition.yi(),targetPosition.zi(),position.xi(),position.yi(),position.zi()) + 0.3F) * var21;
              }
              if (var14 > 0.0F) {
                double chance=radius - (Math.random() * distanceFromCenter);
                if (chance > distanceFromCenter * 0.55) {
                  Block blockID=world().getBlock((int)targetPosition.x(),(int)targetPosition.y(),(int)targetPosition.z());
                  if ((blockID == null || blockID == Blocks.snow)) {
                    world().setBlock((int)targetPosition.x(),(int)targetPosition.y(),(int)targetPosition.z(),Blocks.fire,0,2);
                  }
 else                   if (blockID == Blocks.ice) {
                    world().setBlockToAir(targetPosition.xi(),targetPosition.yi(),targetPosition.zi());
                  }
                }
              }
              var15+=xStep * var21;
              var17+=yStep * var21;
              var19+=zStep * var21;
            }
          }
        }
      }
    }
  }
  world().playSoundEffect(position.x() + 0.5D,position.y() + 0.5D,position.z() + 0.5D,Reference.PREFIX + ""String_Node_Str"",4.0F,(1.0F + (world().rand.nextFloat() - world().rand.nextFloat()) * 0.2F) * 1F);
}",0.8537699923838538
169695,"/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  this.fontRendererObj.drawString(""String_Node_Str"" + LanguageUtility.getLocal(""String_Node_Str""),65,6,4210752);
  this.fontRendererObj.drawString(LanguageUtility.getLocal(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""),12,30,4210752);
  this.textFieldBanJing.drawTextBox();
  this.fontRendererObj.drawString(LanguageUtility.getLocal(""String_Node_Str""),12,55,4210752);
  String mode=LanguageUtility.getLocal(""String_Node_Str"");
  if (this.tileEntity.empMode == 1) {
    mode=LanguageUtility.getLocal(""String_Node_Str"");
  }
 else   if (this.tileEntity.empMode == 2) {
    mode=LanguageUtility.getLocal(""String_Node_Str"");
  }
  this.fontRendererObj.drawString(LanguageUtility.getLocal(""String_Node_Str"") + ""String_Node_Str"" + mode,12,105,4210752);
  String color=""String_Node_Str"";
  String status=LanguageUtility.getLocal(""String_Node_Str"");
  if (!this.tileEntity.energy().isFull()) {
    status=LanguageUtility.getLocal(""String_Node_Str"");
  }
 else {
    color=""String_Node_Str"";
    status=LanguageUtility.getLocal(""String_Node_Str"");
  }
  this.fontRendererObj.drawString(color + LanguageUtility.getLocal(""String_Node_Str"") + ""String_Node_Str""+ status,12,120,4210752);
}","/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  this.fontRendererObj.drawString(""String_Node_Str"" + LanguageUtility.getLocal(""String_Node_Str""),65,6,4210752);
  this.fontRendererObj.drawString(LanguageUtility.getLocal(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""),12,30,4210752);
  this.textFieldBanJing.drawTextBox();
  this.fontRendererObj.drawString(LanguageUtility.getLocal(""String_Node_Str""),12,55,4210752);
  String mode=LanguageUtility.getLocal(""String_Node_Str"");
  if (this.tileEntity.empMode == 1) {
    mode=LanguageUtility.getLocal(""String_Node_Str"");
  }
 else   if (this.tileEntity.empMode == 2) {
    mode=LanguageUtility.getLocal(""String_Node_Str"");
  }
  this.fontRendererObj.drawString(LanguageUtility.getLocal(""String_Node_Str"") + ""String_Node_Str"" + mode,12,105,4210752);
  String color=""String_Node_Str"";
  String status=LanguageUtility.getLocal(""String_Node_Str"");
  if (!this.tileEntity.getEnergyStorage().checkExtract()) {
    status=LanguageUtility.getLocal(""String_Node_Str"");
  }
 else {
    color=""String_Node_Str"";
    status=LanguageUtility.getLocal(""String_Node_Str"");
  }
  this.fontRendererObj.drawString(color + LanguageUtility.getLocal(""String_Node_Str"") + ""String_Node_Str""+ status,12,120,4210752);
}",0.9833212472806382
169696,"/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  this.fontRenderer.drawString(""String_Node_Str"" + tileEntity.getInvName(),48,6,4210752);
  this.fontRenderer.drawString(LanguageUtility.getLocal(""String_Node_Str""),63,28,4210752);
  this.fontRenderer.drawString(StatCollector.translateToLocal(""String_Node_Str""),8,this.ySize - 96 + 2,4210752);
}","/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  this.fontRendererObj.drawString(""String_Node_Str"" + tileEntity.getInventoryName(),48,6,4210752);
  this.fontRendererObj.drawString(LanguageUtility.getLocal(""String_Node_Str""),63,28,4210752);
  this.fontRendererObj.drawString(StatCollector.translateToLocal(""String_Node_Str""),8,this.ySize - 96 + 2,4210752);
}",0.9841938883034772
169697,"/** 
 * Makes an entity get affected by Red Matter.
 * @Return True if explosion happened 
 */
public boolean affectEntity(float radius,Entity entity,boolean doExplosion){
  boolean explosionCreated=false;
  if (entity == this.controller) {
    return false;
  }
  if (entity instanceof IExplosiveIgnore) {
    if (((IExplosiveIgnore)entity).canIgnore(this)) {
      return false;
    }
  }
  if (entity instanceof EntityPlayer) {
    if (((EntityPlayer)entity).capabilities.isCreativeMode) {
      return false;
    }
  }
  double xDifference=entity.posX - position.x();
  double yDifference=entity.posY - position.y();
  double zDifference=entity.posZ - position.z();
  double xPercentage=1 - (xDifference / radius);
  double yPercentage=1 - (yDifference / radius);
  double zPercentage=1 - (zDifference / radius);
  double distancePercentage=(this.position.distance(new Vector3(entity)) / radius);
  Vector3 entityPosition=new Vector3(entity);
  Vector3 centeredPosition=entityPosition.clone().subtract(this.position);
  centeredPosition.rotate(1.5 * distancePercentage * Math.random(),1.5 * distancePercentage * Math.random(),1.5 * distancePercentage * Math.random());
  Vector3 newPosition=Vector3.translate(this.position,centeredPosition);
  entity.addVelocity(newPosition.x() - entityPosition.x(),0,newPosition.z() - entityPosition.z());
  entity.addVelocity(-xDifference * 0.015 * xPercentage,-yDifference * 0.015 * yPercentage,-zDifference * 0.015 * zPercentage);
  if (this.world().isRemote) {
    if (entity instanceof EntityFlyingBlock) {
      if (ICBMExplosion.proxy.getParticleSetting() == 0) {
        if (this.world().rand.nextInt(5) == 0) {
          ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.world(),new Vector3(entity),-xDifference,-yDifference + 10,-zDifference,((EntityFlyingBlock)entity).mimicBlock,0,((EntityFlyingBlock)entity).metadata,2,1);
        }
      }
    }
  }
  if (Vector3.distance(new Vector3(entity.posX,entity.posY,entity.posZ),position) < 4) {
    if (doExplosion && !explosionCreated && callCount % 5 == 0) {
      Vector3 tempMotion=new Vector3(this.controller.motionX,this.controller.motionY,this.controller.motionZ);
      this.world().createExplosion(this.exploder,entity.posX,entity.posY,entity.posZ,3.0F,true);
      this.controller.motionX=tempMotion.x();
      this.controller.motionY=tempMotion.y();
      this.controller.motionZ=tempMotion.z();
      explosionCreated=true;
    }
    if (entity instanceof EntityLiving) {
      entity.fallDistance=0;
    }
 else {
      if (entity instanceof EntityExplosion) {
        if (((EntityExplosion)entity).blast instanceof BlastAntimatter || ((EntityExplosion)entity).blast instanceof BlastRedmatter) {
          this.world().playSoundEffect(position.x(),position.y(),position.z(),Reference.PREFIX + ""String_Node_Str"",7.0F,(1.0F + (this.world().rand.nextFloat() - this.world().rand.nextFloat()) * 0.2F) * 0.7F);
          if (this.world().rand.nextFloat() > 0.85 && !this.world().isRemote) {
            entity.setDead();
            return explosionCreated;
          }
        }
      }
 else       if (entity instanceof EntityExplosive) {
        ((EntityExplosive)entity).explode();
      }
 else {
        entity.setDead();
      }
    }
  }
  return explosionCreated;
}","/** 
 * Makes an entity get affected by Red Matter.
 * @Return True if explosion happened 
 */
public boolean affectEntity(float radius,Entity entity,boolean doExplosion){
  boolean explosionCreated=false;
  if (entity == this.controller) {
    return false;
  }
  if (entity instanceof IExplosiveIgnore) {
    if (((IExplosiveIgnore)entity).canIgnore(this)) {
      return false;
    }
  }
  if (entity instanceof EntityPlayer) {
    if (((EntityPlayer)entity).capabilities.isCreativeMode) {
      return false;
    }
  }
  double xDifference=entity.posX - position.x();
  double yDifference=entity.posY - position.y();
  double zDifference=entity.posZ - position.z();
  double xPercentage=1 - (xDifference / radius);
  double yPercentage=1 - (yDifference / radius);
  double zPercentage=1 - (zDifference / radius);
  double distancePercentage=(this.position.distance(new Vector3(entity)) / radius);
  Vector3 entityPosition=new Vector3(entity);
  Vector3 centeredPosition=entityPosition.clone().subtract(this.position);
  EulerAngle angle=new EulerAngle(1.5 * distancePercentage * Math.random(),1.5 * distancePercentage * Math.random(),1.5 * distancePercentage * Math.random());
  centeredPosition.transform(angle);
  Vector3 newPosition=this.position.add(centeredPosition);
  entity.addVelocity(newPosition.x() - entityPosition.x(),0,newPosition.z() - entityPosition.z());
  entity.addVelocity(-xDifference * 0.015 * xPercentage,-yDifference * 0.015 * yPercentage,-zDifference * 0.015 * zPercentage);
  if (this.world().isRemote) {
    if (entity instanceof EntityFlyingBlock) {
      if (ICBMExplosion.proxy.getParticleSetting() == 0) {
        if (this.world().rand.nextInt(5) == 0) {
          ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.world(),new Vector3(entity),-xDifference,-yDifference + 10,-zDifference,Block.getIdFromBlock(((EntityFlyingBlock)entity).mimicBlock),0,((EntityFlyingBlock)entity).metadata,2,1);
        }
      }
    }
  }
  if (new Vector3(entity.posX,entity.posY,entity.posZ).add(position).magnitude() < 4) {
    if (doExplosion && !explosionCreated && callCount % 5 == 0) {
      Vector3 tempMotion=new Vector3(this.controller.motionX,this.controller.motionY,this.controller.motionZ);
      this.world().createExplosion(this.exploder,entity.posX,entity.posY,entity.posZ,3.0F,true);
      this.controller.motionX=tempMotion.x();
      this.controller.motionY=tempMotion.y();
      this.controller.motionZ=tempMotion.z();
      explosionCreated=true;
    }
    if (entity instanceof EntityLiving) {
      entity.fallDistance=0;
    }
 else {
      if (entity instanceof EntityExplosion) {
        if (((EntityExplosion)entity).blast instanceof BlastAntimatter || ((EntityExplosion)entity).blast instanceof BlastRedmatter) {
          this.world().playSoundEffect(position.x(),position.y(),position.z(),Reference.PREFIX + ""String_Node_Str"",7.0F,(1.0F + (this.world().rand.nextFloat() - this.world().rand.nextFloat()) * 0.2F) * 0.7F);
          if (this.world().rand.nextFloat() > 0.85 && !this.world().isRemote) {
            entity.setDead();
            return explosionCreated;
          }
        }
      }
 else       if (entity instanceof EntityExplosive) {
        ((EntityExplosive)entity).explode();
      }
 else {
        entity.setDead();
      }
    }
  }
  return explosionCreated;
}",0.9719118091211114
169698,"@Override public void doExplode(){
  if (DO_DESPAWN && callCount >= MAX_LIFESPAN) {
    this.postExplode();
  }
  if (!this.world().isRemote) {
    Vector3 currentPos=new Vector3();
    int blockID=-1;
    int metadata=-1;
    double dist=-1;
    int takenBlocks=0;
    Block block=null;
    loop:     for (int radius=1; radius < this.getRadius(); radius++) {
      for (int xCoord=-radius; xCoord < radius; xCoord++) {
        for (int yCoord=-radius; yCoord < radius; yCoord++) {
          for (int zCoord=-radius; zCoord < radius; zCoord++) {
            currentPos.x(position.x() + xCoord);
            currentPos.y(position.y() + yCoord);
            currentPos.z(position.z() + zCoord);
            dist=MathHelper.sqrt_double((xCoord * xCoord + yCoord * yCoord + zCoord * zCoord));
            if (dist > radius || dist < radius - 2)             continue;
            blockID=currentPos.getBlockID(this.world());
            metadata=currentPos.getBlockMetadata(this.world());
            block=Block.getBlockById(blockID);
            if (block != null && block.getBlockHardness(this.world(),currentPos.xi(),currentPos.yi(),currentPos.zi()) >= 0) {
              if (block instanceof IForceFieldBlock) {
                ((IForceFieldBlock)block).weakenForceField(this.world(),currentPos.xi(),currentPos.yi(),currentPos.zi(),50);
                continue;
              }
              this.world().setBlock(currentPos.xi(),currentPos.yi(),currentPos.zi(),0,0,block instanceof BlockFluid ? 0 : 2);
              if (block instanceof BlockFluid || block instanceof IFluidBlock)               continue;
              currentPos.add(0.5D);
              if (this.world().rand.nextFloat() > 0.8) {
                EntityFlyingBlock entity=new EntityFlyingBlock(this.world(),currentPos,blockID,metadata);
                this.world().spawnEntityInWorld(entity);
                entity.yawChange=50 * this.world().rand.nextFloat();
                entity.pitchChange=50 * this.world().rand.nextFloat();
              }
              takenBlocks++;
              if (takenBlocks > this.maxTakeBlocks)               break loop;
            }
          }
        }
      }
    }
  }
  float radius=this.getRadius() + this.getRadius() / 2;
  AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.xf() - radius,position.yf() - radius,position.zf() - radius,position.xf() + radius,position.yf() + radius,position.zf() + radius);
  List<Entity> allEntities=this.world().getEntitiesWithinAABB(Entity.class,bounds);
  boolean doExplosion=true;
  for (  Entity entity : allEntities) {
    doExplosion=!this.affectEntity(radius,entity,doExplosion);
  }
  if (this.world().rand.nextInt(8) == 0) {
    this.world().playSoundEffect(position.x() + (Math.random() - 0.5) * radius,position.y() + (Math.random() - 0.5) * radius,position.z() + (Math.random() - 0.5) * radius,Reference.PREFIX + ""String_Node_Str"",6.0F - this.world().rand.nextFloat(),1.0F - this.world().rand.nextFloat() * 0.4F);
  }
  this.world().playSoundEffect(position.x(),position.y(),position.z(),Reference.PREFIX + ""String_Node_Str"",3.0F,(1.0F + (this.world().rand.nextFloat() - this.world().rand.nextFloat()) * 0.2F) * 1F);
}","@Override public void doExplode(){
  if (DO_DESPAWN && callCount >= MAX_LIFESPAN) {
    this.postExplode();
  }
  if (!this.world().isRemote) {
    Vector3 currentPos=new Vector3();
    Block blockID=null;
    int metadata=-1;
    double dist=-1;
    int takenBlocks=0;
    Block block=null;
    loop:     for (int radius=1; radius < this.getRadius(); radius++) {
      for (int xCoord=-radius; xCoord < radius; xCoord++) {
        for (int yCoord=-radius; yCoord < radius; yCoord++) {
          for (int zCoord=-radius; zCoord < radius; zCoord++) {
            currentPos.x(position.x() + xCoord);
            currentPos.y(position.y() + yCoord);
            currentPos.z(position.z() + zCoord);
            dist=MathHelper.sqrt_double((xCoord * xCoord + yCoord * yCoord + zCoord * zCoord));
            if (dist > radius || dist < radius - 2)             continue;
            blockID=currentPos.getBlock(this.world());
            metadata=currentPos.getBlockMetadata(this.world());
            block=blockID;
            if (block != null && block.getBlockHardness(this.world(),currentPos.xi(),currentPos.yi(),currentPos.zi()) >= 0) {
              this.world().setBlock(currentPos.xi(),currentPos.yi(),currentPos.zi(),Blocks.air,0,block instanceof BlockLiquid ? 0 : 2);
              if (block instanceof BlockLiquid || block instanceof IFluidBlock)               continue;
              currentPos.add(0.5D);
              if (this.world().rand.nextFloat() > 0.8) {
                EntityFlyingBlock entity=new EntityFlyingBlock(this.world(),currentPos,blockID,metadata);
                this.world().spawnEntityInWorld(entity);
                entity.yawChange=50 * this.world().rand.nextFloat();
                entity.pitchChange=50 * this.world().rand.nextFloat();
              }
              takenBlocks++;
              if (takenBlocks > this.maxTakeBlocks)               break loop;
            }
          }
        }
      }
    }
  }
  float radius=this.getRadius() + this.getRadius() / 2;
  AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.xf() - radius,position.yf() - radius,position.zf() - radius,position.xf() + radius,position.yf() + radius,position.zf() + radius);
  List<Entity> allEntities=this.world().getEntitiesWithinAABB(Entity.class,bounds);
  boolean doExplosion=true;
  for (  Entity entity : allEntities) {
    doExplosion=!this.affectEntity(radius,entity,doExplosion);
  }
  if (this.world().rand.nextInt(8) == 0) {
    this.world().playSoundEffect(position.x() + (Math.random() - 0.5) * radius,position.y() + (Math.random() - 0.5) * radius,position.z() + (Math.random() - 0.5) * radius,Reference.PREFIX + ""String_Node_Str"",6.0F - this.world().rand.nextFloat(),1.0F - this.world().rand.nextFloat() * 0.4F);
  }
  this.world().playSoundEffect(position.x(),position.y(),position.z(),Reference.PREFIX + ""String_Node_Str"",3.0F,(1.0F + (this.world().rand.nextFloat() - this.world().rand.nextFloat()) * 0.2F) * 1F);
}",0.9015139182809702
169699,"public BlockConcrete(int id){
  super(""String_Node_Str"",Material.rock);
  this.setHardness(3.8f);
  this.setResistance(50);
  this.setStepSound(BlockButton.soundTypeMetal);
}","public BlockConcrete(){
  super(""String_Node_Str"",Material.rock);
  this.setHardness(3.8f);
  this.setResistance(50);
  this.setStepSound(BlockButton.soundTypeMetal);
}",0.9824561403508772
169700,"@Override public void doExplode(){
  if (this.effectBlocks) {
    for (int x=(int)-this.getRadius(); x < (int)this.getRadius(); x++) {
      for (int y=(int)-this.getRadius(); y < (int)this.getRadius(); y++) {
        for (int z=(int)-this.getRadius(); z < (int)this.getRadius(); z++) {
          double dist=MathHelper.sqrt_double((x * x + y * y + z * z));
          Vector3 searchPosition=Vector3.translate(position,new Vector3(x,y,z));
          if (dist > this.getRadius())           continue;
          if (Math.round(position.x + y) == position.intY()) {
            world().spawnParticle(""String_Node_Str"",searchPosition.x,searchPosition.y,searchPosition.z,0,0,0);
          }
          int blockID=searchPosition.getBlockID(world());
          Block block=Block.blocksList[blockID];
          TileEntity tileEntity=searchPosition.getTileEntity(world());
          if (block != null) {
            if (block instanceof IForceFieldBlock) {
              ((IForceFieldBlock)Block.blocksList[blockID]).weakenForceField(world(),searchPosition.intX(),searchPosition.intY(),searchPosition.intZ(),1000);
            }
 else             if (block instanceof IEMPBlock) {
              ((IEMPBlock)block).onEMP(world(),searchPosition.intX(),searchPosition.intY(),searchPosition.intZ(),this);
            }
          }
          if (tileEntity != null) {
            if (tileEntity instanceof IFortronStorage) {
              ((IFortronStorage)tileEntity).provideFortron((int)world().rand.nextFloat() * ((IFortronStorage)tileEntity).getFortronCapacity(),true);
            }
            if (tileEntity instanceof IEnergyContainer) {
              ((IEnergyContainer)tileEntity).setEnergy(null,0);
            }
            if (tileEntity instanceof IEnergyStorage) {
              ((IEnergyStorage)tileEntity).setStored(0);
            }
            for (            ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS)             CompatibilityModule.extractEnergy(tileEntity,dir,Integer.MAX_VALUE,true);
          }
        }
      }
    }
  }
  if (this.effectEntities) {
    List<Entity> entitiesNearby=RadarRegistry.getEntitiesWithinRadius(position.toVector2(),(int)this.getRadius());
    for (    Entity entity : entitiesNearby) {
      if (entity instanceof IMissile && !entity.isEntityEqual(this.controller)) {
        if (((IMissile)entity).getTicksInAir() > -1) {
          ((IMissile)entity).dropMissileAsItem();
        }
      }
    }
    int maxFx=10;
    AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.x - this.getRadius(),position.y - this.getRadius(),position.z - this.getRadius(),position.x + this.getRadius(),position.y + this.getRadius(),position.z + this.getRadius());
    List<Entity> entities=world().getEntitiesWithinAABB(Entity.class,bounds);
    for (    Entity entity : entities) {
      if (entity instanceof EntityLivingBase) {
        if (this.world().isRemote && maxFx > 0) {
          ICBMExplosion.proxy.spawnShock(this.world(),this.position,new Vector3(entity),20);
          maxFx--;
        }
        if (entity instanceof EntityCreeper) {
          if (!this.world().isRemote) {
            try {
              ((EntityCreeper)entity).getDataWatcher().updateObject(17,(byte)1);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
        if (entity instanceof EntityPlayer) {
          IInventory inventory=((EntityPlayer)entity).inventory;
          for (int i=0; i < inventory.getSizeInventory(); i++) {
            ItemStack itemStack=inventory.getStackInSlot(i);
            if (itemStack != null) {
              if (itemStack.getItem() instanceof IEMPItem) {
                ((IEMPItem)itemStack.getItem()).onEMP(itemStack,entity,this);
              }
 else               if (itemStack.getItem() instanceof IEnergyItem) {
                ((IEnergyItem)itemStack.getItem()).setEnergy(itemStack,0);
              }
 else               if (itemStack.getItem() instanceof ISpecialElectricItem) {
                ((ISpecialElectricItem)itemStack.getItem()).getManager(itemStack).discharge(itemStack,((ISpecialElectricItem)itemStack.getItem()).getMaxCharge(itemStack),0,true,false);
              }
            }
          }
        }
      }
 else       if (entity instanceof EntityExplosive) {
        entity.setDead();
      }
    }
  }
  ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",world(),position,0,0,0,0,0,255,10,3);
  this.world().playSoundEffect(position.x,position.y,position.z,Reference.PREFIX + ""String_Node_Str"",4.0F,(1.0F + (world().rand.nextFloat() - world().rand.nextFloat()) * 0.2F) * 0.7F);
}","@Override public void doExplode(){
  if (this.effectBlocks) {
    for (int x=(int)-this.getRadius(); x < (int)this.getRadius(); x++) {
      for (int y=(int)-this.getRadius(); y < (int)this.getRadius(); y++) {
        for (int z=(int)-this.getRadius(); z < (int)this.getRadius(); z++) {
          double dist=MathHelper.sqrt_double((x * x + y * y + z * z));
          Vector3 searchPosition=position.add(new Vector3(x,y,z));
          if (dist > this.getRadius())           continue;
          if (Math.round(position.x() + y) == position.yi()) {
            world().spawnParticle(""String_Node_Str"",searchPosition.x(),searchPosition.y(),searchPosition.z(),0,0,0);
          }
          Block block=searchPosition.getBlock(world());
          TileEntity tileEntity=searchPosition.getTileEntity(world());
          if (block != null) {
          }
          if (block instanceof IEMPBlock) {
            ((IEMPBlock)block).onEMP(world(),searchPosition.xi(),searchPosition.yi(),searchPosition.zi(),this);
          }
          if (tileEntity != null) {
            if (tileEntity instanceof IFortronStorage) {
              ((IFortronStorage)tileEntity).provideFortron((int)world().rand.nextFloat() * ((IFortronStorage)tileEntity).getFortronCapacity(),true);
            }
            if (tileEntity instanceof IEnergyStorage) {
              ((IEnergyStorage)tileEntity).setStored(0);
            }
            for (            ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS)             Compatibility.extractEnergy(tileEntity,dir,Integer.MAX_VALUE,true);
          }
        }
      }
    }
  }
  if (this.effectEntities) {
    List<Entity> entitiesNearby=RadarRegistry.getEntitiesWithinRadius(position.toVector2(),(int)this.getRadius());
    for (    Entity entity : entitiesNearby) {
      if (entity instanceof IMissile && !entity.isEntityEqual(this.controller)) {
        if (((IMissile)entity).getTicksInAir() > -1) {
          ((IMissile)entity).dropMissileAsItem();
        }
      }
    }
    int maxFx=10;
    AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.x() - this.getRadius(),position.y() - this.getRadius(),position.z() - this.getRadius(),position.x() + this.getRadius(),position.y() + this.getRadius(),position.z() + this.getRadius());
    List<Entity> entities=world().getEntitiesWithinAABB(Entity.class,bounds);
    for (    Entity entity : entities) {
      if (entity instanceof EntityLivingBase) {
        if (this.world().isRemote && maxFx > 0) {
          ICBMExplosion.proxy.spawnShock(this.world(),this.position,new Vector3(entity),20);
          maxFx--;
        }
        if (entity instanceof EntityCreeper) {
          if (!this.world().isRemote) {
            try {
              ((EntityCreeper)entity).getDataWatcher().updateObject(17,(byte)1);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
        if (entity instanceof EntityPlayer) {
          IInventory inventory=((EntityPlayer)entity).inventory;
          for (int i=0; i < inventory.getSizeInventory(); i++) {
            ItemStack itemStack=inventory.getStackInSlot(i);
            if (itemStack != null) {
              if (itemStack.getItem() instanceof IEMPItem) {
                ((IEMPItem)itemStack.getItem()).onEMP(itemStack,entity,this);
              }
 else               if (itemStack.getItem() instanceof IEnergyItem) {
                ((IEnergyItem)itemStack.getItem()).setEnergy(itemStack,0);
              }
 else               if (itemStack.getItem() instanceof ISpecialElectricItem) {
                ((ISpecialElectricItem)itemStack.getItem()).getManager(itemStack).discharge(itemStack,((ISpecialElectricItem)itemStack.getItem()).getMaxCharge(itemStack),0,true,false);
              }
            }
          }
        }
      }
 else       if (entity instanceof EntityExplosive) {
        entity.setDead();
      }
    }
  }
  ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",world(),position,0,0,0,0,0,255,10,3);
  this.world().playSoundEffect(position.x(),position.y(),position.z(),Reference.PREFIX + ""String_Node_Str"",4.0F,(1.0F + (world().rand.nextFloat() - world().rand.nextFloat()) * 0.2F) * 0.7F);
}",0.917891879665234
169701,"public BlockICBMMachine(int id){
  super(id,""String_Node_Str"",UniversalElectricity.machine);
}","public BlockICBMMachine(){
  super(""String_Node_Str"",Material.circuits);
}",0.7619047619047619
169702,"/** 
 * Called when the block is placed in the world. 
 */
@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase par5EntityLiving,ItemStack itemStack){
  int angle=MathHelper.floor_double((par5EntityLiving.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof IRotatable) {
    IRotatable rotatableEntity=((IRotatable)tileEntity);
switch (angle) {
case 0:
      rotatableEntity.setDirection(ForgeDirection.getOrientation(3));
    break;
case 1:
  rotatableEntity.setDirection(ForgeDirection.getOrientation(4));
break;
case 2:
rotatableEntity.setDirection(ForgeDirection.getOrientation(2));
break;
case 3:
rotatableEntity.setDirection(ForgeDirection.getOrientation(5));
break;
}
}
if (tileEntity instanceof IMultiBlock) {
ResonantEngine.blockMulti.createMultiBlockStructure((IMultiBlock)tileEntity);
}
}","/** 
 * Called when the block is placed in the world. 
 */
@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase par5EntityLiving,ItemStack itemStack){
  int angle=MathHelper.floor_double((par5EntityLiving.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  if (tileEntity instanceof IRotatable) {
    IRotatable rotatableEntity=((IRotatable)tileEntity);
switch (angle) {
case 0:
      rotatableEntity.setDirection(ForgeDirection.getOrientation(3));
    break;
case 1:
  rotatableEntity.setDirection(ForgeDirection.getOrientation(4));
break;
case 2:
rotatableEntity.setDirection(ForgeDirection.getOrientation(2));
break;
case 3:
rotatableEntity.setDirection(ForgeDirection.getOrientation(5));
break;
}
}
if (tileEntity instanceof IMultiBlock) {
ResonantEngine.blockMulti.createMultiBlockStructure((IMultiBlock)tileEntity);
}
}",0.9972329828444936
169703,"public ItemICBMElectrical(int id,String name){
  super(Settings.CONFIGURATION.getItem(name,id).getInt(id));
  this.setUnlocalizedName(Reference.PREFIX + name);
  this.setCreativeTab(TabICBM.INSTANCE);
  this.setTextureName(Reference.PREFIX + name);
}","public ItemICBMElectrical(String name){
  this.setUnlocalizedName(Reference.PREFIX + name);
  this.setCreativeTab(TabICBM.INSTANCE);
  this.setTextureName(Reference.PREFIX + name);
}",0.8425925925925926
169704,"@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TileCruiseLauncher) {
    return new ContainerCruiseLauncher(player.inventory,(TileCruiseLauncher)tileEntity);
  }
 else   if (tileEntity instanceof TileMissileCoordinator) {
    return new ContainerMissileCoordinator(player.inventory,(TileMissileCoordinator)tileEntity);
  }
 else   if (tileEntity instanceof TileMissileAssembler) {
    return new ContainerMissileTable(player.inventory,(TileMissileAssembler)tileEntity);
  }
 else   if (tileEntity instanceof TileLauncherScreen || tileEntity instanceof TileRadarStation || tileEntity instanceof TileEMPTower|| tileEntity instanceof TileLauncherBase|| tileEntity instanceof TileMissileCoordinator|| tileEntity instanceof TileMissileAssembler) {
    return new ContainerDummy(player,tileEntity);
  }
  return null;
}","@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  if (tileEntity instanceof TileCruiseLauncher) {
    return new ContainerCruiseLauncher(player.inventory,(TileCruiseLauncher)tileEntity);
  }
 else   if (tileEntity instanceof TileMissileCoordinator) {
    return new ContainerMissileCoordinator(player.inventory,(TileMissileCoordinator)tileEntity);
  }
 else   if (tileEntity instanceof TileMissileAssembler) {
    return new ContainerMissileTable(player.inventory,(TileMissileAssembler)tileEntity);
  }
 else   if (tileEntity instanceof TileLauncherScreen || tileEntity instanceof TileRadarStation || tileEntity instanceof TileEMPTower|| tileEntity instanceof TileLauncherBase|| tileEntity instanceof TileMissileCoordinator|| tileEntity instanceof TileMissileAssembler) {
    return new ContainerDummy(player,tileEntity);
  }
  return null;
}",0.9973725696269048
169705,"@Override public void explode(){
  try {
    if (!this.isExpoding) {
      if (this.explosiveID == 0) {
        if (!this.worldObj.isRemote) {
          this.worldObj.createExplosion(this,this.posX,this.posY,this.posZ,5F,true);
        }
      }
 else {
        ((Explosion)ExplosiveRegistry.get(this.explosiveID)).createExplosion(this.worldObj,this.posX,this.posY,this.posZ,this);
      }
      this.isExpoding=true;
      ICBMCore.LOGGER.info(this.getEntityName() + ""String_Node_Str"" + this.entityId+ ""String_Node_Str""+ (int)this.posX+ ""String_Node_Str""+ (int)this.posY+ ""String_Node_Str""+ (int)this.posZ);
    }
    setDead();
  }
 catch (  Exception e) {
    ICBMCore.LOGGER.severe(""String_Node_Str"");
    e.printStackTrace();
  }
}","@Override public void explode(){
  try {
    if (!this.isExpoding) {
      if (this.explosiveID == 0) {
        if (!this.worldObj.isRemote) {
          this.worldObj.createExplosion(this,this.posX,this.posY,this.posZ,5F,true);
        }
      }
 else {
        ((Explosion)ExplosiveRegistry.get(this.explosiveID)).createExplosion(this.worldObj,this.posX,this.posY,this.posZ,this);
      }
      this.isExpoding=true;
      ICBMCore.LOGGER.info(this.getEntityName() + ""String_Node_Str"" + this.getEntityId()+ ""String_Node_Str""+ (int)this.posX+ ""String_Node_Str""+ (int)this.posY+ ""String_Node_Str""+ (int)this.posZ);
    }
    setDead();
  }
 catch (  Exception e) {
    ICBMCore.LOGGER.severe(""String_Node_Str"");
    e.printStackTrace();
  }
}",0.995260663507109
169706,"@Override public String getEntityName(){
  return ExplosiveRegistry.get(this.explosiveID).getMissileName();
}","public String getEntityName(){
  return ExplosiveRegistry.get(this.explosiveID).getMissileName();
}",0.9519230769230768
169707,"/** 
 * (abstract) Protected helper method to write subclass entity data to NBT. 
 */
@Override protected void writeEntityToNBT(NBTTagCompound nbt){
  if (this.startPos != null) {
    nbt.setCompoundTag(""String_Node_Str"",this.startPos.writeToNBT(new NBTTagCompound()));
  }
  if (this.targetVector != null) {
    nbt.setCompoundTag(""String_Node_Str"",this.targetVector.writeToNBT(new NBTTagCompound()));
  }
  if (this.launcherPos != null) {
    nbt.setCompoundTag(""String_Node_Str"",this.launcherPos.writeToNBT(new NBTTagCompound()));
  }
  nbt.setFloat(""String_Node_Str"",this.acceleration);
  nbt.setInteger(""String_Node_Str"",this.explosiveID);
  nbt.setInteger(""String_Node_Str"",this.targetHeight);
  nbt.setInteger(""String_Node_Str"",this.feiXingTick);
  nbt.setDouble(""String_Node_Str"",this.qiFeiGaoDu);
  nbt.setInteger(""String_Node_Str"",this.missileType.ordinal());
  nbt.setTag(""String_Node_Str"",this.nbtData);
}","/** 
 * (abstract) Protected helper method to write subclass entity data to NBT. 
 */
@Override protected void writeEntityToNBT(NBTTagCompound nbt){
  if (this.startPos != null) {
    nbt.setTag(""String_Node_Str"",this.startPos.writeNBT(new NBTTagCompound()));
  }
  if (this.targetVector != null) {
    nbt.setTag(""String_Node_Str"",this.targetVector.writeNBT(new NBTTagCompound()));
  }
  if (this.launcherPos != null) {
    nbt.setTag(""String_Node_Str"",this.launcherPos.writeNBT(new NBTTagCompound()));
  }
  nbt.setFloat(""String_Node_Str"",this.acceleration);
  nbt.setInteger(""String_Node_Str"",this.explosiveID);
  nbt.setInteger(""String_Node_Str"",this.targetHeight);
  nbt.setInteger(""String_Node_Str"",this.feiXingTick);
  nbt.setDouble(""String_Node_Str"",this.qiFeiGaoDu);
  nbt.setInteger(""String_Node_Str"",this.missileType.ordinal());
  nbt.setTag(""String_Node_Str"",this.nbtData);
}",0.7405764966740577
169708,"/** 
 * Recalculates required parabolic path for the missile Registry 
 */
public void recalculatePath(){
  if (this.targetVector != null) {
    this.deltaPathX=this.targetVector.x - this.startPos.x;
    this.deltaPathY=this.targetVector.y - this.startPos.y;
    this.deltaPathZ=this.targetVector.z - this.startPos.z;
    this.flatDistance=Vector2.distance(this.startPos.toVector2(),this.targetVector.toVector2());
    this.maxHeight=160 + (int)(this.flatDistance * 3);
    this.missileFlightTime=(float)Math.max(100,2 * this.flatDistance) - this.feiXingTick;
    this.acceleration=(float)this.maxHeight * 2 / (this.missileFlightTime * this.missileFlightTime);
  }
}","/** 
 * Recalculates required parabolic path for the missile Registry 
 */
public void recalculatePath(){
  if (this.targetVector != null) {
    this.deltaPathX=this.targetVector.x() - this.startPos.x();
    this.deltaPathY=this.targetVector.y() - this.startPos.y();
    this.deltaPathZ=this.targetVector.z() - this.startPos.z();
    this.flatDistance=this.startPos.subtract(this.targetVector).magnitude();
    this.maxHeight=160 + (int)(this.flatDistance * 3);
    this.missileFlightTime=(float)Math.max(100,2 * this.flatDistance) - this.feiXingTick;
    this.acceleration=(float)this.maxHeight * 2 / (this.missileFlightTime * this.missileFlightTime);
  }
}",0.90785498489426
169709,"@Override public Vector3 getPredictedPosition(int t){
  Vector3 guJiDiDian=new Vector3(this);
  double tempMotionY=this.motionY;
  if (this.feiXingTick > 20) {
    for (int i=0; i < t; i++) {
      if (this.missileType == MissileType.CruiseMissile || this.missileType == MissileType.LAUNCHER) {
        guJiDiDian.x+=this.xiaoDanMotion.x;
        guJiDiDian.y+=this.xiaoDanMotion.y;
        guJiDiDian.z+=this.xiaoDanMotion.z;
      }
 else {
        guJiDiDian.x+=this.motionX;
        guJiDiDian.y+=tempMotionY;
        guJiDiDian.z+=this.motionZ;
        tempMotionY-=this.acceleration;
      }
    }
  }
  return guJiDiDian;
}","@Override public Vector3 getPredictedPosition(int t){
  Vector3 guJiDiDian=new Vector3(this);
  double tempMotionY=this.motionY;
  if (this.feiXingTick > 20) {
    for (int i=0; i < t; i++) {
      if (this.missileType == MissileType.CruiseMissile || this.missileType == MissileType.LAUNCHER) {
        guJiDiDian.addEquals(xiaoDanMotion);
      }
 else {
        guJiDiDian.addEquals(this.motionX,tempMotionY,this.motionZ);
        tempMotionY-=this.acceleration;
      }
    }
  }
  return guJiDiDian;
}",0.7964757709251101
169710,"/** 
 * For rocket launchers
 * @param explosiveId - Explosive ID
 * @param startPos - Starting Position
 * @param yaw - The yaw of the missle
 * @param pitch - the pitch of the missle 
 */
public EntityMissile(World world,Vector3 startPos,int explosiveId,float yaw,float pitch){
  this(world);
  this.explosiveID=explosiveId;
  this.launcherPos=this.startPos=startPos;
  this.missileType=MissileType.LAUNCHER;
  this.protectionTime=0;
  this.setPosition(this.startPos.x,this.startPos.y,this.startPos.z);
  this.setRotation(yaw,pitch);
}","/** 
 * For rocket launchers
 * @param explosiveId - Explosive ID
 * @param startPos - Starting Position
 * @param yaw - The yaw of the missle
 * @param pitch - the pitch of the missle 
 */
public EntityMissile(World world,Vector3 startPos,int explosiveId,float yaw,float pitch){
  this(world);
  this.explosiveID=explosiveId;
  this.launcherPos=this.startPos=startPos;
  this.missileType=MissileType.LAUNCHER;
  this.protectionTime=0;
  this.setPosition(this.startPos.x(),this.startPos.y(),this.startPos.z());
  this.setRotation(yaw,pitch);
}",0.9648148148148148
169711,"@Override public void readSpawnData(ByteArrayDataInput data){
  try {
    this.explosiveID=data.readInt();
    this.missileType=MissileType.values()[data.readInt()];
    this.startPos=new Vector3(data.readDouble(),data.readDouble(),data.readDouble());
    this.launcherPos=new Vector3(data.readInt(),data.readInt(),data.readInt());
    rotationYaw=data.readFloat();
    rotationPitch=data.readFloat();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void readSpawnData(ByteBuf data){
  try {
    this.explosiveID=data.readInt();
    this.missileType=MissileType.values()[data.readInt()];
    this.startPos=new Vector3(data.readDouble(),data.readDouble(),data.readDouble());
    this.launcherPos=new Vector3(data.readInt(),data.readInt(),data.readInt());
    rotationYaw=data.readFloat();
    rotationPitch=data.readFloat();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9813391877058176
169712,"/** 
 * Called to update the entity's position/logic. 
 */
@Override public void onUpdate(){
  if (this.shengYin != null) {
    this.shengYin.update();
  }
  if (!this.worldObj.isRemote) {
    ExplosivePreDetonationEvent evt=new ExplosivePreDetonationEvent(worldObj,posX,posY,posZ,ExplosiveType.AIR,ExplosiveRegistry.get(explosiveID));
    MinecraftForge.EVENT_BUS.post(evt);
    if (evt.isCanceled()) {
      if (this.feiXingTick >= 0) {
        this.dropMissileAsItem();
      }
      this.setDead();
      return;
    }
  }
  try {
    if (this.worldObj.isRemote) {
      this.feiXingTick=this.dataWatcher.getWatchableObjectInt(16);
      int status=this.dataWatcher.getWatchableObjectInt(17);
switch (status) {
case 1:
        setNormalExplode=true;
      break;
case 2:
    setExplode=true;
  break;
}
}
 else {
this.dataWatcher.updateObject(16,feiXingTick);
}
}
 catch (Exception e) {
e.printStackTrace();
}
if (setNormalExplode) {
normalExplode();
return;
}
if (setExplode) {
explode();
return;
}
if (this.feiXingTick >= 0) {
RadarRegistry.register(this);
if (!this.worldObj.isRemote) {
if (this.missileType == MissileType.CruiseMissile || this.missileType == MissileType.LAUNCHER) {
if (this.feiXingTick == 0 && this.xiaoDanMotion != null) {
  this.xiaoDanMotion=new Vector3(this.deltaPathX / (missileFlightTime * 0.3),this.deltaPathY / (missileFlightTime * 0.3),this.deltaPathZ / (missileFlightTime * 0.3));
  this.motionX=this.xiaoDanMotion.x;
  this.motionY=this.xiaoDanMotion.y;
  this.motionZ=this.xiaoDanMotion.z;
}
this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
((Explosion)ExplosiveRegistry.get(this.explosiveID)).update(this);
Block block=Block.blocksList[this.worldObj.getBlockId((int)this.posX,(int)this.posY,(int)this.posZ)];
if (this.protectionTime <= 0 && ((block != null && !(block instanceof BlockFluid)) || this.posY > 1000 || this.isCollided || this.feiXingTick > 20 * Settings.ShortRangeMissileLifetimeSeconds || (this.motionX == 0 && this.motionY == 0 && this.motionZ == 0))) {
  setExplode();
  return;
}
this.moveEntity(this.motionX,this.motionY,this.motionZ);
}
 else {
if (this.qiFeiGaoDu > 0) {
  this.motionY=SPEED * this.feiXingTick * (this.feiXingTick / 2);
  this.motionX=0;
  this.motionZ=0;
  this.qiFeiGaoDu-=this.motionY;
  this.moveEntity(this.motionX,this.motionY,this.motionZ);
  if (this.qiFeiGaoDu <= 0) {
    this.motionY=this.acceleration * (this.missileFlightTime / 2);
    this.motionX=this.deltaPathX / missileFlightTime;
    this.motionZ=this.deltaPathZ / missileFlightTime;
  }
}
 else {
  this.motionY-=this.acceleration;
  this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
  this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
  ((Explosion)ExplosiveRegistry.get(this.explosiveID)).update(this);
  this.moveEntity(this.motionX,this.motionY,this.motionZ);
  if (this.isCollided) {
    this.explode();
  }
  if (this.targetHeight > 0 && this.motionY < 0) {
    int blockBelowID=this.worldObj.getBlockId((int)this.posX,(int)this.posY - targetHeight,(int)this.posZ);
    if (blockBelowID > 0) {
      this.targetHeight=0;
      this.explode();
    }
  }
}
}
}
 else {
this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
}
this.lastTickPosX=this.posX;
this.lastTickPosY=this.posY;
this.lastTickPosZ=this.posZ;
this.spawnMissileSmoke();
this.protectionTime--;
this.feiXingTick++;
}
 else if (this.missileType != MissileType.LAUNCHER) {
ILauncherContainer launcher=this.getLauncher();
if (launcher != null) {
launcher.setContainingMissile(this);
if (launcher instanceof TileCruiseLauncher) {
this.missileType=MissileType.CruiseMissile;
this.noClip=true;
if (this.worldObj.isRemote) {
  this.rotationYaw=-((TileCruiseLauncher)launcher).rotationYaw + 90;
  this.rotationPitch=((TileCruiseLauncher)launcher).rotationPitch;
}
this.posY=((TileCruiseLauncher)launcher).yCoord + 1;
}
}
 else {
this.setDead();
}
}
super.onUpdate();
}","/** 
 * Called to update the entity's position/logic. 
 */
@Override public void onUpdate(){
  if (this.shengYin != null) {
    this.shengYin.update();
  }
  if (!this.worldObj.isRemote) {
    ExplosivePreDetonationEvent evt=new ExplosivePreDetonationEvent(worldObj,posX,posY,posZ,ExplosiveType.AIR,ExplosiveRegistry.get(explosiveID));
    MinecraftForge.EVENT_BUS.post(evt);
    if (evt.isCanceled()) {
      if (this.feiXingTick >= 0) {
        this.dropMissileAsItem();
      }
      this.setDead();
      return;
    }
  }
  try {
    if (this.worldObj.isRemote) {
      this.feiXingTick=this.dataWatcher.getWatchableObjectInt(16);
      int status=this.dataWatcher.getWatchableObjectInt(17);
switch (status) {
case 1:
        setNormalExplode=true;
      break;
case 2:
    setExplode=true;
  break;
}
}
 else {
this.dataWatcher.updateObject(16,feiXingTick);
}
}
 catch (Exception e) {
e.printStackTrace();
}
if (setNormalExplode) {
normalExplode();
return;
}
if (setExplode) {
explode();
return;
}
if (this.feiXingTick >= 0) {
RadarRegistry.register(this);
if (!this.worldObj.isRemote) {
if (this.missileType == MissileType.CruiseMissile || this.missileType == MissileType.LAUNCHER) {
if (this.feiXingTick == 0 && this.xiaoDanMotion != null) {
  this.xiaoDanMotion=new Vector3(this.deltaPathX / (missileFlightTime * 0.3),this.deltaPathY / (missileFlightTime * 0.3),this.deltaPathZ / (missileFlightTime * 0.3));
  this.motionX=this.xiaoDanMotion.x();
  this.motionY=this.xiaoDanMotion.y();
  this.motionZ=this.xiaoDanMotion.z();
}
this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
((Explosion)ExplosiveRegistry.get(this.explosiveID)).update(this);
Block block=this.worldObj.getBlock((int)this.posX,(int)this.posY,(int)this.posZ);
if (this.protectionTime <= 0 && ((block != null && !(block instanceof IFluidBlock)) || this.posY > 1000 || this.isCollided || this.feiXingTick > 20 * Settings.ShortRangeMissileLifetimeSeconds || (this.motionX == 0 && this.motionY == 0 && this.motionZ == 0))) {
  setExplode();
  return;
}
this.moveEntity(this.motionX,this.motionY,this.motionZ);
}
 else {
if (this.qiFeiGaoDu > 0) {
  this.motionY=SPEED * this.feiXingTick * (this.feiXingTick / 2);
  this.motionX=0;
  this.motionZ=0;
  this.qiFeiGaoDu-=this.motionY;
  this.moveEntity(this.motionX,this.motionY,this.motionZ);
  if (this.qiFeiGaoDu <= 0) {
    this.motionY=this.acceleration * (this.missileFlightTime / 2);
    this.motionX=this.deltaPathX / missileFlightTime;
    this.motionZ=this.deltaPathZ / missileFlightTime;
  }
}
 else {
  this.motionY-=this.acceleration;
  this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
  this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
  ((Explosion)ExplosiveRegistry.get(this.explosiveID)).update(this);
  this.moveEntity(this.motionX,this.motionY,this.motionZ);
  if (this.isCollided) {
    this.explode();
  }
  if (this.targetHeight > 0 && this.motionY < 0) {
    Block blockBelow=worldObj.getBlock((int)this.posX,(int)this.posY - targetHeight,(int)this.posZ);
    if (blockBelow != null && !blockBelow.isAir(worldObj,(int)this.posX,(int)this.posY - targetHeight,(int)this.posZ)) {
      this.targetHeight=0;
      this.explode();
    }
  }
}
}
}
 else {
this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
}
this.lastTickPosX=this.posX;
this.lastTickPosY=this.posY;
this.lastTickPosZ=this.posZ;
this.spawnMissileSmoke();
this.protectionTime--;
this.feiXingTick++;
}
 else if (this.missileType != MissileType.LAUNCHER) {
ILauncherContainer launcher=this.getLauncher();
if (launcher != null) {
launcher.setContainingMissile(this);
if (launcher instanceof TileCruiseLauncher) {
this.missileType=MissileType.CruiseMissile;
this.noClip=true;
if (this.worldObj.isRemote) {
  this.rotationYaw=-((TileCruiseLauncher)launcher).rotationYaw + 90;
  this.rotationPitch=((TileCruiseLauncher)launcher).rotationPitch;
}
this.posY=((TileCruiseLauncher)launcher).yCoord + 1;
}
}
 else {
this.setDead();
}
}
super.onUpdate();
}",0.9816147082334132
169713,"@Override public void writeSpawnData(ByteArrayDataOutput data){
  try {
    data.writeInt(this.explosiveID);
    data.writeInt(this.missileType.ordinal());
    data.writeDouble(this.startPos.x);
    data.writeDouble(this.startPos.y);
    data.writeDouble(this.startPos.z);
    data.writeInt(this.launcherPos.intX());
    data.writeInt(this.launcherPos.intY());
    data.writeInt(this.launcherPos.intZ());
    data.writeFloat(rotationYaw);
    data.writeFloat(rotationPitch);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void writeSpawnData(ByteBuf data){
  try {
    data.writeInt(this.explosiveID);
    data.writeInt(this.missileType.ordinal());
    data.writeDouble(this.startPos.x());
    data.writeDouble(this.startPos.y());
    data.writeDouble(this.startPos.z());
    data.writeInt(this.launcherPos.xi());
    data.writeInt(this.launcherPos.yi());
    data.writeInt(this.launcherPos.zi());
    data.writeFloat(rotationYaw);
    data.writeFloat(rotationPitch);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9602272727272728
169714,"private void spawnMissileSmoke(){
  if (this.worldObj.isRemote) {
    Vector3 position=new Vector3(this);
    double distance=-this.daoDanGaoDu - 0.2f;
    Vector3 delta=new Vector3();
    delta.y=Math.sin(Math.toRadians(this.rotationPitch)) * distance;
    double dH=Math.cos(Math.toRadians(this.rotationPitch)) * distance;
    delta.x=Math.sin(Math.toRadians(this.rotationYaw)) * dH;
    delta.z=Math.cos(Math.toRadians(this.rotationYaw)) * dH;
    position.add(delta);
    this.worldObj.spawnParticle(""String_Node_Str"",position.x,position.y,position.z,0,0,0);
    ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.worldObj,position,4,2);
    position.scale(1 - 0.001 * Math.random());
    ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.worldObj,position,4,2);
    position.scale(1 - 0.001 * Math.random());
    ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.worldObj,position,4,2);
    position.scale(1 - 0.001 * Math.random());
    ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.worldObj,position,4,2);
  }
}","private void spawnMissileSmoke(){
  if (this.worldObj.isRemote) {
    Vector3 position=new Vector3(this);
    double distance=-this.daoDanGaoDu - 0.2f;
    Vector3 delta=new Vector3();
    delta.y_$eq(Math.sin(Math.toRadians(this.rotationPitch)) * distance);
    double dH=Math.cos(Math.toRadians(this.rotationPitch)) * distance;
    delta.x_$eq(Math.sin(Math.toRadians(this.rotationYaw)) * dH);
    delta.z_$eq(Math.cos(Math.toRadians(this.rotationYaw)) * dH);
    position.add(delta);
    this.worldObj.spawnParticle(""String_Node_Str"",position.x(),position.y(),position.z(),0,0,0);
    ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.worldObj,position,4,2);
    position.multiply(1 - 0.001 * Math.random());
    ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.worldObj,position,4,2);
    position.multiply(1 - 0.001 * Math.random());
    ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.worldObj,position,4,2);
    position.multiply(1 - 0.001 * Math.random());
    ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.worldObj,position,4,2);
  }
}",0.9689849624060152
169715,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.INSTANCE.registerGuiHandler(this,proxy);
  Modstats.instance().getReporter().registerMod(INSTANCE);
  MinecraftForge.EVENT_BUS.register(INSTANCE);
  modproxies.applyModule(Waila.class,true);
  Settings.CONFIGURATION.load();
  ResonantEngine.blockMulti.setTextureName(Reference.PREFIX + ""String_Node_Str"");
  blockSulfurOre=contentRegistry.newBlock(BlockSulfurOre.class);
  blockGlassPlate=contentRegistry.newBlock(BlockGlassPressurePlate.class);
  blockGlassButton=contentRegistry.newBlock(BlockGlassButton.class);
  blockProximityDetector=contentRegistry.newBlock(TileProximityDetector.class);
  blockSpikes=contentRegistry.newBlock(""String_Node_Str"",BlockSpikes.class,ItemBlockMetadata.class);
  blockCamo=contentRegistry.createBlock(BlockCamouflage.class);
  blockConcrete=contentRegistry.createBlock(BlockConcrete.class,ItemBlockMetadata.class);
  blockReinforcedGlass=contentRegistry.createBlock(BlockReinforcedGlass.class,ItemBlockMetadata.class);
  blockCombatRail=contentRegistry.createBlock(BlockReinforcedRail.class);
  itemPoisonPowder=contentRegistry.createItem(ItemPoisonPowder.class);
  itemSulfurDust=contentRegistry.createItem(ItemSulfurDust.class);
  itemAntidote=contentRegistry.createItem(ItemAntidote.class);
  itemSignalDisrupter=contentRegistry.createItem(ItemSignalDisrupter.class);
  itemTracker=contentRegistry.createItem(ItemTracker.class);
  itemHackingComputer=contentRegistry.createItem(ItemComputer.class);
  sulfurGenerator=new OreGeneratorICBM(""String_Node_Str"",""String_Node_Str"",new ItemStack(blockSulfurOre),0,40,20,4).enable(Settings.CONFIGURATION);
  if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
    blockRadioactive=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
    LOGGER.fine(""String_Node_Str"");
  }
 else {
    blockRadioactive=Block.mycelium;
  }
  Block.obsidian.setResistance(Settings.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
  LOGGER.fine(""String_Node_Str"" + Block.obsidian.getExplosionResistance(null));
  OreDictionary.registerOre(""String_Node_Str"",new ItemStack(itemSulfurDust,1,0));
  OreDictionary.registerOre(""String_Node_Str"",new ItemStack(itemSulfurDust,1,1));
  OreGenerator.addOre(sulfurGenerator);
  if (!Loader.isModLoaded(""String_Node_Str"") && !Loader.isModLoaded(""String_Node_Str""))   TabICBM.itemStack=new ItemStack(blockProximityDetector);
  proxy.preInit();
  modproxies.preInit();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.INSTANCE.registerGuiHandler(this,proxy);
  Modstats.instance().getReporter().registerMod(INSTANCE);
  MinecraftForge.EVENT_BUS.register(INSTANCE);
  modproxies.applyModule(Waila.class,true);
  Settings.CONFIGURATION.load();
  ResonantEngine.blockMulti.setTextureName(Reference.PREFIX + ""String_Node_Str"");
  blockSulfurOre=contentRegistry.newBlock(BlockSulfurOre.class);
  blockGlassPlate=contentRegistry.newBlock(BlockGlassPressurePlate.class);
  blockGlassButton=contentRegistry.newBlock(BlockGlassButton.class);
  blockProximityDetector=contentRegistry.newBlock(TileProximityDetector.class);
  blockSpikes=contentRegistry.newBlock(BlockSpikes.class,ItemBlockMetadata.class);
  blockCamo=contentRegistry.newBlock(BlockCamouflage.class);
  blockConcrete=contentRegistry.newBlock(BlockConcrete.class,ItemBlockMetadata.class);
  blockReinforcedGlass=contentRegistry.newBlock(BlockReinforcedGlass.class,ItemBlockMetadata.class);
  blockCombatRail=contentRegistry.newBlock(BlockReinforcedRail.class);
  itemPoisonPowder=contentRegistry.newItem(ItemPoisonPowder.class);
  itemSulfurDust=contentRegistry.newItem(ItemSulfurDust.class);
  itemAntidote=contentRegistry.newItem(ItemAntidote.class);
  itemSignalDisrupter=contentRegistry.newItem(ItemSignalDisrupter.class);
  itemTracker=contentRegistry.newItem(ItemTracker.class);
  itemHackingComputer=contentRegistry.newItem(ItemComputer.class);
  sulfurGenerator=new OreGeneratorICBM(""String_Node_Str"",""String_Node_Str"",new ItemStack(blockSulfurOre),0,40,20,4).enable(Settings.CONFIGURATION);
  if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
    blockRadioactive=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
    LOGGER.fine(""String_Node_Str"");
  }
 else {
    blockRadioactive=Blocks.mycelium;
  }
  Blocks.obsidian.setResistance(Settings.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
  LOGGER.fine(""String_Node_Str"" + Blocks.obsidian.getExplosionResistance(null));
  OreDictionary.registerOre(""String_Node_Str"",new ItemStack(itemSulfurDust,1,0));
  OreDictionary.registerOre(""String_Node_Str"",new ItemStack(itemSulfurDust,1,1));
  OreGenerator.addOre(sulfurGenerator);
  if (!Loader.isModLoaded(""String_Node_Str"") && !Loader.isModLoaded(""String_Node_Str""))   TabICBM.itemStack=new ItemStack(blockProximityDetector);
  proxy.preInit();
  modproxies.preInit();
}",0.7057171514543631
169716,"@Override public World world(){
  return this.position.world;
}","@Override public World world(){
  return this.position.world();
}",0.984375
169717,"protected void doDamageEntities(float radius,float power,boolean destroyItem){
  radius*=2.0F;
  Vector3 minCoord=position.clone();
  minCoord.add(-radius - 1);
  Vector3 maxCoord=position.clone();
  maxCoord.add(radius + 1);
  List<Entity> allEntities=world().getEntitiesWithinAABB(Entity.class,AxisAlignedBB.getBoundingBox(minCoord.intX(),minCoord.intY(),minCoord.intZ(),maxCoord.intX(),maxCoord.intY(),maxCoord.intZ()));
  Vec3 var31=Vec3.createVectorHelper(position.x,position.y,position.z);
  for (int i=0; i < allEntities.size(); ++i) {
    Entity entity=allEntities.get(i);
    if (this.onDamageEntity(entity)) {
      continue;
    }
    if (entity instanceof EntityMissile) {
      ((EntityMissile)entity).setExplode();
      continue;
    }
    if (entity instanceof EntityItem && !destroyItem)     continue;
    double distance=entity.getDistance(position.x,position.y,position.z) / radius;
    if (distance <= 1.0D) {
      double xDifference=entity.posX - position.x;
      double yDifference=entity.posY - position.y;
      double zDifference=entity.posZ - position.z;
      double var35=MathHelper.sqrt_double(xDifference * xDifference + yDifference * yDifference + zDifference * zDifference);
      xDifference/=var35;
      yDifference/=var35;
      zDifference/=var35;
      double var34=world().getBlockDensity(var31,entity.boundingBox);
      double var36=(1.0D - distance) * var34;
      int damage=0;
      damage=(int)((var36 * var36 + var36) / 2.0D * 8.0D * power + 1.0D);
      entity.attackEntityFrom(DamageSource.setExplosionSource(this),damage);
      entity.motionX+=xDifference * var36;
      entity.motionY+=yDifference * var36;
      entity.motionZ+=zDifference * var36;
    }
  }
}","protected void doDamageEntities(float radius,float power,boolean destroyItem){
  radius*=2.0F;
  Vector3 minCoord=position.clone();
  minCoord.add(-radius - 1);
  Vector3 maxCoord=position.clone();
  maxCoord.add(radius + 1);
  List<Entity> allEntities=world().getEntitiesWithinAABB(Entity.class,AxisAlignedBB.getBoundingBox(minCoord.xi(),minCoord.yi(),minCoord.zi(),maxCoord.xi(),maxCoord.yi(),maxCoord.zi()));
  Vec3 var31=Vec3.createVectorHelper(position.x(),position.y(),position.z());
  for (int i=0; i < allEntities.size(); ++i) {
    Entity entity=allEntities.get(i);
    if (this.onDamageEntity(entity)) {
      continue;
    }
    if (entity instanceof EntityMissile) {
      ((EntityMissile)entity).setExplode();
      continue;
    }
    if (entity instanceof EntityItem && !destroyItem)     continue;
    double distance=entity.getDistance(position.x(),position.y(),position.z()) / radius;
    if (distance <= 1.0D) {
      double xDifference=entity.posX - position.x();
      double yDifference=entity.posY - position.y();
      double zDifference=entity.posZ - position.z();
      double var35=MathHelper.sqrt_double(xDifference * xDifference + yDifference * yDifference + zDifference * zDifference);
      xDifference/=var35;
      yDifference/=var35;
      zDifference/=var35;
      double var34=world().getBlockDensity(var31,entity.boundingBox);
      double var36=(1.0D - distance) * var34;
      int damage=0;
      damage=(int)((var36 * var36 + var36) / 2.0D * 8.0D * power + 1.0D);
      entity.attackEntityFrom(DamageSource.setExplosionSource(this),damage);
      entity.motionX+=xDifference * var36;
      entity.motionY+=yDifference * var36;
      entity.motionZ+=zDifference * var36;
    }
  }
}",0.9842748980780432
169718,"/** 
 * The interval in ticks before the next procedural call of this explosive
 * @param return - Return -1 if this explosive does not need procedural calls 
 */
public int proceduralInterval(){
  return -1;
}","/** 
 * The interval in ticks before the next procedural call of this explosive
 * @return - Return -1 if this explosive does not need procedural calls 
 */
public int proceduralInterval(){
  return -1;
}",0.9855072463768116
169719,"@Override public void updateEntity(){
  super.updateEntity();
  if (!this.worldObj.isRemote) {
    if (this.ticks % 40 == 0) {
      PacketHandler.sendPacketToClients(this.getDescriptionPacket(),this.worldObj,new Vector3(this),35);
    }
 else     if (this.ticks % 3 == 0) {
      for (      EntityPlayer player : this.playersUsing) {
        PacketDispatcher.sendPacketToPlayer(this.getDescriptionPacket2(),(Player)player);
      }
    }
  }
  if (this.getEnergyHandler().checkExtract()) {
    this.isPowered=true;
    this.rotation+=0.08f;
    if (this.rotation > 360) {
      this.rotation=0;
    }
    if (!this.worldObj.isRemote) {
      this.getEnergyHandler().extractEnergy();
      int prevDetectedEntities=this.detectedEntities.size();
      this.doScan();
      if (prevDetectedEntities != this.detectedEntities.size()) {
        this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
      }
      updateClient();
      if (this.ticks % 20 == 0 && this.incomingMissiles.size() > 0) {
        for (        IBlockFrequency blockFrequency : FrequencyGrid.instance().get()) {
          if (blockFrequency instanceof TileLauncherPrefab) {
            TileLauncherPrefab launcher=(TileLauncherPrefab)blockFrequency;
            if (new Vector3(this).distance(new Vector3(launcher)) < this.alarmRange && launcher.getFrequency() == this.getFrequency()) {
              if (launcher instanceof TileLauncherScreen) {
                double height=launcher.getTarget() != null ? launcher.getTarget().y : 0;
                launcher.setTarget(new Vector3(this.incomingMissiles.get(0).posX,height,this.incomingMissiles.get(0).posZ));
              }
 else {
                launcher.setTarget(new Vector3(this.incomingMissiles.get(0)));
              }
            }
          }
        }
      }
    }
  }
 else {
    this.isPowered=false;
    if (detectedEntities.size() > 0) {
      worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
    }
    if (!this.worldObj.isRemote) {
      incomingMissiles.clear();
      detectedEntities.clear();
      detectedTiles.clear();
      updateClient();
    }
  }
  if (ticks % 40 == 0) {
    worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (!this.worldObj.isRemote) {
    if (this.ticks() % 40 == 0) {
      PacketHandler.sendPacketToClients(this.getDescriptionPacket(),this.worldObj,new Vector3(this),35);
    }
 else     if (this.ticks % 3 == 0) {
      for (      EntityPlayer player : this.playersUsing) {
        PacketDispatcher.sendPacketToPlayer(this.getDescriptionPacket2(),(Player)player);
      }
    }
  }
  if (this.energy().checkExtract()) {
    this.isPowered=true;
    this.rotation+=0.08f;
    if (this.rotation > 360) {
      this.rotation=0;
    }
    if (!this.worldObj.isRemote) {
      this.energy().extractEnergy();
      int prevDetectedEntities=this.detectedEntities.size();
      this.doScan();
      if (prevDetectedEntities != this.detectedEntities.size()) {
        this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
      }
      updateClient();
      if (this.ticks() % 20 == 0 && this.incomingMissiles.size() > 0) {
        for (        IBlockFrequency blockFrequency : FrequencyGrid$.MODULE$) {
          if (blockFrequency instanceof TileLauncherPrefab) {
            TileLauncherPrefab launcher=(TileLauncherPrefab)blockFrequency;
            if (new Vector3(this).distance(new Vector3(launcher)) < this.alarmRange && launcher.getFrequency() == this.getFrequency()) {
              if (launcher instanceof TileLauncherScreen) {
                double height=launcher.getTarget() != null ? launcher.getTarget().y : 0;
                launcher.setTarget(new Vector3(this.incomingMissiles.get(0).posX,height,this.incomingMissiles.get(0).posZ));
              }
 else {
                launcher.setTarget(new Vector3(this.incomingMissiles.get(0)));
              }
            }
          }
        }
      }
    }
  }
 else {
    this.isPowered=false;
    if (detectedEntities.size() > 0) {
      worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType());
    }
    if (!this.worldObj.isRemote) {
      incomingMissiles.clear();
      detectedEntities.clear();
      detectedTiles.clear();
      updateClient();
    }
  }
  if (ticks() % 40 == 0) {
    worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
  }
}",0.8571428571428571
169720,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.INSTANCE.registerGuiHandler(this,proxy);
  Modstats.instance().getReporter().registerMod(INSTANCE);
  MinecraftForge.EVENT_BUS.register(INSTANCE);
  modproxies.applyModule(Waila.class,true);
  Settings.CONFIGURATION.load();
  blockSulfurOre=contentRegistry.newBlock(BlockSulfurOre.class);
  blockGlassPlate=contentRegistry.newBlock(""String_Node_Str"",new BlockPressurePlate(""String_Node_Str"",Material.glass,BlockPressurePlate.Sensitivity.everything));
  blockGlassButton=contentRegistry.newBlock(""String_Node_Str"",new BlockButton(false));
  blockProximityDetector=contentRegistry.newBlock(TileProximityDetector.class);
  blockSpikes=contentRegistry.newBlock(BlockSpikes.class,ItemBlockMetadata.class);
  blockCamo=contentRegistry.newBlock(BlockCamouflage.class);
  blockConcrete=contentRegistry.newBlock(BlockConcrete.class,ItemBlockMetadata.class);
  blockReinforcedGlass=contentRegistry.newBlock(BlockReinforcedGlass.class,ItemBlockMetadata.class);
  blockCombatRail=contentRegistry.newBlock(BlockReinforcedRail.class);
  itemPoisonPowder=contentRegistry.newItem(ItemPoisonPowder.class);
  itemSulfurDust=contentRegistry.newItem(ItemSulfurDust.class);
  itemAntidote=contentRegistry.newItem(ItemAntidote.class);
  itemSignalDisrupter=contentRegistry.newItem(ItemSignalDisrupter.class);
  itemTracker=contentRegistry.newItem(ItemTracker.class);
  itemHackingComputer=contentRegistry.newItem(ItemComputer.class);
  if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
    blockRadioactive=Block.getBlockFromItem(OreDictionary.getOres(""String_Node_Str"").get(0).getItem());
    LOGGER.fine(""String_Node_Str"");
  }
 else {
    blockRadioactive=Blocks.mycelium;
  }
  Blocks.obsidian.setResistance(Settings.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
  LOGGER.fine(""String_Node_Str"" + Blocks.obsidian.getExplosionResistance(null));
  OreDictionary.registerOre(""String_Node_Str"",new ItemStack(itemSulfurDust,1,0));
  OreDictionary.registerOre(""String_Node_Str"",new ItemStack(itemSulfurDust,1,1));
  if (!Loader.isModLoaded(""String_Node_Str"") && !Loader.isModLoaded(""String_Node_Str""))   TabICBM.itemStack=new ItemStack(blockProximityDetector);
  proxy.preInit();
  modproxies.preInit();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.INSTANCE.registerGuiHandler(this,proxy);
  Modstats.instance().getReporter().registerMod(INSTANCE);
  MinecraftForge.EVENT_BUS.register(INSTANCE);
  modproxies.applyModule(Waila.class,true);
  Settings.CONFIGURATION.load();
  blockSulfurOre=contentRegistry.newBlock(BlockSulfurOre.class);
  blockGlassPlate=contentRegistry.newBlock(""String_Node_Str"",new BlockPressurePlate(""String_Node_Str"",Material.glass,BlockPressurePlate.Sensitivity.everything));
  blockGlassButton=contentRegistry.newBlock(""String_Node_Str"",new BlockButton(false));
  blockProximityDetector=contentRegistry.newBlock(TileProximityDetector.class);
  blockSpikes=contentRegistry.newBlock(BlockSpikes.class,ItemBlockMetadata.class);
  blockCamo=contentRegistry.newBlock(TileCamouflage.class);
  blockConcrete=contentRegistry.newBlock(BlockConcrete.class,ItemBlockMetadata.class);
  blockReinforcedGlass=contentRegistry.newBlock(BlockReinforcedGlass.class,ItemBlockMetadata.class);
  blockCombatRail=contentRegistry.newBlock(BlockReinforcedRail.class);
  itemPoisonPowder=contentRegistry.newItem(ItemPoisonPowder.class);
  itemSulfurDust=contentRegistry.newItem(ItemSulfurDust.class);
  itemAntidote=contentRegistry.newItem(ItemAntidote.class);
  itemSignalDisrupter=contentRegistry.newItem(ItemSignalDisrupter.class);
  itemTracker=contentRegistry.newItem(ItemTracker.class);
  itemHackingComputer=contentRegistry.newItem(ItemComputer.class);
  if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
    blockRadioactive=Block.getBlockFromItem(OreDictionary.getOres(""String_Node_Str"").get(0).getItem());
    LOGGER.fine(""String_Node_Str"");
  }
 else {
    blockRadioactive=Blocks.mycelium;
  }
  Blocks.obsidian.setResistance(Settings.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
  LOGGER.fine(""String_Node_Str"" + Blocks.obsidian.getExplosionResistance(null));
  OreDictionary.registerOre(""String_Node_Str"",new ItemStack(itemSulfurDust,1,0));
  OreDictionary.registerOre(""String_Node_Str"",new ItemStack(itemSulfurDust,1,1));
  if (!Loader.isModLoaded(""String_Node_Str"") && !Loader.isModLoaded(""String_Node_Str""))   TabICBM.itemStack=new ItemStack(blockProximityDetector);
  proxy.preInit();
  modproxies.preInit();
}",0.9980548951804624
169721,"/** 
 * Called when the player Left Clicks (attacks) an entity. Processed before damage is done, if return value is true further processing is canceled and the entity is not attacked.
 * @param itemStack The Item being used
 * @param player The player that is attacking
 * @param entity The entity being attacked
 * @return True to cancel the rest of the interaction. 
 */
@Override public boolean onLeftClickEntity(ItemStack itemStack,EntityPlayer player,Entity entity){
  System.out.println(""String_Node_Str"" + this.getEnergy(itemStack));
  if (this.getEnergy(itemStack) >= YONG_DIAN_LIANG) {
    if (entity instanceof EntityExplosive) {
      if (!entity.worldObj.isRemote) {
        EntityExplosive entityTNT=(EntityExplosive)entity;
        EntityItem entityItem=new EntityItem(entity.worldObj,entity.posX,entity.posY,entity.posZ,new ItemStack(ICBMExplosion.blockExplosive,1,entityTNT.explosiveID));
        float var13=0.05F;
        Random random=new Random();
        entityItem.motionX=((float)random.nextGaussian() * var13);
        entityItem.motionY=((float)random.nextGaussian() * var13 + 0.2F);
        entityItem.motionZ=((float)random.nextGaussian() * var13);
        entity.worldObj.spawnEntityInWorld(entityItem);
      }
      entity.setDead();
    }
 else     if (entity instanceof EntityTNTPrimed) {
      if (!entity.worldObj.isRemote) {
        EntityItem entityItem=new EntityItem(entity.worldObj,entity.posX,entity.posY,entity.posZ,new ItemStack(Block.tnt));
        float var13=0.05F;
        Random random=new Random();
        entityItem.motionX=((float)random.nextGaussian() * var13);
        entityItem.motionY=((float)random.nextGaussian() * var13 + 0.2F);
        entityItem.motionZ=((float)random.nextGaussian() * var13);
        entity.worldObj.spawnEntityInWorld(entityItem);
      }
      entity.setDead();
    }
 else     if (entity instanceof EntityBombCart) {
      ((EntityBombCart)entity).killMinecart(DamageSource.generic);
    }
    this.setEnergy(itemStack,this.getEnergy(itemStack) - YONG_DIAN_LIANG);
    return true;
  }
 else {
    player.addChatMessage(LanguageUtility.getLocal(""String_Node_Str""));
  }
  return false;
}","/** 
 * Called when the player Left Clicks (attacks) an entity. Processed before damage is done, if return value is true further processing is canceled and the entity is not attacked.
 * @param itemStack The Item being used
 * @param player The player that is attacking
 * @param entity The entity being attacked
 * @return True to cancel the rest of the interaction. 
 */
@Override public boolean onLeftClickEntity(ItemStack itemStack,EntityPlayer player,Entity entity){
  System.out.println(""String_Node_Str"" + this.getEnergy(itemStack));
  if (this.getEnergy(itemStack) >= energyCost) {
    if (entity instanceof EntityExplosive) {
      if (!entity.worldObj.isRemote) {
        EntityExplosive entityTNT=(EntityExplosive)entity;
        EntityItem entityItem=new EntityItem(entity.worldObj,entity.posX,entity.posY,entity.posZ,new ItemStack(ICBMExplosion.blockExplosive,1,entityTNT.explosiveID));
        float var13=0.05F;
        Random random=new Random();
        entityItem.motionX=((float)random.nextGaussian() * var13);
        entityItem.motionY=((float)random.nextGaussian() * var13 + 0.2F);
        entityItem.motionZ=((float)random.nextGaussian() * var13);
        entity.worldObj.spawnEntityInWorld(entityItem);
      }
      entity.setDead();
    }
 else     if (entity instanceof EntityTNTPrimed) {
      if (!entity.worldObj.isRemote) {
        EntityItem entityItem=new EntityItem(entity.worldObj,entity.posX,entity.posY,entity.posZ,new ItemStack(Block.tnt));
        float var13=0.05F;
        Random random=new Random();
        entityItem.motionX=((float)random.nextGaussian() * var13);
        entityItem.motionY=((float)random.nextGaussian() * var13 + 0.2F);
        entityItem.motionZ=((float)random.nextGaussian() * var13);
        entity.worldObj.spawnEntityInWorld(entityItem);
      }
      entity.setDead();
    }
 else     if (entity instanceof EntityBombCart) {
      ((EntityBombCart)entity).killMinecart(DamageSource.generic);
    }
    this.setEnergy(itemStack,this.getEnergy(itemStack) - energyCost);
    return true;
  }
 else {
    player.addChatMessage(LanguageUtility.getLocal(""String_Node_Str""));
  }
  return false;
}",0.9884473197781886
169722,"@Override public long getEnergyCapacity(ItemStack itemStack){
  return YONG_DIAN_LIANG * 10;
}","@Override public long getEnergyCapacity(ItemStack itemStack){
  return energyCost * 10;
}",0.8633879781420765
169723,"@Override public void onReceivePacket(ByteArrayDataInput data,EntityPlayer player,Object... extra){
  ItemStack itemStack=(ItemStack)extra[0];
  Vector3 position=new Vector3(data.readInt(),data.readInt(),data.readInt());
  ((ItemLaserDesignator)ICBMExplosion.itemLaserDesignator).setLauncherCountDown(itemStack,119);
  player.worldObj.playSoundEffect(position.intX(),player.worldObj.getHeightValue(position.intX(),position.intZ()),position.intZ(),Reference.PREFIX + ""String_Node_Str"",5.0F,(1.0F + (player.worldObj.rand.nextFloat() - player.worldObj.rand.nextFloat()) * 0.2F) * 0.7F);
  player.worldObj.spawnEntityInWorld(new EntityLightBeam(player.worldObj,position,5 * 20,0F,1F,0F));
  if (ICBMExplosion.itemRadarGun instanceof ItemElectric)   ((ItemElectric)ICBMExplosion.itemRadarGun).discharge(itemStack,ItemLaserDesignator.YONG_DIAN_LIANG,true);
}","@Override public void onReceivePacket(ByteArrayDataInput data,EntityPlayer player,Object... extra){
  ItemStack itemStack=(ItemStack)extra[0];
  Vector3 position=new Vector3(data.readInt(),data.readInt(),data.readInt());
  ((ItemLaserDesignator)ICBMExplosion.itemLaserDesignator).setLauncherCountDown(itemStack,119);
  player.worldObj.playSoundEffect(position.intX(),player.worldObj.getHeightValue(position.intX(),position.intZ()),position.intZ(),Reference.PREFIX + ""String_Node_Str"",5.0F,(1.0F + (player.worldObj.rand.nextFloat() - player.worldObj.rand.nextFloat()) * 0.2F) * 0.7F);
  player.worldObj.spawnEntityInWorld(new EntityLightBeam(player.worldObj,position,5 * 20,0F,1F,0F));
  if (ICBMExplosion.itemRadarGun instanceof ItemElectric)   ((ItemElectric)ICBMExplosion.itemRadarGun).discharge(itemStack,ItemLaserDesignator.energyCost,true);
}",0.985285462036492
169724,"/** 
 * Called whenever this item is equipped and the right mouse button is pressed. Args: itemStack, world, entityPlayer 
 */
@Override public ItemStack onItemRightClick(ItemStack par1ItemStack,World world,EntityPlayer player){
  if (world.isRemote) {
    MovingObjectPosition objectMouseOver=player.rayTrace(BAN_JING * 2,1);
    if (objectMouseOver != null && objectMouseOver.typeOfHit == EnumMovingObjectType.TILE) {
      int blockId=world.getBlockId(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ);
      int blockMetadata=world.getBlockMetadata(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ);
      if (this.getLauncherCountDown(par1ItemStack) > 0) {
        return par1ItemStack;
      }
      if (blockId == ICBMExplosion.blockMachine.blockID) {
        return par1ItemStack;
      }
 else {
        int airStrikeFreq=this.getFrequency(par1ItemStack);
        if (airStrikeFreq > 0) {
          if (this.getEnergy(par1ItemStack) >= YONG_DIAN_LIANG) {
            Vector3 position=new Vector3(player.posX,player.posY,player.posZ);
            boolean doAirStrike=false;
            int errorCount=0;
            for (            IBlockFrequency blockFrequency : FrequencyGrid.instance().get(world,position,ItemLaserDesignator.BAN_JING,airStrikeFreq)) {
              if (blockFrequency instanceof TileLauncherPrefab) {
                TileLauncherPrefab missileLauncher=(TileLauncherPrefab)blockFrequency;
                double yHit=objectMouseOver.blockY;
                if (missileLauncher instanceof TileLauncherScreen) {
                  if (missileLauncher.getTarget() != null)                   yHit=missileLauncher.getTarget().y;
 else                   yHit=0;
                }
                missileLauncher.setTarget(new Vector3(objectMouseOver.blockX,yHit,objectMouseOver.blockZ));
                PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_TILE.getPacket(missileLauncher,2,missileLauncher.getTarget().intX(),missileLauncher.getTarget().intY(),missileLauncher.getTarget().intZ()));
                if (missileLauncher.canLaunch()) {
                  doAirStrike=true;
                }
 else {
                  errorCount++;
                  player.addChatMessage(""String_Node_Str"" + errorCount + ""String_Node_Str""+ missileLauncher.getStatus());
                }
              }
            }
            if (doAirStrike && this.getLauncherCountDown(par1ItemStack) >= 0) {
              PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_ITEM.getPacket(player,objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ));
              player.addChatMessage(LanguageUtility.getLocal(""String_Node_Str""));
            }
          }
 else {
            player.addChatMessage(LanguageUtility.getLocal(""String_Node_Str""));
          }
        }
 else {
          player.addChatMessage(LanguageUtility.getLocal(""String_Node_Str""));
        }
      }
    }
  }
  return par1ItemStack;
}","/** 
 * Called whenever this item is equipped and the right mouse button is pressed. Args: itemStack, world, entityPlayer 
 */
@Override public ItemStack onItemRightClick(ItemStack par1ItemStack,World world,EntityPlayer player){
  if (world.isRemote) {
    MovingObjectPosition objectMouseOver=player.rayTrace(BAN_JING * 2,1);
    if (objectMouseOver != null && objectMouseOver.typeOfHit == EnumMovingObjectType.TILE) {
      int blockId=world.getBlockId(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ);
      int blockMetadata=world.getBlockMetadata(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ);
      if (this.getLauncherCountDown(par1ItemStack) > 0) {
        return par1ItemStack;
      }
      if (blockId == ICBMExplosion.blockMachine.blockID) {
        return par1ItemStack;
      }
 else {
        int airStrikeFreq=this.getFrequency(par1ItemStack);
        if (airStrikeFreq > 0) {
          if (this.getEnergy(par1ItemStack) >= energyCost) {
            Vector3 position=new Vector3(player.posX,player.posY,player.posZ);
            boolean doAirStrike=false;
            int errorCount=0;
            for (            IBlockFrequency blockFrequency : FrequencyGrid.instance().get(world,position,ItemLaserDesignator.BAN_JING,airStrikeFreq)) {
              if (blockFrequency instanceof TileLauncherPrefab) {
                TileLauncherPrefab missileLauncher=(TileLauncherPrefab)blockFrequency;
                double yHit=objectMouseOver.blockY;
                if (missileLauncher instanceof TileLauncherScreen) {
                  if (missileLauncher.getTarget() != null)                   yHit=missileLauncher.getTarget().y;
 else                   yHit=0;
                }
                missileLauncher.setTarget(new Vector3(objectMouseOver.blockX,yHit,objectMouseOver.blockZ));
                PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_TILE.getPacket(missileLauncher,2,missileLauncher.getTarget().intX(),missileLauncher.getTarget().intY(),missileLauncher.getTarget().intZ()));
                if (missileLauncher.canLaunch()) {
                  doAirStrike=true;
                }
 else {
                  errorCount++;
                  player.addChatMessage(""String_Node_Str"" + errorCount + ""String_Node_Str""+ missileLauncher.getStatus());
                }
              }
            }
            if (doAirStrike && this.getLauncherCountDown(par1ItemStack) >= 0) {
              PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_ITEM.getPacket(player,objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ));
              player.addChatMessage(LanguageUtility.getLocal(""String_Node_Str""));
            }
          }
 else {
            player.addChatMessage(LanguageUtility.getLocal(""String_Node_Str""));
          }
        }
 else {
          player.addChatMessage(LanguageUtility.getLocal(""String_Node_Str""));
        }
      }
    }
  }
  return par1ItemStack;
}",0.9957891190837124
169725,"@Override public long getEnergyCapacity(ItemStack itemStack){
  return YONG_DIAN_LIANG * 10;
}","@Override public long getEnergyCapacity(ItemStack itemStack){
  return energyCost * 10;
}",0.8633879781420765
169726,"/** 
 * Called whenever this item is equipped and the right mouse button is pressed. Args: itemStack, world, entityPlayer 
 */
@Override public ItemStack onItemRightClick(ItemStack itemStack,World par2World,EntityPlayer entityPlayer){
  if (par2World.isRemote) {
    MovingObjectPosition objectMouseOver=entityPlayer.rayTrace(JU_LI,1);
    if (objectMouseOver != null) {
      TileEntity tileEntity=par2World.getBlockTileEntity(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ);
      if (!(tileEntity instanceof TileLauncherPrefab)) {
        if (this.getEnergy(itemStack) > YONG_DIAN_LIANG) {
          PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_ITEM.getPacket(entityPlayer,objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ));
          this.discharge(itemStack,YONG_DIAN_LIANG,true);
          entityPlayer.addChatMessage(LanguageUtility.getLocal(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"" + objectMouseOver.blockX).replace(""String_Node_Str"",""String_Node_Str"" + objectMouseOver.blockY).replaceAll(""String_Node_Str"",""String_Node_Str"" + objectMouseOver.blockZ).replaceAll(""String_Node_Str"",""String_Node_Str"" + Math.round(new Vector3(entityPlayer).distance(new Vector3(objectMouseOver)))));
        }
 else {
          entityPlayer.addChatMessage(LanguageUtility.getLocal(""String_Node_Str""));
        }
      }
    }
  }
  return itemStack;
}","/** 
 * Called whenever this item is equipped and the right mouse button is pressed. Args: itemStack, world, entityPlayer 
 */
@Override public ItemStack onItemRightClick(ItemStack itemStack,World par2World,EntityPlayer entityPlayer){
  if (par2World.isRemote) {
    MovingObjectPosition objectMouseOver=entityPlayer.rayTrace(raycastDistance,1);
    if (objectMouseOver != null) {
      TileEntity tileEntity=par2World.getBlockTileEntity(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ);
      if (!(tileEntity instanceof TileLauncherPrefab)) {
        if (this.getEnergy(itemStack) > energyCost) {
          PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_ITEM.getPacket(entityPlayer,objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ));
          this.discharge(itemStack,energyCost,true);
          entityPlayer.addChatMessage(LanguageUtility.getLocal(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"" + objectMouseOver.blockX).replace(""String_Node_Str"",""String_Node_Str"" + objectMouseOver.blockY).replaceAll(""String_Node_Str"",""String_Node_Str"" + objectMouseOver.blockZ).replaceAll(""String_Node_Str"",""String_Node_Str"" + Math.round(new Vector3(entityPlayer).distance(new Vector3(objectMouseOver)))));
        }
 else {
          entityPlayer.addChatMessage(LanguageUtility.getLocal(""String_Node_Str""));
        }
      }
    }
  }
  return itemStack;
}",0.9752300070771408
169727,"@Override public long getEnergyCapacity(ItemStack theItem){
  return 80000;
}","@Override public long getEnergyCapacity(ItemStack theItem){
  return 1000000;
}",0.9743589743589745
169728,"@Override public void onReceivePacket(ByteArrayDataInput data,EntityPlayer player,Object... extra){
  ItemStack itemStack=(ItemStack)extra[0];
  this.setLink(itemStack,new Vector3(data.readInt(),data.readInt(),data.readInt()));
  if (ICBMExplosion.itemRadarGun instanceof ItemElectric)   ((ItemElectric)ICBMExplosion.itemRadarGun).discharge(itemStack,ItemRadarGun.YONG_DIAN_LIANG,true);
}","@Override public void onReceivePacket(ByteArrayDataInput data,EntityPlayer player,Object... extra){
  ItemStack itemStack=(ItemStack)extra[0];
  this.setLink(itemStack,new Vector3(data.readInt(),data.readInt(),data.readInt()));
  if (ICBMExplosion.itemRadarGun instanceof ItemElectric)   ((ItemElectric)ICBMExplosion.itemRadarGun).discharge(itemStack,ItemRadarGun.energyCost,true);
}",0.96757457846952
169729,"@Override public long getEnergyCapacity(ItemStack itemStack){
  return 80000;
}","@Override public long getEnergyCapacity(ItemStack itemStack){
  return 1000000;
}",0.975
169730,"@Override public long getEnergyCapacity(ItemStack itemStack){
  return 100000;
}","@Override public long getEnergyCapacity(ItemStack itemStack){
  return 1000000;
}",0.9937888198757764
169731,"private void doScan(){
  this.incomingMissiles.clear();
  this.detectedEntities.clear();
  this.detectedTiles.clear();
  List<Entity> entities=RadarRegistry.getEntitiesWithinRadius(new Vector3(this).toVector2(),MAX_DETECTION_RANGE);
  for (  Entity entity : entities) {
    if (entity instanceof EntityMissile) {
      if (((EntityMissile)entity).feiXingTick > -1) {
        if (!this.detectedEntities.contains(entity)) {
          this.detectedEntities.add(entity);
        }
        if (this.isMissileGoingToHit((EntityMissile)entity)) {
          if (this.incomingMissiles.size() > 0) {
            double dist=new Vector3(this).distance(new Vector3(entity));
            for (int i=0; i < this.incomingMissiles.size(); i++) {
              EntityMissile daoDan=this.incomingMissiles.get(i);
              if (dist < new Vector3(this).distance(new Vector3(daoDan))) {
                this.incomingMissiles.add(i,(EntityMissile)entity);
                break;
              }
 else               if (i == this.incomingMissiles.size() - 1) {
                this.incomingMissiles.add((EntityMissile)entity);
                break;
              }
            }
          }
 else {
            this.incomingMissiles.add((EntityMissile)entity);
          }
        }
      }
    }
 else {
      this.detectedEntities.add(entity);
    }
  }
  List<EntityPlayer> players=this.worldObj.getEntitiesWithinAABB(EntityPlayer.class,AxisAlignedBB.getBoundingBox(this.xCoord - MAX_DETECTION_RANGE,this.yCoord - MAX_DETECTION_RANGE,this.zCoord - MAX_DETECTION_RANGE,this.xCoord + MAX_DETECTION_RANGE,this.yCoord + MAX_DETECTION_RANGE,this.zCoord + MAX_DETECTION_RANGE));
  for (  EntityPlayer player : players) {
    if (player != null) {
      boolean youHuoLuan=false;
      for (int i=0; i < player.inventory.getSizeInventory(); i++) {
        ItemStack itemStack=player.inventory.getStackInSlot(i);
        if (itemStack != null) {
          if (itemStack.getItem() instanceof IItemFrequency) {
            youHuoLuan=true;
            break;
          }
        }
      }
      if (!youHuoLuan) {
        this.detectedEntities.add(player);
      }
    }
  }
  for (  TileEntity jiQi : RadarRegistry.getTileEntitiesInArea(new Vector2(this.xCoord - TileRadarStation.MAX_DETECTION_RANGE,this.zCoord - TileRadarStation.MAX_DETECTION_RANGE),new Vector2(this.xCoord + TileRadarStation.MAX_DETECTION_RANGE,this.zCoord + TileRadarStation.MAX_DETECTION_RANGE))) {
    if (jiQi instanceof TileRadarStation) {
      if (((TileRadarStation)jiQi).getEnergyHandler().getEnergy() > 0) {
        this.detectedTiles.add(jiQi);
      }
    }
 else {
      if (this.detectedTiles instanceof IRadarDetectable) {
        if (((IRadarDetectable)this.detectedTiles).canDetect(this)) {
          this.detectedTiles.add(jiQi);
        }
      }
 else {
        this.detectedTiles.add(jiQi);
      }
    }
  }
}","private void doScan(){
  this.incomingMissiles.clear();
  this.detectedEntities.clear();
  this.detectedTiles.clear();
  List<Entity> entities=RadarRegistry.getEntitiesWithinRadius(new Vector3(this).toVector2(),MAX_DETECTION_RANGE);
  for (  Entity entity : entities) {
    if (entity instanceof EntityMissile) {
      if (((EntityMissile)entity).feiXingTick > -1) {
        if (!this.detectedEntities.contains(entity)) {
          this.detectedEntities.add(entity);
        }
        if (this.isMissileGoingToHit((EntityMissile)entity)) {
          if (this.incomingMissiles.size() > 0) {
            double dist=new Vector3(this).distance(new Vector3(entity));
            for (int i=0; i < this.incomingMissiles.size(); i++) {
              EntityMissile daoDan=this.incomingMissiles.get(i);
              if (dist < new Vector3(this).distance(new Vector3(daoDan))) {
                this.incomingMissiles.add(i,(EntityMissile)entity);
                break;
              }
 else               if (i == this.incomingMissiles.size() - 1) {
                this.incomingMissiles.add((EntityMissile)entity);
                break;
              }
            }
          }
 else {
            this.incomingMissiles.add((EntityMissile)entity);
          }
        }
      }
    }
 else {
      this.detectedEntities.add(entity);
    }
  }
  List<EntityPlayer> players=this.worldObj.getEntitiesWithinAABB(EntityPlayer.class,AxisAlignedBB.getBoundingBox(this.xCoord - MAX_DETECTION_RANGE,this.yCoord - MAX_DETECTION_RANGE,this.zCoord - MAX_DETECTION_RANGE,this.xCoord + MAX_DETECTION_RANGE,this.yCoord + MAX_DETECTION_RANGE,this.zCoord + MAX_DETECTION_RANGE));
  for (  EntityPlayer player : players) {
    if (player != null) {
      boolean hidden=false;
      for (int i=0; i < player.inventory.getSizeInventory(); i++) {
        ItemStack itemStack=player.inventory.getStackInSlot(i);
        if (itemStack != null) {
          if (itemStack.getItem() instanceof ItemSignalDisrupter) {
            ItemSignalDisrupter freqItem=(ItemSignalDisrupter)itemStack.getItem();
            if (freqItem.getEnergy(itemStack) >= freqItem.getEnergyCost())             hidden=true;
            break;
          }
        }
      }
      if (!hidden) {
        this.detectedEntities.add(player);
      }
    }
  }
  for (  TileEntity jiQi : RadarRegistry.getTileEntitiesInArea(new Vector2(this.xCoord - TileRadarStation.MAX_DETECTION_RANGE,this.zCoord - TileRadarStation.MAX_DETECTION_RANGE),new Vector2(this.xCoord + TileRadarStation.MAX_DETECTION_RANGE,this.zCoord + TileRadarStation.MAX_DETECTION_RANGE))) {
    if (jiQi instanceof TileRadarStation) {
      if (((TileRadarStation)jiQi).getEnergyHandler().getEnergy() > 0) {
        this.detectedTiles.add(jiQi);
      }
    }
 else {
      if (this.detectedTiles instanceof IRadarDetectable) {
        if (((IRadarDetectable)this.detectedTiles).canDetect(this)) {
          this.detectedTiles.add(jiQi);
        }
      }
 else {
        this.detectedTiles.add(jiQi);
      }
    }
  }
}",0.95818520399526
169732,"@Override public void onUpdate(ItemStack itemStack,World world,Entity entity,int par4,boolean par5){
  if (!world.isRemote) {
    if (this.getEnergy(itemStack) > 20 && world.getWorldTime() % 20 == 0) {
      this.discharge(itemStack,1 * 20,true);
    }
  }
}","@Override public void onUpdate(ItemStack itemStack,World world,Entity entity,int par4,boolean par5){
  if (!world.isRemote) {
    if (this.getEnergy(itemStack) > energyCost && world.getWorldTime() % 20 == 0) {
      this.discharge(itemStack,1 * energyCost,true);
    }
  }
}",0.8533834586466166
169733,"@Override public boolean onActivated(EntityPlayer player){
  if (player.inventory.getCurrentItem() != null) {
    if (player.inventory.getCurrentItem().getItem() instanceof ItemMissile) {
      if (this.getStackInSlot(0) == null) {
        this.setInventorySlotContents(0,player.inventory.getCurrentItem());
        if (!player.capabilities.isCreativeMode)         player.inventory.setInventorySlotContents(player.inventory.currentItem,null);
        return true;
      }
 else {
        ItemStack player_held=player.inventory.getCurrentItem();
        if (!player.capabilities.isCreativeMode)         player.inventory.setInventorySlotContents(player.inventory.currentItem,this.getStackInSlot(0));
        this.setInventorySlotContents(0,player_held);
        return true;
      }
    }
  }
 else   if (this.getStackInSlot(0) != null) {
    player.inventory.setInventorySlotContents(player.inventory.currentItem,this.getStackInSlot(0));
    this.setInventorySlotContents(0,null);
    return true;
  }
  player.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}","@Override public boolean onActivated(EntityPlayer player){
  if (player.inventory.getCurrentItem() != null) {
    if (player.inventory.getCurrentItem().getItem() instanceof ItemMissile) {
      if (this.getStackInSlot(0) == null) {
        this.setInventorySlotContents(0,player.inventory.getCurrentItem());
        if (!player.capabilities.isCreativeMode)         player.inventory.setInventorySlotContents(player.inventory.currentItem,null);
        return true;
      }
 else {
        ItemStack player_held=player.inventory.getCurrentItem();
        if (!player.capabilities.isCreativeMode)         player.inventory.setInventorySlotContents(player.inventory.currentItem,this.getStackInSlot(0));
        this.setInventorySlotContents(0,player_held);
        return true;
      }
    }
  }
 else   if (this.getStackInSlot(0) != null) {
    player.inventory.setInventorySlotContents(player.inventory.currentItem,this.getStackInSlot(0));
    this.setInventorySlotContents(0,null);
    return true;
  }
  if (!this.worldObj.isRemote)   player.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}",0.9862405681313804
169734,"@Override public boolean onActivated(EntityPlayer entityPlayer){
  entityPlayer.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}","@Override public boolean onActivated(EntityPlayer entityPlayer){
  if (!this.worldObj.isRemote)   entityPlayer.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}",0.921119592875318
169735,"@Override public boolean onActivated(EntityPlayer entityPlayer){
  if (entityPlayer.inventory.getCurrentItem() != null && this.getStackInSlot(0) == null) {
    if (entityPlayer.inventory.getCurrentItem().getItem() instanceof ItemMissile) {
      this.setInventorySlotContents(0,entityPlayer.inventory.getCurrentItem());
      entityPlayer.inventory.setInventorySlotContents(entityPlayer.inventory.currentItem,null);
      this.onInventoryChanged();
      return true;
    }
  }
  entityPlayer.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}","@Override public boolean onActivated(EntityPlayer entityPlayer){
  if (entityPlayer.inventory.getCurrentItem() != null && this.getStackInSlot(0) == null) {
    if (entityPlayer.inventory.getCurrentItem().getItem() instanceof ItemMissile) {
      this.setInventorySlotContents(0,entityPlayer.inventory.getCurrentItem());
      entityPlayer.inventory.setInventorySlotContents(entityPlayer.inventory.currentItem,null);
      this.onInventoryChanged();
      return true;
    }
  }
  if (!this.worldObj.isRemote)   entityPlayer.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}",0.974569319114028
169736,"@Override public boolean onActivated(EntityPlayer entityPlayer){
  this.worldObj.playSoundEffect(this.xCoord,this.yCoord,this.zCoord,Reference.PREFIX + ""String_Node_Str"",1,(float)(this.worldObj.rand.nextFloat() * 0.2 + 0.9F));
  entityPlayer.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}","@Override public boolean onActivated(EntityPlayer entityPlayer){
  this.worldObj.playSoundEffect(this.xCoord,this.yCoord,this.zCoord,Reference.PREFIX + ""String_Node_Str"",1,(float)(this.worldObj.rand.nextFloat() * 0.2 + 0.9F));
  if (!this.worldObj.isRemote)   entityPlayer.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}",0.9567642956764296
169737,"@Override public boolean onActivated(EntityPlayer entityPlayer){
  if (entityPlayer.inventory.getCurrentItem() != null) {
    if (WrenchUtility.isUsableWrench(entityPlayer,entityPlayer.inventory.getCurrentItem(),this.xCoord,this.yCoord,this.zCoord)) {
      if (!this.worldObj.isRemote) {
        this.emitAll=!this.emitAll;
        entityPlayer.addChatMessage(LanguageUtility.getLocal(""String_Node_Str"") + ""String_Node_Str"" + this.emitAll);
      }
      return true;
    }
  }
  entityPlayer.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}","@Override public boolean onActivated(EntityPlayer entityPlayer){
  if (entityPlayer.inventory.getCurrentItem() != null) {
    if (WrenchUtility.isUsableWrench(entityPlayer,entityPlayer.inventory.getCurrentItem(),this.xCoord,this.yCoord,this.zCoord)) {
      if (!this.worldObj.isRemote) {
        this.emitAll=!this.emitAll;
        entityPlayer.addChatMessage(LanguageUtility.getLocal(""String_Node_Str"") + ""String_Node_Str"" + this.emitAll);
      }
      return true;
    }
  }
  if (!this.worldObj.isRemote)   entityPlayer.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}",0.9746109746109746
169738,"@Override public boolean onActivated(EntityPlayer entityPlayer){
  entityPlayer.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}","@Override public boolean onActivated(EntityPlayer entityPlayer){
  if (!this.worldObj.isRemote)   entityPlayer.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}",0.921119592875318
169739,"@Override public boolean onMachineActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int side,float hitX,float hitY,float hitZ){
  if (entityPlayer != null) {
    if (entityPlayer.inventory.getCurrentItem() == null || entityPlayer.inventory.getCurrentItem().itemID != ICBMSentry.blockTurret.blockID || side != 0 && side != 1) {
      entityPlayer.openGui(ICBMSentry.INSTANCE,0,world,x,y,z);
      return true;
    }
  }
  return false;
}","@Override public boolean onMachineActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int side,float hitX,float hitY,float hitZ){
  if (entityPlayer != null) {
    if (entityPlayer.inventory.getCurrentItem() == null || entityPlayer.inventory.getCurrentItem().itemID != ICBMSentry.blockTurret.blockID || side != 0 && side != 1) {
      if (!world.isRemote)       entityPlayer.openGui(ICBMSentry.INSTANCE,0,world,x,y,z);
      return true;
    }
  }
  return false;
}",0.970998925886144
169740,"@Override public boolean onSneakMachineActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int side,float hitX,float hitY,float hitZ){
  if (entityPlayer != null) {
    entityPlayer.openGui(ICBMSentry.INSTANCE,1,world,x,y,z);
    return true;
  }
  return false;
}","@Override public boolean onSneakMachineActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int side,float hitX,float hitY,float hitZ){
  if (entityPlayer != null) {
    if (!world.isRemote)     entityPlayer.openGui(ICBMSentry.INSTANCE,1,world,x,y,z);
    return true;
  }
  return false;
}",0.9569707401032702
169741,"@Override public boolean onMachineActivated(World world,int x,int y,int z,EntityPlayer player,int side,float hitX,float hitY,float hitZ){
  player.openGui(ICBMCore.INSTANCE,0,world,x,y,z);
  return true;
}","@Override public boolean onMachineActivated(World world,int x,int y,int z,EntityPlayer player,int side,float hitX,float hitY,float hitZ){
  if (!world.isRemote)   player.openGui(ICBMCore.INSTANCE,0,world,x,y,z);
  return true;
}",0.9468822170900691
169742,"@Override public ItemStack onItemRightClick(ItemStack par1ItemStack,World par2World,EntityPlayer par3EntityPlayer){
  par3EntityPlayer.openGui(ICBMCore.INSTANCE,0,par2World,(int)par3EntityPlayer.posX,(int)par3EntityPlayer.posY,(int)par3EntityPlayer.posZ);
  return par1ItemStack;
}","@Override public ItemStack onItemRightClick(ItemStack par1ItemStack,World par2World,EntityPlayer par3EntityPlayer){
  if (!par2World.isRemote)   par3EntityPlayer.openGui(ICBMCore.INSTANCE,0,par2World,(int)par3EntityPlayer.posX,(int)par3EntityPlayer.posY,(int)par3EntityPlayer.posZ);
  return par1ItemStack;
}",0.9541595925297114
169743,"@Override protected boolean use(EntityPlayer player,int side,Vector3 hit){
  player.openGui(ICBMCore.INSTANCE,0,world(),x(),y(),z());
  return true;
}","@Override protected boolean use(EntityPlayer player,int side,Vector3 hit){
  if (!this.worldObj.isRemote)   player.openGui(ICBMCore.INSTANCE,0,world(),x(),y(),z());
  return true;
}",0.9063444108761328
169744,"/** 
 * Draw the background layer for the GuiContainer (everything behind the items) 
 */
@Override protected void drawGuiContainerBackgroundLayer(float f,int mouseX,int mouseY){
  FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  this.containerPosX=(this.width - this.xSize) / 2;
  this.containerPosY=(this.height - this.ySize) / 2;
  this.drawTexturedModalRect(containerPosX,containerPosY,0,0,this.xSize,this.ySize);
  this.radarCenter=new Vector2(this.containerPosX + this.xSize / 3 - 10,this.containerPosY + this.ySize / 2 + 4);
  this.radarMapRadius=TileRadarStation.MAX_DETECTION_RANGE / 71f;
  this.info=""String_Node_Str"";
  this.info2=""String_Node_Str"";
  if (this.tileEntity.getEnergyHandler().checkExtract()) {
    int range=4;
    for (    Entity entity : this.tileEntity.detectedEntities) {
      Vector2 position=new Vector2(radarCenter.x + (entity.posX - this.tileEntity.xCoord) / this.radarMapRadius,radarCenter.y - (entity.posZ - this.tileEntity.zCoord) / this.radarMapRadius);
      if (entity instanceof EntityMissile) {
        if (this.tileEntity.isMissileGoingToHit((EntityMissile)entity)) {
          FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_RED_DOT);
        }
 else {
          FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_YELLOW_DOT);
        }
      }
 else {
        FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_YELLOW_DOT);
      }
      this.drawTexturedModalRect(position.intX(),position.intY(),0,0,2,2);
      Vector2 minPosition=position.clone();
      minPosition.add(-range);
      Vector2 maxPosition=position.clone();
      maxPosition.add(range);
      if (new Rectangle(minPosition,maxPosition).isIn(this.mousePosition)) {
        this.info=entity.getEntityName();
        if (entity instanceof EntityPlayer) {
          this.info=""String_Node_Str"" + this.info;
        }
        if (entity instanceof EntityMissile) {
          if (((EntityMissile)entity).targetVector != null) {
            this.info2=""String_Node_Str"" + ((EntityMissile)entity).targetVector.intX() + ""String_Node_Str""+ ((EntityMissile)entity).targetVector.intZ()+ ""String_Node_Str"";
          }
        }
      }
    }
    range=2;
    for (    TileEntity jiQi : this.tileEntity.detectedTiles) {
      Vector2 position=new Vector2(this.radarCenter.x + (jiQi.xCoord - this.tileEntity.xCoord) / this.radarMapRadius,this.radarCenter.y - (jiQi.zCoord - this.tileEntity.zCoord) / this.radarMapRadius);
      FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_WHITE_DOT);
      this.drawTexturedModalRect(position.intX(),position.intY(),0,0,2,2);
      Vector2 minPosition=position.clone();
      minPosition.add(-range);
      Vector2 maxPosition=position.clone();
      maxPosition.add(range);
      if (new Rectangle(minPosition,maxPosition).isIn(this.mousePosition)) {
        if (jiQi.getBlockType() != null) {
          if (jiQi.getBlockType() instanceof BlockICBMMachine) {
            this.info=BlockICBMMachine.getJiQiMing(jiQi);
          }
 else {
            this.info=jiQi.getBlockType().getLocalizedName();
          }
        }
      }
    }
  }
}","/** 
 * Draw the background layer for the GuiContainer (everything behind the items) 
 */
@Override protected void drawGuiContainerBackgroundLayer(float f,int mouseX,int mouseY){
  FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  this.containerPosX=(this.width - this.xSize) / 2;
  this.containerPosY=(this.height - this.ySize) / 2;
  this.drawTexturedModalRect(containerPosX,containerPosY,0,0,this.xSize,this.ySize);
  this.radarCenter=new Vector2(this.containerPosX + this.xSize / 3 - 10,this.containerPosY + this.ySize / 2 + 4);
  this.radarMapRadius=TileRadarStation.MAX_DETECTION_RANGE / 71f;
  this.info=""String_Node_Str"";
  this.info2=""String_Node_Str"";
  if (this.tileEntity.getEnergyHandler().checkExtract()) {
    int range=4;
    for (    GUIEntityBase entity : this.tileEntity.entityList) {
      GUIEntityMissile missile=null;
      Vector2 position=new Vector2(radarCenter.x + (entity.pos.x - this.tileEntity.xCoord) / this.radarMapRadius,radarCenter.y - (entity.pos.y - this.tileEntity.zCoord) / this.radarMapRadius);
      if (entity.type == this.tileEntity.EntityTypeMissile) {
        missile=(GUIEntityMissile)entity;
        if (missile.willHit) {
          FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_RED_DOT);
        }
 else {
          FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_YELLOW_DOT);
        }
      }
 else {
        FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_YELLOW_DOT);
      }
      this.drawTexturedModalRect(position.intX(),position.intY(),0,0,2,2);
      Vector2 minPosition=position.clone();
      minPosition.add(-range);
      Vector2 maxPosition=position.clone();
      maxPosition.add(range);
      if (new Rectangle(minPosition,maxPosition).isIn(this.mousePosition)) {
        this.info=entity.name;
        if (entity.type == this.tileEntity.EntityTypePlayer) {
          this.info=""String_Node_Str"" + this.info;
        }
        if (entity.type == this.tileEntity.EntityTypeMissile) {
          if (missile.gotTarget) {
            this.info2=""String_Node_Str"" + missile.hitX + ""String_Node_Str""+ missile.hitZ+ ""String_Node_Str"";
          }
        }
      }
    }
    range=2;
    for (    GUITile tile : this.tileEntity.tileList) {
      Vector2 position=new Vector2(this.radarCenter.x + (tile.posX - this.tileEntity.xCoord) / this.radarMapRadius,this.radarCenter.y - (tile.posZ - this.tileEntity.zCoord) / this.radarMapRadius);
      FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_WHITE_DOT);
      this.drawTexturedModalRect(position.intX(),position.intY(),0,0,2,2);
      Vector2 minPosition=position.clone();
      minPosition.add(-range);
      Vector2 maxPosition=position.clone();
      maxPosition.add(range);
      if (new Rectangle(minPosition,maxPosition).isIn(this.mousePosition)) {
        this.info=tile.name;
      }
    }
  }
}",0.835451182242239
169745,"private void doScan(){
  this.incomingMissiles.clear();
  this.detectedEntities.clear();
  this.detectedTiles.clear();
  List<Entity> entities=RadarRegistry.getEntitiesWithinRadius(new Vector3(this).toVector2(),MAX_DETECTION_RANGE);
  for (  Entity entity : entities) {
    if (entity instanceof EntityMissile) {
      if (((EntityMissile)entity).feiXingTick > -1) {
        if (!this.detectedEntities.contains(entity)) {
          this.detectedEntities.add(entity);
        }
        if (this.isMissileGoingToHit((EntityMissile)entity)) {
          if (this.incomingMissiles.size() > 0) {
            double dist=new Vector3(this).distance(new Vector3(entity));
            for (int i=0; i < this.incomingMissiles.size(); i++) {
              EntityMissile daoDan=this.incomingMissiles.get(i);
              if (dist < new Vector3(this).distance(new Vector3(daoDan))) {
                this.incomingMissiles.add(i,(EntityMissile)entity);
                break;
              }
 else               if (i == this.incomingMissiles.size() - 1) {
                this.incomingMissiles.add((EntityMissile)entity);
                break;
              }
            }
          }
 else {
            this.incomingMissiles.add((EntityMissile)entity);
          }
        }
      }
    }
 else {
      this.detectedEntities.add(entity);
    }
  }
  List<EntityPlayer> players=this.worldObj.getEntitiesWithinAABB(EntityPlayer.class,AxisAlignedBB.getBoundingBox(this.xCoord - MAX_DETECTION_RANGE,this.yCoord - MAX_DETECTION_RANGE,this.zCoord - MAX_DETECTION_RANGE,this.xCoord + MAX_DETECTION_RANGE,this.yCoord + MAX_DETECTION_RANGE,this.zCoord + MAX_DETECTION_RANGE));
  for (  EntityPlayer player : players) {
    if (player != null) {
      boolean hidden=false;
      for (int i=0; i < player.inventory.getSizeInventory(); i++) {
        ItemStack itemStack=player.inventory.getStackInSlot(i);
        if (itemStack != null) {
          if (itemStack.getItem() instanceof ItemSignalDisrupter) {
            ItemSignalDisrupter freqItem=(ItemSignalDisrupter)itemStack.getItem();
            if (freqItem.getEnergy(itemStack) >= freqItem.getEnergyCost())             hidden=true;
            break;
          }
        }
      }
      if (!hidden) {
        this.detectedEntities.add(player);
      }
    }
  }
  for (  TileEntity jiQi : RadarRegistry.getTileEntitiesInArea(new Vector2(this.xCoord - TileRadarStation.MAX_DETECTION_RANGE,this.zCoord - TileRadarStation.MAX_DETECTION_RANGE),new Vector2(this.xCoord + TileRadarStation.MAX_DETECTION_RANGE,this.zCoord + TileRadarStation.MAX_DETECTION_RANGE))) {
    if (jiQi instanceof TileRadarStation) {
      if (((TileRadarStation)jiQi).getEnergyHandler().getEnergy() > 0) {
        this.detectedTiles.add(jiQi);
      }
    }
 else {
      if (this.detectedTiles instanceof IRadarDetectable) {
        if (((IRadarDetectable)this.detectedTiles).canDetect(this)) {
          this.detectedTiles.add(jiQi);
        }
      }
 else {
        this.detectedTiles.add(jiQi);
      }
    }
  }
}","private void doScan(){
  this.incomingMissiles.clear();
  this.detectedEntities.clear();
  this.detectedTiles.clear();
  List<Entity> entities=RadarRegistry.getEntitiesWithinRadius(new Vector3(this).toVector2(),MAX_DETECTION_RANGE);
  for (  Entity entity : entities) {
    if (entity instanceof EntityMissile) {
      if (((EntityMissile)entity).feiXingTick > -1) {
        if (!this.detectedEntities.contains(entity)) {
          this.detectedEntities.add(entity);
        }
        if (this.isMissileGoingToHit((EntityMissile)entity)) {
          if (this.incomingMissiles.size() > 0) {
            double dist=new Vector3(this).distance(new Vector3(entity));
            for (int i=0; i < this.incomingMissiles.size(); i++) {
              EntityMissile daoDan=this.incomingMissiles.get(i);
              if (dist < new Vector3(this).distance(new Vector3(daoDan))) {
                this.incomingMissiles.add(i,(EntityMissile)entity);
                break;
              }
 else               if (i == this.incomingMissiles.size() - 1) {
                this.incomingMissiles.add((EntityMissile)entity);
                break;
              }
            }
          }
 else {
            this.incomingMissiles.add((EntityMissile)entity);
          }
        }
      }
    }
 else {
      this.detectedEntities.add(entity);
    }
  }
  List<EntityPlayer> players=this.worldObj.getEntitiesWithinAABB(EntityPlayer.class,AxisAlignedBB.getBoundingBox(this.xCoord - MAX_DETECTION_RANGE,this.yCoord - MAX_DETECTION_RANGE,this.zCoord - MAX_DETECTION_RANGE,this.xCoord + MAX_DETECTION_RANGE,this.yCoord + MAX_DETECTION_RANGE,this.zCoord + MAX_DETECTION_RANGE));
  for (  EntityPlayer player : players) {
    if (player != null) {
      boolean hidden=false;
      for (int i=0; i < player.inventory.getSizeInventory(); i++) {
        ItemStack itemStack=player.inventory.getStackInSlot(i);
        if (itemStack != null) {
          if (itemStack.getItem() instanceof ItemSignalDisrupter) {
            ItemSignalDisrupter freqItem=(ItemSignalDisrupter)itemStack.getItem();
            if (freqItem.getEnergy(itemStack) >= freqItem.getEnergyCost())             hidden=true;
            break;
          }
        }
      }
      if (!hidden) {
        this.detectedEntities.add(player);
      }
    }
  }
  for (  TileEntity tile : RadarRegistry.getTileEntitiesInArea(new Vector2(this.xCoord - TileRadarStation.MAX_DETECTION_RANGE,this.zCoord - TileRadarStation.MAX_DETECTION_RANGE),new Vector2(this.xCoord + TileRadarStation.MAX_DETECTION_RANGE,this.zCoord + TileRadarStation.MAX_DETECTION_RANGE))) {
    if (tile instanceof TileRadarStation) {
      if (((TileRadarStation)tile).isPowered) {
        this.detectedTiles.add(tile);
      }
    }
 else {
      if (tile instanceof IRadarDetectable) {
        if (((IRadarDetectable)tile).canDetect(this)) {
          this.detectedTiles.add(tile);
        }
      }
 else {
        this.detectedTiles.add(tile);
      }
    }
  }
}",0.97751873438801
169746,"public static boolean canBePlacedAt(World world,int x,int y,int z,int metadata,int direction){
switch (metadata) {
default :
{
      return world.getBlockMaterial(x,y - 1,z).isSolid();
    }
case 0:
{
    if (direction == 0 || direction == 2) {
      return world.getBlockId(x,y,z) == 0 && world.getBlockId(x + 1,y,z) == 0 && world.getBlockId(x + 1,y + 1,z) == 0 && world.getBlockId(x + 1,y + 2,z) == 0 && world.getBlockId(x - 1,y,z) == 0 && world.getBlockId(x - 1,y + 1,z) == 0 && world.getBlockId(x - 1,y + 2,z) == 0;
    }
 else     if (direction == 1 || direction == 3) {
      return world.getBlockId(x,y,z) == 0 && world.getBlockId(x,y,z + 1) == 0 && world.getBlockId(x,y + 1,z + 1) == 0 && world.getBlockId(x,y + 2,z + 1) == 0 && world.getBlockId(x,y,z - 1) == 0 && world.getBlockId(x,y + 1,z - 1) == 0 && world.getBlockId(x,y + 2,z - 1) == 0;
    }
  }
case 2:
{
  return world.getBlockMaterial(x,y - 1,z).isSolid() && world.getBlockId(x,y,z) == 0 && world.getBlockId(x,y + 1,z) == 0 && world.getBlockId(x,y + 2,z) == 0;
}
case 4:
{
return world.getBlockId(x,y,z) == 0 && world.getBlockId(x,y + 1,z) == 0;
}
}
}","/** 
 * Checks if the machine can be placed at the location 
 */
public static boolean canBePlacedAt(World world,int x,int y,int z,int m,int side){
  ForgeDirection d=ForgeDirection.getOrientation(side);
  if (m == 0) {
    for (int yp=0; yp < 2; yp++) {
      if (!world.isAirBlock(x + d.offsetX,y + yp,z + d.offsetZ))       return false;
      if (!world.isAirBlock(x - d.offsetX,y + yp,z - d.offsetZ))       return false;
    }
    return world.isAirBlock(x,y,z);
  }
 else   if (m == 2) {
    return world.getBlockMaterial(x,y - 1,z).isSolid() && world.isAirBlock(x,y,z) && world.isAirBlock(x,y + 1,z)&& world.isAirBlock(x,y + 2,z);
  }
 else   if (m == 4) {
    return world.isAirBlock(x,y,z) && world.isAirBlock(x,y + 1,z);
  }
  return world.getBlockMaterial(x,y - 1,z).isSolid();
}",0.1488469601677149
169747,"@Override public void getSubBlocks(int id,CreativeTabs creativeTab,List list){
  for (  Class<? extends Turret> sentry : TurretRegistry.getSentryMap().values())   list.add(TurretRegistry.getItemStack(sentry));
}","@SuppressWarnings(""String_Node_Str"") @Override public void getSubBlocks(int id,CreativeTabs creativeTab,List list){
  for (  Class<? extends Turret> sentry : TurretRegistry.getSentryMap().values())   list.add(TurretRegistry.getItemStack(sentry));
}",0.9193899782135077
169748,"@Override public ArrayList<ItemStack> getBlockDropped(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  ret.add(ItemBlockSaved.getItemStackWithNBT(this,world,x,y,z));
  return ret;
}","@Override public ArrayList<ItemStack> getBlockDropped(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  ItemStack turret=getPickBlock(null,world,x,y,z);
  if (turret.getTagCompound().hasKey(ITurret.SENTRY_TYPE_SAVE_ID)) {
    ret.add(turret);
  }
  return ret;
}",0.6923076923076923
169749,"@Override public ItemStack getPickBlock(MovingObjectPosition target,World world,int x,int y,int z){
  return ItemBlockSaved.getItemStackWithNBT(this,world,x,y,z);
}","@Override public ItemStack getPickBlock(MovingObjectPosition target,World world,int x,int y,int z){
  TileEntity tile=world.getBlockTileEntity(x,y,z);
  if (isHarvesting) {
    tile=harvestedTile;
  }
  if (tile == null && target != null && target.typeOfHit == EnumMovingObjectType.TILE) {
    tile=world.getBlockTileEntity(target.blockX,target.blockY,target.blockZ);
  }
  if (tile instanceof TileTurret && ((TileTurret)tile).getTurret() != null) {
    return TurretRegistry.getItemStack(((TileTurret)tile).getTurret().getClass());
  }
  return ItemBlockSaved.getItemStackWithNBT(this,world,x,y,z);
}",0.4287581699346405
169750,"@SuppressWarnings(""String_Node_Str"") @Override public void getSubBlocks(int id,CreativeTabs creativeTab,List list){
  for (  Class<? extends Turret> sentry : TurretRegistry.getSentryMap().values())   list.add(TurretRegistry.getItemStack(sentry));
}","@SuppressWarnings(""String_Node_Str"") @Override public void getSubBlocks(int id,CreativeTabs creativeTab,List list){
  for (  Class<? extends ITurret> sentry : TurretRegistry.getSentryMap().values())   list.add(TurretRegistry.getItemStack(sentry));
}",0.9979879275653925
169751,"@Override public ArrayList<ItemStack> getBlockDropped(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  ItemStack turret=getPickBlock(null,world,x,y,z);
  if (turret.getTagCompound().hasKey(ITurret.SENTRY_TYPE_SAVE_ID)) {
    ret.add(turret);
  }
  return ret;
}","@Override public ArrayList<ItemStack> getBlockDropped(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  ItemStack turret=getItemStack(world,x,y,z);
  if (isHarvesting && turret == null) {
    turret=getItemStack(harvestedTile);
    harvestedTile=null;
    isHarvesting=false;
  }
  if (turret != null)   ret.add(turret);
  harvestedTile=null;
  return ret;
}",0.5721925133689839
169752,"@Override public ItemStack getPickBlock(MovingObjectPosition target,World world,int x,int y,int z){
  TileEntity tile=world.getBlockTileEntity(x,y,z);
  if (isHarvesting) {
    tile=harvestedTile;
  }
  if (tile == null && target != null && target.typeOfHit == EnumMovingObjectType.TILE) {
    tile=world.getBlockTileEntity(target.blockX,target.blockY,target.blockZ);
  }
  if (tile instanceof TileTurret && ((TileTurret)tile).getTurret() != null) {
    return TurretRegistry.getItemStack(((TileTurret)tile).getTurret().getClass());
  }
  return ItemBlockSaved.getItemStackWithNBT(this,world,x,y,z);
}","@Override public ItemStack getPickBlock(MovingObjectPosition target,World world,int x,int y,int z){
  return getItemStack(world,x,y,z);
}",0.3712737127371274
169753,"@Override public void onPowerOn(){
  if (this.getEnergyHandler().isFull()) {
    if (inCurrentCooldown()) {
switch (this.empMode) {
default :
        new BlastEMP(this.worldObj,null,this.xCoord,this.yCoord,this.zCoord,this.empRadius).setEffectBlocks().setEffectEntities().explode();
      break;
case 1:
    new BlastEMP(this.worldObj,null,this.xCoord,this.yCoord,this.zCoord,this.empRadius).setEffectEntities().explode();
  break;
case 2:
new BlastEMP(this.worldObj,null,this.xCoord,this.yCoord,this.zCoord,this.empRadius).setEffectBlocks().explode();
break;
}
this.cooldownTicks=120;
}
}
}","@Override public void onPowerOn(){
  if (this.getEnergyHandler().isFull()) {
    if (!inCurrentCooldown()) {
switch (this.empMode) {
default :
        new BlastEMP(this.worldObj,null,this.xCoord,this.yCoord,this.zCoord,this.empRadius).setEffectBlocks().setEffectEntities().explode();
      break;
case 1:
    new BlastEMP(this.worldObj,null,this.xCoord,this.yCoord,this.zCoord,this.empRadius).setEffectEntities().explode();
  break;
case 2:
new BlastEMP(this.worldObj,null,this.xCoord,this.yCoord,this.zCoord,this.empRadius).setEffectBlocks().explode();
break;
}
this.cooldownTicks=120;
}
}
}",0.9991546914623838
169754,"public void updateLoadChunk(int newChunkX,int newChunkZ){
  if (!this.worldObj.isRemote && Settings.LOAD_CHUNKS && this.chunkTicket != null) {
    for (    ChunkCoordIntPair chunk : loadedChunks)     ForgeChunkManager.unforceChunk(chunkTicket,chunk);
    loadedChunks.clear();
    loadedChunks.add(new ChunkCoordIntPair(newChunkX,newChunkZ));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX + 1,newChunkZ + 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX - 1,newChunkZ - 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX + 1,newChunkZ - 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX - 1,newChunkZ + 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX + 1,newChunkZ));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX,newChunkZ + 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX - 1,newChunkZ));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX,newChunkZ) - 1);
    for (    ChunkCoordIntPair chunk : loadedChunks)     ForgeChunkManager.forceChunk(chunkTicket,chunk);
  }
}","public void updateLoadChunk(int newChunkX,int newChunkZ){
  if (!this.worldObj.isRemote && Settings.LOAD_CHUNKS && this.chunkTicket != null) {
    for (    ChunkCoordIntPair chunk : loadedChunks)     ForgeChunkManager.unforceChunk(chunkTicket,chunk);
    loadedChunks.clear();
    loadedChunks.add(new ChunkCoordIntPair(newChunkX,newChunkZ));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX + 1,newChunkZ + 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX - 1,newChunkZ - 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX + 1,newChunkZ - 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX - 1,newChunkZ + 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX + 1,newChunkZ));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX,newChunkZ + 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX - 1,newChunkZ));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX,newChunkZ - 1));
    for (    ChunkCoordIntPair chunk : loadedChunks)     ForgeChunkManager.forceChunk(chunkTicket,chunk);
  }
}",0.9990291262135922
169755,"public AmmoHandler(ItemStack stack,int capacity){
  this.weaponStack=stack;
  if (weaponStack.stackTagCompound == null) {
    weaponStack.stackTagCompound=new NBTTagCompound();
  }
  weaponStack.stackTagCompound.setInteger(""String_Node_Str"",capacity);
  weaponStack.stackTagCompound.setInteger(""String_Node_Str"",0);
}","public AmmoHandler(ItemStack stack,int capacity){
  this.weaponStack=stack;
}",0.3908629441624365
169756,"@Override public ItemStack onItemRightClick(ItemStack itemstack,World world,EntityPlayer player){
  if (player.isSneaking()) {
    onSneakClick(itemstack,world,player);
    return itemstack;
  }
  onPreWeaponFired(itemstack,world,player);
  if (isLoaded()) {
    onWeaponFired(itemstack,world,player);
    onPostWeaponFired(itemstack,world,player);
  }
  return itemstack;
}","@Override public ItemStack onItemRightClick(ItemStack itemstack,World world,EntityPlayer player){
  if (player.isSneaking()) {
    onSneakClick(itemstack,world,player);
    return itemstack;
  }
  onPreWeaponFired(itemstack,world,player);
  if (!isEmpty(itemstack)) {
    onWeaponFired(itemstack,world,player);
    onPostWeaponFired(itemstack,world,player);
  }
  return itemstack;
}",0.964332892998679
169757,"@Override public void onPostWeaponFired(ItemStack stack,World world,EntityPlayer shooter){
  if (!world.isRemote) {
    if (ammoHandler != null && !ammoHandler.isEmpty()) {
      ammoHandler.consume(1);
      stack.setItemDamage(stack.getItemDamage() - 1);
    }
  }
}","@Override public void onPostWeaponFired(ItemStack stack,World world,EntityPlayer shooter){
  if (!world.isRemote) {
    if (!isEmpty(stack)) {
      consume(stack,1);
      shooter.getHeldItem().setItemDamage(shooter.getHeldItem().getItemDamage() - 1);
    }
  }
}",0.5300751879699248
169758,"@Override public void onPreWeaponFired(ItemStack stack,World world,EntityPlayer shooter){
}","@Override public void onPreWeaponFired(ItemStack stack,World world,EntityPlayer shooter){
  System.out.println(getCurrentAmmo(stack));
}",0.801762114537445
169759,"@Override public void addInformation(ItemStack itemStack,EntityPlayer entityPlayer,List list,boolean par4){
  list.add(""String_Node_Str"" + ammoHandler.getCurrentAmmo() + ""String_Node_Str""+ capacity);
  super.addInformation(itemStack,entityPlayer,list,par4);
}","@Override public void addInformation(ItemStack itemStack,EntityPlayer entityPlayer,List list,boolean par4){
  list.add(""String_Node_Str"" + getCurrentAmmo(itemStack) + ""String_Node_Str""+ capacity);
  super.addInformation(itemStack,entityPlayer,list,par4);
}",0.9592233009708738
169760,"@Override public void onSneakClick(ItemStack stack,World world,EntityPlayer shooter){
  if (ammoHandler == null) {
    if (searchInventoryForAmmo(shooter,false) != null) {
      if (!world.isRemote)       ammoHandler=new AmmoHandler(stack,capacity);
      searchInventoryForAmmo(shooter,true);
    }
 else {
      return;
    }
  }
  if (ammoHandler.isEmpty()) {
    if (searchInventoryForAmmo(shooter,false) != null) {
      searchInventoryForAmmo(shooter,true);
      if (!world.isRemote)       ammoHandler.reload();
    }
  }
}","@Override public void onSneakClick(ItemStack stack,World world,EntityPlayer shooter){
  if (ammoHandler == null) {
    if (searchInventoryForAmmo(shooter,false) != null) {
      if (!world.isRemote)       ammoHandler=new AmmoHandler(shooter.getHeldItem(),capacity);
      searchInventoryForAmmo(shooter,true);
    }
 else {
      return;
    }
  }
  if (isEmpty(stack)) {
    if (searchInventoryForAmmo(shooter,false) != null) {
      searchInventoryForAmmo(shooter,true);
      if (!world.isRemote)       reload(stack);
    }
  }
}",0.736346516007533
169761,"public void reload(ItemStack weaponStack){
  if (weaponStack.stackTagCompound == null) {
    weaponStack.stackTagCompound=new NBTTagCompound();
  }
  weaponStack.stackTagCompound.setInteger(""String_Node_Str"",weaponStack.stackTagCompound.getInteger(""String_Node_Str""));
}","public void reload(ItemStack weaponStack){
  weaponStack.stackTagCompound.setInteger(""String_Node_Str"",capacity);
}",0.5818181818181818
169762,"@Override public ItemStack onItemRightClick(ItemStack itemstack,World world,EntityPlayer player){
  if (itemstack.stackTagCompound == null) {
    itemstack.stackTagCompound=new NBTTagCompound();
  }
  itemstack.stackTagCompound.setInteger(""String_Node_Str"",capacity);
  itemstack.stackTagCompound.setInteger(""String_Node_Str"",0);
  return super.onItemRightClick(itemstack,world,player);
}","@Override public ItemStack onItemRightClick(ItemStack itemstack,World world,EntityPlayer player){
  if (itemstack.stackTagCompound == null) {
    itemstack.stackTagCompound=new NBTTagCompound();
    itemstack.stackTagCompound.setInteger(""String_Node_Str"",capacity);
    itemstack.stackTagCompound.setInteger(""String_Node_Str"",0);
  }
  return super.onItemRightClick(itemstack,world,player);
}",0.9897435897435898
169763,"public void consume(ItemStack weaponStack,int amt){
  if (weaponStack.stackTagCompound == null) {
    weaponStack.stackTagCompound=new NBTTagCompound();
  }
  if (amt < 0) {
    return;
  }
  if (amt > weaponStack.stackTagCompound.getInteger(""String_Node_Str"")) {
    weaponStack.stackTagCompound.setInteger(""String_Node_Str"",0);
    return;
  }
  weaponStack.stackTagCompound.setInteger(""String_Node_Str"",weaponStack.stackTagCompound.getInteger(""String_Node_Str"") - amt);
}","public void consume(ItemStack weaponStack,int amt){
  if (amt < 0) {
    return;
  }
  if (amt > weaponStack.stackTagCompound.getInteger(""String_Node_Str"")) {
    weaponStack.stackTagCompound.setInteger(""String_Node_Str"",0);
    return;
  }
  weaponStack.stackTagCompound.setInteger(""String_Node_Str"",weaponStack.stackTagCompound.getInteger(""String_Node_Str"") - amt);
}",0.8754448398576512
169764,"@Override public void onSneakClick(ItemStack stack,World world,EntityPlayer shooter){
  if (isEmpty(stack)) {
    if (searchInventoryForAmmo(shooter,false) != null) {
      searchInventoryForAmmo(shooter,true);
      if (!world.isRemote)       reload(stack);
    }
  }
}","@Override public void onSneakClick(ItemStack stack,World world,EntityPlayer shooter){
  if (isEmpty(stack)) {
    if (searchInventoryForAmmo(shooter,false) != null) {
      searchInventoryForAmmo(shooter,true);
      if (!world.isRemote) {
        System.out.println(searchInventoryForAmmo(shooter,false));
        reload(stack);
      }
    }
  }
}",0.81421647819063
169765,"@Override public void updateEntity(){
  super.updateEntity();
  if (pairedGate == null) {
    Vector3 thisVector=new Vector3(this);
    Vector3 foundVector=null;
    for (int i=0; i < 4; i+=90) {
      MovingObjectPosition mop=thisVector.rayTraceBlocks(worldObj,i,0,true,10);
switch (i) {
case 90:
        foundVector=new Vector3(mop).translate(1,0,0);
      break;
case 180:
    foundVector=new Vector3(mop).translate(0,0,1);
  break;
case 270:
foundVector=new Vector3(mop).translate(-1,0,0);
break;
case 360:
foundVector=new Vector3(mop).translate(0,0,-1);
break;
}
TileEntity tile=worldObj.getBlockTileEntity(foundVector.intX(),foundVector.intY(),foundVector.intZ());
if (tile != null) {
this.pairedGate=(TileLaserGate)tile;
this.pairedGate.pairedGate=this;
}
}
}
}","@Override public void updateEntity(){
  super.updateEntity();
  if (!worldObj.isRemote) {
    if (pairedGate == null) {
      Vector3 thisVector=new Vector3(this);
      Vector3 foundVector=null;
      for (int i=0; i < 4; i=i + 90) {
        MovingObjectPosition mop=thisVector.rayTraceBlocks(worldObj,i,0,false,10);
        foundVector=new Vector3(mop);
        TileEntity tile=worldObj.getBlockTileEntity(foundVector.intX(),foundVector.intY(),foundVector.intZ());
        if (tile != null) {
          this.pairedGate=(TileLaserGate)tile;
          this.pairedGate.pairedGate=this;
        }
      }
    }
  }
}",0.703328509406657
169766,"@Override public void onPowerOn(){
  System.out.println(""String_Node_Str"" + pairedGate + ""String_Node_Str""+ pairedGate.xCoord+ ""String_Node_Str""+ pairedGate.yCoord+ ""String_Node_Str""+ pairedGate.zCoord+ ""String_Node_Str"");
}","@Override public void onPowerOn(){
  if (!worldObj.isRemote) {
    if (pairedGate == null) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + pairedGate + ""String_Node_Str""+ pairedGate.xCoord+ ""String_Node_Str""+ pairedGate.yCoord+ ""String_Node_Str""+ pairedGate.zCoord+ ""String_Node_Str"");
    }
  }
}",0.7479131886477463
169767,"@Override public ItemStack onItemRightClick(ItemStack itemstack,World world,EntityPlayer player){
  if (weaponSystem == null) {
    weaponSystem=new WeaponConventional(player,5F);
  }
  MovingObjectPosition mop=player.rayTrace(100,1f);
  if (mop != null) {
    System.out.println(mop.blockX + ""String_Node_Str"" + mop.blockY+ ""String_Node_Str""+ mop.blockZ);
    if (mop.typeOfHit == EnumMovingObjectType.ENTITY) {
      weaponSystem.fire(Vector3.fromCenter(mop.entityHit));
    }
 else {
      weaponSystem.fire(new Vector3(mop.hitVec));
    }
  }
  return itemstack;
}","@Override public ItemStack onItemRightClick(ItemStack itemstack,World world,EntityPlayer player){
  if (weaponSystem == null) {
    weaponSystem=new WeaponConventional(player,5F);
  }
  MovingObjectPosition mop=player.rayTrace(100,1f);
  if (mop != null) {
    if (world.isRemote)     System.out.println(mop.blockX + ""String_Node_Str"" + mop.blockY+ ""String_Node_Str""+ mop.blockZ);
    if (mop.typeOfHit == EnumMovingObjectType.ENTITY) {
      weaponSystem.fire(Vector3.fromCenter(mop.entityHit));
    }
 else {
      weaponSystem.fire(new Vector3(mop.hitVec));
    }
  }
  return itemstack;
}",0.9793103448275862
169768,"@Override public void updateEntity(){
  super.updateEntity();
  if (!worldObj.isRemote) {
    if (ticks % 10 == 0) {
      if (pairedGate == null)       findLaserPair();
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (!worldObj.isRemote) {
    if (ticks % 10 == 0) {
      if (pairedGate == null)       findLaserPair();
    }
  }
  if (renderLaser) {
    ICBMSentry.proxy.renderBeam(worldObj,new Vector3(this),new Vector3(getLaserPair()),Color.RED.getRed(),Color.RED.getGreen(),Color.RED.getBlue(),1);
  }
}",0.6728624535315985
169769,"@Override public void onPowerOn(){
  if (!worldObj.isRemote) {
  }
}","@Override public void onPowerOn(){
  if (pairedGate != null) {
    this.renderLaser=true;
    this.getLaserPair().renderLaser=true;
  }
}",0.526829268292683
169770,"@Override public void invalidate(){
  if (this.pairedGate != null)   this.pairedGate.setLaserPair(null);
  setLaserPair(null);
  super.invalidate();
}","@Override public void invalidate(){
  if (this.pairedGate != null)   this.pairedGate.setLaserPair(null);
  setLaserPair(null);
  this.renderLaser=false;
  super.invalidate();
}",0.9202453987730062
169771,"@Override public void onPowerOff(){
}","@Override public void onPowerOff(){
  if (pairedGate != null) {
    this.renderLaser=false;
    this.getLaserPair().renderLaser=false;
  }
}",0.4180790960451977
169772,"@Override public void onPostWeaponFired(ItemStack stack,World world,EntityPlayer shooter){
  if (ammoHandler != null && !ammoHandler.isEmpty()) {
    ammoHandler.consume(1);
    stack.setItemDamage(stack.getItemDamage() - 1);
  }
}","@Override public void onPostWeaponFired(ItemStack stack,World world,EntityPlayer shooter){
  if (!world.isRemote) {
    if (ammoHandler != null && !ammoHandler.isEmpty()) {
      ammoHandler.consume(1);
      stack.setItemDamage(stack.getItemDamage() - 1);
    }
  }
}",0.9258517034068136
169773,"@Override public void onPreWeaponFired(ItemStack stack,World world,EntityPlayer shooter){
  if (ammoHandler == null) {
    if (searchInventoryForAmmo(shooter,false) != null) {
      ammoHandler=new AmmoHandler(stack,capacity);
      searchInventoryForAmmo(shooter,true);
    }
  }
}","@Override public void onPreWeaponFired(ItemStack stack,World world,EntityPlayer shooter){
  if (ammoHandler == null) {
    if (searchInventoryForAmmo(shooter,false) != null) {
      if (!world.isRemote)       ammoHandler=new AmmoHandler(stack,capacity);
    }
  }
}",0.870201096892139
169774,"@Override public void onSneakClick(ItemStack stack,World world,EntityPlayer shooter){
  if (ammoHandler == null) {
    if (searchInventoryForAmmo(shooter,false) != null) {
      ammoHandler=new AmmoHandler(stack,capacity);
      searchInventoryForAmmo(shooter,true);
    }
 else {
      return;
    }
  }
  if (ammoHandler.isEmpty()) {
    if (searchInventoryForAmmo(shooter,false) != null) {
      searchInventoryForAmmo(shooter,true);
      ammoHandler.reload();
    }
  }
}","@Override public void onSneakClick(ItemStack stack,World world,EntityPlayer shooter){
  if (ammoHandler == null) {
    if (searchInventoryForAmmo(shooter,false) != null) {
      if (!world.isRemote)       ammoHandler=new AmmoHandler(stack,capacity);
      searchInventoryForAmmo(shooter,true);
    }
 else {
      return;
    }
  }
  if (ammoHandler.isEmpty()) {
    if (searchInventoryForAmmo(shooter,false) != null) {
      searchInventoryForAmmo(shooter,true);
      if (!world.isRemote)       ammoHandler.reload();
    }
  }
}",0.9463220675944334
169775,"@Override public ItemStack onItemRightClick(ItemStack itemstack,World world,EntityPlayer player){
  if (weaponSystem == null) {
    weaponSystem=new WeaponConventional(player,5F);
  }
  MovingObjectPosition mop=player.rayTrace(100,1f);
  if (mop != null) {
    if (world.isRemote)     System.out.println(mop.blockX + ""String_Node_Str"" + mop.blockY+ ""String_Node_Str""+ mop.blockZ);
    if (mop.typeOfHit == EnumMovingObjectType.ENTITY) {
      weaponSystem.fire(Vector3.fromCenter(mop.entityHit));
    }
 else {
      weaponSystem.fire(new Vector3(mop.hitVec));
    }
  }
  return itemstack;
}","@Override public ItemStack onItemRightClick(ItemStack itemstack,World world,EntityPlayer player){
  if (weaponSystem == null) {
    weaponSystem=new WeaponConventional(player,10F);
    weaponSystem.aimOffset=new Vector3(1);
  }
  MovingObjectPosition mop=player.rayTrace(100,1f);
  if (mop != null) {
    if (world.isRemote)     System.out.println(mop.blockX + ""String_Node_Str"" + mop.blockY+ ""String_Node_Str""+ mop.blockZ);
    if (mop.typeOfHit == EnumMovingObjectType.ENTITY) {
      weaponSystem.fire(Vector3.fromCenter(mop.entityHit));
    }
 else {
      weaponSystem.fire(new Vector3(mop.hitVec));
    }
  }
  return itemstack;
}",0.9625407166123778
169776,"@Override public void onHitEntity(Entity entity){
  if (entity != null) {
    entity.attackEntityFrom(damageSource,damage);
  }
}","@Override public void onHitEntity(Entity entity){
  if (entity != null) {
    System.out.println(""String_Node_Str"" + entity + ""String_Node_Str""+ damage+ ""String_Node_Str"");
    entity.attackEntityFrom(damageSource,damage);
  }
}",0.7226890756302521
169777,"public WeaponInaccuracy(EntityPlayer player,int ammoAmount,float damage){
  super(player,DamageSource.causePlayerDamage(player),damage);
  this.itemsConsumedPerShot=ammoAmount;
}","public WeaponInaccuracy(EntityPlayer player,int ammoAmount,float damage){
  super(player,DamageSource.anvil,damage);
  this.itemsConsumedPerShot=ammoAmount;
}",0.9226190476190476
169778,"@Override public void load(NBTTagCompound nbt){
  if (nbt.hasKey(""String_Node_Str"")) {
    this.targetting.clear();
    NBTTagList list=nbt.getTagList(""String_Node_Str"");
    for (    Object o : list.tagList) {
      if (o instanceof NBTTagCompound) {
        this.targetting.put(((NBTTagCompound)o).getString(""String_Node_Str""),((NBTTagCompound)o).getBoolean(""String_Node_Str""));
      }
    }
  }
}","@Override public void load(NBTTagCompound nbt){
  if (nbt.hasKey(""String_Node_Str"")) {
    NBTTagList list=nbt.getTagList(""String_Node_Str"");
    for (    Object o : list.tagList) {
      if (o instanceof NBTTagCompound) {
        this.targetting.put(((NBTTagCompound)o).getString(""String_Node_Str""),((NBTTagCompound)o).getBoolean(""String_Node_Str""));
      }
    }
  }
}",0.3346303501945525
169779,"public void updateLoadChunk(int newChunkX,int newChunkZ){
  if (!this.worldObj.isRemote && Settings.LOAD_CHUNKS && this.chunkTicket != null) {
    for (    ChunkCoordIntPair chunk : loadedChunks)     ForgeChunkManager.unforceChunk(chunkTicket,chunk);
    loadedChunks.clear();
    loadedChunks.add(new ChunkCoordIntPair(newChunkX,newChunkZ));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX + 1,newChunkZ + 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX - 1,newChunkZ - 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX + 1,newChunkZ - 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX - 1,newChunkZ + 1));
    for (    ChunkCoordIntPair chunk : loadedChunks)     ForgeChunkManager.forceChunk(chunkTicket,chunk);
  }
}","public void updateLoadChunk(int newChunkX,int newChunkZ){
  if (!this.worldObj.isRemote && Settings.LOAD_CHUNKS && this.chunkTicket != null) {
    for (    ChunkCoordIntPair chunk : loadedChunks)     ForgeChunkManager.unforceChunk(chunkTicket,chunk);
    loadedChunks.clear();
    loadedChunks.add(new ChunkCoordIntPair(newChunkX,newChunkZ));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX + 1,newChunkZ + 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX - 1,newChunkZ - 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX + 1,newChunkZ - 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX - 1,newChunkZ + 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX + 1,newChunkZ));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX,newChunkZ + 1));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX - 1,newChunkZ));
    loadedChunks.add(new ChunkCoordIntPair(newChunkX,newChunkZ) - 1);
    for (    ChunkCoordIntPair chunk : loadedChunks)     ForgeChunkManager.forceChunk(chunkTicket,chunk);
  }
}",0.8426966292134831
169780,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(INSTANCE,proxy);
  MinecraftForge.EVENT_BUS.register(this);
  TurretType.load();
  blockTurret=ICBMCore.contentRegistry.createBlock(BlockTurret.class,ItemBlockTurret.class,TileTurret.class);
  blockPlatform=ICBMCore.contentRegistry.createBlock(BlockTurretPlatform.class);
  itemAmmo=ICBMCore.contentRegistry.createItem(""String_Node_Str"",ItemAmmo.class,false);
  itemUpgrade=ICBMCore.contentRegistry.createItem(""String_Node_Str"",ItemSentryUpgrade.class,false);
  bulletShell=new ItemStack(itemAmmo,1,0);
  conventionalBullet=new ItemStack(itemAmmo,1,1);
  railgunBullet=new ItemStack(itemAmmo,1,2);
  antimatterBullet=new ItemStack(itemAmmo,1,3);
  EntityRegistry.registerGlobalEntityID(EntityMountableDummy.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityMountableDummy.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,INSTANCE,50,5,true);
  TabICBM.itemStack=TurretRegistry.getItemStack(TurretAntiAir.class);
  TurretEntitySelector.configTurretTargeting();
  proxy.preInit();
  CommandRegistry.register(new TerminalAccessCMD(),""String_Node_Str"");
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(INSTANCE,proxy);
  MinecraftForge.EVENT_BUS.register(this);
  TurretType.load();
  blockTurret=ICBMCore.contentRegistry.createBlock(BlockTurret.class,ItemBlockTurret.class,TileTurret.class);
  blockPlatform=ICBMCore.contentRegistry.createBlock(BlockTurretPlatform.class);
  itemAmmo=ICBMCore.contentRegistry.createItem(""String_Node_Str"",ItemAmmo.class,false);
  itemUpgrade=ICBMCore.contentRegistry.createItem(""String_Node_Str"",ItemSentryUpgrade.class,false);
  bulletShell=new ItemStack(itemAmmo,1,0);
  conventionalBullet=new ItemStack(itemAmmo,1,1);
  railgunBullet=new ItemStack(itemAmmo,1,2);
  antimatterBullet=new ItemStack(itemAmmo,1,3);
  EntityRegistry.registerGlobalEntityID(EntityMountableDummy.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityMountableDummy.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,INSTANCE,50,5,true);
  TabICBM.itemStack=TurretRegistry.getItemStack(TurretAntiAir.class);
  proxy.preInit();
  CommandRegistry.register(new TerminalAccessCMD(),""String_Node_Str"");
}",0.979966611018364
169781,"public TurretAntiAirSelector(ITurret turret){
  super(turret);
  this.target_mobs=false;
  this.target_players=false;
}","public TurretAntiAirSelector(ITurret turret){
  super(turret);
}",0.6994535519125683
169782,"@Override public void load(NBTTagCompound nbt){
  target_mobs=nbt.getBoolean(""String_Node_Str"");
  target_animals=nbt.getBoolean(""String_Node_Str"");
  target_npcs=nbt.getBoolean(""String_Node_Str"");
  target_players=nbt.getBoolean(""String_Node_Str"");
  target_flying=nbt.getBoolean(""String_Node_Str"");
  target_boss=nbt.getBoolean(""String_Node_Str"");
}","@Override public void load(NBTTagCompound nbt){
}",0.245
169783,"@Override public boolean isEntityApplicable(Entity entity){
  boolean re=false;
  if (!isFriendly(entity) && isValid(entity)) {
    if (entity instanceof EntityFlying) {
      return target_flying_global && target_flying;
    }
 else     if (entity instanceof IBossDisplayData) {
      return target_boss_global && target_boss;
    }
 else     if (entity instanceof EntityPlayer) {
      return target_players_global && target_players;
    }
 else     if (isMob(entity)) {
      return target_mobs_global && target_mobs;
    }
 else     if (entity instanceof IAnimals) {
      return target_animals_global & target_animals;
    }
 else     if (entity instanceof INpc) {
      return target_npcs_global & target_npcs;
    }
  }
  return re;
}","@Override public boolean isEntityApplicable(Entity entity){
  boolean re=false;
  if (!isFriendly(entity) && isValid(entity)) {
    if (entity instanceof EntityFlying) {
      return target_flying_global;
    }
 else     if (entity instanceof IBossDisplayData) {
      return target_boss_global;
    }
 else     if (entity instanceof EntityPlayer) {
      return target_players_global;
    }
 else     if (isMob(entity)) {
      return target_mobs_global;
    }
 else     if (entity instanceof IAnimals) {
      return target_animals_global;
    }
 else     if (entity instanceof INpc) {
      return target_npcs_global;
    }
  }
  return re;
}",0.8932178932178932
169784,"@Override public void save(NBTTagCompound nbt){
  nbt.setBoolean(""String_Node_Str"",target_mobs);
  nbt.setBoolean(""String_Node_Str"",target_animals);
  nbt.setBoolean(""String_Node_Str"",target_npcs);
  nbt.setBoolean(""String_Node_Str"",target_players);
  nbt.setBoolean(""String_Node_Str"",target_flying);
  nbt.setBoolean(""String_Node_Str"",target_boss);
}","@Override public void save(NBTTagCompound nbt){
}",0.245
169785,"@SideOnly(Side.CLIENT) @Override public IModelCustom getMissileModel(){
  if (this.model == null)   model=AdvancedModelLoader.loadModel(Reference.MODEL_DIRECTORY + this.modelName);
  return model;
}","@SideOnly(Side.CLIENT) @Override public IModelCustom getMissileModel(){
  try {
    if (this.model == null)     model=AdvancedModelLoader.loadModel(Reference.MODEL_DIRECTORY + this.modelName);
  }
 catch (  ModelFormatException e) {
    System.out.println(""String_Node_Str"" + this.modelName);
    e.printStackTrace();
  }
  return model;
}",0.6927374301675978
169786,"@Override public void updateEntity(){
  super.updateEntity();
  if (!this.worldObj.isRemote) {
    for (int i=0; i < this.getSizeInventory(); i++) {
      if (this.getStackInSlot(i) != null && CompatibilityModule.isHandler(this.getStackInSlot(i).getClass())) {
        long charge=CompatibilityModule.dischargeItem(this.getStackInSlot(i),Integer.MAX_VALUE,false);
        CompatibilityModule.dischargeItem(this.getStackInSlot(i),this.onReceiveEnergy(ForgeDirection.UNKNOWN,charge,true),true);
      }
    }
  }
  turrets=new TileTurret[6];
  for (int i=0; i < 6; i++) {
    TileEntity checkTile=new Vector3(this).translate(ForgeDirection.getOrientation(i)).getTileEntity(worldObj);
    if (checkTile instanceof TileTurret)     turrets[i]=(TileTurret)checkTile;
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (!this.worldObj.isRemote) {
    for (int i=0; i < this.getSizeInventory(); i++) {
      if (this.getStackInSlot(i) != null && CompatibilityModule.isHandler(this.getStackInSlot(i).getClass())) {
        long charge=CompatibilityModule.dischargeItem(this.getStackInSlot(i),Integer.MAX_VALUE,false);
        CompatibilityModule.dischargeItem(this.getStackInSlot(i),this.onReceiveEnergy(ForgeDirection.UNKNOWN,charge,true),true);
      }
    }
  }
  turrets=new TileTurret[6];
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    TileEntity checkTile=new Vector3(this).translate(dir).getTileEntity(worldObj);
    if (checkTile instanceof TileTurret)     turrets[dir.ordinal()]=(TileTurret)checkTile;
  }
}",0.8851612903225806
169787,"@Override public long onReceiveEnergy(ForgeDirection from,long receive,boolean doReceive){
  long used=0;
  long remain=receive;
  for (int i=0; i < 6; i++) {
    TileTurret turret=this.turrets[i];
    if (turret != null && turret.getTurret() != null) {
      long added=turret.getTurret().battery.receiveEnergy(remain,doReceive);
      used+=added;
      remain-=added;
    }
  }
  return used;
}","@Override public long onReceiveEnergy(ForgeDirection from,long receive,boolean doReceive){
  long used=0;
  long remain=receive;
  for (int i=0; i < 6; i++) {
    TileTurret turret=this.turrets[i];
    if (turret != null && turret.getTurret() instanceof IEnergyContainer) {
      long added=turret.getTurret().battery.receiveEnergy(remain,doReceive);
      used+=added;
      remain-=added;
    }
  }
  return used;
}",0.9582309582309584
169788,"@Override public long getMaxExtract(){
  if (Turret.this.getWeaponSystem() instanceof IEnergyWeapon) {
    return ((IEnergyWeapon)Turret.this.getWeaponSystem()).getEnergyPerShot();
  }
  return this.getEnergyCapacity();
}","@Override public long getMaxExtract(){
  return this.getEnergyCapacity();
}",0.5067567567567568
169789,"public Turret(ITurretProvider host){
  this.host=host;
  this.ai=new TurretAI(this);
  this.battery=new EnergyStorageHandler(){
    @Override public long getEnergyCapacity(){
      return SentryTrait.asLong(Turret.this.getTrait(ITurret.ENERGY_STORAGE_TRAIT),this.capacity);
    }
    @Override public long getMaxExtract(){
      if (Turret.this.getWeaponSystem() instanceof IEnergyWeapon) {
        return ((IEnergyWeapon)Turret.this.getWeaponSystem()).getEnergyPerShot();
      }
      return this.getEnergyCapacity();
    }
  }
;
  newTrait(new SentryTraitLong(ITurret.ENERGY_STORAGE_TRAIT,IUpgrade.ENERGY_STORAGE,100000));
  newTrait(new SentryTraitLong(ITurret.ENERGY_RUNNING_TRAIT,IUpgrade.ENERGY_EFFICIENCY,10));
  newTrait(new SentryTraitDouble(ITurret.MAX_HEALTH_TRAIT,50.0));
  newTrait(new SentryTraitDouble(ITurret.SEARCH_RANGE_TRAIT,IUpgrade.TARGET_RANGE,20.0));
  newTrait(new SentryTraitDouble(ITurret.ROTATION_SPEED_TRAIT,5));
  newTrait(new SentryTraitDouble(ITurret.ROTATION_SPEED_WITH_TARGET_TRAIT,7));
  newTrait(new SentryTraitInteger(ITurret.AMMO_RELOAD_TIME_TRAIT,20));
}","public Turret(ITurretProvider host){
  this.host=host;
  this.ai=new TurretAI(this);
  this.battery=new EnergyStorageHandler(){
    @Override public long getEnergyCapacity(){
      return SentryTrait.asLong(Turret.this.getTrait(ITurret.ENERGY_STORAGE_TRAIT),this.capacity);
    }
    @Override public long getMaxReceive(){
      return this.getEnergyCapacity();
    }
    @Override public long getMaxExtract(){
      return this.getEnergyCapacity();
    }
  }
;
  newTrait(new SentryTraitLong(ITurret.ENERGY_STORAGE_TRAIT,IUpgrade.ENERGY_STORAGE,100000));
  newTrait(new SentryTraitLong(ITurret.ENERGY_RUNNING_TRAIT,IUpgrade.ENERGY_EFFICIENCY,10));
  newTrait(new SentryTraitDouble(ITurret.MAX_HEALTH_TRAIT,50.0));
  newTrait(new SentryTraitDouble(ITurret.SEARCH_RANGE_TRAIT,IUpgrade.TARGET_RANGE,20.0));
  newTrait(new SentryTraitDouble(ITurret.ROTATION_SPEED_TRAIT,5));
  newTrait(new SentryTraitDouble(ITurret.ROTATION_SPEED_WITH_TARGET_TRAIT,7));
  newTrait(new SentryTraitInteger(ITurret.AMMO_RELOAD_TIME_TRAIT,20));
}",0.8827977315689981
169790,"@Override public List<String> called(EntityPlayer player,ITerminal terminal,String[] args){
  if (args[0].equalsIgnoreCase(this.getCommandName()) && args.length > 1 && args[1] != null) {
    String command=args[1];
    if (terminal instanceof IProfileContainer) {
      IProfileContainer container=(IProfileContainer)terminal;
      AccessProfile profile=container.getAccessProfile();
      List<String> output_to_console=new ArrayList<String>();
      if (command != null && command.equalsIgnoreCase(""String_Node_Str"")) {
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        return output_to_console;
      }
 else       if (command != null && command.equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length > 2 && args[2] != null) {
          String group_sub_command=args[2];
          if (group_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
            output_to_console.add(""String_Node_Str"" + profile.getName());
            output_to_console.add(""String_Node_Str"");
            for (            AccessGroup group : profile.getGroups()) {
              output_to_console.add(""String_Node_Str"" + group.getName() + (group.getExtendGroup() != null ? ""String_Node_Str"" + group.getExtendGroup().getName() : ""String_Node_Str""));
            }
            output_to_console.add(""String_Node_Str"");
            return output_to_console;
          }
 else           if (group_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length > 3 && args[3] != null) {
              AccessGroup group=profile.getGroup(args[3]);
              if (group != null) {
                output_to_console.add(""String_Node_Str"");
              }
 else {
                group=new AccessGroup(args[3]);
                profile.getGroups().add(group);
                if (args.length > 4 && args[4] != null) {
                  AccessGroup extendGroup=profile.getGroup(args[4]);
                  if (extendGroup != null) {
                    group.setToExtend(extendGroup);
                  }
 else {
                    output_to_console.add(""String_Node_Str"");
                  }
                }
                output_to_console.add(""String_Node_Str"");
              }
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
            return output_to_console;
          }
 else           if (group_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length > 3 && args[3] != null) {
              AccessGroup group=profile.getGroup(args[3]);
              if (group != null) {
                if (args.length > 4) {
                  AccessGroup moveGroup=profile.getGroup(args[4]);
                  if (moveGroup != null) {
                    moveGroup.addMemebers(group.getMembers());
                    group.getMembers().clear();
                    output_to_console.add(""String_Node_Str"" + moveGroup.getName() + ""String_Node_Str"");
                  }
 else {
                    output_to_console.add(""String_Node_Str"");
                  }
                }
                profile.getGroups().remove(group);
                output_to_console.add(""String_Node_Str"");
              }
 else {
                output_to_console.add(""String_Node_Str"");
              }
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
            return output_to_console;
          }
 else           if (group_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length > 3 && args[3] != null) {
              AccessGroup group=profile.getGroup(args[4]);
              if (group != null) {
                if (args.length > 4 && args[4] != null) {
                  AccessGroup extendGroup=profile.getGroup(args[4]);
                  if (extendGroup != null) {
                    group.setToExtend(extendGroup);
                  }
 else {
                    output_to_console.add(""String_Node_Str"");
                  }
                }
 else {
                  output_to_console.add(""String_Node_Str"");
                }
              }
 else {
                output_to_console.add(""String_Node_Str"");
              }
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
            return output_to_console;
          }
 else           if (group_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length > 3 && args[3] != null) {
              AccessGroup group=profile.getGroup(args[4]);
              if (group != null) {
                if (args.length > 4 && args[4] != null) {
                  if (!group.hasNode(args[4])) {
                    group.addNode(args[4]);
                    output_to_console.add(""String_Node_Str"");
                  }
 else {
                    output_to_console.add(""String_Node_Str"");
                  }
                }
 else {
                  output_to_console.add(""String_Node_Str"");
                }
              }
 else {
                output_to_console.add(""String_Node_Str"");
              }
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
            return output_to_console;
          }
 else           if (group_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length > 3 && args[3] != null) {
              AccessGroup group=profile.getGroup(args[3]);
              if (group != null) {
                if (args.length > 4 && args[4] != null) {
                  if (group.hasNode(args[4])) {
                    group.removeNode(args[4]);
                    output_to_console.add(""String_Node_Str"");
                  }
 else {
                    output_to_console.add(""String_Node_Str"");
                  }
                }
 else {
                  output_to_console.add(""String_Node_Str"");
                }
              }
 else {
                output_to_console.add(""String_Node_Str"");
              }
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
            return output_to_console;
          }
        }
 else {
          output_to_console.add(""String_Node_Str"");
          return output_to_console;
        }
      }
 else       if (command != null && command.equalsIgnoreCase(""String_Node_Str"")) {
        String user_sub_command=args[2];
        if (user_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
          output_to_console.add(""String_Node_Str"" + profile.getName());
          output_to_console.add(""String_Node_Str"");
          for (          AccessGroup group : profile.getGroups()) {
            output_to_console.add(""String_Node_Str"" + group.getName());
            for (            AccessUser user : group.getMembers()) {
              output_to_console.add(""String_Node_Str"" + user.getName());
            }
            output_to_console.add(""String_Node_Str"");
          }
          output_to_console.add(""String_Node_Str"");
          return output_to_console;
        }
 else         if (user_sub_command.equalsIgnoreCase(""String_Node_Str"") && args.length > 3) {
          String username=args[3];
          if (username != null) {
            if (username.equalsIgnoreCase(player.username)) {
              output_to_console.add(""String_Node_Str"");
            }
 else             if (profile.setUserAccess(username,null,false)) {
              output_to_console.add(""String_Node_Str"" + username);
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
          }
 else {
            output_to_console.add(""String_Node_Str"");
          }
          return output_to_console;
        }
 else         if (user_sub_command.equalsIgnoreCase(""String_Node_Str"") && args.length > 3) {
          AccessGroup group=profile.getGroup(args[3]);
          if (group != null && args.length > 4) {
            String username=args[4];
            if (group.isMemeber(username)) {
              output_to_console.add(""String_Node_Str"");
            }
 else             if (profile.setUserAccess(username,group,true)) {
              output_to_console.add(""String_Node_Str"" + username + ""String_Node_Str""+ group.getName()+ ""String_Node_Str"");
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
          }
 else {
            output_to_console.add(""String_Node_Str"");
          }
          return output_to_console;
        }
 else         if (user_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
          if (args.length > 3 && args[3] != null) {
            if (args.length > 4 && args[4] != null) {
              AccessGroup group=profile.getGroup(args[4]);
              if (group.isMemeber(args[3])) {
                output_to_console.add(""String_Node_Str"");
              }
 else {
                AccessUser user=profile.getUserAccess(args[3]);
                if (user != null && user.getGroup() != null) {
                  user.getGroup().removeMemeber(user);
                  user.setGroup(group);
                  output_to_console.add(""String_Node_Str"" + args[3] + ""String_Node_Str""+ group.getName()+ ""String_Node_Str"");
                }
 else {
                  output_to_console.add(""String_Node_Str"");
                }
              }
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
          }
 else {
            output_to_console.add(""String_Node_Str"");
          }
          return output_to_console;
        }
 else         if (user_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
          output_to_console.add(""String_Node_Str"");
          return output_to_console;
        }
 else         if (user_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
          output_to_console.add(""String_Node_Str"");
          return output_to_console;
        }
        return null;
      }
    }
  }
  return null;
}","@Override public List<String> called(EntityPlayer player,ITerminal terminal,String[] args){
  if (args[0].equalsIgnoreCase(this.getCommandName()) && args.length > 1 && args[1] != null) {
    String command=args[1];
    if (terminal instanceof IProfileContainer) {
      IProfileContainer container=(IProfileContainer)terminal;
      AccessProfile profile=container.getAccessProfile();
      List<String> output_to_console=new ArrayList<String>();
      if (command != null && command.equalsIgnoreCase(""String_Node_Str"")) {
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        output_to_console.add(""String_Node_Str"");
        return output_to_console;
      }
 else       if (command != null && command.equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length > 2 && args[2] != null) {
          String group_sub_command=args[2];
          if (group_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
            output_to_console.add(""String_Node_Str"" + profile.getName());
            output_to_console.add(""String_Node_Str"");
            for (            AccessGroup group : profile.getGroups()) {
              output_to_console.add(""String_Node_Str"" + group.getName() + (group.getExtendGroup() != null ? ""String_Node_Str"" + group.getExtendGroup().getName() : ""String_Node_Str""));
            }
            output_to_console.add(""String_Node_Str"");
            return output_to_console;
          }
 else           if (group_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length > 3 && args[3] != null) {
              AccessGroup group=profile.getGroup(args[3]);
              if (group != null) {
                output_to_console.add(""String_Node_Str"");
              }
 else {
                group=new AccessGroup(args[3]);
                profile.getGroups().add(group);
                if (args.length > 4 && args[4] != null) {
                  AccessGroup extendGroup=profile.getGroup(args[4]);
                  if (extendGroup != null) {
                    group.setToExtend(extendGroup);
                  }
 else {
                    output_to_console.add(""String_Node_Str"");
                  }
                }
                output_to_console.add(""String_Node_Str"");
              }
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
            return output_to_console;
          }
 else           if (group_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length > 3 && args[3] != null) {
              AccessGroup group=profile.getGroup(args[3]);
              if (group != null) {
                if (args.length > 4) {
                  AccessGroup moveGroup=profile.getGroup(args[4]);
                  if (moveGroup != null) {
                    moveGroup.addMemebers(group.getMembers());
                    group.getMembers().clear();
                    output_to_console.add(""String_Node_Str"" + moveGroup.getName() + ""String_Node_Str"");
                  }
 else {
                    output_to_console.add(""String_Node_Str"");
                  }
                }
                profile.getGroups().remove(group);
                output_to_console.add(""String_Node_Str"");
              }
 else {
                output_to_console.add(""String_Node_Str"");
              }
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
            return output_to_console;
          }
 else           if (group_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length > 3 && args[3] != null) {
              AccessGroup group=profile.getGroup(args[3]);
              if (group != null) {
                if (args.length > 4 && args[4] != null) {
                  AccessGroup extendGroup=profile.getGroup(args[4]);
                  if (extendGroup != null) {
                    group.setToExtend(extendGroup);
                  }
 else {
                    output_to_console.add(""String_Node_Str"");
                  }
                }
 else {
                  output_to_console.add(""String_Node_Str"");
                }
              }
 else {
                output_to_console.add(""String_Node_Str"");
              }
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
            return output_to_console;
          }
 else           if (group_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length > 3 && args[3] != null) {
              AccessGroup group=profile.getGroup(args[3]);
              if (group != null) {
                if (args.length > 4 && args[4] != null) {
                  if (!group.hasNode(args[4])) {
                    group.addNode(args[4]);
                    output_to_console.add(""String_Node_Str"");
                  }
 else {
                    output_to_console.add(""String_Node_Str"");
                  }
                }
 else {
                  output_to_console.add(""String_Node_Str"");
                }
              }
 else {
                output_to_console.add(""String_Node_Str"");
              }
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
            return output_to_console;
          }
 else           if (group_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length > 3 && args[3] != null) {
              AccessGroup group=profile.getGroup(args[3]);
              if (group != null) {
                if (args.length > 4 && args[4] != null) {
                  if (group.hasNode(args[4])) {
                    group.removeNode(args[4]);
                    output_to_console.add(""String_Node_Str"");
                  }
 else {
                    output_to_console.add(""String_Node_Str"");
                  }
                }
 else {
                  output_to_console.add(""String_Node_Str"");
                }
              }
 else {
                output_to_console.add(""String_Node_Str"");
              }
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
            return output_to_console;
          }
        }
 else {
          output_to_console.add(""String_Node_Str"");
          return output_to_console;
        }
      }
 else       if (command != null && command.equalsIgnoreCase(""String_Node_Str"")) {
        String user_sub_command=args[2];
        if (user_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
          output_to_console.add(""String_Node_Str"" + profile.getName());
          output_to_console.add(""String_Node_Str"");
          for (          AccessGroup group : profile.getGroups()) {
            output_to_console.add(""String_Node_Str"" + group.getName());
            for (            AccessUser user : group.getMembers()) {
              output_to_console.add(""String_Node_Str"" + user.getName());
            }
            output_to_console.add(""String_Node_Str"");
          }
          output_to_console.add(""String_Node_Str"");
          return output_to_console;
        }
 else         if (user_sub_command.equalsIgnoreCase(""String_Node_Str"") && args.length > 3) {
          String username=args[3];
          if (username != null) {
            if (username.equalsIgnoreCase(player.username)) {
              output_to_console.add(""String_Node_Str"");
            }
 else             if (profile.setUserAccess(username,null,false)) {
              output_to_console.add(""String_Node_Str"" + username);
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
          }
 else {
            output_to_console.add(""String_Node_Str"");
          }
          return output_to_console;
        }
 else         if (user_sub_command.equalsIgnoreCase(""String_Node_Str"") && args.length > 3) {
          AccessGroup group=profile.getGroup(args[3]);
          if (group != null && args.length > 4) {
            String username=args[4];
            if (group.isMemeber(username)) {
              output_to_console.add(""String_Node_Str"");
            }
 else             if (profile.setUserAccess(username,group,true)) {
              output_to_console.add(""String_Node_Str"" + username + ""String_Node_Str""+ group.getName()+ ""String_Node_Str"");
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
          }
 else {
            output_to_console.add(""String_Node_Str"");
          }
          return output_to_console;
        }
 else         if (user_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
          if (args.length > 3 && args[3] != null) {
            if (args.length > 4 && args[4] != null) {
              AccessGroup group=profile.getGroup(args[4]);
              if (group.isMemeber(args[3])) {
                output_to_console.add(""String_Node_Str"");
              }
 else {
                AccessUser user=profile.getUserAccess(args[3]);
                if (user != null && user.getGroup() != null) {
                  user.getGroup().removeMemeber(user);
                  user.setGroup(group);
                  output_to_console.add(""String_Node_Str"" + args[3] + ""String_Node_Str""+ group.getName()+ ""String_Node_Str"");
                }
 else {
                  output_to_console.add(""String_Node_Str"");
                }
              }
            }
 else {
              output_to_console.add(""String_Node_Str"");
            }
          }
 else {
            output_to_console.add(""String_Node_Str"");
          }
          return output_to_console;
        }
 else         if (user_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
          output_to_console.add(""String_Node_Str"");
          return output_to_console;
        }
 else         if (user_sub_command.equalsIgnoreCase(""String_Node_Str"")) {
          output_to_console.add(""String_Node_Str"");
          return output_to_console;
        }
        return null;
      }
    }
  }
  return null;
}",0.999810695693327
169791,"@Override public void invalidate(){
  FrequencyGrid.instance().unregister(this);
  super.invalidate();
}","@Override public void invalidate(){
  FrequencyGrid.instance().unregister((IBlockFrequency)this);
  super.invalidate();
}",0.9244444444444444
169792,"@Override public void update(EntityMissile missileObj){
  if (missileObj.feiXingTick > missileObj.missileFlightTime / 2 && missileObj.missileType == MissileType.missile) {
    WorldServer worldServer=(WorldServer)missileObj.worldObj;
    Entity trackingEntity=worldServer.getEntityByID(missileObj.trackingVar);
    if (trackingEntity != null) {
      if (trackingEntity == missileObj) {
        missileObj.setExplode();
      }
      missileObj.targetVector=new Vector3(trackingEntity);
      missileObj.missileType=MissileType.CruiseMissile;
      missileObj.deltaPathX=missileObj.targetVector.x - missileObj.posX;
      missileObj.deltaPathY=missileObj.targetVector.y - missileObj.posY;
      missileObj.deltaPathZ=missileObj.targetVector.z - missileObj.posZ;
      missileObj.flatDistance=Vector2.distance(missileObj.startPos.toVector2(),missileObj.targetVector.toVector2());
      missileObj.maxHeight=150 + (int)(missileObj.flatDistance * 1.8);
      missileObj.missileFlightTime=(float)Math.max(100,2.4 * missileObj.flatDistance);
      missileObj.acceleration=(float)missileObj.maxHeight * 2 / (missileObj.missileFlightTime * missileObj.missileFlightTime);
      if (missileObj.xiaoDanMotion.equals(new Vector3()) || missileObj.xiaoDanMotion == null) {
        float suDu=0.3f;
        missileObj.xiaoDanMotion=new Vector3();
        missileObj.xiaoDanMotion.x=missileObj.deltaPathX / (missileObj.missileFlightTime * suDu);
        missileObj.xiaoDanMotion.y=missileObj.deltaPathY / (missileObj.missileFlightTime * suDu);
        missileObj.xiaoDanMotion.z=missileObj.deltaPathZ / (missileObj.missileFlightTime * suDu);
      }
    }
  }
}","@Override public void update(EntityMissile missileObj){
  if (missileObj.feiXingTick > missileObj.missileFlightTime / 2 && missileObj.missileType == MissileType.missile) {
    WorldServer worldServer=(WorldServer)missileObj.worldObj;
    Entity trackingEntity=worldServer.getEntityByID(missileObj.trackingVar);
    if (trackingEntity != null) {
      if (trackingEntity.equals(missileObj)) {
        missileObj.setExplode();
      }
      missileObj.targetVector=new Vector3(trackingEntity);
      missileObj.missileType=MissileType.CruiseMissile;
      missileObj.deltaPathX=missileObj.targetVector.x - missileObj.posX;
      missileObj.deltaPathY=missileObj.targetVector.y - missileObj.posY;
      missileObj.deltaPathZ=missileObj.targetVector.z - missileObj.posZ;
      missileObj.flatDistance=Vector2.distance(missileObj.startPos.toVector2(),missileObj.targetVector.toVector2());
      missileObj.maxHeight=150 + (int)(missileObj.flatDistance * 1.8);
      missileObj.missileFlightTime=(float)Math.max(100,2.4 * missileObj.flatDistance);
      missileObj.acceleration=(float)missileObj.maxHeight * 2 / (missileObj.missileFlightTime * missileObj.missileFlightTime);
      if (missileObj.xiaoDanMotion.equals(new Vector3()) || missileObj.xiaoDanMotion == null) {
        float suDu=0.3f;
        missileObj.xiaoDanMotion=new Vector3();
        missileObj.xiaoDanMotion.x=missileObj.deltaPathX / (missileObj.missileFlightTime * suDu);
        missileObj.xiaoDanMotion.y=missileObj.deltaPathY / (missileObj.missileFlightTime * suDu);
        missileObj.xiaoDanMotion.z=missileObj.deltaPathZ / (missileObj.missileFlightTime * suDu);
      }
    }
  }
}",0.9899909008189264
169793,"/** 
 * Builds a new sentry instance from the given sentry ID and argument. Sentry ID must be registered to a class, and the args must match a constructor in the registered class.
 * @param sentryID the key of the Sentry class used in SentryRegistry.registerSentry()
 * @param args arguments the Sentry's class constructor requires
 * @return the Sentry object for the given id and tile, or null it failed to create the sentry
 */
public static Turret constructSentry(String sentryID,Object... args){
  Object candidate=null;
  Turret sentryModule=null;
  try {
    Class clazz=SaveManager.getClass(sentryID);
    if (clazz != null) {
      Constructor<?> con=ReflectionHelper.getConstructorWithArgs(clazz,args);
      if (con != null) {
        candidate=con.newInstance(args);
      }
      if (candidate instanceof Turret) {
        sentryModule=(Turret)candidate;
      }
 else {
        ICBMCore.LOGGER.severe(""String_Node_Str"" + sentryID + ""String_Node_Str""+ con+ ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return sentryModule;
}","/** 
 * Builds a new sentry instance from the given sentry ID and argument. Sentry ID must be registered to a class, and the args must match a constructor in the registered class.
 * @param sentryID the key of the Sentry class used in SentryRegistry.registerSentry()
 * @param args arguments the Sentry's class constructor requires
 * @return the Sentry object for the given id and tile, or null it failed to create the sentry
 */
public static Turret constructSentry(String sentryID,Object... args){
  Object candidate=null;
  Turret sentryModule=null;
  try {
    Class clazz=SaveManager.getClass(sentryID);
    if (clazz != null) {
      Constructor<?> con=ReflectionUtility.getConstructorWithArgs(clazz,args);
      if (con != null) {
        candidate=con.newInstance(args);
      }
      if (candidate instanceof Turret) {
        sentryModule=(Turret)candidate;
      }
 else {
        ICBMCore.LOGGER.severe(""String_Node_Str"" + sentryID + ""String_Node_Str""+ con+ ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return sentryModule;
}",0.9940174873446848
169794,"@SideOnly(Side.CLIENT) @Override public void addInformation(ItemStack itemStack,EntityPlayer par2EntityPlayer,List par3List,boolean par4){
  super.addInformation(itemStack,par2EntityPlayer,par3List,par4);
  Entity trackingEntity=getTrackingEntity(FMLClientHandler.instance().getClient().theWorld,itemStack);
  if (trackingEntity != null) {
    par3List.add(LanguageUtility.getLocal(""String_Node_Str"") + ""String_Node_Str"" + trackingEntity.getEntityName());
  }
  if (par2EntityPlayer.username.equalsIgnoreCase(""String_Node_Str"") || par2EntityPlayer.username.equalsIgnoreCase(""String_Node_Str"")) {
    par3List.add(""String_Node_Str"");
    par3List.add(""String_Node_Str"");
    par3List.add(""String_Node_Str"");
    par3List.add(""String_Node_Str"");
  }
}","@SideOnly(Side.CLIENT) @Override public void addInformation(ItemStack itemStack,EntityPlayer par2EntityPlayer,List par3List,boolean par4){
  super.addInformation(itemStack,par2EntityPlayer,par3List,par4);
  Entity trackingEntity=getTrackingEntity(FMLClientHandler.instance().getClient().theWorld,itemStack);
  if (trackingEntity != null) {
    par3List.add(LanguageUtility.getLocal(""String_Node_Str"") + ""String_Node_Str"" + trackingEntity.getEntityName());
  }
  par3List.add(LanguageUtility.getLocal(""String_Node_Str""));
  if (par2EntityPlayer.username.equalsIgnoreCase(""String_Node_Str"")) {
    par3List.add(""String_Node_Str"");
    par3List.add(""String_Node_Str"");
  }
}",0.8591549295774648
169795,"@Override public double getRange(){
  return this.default_target_range;
}","@Override public double getRange(){
  return this.target_range;
}",0.9420289855072465
169796,"public void updateUpgrades(){
  IInventory inv=this.getHost().getInventory();
  this.upgrade_count.clear();
  for (int slot=0; slot < inv.getSizeInventory(); slot++) {
    if (inv.getStackInSlot(slot) != null && inv.getStackInSlot(slot).getItem() instanceof ITurretUpgrade) {
      List<String> id_list=new ArrayList<String>();
      ((ITurretUpgrade)inv.getStackInSlot(slot).getItem()).getTypes(id_list,inv.getStackInSlot(slot));
      for (      String id : id_list) {
        if (!this.upgrade_count.containsKey(id)) {
          this.upgrade_count.put(id,0.0);
        }
        this.upgrade_count.put(id,this.upgrade_count.get(id) + ((ITurretUpgrade)inv.getStackInSlot(slot).getItem()).getUpgradeEfficiance(inv.getStackInSlot(slot),id));
      }
    }
  }
  if (this.upgrade_count.containsKey(ITurretUpgrade.TARGET_RANGE)) {
    this.target_range=this.default_target_range + (this.default_target_range * this.upgrade_count.get(ITurretUpgrade.TARGET_RANGE));
  }
}","public void updateUpgrades(){
  IInventory inv=this.getHost().getInventory();
  this.upgrade_count.clear();
  this.target_range=this.default_target_range;
  for (int slot=0; slot < inv.getSizeInventory(); slot++) {
    if (inv.getStackInSlot(slot) != null && inv.getStackInSlot(slot).getItem() instanceof ITurretUpgrade) {
      final List<String> id_list=new ArrayList<String>();
      ((ITurretUpgrade)inv.getStackInSlot(slot).getItem()).getTypes(id_list,inv.getStackInSlot(slot));
      for (      String id : id_list) {
        if (!this.upgrade_count.containsKey(id)) {
          this.upgrade_count.put(id,0.0D);
        }
        this.upgrade_count.put(id,this.upgrade_count.get(id) + ((ITurretUpgrade)inv.getStackInSlot(slot).getItem()).getUpgradeEfficiance(inv.getStackInSlot(slot),id));
      }
    }
  }
  if (this.upgrade_count.containsKey(ITurretUpgrade.TARGET_RANGE)) {
    this.target_range=this.default_target_range + (this.default_target_range * this.upgrade_count.get(ITurretUpgrade.TARGET_RANGE));
  }
}",0.9728370221327968
169797,"public int compare(Entity entityA,Entity entityB){
  double distanceA=this.location.distance(entityA);
  double distanceB=this.location.distance(entityB);
  if (Math.abs(distanceA - distanceB) < 1.5) {
    float healthA=entityA instanceof EntityLivingBase ? ((EntityLivingBase)entityA).getHealth() : 0;
    float healthB=entityB instanceof EntityLivingBase ? ((EntityLivingBase)entityB).getHealth() : 0;
    return healthA < healthB ? -1 : (healthA > healthB ? 1 : 0);
  }
  return distanceA < distanceB ? -1 : (distanceA > distanceB ? 1 : 0);
}","public int compare(Entity entityA,Entity entityB){
  double distanceA=this.location.distance(entityA);
  double distanceB=this.location.distance(entityB);
  if (Math.abs(distanceA - distanceB) < 1.5) {
    float healthA=entityA instanceof EntityLivingBase ? ((EntityLivingBase)entityA).getHealth() : 0;
    float healthB=entityB instanceof EntityLivingBase ? ((EntityLivingBase)entityB).getHealth() : 0;
    return healthA < healthB ? -1 : (healthA != healthB ? 1 : 0);
  }
  return distanceA < distanceB ? -1 : (distanceA != distanceB ? 1 : 0);
}",0.9945054945054944
169798,"private void TurretUpgradeType(String name,String upgradeName,double bonus,int maxDamage,String de){
  this.iconName=name;
  this.maxUses=maxDamage;
  this.details=de;
  this.upgradeName=upgradeName;
  this.bonus=bonus;
}","private void TurretUpgradeType(String name,String upgradeName,double bonus,String de){
  this.iconName=name;
  this.details=de;
  this.upgradeName=upgradeName;
  this.bonus=bonus;
}",0.900497512437811
169799,"@Override public void addInformation(ItemStack itemStack,EntityPlayer par2EntityPlayer,List par3List,boolean par4){
  if (itemStack != null) {
    if (itemStack.getTagCompound() == null) {
      itemStack.setTagCompound(new NBTTagCompound());
    }
    par3List.addAll(LanguageUtility.splitStringPerWord(TurretUpgradeType.getDescription(itemStack.getItemDamage()),4));
    par3List.add(""String_Node_Str"" + (UnitDisplay.roundDecimals((itemStack.getTagCompound().getInteger(""String_Node_Str"") / TurretUpgradeType.getMaxUses(itemStack.getItemDamage()))) + ""String_Node_Str""));
  }
}","@Override public void addInformation(ItemStack itemStack,EntityPlayer par2EntityPlayer,List par3List,boolean par4){
  if (itemStack != null) {
    if (itemStack.getTagCompound() == null) {
      itemStack.setTagCompound(new NBTTagCompound());
    }
    par3List.addAll(LanguageUtility.splitStringPerWord(TurretUpgradeType.getDescription(itemStack.getItemDamage()),4));
  }
}",0.7848898216159497
169800,"public EulerServo getServo(){
  return servo;
}","public EulerServo getServo(){
  if (servo == null) {
    servo=new EulerServo(5);
  }
  return servo;
}",0.6266666666666667
169801,"public Turret(ITurretProvider host){
  this.host=host;
  energy=new EnergyStorageHandler(10000);
  servo=new EulerServo(5);
  ai=new TurretAI(this);
}","public Turret(ITurretProvider host){
  this.host=host;
  energy=new EnergyStorageHandler(10000);
  ai=new TurretAI(this);
}",0.9010989010989012
169802,"public ResourceLocation getTexture(EntityPlayer player,TileTurret tile){
  if (tile != null && player != null) {
    if (tile.getAccessProfile().getOwnerGroup().isMemeber(player.username))     return this.textureFriendly;
    if (tile.canUse(Nodes.GROUP_USER_NODE,player)) {
      return textureNeutral;
    }
  }
  return textureHostile;
}","public ResourceLocation getTexture(EntityPlayer player,TileTurret tile){
  if (tile != null && player != null) {
    if (tile.canUse(Nodes.GROUP_ADMIN_NODE,player) || tile.canUse(Nodes.GROUP_OWNER_NODE,player))     return this.textureFriendly;
    if (tile.canAccess(player.username)) {
      return textureNeutral;
    }
  }
  return textureHostile;
}",0.6647398843930635
169803,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entity,ItemStack itemstack){
  TileEntity te=world.getBlockTileEntity(x,y,z);
  if (te instanceof TileTurret && entity instanceof EntityPlayer) {
    ((TileTurret)te).getAccessProfile().getOwnerGroup().addMemeber(new AccessUser(((EntityPlayer)entity).username));
  }
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entity,ItemStack itemstack){
  if (!world.isRemote) {
    TileEntity te=world.getBlockTileEntity(x,y,z);
    if (te instanceof TileTurret && entity instanceof EntityPlayer) {
      ((TileTurret)te).getAccessProfile().setUserAccess(((EntityPlayer)entity).username,((TileTurret)te).getAccessProfile().getOwnerGroup(),false);
      ((TileTurret)te).onProfileChange();
    }
  }
}",0.7223587223587223
169804,"@Override public boolean canAccess(String username){
  return this.getAccessProfile().getUserAccess(username) != null;
}","@Override public boolean canAccess(String username){
  return this.getAccessProfile().getUserAccess(username).getGroup() != null;
}",0.9561752988047808
169805,"@Override public boolean canUse(String node,EntityPlayer player){
  return this.getAccessProfile().getOwnerGroup().isMemeber(player.username);
}","@Override public boolean canUse(String node,EntityPlayer player){
  return this.getAccessProfile().getUserAccess(player.username).hasNode(node);
}",0.8620689655172413
169806,"public GuiLauncherScreen(TileLauncherScreen tileEntity){
  super(tileEntity);
  this.tileEntity=tileEntity;
}","public GuiLauncherScreen(TileLauncherScreen tileEntity){
  super(tileEntity);
  this.tileEntity=tileEntity;
  ySize=166;
}",0.9437229437229436
169807,"public GuiFrequency(EntityPlayer player,ItemStack par1ItemStack){
  this.player=player;
  this.itemStack=par1ItemStack;
}","public GuiFrequency(EntityPlayer player,ItemStack par1ItemStack){
  this.player=player;
  this.itemStack=par1ItemStack;
  this.ySize=166;
}",0.9307692307692308
169808,"public EulerServo(EulerAngle angle,float rotationSpeed){
  super(angle);
  this.rotationSpeed=rotationSpeed;
}","public EulerServo(EulerAngle angle,double rotationSpeed){
  super(angle);
  this.rotationSpeed=rotationSpeed;
}",0.9592760180995475
169809,"@Override public void doExplode(){
  if (this.effectBlocks) {
    for (int x=(int)-this.getRadius(); x < (int)this.getRadius(); x++) {
      for (int y=(int)-this.getRadius(); y < (int)this.getRadius(); y++) {
        for (int z=(int)-this.getRadius(); z < (int)this.getRadius(); z++) {
          double dist=MathHelper.sqrt_double((x * x + y * y + z * z));
          Vector3 searchPosition=Vector3.translate(position,new Vector3(x,y,z));
          if (dist > this.getRadius())           continue;
          if (Math.round(position.x + y) == position.intY()) {
            worldObj.spawnParticle(""String_Node_Str"",searchPosition.x,searchPosition.y,searchPosition.z,0,0,0);
          }
          int blockID=searchPosition.getBlockID(worldObj);
          Block block=Block.blocksList[blockID];
          TileEntity tileEntity=searchPosition.getTileEntity(worldObj);
          if (block != null) {
            if (block instanceof IForceFieldBlock) {
              ((IForceFieldBlock)Block.blocksList[blockID]).weakenForceField(worldObj,searchPosition.intX(),searchPosition.intY(),searchPosition.intZ(),1000);
            }
 else             if (block instanceof IEMPBlock) {
              ((IEMPBlock)block).onEMP(worldObj,searchPosition,this);
            }
 else             if (tileEntity != null) {
              if (tileEntity instanceof IFortronStorage) {
                ((IFortronStorage)tileEntity).provideFortron((int)worldObj.rand.nextFloat() * ((IFortronStorage)tileEntity).getFortronCapacity(),true);
              }
              if (tileEntity instanceof IEnergyContainer) {
                ((IEnergyContainer)tileEntity).setEnergy(null,0);
              }
 else               if (tileEntity instanceof IEnergyStorage) {
                ((IEnergyStorage)tileEntity).setStored(0);
              }
              CompatibilityModule.extractEnergy(tileEntity,ForgeDirection.UNKNOWN,Integer.MAX_VALUE,true);
            }
          }
        }
      }
    }
  }
  if (this.effectEntities) {
    List<Entity> entitiesNearby=RadarRegistry.getEntitiesWithinRadius(position.toVector2(),(int)this.getRadius());
    for (    Entity entity : entitiesNearby) {
      if (entity instanceof IMissile && !entity.isEntityEqual(this.controller)) {
        if (((IMissile)entity).getTicksInAir() > -1) {
          ((IMissile)entity).dropMissileAsItem();
        }
      }
    }
    int maxFx=10;
    AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.x - this.getRadius(),position.y - this.getRadius(),position.z - this.getRadius(),position.x + this.getRadius(),position.y + this.getRadius(),position.z + this.getRadius());
    List<Entity> entities=worldObj.getEntitiesWithinAABB(Entity.class,bounds);
    for (    Entity entity : entities) {
      if (entity instanceof EntityLivingBase) {
        if (this.worldObj.isRemote && maxFx > 0) {
          ICBMExplosion.proxy.spawnShock(this.worldObj,this.position,new Vector3(entity),20);
          maxFx--;
        }
        if (entity instanceof EntityCreeper) {
          if (!this.worldObj.isRemote) {
            try {
              ((EntityCreeper)entity).getDataWatcher().updateObject(17,(byte)1);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
        if (entity instanceof EntityPlayer) {
          IInventory inventory=((EntityPlayer)entity).inventory;
          for (int i=0; i < inventory.getSizeInventory(); i++) {
            ItemStack itemStack=inventory.getStackInSlot(i);
            if (itemStack != null) {
              if (itemStack.getItem() instanceof IEMPItem) {
                ((IEMPItem)itemStack.getItem()).onEMP(itemStack,entity,this);
              }
 else               if (itemStack.getItem() instanceof IEnergyItem) {
                ((IEnergyItem)itemStack.getItem()).setEnergy(itemStack,0);
              }
 else               if (itemStack.getItem() instanceof ISpecialElectricItem) {
                ((ISpecialElectricItem)itemStack.getItem()).getManager(itemStack).discharge(itemStack,((ISpecialElectricItem)itemStack.getItem()).getMaxCharge(itemStack),0,true,false);
              }
            }
          }
        }
      }
 else       if (entity instanceof EntityExplosive) {
        entity.setDead();
      }
    }
  }
  ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",worldObj,position,0,0,0,0,0,255,10,3);
  this.worldObj.playSoundEffect(position.x,position.y,position.z,Reference.PREFIX + ""String_Node_Str"",4.0F,(1.0F + (worldObj.rand.nextFloat() - worldObj.rand.nextFloat()) * 0.2F) * 0.7F);
}","@Override public void doExplode(){
  if (this.effectBlocks) {
    for (int x=(int)-this.getRadius(); x < (int)this.getRadius(); x++) {
      for (int y=(int)-this.getRadius(); y < (int)this.getRadius(); y++) {
        for (int z=(int)-this.getRadius(); z < (int)this.getRadius(); z++) {
          double dist=MathHelper.sqrt_double((x * x + y * y + z * z));
          Vector3 searchPosition=Vector3.translate(position,new Vector3(x,y,z));
          if (dist > this.getRadius())           continue;
          if (Math.round(position.x + y) == position.intY()) {
            worldObj.spawnParticle(""String_Node_Str"",searchPosition.x,searchPosition.y,searchPosition.z,0,0,0);
          }
          int blockID=searchPosition.getBlockID(worldObj);
          Block block=Block.blocksList[blockID];
          TileEntity tileEntity=searchPosition.getTileEntity(worldObj);
          if (block != null) {
            if (block instanceof IForceFieldBlock) {
              ((IForceFieldBlock)Block.blocksList[blockID]).weakenForceField(worldObj,searchPosition.intX(),searchPosition.intY(),searchPosition.intZ(),1000);
            }
 else             if (block instanceof IEMPBlock) {
              ((IEMPBlock)block).onEMP(worldObj,searchPosition,this);
            }
          }
          if (tileEntity != null) {
            if (tileEntity instanceof IFortronStorage) {
              ((IFortronStorage)tileEntity).provideFortron((int)worldObj.rand.nextFloat() * ((IFortronStorage)tileEntity).getFortronCapacity(),true);
            }
            if (tileEntity instanceof IEnergyContainer) {
              ((IEnergyContainer)tileEntity).setEnergy(null,0);
            }
            if (tileEntity instanceof IEnergyStorage) {
              ((IEnergyStorage)tileEntity).setStored(0);
            }
            for (            ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS)             CompatibilityModule.extractEnergy(tileEntity,dir,Integer.MAX_VALUE,true);
          }
        }
      }
    }
  }
  if (this.effectEntities) {
    List<Entity> entitiesNearby=RadarRegistry.getEntitiesWithinRadius(position.toVector2(),(int)this.getRadius());
    for (    Entity entity : entitiesNearby) {
      if (entity instanceof IMissile && !entity.isEntityEqual(this.controller)) {
        if (((IMissile)entity).getTicksInAir() > -1) {
          ((IMissile)entity).dropMissileAsItem();
        }
      }
    }
    int maxFx=10;
    AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.x - this.getRadius(),position.y - this.getRadius(),position.z - this.getRadius(),position.x + this.getRadius(),position.y + this.getRadius(),position.z + this.getRadius());
    List<Entity> entities=worldObj.getEntitiesWithinAABB(Entity.class,bounds);
    for (    Entity entity : entities) {
      if (entity instanceof EntityLivingBase) {
        if (this.worldObj.isRemote && maxFx > 0) {
          ICBMExplosion.proxy.spawnShock(this.worldObj,this.position,new Vector3(entity),20);
          maxFx--;
        }
        if (entity instanceof EntityCreeper) {
          if (!this.worldObj.isRemote) {
            try {
              ((EntityCreeper)entity).getDataWatcher().updateObject(17,(byte)1);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
        if (entity instanceof EntityPlayer) {
          IInventory inventory=((EntityPlayer)entity).inventory;
          for (int i=0; i < inventory.getSizeInventory(); i++) {
            ItemStack itemStack=inventory.getStackInSlot(i);
            if (itemStack != null) {
              if (itemStack.getItem() instanceof IEMPItem) {
                ((IEMPItem)itemStack.getItem()).onEMP(itemStack,entity,this);
              }
 else               if (itemStack.getItem() instanceof IEnergyItem) {
                ((IEnergyItem)itemStack.getItem()).setEnergy(itemStack,0);
              }
 else               if (itemStack.getItem() instanceof ISpecialElectricItem) {
                ((ISpecialElectricItem)itemStack.getItem()).getManager(itemStack).discharge(itemStack,((ISpecialElectricItem)itemStack.getItem()).getMaxCharge(itemStack),0,true,false);
              }
            }
          }
        }
      }
 else       if (entity instanceof EntityExplosive) {
        entity.setDead();
      }
    }
  }
  ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",worldObj,position,0,0,0,0,0,255,10,3);
  this.worldObj.playSoundEffect(position.x,position.y,position.z,Reference.PREFIX + ""String_Node_Str"",4.0F,(1.0F + (worldObj.rand.nextFloat() - worldObj.rand.nextFloat()) * 0.2F) * 0.7F);
}",0.982325987344534
169810,"@Override public Packet getDescriptionPacket(){
  return ICBMCore.PACKET_TILE.getPacket(this,this.facingDirection,this.tier);
}","@Override public Packet getDescriptionPacket(){
  return ICBMCore.PACKET_TILE.getPacket(this,(byte)this.facingDirection.ordinal(),this.tier);
}",0.9407407407407408
169811,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,proxy);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(proxy);
  FlagRegistry.registerFlag(""String_Node_Str"");
  blockExplosive=ICBMCore.contentRegistry.createBlock(BlockExplosive.class);
  blockMachine=ICBMCore.contentRegistry.createBlock(BlockICBMMachine.class);
  blockMissileAssembler=ICBMCore.contentRegistry.createBlock(BlockMissileAssembler.class);
  itemMissile=ICBMCore.contentRegistry.createItem(ItemMissile.class);
  itemBombDefuser=ICBMCore.contentRegistry.createItem(ItemBombDefuser.class);
  itemRadarGun=ICBMCore.contentRegistry.createItem(ItemRadarGun.class);
  itemRemoteDetonator=ICBMCore.contentRegistry.createItem(ItemRemoteDetonator.class);
  itemLaserDesignator=ICBMCore.contentRegistry.createItem(ItemLaserDesignator.class);
  itemRocketLauncher=ICBMCore.contentRegistry.createItem(ItemRocketLauncher.class);
  itemGrenade=ICBMCore.contentRegistry.createItem(ItemGrenade.class);
  itemBombCart=ICBMCore.contentRegistry.createItem(ItemBombCart.class);
  PoisonToxin.INSTANCE=new PoisonToxin(24,true,5149489,""String_Node_Str"");
  PoisonContagion.INSTANCE=new PoisonContagion(25,false,5149489,""String_Node_Str"");
  PoisonFrostBite.INSTANCE=new PoisonFrostBite(26,false,5149489,""String_Node_Str"");
  CREEPER_DROP_SULFER=Settings.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  CREEPER_BLOW_UP_IN_FIRE=Settings.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  CreativeTabICBM.itemStack=new ItemStack(blockExplosive);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemGrenade,new IBehaviorDispenseItem(){
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing enumFacing=EnumFacing.getFront(blockSource.getBlockMetadata());
        EntityGrenade entity=new EntityGrenade(world,new Vector3(x,y,z),itemStack.getItemDamage());
        entity.setThrowableHeading(enumFacing.getFrontOffsetX(),0.10000000149011612D,enumFacing.getFrontOffsetZ(),0.5F,1.0F);
        world.spawnEntityInWorld(entity);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemBombCart,new IBehaviorDispenseItem(){
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior=new BehaviorDefaultDispenseItem();
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing var3=EnumFacing.getFront(blockSource.getBlockMetadata());
        World var4=blockSource.getWorld();
        double var5=blockSource.getX() + var3.getFrontOffsetX() * 1.125F;
        double var7=blockSource.getY();
        double var9=blockSource.getZ() + var3.getFrontOffsetZ() * 1.125F;
        int var11=blockSource.getXInt() + var3.getFrontOffsetX();
        int var12=blockSource.getYInt();
        int var13=blockSource.getZInt() + var3.getFrontOffsetZ();
        int var14=var4.getBlockId(var11,var12,var13);
        double var15;
        if (BlockRailBase.isRailBlock(var14)) {
          var15=0.0D;
        }
 else {
          if (var14 != 0 || !BlockRailBase.isRailBlock(var4.getBlockId(var11,var12 - 1,var13))) {
            return this.defaultItemDispenseBehavior.dispense(blockSource,itemStack);
          }
          var15=-1.0D;
        }
        EntityBombCart var22=new EntityBombCart(world,var5,var7 + var15,var9,itemStack.getItemDamage());
        world.spawnEntityInWorld(var22);
        world.playAuxSFX(1000,x,y,z,0);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  ForgeChunkManager.setForcedChunkLoadingCallback(this,new LoadingCallback(){
    @Override public void ticketsLoaded(    List<Ticket> tickets,    World world){
      for (      Ticket ticket : tickets) {
        if (ticket.getEntity() instanceof IChunkLoadHandler) {
          ((IChunkLoadHandler)ticket.getEntity()).chunkLoaderInit(ticket);
        }
 else {
          if (ticket.getModData() != null) {
            Vector3 position=new Vector3(ticket.getModData());
            TileEntity tileEntity=position.getTileEntity(ticket.world);
            if (tileEntity instanceof IChunkLoadHandler) {
              ((IChunkLoadHandler)tileEntity).chunkLoaderInit(ticket);
            }
          }
        }
      }
    }
  }
);
  GameRegistry.registerBlock(blockExplosive,ItemBlockExplosive.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockMachine,ItemBlockMachine.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockMissileAssembler,ItemBlockMissileTable.class,""String_Node_Str"");
  ExplosiveHelper.explosionManager=ExplosiveRegistry.class;
  proxy.preInit();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,proxy);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(proxy);
  FlagRegistry.registerFlag(""String_Node_Str"");
  blockExplosive=ICBMCore.contentRegistry.createBlock(BlockExplosive.class);
  blockMachine=ICBMCore.contentRegistry.createBlock(BlockICBMMachine.class);
  blockMissileAssembler=ICBMCore.contentRegistry.createBlock(BlockMissileAssembler.class);
  itemMissile=ICBMCore.contentRegistry.createItem(ItemMissile.class);
  itemBombDefuser=ICBMCore.contentRegistry.createItem(ItemBombDefuser.class);
  itemRadarGun=ICBMCore.contentRegistry.createItem(ItemRadarGun.class);
  itemRemoteDetonator=ICBMCore.contentRegistry.createItem(ItemRemoteDetonator.class);
  itemLaserDesignator=ICBMCore.contentRegistry.createItem(ItemLaserDesignator.class);
  itemRocketLauncher=ICBMCore.contentRegistry.createItem(ItemRocketLauncher.class);
  itemGrenade=ICBMCore.contentRegistry.createItem(ItemGrenade.class);
  itemBombCart=ICBMCore.contentRegistry.createItem(ItemBombCart.class);
  PoisonToxin.INSTANCE=new PoisonToxin(24,true,5149489,""String_Node_Str"");
  PoisonContagion.INSTANCE=new PoisonContagion(25,false,5149489,""String_Node_Str"");
  PoisonFrostBite.INSTANCE=new PoisonFrostBite(26,false,5149489,""String_Node_Str"");
  CREEPER_DROP_SULFER=Settings.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  CREEPER_BLOW_UP_IN_FIRE=Settings.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  TabICBM.itemStack=new ItemStack(blockExplosive);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemGrenade,new IBehaviorDispenseItem(){
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing enumFacing=EnumFacing.getFront(blockSource.getBlockMetadata());
        EntityGrenade entity=new EntityGrenade(world,new Vector3(x,y,z),itemStack.getItemDamage());
        entity.setThrowableHeading(enumFacing.getFrontOffsetX(),0.10000000149011612D,enumFacing.getFrontOffsetZ(),0.5F,1.0F);
        world.spawnEntityInWorld(entity);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemBombCart,new IBehaviorDispenseItem(){
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior=new BehaviorDefaultDispenseItem();
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing var3=EnumFacing.getFront(blockSource.getBlockMetadata());
        World var4=blockSource.getWorld();
        double var5=blockSource.getX() + var3.getFrontOffsetX() * 1.125F;
        double var7=blockSource.getY();
        double var9=blockSource.getZ() + var3.getFrontOffsetZ() * 1.125F;
        int var11=blockSource.getXInt() + var3.getFrontOffsetX();
        int var12=blockSource.getYInt();
        int var13=blockSource.getZInt() + var3.getFrontOffsetZ();
        int var14=var4.getBlockId(var11,var12,var13);
        double var15;
        if (BlockRailBase.isRailBlock(var14)) {
          var15=0.0D;
        }
 else {
          if (var14 != 0 || !BlockRailBase.isRailBlock(var4.getBlockId(var11,var12 - 1,var13))) {
            return this.defaultItemDispenseBehavior.dispense(blockSource,itemStack);
          }
          var15=-1.0D;
        }
        EntityBombCart var22=new EntityBombCart(world,var5,var7 + var15,var9,itemStack.getItemDamage());
        world.spawnEntityInWorld(var22);
        world.playAuxSFX(1000,x,y,z,0);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  ForgeChunkManager.setForcedChunkLoadingCallback(this,new LoadingCallback(){
    @Override public void ticketsLoaded(    List<Ticket> tickets,    World world){
      for (      Ticket ticket : tickets) {
        if (ticket.getEntity() instanceof IChunkLoadHandler) {
          ((IChunkLoadHandler)ticket.getEntity()).chunkLoaderInit(ticket);
        }
 else {
          if (ticket.getModData() != null) {
            Vector3 position=new Vector3(ticket.getModData());
            TileEntity tileEntity=position.getTileEntity(ticket.world);
            if (tileEntity instanceof IChunkLoadHandler) {
              ((IChunkLoadHandler)tileEntity).chunkLoaderInit(ticket);
            }
          }
        }
      }
    }
  }
);
  GameRegistry.registerBlock(blockExplosive,ItemBlockExplosive.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockMachine,ItemBlockMachine.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockMissileAssembler,ItemBlockMissileTable.class,""String_Node_Str"");
  ExplosiveHelper.explosionManager=ExplosiveRegistry.class;
  proxy.preInit();
}",0.9992211838006232
169812,"public BlockExplosive(int id){
  super(id,""String_Node_Str"",Material.tnt);
  this.setHardness(0.0F);
  this.setStepSound(soundGrassFootstep);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
}","public BlockExplosive(int id){
  super(id,""String_Node_Str"",Material.tnt);
  this.setHardness(0.0F);
  this.setStepSound(soundGrassFootstep);
  this.setCreativeTab(TabICBM.INSTANCE);
}",0.9787234042553192
169813,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,ICBMSentry.proxy);
  MinecraftForge.EVENT_BUS.register(this);
  SentryTypes.load();
  blockTurret=ICBMCore.contentRegistry.createBlock(BlockTurret.class,ItemBlockTurret.class,TileTurret.class);
  blockPlatform=ICBMCore.contentRegistry.createBlock(BlockTurretPlatform.class);
  itemAmmo=ICBMCore.contentRegistry.createItem(""String_Node_Str"",ItemAmmo.class,false);
  itemUpgrade=ICBMCore.contentRegistry.createItem(""String_Node_Str"",ItemSentryUpgrade.class,false);
  bulletShell=new ItemStack(itemAmmo,1,0);
  conventionalBullet=new ItemStack(itemAmmo,1,1);
  railgunBullet=new ItemStack(itemAmmo,1,2);
  antimatterBullet=new ItemStack(itemAmmo,1,3);
  EntityRegistry.registerGlobalEntityID(EntitySentryFake.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntitySentryFake.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,this,50,5,true);
  CreativeTabICBM.itemStack=new ItemStack(blockTurret);
  proxy.preInit();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,ICBMSentry.proxy);
  MinecraftForge.EVENT_BUS.register(this);
  SentryTypes.load();
  blockTurret=ICBMCore.contentRegistry.createBlock(BlockTurret.class,ItemBlockTurret.class,TileTurret.class);
  blockPlatform=ICBMCore.contentRegistry.createBlock(BlockTurretPlatform.class);
  itemAmmo=ICBMCore.contentRegistry.createItem(""String_Node_Str"",ItemAmmo.class,false);
  itemUpgrade=ICBMCore.contentRegistry.createItem(""String_Node_Str"",ItemSentryUpgrade.class,false);
  bulletShell=new ItemStack(itemAmmo,1,0);
  conventionalBullet=new ItemStack(itemAmmo,1,1);
  railgunBullet=new ItemStack(itemAmmo,1,2);
  antimatterBullet=new ItemStack(itemAmmo,1,3);
  EntityRegistry.registerGlobalEntityID(EntitySentryFake.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntitySentryFake.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,this,50,5,true);
  TabICBM.itemStack=new ItemStack(blockTurret);
  proxy.preInit();
}",0.967622571692877
169814,"public BlockTurretPlatform(int id){
  super(id,""String_Node_Str"");
  this.setHardness(100f);
  this.setResistance(50f);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
  this.requireSidedTextures=true;
}","public BlockTurretPlatform(int id){
  super(id,""String_Node_Str"");
  this.setHardness(100f);
  this.setResistance(50f);
  this.setCreativeTab(TabICBM.INSTANCE);
  this.requireSidedTextures=true;
}",0.98
169815,"public BlockTurret(int id){
  super(id,""String_Node_Str"");
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
  this.setHardness(100f);
  this.setResistance(50f);
}","public BlockTurret(int id){
  super(id,""String_Node_Str"");
  this.setCreativeTab(TabICBM.INSTANCE);
  this.setHardness(100f);
  this.setResistance(50f);
}",0.9746835443037974
169816,"public BlockCamouflage(int id){
  super(id,""String_Node_Str"",Material.cloth);
  this.setHardness(0.3F);
  this.setResistance(1F);
  this.setStepSound(Block.soundClothFootstep);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
}","public BlockCamouflage(int id){
  super(id,""String_Node_Str"",Material.cloth);
  this.setHardness(0.3F);
  this.setResistance(1F);
  this.setStepSound(Block.soundClothFootstep);
  this.setCreativeTab(TabICBM.INSTANCE);
}",0.9820627802690582
169817,"public BlockGlassButton(int id){
  super(id,true);
  this.setTickRandomly(true);
  this.setUnlocalizedName(Reference.PREFIX + ""String_Node_Str"");
  this.setStepSound(soundGlassFootstep);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
}","public BlockGlassButton(int id){
  super(id,true);
  this.setTickRandomly(true);
  this.setUnlocalizedName(Reference.PREFIX + ""String_Node_Str"");
  this.setStepSound(soundGlassFootstep);
  this.setCreativeTab(TabICBM.INSTANCE);
}",0.9828326180257512
169818,"public BlockGlassPressurePlate(int id){
  super(id,Reference.PREFIX + ""String_Node_Str"",Material.glass,EnumMobType.everything);
  this.setTickRandomly(true);
  this.setResistance(1F);
  this.setHardness(0.3F);
  this.setStepSound(soundGlassFootstep);
  this.setUnlocalizedName(Reference.PREFIX + ""String_Node_Str"");
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
}","public BlockGlassPressurePlate(int id){
  super(id,Reference.PREFIX + ""String_Node_Str"",Material.glass,EnumMobType.everything);
  this.setTickRandomly(true);
  this.setResistance(1F);
  this.setHardness(0.3F);
  this.setStepSound(soundGlassFootstep);
  this.setUnlocalizedName(Reference.PREFIX + ""String_Node_Str"");
  this.setCreativeTab(TabICBM.INSTANCE);
}",0.988950276243094
169819,"public BlockReinforcedGlass(int id){
  super(id,""String_Node_Str"",Material.glass);
  this.setResistance(48);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
}","public BlockReinforcedGlass(int id){
  super(id,""String_Node_Str"",Material.glass);
  this.setResistance(48);
  this.setCreativeTab(TabICBM.INSTANCE);
}",0.9741935483870968
169820,"public BlockSpikes(int id){
  super(id,""String_Node_Str"",Material.cactus);
  this.setHardness(1.0F);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
}","public BlockSpikes(int id){
  super(id,""String_Node_Str"",Material.cactus);
  this.setHardness(1.0F);
  this.setCreativeTab(TabICBM.INSTANCE);
}",0.9727891156462584
169821,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,proxy);
  Modstats.instance().getReporter().registerMod(INSTANCE);
  MinecraftForge.EVENT_BUS.register(INSTANCE);
  LOGGER.fine(""String_Node_Str"" + LanguageUtility.loadLanguages(icbm.Reference.LANGUAGE_PATH,icbm.Reference.LANGUAGES) + ""String_Node_Str"");
  Settings.initiate();
  Settings.CONFIGURATION.load();
  blockSulfurOre=contentRegistry.createBlock(BlockSulfureOre.class);
  blockGlassPlate=contentRegistry.createBlock(BlockGlassPressurePlate.class);
  blockGlassButton=contentRegistry.createBlock(BlockGlassButton.class);
  blockProximityDetector=contentRegistry.createBlock(BlockProximityDetector.class);
  blockSpikes=contentRegistry.createBlock(BlockSpikes.class);
  blockCamo=contentRegistry.createBlock(BlockCamouflage.class);
  blockConcrete=contentRegistry.createBlock(BlockConcrete.class);
  blockReinforcedGlass=contentRegistry.createBlock(BlockReinforcedGlass.class);
  itemPoisonPowder=contentRegistry.createItem(""String_Node_Str"",ItemPoisonPowder.class);
  itemSulfurDust=contentRegistry.createItem(""String_Node_Str"",ItemSulfureDust.class);
  itemAntidote=contentRegistry.createItem(""String_Node_Str"",ItemAntidote.class);
  itemSignalDisrupter=contentRegistry.createItem(""String_Node_Str"",ItemSignalDisrupter.class);
  itemTracker=contentRegistry.createItem(""String_Node_Str"",ItemTracker.class);
  sulfurGenerator=new OreGeneratorICBM(""String_Node_Str"",""String_Node_Str"",new ItemStack(blockSulfurOre),0,40,20,4).enable(Settings.CONFIGURATION);
  if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
    blockRadioactive=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
    LOGGER.fine(""String_Node_Str"");
  }
 else {
    blockRadioactive=Block.mycelium;
  }
  Block.obsidian.setResistance(Settings.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
  LOGGER.fine(""String_Node_Str"" + Block.obsidian.getExplosionResistance(null));
  OreDictionary.registerOre(""String_Node_Str"",itemSulfurDust);
  OreGenerator.addOre(sulfurGenerator);
  CreativeTabICBM.itemStack=new ItemStack(blockProximityDetector);
  GameRegistry.registerBlock(blockSulfurOre,""String_Node_Str"");
  GameRegistry.registerBlock(blockGlassPlate,""String_Node_Str"");
  GameRegistry.registerBlock(blockGlassButton,""String_Node_Str"");
  GameRegistry.registerBlock(blockProximityDetector,""String_Node_Str"");
  GameRegistry.registerBlock(blockCamo,""String_Node_Str"");
  GameRegistry.registerBlock(blockReinforcedGlass,""String_Node_Str"");
  GameRegistry.registerBlock(blockSpikes,ItemBlockSpikes.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockConcrete,ItemBlockMetadata.class,""String_Node_Str"");
  proxy.preInit();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,proxy);
  Modstats.instance().getReporter().registerMod(INSTANCE);
  MinecraftForge.EVENT_BUS.register(INSTANCE);
  LOGGER.fine(""String_Node_Str"" + LanguageUtility.loadLanguages(icbm.Reference.LANGUAGE_PATH,icbm.Reference.LANGUAGES) + ""String_Node_Str"");
  Settings.initiate();
  Settings.CONFIGURATION.load();
  blockSulfurOre=contentRegistry.createBlock(BlockSulfureOre.class);
  blockGlassPlate=contentRegistry.createBlock(BlockGlassPressurePlate.class);
  blockGlassButton=contentRegistry.createBlock(BlockGlassButton.class);
  blockProximityDetector=contentRegistry.createBlock(BlockProximityDetector.class);
  blockSpikes=contentRegistry.createBlock(BlockSpikes.class);
  blockCamo=contentRegistry.createBlock(BlockCamouflage.class);
  blockConcrete=contentRegistry.createBlock(BlockConcrete.class);
  blockReinforcedGlass=contentRegistry.createBlock(BlockReinforcedGlass.class);
  itemPoisonPowder=contentRegistry.createItem(""String_Node_Str"",ItemPoisonPowder.class);
  itemSulfurDust=contentRegistry.createItem(""String_Node_Str"",ItemSulfureDust.class);
  itemAntidote=contentRegistry.createItem(""String_Node_Str"",ItemAntidote.class);
  itemSignalDisrupter=contentRegistry.createItem(""String_Node_Str"",ItemSignalDisrupter.class);
  itemTracker=contentRegistry.createItem(""String_Node_Str"",ItemTracker.class);
  sulfurGenerator=new OreGeneratorICBM(""String_Node_Str"",""String_Node_Str"",new ItemStack(blockSulfurOre),0,40,20,4).enable(Settings.CONFIGURATION);
  if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
    blockRadioactive=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
    LOGGER.fine(""String_Node_Str"");
  }
 else {
    blockRadioactive=Block.mycelium;
  }
  Block.obsidian.setResistance(Settings.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
  LOGGER.fine(""String_Node_Str"" + Block.obsidian.getExplosionResistance(null));
  OreDictionary.registerOre(""String_Node_Str"",itemSulfurDust);
  OreGenerator.addOre(sulfurGenerator);
  TabICBM.itemStack=new ItemStack(blockProximityDetector);
  GameRegistry.registerBlock(blockSulfurOre,""String_Node_Str"");
  GameRegistry.registerBlock(blockGlassPlate,""String_Node_Str"");
  GameRegistry.registerBlock(blockGlassButton,""String_Node_Str"");
  GameRegistry.registerBlock(blockProximityDetector,""String_Node_Str"");
  GameRegistry.registerBlock(blockCamo,""String_Node_Str"");
  GameRegistry.registerBlock(blockReinforcedGlass,""String_Node_Str"");
  GameRegistry.registerBlock(blockSpikes,ItemBlockSpikes.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockConcrete,ItemBlockMetadata.class,""String_Node_Str"");
  proxy.preInit();
}",0.7745872218234028
169822,"public BlockICBM(int id,String name,Material material){
  super(id,material);
  setUnlocalizedName(Reference.PREFIX + name);
  setTextureName(Reference.PREFIX + name);
  setCreativeTab(CreativeTabICBM.INSTANCE);
}","public BlockICBM(int id,String name,Material material){
  super(id,material);
  setUnlocalizedName(Reference.PREFIX + name);
  setTextureName(Reference.PREFIX + name);
  setCreativeTab(TabICBM.INSTANCE);
}",0.9808612440191388
169823,"public ItemICBMBase(int id,String name){
  super(id);
  this.setUnlocalizedName(Reference.PREFIX + name);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
  this.setTextureName(Reference.PREFIX + name);
}","public ItemICBMBase(int id,String name){
  super(id);
  this.setUnlocalizedName(Reference.PREFIX + name);
  this.setCreativeTab(TabICBM.INSTANCE);
  this.setTextureName(Reference.PREFIX + name);
}",0.98
169824,"public ItemICBMElectrical(int id,String name){
  super(Settings.CONFIGURATION.getItem(name,id).getInt(id));
  this.setUnlocalizedName(Reference.PREFIX + name);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
  this.setTextureName(Reference.PREFIX + name);
}","public ItemICBMElectrical(int id,String name){
  super(Settings.CONFIGURATION.getItem(name,id).getInt(id));
  this.setUnlocalizedName(Reference.PREFIX + name);
  this.setCreativeTab(TabICBM.INSTANCE);
  this.setTextureName(Reference.PREFIX + name);
}",0.984251968503937
169825,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,ICBMSentry.proxy);
  MinecraftForge.EVENT_BUS.register(this);
  Settings.CONFIGURATION.load();
  SentryTypes.load();
  blockTurret=ICBMCore.contentRegistry.createBlock(""String_Node_Str"",BlockTurret.class,ItemBlockTurret.class,null,false);
  blockPlatform=ICBMCore.contentRegistry.createBlock(""String_Node_Str"",BlockTurretPlatform.class,null,null,false);
  itemAmmo=ICBMCore.contentRegistry.createItem(""String_Node_Str"",ItemAmmo.class,false);
  itemUpgrade=ICBMCore.contentRegistry.createItem(""String_Node_Str"",ItemSentryUpgrade.class,false);
  bulletShell=new ItemStack(itemAmmo,1,0);
  conventionalBullet=new ItemStack(itemAmmo,1,1);
  railgunBullet=new ItemStack(itemAmmo,1,2);
  antimatterBullet=new ItemStack(itemAmmo,1,3);
  EntityRegistry.registerGlobalEntityID(EntitySentryFake.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntitySentryFake.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,this,50,5,true);
  CreativeTabICBM.itemStack=new ItemStack(blockTurret);
  proxy.preInit();
  Settings.CONFIGURATION.save();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,ICBMSentry.proxy);
  MinecraftForge.EVENT_BUS.register(this);
  Settings.CONFIGURATION.load();
  SentryTypes.load();
  blockTurret=ICBMCore.contentRegistry.createBlock(BlockTurret.class,ItemBlockTurret.class);
  blockPlatform=ICBMCore.contentRegistry.createBlock(BlockTurretPlatform.class);
  itemAmmo=ICBMCore.contentRegistry.createItem(""String_Node_Str"",ItemAmmo.class,false);
  itemUpgrade=ICBMCore.contentRegistry.createItem(""String_Node_Str"",ItemSentryUpgrade.class,false);
  bulletShell=new ItemStack(itemAmmo,1,0);
  conventionalBullet=new ItemStack(itemAmmo,1,1);
  railgunBullet=new ItemStack(itemAmmo,1,2);
  antimatterBullet=new ItemStack(itemAmmo,1,3);
  EntityRegistry.registerGlobalEntityID(EntitySentryFake.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntitySentryFake.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,this,50,5,true);
  CreativeTabICBM.itemStack=new ItemStack(blockTurret);
  proxy.preInit();
  Settings.CONFIGURATION.save();
}",0.9111969111969112
169826,"@Override public void render(ForgeDirection side,TileSentry tile,float yaw,float pitch){
  GL11.glRotatef(180F,0F,0F,1F);
  GL11.glRotatef(180F,0F,1F,0F);
  GL11.glRotatef(yaw,0F,1F,0F);
  MODEL.renderBody(0.0625F);
  MODEL.renderRadar(0.0625F);
  MODEL.renderCannon(0.0625F,(float)Math.toRadians(pitch));
}","@Override public void render(ForgeDirection side,TileSentry tile,float yaw,float pitch){
  GL11.glTranslatef(0.5f,2.2f,0.5f);
  GL11.glScalef(1.5f,1.5f,1.5f);
  GL11.glRotatef(180F,0F,0F,1F);
  GL11.glRotatef(yaw,0F,1F,0F);
  MODEL.renderBody(0.0625F);
  MODEL.renderRadar(0.0625F);
  MODEL.renderCannon(0.0625F,(float)Math.toRadians(pitch));
}",0.8417818740399385
169827,"@Override public void render(ForgeDirection side,TileSentry tile,float yaw,float pitch){
  GL11.glRotatef(180F,0F,0F,1F);
  GL11.glRotatef(180F,0F,1F,0F);
  GL11.glRotatef(yaw,0F,1F,0F);
  MODEL.renderYaw(0.0625F);
  GL11.glRotatef(pitch,1F,0F,0F);
  MODEL.renderYawPitch(0.0625F);
}","@Override public void render(ForgeDirection side,TileSentry tile,float yaw,float pitch){
  GL11.glTranslatef(0.5f,2.2f,0.5f);
  GL11.glScalef(1.5f,1.5f,1.5f);
  GL11.glRotatef(180F,0F,0F,1F);
  GL11.glRotatef(yaw,0F,1F,0F);
  MODEL.renderYaw(0.0625F);
  GL11.glRotatef(pitch,1F,0F,0F);
  MODEL.renderYawPitch(0.0625F);
}",0.8291873963515755
169828,"@Override public void render(ForgeDirection side,TileSentry sentry,float yaw,float pitch){
  GL11.glRotatef(180F,0F,0F,1F);
  GL11.glRotatef(180F,0F,1F,0F);
  GL11.glRotatef(yaw,0F,1F,0F);
  MODEL.renderYaw(0.0625F);
  GL11.glRotatef(pitch,1F,0F,0F);
  MODEL.renderYawPitch(0.0625F,0);
}","@Override public void render(ForgeDirection side,TileSentry sentry,float yaw,float pitch){
  GL11.glTranslatef(0.5f,2.2f,0.5f);
  GL11.glScalef(1.5f,1.5f,1.5f);
  GL11.glRotatef(180F,0F,0F,1F);
  GL11.glRotatef(yaw,0F,1F,0F);
  MODEL.renderYaw(0.0625F);
  GL11.glRotatef(pitch,1F,0F,0F);
  MODEL.renderYawPitch(0.0625F,0);
}",0.8314238952536824
169829,"@Override public void render(ForgeDirection side,TileSentry tile,float yaw,float pitch){
  GL11.glRotatef(180F,0F,0F,1F);
  GL11.glRotatef(180F,0F,1F,0F);
  MODEL.render((float)Math.toRadians(yaw),(float)Math.toRadians(pitch),0.0625F);
}","@Override public void render(ForgeDirection side,TileSentry tile,float yaw,float pitch){
  GL11.glTranslatef(0.5f,2.2f,0.5f);
  GL11.glScalef(1.5f,1.5f,1.5f);
  GL11.glRotatef(180F,0F,0F,1F);
  MODEL.render((float)Math.toRadians(yaw),(float)Math.toRadians(pitch),0.0625F);
}",0.7984344422700587
169830,"public BlockTurretPlatform(int id){
  super(id,""String_Node_Str"",UniversalElectricity.machine);
  this.setHardness(100f);
  this.setResistance(50f);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
  this.requireSidedTextures=true;
}","public BlockTurretPlatform(){
  super(""String_Node_Str"");
  this.setHardness(100f);
  this.setResistance(50f);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
  this.requireSidedTextures=true;
}",0.911214953271028
169831,"public BlockTurret(int id){
  super(id,""String_Node_Str"",UniversalElectricity.machine);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
  this.setHardness(100f);
  this.setResistance(50f);
}","public BlockTurret(){
  super(""String_Node_Str"");
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
  this.setHardness(100f);
  this.setResistance(50f);
}",0.8895348837209303
169832,"public void renderingLivingEvent(Pre evt){
  if (evt.entity instanceof EntityLivingBase) {
    if (evt.entity.getActivePotionEffect(PDongShang.INSTANCE) != null) {
      try {
        ModelBase modelBase=(ModelBase)ReflectionHelper.getPrivateValue(RendererLivingEntity.class,evt.renderer,2);
        if (modelBase != null) {
          if (evt.entity.isInvisible()) {
            GL11.glDepthMask(false);
          }
 else {
            GL11.glDepthMask(true);
          }
          float f1=evt.entity.ticksExisted;
          RenderUtility.setTerrainTexture();
          GL11.glMatrixMode(GL11.GL_TEXTURE);
          GL11.glLoadIdentity();
          float f2=f1 * 0.01F;
          float f3=f1 * 0.01F;
          GL11.glTranslatef(f2,f3,0.0F);
          GL11.glScalef(2,2,2);
          evt.renderer.setRenderPassModel(modelBase);
          GL11.glMatrixMode(GL11.GL_MODELVIEW);
          GL11.glEnable(GL11.GL_BLEND);
          float f4=0.5F;
          GL11.glColor4f(f4,f4,f4,1.0F);
          GL11.glDisable(GL11.GL_LIGHTING);
          GL11.glBlendFunc(GL11.GL_ONE,GL11.GL_ONE);
          modelBase.render(evt.entity,(float)evt.entity.posX,(float)evt.entity.posY,(float)evt.entity.posZ,evt.entity.rotationPitch,evt.entity.rotationYaw,0.0625F);
          GL11.glMatrixMode(GL11.GL_TEXTURE);
          GL11.glLoadIdentity();
          GL11.glMatrixMode(GL11.GL_MODELVIEW);
          GL11.glEnable(GL11.GL_LIGHTING);
          GL11.glDisable(GL11.GL_BLEND);
        }
      }
 catch (      Exception e) {
        ICBMCore.LOGGER.severe(""String_Node_Str"");
        e.printStackTrace();
      }
    }
  }
}","public void renderingLivingEvent(Pre evt){
  if (evt.entity instanceof EntityLivingBase) {
    if (evt.entity.getActivePotionEffect(PoisonFrostBite.INSTANCE) != null) {
      try {
        ModelBase modelBase=(ModelBase)ReflectionHelper.getPrivateValue(RendererLivingEntity.class,evt.renderer,2);
        if (modelBase != null) {
          if (evt.entity.isInvisible()) {
            GL11.glDepthMask(false);
          }
 else {
            GL11.glDepthMask(true);
          }
          float f1=evt.entity.ticksExisted;
          RenderUtility.setTerrainTexture();
          GL11.glMatrixMode(GL11.GL_TEXTURE);
          GL11.glLoadIdentity();
          float f2=f1 * 0.01F;
          float f3=f1 * 0.01F;
          GL11.glTranslatef(f2,f3,0.0F);
          GL11.glScalef(2,2,2);
          evt.renderer.setRenderPassModel(modelBase);
          GL11.glMatrixMode(GL11.GL_MODELVIEW);
          GL11.glEnable(GL11.GL_BLEND);
          float f4=0.5F;
          GL11.glColor4f(f4,f4,f4,1.0F);
          GL11.glDisable(GL11.GL_LIGHTING);
          GL11.glBlendFunc(GL11.GL_ONE,GL11.GL_ONE);
          modelBase.render(evt.entity,(float)evt.entity.posX,(float)evt.entity.posY,(float)evt.entity.posZ,evt.entity.rotationPitch,evt.entity.rotationYaw,0.0625F);
          GL11.glMatrixMode(GL11.GL_TEXTURE);
          GL11.glLoadIdentity();
          GL11.glMatrixMode(GL11.GL_MODELVIEW);
          GL11.glEnable(GL11.GL_LIGHTING);
          GL11.glDisable(GL11.GL_BLEND);
        }
      }
 catch (      Exception e) {
        ICBMCore.LOGGER.severe(""String_Node_Str"");
        e.printStackTrace();
      }
    }
  }
}",0.992832658148956
169833,"@Override protected void doPoisonEntity(Vector3 emitPosition,EntityLivingBase entity,int amplifier){
  if (this.isContagious) {
    entity.addPotionEffect(new CustomPotionEffect(PChuanRanDu.INSTANCE.getId(),45 * 20,amplifier,null));
    entity.addPotionEffect(new CustomPotionEffect(Potion.blindness.id,15 * 20,amplifier));
  }
 else {
    entity.addPotionEffect(new CustomPotionEffect(PDaDu.INSTANCE.getId(),30 * 20,amplifier,null));
    entity.addPotionEffect(new CustomPotionEffect(Potion.confusion.id,30 * 20,amplifier));
  }
  entity.addPotionEffect(new CustomPotionEffect(Potion.hunger.id,30 * 20,amplifier));
  entity.addPotionEffect(new CustomPotionEffect(Potion.weakness.id,35 * 20,amplifier));
  entity.addPotionEffect(new CustomPotionEffect(Potion.digSlowdown.id,60 * 20,amplifier));
}","@Override protected void doPoisonEntity(Vector3 emitPosition,EntityLivingBase entity,int amplifier){
  if (this.isContagious) {
    entity.addPotionEffect(new CustomPotionEffect(PoisonContagion.INSTANCE.getId(),45 * 20,amplifier,null));
    entity.addPotionEffect(new CustomPotionEffect(Potion.blindness.id,15 * 20,amplifier));
  }
 else {
    entity.addPotionEffect(new CustomPotionEffect(PoisonToxin.INSTANCE.getId(),30 * 20,amplifier,null));
    entity.addPotionEffect(new CustomPotionEffect(Potion.confusion.id,30 * 20,amplifier));
  }
  entity.addPotionEffect(new CustomPotionEffect(Potion.hunger.id,30 * 20,amplifier));
  entity.addPotionEffect(new CustomPotionEffect(Potion.weakness.id,35 * 20,amplifier));
  entity.addPotionEffect(new CustomPotionEffect(Potion.digSlowdown.id,60 * 20,amplifier));
}",0.976279650436954
169834,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,proxy);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(proxy);
  Settings.CONFIGURATION.load();
  blockExplosive=new BlockExplosive(Settings.getNextBlockID());
  blockMachine=new BlockICBMMachine(Settings.getNextBlockID());
  blockMissileAssembler=new BlockMissileAssembler(Settings.getNextBlockID());
  itemMissile=new ItemMissile(Settings.getNextItemID(),""String_Node_Str"");
  itemBombDefuser=new ItemBombDefuser(Settings.getNextItemID());
  itemRadarGun=new ItemRadarGun(Settings.getNextItemID());
  itemRemoteDetonator=new ItemRemoteDetonator(Settings.getNextItemID());
  itemLaserDesignator=new ItemLaserDesignator(Settings.getNextItemID());
  itemRocketLauncher=new ItemRocketLauncher(Settings.getNextItemID());
  itemGrenade=new ItemGrenade(Settings.getNextItemID());
  itemBombCart=new ItemBombCart(Settings.getNextItemID());
  PDaDu.INSTANCE=new PDaDu(22,true,5149489,""String_Node_Str"");
  PChuanRanDu.INSTANCE=new PChuanRanDu(23,false,5149489,""String_Node_Str"");
  PDongShang.INSTANCE=new PDongShang(24,false,5149489,""String_Node_Str"");
  CREEPER_DROP_SULFER=Settings.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  CREEPER_BLOW_UP_IN_FIRE=Settings.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  Settings.CONFIGURATION.save();
  CreativeTabICBM.itemStack=new ItemStack(blockExplosive);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemGrenade,new IBehaviorDispenseItem(){
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing enumFacing=EnumFacing.getFront(blockSource.getBlockMetadata());
        EntityGrenade entity=new EntityGrenade(world,new Vector3(x,y,z),itemStack.getItemDamage());
        entity.setThrowableHeading(enumFacing.getFrontOffsetX(),0.10000000149011612D,enumFacing.getFrontOffsetZ(),0.5F,1.0F);
        world.spawnEntityInWorld(entity);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemBombCart,new IBehaviorDispenseItem(){
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior=new BehaviorDefaultDispenseItem();
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing var3=EnumFacing.getFront(blockSource.getBlockMetadata());
        World var4=blockSource.getWorld();
        double var5=blockSource.getX() + var3.getFrontOffsetX() * 1.125F;
        double var7=blockSource.getY();
        double var9=blockSource.getZ() + var3.getFrontOffsetZ() * 1.125F;
        int var11=blockSource.getXInt() + var3.getFrontOffsetX();
        int var12=blockSource.getYInt();
        int var13=blockSource.getZInt() + var3.getFrontOffsetZ();
        int var14=var4.getBlockId(var11,var12,var13);
        double var15;
        if (BlockRailBase.isRailBlock(var14)) {
          var15=0.0D;
        }
 else {
          if (var14 != 0 || !BlockRailBase.isRailBlock(var4.getBlockId(var11,var12 - 1,var13))) {
            return this.defaultItemDispenseBehavior.dispense(blockSource,itemStack);
          }
          var15=-1.0D;
        }
        EntityBombCart var22=new EntityBombCart(world,var5,var7 + var15,var9,itemStack.getItemDamage());
        world.spawnEntityInWorld(var22);
        world.playAuxSFX(1000,x,y,z,0);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  ForgeChunkManager.setForcedChunkLoadingCallback(this,new LoadingCallback(){
    @Override public void ticketsLoaded(    List<Ticket> tickets,    World world){
      for (      Ticket ticket : tickets) {
        if (ticket.getEntity() instanceof IChunkLoadHandler) {
          ((IChunkLoadHandler)ticket.getEntity()).chunkLoaderInit(ticket);
        }
 else {
          if (ticket.getModData() != null) {
            Vector3 position=new Vector3(ticket.getModData());
            TileEntity tileEntity=position.getTileEntity(ticket.world);
            if (tileEntity instanceof IChunkLoadHandler) {
              ((IChunkLoadHandler)tileEntity).chunkLoaderInit(ticket);
            }
          }
        }
      }
    }
  }
);
  GameRegistry.registerBlock(blockExplosive,ItemBlockExplosive.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockMachine,ItemBlockMachine.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockMissileAssembler,ItemBlockMissileTable.class,""String_Node_Str"");
  ExplosiveHelper.explosionManager=ExplosiveRegistry.class;
  proxy.preInit();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,proxy);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(proxy);
  Settings.CONFIGURATION.load();
  blockExplosive=new BlockExplosive(Settings.getNextBlockID());
  blockMachine=new BlockICBMMachine(Settings.getNextBlockID());
  blockMissileAssembler=new BlockMissileAssembler(Settings.getNextBlockID());
  itemMissile=new ItemMissile(Settings.getNextItemID(),""String_Node_Str"");
  itemBombDefuser=new ItemBombDefuser(Settings.getNextItemID());
  itemRadarGun=new ItemRadarGun(Settings.getNextItemID());
  itemRemoteDetonator=new ItemRemoteDetonator(Settings.getNextItemID());
  itemLaserDesignator=new ItemLaserDesignator(Settings.getNextItemID());
  itemRocketLauncher=new ItemRocketLauncher(Settings.getNextItemID());
  itemGrenade=new ItemGrenade(Settings.getNextItemID());
  itemBombCart=new ItemBombCart(Settings.getNextItemID());
  PoisonToxin.INSTANCE=new PoisonToxin(24,true,5149489,""String_Node_Str"");
  PoisonContagion.INSTANCE=new PoisonContagion(25,false,5149489,""String_Node_Str"");
  PoisonFrostBite.INSTANCE=new PoisonFrostBite(26,false,5149489,""String_Node_Str"");
  CREEPER_DROP_SULFER=Settings.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  CREEPER_BLOW_UP_IN_FIRE=Settings.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  Settings.CONFIGURATION.save();
  CreativeTabICBM.itemStack=new ItemStack(blockExplosive);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemGrenade,new IBehaviorDispenseItem(){
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing enumFacing=EnumFacing.getFront(blockSource.getBlockMetadata());
        EntityGrenade entity=new EntityGrenade(world,new Vector3(x,y,z),itemStack.getItemDamage());
        entity.setThrowableHeading(enumFacing.getFrontOffsetX(),0.10000000149011612D,enumFacing.getFrontOffsetZ(),0.5F,1.0F);
        world.spawnEntityInWorld(entity);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemBombCart,new IBehaviorDispenseItem(){
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior=new BehaviorDefaultDispenseItem();
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing var3=EnumFacing.getFront(blockSource.getBlockMetadata());
        World var4=blockSource.getWorld();
        double var5=blockSource.getX() + var3.getFrontOffsetX() * 1.125F;
        double var7=blockSource.getY();
        double var9=blockSource.getZ() + var3.getFrontOffsetZ() * 1.125F;
        int var11=blockSource.getXInt() + var3.getFrontOffsetX();
        int var12=blockSource.getYInt();
        int var13=blockSource.getZInt() + var3.getFrontOffsetZ();
        int var14=var4.getBlockId(var11,var12,var13);
        double var15;
        if (BlockRailBase.isRailBlock(var14)) {
          var15=0.0D;
        }
 else {
          if (var14 != 0 || !BlockRailBase.isRailBlock(var4.getBlockId(var11,var12 - 1,var13))) {
            return this.defaultItemDispenseBehavior.dispense(blockSource,itemStack);
          }
          var15=-1.0D;
        }
        EntityBombCart var22=new EntityBombCart(world,var5,var7 + var15,var9,itemStack.getItemDamage());
        world.spawnEntityInWorld(var22);
        world.playAuxSFX(1000,x,y,z,0);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  ForgeChunkManager.setForcedChunkLoadingCallback(this,new LoadingCallback(){
    @Override public void ticketsLoaded(    List<Ticket> tickets,    World world){
      for (      Ticket ticket : tickets) {
        if (ticket.getEntity() instanceof IChunkLoadHandler) {
          ((IChunkLoadHandler)ticket.getEntity()).chunkLoaderInit(ticket);
        }
 else {
          if (ticket.getModData() != null) {
            Vector3 position=new Vector3(ticket.getModData());
            TileEntity tileEntity=position.getTileEntity(ticket.world);
            if (tileEntity instanceof IChunkLoadHandler) {
              ((IChunkLoadHandler)tileEntity).chunkLoaderInit(ticket);
            }
          }
        }
      }
    }
  }
);
  GameRegistry.registerBlock(blockExplosive,ItemBlockExplosive.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockMachine,ItemBlockMachine.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockMissileAssembler,ItemBlockMissileTable.class,""String_Node_Str"");
  ExplosiveHelper.explosionManager=ExplosiveRegistry.class;
  proxy.preInit();
}",0.9876444798724592
169835,"@Override public void doPostExplode(){
  super.doPostExplode();
  if (!this.worldObj.isRemote) {
    if (this.canFocusBeam(this.worldObj,position) && this.thread.isComplete) {
      List<EntityLiving> livingEntities=worldObj.getEntitiesWithinAABB(EntityLiving.class,AxisAlignedBB.getBoundingBox(position.x - getRadius(),position.y - getRadius(),position.z - getRadius(),position.x + getRadius(),position.y + getRadius(),position.z + getRadius()));
      Iterator<EntityLiving> it=livingEntities.iterator();
      while (it.hasNext()) {
        EntityLiving entity=it.next();
        entity.addPotionEffect(new CustomPotionEffect(PDongShang.INSTANCE.getId(),60 * 20,1,null));
        entity.addPotionEffect(new PotionEffect(Potion.confusion.id,10 * 20,2));
        entity.addPotionEffect(new PotionEffect(Potion.digSlowdown.id,120 * 20,2));
        entity.addPotionEffect(new PotionEffect(Potion.moveSlowdown.id,120 * 20,4));
      }
      for (      Vector3 targetPosition : this.thread.results) {
        double distance=Vector3.distance(targetPosition,position);
        double distanceFromCenter=position.distance(targetPosition);
        if (distanceFromCenter > this.getRadius())         continue;
        double chance=this.getRadius() - (Math.random() * distanceFromCenter);
        if (chance > distanceFromCenter * 0.55) {
          int blockID=this.worldObj.getBlockId(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ());
          if (blockID == Block.fire.blockID || blockID == Block.lavaMoving.blockID || blockID == Block.lavaStill.blockID) {
            this.worldObj.setBlock(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ(),Block.snow.blockID,0,2);
          }
 else           if (blockID == 0 && this.worldObj.getBlockId(targetPosition.intX(),targetPosition.intY() - 1,targetPosition.intZ()) != Block.ice.blockID && worldObj.getBlockId(targetPosition.intX(),targetPosition.intY() - 1,targetPosition.intZ()) != 0) {
            this.worldObj.setBlock(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ(),Block.ice.blockID,0,2);
          }
        }
      }
      this.worldObj.playSoundEffect(position.x + 0.5D,position.y + 0.5D,position.z + 0.5D,Reference.PREFIX + ""String_Node_Str"",6.0F,(1.0F + (worldObj.rand.nextFloat() - worldObj.rand.nextFloat()) * 0.2F) * 1F);
    }
    this.worldObj.setWorldTime(1200);
  }
}","@Override public void doPostExplode(){
  super.doPostExplode();
  if (!this.worldObj.isRemote) {
    if (this.canFocusBeam(this.worldObj,position) && this.thread.isComplete) {
      List<EntityLiving> livingEntities=worldObj.getEntitiesWithinAABB(EntityLiving.class,AxisAlignedBB.getBoundingBox(position.x - getRadius(),position.y - getRadius(),position.z - getRadius(),position.x + getRadius(),position.y + getRadius(),position.z + getRadius()));
      Iterator<EntityLiving> it=livingEntities.iterator();
      while (it.hasNext()) {
        EntityLiving entity=it.next();
        entity.addPotionEffect(new CustomPotionEffect(PoisonFrostBite.INSTANCE.getId(),60 * 20,1,null));
        entity.addPotionEffect(new PotionEffect(Potion.confusion.id,10 * 20,2));
        entity.addPotionEffect(new PotionEffect(Potion.digSlowdown.id,120 * 20,2));
        entity.addPotionEffect(new PotionEffect(Potion.moveSlowdown.id,120 * 20,4));
      }
      for (      Vector3 targetPosition : this.thread.results) {
        double distance=Vector3.distance(targetPosition,position);
        double distanceFromCenter=position.distance(targetPosition);
        if (distanceFromCenter > this.getRadius())         continue;
        double chance=this.getRadius() - (Math.random() * distanceFromCenter);
        if (chance > distanceFromCenter * 0.55) {
          int blockID=this.worldObj.getBlockId(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ());
          if (blockID == Block.fire.blockID || blockID == Block.lavaMoving.blockID || blockID == Block.lavaStill.blockID) {
            this.worldObj.setBlock(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ(),Block.snow.blockID,0,2);
          }
 else           if (blockID == 0 && this.worldObj.getBlockId(targetPosition.intX(),targetPosition.intY() - 1,targetPosition.intZ()) != Block.ice.blockID && worldObj.getBlockId(targetPosition.intX(),targetPosition.intY() - 1,targetPosition.intZ()) != 0) {
            this.worldObj.setBlock(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ(),Block.ice.blockID,0,2);
          }
        }
      }
      this.worldObj.playSoundEffect(position.x + 0.5D,position.y + 0.5D,position.z + 0.5D,Reference.PREFIX + ""String_Node_Str"",6.0F,(1.0F + (worldObj.rand.nextFloat() - worldObj.rand.nextFloat()) * 0.2F) * 1F);
    }
    this.worldObj.setWorldTime(1200);
  }
}",0.9951711106445518
169836,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,ICBMSentry.proxy);
  MinecraftForge.EVENT_BUS.register(this);
  Settings.CONFIGURATION.load();
  blockTurret=new BlockTurret(BLOCK_ID_PREFIX);
  blockPlatform=new BlockTurretPlatform(BLOCK_ID_PREFIX + 1);
  itemAmmo=new ItemAmmo(ITEM_ID_PREFIX + 1);
  itemUpgrade=new ItemSentryUpgrade(ITEM_ID_PREFIX + 2);
  Settings.CONFIGURATION.save();
  bulletShell=new ItemStack(itemAmmo,1,0);
  conventionalBullet=new ItemStack(itemAmmo,1,1);
  railgunBullet=new ItemStack(itemAmmo,1,2);
  antimatterBullet=new ItemStack(itemAmmo,1,3);
  GameRegistry.registerBlock(blockTurret,ItemBlockTurret.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockPlatform,""String_Node_Str"");
  EntityRegistry.registerGlobalEntityID(EntitySentryFake.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntitySentryFake.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,this,50,5,true);
  CreativeTabICBM.itemStack=new ItemStack(blockTurret);
  proxy.preInit();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,ICBMSentry.proxy);
  MinecraftForge.EVENT_BUS.register(this);
  SaveManager.registerClass(""String_Node_Str"",Sentry.class);
  Settings.CONFIGURATION.load();
  blockTurret=new BlockTurret(BLOCK_ID_PREFIX);
  blockPlatform=new BlockTurretPlatform(BLOCK_ID_PREFIX + 1);
  itemAmmo=new ItemAmmo(ITEM_ID_PREFIX + 1);
  itemUpgrade=new ItemSentryUpgrade(ITEM_ID_PREFIX + 2);
  Settings.CONFIGURATION.save();
  bulletShell=new ItemStack(itemAmmo,1,0);
  conventionalBullet=new ItemStack(itemAmmo,1,1);
  railgunBullet=new ItemStack(itemAmmo,1,2);
  antimatterBullet=new ItemStack(itemAmmo,1,3);
  GameRegistry.registerBlock(blockTurret,ItemBlockTurret.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockPlatform,""String_Node_Str"");
  EntityRegistry.registerGlobalEntityID(EntitySentryFake.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntitySentryFake.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,this,50,5,true);
  CreativeTabICBM.itemStack=new ItemStack(blockTurret);
  proxy.preInit();
}",0.9732103645147124
169837,"public boolean canFire(){
  return true;
}","public boolean canFire(){
  return false;
}",0.9176470588235294
169838,"@Override protected boolean onUpdateTask(){
  super.onUpdateTask();
  if (this.tileEntity instanceof IAutoSentry) {
    if (!this.tileEntity.isValidTarget(this.tileEntity.getTarget())) {
      this.tileEntity.setTarget(null);
      this.tileEntity.cancelRotation();
      return false;
    }
 else     if (this.tileEntity.canActivateWeapon()) {
      this.tileEntity.onWeaponActivated();
    }
 else {
      float[] rotations=this.tileEntity.lookHelper.getDeltaRotations(this.tileEntity.getTargetPosition());
      this.tileEntity.rotateTo(rotations[0],rotations[1]);
    }
  }
  return true;
}","@Override protected boolean onUpdateTask(){
  super.onUpdateTask();
  if (this.sentry() instanceof IAutoSentry) {
    if (!this.sentry().isValidTarget(this.sentry().getTarget())) {
      this.sentry().setTarget(null);
      this.sentry().cancelRotation();
      return false;
    }
 else     if (this.sentry().canActivateWeapon()) {
      this.sentry().onWeaponActivated();
    }
 else {
      float[] rotations=this.sentry().lookHelper.getDeltaRotations(this.sentry().getTargetPosition());
      this.sentry().rotateTo(rotations[0],rotations[1]);
    }
  }
  return true;
}",0.8458904109589042
169839,"public void addTask(Task task){
  task.taskManager=this;
  task.world=this.tileEntity.worldObj;
  task.tileEntity=this.tileEntity;
  this.tasks.add(task);
}","public void addTask(Task task){
  task.taskManager=this;
  this.tasks.add(task);
}",0.6890756302521008
169840,"@SuppressWarnings(""String_Node_Str"") @Override protected boolean onUpdateTask(){
  super.onUpdateTask();
  if (this.tileEntity.getTarget() == null || !this.tileEntity.isValidTarget(this.tileEntity.getTarget())) {
    AxisAlignedBB bounds=this.tileEntity.getTargetingBox();
    List<Entity> entities=this.tileEntity.worldObj.getEntitiesWithinAABB(Entity.class,bounds);
    Entity currentTarget=null;
    if (currentTarget == null) {
      double smallestDis=this.tileEntity.maxTargetRange;
      final Vector3 center=this.tileEntity.pos();
      for (      Entity entity : entities) {
        final double distance=center.distance(entity);
        if (this.tileEntity.isValidTarget(entity) && distance <= smallestDis) {
          currentTarget=entity;
          smallestDis=distance;
        }
      }
    }
    if (currentTarget != null) {
      this.tileEntity.cancelRotation();
      this.tileEntity.setTarget(currentTarget);
      return false;
    }
 else     if (this.tileEntity.lastRotateTick > this.world.rand.nextInt(30) + 10) {
      this.tileEntity.rotateTo(this.world.rand.nextInt(360) - 180,this.world.rand.nextInt(30) - 10);
    }
    return true;
  }
 else {
    this.taskManager.addTask(new TaskKillTarget());
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") @Override protected boolean onUpdateTask(){
  super.onUpdateTask();
  if (this.sentry().getTarget() == null || !this.sentry().isValidTarget(this.sentry().getTarget())) {
    AxisAlignedBB bounds=this.sentry().getTargetingBox();
    List<Entity> entities=this.world().getEntitiesWithinAABB(Entity.class,bounds);
    Entity currentTarget=null;
    if (currentTarget == null) {
      double smallestDis=this.sentry().maxTargetRange;
      final Vector3 center=this.sentry().pos();
      for (      Entity entity : entities) {
        final double distance=center.distance(entity);
        if (this.sentry().isValidTarget(entity) && distance <= smallestDis) {
          currentTarget=entity;
          smallestDis=distance;
        }
      }
    }
    if (currentTarget != null) {
      this.sentry().cancelRotation();
      this.sentry().setTarget(currentTarget);
      return false;
    }
 else     if (this.sentry().lastRotateTick > this.world().rand.nextInt(30) + 10) {
      this.sentry().rotateTo(this.world().rand.nextInt(360) - 180,this.world().rand.nextInt(30) - 10);
    }
    return true;
  }
  return false;
}",0.74
169841,"@Override @EventHandler public void postInit(FMLPostInitializationEvent event){
  super.postInit(event);
  ItemStack remoteDetonator=CompatibilityModule.getItemWithCharge(new ItemStack(itemRemoteDetonator),0);
  GameRegistry.addRecipe(new ShapedOreRecipe(itemRocketLauncher,new Object[]{""String_Node_Str"",""String_Node_Str"",'R',itemRadarGun,'C',new ItemStack(blockMachine,1,MachineData.CruiseLauncher.ordinal() + 6),'B',Block.stoneButton,'S',UniversalRecipe.PRIMARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemRadarGun),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Block.glass,'!',UniversalRecipe.PRIMARY_METAL.get(),'#',UniversalRecipe.CIRCUIT_T1.get(),'$',Block.stoneButton}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemRemoteDetonator),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',UniversalRecipe.PRIMARY_METAL.get(),'?',Item.redstone,'#',UniversalRecipe.CIRCUIT_T2.get(),'$',Block.stoneButton}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemLaserDesignator),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',CompatibilityModule.getItemWithCharge(new ItemStack(itemRemoteDetonator),0),'?',UniversalRecipe.CIRCUIT_T3.get(),'!',CompatibilityModule.getItemWithCharge(new ItemStack(itemRadarGun),0)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemBombDefuser),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',UniversalRecipe.CIRCUIT_T2.get(),'W',UniversalRecipe.WRENCH.get(),'I',UniversalRecipe.WIRE.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.SECONDARY_METAL.get(),'C',UniversalRecipe.CIRCUIT_T1.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(blockMachine,1,0),'!',UniversalRecipe.PRIMARY_METAL.get(),'C',UniversalRecipe.CIRCUIT_T2.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(blockMachine,1,1),'!',UniversalRecipe.PRIMARY_PLATE.get(),'C',UniversalRecipe.CIRCUIT_T3.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',UniversalRecipe.CIRCUIT_T1.get(),'!',Block.glass,'?',UniversalRecipe.WIRE.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',UniversalRecipe.CIRCUIT_T2.get(),'!',UniversalRecipe.PRIMARY_METAL.get(),'?',UniversalRecipe.WIRE.get(),'$',new ItemStack(blockMachine,1,3)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,5),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',UniversalRecipe.CIRCUIT_T3.get(),'!',Item.ingotGold,'?',UniversalRecipe.WIRE.get(),'$',new ItemStack(blockMachine,1,4)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.SECONDARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,7),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.PRIMARY_METAL.get(),'@',new ItemStack(blockMachine,1,6)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,8),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.PRIMARY_PLATE.get(),'@',new ItemStack(blockMachine,1,7)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,9),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',CompatibilityModule.getItemWithCharge(new ItemStack(itemRadarGun),0),'!',UniversalRecipe.PRIMARY_PLATE.get(),'#',UniversalRecipe.CIRCUIT_T1.get(),'?',Item.ingotGold}));
  RecipeUtility.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,10),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'?',UniversalRecipe.PRIMARY_PLATE.get(),'!',UniversalRecipe.CIRCUIT_T3.get(),'@',UniversalRecipe.BATTERY_BOX.get(),'#',UniversalRecipe.MOTOR.get(),'W',UniversalRecipe.WIRE.get()}),""String_Node_Str"",Settings.CONFIGURATION,true);
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,11),new Object[]{""String_Node_Str"",""String_Node_Str"",'@',UniversalRecipe.PRIMARY_PLATE.get(),'!',new ItemStack(blockMachine,1,2),'?',new ItemStack(blockMachine,1,8)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,MachineData.MissileCoordinator.ordinal()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',UniversalRecipe.CIRCUIT_T2.get(),'S',UniversalRecipe.PRIMARY_PLATE.get(),'R',itemRemoteDetonator}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.missileModule.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',UniversalRecipe.PRIMARY_METAL.get(),'?',Item.flintAndSteel,'#',UniversalRecipe.CIRCUIT_T1.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.homing.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',new ItemStack(itemMissile,1,Explosive.missileModule.getID()),'C',UniversalRecipe.CIRCUIT_T1.get(),'B',UniversalRecipe.SECONDARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.antiBallistic.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(itemMissile,1,Explosive.missileModule.getID()),'?',new ItemStack(blockExplosive,1,0),'!',UniversalRecipe.CIRCUIT_T1.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.cluster.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(itemMissile,1,Explosive.missileModule.getID()),'?',Explosive.fragmentation.getItemStack(),'!',new ItemStack(itemMissile,1,0)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.nuclearCluster.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",'C',new ItemStack(itemMissile,1,Explosive.cluster.getID()),'N',Explosive.nuclear.getItemStack()}));
  for (  Explosive zhaPin : ExplosiveRegistry.getAllZhaPin()) {
    zhaPin.init();
    RecipeUtility.addRecipe(new ShapelessOreRecipe(new ItemStack(itemMissile,1,zhaPin.getID()),new Object[]{new ItemStack(itemMissile,1,Explosive.missileModule.getID()),new ItemStack(blockExplosive,1,zhaPin.getID())}),zhaPin.getUnlocalizedName() + ""String_Node_Str"",Settings.CONFIGURATION,true);
    if (zhaPin.getTier() < 2) {
      RecipeUtility.addRecipe(new ShapedOreRecipe(new ItemStack(itemGrenade,1,zhaPin.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(blockExplosive,1,zhaPin.getID()),'?',Item.silk}),zhaPin.getUnlocalizedName() + ""String_Node_Str"",Settings.CONFIGURATION,true);
    }
    if (zhaPin.getTier() < 3) {
      RecipeUtility.addRecipe(new ShapedOreRecipe(new ItemStack(itemBombCart,1,zhaPin.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",'?',new ItemStack(blockExplosive,1,zhaPin.getID()),'@',Item.minecartEmpty}),zhaPin.getUnlocalizedName() + ""String_Node_Str"",Settings.CONFIGURATION,true);
    }
  }
  EntityRegistry.registerGlobalEntityID(EntityExplosive.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityMissile.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityExplosion.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityFlyingBlock.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityLightBeam.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityFragments.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityGrenade.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityBombCart.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityExplosive.class,""String_Node_Str"",ENTITY_ID_PREFIX,this,50,5,true);
  EntityRegistry.registerModEntity(EntityMissile.class,""String_Node_Str"",ENTITY_ID_PREFIX + 1,this,500,1,true);
  EntityRegistry.registerModEntity(EntityExplosion.class,""String_Node_Str"",ENTITY_ID_PREFIX + 2,this,100,5,true);
  EntityRegistry.registerModEntity(EntityFlyingBlock.class,""String_Node_Str"",ENTITY_ID_PREFIX + 3,this,50,15,true);
  EntityRegistry.registerModEntity(EntityLightBeam.class,""String_Node_Str"",ENTITY_ID_PREFIX + 4,this,80,5,true);
  EntityRegistry.registerModEntity(EntityFragments.class,""String_Node_Str"",ENTITY_ID_PREFIX + 5,this,40,8,true);
  EntityRegistry.registerModEntity(EntityGrenade.class,""String_Node_Str"",ENTITY_ID_PREFIX + 6,this,50,5,true);
  EntityRegistry.registerModEntity(EntityBombCart.class,""String_Node_Str"",ENTITY_ID_PREFIX + 8,this,50,4,true);
  proxy.init();
}","@Override @EventHandler public void postInit(FMLPostInitializationEvent event){
  super.postInit(event);
  GameRegistry.addRecipe(new ShapedOreRecipe(itemRocketLauncher,new Object[]{""String_Node_Str"",""String_Node_Str"",'R',itemRadarGun,'C',new ItemStack(blockMachine,1,MachineData.CruiseLauncher.ordinal() + 6),'B',Block.stoneButton,'S',UniversalRecipe.PRIMARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemRadarGun),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Block.glass,'!',UniversalRecipe.PRIMARY_METAL.get(),'#',UniversalRecipe.CIRCUIT_T1.get(),'$',Block.stoneButton}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemRemoteDetonator),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',UniversalRecipe.PRIMARY_METAL.get(),'?',Item.redstone,'#',UniversalRecipe.CIRCUIT_T2.get(),'$',Block.stoneButton}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemLaserDesignator),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',itemRemoteDetonator,'?',UniversalRecipe.CIRCUIT_T3.get(),'!',itemRadarGun}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemBombDefuser),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',UniversalRecipe.CIRCUIT_T2.get(),'W',UniversalRecipe.WRENCH.get(),'I',UniversalRecipe.WIRE.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.SECONDARY_METAL.get(),'C',UniversalRecipe.CIRCUIT_T1.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(blockMachine,1,0),'!',UniversalRecipe.PRIMARY_METAL.get(),'C',UniversalRecipe.CIRCUIT_T2.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(blockMachine,1,1),'!',UniversalRecipe.PRIMARY_PLATE.get(),'C',UniversalRecipe.CIRCUIT_T3.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',UniversalRecipe.CIRCUIT_T1.get(),'!',Block.glass,'?',UniversalRecipe.WIRE.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',UniversalRecipe.CIRCUIT_T2.get(),'!',UniversalRecipe.PRIMARY_METAL.get(),'?',UniversalRecipe.WIRE.get(),'$',new ItemStack(blockMachine,1,3)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,5),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',UniversalRecipe.CIRCUIT_T3.get(),'!',Item.ingotGold,'?',UniversalRecipe.WIRE.get(),'$',new ItemStack(blockMachine,1,4)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.SECONDARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,7),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.PRIMARY_METAL.get(),'@',new ItemStack(blockMachine,1,6)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,8),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.PRIMARY_PLATE.get(),'@',new ItemStack(blockMachine,1,7)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,9),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',CompatibilityModule.getItemWithCharge(new ItemStack(itemRadarGun),0),'!',UniversalRecipe.PRIMARY_PLATE.get(),'#',UniversalRecipe.CIRCUIT_T1.get(),'?',Item.ingotGold}));
  RecipeUtility.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,10),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'?',UniversalRecipe.PRIMARY_PLATE.get(),'!',UniversalRecipe.CIRCUIT_T3.get(),'@',UniversalRecipe.BATTERY_BOX.get(),'#',UniversalRecipe.MOTOR.get(),'W',UniversalRecipe.WIRE.get()}),""String_Node_Str"",Settings.CONFIGURATION,true);
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,11),new Object[]{""String_Node_Str"",""String_Node_Str"",'@',UniversalRecipe.PRIMARY_PLATE.get(),'!',new ItemStack(blockMachine,1,2),'?',new ItemStack(blockMachine,1,8)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,MachineData.MissileCoordinator.ordinal()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',UniversalRecipe.CIRCUIT_T2.get(),'S',UniversalRecipe.PRIMARY_PLATE.get(),'R',itemRemoteDetonator}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.missileModule.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',UniversalRecipe.PRIMARY_METAL.get(),'?',Item.flintAndSteel,'#',UniversalRecipe.CIRCUIT_T1.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.homing.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',new ItemStack(itemMissile,1,Explosive.missileModule.getID()),'C',UniversalRecipe.CIRCUIT_T1.get(),'B',UniversalRecipe.SECONDARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.antiBallistic.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(itemMissile,1,Explosive.missileModule.getID()),'?',new ItemStack(blockExplosive,1,0),'!',UniversalRecipe.CIRCUIT_T1.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.cluster.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(itemMissile,1,Explosive.missileModule.getID()),'?',Explosive.fragmentation.getItemStack(),'!',new ItemStack(itemMissile,1,0)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.nuclearCluster.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",'C',new ItemStack(itemMissile,1,Explosive.cluster.getID()),'N',Explosive.nuclear.getItemStack()}));
  for (  Explosive zhaPin : ExplosiveRegistry.getAllZhaPin()) {
    zhaPin.init();
    RecipeUtility.addRecipe(new ShapelessOreRecipe(new ItemStack(itemMissile,1,zhaPin.getID()),new Object[]{new ItemStack(itemMissile,1,Explosive.missileModule.getID()),new ItemStack(blockExplosive,1,zhaPin.getID())}),zhaPin.getUnlocalizedName() + ""String_Node_Str"",Settings.CONFIGURATION,true);
    if (zhaPin.getTier() < 2) {
      RecipeUtility.addRecipe(new ShapedOreRecipe(new ItemStack(itemGrenade,1,zhaPin.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(blockExplosive,1,zhaPin.getID()),'?',Item.silk}),zhaPin.getUnlocalizedName() + ""String_Node_Str"",Settings.CONFIGURATION,true);
    }
    if (zhaPin.getTier() < 3) {
      RecipeUtility.addRecipe(new ShapedOreRecipe(new ItemStack(itemBombCart,1,zhaPin.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",'?',new ItemStack(blockExplosive,1,zhaPin.getID()),'@',Item.minecartEmpty}),zhaPin.getUnlocalizedName() + ""String_Node_Str"",Settings.CONFIGURATION,true);
    }
  }
  EntityRegistry.registerGlobalEntityID(EntityExplosive.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityMissile.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityExplosion.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityFlyingBlock.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityLightBeam.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityFragments.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityGrenade.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityBombCart.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityExplosive.class,""String_Node_Str"",ENTITY_ID_PREFIX,this,50,5,true);
  EntityRegistry.registerModEntity(EntityMissile.class,""String_Node_Str"",ENTITY_ID_PREFIX + 1,this,500,1,true);
  EntityRegistry.registerModEntity(EntityExplosion.class,""String_Node_Str"",ENTITY_ID_PREFIX + 2,this,100,5,true);
  EntityRegistry.registerModEntity(EntityFlyingBlock.class,""String_Node_Str"",ENTITY_ID_PREFIX + 3,this,50,15,true);
  EntityRegistry.registerModEntity(EntityLightBeam.class,""String_Node_Str"",ENTITY_ID_PREFIX + 4,this,80,5,true);
  EntityRegistry.registerModEntity(EntityFragments.class,""String_Node_Str"",ENTITY_ID_PREFIX + 5,this,40,8,true);
  EntityRegistry.registerModEntity(EntityGrenade.class,""String_Node_Str"",ENTITY_ID_PREFIX + 6,this,50,5,true);
  EntityRegistry.registerModEntity(EntityBombCart.class,""String_Node_Str"",ENTITY_ID_PREFIX + 8,this,50,4,true);
  proxy.init();
}",0.9883602424502494
169842,"@Override public void init(){
  super.init();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityGunTurret.class,new RenderGunTurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityAAGun.class,new RenderAAGun());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityRailGun.class,new RenderRailGun());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityLaserGun.class,new RenderLaserTurret());
  RenderingRegistry.registerEntityRenderingHandler(EntityMountPoint.class,new EmptyRenderer());
  RenderingRegistry.registerBlockHandler(new BlockRenderingHandler());
}","@Override public void init(){
  super.init();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityGunTurret.class,new RenderGunTurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityAAGun.class,new RenderAAGun());
  ClientRegistry.bindTileEntitySpecialRenderer(TileRailGun.class,new RenderRailGun());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityLaserGun.class,new RenderLaserTurret());
  RenderingRegistry.registerEntityRenderingHandler(EntityMountPoint.class,new EmptyRenderer());
  RenderingRegistry.registerBlockHandler(new BlockRenderingHandler());
}",0.9948979591836736
169843,"public void init(){
  GameRegistry.registerTileEntity(TileEntityGunTurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityAAGun.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityRailGun.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityLaserGun.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileTurretPlatform.class,""String_Node_Str"");
}","public void init(){
  GameRegistry.registerTileEntity(TileEntityGunTurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityAAGun.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileRailGun.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityLaserGun.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileTurretPlatform.class,""String_Node_Str"");
}",0.9926829268292684
169844,"public EntityTileDamagable(TileEntityTurret host){
  this(host.worldObj);
  this.setPosition(host.xCoord + 0.5,host.yCoord,host.zCoord + 0.5);
  this.host=host;
}","public EntityTileDamagable(TileTurret host){
  this(host.worldObj);
  this.setPosition(host.xCoord + 0.5,host.yCoord,host.zCoord + 0.5);
  this.host=host;
}",0.981132075471698
169845,"@Override public void readSpawnData(ByteArrayDataInput data){
  try {
    TileEntity tileEntity=this.worldObj.getBlockTileEntity(data.readInt(),data.readInt(),data.readInt());
    if (tileEntity instanceof TileEntityTurret) {
      this.host=(TileEntityTurret)tileEntity;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void readSpawnData(ByteArrayDataInput data){
  try {
    TileEntity tileEntity=this.worldObj.getBlockTileEntity(data.readInt(),data.readInt(),data.readInt());
    if (tileEntity instanceof TileTurret) {
      this.host=(TileTurret)tileEntity;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9818731117824774
169846,"public static TileDamageSource doBulletDamage(TileEntityTurret tileEntity){
  return (TileDamageSource)(new TileDamageSource(""String_Node_Str"",tileEntity).setProjectile());
}","public static TileDamageSource doBulletDamage(TileTurret tileEntity){
  return (TileDamageSource)(new TileDamageSource(""String_Node_Str"",tileEntity).setProjectile());
}",0.9824561403508772
169847,"public static TileDamageSource doLaserDamage(TileEntityTurret tileEntity){
  return (TileDamageSource)(new TileDamageSource(""String_Node_Str"",tileEntity).setDamageBypassesArmor().setProjectile());
}","public static TileDamageSource doLaserDamage(TileTurret tileEntity){
  return (TileDamageSource)(new TileDamageSource(""String_Node_Str"",tileEntity).setDamageBypassesArmor().setProjectile());
}",0.9846153846153848
169848,"public TileDamageSource(String damageName,TileEntityTurret tileEntity){
  super(damageName,tileEntity.getDamageEntity());
}","public TileDamageSource(String damageName,TileTurret tileEntity){
  super(damageName,tileEntity.getDamageEntity());
}",0.975
169849,"/** 
 * Gets the turret instance linked to this platform 
 */
public TileEntityTurret getTurret(){
  if (this.cachedTurret == null || this.cachedTurret.isInvalid() || !(new Vector3(this.cachedTurret).equals(new Vector3(this).modifyPositionFromSide(this.getTurretDirection())))) {
    TileEntity tileEntity=new Vector3(this).modifyPositionFromSide(this.getTurretDirection()).getTileEntity(this.worldObj);
    if (tileEntity instanceof TileEntityTurret) {
      this.cachedTurret=(TileEntityTurret)tileEntity;
    }
 else {
      this.cachedTurret=null;
    }
    this.updateEnergyHandler();
  }
  return this.cachedTurret;
}","/** 
 * Gets the turret instance linked to this platform 
 */
public TileTurret getTurret(){
  if (this.cachedTurret == null || this.cachedTurret.isInvalid() || !(new Vector3(this.cachedTurret).equals(new Vector3(this).modifyPositionFromSide(this.getTurretDirection())))) {
    TileEntity tileEntity=new Vector3(this).modifyPositionFromSide(this.getTurretDirection()).getTileEntity(this.worldObj);
    if (tileEntity instanceof TileTurret) {
      this.cachedTurret=(TileTurret)tileEntity;
    }
 else {
      this.cachedTurret=null;
    }
    this.updateEnergyHandler();
  }
  return this.cachedTurret;
}",0.7785016286644951
169850,"/** 
 * if a sentry is spawned above the stand it is removed
 * @return
 */
public boolean destroyTurret(){
  TileEntity ent=this.worldObj.getBlockTileEntity(this.xCoord + this.getTurretDirection().offsetX,this.yCoord + this.getTurretDirection().offsetY,this.zCoord + this.getTurretDirection().offsetZ);
  if (ent instanceof TileEntityTurret) {
    this.cachedTurret=null;
    ((TileEntityTurret)ent).destroy(false);
    return true;
  }
  return false;
}","/** 
 * if a sentry is spawned above the stand it is removed
 * @return
 */
public boolean destroyTurret(){
  TileEntity ent=this.worldObj.getBlockTileEntity(this.xCoord + this.getTurretDirection().offsetX,this.yCoord + this.getTurretDirection().offsetY,this.zCoord + this.getTurretDirection().offsetZ);
  if (ent instanceof TileTurret) {
    this.cachedTurret=null;
    ((TileTurret)ent).destroy(false);
    return true;
  }
  return false;
}",0.9866369710467706
169851,"@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileEntityTurret) {
    TileEntityTurret tileEntity=(TileEntityTurret)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5f,(float)y + 1f,(float)z + 0.5f);
    GL11.glScalef(0.7f,0.7f,0.7f);
    this.setTextureBaseOnState(tileEntity);
    render(tileEntity.getYawServo().getRotation(),tileEntity.getPitchServo().getRotation());
    GL11.glPopMatrix();
  }
}","@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileTurret) {
    TileTurret tileEntity=(TileTurret)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5f,(float)y + 1f,(float)z + 0.5f);
    GL11.glScalef(0.7f,0.7f,0.7f);
    this.setTextureBaseOnState(tileEntity);
    render(tileEntity.getYawServo().getRotation(),tileEntity.getPitchServo().getRotation());
    GL11.glPopMatrix();
  }
}",0.9823182711198428
169852,"@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileEntityTurret) {
    TileEntityTurret tileEntity=(TileEntityTurret)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5f,(float)y + 1.5f,(float)z + 0.5f);
    this.setTextureBaseOnState(tileEntity);
    render(tileEntity.getYawServo().getRotation(),tileEntity.getPitchServo().getRotation());
    GL11.glPopMatrix();
  }
}","@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileTurret) {
    TileTurret tileEntity=(TileTurret)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5f,(float)y + 1.5f,(float)z + 0.5f);
    this.setTextureBaseOnState(tileEntity);
    render(tileEntity.getYawServo().getRotation(),tileEntity.getPitchServo().getRotation());
    GL11.glPopMatrix();
  }
}",0.98109243697479
169853,"@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileEntityRailGun) {
    TileEntityRailGun tileEntity=(TileEntityRailGun)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5F,(float)y + 2.2F,(float)z + 0.5F);
    GL11.glScalef(1.5f,1.5f,1.5f);
    this.bindTexture(TEXTURE);
    GL11.glRotatef(180F,0F,0F,1F);
    GL11.glRotatef(180F,0F,1F,0F);
    MODEL.render((float)Math.toRadians(tileEntity.getYawServo().getRotation()),(float)Math.toRadians(tileEntity.getPitchServo().getRotation()),0.0625F);
    GL11.glPopMatrix();
  }
}","@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileRailGun) {
    TileRailGun tileEntity=(TileRailGun)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5F,(float)y + 2.2F,(float)z + 0.5F);
    GL11.glScalef(1.5f,1.5f,1.5f);
    this.bindTexture(TEXTURE);
    GL11.glRotatef(180F,0F,0F,1F);
    GL11.glRotatef(180F,0F,1F,0F);
    MODEL.render((float)Math.toRadians(tileEntity.getYawServo().getRotation()),(float)Math.toRadians(tileEntity.getPitchServo().getRotation()),0.0625F);
    GL11.glPopMatrix();
  }
}",0.9857369255150554
169854,"public void setTextureBaseOnState(TileEntityTurret tileEntity){
  EntityPlayer player=this.getPlayer();
  if (tileEntity.getPlatform() != null) {
    if (tileEntity.getPlatform().getOwnerGroup().isMemeber(player.username)) {
      this.bindTexture(TEXTURE_FILE);
      return;
    }
 else     if (tileEntity.getPlatform().getUserAccess(player.username) != null) {
      this.bindTexture(TEXTURE_FILE_FRIENDLY);
      return;
    }
  }
  this.bindTexture(TEXTURE_FILE_HOSTILE);
}","public void setTextureBaseOnState(TileTurret tileEntity){
  EntityPlayer player=this.getPlayer();
  if (tileEntity.getPlatform() != null) {
    if (tileEntity.getPlatform().canUse(Nodes.GROUP_USER_NODE,player)) {
      this.bindTexture(TEXTURE_FILE);
      return;
    }
 else     if (tileEntity.getPlatform().canUse(Nodes.GROUP_USER_NODE,player)) {
      this.bindTexture(TEXTURE_FILE_FRIENDLY);
      return;
    }
  }
  this.bindTexture(TEXTURE_FILE_HOSTILE);
}",0.8535031847133758
169855,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  if (!isPreInit) {
    Modstats.instance().getReporter().registerMod(INSTANCE);
    MinecraftForge.EVENT_BUS.register(INSTANCE);
    LOGGER.fine(""String_Node_Str"" + LanguageUtility.loadLanguages(icbm.Reference.LANGUAGE_PATH,icbm.Reference.LANGUAGES) + ""String_Node_Str"");
    Settings.initiate();
    Settings.CONFIGURATION.load();
    blockSulfurOre=new BlockSulfureOre(Settings.getNextBlockID());
    blockMulti=new BlockMulti(Settings.getNextBlockID()).setPacketType(PACKET_TILE);
    itemPoisonPowder=new ItemICBMBase(Settings.getNextItemID(),""String_Node_Str"");
    itemSulfurDust=new ItemICBMBase(Settings.getNextItemID(),""String_Node_Str"");
    GameRegistry.registerBlock(blockSulfurOre,""String_Node_Str"");
    sulfureOreGenData=new OreGeneratorICBM(""String_Node_Str"",""String_Node_Str"",new ItemStack(blockSulfurOre),0,40,20,4).enable(Settings.CONFIGURATION);
    if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
      blockRadioactive=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
      LOGGER.fine(""String_Node_Str"");
    }
    Block.obsidian.setResistance(Settings.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
    LOGGER.fine(""String_Node_Str"" + Block.obsidian.getExplosionResistance(null));
    Settings.CONFIGURATION.save();
    OreDictionary.registerOre(""String_Node_Str"",itemSulfurDust);
    OreGenerator.addOre(sulfureOreGenData);
    GameRegistry.registerTileEntity(TileMultiBlockPart.class,""String_Node_Str"");
    isPreInit=true;
  }
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  if (!isPreInit) {
    Modstats.instance().getReporter().registerMod(INSTANCE);
    MinecraftForge.EVENT_BUS.register(INSTANCE);
    LOGGER.fine(""String_Node_Str"" + LanguageUtility.loadLanguages(icbm.Reference.LANGUAGE_PATH,icbm.Reference.LANGUAGES) + ""String_Node_Str"");
    Settings.initiate();
    Settings.CONFIGURATION.load();
    blockSulfurOre=new BlockSulfureOre(Settings.getNextBlockID());
    blockMulti=new BlockMulti(Settings.getNextBlockID()).setPacketType(PACKET_TILE);
    itemPoisonPowder=new ItemICBMBase(Settings.getNextItemID(),""String_Node_Str"");
    itemSulfurDust=new ItemICBMBase(Settings.getNextItemID(),""String_Node_Str"");
    GameRegistry.registerBlock(blockSulfurOre,""String_Node_Str"");
    GameRegistry.registerBlock(blockMulti,""String_Node_Str"");
    sulfureOreGenData=new OreGeneratorICBM(""String_Node_Str"",""String_Node_Str"",new ItemStack(blockSulfurOre),0,40,20,4).enable(Settings.CONFIGURATION);
    if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
      blockRadioactive=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
      LOGGER.fine(""String_Node_Str"");
    }
    Block.obsidian.setResistance(Settings.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
    LOGGER.fine(""String_Node_Str"" + Block.obsidian.getExplosionResistance(null));
    Settings.CONFIGURATION.save();
    OreDictionary.registerOre(""String_Node_Str"",itemSulfurDust);
    OreGenerator.addOre(sulfureOreGenData);
    GameRegistry.registerTileEntity(TileMultiBlockPart.class,""String_Node_Str"");
    isPreInit=true;
  }
}",0.980958230958231
169856,"public ItemICBMBase(int id,String name){
  super(Settings.CONFIGURATION.getItem(""String_Node_Str"",id).getInt(id));
  this.setUnlocalizedName(Reference.PREFIX + name);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
  this.setTextureName(Reference.PREFIX + name);
}","public ItemICBMBase(int id,String name){
  super(Settings.CONFIGURATION.getItem(name,id).getInt(id));
  this.setUnlocalizedName(Reference.PREFIX + name);
  this.setCreativeTab(CreativeTabICBM.INSTANCE);
  this.setTextureName(Reference.PREFIX + name);
}",0.9593810444874274
169857,"@Override @EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  NetworkRegistry.instance().registerGuiHandler(this,proxy);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(proxy);
  Settings.CONFIGURATION.load();
  blockExplosive=new BlockExplosive(Settings.getNextBlockID());
  blockMachine=new BlockICBMMachine(Settings.getNextBlockID());
  blockMissileTable=new BlockMissileTable(Settings.getNextBlockID());
  itemMissile=new ItemMissile(Settings.getNextItemID(),""String_Node_Str"");
  itemBombDefuser=new ItemBombDefuser(Settings.getNextItemID());
  itemRadarGun=new ItemRadarGun(Settings.getNextItemID());
  itemRemoteDetonator=new ItemRemoteDetonator(Settings.getNextItemID());
  itemLaserDesignator=new ItemLaserDesignator(Settings.getNextItemID());
  itemRocketLauncher=new ItemRocketLauncher(Settings.getNextItemID());
  itemGrenade=new ItemGrenade(Settings.getNextItemID());
  itemBombCart=new ItemBombCart(Settings.getNextItemID());
  PDaDu.INSTANCE=new PDaDu(22,true,5149489,""String_Node_Str"");
  PChuanRanDu.INSTANCE=new PChuanRanDu(23,false,5149489,""String_Node_Str"");
  PDongShang.INSTANCE=new PDongShang(24,false,5149489,""String_Node_Str"");
  ICBMExplosion.CREEPER_DROP_SULFER=Settings.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  ICBMExplosion.CREEPER_BLOW_UP_IN_FIRE=Settings.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  Settings.CONFIGURATION.save();
  CreativeTabICBM.itemStack=new ItemStack(ICBMExplosion.blockExplosive);
  BlockDispenser.dispenseBehaviorRegistry.putObject(ICBMExplosion.itemGrenade,new IBehaviorDispenseItem(){
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing enumFacing=EnumFacing.getFront(blockSource.getBlockMetadata());
        EntityGrenade entity=new EntityGrenade(world,new Vector3(x,y,z),itemStack.getItemDamage());
        entity.setThrowableHeading(enumFacing.getFrontOffsetX(),0.10000000149011612D,enumFacing.getFrontOffsetZ(),0.5F,1.0F);
        world.spawnEntityInWorld(entity);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  BlockDispenser.dispenseBehaviorRegistry.putObject(ICBMExplosion.itemBombCart,new IBehaviorDispenseItem(){
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior=new BehaviorDefaultDispenseItem();
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing var3=EnumFacing.getFront(blockSource.getBlockMetadata());
        World var4=blockSource.getWorld();
        double var5=blockSource.getX() + var3.getFrontOffsetX() * 1.125F;
        double var7=blockSource.getY();
        double var9=blockSource.getZ() + var3.getFrontOffsetZ() * 1.125F;
        int var11=blockSource.getXInt() + var3.getFrontOffsetX();
        int var12=blockSource.getYInt();
        int var13=blockSource.getZInt() + var3.getFrontOffsetZ();
        int var14=var4.getBlockId(var11,var12,var13);
        double var15;
        if (BlockRailBase.isRailBlock(var14)) {
          var15=0.0D;
        }
 else {
          if (var14 != 0 || !BlockRailBase.isRailBlock(var4.getBlockId(var11,var12 - 1,var13))) {
            return this.defaultItemDispenseBehavior.dispense(blockSource,itemStack);
          }
          var15=-1.0D;
        }
        EntityBombCart var22=new EntityBombCart(world,var5,var7 + var15,var9,itemStack.getItemDamage());
        world.spawnEntityInWorld(var22);
        world.playAuxSFX(1000,x,y,z,0);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  ForgeChunkManager.setForcedChunkLoadingCallback(this,new LoadingCallback(){
    @Override public void ticketsLoaded(    List<Ticket> tickets,    World world){
      for (      Ticket ticket : tickets) {
        if (ticket.getEntity() instanceof IChunkLoadHandler) {
          ((IChunkLoadHandler)ticket.getEntity()).chunkLoaderInit(ticket);
        }
 else {
          if (ticket.getModData() != null) {
            Vector3 position=new Vector3(ticket.getModData());
            TileEntity tileEntity=position.getTileEntity(ticket.world);
            if (tileEntity instanceof IChunkLoadHandler) {
              ((IChunkLoadHandler)tileEntity).chunkLoaderInit(ticket);
            }
          }
        }
      }
    }
  }
);
  GameRegistry.registerBlock(blockExplosive,ItemBlockExplosive.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockMachine,ItemBlockMachine.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockMissileTable,ItemBlockMissileTable.class,""String_Node_Str"");
  ExplosiveHelper.explosionManager=ExplosiveRegistry.class;
  ICBMExplosion.proxy.preInit();
}","@Override @EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  NetworkRegistry.instance().registerGuiHandler(this,proxy);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(proxy);
  Settings.CONFIGURATION.load();
  blockExplosive=new BlockExplosive(Settings.getNextBlockID());
  blockMachine=new BlockICBMMachine(Settings.getNextBlockID());
  blockMissileTable=new BlockMissileTable(Settings.getNextBlockID());
  itemMissile=new ItemMissile(Settings.getNextItemID(),""String_Node_Str"");
  itemBombDefuser=new ItemBombDefuser(Settings.getNextItemID());
  itemRadarGun=new ItemRadarGun(Settings.getNextItemID());
  itemRemoteDetonator=new ItemRemoteDetonator(Settings.getNextItemID());
  itemLaserDesignator=new ItemLaserDesignator(Settings.getNextItemID());
  itemRocketLauncher=new ItemRocketLauncher(Settings.getNextItemID());
  itemGrenade=new ItemGrenade(Settings.getNextItemID());
  itemBombCart=new ItemBombCart(Settings.getNextItemID());
  PDaDu.INSTANCE=new PDaDu(22,true,5149489,""String_Node_Str"");
  PChuanRanDu.INSTANCE=new PChuanRanDu(23,false,5149489,""String_Node_Str"");
  PDongShang.INSTANCE=new PDongShang(24,false,5149489,""String_Node_Str"");
  CREEPER_DROP_SULFER=Settings.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  CREEPER_BLOW_UP_IN_FIRE=Settings.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  Settings.CONFIGURATION.save();
  CreativeTabICBM.itemStack=new ItemStack(blockExplosive);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemGrenade,new IBehaviorDispenseItem(){
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing enumFacing=EnumFacing.getFront(blockSource.getBlockMetadata());
        EntityGrenade entity=new EntityGrenade(world,new Vector3(x,y,z),itemStack.getItemDamage());
        entity.setThrowableHeading(enumFacing.getFrontOffsetX(),0.10000000149011612D,enumFacing.getFrontOffsetZ(),0.5F,1.0F);
        world.spawnEntityInWorld(entity);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  BlockDispenser.dispenseBehaviorRegistry.putObject(itemBombCart,new IBehaviorDispenseItem(){
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior=new BehaviorDefaultDispenseItem();
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing var3=EnumFacing.getFront(blockSource.getBlockMetadata());
        World var4=blockSource.getWorld();
        double var5=blockSource.getX() + var3.getFrontOffsetX() * 1.125F;
        double var7=blockSource.getY();
        double var9=blockSource.getZ() + var3.getFrontOffsetZ() * 1.125F;
        int var11=blockSource.getXInt() + var3.getFrontOffsetX();
        int var12=blockSource.getYInt();
        int var13=blockSource.getZInt() + var3.getFrontOffsetZ();
        int var14=var4.getBlockId(var11,var12,var13);
        double var15;
        if (BlockRailBase.isRailBlock(var14)) {
          var15=0.0D;
        }
 else {
          if (var14 != 0 || !BlockRailBase.isRailBlock(var4.getBlockId(var11,var12 - 1,var13))) {
            return this.defaultItemDispenseBehavior.dispense(blockSource,itemStack);
          }
          var15=-1.0D;
        }
        EntityBombCart var22=new EntityBombCart(world,var5,var7 + var15,var9,itemStack.getItemDamage());
        world.spawnEntityInWorld(var22);
        world.playAuxSFX(1000,x,y,z,0);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  ForgeChunkManager.setForcedChunkLoadingCallback(this,new LoadingCallback(){
    @Override public void ticketsLoaded(    List<Ticket> tickets,    World world){
      for (      Ticket ticket : tickets) {
        if (ticket.getEntity() instanceof IChunkLoadHandler) {
          ((IChunkLoadHandler)ticket.getEntity()).chunkLoaderInit(ticket);
        }
 else {
          if (ticket.getModData() != null) {
            Vector3 position=new Vector3(ticket.getModData());
            TileEntity tileEntity=position.getTileEntity(ticket.world);
            if (tileEntity instanceof IChunkLoadHandler) {
              ((IChunkLoadHandler)tileEntity).chunkLoaderInit(ticket);
            }
          }
        }
      }
    }
  }
);
  GameRegistry.registerBlock(blockExplosive,ItemBlockExplosive.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockMachine,ItemBlockMachine.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockMissileTable,ItemBlockMissileTable.class,""String_Node_Str"");
  ExplosiveHelper.explosionManager=ExplosiveRegistry.class;
  proxy.preInit();
}",0.9818432997829092
169858,"@Override @EventHandler public void postInit(FMLPostInitializationEvent event){
  super.postInit(event);
  GameRegistry.addRecipe(new ShapedOreRecipe(itemRocketLauncher,new Object[]{""String_Node_Str"",""String_Node_Str"",'R',itemRadarGun,'C',new ItemStack(blockMachine,1,MachineData.CruiseLauncher.ordinal() + 6),'B',Block.stoneButton,'S',UniversalRecipe.PRIMARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.itemRadarGun),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Block.glass,'!',UniversalRecipe.PRIMARY_METAL.get(),'#',UniversalRecipe.CIRCUIT_T1.get(),'$',Block.stoneButton}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.itemRemoteDetonator),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',UniversalRecipe.PRIMARY_METAL.get(),'?',Item.redstone,'#',UniversalRecipe.CIRCUIT_T2.get(),'$',Block.stoneButton}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.itemLaserDesignator),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',CompatibilityModule.getItemWithCharge(new ItemStack(itemRemoteDetonator),0),'?',UniversalRecipe.CIRCUIT_T3.get(),'!',CompatibilityModule.getItemWithCharge(new ItemStack(itemRadarGun),0)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.itemBombDefuser),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',UniversalRecipe.CIRCUIT_T2.get(),'W',UniversalRecipe.WRENCH.get(),'I',UniversalRecipe.WIRE.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.SECONDARY_METAL.get(),'C',UniversalRecipe.CIRCUIT_T1.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBMExplosion.blockMachine,1,0),'!',UniversalRecipe.PRIMARY_METAL.get(),'C',UniversalRecipe.CIRCUIT_T2.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBMExplosion.blockMachine,1,1),'!',UniversalRecipe.PRIMARY_PLATE.get(),'C',UniversalRecipe.CIRCUIT_T3.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',UniversalRecipe.CIRCUIT_T1.get(),'!',Block.glass,'?',UniversalRecipe.WIRE.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',UniversalRecipe.CIRCUIT_T2.get(),'!',UniversalRecipe.PRIMARY_METAL.get(),'?',UniversalRecipe.WIRE.get(),'$',new ItemStack(ICBMExplosion.blockMachine,1,3)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,5),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',UniversalRecipe.CIRCUIT_T3.get(),'!',Item.ingotGold,'?',UniversalRecipe.WIRE.get(),'$',new ItemStack(ICBMExplosion.blockMachine,1,4)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.SECONDARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,7),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.PRIMARY_METAL.get(),'@',new ItemStack(ICBMExplosion.blockMachine,1,6)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,8),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.PRIMARY_PLATE.get(),'@',new ItemStack(ICBMExplosion.blockMachine,1,7)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,9),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',CompatibilityModule.getItemWithCharge(new ItemStack(itemRadarGun),0),'!',UniversalRecipe.PRIMARY_PLATE.get(),'#',UniversalRecipe.CIRCUIT_T1.get(),'?',Item.ingotGold}));
  RecipeUtility.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,10),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'?',UniversalRecipe.PRIMARY_PLATE.get(),'!',UniversalRecipe.CIRCUIT_T3.get(),'@',UniversalRecipe.BATTERY_BOX.get(),'#',UniversalRecipe.MOTOR.get(),'W',UniversalRecipe.WIRE.get()}),""String_Node_Str"",Settings.CONFIGURATION,true);
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,11),new Object[]{""String_Node_Str"",""String_Node_Str"",'@',UniversalRecipe.PRIMARY_PLATE.get(),'!',new ItemStack(ICBMExplosion.blockMachine,1,2),'?',new ItemStack(ICBMExplosion.blockMachine,1,8)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.blockMachine,1,MachineData.MissileCoordinator.ordinal()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',UniversalRecipe.CIRCUIT_T2.get(),'S',UniversalRecipe.PRIMARY_PLATE.get(),'R',itemRemoteDetonator}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.missileModule.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',UniversalRecipe.PRIMARY_METAL.get(),'?',Item.flintAndSteel,'#',UniversalRecipe.CIRCUIT_T1.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.homing.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',new ItemStack(itemMissile,1,Explosive.missileModule.getID()),'C',UniversalRecipe.CIRCUIT_T1.get(),'B',UniversalRecipe.SECONDARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.antiBallistic.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(itemMissile,1,Explosive.missileModule.getID()),'?',new ItemStack(ICBMExplosion.blockExplosive,1,0),'!',UniversalRecipe.CIRCUIT_T1.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.cluster.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(itemMissile,1,Explosive.missileModule.getID()),'?',Explosive.fragmentation.getItemStack(),'!',new ItemStack(ICBMExplosion.itemMissile,1,0)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.nuclearCluster.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",'C',new ItemStack(itemMissile,1,Explosive.cluster.getID()),'N',Explosive.nuclear.getItemStack()}));
  for (  Explosive zhaPin : ExplosiveRegistry.getAllZhaPin()) {
    zhaPin.init();
    RecipeUtility.addRecipe(new ShapelessOreRecipe(new ItemStack(ICBMExplosion.itemMissile,1,zhaPin.getID()),new Object[]{new ItemStack(itemMissile,1,Explosive.missileModule.getID()),new ItemStack(ICBMExplosion.blockExplosive,1,zhaPin.getID())}),zhaPin.getUnlocalizedName() + ""String_Node_Str"",Settings.CONFIGURATION,true);
    if (zhaPin.getTier() < 2) {
      RecipeUtility.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.itemGrenade,1,zhaPin.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBMExplosion.blockExplosive,1,zhaPin.getID()),'?',Item.silk}),zhaPin.getUnlocalizedName() + ""String_Node_Str"",Settings.CONFIGURATION,true);
    }
    if (zhaPin.getTier() < 3) {
      RecipeUtility.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMExplosion.itemBombCart,1,zhaPin.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",'?',new ItemStack(ICBMExplosion.blockExplosive,1,zhaPin.getID()),'@',Item.minecartEmpty}),zhaPin.getUnlocalizedName() + ""String_Node_Str"",Settings.CONFIGURATION,true);
    }
  }
  EntityRegistry.registerGlobalEntityID(EntityExplosive.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityMissile.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityExplosion.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityFlyingBlock.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityLightBeam.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityFragments.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityGrenade.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityBombCart.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityExplosive.class,""String_Node_Str"",ENTITY_ID_PREFIX,this,50,5,true);
  EntityRegistry.registerModEntity(EntityMissile.class,""String_Node_Str"",ENTITY_ID_PREFIX + 1,this,500,1,true);
  EntityRegistry.registerModEntity(EntityExplosion.class,""String_Node_Str"",ENTITY_ID_PREFIX + 2,this,100,5,true);
  EntityRegistry.registerModEntity(EntityFlyingBlock.class,""String_Node_Str"",ENTITY_ID_PREFIX + 3,this,50,15,true);
  EntityRegistry.registerModEntity(EntityLightBeam.class,""String_Node_Str"",ENTITY_ID_PREFIX + 4,this,80,5,true);
  EntityRegistry.registerModEntity(EntityFragments.class,""String_Node_Str"",ENTITY_ID_PREFIX + 5,this,40,8,true);
  EntityRegistry.registerModEntity(EntityGrenade.class,""String_Node_Str"",ENTITY_ID_PREFIX + 6,this,50,5,true);
  EntityRegistry.registerModEntity(EntityBombCart.class,""String_Node_Str"",ENTITY_ID_PREFIX + 8,this,50,4,true);
  ICBMExplosion.proxy.init();
}","@Override @EventHandler public void postInit(FMLPostInitializationEvent event){
  super.postInit(event);
  ItemStack remoteDetonator=CompatibilityModule.getItemWithCharge(new ItemStack(itemRemoteDetonator),0);
  GameRegistry.addRecipe(new ShapedOreRecipe(itemRocketLauncher,new Object[]{""String_Node_Str"",""String_Node_Str"",'R',itemRadarGun,'C',new ItemStack(blockMachine,1,MachineData.CruiseLauncher.ordinal() + 6),'B',Block.stoneButton,'S',UniversalRecipe.PRIMARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemRadarGun),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Block.glass,'!',UniversalRecipe.PRIMARY_METAL.get(),'#',UniversalRecipe.CIRCUIT_T1.get(),'$',Block.stoneButton}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemRemoteDetonator),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',UniversalRecipe.PRIMARY_METAL.get(),'?',Item.redstone,'#',UniversalRecipe.CIRCUIT_T2.get(),'$',Block.stoneButton}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemLaserDesignator),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',CompatibilityModule.getItemWithCharge(new ItemStack(itemRemoteDetonator),0),'?',UniversalRecipe.CIRCUIT_T3.get(),'!',CompatibilityModule.getItemWithCharge(new ItemStack(itemRadarGun),0)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemBombDefuser),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',UniversalRecipe.CIRCUIT_T2.get(),'W',UniversalRecipe.WRENCH.get(),'I',UniversalRecipe.WIRE.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.SECONDARY_METAL.get(),'C',UniversalRecipe.CIRCUIT_T1.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(blockMachine,1,0),'!',UniversalRecipe.PRIMARY_METAL.get(),'C',UniversalRecipe.CIRCUIT_T2.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(blockMachine,1,1),'!',UniversalRecipe.PRIMARY_PLATE.get(),'C',UniversalRecipe.CIRCUIT_T3.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',UniversalRecipe.CIRCUIT_T1.get(),'!',Block.glass,'?',UniversalRecipe.WIRE.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',UniversalRecipe.CIRCUIT_T2.get(),'!',UniversalRecipe.PRIMARY_METAL.get(),'?',UniversalRecipe.WIRE.get(),'$',new ItemStack(blockMachine,1,3)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,5),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',UniversalRecipe.CIRCUIT_T3.get(),'!',Item.ingotGold,'?',UniversalRecipe.WIRE.get(),'$',new ItemStack(blockMachine,1,4)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.SECONDARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,7),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.PRIMARY_METAL.get(),'@',new ItemStack(blockMachine,1,6)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,8),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',UniversalRecipe.PRIMARY_PLATE.get(),'@',new ItemStack(blockMachine,1,7)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,9),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',CompatibilityModule.getItemWithCharge(new ItemStack(itemRadarGun),0),'!',UniversalRecipe.PRIMARY_PLATE.get(),'#',UniversalRecipe.CIRCUIT_T1.get(),'?',Item.ingotGold}));
  RecipeUtility.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,10),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'?',UniversalRecipe.PRIMARY_PLATE.get(),'!',UniversalRecipe.CIRCUIT_T3.get(),'@',UniversalRecipe.BATTERY_BOX.get(),'#',UniversalRecipe.MOTOR.get(),'W',UniversalRecipe.WIRE.get()}),""String_Node_Str"",Settings.CONFIGURATION,true);
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,11),new Object[]{""String_Node_Str"",""String_Node_Str"",'@',UniversalRecipe.PRIMARY_PLATE.get(),'!',new ItemStack(blockMachine,1,2),'?',new ItemStack(blockMachine,1,8)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockMachine,1,MachineData.MissileCoordinator.ordinal()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',UniversalRecipe.CIRCUIT_T2.get(),'S',UniversalRecipe.PRIMARY_PLATE.get(),'R',itemRemoteDetonator}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.missileModule.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',UniversalRecipe.PRIMARY_METAL.get(),'?',Item.flintAndSteel,'#',UniversalRecipe.CIRCUIT_T1.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.homing.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',new ItemStack(itemMissile,1,Explosive.missileModule.getID()),'C',UniversalRecipe.CIRCUIT_T1.get(),'B',UniversalRecipe.SECONDARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.antiBallistic.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(itemMissile,1,Explosive.missileModule.getID()),'?',new ItemStack(blockExplosive,1,0),'!',UniversalRecipe.CIRCUIT_T1.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.cluster.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(itemMissile,1,Explosive.missileModule.getID()),'?',Explosive.fragmentation.getItemStack(),'!',new ItemStack(itemMissile,1,0)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itemMissile,1,Explosive.nuclearCluster.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",'C',new ItemStack(itemMissile,1,Explosive.cluster.getID()),'N',Explosive.nuclear.getItemStack()}));
  for (  Explosive zhaPin : ExplosiveRegistry.getAllZhaPin()) {
    zhaPin.init();
    RecipeUtility.addRecipe(new ShapelessOreRecipe(new ItemStack(itemMissile,1,zhaPin.getID()),new Object[]{new ItemStack(itemMissile,1,Explosive.missileModule.getID()),new ItemStack(blockExplosive,1,zhaPin.getID())}),zhaPin.getUnlocalizedName() + ""String_Node_Str"",Settings.CONFIGURATION,true);
    if (zhaPin.getTier() < 2) {
      RecipeUtility.addRecipe(new ShapedOreRecipe(new ItemStack(itemGrenade,1,zhaPin.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(blockExplosive,1,zhaPin.getID()),'?',Item.silk}),zhaPin.getUnlocalizedName() + ""String_Node_Str"",Settings.CONFIGURATION,true);
    }
    if (zhaPin.getTier() < 3) {
      RecipeUtility.addRecipe(new ShapedOreRecipe(new ItemStack(itemBombCart,1,zhaPin.getID()),new Object[]{""String_Node_Str"",""String_Node_Str"",'?',new ItemStack(blockExplosive,1,zhaPin.getID()),'@',Item.minecartEmpty}),zhaPin.getUnlocalizedName() + ""String_Node_Str"",Settings.CONFIGURATION,true);
    }
  }
  EntityRegistry.registerGlobalEntityID(EntityExplosive.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityMissile.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityExplosion.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityFlyingBlock.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityLightBeam.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityFragments.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityGrenade.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EntityBombCart.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityExplosive.class,""String_Node_Str"",ENTITY_ID_PREFIX,this,50,5,true);
  EntityRegistry.registerModEntity(EntityMissile.class,""String_Node_Str"",ENTITY_ID_PREFIX + 1,this,500,1,true);
  EntityRegistry.registerModEntity(EntityExplosion.class,""String_Node_Str"",ENTITY_ID_PREFIX + 2,this,100,5,true);
  EntityRegistry.registerModEntity(EntityFlyingBlock.class,""String_Node_Str"",ENTITY_ID_PREFIX + 3,this,50,15,true);
  EntityRegistry.registerModEntity(EntityLightBeam.class,""String_Node_Str"",ENTITY_ID_PREFIX + 4,this,80,5,true);
  EntityRegistry.registerModEntity(EntityFragments.class,""String_Node_Str"",ENTITY_ID_PREFIX + 5,this,40,8,true);
  EntityRegistry.registerModEntity(EntityGrenade.class,""String_Node_Str"",ENTITY_ID_PREFIX + 6,this,50,5,true);
  EntityRegistry.registerModEntity(EntityBombCart.class,""String_Node_Str"",ENTITY_ID_PREFIX + 8,this,50,4,true);
  proxy.init();
}",0.9697883625396496
169859,"@ForgeSubscribe public void creeperDropEvent(LivingDropsEvent evt){
  if (evt.entityLiving instanceof EntityCreeper) {
    if (ICBMExplosion.CREEPER_DROP_SULFER) {
      evt.entityLiving.dropItem(this.itemSulfurDust.itemID,1 + evt.entityLiving.worldObj.rand.nextInt(6));
    }
  }
}","@ForgeSubscribe public void creeperDropEvent(LivingDropsEvent evt){
  if (evt.entityLiving instanceof EntityCreeper) {
    if (CREEPER_DROP_SULFER) {
      evt.entityLiving.dropItem(this.itemSulfurDust.itemID,1 + evt.entityLiving.worldObj.rand.nextInt(6));
    }
  }
}",0.9745454545454544
169860,"@ForgeSubscribe public void creeperDeathEvent(LivingDeathEvent evt){
  if (evt.entityLiving instanceof EntityCreeper) {
    if (ICBMExplosion.CREEPER_BLOW_UP_IN_FIRE) {
      if (evt.source == DamageSource.onFire || evt.source == DamageSource.inFire) {
        evt.setCanceled(true);
        boolean flag=evt.entityLiving.worldObj.getGameRules().getGameRuleBooleanValue(""String_Node_Str"");
        if (((EntityCreeper)evt.entityLiving).getPowered()) {
          evt.entityLiving.worldObj.createExplosion(evt.entityLiving,evt.entityLiving.posX,evt.entityLiving.posY,evt.entityLiving.posZ,6f,flag);
        }
 else {
          evt.entityLiving.worldObj.createExplosion(evt.entityLiving,evt.entityLiving.posX,evt.entityLiving.posY,evt.entityLiving.posZ,3f,flag);
        }
      }
    }
  }
}","@ForgeSubscribe public void creeperDeathEvent(LivingDeathEvent evt){
  if (evt.entityLiving instanceof EntityCreeper) {
    if (CREEPER_BLOW_UP_IN_FIRE) {
      if (evt.source == DamageSource.onFire || evt.source == DamageSource.inFire) {
        evt.setCanceled(true);
        boolean flag=evt.entityLiving.worldObj.getGameRules().getGameRuleBooleanValue(""String_Node_Str"");
        if (((EntityCreeper)evt.entityLiving).getPowered()) {
          evt.entityLiving.worldObj.createExplosion(evt.entityLiving,evt.entityLiving.posX,evt.entityLiving.posY,evt.entityLiving.posZ,6f,flag);
        }
 else {
          evt.entityLiving.worldObj.createExplosion(evt.entityLiving,evt.entityLiving.posX,evt.entityLiving.posY,evt.entityLiving.posZ,3f,flag);
        }
      }
    }
  }
}",0.9910485933503836
169861,"public GuiLauncherScreen(TileLauncherScreen par2ICBMTileEntityMissileLauncher){
  this.tileEntity=par2ICBMTileEntityMissileLauncher;
}","public GuiLauncherScreen(TileLauncherScreen tileEntity){
  super(tileEntity);
  this.tileEntity=tileEntity;
}",0.7407407407407407
169862,"/** 
 * Adds the buttons (and other controls) to the screen in question. 
 */
@Override public void initGui(){
  super.initGui();
  this.tFX=new GuiTextField(fontRenderer,110,37,45,12);
  this.tFZ=new GuiTextField(fontRenderer,110,52,45,12);
  this.tFY=new GuiTextField(fontRenderer,110,67,45,12);
  this.tFGaoDu=new GuiTextField(fontRenderer,110,82,45,12);
  this.tFFreq=new GuiTextField(fontRenderer,110,97,45,12);
  this.tFFreq.setMaxStringLength(4);
  this.tFX.setMaxStringLength(6);
  this.tFZ.setMaxStringLength(6);
  this.tFY.setMaxStringLength(3);
  this.tFGaoDu.setMaxStringLength(3);
  this.tFFreq.setText(this.tileEntity.getFrequency() + ""String_Node_Str"");
  this.tFGaoDu.setText(this.tileEntity.gaoDu + ""String_Node_Str"");
  if (this.tileEntity.getTarget() == null) {
    this.tFX.setText(Math.round(this.tileEntity.xCoord) + ""String_Node_Str"");
    this.tFZ.setText(Math.round(this.tileEntity.zCoord) + ""String_Node_Str"");
    this.tFY.setText(""String_Node_Str"");
  }
 else {
    this.tFX.setText(Math.round(this.tileEntity.getTarget().x) + ""String_Node_Str"");
    this.tFZ.setText(Math.round(this.tileEntity.getTarget().z) + ""String_Node_Str"");
    this.tFY.setText(Math.round(this.tileEntity.getTarget().y) + ""String_Node_Str"");
  }
  PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_TILE.getPacket(this.tileEntity,-1,true));
}","/** 
 * Adds the buttons (and other controls) to the screen in question. 
 */
@Override public void initGui(){
  super.initGui();
  this.tFX=new GuiTextField(fontRenderer,110,37,45,12);
  this.tFZ=new GuiTextField(fontRenderer,110,52,45,12);
  this.tFY=new GuiTextField(fontRenderer,110,67,45,12);
  this.tFGaoDu=new GuiTextField(fontRenderer,110,82,45,12);
  this.tFFreq=new GuiTextField(fontRenderer,110,97,45,12);
  this.tFFreq.setMaxStringLength(4);
  this.tFX.setMaxStringLength(6);
  this.tFZ.setMaxStringLength(6);
  this.tFY.setMaxStringLength(3);
  this.tFGaoDu.setMaxStringLength(3);
  this.tFFreq.setText(this.tileEntity.getFrequency() + ""String_Node_Str"");
  this.tFGaoDu.setText(this.tileEntity.gaoDu + ""String_Node_Str"");
  if (this.tileEntity.getTarget() == null) {
    this.tFX.setText(Math.round(this.tileEntity.xCoord) + ""String_Node_Str"");
    this.tFZ.setText(Math.round(this.tileEntity.zCoord) + ""String_Node_Str"");
    this.tFY.setText(""String_Node_Str"");
  }
 else {
    this.tFX.setText(Math.round(this.tileEntity.getTarget().x) + ""String_Node_Str"");
    this.tFZ.setText(Math.round(this.tileEntity.getTarget().z) + ""String_Node_Str"");
    this.tFY.setText(Math.round(this.tileEntity.getTarget().y) + ""String_Node_Str"");
  }
}",0.963020030816641
169863,"public Packet getDescriptionPacket2(){
  return ICBMCore.PACKET_TILE.getPacket(this,3,this.energy.getEnergy(),this.targetPos.x,this.targetPos.y,this.targetPos.z);
}","public Packet getDescriptionPacket2(){
  return ICBMCore.PACKET_TILE.getPacket(this,4,this.energy.getEnergy(),this.targetPos.intX(),this.targetPos.intY(),this.targetPos.intZ());
}",0.932944606413994
169864,"@Override public void onReceivePacket(ByteArrayDataInput data,EntityPlayer player,Object... extra){
  try {
switch (data.readInt()) {
case 0:
{
        this.fangXiang=data.readByte();
        this.tier=data.readInt();
        this.setFrequency(data.readInt());
        this.gaoDu=data.readShort();
        break;
      }
case 1:
{
      this.setFrequency(data.readInt());
      break;
    }
case 2:
{
    this.targetPos=new Vector3(data.readDouble(),data.readDouble(),data.readDouble());
    if (this.getTier() < 2) {
      this.targetPos.y=0;
    }
    break;
  }
case 3:
{
  this.gaoDu=(short)Math.max(Math.min(data.readShort(),Short.MAX_VALUE),3);
  break;
}
case 4:
{
this.energy.setEnergy(data.readLong());
this.targetPos=new Vector3(data.readDouble(),data.readDouble(),data.readDouble());
break;
}
}
}
 catch (Exception e) {
e.printStackTrace();
}
}","@Override public void onReceivePacket(ByteArrayDataInput data,EntityPlayer player,Object... extra){
  try {
switch (data.readInt()) {
case -1:
{
        if (data.readBoolean())         this.playersUsing.add(player);
 else         this.playersUsing.remove(player);
        break;
      }
case 0:
{
      this.fangXiang=data.readByte();
      this.tier=data.readInt();
      this.setFrequency(data.readInt());
      this.gaoDu=data.readShort();
      break;
    }
case 1:
{
    this.setFrequency(data.readInt());
    break;
  }
case 2:
{
  this.targetPos=new Vector3(data.readDouble(),data.readDouble(),data.readDouble());
  if (this.getTier() < 2) {
    this.targetPos.y=0;
  }
  break;
}
case 3:
{
this.gaoDu=(short)Math.max(Math.min(data.readShort(),Short.MAX_VALUE),3);
break;
}
case 4:
{
this.energy.setEnergy(data.readLong());
this.targetPos=new Vector3(data.readInt(),data.readInt(),data.readInt());
break;
}
}
}
 catch (Exception e) {
e.printStackTrace();
}
}",0.8802197802197802
169865,"@Override public void updateEntity(){
  super.updateEntity();
  if (this.laucherBase == null) {
    for (byte i=2; i < 6; i++) {
      Vector3 position=new Vector3(this.xCoord,this.yCoord,this.zCoord);
      position.modifyPositionFromSide(ForgeDirection.getOrientation(i));
      TileEntity tileEntity=this.worldObj.getBlockTileEntity(position.intX(),position.intY(),position.intZ());
      if (tileEntity != null) {
        if (tileEntity instanceof TileLauncherBase) {
          this.laucherBase=(TileLauncherBase)tileEntity;
          this.fangXiang=i;
        }
      }
    }
  }
 else {
    if (this.laucherBase.isInvalid()) {
      this.laucherBase=null;
    }
  }
  if (isPowered) {
    isPowered=false;
    this.launch();
  }
  if (!this.worldObj.isRemote) {
    if (this.ticks % 3 == 0) {
      if (this.targetPos == null) {
        this.targetPos=new Vector3(this.xCoord,0,this.zCoord);
      }
      for (      EntityPlayer wanJia : this.playersUsing) {
        PacketDispatcher.sendPacketToPlayer(this.getDescriptionPacket2(),(Player)wanJia);
      }
    }
    if (this.ticks % 600 == 0) {
      this.worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (this.laucherBase == null) {
    for (byte i=2; i < 6; i++) {
      Vector3 position=new Vector3(this.xCoord,this.yCoord,this.zCoord);
      position.modifyPositionFromSide(ForgeDirection.getOrientation(i));
      TileEntity tileEntity=this.worldObj.getBlockTileEntity(position.intX(),position.intY(),position.intZ());
      if (tileEntity != null) {
        if (tileEntity instanceof TileLauncherBase) {
          this.laucherBase=(TileLauncherBase)tileEntity;
          this.fangXiang=i;
        }
      }
    }
  }
 else {
    if (this.laucherBase.isInvalid()) {
      this.laucherBase=null;
    }
  }
  if (isPowered) {
    isPowered=false;
    this.launch();
  }
  if (!this.worldObj.isRemote) {
    if (this.ticks % 3 == 0) {
      if (this.targetPos == null) {
        this.targetPos=new Vector3(this.xCoord,0,this.zCoord);
      }
      for (      EntityPlayer players : this.playersUsing) {
        PacketDispatcher.sendPacketToPlayer(this.getDescriptionPacket2(),(Player)players);
      }
    }
    if (this.ticks % 600 == 0) {
      this.worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
    }
  }
}",0.9890939597315436
169866,"public long getEnergyCapacity(){
switch (this.getTier()) {
case 0:
    return 500000;
case 1:
  return 800000;
}
return 1000000;
}","public long getEnergyCapacity(){
switch (this.getTier()) {
case 0:
    return 5000000;
case 1:
  return 8000000;
}
return 10000000;
}",0.988593155893536
169867,"@Override public void init(){
  super.init();
  MinecraftForgeClient.registerItemRenderer(ICBMExplosion.itemRocketLauncher.itemID,new RenderItemLauncher());
  MinecraftForgeClient.registerItemRenderer(ICBMExplosion.itemMissile.itemID,new RenderItemMissile());
  RenderingRegistry.registerBlockHandler(new RenderBombBlock());
  RenderingRegistry.registerBlockHandler(new BlockRenderHandler());
  RenderingRegistry.registerEntityRenderingHandler(EntityExplosive.class,new RenderEntityExplosive());
  RenderingRegistry.registerEntityRenderingHandler(EntityMissile.class,new RenderMissile(0.5F));
  RenderingRegistry.registerEntityRenderingHandler(EntityExplosion.class,new RenderExplosion());
  RenderingRegistry.registerEntityRenderingHandler(EntityFlyingBlock.class,new RenderEntityBlock());
  RenderingRegistry.registerEntityRenderingHandler(EntityLightBeam.class,new RenderLightBeam());
  RenderingRegistry.registerEntityRenderingHandler(EntityFragments.class,new RenderShrapnel());
  RenderingRegistry.registerEntityRenderingHandler(EntityGrenade.class,new RenderGrenade());
  RenderingRegistry.registerEntityRenderingHandler(EntityBombCart.class,new RenderMinecart());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityCruiseLauncher.class,new RenderCruiseLauncher());
  ClientRegistry.bindTileEntitySpecialRenderer(TileLauncherBase.class,new RFaSheDi());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityLauncherScreen.class,new RFaSheShiMuo());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntitySupportFrame.class,new RFaSheJia());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityRadarStation.class,new RenderRadarStation());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEMPTower.class,new RenderEmpTower());
  ClientRegistry.bindTileEntitySpecialRenderer(TileMissileCoordinator.class,new RenderMissileCoordinator());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityExplosive.class,new RenderBombBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(TileMissileAssembler.class,new RenderMissileTable());
}","@Override public void init(){
  super.init();
  MinecraftForgeClient.registerItemRenderer(ICBMExplosion.itemRocketLauncher.itemID,new RenderItemLauncher());
  MinecraftForgeClient.registerItemRenderer(ICBMExplosion.itemMissile.itemID,new RenderItemMissile());
  RenderingRegistry.registerBlockHandler(new RenderBombBlock());
  RenderingRegistry.registerBlockHandler(new BlockRenderHandler());
  RenderingRegistry.registerEntityRenderingHandler(EntityExplosive.class,new RenderEntityExplosive());
  RenderingRegistry.registerEntityRenderingHandler(EntityMissile.class,new RenderMissile(0.5F));
  RenderingRegistry.registerEntityRenderingHandler(EntityExplosion.class,new RenderExplosion());
  RenderingRegistry.registerEntityRenderingHandler(EntityFlyingBlock.class,new RenderEntityBlock());
  RenderingRegistry.registerEntityRenderingHandler(EntityLightBeam.class,new RenderLightBeam());
  RenderingRegistry.registerEntityRenderingHandler(EntityFragments.class,new RenderShrapnel());
  RenderingRegistry.registerEntityRenderingHandler(EntityGrenade.class,new RenderGrenade());
  RenderingRegistry.registerEntityRenderingHandler(EntityBombCart.class,new RenderMinecart());
  ClientRegistry.bindTileEntitySpecialRenderer(TileCruiseLauncher.class,new RenderCruiseLauncher());
  ClientRegistry.bindTileEntitySpecialRenderer(TileLauncherBase.class,new RFaSheDi());
  ClientRegistry.bindTileEntitySpecialRenderer(TileLauncherScreen.class,new RFaSheShiMuo());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntitySupportFrame.class,new RFaSheJia());
  ClientRegistry.bindTileEntitySpecialRenderer(TileRadarStation.class,new RenderRadarStation());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEMPTower.class,new RenderEmpTower());
  ClientRegistry.bindTileEntitySpecialRenderer(TileMissileCoordinator.class,new RenderMissileCoordinator());
  ClientRegistry.bindTileEntitySpecialRenderer(TileExplosive.class,new RenderBombBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(TileMissileAssembler.class,new RenderMissileTable());
}",0.9941377625793844
169868,"@Override public Object getClientGuiElement(int ID,EntityPlayer entityPlayer,World world,int x,int y,int z){
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TileEntityCruiseLauncher) {
    return new GuiCruiseLauncher(entityPlayer.inventory,(TileEntityCruiseLauncher)tileEntity);
  }
 else   if (tileEntity instanceof TileEntityLauncherScreen) {
    return new GuiLauncherScreen(((TileEntityLauncherScreen)tileEntity));
  }
 else   if (tileEntity instanceof TileEntityRadarStation) {
    return new GuiRadarStation(((TileEntityRadarStation)tileEntity));
  }
 else   if (tileEntity instanceof TileEMPTower) {
    return new GuiEmpTower((TileEMPTower)tileEntity);
  }
 else   if (tileEntity instanceof TileLauncherBase) {
    return new GuiLauncherBase(entityPlayer.inventory,(TileLauncherBase)tileEntity);
  }
 else   if (tileEntity instanceof TileMissileCoordinator) {
    return new GuiMissileCoordinator(entityPlayer.inventory,(TileMissileCoordinator)tileEntity);
  }
 else   if (tileEntity instanceof TileMissileAssembler) {
    return new GuiMissileTable(entityPlayer.inventory,((TileMissileAssembler)tileEntity));
  }
  return null;
}","@Override public Object getClientGuiElement(int ID,EntityPlayer entityPlayer,World world,int x,int y,int z){
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TileCruiseLauncher) {
    return new GuiCruiseLauncher(entityPlayer.inventory,(TileCruiseLauncher)tileEntity);
  }
 else   if (tileEntity instanceof TileLauncherScreen) {
    return new GuiLauncherScreen(((TileLauncherScreen)tileEntity));
  }
 else   if (tileEntity instanceof TileRadarStation) {
    return new GuiRadarStation(((TileRadarStation)tileEntity));
  }
 else   if (tileEntity instanceof TileEMPTower) {
    return new GuiEmpTower((TileEMPTower)tileEntity);
  }
 else   if (tileEntity instanceof TileLauncherBase) {
    return new GuiLauncherBase(entityPlayer.inventory,(TileLauncherBase)tileEntity);
  }
 else   if (tileEntity instanceof TileMissileCoordinator) {
    return new GuiMissileCoordinator(entityPlayer.inventory,(TileMissileCoordinator)tileEntity);
  }
 else   if (tileEntity instanceof TileMissileAssembler) {
    return new GuiMissileTable(entityPlayer.inventory,((TileMissileAssembler)tileEntity));
  }
  return null;
}",0.9844559585492229
169869,"public void init(){
  GameRegistry.registerTileEntity(TileEntityCruiseLauncher.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileLauncherBase.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityLauncherScreen.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntitySupportFrame.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityRadarStation.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEMPTower.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileMissileCoordinator.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityExplosive.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileMissileAssembler.class,""String_Node_Str"");
}","public void init(){
  GameRegistry.registerTileEntity(TileCruiseLauncher.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileLauncherBase.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileLauncherScreen.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntitySupportFrame.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileRadarStation.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEMPTower.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileMissileCoordinator.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileExplosive.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileMissileAssembler.class,""String_Node_Str"");
}",0.9837618403247632
169870,"@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TileEntityCruiseLauncher) {
    return new ContainerCruiseLauncher(player.inventory,(TileEntityCruiseLauncher)tileEntity);
  }
 else   if (tileEntity instanceof TileLauncherBase) {
    return new ContainerLauncher(player.inventory,(TileLauncherBase)tileEntity);
  }
 else   if (tileEntity instanceof TileMissileCoordinator) {
    return new ContainerMissileCoordinator(player.inventory,(TileMissileCoordinator)tileEntity);
  }
 else   if (tileEntity instanceof TileMissileAssembler) {
    return new ContainerMissileTable(player.inventory,(TileMissileAssembler)tileEntity);
  }
  return null;
}","@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TileCruiseLauncher) {
    return new ContainerCruiseLauncher(player.inventory,(TileCruiseLauncher)tileEntity);
  }
 else   if (tileEntity instanceof TileLauncherBase) {
    return new ContainerLauncher(player.inventory,(TileLauncherBase)tileEntity);
  }
 else   if (tileEntity instanceof TileMissileCoordinator) {
    return new ContainerMissileCoordinator(player.inventory,(TileMissileCoordinator)tileEntity);
  }
 else   if (tileEntity instanceof TileMissileAssembler) {
    return new ContainerMissileTable(player.inventory,(TileMissileAssembler)tileEntity);
  }
  return null;
}",0.9922680412371134
169871,"public ContainerCruiseLauncher(InventoryPlayer par1InventoryPlayer,TileEntityCruiseLauncher tileEntity){
  this.tileEntity=tileEntity;
  this.addSlotToContainer(new SlotSpecific(tileEntity,0,151,23,ItemMissile.class));
  this.addSlotToContainer(new SlotEnergyItem(tileEntity,1,151,47));
  int var3;
  for (var3=0; var3 < 3; ++var3) {
    for (int var4=0; var4 < 9; ++var4) {
      this.addSlotToContainer(new Slot(par1InventoryPlayer,var4 + var3 * 9 + 9,8 + var4 * 18,84 + var3 * 18));
    }
  }
  for (var3=0; var3 < 9; ++var3) {
    this.addSlotToContainer(new Slot(par1InventoryPlayer,var3,8 + var3 * 18,142));
  }
}","public ContainerCruiseLauncher(InventoryPlayer par1InventoryPlayer,TileCruiseLauncher tileEntity){
  this.tileEntity=tileEntity;
  this.addSlotToContainer(new SlotSpecific(tileEntity,0,151,23,ItemMissile.class));
  this.addSlotToContainer(new SlotEnergyItem(tileEntity,1,151,47));
  int var3;
  for (var3=0; var3 < 3; ++var3) {
    for (int var4=0; var4 < 9; ++var4) {
      this.addSlotToContainer(new Slot(par1InventoryPlayer,var4 + var3 * 9 + 9,8 + var4 * 18,84 + var3 * 18));
    }
  }
  for (var3=0; var3 < 9; ++var3) {
    this.addSlotToContainer(new Slot(par1InventoryPlayer,var3,8 + var3 * 18,142));
  }
}",0.99512987012987
169872,"@Override public void doExplode(){
  int r=this.callCount;
  if (!this.worldObj.isRemote) {
    if (this.thread != null && this.thread.isComplete) {
      Iterator<Vector3> it=this.thread.results.iterator();
      while (it.hasNext()) {
        Vector3 targetPosition=it.next();
        double distance=Vector3.distance(targetPosition,position);
        if (distance > r || distance < r - 3)         continue;
        int blockID=this.worldObj.getBlockId(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ());
        if (blockID == 0 || blockID == Block.bedrock.blockID || blockID == Block.obsidian.blockID)         continue;
        if (Block.blocksList[blockID] instanceof IForceFieldBlock)         continue;
        int metadata=this.worldObj.getBlockMetadata(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ());
        if (distance < r - 1 || this.worldObj.rand.nextInt(3) > 0) {
          if (blockID == ICBMExplosion.blockExplosive.blockID) {
            BlockExplosive.yinZha(this.worldObj,targetPosition.intX(),targetPosition.intY(),targetPosition.intZ(),((TileEntityExplosive)this.worldObj.getBlockTileEntity(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ())).haoMa,1);
          }
 else {
            this.worldObj.setBlockToAir(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ());
          }
          targetPosition.translate(0.5D);
          if (this.worldObj.rand.nextFloat() < 0.3 * (this.getRadius() - r)) {
            EntityFlyingBlock entity=new EntityFlyingBlock(this.worldObj,targetPosition,blockID,metadata);
            this.worldObj.spawnEntityInWorld(entity);
            entity.yawChange=50 * this.worldObj.rand.nextFloat();
            entity.pitchChange=100 * this.worldObj.rand.nextFloat();
          }
          it.remove();
        }
      }
    }
  }
  int radius=2 * this.callCount;
  AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.x - radius,position.y - radius,position.z - radius,position.x + radius,position.y + radius,position.z + radius);
  List<Entity> allEntities=this.worldObj.getEntitiesWithinAABB(Entity.class,bounds);
synchronized (allEntities) {
    for (Iterator it=allEntities.iterator(); it.hasNext(); ) {
      Entity entity=(Entity)it.next();
      if (entity instanceof EntityMissile) {
        ((EntityMissile)entity).setExplode();
        break;
      }
 else {
        double xDifference=entity.posX - position.x;
        double zDifference=entity.posZ - position.z;
        r=(int)this.getRadius();
        if (xDifference < 0)         r=(int)-this.getRadius();
        entity.motionX+=(r - xDifference) * 0.02 * this.worldObj.rand.nextFloat();
        entity.motionY+=3 * this.worldObj.rand.nextFloat();
        r=(int)this.getRadius();
        if (zDifference < 0)         r=(int)-this.getRadius();
        entity.motionZ+=(r - zDifference) * 0.02 * this.worldObj.rand.nextFloat();
      }
    }
  }
  if (this.callCount > this.getRadius()) {
    this.controller.endExplosion();
  }
}","@Override public void doExplode(){
  int r=this.callCount;
  if (!this.worldObj.isRemote) {
    if (this.thread != null && this.thread.isComplete) {
      Iterator<Vector3> it=this.thread.results.iterator();
      while (it.hasNext()) {
        Vector3 targetPosition=it.next();
        double distance=Vector3.distance(targetPosition,position);
        if (distance > r || distance < r - 3)         continue;
        int blockID=this.worldObj.getBlockId(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ());
        if (blockID == 0 || blockID == Block.bedrock.blockID || blockID == Block.obsidian.blockID)         continue;
        if (Block.blocksList[blockID] instanceof IForceFieldBlock)         continue;
        int metadata=this.worldObj.getBlockMetadata(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ());
        if (distance < r - 1 || this.worldObj.rand.nextInt(3) > 0) {
          if (blockID == ICBMExplosion.blockExplosive.blockID) {
            BlockExplosive.yinZha(this.worldObj,targetPosition.intX(),targetPosition.intY(),targetPosition.intZ(),((TileExplosive)this.worldObj.getBlockTileEntity(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ())).haoMa,1);
          }
 else {
            this.worldObj.setBlockToAir(targetPosition.intX(),targetPosition.intY(),targetPosition.intZ());
          }
          targetPosition.translate(0.5D);
          if (this.worldObj.rand.nextFloat() < 0.3 * (this.getRadius() - r)) {
            EntityFlyingBlock entity=new EntityFlyingBlock(this.worldObj,targetPosition,blockID,metadata);
            this.worldObj.spawnEntityInWorld(entity);
            entity.yawChange=50 * this.worldObj.rand.nextFloat();
            entity.pitchChange=100 * this.worldObj.rand.nextFloat();
          }
          it.remove();
        }
      }
    }
  }
  int radius=2 * this.callCount;
  AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.x - radius,position.y - radius,position.z - radius,position.x + radius,position.y + radius,position.z + radius);
  List<Entity> allEntities=this.worldObj.getEntitiesWithinAABB(Entity.class,bounds);
synchronized (allEntities) {
    for (Iterator it=allEntities.iterator(); it.hasNext(); ) {
      Entity entity=(Entity)it.next();
      if (entity instanceof EntityMissile) {
        ((EntityMissile)entity).setExplode();
        break;
      }
 else {
        double xDifference=entity.posX - position.x;
        double zDifference=entity.posZ - position.z;
        r=(int)this.getRadius();
        if (xDifference < 0)         r=(int)-this.getRadius();
        entity.motionX+=(r - xDifference) * 0.02 * this.worldObj.rand.nextFloat();
        entity.motionY+=3 * this.worldObj.rand.nextFloat();
        r=(int)this.getRadius();
        if (zDifference < 0)         r=(int)-this.getRadius();
        entity.motionZ+=(r - zDifference) * 0.02 * this.worldObj.rand.nextFloat();
      }
    }
  }
  if (this.callCount > this.getRadius()) {
    this.controller.endExplosion();
  }
}",0.9990046449900464
169873,"/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  this.fontRenderer.drawString(""String_Node_Str"" + tileEntity.getInvName(),52,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",8,23,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",8,39,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",8,54,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",70,20,4210752);
  this.textFieldX.drawTextBox();
  this.textFieldZ.drawTextBox();
  this.textFieldY.drawTextBox();
  this.textFieldFreq.drawTextBox();
  this.fontRenderer.drawString(this.tileEntity.getStatus(),70,50,4210752);
  this.fontRenderer.drawString(this.tileEntity.getVoltageInput(null) + ""String_Node_Str"",70,60,4210752);
  this.fontRenderer.drawString(UnitDisplay.getDisplayShort(this.tileEntity.energy.getEnergy(),Unit.JOULES) + ""String_Node_Str"" + UnitDisplay.getDisplayShort(this.tileEntity.getMaxEnergyStored(),Unit.JOULES),70,70,4210752);
  this.fontRenderer.drawString(StatCollector.translateToLocal(""String_Node_Str""),8,this.ySize - 96 + 2,4210752);
}","/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  this.fontRenderer.drawString(""String_Node_Str"" + tileEntity.getInvName(),52,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",8,23,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",8,39,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",8,54,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",70,20,4210752);
  this.textFieldX.drawTextBox();
  this.textFieldZ.drawTextBox();
  this.textFieldY.drawTextBox();
  this.textFieldFreq.drawTextBox();
  this.fontRenderer.drawString(this.tileEntity.getStatus(),70,50,4210752);
  this.fontRenderer.drawString(this.tileEntity.getVoltageInput(null) + ""String_Node_Str"",70,60,4210752);
  this.fontRenderer.drawString(UnitDisplay.getDisplayShort(this.tileEntity.energy.getEnergy(),Unit.JOULES) + ""String_Node_Str"" + UnitDisplay.getDisplayShort(this.tileEntity.energy.getEnergyCapacity(),Unit.JOULES),70,70,4210752);
  this.fontRenderer.drawString(StatCollector.translateToLocal(""String_Node_Str""),8,this.ySize - 96 + 2,4210752);
}",0.9872231686541738
169874,"public GuiCruiseLauncher(InventoryPlayer par1InventoryPlayer,TileEntityCruiseLauncher tileEntity){
  super(new ContainerCruiseLauncher(par1InventoryPlayer,tileEntity));
  this.tileEntity=tileEntity;
}","public GuiCruiseLauncher(InventoryPlayer par1InventoryPlayer,TileCruiseLauncher tileEntity){
  super(new ContainerCruiseLauncher(par1InventoryPlayer,tileEntity));
  this.tileEntity=tileEntity;
}",0.9847715736040608
169875,"public GuiLauncherScreen(TileEntityLauncherScreen par2ICBMTileEntityMissileLauncher){
  this.tileEntity=par2ICBMTileEntityMissileLauncher;
}","public GuiLauncherScreen(TileLauncherScreen par2ICBMTileEntityMissileLauncher){
  this.tileEntity=par2ICBMTileEntityMissileLauncher;
}",0.978102189781022
169876,"/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override public void drawForegroundLayer(int var2,int var3,float var1){
  this.tFX.drawTextBox();
  this.tFZ.drawTextBox();
  if (tileEntity.getTier() >= 1) {
    this.tFY.drawTextBox();
    this.fontRenderer.drawString(""String_Node_Str"",12,68,4210752);
    this.tFGaoDu.drawTextBox();
    this.fontRenderer.drawString(""String_Node_Str"",12,83,4210752);
    if (tileEntity.getTier() > 1) {
      this.tFFreq.drawTextBox();
      this.fontRenderer.drawString(""String_Node_Str"",12,98,4210752);
    }
  }
  this.fontRenderer.drawString(""String_Node_Str"",45,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",30,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",12,25,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",25,40,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",25,55,4210752);
  int inaccuracy=30;
  if (this.tileEntity.laucherBase != null) {
    if (this.tileEntity.laucherBase.supportFrame != null) {
      inaccuracy=this.tileEntity.laucherBase.supportFrame.getInaccuracy();
    }
  }
  this.fontRenderer.drawString(""String_Node_Str"" + inaccuracy + ""String_Node_Str"",12,113,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.tileEntity.getStatus(),12,125,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.tileEntity.getVoltage() + ""String_Node_Str"",12,137,4210752);
  this.fontRenderer.drawString(UnitDisplay.getDisplayShort(this.tileEntity.energy.getEnergy(),Unit.JOULES) + ""String_Node_Str"" + UnitDisplay.getDisplayShort(this.tileEntity.getMaxEnergyStored(),Unit.JOULES),12,150,4210752);
}","/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override public void drawForegroundLayer(int var2,int var3,float var1){
  this.tFX.drawTextBox();
  this.tFZ.drawTextBox();
  if (tileEntity.getTier() >= 1) {
    this.tFY.drawTextBox();
    this.fontRenderer.drawString(""String_Node_Str"",12,68,4210752);
    this.tFGaoDu.drawTextBox();
    this.fontRenderer.drawString(""String_Node_Str"",12,83,4210752);
    if (tileEntity.getTier() > 1) {
      this.tFFreq.drawTextBox();
      this.fontRenderer.drawString(""String_Node_Str"",12,98,4210752);
    }
  }
  this.fontRenderer.drawString(""String_Node_Str"",45,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",30,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",12,25,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",25,40,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",25,55,4210752);
  int inaccuracy=30;
  if (this.tileEntity.laucherBase != null) {
    if (this.tileEntity.laucherBase.supportFrame != null) {
      inaccuracy=this.tileEntity.laucherBase.supportFrame.getInaccuracy();
    }
  }
  this.fontRenderer.drawString(""String_Node_Str"" + inaccuracy + ""String_Node_Str"",12,113,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.tileEntity.getStatus(),12,125,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.tileEntity.getVoltageInput(null) + ""String_Node_Str"",12,137,4210752);
  this.fontRenderer.drawString(UnitDisplay.getDisplayShort(this.tileEntity.energy.getEnergy(),Unit.JOULES) + ""String_Node_Str"" + UnitDisplay.getDisplayShort(this.tileEntity.energy.getEnergyCapacity(),Unit.JOULES),12,150,4210752);
}",0.987764846314533
169877,"@Override public void updateScreen(){
  super.updateScreen();
  if (Mouse.isInsideWindow()) {
    if (Mouse.getEventButton() == -1) {
      this.mousePosition=new Vector2(Mouse.getEventX() * this.width / this.mc.displayWidth,this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1);
      float difference=TileEntityRadarStation.MAX_DETECTION_RANGE / this.radarMapRadius;
      if (this.mousePosition.x > this.radarCenter.x - difference && this.mousePosition.x < this.radarCenter.x + difference && this.mousePosition.y > this.radarCenter.y - difference && this.mousePosition.y < this.radarCenter.y + difference) {
        int xDifference=(int)(this.mousePosition.x - this.radarCenter.x);
        int yDifference=(int)(this.mousePosition.y - this.radarCenter.y);
        int xBlockDistance=(int)(xDifference * this.radarMapRadius);
        int yBlockDistance=(int)(yDifference * this.radarMapRadius);
        this.mouseOverCoords=new Vector2(this.tileEntity.xCoord + xBlockDistance,this.tileEntity.zCoord - yBlockDistance);
      }
    }
  }
  if (!this.textFieldSafetyZone.isFocused())   this.textFieldSafetyZone.setText(this.tileEntity.safetyRange + ""String_Node_Str"");
  if (!this.textFieldAlarmRange.isFocused())   this.textFieldAlarmRange.setText(this.tileEntity.alarmRange + ""String_Node_Str"");
}","@Override public void updateScreen(){
  super.updateScreen();
  if (Mouse.isInsideWindow()) {
    if (Mouse.getEventButton() == -1) {
      this.mousePosition=new Vector2(Mouse.getEventX() * this.width / this.mc.displayWidth,this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1);
      float difference=TileRadarStation.MAX_DETECTION_RANGE / this.radarMapRadius;
      if (this.mousePosition.x > this.radarCenter.x - difference && this.mousePosition.x < this.radarCenter.x + difference && this.mousePosition.y > this.radarCenter.y - difference && this.mousePosition.y < this.radarCenter.y + difference) {
        int xDifference=(int)(this.mousePosition.x - this.radarCenter.x);
        int yDifference=(int)(this.mousePosition.y - this.radarCenter.y);
        int xBlockDistance=(int)(xDifference * this.radarMapRadius);
        int yBlockDistance=(int)(yDifference * this.radarMapRadius);
        this.mouseOverCoords=new Vector2(this.tileEntity.xCoord + xBlockDistance,this.tileEntity.zCoord - yBlockDistance);
      }
    }
  }
  if (!this.textFieldSafetyZone.isFocused())   this.textFieldSafetyZone.setText(this.tileEntity.safetyRange + ""String_Node_Str"");
  if (!this.textFieldAlarmRange.isFocused())   this.textFieldAlarmRange.setText(this.tileEntity.alarmRange + ""String_Node_Str"");
}",0.9977203647416414
169878,"public GuiRadarStation(TileEntityRadarStation tileEntity){
  this.tileEntity=tileEntity;
  mouseOverCoords=new Vector2(this.tileEntity.xCoord,this.tileEntity.zCoord);
  this.xSize=256;
  radarCenter=new Vector2(this.containerPosX + this.xSize / 3 - 14,this.containerPosY + this.ySize / 2 + 4);
  radarMapRadius=TileEntityRadarStation.MAX_DETECTION_RANGE / 63.8F;
}","public GuiRadarStation(TileRadarStation tileEntity){
  this.tileEntity=tileEntity;
  mouseOverCoords=new Vector2(this.tileEntity.xCoord,this.tileEntity.zCoord);
  this.xSize=256;
  radarCenter=new Vector2(this.containerPosX + this.xSize / 3 - 14,this.containerPosY + this.ySize / 2 + 4);
  radarMapRadius=TileRadarStation.MAX_DETECTION_RANGE / 63.8F;
}",0.9832402234636872
169879,"/** 
 * Draw the background layer for the GuiContainer (everything behind the items) 
 */
@Override protected void drawBackgroundLayer(int var2,int var3,float var1){
  FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  this.containerPosX=(this.width - this.xSize) / 2;
  this.containerPosY=(this.height - this.ySize) / 2;
  this.drawTexturedModalRect(containerPosX,containerPosY,0,0,this.xSize,this.ySize);
  this.radarCenter=new Vector2(this.containerPosX + this.xSize / 3 - 10,this.containerPosY + this.ySize / 2 + 4);
  this.radarMapRadius=TileEntityRadarStation.MAX_DETECTION_RANGE / 71f;
  this.info=""String_Node_Str"";
  this.info2=""String_Node_Str"";
  if (this.tileEntity.energy.checkExtract()) {
    int range=4;
    for (    Entity entity : this.tileEntity.detectedEntities) {
      Vector2 position=new Vector2(radarCenter.x + (entity.posX - this.tileEntity.xCoord) / this.radarMapRadius,radarCenter.y - (entity.posZ - this.tileEntity.zCoord) / this.radarMapRadius);
      if (entity instanceof EntityMissile) {
        if (this.tileEntity.isWeiXianDaoDan((EntityMissile)entity)) {
          FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_RED_DOT);
        }
 else {
          FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_YELLOW_DOT);
        }
      }
 else {
        FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_YELLOW_DOT);
      }
      this.drawTexturedModalRect(position.intX(),position.intY(),0,0,2,2);
      Vector2 minPosition=position.clone();
      minPosition.add(-range);
      Vector2 maxPosition=position.clone();
      maxPosition.add(range);
      if (new Region2(minPosition,maxPosition).isIn(this.mousePosition)) {
        this.info=entity.getEntityName();
        if (entity instanceof EntityPlayer) {
          this.info=""String_Node_Str"" + this.info;
        }
        if (entity instanceof EntityMissile) {
          if (((EntityMissile)entity).targetVector != null) {
            this.info2=""String_Node_Str"" + ((EntityMissile)entity).targetVector.intX() + ""String_Node_Str""+ ((EntityMissile)entity).targetVector.intZ()+ ""String_Node_Str"";
          }
        }
      }
    }
    range=2;
    for (    TileEntity jiQi : this.tileEntity.detectedTiles) {
      Vector2 position=new Vector2(this.radarCenter.x + (jiQi.xCoord - this.tileEntity.xCoord) / this.radarMapRadius,this.radarCenter.y - (jiQi.zCoord - this.tileEntity.zCoord) / this.radarMapRadius);
      FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_WHITE_DOT);
      this.drawTexturedModalRect(position.intX(),position.intY(),0,0,2,2);
      Vector2 minPosition=position.clone();
      minPosition.add(-range);
      Vector2 maxPosition=position.clone();
      maxPosition.add(range);
      if (new Region2(minPosition,maxPosition).isIn(this.mousePosition)) {
        if (jiQi.getBlockType() != null) {
          if (jiQi.getBlockType() instanceof BlockICBMMachine) {
            this.info=BlockICBMMachine.getJiQiMing(jiQi);
          }
 else {
            this.info=jiQi.getBlockType().getLocalizedName();
          }
        }
      }
    }
  }
}","/** 
 * Draw the background layer for the GuiContainer (everything behind the items) 
 */
@Override protected void drawBackgroundLayer(int var2,int var3,float var1){
  FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  this.containerPosX=(this.width - this.xSize) / 2;
  this.containerPosY=(this.height - this.ySize) / 2;
  this.drawTexturedModalRect(containerPosX,containerPosY,0,0,this.xSize,this.ySize);
  this.radarCenter=new Vector2(this.containerPosX + this.xSize / 3 - 10,this.containerPosY + this.ySize / 2 + 4);
  this.radarMapRadius=TileRadarStation.MAX_DETECTION_RANGE / 71f;
  this.info=""String_Node_Str"";
  this.info2=""String_Node_Str"";
  if (this.tileEntity.energy.checkExtract()) {
    int range=4;
    for (    Entity entity : this.tileEntity.detectedEntities) {
      Vector2 position=new Vector2(radarCenter.x + (entity.posX - this.tileEntity.xCoord) / this.radarMapRadius,radarCenter.y - (entity.posZ - this.tileEntity.zCoord) / this.radarMapRadius);
      if (entity instanceof EntityMissile) {
        if (this.tileEntity.isWeiXianDaoDan((EntityMissile)entity)) {
          FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_RED_DOT);
        }
 else {
          FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_YELLOW_DOT);
        }
      }
 else {
        FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_YELLOW_DOT);
      }
      this.drawTexturedModalRect(position.intX(),position.intY(),0,0,2,2);
      Vector2 minPosition=position.clone();
      minPosition.add(-range);
      Vector2 maxPosition=position.clone();
      maxPosition.add(range);
      if (new Region2(minPosition,maxPosition).isIn(this.mousePosition)) {
        this.info=entity.getEntityName();
        if (entity instanceof EntityPlayer) {
          this.info=""String_Node_Str"" + this.info;
        }
        if (entity instanceof EntityMissile) {
          if (((EntityMissile)entity).targetVector != null) {
            this.info2=""String_Node_Str"" + ((EntityMissile)entity).targetVector.intX() + ""String_Node_Str""+ ((EntityMissile)entity).targetVector.intZ()+ ""String_Node_Str"";
          }
        }
      }
    }
    range=2;
    for (    TileEntity jiQi : this.tileEntity.detectedTiles) {
      Vector2 position=new Vector2(this.radarCenter.x + (jiQi.xCoord - this.tileEntity.xCoord) / this.radarMapRadius,this.radarCenter.y - (jiQi.zCoord - this.tileEntity.zCoord) / this.radarMapRadius);
      FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_WHITE_DOT);
      this.drawTexturedModalRect(position.intX(),position.intY(),0,0,2,2);
      Vector2 minPosition=position.clone();
      minPosition.add(-range);
      Vector2 maxPosition=position.clone();
      maxPosition.add(range);
      if (new Region2(minPosition,maxPosition).isIn(this.mousePosition)) {
        if (jiQi.getBlockType() != null) {
          if (jiQi.getBlockType() instanceof BlockICBMMachine) {
            this.info=BlockICBMMachine.getJiQiMing(jiQi);
          }
 else {
            this.info=jiQi.getBlockType().getLocalizedName();
          }
        }
      }
    }
  }
}",0.9990654205607477
169880,"/** 
 * Call this method from you GuiScreen to process the keys into textbox. 
 */
@Override public void keyTyped(char par1,int par2){
  super.keyTyped(par1,par2);
  this.textFieldSafetyZone.textboxKeyTyped(par1,par2);
  this.textFieldAlarmRange.textboxKeyTyped(par1,par2);
  this.textFieldFrequency.textboxKeyTyped(par1,par2);
  try {
    int newSafetyRadius=Math.min(TileEntityRadarStation.MAX_DETECTION_RANGE,Math.max(0,Integer.parseInt(this.textFieldSafetyZone.getText())));
    this.tileEntity.safetyRange=newSafetyRadius;
    PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_TILE.getPacket(this.tileEntity,2,this.tileEntity.safetyRange));
  }
 catch (  NumberFormatException e) {
  }
  try {
    int newAlarmRadius=Math.min(TileEntityRadarStation.MAX_DETECTION_RANGE,Math.max(0,Integer.parseInt(this.textFieldAlarmRange.getText())));
    this.tileEntity.alarmRange=newAlarmRadius;
    PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_TILE.getPacket(this.tileEntity,3,this.tileEntity.alarmRange));
  }
 catch (  NumberFormatException e) {
  }
  try {
    this.tileEntity.setFrequency(Integer.parseInt(this.textFieldFrequency.getText()));
    PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_TILE.getPacket(this.tileEntity,4,this.tileEntity.getFrequency()));
  }
 catch (  NumberFormatException e) {
  }
}","/** 
 * Call this method from you GuiScreen to process the keys into textbox. 
 */
@Override public void keyTyped(char par1,int par2){
  super.keyTyped(par1,par2);
  this.textFieldSafetyZone.textboxKeyTyped(par1,par2);
  this.textFieldAlarmRange.textboxKeyTyped(par1,par2);
  this.textFieldFrequency.textboxKeyTyped(par1,par2);
  try {
    int newSafetyRadius=Math.min(TileRadarStation.MAX_DETECTION_RANGE,Math.max(0,Integer.parseInt(this.textFieldSafetyZone.getText())));
    this.tileEntity.safetyRange=newSafetyRadius;
    PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_TILE.getPacket(this.tileEntity,2,this.tileEntity.safetyRange));
  }
 catch (  NumberFormatException e) {
  }
  try {
    int newAlarmRadius=Math.min(TileRadarStation.MAX_DETECTION_RANGE,Math.max(0,Integer.parseInt(this.textFieldAlarmRange.getText())));
    this.tileEntity.alarmRange=newAlarmRadius;
    PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_TILE.getPacket(this.tileEntity,3,this.tileEntity.alarmRange));
  }
 catch (  NumberFormatException e) {
  }
  try {
    this.tileEntity.setFrequency(Integer.parseInt(this.textFieldFrequency.getText()));
    PacketDispatcher.sendPacketToServer(ICBMCore.PACKET_TILE.getPacket(this.tileEntity,4,this.tileEntity.getFrequency()));
  }
 catch (  NumberFormatException e) {
  }
}",0.9954268292682928
169881,"/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override protected void drawForegroundLayer(int var2,int var3,float var1){
  this.fontRenderer.drawString(""String_Node_Str"" + LanguageUtility.getLocal(""String_Node_Str""),this.xSize / 2 - 30,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",155,18,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + (int)Math.round(mouseOverCoords.x) + ""String_Node_Str""+ (int)Math.round(mouseOverCoords.y),155,30,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.info,155,42,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.info2,155,54,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",152,70,4210752);
  this.textFieldSafetyZone.drawTextBox();
  this.fontRenderer.drawString(""String_Node_Str"",150,85,4210752);
  this.textFieldAlarmRange.drawTextBox();
  this.fontRenderer.drawString(""String_Node_Str"",155,100,4210752);
  this.textFieldFrequency.drawTextBox();
  this.fontRenderer.drawString(UnitDisplay.getDisplay(TileEntityRadarStation.WATTS,Unit.WATT),155,128,4210752);
  this.fontRenderer.drawString(UnitDisplay.getDisplay(this.tileEntity.getVoltageInput(null),Unit.VOLTAGE),155,138,4210752);
  String color=""String_Node_Str"";
  String status=""String_Node_Str"";
  if (this.tileEntity.energy.checkExtract()) {
    color=""String_Node_Str"";
    status=""String_Node_Str"";
  }
 else {
    status=""String_Node_Str"";
  }
  this.fontRenderer.drawString(color + status,155,150,4210752);
}","/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override protected void drawForegroundLayer(int var2,int var3,float var1){
  this.fontRenderer.drawString(""String_Node_Str"" + LanguageUtility.getLocal(""String_Node_Str""),this.xSize / 2 - 30,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",155,18,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + (int)Math.round(mouseOverCoords.x) + ""String_Node_Str""+ (int)Math.round(mouseOverCoords.y),155,30,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.info,155,42,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.info2,155,54,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",152,70,4210752);
  this.textFieldSafetyZone.drawTextBox();
  this.fontRenderer.drawString(""String_Node_Str"",150,85,4210752);
  this.textFieldAlarmRange.drawTextBox();
  this.fontRenderer.drawString(""String_Node_Str"",155,100,4210752);
  this.textFieldFrequency.drawTextBox();
  this.fontRenderer.drawString(UnitDisplay.getDisplay(TileRadarStation.WATTS,Unit.WATT),155,128,4210752);
  this.fontRenderer.drawString(UnitDisplay.getDisplay(this.tileEntity.getVoltageInput(null),Unit.VOLTAGE),155,138,4210752);
  String color=""String_Node_Str"";
  String status=""String_Node_Str"";
  if (this.tileEntity.energy.checkExtract()) {
    color=""String_Node_Str"";
    status=""String_Node_Str"";
  }
 else {
    status=""String_Node_Str"";
  }
  this.fontRenderer.drawString(color + status,155,150,4210752);
}",0.9980302035456337
169882,"@Override public void updateEntity(){
  super.updateEntity();
  if (!this.worldObj.isRemote) {
    if (this.ticks % 20 == 0) {
      for (      EntityPlayer wanJia : this.yongZhe) {
        PacketDispatcher.sendPacketToPlayer(this.getDescriptionPacket(),(Player)wanJia);
      }
      boolean isDetectThisCheck=false;
      if (this.isFunctioning()) {
        AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(this.xCoord - minCoord.x,this.yCoord - minCoord.y,this.zCoord - minCoord.z,this.xCoord + maxCoord.x + 1D,this.yCoord + maxCoord.y + 1D,this.zCoord + maxCoord.z + 1D);
        List<EntityLivingBase> entitiesNearby=worldObj.getEntitiesWithinAABB(EntityLivingBase.class,bounds);
        for (        EntityLivingBase entity : entitiesNearby) {
          if (entity instanceof EntityPlayer && (this.mode == 0 || this.mode == 1)) {
            boolean gotDisrupter=false;
            for (            ItemStack inventory : ((EntityPlayer)entity).inventory.mainInventory) {
              if (inventory != null) {
                if (inventory.getItem() instanceof ItemSignalDisrupter) {
                  if (((ItemSignalDisrupter)inventory.getItem()).getFrequency(inventory) == this.frequency) {
                    gotDisrupter=true;
                    break;
                  }
                }
              }
            }
            if (gotDisrupter) {
              if (this.isInverted) {
                isDetectThisCheck=true;
                break;
              }
              continue;
            }
            if (!this.isInverted) {
              isDetectThisCheck=true;
            }
          }
 else           if (!this.isInverted && !(entity instanceof EntityPlayer) && (this.mode == 0 || this.mode == 2)) {
            isDetectThisCheck=true;
            break;
          }
        }
      }
      if (isDetectThisCheck != this.isDetect) {
        this.isDetect=isDetectThisCheck;
        this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
      }
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (!this.worldObj.isRemote) {
    if (this.ticks % 20 == 0) {
      for (      EntityPlayer wanJia : this.yongZhe) {
        PacketDispatcher.sendPacketToPlayer(this.getDescriptionPacket(),(Player)wanJia);
      }
      boolean isDetectThisCheck=false;
      if (this.energy.checkExtract()) {
        AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(this.xCoord - minCoord.x,this.yCoord - minCoord.y,this.zCoord - minCoord.z,this.xCoord + maxCoord.x + 1D,this.yCoord + maxCoord.y + 1D,this.zCoord + maxCoord.z + 1D);
        List<EntityLivingBase> entitiesNearby=worldObj.getEntitiesWithinAABB(EntityLivingBase.class,bounds);
        for (        EntityLivingBase entity : entitiesNearby) {
          if (entity instanceof EntityPlayer && (this.mode == 0 || this.mode == 1)) {
            boolean gotDisrupter=false;
            for (            ItemStack inventory : ((EntityPlayer)entity).inventory.mainInventory) {
              if (inventory != null) {
                if (inventory.getItem() instanceof ItemSignalDisrupter) {
                  if (((ItemSignalDisrupter)inventory.getItem()).getFrequency(inventory) == this.frequency) {
                    gotDisrupter=true;
                    break;
                  }
                }
              }
            }
            if (gotDisrupter) {
              if (this.isInverted) {
                isDetectThisCheck=true;
                break;
              }
              continue;
            }
            if (!this.isInverted) {
              isDetectThisCheck=true;
            }
          }
 else           if (!this.isInverted && !(entity instanceof EntityPlayer) && (this.mode == 0 || this.mode == 2)) {
            isDetectThisCheck=true;
            break;
          }
        }
        this.energy.extractEnergy();
      }
      if (isDetectThisCheck != this.isDetect) {
        this.isDetect=isDetectThisCheck;
        this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
      }
    }
  }
}",0.9833131801692866
169883,"@Override public Packet getDescriptionPacket(){
  return PacketHandler.instance().getTilePacket(ICBMContraption.CHANNEL,""String_Node_Str"",this,this.energy.getEnergy(),this.frequency,this.mode,this.isInverted,this.minCoord.intX(),this.minCoord.intY(),this.minCoord.intZ(),this.maxCoord.intX(),this.maxCoord.intY(),this.maxCoord.intZ());
}","@Override public Packet getDescriptionPacket(){
  return ICBMCore.PACKET_TILE.getPacket(this,1,this.energy.getEnergy(),this.frequency,this.mode,this.isInverted,this.minCoord.intX(),this.minCoord.intY(),this.minCoord.intZ(),this.maxCoord.intX(),this.maxCoord.intY(),this.maxCoord.intZ());
}",0.8338658146964856
169884,"public TileDetector(){
  this.energy=new EnergyStorageHandler(100);
}","public TileDetector(){
  this.energy=new EnergyStorageHandler(200,100);
}",0.971830985915493
169885,"@Override public void onReceivePacket(ByteArrayDataInput data,EntityPlayer player,Object... extra){
  try {
    if (!super.simplePacket(id,data,player)) {
      if (id.equalsIgnoreCase(""String_Node_Str"")) {
        this.setEnergy(ForgeDirection.UNKNOWN,data.readLong());
        this.frequency=data.readShort();
        this.mode=data.readByte();
        this.isInverted=data.readBoolean();
        this.minCoord=new Vector3(Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())));
        this.maxCoord=new Vector3(Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())));
      }
 else       if (id.equalsIgnoreCase(""String_Node_Str"")) {
        this.mode=data.readByte();
      }
 else       if (id.equalsIgnoreCase(""String_Node_Str"")) {
        this.frequency=data.readShort();
      }
 else       if (id.equalsIgnoreCase(""String_Node_Str"")) {
        this.minCoord=new Vector3(Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())));
      }
 else       if (id.equalsIgnoreCase(""String_Node_Str"")) {
        this.maxCoord=new Vector3(Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())));
      }
    }
 else {
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void onReceivePacket(ByteArrayDataInput data,EntityPlayer player,Object... extra){
  try {
switch (data.readInt()) {
case -1:
{
        if (data.readBoolean()) {
          this.playersUsing.add(player);
        }
 else {
          this.playersUsing.remove(player);
        }
      }
case 0:
{
      this.setEnergy(ForgeDirection.UNKNOWN,data.readLong());
      this.frequency=data.readShort();
      this.mode=data.readByte();
      this.isInverted=data.readBoolean();
      this.minCoord=new Vector3(Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())));
      this.maxCoord=new Vector3(Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())));
      break;
    }
case 1:
{
    this.mode=data.readByte();
    break;
  }
case 2:
{
  this.frequency=data.readShort();
  break;
}
case 3:
{
this.minCoord=new Vector3(Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())));
break;
}
case 4:
{
this.maxCoord=new Vector3(Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())),Math.max(0,Math.min(MAX_DISTANCE,data.readInt())));
break;
}
}
}
 catch (Exception e) {
e.printStackTrace();
}
}",0.7446524064171123
169886,"@Override protected boolean onDamageEntity(Entity entity){
  if (entity instanceof EntityExplosion) {
    if (((EntityExplosion)entity).baoZha instanceof BlastRedMatter) {
      entity.setDead();
      return true;
    }
  }
  return false;
}","@Override protected boolean onDamageEntity(Entity entity){
  if (entity instanceof EntityExplosion) {
    if (((EntityExplosion)entity).baoZha instanceof BlastRedmatter) {
      entity.setDead();
      return true;
    }
  }
  return false;
}",0.9958677685950412
169887,"/** 
 * Makes an entity get affected by Red Matter.
 * @Return True if explosion happened 
 */
public boolean affectEntity(float radius,Entity entity,boolean doExplosion){
  boolean explosionCreated=false;
  if (entity == this.controller) {
    return false;
  }
  if (entity instanceof IExplosiveIgnore) {
    if (((IExplosiveIgnore)entity).canIgnore(this)) {
      return false;
    }
  }
  if (entity instanceof EntityPlayer) {
    if (((EntityPlayer)entity).capabilities.isCreativeMode) {
      return false;
    }
  }
  double xDifference=entity.posX - position.x;
  double yDifference=entity.posY - position.y;
  double zDifference=entity.posZ - position.z;
  double xPercentage=1 - (xDifference / radius);
  double yPercentage=1 - (yDifference / radius);
  double zPercentage=1 - (zDifference / radius);
  double distancePercentage=(this.position.distanceTo(new Vector3(entity)) / radius);
  Vector3 entityPosition=new Vector3(entity);
  Vector3 centeredPosition=entityPosition.clone().subtract(this.position);
  centeredPosition.rotate(1.5 * distancePercentage * Math.random(),1.5 * distancePercentage * Math.random(),1.5 * distancePercentage * Math.random());
  Vector3 newPosition=Vector3.add(this.position,centeredPosition);
  entity.addVelocity(newPosition.x - entityPosition.x,0,newPosition.z - entityPosition.z);
  entity.addVelocity(-xDifference * 0.015 * xPercentage,-yDifference * 0.015 * yPercentage,-zDifference * 0.015 * zPercentage);
  if (this.worldObj.isRemote) {
    if (entity instanceof EntityFlyingBlock) {
      if (ICBMExplosion.proxy.getParticleSetting() == 0) {
        if (this.worldObj.rand.nextInt(5) == 0) {
          ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.worldObj,new Vector3(entity),-xDifference,-yDifference + 10,-zDifference,((EntityFlyingBlock)entity).blockID,0,((EntityFlyingBlock)entity).metadata,2,1);
        }
      }
    }
  }
  if (Vector3.distance(new Vector3(entity.posX,entity.posY,entity.posZ),position) < 4) {
    if (doExplosion && !explosionCreated && callCount % 5 == 0) {
      Vector3 tempMotion=new Vector3(this.controller.motionX,this.controller.motionY,this.controller.motionZ);
      this.worldObj.createExplosion(this.exploder,entity.posX,entity.posY,entity.posZ,3.0F,true);
      this.controller.motionX=tempMotion.x;
      this.controller.motionY=tempMotion.y;
      this.controller.motionZ=tempMotion.z;
      explosionCreated=true;
    }
    if (entity instanceof EntityLiving) {
      entity.fallDistance=0;
    }
 else {
      if (entity instanceof EntityExplosion) {
        if (((EntityExplosion)entity).baoZha instanceof BlastAntimatter || ((EntityExplosion)entity).baoZha instanceof BlastRedMatter) {
          this.worldObj.playSoundEffect(position.x,position.y,position.z,ICBMCore.PREFIX + ""String_Node_Str"",7.0F,(1.0F + (this.worldObj.rand.nextFloat() - this.worldObj.rand.nextFloat()) * 0.2F) * 0.7F);
          if (this.worldObj.rand.nextFloat() > 0.85 && !this.worldObj.isRemote) {
            entity.setDead();
            return explosionCreated;
          }
        }
      }
 else       if (entity instanceof EntityExplosive) {
        ((EntityExplosive)entity).explode();
      }
 else {
        entity.setDead();
      }
    }
  }
  return explosionCreated;
}","/** 
 * Makes an entity get affected by Red Matter.
 * @Return True if explosion happened 
 */
public boolean affectEntity(float radius,Entity entity,boolean doExplosion){
  boolean explosionCreated=false;
  if (entity == this.controller) {
    return false;
  }
  if (entity instanceof IExplosiveIgnore) {
    if (((IExplosiveIgnore)entity).canIgnore(this)) {
      return false;
    }
  }
  if (entity instanceof EntityPlayer) {
    if (((EntityPlayer)entity).capabilities.isCreativeMode) {
      return false;
    }
  }
  double xDifference=entity.posX - position.x;
  double yDifference=entity.posY - position.y;
  double zDifference=entity.posZ - position.z;
  double xPercentage=1 - (xDifference / radius);
  double yPercentage=1 - (yDifference / radius);
  double zPercentage=1 - (zDifference / radius);
  double distancePercentage=(this.position.distanceTo(new Vector3(entity)) / radius);
  Vector3 entityPosition=new Vector3(entity);
  Vector3 centeredPosition=entityPosition.clone().subtract(this.position);
  centeredPosition.rotate(1.5 * distancePercentage * Math.random(),1.5 * distancePercentage * Math.random(),1.5 * distancePercentage * Math.random());
  Vector3 newPosition=Vector3.add(this.position,centeredPosition);
  entity.addVelocity(newPosition.x - entityPosition.x,0,newPosition.z - entityPosition.z);
  entity.addVelocity(-xDifference * 0.015 * xPercentage,-yDifference * 0.015 * yPercentage,-zDifference * 0.015 * zPercentage);
  if (this.worldObj.isRemote) {
    if (entity instanceof EntityFlyingBlock) {
      if (ICBMExplosion.proxy.getParticleSetting() == 0) {
        if (this.worldObj.rand.nextInt(5) == 0) {
          ICBMExplosion.proxy.spawnParticle(""String_Node_Str"",this.worldObj,new Vector3(entity),-xDifference,-yDifference + 10,-zDifference,((EntityFlyingBlock)entity).blockID,0,((EntityFlyingBlock)entity).metadata,2,1);
        }
      }
    }
  }
  if (Vector3.distance(new Vector3(entity.posX,entity.posY,entity.posZ),position) < 4) {
    if (doExplosion && !explosionCreated && callCount % 5 == 0) {
      Vector3 tempMotion=new Vector3(this.controller.motionX,this.controller.motionY,this.controller.motionZ);
      this.worldObj.createExplosion(this.exploder,entity.posX,entity.posY,entity.posZ,3.0F,true);
      this.controller.motionX=tempMotion.x;
      this.controller.motionY=tempMotion.y;
      this.controller.motionZ=tempMotion.z;
      explosionCreated=true;
    }
    if (entity instanceof EntityLiving) {
      entity.fallDistance=0;
    }
 else {
      if (entity instanceof EntityExplosion) {
        if (((EntityExplosion)entity).baoZha instanceof BlastAntimatter || ((EntityExplosion)entity).baoZha instanceof BlastRedmatter) {
          this.worldObj.playSoundEffect(position.x,position.y,position.z,ICBMCore.PREFIX + ""String_Node_Str"",7.0F,(1.0F + (this.worldObj.rand.nextFloat() - this.worldObj.rand.nextFloat()) * 0.2F) * 0.7F);
          if (this.worldObj.rand.nextFloat() > 0.85 && !this.worldObj.isRemote) {
            entity.setDead();
            return explosionCreated;
          }
        }
      }
 else       if (entity instanceof EntityExplosive) {
        ((EntityExplosive)entity).explode();
      }
 else {
        entity.setDead();
      }
    }
  }
  return explosionCreated;
}",0.9996934396076028
169888,"@Override public void doCreateExplosion(World world,double x,double y,double z,Entity entity){
  new BlastRedMatter(world,entity,x,y,z,35).explode();
}","@Override public void doCreateExplosion(World world,double x,double y,double z,Entity entity){
  new BlastRedmatter(world,entity,x,y,z,35).explode();
}",0.9933774834437086
169889,"@Override public void doRender(Entity entity,double x,double y,double z,float par8,float par9){
  EntityExplosion eZhaPin=(EntityExplosion)entity;
  if (eZhaPin.baoZha != null) {
    if (eZhaPin.baoZha instanceof BlastRedMatter) {
      Tessellator tessellator=Tessellator.instance;
      GL11.glPushMatrix();
      GL11.glTranslatef((float)x,(float)y,(float)z);
      CalclaviaRenderHelper.enableBlending();
      CalclaviaRenderHelper.disableLighting();
      GL11.glColor4f(0.0F,0.0F,0.0F,0.9f);
      Sphere sphere=new Sphere();
      sphere.draw(5,32,32);
      CalclaviaRenderHelper.enableLighting();
      CalclaviaRenderHelper.disableBlending();
      GL11.glPopMatrix();
      float par2=(entity.ticksExisted);
      while (par2 > 200)       par2-=100;
      RenderHelper.disableStandardItemLighting();
      float var41=(5 + par2) / 200.0F;
      float var51=0.0F;
      if (var41 > 0.8F) {
        var51=(var41 - 0.8F) / 0.2F;
      }
      Random rand=new Random(432L);
      GL11.glPushMatrix();
      GL11.glTranslatef((float)x,(float)y,(float)z);
      GL11.glDisable(GL11.GL_TEXTURE_2D);
      GL11.glShadeModel(GL11.GL_SMOOTH);
      GL11.glEnable(GL11.GL_BLEND);
      GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE);
      GL11.glDisable(GL11.GL_ALPHA_TEST);
      GL11.glEnable(GL11.GL_CULL_FACE);
      GL11.glDepthMask(false);
      GL11.glPushMatrix();
      GL11.glTranslatef(0.0F,-1.0F,-2.0F);
      for (int i1=0; i1 < (var41 + var41 * var41) / 2.0F * 60.0F; ++i1) {
        GL11.glRotatef(rand.nextFloat() * 360.0F,1.0F,0.0F,0.0F);
        GL11.glRotatef(rand.nextFloat() * 360.0F,0.0F,1.0F,0.0F);
        GL11.glRotatef(rand.nextFloat() * 360.0F,0.0F,0.0F,1.0F);
        GL11.glRotatef(rand.nextFloat() * 360.0F,1.0F,0.0F,0.0F);
        GL11.glRotatef(rand.nextFloat() * 360.0F,0.0F,1.0F,0.0F);
        GL11.glRotatef(rand.nextFloat() * 360.0F + var41 * 90.0F,0.0F,0.0F,1.0F);
        tessellator.startDrawing(6);
        float var81=rand.nextFloat() * 20.0F + 5.0F + var51 * 10.0F;
        float var91=rand.nextFloat() * 2.0F + 1.0F + var51 * 2.0F;
        tessellator.setColorRGBA_I(16777215,(int)(255.0F * (1.0F - var51)));
        tessellator.addVertex(0.0D,0.0D,0.0D);
        tessellator.setColorRGBA_I(0,0);
        tessellator.addVertex(-0.866D * var91,var81,-0.5F * var91);
        tessellator.addVertex(0.866D * var91,var81,-0.5F * var91);
        tessellator.addVertex(0.0D,var81,1.0F * var91);
        tessellator.addVertex(-0.866D * var91,var81,-0.5F * var91);
        tessellator.draw();
      }
      GL11.glPopMatrix();
      GL11.glDepthMask(true);
      GL11.glDisable(GL11.GL_CULL_FACE);
      GL11.glDisable(GL11.GL_BLEND);
      GL11.glShadeModel(GL11.GL_FLAT);
      GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
      GL11.glEnable(GL11.GL_TEXTURE_2D);
      GL11.glEnable(GL11.GL_ALPHA_TEST);
      RenderHelper.enableStandardItemLighting();
      GL11.glPopMatrix();
    }
 else {
      if (eZhaPin.baoZha.getRenderModel() != null && eZhaPin.baoZha.getRenderResource() != null) {
        GL11.glPushMatrix();
        GL11.glTranslatef((float)x,(float)y + 1F,(float)z);
        GL11.glRotatef(eZhaPin.rotationPitch,0.0F,0.0F,1.0F);
        this.bindTexture(eZhaPin.baoZha.getRenderResource());
        eZhaPin.baoZha.getRenderModel().render(eZhaPin,(float)x,(float)y,(float)z,par8,par9,0.0625F);
        GL11.glPopMatrix();
      }
    }
  }
}","@Override public void doRender(Entity entity,double x,double y,double z,float par8,float par9){
  EntityExplosion eZhaPin=(EntityExplosion)entity;
  if (eZhaPin.baoZha != null) {
    if (eZhaPin.baoZha instanceof BlastRedmatter) {
      Tessellator tessellator=Tessellator.instance;
      GL11.glPushMatrix();
      GL11.glTranslatef((float)x,(float)y,(float)z);
      CalclaviaRenderHelper.enableBlending();
      CalclaviaRenderHelper.disableLighting();
      GL11.glColor4f(0.0F,0.0F,0.0F,0.9f);
      Sphere sphere=new Sphere();
      sphere.draw(5,32,32);
      CalclaviaRenderHelper.enableLighting();
      CalclaviaRenderHelper.disableBlending();
      GL11.glPopMatrix();
      float par2=(entity.ticksExisted);
      while (par2 > 200)       par2-=100;
      RenderHelper.disableStandardItemLighting();
      float var41=(5 + par2) / 200.0F;
      float var51=0.0F;
      if (var41 > 0.8F) {
        var51=(var41 - 0.8F) / 0.2F;
      }
      Random rand=new Random(432L);
      GL11.glPushMatrix();
      GL11.glTranslatef((float)x,(float)y,(float)z);
      GL11.glDisable(GL11.GL_TEXTURE_2D);
      GL11.glShadeModel(GL11.GL_SMOOTH);
      GL11.glEnable(GL11.GL_BLEND);
      GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE);
      GL11.glDisable(GL11.GL_ALPHA_TEST);
      GL11.glEnable(GL11.GL_CULL_FACE);
      GL11.glDepthMask(false);
      GL11.glPushMatrix();
      GL11.glTranslatef(0.0F,-1.0F,-2.0F);
      for (int i1=0; i1 < (var41 + var41 * var41) / 2.0F * 60.0F; ++i1) {
        GL11.glRotatef(rand.nextFloat() * 360.0F,1.0F,0.0F,0.0F);
        GL11.glRotatef(rand.nextFloat() * 360.0F,0.0F,1.0F,0.0F);
        GL11.glRotatef(rand.nextFloat() * 360.0F,0.0F,0.0F,1.0F);
        GL11.glRotatef(rand.nextFloat() * 360.0F,1.0F,0.0F,0.0F);
        GL11.glRotatef(rand.nextFloat() * 360.0F,0.0F,1.0F,0.0F);
        GL11.glRotatef(rand.nextFloat() * 360.0F + var41 * 90.0F,0.0F,0.0F,1.0F);
        tessellator.startDrawing(6);
        float var81=rand.nextFloat() * 20.0F + 5.0F + var51 * 10.0F;
        float var91=rand.nextFloat() * 2.0F + 1.0F + var51 * 2.0F;
        tessellator.setColorRGBA_I(16777215,(int)(255.0F * (1.0F - var51)));
        tessellator.addVertex(0.0D,0.0D,0.0D);
        tessellator.setColorRGBA_I(0,0);
        tessellator.addVertex(-0.866D * var91,var81,-0.5F * var91);
        tessellator.addVertex(0.866D * var91,var81,-0.5F * var91);
        tessellator.addVertex(0.0D,var81,1.0F * var91);
        tessellator.addVertex(-0.866D * var91,var81,-0.5F * var91);
        tessellator.draw();
      }
      GL11.glPopMatrix();
      GL11.glDepthMask(true);
      GL11.glDisable(GL11.GL_CULL_FACE);
      GL11.glDisable(GL11.GL_BLEND);
      GL11.glShadeModel(GL11.GL_FLAT);
      GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
      GL11.glEnable(GL11.GL_TEXTURE_2D);
      GL11.glEnable(GL11.GL_ALPHA_TEST);
      RenderHelper.enableStandardItemLighting();
      GL11.glPopMatrix();
    }
 else {
      if (eZhaPin.baoZha.getRenderModel() != null && eZhaPin.baoZha.getRenderResource() != null) {
        GL11.glPushMatrix();
        GL11.glTranslatef((float)x,(float)y + 1F,(float)z);
        GL11.glRotatef(eZhaPin.rotationPitch,0.0F,0.0F,1.0F);
        this.bindTexture(eZhaPin.baoZha.getRenderResource());
        eZhaPin.baoZha.getRenderModel().render(eZhaPin,(float)x,(float)y,(float)z,par8,par9,0.0625F);
        GL11.glPopMatrix();
      }
    }
  }
}",0.9997046662728885
169890,"@Init public void load(FMLInitializationEvent evt){
  super.init(evt);
  ICBMCore.setModMetadata(NAME,metadata);
}","@EventHandler public void load(FMLInitializationEvent evt){
  super.init(evt);
  ICBMCore.setModMetadata(NAME,metadata);
}",0.9491525423728814
169891,"@Override @PreInit public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  NetworkRegistry.instance().registerGuiHandler(this,ICBMContraption.proxy);
  ICBMConfiguration.CONFIGURATION.load();
  bBuoLiPan=new BlockGlassPressurePlate(ICBMConfiguration.CONFIGURATION.getBlock(""String_Node_Str"",ICBM.BLOCK_ID_PREFIX - 1).getInt());
  bBuoLiEnNiu=new BlockGlassButton(ICBMConfiguration.CONFIGURATION.getBlock(""String_Node_Str"",ICBM.BLOCK_ID_PREFIX - 2).getInt());
  bYinGanQi=new BlockProcimityDetector(ICBM.BLOCK_ID_PREFIX - 3);
  bZha=new BlockSpikes(ICBM.BLOCK_ID_PREFIX - 4);
  bYinXing=new BlockCamouflage(ICBM.BLOCK_ID_PREFIX - 5);
  bNiTu=new BlockConcrete(ICBM.BLOCK_ID_PREFIX - 6);
  bBuoLi=new BlockReinforcedGlass(ICBM.BLOCK_ID_PREFIX - 7);
  itYao=new ItemAntidote(ICBMConfiguration.CONFIGURATION.getItem(""String_Node_Str"",ICBM.ITEM_ID_PREFIX + 2).getInt());
  itHuoLaunQi=new ItemSignalDisrupter(ICBMConfiguration.CONFIGURATION.getItem(""String_Node_Str"",ICBM.ITEM_ID_PREFIX + 9).getInt());
  itGenZongQi=new ItemTracker(ICBMConfiguration.CONFIGURATION.getItem(""String_Node_Str"",ICBM.ITEM_ID_PREFIX + 10).getInt());
  ICBMConfiguration.CONFIGURATION.save();
  CreativeTabICBM.itemStack=new ItemStack(bYinGanQi);
  GameRegistry.registerBlock(bBuoLiPan,""String_Node_Str"");
  GameRegistry.registerBlock(bBuoLiEnNiu,""String_Node_Str"");
  GameRegistry.registerBlock(bYinGanQi,""String_Node_Str"");
  GameRegistry.registerBlock(bYinXing,""String_Node_Str"");
  GameRegistry.registerBlock(bBuoLi,""String_Node_Str"");
  GameRegistry.registerBlock(bZha,ItemblockSpikes.class,""String_Node_Str"");
  GameRegistry.registerBlock(bNiTu,ItemBlockConcreate.class,""String_Node_Str"");
  ICBMContraption.proxy.preInit();
}","@Override @EventHandler public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  NetworkRegistry.instance().registerGuiHandler(this,ICBMContraption.proxy);
  ICBMConfiguration.CONFIGURATION.load();
  bBuoLiPan=new BlockGlassPressurePlate(ICBMConfiguration.CONFIGURATION.getBlock(""String_Node_Str"",ICBM.BLOCK_ID_PREFIX - 1).getInt());
  bBuoLiEnNiu=new BlockGlassButton(ICBMConfiguration.CONFIGURATION.getBlock(""String_Node_Str"",ICBM.BLOCK_ID_PREFIX - 2).getInt());
  bYinGanQi=new BlockProcimityDetector(ICBM.BLOCK_ID_PREFIX - 3);
  bZha=new BlockSpikes(ICBM.BLOCK_ID_PREFIX - 4);
  bYinXing=new BlockCamouflage(ICBM.BLOCK_ID_PREFIX - 5);
  bNiTu=new BlockConcrete(ICBM.BLOCK_ID_PREFIX - 6);
  bBuoLi=new BlockReinforcedGlass(ICBM.BLOCK_ID_PREFIX - 7);
  itYao=new ItemAntidote(ICBMConfiguration.CONFIGURATION.getItem(""String_Node_Str"",ICBM.ITEM_ID_PREFIX + 2).getInt());
  itHuoLaunQi=new ItemSignalDisrupter(ICBMConfiguration.CONFIGURATION.getItem(""String_Node_Str"",ICBM.ITEM_ID_PREFIX + 9).getInt());
  itGenZongQi=new ItemTracker(ICBMConfiguration.CONFIGURATION.getItem(""String_Node_Str"",ICBM.ITEM_ID_PREFIX + 10).getInt());
  ICBMConfiguration.CONFIGURATION.save();
  CreativeTabICBM.itemStack=new ItemStack(bYinGanQi);
  GameRegistry.registerBlock(bBuoLiPan,""String_Node_Str"");
  GameRegistry.registerBlock(bBuoLiEnNiu,""String_Node_Str"");
  GameRegistry.registerBlock(bYinGanQi,""String_Node_Str"");
  GameRegistry.registerBlock(bYinXing,""String_Node_Str"");
  GameRegistry.registerBlock(bBuoLi,""String_Node_Str"");
  GameRegistry.registerBlock(bZha,ItemblockSpikes.class,""String_Node_Str"");
  GameRegistry.registerBlock(bNiTu,ItemBlockConcreate.class,""String_Node_Str"");
  ICBMContraption.proxy.preInit();
}",0.9945102571511124
169892,"@Override @PostInit public void postInit(FMLPostInitializationEvent event){
  super.postInit(event);
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bZha,6),new Object[]{""String_Node_Str"",""String_Node_Str"",'C',Block.cactus,'B',UniversalRecipe.SECONDARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bZha,6),new Object[]{""String_Node_Str"",""String_Node_Str"",'C',Block.cactus,'B',Item.ingotIron}));
  GameRegistry.addRecipe(new ItemStack(bZha,1,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'E',ICBMCore.itemPoisonPowder,'S',bZha});
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bZha,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",'E',""String_Node_Str"",'S',bZha}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bYinXing,12),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',UniversalRecipe.CIRCUIT_T1.get(),'G',Block.glass,'W',new ItemStack(Block.cloth,1,OreDictionary.WILDCARD_VALUE)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itGenZongQi),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Z',Item.compass,'C',UniversalRecipe.CIRCUIT_T1.get(),'B',UniversalRecipe.BATTERY.get(),'S',UniversalRecipe.PRIMARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMContraption.bBuoLiPan,1,0),new Object[]{""String_Node_Str"",'#',Block.glass}));
  GameRegistry.addRecipe(new ItemStack(bBuoLiEnNiu,2),new Object[]{""String_Node_Str"",""String_Node_Str"",'G',Block.glass});
  GameRegistry.addRecipe(new ShapedOreRecipe(bYinGanQi,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'S',UniversalRecipe.PRIMARY_METAL.get(),'?',ElectricItemHelper.getUncharged(itGenZongQi)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(itHuoLaunQi,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'S',UniversalRecipe.PRIMARY_METAL.get(),'C',UniversalRecipe.CIRCUIT_T1.get(),'W',UniversalRecipe.WIRE.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itYao,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Item.pumpkinSeeds}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itYao),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Item.seeds}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bNiTu,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Block.gravel,'S',Block.sand,'W',Item.bucketWater}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bNiTu,8,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',new ItemStack(bNiTu,1,0),'O',Block.obsidian}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bNiTu,8,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',new ItemStack(bNiTu,1,1),'O',UniversalRecipe.PRIMARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bBuoLi,8),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Block.glass,'I',Item.ingotIron}));
  ICBMContraption.proxy.init();
}","@Override @EventHandler public void postInit(FMLPostInitializationEvent event){
  super.postInit(event);
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bZha,6),new Object[]{""String_Node_Str"",""String_Node_Str"",'C',Block.cactus,'B',UniversalRecipe.SECONDARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bZha,6),new Object[]{""String_Node_Str"",""String_Node_Str"",'C',Block.cactus,'B',Item.ingotIron}));
  GameRegistry.addRecipe(new ItemStack(bZha,1,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'E',ICBMCore.itemPoisonPowder,'S',bZha});
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bZha,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",'E',""String_Node_Str"",'S',bZha}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bYinXing,12),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',UniversalRecipe.CIRCUIT_T1.get(),'G',Block.glass,'W',new ItemStack(Block.cloth,1,OreDictionary.WILDCARD_VALUE)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itGenZongQi),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Z',Item.compass,'C',UniversalRecipe.CIRCUIT_T1.get(),'B',UniversalRecipe.BATTERY.get(),'S',UniversalRecipe.PRIMARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ICBMContraption.bBuoLiPan,1,0),new Object[]{""String_Node_Str"",'#',Block.glass}));
  GameRegistry.addRecipe(new ItemStack(bBuoLiEnNiu,2),new Object[]{""String_Node_Str"",""String_Node_Str"",'G',Block.glass});
  GameRegistry.addRecipe(new ShapedOreRecipe(bYinGanQi,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'S',UniversalRecipe.PRIMARY_METAL.get(),'?',ElectricItemHelper.getUncharged(itGenZongQi)}));
  GameRegistry.addRecipe(new ShapedOreRecipe(itHuoLaunQi,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'S',UniversalRecipe.PRIMARY_METAL.get(),'C',UniversalRecipe.CIRCUIT_T1.get(),'W',UniversalRecipe.WIRE.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itYao,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Item.pumpkinSeeds}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(itYao),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Item.seeds}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bNiTu,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Block.gravel,'S',Block.sand,'W',Item.bucketWater}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bNiTu,8,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',new ItemStack(bNiTu,1,0),'O',Block.obsidian}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bNiTu,8,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',new ItemStack(bNiTu,1,1),'O',UniversalRecipe.PRIMARY_METAL.get()}));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(bBuoLi,8),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Block.glass,'I',Item.ingotIron}));
  ICBMContraption.proxy.init();
}",0.996761658031088
169893,"@EventHandler public void init(FMLInitializationEvent event){
  if (!isInit) {
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    UniversalRecipe.init();
    isInit=true;
  }
}","@EventHandler public void init(FMLInitializationEvent event){
  if (!isInit) {
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    BasicRegistry.register(""String_Node_Str"");
    isInit=true;
  }
}",0.9829268292682928
169894,"@EventHandler public void postInit(FMLPostInitializationEvent event){
  if (!isPostInit) {
    GameRegistry.addSmelting(blockSulfurOre.blockID,new ItemStack(itemSulfurDust,4),0.8f);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Item.gunpowder,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',""String_Node_Str"",'?',Item.coal}));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Item.gunpowder,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',""String_Node_Str"",'?',new ItemStack(Item.coal,1,1)}));
    GameRegistry.addRecipe(new ShapedOreRecipe(Block.tnt,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Item.gunpowder,'R',Item.redstone}));
    GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(itemPoisonPowder,3),new Object[]{Item.spiderEye,Item.rottenFlesh}));
    isPostInit=true;
  }
}","@EventHandler public void postInit(FMLPostInitializationEvent event){
  if (!isPostInit) {
    UniversalRecipe.init();
    GameRegistry.addSmelting(blockSulfurOre.blockID,new ItemStack(itemSulfurDust,4),0.8f);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Item.gunpowder,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',""String_Node_Str"",'?',Item.coal}));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Item.gunpowder,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',""String_Node_Str"",'?',new ItemStack(Item.coal,1,1)}));
    GameRegistry.addRecipe(new ShapedOreRecipe(Block.tnt,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Item.gunpowder,'R',Item.redstone}));
    GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(itemPoisonPowder,3),new Object[]{Item.spiderEye,Item.rottenFlesh}));
    isPostInit=true;
  }
}",0.9846322722283204
169895,"@Override public boolean onActivated(EntityPlayer entityPlayer){
  if (entityPlayer.inventory.getCurrentItem() != null && this.getStackInSlot(0) == null) {
    if (entityPlayer.inventory.getCurrentItem().getItem() instanceof ItemMissile) {
      this.setInventorySlotContents(0,entityPlayer.inventory.getCurrentItem());
      entityPlayer.inventory.setInventorySlotContents(entityPlayer.inventory.currentItem,null);
      return true;
    }
  }
  entityPlayer.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}","@Override public boolean onActivated(EntityPlayer entityPlayer){
  if (entityPlayer.inventory.getCurrentItem() != null && this.getStackInSlot(0) == null) {
    if (entityPlayer.inventory.getCurrentItem().getItem() instanceof ItemMissile) {
      this.setInventorySlotContents(0,entityPlayer.inventory.getCurrentItem());
      entityPlayer.inventory.setInventorySlotContents(entityPlayer.inventory.currentItem,null);
      this.onInventoryChanged();
      return true;
    }
  }
  entityPlayer.openGui(ICBMExplosion.instance,0,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
  return true;
}",0.9714285714285714
169896,"public void onInventoryChanged(){
  super.onInventoryChanged();
  if (!this.worldObj.isRemote) {
    if (this.getStackInSlot(0) != null && this.getStackInSlot(0).getItem() instanceof ItemMissile) {
      missileID=this.getStackInSlot(0).getItemDamage();
    }
  }
}","public void onInventoryChanged(){
  super.onInventoryChanged();
  if (!this.worldObj.isRemote) {
    if (this.getStackInSlot(0) != null && this.getStackInSlot(0).getItem() instanceof ItemMissile) {
      missileID=this.getStackInSlot(0).getItemDamage();
    }
  }
  this.worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}",0.9013605442176872
169897,"@Override public Packet getDescriptionPacket(){
  return PacketManager.getPacket(ICBMExplosion.CHANNEL,((byte)0),((byte)this.rotationSide),((byte)this.placedSide.ordinal()));
}","@Override public Packet getDescriptionPacket(){
  return PacketManager.getPacket(ICBMExplosion.CHANNEL,this,((byte)0),((byte)this.rotationSide),((byte)this.placedSide.ordinal()));
}",0.9859943977591036
169898,"public void renderAModelAt(TileEntityMissileTable tileEntity,double x,double y,double z,float f){
  GL11.glPushMatrix();
  this.bindTexture(TEXTURE_FILE);
  GL11.glTranslatef((float)x + 0.5F,(float)y + 1.5F,(float)z + 0.5F);
  GL11.glRotatef(180F,0.0F,0.0F,1.0F);
  if (tileEntity.placedSide == ForgeDirection.UP || tileEntity.placedSide == ForgeDirection.DOWN) {
    if (tileEntity.rotationSide == 1) {
      GL11.glRotatef(90F,0.0F,1.0F,0.0F);
    }
 else     if (tileEntity.rotationSide == 2) {
      GL11.glRotatef(180F,0.0F,1.0F,0.0F);
    }
 else     if (tileEntity.rotationSide == 3) {
      GL11.glRotatef(-90F,0.0F,1.0F,0.0F);
    }
  }
 else {
    if (tileEntity.rotationSide == 0 || tileEntity.rotationSide == 2) {
      if (tileEntity.placedSide == ForgeDirection.NORTH || tileEntity.placedSide == ForgeDirection.EAST) {
      }
 else       if (tileEntity.placedSide == ForgeDirection.SOUTH || tileEntity.placedSide == ForgeDirection.WEST) {
      }
    }
 else {
    }
  }
  MODEL.render(0.0625F);
  MODEL_CLAW.render(0.0625F);
  MODEL_CLAW.render(0.0625F);
  MODEL_CLAW.render(0.0625F);
  GL11.glPopMatrix();
}","public void renderAModelAt(TileEntityMissileTable tileEntity,double x,double y,double z,float f){
  GL11.glPushMatrix();
  this.bindTexture(TEXTURE_FILE);
  GL11.glTranslatef((float)x + 0.5F,(float)y + 1.5F,(float)z + 0.5F);
  GL11.glRotatef(180F,0.0F,0.0F,1.0F);
  if (tileEntity.placedSide == ForgeDirection.UP || tileEntity.placedSide == ForgeDirection.DOWN) {
    if (tileEntity.rotationSide == 1) {
      GL11.glRotatef(90F,0.0F,1.0F,0.0F);
    }
 else     if (tileEntity.rotationSide == 2) {
      GL11.glRotatef(180F,0.0F,1.0F,0.0F);
    }
 else     if (tileEntity.rotationSide == 3) {
      GL11.glRotatef(-90F,0.0F,1.0F,0.0F);
    }
    if (tileEntity.placedSide == ForgeDirection.DOWN) {
      GL11.glRotatef(180F,0.0F,0.0F,1.0F);
    }
  }
 else {
    if (tileEntity.rotationSide == 0 || tileEntity.rotationSide == 2) {
      if (tileEntity.placedSide == ForgeDirection.NORTH || tileEntity.placedSide == ForgeDirection.EAST) {
      }
 else       if (tileEntity.placedSide == ForgeDirection.SOUTH || tileEntity.placedSide == ForgeDirection.WEST) {
      }
    }
 else {
    }
  }
  MODEL.render(0.0625F);
  MODEL_CLAW.render(0.0625F);
  MODEL_CLAW.render(0.0625F);
  MODEL_CLAW.render(0.0625F);
  GL11.glPopMatrix();
}",0.95537611559711
169899,"/** 
 * Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
 * @param rot
 * @param placeSide 
 */
public static boolean canPlaceBlockAt(World world,int x,int y,int z,ForgeDirection placeSide,int rot){
  Block block=Block.blocksList[world.getBlockId(x,y,z)];
  if (block == null || block.isBlockReplaceable(world,x,y,z)) {
    Vector3[] vecs=TileEntityMissileTable.getMultiBlockVectors(placeSide,(byte)rot);
    for (int i=0; i > vecs.length; i++) {
      block=Block.blocksList[world.getBlockId(x + vecs[i].intX(),y + vecs[i].intY(),z + vecs[i].intZ())];
      if (block != null && !block.isBlockReplaceable(world,x,y,z)) {
        return false;
      }
    }
    return true;
  }
  return false;
}","/** 
 * Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
 * @param rot
 * @param placeSide 
 */
public static boolean canPlaceBlockAt(World world,int x,int y,int z,ForgeDirection placeSide,int rot){
  Vector3 pos=new Vector3(x,y,z);
  Block block=Block.blocksList[pos.getBlockID(world)];
  if (block == null || block.isBlockReplaceable(world,x,y,z)) {
    Vector3[] vecs=TileEntityMissileTable.getMultiBlockVectors(placeSide,(byte)rot);
    for (    Vector3 vec : vecs) {
      block=Block.blocksList[pos.clone().translate(vec).getBlockID(world)];
      if (block != null && !block.isBlockReplaceable(world,x,y,z)) {
        return false;
      }
    }
    return true;
  }
  return false;
}",0.7967589466576638
169900,"public void setRotation(byte rot){
  if (BlockMissileTable.canPlaceBlockAt(this.worldObj,this.xCoord,this.yCoord,this.zCoord,this.placedSide,rot)) {
    this.rotationSide=rot;
  }
}","public void setRotation(byte rot){
  if (BlockMissileTable.canRotateBlockTo(this.worldObj,this.xCoord,this.yCoord,this.zCoord,this.placedSide,rot)) {
    this.rotationSide=rot;
  }
}",0.9696969696969696
169901,"@Override public void setDirection(ForgeDirection direction){
  byte rot=0;
  if (direction == ForgeDirection.NORTH) {
    rot=0;
  }
 else   if (direction == ForgeDirection.SOUTH) {
    rot=2;
  }
 else   if (direction == ForgeDirection.EAST) {
    rot=1;
  }
 else {
    rot=3;
  }
  if (BlockMissileTable.canPlaceBlockAt(this.worldObj,this.xCoord,this.yCoord,this.zCoord,this.placedSide,rot)) {
    this.rotationSide=rot;
    this.worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  }
}","@Override public void setDirection(ForgeDirection direction){
  byte rot=0;
  if (direction == ForgeDirection.NORTH) {
    rot=0;
  }
 else   if (direction == ForgeDirection.SOUTH) {
    rot=2;
  }
 else   if (direction == ForgeDirection.EAST) {
    rot=1;
  }
 else {
    rot=3;
  }
  if (BlockMissileTable.canRotateBlockTo(this.worldObj,this.xCoord,this.yCoord,this.zCoord,this.placedSide,rot)) {
    this.rotationSide=rot;
    this.worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  }
}",0.9867482161060144
169902,"public void renderAModelAt(TileEntityMissileTable tileEntity,double x,double y,double z,float f){
  GL11.glPushMatrix();
  this.bindTexture(TEXTURE_FILE);
  GL11.glTranslatef((float)x + 0.5F,(float)y + 1.5F,(float)z + 0.5F);
  GL11.glRotatef(180F,0.0F,0.0F,1.0F);
  if (tileEntity.placedSide == ForgeDirection.UP || tileEntity.placedSide == ForgeDirection.DOWN) {
    if (tileEntity.rotationSide == 1 || tileEntity.rotationSide == 3) {
      GL11.glRotatef(90F,0.0F,1.0F,0.0F);
    }
  }
 else {
    if (tileEntity.rotationSide == 0 || tileEntity.rotationSide == 2) {
      if (tileEntity.placedSide == ForgeDirection.NORTH || tileEntity.placedSide == ForgeDirection.EAST) {
      }
 else       if (tileEntity.placedSide == ForgeDirection.SOUTH || tileEntity.placedSide == ForgeDirection.WEST) {
      }
    }
 else {
    }
  }
  MODEL.render(0.0625F);
  MODEL_CLAW.render(0.0625F);
  MODEL_CLAW.render(0.0625F);
  MODEL_CLAW.render(0.0625F);
  GL11.glPopMatrix();
}","public void renderAModelAt(TileEntityMissileTable tileEntity,double x,double y,double z,float f){
  GL11.glPushMatrix();
  this.bindTexture(TEXTURE_FILE);
  GL11.glTranslatef((float)x + 0.5F,(float)y + 1.5F,(float)z + 0.5F);
  GL11.glRotatef(180F,0.0F,0.0F,1.0F);
  if (tileEntity.placedSide == ForgeDirection.UP || tileEntity.placedSide == ForgeDirection.DOWN) {
    if (tileEntity.rotationSide == 1) {
      GL11.glRotatef(90F,0.0F,1.0F,0.0F);
    }
 else     if (tileEntity.rotationSide == 2) {
      GL11.glRotatef(180F,0.0F,1.0F,0.0F);
    }
 else     if (tileEntity.rotationSide == 3) {
      GL11.glRotatef(-90F,0.0F,1.0F,0.0F);
    }
  }
 else {
    if (tileEntity.rotationSide == 0 || tileEntity.rotationSide == 2) {
      if (tileEntity.placedSide == ForgeDirection.NORTH || tileEntity.placedSide == ForgeDirection.EAST) {
      }
 else       if (tileEntity.placedSide == ForgeDirection.SOUTH || tileEntity.placedSide == ForgeDirection.WEST) {
      }
    }
 else {
    }
  }
  MODEL.render(0.0625F);
  MODEL_CLAW.render(0.0625F);
  MODEL_CLAW.render(0.0625F);
  MODEL_CLAW.render(0.0625F);
  GL11.glPopMatrix();
}",0.9205741626794258
169903,"public static void cleanUpArray(){
  try {
    Iterator<TileEntity> it=detectableTileEntities.iterator();
    while (it.hasNext()) {
      TileEntity tileEntity=it.next();
      if (tileEntity == null) {
        it.remove();
      }
 else       if (tileEntity.isInvalid()) {
        it.remove();
      }
 else       if (tileEntity.worldObj.getBlockTileEntity(tileEntity.xCoord,tileEntity.yCoord,tileEntity.zCoord) != tileEntity) {
        it.remove();
      }
    }
    Iterator<Entity> it2=detectableEntities.iterator();
    while (it2.hasNext()) {
      Entity entity=it2.next();
      if (entity == null) {
        it2.remove();
      }
 else       if (entity.isDead) {
        it2.remove();
      }
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","public static void cleanUpArray(){
  try {
synchronized (detectableEntities) {
      Iterator<TileEntity> it=detectableTileEntities.iterator();
      while (it.hasNext()) {
        TileEntity tileEntity=it.next();
        if (tileEntity == null) {
          it.remove();
        }
 else         if (tileEntity.isInvalid()) {
          it.remove();
        }
 else         if (tileEntity.worldObj.getBlockTileEntity(tileEntity.xCoord,tileEntity.yCoord,tileEntity.zCoord) != tileEntity) {
          it.remove();
        }
      }
      Iterator<Entity> it2=detectableEntities.iterator();
      while (it2.hasNext()) {
        Entity entity=it2.next();
        if (entity == null) {
          it2.remove();
        }
 else         if (entity.isDead) {
          it2.remove();
        }
      }
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}",0.9146198830409356
169904,"public static List<Entity> getEntitiesWithinRadius(Vector2 vector,int radius){
  cleanUpArray();
  List<Entity> returnArray=new ArrayList<Entity>();
  for (  Entity entity : detectableEntities) {
    if (Vector2.distance(vector,new Vector3(entity).toVector2()) <= radius) {
      returnArray.add(entity);
    }
  }
  return returnArray;
}","public static List<Entity> getEntitiesWithinRadius(Vector2 vector,int radius){
  cleanUpArray();
  List<Entity> returnArray=new ArrayList<Entity>();
synchronized (detectableEntities) {
    for (    Entity entity : detectableEntities) {
      if (Vector2.distance(vector,new Vector3(entity).toVector2()) <= radius) {
        returnArray.add(entity);
      }
    }
  }
  return returnArray;
}",0.8598901098901099
169905,"public static void unregister(Entity entity){
  if (detectableEntities.contains(entity)) {
    detectableEntities.remove(entity);
  }
}","public static void unregister(Entity entity){
synchronized (detectableEntities) {
    if (detectableEntities.contains(entity)) {
      detectableEntities.remove(entity);
    }
  }
}",0.8544303797468354
169906,"public static List<TileEntity> getTileEntitiesInArea(Vector2 minVector,Vector2 maxVector){
  cleanUpArray();
  List<TileEntity> returnArray=new ArrayList<TileEntity>();
  for (  TileEntity tileEntity : detectableTileEntities) {
    if (new Region2(minVector,maxVector).isIn(new Vector3(tileEntity).toVector2())) {
      returnArray.add(tileEntity);
    }
  }
  return returnArray;
}","public static List<TileEntity> getTileEntitiesInArea(Vector2 minVector,Vector2 maxVector){
  cleanUpArray();
  List<TileEntity> returnArray=new ArrayList<TileEntity>();
synchronized (detectableTileEntities) {
    for (    TileEntity tileEntity : detectableTileEntities) {
      if (new Region2(minVector,maxVector).isIn(new Vector3(tileEntity).toVector2())) {
        returnArray.add(tileEntity);
      }
    }
  }
  return returnArray;
}",0.9317073170731708
169907,"public static void register(Entity entity){
  if (!detectableEntities.contains(entity)) {
    detectableEntities.add(entity);
  }
}","public static void register(Entity entity){
synchronized (detectableEntities) {
    if (!detectableEntities.contains(entity)) {
      detectableEntities.add(entity);
    }
  }
}",0.8506493506493507
169908,"@Override public float getRequest(ForgeDirection direction){
  if (this.getTurret() != null) {
    if (this.getEnergyStored() < this.getTurret().getFiringRequest()) {
      return Math.max(this.getTurret().getFiringRequest(),0);
    }
  }
  return 0;
}","@Override public float getRequest(ForgeDirection direction){
  if (this.getTurret() != null) {
    if (this.getEnergyStored() < this.getTurret().getFiringRequest()) {
      return (float)Math.ceil(Math.max(this.getTurret().getFiringRequest(),0));
    }
  }
  return 0;
}",0.9655172413793104
169909,"@Override public void updateEntity(){
  super.updateEntity();
  if (this.prevWatts != this.getEnergyStored()) {
    this.worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
  }
  if (!this.worldObj.isRemote) {
    for (int i=0; i < UPGRADE_START_INDEX; i++) {
      if (this.getEnergyStored() >= this.getRequest(null)) {
        break;
      }
      this.receiveElectricity(ElectricItemHelper.dischargeItem(this.getStackInSlot(i),this.getRequest(null)),true);
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (this.prevWatts != this.getEnergyStored()) {
    this.worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
  }
  if (!this.worldObj.isRemote) {
    for (int i=0; i < UPGRADE_START_INDEX; i++) {
      if (this.getEnergyStored() > this.getRequest(null)) {
        break;
      }
      this.receiveElectricity(ElectricItemHelper.dischargeItem(this.getStackInSlot(i),this.getRequest(null)),true);
    }
  }
}",0.998968008255934
169910,"@Override protected void writeEntityToNBT(NBTTagCompound nbt){
  nbt.setBoolean(""String_Node_Str"",this.shouldSit);
}","@Override protected void writeEntityToNBT(NBTTagCompound nbt){
  nbt.setBoolean(""String_Node_Str"",this.shouldSit);
  nbt.setCompoundTag(""String_Node_Str"",new Vector3(this.controller).writeToNBT(new NBTTagCompound()));
}",0.6925373134328359
169911,"@Override protected void readEntityFromNBT(NBTTagCompound nbt){
  this.shouldSit=nbt.getBoolean(""String_Node_Str"");
}","@Override protected void readEntityFromNBT(NBTTagCompound nbt){
  this.shouldSit=nbt.getBoolean(""String_Node_Str"");
  Vector3 readVec=Vector3.readFromNBT(nbt.getCompoundTag(""String_Node_Str""));
  if (readVec.getTileEntity(this.worldObj) != null) {
    this.controller=readVec.getTileEntity(this.worldObj);
  }
}",0.5467289719626168
169912,"@Override public boolean canActivateWeapon(){
  if (this.getPlatform() != null) {
    if (this.getPlatform().hasAmmunition(ProjectileType.RAILGUN) != null) {
      if (this.getPlatform().provideElectricity(ForgeDirection.UP,ElectricityPack.getFromWatts(this.getFiringRequest(),this.getVoltage()),false).getWatts() >= this.getFiringRequest()) {
        return true;
      }
    }
  }
  return false;
}","@Override public boolean canActivateWeapon(){
  if (this.getPlatform() != null) {
    if (this.getPlatform().hasAmmunition(ProjectileType.RAILGUN) != null) {
      if (Math.round(this.getPlatform().provideElectricity(this.getFiringRequest(),false).getWatts()) >= this.getFiringRequest()) {
        return true;
      }
    }
  }
  return false;
}",0.8096514745308311
169913,"@Override public void updateEntity(){
  super.updateEntity();
  if (this.entityFake != null) {
    if (this.entityFake.riddenByEntity instanceof EntityPlayer) {
      EntityPlayer mountedPlayer=(EntityPlayer)this.entityFake.riddenByEntity;
      if (mountedPlayer.rotationPitch > this.maxPitch) {
        mountedPlayer.rotationPitch=this.maxPitch;
      }
      if (mountedPlayer.rotationPitch < this.minPitch) {
        mountedPlayer.rotationPitch=this.minPitch;
      }
      this.currentRotationPitch=this.wantedRotationPitch=mountedPlayer.rotationPitch;
      this.currentRotationYaw=this.wantedRotationYaw=mountedPlayer.rotationYaw;
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (this.entityFake == null || this.entityFake.isDead) {
    this.entityFake=new EJia(this.worldObj,new Vector3(this.xCoord + 0.5,this.yCoord + 1.2,this.zCoord + 0.5),this,true);
    this.worldObj.spawnEntityInWorld(this.entityFake);
  }
  if (this.entityFake.riddenByEntity instanceof EntityPlayer) {
    EntityPlayer mountedPlayer=(EntityPlayer)this.entityFake.riddenByEntity;
    if (mountedPlayer.rotationPitch > this.maxPitch) {
      mountedPlayer.rotationPitch=this.maxPitch;
    }
    if (mountedPlayer.rotationPitch < this.minPitch) {
      mountedPlayer.rotationPitch=this.minPitch;
    }
    this.currentRotationPitch=this.wantedRotationPitch=mountedPlayer.rotationPitch;
    this.currentRotationYaw=this.wantedRotationYaw=mountedPlayer.rotationYaw;
  }
}",0.8356997971602435
169914,"@Override public boolean onActivated(EntityPlayer entityPlayer){
  if (entityPlayer.isSneaking()) {
    this.tryActivateWeapon();
  }
 else {
    if (this.entityFake != null) {
      if (this.entityFake.riddenByEntity instanceof EntityPlayer) {
        EntityPlayer mountedPlayer=(EntityPlayer)this.entityFake.riddenByEntity;
        if (entityPlayer == mountedPlayer) {
          if (!this.worldObj.isRemote) {
            PacketManager.sendPacketToClients(this.getRotationPacket());
          }
          entityPlayer.mountEntity(null);
          this.entityFake.setDead();
          this.entityFake=null;
          return true;
        }
      }
      return false;
    }
 else {
      this.mount(entityPlayer);
    }
  }
  return true;
}","@Override public boolean onActivated(EntityPlayer entityPlayer){
  if (!entityPlayer.isSneaking()) {
    if (this.entityFake != null) {
      if (this.entityFake.riddenByEntity instanceof EntityPlayer) {
        this.tryActivateWeapon();
        if (!this.worldObj.isRemote) {
          PacketManager.sendPacketToClients(this.getRotationPacket());
        }
        return true;
      }
    }
  }
  this.mount(entityPlayer);
  return true;
}",0.6006768189509306
169915,"public void mount(EntityPlayer entityPlayer){
  if (!this.worldObj.isRemote) {
    if (this.entityFake == null) {
      this.entityFake=new EJia(this.worldObj,new Vector3(this.xCoord + 0.5,this.yCoord + 1.2,this.zCoord + 0.5),this,true);
      this.worldObj.spawnEntityInWorld(this.entityFake);
    }
    entityPlayer.rotationYaw=this.currentRotationYaw;
    entityPlayer.rotationPitch=this.currentRotationPitch;
    entityPlayer.mountEntity(this.entityFake);
  }
}","public void mount(EntityPlayer entityPlayer){
  if (!this.worldObj.isRemote) {
    entityPlayer.rotationYaw=this.currentRotationYaw;
    entityPlayer.rotationPitch=this.currentRotationPitch;
    entityPlayer.mountEntity(this.entityFake);
  }
}",0.3022598870056497
169916,"/** 
 * Ticks the block if it's been scheduled
 */
@Override public void updateTick(World world,int x,int y,int z,Random rand){
  if (!world.isRemote) {
    if (this.isRandomlyRadioactive) {
      AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(x - this.radius,y - this.radius,z - this.radius,x + this.radius,y + this.radius,z + this.radius);
      List<EntityLiving> entitiesNearby=world.getEntitiesWithinAABB(EntityLiving.class,bounds);
      for (      EntityLiving entity : entitiesNearby) {
        PoisonRadiation.INSTANCE.poisonEntity(new Vector3(x,y,z),entity,amplifier);
      }
    }
    if (this.canSpread) {
      for (int i=0; i < 4; ++i) {
        int newX=x + rand.nextInt(3) - 1;
        int newY=y + rand.nextInt(5) - 3;
        int newZ=z + rand.nextInt(3) - 1;
        int blockID=world.getBlockId(newX,newY,newZ);
        if (rand.nextFloat() > 0.4 && (blockID == Block.tilledField.blockID || blockID == Block.grass.blockID)) {
          world.setBlockMetadataWithNotify(newX,newY,newZ,this.blockID,2);
        }
      }
      if (rand.nextFloat() > 0.85) {
        world.setBlockMetadataWithNotify(x,y,z,Block.mycelium.blockID,2);
      }
    }
  }
}","/** 
 * Ticks the block if it's been scheduled
 */
@Override public void updateTick(World world,int x,int y,int z,Random rand){
  if (!world.isRemote) {
    if (this.isRandomlyRadioactive) {
      AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(x - this.radius,y - this.radius,z - this.radius,x + this.radius,y + this.radius,z + this.radius);
      List<EntityLivingBase> entitiesNearby=world.getEntitiesWithinAABB(EntityLivingBase.class,bounds);
      for (      EntityLivingBase entity : entitiesNearby) {
        PoisonRadiation.INSTANCE.poisonEntity(new Vector3(x,y,z),entity,amplifier);
      }
    }
    if (this.canSpread) {
      for (int i=0; i < 4; ++i) {
        int newX=x + rand.nextInt(3) - 1;
        int newY=y + rand.nextInt(5) - 3;
        int newZ=z + rand.nextInt(3) - 1;
        int blockID=world.getBlockId(newX,newY,newZ);
        if (rand.nextFloat() > 0.4 && (blockID == Block.tilledField.blockID || blockID == Block.grass.blockID)) {
          world.setBlockMetadataWithNotify(newX,newY,newZ,this.blockID,2);
        }
      }
      if (rand.nextFloat() > 0.85) {
        world.setBlockMetadataWithNotify(x,y,z,Block.mycelium.blockID,2);
      }
    }
  }
}",0.9949109414758268
169917,"public void poisonEntity(Vector3 emitPosition,EntityLiving entity){
  this.poisonEntity(emitPosition,entity,0);
}","public void poisonEntity(Vector3 emitPosition,EntityLivingBase entity){
  this.poisonEntity(emitPosition,entity,0);
}",0.982608695652174
169918,"@Override public void updateAnimation(){
  Minecraft minecraft=Minecraft.getMinecraft();
  World world=minecraft.theWorld;
  EntityPlayer player=minecraft.thePlayer;
  double angel=0;
  if (world != null) {
    double xDifference=0;
    double zDifference=0;
    ItemStack itemStack=player.getCurrentEquippedItem();
    if (itemStack != null) {
      if (itemStack.getItem() instanceof ITracker) {
        Entity trackingEntity=((ITracker)itemStack.getItem()).getTrackingEntity(FMLClientHandler.instance().getClient().theWorld,itemStack);
        if (trackingEntity != null) {
          xDifference=trackingEntity.posX - player.posX;
          zDifference=trackingEntity.posZ - player.posZ;
        }
      }
    }
    player.rotationYaw%=360.0D;
    angel=-((player.rotationYaw - 90.0D) * Math.PI / 180.0D - Math.atan2(zDifference,xDifference));
  }
  double d6;
  for (d6=angel - this.currentAngle; d6 < -Math.PI; d6+=(Math.PI * 2D)) {
    ;
  }
  while (d6 >= Math.PI) {
    d6-=(Math.PI * 2D);
  }
  if (d6 < -1.0D) {
    d6=-1.0D;
  }
  if (d6 > 1.0D) {
    d6=1.0D;
  }
  this.angleDelta+=d6 * 0.1D;
  this.angleDelta*=0.8D;
  this.currentAngle+=this.angleDelta;
  int i;
  for (i=(int)((this.currentAngle / (Math.PI * 2D) + 1.0D) * (double)this.field_110976_a.size()) % this.field_110976_a.size(); i < 0; i=(i + this.field_110976_a.size()) % this.field_110976_a.size()) {
    ;
  }
  if (i != this.field_110973_g) {
    this.field_110973_g=i;
    TextureUtil.func_110998_a((int[])this.field_110976_a.get(this.field_110973_g),this.field_130223_c,this.field_130224_d,this.field_110975_c,this.field_110974_d,false,false);
  }
}","@Override public void updateAnimation(){
  Minecraft minecraft=Minecraft.getMinecraft();
  World world=minecraft.theWorld;
  EntityPlayer player=minecraft.thePlayer;
  double angel=0;
  if (world != null) {
    double xDifference=0;
    double zDifference=0;
    ItemStack itemStack=player.getCurrentEquippedItem();
    if (itemStack != null) {
      if (itemStack.getItem() instanceof ITracker) {
        Entity trackingEntity=((ITracker)itemStack.getItem()).getTrackingEntity(FMLClientHandler.instance().getClient().theWorld,itemStack);
        if (trackingEntity != null) {
          xDifference=trackingEntity.posX - player.posX;
          zDifference=trackingEntity.posZ - player.posZ;
        }
      }
    }
    player.rotationYaw%=360.0D;
    angel=-((player.rotationYaw - 90.0D) * Math.PI / 180.0D - Math.atan2(zDifference,xDifference));
  }
  double d6;
  for (d6=angel - this.currentAngle; d6 < -Math.PI; d6+=(Math.PI * 2D)) {
    ;
  }
  while (d6 >= Math.PI) {
    d6-=(Math.PI * 2D);
  }
  if (d6 < -1.0D) {
    d6=-1.0D;
  }
  if (d6 > 1.0D) {
    d6=1.0D;
  }
  this.angleDelta+=d6 * 0.1D;
  this.angleDelta*=0.8D;
  this.currentAngle+=this.angleDelta;
  int i;
  for (i=(int)((this.currentAngle / (Math.PI * 2D) + 1.0D) * this.field_110976_a.size()) % this.field_110976_a.size(); i < 0; i=(i + this.field_110976_a.size()) % this.field_110976_a.size()) {
    ;
  }
  if (i != this.field_110973_g) {
    this.field_110973_g=i;
    TextureUtil.func_110998_a((int[])this.field_110976_a.get(this.field_110973_g),this.field_130223_c,this.field_130224_d,this.field_110975_c,this.field_110974_d,false,false);
  }
}",0.9975414874001228
169919,"@Override public void doExplode(){
  if (!this.worldObj.isRemote) {
    if (this.thread.isComplete) {
      for (      Vector3 targetPosition : this.thread.results) {
        int blockID=targetPosition.getBlockID(worldObj);
        if (blockID > 0) {
          if (blockID == Block.grass.blockID || blockID == Block.sand.blockID) {
            if (worldObj.rand.nextFloat() > 0.96) {
              targetPosition.setBlock(worldObj,ZhuYaoICBM.bFuShe.blockID);
            }
          }
          if (blockID == Block.stone.blockID) {
            if (worldObj.rand.nextFloat() > 0.99) {
              targetPosition.setBlock(worldObj,ZhuYaoICBM.bFuShe.blockID);
            }
          }
 else           if (blockID == Block.leaves.blockID) {
            targetPosition.setBlock(worldObj,0);
          }
 else           if (blockID == Block.tallGrass.blockID) {
            if (Math.random() * 100 > 50) {
              targetPosition.setBlock(worldObj,Block.cobblestone.blockID);
            }
 else {
              targetPosition.setBlock(worldObj,0);
            }
          }
 else           if (blockID == Block.tilledField.blockID) {
            targetPosition.setBlock(worldObj,ZhuYaoICBM.bFuShe.blockID);
          }
        }
      }
    }
  }
}","@Override public void doExplode(){
  if (!this.worldObj.isRemote) {
    if (this.thread.isComplete) {
      for (      Vector3 targetPosition : this.thread.results) {
        int blockID=targetPosition.getBlockID(this.worldObj);
        if (blockID > 0) {
          if (blockID == Block.grass.blockID || blockID == Block.sand.blockID) {
            if (this.worldObj.rand.nextFloat() > 0.96) {
              targetPosition.setBlock(this.worldObj,ZhuYaoICBM.bFuShe.blockID);
            }
          }
          if (blockID == Block.stone.blockID) {
            if (this.worldObj.rand.nextFloat() > 0.99) {
              targetPosition.setBlock(this.worldObj,ZhuYaoICBM.bFuShe.blockID);
            }
          }
 else           if (blockID == Block.leaves.blockID) {
            targetPosition.setBlock(this.worldObj,0);
          }
 else           if (blockID == Block.tallGrass.blockID) {
            if (Math.random() * 100 > 50) {
              targetPosition.setBlock(this.worldObj,Block.cobblestone.blockID);
            }
 else {
              targetPosition.setBlock(this.worldObj,0);
            }
          }
 else           if (blockID == Block.tilledField.blockID) {
            targetPosition.setBlock(this.worldObj,ZhuYaoICBM.bFuShe.blockID);
          }
 else           if (blockID == Block.waterStill.blockID || blockID == Block.waterMoving.blockID) {
            if (FluidRegistry.getFluid(""String_Node_Str"") != null) {
              targetPosition.setBlock(this.worldObj,FluidRegistry.getFluid(""String_Node_Str"").getBlockID());
            }
          }
        }
      }
      this.controller.endExplosion();
    }
  }
}",0.8664359861591695
169920,"@Override public void doPreExplode(){
  if (!worldObj.isRemote) {
    this.thread=new ThrSheXian(worldObj,position,(int)this.getRadius(),this.nengLiang,this.exploder);
    this.thread.run();
  }
}","@Override public void doPreExplode(){
  if (!this.worldObj.isRemote) {
    this.thread=new ThrSheXian(worldObj,position,(int)this.getRadius(),this.nengLiang,this.exploder);
    this.thread.run();
  }
}",0.9874055415617128
169921,"@Override public void doExplode(){
  float radius=this.getRadius();
  if (this.worldObj.isRemote) {
    for (int i=0; i < 200; i++) {
      Vector3 diDian=new Vector3();
      diDian.x=Math.random() * radius / 2 - radius / 4;
      diDian.y=Math.random() * radius / 2 - radius / 4;
      diDian.z=Math.random() * radius / 2 - radius / 4;
      diDian.multiply(Math.min(radius,callCount) / 10);
      if (diDian.getMagnitude() <= radius) {
        diDian.add(this.position);
        ZhuYaoZhaPin.proxy.spawnParticle(""String_Node_Str"",this.worldObj,diDian,(Math.random() - 0.5) / 2,(Math.random() - 0.5) / 2,(Math.random() - 0.5) / 2,this.red,this.green,this.blue,7.0F,8);
      }
    }
  }
  AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.x - radius,position.y - radius,position.z - radius,position.x + radius,position.y + radius,position.z + radius);
  List<EntityLiving> allEntities=worldObj.getEntitiesWithinAABB(EntityLiving.class,bounds);
  for (  EntityLiving entity : allEntities) {
    if (this.isContagious) {
      ZhuYaoZhaPin.DU_CHUAN_RAN.poisonEntity(position,entity);
    }
    if (this.isPoisonous) {
      ZhuYaoZhaPin.DU_DU.poisonEntity(position,entity);
    }
    if (this.isConfuse) {
      entity.addPotionEffect(new CustomPotionEffect(Potion.confusion.id,18 * 20,0));
      entity.addPotionEffect(new CustomPotionEffect(Potion.digSlowdown.id,20 * 60,0));
      entity.addPotionEffect(new CustomPotionEffect(Potion.moveSlowdown.id,20 * 60,2));
    }
  }
  if (this.isMutate) {
    new BzBianZhong(worldObj,this.exploder,position.x,position.y,position.z,this.getRadius()).explode();
  }
  if (this.playShortSoundFX) {
    worldObj.playSoundEffect(position.x + 0.5D,position.y + 0.5D,position.z + 0.5D,ZhuYaoICBM.PREFIX + ""String_Node_Str"",4.0F,(1.0F + (worldObj.rand.nextFloat() - worldObj.rand.nextFloat()) * 0.2F) * 1F);
  }
  if (this.callCount > this.duration) {
    this.controller.endExplosion();
  }
}","@Override public void doExplode(){
  float radius=this.getRadius();
  if (this.worldObj.isRemote) {
    for (int i=0; i < 200; i++) {
      Vector3 diDian=new Vector3();
      diDian.x=Math.random() * radius / 2 - radius / 4;
      diDian.y=Math.random() * radius / 2 - radius / 4;
      diDian.z=Math.random() * radius / 2 - radius / 4;
      diDian.multiply(Math.min(radius,callCount) / 10);
      if (diDian.getMagnitude() <= radius) {
        diDian.add(this.position);
        ZhuYaoZhaPin.proxy.spawnParticle(""String_Node_Str"",this.worldObj,diDian,(Math.random() - 0.5) / 2,(Math.random() - 0.5) / 2,(Math.random() - 0.5) / 2,this.red,this.green,this.blue,7.0F,8);
      }
    }
  }
  AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(position.x - radius,position.y - radius,position.z - radius,position.x + radius,position.y + radius,position.z + radius);
  List<EntityLivingBase> allEntities=worldObj.getEntitiesWithinAABB(EntityLivingBase.class,bounds);
  for (  EntityLivingBase entity : allEntities) {
    if (this.isContagious) {
      ZhuYaoZhaPin.DU_CHUAN_RAN.poisonEntity(position,entity);
    }
    if (this.isPoisonous) {
      ZhuYaoZhaPin.DU_DU.poisonEntity(position,entity);
    }
    if (this.isConfuse) {
      entity.addPotionEffect(new CustomPotionEffect(Potion.confusion.id,18 * 20,0));
      entity.addPotionEffect(new CustomPotionEffect(Potion.digSlowdown.id,20 * 60,0));
      entity.addPotionEffect(new CustomPotionEffect(Potion.moveSlowdown.id,20 * 60,2));
    }
  }
  if (this.isMutate) {
    new BzBianZhong(worldObj,this.exploder,position.x,position.y,position.z,this.getRadius()).explode();
  }
  if (this.playShortSoundFX) {
    worldObj.playSoundEffect(position.x + 0.5D,position.y + 0.5D,position.z + 0.5D,ZhuYaoICBM.PREFIX + ""String_Node_Str"",4.0F,(1.0F + (worldObj.rand.nextFloat() - worldObj.rand.nextFloat()) * 0.2F) * 1F);
  }
  if (this.callCount > this.duration) {
    this.controller.endExplosion();
  }
}",0.9969135802469136
169922,"@SideOnly(Side.CLIENT) @Override public void registerIcons(IconRegister par1IconRegister){
  this.blockIcon=par1IconRegister.registerIcon(this.getUnlocalizedName2());
}","@SideOnly(Side.CLIENT) @Override public void registerIcons(IconRegister par1IconRegister){
  this.blockIcon=par1IconRegister.registerIcon(this.getUnlocalizedName().replace(""String_Node_Str"",""String_Node_Str""));
}",0.8736842105263158
169923,"@SideOnly(Side.CLIENT) @Override public void registerIcons(IconRegister iconRegister){
  super.registerIcons(iconRegister);
  this.iconCompact=iconRegister.registerIcon(this.getUnlocalizedName2() + ""String_Node_Str"");
  this.iconReinforced=iconRegister.registerIcon(this.getUnlocalizedName2() + ""String_Node_Str"");
}","@SideOnly(Side.CLIENT) @Override public void registerIcons(IconRegister iconRegister){
  super.registerIcons(iconRegister);
  this.iconCompact=iconRegister.registerIcon(this.getUnlocalizedName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
  this.iconReinforced=iconRegister.registerIcon(this.getUnlocalizedName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
}",0.8666666666666667
169924,"@Override public void onEMP(World world,Vector3 position,IExplosive empExplosive){
  TileEntity tileEntity=position.getTileEntity(world);
  if (tileEntity instanceof TYinXing) {
    ((TYinXing)tileEntity).setFangGe(0,0);
    ((TYinXing)tileEntity).setQing(false);
    world.markBlockForRenderUpdate(position.intX(),position.intY(),position.intZ());
  }
}","@Override public void onEMP(World world,Vector3 position,IExplosion empExplosive){
  TileEntity tileEntity=position.getTileEntity(world);
  if (tileEntity instanceof TYinXing) {
    ((TYinXing)tileEntity).setFangGe(0,0);
    ((TYinXing)tileEntity).setQing(false);
    world.markBlockForRenderUpdate(position.intX(),position.intY(),position.intZ());
  }
}",0.9943502824858758
169925,"@SideOnly(Side.CLIENT) @Override public void registerIcons(IconRegister iconRegister){
  super.registerIcons(iconRegister);
  this.iconPoison=iconRegister.registerIcon(this.getUnlocalizedName2() + ""String_Node_Str"");
  this.iconFlammable=iconRegister.registerIcon(this.getUnlocalizedName2() + ""String_Node_Str"");
}","@SideOnly(Side.CLIENT) @Override public void registerIcons(IconRegister iconRegister){
  super.registerIcons(iconRegister);
  this.iconPoison=iconRegister.registerIcon(this.getUnlocalizedName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
  this.iconFlammable=iconRegister.registerIcon(this.getUnlocalizedName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
}",0.8659217877094972
169926,"@Override public boolean interact(EntityPlayer par1EntityPlayer){
  if (par1EntityPlayer.getCurrentEquippedItem() != null) {
    if (par1EntityPlayer.getCurrentEquippedItem().itemID == Item.flintAndSteel.itemID) {
      this.ignite();
      return true;
    }
  }
  return false;
}","public boolean interact(EntityPlayer par1EntityPlayer){
  if (par1EntityPlayer.getCurrentEquippedItem() != null) {
    if (par1EntityPlayer.getCurrentEquippedItem().itemID == Item.flintAndSteel.itemID) {
      this.ignite();
      return true;
    }
  }
  return false;
}",0.9818840579710144
169927,"@Override public IExplosive getExplosiveType(){
  return ZhaPin.list[this.haoMa];
}","@Override public IExplosive getExplosiveType(){
  return ZhaPinRegistry.get(this.haoMa);
}",0.9132947976878611
169928,"@Override protected void explodeCart(double par1){
  this.worldObj.spawnParticle(""String_Node_Str"",this.posX,this.posY,this.posZ,0.0D,0.0D,0.0D);
  ZhaPin.createBaoZha(this.worldObj,new Vector3(this),this,this.haoMa);
  this.setDead();
}","@Override protected void explodeCart(double par1){
  this.worldObj.spawnParticle(""String_Node_Str"",this.posX,this.posY,this.posZ,0.0D,0.0D,0.0D);
  this.getExplosiveType().createExplosion(this.worldObj,this.posX,this.posY,this.posZ,this);
  this.setDead();
}",0.7515151515151515
169929,"@Override public void getSubItems(int par1,CreativeTabs par2CreativeTabs,List par3List){
  for (int metadata=0; metadata < ZhaPin.E_ER_ID; metadata++) {
    par3List.add(new ItemStack(par1,1,metadata));
  }
}","@Override public void getSubItems(int par1,CreativeTabs par2CreativeTabs,List par3List){
  for (  ZhaPin zhaPin : ZhaPinRegistry.getAllZhaPin()) {
    if (zhaPin.getTier() <= 2) {
      par3List.add(new ItemStack(par1,1,zhaPin.getID()));
    }
  }
}",0.4595185995623632
169930,"@Override public String getUnlocalizedName(ItemStack itemstack){
  return ""String_Node_Str"" + ZhaPin.list[itemstack.getItemDamage()].getUnlocalizedName();
}","@Override public String getUnlocalizedName(ItemStack itemstack){
  return ""String_Node_Str"" + ZhaPinRegistry.get(itemstack.getItemDamage()).getUnlocalizedName();
}",0.9529780564263324
169931,"@Override public ItemStack onItemRightClick(ItemStack itemStack,World world,EntityPlayer player){
  if (!world.isRemote) {
    if (this.getElectricityStored(itemStack) >= YONG_DIAN_LIANG) {
      for (int i=0; i < player.inventory.getSizeInventory(); i++) {
        ItemStack inventoryStack=player.inventory.getStackInSlot(i);
        if (inventoryStack != null) {
          if (inventoryStack.getItem() instanceof ItDaoDan) {
            int haoMa=inventoryStack.getItemDamage();
            if (inventoryStack.getItem() instanceof ItTeBieDaoDan) {
              haoMa+=100;
            }
            DaoDan daoDan=DaoDan.list[haoMa];
            if (daoDan != null && !ZhuYaoZhaPin.shiBaoHu(world,new Vector3(player),ExplosiveType.AIR,haoMa)) {
              if (daoDan.getTier() <= 2 && daoDan.isCruise()) {
                double dist=5000;
                Vector3 diDian=Vector3.add(new Vector3(player),new Vector3(0,0.5,0));
                Vector3 kan=new Vector3(player.getLook(1));
                Vector3 kaiShiDiDian=Vector3.add(diDian,Vector3.multiply(kan,1.1));
                Vector3 muBiao=Vector3.add(diDian,Vector3.multiply(kan,100));
                EDaoDan eDaoDan=new EDaoDan(world,kaiShiDiDian,daoDan.getID(),player.rotationYaw,player.rotationPitch);
                world.spawnEntityInWorld(eDaoDan);
                eDaoDan.launch(muBiao);
                if (!player.capabilities.isCreativeMode) {
                  player.inventory.setInventorySlotContents(i,null);
                }
                this.onProvide(ElectricityPack.getFromWatts(YONG_DIAN_LIANG,this.getElectricityStored(itemStack)),itemStack);
                return itemStack;
              }
            }
 else {
              player.sendChatToPlayer(""String_Node_Str"");
            }
          }
        }
      }
    }
  }
  return itemStack;
}","@Override public ItemStack onItemRightClick(ItemStack itemStack,World world,EntityPlayer player){
  if (!world.isRemote) {
    if (this.getElectricityStored(itemStack) >= YONG_DIAN_LIANG) {
      for (int i=0; i < player.inventory.getSizeInventory(); i++) {
        ItemStack inventoryStack=player.inventory.getStackInSlot(i);
        if (inventoryStack != null) {
          if (inventoryStack.getItem() instanceof ItDaoDan) {
            int haoMa=inventoryStack.getItemDamage();
            if (ZhaPinRegistry.get(haoMa) instanceof DaoDan) {
              DaoDan daoDan=(DaoDan)ZhaPinRegistry.get(haoMa);
              if (daoDan != null && !ZhuYaoZhaPin.shiBaoHu(world,new Vector3(player),ExplosiveType.AIR,haoMa)) {
                if (daoDan.getTier() <= 2 && daoDan.isCruise()) {
                  double dist=5000;
                  Vector3 diDian=Vector3.add(new Vector3(player),new Vector3(0,0.5,0));
                  Vector3 kan=new Vector3(player.getLook(1));
                  Vector3 kaiShiDiDian=Vector3.add(diDian,Vector3.multiply(kan,1.1));
                  Vector3 muBiao=Vector3.add(diDian,Vector3.multiply(kan,100));
                  EDaoDan eDaoDan=new EDaoDan(world,kaiShiDiDian,daoDan.getID(),player.rotationYaw,player.rotationPitch);
                  world.spawnEntityInWorld(eDaoDan);
                  eDaoDan.launch(muBiao);
                  if (!player.capabilities.isCreativeMode) {
                    player.inventory.setInventorySlotContents(i,null);
                  }
                  this.discharge(itemStack,YONG_DIAN_LIANG,true);
                  return itemStack;
                }
              }
 else {
                player.sendChatToPlayer(ChatMessageComponent.func_111066_d(""String_Node_Str""));
              }
            }
          }
        }
      }
    }
  }
  return itemStack;
}",0.8931774938842076
169932,"@Override public double getMaxElectricityStored(ItemStack itemStack){
  return 100000;
}","@Override public float getMaxElectricityStored(ItemStack itemStack){
  return 100000;
}",0.9485714285714286
169933,"@Override public void renderParticle(Tessellator tessellator,float par2,float par3,float par4,float par5,float par6,float par7){
  float agescale=0.0F;
  agescale=this.particleAge / (this.particleMaxAge / 2);
  if (agescale > 1.0F)   agescale=2.0F - agescale;
  this.particleScale=(this.antimatterParticleScale * agescale);
  tessellator.draw();
  GL11.glPushMatrix();
  GL11.glDepthMask(false);
  GL11.glEnable(3042);
  GL11.glBlendFunc(770,1);
  Minecraft.getMinecraft().renderEngine.bindTexture(ZhuYaoICBM.TEXTURE_PATH + ""String_Node_Str"");
  GL11.glColor4f(1.0F,1.0F,1.0F,0.75F);
  float f10=0.5F * this.particleScale;
  float f11=(float)(this.prevPosX + (this.posX - this.prevPosX) * par2 - interpPosX);
  float f12=(float)(this.prevPosY + (this.posY - this.prevPosY) * par2 - interpPosY);
  float f13=(float)(this.prevPosZ + (this.posZ - this.prevPosZ) * par2 - interpPosZ);
  tessellator.startDrawingQuads();
  tessellator.setBrightness(240);
  tessellator.setColorRGBA_F(this.particleRed,this.particleGreen,this.particleBlue,0.5F);
  tessellator.addVertexWithUV(f11 - par3 * f10 - par5 * f10,f12 - par4 * f10,f13 - par5 * f10 - par7 * f10,0.0D,1.0D);
  tessellator.addVertexWithUV(f11 - par3 * f10 + par5 * f10,f12 + par4 * f10,f13 - par5 * f10 + par7 * f10,1.0D,1.0D);
  tessellator.addVertexWithUV(f11 + par3 * f10 + par5 * f10,f12 + par4 * f10,f13 + par5 * f10 + par7 * f10,1.0D,0.0D);
  tessellator.addVertexWithUV(f11 + par3 * f10 - par5 * f10,f12 - par4 * f10,f13 + par5 * f10 - par7 * f10,0.0D,0.0D);
  tessellator.draw();
  GL11.glDisable(3042);
  GL11.glDepthMask(true);
  GL11.glPopMatrix();
  GL11.glBindTexture(3553,FMLClientHandler.instance().getClient().renderEngine.getTexture(ZhuYaoICBM.TEXTURE_PATH + ""String_Node_Str""));
  tessellator.startDrawingQuads();
}","@Override public void renderParticle(Tessellator tessellator,float par2,float par3,float par4,float par5,float par6,float par7){
  float agescale=0.0F;
  agescale=this.particleAge / (this.particleMaxAge / 2);
  if (agescale > 1.0F)   agescale=2.0F - agescale;
  this.particleScale=(this.antimatterParticleScale * agescale);
  tessellator.draw();
  GL11.glPushMatrix();
  GL11.glDepthMask(false);
  GL11.glEnable(3042);
  GL11.glBlendFunc(770,1);
  FMLClientHandler.instance().getClient().renderEngine.func_110577_a(TEXTURE);
  GL11.glColor4f(1.0F,1.0F,1.0F,0.75F);
  float f10=0.5F * this.particleScale;
  float f11=(float)(this.prevPosX + (this.posX - this.prevPosX) * par2 - interpPosX);
  float f12=(float)(this.prevPosY + (this.posY - this.prevPosY) * par2 - interpPosY);
  float f13=(float)(this.prevPosZ + (this.posZ - this.prevPosZ) * par2 - interpPosZ);
  tessellator.startDrawingQuads();
  tessellator.setBrightness(240);
  tessellator.setColorRGBA_F(this.particleRed,this.particleGreen,this.particleBlue,0.5F);
  tessellator.addVertexWithUV(f11 - par3 * f10 - par5 * f10,f12 - par4 * f10,f13 - par5 * f10 - par7 * f10,0.0D,1.0D);
  tessellator.addVertexWithUV(f11 - par3 * f10 + par5 * f10,f12 + par4 * f10,f13 - par5 * f10 + par7 * f10,1.0D,1.0D);
  tessellator.addVertexWithUV(f11 + par3 * f10 + par5 * f10,f12 + par4 * f10,f13 + par5 * f10 + par7 * f10,1.0D,0.0D);
  tessellator.addVertexWithUV(f11 + par3 * f10 - par5 * f10,f12 - par4 * f10,f13 + par5 * f10 - par7 * f10,0.0D,0.0D);
  tessellator.draw();
  GL11.glDisable(3042);
  GL11.glDepthMask(true);
  GL11.glPopMatrix();
  FMLClientHandler.instance().getClient().renderEngine.func_110577_a(CalclaviaRenderHelper.PARTICLE_RESOURCE);
  tessellator.startDrawingQuads();
}",0.933825617722238
169934,"/** 
 * Draw the background layer for the GuiContainer (everything behind the items)
 */
@Override protected void drawBackgroundLayer(int var2,int var3,float var1){
  this.mc.renderEngine.bindTexture(ZhuYaoICBM.GUI_PATH + ""String_Node_Str"");
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  containerWidth=(this.width - this.xSize) / 2;
  containerHeight=(this.height - this.ySize) / 2;
  this.drawTexturedModalRect(containerWidth,containerHeight,0,0,this.xSize,this.ySize);
}","/** 
 * Draw the background layer for the GuiContainer (everything behind the items)
 */
@Override protected void drawBackgroundLayer(int var2,int var3,float var1){
  FMLClientHandler.instance().getClient().renderEngine.func_110577_a(TEXTURE);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  containerWidth=(this.width - this.xSize) / 2;
  containerHeight=(this.height - this.ySize) / 2;
  this.drawTexturedModalRect(containerWidth,containerHeight,0,0,this.xSize,this.ySize);
}",0.8784648187633263
169935,"/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items)
 */
@Override protected void drawForegroundLayer(int var2,int var3,float var1){
  this.fontRenderer.drawString(""String_Node_Str"",65,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",12,30,4210752);
  this.textFieldBanJing.drawTextBox();
  this.fontRenderer.drawString(""String_Node_Str"",12,55,4210752);
  String mode=""String_Node_Str"";
  if (this.tileEntity.muoShi == 1) {
    mode=""String_Node_Str"";
  }
 else   if (this.tileEntity.muoShi == 2) {
    mode=""String_Node_Str"";
  }
  this.fontRenderer.drawString(""String_Node_Str"" + mode,12,105,4210752);
  String color=""String_Node_Str"";
  String status=""String_Node_Str"";
  if (this.tileEntity.isDisabled()) {
    status=""String_Node_Str"";
  }
 else   if (this.tileEntity.getJoules() < this.tileEntity.getMaxJoules()) {
    status=""String_Node_Str"";
  }
 else {
    color=""String_Node_Str"";
    status=""String_Node_Str"";
  }
  this.fontRenderer.drawString(color + ""String_Node_Str"" + status,12,120,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.tileEntity.getVoltage() + ""String_Node_Str"",12,135,4210752);
  this.fontRenderer.drawString(ElectricityDisplay.getDisplayShort(this.tileEntity.getJoules(),ElectricUnit.JOULES) + ""String_Node_Str"" + ElectricityDisplay.getDisplayShort(this.tileEntity.getMaxJoules(),ElectricUnit.JOULES),12,150,4210752);
}","/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items)
 */
@Override protected void drawForegroundLayer(int var2,int var3,float var1){
  this.fontRenderer.drawString(""String_Node_Str"",65,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",12,30,4210752);
  this.textFieldBanJing.drawTextBox();
  this.fontRenderer.drawString(""String_Node_Str"",12,55,4210752);
  String mode=""String_Node_Str"";
  if (this.tileEntity.muoShi == 1) {
    mode=""String_Node_Str"";
  }
 else   if (this.tileEntity.muoShi == 2) {
    mode=""String_Node_Str"";
  }
  this.fontRenderer.drawString(""String_Node_Str"" + mode,12,105,4210752);
  String color=""String_Node_Str"";
  String status=""String_Node_Str"";
  if (this.tileEntity.getEnergyStored() < this.tileEntity.getMaxEnergyStored()) {
    status=""String_Node_Str"";
  }
 else {
    color=""String_Node_Str"";
    status=""String_Node_Str"";
  }
  this.fontRenderer.drawString(color + ""String_Node_Str"" + status,12,120,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.tileEntity.getVoltage() + ""String_Node_Str"",12,135,4210752);
  this.fontRenderer.drawString(ElectricityDisplay.getDisplayShort(this.tileEntity.getEnergyStored(),ElectricUnit.JOULES) + ""String_Node_Str"" + ElectricityDisplay.getDisplayShort(this.tileEntity.getMaxEnergyStored(),ElectricUnit.JOULES),12,150,4210752);
}",0.943884892086331
169936,"/** 
 * Draw the background layer for the GuiContainer (everything behind the items)
 */
@Override protected void drawGuiContainerBackgroundLayer(float par1,int par2,int par3){
  this.mc.renderEngine.bindTexture(ZhuYaoICBM.GUI_PATH + ""String_Node_Str"");
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  containerWidth=(this.width - this.xSize) / 2;
  containerHeight=(this.height - this.ySize) / 2;
  this.drawTexturedModalRect(containerWidth,containerHeight,0,0,this.xSize,this.ySize);
}","/** 
 * Draw the background layer for the GuiContainer (everything behind the items)
 */
@Override protected void drawGuiContainerBackgroundLayer(float par1,int par2,int par3){
  FMLClientHandler.instance().getClient().renderEngine.func_110577_a(TEXTURE);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  containerWidth=(this.width - this.xSize) / 2;
  containerHeight=(this.height - this.ySize) / 2;
  this.drawTexturedModalRect(containerWidth,containerHeight,0,0,this.xSize,this.ySize);
}",0.8814968814968815
169937,"@Override protected void drawBackgroundLayer(int var2,int var3,float var1){
  this.mc.renderEngine.bindTexture(ZhuYaoICBM.GUI_PATH + ""String_Node_Str"");
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  containerWidth=(this.width - this.xSize) / 2;
  containerHeight=(this.height - this.ySize) / 2;
  this.drawTexturedModalRect(containerWidth,containerHeight,0,0,this.xSize,this.ySize);
}","@Override protected void drawBackgroundLayer(int var2,int var3,float var1){
  FMLClientHandler.instance().getClient().renderEngine.func_110577_a(TEXTURE);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  containerWidth=(this.width - this.xSize) / 2;
  containerHeight=(this.height - this.ySize) / 2;
  this.drawTexturedModalRect(containerWidth,containerHeight,0,0,this.xSize,this.ySize);
}",0.85
169938,"/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items)
 */
@Override public void drawForegroundLayer(int var2,int var3,float var1){
  this.tFX.drawTextBox();
  this.tFZ.drawTextBox();
  if (tileEntity.getTier() >= 1) {
    this.tFY.drawTextBox();
    this.fontRenderer.drawString(""String_Node_Str"",12,68,4210752);
    this.tFGaoDu.drawTextBox();
    this.fontRenderer.drawString(""String_Node_Str"",12,83,4210752);
    if (tileEntity.getTier() > 1) {
      this.tFFreq.drawTextBox();
      this.fontRenderer.drawString(""String_Node_Str"",12,98,4210752);
    }
  }
  this.fontRenderer.drawString(""String_Node_Str"",45,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",30,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",12,25,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",25,40,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",25,55,4210752);
  int inaccuracy=30;
  if (this.tileEntity.faSheDi != null) {
    if (this.tileEntity.faSheDi.jiaZi != null) {
      inaccuracy=this.tileEntity.faSheDi.jiaZi.getInaccuracy();
    }
  }
  this.fontRenderer.drawString(""String_Node_Str"" + inaccuracy + ""String_Node_Str"",12,113,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.tileEntity.getStatus(),12,125,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.tileEntity.getVoltage() + ""String_Node_Str"",12,137,4210752);
  this.fontRenderer.drawString(ElectricityDisplay.getDisplayShort(this.tileEntity.getJoules(),ElectricUnit.JOULES) + ""String_Node_Str"" + ElectricityDisplay.getDisplayShort(this.tileEntity.getMaxJoules(),ElectricUnit.JOULES),12,150,4210752);
}","/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items)
 */
@Override public void drawForegroundLayer(int var2,int var3,float var1){
  this.tFX.drawTextBox();
  this.tFZ.drawTextBox();
  if (tileEntity.getTier() >= 1) {
    this.tFY.drawTextBox();
    this.fontRenderer.drawString(""String_Node_Str"",12,68,4210752);
    this.tFGaoDu.drawTextBox();
    this.fontRenderer.drawString(""String_Node_Str"",12,83,4210752);
    if (tileEntity.getTier() > 1) {
      this.tFFreq.drawTextBox();
      this.fontRenderer.drawString(""String_Node_Str"",12,98,4210752);
    }
  }
  this.fontRenderer.drawString(""String_Node_Str"",45,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",30,6,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",12,25,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",25,40,4210752);
  this.fontRenderer.drawString(""String_Node_Str"",25,55,4210752);
  int inaccuracy=30;
  if (this.tileEntity.faSheDi != null) {
    if (this.tileEntity.faSheDi.jiaZi != null) {
      inaccuracy=this.tileEntity.faSheDi.jiaZi.getInaccuracy();
    }
  }
  this.fontRenderer.drawString(""String_Node_Str"" + inaccuracy + ""String_Node_Str"",12,113,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.tileEntity.getStatus(),12,125,4210752);
  this.fontRenderer.drawString(""String_Node_Str"" + this.tileEntity.getVoltage() + ""String_Node_Str"",12,137,4210752);
  this.fontRenderer.drawString(ElectricityDisplay.getDisplayShort(this.tileEntity.getEnergyStored(),ElectricUnit.JOULES) + ""String_Node_Str"" + ElectricityDisplay.getDisplayShort(this.tileEntity.getMaxEnergyStored(),ElectricUnit.JOULES),12,150,4210752);
}",0.9891826923076924
169939,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  if (!isPreInit) {
    Modstats.instance().getReporter().registerMod(INSTANCE);
    MinecraftForge.EVENT_BUS.register(INSTANCE);
    LOGGER.fine(""String_Node_Str"" + TranslationHelper.loadLanguages(YU_YAN_PATH,YU_YAN) + ""String_Node_Str"");
    SheDing.initiate();
    SheDing.CONFIGURATION.load();
    PotionRadiation.INSTANCE.getId();
    bLiu=new BLiu(ICBM.BLOCK_ID_PREFIX + 0);
    bJia=new BlockMulti(SheDing.CONFIGURATION.getBlock(""String_Node_Str"",ICBM.BLOCK_ID_PREFIX + 6).getInt()).setTextureName(ZhuYaoICBM.PREFIX + ""String_Node_Str"").setChannel(this.getChannel());
    itDu=new ItICBMBase(ICBM.ITEM_ID_PREFIX + 0,""String_Node_Str"");
    itLiu=new ItICBMBase(ICBM.ITEM_ID_PREFIX + 1,""String_Node_Str"");
    GameRegistry.registerBlock(bLiu,""String_Node_Str"");
    GameRegistry.registerBlock(bJia,""String_Node_Str"");
    liuGenData=new GenLiu(""String_Node_Str"",""String_Node_Str"",new ItemStack(bLiu),0,40,20,4).enable(SheDing.CONFIGURATION);
    if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
      bFuShe=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
      LOGGER.fine(""String_Node_Str"");
    }
 else {
      bFuShe=new BlockRadioactive(SheDing.CONFIGURATION.getBlock(""String_Node_Str"",BlockRadioactive.RECOMMENDED_ID).getInt()).setUnlocalizedName(PREFIX + ""String_Node_Str"").func_111022_d(PREFIX + ""String_Node_Str"");
      GameRegistry.registerBlock(bFuShe,""String_Node_Str"");
      OreDictionary.registerOre(""String_Node_Str"",bFuShe);
      LOGGER.fine(""String_Node_Str"");
    }
    Block.obsidian.setResistance(SheDing.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
    LOGGER.fine(""String_Node_Str"" + Block.obsidian.getExplosionResistance(null));
    SheDing.CONFIGURATION.save();
    OreDictionary.registerOre(""String_Node_Str"",itLiu);
    OreGenerator.addOre(liuGenData);
    GameRegistry.registerTileEntity(TileEntityMultiBlockPart.class,""String_Node_Str"");
    isPreInit=true;
  }
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  if (!isPreInit) {
    Modstats.instance().getReporter().registerMod(INSTANCE);
    MinecraftForge.EVENT_BUS.register(INSTANCE);
    LOGGER.fine(""String_Node_Str"" + TranslationHelper.loadLanguages(YU_YAN_PATH,YU_YAN) + ""String_Node_Str"");
    Compatibility.initiate();
    SheDing.initiate();
    SheDing.CONFIGURATION.load();
    PotionRadiation.INSTANCE.getId();
    bLiu=new BLiu(ICBM.BLOCK_ID_PREFIX + 0);
    bJia=new BlockMulti(SheDing.CONFIGURATION.getBlock(""String_Node_Str"",ICBM.BLOCK_ID_PREFIX + 6).getInt()).setTextureName(ZhuYaoICBM.PREFIX + ""String_Node_Str"").setChannel(this.getChannel());
    itDu=new ItICBMBase(ICBM.ITEM_ID_PREFIX + 0,""String_Node_Str"");
    itLiu=new ItICBMBase(ICBM.ITEM_ID_PREFIX + 1,""String_Node_Str"");
    GameRegistry.registerBlock(bLiu,""String_Node_Str"");
    GameRegistry.registerBlock(bJia,""String_Node_Str"");
    liuGenData=new GenLiu(""String_Node_Str"",""String_Node_Str"",new ItemStack(bLiu),0,40,20,4).enable(SheDing.CONFIGURATION);
    if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
      bFuShe=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
      LOGGER.fine(""String_Node_Str"");
    }
 else {
      bFuShe=new BlockRadioactive(SheDing.CONFIGURATION.getBlock(""String_Node_Str"",BlockRadioactive.RECOMMENDED_ID).getInt()).setUnlocalizedName(PREFIX + ""String_Node_Str"").func_111022_d(PREFIX + ""String_Node_Str"");
      GameRegistry.registerBlock(bFuShe,""String_Node_Str"");
      OreDictionary.registerOre(""String_Node_Str"",bFuShe);
      LOGGER.fine(""String_Node_Str"");
    }
    Block.obsidian.setResistance(SheDing.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
    LOGGER.fine(""String_Node_Str"" + Block.obsidian.getExplosionResistance(null));
    SheDing.CONFIGURATION.save();
    OreDictionary.registerOre(""String_Node_Str"",itLiu);
    OreGenerator.addOre(liuGenData);
    GameRegistry.registerTileEntity(TileEntityMultiBlockPart.class,""String_Node_Str"");
    isPreInit=true;
  }
}",0.9927113702623906
169940,"public EntityTileDamagable(TPaoDaiBase host){
  this(host.worldObj);
  this.setPosition(host.xCoord + 0.5,host.yCoord,host.zCoord + 0.5);
  this.host=host;
}","public EntityTileDamagable(TPaoTaiBase host){
  this(host.worldObj);
  this.setPosition(host.xCoord + 0.5,host.yCoord,host.zCoord + 0.5);
  this.host=host;
}",0.9936305732484076
169941,"@Override public void readSpawnData(ByteArrayDataInput data){
  try {
    TileEntity tileEntity=this.worldObj.getBlockTileEntity(data.readInt(),data.readInt(),data.readInt());
    if (tileEntity instanceof TPaoDaiBase) {
      this.host=(TPaoDaiBase)tileEntity;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void readSpawnData(ByteArrayDataInput data){
  try {
    TileEntity tileEntity=this.worldObj.getBlockTileEntity(data.readInt(),data.readInt(),data.readInt());
    if (tileEntity instanceof TPaoTaiBase) {
      this.host=(TPaoTaiBase)tileEntity;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9938837920489296
169942,"public static TileDamageSource doBulletDamage(TPaoDaiBase tileEntity){
  return (TileDamageSource)(new TileDamageSource(""String_Node_Str"",tileEntity).setProjectile());
}","public static TileDamageSource doBulletDamage(TPaoTaiBase tileEntity){
  return (TileDamageSource)(new TileDamageSource(""String_Node_Str"",tileEntity).setProjectile());
}",0.9940828402366864
169943,"public static TileDamageSource doLaserDamage(TPaoDaiBase tileEntity){
  return (TileDamageSource)(new TileDamageSource(""String_Node_Str"",tileEntity).setDamageBypassesArmor().setProjectile());
}","public static TileDamageSource doLaserDamage(TPaoTaiBase tileEntity){
  return (TileDamageSource)(new TileDamageSource(""String_Node_Str"",tileEntity).setDamageBypassesArmor().setProjectile());
}",0.9948186528497408
169944,"public TileDamageSource(String damageName,TPaoDaiBase tileEntity){
  super(damageName,tileEntity.getDamageEntity());
}","public TileDamageSource(String damageName,TPaoTaiBase tileEntity){
  super(damageName,tileEntity.getDamageEntity());
}",0.9915254237288136
169945,"@Override public boolean onMachineActivated(World world,int x,int y,int z,EntityPlayer player,int side,float hitX,float hitY,float hitZ){
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TPaoTaiZhan) {
    if (player.getCurrentEquippedItem() != null) {
      if (side == ((TPaoTaiZhan)tileEntity).deployDirection.ordinal() && player.getCurrentEquippedItem().itemID == ZhuYaoGangShao.blockTurret.blockID) {
        return false;
      }
    }
    if (((TPaoTaiZhan)tileEntity).getTurret(false) != null) {
      if (!world.isRemote) {
        player.openGui(ZhuYaoGangShao.instance,CommonProxy.GUI_PLATFORM_ID,world,x,y,z);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean onMachineActivated(World world,int x,int y,int z,EntityPlayer player,int side,float hitX,float hitY,float hitZ){
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TPaoTaiZhan) {
    if (player.getCurrentEquippedItem() != null) {
      if (side == ((TPaoTaiZhan)tileEntity).getTurretDirection().ordinal() && player.getCurrentEquippedItem().itemID == ZhuYaoGangShao.blockTurret.blockID) {
        return false;
      }
    }
    if (((TPaoTaiZhan)tileEntity).getTurret() != null) {
      if (!world.isRemote) {
        player.openGui(ZhuYaoGangShao.instance,CommonProxy.GUI_PLATFORM_ID,world,x,y,z);
      }
    }
    return true;
  }
  return false;
}",0.9845070422535211
169946,"@Override public float getRequest(ForgeDirection direction){
  if (this.getTurret(false) != null) {
    if (this.getEnergyStored() < this.getTurret(false).getFiringRequest()) {
      Math.max(turret.getFiringRequest(),0);
    }
  }
  return 0;
}","@Override public float getRequest(ForgeDirection direction){
  if (this.getTurret() != null) {
    if (this.getEnergyStored() < this.getTurret().getFiringRequest()) {
      return Math.max(this.getTurret().getFiringRequest(),0);
    }
  }
  return 0;
}",0.9255533199195172
169947,"/** 
 * Gets the turret instance linked to this platform 
 */
public TPaoDaiBase getTurret(boolean getNew){
  Vector3 position=new Vector3(this);
  if (getNew || this.turret == null || this.turret.isInvalid() || !(new Vector3(this.turret).equals(position.clone().modifyPositionFromSide(this.deployDirection)))) {
    TileEntity tileEntity=position.clone().modifyPositionFromSide(this.deployDirection).getTileEntity(this.worldObj);
    if (tileEntity instanceof TPaoDaiBase) {
      this.turret=(TPaoDaiBase)tileEntity;
    }
 else {
      this.turret=null;
    }
  }
  return this.turret;
}","/** 
 * Gets the turret instance linked to this platform 
 */
public TPaoTaiBase getTurret(){
  if (this.cachedTurret == null || this.cachedTurret.isInvalid() || !(new Vector3(this.cachedTurret).equals(new Vector3(this).modifyPositionFromSide(this.getTurretDirection())))) {
    TileEntity tileEntity=new Vector3(this).modifyPositionFromSide(this.getTurretDirection()).getTileEntity(this.worldObj);
    if (tileEntity instanceof TPaoTaiBase) {
      this.cachedTurret=(TPaoTaiBase)tileEntity;
    }
 else {
      this.cachedTurret=null;
    }
  }
  return this.cachedTurret;
}",0.7530017152658662
169948,"public boolean isRunning(){
  return (this.getTurret(false) != null && this.getEnergyStored() >= this.getTurret(false).getFiringRequest());
}","public boolean isRunning(){
  return (this.getTurret() != null && this.getEnergyStored() >= this.getTurret().getFiringRequest());
}",0.9632352941176472
169949,"@Override public float receiveElectricity(ForgeDirection from,ElectricityPack receive,boolean doReceive){
  this.prevWatts=this.getEnergyStored();
  if (doReceive) {
    if (UniversalElectricity.isVoltageSensitive) {
      if (receive.voltage > this.getVoltage()) {
        TPaoDaiBase turret=this.getTurret(false);
        if (turret != null && turret instanceof IHealthTile) {
          ((IHealthTile)this.turret).onDamageTaken(CustomDamageSource.electrocution,Integer.MAX_VALUE);
        }
        return 0;
      }
    }
  }
  float returnValue=super.receiveElectricity(from,receive,doReceive);
  if ((this.prevWatts <= this.getRequest(null) && this.getEnergyStored() >= this.getRequest(null)) && !(this.prevWatts == this.getEnergyStored())) {
    this.worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
  }
  return returnValue;
}","@Override public float receiveElectricity(ElectricityPack receive,boolean doReceive){
  this.prevWatts=this.getEnergyStored();
  if (doReceive) {
    if (UniversalElectricity.isVoltageSensitive) {
      if (receive.voltage > this.getVoltage()) {
        TPaoTaiBase turret=this.getTurret();
        if (turret != null && turret instanceof IHealthTile) {
          ((IHealthTile)this.cachedTurret).onDamageTaken(CustomDamageSource.electrocution,Integer.MAX_VALUE);
        }
        return 0;
      }
    }
  }
  float returnValue=super.receiveElectricity(receive,doReceive);
  if ((this.prevWatts <= this.getRequest(null) && this.getEnergyStored() >= this.getRequest(null)) && !(this.prevWatts == this.getEnergyStored())) {
    this.worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
  }
  return returnValue;
}",0.9761336515513126
169950,"@Override public void updateEntity(){
  super.updateEntity();
  if (this.getTurret(false) != null) {
    this.setMaxEnergyStored(Math.max(turret.getFiringRequest(),0) * 2);
  }
 else {
    this.setMaxEnergyStored(0);
  }
  if (this.prevWatts != this.getEnergyStored()) {
    this.worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
  }
  if (!this.worldObj.isRemote) {
    for (int i=0; i < UPGRADE_START_INDEX; i++) {
      if (this.getEnergyStored() >= this.getRequest(null)) {
        break;
      }
      this.receiveElectricity(ElectricItemHelper.dischargeItem(this.getStackInSlot(i),this.getRequest(null)),true);
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (this.prevWatts != this.getEnergyStored()) {
    this.worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
  }
  if (!this.worldObj.isRemote) {
    for (int i=0; i < UPGRADE_START_INDEX; i++) {
      if (this.getEnergyStored() >= this.getRequest(null)) {
        break;
      }
      this.receiveElectricity(ElectricItemHelper.dischargeItem(this.getStackInSlot(i),this.getRequest(null)),true);
    }
  }
}",0.8591674047829938
169951,"/** 
 * if a sentry is spawned above the stand it is removed
 * @return
 */
public boolean destroyTurret(){
  TileEntity ent=this.worldObj.getBlockTileEntity(this.xCoord + deployDirection.offsetX,this.yCoord + deployDirection.offsetY,this.zCoord + deployDirection.offsetZ);
  if (ent instanceof TPaoDaiBase) {
    this.turret=null;
    ((TPaoDaiBase)ent).destroy(false);
    return true;
  }
  return false;
}","/** 
 * if a sentry is spawned above the stand it is removed
 * @return
 */
public boolean destroyTurret(){
  TileEntity ent=this.worldObj.getBlockTileEntity(this.xCoord + this.getTurretDirection().offsetX,this.yCoord + this.getTurretDirection().offsetY,this.zCoord + this.getTurretDirection().offsetZ);
  if (ent instanceof TPaoTaiBase) {
    this.cachedTurret=null;
    ((TPaoTaiBase)ent).destroy(false);
    return true;
  }
  return false;
}",0.9086651053864168
169952,"@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TPaoDaiBase) {
    TPaoDaiBase tileEntity=(TPaoDaiBase)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5f,(float)y + 1f,(float)z + 0.5f);
    GL11.glScalef(0.7f,0.7f,0.7f);
    this.setTextureBaseOnState(tileEntity);
    render(tileEntity.currentRotationYaw,tileEntity.currentRotationPitch);
    GL11.glPopMatrix();
  }
}","@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TPaoTaiBase) {
    TPaoTaiBase tileEntity=(TPaoTaiBase)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5f,(float)y + 1f,(float)z + 0.5f);
    GL11.glScalef(0.7f,0.7f,0.7f);
    this.setTextureBaseOnState(tileEntity);
    render(tileEntity.currentRotationYaw,tileEntity.currentRotationPitch);
    GL11.glPopMatrix();
  }
}",0.9938144329896909
169953,"public void setTextureBaseOnState(TPaoDaiBase tileEntity){
  EntityPlayer player=this.getPlayer();
  if (tileEntity.getPlatform() != null) {
    AccessLevel level=tileEntity.getPlatform().getUserAccess(player.username);
    if (level == AccessLevel.ADMIN) {
      this.func_110628_a(TEXTURE_FILE);
      return;
    }
 else     if (level.ordinal() >= AccessLevel.USER.ordinal()) {
      this.func_110628_a(TEXTURE_FILE_FRIENDLY);
      return;
    }
  }
  this.func_110628_a(TEXTURE_FILE_HOSTILE);
}","public void setTextureBaseOnState(TPaoTaiBase tileEntity){
  EntityPlayer player=this.getPlayer();
  if (tileEntity.getPlatform() != null) {
    AccessLevel level=tileEntity.getPlatform().getUserAccess(player.username);
    if (level == AccessLevel.ADMIN) {
      this.func_110628_a(TEXTURE_FILE);
      return;
    }
 else     if (level.ordinal() >= AccessLevel.USER.ordinal()) {
      this.func_110628_a(TEXTURE_FILE_FRIENDLY);
      return;
    }
  }
  this.func_110628_a(TEXTURE_FILE_HOSTILE);
}",0.997995991983968
169954,"public void setTextureBaseOnState(TPaoDaiBase tileEntity){
  EntityPlayer player=this.getPlayer();
  if (tileEntity.getPlatform() != null) {
    AccessLevel level=tileEntity.getPlatform().getUserAccess(player.username);
    if (level == AccessLevel.ADMIN) {
      this.func_110628_a(TEXTURE_FILE);
      return;
    }
 else     if (level.ordinal() >= AccessLevel.USER.ordinal()) {
      this.func_110628_a(TEXTURE_FILE_FRIENDLY);
      return;
    }
  }
  this.func_110628_a(TEXTURE_FILE_HOSTILE);
}","public void setTextureBaseOnState(TPaoTaiBase tileEntity){
  EntityPlayer player=this.getPlayer();
  if (tileEntity.getPlatform() != null) {
    AccessLevel level=tileEntity.getPlatform().getUserAccess(player.username);
    if (level == AccessLevel.ADMIN) {
      this.func_110628_a(TEXTURE_FILE);
      return;
    }
 else     if (level.ordinal() >= AccessLevel.USER.ordinal()) {
      this.func_110628_a(TEXTURE_FILE_FRIENDLY);
      return;
    }
  }
  this.func_110628_a(TEXTURE_FILE_HOSTILE);
}",0.997995991983968
169955,"@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TPaoDaiBase) {
    TPaoDaiBase tileEntity=(TPaoDaiBase)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5f,(float)y + 1.5f,(float)z + 0.5f);
    this.setTextureBaseOnState(tileEntity);
    render(tileEntity.currentRotationYaw,tileEntity.currentRotationPitch);
    GL11.glPopMatrix();
  }
}","@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TPaoTaiBase) {
    TPaoTaiBase tileEntity=(TPaoTaiBase)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5f,(float)y + 1.5f,(float)z + 0.5f);
    this.setTextureBaseOnState(tileEntity);
    render(tileEntity.currentRotationYaw,tileEntity.currentRotationPitch);
    GL11.glPopMatrix();
  }
}",0.9933628318584072
169956,"public void setTextureBaseOnState(TPaoDaiBase tileEntity){
  EntityPlayer player=this.getPlayer();
  if (tileEntity.getPlatform() != null) {
    AccessLevel level=tileEntity.getPlatform().getUserAccess(player.username);
    if (level == AccessLevel.ADMIN) {
      this.func_110628_a(TEXTURE_FILE);
      return;
    }
 else     if (level.ordinal() >= AccessLevel.USER.ordinal()) {
      this.func_110628_a(TEXTURE_FILE_FRIENDLY);
      return;
    }
  }
  func_110628_a(TEXTURE_FILE_HOSTILE);
}","public void setTextureBaseOnState(TPaoTaiBase tileEntity){
  EntityPlayer player=this.getPlayer();
  if (tileEntity.getPlatform() != null) {
    AccessLevel level=tileEntity.getPlatform().getUserAccess(player.username);
    if (level == AccessLevel.ADMIN) {
      this.func_110628_a(TEXTURE_FILE);
      return;
    }
 else     if (level.ordinal() >= AccessLevel.USER.ordinal()) {
      this.func_110628_a(TEXTURE_FILE_FRIENDLY);
      return;
    }
  }
  func_110628_a(TEXTURE_FILE_HOSTILE);
}",0.9979757085020244
169957,"@Override public void updateScreen(){
  super.updateScreen();
  if (this.tileEntity.getTurret(false) == null) {
    this.mc.thePlayer.closeScreen();
  }
}","@Override public void updateScreen(){
  super.updateScreen();
  if (this.tileEntity.getTurret() == null) {
    this.mc.thePlayer.closeScreen();
  }
}",0.9834983498349836
169958,"@Override protected void actionPerformed(GuiButton button){
  if (tileEntity.getTurret(false) != null) {
switch (button.id) {
case 0:
{
        this.entityPlayer.openGui(ZhuYaoGangShao.instance,CommonProxy.GUI_PLATFORM_TERMINAL_ID,this.tileEntity.worldObj,this.tileEntity.xCoord,this.tileEntity.yCoord,this.tileEntity.zCoord);
        break;
      }
case 1:
{
      this.entityPlayer.openGui(ZhuYaoGangShao.instance,CommonProxy.GUI_PLATFORM_ACCESS_ID,this.tileEntity.worldObj,this.tileEntity.xCoord,this.tileEntity.yCoord,this.tileEntity.zCoord);
      break;
    }
case 2:
{
    this.entityPlayer.openGui(ZhuYaoGangShao.instance,CommonProxy.GUI_PLATFORM_ID,this.tileEntity.worldObj,this.tileEntity.xCoord,this.tileEntity.yCoord,this.tileEntity.zCoord);
    break;
  }
case 3:
{
}
}
}
}","@Override protected void actionPerformed(GuiButton button){
  if (tileEntity.getTurret() != null) {
switch (button.id) {
case 0:
{
        this.entityPlayer.openGui(ZhuYaoGangShao.instance,CommonProxy.GUI_PLATFORM_TERMINAL_ID,this.tileEntity.worldObj,this.tileEntity.xCoord,this.tileEntity.yCoord,this.tileEntity.zCoord);
        break;
      }
case 1:
{
      this.entityPlayer.openGui(ZhuYaoGangShao.instance,CommonProxy.GUI_PLATFORM_ACCESS_ID,this.tileEntity.worldObj,this.tileEntity.xCoord,this.tileEntity.yCoord,this.tileEntity.zCoord);
      break;
    }
case 2:
{
    this.entityPlayer.openGui(ZhuYaoGangShao.instance,CommonProxy.GUI_PLATFORM_ID,this.tileEntity.worldObj,this.tileEntity.xCoord,this.tileEntity.yCoord,this.tileEntity.zCoord);
    break;
  }
case 3:
{
}
}
}
}",0.9968091895341415
169959,"@Override public boolean onActivated(EntityPlayer entityPlayer){
  if (entityPlayer.isSneaking()) {
    this.tryActivateWeapon();
  }
 else {
    if (this.entityFake != null) {
      if (this.entityFake.riddenByEntity instanceof EntityPlayer) {
        EntityPlayer mountedPlayer=(EntityPlayer)this.entityFake.riddenByEntity;
        if (entityPlayer == mountedPlayer) {
          entityPlayer.unmountEntity(this.entityFake);
          this.entityFake.setDead();
          this.entityFake=null;
          if (!this.worldObj.isRemote) {
            PacketManager.sendPacketToClients(this.getRotationPacket());
          }
          return true;
        }
      }
      return false;
    }
 else {
      this.mount(entityPlayer);
    }
  }
  return true;
}","@Override public boolean onActivated(EntityPlayer entityPlayer){
  if (entityPlayer.isSneaking()) {
    this.tryActivateWeapon();
  }
 else {
    if (this.entityFake != null) {
      if (this.entityFake.riddenByEntity instanceof EntityPlayer) {
        EntityPlayer mountedPlayer=(EntityPlayer)this.entityFake.riddenByEntity;
        if (entityPlayer == mountedPlayer) {
          if (!this.worldObj.isRemote) {
            PacketManager.sendPacketToClients(this.getRotationPacket());
          }
          entityPlayer.unmountEntity(this.entityFake);
          this.entityFake.setDead();
          this.entityFake=null;
          return true;
        }
      }
      return false;
    }
 else {
      this.mount(entityPlayer);
    }
  }
  return true;
}",0.8355437665782494
169960,"public void mount(EntityPlayer entityPlayer){
  if (!this.worldObj.isRemote) {
    if (this.entityFake == null) {
      this.entityFake=new EJia(this.worldObj,new Vector3(this.xCoord + 0.5,this.yCoord + 1.2,this.zCoord + 0.5),this,true);
      this.worldObj.spawnEntityInWorld(entityFake);
    }
    entityPlayer.rotationYaw=this.currentRotationYaw;
    entityPlayer.rotationPitch=this.currentRotationPitch;
    entityPlayer.mountEntity(this.entityFake);
  }
}","public void mount(EntityPlayer entityPlayer){
  if (!this.worldObj.isRemote) {
    if (this.entityFake == null) {
      this.entityFake=new EJia(this.worldObj,new Vector3(this.xCoord + 0.5,this.yCoord + 1.2,this.zCoord + 0.5),this,true);
      this.worldObj.spawnEntityInWorld(this.entityFake);
    }
    entityPlayer.rotationYaw=this.currentRotationYaw;
    entityPlayer.rotationPitch=this.currentRotationPitch;
    entityPlayer.mountEntity(this.entityFake);
  }
}",0.9945945945945946
169961,"@Override public Object[] callMethod(IComputerAccess computer,int method,Object[] arguments) throws Exception {
  if (this.prevWatts < this.getRequest().getWatts() && this.wattsReceived < this.getRequest().getWatts()) {
    throw new Exception(""String_Node_Str"");
  }
  HashMap<String,Double> returnArray=new HashMap();
  int count=0;
switch (method) {
case 0:
    List<Entity> entities=RadarRegistry.getEntitiesWithinRadius(new Vector3(this).toVector2(),this.alarmBanJing);
  for (  Entity entity : entities) {
    returnArray.put(""String_Node_Str"" + count,entity.posX);
    returnArray.put(""String_Node_Str"" + count,entity.posY);
    returnArray.put(""String_Node_Str"" + count,entity.posZ);
  }
return new Object[]{returnArray};
case 1:
for (TileEntity jiQi : RadarRegistry.getTileEntitiesInArea(new Vector2(this.xCoord - TLeiDaTai.MAX_BIAN_JING,this.zCoord - TLeiDaTai.MAX_BIAN_JING),new Vector2(this.xCoord + TLeiDaTai.MAX_BIAN_JING,this.zCoord + TLeiDaTai.MAX_BIAN_JING))) {
returnArray.put(""String_Node_Str"" + count,(double)jiQi.xCoord);
returnArray.put(""String_Node_Str"" + count,(double)jiQi.yCoord);
returnArray.put(""String_Node_Str"" + count,(double)jiQi.zCoord);
}
return new Object[]{returnArray};
}
throw new Exception(""String_Node_Str"");
}","@Override public Object[] callMethod(IComputerAccess computer,int method,Object[] arguments) throws Exception {
  if (this.wattsReceived < this.getRequest().getWatts()) {
    throw new Exception(""String_Node_Str"");
  }
  HashMap<String,Double> returnArray=new HashMap();
  int count=0;
switch (method) {
case 0:
    List<Entity> entities=RadarRegistry.getEntitiesWithinRadius(new Vector3(this).toVector2(),this.alarmBanJing);
  for (  Entity entity : entities) {
    returnArray.put(""String_Node_Str"" + count,entity.posX);
    returnArray.put(""String_Node_Str"" + count,entity.posY);
    returnArray.put(""String_Node_Str"" + count,entity.posZ);
  }
return new Object[]{returnArray};
case 1:
for (TileEntity jiQi : RadarRegistry.getTileEntitiesInArea(new Vector2(this.xCoord - TLeiDaTai.MAX_BIAN_JING,this.zCoord - TLeiDaTai.MAX_BIAN_JING),new Vector2(this.xCoord + TLeiDaTai.MAX_BIAN_JING,this.zCoord + TLeiDaTai.MAX_BIAN_JING))) {
returnArray.put(""String_Node_Str"" + count,(double)jiQi.xCoord);
returnArray.put(""String_Node_Str"" + count,(double)jiQi.yCoord);
returnArray.put(""String_Node_Str"" + count,(double)jiQi.zCoord);
}
return new Object[]{returnArray};
}
throw new Exception(""String_Node_Str"");
}",0.9800081599347206
169962,"@Override public Packet getDescriptionPacket(){
  double sendDian=this.wattsReceived;
  if (sendDian > 0) {
    sendDian=this.getRequest().getWatts();
  }
  return PacketManager.getPacket(ZhuYaoZhaPin.CHANNEL,this,4,sendDian,this.disabledTicks);
}","@Override public Packet getDescriptionPacket(){
  return PacketManager.getPacket(ZhuYaoZhaPin.CHANNEL,this,4,this.wattsReceived,this.disabledTicks);
}",0.6801007556675063
169963,"@Override public void updateEntity(){
  super.updateEntity();
  try {
    if (!this.worldObj.isRemote) {
      if (this.ticks % 40 == 0) {
        PacketManager.sendPacketToClients(this.getDescriptionPacket(),this.worldObj,new Vector3(this),35);
      }
 else       if (this.ticks % 3 == 0) {
        for (        EntityPlayer wanJia : this.yongZhe) {
          PacketDispatcher.sendPacketToPlayer(this.getDescriptionPacket2(),(Player)wanJia);
        }
      }
    }
    if (!this.isDisabled()) {
      if (this.wattsReceived >= this.getRequest().getWatts()) {
        this.xuanZhuan+=0.05F;
        if (this.xuanZhuan > 360)         this.xuanZhuan=0;
        if (!this.worldObj.isRemote) {
          this.wattsReceived-=this.getRequest().getWatts();
        }
        int prevShuMu=this.xunZhaoEntity.size();
        this.doScan();
        if (prevShuMu != this.xunZhaoEntity.size()) {
          this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
        }
      }
 else {
        if (this.xunZhaoEntity.size() > 0) {
          this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
        }
        this.xunZhaoEntity.clear();
        this.xunZhaoJiQi.clear();
      }
    }
    if (this.ticks % 40 == 0) {
      this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  try {
    if (!this.worldObj.isRemote) {
      if (this.ticks % 40 == 0) {
        PacketManager.sendPacketToClients(this.getDescriptionPacket(),this.worldObj,new Vector3(this),35);
      }
 else       if (this.ticks % 3 == 0) {
        for (        EntityPlayer wanJia : this.yongZhe) {
          PacketDispatcher.sendPacketToPlayer(this.getDescriptionPacket2(),(Player)wanJia);
        }
      }
    }
    if (!this.isDisabled()) {
      if (this.wattsReceived >= this.getRequest().getWatts()) {
        this.xuanZhuan+=0.05F;
        if (this.xuanZhuan > 360)         this.xuanZhuan=0;
        if (!this.worldObj.isRemote) {
          this.wattsReceived=Math.max(this.wattsReceived - this.getRequest().getWatts(),0);
        }
        int prevShuMu=this.xunZhaoEntity.size();
        this.doScan();
        if (prevShuMu != this.xunZhaoEntity.size()) {
          this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
        }
      }
 else {
        if (this.xunZhaoEntity.size() > 0) {
          this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
        }
        this.xunZhaoEntity.clear();
        this.xunZhaoJiQi.clear();
      }
    }
    if (this.ticks % 40 == 0) {
      this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9888084265964452
169964,"@Override public String getEntityName(){
  if (this.host != null) {
    return this.host.getName();
  }
  return ""String_Node_Str"";
}","@Override public String getEntityName(){
  if (this.host != null) {
    if (this.host.getPlatform() != null) {
      return this.host.getPlatform().getInvName();
    }
    return this.host.getName();
  }
  return ""String_Node_Str"";
}",0.726775956284153
169965,"@Override public void readSpawnData(ByteArrayDataInput data){
  this.controller=this.worldObj.getBlockTileEntity(data.readInt(),data.readInt(),data.readInt());
  this.shouldSit=data.readBoolean();
}","@Override public void readSpawnData(ByteArrayDataInput data){
  try {
    this.controller=this.worldObj.getBlockTileEntity(data.readInt(),data.readInt(),data.readInt());
    this.shouldSit=data.readBoolean();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8497854077253219
169966,"@Override protected boolean onFire(){
  if (!this.worldObj.isRemote) {
    if (this.getPlatform() != null) {
      if (this.target instanceof EntityLiving) {
        this.getPlatform().wattsReceived-=this.getFiringRequest();
        this.target.attackEntityFrom(TileDamageSource.doLaserDamage(this),1);
        this.target.setFire(60);
        return true;
      }
 else       if (this.target instanceof IAATarget) {
        if (this.worldObj.rand.nextFloat() > 0.2) {
          int damage=((IAATarget)this.target).doDamage(10);
          if (damage == -1 && this.worldObj.rand.nextFloat() > 0.7) {
            ((IAATarget)this.target).destroyCraft();
          }
 else           if (damage <= 0) {
            ((IAATarget)this.target).destroyCraft();
          }
        }
        return true;
      }
    }
  }
  return false;
}","@Override protected boolean onFire(){
  if (!this.worldObj.isRemote) {
    if (this.getPlatform() != null) {
      if (this.target instanceof EntityLiving) {
        this.getPlatform().wattsReceived-=this.getFiringRequest();
        this.target.attackEntityFrom(TileDamageSource.doLaserDamage(this),2);
        this.target.setFire(2);
        return true;
      }
 else       if (this.target instanceof IAATarget) {
        if (this.worldObj.rand.nextFloat() > 0.2) {
          int damage=((IAATarget)this.target).doDamage(10);
          if (damage == -1 && this.worldObj.rand.nextFloat() > 0.7) {
            ((IAATarget)this.target).destroyCraft();
          }
 else           if (damage <= 0) {
            ((IAATarget)this.target).destroyCraft();
          }
        }
        return true;
      }
    }
  }
  return false;
}",0.9969861362266426
169967,"@Override public void processCommand(ICommandSender sender,String[] args){
  try {
    EntityPlayer entityPlayer=(EntityPlayer)sender;
    int dimension=entityPlayer.worldObj.getWorldInfo().getDimension();
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      int radius=parseInt(sender,args[1]);
      if (radius > 0 && radius < 10000) {
        EntityPlayer player=(EntityPlayer)sender;
        AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(player.posX - radius,player.posY - radius,player.posZ - radius,player.posX + radius,player.posY + radius,player.posZ + radius);
        List<Entity> entitiesNearby=player.worldObj.getEntitiesWithinAABB(Entity.class,bounds);
        for (        Entity entity : entitiesNearby) {
          if (entity instanceof EFeiBlock) {
            ((EFeiBlock)entity).setBlock();
          }
 else           if (entity instanceof EZhaPin) {
            entity.setDead();
          }
        }
        sender.sendChatToPlayer(""String_Node_Str"" + radius + ""String_Node_Str"");
        return;
      }
 else {
        throw new WrongUsageException(""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
  }
  throw new WrongUsageException(this.getCommandUsage(sender));
}","@Override public void processCommand(ICommandSender sender,String[] args){
  try {
    EntityPlayer entityPlayer=(EntityPlayer)sender;
    int dimension=entityPlayer.worldObj.getWorldInfo().getDimension();
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      int radius=parseInt(sender,args[1]);
      if (radius > 0 && radius < Integer.MAX_VALUE) {
        EntityPlayer player=(EntityPlayer)sender;
        AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(player.posX - radius,player.posY - radius,player.posZ - radius,player.posX + radius,player.posY + radius,player.posZ + radius);
        List<Entity> entitiesNearby=player.worldObj.getEntitiesWithinAABB(Entity.class,bounds);
        for (        Entity entity : entitiesNearby) {
          if (entity instanceof EFeiBlock) {
            ((EFeiBlock)entity).setBlock();
          }
 else           if (entity instanceof EZhaPin) {
            entity.setDead();
          }
        }
        sender.sendChatToPlayer(""String_Node_Str"" + radius + ""String_Node_Str"");
        return;
      }
 else {
        throw new WrongUsageException(""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
  }
  throw new WrongUsageException(this.getCommandUsage(sender));
}",0.9910057236304172
169968,"@Override public void init(){
  super.init();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityGunTurret.class,new RenderGunTurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityAATurret.class,new RenderAATurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityRailTurret.class,new RenderRailgun());
  RenderingRegistry.registerEntityRenderingHandler(EntityFakeMountable.class,new RenderFakeMountable());
  RenderingRegistry.registerBlockHandler(new BlockRenderingHandler());
}","@Override public void init(){
  super.init();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityGunTurret.class,new RenderGunTurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityAATurret.class,new RenderAATurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityRailgun.class,new RenderRailgun());
  RenderingRegistry.registerEntityRenderingHandler(EntityFakeMountable.class,new RenderFakeMountable());
  RenderingRegistry.registerBlockHandler(new BlockRenderingHandler());
}",0.9911678115799804
169969,"public void init(){
  GameRegistry.registerTileEntity(TileEntityGunTurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityAATurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityRailTurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityTurretPlatform.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityMulti.class,""String_Node_Str"");
}","public void init(){
  GameRegistry.registerTileEntity(TileEntityGunTurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityAATurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityRailgun.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityTurretPlatform.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityMulti.class,""String_Node_Str"");
}",0.9892984542211652
169970,"/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override protected void drawGuiContainerForegroundLayer(int x,int y){
  this.fontRenderer.drawString(""String_Node_Str"",8,30,4210752);
  String color=""String_Node_Str"";
  if (!this.tileEntity.isDisabled() && this.tileEntity.wattsReceived >= this.tileEntity.getWattBuffer()) {
    color=""String_Node_Str"";
  }
  TileEntityTurretBase turret=this.tileEntity.getTurret(false);
  if (turret != null && turret.getFiringRequest() > 0) {
    this.fontRenderer.drawString(""String_Node_Str"",85,43,4210752);
    this.fontRenderer.drawString(color + ElectricityDisplay.getDisplayShort(Math.min(this.tileEntity.wattsReceived,turret.getFiringRequest()),ElectricUnit.JOULES) + ""String_Node_Str""+ ElectricityDisplay.getDisplayShort(this.tileEntity.getTurret(false).getFiringRequest(),ElectricUnit.JOULES),87,53,4210752);
  }
  this.fontRenderer.drawString(""String_Node_Str"",87,66,4210752);
  super.drawGuiContainerForegroundLayer(x,y);
}","/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override protected void drawGuiContainerForegroundLayer(int x,int y){
  this.fontRenderer.drawString(""String_Node_Str"",8,30,4210752);
  TileEntityTurretBase turret=this.tileEntity.getTurret(false);
  if (turret != null && turret.getFiringRequest() > 0) {
    String color=""String_Node_Str"";
    if (!this.tileEntity.isDisabled() && this.tileEntity.wattsReceived >= turret.getFiringRequest()) {
      color=""String_Node_Str"";
    }
    this.fontRenderer.drawString(""String_Node_Str"",85,43,4210752);
    this.fontRenderer.drawString(color + ElectricityDisplay.getDisplayShort(Math.min(this.tileEntity.wattsReceived,turret.getFiringRequest()),ElectricUnit.JOULES) + ""String_Node_Str""+ ElectricityDisplay.getDisplayShort(this.tileEntity.getTurret(false).getFiringRequest(),ElectricUnit.JOULES),87,53,4210752);
  }
  this.fontRenderer.drawString(""String_Node_Str"",87,66,4210752);
  super.drawGuiContainerForegroundLayer(x,y);
}",0.7964601769911505
169971,"@Override public ElectricityPack getRequest(){
  if (this.getTurret(false) != null) {
    if (this.wattsReceived < this.getTurret(false).getFiringRequest()) {
      return new ElectricityPack(Math.max(turret.getRunningRequest() / this.getTurret(false).getVoltage(),0),this.getTurret(false).getVoltage());
    }
  }
  return new ElectricityPack();
}","@Override public ElectricityPack getRequest(){
  if (this.getTurret(false) != null) {
    if (this.wattsReceived < this.getTurret(false).getFiringRequest()) {
      return new ElectricityPack(Math.max(turret.getFiringRequest() / this.getTurret(false).getVoltage(),0),this.getTurret(false).getVoltage());
    }
  }
  return new ElectricityPack();
}",0.9899280575539569
169972,"public boolean isRunning(){
  return !this.isDisabled() && (this.getTurret(false) != null && this.getTurret(false).getRunningRequest() <= this.wattsReceived || this.runPowerless);
}","public boolean isRunning(){
  return !this.isDisabled() && (this.getTurret(false) != null && this.wattsReceived >= this.getTurret(false).getFiringRequest() || this.runPowerless);
}",0.8587257617728532
169973,"@Override public void updateEntity(){
  super.updateEntity();
  if (!this.isDisabled()) {
    TileEntityTurretBase turret=this.getTurret(false);
    if (this.isRunning() && turret != null) {
      this.wattsReceived-=turret.getRunningRequest();
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
}",0.3949843260188088
169974,"/** 
 * if a sentry is spawned above the stand it is removed
 * @return 
 */
public boolean destroyTurret(){
  TileEntity ent=this.worldObj.getBlockTileEntity(this.xCoord + deployDirection.offsetX,this.yCoord + deployDirection.offsetY,this.zCoord + deployDirection.offsetZ);
  if (ent instanceof TileEntityTurretBase) {
    this.turret=null;
    return ((TileEntityTurretBase)ent).destroy(false);
  }
  return false;
}","/** 
 * if a sentry is spawned above the stand it is removed
 * @return
 */
public boolean destroyTurret(){
  TileEntity ent=this.worldObj.getBlockTileEntity(this.xCoord + deployDirection.offsetX,this.yCoord + deployDirection.offsetY,this.zCoord + deployDirection.offsetZ);
  if (ent instanceof TileEntityTurretBase) {
    this.turret=null;
    return ((TileEntityTurretBase)ent).destroy(false);
  }
  return false;
}",0.9988023952095808
169975,"@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileEntityRailTurret) {
    TileEntityRailTurret tileEntity=(TileEntityRailTurret)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5F,(float)y + 2.2F,(float)z + 0.5F);
    GL11.glScalef(1.5f,1.5f,1.5f);
    this.bindTextureByName(ZhuYaoBase.MODEL_PATH + TEXTURE_FILE);
    GL11.glRotatef(180F,0F,0F,1F);
    GL11.glRotatef(180F,0F,1F,0F);
    MODEL.render(tileEntity.currentRotationYaw,tileEntity.currentRotationPitch,0.0625F);
    GL11.glPopMatrix();
  }
}","@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileEntityRailgun) {
    TileEntityRailgun tileEntity=(TileEntityRailgun)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5F,(float)y + 2.2F,(float)z + 0.5F);
    GL11.glScalef(1.5f,1.5f,1.5f);
    this.bindTextureByName(ZhuYaoBase.MODEL_PATH + TEXTURE_FILE);
    GL11.glRotatef(180F,0F,0F,1F);
    GL11.glRotatef(180F,0F,1F,0F);
    MODEL.render(tileEntity.currentRotationYaw,tileEntity.currentRotationPitch,0.0625F);
    GL11.glPopMatrix();
  }
}",0.9780666125101544
169976,"@Override public void init(){
  super.init();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityGunTurret.class,new RenderGunTurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityAATurret.class,new RenderAATurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityRailgun.class,new RenderRailgun());
  RenderingRegistry.registerEntityRenderingHandler(EntityFakeMountable.class,new RenderFakeMountable());
  RenderingRegistry.registerBlockHandler(new BlockRenderingHandler());
}","@Override public void init(){
  super.init();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityGunTurret.class,new RenderGunTurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityAATurret.class,new RenderAATurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TCiGuiPao.class,new RenderRailgun());
  RenderingRegistry.registerEntityRenderingHandler(EntityFakeMountable.class,new RenderFakeMountable());
  RenderingRegistry.registerBlockHandler(new BlockRenderingHandler());
}",0.9761904761904762
169977,"public void init(){
  GameRegistry.registerTileEntity(TileEntityGunTurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityAATurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityRailgun.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TPaoDaiZhan.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityMulti.class,""String_Node_Str"");
}","public void init(){
  GameRegistry.registerTileEntity(TileEntityGunTurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityAATurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TCiGuiPao.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TPaoDaiZhan.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityMulti.class,""String_Node_Str"");
}",0.9701492537313432
169978,"@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  NBTTagList var2=nbt.getTagList(""String_Node_Str"");
  this.containingItems=new ItemStack[this.getSizeInventory()];
  for (int var3=0; var3 < var2.tagCount(); ++var3) {
    NBTTagCompound var4=(NBTTagCompound)var2.tagAt(var3);
    byte var5=var4.getByte(""String_Node_Str"");
    if (var5 >= 0 && var5 < this.containingItems.length) {
      this.containingItems[var5]=ItemStack.loadItemStackFromNBT(var4);
    }
  }
}","@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  this.wattsReceived=nbt.getDouble(""String_Node_Str"");
  NBTTagList var2=nbt.getTagList(""String_Node_Str"");
  this.containingItems=new ItemStack[this.getSizeInventory()];
  for (int var3=0; var3 < var2.tagCount(); ++var3) {
    NBTTagCompound var4=(NBTTagCompound)var2.tagAt(var3);
    byte var5=var4.getByte(""String_Node_Str"");
    if (var5 >= 0 && var5 < this.containingItems.length) {
      this.containingItems[var5]=ItemStack.loadItemStackFromNBT(var4);
    }
  }
}",0.9474689589302768
169979,"@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  NBTTagList itemTag=new NBTTagList();
  for (int slots=0; slots < this.containingItems.length; ++slots) {
    if (this.containingItems[slots] != null) {
      NBTTagCompound itemNbtData=new NBTTagCompound();
      itemNbtData.setByte(""String_Node_Str"",(byte)slots);
      this.containingItems[slots].writeToNBT(itemNbtData);
      itemTag.appendTag(itemNbtData);
    }
  }
  nbt.setTag(""String_Node_Str"",itemTag);
}","@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  nbt.setDouble(""String_Node_Str"",this.wattsReceived);
  NBTTagList itemTag=new NBTTagList();
  for (int slots=0; slots < this.containingItems.length; ++slots) {
    if (this.containingItems[slots] != null) {
      NBTTagCompound itemNbtData=new NBTTagCompound();
      itemNbtData.setByte(""String_Node_Str"",(byte)slots);
      this.containingItems[slots].writeToNBT(itemNbtData);
      itemTag.appendTag(itemNbtData);
    }
  }
  nbt.setTag(""String_Node_Str"",itemTag);
}",0.9473684210526316
169980,"@Override public void onReceive(ElectricityPack electricityPack){
  if (UniversalElectricity.isVoltageSensitive) {
    if (electricityPack.voltage > this.getVoltage()) {
      TPaoDaiBase turret=this.getTurret(false);
      if (turret != null && turret instanceof IHealthTile) {
        ((IHealthTile)this.turret).onDamageTaken(CustomDamageSource.electrocution,Integer.MAX_VALUE);
      }
      return;
    }
  }
  this.prevWatts=this.wattsReceived;
  this.wattsReceived=Math.min(this.wattsReceived + electricityPack.getWatts(),this.getWattBuffer());
  if ((this.prevWatts <= this.getRequest().getWatts() && this.wattsReceived >= this.getRequest().getWatts()) && !(this.prevWatts == this.wattsReceived)) {
    this.worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
  }
}","@Override public void onReceive(ElectricityPack electricityPack){
  if (UniversalElectricity.isVoltageSensitive) {
    if (electricityPack.voltage > this.getVoltage()) {
      TPaoDaiBase turret=this.getTurret(false);
      if (turret != null && turret instanceof IHealthTile) {
        ((IHealthTile)this.turret).onDamageTaken(CustomDamageSource.electrocution,Integer.MAX_VALUE);
      }
      return;
    }
  }
  this.wattsReceived=Math.min(this.wattsReceived + electricityPack.getWatts(),this.getWattBuffer());
  if ((this.prevWatts <= this.getRequest().getWatts() && this.wattsReceived >= this.getRequest().getWatts()) && !(this.prevWatts == this.wattsReceived)) {
    this.worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
  }
}",0.9758957654723128
169981,"@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileEntityRailgun) {
    TileEntityRailgun tileEntity=(TileEntityRailgun)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5F,(float)y + 2.2F,(float)z + 0.5F);
    GL11.glScalef(1.5f,1.5f,1.5f);
    this.bindTextureByName(ZhuYaoBase.MODEL_PATH + TEXTURE_FILE);
    GL11.glRotatef(180F,0F,0F,1F);
    GL11.glRotatef(180F,0F,1F,0F);
    MODEL.render(tileEntity.currentRotationYaw,tileEntity.currentRotationPitch,0.0625F);
    GL11.glPopMatrix();
  }
}","@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TCiGuiPao) {
    TCiGuiPao tileEntity=(TCiGuiPao)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5F,(float)y + 2.2F,(float)z + 0.5F);
    GL11.glScalef(1.5f,1.5f,1.5f);
    this.bindTextureByName(ZhuYaoBase.MODEL_PATH + TEXTURE_FILE);
    GL11.glRotatef(180F,0F,0F,1F);
    GL11.glRotatef(180F,0F,1F,0F);
    MODEL.render(tileEntity.currentRotationYaw,tileEntity.currentRotationPitch,0.0625F);
    GL11.glPopMatrix();
  }
}",0.9398998330550918
169982,"/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override protected void drawGuiContainerForegroundLayer(int x,int y){
  this.fontRenderer.drawString(""String_Node_Str"",8,30,4210752);
  TPaoDaiBase turret=this.tileEntity.getTurret(false);
  if (turret != null && turret.getFiringRequest() > 0) {
    String color=""String_Node_Str"";
    if (!this.tileEntity.isDisabled() && this.tileEntity.wattsReceived >= turret.getFiringRequest()) {
      color=""String_Node_Str"";
    }
    this.fontRenderer.drawString(""String_Node_Str"",85,43,4210752);
    this.fontRenderer.drawString(color + ElectricityDisplay.getDisplayShort(Math.min(this.tileEntity.wattsReceived,turret.getFiringRequest()),ElectricUnit.JOULES) + ""String_Node_Str""+ ElectricityDisplay.getDisplayShort(this.tileEntity.getTurret(false).getFiringRequest(),ElectricUnit.JOULES),87,53,4210752);
  }
  this.fontRenderer.drawString(""String_Node_Str"",87,66,4210752);
  super.drawGuiContainerForegroundLayer(x,y);
}","/** 
 * Draw the foreground layer for the GuiContainer (everything in front of the items) 
 */
@Override protected void drawGuiContainerForegroundLayer(int x,int y){
  this.fontRenderer.drawString(""String_Node_Str"",8,30,4210752);
  TPaoDaiBase turret=this.tileEntity.getTurret(false);
  if (turret != null && turret.getFiringRequest() > 0) {
    String color=""String_Node_Str"";
    if (this.tileEntity.isRunning()) {
      color=""String_Node_Str"";
    }
    this.fontRenderer.drawString(""String_Node_Str"",85,43,4210752);
    this.fontRenderer.drawString(color + ElectricityDisplay.getDisplayShort(Math.min(this.tileEntity.wattsReceived,turret.getFiringRequest()),ElectricUnit.JOULES) + ""String_Node_Str""+ ElectricityDisplay.getDisplayShort(this.tileEntity.getTurret(false).getFiringRequest(),ElectricUnit.JOULES),87,53,4210752);
  }
  this.fontRenderer.drawString(""String_Node_Str"",87,66,4210752);
  super.drawGuiContainerForegroundLayer(x,y);
}",0.9611054247697032
169983,"public TileEntityAATurret(){
  this.targetAir=true;
  this.baseTargetRange=60;
  this.maxTargetRange=200;
  this.idleRtSpeed=4f;
  this.targetRtSpeed=10f;
  this.maxHeat=600;
  this.minFiringDelay=1;
  this.baseFiringDelay=3;
}","public TileEntityAATurret(){
  this.targetAir=true;
  this.baseTargetRange=60;
  this.maxTargetRange=200;
  this.idleRtSpeed=4f;
  this.targetRtSpeed=10f;
  this.minFiringDelay=1;
  this.baseFiringDelay=3;
}",0.9539170506912442
169984,"@Override public double getFiringRequest(){
  return 1;
}","@Override public double getFiringRequest(){
  return 25;
}",0.9739130434782608
169985,"public TileEntityGunTurret(){
  this.targetPlayers=true;
  this.targetHostile=true;
  this.baseTargetRange=20;
  this.maxTargetRange=90;
  this.idleRtSpeed=2f;
  this.targetRtSpeed=4f;
  this.maxHeat=400;
  this.baseFiringDelay=10;
  this.minFiringDelay=5;
}","public TileEntityGunTurret(){
  this.targetPlayers=true;
  this.targetHostile=true;
  this.baseTargetRange=20;
  this.maxTargetRange=90;
  this.idleRtSpeed=2f;
  this.targetRtSpeed=4f;
  this.baseFiringDelay=10;
  this.minFiringDelay=5;
}",0.9596774193548387
169986,"public TileEntityLaserTurret(){
  this.targetPlayers=true;
  this.targetHostile=true;
  this.baseTargetRange=30;
  this.maxTargetRange=90;
  this.idleRtSpeed=3f;
  this.targetRtSpeed=6f;
  this.maxHeat=1000;
  this.baseFiringDelay=20;
  this.minFiringDelay=10;
}","public TileEntityLaserTurret(){
  this.targetPlayers=true;
  this.targetHostile=true;
  this.baseTargetRange=30;
  this.maxTargetRange=90;
  this.idleRtSpeed=3f;
  this.targetRtSpeed=6f;
  this.baseFiringDelay=20;
  this.minFiringDelay=10;
}",0.7992047713717694
169987,"@Override public void init(){
  super.init();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityGunTurret.class,new RenderGunTurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityAATurret.class,new RenderAATurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TCiGuiPao.class,new RenderRailgun());
  RenderingRegistry.registerEntityRenderingHandler(EntityFakeMountable.class,new RenderFakeMountable());
  RenderingRegistry.registerBlockHandler(new BlockRenderingHandler());
}","@Override public void init(){
  super.init();
  ClientRegistry.bindTileEntitySpecialRenderer(TQiang.class,new RenderGunTurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TFanKong.class,new RenderAATurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TCiGuiPao.class,new RCiGuiPao());
  RenderingRegistry.registerEntityRenderingHandler(EJia.class,new REJia());
  RenderingRegistry.registerBlockHandler(new BlockRenderingHandler());
}",0.847457627118644
169988,"public void init(){
  GameRegistry.registerTileEntity(TileEntityGunTurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityAATurret.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TCiGuiPao.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TPaoDaiZhan.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityMulti.class,""String_Node_Str"");
}","public void init(){
  GameRegistry.registerTileEntity(TQiang.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TFanKong.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TCiGuiPao.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TPaoDaiZhan.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityMulti.class,""String_Node_Str"");
}",0.7787839586028461
169989,"@Override @PreInit public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  NetworkRegistry.instance().registerGuiHandler(this,ZhuYaoGangShao.proxy);
  MinecraftForge.EVENT_BUS.register(this);
  ZhuYaoBase.CONFIGURATION.load();
  blockTurret=new BlockTurret(BLOCK_ID_PREFIX);
  blockPlatform=new BlockTurretPlatform(BLOCK_ID_PREFIX + 1);
  itemAmmo=new ItemAmmo(ITEM_ID_PREFIX + 1);
  itemUpgrades=new ItPaoTaiUpgrades(ITEM_ID_PREFIX + 2);
  ZhuYaoBase.CONFIGURATION.save();
  bulletShell=new ItemStack(itemAmmo,1,0);
  conventionalBullet=new ItemStack(itemAmmo,1,1);
  railgunBullet=new ItemStack(itemAmmo,1,2);
  antimatterBullet=new ItemStack(itemAmmo,1,3);
  GameRegistry.registerBlock(blockTurret,ItemBlockTurret.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockPlatform,""String_Node_Str"");
  EntityRegistry.registerGlobalEntityID(EntityFakeMountable.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityFakeMountable.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,this,50,5,true);
  EntityRegistry.registerGlobalEntityID(EntityTileDamage.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityTileDamage.class,""String_Node_Str"",ENTITY_ID_PREFIX + 8,this,50,5,true);
  ICBMTab.itemStack=new ItemStack(blockTurret);
  proxy.preInit();
}","@Override @PreInit public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  NetworkRegistry.instance().registerGuiHandler(this,ZhuYaoGangShao.proxy);
  MinecraftForge.EVENT_BUS.register(this);
  ZhuYaoBase.CONFIGURATION.load();
  blockTurret=new BlockTurret(BLOCK_ID_PREFIX);
  blockPlatform=new BlockTurretPlatform(BLOCK_ID_PREFIX + 1);
  itemAmmo=new ItemAmmo(ITEM_ID_PREFIX + 1);
  itemUpgrades=new ItPaoTaiUpgrades(ITEM_ID_PREFIX + 2);
  ZhuYaoBase.CONFIGURATION.save();
  bulletShell=new ItemStack(itemAmmo,1,0);
  conventionalBullet=new ItemStack(itemAmmo,1,1);
  railgunBullet=new ItemStack(itemAmmo,1,2);
  antimatterBullet=new ItemStack(itemAmmo,1,3);
  GameRegistry.registerBlock(blockTurret,ItemBlockTurret.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockPlatform,""String_Node_Str"");
  EntityRegistry.registerGlobalEntityID(EJia.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EJia.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,this,50,5,true);
  EntityRegistry.registerGlobalEntityID(EntityTileDamage.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityTileDamage.class,""String_Node_Str"",ENTITY_ID_PREFIX + 8,this,50,5,true);
  ICBMTab.itemStack=new ItemStack(blockTurret);
  proxy.preInit();
}",0.9092904169714704
169990,"public boolean useAmmunition(ItemStack ammoStack){
  if (ammoStack != null) {
    for (int i=0; i < TPaoDaiZhan.UPGRADE_START_INDEX; i++) {
      ItemStack itemStack=this.containingItems[i];
      if (itemStack != null) {
        if (itemStack.isItemEqual(ammoStack)) {
          itemStack.stackSize--;
          if (itemStack.stackSize <= 0) {
            itemStack=null;
          }
          this.setInventorySlotContents(i,itemStack);
          return true;
        }
      }
    }
  }
  return false;
}","public boolean useAmmunition(ItemStack ammoStack){
  if (ammoStack != null) {
    if (ammoStack.getItemDamage() == AmmoType.BULLETINF.ordinal()) {
      return true;
    }
    for (int i=0; i < TPaoDaiZhan.UPGRADE_START_INDEX; i++) {
      ItemStack itemStack=this.containingItems[i];
      if (itemStack != null) {
        if (itemStack.isItemEqual(ammoStack)) {
          itemStack.stackSize--;
          if (itemStack.stackSize <= 0) {
            itemStack=null;
          }
          this.setInventorySlotContents(i,itemStack);
          return true;
        }
      }
    }
  }
  return false;
}",0.9151624548736462
169991,"@Override public void renderInventoryBlock(Block block,int metadata,int modelID,RenderBlocks renderer){
  if (modelID == ID) {
    GL11.glPushMatrix();
    if (metadata == TurretType.GUN.ordinal()) {
      GL11.glTranslatef(0.1f,1f,0f);
      GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(ZhuYaoBase.MODEL_PATH + RenderGunTurret.TEXTURE_FILE));
      RenderGunTurret.render(0,0);
    }
 else     if (metadata == TurretType.AA.ordinal()) {
      GL11.glTranslatef(0.2f,0.3f,0);
      GL11.glScalef(0.45f,0.45f,0.45f);
      GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(ZhuYaoBase.MODEL_PATH + RenderAATurret.TEXTURE_FILE));
      RenderAATurret.render(0,0);
    }
 else     if (metadata == TurretType.RAILGUN.ordinal()) {
      GL11.glTranslatef(0f,0.9f,0f);
      GL11.glRotatef(180f,0f,0f,1f);
      GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(ZhuYaoBase.MODEL_PATH + RenderRailgun.TEXTURE_FILE));
      RenderRailgun.MODEL.render(90,0,0.0625F);
    }
    GL11.glPopMatrix();
  }
}","@Override public void renderInventoryBlock(Block block,int metadata,int modelID,RenderBlocks renderer){
  if (modelID == ID) {
    GL11.glPushMatrix();
    if (metadata == TurretType.GUN.ordinal()) {
      GL11.glTranslatef(0.1f,1f,0f);
      GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(ZhuYaoBase.MODEL_PATH + RenderGunTurret.TEXTURE_FILE));
      RenderGunTurret.render(0,0);
    }
 else     if (metadata == TurretType.AA.ordinal()) {
      GL11.glTranslatef(0.2f,0.3f,0);
      GL11.glScalef(0.45f,0.45f,0.45f);
      GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(ZhuYaoBase.MODEL_PATH + RenderAATurret.TEXTURE_FILE));
      RenderAATurret.render(0,0);
    }
 else     if (metadata == TurretType.RAILGUN.ordinal()) {
      GL11.glTranslatef(0f,0.9f,0f);
      GL11.glRotatef(180f,0f,0f,1f);
      GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(ZhuYaoBase.MODEL_PATH + RCiGuiPao.TEXTURE_FILE));
      RCiGuiPao.MODEL.render(90,0,0.0625F);
    }
    GL11.glPopMatrix();
  }
}",0.9825935596170584
169992,"public static void render(float renderYaw,float renderPitch){
  GL11.glRotatef(180F,0F,0F,1F);
  GL11.glRotatef(180F,0F,1F,0F);
  GL11.glRotatef(renderYaw,0F,1F,0F);
  MODEL.renderBody(0.0625F);
  MODEL.renderRadar(0.0625F);
  renderPitch=(float)Math.toRadians(renderPitch);
  if (renderPitch <= 0.8F && renderPitch >= -1.5F && renderPitch != 0) {
    MODEL.renderCannon(0.0625F,renderPitch);
  }
 else {
    MODEL.renderCannon(0.0625F,-0.6F);
  }
}","public static void render(float renderYaw,float renderPitch){
  GL11.glRotatef(180F,0F,0F,1F);
  GL11.glRotatef(180F,0F,1F,0F);
  GL11.glRotatef(renderYaw,0F,1F,0F);
  MODEL.renderBody(0.0625F);
  MODEL.renderRadar(0.0625F);
  MODEL.renderCannon(0.0625F,(float)Math.toRadians(renderPitch));
}",0.7206477732793523
169993,"/** 
 * Sets the target of the sentry if it doesn't have one or was overridden
 */
public boolean setTarget(Entity target,boolean override);","/** 
 * Sets the target of the sentry if it doesn't have one or was overridden
 */
public void setTarget(Entity target);",0.9
169994,"public static TileDamageSource doLaserDamage(TPaoDaiBase tileEntity){
  return (TileDamageSource)(new TileDamageSource(""String_Node_Str"",tileEntity).setProjectile());
}","public static TileDamageSource doLaserDamage(TPaoDaiBase tileEntity){
  return (TileDamageSource)(new TileDamageSource(""String_Node_Str"",tileEntity).setDamageBypassesArmor().setProjectile());
}",0.9307479224376732
169995,"public void renderYawPitch(float f5,float rotation){
  body.render(f5);
  bodyTop.render(f5);
  bodyRight.render(f5);
  bodyLeft.render(f5);
  leftBarrel.render(f5);
  rightBarrel.render(f5);
  l1.render(f5);
  r1.render(f5);
  l2.rotateAngleZ=-rotation;
  l2.render(f5);
  l3.rotateAngleZ=-rotation;
  l3.render(f5);
  l4.rotateAngleZ=-rotation;
  l4.render(f5);
  l5.rotateAngleZ=-rotation;
  l5.render(f5);
  r2.rotateAngleZ=rotation;
  r2.render(f5);
  r3.rotateAngleZ=rotation;
  r3.render(f5);
  r4.rotateAngleZ=rotation;
  r4.render(f5);
  r5.rotateAngleZ=rotation;
  r5.render(f5);
  lCap.render(f5);
  rCap.render(f5);
  Hat.render(f5);
  LowerHat.render(f5);
  BatteryPack.render(f5);
  MiddleWire.render(f5);
  BatWire.render(f5);
  HatWire.render(f5);
  Details.render(f5);
  RightFootStrength.render(f5);
  LeftFootStrength.render(f5);
  FrontDetail.render(f5);
  LeftFootBase.render(f5);
  RightFootBase.render(f5);
  lEar1.render(f5);
  lEar2.render(f5);
  rEar1.render(f5);
  rEar2.render(f5);
}","public void renderYawPitch(float f5,float rotation){
  body.render(f5);
  bodyTop.render(f5);
  bodyRight.render(f5);
  bodyLeft.render(f5);
  leftBarrel.render(f5);
  rightBarrel.render(f5);
  l1.render(f5);
  r1.render(f5);
  l2.rotateAngleZ=-rotation;
  l2.render(f5);
  l3.rotateAngleZ=-rotation;
  l3.render(f5);
  l4.rotateAngleZ=-rotation;
  l4.render(f5);
  l5.rotateAngleZ=-rotation;
  l5.render(f5);
  r2.rotateAngleZ=rotation;
  r2.render(f5);
  r3.rotateAngleZ=rotation;
  r3.render(f5);
  r4.rotateAngleZ=rotation;
  r4.render(f5);
  r5.rotateAngleZ=rotation;
  r5.render(f5);
  lCap.render(f5);
  rCap.render(f5);
  Hat.render(f5);
  LowerHat.render(f5);
  BatteryPack.render(f5);
  MiddleWire.render(f5);
  BatWire.render(f5);
  HatWire.render(f5);
  lEar1.render(f5);
  lEar2.render(f5);
  rEar1.render(f5);
  rEar2.render(f5);
}",0.9105603448275862
169996,"public void renderYaw(float f5){
  basePlate.render(f5);
  leftMount.render(f5);
  rightMount.render(f5);
}","public void renderYaw(float f5){
  basePlate.render(f5);
  leftMount.render(f5);
  rightMount.render(f5);
  Details.render(f5);
  FrontDetail.render(f5);
  RightFootStrength.render(f5);
  LeftFootStrength.render(f5);
  LeftFootBase.render(f5);
  RightFootBase.render(f5);
}",0.5631578947368421
169997,"public boolean canEntityBeSeen(Entity entity){
  return this.canEntityBeSeen(Vector3.add(new Vector3(entity),new Vector3(0,entity.getEyeHeight(),0)));
}","public boolean canEntityBeSeen(Entity entity){
  Vector3 target=Vector3.add(new Vector3(entity),new Vector3(0,entity.getEyeHeight(),0));
  return this.canPositionBeSeen(target);
}",0.7673716012084593
169998,"@Override protected boolean onUpdateTask(){
  super.onUpdateTask();
  if (this.tileEntity instanceof IAutoSentry) {
    if (!this.tileEntity.isValidTarget(this.tileEntity.getTarget())) {
      this.tileEntity.setTarget(null,true);
      this.tileEntity.cancelRotation();
      return false;
    }
 else     if (this.tileEntity.canActivateWeapon()) {
      this.tileEntity.onWeaponActivated();
    }
 else {
      float[] rotations=this.tileEntity.lookHelper.getDeltaRotations(this.tileEntity.getTargetPosition());
      this.tileEntity.rotateTo(rotations[0],rotations[1]);
    }
  }
  return true;
}","@Override protected boolean onUpdateTask(){
  super.onUpdateTask();
  if (this.tileEntity instanceof IAutoSentry) {
    if (!this.tileEntity.isValidTarget(this.tileEntity.getTarget())) {
      this.tileEntity.setTarget(null);
      this.tileEntity.cancelRotation();
      return false;
    }
 else     if (this.tileEntity.canActivateWeapon()) {
      this.tileEntity.onWeaponActivated();
    }
 else {
      float[] rotations=this.tileEntity.lookHelper.getDeltaRotations(this.tileEntity.getTargetPosition());
      this.tileEntity.rotateTo(rotations[0],rotations[1]);
    }
  }
  return true;
}",0.9958088851634534
169999,"@SuppressWarnings(""String_Node_Str"") @Override protected boolean onUpdateTask(){
  super.onUpdateTask();
  if (this.tileEntity instanceof IAutoSentry) {
    IAutoSentry sentry=this.tileEntity;
    if (sentry.getTarget() == null || !sentry.isValidTarget(sentry.getTarget())) {
      AxisAlignedBB bounds=sentry.getTargetingBox();
      List<Entity> entities=this.tileEntity.worldObj.getEntitiesWithinAABB(Entity.class,bounds);
      Entity currentTarget=null;
      for (      Entity entity : entities) {
        if (entity instanceof EntityPlayer) {
          EntityPlayer player=(EntityPlayer)entity;
          AccessLevel level=this.tileEntity.getPlatform().getUserAccess(player.username);
          if (level.ordinal() >= AccessLevel.USER.ordinal()) {
            if (player.getLastAttackingEntity() != null) {
              if (sentry.isValidTarget(player.getLastAttackingEntity()) && !player.getLastAttackingEntity().isDead) {
                currentTarget=player.getLastAttackingEntity();
                break;
              }
            }
          }
        }
      }
      if (currentTarget == null) {
        double smallestDis=sentry.getDetectRange();
        for (        Entity entity : entities) {
          double distance=entity.getDistance(this.tileEntity.xCoord,this.tileEntity.yCoord,this.tileEntity.zCoord);
          if (sentry.isValidTarget(entity) && distance < smallestDis) {
            currentTarget=entity;
            smallestDis=distance;
          }
        }
      }
      if (currentTarget != null) {
        this.tileEntity.cancelRotation();
        this.taskManager.addTask(new TaskKillTarget());
        sentry.setTarget(currentTarget,true);
        return false;
      }
 else       if (this.tileEntity.lastRotateTick > this.world.rand.nextInt(30) + 10) {
        this.tileEntity.rotateTo(this.world.rand.nextInt(360) - 180,this.world.rand.nextInt(30) - 10);
      }
      return true;
    }
 else {
      this.taskManager.addTask(new TaskKillTarget());
    }
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") @Override protected boolean onUpdateTask(){
  super.onUpdateTask();
  if (this.tileEntity instanceof IAutoSentry) {
    IAutoSentry sentry=this.tileEntity;
    if (sentry.getTarget() == null || !sentry.isValidTarget(sentry.getTarget())) {
      AxisAlignedBB bounds=sentry.getTargetingBox();
      List<Entity> entities=this.tileEntity.worldObj.getEntitiesWithinAABB(Entity.class,bounds);
      Entity currentTarget=null;
      for (      Entity entity : entities) {
        if (entity instanceof EntityPlayer) {
          EntityPlayer player=(EntityPlayer)entity;
          AccessLevel level=this.tileEntity.getPlatform().getUserAccess(player.username);
          if (level.ordinal() >= AccessLevel.USER.ordinal()) {
            if (player.getLastAttackingEntity() != null) {
              if (sentry.isValidTarget(player.getLastAttackingEntity()) && !player.getLastAttackingEntity().isDead) {
                currentTarget=player.getLastAttackingEntity();
                break;
              }
            }
          }
        }
      }
      if (currentTarget == null) {
        double smallestDis=sentry.getDetectRange();
        for (        Entity entity : entities) {
          final double distance=this.tileEntity.getCenter().distanceTo(new Vector3(entity));
          if (sentry.isValidTarget(entity) && distance <= smallestDis) {
            currentTarget=entity;
            smallestDis=distance;
          }
        }
      }
      if (currentTarget != null) {
        this.tileEntity.cancelRotation();
        this.taskManager.addTask(new TaskKillTarget());
        sentry.setTarget(currentTarget);
        return false;
      }
 else       if (this.tileEntity.lastRotateTick > this.world.rand.nextInt(30) + 10) {
        this.tileEntity.rotateTo(this.world.rand.nextInt(360) - 180,this.world.rand.nextInt(30) - 10);
      }
      return true;
    }
 else {
      this.taskManager.addTask(new TaskKillTarget());
    }
  }
  return false;
}",0.9693343305908751
170000,"public boolean canUserAccess(String username){
  return (this.getUserAccess(username).ordinal() > AccessLevel.BASIC.ordinal());
}","public boolean canUserAccess(String username){
  return (this.getUserAccess(username).ordinal() >= AccessLevel.USER.ordinal());
}",0.9689922480620154
