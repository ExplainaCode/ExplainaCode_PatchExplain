record_number,buggy_code,fixed_code,code_similarity
24001,"protected void parseOrganizationProperties(JsonObject json,Organization res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getIdentifier().add(parseIdentifier(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setActiveElement(parseBoolean(json.get(""String_Node_Str"").getAsBoolean()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getActiveElement());
  if (json.has(""String_Node_Str""))   res.setType(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setNameElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getNameElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getTelecom().add(parseContactPoint(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getAddress().add(parseAddress(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setPartOf(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContact().add(parseOrganizationOrganizationContactComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
}","protected void parseOrganizationProperties(JsonObject json,Organization res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getIdentifier().add(parseIdentifier(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setActiveElement(parseBoolean(json.get(""String_Node_Str"").getAsBoolean()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getActiveElement());
  if (json.has(""String_Node_Str""))   res.setType(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setNameElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getNameElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getTelecom().add(parseContactPoint(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getAddress().add(parseAddress(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setPartOf(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContact().add(parseOrganizationOrganizationContactComponent(array.get(i).getAsJsonObject(),res));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getEndpoint().add(parseReference(array.get(i).getAsJsonObject()));
    }
  }
  ;
}",0.940294649780305
24002,"protected void composeEndpointInner(Endpoint element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasStatusElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getStatusElement(),new Endpoint.EndpointStatusEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getStatusElement(),new Endpoint.EndpointStatusEnumFactory(),false);
  }
  if (element.hasManagingOrganization()) {
    composeReference(""String_Node_Str"",element.getManagingOrganization());
  }
  if (element.hasContact()) {
    openArray(""String_Node_Str"");
    for (    ContactPoint e : element.getContact())     composeContactPoint(null,e);
    closeArray();
  }
  ;
  if (element.hasConnectionTypeElement()) {
    composeCodeCore(""String_Node_Str"",element.getConnectionTypeElement(),false);
    composeCodeExtras(""String_Node_Str"",element.getConnectionTypeElement(),false);
  }
  if (element.hasMethod()) {
    openArray(""String_Node_Str"");
    for (    Coding e : element.getMethod())     composeCoding(null,e);
    closeArray();
  }
  ;
  if (element.hasPeriod()) {
    composePeriod(""String_Node_Str"",element.getPeriod());
  }
  if (element.hasAddress()) {
    composeType(""String_Node_Str"",element.getAddress());
  }
  if (element.hasPayloadFormatElement()) {
    composeStringCore(""String_Node_Str"",element.getPayloadFormatElement(),false);
    composeStringExtras(""String_Node_Str"",element.getPayloadFormatElement(),false);
  }
  if (element.hasPayloadType()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getPayloadType())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasHeader()) {
    openArray(""String_Node_Str"");
    for (    StringType e : element.getHeader())     composeStringCore(null,e,true);
    closeArray();
    if (anyHasExtras(element.getHeader())) {
      openArray(""String_Node_Str"");
      for (      StringType e : element.getHeader())       composeStringExtras(null,e,true);
      closeArray();
    }
  }
  ;
  if (element.hasPublicKeyElement()) {
    composeStringCore(""String_Node_Str"",element.getPublicKeyElement(),false);
    composeStringExtras(""String_Node_Str"",element.getPublicKeyElement(),false);
  }
}","protected void composeEndpointInner(Endpoint element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasIdentifier()) {
    openArray(""String_Node_Str"");
    for (    Identifier e : element.getIdentifier())     composeIdentifier(null,e);
    closeArray();
  }
  ;
  if (element.hasStatusElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getStatusElement(),new Endpoint.EndpointStatusEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getStatusElement(),new Endpoint.EndpointStatusEnumFactory(),false);
  }
  if (element.hasManagingOrganization()) {
    composeReference(""String_Node_Str"",element.getManagingOrganization());
  }
  if (element.hasContact()) {
    openArray(""String_Node_Str"");
    for (    ContactPoint e : element.getContact())     composeContactPoint(null,e);
    closeArray();
  }
  ;
  if (element.hasConnectionTypeElement()) {
    composeCodeCore(""String_Node_Str"",element.getConnectionTypeElement(),false);
    composeCodeExtras(""String_Node_Str"",element.getConnectionTypeElement(),false);
  }
  if (element.hasMethod()) {
    openArray(""String_Node_Str"");
    for (    Coding e : element.getMethod())     composeCoding(null,e);
    closeArray();
  }
  ;
  if (element.hasPeriod()) {
    composePeriod(""String_Node_Str"",element.getPeriod());
  }
  if (element.hasAddress()) {
    composeType(""String_Node_Str"",element.getAddress());
  }
  if (element.hasPayloadFormatElement()) {
    composeStringCore(""String_Node_Str"",element.getPayloadFormatElement(),false);
    composeStringExtras(""String_Node_Str"",element.getPayloadFormatElement(),false);
  }
  if (element.hasPayloadType()) {
    openArray(""String_Node_Str"");
    for (    CodeableConcept e : element.getPayloadType())     composeCodeableConcept(null,e);
    closeArray();
  }
  ;
  if (element.hasHeader()) {
    openArray(""String_Node_Str"");
    for (    StringType e : element.getHeader())     composeStringCore(null,e,true);
    closeArray();
    if (anyHasExtras(element.getHeader())) {
      openArray(""String_Node_Str"");
      for (      StringType e : element.getHeader())       composeStringExtras(null,e,true);
      closeArray();
    }
  }
  ;
  if (element.hasPublicKeyElement()) {
    composeStringCore(""String_Node_Str"",element.getPublicKeyElement(),false);
    composeStringExtras(""String_Node_Str"",element.getPublicKeyElement(),false);
  }
}",0.9618452252640656
24003,"@Override protected void composeResource(Resource resource) throws IOException {
  if (resource instanceof Parameters)   composeParameters(""String_Node_Str"",(Parameters)resource);
 else   if (resource instanceof Account)   composeAccount(""String_Node_Str"",(Account)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(""String_Node_Str"",(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(""String_Node_Str"",(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(""String_Node_Str"",(AppointmentResponse)resource);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(""String_Node_Str"",(AuditEvent)resource);
 else   if (resource instanceof Basic)   composeBasic(""String_Node_Str"",(Basic)resource);
 else   if (resource instanceof Binary)   composeBinary(""String_Node_Str"",(Binary)resource);
 else   if (resource instanceof BodySite)   composeBodySite(""String_Node_Str"",(BodySite)resource);
 else   if (resource instanceof Bundle)   composeBundle(""String_Node_Str"",(Bundle)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(""String_Node_Str"",(CarePlan)resource);
 else   if (resource instanceof CareTeam)   composeCareTeam(""String_Node_Str"",(CareTeam)resource);
 else   if (resource instanceof Claim)   composeClaim(""String_Node_Str"",(Claim)resource);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(""String_Node_Str"",(ClaimResponse)resource);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(""String_Node_Str"",(ClinicalImpression)resource);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(""String_Node_Str"",(CodeSystem)resource);
 else   if (resource instanceof Communication)   composeCommunication(""String_Node_Str"",(Communication)resource);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(""String_Node_Str"",(CommunicationRequest)resource);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(""String_Node_Str"",(CompartmentDefinition)resource);
 else   if (resource instanceof Composition)   composeComposition(""String_Node_Str"",(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(""String_Node_Str"",(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(""String_Node_Str"",(Condition)resource);
 else   if (resource instanceof Conformance)   composeConformance(""String_Node_Str"",(Conformance)resource);
 else   if (resource instanceof Consent)   composeConsent(""String_Node_Str"",(Consent)resource);
 else   if (resource instanceof Contract)   composeContract(""String_Node_Str"",(Contract)resource);
 else   if (resource instanceof Coverage)   composeCoverage(""String_Node_Str"",(Coverage)resource);
 else   if (resource instanceof DataElement)   composeDataElement(""String_Node_Str"",(DataElement)resource);
 else   if (resource instanceof DecisionSupportRule)   composeDecisionSupportRule(""String_Node_Str"",(DecisionSupportRule)resource);
 else   if (resource instanceof DecisionSupportServiceModule)   composeDecisionSupportServiceModule(""String_Node_Str"",(DecisionSupportServiceModule)resource);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(""String_Node_Str"",(DetectedIssue)resource);
 else   if (resource instanceof Device)   composeDevice(""String_Node_Str"",(Device)resource);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(""String_Node_Str"",(DeviceComponent)resource);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(""String_Node_Str"",(DeviceMetric)resource);
 else   if (resource instanceof DeviceUseRequest)   composeDeviceUseRequest(""String_Node_Str"",(DeviceUseRequest)resource);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(""String_Node_Str"",(DeviceUseStatement)resource);
 else   if (resource instanceof DiagnosticOrder)   composeDiagnosticOrder(""String_Node_Str"",(DiagnosticOrder)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(""String_Node_Str"",(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(""String_Node_Str"",(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(""String_Node_Str"",(DocumentReference)resource);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(""String_Node_Str"",(EligibilityRequest)resource);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(""String_Node_Str"",(EligibilityResponse)resource);
 else   if (resource instanceof Encounter)   composeEncounter(""String_Node_Str"",(Encounter)resource);
 else   if (resource instanceof Endpoint)   composeEndpoint(""String_Node_Str"",(Endpoint)resource);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(""String_Node_Str"",(EnrollmentRequest)resource);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(""String_Node_Str"",(EnrollmentResponse)resource);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(""String_Node_Str"",(EpisodeOfCare)resource);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(""String_Node_Str"",(ExpansionProfile)resource);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(""String_Node_Str"",(ExplanationOfBenefit)resource);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(""String_Node_Str"",(FamilyMemberHistory)resource);
 else   if (resource instanceof Flag)   composeFlag(""String_Node_Str"",(Flag)resource);
 else   if (resource instanceof Goal)   composeGoal(""String_Node_Str"",(Goal)resource);
 else   if (resource instanceof Group)   composeGroup(""String_Node_Str"",(Group)resource);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(""String_Node_Str"",(GuidanceResponse)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(""String_Node_Str"",(HealthcareService)resource);
 else   if (resource instanceof ImagingManifest)   composeImagingManifest(""String_Node_Str"",(ImagingManifest)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(""String_Node_Str"",(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(""String_Node_Str"",(Immunization)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(""String_Node_Str"",(ImmunizationRecommendation)resource);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(""String_Node_Str"",(ImplementationGuide)resource);
 else   if (resource instanceof Library)   composeLibrary(""String_Node_Str"",(Library)resource);
 else   if (resource instanceof Linkage)   composeLinkage(""String_Node_Str"",(Linkage)resource);
 else   if (resource instanceof ListResource)   composeListResource(""String_Node_Str"",(ListResource)resource);
 else   if (resource instanceof Location)   composeLocation(""String_Node_Str"",(Location)resource);
 else   if (resource instanceof Measure)   composeMeasure(""String_Node_Str"",(Measure)resource);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(""String_Node_Str"",(MeasureReport)resource);
 else   if (resource instanceof Media)   composeMedia(""String_Node_Str"",(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(""String_Node_Str"",(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(""String_Node_Str"",(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(""String_Node_Str"",(MedicationDispense)resource);
 else   if (resource instanceof MedicationOrder)   composeMedicationOrder(""String_Node_Str"",(MedicationOrder)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(""String_Node_Str"",(MedicationStatement)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(""String_Node_Str"",(MessageHeader)resource);
 else   if (resource instanceof ModuleDefinition)   composeModuleDefinition(""String_Node_Str"",(ModuleDefinition)resource);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(""String_Node_Str"",(NamingSystem)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(""String_Node_Str"",(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(""String_Node_Str"",(Observation)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(""String_Node_Str"",(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(""String_Node_Str"",(OperationOutcome)resource);
 else   if (resource instanceof Order)   composeOrder(""String_Node_Str"",(Order)resource);
 else   if (resource instanceof OrderResponse)   composeOrderResponse(""String_Node_Str"",(OrderResponse)resource);
 else   if (resource instanceof OrderSet)   composeOrderSet(""String_Node_Str"",(OrderSet)resource);
 else   if (resource instanceof Organization)   composeOrganization(""String_Node_Str"",(Organization)resource);
 else   if (resource instanceof Patient)   composePatient(""String_Node_Str"",(Patient)resource);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(""String_Node_Str"",(PaymentNotice)resource);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(""String_Node_Str"",(PaymentReconciliation)resource);
 else   if (resource instanceof Person)   composePerson(""String_Node_Str"",(Person)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(""String_Node_Str"",(Practitioner)resource);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(""String_Node_Str"",(PractitionerRole)resource);
 else   if (resource instanceof Procedure)   composeProcedure(""String_Node_Str"",(Procedure)resource);
 else   if (resource instanceof ProcedureRequest)   composeProcedureRequest(""String_Node_Str"",(ProcedureRequest)resource);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(""String_Node_Str"",(ProcessRequest)resource);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(""String_Node_Str"",(ProcessResponse)resource);
 else   if (resource instanceof Protocol)   composeProtocol(""String_Node_Str"",(Protocol)resource);
 else   if (resource instanceof Provenance)   composeProvenance(""String_Node_Str"",(Provenance)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(""String_Node_Str"",(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(""String_Node_Str"",(QuestionnaireResponse)resource);
 else   if (resource instanceof ReferralRequest)   composeReferralRequest(""String_Node_Str"",(ReferralRequest)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(""String_Node_Str"",(RelatedPerson)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(""String_Node_Str"",(RiskAssessment)resource);
 else   if (resource instanceof Schedule)   composeSchedule(""String_Node_Str"",(Schedule)resource);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(""String_Node_Str"",(SearchParameter)resource);
 else   if (resource instanceof Sequence)   composeSequence(""String_Node_Str"",(Sequence)resource);
 else   if (resource instanceof Slot)   composeSlot(""String_Node_Str"",(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(""String_Node_Str"",(Specimen)resource);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(""String_Node_Str"",(StructureDefinition)resource);
 else   if (resource instanceof StructureMap)   composeStructureMap(""String_Node_Str"",(StructureMap)resource);
 else   if (resource instanceof Subscription)   composeSubscription(""String_Node_Str"",(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(""String_Node_Str"",(Substance)resource);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(""String_Node_Str"",(SupplyDelivery)resource);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(""String_Node_Str"",(SupplyRequest)resource);
 else   if (resource instanceof Task)   composeTask(""String_Node_Str"",(Task)resource);
 else   if (resource instanceof TestScript)   composeTestScript(""String_Node_Str"",(TestScript)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(""String_Node_Str"",(ValueSet)resource);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(""String_Node_Str"",(VisionPrescription)resource);
 else   if (resource instanceof Binary)   composeBinary(""String_Node_Str"",(Binary)resource);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}","@Override protected void composeResource(Resource resource) throws IOException {
  if (resource instanceof Parameters)   composeParameters(""String_Node_Str"",(Parameters)resource);
 else   if (resource instanceof Account)   composeAccount(""String_Node_Str"",(Account)resource);
 else   if (resource instanceof ActivityDefinition)   composeActivityDefinition(""String_Node_Str"",(ActivityDefinition)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(""String_Node_Str"",(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(""String_Node_Str"",(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(""String_Node_Str"",(AppointmentResponse)resource);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(""String_Node_Str"",(AuditEvent)resource);
 else   if (resource instanceof Basic)   composeBasic(""String_Node_Str"",(Basic)resource);
 else   if (resource instanceof Binary)   composeBinary(""String_Node_Str"",(Binary)resource);
 else   if (resource instanceof BodySite)   composeBodySite(""String_Node_Str"",(BodySite)resource);
 else   if (resource instanceof Bundle)   composeBundle(""String_Node_Str"",(Bundle)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(""String_Node_Str"",(CarePlan)resource);
 else   if (resource instanceof CareTeam)   composeCareTeam(""String_Node_Str"",(CareTeam)resource);
 else   if (resource instanceof Claim)   composeClaim(""String_Node_Str"",(Claim)resource);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(""String_Node_Str"",(ClaimResponse)resource);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(""String_Node_Str"",(ClinicalImpression)resource);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(""String_Node_Str"",(CodeSystem)resource);
 else   if (resource instanceof Communication)   composeCommunication(""String_Node_Str"",(Communication)resource);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(""String_Node_Str"",(CommunicationRequest)resource);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(""String_Node_Str"",(CompartmentDefinition)resource);
 else   if (resource instanceof Composition)   composeComposition(""String_Node_Str"",(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(""String_Node_Str"",(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(""String_Node_Str"",(Condition)resource);
 else   if (resource instanceof Conformance)   composeConformance(""String_Node_Str"",(Conformance)resource);
 else   if (resource instanceof Consent)   composeConsent(""String_Node_Str"",(Consent)resource);
 else   if (resource instanceof Contract)   composeContract(""String_Node_Str"",(Contract)resource);
 else   if (resource instanceof Coverage)   composeCoverage(""String_Node_Str"",(Coverage)resource);
 else   if (resource instanceof DataElement)   composeDataElement(""String_Node_Str"",(DataElement)resource);
 else   if (resource instanceof DecisionSupportRule)   composeDecisionSupportRule(""String_Node_Str"",(DecisionSupportRule)resource);
 else   if (resource instanceof DecisionSupportServiceModule)   composeDecisionSupportServiceModule(""String_Node_Str"",(DecisionSupportServiceModule)resource);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(""String_Node_Str"",(DetectedIssue)resource);
 else   if (resource instanceof Device)   composeDevice(""String_Node_Str"",(Device)resource);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(""String_Node_Str"",(DeviceComponent)resource);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(""String_Node_Str"",(DeviceMetric)resource);
 else   if (resource instanceof DeviceUseRequest)   composeDeviceUseRequest(""String_Node_Str"",(DeviceUseRequest)resource);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(""String_Node_Str"",(DeviceUseStatement)resource);
 else   if (resource instanceof DiagnosticOrder)   composeDiagnosticOrder(""String_Node_Str"",(DiagnosticOrder)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(""String_Node_Str"",(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(""String_Node_Str"",(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(""String_Node_Str"",(DocumentReference)resource);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(""String_Node_Str"",(EligibilityRequest)resource);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(""String_Node_Str"",(EligibilityResponse)resource);
 else   if (resource instanceof Encounter)   composeEncounter(""String_Node_Str"",(Encounter)resource);
 else   if (resource instanceof Endpoint)   composeEndpoint(""String_Node_Str"",(Endpoint)resource);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(""String_Node_Str"",(EnrollmentRequest)resource);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(""String_Node_Str"",(EnrollmentResponse)resource);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(""String_Node_Str"",(EpisodeOfCare)resource);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(""String_Node_Str"",(ExpansionProfile)resource);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(""String_Node_Str"",(ExplanationOfBenefit)resource);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(""String_Node_Str"",(FamilyMemberHistory)resource);
 else   if (resource instanceof Flag)   composeFlag(""String_Node_Str"",(Flag)resource);
 else   if (resource instanceof Goal)   composeGoal(""String_Node_Str"",(Goal)resource);
 else   if (resource instanceof Group)   composeGroup(""String_Node_Str"",(Group)resource);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(""String_Node_Str"",(GuidanceResponse)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(""String_Node_Str"",(HealthcareService)resource);
 else   if (resource instanceof ImagingManifest)   composeImagingManifest(""String_Node_Str"",(ImagingManifest)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(""String_Node_Str"",(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(""String_Node_Str"",(Immunization)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(""String_Node_Str"",(ImmunizationRecommendation)resource);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(""String_Node_Str"",(ImplementationGuide)resource);
 else   if (resource instanceof Library)   composeLibrary(""String_Node_Str"",(Library)resource);
 else   if (resource instanceof Linkage)   composeLinkage(""String_Node_Str"",(Linkage)resource);
 else   if (resource instanceof ListResource)   composeListResource(""String_Node_Str"",(ListResource)resource);
 else   if (resource instanceof Location)   composeLocation(""String_Node_Str"",(Location)resource);
 else   if (resource instanceof Measure)   composeMeasure(""String_Node_Str"",(Measure)resource);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(""String_Node_Str"",(MeasureReport)resource);
 else   if (resource instanceof Media)   composeMedia(""String_Node_Str"",(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(""String_Node_Str"",(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(""String_Node_Str"",(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(""String_Node_Str"",(MedicationDispense)resource);
 else   if (resource instanceof MedicationOrder)   composeMedicationOrder(""String_Node_Str"",(MedicationOrder)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(""String_Node_Str"",(MedicationStatement)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(""String_Node_Str"",(MessageHeader)resource);
 else   if (resource instanceof ModuleDefinition)   composeModuleDefinition(""String_Node_Str"",(ModuleDefinition)resource);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(""String_Node_Str"",(NamingSystem)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(""String_Node_Str"",(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(""String_Node_Str"",(Observation)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(""String_Node_Str"",(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(""String_Node_Str"",(OperationOutcome)resource);
 else   if (resource instanceof Order)   composeOrder(""String_Node_Str"",(Order)resource);
 else   if (resource instanceof OrderResponse)   composeOrderResponse(""String_Node_Str"",(OrderResponse)resource);
 else   if (resource instanceof OrderSet)   composeOrderSet(""String_Node_Str"",(OrderSet)resource);
 else   if (resource instanceof Organization)   composeOrganization(""String_Node_Str"",(Organization)resource);
 else   if (resource instanceof Patient)   composePatient(""String_Node_Str"",(Patient)resource);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(""String_Node_Str"",(PaymentNotice)resource);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(""String_Node_Str"",(PaymentReconciliation)resource);
 else   if (resource instanceof Person)   composePerson(""String_Node_Str"",(Person)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(""String_Node_Str"",(Practitioner)resource);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(""String_Node_Str"",(PractitionerRole)resource);
 else   if (resource instanceof Procedure)   composeProcedure(""String_Node_Str"",(Procedure)resource);
 else   if (resource instanceof ProcedureRequest)   composeProcedureRequest(""String_Node_Str"",(ProcedureRequest)resource);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(""String_Node_Str"",(ProcessRequest)resource);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(""String_Node_Str"",(ProcessResponse)resource);
 else   if (resource instanceof Protocol)   composeProtocol(""String_Node_Str"",(Protocol)resource);
 else   if (resource instanceof Provenance)   composeProvenance(""String_Node_Str"",(Provenance)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(""String_Node_Str"",(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(""String_Node_Str"",(QuestionnaireResponse)resource);
 else   if (resource instanceof ReferralRequest)   composeReferralRequest(""String_Node_Str"",(ReferralRequest)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(""String_Node_Str"",(RelatedPerson)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(""String_Node_Str"",(RiskAssessment)resource);
 else   if (resource instanceof Schedule)   composeSchedule(""String_Node_Str"",(Schedule)resource);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(""String_Node_Str"",(SearchParameter)resource);
 else   if (resource instanceof Sequence)   composeSequence(""String_Node_Str"",(Sequence)resource);
 else   if (resource instanceof Slot)   composeSlot(""String_Node_Str"",(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(""String_Node_Str"",(Specimen)resource);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(""String_Node_Str"",(StructureDefinition)resource);
 else   if (resource instanceof StructureMap)   composeStructureMap(""String_Node_Str"",(StructureMap)resource);
 else   if (resource instanceof Subscription)   composeSubscription(""String_Node_Str"",(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(""String_Node_Str"",(Substance)resource);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(""String_Node_Str"",(SupplyDelivery)resource);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(""String_Node_Str"",(SupplyRequest)resource);
 else   if (resource instanceof Task)   composeTask(""String_Node_Str"",(Task)resource);
 else   if (resource instanceof TestScript)   composeTestScript(""String_Node_Str"",(TestScript)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(""String_Node_Str"",(ValueSet)resource);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(""String_Node_Str"",(VisionPrescription)resource);
 else   if (resource instanceof Binary)   composeBinary(""String_Node_Str"",(Binary)resource);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}",0.9951038068850344
24004,"@Override protected Resource parseResource(JsonObject json) throws IOException, FHIRFormatError {
  String t=json.get(""String_Node_Str"").getAsString();
  if (Utilities.noString(t))   throw new FHIRFormatError(""String_Node_Str"");
  if (t.equals(""String_Node_Str""))   return parseParameters(json);
 else   if (t.equals(""String_Node_Str""))   return parseAccount(json);
 else   if (t.equals(""String_Node_Str""))   return parseAllergyIntolerance(json);
 else   if (t.equals(""String_Node_Str""))   return parseAppointment(json);
 else   if (t.equals(""String_Node_Str""))   return parseAppointmentResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseAuditEvent(json);
 else   if (t.equals(""String_Node_Str""))   return parseBasic(json);
 else   if (t.equals(""String_Node_Str""))   return parseBinary(json);
 else   if (t.equals(""String_Node_Str""))   return parseBodySite(json);
 else   if (t.equals(""String_Node_Str""))   return parseBundle(json);
 else   if (t.equals(""String_Node_Str""))   return parseCarePlan(json);
 else   if (t.equals(""String_Node_Str""))   return parseCareTeam(json);
 else   if (t.equals(""String_Node_Str""))   return parseClaim(json);
 else   if (t.equals(""String_Node_Str""))   return parseClaimResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseClinicalImpression(json);
 else   if (t.equals(""String_Node_Str""))   return parseCodeSystem(json);
 else   if (t.equals(""String_Node_Str""))   return parseCommunication(json);
 else   if (t.equals(""String_Node_Str""))   return parseCommunicationRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseCompartmentDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseComposition(json);
 else   if (t.equals(""String_Node_Str""))   return parseConceptMap(json);
 else   if (t.equals(""String_Node_Str""))   return parseCondition(json);
 else   if (t.equals(""String_Node_Str""))   return parseConformance(json);
 else   if (t.equals(""String_Node_Str""))   return parseConsent(json);
 else   if (t.equals(""String_Node_Str""))   return parseContract(json);
 else   if (t.equals(""String_Node_Str""))   return parseCoverage(json);
 else   if (t.equals(""String_Node_Str""))   return parseDataElement(json);
 else   if (t.equals(""String_Node_Str""))   return parseDecisionSupportRule(json);
 else   if (t.equals(""String_Node_Str""))   return parseDecisionSupportServiceModule(json);
 else   if (t.equals(""String_Node_Str""))   return parseDetectedIssue(json);
 else   if (t.equals(""String_Node_Str""))   return parseDevice(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceComponent(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceMetric(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceUseRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceUseStatement(json);
 else   if (t.equals(""String_Node_Str""))   return parseDiagnosticOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseDiagnosticReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseDocumentManifest(json);
 else   if (t.equals(""String_Node_Str""))   return parseDocumentReference(json);
 else   if (t.equals(""String_Node_Str""))   return parseEligibilityRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseEligibilityResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseEncounter(json);
 else   if (t.equals(""String_Node_Str""))   return parseEndpoint(json);
 else   if (t.equals(""String_Node_Str""))   return parseEnrollmentRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseEnrollmentResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseEpisodeOfCare(json);
 else   if (t.equals(""String_Node_Str""))   return parseExpansionProfile(json);
 else   if (t.equals(""String_Node_Str""))   return parseExplanationOfBenefit(json);
 else   if (t.equals(""String_Node_Str""))   return parseFamilyMemberHistory(json);
 else   if (t.equals(""String_Node_Str""))   return parseFlag(json);
 else   if (t.equals(""String_Node_Str""))   return parseGoal(json);
 else   if (t.equals(""String_Node_Str""))   return parseGroup(json);
 else   if (t.equals(""String_Node_Str""))   return parseGuidanceResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseHealthcareService(json);
 else   if (t.equals(""String_Node_Str""))   return parseImagingManifest(json);
 else   if (t.equals(""String_Node_Str""))   return parseImagingStudy(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunization(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunizationRecommendation(json);
 else   if (t.equals(""String_Node_Str""))   return parseImplementationGuide(json);
 else   if (t.equals(""String_Node_Str""))   return parseLibrary(json);
 else   if (t.equals(""String_Node_Str""))   return parseLinkage(json);
 else   if (t.equals(""String_Node_Str""))   return parseListResource(json);
 else   if (t.equals(""String_Node_Str""))   return parseLocation(json);
 else   if (t.equals(""String_Node_Str""))   return parseMeasure(json);
 else   if (t.equals(""String_Node_Str""))   return parseMeasureReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedia(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedication(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationAdministration(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationDispense(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationStatement(json);
 else   if (t.equals(""String_Node_Str""))   return parseMessageHeader(json);
 else   if (t.equals(""String_Node_Str""))   return parseModuleDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseNamingSystem(json);
 else   if (t.equals(""String_Node_Str""))   return parseNutritionOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseObservation(json);
 else   if (t.equals(""String_Node_Str""))   return parseOperationDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseOperationOutcome(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrderResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrderSet(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrganization(json);
 else   if (t.equals(""String_Node_Str""))   return parsePatient(json);
 else   if (t.equals(""String_Node_Str""))   return parsePaymentNotice(json);
 else   if (t.equals(""String_Node_Str""))   return parsePaymentReconciliation(json);
 else   if (t.equals(""String_Node_Str""))   return parsePerson(json);
 else   if (t.equals(""String_Node_Str""))   return parsePractitioner(json);
 else   if (t.equals(""String_Node_Str""))   return parsePractitionerRole(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcedure(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcedureRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcessRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcessResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseProtocol(json);
 else   if (t.equals(""String_Node_Str""))   return parseProvenance(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuestionnaire(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuestionnaireResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseReferralRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseRelatedPerson(json);
 else   if (t.equals(""String_Node_Str""))   return parseRiskAssessment(json);
 else   if (t.equals(""String_Node_Str""))   return parseSchedule(json);
 else   if (t.equals(""String_Node_Str""))   return parseSearchParameter(json);
 else   if (t.equals(""String_Node_Str""))   return parseSequence(json);
 else   if (t.equals(""String_Node_Str""))   return parseSlot(json);
 else   if (t.equals(""String_Node_Str""))   return parseSpecimen(json);
 else   if (t.equals(""String_Node_Str""))   return parseStructureDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseStructureMap(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubscription(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubstance(json);
 else   if (t.equals(""String_Node_Str""))   return parseSupplyDelivery(json);
 else   if (t.equals(""String_Node_Str""))   return parseSupplyRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseTask(json);
 else   if (t.equals(""String_Node_Str""))   return parseTestScript(json);
 else   if (t.equals(""String_Node_Str""))   return parseValueSet(json);
 else   if (t.equals(""String_Node_Str""))   return parseVisionPrescription(json);
 else   if (t.equals(""String_Node_Str""))   return parseBinary(json);
  throw new FHIRFormatError(""String_Node_Str"" + t + ""String_Node_Str"");
}","@Override protected Resource parseResource(JsonObject json) throws IOException, FHIRFormatError {
  String t=json.get(""String_Node_Str"").getAsString();
  if (Utilities.noString(t))   throw new FHIRFormatError(""String_Node_Str"");
  if (t.equals(""String_Node_Str""))   return parseParameters(json);
 else   if (t.equals(""String_Node_Str""))   return parseAccount(json);
 else   if (t.equals(""String_Node_Str""))   return parseActivityDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseAllergyIntolerance(json);
 else   if (t.equals(""String_Node_Str""))   return parseAppointment(json);
 else   if (t.equals(""String_Node_Str""))   return parseAppointmentResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseAuditEvent(json);
 else   if (t.equals(""String_Node_Str""))   return parseBasic(json);
 else   if (t.equals(""String_Node_Str""))   return parseBinary(json);
 else   if (t.equals(""String_Node_Str""))   return parseBodySite(json);
 else   if (t.equals(""String_Node_Str""))   return parseBundle(json);
 else   if (t.equals(""String_Node_Str""))   return parseCarePlan(json);
 else   if (t.equals(""String_Node_Str""))   return parseCareTeam(json);
 else   if (t.equals(""String_Node_Str""))   return parseClaim(json);
 else   if (t.equals(""String_Node_Str""))   return parseClaimResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseClinicalImpression(json);
 else   if (t.equals(""String_Node_Str""))   return parseCodeSystem(json);
 else   if (t.equals(""String_Node_Str""))   return parseCommunication(json);
 else   if (t.equals(""String_Node_Str""))   return parseCommunicationRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseCompartmentDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseComposition(json);
 else   if (t.equals(""String_Node_Str""))   return parseConceptMap(json);
 else   if (t.equals(""String_Node_Str""))   return parseCondition(json);
 else   if (t.equals(""String_Node_Str""))   return parseConformance(json);
 else   if (t.equals(""String_Node_Str""))   return parseConsent(json);
 else   if (t.equals(""String_Node_Str""))   return parseContract(json);
 else   if (t.equals(""String_Node_Str""))   return parseCoverage(json);
 else   if (t.equals(""String_Node_Str""))   return parseDataElement(json);
 else   if (t.equals(""String_Node_Str""))   return parseDecisionSupportRule(json);
 else   if (t.equals(""String_Node_Str""))   return parseDecisionSupportServiceModule(json);
 else   if (t.equals(""String_Node_Str""))   return parseDetectedIssue(json);
 else   if (t.equals(""String_Node_Str""))   return parseDevice(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceComponent(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceMetric(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceUseRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceUseStatement(json);
 else   if (t.equals(""String_Node_Str""))   return parseDiagnosticOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseDiagnosticReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseDocumentManifest(json);
 else   if (t.equals(""String_Node_Str""))   return parseDocumentReference(json);
 else   if (t.equals(""String_Node_Str""))   return parseEligibilityRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseEligibilityResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseEncounter(json);
 else   if (t.equals(""String_Node_Str""))   return parseEndpoint(json);
 else   if (t.equals(""String_Node_Str""))   return parseEnrollmentRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseEnrollmentResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseEpisodeOfCare(json);
 else   if (t.equals(""String_Node_Str""))   return parseExpansionProfile(json);
 else   if (t.equals(""String_Node_Str""))   return parseExplanationOfBenefit(json);
 else   if (t.equals(""String_Node_Str""))   return parseFamilyMemberHistory(json);
 else   if (t.equals(""String_Node_Str""))   return parseFlag(json);
 else   if (t.equals(""String_Node_Str""))   return parseGoal(json);
 else   if (t.equals(""String_Node_Str""))   return parseGroup(json);
 else   if (t.equals(""String_Node_Str""))   return parseGuidanceResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseHealthcareService(json);
 else   if (t.equals(""String_Node_Str""))   return parseImagingManifest(json);
 else   if (t.equals(""String_Node_Str""))   return parseImagingStudy(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunization(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunizationRecommendation(json);
 else   if (t.equals(""String_Node_Str""))   return parseImplementationGuide(json);
 else   if (t.equals(""String_Node_Str""))   return parseLibrary(json);
 else   if (t.equals(""String_Node_Str""))   return parseLinkage(json);
 else   if (t.equals(""String_Node_Str""))   return parseListResource(json);
 else   if (t.equals(""String_Node_Str""))   return parseLocation(json);
 else   if (t.equals(""String_Node_Str""))   return parseMeasure(json);
 else   if (t.equals(""String_Node_Str""))   return parseMeasureReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedia(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedication(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationAdministration(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationDispense(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationStatement(json);
 else   if (t.equals(""String_Node_Str""))   return parseMessageHeader(json);
 else   if (t.equals(""String_Node_Str""))   return parseModuleDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseNamingSystem(json);
 else   if (t.equals(""String_Node_Str""))   return parseNutritionOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseObservation(json);
 else   if (t.equals(""String_Node_Str""))   return parseOperationDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseOperationOutcome(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrderResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrderSet(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrganization(json);
 else   if (t.equals(""String_Node_Str""))   return parsePatient(json);
 else   if (t.equals(""String_Node_Str""))   return parsePaymentNotice(json);
 else   if (t.equals(""String_Node_Str""))   return parsePaymentReconciliation(json);
 else   if (t.equals(""String_Node_Str""))   return parsePerson(json);
 else   if (t.equals(""String_Node_Str""))   return parsePractitioner(json);
 else   if (t.equals(""String_Node_Str""))   return parsePractitionerRole(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcedure(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcedureRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcessRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcessResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseProtocol(json);
 else   if (t.equals(""String_Node_Str""))   return parseProvenance(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuestionnaire(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuestionnaireResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseReferralRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseRelatedPerson(json);
 else   if (t.equals(""String_Node_Str""))   return parseRiskAssessment(json);
 else   if (t.equals(""String_Node_Str""))   return parseSchedule(json);
 else   if (t.equals(""String_Node_Str""))   return parseSearchParameter(json);
 else   if (t.equals(""String_Node_Str""))   return parseSequence(json);
 else   if (t.equals(""String_Node_Str""))   return parseSlot(json);
 else   if (t.equals(""String_Node_Str""))   return parseSpecimen(json);
 else   if (t.equals(""String_Node_Str""))   return parseStructureDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseStructureMap(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubscription(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubstance(json);
 else   if (t.equals(""String_Node_Str""))   return parseSupplyDelivery(json);
 else   if (t.equals(""String_Node_Str""))   return parseSupplyRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseTask(json);
 else   if (t.equals(""String_Node_Str""))   return parseTestScript(json);
 else   if (t.equals(""String_Node_Str""))   return parseValueSet(json);
 else   if (t.equals(""String_Node_Str""))   return parseVisionPrescription(json);
 else   if (t.equals(""String_Node_Str""))   return parseBinary(json);
  throw new FHIRFormatError(""String_Node_Str"" + t + ""String_Node_Str"");
}",0.995512713977065
24005,"protected void parseEndpointProperties(JsonObject json,Endpoint res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setStatusElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),Endpoint.EndpointStatus.NULL,new Endpoint.EndpointStatusEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getStatusElement());
  if (json.has(""String_Node_Str""))   res.setManagingOrganization(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContact().add(parseContactPoint(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setConnectionTypeElement(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getConnectionTypeElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getMethod().add(parseCoding(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setPeriod(parsePeriod(json.getAsJsonObject(""String_Node_Str"")));
  Type address=parseType(""String_Node_Str"",json);
  if (address != null)   res.setAddress(address);
  if (json.has(""String_Node_Str""))   res.setPayloadFormatElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPayloadFormatElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getPayloadType().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getHeader().add(parseString(array.get(i).getAsString()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      if (i == res.getHeader().size())       res.getHeader().add(parseString(null));
      if (array.get(i) instanceof JsonObject)       parseElementProperties(array.get(i).getAsJsonObject(),res.getHeader().get(i));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setPublicKeyElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPublicKeyElement());
}","protected void parseEndpointProperties(JsonObject json,Endpoint res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getIdentifier().add(parseIdentifier(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setStatusElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),Endpoint.EndpointStatus.NULL,new Endpoint.EndpointStatusEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getStatusElement());
  if (json.has(""String_Node_Str""))   res.setManagingOrganization(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getContact().add(parseContactPoint(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setConnectionTypeElement(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getConnectionTypeElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getMethod().add(parseCoding(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setPeriod(parsePeriod(json.getAsJsonObject(""String_Node_Str"")));
  Type address=parseType(""String_Node_Str"",json);
  if (address != null)   res.setAddress(address);
  if (json.has(""String_Node_Str""))   res.setPayloadFormatElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPayloadFormatElement());
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getPayloadType().add(parseCodeableConcept(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getHeader().add(parseString(array.get(i).getAsString()));
    }
  }
  ;
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      if (i == res.getHeader().size())       res.getHeader().add(parseString(null));
      if (array.get(i) instanceof JsonObject)       parseElementProperties(array.get(i).getAsJsonObject(),res.getHeader().get(i));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setPublicKeyElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPublicKeyElement());
}",0.9604328711531958
24006,"protected void composeNamedReference(String name,Resource resource) throws IOException {
  if (resource instanceof Parameters)   composeParameters(name,(Parameters)resource);
 else   if (resource instanceof Account)   composeAccount(name,(Account)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(name,(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(name,(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(name,(AppointmentResponse)resource);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(name,(AuditEvent)resource);
 else   if (resource instanceof Basic)   composeBasic(name,(Basic)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   if (resource instanceof BodySite)   composeBodySite(name,(BodySite)resource);
 else   if (resource instanceof Bundle)   composeBundle(name,(Bundle)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(name,(CarePlan)resource);
 else   if (resource instanceof CareTeam)   composeCareTeam(name,(CareTeam)resource);
 else   if (resource instanceof Claim)   composeClaim(name,(Claim)resource);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(name,(ClaimResponse)resource);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(name,(ClinicalImpression)resource);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(name,(CodeSystem)resource);
 else   if (resource instanceof Communication)   composeCommunication(name,(Communication)resource);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(name,(CommunicationRequest)resource);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(name,(CompartmentDefinition)resource);
 else   if (resource instanceof Composition)   composeComposition(name,(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(name,(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(name,(Condition)resource);
 else   if (resource instanceof Conformance)   composeConformance(name,(Conformance)resource);
 else   if (resource instanceof Consent)   composeConsent(name,(Consent)resource);
 else   if (resource instanceof Contract)   composeContract(name,(Contract)resource);
 else   if (resource instanceof Coverage)   composeCoverage(name,(Coverage)resource);
 else   if (resource instanceof DataElement)   composeDataElement(name,(DataElement)resource);
 else   if (resource instanceof DecisionSupportRule)   composeDecisionSupportRule(name,(DecisionSupportRule)resource);
 else   if (resource instanceof DecisionSupportServiceModule)   composeDecisionSupportServiceModule(name,(DecisionSupportServiceModule)resource);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(name,(DetectedIssue)resource);
 else   if (resource instanceof Device)   composeDevice(name,(Device)resource);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(name,(DeviceComponent)resource);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(name,(DeviceMetric)resource);
 else   if (resource instanceof DeviceUseRequest)   composeDeviceUseRequest(name,(DeviceUseRequest)resource);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(name,(DeviceUseStatement)resource);
 else   if (resource instanceof DiagnosticOrder)   composeDiagnosticOrder(name,(DiagnosticOrder)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(name,(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(name,(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(name,(DocumentReference)resource);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(name,(EligibilityRequest)resource);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(name,(EligibilityResponse)resource);
 else   if (resource instanceof Encounter)   composeEncounter(name,(Encounter)resource);
 else   if (resource instanceof Endpoint)   composeEndpoint(name,(Endpoint)resource);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(name,(EnrollmentRequest)resource);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(name,(EnrollmentResponse)resource);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(name,(EpisodeOfCare)resource);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(name,(ExpansionProfile)resource);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(name,(ExplanationOfBenefit)resource);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(name,(FamilyMemberHistory)resource);
 else   if (resource instanceof Flag)   composeFlag(name,(Flag)resource);
 else   if (resource instanceof Goal)   composeGoal(name,(Goal)resource);
 else   if (resource instanceof Group)   composeGroup(name,(Group)resource);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(name,(GuidanceResponse)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(name,(HealthcareService)resource);
 else   if (resource instanceof ImagingManifest)   composeImagingManifest(name,(ImagingManifest)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(name,(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(name,(Immunization)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(name,(ImmunizationRecommendation)resource);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(name,(ImplementationGuide)resource);
 else   if (resource instanceof Library)   composeLibrary(name,(Library)resource);
 else   if (resource instanceof Linkage)   composeLinkage(name,(Linkage)resource);
 else   if (resource instanceof ListResource)   composeListResource(name,(ListResource)resource);
 else   if (resource instanceof Location)   composeLocation(name,(Location)resource);
 else   if (resource instanceof Measure)   composeMeasure(name,(Measure)resource);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(name,(MeasureReport)resource);
 else   if (resource instanceof Media)   composeMedia(name,(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(name,(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(name,(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(name,(MedicationDispense)resource);
 else   if (resource instanceof MedicationOrder)   composeMedicationOrder(name,(MedicationOrder)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(name,(MedicationStatement)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(name,(MessageHeader)resource);
 else   if (resource instanceof ModuleDefinition)   composeModuleDefinition(name,(ModuleDefinition)resource);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(name,(NamingSystem)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(name,(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(name,(Observation)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(name,(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(name,(OperationOutcome)resource);
 else   if (resource instanceof Order)   composeOrder(name,(Order)resource);
 else   if (resource instanceof OrderResponse)   composeOrderResponse(name,(OrderResponse)resource);
 else   if (resource instanceof OrderSet)   composeOrderSet(name,(OrderSet)resource);
 else   if (resource instanceof Organization)   composeOrganization(name,(Organization)resource);
 else   if (resource instanceof Patient)   composePatient(name,(Patient)resource);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(name,(PaymentNotice)resource);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(name,(PaymentReconciliation)resource);
 else   if (resource instanceof Person)   composePerson(name,(Person)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(name,(Practitioner)resource);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(name,(PractitionerRole)resource);
 else   if (resource instanceof Procedure)   composeProcedure(name,(Procedure)resource);
 else   if (resource instanceof ProcedureRequest)   composeProcedureRequest(name,(ProcedureRequest)resource);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(name,(ProcessRequest)resource);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(name,(ProcessResponse)resource);
 else   if (resource instanceof Protocol)   composeProtocol(name,(Protocol)resource);
 else   if (resource instanceof Provenance)   composeProvenance(name,(Provenance)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(name,(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(name,(QuestionnaireResponse)resource);
 else   if (resource instanceof ReferralRequest)   composeReferralRequest(name,(ReferralRequest)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(name,(RelatedPerson)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(name,(RiskAssessment)resource);
 else   if (resource instanceof Schedule)   composeSchedule(name,(Schedule)resource);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(name,(SearchParameter)resource);
 else   if (resource instanceof Sequence)   composeSequence(name,(Sequence)resource);
 else   if (resource instanceof Slot)   composeSlot(name,(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(name,(Specimen)resource);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(name,(StructureDefinition)resource);
 else   if (resource instanceof StructureMap)   composeStructureMap(name,(StructureMap)resource);
 else   if (resource instanceof Subscription)   composeSubscription(name,(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(name,(Substance)resource);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(name,(SupplyDelivery)resource);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(name,(SupplyRequest)resource);
 else   if (resource instanceof Task)   composeTask(name,(Task)resource);
 else   if (resource instanceof TestScript)   composeTestScript(name,(TestScript)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(name,(ValueSet)resource);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(name,(VisionPrescription)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}","protected void composeNamedReference(String name,Resource resource) throws IOException {
  if (resource instanceof Parameters)   composeParameters(name,(Parameters)resource);
 else   if (resource instanceof Account)   composeAccount(name,(Account)resource);
 else   if (resource instanceof ActivityDefinition)   composeActivityDefinition(name,(ActivityDefinition)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(name,(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(name,(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(name,(AppointmentResponse)resource);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(name,(AuditEvent)resource);
 else   if (resource instanceof Basic)   composeBasic(name,(Basic)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   if (resource instanceof BodySite)   composeBodySite(name,(BodySite)resource);
 else   if (resource instanceof Bundle)   composeBundle(name,(Bundle)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(name,(CarePlan)resource);
 else   if (resource instanceof CareTeam)   composeCareTeam(name,(CareTeam)resource);
 else   if (resource instanceof Claim)   composeClaim(name,(Claim)resource);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(name,(ClaimResponse)resource);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(name,(ClinicalImpression)resource);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(name,(CodeSystem)resource);
 else   if (resource instanceof Communication)   composeCommunication(name,(Communication)resource);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(name,(CommunicationRequest)resource);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(name,(CompartmentDefinition)resource);
 else   if (resource instanceof Composition)   composeComposition(name,(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(name,(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(name,(Condition)resource);
 else   if (resource instanceof Conformance)   composeConformance(name,(Conformance)resource);
 else   if (resource instanceof Consent)   composeConsent(name,(Consent)resource);
 else   if (resource instanceof Contract)   composeContract(name,(Contract)resource);
 else   if (resource instanceof Coverage)   composeCoverage(name,(Coverage)resource);
 else   if (resource instanceof DataElement)   composeDataElement(name,(DataElement)resource);
 else   if (resource instanceof DecisionSupportRule)   composeDecisionSupportRule(name,(DecisionSupportRule)resource);
 else   if (resource instanceof DecisionSupportServiceModule)   composeDecisionSupportServiceModule(name,(DecisionSupportServiceModule)resource);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(name,(DetectedIssue)resource);
 else   if (resource instanceof Device)   composeDevice(name,(Device)resource);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(name,(DeviceComponent)resource);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(name,(DeviceMetric)resource);
 else   if (resource instanceof DeviceUseRequest)   composeDeviceUseRequest(name,(DeviceUseRequest)resource);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(name,(DeviceUseStatement)resource);
 else   if (resource instanceof DiagnosticOrder)   composeDiagnosticOrder(name,(DiagnosticOrder)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(name,(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(name,(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(name,(DocumentReference)resource);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(name,(EligibilityRequest)resource);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(name,(EligibilityResponse)resource);
 else   if (resource instanceof Encounter)   composeEncounter(name,(Encounter)resource);
 else   if (resource instanceof Endpoint)   composeEndpoint(name,(Endpoint)resource);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(name,(EnrollmentRequest)resource);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(name,(EnrollmentResponse)resource);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(name,(EpisodeOfCare)resource);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(name,(ExpansionProfile)resource);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(name,(ExplanationOfBenefit)resource);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(name,(FamilyMemberHistory)resource);
 else   if (resource instanceof Flag)   composeFlag(name,(Flag)resource);
 else   if (resource instanceof Goal)   composeGoal(name,(Goal)resource);
 else   if (resource instanceof Group)   composeGroup(name,(Group)resource);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(name,(GuidanceResponse)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(name,(HealthcareService)resource);
 else   if (resource instanceof ImagingManifest)   composeImagingManifest(name,(ImagingManifest)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(name,(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(name,(Immunization)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(name,(ImmunizationRecommendation)resource);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(name,(ImplementationGuide)resource);
 else   if (resource instanceof Library)   composeLibrary(name,(Library)resource);
 else   if (resource instanceof Linkage)   composeLinkage(name,(Linkage)resource);
 else   if (resource instanceof ListResource)   composeListResource(name,(ListResource)resource);
 else   if (resource instanceof Location)   composeLocation(name,(Location)resource);
 else   if (resource instanceof Measure)   composeMeasure(name,(Measure)resource);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(name,(MeasureReport)resource);
 else   if (resource instanceof Media)   composeMedia(name,(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(name,(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(name,(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(name,(MedicationDispense)resource);
 else   if (resource instanceof MedicationOrder)   composeMedicationOrder(name,(MedicationOrder)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(name,(MedicationStatement)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(name,(MessageHeader)resource);
 else   if (resource instanceof ModuleDefinition)   composeModuleDefinition(name,(ModuleDefinition)resource);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(name,(NamingSystem)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(name,(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(name,(Observation)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(name,(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(name,(OperationOutcome)resource);
 else   if (resource instanceof Order)   composeOrder(name,(Order)resource);
 else   if (resource instanceof OrderResponse)   composeOrderResponse(name,(OrderResponse)resource);
 else   if (resource instanceof OrderSet)   composeOrderSet(name,(OrderSet)resource);
 else   if (resource instanceof Organization)   composeOrganization(name,(Organization)resource);
 else   if (resource instanceof Patient)   composePatient(name,(Patient)resource);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(name,(PaymentNotice)resource);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(name,(PaymentReconciliation)resource);
 else   if (resource instanceof Person)   composePerson(name,(Person)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(name,(Practitioner)resource);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(name,(PractitionerRole)resource);
 else   if (resource instanceof Procedure)   composeProcedure(name,(Procedure)resource);
 else   if (resource instanceof ProcedureRequest)   composeProcedureRequest(name,(ProcedureRequest)resource);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(name,(ProcessRequest)resource);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(name,(ProcessResponse)resource);
 else   if (resource instanceof Protocol)   composeProtocol(name,(Protocol)resource);
 else   if (resource instanceof Provenance)   composeProvenance(name,(Provenance)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(name,(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(name,(QuestionnaireResponse)resource);
 else   if (resource instanceof ReferralRequest)   composeReferralRequest(name,(ReferralRequest)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(name,(RelatedPerson)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(name,(RiskAssessment)resource);
 else   if (resource instanceof Schedule)   composeSchedule(name,(Schedule)resource);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(name,(SearchParameter)resource);
 else   if (resource instanceof Sequence)   composeSequence(name,(Sequence)resource);
 else   if (resource instanceof Slot)   composeSlot(name,(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(name,(Specimen)resource);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(name,(StructureDefinition)resource);
 else   if (resource instanceof StructureMap)   composeStructureMap(name,(StructureMap)resource);
 else   if (resource instanceof Subscription)   composeSubscription(name,(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(name,(Substance)resource);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(name,(SupplyDelivery)resource);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(name,(SupplyRequest)resource);
 else   if (resource instanceof Task)   composeTask(name,(Task)resource);
 else   if (resource instanceof TestScript)   composeTestScript(name,(TestScript)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(name,(ValueSet)resource);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(name,(VisionPrescription)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}",0.9950342465753425
24007,"protected void composeLocationInner(Location element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasIdentifier()) {
    openArray(""String_Node_Str"");
    for (    Identifier e : element.getIdentifier())     composeIdentifier(null,e);
    closeArray();
  }
  ;
  if (element.hasStatusElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getStatusElement(),new Location.LocationStatusEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getStatusElement(),new Location.LocationStatusEnumFactory(),false);
  }
  if (element.hasNameElement()) {
    composeStringCore(""String_Node_Str"",element.getNameElement(),false);
    composeStringExtras(""String_Node_Str"",element.getNameElement(),false);
  }
  if (element.hasDescriptionElement()) {
    composeStringCore(""String_Node_Str"",element.getDescriptionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getDescriptionElement(),false);
  }
  if (element.hasModeElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getModeElement(),new Location.LocationModeEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getModeElement(),new Location.LocationModeEnumFactory(),false);
  }
  if (element.hasType()) {
    composeCodeableConcept(""String_Node_Str"",element.getType());
  }
  if (element.hasTelecom()) {
    openArray(""String_Node_Str"");
    for (    ContactPoint e : element.getTelecom())     composeContactPoint(null,e);
    closeArray();
  }
  ;
  if (element.hasAddress()) {
    composeAddress(""String_Node_Str"",element.getAddress());
  }
  if (element.hasPhysicalType()) {
    composeCodeableConcept(""String_Node_Str"",element.getPhysicalType());
  }
  if (element.hasPosition()) {
    composeLocationLocationPositionComponent(""String_Node_Str"",element.getPosition());
  }
  if (element.hasManagingOrganization()) {
    composeReference(""String_Node_Str"",element.getManagingOrganization());
  }
  if (element.hasPartOf()) {
    composeReference(""String_Node_Str"",element.getPartOf());
  }
}","protected void composeLocationInner(Location element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasIdentifier()) {
    openArray(""String_Node_Str"");
    for (    Identifier e : element.getIdentifier())     composeIdentifier(null,e);
    closeArray();
  }
  ;
  if (element.hasStatusElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getStatusElement(),new Location.LocationStatusEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getStatusElement(),new Location.LocationStatusEnumFactory(),false);
  }
  if (element.hasNameElement()) {
    composeStringCore(""String_Node_Str"",element.getNameElement(),false);
    composeStringExtras(""String_Node_Str"",element.getNameElement(),false);
  }
  if (element.hasDescriptionElement()) {
    composeStringCore(""String_Node_Str"",element.getDescriptionElement(),false);
    composeStringExtras(""String_Node_Str"",element.getDescriptionElement(),false);
  }
  if (element.hasModeElement()) {
    composeEnumerationCore(""String_Node_Str"",element.getModeElement(),new Location.LocationModeEnumFactory(),false);
    composeEnumerationExtras(""String_Node_Str"",element.getModeElement(),new Location.LocationModeEnumFactory(),false);
  }
  if (element.hasType()) {
    composeCodeableConcept(""String_Node_Str"",element.getType());
  }
  if (element.hasTelecom()) {
    openArray(""String_Node_Str"");
    for (    ContactPoint e : element.getTelecom())     composeContactPoint(null,e);
    closeArray();
  }
  ;
  if (element.hasAddress()) {
    composeAddress(""String_Node_Str"",element.getAddress());
  }
  if (element.hasPhysicalType()) {
    composeCodeableConcept(""String_Node_Str"",element.getPhysicalType());
  }
  if (element.hasPosition()) {
    composeLocationLocationPositionComponent(""String_Node_Str"",element.getPosition());
  }
  if (element.hasManagingOrganization()) {
    composeReference(""String_Node_Str"",element.getManagingOrganization());
  }
  if (element.hasPartOf()) {
    composeReference(""String_Node_Str"",element.getPartOf());
  }
  if (element.hasEndpoint()) {
    openArray(""String_Node_Str"");
    for (    Reference e : element.getEndpoint())     composeReference(null,e);
    closeArray();
  }
  ;
}",0.960167714884696
24008,"protected void composeOrganizationInner(Organization element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasIdentifier()) {
    openArray(""String_Node_Str"");
    for (    Identifier e : element.getIdentifier())     composeIdentifier(null,e);
    closeArray();
  }
  ;
  if (element.hasActiveElement()) {
    composeBooleanCore(""String_Node_Str"",element.getActiveElement(),false);
    composeBooleanExtras(""String_Node_Str"",element.getActiveElement(),false);
  }
  if (element.hasType()) {
    composeCodeableConcept(""String_Node_Str"",element.getType());
  }
  if (element.hasNameElement()) {
    composeStringCore(""String_Node_Str"",element.getNameElement(),false);
    composeStringExtras(""String_Node_Str"",element.getNameElement(),false);
  }
  if (element.hasTelecom()) {
    openArray(""String_Node_Str"");
    for (    ContactPoint e : element.getTelecom())     composeContactPoint(null,e);
    closeArray();
  }
  ;
  if (element.hasAddress()) {
    openArray(""String_Node_Str"");
    for (    Address e : element.getAddress())     composeAddress(null,e);
    closeArray();
  }
  ;
  if (element.hasPartOf()) {
    composeReference(""String_Node_Str"",element.getPartOf());
  }
  if (element.hasContact()) {
    openArray(""String_Node_Str"");
    for (    Organization.OrganizationContactComponent e : element.getContact())     composeOrganizationOrganizationContactComponent(null,e);
    closeArray();
  }
  ;
}","protected void composeOrganizationInner(Organization element) throws IOException {
  composeDomainResourceElements(element);
  if (element.hasIdentifier()) {
    openArray(""String_Node_Str"");
    for (    Identifier e : element.getIdentifier())     composeIdentifier(null,e);
    closeArray();
  }
  ;
  if (element.hasActiveElement()) {
    composeBooleanCore(""String_Node_Str"",element.getActiveElement(),false);
    composeBooleanExtras(""String_Node_Str"",element.getActiveElement(),false);
  }
  if (element.hasType()) {
    composeCodeableConcept(""String_Node_Str"",element.getType());
  }
  if (element.hasNameElement()) {
    composeStringCore(""String_Node_Str"",element.getNameElement(),false);
    composeStringExtras(""String_Node_Str"",element.getNameElement(),false);
  }
  if (element.hasTelecom()) {
    openArray(""String_Node_Str"");
    for (    ContactPoint e : element.getTelecom())     composeContactPoint(null,e);
    closeArray();
  }
  ;
  if (element.hasAddress()) {
    openArray(""String_Node_Str"");
    for (    Address e : element.getAddress())     composeAddress(null,e);
    closeArray();
  }
  ;
  if (element.hasPartOf()) {
    composeReference(""String_Node_Str"",element.getPartOf());
  }
  if (element.hasContact()) {
    openArray(""String_Node_Str"");
    for (    Organization.OrganizationContactComponent e : element.getContact())     composeOrganizationOrganizationContactComponent(null,e);
    closeArray();
  }
  ;
  if (element.hasEndpoint()) {
    openArray(""String_Node_Str"");
    for (    Reference e : element.getEndpoint())     composeReference(null,e);
    closeArray();
  }
  ;
}",0.9441359032995752
24009,"protected boolean hasTypeName(JsonObject json,String prefix){
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  return false;
}","protected boolean hasTypeName(JsonObject json,String prefix){
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  return false;
}",0.9972086861900932
24010,"protected void parseLocationProperties(JsonObject json,Location res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getIdentifier().add(parseIdentifier(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setStatusElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),Location.LocationStatus.NULL,new Location.LocationStatusEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getStatusElement());
  if (json.has(""String_Node_Str""))   res.setNameElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getNameElement());
  if (json.has(""String_Node_Str""))   res.setDescriptionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDescriptionElement());
  if (json.has(""String_Node_Str""))   res.setModeElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),Location.LocationMode.NULL,new Location.LocationModeEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getModeElement());
  if (json.has(""String_Node_Str""))   res.setType(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getTelecom().add(parseContactPoint(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setAddress(parseAddress(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setPhysicalType(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setPosition(parseLocationLocationPositionComponent(json.getAsJsonObject(""String_Node_Str""),res));
  if (json.has(""String_Node_Str""))   res.setManagingOrganization(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setPartOf(parseReference(json.getAsJsonObject(""String_Node_Str"")));
}","protected void parseLocationProperties(JsonObject json,Location res) throws IOException, FHIRFormatError {
  parseDomainResourceProperties(json,res);
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getIdentifier().add(parseIdentifier(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setStatusElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),Location.LocationStatus.NULL,new Location.LocationStatusEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getStatusElement());
  if (json.has(""String_Node_Str""))   res.setNameElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getNameElement());
  if (json.has(""String_Node_Str""))   res.setDescriptionElement(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getDescriptionElement());
  if (json.has(""String_Node_Str""))   res.setModeElement(parseEnumeration(json.get(""String_Node_Str"").getAsString(),Location.LocationMode.NULL,new Location.LocationModeEnumFactory()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getModeElement());
  if (json.has(""String_Node_Str""))   res.setType(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getTelecom().add(parseContactPoint(array.get(i).getAsJsonObject()));
    }
  }
  ;
  if (json.has(""String_Node_Str""))   res.setAddress(parseAddress(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setPhysicalType(parseCodeableConcept(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setPosition(parseLocationLocationPositionComponent(json.getAsJsonObject(""String_Node_Str""),res));
  if (json.has(""String_Node_Str""))   res.setManagingOrganization(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str""))   res.setPartOf(parseReference(json.getAsJsonObject(""String_Node_Str"")));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getEndpoint().add(parseReference(array.get(i).getAsJsonObject()));
    }
  }
  ;
}",0.9547856723429242
24011,"protected void composeEndpoint(Complex parent,String parentType,String name,Endpoint element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  if (element.hasStatusElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getStatusElement(),-1);
  if (element.hasManagingOrganization())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getManagingOrganization(),-1);
  for (int i=0; i < element.getContact().size(); i++)   composeContactPoint(t,""String_Node_Str"",""String_Node_Str"",element.getContact().get(i),i);
  if (element.hasConnectionTypeElement())   composeCode(t,""String_Node_Str"",""String_Node_Str"",element.getConnectionTypeElement(),-1);
  for (int i=0; i < element.getMethod().size(); i++)   composeCoding(t,""String_Node_Str"",""String_Node_Str"",element.getMethod().get(i),i);
  if (element.hasPeriod())   composePeriod(t,""String_Node_Str"",""String_Node_Str"",element.getPeriod(),-1);
  if (element.hasAddress())   composeType(t,""String_Node_Str"",""String_Node_Str"",element.getAddress(),-1);
  if (element.hasPayloadFormatElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getPayloadFormatElement(),-1);
  for (int i=0; i < element.getPayloadType().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getPayloadType().get(i),i);
  for (int i=0; i < element.getHeader().size(); i++)   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getHeader().get(i),i);
  if (element.hasPublicKeyElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getPublicKeyElement(),-1);
}","protected void composeEndpoint(Complex parent,String parentType,String name,Endpoint element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  for (int i=0; i < element.getIdentifier().size(); i++)   composeIdentifier(t,""String_Node_Str"",""String_Node_Str"",element.getIdentifier().get(i),i);
  if (element.hasStatusElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getStatusElement(),-1);
  if (element.hasManagingOrganization())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getManagingOrganization(),-1);
  for (int i=0; i < element.getContact().size(); i++)   composeContactPoint(t,""String_Node_Str"",""String_Node_Str"",element.getContact().get(i),i);
  if (element.hasConnectionTypeElement())   composeCode(t,""String_Node_Str"",""String_Node_Str"",element.getConnectionTypeElement(),-1);
  for (int i=0; i < element.getMethod().size(); i++)   composeCoding(t,""String_Node_Str"",""String_Node_Str"",element.getMethod().get(i),i);
  if (element.hasPeriod())   composePeriod(t,""String_Node_Str"",""String_Node_Str"",element.getPeriod(),-1);
  if (element.hasAddress())   composeType(t,""String_Node_Str"",""String_Node_Str"",element.getAddress(),-1);
  if (element.hasPayloadFormatElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getPayloadFormatElement(),-1);
  for (int i=0; i < element.getPayloadType().size(); i++)   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getPayloadType().get(i),i);
  for (int i=0; i < element.getHeader().size(); i++)   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getHeader().get(i),i);
  if (element.hasPublicKeyElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getPublicKeyElement(),-1);
}",0.959720730397422
24012,"protected void composeOrganization(Complex parent,String parentType,String name,Organization element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  for (int i=0; i < element.getIdentifier().size(); i++)   composeIdentifier(t,""String_Node_Str"",""String_Node_Str"",element.getIdentifier().get(i),i);
  if (element.hasActiveElement())   composeBoolean(t,""String_Node_Str"",""String_Node_Str"",element.getActiveElement(),-1);
  if (element.hasType())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getType(),-1);
  if (element.hasNameElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getNameElement(),-1);
  for (int i=0; i < element.getTelecom().size(); i++)   composeContactPoint(t,""String_Node_Str"",""String_Node_Str"",element.getTelecom().get(i),i);
  for (int i=0; i < element.getAddress().size(); i++)   composeAddress(t,""String_Node_Str"",""String_Node_Str"",element.getAddress().get(i),i);
  if (element.hasPartOf())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getPartOf(),-1);
  for (int i=0; i < element.getContact().size(); i++)   composeOrganizationOrganizationContactComponent(t,""String_Node_Str"",""String_Node_Str"",element.getContact().get(i),i);
}","protected void composeOrganization(Complex parent,String parentType,String name,Organization element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  for (int i=0; i < element.getIdentifier().size(); i++)   composeIdentifier(t,""String_Node_Str"",""String_Node_Str"",element.getIdentifier().get(i),i);
  if (element.hasActiveElement())   composeBoolean(t,""String_Node_Str"",""String_Node_Str"",element.getActiveElement(),-1);
  if (element.hasType())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getType(),-1);
  if (element.hasNameElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getNameElement(),-1);
  for (int i=0; i < element.getTelecom().size(); i++)   composeContactPoint(t,""String_Node_Str"",""String_Node_Str"",element.getTelecom().get(i),i);
  for (int i=0; i < element.getAddress().size(); i++)   composeAddress(t,""String_Node_Str"",""String_Node_Str"",element.getAddress().get(i),i);
  if (element.hasPartOf())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getPartOf(),-1);
  for (int i=0; i < element.getContact().size(); i++)   composeOrganizationOrganizationContactComponent(t,""String_Node_Str"",""String_Node_Str"",element.getContact().get(i),i);
  for (int i=0; i < element.getEndpoint().size(); i++)   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getEndpoint().get(i),i);
}",0.9515212303577398
24013,"protected void composeLocation(Complex parent,String parentType,String name,Location element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  for (int i=0; i < element.getIdentifier().size(); i++)   composeIdentifier(t,""String_Node_Str"",""String_Node_Str"",element.getIdentifier().get(i),i);
  if (element.hasStatusElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getStatusElement(),-1);
  if (element.hasNameElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getNameElement(),-1);
  if (element.hasDescriptionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getDescriptionElement(),-1);
  if (element.hasModeElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getModeElement(),-1);
  if (element.hasType())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getType(),-1);
  for (int i=0; i < element.getTelecom().size(); i++)   composeContactPoint(t,""String_Node_Str"",""String_Node_Str"",element.getTelecom().get(i),i);
  if (element.hasAddress())   composeAddress(t,""String_Node_Str"",""String_Node_Str"",element.getAddress(),-1);
  if (element.hasPhysicalType())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getPhysicalType(),-1);
  if (element.hasPosition())   composeLocationLocationPositionComponent(t,""String_Node_Str"",""String_Node_Str"",element.getPosition(),-1);
  if (element.hasManagingOrganization())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getManagingOrganization(),-1);
  if (element.hasPartOf())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getPartOf(),-1);
}","protected void composeLocation(Complex parent,String parentType,String name,Location element,int index){
  if (element == null)   return;
  Complex t;
  if (Utilities.noString(parentType))   t=parent;
 else {
    t=parent.predicate(""String_Node_Str"" + parentType + '.'+ name);
  }
  composeDomainResource(t,""String_Node_Str"",name,element,index);
  for (int i=0; i < element.getIdentifier().size(); i++)   composeIdentifier(t,""String_Node_Str"",""String_Node_Str"",element.getIdentifier().get(i),i);
  if (element.hasStatusElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getStatusElement(),-1);
  if (element.hasNameElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getNameElement(),-1);
  if (element.hasDescriptionElement())   composeString(t,""String_Node_Str"",""String_Node_Str"",element.getDescriptionElement(),-1);
  if (element.hasModeElement())   composeEnum(t,""String_Node_Str"",""String_Node_Str"",element.getModeElement(),-1);
  if (element.hasType())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getType(),-1);
  for (int i=0; i < element.getTelecom().size(); i++)   composeContactPoint(t,""String_Node_Str"",""String_Node_Str"",element.getTelecom().get(i),i);
  if (element.hasAddress())   composeAddress(t,""String_Node_Str"",""String_Node_Str"",element.getAddress(),-1);
  if (element.hasPhysicalType())   composeCodeableConcept(t,""String_Node_Str"",""String_Node_Str"",element.getPhysicalType(),-1);
  if (element.hasPosition())   composeLocationLocationPositionComponent(t,""String_Node_Str"",""String_Node_Str"",element.getPosition(),-1);
  if (element.hasManagingOrganization())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getManagingOrganization(),-1);
  if (element.hasPartOf())   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getPartOf(),-1);
  for (int i=0; i < element.getEndpoint().size(); i++)   composeReference(t,""String_Node_Str"",""String_Node_Str"",element.getEndpoint().get(i),i);
}",0.9623082921757212
24014,"@Override protected void composeResource(Complex parent,Resource resource){
  if (resource instanceof Parameters)   composeParameters(parent,null,""String_Node_Str"",(Parameters)resource,-1);
 else   if (resource instanceof Account)   composeAccount(parent,null,""String_Node_Str"",(Account)resource,-1);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(parent,null,""String_Node_Str"",(AllergyIntolerance)resource,-1);
 else   if (resource instanceof Appointment)   composeAppointment(parent,null,""String_Node_Str"",(Appointment)resource,-1);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(parent,null,""String_Node_Str"",(AppointmentResponse)resource,-1);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(parent,null,""String_Node_Str"",(AuditEvent)resource,-1);
 else   if (resource instanceof Basic)   composeBasic(parent,null,""String_Node_Str"",(Basic)resource,-1);
 else   if (resource instanceof Binary)   composeBinary(parent,null,""String_Node_Str"",(Binary)resource,-1);
 else   if (resource instanceof BodySite)   composeBodySite(parent,null,""String_Node_Str"",(BodySite)resource,-1);
 else   if (resource instanceof Bundle)   composeBundle(parent,null,""String_Node_Str"",(Bundle)resource,-1);
 else   if (resource instanceof CarePlan)   composeCarePlan(parent,null,""String_Node_Str"",(CarePlan)resource,-1);
 else   if (resource instanceof CareTeam)   composeCareTeam(parent,null,""String_Node_Str"",(CareTeam)resource,-1);
 else   if (resource instanceof Claim)   composeClaim(parent,null,""String_Node_Str"",(Claim)resource,-1);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(parent,null,""String_Node_Str"",(ClaimResponse)resource,-1);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(parent,null,""String_Node_Str"",(ClinicalImpression)resource,-1);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(parent,null,""String_Node_Str"",(CodeSystem)resource,-1);
 else   if (resource instanceof Communication)   composeCommunication(parent,null,""String_Node_Str"",(Communication)resource,-1);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(parent,null,""String_Node_Str"",(CommunicationRequest)resource,-1);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(parent,null,""String_Node_Str"",(CompartmentDefinition)resource,-1);
 else   if (resource instanceof Composition)   composeComposition(parent,null,""String_Node_Str"",(Composition)resource,-1);
 else   if (resource instanceof ConceptMap)   composeConceptMap(parent,null,""String_Node_Str"",(ConceptMap)resource,-1);
 else   if (resource instanceof Condition)   composeCondition(parent,null,""String_Node_Str"",(Condition)resource,-1);
 else   if (resource instanceof Conformance)   composeConformance(parent,null,""String_Node_Str"",(Conformance)resource,-1);
 else   if (resource instanceof Consent)   composeConsent(parent,null,""String_Node_Str"",(Consent)resource,-1);
 else   if (resource instanceof Contract)   composeContract(parent,null,""String_Node_Str"",(Contract)resource,-1);
 else   if (resource instanceof Coverage)   composeCoverage(parent,null,""String_Node_Str"",(Coverage)resource,-1);
 else   if (resource instanceof DataElement)   composeDataElement(parent,null,""String_Node_Str"",(DataElement)resource,-1);
 else   if (resource instanceof DecisionSupportRule)   composeDecisionSupportRule(parent,null,""String_Node_Str"",(DecisionSupportRule)resource,-1);
 else   if (resource instanceof DecisionSupportServiceModule)   composeDecisionSupportServiceModule(parent,null,""String_Node_Str"",(DecisionSupportServiceModule)resource,-1);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(parent,null,""String_Node_Str"",(DetectedIssue)resource,-1);
 else   if (resource instanceof Device)   composeDevice(parent,null,""String_Node_Str"",(Device)resource,-1);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(parent,null,""String_Node_Str"",(DeviceComponent)resource,-1);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(parent,null,""String_Node_Str"",(DeviceMetric)resource,-1);
 else   if (resource instanceof DeviceUseRequest)   composeDeviceUseRequest(parent,null,""String_Node_Str"",(DeviceUseRequest)resource,-1);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(parent,null,""String_Node_Str"",(DeviceUseStatement)resource,-1);
 else   if (resource instanceof DiagnosticOrder)   composeDiagnosticOrder(parent,null,""String_Node_Str"",(DiagnosticOrder)resource,-1);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(parent,null,""String_Node_Str"",(DiagnosticReport)resource,-1);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(parent,null,""String_Node_Str"",(DocumentManifest)resource,-1);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(parent,null,""String_Node_Str"",(DocumentReference)resource,-1);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(parent,null,""String_Node_Str"",(EligibilityRequest)resource,-1);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(parent,null,""String_Node_Str"",(EligibilityResponse)resource,-1);
 else   if (resource instanceof Encounter)   composeEncounter(parent,null,""String_Node_Str"",(Encounter)resource,-1);
 else   if (resource instanceof Endpoint)   composeEndpoint(parent,null,""String_Node_Str"",(Endpoint)resource,-1);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(parent,null,""String_Node_Str"",(EnrollmentRequest)resource,-1);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(parent,null,""String_Node_Str"",(EnrollmentResponse)resource,-1);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(parent,null,""String_Node_Str"",(EpisodeOfCare)resource,-1);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(parent,null,""String_Node_Str"",(ExpansionProfile)resource,-1);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(parent,null,""String_Node_Str"",(ExplanationOfBenefit)resource,-1);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(parent,null,""String_Node_Str"",(FamilyMemberHistory)resource,-1);
 else   if (resource instanceof Flag)   composeFlag(parent,null,""String_Node_Str"",(Flag)resource,-1);
 else   if (resource instanceof Goal)   composeGoal(parent,null,""String_Node_Str"",(Goal)resource,-1);
 else   if (resource instanceof Group)   composeGroup(parent,null,""String_Node_Str"",(Group)resource,-1);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(parent,null,""String_Node_Str"",(GuidanceResponse)resource,-1);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(parent,null,""String_Node_Str"",(HealthcareService)resource,-1);
 else   if (resource instanceof ImagingManifest)   composeImagingManifest(parent,null,""String_Node_Str"",(ImagingManifest)resource,-1);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(parent,null,""String_Node_Str"",(ImagingStudy)resource,-1);
 else   if (resource instanceof Immunization)   composeImmunization(parent,null,""String_Node_Str"",(Immunization)resource,-1);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(parent,null,""String_Node_Str"",(ImmunizationRecommendation)resource,-1);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(parent,null,""String_Node_Str"",(ImplementationGuide)resource,-1);
 else   if (resource instanceof Library)   composeLibrary(parent,null,""String_Node_Str"",(Library)resource,-1);
 else   if (resource instanceof Linkage)   composeLinkage(parent,null,""String_Node_Str"",(Linkage)resource,-1);
 else   if (resource instanceof ListResource)   composeListResource(parent,null,""String_Node_Str"",(ListResource)resource,-1);
 else   if (resource instanceof Location)   composeLocation(parent,null,""String_Node_Str"",(Location)resource,-1);
 else   if (resource instanceof Measure)   composeMeasure(parent,null,""String_Node_Str"",(Measure)resource,-1);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(parent,null,""String_Node_Str"",(MeasureReport)resource,-1);
 else   if (resource instanceof Media)   composeMedia(parent,null,""String_Node_Str"",(Media)resource,-1);
 else   if (resource instanceof Medication)   composeMedication(parent,null,""String_Node_Str"",(Medication)resource,-1);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(parent,null,""String_Node_Str"",(MedicationAdministration)resource,-1);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(parent,null,""String_Node_Str"",(MedicationDispense)resource,-1);
 else   if (resource instanceof MedicationOrder)   composeMedicationOrder(parent,null,""String_Node_Str"",(MedicationOrder)resource,-1);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(parent,null,""String_Node_Str"",(MedicationStatement)resource,-1);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(parent,null,""String_Node_Str"",(MessageHeader)resource,-1);
 else   if (resource instanceof ModuleDefinition)   composeModuleDefinition(parent,null,""String_Node_Str"",(ModuleDefinition)resource,-1);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(parent,null,""String_Node_Str"",(NamingSystem)resource,-1);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(parent,null,""String_Node_Str"",(NutritionOrder)resource,-1);
 else   if (resource instanceof Observation)   composeObservation(parent,null,""String_Node_Str"",(Observation)resource,-1);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(parent,null,""String_Node_Str"",(OperationDefinition)resource,-1);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(parent,null,""String_Node_Str"",(OperationOutcome)resource,-1);
 else   if (resource instanceof Order)   composeOrder(parent,null,""String_Node_Str"",(Order)resource,-1);
 else   if (resource instanceof OrderResponse)   composeOrderResponse(parent,null,""String_Node_Str"",(OrderResponse)resource,-1);
 else   if (resource instanceof OrderSet)   composeOrderSet(parent,null,""String_Node_Str"",(OrderSet)resource,-1);
 else   if (resource instanceof Organization)   composeOrganization(parent,null,""String_Node_Str"",(Organization)resource,-1);
 else   if (resource instanceof Patient)   composePatient(parent,null,""String_Node_Str"",(Patient)resource,-1);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(parent,null,""String_Node_Str"",(PaymentNotice)resource,-1);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(parent,null,""String_Node_Str"",(PaymentReconciliation)resource,-1);
 else   if (resource instanceof Person)   composePerson(parent,null,""String_Node_Str"",(Person)resource,-1);
 else   if (resource instanceof Practitioner)   composePractitioner(parent,null,""String_Node_Str"",(Practitioner)resource,-1);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(parent,null,""String_Node_Str"",(PractitionerRole)resource,-1);
 else   if (resource instanceof Procedure)   composeProcedure(parent,null,""String_Node_Str"",(Procedure)resource,-1);
 else   if (resource instanceof ProcedureRequest)   composeProcedureRequest(parent,null,""String_Node_Str"",(ProcedureRequest)resource,-1);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(parent,null,""String_Node_Str"",(ProcessRequest)resource,-1);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(parent,null,""String_Node_Str"",(ProcessResponse)resource,-1);
 else   if (resource instanceof Protocol)   composeProtocol(parent,null,""String_Node_Str"",(Protocol)resource,-1);
 else   if (resource instanceof Provenance)   composeProvenance(parent,null,""String_Node_Str"",(Provenance)resource,-1);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(parent,null,""String_Node_Str"",(Questionnaire)resource,-1);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(parent,null,""String_Node_Str"",(QuestionnaireResponse)resource,-1);
 else   if (resource instanceof ReferralRequest)   composeReferralRequest(parent,null,""String_Node_Str"",(ReferralRequest)resource,-1);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(parent,null,""String_Node_Str"",(RelatedPerson)resource,-1);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(parent,null,""String_Node_Str"",(RiskAssessment)resource,-1);
 else   if (resource instanceof Schedule)   composeSchedule(parent,null,""String_Node_Str"",(Schedule)resource,-1);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(parent,null,""String_Node_Str"",(SearchParameter)resource,-1);
 else   if (resource instanceof Sequence)   composeSequence(parent,null,""String_Node_Str"",(Sequence)resource,-1);
 else   if (resource instanceof Slot)   composeSlot(parent,null,""String_Node_Str"",(Slot)resource,-1);
 else   if (resource instanceof Specimen)   composeSpecimen(parent,null,""String_Node_Str"",(Specimen)resource,-1);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(parent,null,""String_Node_Str"",(StructureDefinition)resource,-1);
 else   if (resource instanceof StructureMap)   composeStructureMap(parent,null,""String_Node_Str"",(StructureMap)resource,-1);
 else   if (resource instanceof Subscription)   composeSubscription(parent,null,""String_Node_Str"",(Subscription)resource,-1);
 else   if (resource instanceof Substance)   composeSubstance(parent,null,""String_Node_Str"",(Substance)resource,-1);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(parent,null,""String_Node_Str"",(SupplyDelivery)resource,-1);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(parent,null,""String_Node_Str"",(SupplyRequest)resource,-1);
 else   if (resource instanceof Task)   composeTask(parent,null,""String_Node_Str"",(Task)resource,-1);
 else   if (resource instanceof TestScript)   composeTestScript(parent,null,""String_Node_Str"",(TestScript)resource,-1);
 else   if (resource instanceof ValueSet)   composeValueSet(parent,null,""String_Node_Str"",(ValueSet)resource,-1);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(parent,null,""String_Node_Str"",(VisionPrescription)resource,-1);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}","@Override protected void composeResource(Complex parent,Resource resource){
  if (resource instanceof Parameters)   composeParameters(parent,null,""String_Node_Str"",(Parameters)resource,-1);
 else   if (resource instanceof Account)   composeAccount(parent,null,""String_Node_Str"",(Account)resource,-1);
 else   if (resource instanceof ActivityDefinition)   composeActivityDefinition(parent,null,""String_Node_Str"",(ActivityDefinition)resource,-1);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(parent,null,""String_Node_Str"",(AllergyIntolerance)resource,-1);
 else   if (resource instanceof Appointment)   composeAppointment(parent,null,""String_Node_Str"",(Appointment)resource,-1);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(parent,null,""String_Node_Str"",(AppointmentResponse)resource,-1);
 else   if (resource instanceof AuditEvent)   composeAuditEvent(parent,null,""String_Node_Str"",(AuditEvent)resource,-1);
 else   if (resource instanceof Basic)   composeBasic(parent,null,""String_Node_Str"",(Basic)resource,-1);
 else   if (resource instanceof Binary)   composeBinary(parent,null,""String_Node_Str"",(Binary)resource,-1);
 else   if (resource instanceof BodySite)   composeBodySite(parent,null,""String_Node_Str"",(BodySite)resource,-1);
 else   if (resource instanceof Bundle)   composeBundle(parent,null,""String_Node_Str"",(Bundle)resource,-1);
 else   if (resource instanceof CarePlan)   composeCarePlan(parent,null,""String_Node_Str"",(CarePlan)resource,-1);
 else   if (resource instanceof CareTeam)   composeCareTeam(parent,null,""String_Node_Str"",(CareTeam)resource,-1);
 else   if (resource instanceof Claim)   composeClaim(parent,null,""String_Node_Str"",(Claim)resource,-1);
 else   if (resource instanceof ClaimResponse)   composeClaimResponse(parent,null,""String_Node_Str"",(ClaimResponse)resource,-1);
 else   if (resource instanceof ClinicalImpression)   composeClinicalImpression(parent,null,""String_Node_Str"",(ClinicalImpression)resource,-1);
 else   if (resource instanceof CodeSystem)   composeCodeSystem(parent,null,""String_Node_Str"",(CodeSystem)resource,-1);
 else   if (resource instanceof Communication)   composeCommunication(parent,null,""String_Node_Str"",(Communication)resource,-1);
 else   if (resource instanceof CommunicationRequest)   composeCommunicationRequest(parent,null,""String_Node_Str"",(CommunicationRequest)resource,-1);
 else   if (resource instanceof CompartmentDefinition)   composeCompartmentDefinition(parent,null,""String_Node_Str"",(CompartmentDefinition)resource,-1);
 else   if (resource instanceof Composition)   composeComposition(parent,null,""String_Node_Str"",(Composition)resource,-1);
 else   if (resource instanceof ConceptMap)   composeConceptMap(parent,null,""String_Node_Str"",(ConceptMap)resource,-1);
 else   if (resource instanceof Condition)   composeCondition(parent,null,""String_Node_Str"",(Condition)resource,-1);
 else   if (resource instanceof Conformance)   composeConformance(parent,null,""String_Node_Str"",(Conformance)resource,-1);
 else   if (resource instanceof Consent)   composeConsent(parent,null,""String_Node_Str"",(Consent)resource,-1);
 else   if (resource instanceof Contract)   composeContract(parent,null,""String_Node_Str"",(Contract)resource,-1);
 else   if (resource instanceof Coverage)   composeCoverage(parent,null,""String_Node_Str"",(Coverage)resource,-1);
 else   if (resource instanceof DataElement)   composeDataElement(parent,null,""String_Node_Str"",(DataElement)resource,-1);
 else   if (resource instanceof DecisionSupportRule)   composeDecisionSupportRule(parent,null,""String_Node_Str"",(DecisionSupportRule)resource,-1);
 else   if (resource instanceof DecisionSupportServiceModule)   composeDecisionSupportServiceModule(parent,null,""String_Node_Str"",(DecisionSupportServiceModule)resource,-1);
 else   if (resource instanceof DetectedIssue)   composeDetectedIssue(parent,null,""String_Node_Str"",(DetectedIssue)resource,-1);
 else   if (resource instanceof Device)   composeDevice(parent,null,""String_Node_Str"",(Device)resource,-1);
 else   if (resource instanceof DeviceComponent)   composeDeviceComponent(parent,null,""String_Node_Str"",(DeviceComponent)resource,-1);
 else   if (resource instanceof DeviceMetric)   composeDeviceMetric(parent,null,""String_Node_Str"",(DeviceMetric)resource,-1);
 else   if (resource instanceof DeviceUseRequest)   composeDeviceUseRequest(parent,null,""String_Node_Str"",(DeviceUseRequest)resource,-1);
 else   if (resource instanceof DeviceUseStatement)   composeDeviceUseStatement(parent,null,""String_Node_Str"",(DeviceUseStatement)resource,-1);
 else   if (resource instanceof DiagnosticOrder)   composeDiagnosticOrder(parent,null,""String_Node_Str"",(DiagnosticOrder)resource,-1);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(parent,null,""String_Node_Str"",(DiagnosticReport)resource,-1);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(parent,null,""String_Node_Str"",(DocumentManifest)resource,-1);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(parent,null,""String_Node_Str"",(DocumentReference)resource,-1);
 else   if (resource instanceof EligibilityRequest)   composeEligibilityRequest(parent,null,""String_Node_Str"",(EligibilityRequest)resource,-1);
 else   if (resource instanceof EligibilityResponse)   composeEligibilityResponse(parent,null,""String_Node_Str"",(EligibilityResponse)resource,-1);
 else   if (resource instanceof Encounter)   composeEncounter(parent,null,""String_Node_Str"",(Encounter)resource,-1);
 else   if (resource instanceof Endpoint)   composeEndpoint(parent,null,""String_Node_Str"",(Endpoint)resource,-1);
 else   if (resource instanceof EnrollmentRequest)   composeEnrollmentRequest(parent,null,""String_Node_Str"",(EnrollmentRequest)resource,-1);
 else   if (resource instanceof EnrollmentResponse)   composeEnrollmentResponse(parent,null,""String_Node_Str"",(EnrollmentResponse)resource,-1);
 else   if (resource instanceof EpisodeOfCare)   composeEpisodeOfCare(parent,null,""String_Node_Str"",(EpisodeOfCare)resource,-1);
 else   if (resource instanceof ExpansionProfile)   composeExpansionProfile(parent,null,""String_Node_Str"",(ExpansionProfile)resource,-1);
 else   if (resource instanceof ExplanationOfBenefit)   composeExplanationOfBenefit(parent,null,""String_Node_Str"",(ExplanationOfBenefit)resource,-1);
 else   if (resource instanceof FamilyMemberHistory)   composeFamilyMemberHistory(parent,null,""String_Node_Str"",(FamilyMemberHistory)resource,-1);
 else   if (resource instanceof Flag)   composeFlag(parent,null,""String_Node_Str"",(Flag)resource,-1);
 else   if (resource instanceof Goal)   composeGoal(parent,null,""String_Node_Str"",(Goal)resource,-1);
 else   if (resource instanceof Group)   composeGroup(parent,null,""String_Node_Str"",(Group)resource,-1);
 else   if (resource instanceof GuidanceResponse)   composeGuidanceResponse(parent,null,""String_Node_Str"",(GuidanceResponse)resource,-1);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(parent,null,""String_Node_Str"",(HealthcareService)resource,-1);
 else   if (resource instanceof ImagingManifest)   composeImagingManifest(parent,null,""String_Node_Str"",(ImagingManifest)resource,-1);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(parent,null,""String_Node_Str"",(ImagingStudy)resource,-1);
 else   if (resource instanceof Immunization)   composeImmunization(parent,null,""String_Node_Str"",(Immunization)resource,-1);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(parent,null,""String_Node_Str"",(ImmunizationRecommendation)resource,-1);
 else   if (resource instanceof ImplementationGuide)   composeImplementationGuide(parent,null,""String_Node_Str"",(ImplementationGuide)resource,-1);
 else   if (resource instanceof Library)   composeLibrary(parent,null,""String_Node_Str"",(Library)resource,-1);
 else   if (resource instanceof Linkage)   composeLinkage(parent,null,""String_Node_Str"",(Linkage)resource,-1);
 else   if (resource instanceof ListResource)   composeListResource(parent,null,""String_Node_Str"",(ListResource)resource,-1);
 else   if (resource instanceof Location)   composeLocation(parent,null,""String_Node_Str"",(Location)resource,-1);
 else   if (resource instanceof Measure)   composeMeasure(parent,null,""String_Node_Str"",(Measure)resource,-1);
 else   if (resource instanceof MeasureReport)   composeMeasureReport(parent,null,""String_Node_Str"",(MeasureReport)resource,-1);
 else   if (resource instanceof Media)   composeMedia(parent,null,""String_Node_Str"",(Media)resource,-1);
 else   if (resource instanceof Medication)   composeMedication(parent,null,""String_Node_Str"",(Medication)resource,-1);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(parent,null,""String_Node_Str"",(MedicationAdministration)resource,-1);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(parent,null,""String_Node_Str"",(MedicationDispense)resource,-1);
 else   if (resource instanceof MedicationOrder)   composeMedicationOrder(parent,null,""String_Node_Str"",(MedicationOrder)resource,-1);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(parent,null,""String_Node_Str"",(MedicationStatement)resource,-1);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(parent,null,""String_Node_Str"",(MessageHeader)resource,-1);
 else   if (resource instanceof ModuleDefinition)   composeModuleDefinition(parent,null,""String_Node_Str"",(ModuleDefinition)resource,-1);
 else   if (resource instanceof NamingSystem)   composeNamingSystem(parent,null,""String_Node_Str"",(NamingSystem)resource,-1);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(parent,null,""String_Node_Str"",(NutritionOrder)resource,-1);
 else   if (resource instanceof Observation)   composeObservation(parent,null,""String_Node_Str"",(Observation)resource,-1);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(parent,null,""String_Node_Str"",(OperationDefinition)resource,-1);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(parent,null,""String_Node_Str"",(OperationOutcome)resource,-1);
 else   if (resource instanceof Order)   composeOrder(parent,null,""String_Node_Str"",(Order)resource,-1);
 else   if (resource instanceof OrderResponse)   composeOrderResponse(parent,null,""String_Node_Str"",(OrderResponse)resource,-1);
 else   if (resource instanceof OrderSet)   composeOrderSet(parent,null,""String_Node_Str"",(OrderSet)resource,-1);
 else   if (resource instanceof Organization)   composeOrganization(parent,null,""String_Node_Str"",(Organization)resource,-1);
 else   if (resource instanceof Patient)   composePatient(parent,null,""String_Node_Str"",(Patient)resource,-1);
 else   if (resource instanceof PaymentNotice)   composePaymentNotice(parent,null,""String_Node_Str"",(PaymentNotice)resource,-1);
 else   if (resource instanceof PaymentReconciliation)   composePaymentReconciliation(parent,null,""String_Node_Str"",(PaymentReconciliation)resource,-1);
 else   if (resource instanceof Person)   composePerson(parent,null,""String_Node_Str"",(Person)resource,-1);
 else   if (resource instanceof Practitioner)   composePractitioner(parent,null,""String_Node_Str"",(Practitioner)resource,-1);
 else   if (resource instanceof PractitionerRole)   composePractitionerRole(parent,null,""String_Node_Str"",(PractitionerRole)resource,-1);
 else   if (resource instanceof Procedure)   composeProcedure(parent,null,""String_Node_Str"",(Procedure)resource,-1);
 else   if (resource instanceof ProcedureRequest)   composeProcedureRequest(parent,null,""String_Node_Str"",(ProcedureRequest)resource,-1);
 else   if (resource instanceof ProcessRequest)   composeProcessRequest(parent,null,""String_Node_Str"",(ProcessRequest)resource,-1);
 else   if (resource instanceof ProcessResponse)   composeProcessResponse(parent,null,""String_Node_Str"",(ProcessResponse)resource,-1);
 else   if (resource instanceof Protocol)   composeProtocol(parent,null,""String_Node_Str"",(Protocol)resource,-1);
 else   if (resource instanceof Provenance)   composeProvenance(parent,null,""String_Node_Str"",(Provenance)resource,-1);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(parent,null,""String_Node_Str"",(Questionnaire)resource,-1);
 else   if (resource instanceof QuestionnaireResponse)   composeQuestionnaireResponse(parent,null,""String_Node_Str"",(QuestionnaireResponse)resource,-1);
 else   if (resource instanceof ReferralRequest)   composeReferralRequest(parent,null,""String_Node_Str"",(ReferralRequest)resource,-1);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(parent,null,""String_Node_Str"",(RelatedPerson)resource,-1);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(parent,null,""String_Node_Str"",(RiskAssessment)resource,-1);
 else   if (resource instanceof Schedule)   composeSchedule(parent,null,""String_Node_Str"",(Schedule)resource,-1);
 else   if (resource instanceof SearchParameter)   composeSearchParameter(parent,null,""String_Node_Str"",(SearchParameter)resource,-1);
 else   if (resource instanceof Sequence)   composeSequence(parent,null,""String_Node_Str"",(Sequence)resource,-1);
 else   if (resource instanceof Slot)   composeSlot(parent,null,""String_Node_Str"",(Slot)resource,-1);
 else   if (resource instanceof Specimen)   composeSpecimen(parent,null,""String_Node_Str"",(Specimen)resource,-1);
 else   if (resource instanceof StructureDefinition)   composeStructureDefinition(parent,null,""String_Node_Str"",(StructureDefinition)resource,-1);
 else   if (resource instanceof StructureMap)   composeStructureMap(parent,null,""String_Node_Str"",(StructureMap)resource,-1);
 else   if (resource instanceof Subscription)   composeSubscription(parent,null,""String_Node_Str"",(Subscription)resource,-1);
 else   if (resource instanceof Substance)   composeSubstance(parent,null,""String_Node_Str"",(Substance)resource,-1);
 else   if (resource instanceof SupplyDelivery)   composeSupplyDelivery(parent,null,""String_Node_Str"",(SupplyDelivery)resource,-1);
 else   if (resource instanceof SupplyRequest)   composeSupplyRequest(parent,null,""String_Node_Str"",(SupplyRequest)resource,-1);
 else   if (resource instanceof Task)   composeTask(parent,null,""String_Node_Str"",(Task)resource,-1);
 else   if (resource instanceof TestScript)   composeTestScript(parent,null,""String_Node_Str"",(TestScript)resource,-1);
 else   if (resource instanceof ValueSet)   composeValueSet(parent,null,""String_Node_Str"",(ValueSet)resource,-1);
 else   if (resource instanceof VisionPrescription)   composeVisionPrescription(parent,null,""String_Node_Str"",(VisionPrescription)resource,-1);
 else   throw new Error(""String_Node_Str"" + resource.getClass().getName());
}",0.995132833096735
24015,"public static org.hl7.fhir.dstu2.model.MedicationStatement.MedicationStatementDosageComponent convertMedicationStatementDosageComponent(org.hl7.fhir.dstu3.model.MedicationStatement.MedicationStatementDosageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationStatement.MedicationStatementDosageComponent tgt=new org.hl7.fhir.dstu2.model.MedicationStatement.MedicationStatementDosageComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setTiming(convertTiming(src.getTiming()));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setQuantity(convertType(src.getQuantity()));
  tgt.setRate(convertType(src.getRate()));
  tgt.setMaxDosePerPeriod(convertRatio(src.getMaxDosePerPeriod()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.MedicationStatement.MedicationStatementDosageComponent convertMedicationStatementDosageComponent(org.hl7.fhir.dstu3.model.MedicationStatement.MedicationStatementDosageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationStatement.MedicationStatementDosageComponent tgt=new org.hl7.fhir.dstu2.model.MedicationStatement.MedicationStatementDosageComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setTiming(convertTiming(src.getTiming()));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setRate(convertType(src.getRate()));
  tgt.setMaxDosePerPeriod(convertRatio(src.getMaxDosePerPeriod()));
  return tgt;
}",0.9677066228790366
24016,"public static org.hl7.fhir.dstu2.model.MedicationStatement convertMedicationStatement(org.hl7.fhir.dstu3.model.MedicationStatement src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationStatement tgt=new org.hl7.fhir.dstu2.model.MedicationStatement();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertMedicationStatementStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEffective(convertType(src.getEffective()));
  tgt.setInformationSource(convertReference(src.getInformationSource()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingInformation())   tgt.addSupportingInformation(convertReference(t));
  tgt.setDateAsserted(src.getDateAsserted());
  tgt.setWasNotTaken(src.getWasNotTaken());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonNotTaken())   tgt.addReasonNotTaken(convertCodeableConcept(t));
  tgt.setReasonForUse(convertType(src.getReasonForUse()));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  for (  org.hl7.fhir.dstu3.model.MedicationStatement.MedicationStatementDosageComponent t : src.getDosage())   tgt.addDosage(convertMedicationStatementDosageComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.MedicationStatement convertMedicationStatement(org.hl7.fhir.dstu3.model.MedicationStatement src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationStatement tgt=new org.hl7.fhir.dstu2.model.MedicationStatement();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertMedicationStatementStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEffective(convertType(src.getEffective()));
  tgt.setInformationSource(convertReference(src.getInformationSource()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingInformation())   tgt.addSupportingInformation(convertReference(t));
  tgt.setDateAsserted(src.getDateAsserted());
  tgt.setWasNotTaken(src.getWasNotTaken());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonNotTaken())   tgt.addReasonNotTaken(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  for (  org.hl7.fhir.dstu3.model.MedicationStatement.MedicationStatementDosageComponent t : src.getDosage())   tgt.addDosage(convertMedicationStatementDosageComponent(t));
  return tgt;
}",0.8071047957371226
24017,"public static org.hl7.fhir.dstu2.model.CarePlan convertCarePlan(org.hl7.fhir.dstu3.model.CarePlan src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.CarePlan tgt=new org.hl7.fhir.dstu2.model.CarePlan();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setStatus(convertCarePlanStatus(src.getStatus()));
  tgt.setContext(convertReference(src.getContext()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthor())   tgt.addAuthor(convertReference(t));
  tgt.setModified(src.getModified());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCategory())   tgt.addCategory(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAddresses())   tgt.addAddresses(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupport())   tgt.addSupport(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CarePlan.CarePlanRelatedPlanComponent t : src.getRelatedPlan())   tgt.addRelatedPlan(convertCarePlanRelatedPlanComponent(t));
  for (  org.hl7.fhir.dstu3.model.CarePlan.CarePlanParticipantComponent t : src.getParticipant())   tgt.addParticipant(convertCarePlanParticipantComponent(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getGoal())   tgt.addGoal(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CarePlan.CarePlanActivityComponent t : src.getActivity())   tgt.addActivity(convertCarePlanActivityComponent(t));
  tgt.setNote(convertAnnotation(src.getNote()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.CarePlan convertCarePlan(org.hl7.fhir.dstu3.model.CarePlan src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.CarePlan tgt=new org.hl7.fhir.dstu2.model.CarePlan();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setStatus(convertCarePlanStatus(src.getStatus()));
  tgt.setContext(convertReference(src.getContext()));
  tgt.setPeriod(convertPeriod(src.getPeriod()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAuthor())   tgt.addAuthor(convertReference(t));
  tgt.setModified(src.getModified());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCategory())   tgt.addCategory(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAddresses())   tgt.addAddresses(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupport())   tgt.addSupport(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CarePlan.CarePlanRelatedPlanComponent t : src.getRelatedPlan())   tgt.addRelatedPlan(convertCarePlanRelatedPlanComponent(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getGoal())   tgt.addGoal(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.CarePlan.CarePlanActivityComponent t : src.getActivity())   tgt.addActivity(convertCarePlanActivityComponent(t));
  tgt.setNote(convertAnnotation(src.getNote()));
  return tgt;
}",0.8087529976019184
24018,"public static org.hl7.fhir.dstu2.model.Goal convertGoal(org.hl7.fhir.dstu3.model.Goal src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Goal tgt=new org.hl7.fhir.dstu2.model.Goal();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setStart(convertType(src.getStart()));
  tgt.setTarget(convertType(src.getTarget()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCategory())   tgt.addCategory(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  tgt.setStatus(convertGoalStatus(src.getStatus()));
  tgt.setStatusDate(src.getStatusDate());
  tgt.setStatusReason(convertCodeableConcept(src.getStatusReason()));
  tgt.setAuthor(convertReference(src.getAuthor()));
  tgt.setPriority(convertCodeableConcept(src.getPriority()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAddresses())   tgt.addAddresses(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.addNote(convertAnnotation(t));
  for (  org.hl7.fhir.dstu3.model.Goal.GoalOutcomeComponent t : src.getOutcome())   tgt.addOutcome(convertGoalOutcomeComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.Goal convertGoal(org.hl7.fhir.dstu3.model.Goal src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Goal tgt=new org.hl7.fhir.dstu2.model.Goal();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setStart(convertType(src.getStart()));
  tgt.setTarget(convertType(src.getTarget()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCategory())   tgt.addCategory(convertCodeableConcept(t));
  tgt.setDescription(src.getDescription());
  tgt.setStatus(convertGoalStatus(src.getStatus()));
  tgt.setStatusDate(src.getStatusDate());
  tgt.setStatusReason(convertCodeableConcept(src.getStatusReason()));
  tgt.setPriority(convertCodeableConcept(src.getPriority()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getAddresses())   tgt.addAddresses(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.addNote(convertAnnotation(t));
  for (  org.hl7.fhir.dstu3.model.Goal.GoalOutcomeComponent t : src.getOutcome())   tgt.addOutcome(convertGoalOutcomeComponent(t));
  return tgt;
}",0.7071651090342679
24019,"public static org.hl7.fhir.dstu2.model.SupplyRequest convertSupplyRequest(org.hl7.fhir.dstu3.model.SupplyRequest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.SupplyRequest tgt=new org.hl7.fhir.dstu2.model.SupplyRequest();
  copyDomainResource(src,tgt);
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setSource(convertReference(src.getSource()));
  tgt.setDate(src.getDate());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setStatus(convertSupplyRequestStatus(src.getStatus()));
  tgt.setKind(convertCodeableConcept(src.getKind()));
  tgt.setOrderedItem(convertReference(src.getOrderedItem()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupplier())   tgt.addSupplier(convertReference(t));
  tgt.setReason(convertType(src.getReason()));
  tgt.setWhen(convertSupplyRequestWhenComponent(src.getWhen()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.SupplyRequest convertSupplyRequest(org.hl7.fhir.dstu3.model.SupplyRequest src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.SupplyRequest tgt=new org.hl7.fhir.dstu2.model.SupplyRequest();
  copyDomainResource(src,tgt);
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setSource(convertReference(src.getSource()));
  tgt.setDate(src.getDate());
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setStatus(convertSupplyRequestStatus(src.getStatus()));
  tgt.setKind(convertCodeableConcept(src.getKind()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupplier())   tgt.addSupplier(convertReference(t));
  tgt.setReason(convertType(src.getReason()));
  tgt.setWhen(convertSupplyRequestWhenComponent(src.getWhen()));
  return tgt;
}",0.9645714285714284
24020,"public static org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderSubstitutionComponent convertMedicationOrderSubstitutionComponent(org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderSubstitutionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderSubstitutionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderSubstitutionComponent();
  copyElement(src,tgt);
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setReason(convertCodeableConcept(src.getReason()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderSubstitutionComponent convertMedicationOrderSubstitutionComponent(org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderSubstitutionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderSubstitutionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderSubstitutionComponent();
  copyElement(src,tgt);
  tgt.setReason(convertCodeableConcept(src.getReason()));
  return tgt;
}",0.952548330404218
24021,"private static org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionKind convertStructureDefinitionKind(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionKind src) throws FHIRException {
  if (src == null)   return null;
switch (src) {
case DATATYPE:
    return org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionKind.DATATYPE;
case RESOURCE:
  return org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionKind.RESOURCE;
case LOGICAL:
return org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionKind.LOGICAL;
default :
return org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionKind.NULL;
}
}","private static org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionKind convertStructureDefinitionKind(org.hl7.fhir.dstu3.model.StructureDefinition.StructureDefinitionKind src) throws FHIRException {
  if (src == null)   return null;
switch (src) {
case PRIMITIVETYPE:
    return org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionKind.DATATYPE;
case COMPLEXTYPE:
  return org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionKind.DATATYPE;
case RESOURCE:
return org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionKind.RESOURCE;
case LOGICAL:
return org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionKind.LOGICAL;
default :
return org.hl7.fhir.dstu2.model.StructureDefinition.StructureDefinitionKind.NULL;
}
}",0.9184668989547038
24022,"public static org.hl7.fhir.dstu2.model.EligibilityResponse convertEligibilityResponse(org.hl7.fhir.dstu3.model.EligibilityResponse src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.EligibilityResponse tgt=new org.hl7.fhir.dstu2.model.EligibilityResponse();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasRequestReference())   tgt.setRequest((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequest()));
  tgt.setOutcome(convertRemittanceOutcome(src.getOutcome()));
  tgt.setDisposition(src.getDisposition());
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  if (src.hasOrganization())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  if (src.hasRequestProvider())   tgt.setRequestProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestProvider()));
  if (src.hasRequestOrganization())   tgt.setRequestOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestOrganization()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.EligibilityResponse convertEligibilityResponse(org.hl7.fhir.dstu3.model.EligibilityResponse src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.EligibilityResponse tgt=new org.hl7.fhir.dstu2.model.EligibilityResponse();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  if (src.hasRequestReference())   tgt.setRequest((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequest()));
  tgt.setDisposition(src.getDisposition());
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  if (src.hasOrganization())   tgt.setOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getOrganization()));
  if (src.hasRequestProvider())   tgt.setRequestProvider((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestProvider()));
  if (src.hasRequestOrganization())   tgt.setRequestOrganization((org.hl7.fhir.dstu2.model.Reference)convertType(src.getRequestOrganization()));
  return tgt;
}",0.974252491694352
24023,"public static org.hl7.fhir.dstu2.model.DiagnosticOrder convertDiagnosticOrder(org.hl7.fhir.dstu3.model.DiagnosticOrder src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DiagnosticOrder tgt=new org.hl7.fhir.dstu2.model.DiagnosticOrder();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertDiagnosticOrderStatus(src.getStatus()));
  tgt.setPriority(convertDiagnosticOrderPriority(src.getPriority()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setOrderer(convertReference(src.getOrderer()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingInformation())   tgt.addSupportingInformation(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSpecimen())   tgt.addSpecimen(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.DiagnosticOrder.DiagnosticOrderEventComponent t : src.getEvent())   tgt.addEvent(convertDiagnosticOrderEventComponent(t));
  for (  org.hl7.fhir.dstu3.model.DiagnosticOrder.DiagnosticOrderItemComponent t : src.getItem())   tgt.addItem(convertDiagnosticOrderItemComponent(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.addNote(convertAnnotation(t));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.DiagnosticOrder convertDiagnosticOrder(org.hl7.fhir.dstu3.model.DiagnosticOrder src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DiagnosticOrder tgt=new org.hl7.fhir.dstu2.model.DiagnosticOrder();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertDiagnosticOrderStatus(src.getStatus()));
  tgt.setPriority(convertDiagnosticOrderPriority(src.getPriority()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setOrderer(convertReference(src.getOrderer()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReason())   tgt.addReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSupportingInformation())   tgt.addSupportingInformation(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.DiagnosticOrder.DiagnosticOrderEventComponent t : src.getEvent())   tgt.addEvent(convertDiagnosticOrderEventComponent(t));
  for (  org.hl7.fhir.dstu3.model.DiagnosticOrder.DiagnosticOrderItemComponent t : src.getItem())   tgt.addItem(convertDiagnosticOrderItemComponent(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.addNote(convertAnnotation(t));
  return tgt;
}",0.7592400690846287
24024,"public static org.hl7.fhir.dstu2.model.DiagnosticReport convertDiagnosticReport(org.hl7.fhir.dstu3.model.DiagnosticReport src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DiagnosticReport tgt=new org.hl7.fhir.dstu2.model.DiagnosticReport();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertDiagnosticReportStatus(src.getStatus()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setEffective(convertType(src.getEffective()));
  tgt.setIssued(src.getIssued());
  tgt.setPerformer(convertReference(src.getPerformer()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getRequest())   tgt.addRequest(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSpecimen())   tgt.addSpecimen(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getResult())   tgt.addResult(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getImagingStudy())   tgt.addImagingStudy(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.DiagnosticReport.DiagnosticReportImageComponent t : src.getImage())   tgt.addImage(convertDiagnosticReportImageComponent(t));
  tgt.setConclusion(src.getConclusion());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCodedDiagnosis())   tgt.addCodedDiagnosis(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Attachment t : src.getPresentedForm())   tgt.addPresentedForm(convertAttachment(t));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.DiagnosticReport convertDiagnosticReport(org.hl7.fhir.dstu3.model.DiagnosticReport src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DiagnosticReport tgt=new org.hl7.fhir.dstu2.model.DiagnosticReport();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertDiagnosticReportStatus(src.getStatus()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setEffective(convertType(src.getEffective()));
  tgt.setIssued(src.getIssued());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getRequest())   tgt.addRequest(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSpecimen())   tgt.addSpecimen(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getResult())   tgt.addResult(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getImagingStudy())   tgt.addImagingStudy(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.DiagnosticReport.DiagnosticReportImageComponent t : src.getImage())   tgt.addImage(convertDiagnosticReportImageComponent(t));
  tgt.setConclusion(src.getConclusion());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getCodedDiagnosis())   tgt.addCodedDiagnosis(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Attachment t : src.getPresentedForm())   tgt.addPresentedForm(convertAttachment(t));
  return tgt;
}",0.4904679376083189
24025,"public static org.hl7.fhir.dstu2.model.EnrollmentResponse convertEnrollmentResponse(org.hl7.fhir.dstu3.model.EnrollmentResponse src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.EnrollmentResponse tgt=new org.hl7.fhir.dstu2.model.EnrollmentResponse();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setRequest(convertReference(src.getRequest()));
  tgt.setOutcome(convertRemittanceOutcome(src.getOutcome()));
  tgt.setDisposition(src.getDisposition());
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  tgt.setOrganization(convertReference(src.getOrganization()));
  tgt.setRequestProvider(convertReference(src.getRequestProvider()));
  tgt.setRequestOrganization(convertReference(src.getRequestOrganization()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.EnrollmentResponse convertEnrollmentResponse(org.hl7.fhir.dstu3.model.EnrollmentResponse src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.EnrollmentResponse tgt=new org.hl7.fhir.dstu2.model.EnrollmentResponse();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setRequest(convertReference(src.getRequest()));
  tgt.setDisposition(src.getDisposition());
  tgt.setRuleset(convertCoding(src.getRuleset()));
  tgt.setOriginalRuleset(convertCoding(src.getOriginalRuleset()));
  tgt.setCreated(src.getCreated());
  tgt.setOrganization(convertReference(src.getOrganization()));
  tgt.setRequestProvider(convertReference(src.getRequestProvider()));
  tgt.setRequestOrganization(convertReference(src.getRequestOrganization()));
  return tgt;
}",0.5936507936507937
24026,"public static org.hl7.fhir.dstu2.model.Observation.ObservationReferenceRangeComponent convertObservationReferenceRangeComponent(org.hl7.fhir.dstu3.model.Observation.ObservationReferenceRangeComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Observation.ObservationReferenceRangeComponent tgt=new org.hl7.fhir.dstu2.model.Observation.ObservationReferenceRangeComponent();
  copyElement(src,tgt);
  tgt.setLow(convertSimpleQuantity(src.getLow()));
  tgt.setHigh(convertSimpleQuantity(src.getHigh()));
  tgt.setMeaning(convertCodeableConcept(src.getMeaning()));
  tgt.setAge(convertRange(src.getAge()));
  tgt.setText(src.getText());
  return tgt;
}","public static org.hl7.fhir.dstu2.model.Observation.ObservationReferenceRangeComponent convertObservationReferenceRangeComponent(org.hl7.fhir.dstu3.model.Observation.ObservationReferenceRangeComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Observation.ObservationReferenceRangeComponent tgt=new org.hl7.fhir.dstu2.model.Observation.ObservationReferenceRangeComponent();
  copyElement(src,tgt);
  tgt.setLow(convertSimpleQuantity(src.getLow()));
  tgt.setHigh(convertSimpleQuantity(src.getHigh()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept c : src.getMeaning())   tgt.setMeaning(convertCodeableConcept(c));
  tgt.setAge(convertRange(src.getAge()));
  tgt.setText(src.getText());
  return tgt;
}",0.9134948096885812
24027,"public static org.hl7.fhir.dstu2.model.Substance.SubstanceIngredientComponent convertSubstanceIngredientComponent(org.hl7.fhir.dstu3.model.Substance.SubstanceIngredientComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Substance.SubstanceIngredientComponent tgt=new org.hl7.fhir.dstu2.model.Substance.SubstanceIngredientComponent();
  copyElement(src,tgt);
  tgt.setQuantity(convertRatio(src.getQuantity()));
  tgt.setSubstance(convertReference(src.getSubstance()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.Substance.SubstanceIngredientComponent convertSubstanceIngredientComponent(org.hl7.fhir.dstu3.model.Substance.SubstanceIngredientComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Substance.SubstanceIngredientComponent tgt=new org.hl7.fhir.dstu2.model.Substance.SubstanceIngredientComponent();
  copyElement(src,tgt);
  tgt.setQuantity(convertRatio(src.getQuantity()));
  return tgt;
}",0.9221556886227544
24028,"public static org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseDosageInstructionComponent convertMedicationDispenseDosageInstructionComponent(org.hl7.fhir.dstu3.model.MedicationDispense.MedicationDispenseDosageInstructionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseDosageInstructionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseDosageInstructionComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setAdditionalInstructions(convertCodeableConcept(src.getAdditionalInstructions()));
  tgt.setTiming(convertTiming(src.getTiming()));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setDose(convertType(src.getDose()));
  tgt.setRate(convertType(src.getRate()));
  tgt.setMaxDosePerPeriod(convertRatio(src.getMaxDosePerPeriod()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseDosageInstructionComponent convertMedicationDispenseDosageInstructionComponent(org.hl7.fhir.dstu3.model.MedicationDispense.MedicationDispenseDosageInstructionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseDosageInstructionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationDispense.MedicationDispenseDosageInstructionComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setTiming(convertTiming(src.getTiming()));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setDose(convertType(src.getDose()));
  tgt.setRate(convertType(src.getRate()));
  tgt.setMaxDosePerPeriod(convertRatio(src.getMaxDosePerPeriod()));
  return tgt;
}",0.9559686888454012
24029,"public static org.hl7.fhir.dstu2.model.Specimen.SpecimenCollectionComponent convertSpecimenCollectionComponent(org.hl7.fhir.dstu3.model.Specimen.SpecimenCollectionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Specimen.SpecimenCollectionComponent tgt=new org.hl7.fhir.dstu2.model.Specimen.SpecimenCollectionComponent();
  copyElement(src,tgt);
  tgt.setCollector(convertReference(src.getCollector()));
  tgt.addComment(src.getComment());
  tgt.setCollected(convertType(src.getCollected()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setBodySite(convertCodeableConcept(src.getBodySite()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.Specimen.SpecimenCollectionComponent convertSpecimenCollectionComponent(org.hl7.fhir.dstu3.model.Specimen.SpecimenCollectionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Specimen.SpecimenCollectionComponent tgt=new org.hl7.fhir.dstu2.model.Specimen.SpecimenCollectionComponent();
  copyElement(src,tgt);
  tgt.setCollector(convertReference(src.getCollector()));
  tgt.setCollected(convertType(src.getCollected()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setBodySite(convertCodeableConcept(src.getBodySite()));
  return tgt;
}",0.9750346740638004
24030,"public static org.hl7.fhir.dstu2.model.Resource convertResource(org.hl7.fhir.dstu3.model.Resource src) throws FHIRException {
  if (src == null)   return null;
  if (src instanceof org.hl7.fhir.dstu3.model.Parameters)   return convertParameters((org.hl7.fhir.dstu3.model.Parameters)src);
  if (src instanceof org.hl7.fhir.dstu3.model.AllergyIntolerance)   return convertAllergyIntolerance((org.hl7.fhir.dstu3.model.AllergyIntolerance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Appointment)   return convertAppointment((org.hl7.fhir.dstu3.model.Appointment)src);
  if (src instanceof org.hl7.fhir.dstu3.model.AppointmentResponse)   return convertAppointmentResponse((org.hl7.fhir.dstu3.model.AppointmentResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.AuditEvent)   return convertAuditEvent((org.hl7.fhir.dstu3.model.AuditEvent)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Basic)   return convertBasic((org.hl7.fhir.dstu3.model.Basic)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Binary)   return convertBinary((org.hl7.fhir.dstu3.model.Binary)src);
  if (src instanceof org.hl7.fhir.dstu3.model.BodySite)   return convertBodySite((org.hl7.fhir.dstu3.model.BodySite)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Bundle)   return convertBundle((org.hl7.fhir.dstu3.model.Bundle)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CarePlan)   return convertCarePlan((org.hl7.fhir.dstu3.model.CarePlan)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Claim)   return convertClaim((org.hl7.fhir.dstu3.model.Claim)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ClaimResponse)   return convertClaimResponse((org.hl7.fhir.dstu3.model.ClaimResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ClinicalImpression)   return convertClinicalImpression((org.hl7.fhir.dstu3.model.ClinicalImpression)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Communication)   return convertCommunication((org.hl7.fhir.dstu3.model.Communication)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CommunicationRequest)   return convertCommunicationRequest((org.hl7.fhir.dstu3.model.CommunicationRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Composition)   return convertComposition((org.hl7.fhir.dstu3.model.Composition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ConceptMap)   return convertConceptMap((org.hl7.fhir.dstu3.model.ConceptMap)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Condition)   return convertCondition((org.hl7.fhir.dstu3.model.Condition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Conformance)   return convertConformance((org.hl7.fhir.dstu3.model.Conformance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Contract)   return convertContract((org.hl7.fhir.dstu3.model.Contract)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Coverage)   return convertCoverage((org.hl7.fhir.dstu3.model.Coverage)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DataElement)   return convertDataElement((org.hl7.fhir.dstu3.model.DataElement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DetectedIssue)   return convertDetectedIssue((org.hl7.fhir.dstu3.model.DetectedIssue)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Device)   return convertDevice((org.hl7.fhir.dstu3.model.Device)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceComponent)   return convertDeviceComponent((org.hl7.fhir.dstu3.model.DeviceComponent)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceMetric)   return convertDeviceMetric((org.hl7.fhir.dstu3.model.DeviceMetric)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceUseRequest)   return convertDeviceUseRequest((org.hl7.fhir.dstu3.model.DeviceUseRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceUseStatement)   return convertDeviceUseStatement((org.hl7.fhir.dstu3.model.DeviceUseStatement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DiagnosticOrder)   return convertDiagnosticOrder((org.hl7.fhir.dstu3.model.DiagnosticOrder)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DiagnosticReport)   return convertDiagnosticReport((org.hl7.fhir.dstu3.model.DiagnosticReport)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DocumentManifest)   return convertDocumentManifest((org.hl7.fhir.dstu3.model.DocumentManifest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DocumentReference)   return convertDocumentReference((org.hl7.fhir.dstu3.model.DocumentReference)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EligibilityRequest)   return convertEligibilityRequest((org.hl7.fhir.dstu3.model.EligibilityRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EligibilityResponse)   return convertEligibilityResponse((org.hl7.fhir.dstu3.model.EligibilityResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Encounter)   return convertEncounter((org.hl7.fhir.dstu3.model.Encounter)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EnrollmentRequest)   return convertEnrollmentRequest((org.hl7.fhir.dstu3.model.EnrollmentRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EnrollmentResponse)   return convertEnrollmentResponse((org.hl7.fhir.dstu3.model.EnrollmentResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EpisodeOfCare)   return convertEpisodeOfCare((org.hl7.fhir.dstu3.model.EpisodeOfCare)src);
  if (src instanceof org.hl7.fhir.dstu3.model.FamilyMemberHistory)   return convertFamilyMemberHistory((org.hl7.fhir.dstu3.model.FamilyMemberHistory)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Flag)   return convertFlag((org.hl7.fhir.dstu3.model.Flag)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Goal)   return convertGoal((org.hl7.fhir.dstu3.model.Goal)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Group)   return convertGroup((org.hl7.fhir.dstu3.model.Group)src);
  if (src instanceof org.hl7.fhir.dstu3.model.HealthcareService)   return convertHealthcareService((org.hl7.fhir.dstu3.model.HealthcareService)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImagingObjectSelection)   return convertImagingObjectSelection((org.hl7.fhir.dstu3.model.ImagingObjectSelection)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImagingStudy)   return convertImagingStudy((org.hl7.fhir.dstu3.model.ImagingStudy)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Immunization)   return convertImmunization((org.hl7.fhir.dstu3.model.Immunization)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImmunizationRecommendation)   return convertImmunizationRecommendation((org.hl7.fhir.dstu3.model.ImmunizationRecommendation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImplementationGuide)   return convertImplementationGuide((org.hl7.fhir.dstu3.model.ImplementationGuide)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ListResource)   return convertList((org.hl7.fhir.dstu3.model.ListResource)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Location)   return convertLocation((org.hl7.fhir.dstu3.model.Location)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Media)   return convertMedia((org.hl7.fhir.dstu3.model.Media)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Medication)   return convertMedication((org.hl7.fhir.dstu3.model.Medication)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationAdministration)   return convertMedicationAdministration((org.hl7.fhir.dstu3.model.MedicationAdministration)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationDispense)   return convertMedicationDispense((org.hl7.fhir.dstu3.model.MedicationDispense)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationOrder)   return convertMedicationOrder((org.hl7.fhir.dstu3.model.MedicationOrder)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationStatement)   return convertMedicationStatement((org.hl7.fhir.dstu3.model.MedicationStatement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MessageHeader)   return convertMessageHeader((org.hl7.fhir.dstu3.model.MessageHeader)src);
  if (src instanceof org.hl7.fhir.dstu3.model.NamingSystem)   return convertNamingSystem((org.hl7.fhir.dstu3.model.NamingSystem)src);
  if (src instanceof org.hl7.fhir.dstu3.model.NutritionOrder)   return convertNutritionOrder((org.hl7.fhir.dstu3.model.NutritionOrder)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Observation)   return convertObservation((org.hl7.fhir.dstu3.model.Observation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationDefinition)   return convertOperationDefinition((org.hl7.fhir.dstu3.model.OperationDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationOutcome)   return convertOperationOutcome((org.hl7.fhir.dstu3.model.OperationOutcome)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Order)   return convertOrder((org.hl7.fhir.dstu3.model.Order)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OrderResponse)   return convertOrderResponse((org.hl7.fhir.dstu3.model.OrderResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Organization)   return convertOrganization((org.hl7.fhir.dstu3.model.Organization)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Patient)   return convertPatient((org.hl7.fhir.dstu3.model.Patient)src);
  if (src instanceof org.hl7.fhir.dstu3.model.PaymentNotice)   return convertPaymentNotice((org.hl7.fhir.dstu3.model.PaymentNotice)src);
  if (src instanceof org.hl7.fhir.dstu3.model.PaymentReconciliation)   return convertPaymentReconciliation((org.hl7.fhir.dstu3.model.PaymentReconciliation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Person)   return convertPerson((org.hl7.fhir.dstu3.model.Person)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Practitioner)   return convertPractitioner((org.hl7.fhir.dstu3.model.Practitioner)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Procedure)   return convertProcedure((org.hl7.fhir.dstu3.model.Procedure)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ProcedureRequest)   return convertProcedureRequest((org.hl7.fhir.dstu3.model.ProcedureRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ProcessRequest)   return convertProcessRequest((org.hl7.fhir.dstu3.model.ProcessRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ProcessResponse)   return convertProcessResponse((org.hl7.fhir.dstu3.model.ProcessResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Provenance)   return convertProvenance((org.hl7.fhir.dstu3.model.Provenance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Questionnaire)   return convertQuestionnaire((org.hl7.fhir.dstu3.model.Questionnaire)src);
  if (src instanceof org.hl7.fhir.dstu3.model.QuestionnaireResponse)   return convertQuestionnaireResponse((org.hl7.fhir.dstu3.model.QuestionnaireResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ReferralRequest)   return convertReferralRequest((org.hl7.fhir.dstu3.model.ReferralRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.RelatedPerson)   return convertRelatedPerson((org.hl7.fhir.dstu3.model.RelatedPerson)src);
  if (src instanceof org.hl7.fhir.dstu3.model.RiskAssessment)   return convertRiskAssessment((org.hl7.fhir.dstu3.model.RiskAssessment)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Schedule)   return convertSchedule((org.hl7.fhir.dstu3.model.Schedule)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SearchParameter)   return convertSearchParameter((org.hl7.fhir.dstu3.model.SearchParameter)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Slot)   return convertSlot((org.hl7.fhir.dstu3.model.Slot)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Specimen)   return convertSpecimen((org.hl7.fhir.dstu3.model.Specimen)src);
  if (src instanceof org.hl7.fhir.dstu3.model.StructureDefinition)   return convertStructureDefinition((org.hl7.fhir.dstu3.model.StructureDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Subscription)   return convertSubscription((org.hl7.fhir.dstu3.model.Subscription)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Substance)   return convertSubstance((org.hl7.fhir.dstu3.model.Substance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SupplyDelivery)   return convertSupplyDelivery((org.hl7.fhir.dstu3.model.SupplyDelivery)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SupplyRequest)   return convertSupplyRequest((org.hl7.fhir.dstu3.model.SupplyRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.TestScript)   return convertTestScript((org.hl7.fhir.dstu3.model.TestScript)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ValueSet)   return convertValueSet((org.hl7.fhir.dstu3.model.ValueSet)src);
  if (src instanceof org.hl7.fhir.dstu3.model.VisionPrescription)   return convertVisionPrescription((org.hl7.fhir.dstu3.model.VisionPrescription)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}","public static org.hl7.fhir.dstu2.model.Resource convertResource(org.hl7.fhir.dstu3.model.Resource src) throws FHIRException {
  if (src == null)   return null;
  if (src instanceof org.hl7.fhir.dstu3.model.Parameters)   return convertParameters((org.hl7.fhir.dstu3.model.Parameters)src);
  if (src instanceof org.hl7.fhir.dstu3.model.AllergyIntolerance)   return convertAllergyIntolerance((org.hl7.fhir.dstu3.model.AllergyIntolerance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Appointment)   return convertAppointment((org.hl7.fhir.dstu3.model.Appointment)src);
  if (src instanceof org.hl7.fhir.dstu3.model.AppointmentResponse)   return convertAppointmentResponse((org.hl7.fhir.dstu3.model.AppointmentResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.AuditEvent)   return convertAuditEvent((org.hl7.fhir.dstu3.model.AuditEvent)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Basic)   return convertBasic((org.hl7.fhir.dstu3.model.Basic)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Binary)   return convertBinary((org.hl7.fhir.dstu3.model.Binary)src);
  if (src instanceof org.hl7.fhir.dstu3.model.BodySite)   return convertBodySite((org.hl7.fhir.dstu3.model.BodySite)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Bundle)   return convertBundle((org.hl7.fhir.dstu3.model.Bundle)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CarePlan)   return convertCarePlan((org.hl7.fhir.dstu3.model.CarePlan)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ClinicalImpression)   return convertClinicalImpression((org.hl7.fhir.dstu3.model.ClinicalImpression)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Communication)   return convertCommunication((org.hl7.fhir.dstu3.model.Communication)src);
  if (src instanceof org.hl7.fhir.dstu3.model.CommunicationRequest)   return convertCommunicationRequest((org.hl7.fhir.dstu3.model.CommunicationRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Composition)   return convertComposition((org.hl7.fhir.dstu3.model.Composition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ConceptMap)   return convertConceptMap((org.hl7.fhir.dstu3.model.ConceptMap)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Condition)   return convertCondition((org.hl7.fhir.dstu3.model.Condition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Conformance)   return convertConformance((org.hl7.fhir.dstu3.model.Conformance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Contract)   return convertContract((org.hl7.fhir.dstu3.model.Contract)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Coverage)   return convertCoverage((org.hl7.fhir.dstu3.model.Coverage)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DataElement)   return convertDataElement((org.hl7.fhir.dstu3.model.DataElement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DetectedIssue)   return convertDetectedIssue((org.hl7.fhir.dstu3.model.DetectedIssue)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Device)   return convertDevice((org.hl7.fhir.dstu3.model.Device)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceComponent)   return convertDeviceComponent((org.hl7.fhir.dstu3.model.DeviceComponent)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceMetric)   return convertDeviceMetric((org.hl7.fhir.dstu3.model.DeviceMetric)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceUseRequest)   return convertDeviceUseRequest((org.hl7.fhir.dstu3.model.DeviceUseRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DeviceUseStatement)   return convertDeviceUseStatement((org.hl7.fhir.dstu3.model.DeviceUseStatement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DiagnosticOrder)   return convertDiagnosticOrder((org.hl7.fhir.dstu3.model.DiagnosticOrder)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DiagnosticReport)   return convertDiagnosticReport((org.hl7.fhir.dstu3.model.DiagnosticReport)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DocumentManifest)   return convertDocumentManifest((org.hl7.fhir.dstu3.model.DocumentManifest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.DocumentReference)   return convertDocumentReference((org.hl7.fhir.dstu3.model.DocumentReference)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EligibilityRequest)   return convertEligibilityRequest((org.hl7.fhir.dstu3.model.EligibilityRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EligibilityResponse)   return convertEligibilityResponse((org.hl7.fhir.dstu3.model.EligibilityResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Encounter)   return convertEncounter((org.hl7.fhir.dstu3.model.Encounter)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EnrollmentRequest)   return convertEnrollmentRequest((org.hl7.fhir.dstu3.model.EnrollmentRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EnrollmentResponse)   return convertEnrollmentResponse((org.hl7.fhir.dstu3.model.EnrollmentResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.EpisodeOfCare)   return convertEpisodeOfCare((org.hl7.fhir.dstu3.model.EpisodeOfCare)src);
  if (src instanceof org.hl7.fhir.dstu3.model.FamilyMemberHistory)   return convertFamilyMemberHistory((org.hl7.fhir.dstu3.model.FamilyMemberHistory)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Flag)   return convertFlag((org.hl7.fhir.dstu3.model.Flag)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Goal)   return convertGoal((org.hl7.fhir.dstu3.model.Goal)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Group)   return convertGroup((org.hl7.fhir.dstu3.model.Group)src);
  if (src instanceof org.hl7.fhir.dstu3.model.HealthcareService)   return convertHealthcareService((org.hl7.fhir.dstu3.model.HealthcareService)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImagingStudy)   return convertImagingStudy((org.hl7.fhir.dstu3.model.ImagingStudy)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Immunization)   return convertImmunization((org.hl7.fhir.dstu3.model.Immunization)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImmunizationRecommendation)   return convertImmunizationRecommendation((org.hl7.fhir.dstu3.model.ImmunizationRecommendation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ImplementationGuide)   return convertImplementationGuide((org.hl7.fhir.dstu3.model.ImplementationGuide)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ListResource)   return convertList((org.hl7.fhir.dstu3.model.ListResource)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Location)   return convertLocation((org.hl7.fhir.dstu3.model.Location)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Media)   return convertMedia((org.hl7.fhir.dstu3.model.Media)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Medication)   return convertMedication((org.hl7.fhir.dstu3.model.Medication)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationAdministration)   return convertMedicationAdministration((org.hl7.fhir.dstu3.model.MedicationAdministration)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationDispense)   return convertMedicationDispense((org.hl7.fhir.dstu3.model.MedicationDispense)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationOrder)   return convertMedicationOrder((org.hl7.fhir.dstu3.model.MedicationOrder)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MedicationStatement)   return convertMedicationStatement((org.hl7.fhir.dstu3.model.MedicationStatement)src);
  if (src instanceof org.hl7.fhir.dstu3.model.MessageHeader)   return convertMessageHeader((org.hl7.fhir.dstu3.model.MessageHeader)src);
  if (src instanceof org.hl7.fhir.dstu3.model.NamingSystem)   return convertNamingSystem((org.hl7.fhir.dstu3.model.NamingSystem)src);
  if (src instanceof org.hl7.fhir.dstu3.model.NutritionOrder)   return convertNutritionOrder((org.hl7.fhir.dstu3.model.NutritionOrder)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Observation)   return convertObservation((org.hl7.fhir.dstu3.model.Observation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationDefinition)   return convertOperationDefinition((org.hl7.fhir.dstu3.model.OperationDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OperationOutcome)   return convertOperationOutcome((org.hl7.fhir.dstu3.model.OperationOutcome)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Order)   return convertOrder((org.hl7.fhir.dstu3.model.Order)src);
  if (src instanceof org.hl7.fhir.dstu3.model.OrderResponse)   return convertOrderResponse((org.hl7.fhir.dstu3.model.OrderResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Organization)   return convertOrganization((org.hl7.fhir.dstu3.model.Organization)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Patient)   return convertPatient((org.hl7.fhir.dstu3.model.Patient)src);
  if (src instanceof org.hl7.fhir.dstu3.model.PaymentNotice)   return convertPaymentNotice((org.hl7.fhir.dstu3.model.PaymentNotice)src);
  if (src instanceof org.hl7.fhir.dstu3.model.PaymentReconciliation)   return convertPaymentReconciliation((org.hl7.fhir.dstu3.model.PaymentReconciliation)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Person)   return convertPerson((org.hl7.fhir.dstu3.model.Person)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Practitioner)   return convertPractitioner((org.hl7.fhir.dstu3.model.Practitioner)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Procedure)   return convertProcedure((org.hl7.fhir.dstu3.model.Procedure)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ProcedureRequest)   return convertProcedureRequest((org.hl7.fhir.dstu3.model.ProcedureRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ProcessRequest)   return convertProcessRequest((org.hl7.fhir.dstu3.model.ProcessRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ProcessResponse)   return convertProcessResponse((org.hl7.fhir.dstu3.model.ProcessResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Provenance)   return convertProvenance((org.hl7.fhir.dstu3.model.Provenance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Questionnaire)   return convertQuestionnaire((org.hl7.fhir.dstu3.model.Questionnaire)src);
  if (src instanceof org.hl7.fhir.dstu3.model.QuestionnaireResponse)   return convertQuestionnaireResponse((org.hl7.fhir.dstu3.model.QuestionnaireResponse)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ReferralRequest)   return convertReferralRequest((org.hl7.fhir.dstu3.model.ReferralRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.RelatedPerson)   return convertRelatedPerson((org.hl7.fhir.dstu3.model.RelatedPerson)src);
  if (src instanceof org.hl7.fhir.dstu3.model.RiskAssessment)   return convertRiskAssessment((org.hl7.fhir.dstu3.model.RiskAssessment)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Schedule)   return convertSchedule((org.hl7.fhir.dstu3.model.Schedule)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SearchParameter)   return convertSearchParameter((org.hl7.fhir.dstu3.model.SearchParameter)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Slot)   return convertSlot((org.hl7.fhir.dstu3.model.Slot)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Specimen)   return convertSpecimen((org.hl7.fhir.dstu3.model.Specimen)src);
  if (src instanceof org.hl7.fhir.dstu3.model.StructureDefinition)   return convertStructureDefinition((org.hl7.fhir.dstu3.model.StructureDefinition)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Subscription)   return convertSubscription((org.hl7.fhir.dstu3.model.Subscription)src);
  if (src instanceof org.hl7.fhir.dstu3.model.Substance)   return convertSubstance((org.hl7.fhir.dstu3.model.Substance)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SupplyDelivery)   return convertSupplyDelivery((org.hl7.fhir.dstu3.model.SupplyDelivery)src);
  if (src instanceof org.hl7.fhir.dstu3.model.SupplyRequest)   return convertSupplyRequest((org.hl7.fhir.dstu3.model.SupplyRequest)src);
  if (src instanceof org.hl7.fhir.dstu3.model.TestScript)   return convertTestScript((org.hl7.fhir.dstu3.model.TestScript)src);
  if (src instanceof org.hl7.fhir.dstu3.model.ValueSet)   return convertValueSet((org.hl7.fhir.dstu3.model.ValueSet)src);
  if (src instanceof org.hl7.fhir.dstu3.model.VisionPrescription)   return convertVisionPrescription((org.hl7.fhir.dstu3.model.VisionPrescription)src);
  throw new Error(""String_Node_Str"" + src.fhirType());
}",0.8786044288672933
24031,"public static org.hl7.fhir.dstu2.model.MedicationAdministration.MedicationAdministrationDosageComponent convertMedicationAdministrationDosageComponent(org.hl7.fhir.dstu3.model.MedicationAdministration.MedicationAdministrationDosageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationAdministration.MedicationAdministrationDosageComponent tgt=new org.hl7.fhir.dstu2.model.MedicationAdministration.MedicationAdministrationDosageComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setRate(convertType(src.getRate()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.MedicationAdministration.MedicationAdministrationDosageComponent convertMedicationAdministrationDosageComponent(org.hl7.fhir.dstu3.model.MedicationAdministration.MedicationAdministrationDosageComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationAdministration.MedicationAdministrationDosageComponent tgt=new org.hl7.fhir.dstu2.model.MedicationAdministration.MedicationAdministrationDosageComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setRate(convertType(src.getRate()));
  return tgt;
}",0.961659333752357
24032,"public static org.hl7.fhir.dstu2.model.MedicationOrder convertMedicationOrder(org.hl7.fhir.dstu3.model.MedicationOrder src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder tgt=new org.hl7.fhir.dstu2.model.MedicationOrder();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertMedicationOrderStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setDateWritten(src.getDateWritten());
  tgt.setPrescriber(convertReference(src.getPrescriber()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonCode())   tgt.setReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReasonReference())   tgt.setReason(convertReference(t));
  tgt.setDateEnded(src.getDateEnded());
  tgt.setReasonEnded(convertCodeableConcept(src.getReasonEnded()));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  for (  org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderDosageInstructionComponent t : src.getDosageInstruction())   tgt.addDosageInstruction(convertMedicationOrderDosageInstructionComponent(t));
  tgt.setDispenseRequest(convertMedicationOrderDispenseRequestComponent(src.getDispenseRequest()));
  tgt.setSubstitution(convertMedicationOrderSubstitutionComponent(src.getSubstitution()));
  tgt.setPriorPrescription(convertReference(src.getPriorPrescription()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.MedicationOrder convertMedicationOrder(org.hl7.fhir.dstu3.model.MedicationOrder src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder tgt=new org.hl7.fhir.dstu2.model.MedicationOrder();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertMedicationOrderStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setDateWritten(src.getDateWritten());
  tgt.setPrescriber(convertReference(src.getPrescriber()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonCode())   tgt.setReason(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReasonReference())   tgt.setReason(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  for (  org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderDosageInstructionComponent t : src.getDosageInstruction())   tgt.addDosageInstruction(convertMedicationOrderDosageInstructionComponent(t));
  tgt.setDispenseRequest(convertMedicationOrderDispenseRequestComponent(src.getDispenseRequest()));
  tgt.setSubstitution(convertMedicationOrderSubstitutionComponent(src.getSubstitution()));
  tgt.setPriorPrescription(convertReference(src.getPriorPrescription()));
  return tgt;
}",0.9666048237476808
24033,"public static org.hl7.fhir.dstu2.model.Condition convertCondition(org.hl7.fhir.dstu3.model.Condition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Condition tgt=new org.hl7.fhir.dstu2.model.Condition();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setAsserter(convertReference(src.getAsserter()));
  tgt.setDateRecorded(src.getDateRecorded());
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setClinicalStatus(src.getClinicalStatus());
  tgt.setVerificationStatus(convertConditionVerificationStatus(src.getVerificationStatus()));
  tgt.setSeverity(convertCodeableConcept(src.getSeverity()));
  tgt.setOnset(convertType(src.getOnset()));
  tgt.setAbatement(convertType(src.getAbatement()));
  tgt.setStage(convertConditionStageComponent(src.getStage()));
  for (  org.hl7.fhir.dstu3.model.Condition.ConditionEvidenceComponent t : src.getEvidence())   tgt.addEvidence(convertConditionEvidenceComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getBodySite())   tgt.addBodySite(convertCodeableConcept(t));
  tgt.setNotes(src.getNotes());
  return tgt;
}","public static org.hl7.fhir.dstu2.model.Condition convertCondition(org.hl7.fhir.dstu3.model.Condition src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Condition tgt=new org.hl7.fhir.dstu2.model.Condition();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setAsserter(convertReference(src.getAsserter()));
  tgt.setDateRecorded(src.getDateRecorded());
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setClinicalStatus(src.getClinicalStatus());
  tgt.setVerificationStatus(convertConditionVerificationStatus(src.getVerificationStatus()));
  tgt.setSeverity(convertCodeableConcept(src.getSeverity()));
  tgt.setOnset(convertType(src.getOnset()));
  tgt.setAbatement(convertType(src.getAbatement()));
  tgt.setStage(convertConditionStageComponent(src.getStage()));
  for (  org.hl7.fhir.dstu3.model.Condition.ConditionEvidenceComponent t : src.getEvidence())   tgt.addEvidence(convertConditionEvidenceComponent(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getBodySite())   tgt.addBodySite(convertCodeableConcept(t));
  return tgt;
}",0.988480921526278
24034,"public static org.hl7.fhir.dstu2.model.MedicationAdministration convertMedicationAdministration(org.hl7.fhir.dstu3.model.MedicationAdministration src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationAdministration tgt=new org.hl7.fhir.dstu2.model.MedicationAdministration();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertMedicationAdministrationStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setEffectiveTime(convertType(src.getEffectiveTime()));
  tgt.setPractitioner(convertReference(src.getPractitioner()));
  tgt.setPrescription(convertReference(src.getPrescription()));
  tgt.setWasNotGiven(src.getWasNotGiven());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonNotGiven())   tgt.addReasonNotGiven(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonGiven())   tgt.addReasonGiven(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getDevice())   tgt.addDevice(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  tgt.setDosage(convertMedicationAdministrationDosageComponent(src.getDosage()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.MedicationAdministration convertMedicationAdministration(org.hl7.fhir.dstu3.model.MedicationAdministration src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationAdministration tgt=new org.hl7.fhir.dstu2.model.MedicationAdministration();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertMedicationAdministrationStatus(src.getStatus()));
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setEffectiveTime(convertType(src.getEffectiveTime()));
  tgt.setPrescription(convertReference(src.getPrescription()));
  tgt.setWasNotGiven(src.getWasNotGiven());
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonNotGiven())   tgt.addReasonNotGiven(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept t : src.getReasonGiven())   tgt.addReasonGiven(convertCodeableConcept(t));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getDevice())   tgt.addDevice(convertReference(t));
  for (  org.hl7.fhir.dstu3.model.Annotation t : src.getNote())   tgt.setNote(t.getText());
  tgt.setDosage(convertMedicationAdministrationDosageComponent(src.getDosage()));
  return tgt;
}",0.59353507565337
24035,"public static org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDosageInstructionComponent convertMedicationOrderDosageInstructionComponent(org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderDosageInstructionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDosageInstructionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDosageInstructionComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setAdditionalInstructions(convertCodeableConcept(src.getAdditionalInstructions()));
  tgt.setTiming(convertTiming(src.getTiming()));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setDose(convertType(src.getDose()));
  tgt.setRate(convertType(src.getRate()));
  tgt.setMaxDosePerPeriod(convertRatio(src.getMaxDosePerPeriod()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDosageInstructionComponent convertMedicationOrderDosageInstructionComponent(org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderDosageInstructionComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDosageInstructionComponent tgt=new org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDosageInstructionComponent();
  copyElement(src,tgt);
  tgt.setText(src.getText());
  tgt.setTiming(convertTiming(src.getTiming()));
  tgt.setAsNeeded(convertType(src.getAsNeeded()));
  tgt.setSite(convertType(src.getSite()));
  tgt.setRoute(convertCodeableConcept(src.getRoute()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setDose(convertType(src.getDose()));
  tgt.setRate(convertType(src.getRate()));
  tgt.setMaxDosePerPeriod(convertRatio(src.getMaxDosePerPeriod()));
  return tgt;
}",0.9547738693467336
24036,"public static org.hl7.fhir.dstu2.model.Observation convertObservation(org.hl7.fhir.dstu3.model.Observation src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Observation tgt=new org.hl7.fhir.dstu2.model.Observation();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertObservationStatus(src.getStatus()));
  tgt.setCategory(convertCodeableConcept(src.getCategory()));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setEffective(convertType(src.getEffective()));
  tgt.setIssued(src.getIssued());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getPerformer())   tgt.addPerformer(convertReference(t));
  tgt.setValue(convertType(src.getValue()));
  tgt.setDataAbsentReason(convertCodeableConcept(src.getDataAbsentReason()));
  tgt.setInterpretation(convertCodeableConcept(src.getInterpretation()));
  tgt.setComments(src.getComment());
  tgt.setBodySite(convertCodeableConcept(src.getBodySite()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setSpecimen(convertReference(src.getSpecimen()));
  tgt.setDevice(convertReference(src.getDevice()));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationReferenceRangeComponent t : src.getReferenceRange())   tgt.addReferenceRange(convertObservationReferenceRangeComponent(t));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationRelatedComponent t : src.getRelated())   tgt.addRelated(convertObservationRelatedComponent(t));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationComponentComponent t : src.getComponent())   tgt.addComponent(convertObservationComponentComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.Observation convertObservation(org.hl7.fhir.dstu3.model.Observation src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.Observation tgt=new org.hl7.fhir.dstu2.model.Observation();
  copyDomainResource(src,tgt);
  for (  org.hl7.fhir.dstu3.model.Identifier t : src.getIdentifier())   tgt.addIdentifier(convertIdentifier(t));
  tgt.setStatus(convertObservationStatus(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.CodeableConcept c : src.getCategory())   tgt.setCategory(convertCodeableConcept(c));
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setSubject(convertReference(src.getSubject()));
  tgt.setEncounter(convertReference(src.getEncounter()));
  tgt.setEffective(convertType(src.getEffective()));
  tgt.setIssued(src.getIssued());
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getPerformer())   tgt.addPerformer(convertReference(t));
  tgt.setValue(convertType(src.getValue()));
  tgt.setDataAbsentReason(convertCodeableConcept(src.getDataAbsentReason()));
  tgt.setInterpretation(convertCodeableConcept(src.getInterpretation()));
  tgt.setComments(src.getComment());
  tgt.setBodySite(convertCodeableConcept(src.getBodySite()));
  tgt.setMethod(convertCodeableConcept(src.getMethod()));
  tgt.setSpecimen(convertReference(src.getSpecimen()));
  tgt.setDevice(convertReference(src.getDevice()));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationReferenceRangeComponent t : src.getReferenceRange())   tgt.addReferenceRange(convertObservationReferenceRangeComponent(t));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationRelatedComponent t : src.getRelated())   tgt.addRelated(convertObservationRelatedComponent(t));
  for (  org.hl7.fhir.dstu3.model.Observation.ObservationComponentComponent t : src.getComponent())   tgt.addComponent(convertObservationComponentComponent(t));
  return tgt;
}",0.9668347041655612
24037,"public static org.hl7.fhir.dstu2.model.SupplyDelivery convertSupplyDelivery(org.hl7.fhir.dstu3.model.SupplyDelivery src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.SupplyDelivery tgt=new org.hl7.fhir.dstu2.model.SupplyDelivery();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setStatus(convertSupplyDeliveryStatus(src.getStatus()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setSuppliedItem(convertReference(src.getSuppliedItem()));
  tgt.setSupplier(convertReference(src.getSupplier()));
  tgt.setWhenPrepared(convertPeriod(src.getWhenPrepared()));
  tgt.setTime(src.getTime());
  tgt.setDestination(convertReference(src.getDestination()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReceiver())   tgt.addReceiver(convertReference(t));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.SupplyDelivery convertSupplyDelivery(org.hl7.fhir.dstu3.model.SupplyDelivery src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.SupplyDelivery tgt=new org.hl7.fhir.dstu2.model.SupplyDelivery();
  copyDomainResource(src,tgt);
  tgt.setIdentifier(convertIdentifier(src.getIdentifier()));
  tgt.setStatus(convertSupplyDeliveryStatus(src.getStatus()));
  tgt.setPatient(convertReference(src.getPatient()));
  tgt.setType(convertCodeableConcept(src.getType()));
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setSupplier(convertReference(src.getSupplier()));
  tgt.setWhenPrepared(convertPeriod(src.getWhenPrepared()));
  tgt.setTime(src.getTime());
  tgt.setDestination(convertReference(src.getDestination()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getReceiver())   tgt.addReceiver(convertReference(t));
  return tgt;
}",0.7129436325678496
24038,"public static org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDispenseRequestComponent convertMedicationOrderDispenseRequestComponent(org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderDispenseRequestComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDispenseRequestComponent tgt=new org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDispenseRequestComponent();
  copyElement(src,tgt);
  tgt.setMedication(convertType(src.getMedication()));
  tgt.setValidityPeriod(convertPeriod(src.getValidityPeriod()));
  tgt.setNumberOfRepeatsAllowed(src.getNumberOfRepeatsAllowed());
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setExpectedSupplyDuration(convertDuration(src.getExpectedSupplyDuration()));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDispenseRequestComponent convertMedicationOrderDispenseRequestComponent(org.hl7.fhir.dstu3.model.MedicationOrder.MedicationOrderDispenseRequestComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDispenseRequestComponent tgt=new org.hl7.fhir.dstu2.model.MedicationOrder.MedicationOrderDispenseRequestComponent();
  copyElement(src,tgt);
  tgt.setValidityPeriod(convertPeriod(src.getValidityPeriod()));
  tgt.setNumberOfRepeatsAllowed(src.getNumberOfRepeatsAllowed());
  tgt.setQuantity(convertSimpleQuantity(src.getQuantity()));
  tgt.setExpectedSupplyDuration(convertDuration(src.getExpectedSupplyDuration()));
  return tgt;
}",0.9656893325015596
24039,"public static org.hl7.fhir.dstu2.model.DiagnosticOrder.DiagnosticOrderItemComponent convertDiagnosticOrderItemComponent(org.hl7.fhir.dstu3.model.DiagnosticOrder.DiagnosticOrderItemComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DiagnosticOrder.DiagnosticOrderItemComponent tgt=new org.hl7.fhir.dstu2.model.DiagnosticOrder.DiagnosticOrderItemComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  for (  org.hl7.fhir.dstu3.model.Reference t : src.getSpecimen())   tgt.addSpecimen(convertReference(t));
  tgt.setBodySite(convertCodeableConcept(src.getBodySite()));
  tgt.setStatus(convertDiagnosticOrderStatus(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.DiagnosticOrder.DiagnosticOrderEventComponent t : src.getEvent())   tgt.addEvent(convertDiagnosticOrderEventComponent(t));
  return tgt;
}","public static org.hl7.fhir.dstu2.model.DiagnosticOrder.DiagnosticOrderItemComponent convertDiagnosticOrderItemComponent(org.hl7.fhir.dstu3.model.DiagnosticOrder.DiagnosticOrderItemComponent src) throws FHIRException {
  if (src == null)   return null;
  org.hl7.fhir.dstu2.model.DiagnosticOrder.DiagnosticOrderItemComponent tgt=new org.hl7.fhir.dstu2.model.DiagnosticOrder.DiagnosticOrderItemComponent();
  copyElement(src,tgt);
  tgt.setCode(convertCodeableConcept(src.getCode()));
  tgt.setBodySite(convertCodeableConcept(src.getBodySite()));
  tgt.setStatus(convertDiagnosticOrderStatus(src.getStatus()));
  for (  org.hl7.fhir.dstu3.model.DiagnosticOrder.DiagnosticOrderEventComponent t : src.getEvent())   tgt.addEvent(convertDiagnosticOrderEventComponent(t));
  return tgt;
}",0.9358897543439184
24040,"private void validate(String path,int errorCount,boolean json) throws Exception {
  if (json)   return;
  if (TestingUtilities.context == null) {
    TestingUtilities.context=SimpleWorkerContext.fromPack(""String_Node_Str"");
    ((SimpleWorkerContext)TestingUtilities.context).connectToTSServer(""String_Node_Str"");
  }
  System.out.print(""String_Node_Str"" + path + ""String_Node_Str""+ Integer.toString(errorCount)+ (errorCount == 0 ? ""String_Node_Str"" : ""String_Node_Str""));
  FileInputStream file=new FileInputStream(Utilities.path(""String_Node_Str"",path));
  InstanceValidator val=new InstanceValidator(TestingUtilities.context);
  List<ValidationMessage> errors=new ArrayList<ValidationMessage>();
  val.validate(errors,file,json ? FhirFormat.JSON : FhirFormat.XML);
  int ec=0;
  boolean first=true;
  for (  ValidationMessage m : errors) {
    if (m.getLevel() == IssueSeverity.ERROR || m.getLevel() == IssueSeverity.FATAL) {
      ec++;
      if (first) {
        first=false;
        System.out.print(""String_Node_Str"");
      }
 else       System.out.print(""String_Node_Str"");
      System.out.print(""String_Node_Str"" + Utilities.escapeJson(m.getMessage()) + ""String_Node_Str"");
    }
  }
  System.out.println(errorCount == 0 ? ""String_Node_Str"" : first ? ""String_Node_Str"" : ""String_Node_Str"");
  Assert.assertTrue(ec == errorCount);
}","private void validate(String path,int errorCount,boolean json) throws Exception {
  if (TestingUtilities.context == null) {
    TestingUtilities.context=SimpleWorkerContext.fromPack(""String_Node_Str"");
    ((SimpleWorkerContext)TestingUtilities.context).connectToTSServer(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + path);
  FileInputStream file=new FileInputStream(Utilities.path(""String_Node_Str"",path));
  InstanceValidator val=new InstanceValidator(TestingUtilities.context);
  List<ValidationMessage> errors=new ArrayList<ValidationMessage>();
  val.validate(errors,file,json ? FhirFormat.JSON : FhirFormat.XML);
  int ec=0;
  for (  ValidationMessage m : errors) {
    if (m.getLevel() == IssueSeverity.ERROR || m.getLevel() == IssueSeverity.FATAL) {
      ec++;
      System.out.println(""String_Node_Str"" + m.summary());
    }
  }
  Assert.assertTrue(ec == errorCount);
  System.out.println(val.reportTimes());
}",0.7484662576687117
24041,"private void validateContains(List<ValidationMessage> errors,String path,ElementDefinition child,ElementDefinition context,Element resource,Element element,NodeStack stack,IdStatus idstatus) throws FHIRException, FHIRException {
  String resourceName=element.getType();
  long t=System.nanoTime();
  StructureDefinition profile=this.context.fetchResource(StructureDefinition.class,""String_Node_Str"" + resourceName);
  sdTime=sdTime + (System.nanoTime() - t);
  if (element.getSpecial() == SpecialElement.BUNDLE_ENTRY)   resource=element;
  if (rule(errors,IssueType.INVALID,element.line(),element.col(),stack.getLiteralPath(),profile != null,""String_Node_Str"" + resourceName + ""String_Node_Str""))   validateResource(errors,resource,element,profile,idstatus,stack);
}","private void validateContains(List<ValidationMessage> errors,String path,ElementDefinition child,ElementDefinition context,Element resource,Element element,NodeStack stack,IdStatus idstatus) throws FHIRException, FHIRException {
  String resourceName=element.getType();
  long t=System.nanoTime();
  StructureDefinition profile=this.context.fetchResource(StructureDefinition.class,""String_Node_Str"" + resourceName);
  sdTime=sdTime + (System.nanoTime() - t);
  if (element.getSpecial() == SpecialElement.BUNDLE_ENTRY || element.getSpecial() == SpecialElement.PARAMETER)   resource=element;
  if (rule(errors,IssueType.INVALID,element.line(),element.col(),stack.getLiteralPath(),profile != null,""String_Node_Str"" + resourceName + ""String_Node_Str""))   validateResource(errors,resource,element,profile,idstatus,stack);
}",0.9671717171717172
24042,"private void composeElement(Section section,Complex ctxt,Element element,Element parent){
  if (""String_Node_Str"".equals(element.getType()))   return;
  String en=getFormalName(element);
  Complex t;
  if (element.getSpecial() == SpecialElement.BUNDLE_ENTRY && parent != null && parent.getNamedChildValue(""String_Node_Str"") != null) {
    String url=""String_Node_Str"" + parent.getNamedChildValue(""String_Node_Str"") + ""String_Node_Str"";
    ctxt.linkedPredicate(""String_Node_Str"" + en,url,linkResolver == null ? null : linkResolver.resolveProperty(element.getProperty()));
    t=section.subject(url);
  }
 else {
    t=ctxt.linkedPredicate(""String_Node_Str"" + en,linkResolver == null ? null : linkResolver.resolveProperty(element.getProperty()));
  }
  if (element.getSpecial() != null)   t.linkedPredicate(""String_Node_Str"",""String_Node_Str"" + element.fhirType(),linkResolver == null ? null : linkResolver.resolveType(element.fhirType()));
  if (element.hasValue())   t.linkedPredicate(""String_Node_Str"",ttlLiteral(element.getValue(),element.getType()),linkResolver == null ? null : linkResolver.resolveType(element.getType()));
  if (element.getProperty().isList())   t.linkedPredicate(""String_Node_Str"",Integer.toString(element.getIndex()),linkResolver == null ? null : linkResolver.resolvePage(""String_Node_Str""));
  if (""String_Node_Str"".equals(element.getType()))   decorateCoding(t,element);
  if (""String_Node_Str"".equals(element.getType()))   decorateReference(t,element);
  for (  Element child : element.getChildren()) {
    composeElement(section,t,child,element);
  }
}","private void composeElement(Section section,Complex ctxt,Element element,Element parent){
  String en=getFormalName(element);
  Complex t;
  if (element.getSpecial() == SpecialElement.BUNDLE_ENTRY && parent != null && parent.getNamedChildValue(""String_Node_Str"") != null) {
    String url=""String_Node_Str"" + parent.getNamedChildValue(""String_Node_Str"") + ""String_Node_Str"";
    ctxt.linkedPredicate(""String_Node_Str"" + en,url,linkResolver == null ? null : linkResolver.resolveProperty(element.getProperty()));
    t=section.subject(url);
  }
 else {
    t=ctxt.linkedPredicate(""String_Node_Str"" + en,linkResolver == null ? null : linkResolver.resolveProperty(element.getProperty()));
  }
  if (element.getSpecial() != null)   t.linkedPredicate(""String_Node_Str"",""String_Node_Str"" + element.fhirType(),linkResolver == null ? null : linkResolver.resolveType(element.fhirType()));
  if (element.hasValue())   t.linkedPredicate(""String_Node_Str"",ttlLiteral(element.getValue(),element.getType()),linkResolver == null ? null : linkResolver.resolveType(element.getType()));
  if (element.getProperty().isList())   t.linkedPredicate(""String_Node_Str"",Integer.toString(element.getIndex()),linkResolver == null ? null : linkResolver.resolvePage(""String_Node_Str""));
  if (""String_Node_Str"".equals(element.getType()))   decorateCoding(t,element);
  if (""String_Node_Str"".equals(element.getType()))   decorateReference(t,element);
  for (  Element child : element.getChildren()) {
    if (""String_Node_Str"".equals(child.getType())) {
      String childfn=getFormalName(child);
      t.predicate(""String_Node_Str"" + childfn,ttlLiteral(child.getValue(),child.getType()));
    }
 else     composeElement(section,t,child,element);
  }
}",0.9206541490006056
24043,"private void generateEnum(BindingSpecification bs) throws IOException {
  String en=bs.getValueSet().getName();
  if (genEnums.contains(en))   return;
  write(""String_Node_Str"" + en + ""String_Node_Str"");
  write(""String_Node_Str"");
  ValueSet ex=workerContext.expandVS(bs.getValueSet(),true).getValueset();
  for (  ValueSetExpansionContainsComponent cc : ex.getExpansion().getContains()) {
    genIncludedCode(cc);
  }
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + en + ""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + Utilities.escapeXml(enumDefs.get(en)) + ""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + en + ""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  genEnums.add(en);
}","private void generateEnum(BindingSpecification bs) throws IOException {
  String en=bs.getValueSet().getName();
  if (genEnums.contains(en))   return;
  write(""String_Node_Str"" + en + ""String_Node_Str"");
  write(""String_Node_Str"");
  bs.getValueSet().setUserData(ToolResourceUtilities.NAME_VS_USE_MARKER,true);
  ValueSet ex=workerContext.expandVS(bs.getValueSet(),true).getValueset();
  for (  ValueSetExpansionContainsComponent cc : ex.getExpansion().getContains()) {
    genIncludedCode(cc);
  }
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + en + ""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + Utilities.escapeXml(enumDefs.get(en)) + ""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + en + ""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  genEnums.add(en);
}",0.9586170770036668
24044,"private void generateEnum(String en) throws IOException {
  write(""String_Node_Str"" + en + ""String_Node_Str"");
  write(""String_Node_Str"");
  ValueSet vs=enums.get(en);
  ValueSet ex=workerContext.expandVS(vs,true).getValueset();
  for (  ValueSetExpansionContainsComponent cc : ex.getExpansion().getContains()) {
    genIncludedCode(cc);
  }
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + en + ""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + Utilities.escapeXml(enumDefs.get(en)) + ""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + en + ""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
}","private void generateEnum(String en) throws IOException {
  write(""String_Node_Str"" + en + ""String_Node_Str"");
  write(""String_Node_Str"");
  ValueSet vs=enums.get(en);
  vs.setUserData(ToolResourceUtilities.NAME_VS_USE_MARKER,true);
  ValueSet ex=workerContext.expandVS(vs,true).getValueset();
  for (  ValueSetExpansionContainsComponent cc : ex.getExpansion().getContains()) {
    genIncludedCode(cc);
  }
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + en + ""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + Utilities.escapeXml(enumDefs.get(en)) + ""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + en + ""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
}",0.9617422012948792
24045,"/** 
 * Generate a ShEx element definition
 * @param sd Containing structure definition
 * @param ed Containing element definition
 * @return ShEx definition
 */
private String genElementDefinition(StructureDefinition sd,ElementDefinition ed){
  ST element_def=tmplt(ELEMENT_TEMPLATE);
  String id=ed.hasBase() ? ed.getBase().getPath() : ed.getPath();
  String shortId=id.substring(id.lastIndexOf(""String_Node_Str"") + 1);
  String card=""String_Node_Str"".equals(ed.getMax()) ? (ed.getMin() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") : ""String_Node_Str"";
  String defn;
  element_def.add(""String_Node_Str"",id.charAt(0) == id.toLowerCase().charAt(0) ? shortId : id);
  element_def.add(""String_Node_Str"",card);
  List<ElementDefinition> children=ProfileUtilities.getChildList(sd,ed);
  if (children.size() > 0) {
    innerTypes.add(new ImmutablePair<StructureDefinition,ElementDefinition>(sd,ed));
    ST anon_link=tmplt(SIMPLE_ELEMENT_TEMPLATE);
    anon_link.add(""String_Node_Str"",id);
    defn=anon_link.render();
  }
 else   if (ed.getType().size() == 1) {
    defn=genTypeRef(ed.getType().get(0));
  }
 else   if (ed.getContentReference() != null) {
    String typ=id.substring(0,id.indexOf(""String_Node_Str"") + 1) + ed.getContentReference().substring(1);
    ST defn_ref=tmplt(SIMPLE_ELEMENT_TEMPLATE);
    defn_ref.add(""String_Node_Str"",typ);
    defn=defn_ref.render();
  }
 else {
    if (id.endsWith(""String_Node_Str"")) {
      return genChoiceTypes(ed,id,shortId,card);
    }
 else {
      defn=genAlternativeTypes(ed,id,shortId,card);
    }
  }
  element_def.add(""String_Node_Str"",defn);
  return element_def.render();
}","/** 
 * Generate a ShEx element definition
 * @param sd Containing structure definition
 * @param ed Containing element definition
 * @return ShEx definition
 */
private String genElementDefinition(StructureDefinition sd,ElementDefinition ed){
  ST element_def=tmplt(ELEMENT_TEMPLATE);
  String id=ed.hasBase() ? ed.getBase().getPath() : ed.getPath();
  String shortId=id.substring(id.lastIndexOf(""String_Node_Str"") + 1);
  String card=""String_Node_Str"".equals(ed.getMax()) ? (ed.getMin() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") : (ed.getMin() == 0 ? ""String_Node_Str"" : ""String_Node_Str"");
  String defn;
  element_def.add(""String_Node_Str"",id.charAt(0) == id.toLowerCase().charAt(0) ? shortId : id);
  element_def.add(""String_Node_Str"",card);
  List<ElementDefinition> children=ProfileUtilities.getChildList(sd,ed);
  if (children.size() > 0) {
    innerTypes.add(new ImmutablePair<StructureDefinition,ElementDefinition>(sd,ed));
    ST anon_link=tmplt(SIMPLE_ELEMENT_TEMPLATE);
    anon_link.add(""String_Node_Str"",id);
    defn=anon_link.render();
  }
 else   if (ed.getType().size() == 1) {
    defn=genTypeRef(ed.getType().get(0));
  }
 else   if (ed.getContentReference() != null) {
    String typ=id.substring(0,id.indexOf(""String_Node_Str"") + 1) + ed.getContentReference().substring(1);
    ST defn_ref=tmplt(SIMPLE_ELEMENT_TEMPLATE);
    defn_ref.add(""String_Node_Str"",typ);
    defn=defn_ref.render();
  }
 else {
    if (id.endsWith(""String_Node_Str"")) {
      return genChoiceTypes(ed,id,shortId,card);
    }
 else {
      defn=genAlternativeTypes(ed,id,shortId,card);
    }
  }
  element_def.add(""String_Node_Str"",defn);
  return element_def.render();
}",0.9875870420829548
24046,"private String genTypeRef(ElementDefinition.TypeRefComponent typ){
  if (typ.getProfile().size() > 0) {
    if (typ.getProfile().size() != 1)     throw new AssertionError(""String_Node_Str"");
    if (typ.getCode().equals(""String_Node_Str""))     return genReference(""String_Node_Str"",typ).render();
 else     return tmplt(SIMPLE_ELEMENT_TEMPLATE).add(""String_Node_Str"",getProfiledType(typ)).render();
  }
 else   if (typ.getCodeElement().getExtensionsByUrl(XML_DEFN_TYPE).size() > 0) {
    String xt=null;
    try {
      xt=typ.getCodeElement().getExtensionString(XML_DEFN_TYPE);
    }
 catch (    FHIRException e) {
      e.printStackTrace();
    }
    xt=xt.replace(""String_Node_Str"",""String_Node_Str"");
    if (!xt.contains(""String_Node_Str""))     xt=""String_Node_Str"" + xt;
    return tmplt(PRIMITIVE_ELEMENT_TEMPLATE).add(""String_Node_Str"",xt.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"")).render();
  }
 else   if (typ.getCode() == null) {
    ST primitive_entry=tmplt(PRIMITIVE_ELEMENT_TEMPLATE);
    primitive_entry.add(""String_Node_Str"",""String_Node_Str"");
    return primitive_entry.render();
  }
 else   if (typ.getCode().equals(""String_Node_Str"")) {
    return tmplt(XHTML_TEMPLATE).render();
  }
 else {
    datatypes.add(typ.getCode());
    return tmplt(SIMPLE_ELEMENT_TEMPLATE).add(""String_Node_Str"",typ.getCode()).render();
  }
}","private String genTypeRef(ElementDefinition.TypeRefComponent typ){
  if (typ.getProfile().size() > 0) {
    if (typ.getProfile().size() != 1)     throw new AssertionError(""String_Node_Str"");
    if (typ.getCode().equals(""String_Node_Str""))     return genReference(""String_Node_Str"",typ).render();
 else     return tmplt(SIMPLE_ELEMENT_TEMPLATE).add(""String_Node_Str"",getProfiledType(typ)).render();
  }
 else   if (typ.getCodeElement().getExtensionsByUrl(XML_DEFN_TYPE).size() > 0) {
    String xt=null;
    try {
      xt=typ.getCodeElement().getExtensionString(XML_DEFN_TYPE);
    }
 catch (    FHIRException e) {
      e.printStackTrace();
    }
    xt=xt.replace(""String_Node_Str"",""String_Node_Str"");
    if (!xt.contains(""String_Node_Str""))     xt=""String_Node_Str"" + xt;
    return tmplt(PRIMITIVE_ELEMENT_TEMPLATE).add(""String_Node_Str"",xt.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).render();
  }
 else   if (typ.getCode() == null) {
    ST primitive_entry=tmplt(PRIMITIVE_ELEMENT_TEMPLATE);
    primitive_entry.add(""String_Node_Str"",""String_Node_Str"");
    return primitive_entry.render();
  }
 else   if (typ.getCode().equals(""String_Node_Str"")) {
    return tmplt(XHTML_TEMPLATE).render();
  }
 else {
    datatypes.add(typ.getCode());
    return tmplt(SIMPLE_ELEMENT_TEMPLATE).add(""String_Node_Str"",typ.getCode()).render();
  }
}",0.98463639467395
24047,"/** 
 * Generate a ShEx element definition
 * @param sd Containing structure definition
 * @param ed Containing element definition
 * @return ShEx definition
 */
private String genElementDefinition(StructureDefinition sd,ElementDefinition ed){
  ST element_def=tmplt(ELEMENT_TEMPLATE);
  String id=ed.hasBase() ? ed.getBase().getPath() : ed.getPath();
  String shortId=id.substring(id.lastIndexOf(""String_Node_Str"") + 1);
  String card=""String_Node_Str"".equals(ed.getMax()) ? (ed.getMin() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") : ""String_Node_Str"";
  String defn;
  element_def.add(""String_Node_Str"",id.charAt(0) == id.toLowerCase().charAt(0) ? shortId : id);
  element_def.add(""String_Node_Str"",card);
  List<ElementDefinition> children=ProfileUtilities.getChildList(sd,ed);
  if (children.size() > 0) {
    innerTypes.add(new ImmutablePair<StructureDefinition,ElementDefinition>(sd,ed));
    ST anon_link=tmplt(SIMPLE_ELEMENT_TEMPLATE);
    anon_link.add(""String_Node_Str"",id);
    defn=anon_link.render();
  }
 else   if (ed.getType().size() == 1) {
    defn=genTypeRef(ed.getType().get(0));
  }
 else {
    if (id.endsWith(""String_Node_Str"")) {
      return genChoiceTypes(ed,id,shortId,card);
    }
 else {
      defn=genAlternativeTypes(ed,id,shortId,card);
    }
  }
  element_def.add(""String_Node_Str"",defn);
  return element_def.render();
}","/** 
 * Generate a ShEx element definition
 * @param sd Containing structure definition
 * @param ed Containing element definition
 * @return ShEx definition
 */
private String genElementDefinition(StructureDefinition sd,ElementDefinition ed){
  ST element_def=tmplt(ELEMENT_TEMPLATE);
  String id=ed.hasBase() ? ed.getBase().getPath() : ed.getPath();
  String shortId=id.substring(id.lastIndexOf(""String_Node_Str"") + 1);
  String card=""String_Node_Str"".equals(ed.getMax()) ? (ed.getMin() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") : ""String_Node_Str"";
  String defn;
  element_def.add(""String_Node_Str"",id.charAt(0) == id.toLowerCase().charAt(0) ? shortId : id);
  element_def.add(""String_Node_Str"",card);
  List<ElementDefinition> children=ProfileUtilities.getChildList(sd,ed);
  if (children.size() > 0) {
    innerTypes.add(new ImmutablePair<StructureDefinition,ElementDefinition>(sd,ed));
    ST anon_link=tmplt(SIMPLE_ELEMENT_TEMPLATE);
    anon_link.add(""String_Node_Str"",id);
    defn=anon_link.render();
  }
 else   if (ed.getType().size() == 1) {
    defn=genTypeRef(ed.getType().get(0));
  }
 else   if (ed.getContentReference() != null) {
    String typ=id.substring(0,id.indexOf(""String_Node_Str"") + 1) + ed.getContentReference().substring(1);
    ST defn_ref=tmplt(SIMPLE_ELEMENT_TEMPLATE);
    defn_ref.add(""String_Node_Str"",typ);
    defn=defn_ref.render();
  }
 else {
    if (id.endsWith(""String_Node_Str"")) {
      return genChoiceTypes(ed,id,shortId,card);
    }
 else {
      defn=genAlternativeTypes(ed,id,shortId,card);
    }
  }
  element_def.add(""String_Node_Str"",defn);
  return element_def.render();
}",0.9079343823234014
24048,"private void genRange(Section section,String tn,String en,ElementDefn e,TypeRef tr,boolean datatype) throws Exception {
  if (e.isModifier())   section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str""));
  if (e.isXmlAttribute())   section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str""));
  if (e.hasMustSupport() && e.isMustSupport())   section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str""));
  if (e.hasSummaryItem() && e.isSummaryItem())   section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str""));
  if (!Utilities.noString(e.getW5()))   section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"" + e.getW5()));
  if (e.hasMeaningWhenMissing())   section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",literal(e.getMeaningWhenMissing()));
  cardinality(section,""String_Node_Str"" + tn + ""String_Node_Str""+ en,e.getMinCardinality().toString(),e.getMaxCardinality() == Integer.MAX_VALUE ? ""String_Node_Str"" : e.getMaxCardinality().toString());
  if (e.getMinCardinality() > 0)   section.triple(""String_Node_Str"" + tn,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"").predicate(""String_Node_Str"",""String_Node_Str"" + tn + ""String_Node_Str""+ en).predicate(""String_Node_Str"",literal(e.getMinCardinality().toString() + ""String_Node_Str"")));
  if (e.getMaxCardinality() < Integer.MAX_VALUE)   section.triple(""String_Node_Str"" + tn,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"").predicate(""String_Node_Str"",""String_Node_Str"" + tn + ""String_Node_Str""+ en).predicate(""String_Node_Str"",literal(e.getMaxCardinality().toString() + ""String_Node_Str"")));
  if (tr == null) {
    section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",""String_Node_Str"" + e.getDeclaredTypeName());
    anonTypes.push(new AnonTypeInfo(section,e.getDeclaredTypeName(),e,datatype));
  }
 else   if (tr.getName().startsWith(""String_Node_Str"")) {
    ElementDefn r=getElementForPath(tr.getName().substring(1));
    section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",""String_Node_Str"" + r.getDeclaredTypeName());
  }
 else {
    if (e.hasBinding()) {
      BindingSpecification bs=e.getBinding();
      if (bs.getValueSet() != null) {
        String bn=getPNameForUri(bs.getValueSet().getUrl());
        section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",processType(tr.getName()));
        section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",bn);
        if (!bn.startsWith(""String_Node_Str""))         valuesets.put(bn,bs.getValueSet());
      }
 else       if (!Utilities.noString(bs.getReference())) {
        section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",processType(tr.getName()));
        section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",""String_Node_Str"" + bs.getReference() + ""String_Node_Str"");
      }
      section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"" + bs.getStrength().toCode()));
    }
 else     section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",processType(tr.getName()));
  }
  if (e.getDefaultValue() != null) {
    if (e.getDefaultValue() instanceof DecimalType)     section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"").predicate(""String_Node_Str"",literal(((DecimalType)e.getDefaultValue()).asStringValue())));
 else     if (e.getDefaultValue() instanceof BooleanType)     section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"").predicate(""String_Node_Str"",literal(((BooleanType)e.getDefaultValue()).asStringValue())));
 else     if (e.getDefaultValue() instanceof IntegerType)     section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"").predicate(""String_Node_Str"",literal(((IntegerType)e.getDefaultValue()).asStringValue())));
 else     if (e.getDefaultValue() instanceof CodeType)     section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"").predicate(""String_Node_Str"",literal(((CodeType)e.getDefaultValue()).asStringValue())));
 else     throw new Error(""String_Node_Str"" + e.getDefaultValue().getClass().getName() + ""String_Node_Str"");
  }
}","private void genRange(Section section,String tn,String en,ElementDefn e,TypeRef tr,boolean datatype) throws Exception {
  if (e.isModifier())   section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str""));
  if (e.isXmlAttribute())   section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str""));
  if (e.hasMustSupport() && e.isMustSupport())   section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str""));
  if (e.hasSummaryItem() && e.isSummaryItem())   section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str""));
  if (!Utilities.noString(e.getW5()))   section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"" + e.getW5()));
  if (e.hasMeaningWhenMissing())   section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",literal(e.getMeaningWhenMissing()));
  cardinality(section,""String_Node_Str"" + tn + ""String_Node_Str""+ en,e.getMinCardinality().toString(),e.getMaxCardinality() == Integer.MAX_VALUE ? ""String_Node_Str"" : e.getMaxCardinality().toString());
  if (e.getMinCardinality() > 0)   section.triple(""String_Node_Str"" + tn,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"").predicate(""String_Node_Str"",""String_Node_Str"" + tn + ""String_Node_Str""+ en).predicate(""String_Node_Str"",literalTyped(e.getMinCardinality().toString(),""String_Node_Str"")));
  if (e.getMaxCardinality() < Integer.MAX_VALUE)   section.triple(""String_Node_Str"" + tn,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"").predicate(""String_Node_Str"",""String_Node_Str"" + tn + ""String_Node_Str""+ en).predicate(""String_Node_Str"",literalTyped(e.getMaxCardinality().toString(),""String_Node_Str"")));
  if (tr == null) {
    section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",""String_Node_Str"" + e.getDeclaredTypeName());
    anonTypes.push(new AnonTypeInfo(section,e.getDeclaredTypeName(),e,datatype));
  }
 else   if (tr.getName().startsWith(""String_Node_Str"")) {
    ElementDefn r=getElementForPath(tr.getName().substring(1));
    section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",""String_Node_Str"" + r.getDeclaredTypeName());
  }
 else {
    if (e.hasBinding()) {
      BindingSpecification bs=e.getBinding();
      if (bs.getValueSet() != null) {
        String bn=getPNameForUri(bs.getValueSet().getUrl());
        section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",processType(tr.getName()));
        section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",bn);
        if (!bn.startsWith(""String_Node_Str""))         valuesets.put(bn,bs.getValueSet());
      }
 else       if (!Utilities.noString(bs.getReference())) {
        section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",processType(tr.getName()));
        section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",""String_Node_Str"" + bs.getReference() + ""String_Node_Str"");
      }
      section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"" + bs.getStrength().toCode()));
    }
 else     section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",processType(tr.getName()));
  }
  if (e.getDefaultValue() != null) {
    if (e.getDefaultValue() instanceof DecimalType)     section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"").predicate(""String_Node_Str"",literal(((DecimalType)e.getDefaultValue()).asStringValue())));
 else     if (e.getDefaultValue() instanceof BooleanType)     section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"").predicate(""String_Node_Str"",literal(((BooleanType)e.getDefaultValue()).asStringValue())));
 else     if (e.getDefaultValue() instanceof IntegerType)     section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"").predicate(""String_Node_Str"",literal(((IntegerType)e.getDefaultValue()).asStringValue())));
 else     if (e.getDefaultValue() instanceof CodeType)     section.triple(""String_Node_Str"" + tn + ""String_Node_Str""+ en,""String_Node_Str"",complex().predicate(""String_Node_Str"",""String_Node_Str"").predicate(""String_Node_Str"",literal(((CodeType)e.getDefaultValue()).asStringValue())));
 else     throw new Error(""String_Node_Str"" + e.getDefaultValue().getClass().getName() + ""String_Node_Str"");
  }
}",0.9981755524021894
24049,"public void getNamedChildrenWithWildcard(String string,List<Element> values){
  throw new Error(""String_Node_Str"");
}","public void getNamedChildrenWithWildcard(String string,List<Element> values){
  Validate.isTrue(string.endsWith(""String_Node_Str""));
  String start=string.substring(0,string.length() - 3);
  if (children != null) {
    for (    Element child : children) {
      if (child.getName().startsWith(start)) {
        values.add(child);
      }
    }
  }
}",0.4377682403433476
24050,"protected StructureDefinition getDefinition(int line,int col,String name) throws FHIRFormatError {
  if (name == null) {
    logError(line,col,name,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.FATAL);
    return null;
  }
  for (  StructureDefinition sd : context.allStructures()) {
    if (name.equals(sd.getId())) {
      return sd;
    }
  }
  logError(line,col,name,IssueType.STRUCTURE,""String_Node_Str"" + name + ""String_Node_Str"",IssueSeverity.FATAL);
  return null;
}","protected StructureDefinition getDefinition(int line,int col,String name) throws FHIRFormatError {
  if (name == null) {
    logError(line,col,name,IssueType.STRUCTURE,""String_Node_Str"",IssueSeverity.FATAL);
    return null;
  }
  for (  StructureDefinition sd : context.allStructures()) {
    if (name.equals(sd.getIdElement().getIdPart())) {
      return sd;
    }
  }
  logError(line,col,name,IssueType.STRUCTURE,""String_Node_Str"" + name + ""String_Node_Str"",IssueSeverity.FATAL);
  return null;
}",0.9805924412665986
24051,"public boolean equalsDeep(Base other){
  return other == this;
}","public boolean equalsDeep(Base other){
  return other != null;
}",0.921875
24052,"public static boolean compareValues(PrimitiveType e1,PrimitiveType e2,boolean allowNull){
  if (e1 == null && e2 == null && allowNull)   return true;
  if (e1 == null || e2 == null)   return false;
  return e1.equalsShallow(e2);
}","public static boolean compareValues(PrimitiveType e1,PrimitiveType e2,boolean allowNull){
  boolean noLeft=e1 == null || e1.isEmpty();
  boolean noRight=e2 == null || e2.isEmpty();
  if (noLeft && noRight && allowNull) {
    return true;
  }
  if (noLeft != noRight)   return false;
  return e1.equalsShallow(e2);
}",0.6275229357798165
24053,"public boolean equalsShallow(Base other){
  return other == this;
}","public boolean equalsShallow(Base other){
  return other != null;
}",0.9253731343283582
24054,"public boolean hasType(String... name){
  String t=fhirType();
  for (  String n : name)   if (n.equals(t))   return true;
  return false;
}","public boolean hasType(String... name){
  String t=fhirType();
  for (  String n : name)   if (n.equalsIgnoreCase(t))   return true;
  return false;
}",0.9655172413793104
24055,"private void generateCodeSystemsPart2() throws Exception {
  Set<String> urls=new HashSet<String>();
  for (  CodeSystem cs : page.getDefinitions().getCodeSystems().values()) {
    if (cs.getUserData(""String_Node_Str"") == null && !cs.getUrl().contains(""String_Node_Str"") && !cs.getUrl().contains(""String_Node_Str""))     if (!urls.contains(cs.getUrl())) {
      urls.add(cs.getUrl());
      generateCodeSystemPart2(cs);
    }
  }
}","private void generateCodeSystemsPart2() throws Exception {
  Set<String> urls=new HashSet<String>();
  for (  CodeSystem cs : page.getDefinitions().getCodeSystems().values()) {
    if (cs != null) {
      if (cs.getUserData(""String_Node_Str"") == null && !cs.getUrl().contains(""String_Node_Str"") && !cs.getUrl().contains(""String_Node_Str""))       if (!urls.contains(cs.getUrl())) {
        urls.add(cs.getUrl());
        generateCodeSystemPart2(cs);
      }
    }
  }
}",0.9576837416481068
24056,"private void checkStringOption(List<ValidationMessage> errors,WrapperElement answer,NodeStack stack,Questionnaire qSrc,QuestionnaireItemComponent qItem,boolean openChoice){
  WrapperElement v=answer.getNamedChild(""String_Node_Str"");
  NodeStack ns=stack.push(v,-1,null,null);
  if (qItem.getOption().size() > 0) {
    List<StringType> list=new ArrayList<StringType>();
    for (    QuestionnaireItemOptionComponent components : qItem.getOption()) {
      try {
        list.add(components.getValueStringType());
      }
 catch (      FHIRException e) {
      }
    }
    if (list.isEmpty() && !openChoice) {
      rule(errors,IssueType.STRUCTURE,v.line(),v.col(),stack.getLiteralPath(),false,""String_Node_Str"");
    }
 else {
      boolean found=false;
      for (      StringType item : list) {
        if (item.getValue().equals((v.getAttribute(""String_Node_Str"")))) {
          found=true;
          break;
        }
      }
      if (!found) {
        rule(errors,IssueType.STRUCTURE,v.line(),v.col(),stack.getLiteralPath(),found,""String_Node_Str"" + v.getAttribute(""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
 else   hint(errors,IssueType.STRUCTURE,v.line(),v.col(),stack.getLiteralPath(),false,""String_Node_Str"");
}","private void checkStringOption(List<ValidationMessage> errors,WrapperElement answer,NodeStack stack,Questionnaire qSrc,QuestionnaireItemComponent qItem,boolean openChoice){
  WrapperElement v=answer.getNamedChild(""String_Node_Str"");
  NodeStack ns=stack.push(v,-1,null,null);
  if (qItem.getOption().size() > 0) {
    List<StringType> list=new ArrayList<StringType>();
    for (    QuestionnaireItemOptionComponent components : qItem.getOption()) {
      try {
        list.add(components.getValueStringType());
      }
 catch (      FHIRException e) {
      }
    }
    if (list.isEmpty() && !openChoice) {
      rule(errors,IssueType.STRUCTURE,v.line(),v.col(),stack.getLiteralPath(),false,""String_Node_Str"");
    }
 else {
      boolean found=false;
      for (      StringType item : list) {
        if (item.getValue().equals((v.getAttribute(""String_Node_Str"")))) {
          found=true;
          break;
        }
      }
      if (!found) {
        rule(errors,IssueType.STRUCTURE,v.line(),v.col(),stack.getLiteralPath(),found,""String_Node_Str"" + v.getAttribute(""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
 else {
    hint(errors,IssueType.STRUCTURE,v.line(),v.col(),stack.getLiteralPath(),false,""String_Node_Str"");
  }
}",0.9967715899919288
24057,"private void validateAnswerCode(List<ValidationMessage> errors,WrapperElement answer,NodeStack stack,Questionnaire qSrc,QuestionnaireItemComponent qItem){
  WrapperElement v=answer.getNamedChild(""String_Node_Str"");
  NodeStack ns=stack.push(v,-1,null,null);
  if (qItem.getOption().size() > 0)   checkCodingOption(errors,answer,stack,qSrc,qItem,false);
 else   if (qItem.hasOptions())   validateAnswerCode(errors,v,stack,qSrc,qItem.getOptions());
 else   hint(errors,IssueType.STRUCTURE,v.line(),v.col(),stack.getLiteralPath(),false,""String_Node_Str"");
}","private void validateAnswerCode(List<ValidationMessage> errors,WrapperElement answer,NodeStack stack,Questionnaire qSrc,QuestionnaireItemComponent qItem,boolean theOpenChoice){
  WrapperElement v=answer.getNamedChild(""String_Node_Str"");
  NodeStack ns=stack.push(v,-1,null,null);
  if (qItem.getOption().size() > 0)   checkCodingOption(errors,answer,stack,qSrc,qItem,theOpenChoice);
 else   if (qItem.hasOptions())   validateAnswerCode(errors,v,stack,qSrc,qItem.getOptions(),theOpenChoice);
 else   hint(errors,IssueType.STRUCTURE,v.line(),v.col(),stack.getLiteralPath(),false,""String_Node_Str"");
}",0.9548611111111112
24058,"private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws Exception {
  reapComments(node,context);
  List<Property> properties=getChildProperties(context.getProperty(),context.getName());
  List<org.w3c.dom.Node> processed=new ArrayList<Node>();
  for (  Property property : properties) {
    if (isAttr(property)) {
      Attr attr=node.getAttributeNode(property.getName());
      processed.add(attr);
      if (attr != null)       if (property.getName().equals(""String_Node_Str""))       context.setValue(attr.getValue());
 else       context.getChildren().add(new Element(property.getName(),property,property.getType(),attr.getValue()));
    }
 else     if (property.isPrimitive() && ""String_Node_Str"".equals(property.getType())) {
      org.w3c.dom.Element div=XMLUtil.getNamedChild(node,property.getName());
      processed.add(div);
      XhtmlNode xhtml=new XhtmlParser().parseHtmlNode(div);
      context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer().compose(xhtml)));
    }
 else {
      List<org.w3c.dom.Element> children=new ArrayList<org.w3c.dom.Element>();
      XMLUtil.getNamedChildrenWithWildcard(node,property.getName(),children);
      processed.addAll(children);
      for (      org.w3c.dom.Element child : children) {
        Element n=new Element(child.getNodeName(),property);
        context.getChildren().add(n);
        if (property.isResource())         parseResource(path + ""String_Node_Str"" + property.getName(),child,n);
 else         parseChildren(path + ""String_Node_Str"" + property.getName(),child,n);
      }
    }
  }
  if (check) {
    org.w3c.dom.Element child=XMLUtil.getFirstChild(node);
    while (child != null) {
      if (!processed.contains(child))       throw new Exception(""String_Node_Str"" + path + ""String_Node_Str""+ child.getNodeName());
      child=XMLUtil.getNextSibling(child);
    }
    NamedNodeMap am=node.getAttributes();
    for (int i=0; i < am.getLength(); i++) {
      if (!processed.contains(am.item(i)) && !am.item(i).getNodeName().startsWith(""String_Node_Str""))       throw new Exception(""String_Node_Str"" + path + ""String_Node_Str""+ am.item(i).getNodeName());
    }
  }
}","private void parseChildren(String path,org.w3c.dom.Element node,Element context) throws Exception {
  reapComments(node,context);
  List<Property> properties=getChildProperties(context.getProperty(),context.getName());
  List<org.w3c.dom.Node> processed=new ArrayList<Node>();
  for (  Property property : properties) {
    if (isAttr(property)) {
      Attr attr=node.getAttributeNode(property.getName());
      if (attr != null) {
        processed.add(attr);
        if (property.getName().equals(""String_Node_Str""))         context.setValue(attr.getValue());
 else         context.getChildren().add(new Element(property.getName(),property,property.getType(),attr.getValue()));
      }
    }
 else     if (property.isPrimitive() && ""String_Node_Str"".equals(property.getType())) {
      org.w3c.dom.Element div=XMLUtil.getNamedChild(node,property.getName());
      processed.add(div);
      XhtmlNode xhtml=new XhtmlParser().parseHtmlNode(div);
      context.getChildren().add(new Element(""String_Node_Str"",property,""String_Node_Str"",new XhtmlComposer().compose(xhtml)));
    }
 else {
      List<org.w3c.dom.Element> children=new ArrayList<org.w3c.dom.Element>();
      XMLUtil.getNamedChildrenWithWildcard(node,property.getName(),children);
      processed.addAll(children);
      for (      org.w3c.dom.Element child : children) {
        Element n=new Element(child.getNodeName(),property);
        context.getChildren().add(n);
        if (property.isResource())         parseResource(path + ""String_Node_Str"" + property.getName(),child,n);
 else         parseChildren(path + ""String_Node_Str"" + property.getName(),child,n);
      }
    }
  }
  if (check) {
    org.w3c.dom.Element child=XMLUtil.getFirstChild(node);
    while (child != null) {
      if (!processed.contains(child))       throw new Exception(""String_Node_Str"" + path + ""String_Node_Str""+ child.getNodeName());
      child=XMLUtil.getNextSibling(child);
    }
    NamedNodeMap am=node.getAttributes();
    for (int i=0; i < am.getLength(); i++) {
      if (!processed.contains(am.item(i)) && !am.item(i).getNodeName().startsWith(""String_Node_Str""))       throw new Exception(""String_Node_Str"" + path + ""String_Node_Str""+ am.item(i).getNodeName());
    }
  }
}",0.9838056680161944
24059,"public StructureDefinition getSnapShotForProfile(String base) throws Exception {
  String[] parts=base.split(""String_Node_Str"");
  if (parts[0].startsWith(""String_Node_Str"") && parts.length == 1) {
    String name=base.substring(40);
    if (page.getDefinitions().hasResource(name))     return page.getDefinitions().getSnapShotForType(name);
 else     if (page.getDefinitions().hasType(name)) {
      TypeDefn t=page.getDefinitions().getElementDefn(name);
      if (t.getProfile().hasSnapshot())       return t.getProfile();
      throw new Exception(""String_Node_Str"" + name);
    }
 else     throw new Exception(""String_Node_Str"" + name);
  }
  StructureDefinition p=new ProfileUtilities(page.getWorkerContext(),page.getValidationErrors(),page).getProfile(null,parts[0]);
  if (p == null)   throw new Exception(""String_Node_Str"" + base);
  if (parts.length == 1) {
    if (p.getSnapshot() == null)     throw new Exception(""String_Node_Str"" + base + ""String_Node_Str"");
    return p;
  }
  for (  Resource r : p.getContained()) {
    if (r instanceof StructureDefinition && r.getId().equals(parts[1])) {
      StructureDefinition pc=(StructureDefinition)r;
      if (pc.getSnapshot() == null) {
        StructureDefinition ps=getSnapShotForProfile(pc.getBase());
        processProfile(pc);
      }
      return pc;
    }
  }
  throw new Exception(""String_Node_Str"" + base);
}","public StructureDefinition getSnapShotForProfile(String base) throws Exception {
  String[] parts=base.split(""String_Node_Str"");
  if (parts[0].startsWith(""String_Node_Str"") && parts.length == 1) {
    String name=base.substring(40);
    if (page.getDefinitions().hasResource(name))     return page.getDefinitions().getSnapShotForType(name);
 else     if (page.getDefinitions().hasType(name)) {
      TypeDefn t=page.getDefinitions().getElementDefn(name);
      if (t.getProfile().hasSnapshot())       return t.getProfile();
      throw new Exception(""String_Node_Str"" + name);
    }
  }
  StructureDefinition p=new ProfileUtilities(page.getWorkerContext(),page.getValidationErrors(),page).getProfile(null,parts[0]);
  if (p == null)   throw new Exception(""String_Node_Str"" + base);
  if (parts.length == 1) {
    if (p.getSnapshot() == null)     throw new Exception(""String_Node_Str"" + base + ""String_Node_Str"");
    return p;
  }
  for (  Resource r : p.getContained()) {
    if (r instanceof StructureDefinition && r.getId().equals(parts[1])) {
      StructureDefinition pc=(StructureDefinition)r;
      if (pc.getSnapshot() == null) {
        StructureDefinition ps=getSnapShotForProfile(pc.getBase());
        processProfile(pc);
      }
      return pc;
    }
  }
  throw new Exception(""String_Node_Str"" + base);
}",0.978865406006674
24060,"private void checkFragments() throws Exception {
  for (  Fragment f : fragments) {
    String xml=f.getXml();
    ByteArrayInputStream bs=new ByteArrayInputStream(xml.getBytes());
    Document doc;
    try {
      DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
      factory.setNamespaceAware(true);
      DocumentBuilder builder=factory.newDocumentBuilder();
      doc=builder.parse(bs);
    }
 catch (    Exception e) {
      TextFile.bytesToFile(xml.getBytes(),Utilities.path(page.getFolders().dstDir,""String_Node_Str""));
      throw new Exception(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ Utilities.path(page.getFolders().dstDir,""String_Node_Str""),e);
    }
    org.w3c.dom.Element base=doc.getDocumentElement();
    String type=base.getAttribute(""String_Node_Str"");
    if (!page.getDefinitions().hasPrimitiveType(type)) {
      try {
        new org.hl7.fhir.dstu3.metamodel.XmlParser(page.getWorkerContext(),true).parse(XMLUtil.getFirstChild(base),type);
      }
 catch (      Exception e) {
        page.getValidationErrors().add(new ValidationMessage(Source.Publisher,IssueType.STRUCTURE,""String_Node_Str"" + f.getPage() + ""String_Node_Str""+ e.getMessage(),IssueSeverity.ERROR));
      }
    }
  }
}","private void checkFragments() throws Exception {
  for (  Fragment f : fragments) {
    String xml=f.getXml();
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setNamespaceAware(true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    InputSource is=new InputSource(new StringReader(xml));
    Document doc=builder.parse(is);
    org.w3c.dom.Element base=doc.getDocumentElement();
    String type=base.getAttribute(""String_Node_Str"");
    if (!page.getDefinitions().hasPrimitiveType(type)) {
      try {
        new org.hl7.fhir.dstu3.metamodel.XmlParser(page.getWorkerContext(),true).parse(XMLUtil.getFirstChild(base),type);
      }
 catch (      Exception e) {
        page.getValidationErrors().add(new ValidationMessage(Source.Publisher,IssueType.STRUCTURE,""String_Node_Str"" + f.getPage() + ""String_Node_Str""+ e.getMessage(),IssueSeverity.ERROR));
      }
    }
  }
}",0.7868700878409616
24061,"private void generateElement(ElementDefn root,ElementDefn e,String paramType,Map<String,String> rules) throws Exception {
  List<TypeRef> types=e.getTypes();
  if (types.size() > 1 || (types.size() == 1 && types.get(0).isWildcardType())) {
    if (!e.getName().contains(""String_Node_Str""))     throw new Exception(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ root.getName());
    if ((types.size() == 1 && types.get(0).isWildcardType())) {
      generateAny(root,e,e.getName().replace(""String_Node_Str"",""String_Node_Str""),null);
    }
 else {
      String close=""String_Node_Str"";
      ;
      if (!forCodeGeneration) {
        write(""String_Node_Str"" + checkRule(e.getMinCardinality().toString(),e.getName() + ""String_Node_Str"",rules) + ""String_Node_Str"");
        if (e.hasDefinition()) {
          write(""String_Node_Str"");
          write(""String_Node_Str"" + Utilities.escapeXml(checkRule(e.getDefinition(),e.getName() + ""String_Node_Str"",rules)) + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
        close=""String_Node_Str"";
      }
      for (      TypeRef t : types) {
        String type=encodeType(e,t,true);
        String name=e.getName().substring(0,e.getName().length() - 3) + nameForType(type);
        write(""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str"");
        if (e.unbounded())         write(""String_Node_Str"" + checkRule(""String_Node_Str"",e.getName() + ""String_Node_Str"",rules) + ""String_Node_Str""+ close+ ""String_Node_Str"");
 else         write(""String_Node_Str"" + checkRule(""String_Node_Str"",e.getName() + ""String_Node_Str"",rules) + ""String_Node_Str""+ close+ ""String_Node_Str"");
        if (forCodeGeneration) {
          write(""String_Node_Str"");
          if (e.hasDefinition()) {
            write(""String_Node_Str"" + Utilities.escapeXml(checkRule(e.getDefinition(),e.getName() + ""String_Node_Str"",rules)) + ""String_Node_Str""+ e.getName().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"");
          }
 else {
            write(""String_Node_Str"" + e.getName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
          }
          write(""String_Node_Str"");
          write(""String_Node_Str"");
        }
      }
      if (!forCodeGeneration)       write(""String_Node_Str"");
    }
  }
 else {
    write(""String_Node_Str"");
    if (""String_Node_Str"".equals(e.getName()))     write(""String_Node_Str"" + e.getName() + ""String_Node_Str"");
 else     if (""String_Node_Str"".equals(e.getName()) && e.typeCode().equals(""String_Node_Str""))     write(""String_Node_Str"");
 else     if (e.usesCompositeType()) {
      ElementDefn ref=root.getElementByName(e.typeCode().substring(1));
      String rtn=this.types.get(ref);
      if (rtn == null)       throw new Exception(""String_Node_Str"" + types.toString() + ""String_Node_Str"");
      write(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ rtn+ ""String_Node_Str"");
    }
 else     if (types.size() == 0 && e.getElements().size() > 0) {
      String tn=root.getName() + ""String_Node_Str"" + Utilities.capitalize(e.getName());
      int i=0;
      while (structures.containsKey(tn)) {
        i++;
        tn=root.getName() + ""String_Node_Str"" + Utilities.capitalize(e.getName())+ Integer.toString(i);
      }
      write(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ tn+ ""String_Node_Str"");
      structures.put(tn,e);
      this.types.put(e,tn);
      typenames.add(tn);
    }
 else     if (types.size() == 1) {
      if (types.get(0).isUnboundGenericParam() && paramType != null)       write(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ paramType+ ""String_Node_Str"");
 else       if (!Utilities.noString(e.getRegex())) {
        String tn=root.getName() + Utilities.capitalize(e.getName()) + ""String_Node_Str"";
        regexQueue.put(tn,e.getRegex());
        write(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ tn+ ""String_Node_Str"");
      }
 else       write(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ encodeType(e,types.get(0),true)+ ""String_Node_Str"");
    }
 else     throw new Exception(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ root.getName()+ ""String_Node_Str""+ Integer.toString(types.size()));
    write(""String_Node_Str"" + checkRule(e.getMinCardinality().toString(),e.getName() + ""String_Node_Str"",rules) + ""String_Node_Str"");
    if (e.unbounded())     write(""String_Node_Str"" + checkRule(""String_Node_Str"",e.getName() + ""String_Node_Str"",rules) + ""String_Node_Str"");
 else     write(""String_Node_Str"" + checkRule(""String_Node_Str"",e.getName() + ""String_Node_Str"",rules) + ""String_Node_Str"");
    if (e.hasDefinition()) {
      write(""String_Node_Str"");
      write(""String_Node_Str"");
      write(""String_Node_Str"" + Utilities.escapeXml(checkRule(e.getDefinition(),e.getName() + ""String_Node_Str"",rules)) + ""String_Node_Str"");
      write(""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      write(""String_Node_Str"");
    }
  }
}","private void generateElement(ElementDefn root,ElementDefn e,String paramType,Map<String,String> rules) throws Exception {
  List<TypeRef> types=e.getTypes();
  if (types.size() > 1 || (types.size() == 1 && types.get(0).isWildcardType())) {
    if (!e.getName().contains(""String_Node_Str""))     throw new Exception(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ root.getName());
    if ((types.size() == 1 && types.get(0).isWildcardType())) {
      generateAny(root,e,e.getName().replace(""String_Node_Str"",""String_Node_Str""),null);
    }
 else {
      String close=""String_Node_Str"";
      ;
      if (!forCodeGeneration) {
        write(""String_Node_Str"" + checkRule(e.getMinCardinality().toString(),e.getName() + ""String_Node_Str"",rules) + ""String_Node_Str"");
        if (e.hasDefinition()) {
          write(""String_Node_Str"");
          write(""String_Node_Str"" + Utilities.escapeXml(checkRule(e.getDefinition(),e.getName() + ""String_Node_Str"",rules)) + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
        close=""String_Node_Str"";
      }
      for (      TypeRef t : types) {
        String type=encodeType(e,t,true);
        String name=e.getName().substring(0,e.getName().length() - 3) + nameForType(type);
        write(""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str"");
        if (e.unbounded())         write(""String_Node_Str"" + checkRule(""String_Node_Str"",e.getName() + ""String_Node_Str"",rules) + ""String_Node_Str""+ close+ ""String_Node_Str"");
 else         write(""String_Node_Str"" + checkRule(""String_Node_Str"",e.getName() + ""String_Node_Str"",rules) + ""String_Node_Str""+ close+ ""String_Node_Str"");
        if (forCodeGeneration) {
          write(""String_Node_Str"");
          if (e.hasDefinition()) {
            write(""String_Node_Str"" + Utilities.escapeXml(checkRule(e.getDefinition(),e.getName() + ""String_Node_Str"",rules)) + ""String_Node_Str""+ e.getName().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"");
          }
 else {
            write(""String_Node_Str"" + e.getName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
          }
          write(""String_Node_Str"");
          write(""String_Node_Str"");
        }
      }
      if (!forCodeGeneration)       write(""String_Node_Str"");
    }
  }
 else {
    write(""String_Node_Str"");
    if (""String_Node_Str"".equals(e.getName()))     write(""String_Node_Str"" + e.getName() + ""String_Node_Str"");
 else     if (""String_Node_Str"".equals(e.getName()) && e.typeCode().equals(""String_Node_Str""))     write(""String_Node_Str"");
 else     if (e.usesCompositeType()) {
      ElementDefn ref=root.getElementByName(e.typeCode().substring(1));
      String rtn=this.types.get(ref);
      if (rtn == null)       throw new Exception(""String_Node_Str"" + types.toString() + ""String_Node_Str"");
      write(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ rtn+ ""String_Node_Str"");
    }
 else     if (types.size() == 0 && e.getElements().size() > 0) {
      String tn=root.getName() + ""String_Node_Str"" + Utilities.capitalize(e.getName());
      int i=0;
      while (typenames.contains(tn)) {
        i++;
        tn=root.getName() + ""String_Node_Str"" + Utilities.capitalize(e.getName())+ Integer.toString(i);
      }
      write(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ tn+ ""String_Node_Str"");
      structures.put(tn,e);
      this.types.put(e,tn);
      typenames.add(tn);
    }
 else     if (types.size() == 1) {
      if (types.get(0).isUnboundGenericParam() && paramType != null)       write(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ paramType+ ""String_Node_Str"");
 else       if (!Utilities.noString(e.getRegex())) {
        String tn=root.getName() + Utilities.capitalize(e.getName()) + ""String_Node_Str"";
        regexQueue.put(tn,e.getRegex());
        write(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ tn+ ""String_Node_Str"");
      }
 else       write(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ encodeType(e,types.get(0),true)+ ""String_Node_Str"");
    }
 else     throw new Exception(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ root.getName()+ ""String_Node_Str""+ Integer.toString(types.size()));
    write(""String_Node_Str"" + checkRule(e.getMinCardinality().toString(),e.getName() + ""String_Node_Str"",rules) + ""String_Node_Str"");
    if (e.unbounded())     write(""String_Node_Str"" + checkRule(""String_Node_Str"",e.getName() + ""String_Node_Str"",rules) + ""String_Node_Str"");
 else     write(""String_Node_Str"" + checkRule(""String_Node_Str"",e.getName() + ""String_Node_Str"",rules) + ""String_Node_Str"");
    if (e.hasDefinition()) {
      write(""String_Node_Str"");
      write(""String_Node_Str"");
      write(""String_Node_Str"" + Utilities.escapeXml(checkRule(e.getDefinition(),e.getName() + ""String_Node_Str"",rules)) + ""String_Node_Str"");
      write(""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      write(""String_Node_Str"");
    }
  }
}",0.9961654894046418
24062,"public SearchParameter makeSearchParam(StructureDefinition p,String id,String rn,SearchParameterDefn spd) throws Exception {
  SearchParameter sp=new SearchParameter();
  sp.setId(id.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  sp.setUrl(""String_Node_Str"" + sp.getId());
  if (context.getSearchParameters().containsKey(sp.getUrl()))   throw new Exception(""String_Node_Str"" + sp.getUrl());
  context.getSearchParameters().put(sp.getUrl(),sp);
  sp.setName(spd.getCode());
  sp.setCode(spd.getCode());
  sp.setDate(genDate.getTime());
  sp.setPublisher(p.getPublisher());
  definitions.addNs(sp.getUrl(),""String_Node_Str"" + sp.getName(),rn.toLowerCase() + ""String_Node_Str"");
  for (  StructureDefinitionContactComponent tc : p.getContact()) {
    SearchParameterContactComponent t=sp.addContact();
    t.setNameElement(tc.getNameElement().copy());
    for (    ContactPoint ts : tc.getTelecom())     t.getTelecom().add(ts.copy());
  }
  if (p.hasConstrainedType())   sp.setBase(p.getConstrainedType());
 else   sp.setBase(p.getName());
  if (!definitions.hasResource(sp.getBase()) && !sp.getBase().equals(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + sp.getBase());
  sp.setType(getSearchParamType(spd.getType()));
  sp.setDescription(spd.getDescription());
  for (  String s : spd.getExpressions())   ToolingExtensions.addStringExtension(sp,ToolingExtensions.EXT_SEARCH_EXPRESSION,s);
  String xpath=new XPathQueryGenerator(this.definitions,null,null).generateXpath(spd.getPaths());
  if (xpath != null) {
    if (xpath.contains(""String_Node_Str""))     xpath=convertToXpath(xpath);
    sp.setXpath(xpath);
    sp.setXpathUsage(spd.getxPathUsage());
  }
  for (  String target : spd.getWorkingTargets()) {
    if (""String_Node_Str"".equals(target) == true) {
      for (      String resourceName : definitions.sortedResourceNames())       sp.addTarget(resourceName);
    }
 else     sp.addTarget(target);
  }
  return sp;
}","public SearchParameter makeSearchParam(StructureDefinition p,String id,String rn,SearchParameterDefn spd) throws Exception {
  SearchParameter sp=new SearchParameter();
  sp.setId(id.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  sp.setUrl(""String_Node_Str"" + sp.getId());
  if (context.getSearchParameters().containsKey(sp.getUrl()))   throw new Exception(""String_Node_Str"" + sp.getUrl());
  context.getSearchParameters().put(sp.getUrl(),sp);
  sp.setName(spd.getCode());
  sp.setCode(spd.getCode());
  sp.setDate(genDate.getTime());
  sp.setPublisher(p.getPublisher());
  definitions.addNs(sp.getUrl(),""String_Node_Str"" + sp.getName(),rn.toLowerCase() + ""String_Node_Str"");
  for (  StructureDefinitionContactComponent tc : p.getContact()) {
    SearchParameterContactComponent t=sp.addContact();
    t.setNameElement(tc.getNameElement().copy());
    for (    ContactPoint ts : tc.getTelecom())     t.getTelecom().add(ts.copy());
  }
  if (p.hasConstrainedType())   sp.setBase(p.getConstrainedType());
 else   sp.setBase(p.getName());
  if (!definitions.hasResource(sp.getBase()) && !sp.getBase().equals(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + sp.getBase());
  sp.setType(getSearchParamType(spd.getType()));
  sp.setDescription(spd.getDescription());
  if (!Utilities.noString(spd.getExpression()))   ToolingExtensions.addStringExtension(sp,ToolingExtensions.EXT_SEARCH_EXPRESSION,spd.getExpression());
  String xpath=new XPathQueryGenerator(this.definitions,null,null).generateXpath(spd.getPaths());
  if (xpath != null) {
    if (xpath.contains(""String_Node_Str""))     xpath=convertToXpath(xpath);
    sp.setXpath(xpath);
    sp.setXpathUsage(spd.getxPathUsage());
  }
  for (  String target : spd.getWorkingTargets()) {
    if (""String_Node_Str"".equals(target) == true) {
      for (      String resourceName : definitions.sortedResourceNames())       sp.addTarget(resourceName);
    }
 else     sp.addTarget(target);
  }
  return sp;
}",0.9844844844844844
24063,"public String generateXpath(List<String> list) throws Exception {
  StringBuilder b=new StringBuilder();
  for (  String ppath : list) {
    String path[]=splitPath(ppath);
    if (path[path.length - 1].endsWith(""String_Node_Str"")) {
      ElementDefn defn=definitions.getElementDefn(path[0]);
      ElementDefn ed=defn.getElementForPath(ppath,definitions,""String_Node_Str"",true);
      for (      TypeRef tr : ed.getTypes()) {
        buildPath(b,path,ed.getName().substring(0,ed.getName().length() - 3) + Utilities.capitalize(tr.getName()));
      }
    }
 else     buildPath(b,path,path[path.length - 1]);
    return b.toString();
  }
  return null;
}","public String generateXpath(List<String> list) throws Exception {
  StringBuilder b=new StringBuilder();
  for (  String ppath : list) {
    String path[]=splitPath(ppath);
    if (path[path.length - 1].endsWith(""String_Node_Str"")) {
      ElementDefn defn=definitions.getElementDefn(path[0]);
      ElementDefn ed=defn.getElementForPath(ppath,definitions,""String_Node_Str"",true);
      for (      TypeRef tr : ed.getTypes()) {
        buildPath(b,path,ed.getName().substring(0,ed.getName().length() - 3) + Utilities.capitalize(tr.getName()));
      }
    }
 else     buildPath(b,path,path[path.length - 1]);
  }
  return b.toString();
}",0.983733539891557
24064,"private void readSearchParams(ResourceDefn root2,Sheet sheet,boolean forProfile) throws Exception {
  if (sheet != null) {
    tabfmt.sheet(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    for (int row=0; row < sheet.rows.size(); row++) {
      tabfmt.row();
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      if (!sheet.hasColumn(row,""String_Node_Str""))       throw new Exception(""String_Node_Str"" + getLocation(row));
      String n=sheet.getColumn(row,""String_Node_Str"");
      if (!n.startsWith(""String_Node_Str"")) {
        if (!sheet.hasColumn(row,""String_Node_Str""))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        if (n.endsWith(""String_Node_Str"") || n.endsWith(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        if (root2.getSearchParams().containsKey(n))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        String d=sheet.getColumn(row,""String_Node_Str"");
        SearchType t=readSearchType(sheet.getColumn(row,""String_Node_Str""),row);
        SearchParameter.XPathUsageType pu=readSearchXPathUsage(sheet.getColumn(row,""String_Node_Str""),row);
        if (Utilities.noString(sheet.getColumn(row,""String_Node_Str"")) && !root2.getName().equals(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        List<String> pn=new ArrayList<String>();
        SearchParameterDefn sp=null;
        if (t == SearchType.composite) {
          String[] pl=sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"");
          if (Utilities.noString(d))           throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
          for (          String pi : pl) {
            String p=pi.trim();
            if (!root2.getSearchParams().containsKey(p)) {
              boolean found=false;
              if (p.endsWith(""String_Node_Str""))               for (              String pan : root2.getSearchParams().keySet()) {
                if (pan.startsWith(p.substring(0,p.length() - 3)))                 found=true;
              }
              if (!found)               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ p+ ""String_Node_Str""+ getLocation(row));
            }
            pn.add(p);
            sp=new SearchParameterDefn(n,d,t,pu);
            sp.getComposites().addAll(pn);
          }
        }
 else {
          String[] pl=sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"");
          for (          String pi : pl) {
            String p=pi.trim();
            ElementDefn e=null;
            if (!Utilities.noString(p) && !p.startsWith(""String_Node_Str"") && !p.startsWith(""String_Node_Str"")&& definitions != null) {
              e=root2.getRoot().getElementForPath(trimIndexes(p),definitions,""String_Node_Str"",true);
            }
            if (Utilities.noString(d) && e != null)             d=e.getShortDefn();
            if (p.startsWith(""String_Node_Str"")) {
              String url=extractExtensionUrl(p);
              StructureDefinition ex=extensionDefinitions.get(url);
              if (ex == null)               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ url+ ""String_Node_Str""+ getLocation(row));
              if (Utilities.noString(d))               d=ex.getDescription();
              pn.add(p);
            }
            if (d == null)             throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
            if (e != null)             pn.add(p);
            if (t == SearchType.reference) {
              if (e == null && !forProfile && !sheet.hasColumn(row,""String_Node_Str""))               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
              if (!forProfile && e != null && (!e.hasType(""String_Node_Str"")) && (!e.hasType(""String_Node_Str"")))               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ e.typeCode());
            }
 else {
              if (e != null && e.hasOnlyType(""String_Node_Str""))               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ t.toString()+ ""String_Node_Str""+ e.typeCode());
              if (t == SearchType.uri) {
                if (e != null && !(e.typeCode().equals(""String_Node_Str"") | e.typeCode().equals(""String_Node_Str"")))                 throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ t.toString()+ ""String_Node_Str""+ e.typeCode());
              }
 else {
                if (e != null && e.typeCode().equals(""String_Node_Str""))                 throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ t.toString()+ ""String_Node_Str""+ e.typeCode());
              }
            }
          }
          if (!forProfile && t == SearchType.reference && pn.size() == 0 && !sheet.hasColumn(row,""String_Node_Str""))           throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
          sp=new SearchParameterDefn(n,d,t,pu);
          sp.getPaths().addAll(pn);
          if (Utilities.noString(sheet.getColumn(row,""String_Node_Str"")))           sp.getExpressions().addAll(pn);
 else           for (          String spp : sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str""))           sp.getExpressions().add(spp);
          if (!Utilities.noString(sheet.getColumn(row,""String_Node_Str""))) {
            sp.setManualTypes(sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str""));
          }
        }
        root2.getSearchParams().put(n,sp);
      }
    }
  }
}","private void readSearchParams(ResourceDefn root2,Sheet sheet,boolean forProfile) throws Exception {
  if (sheet != null) {
    tabfmt.sheet(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    for (int row=0; row < sheet.rows.size(); row++) {
      tabfmt.row();
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      if (!sheet.hasColumn(row,""String_Node_Str""))       throw new Exception(""String_Node_Str"" + getLocation(row));
      String n=sheet.getColumn(row,""String_Node_Str"");
      if (!n.startsWith(""String_Node_Str"")) {
        if (!sheet.hasColumn(row,""String_Node_Str""))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        if (n.endsWith(""String_Node_Str"") || n.endsWith(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        if (root2.getSearchParams().containsKey(n))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        String d=sheet.getColumn(row,""String_Node_Str"");
        SearchType t=readSearchType(sheet.getColumn(row,""String_Node_Str""),row);
        SearchParameter.XPathUsageType pu=readSearchXPathUsage(sheet.getColumn(row,""String_Node_Str""),row);
        if (Utilities.noString(sheet.getColumn(row,""String_Node_Str"")) && !root2.getName().equals(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        List<String> pn=new ArrayList<String>();
        SearchParameterDefn sp=null;
        if (t == SearchType.composite) {
          String[] pl=sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"");
          if (Utilities.noString(d))           throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
          for (          String pi : pl) {
            String p=pi.trim();
            if (!root2.getSearchParams().containsKey(p)) {
              boolean found=false;
              if (p.endsWith(""String_Node_Str""))               for (              String pan : root2.getSearchParams().keySet()) {
                if (pan.startsWith(p.substring(0,p.length() - 3)))                 found=true;
              }
              if (!found)               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ p+ ""String_Node_Str""+ getLocation(row));
            }
            pn.add(p);
            sp=new SearchParameterDefn(n,d,t,pu);
            sp.getComposites().addAll(pn);
          }
        }
 else {
          String[] pl=sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"");
          for (          String pi : pl) {
            String p=pi.trim();
            ElementDefn e=null;
            if (!Utilities.noString(p) && !p.startsWith(""String_Node_Str"") && !p.startsWith(""String_Node_Str"")&& definitions != null) {
              e=root2.getRoot().getElementForPath(trimIndexes(p),definitions,""String_Node_Str"",true);
            }
            if (Utilities.noString(d) && e != null)             d=e.getShortDefn();
            if (p.startsWith(""String_Node_Str"")) {
              String url=extractExtensionUrl(p);
              StructureDefinition ex=extensionDefinitions.get(url);
              if (ex == null)               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ url+ ""String_Node_Str""+ getLocation(row));
              if (Utilities.noString(d))               d=ex.getDescription();
              pn.add(p);
            }
            if (d == null)             throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
            if (e != null)             pn.add(p);
            if (t == SearchType.reference) {
              if (e == null && !forProfile && !sheet.hasColumn(row,""String_Node_Str""))               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
              if (!forProfile && e != null && (!e.hasType(""String_Node_Str"")) && (!e.hasType(""String_Node_Str"")))               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ e.typeCode());
            }
 else {
              if (e != null && e.hasOnlyType(""String_Node_Str""))               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ t.toString()+ ""String_Node_Str""+ e.typeCode());
              if (t == SearchType.uri) {
                if (e != null && !(e.typeCode().equals(""String_Node_Str"") | e.typeCode().equals(""String_Node_Str"")))                 throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ t.toString()+ ""String_Node_Str""+ e.typeCode());
              }
 else {
                if (e != null && e.typeCode().equals(""String_Node_Str""))                 throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ t.toString()+ ""String_Node_Str""+ e.typeCode());
              }
            }
          }
          if (!forProfile && t == SearchType.reference && pn.size() == 0 && !sheet.hasColumn(row,""String_Node_Str""))           throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
          sp=new SearchParameterDefn(n,d,t,pu);
          sp.getPaths().addAll(pn);
          if (Utilities.noString(sheet.getColumn(row,""String_Node_Str"")))           sp.setExpression(pipeSeparate(pn));
 else           sp.setExpression(pipeSeparate(sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"")));
          if (!Utilities.noString(sheet.getColumn(row,""String_Node_Str""))) {
            sp.setManualTypes(sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str""));
          }
        }
        root2.getSearchParams().put(n,sp);
      }
    }
  }
}",0.982509047044632
24065,"public void generate(ElementDefn root,String name,JavaGenClass clss,ProfiledType cd,Date genDate,String version,boolean isAbstract,Map<String,SearchParameterDefn> map) throws Exception {
  typeNames.clear();
  typeNameStrings.clear();
  enums.clear();
  strucs.clear();
  enumNames.clear();
  this.clss=clss;
  boolean isRefType=root.getName().equals(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + Config.FULL_LICENSE_CODE + ""String_Node_Str"");
  write(""String_Node_Str"" + Config.DATE_FORMAT().format(genDate) + ""String_Node_Str""+ version+ ""String_Node_Str"");
  if (clss != JavaGenClass.Constraint) {
    boolean l=true;
    boolean h=hasXhtml(root);
    boolean d=hasDecimal(root);
    boolean s=hasString(root);
    boolean e=hasSharedEnums(root);
    if (l || h || d|| e) {
      if (l)       write(""String_Node_Str"");
      if (h)       write(""String_Node_Str"");
      write(""String_Node_Str"");
      if (d)       write(""String_Node_Str"");
      if (s)       write(""String_Node_Str"");
      if (e)       write(""String_Node_Str"");
    }
    if (clss == JavaGenClass.Resource) {
      write(""String_Node_Str"");
      write(""String_Node_Str"");
    }
    write(""String_Node_Str"");
    write(""String_Node_Str"");
  }
  if (clss != JavaGenClass.Resource) {
    write(""String_Node_Str"");
  }
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  jdoc(""String_Node_Str"",root.getDefinition());
  classname=upFirst(name);
  if (clss == JavaGenClass.Resource) {
    if (!isAbstract) {
      write(""String_Node_Str"" + upFirst(name).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ upFirst(name)+ ""String_Node_Str"");
    }
    String hierarchy;
    if (Utilities.noString(root.typeCode())) {
      hierarchy=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(upFirst(name))) {
      hierarchy=root.typeCode() + ""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(upFirst(name))) {
      hierarchy=root.typeCode() + ""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(upFirst(name))) {
      hierarchy=root.typeCode() + ""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(upFirst(name))) {
      hierarchy=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(upFirst(name))) {
      hierarchy=root.typeCode() + ""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(upFirst(name))) {
      hierarchy=root.typeCode() + ""String_Node_Str"";
    }
 else {
      hierarchy=root.typeCode();
    }
    write(""String_Node_Str"" + (isAbstract ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ upFirst(name)+ ""String_Node_Str""+ hierarchy+ ""String_Node_Str"");
  }
 else   if (clss == JavaGenClass.Structure && upFirst(name).equals(""String_Node_Str"")) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    isAbstract=true;
  }
 else   if (clss == JavaGenClass.Structure) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    boolean isBackboneElement=upFirst(name).equals(""String_Node_Str"");
    isAbstract=isBackboneElement;
    String absractKeyword=isAbstract ? ""String_Node_Str"" : ""String_Node_Str"";
    String hierarchyKeyword;
    if (name.equals(""String_Node_Str"")) {
      hierarchyKeyword=""String_Node_Str"";
    }
 else     if (name.equals(""String_Node_Str"")) {
      hierarchyKeyword=""String_Node_Str"";
    }
 else {
      hierarchyKeyword=""String_Node_Str"";
    }
    write(""String_Node_Str"" + absractKeyword + ""String_Node_Str""+ upFirst(name)+ ""String_Node_Str""+ hierarchyKeyword+ ""String_Node_Str"");
    if (isBackboneElement) {
      write(""String_Node_Str"");
    }
  }
 else   if (clss == JavaGenClass.BackboneElement) {
    write(""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
  }
 else   if (clss == JavaGenClass.Constraint) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str""+ upFirst(root.getName())+ ""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(cd.getName()) + ""String_Node_Str""+ upFirst(root.getName())+ ""String_Node_Str"");
  }
 else   if (root.getName().equals(""String_Node_Str"")) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
  }
 else   if (root.getName().equals(""String_Node_Str"")) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
  }
 else   if (root.getName().equals(""String_Node_Str"")) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
  }
 else   if (root.getName().equals(""String_Node_Str"")) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
  }
 else {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
  }
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  if (clss != JavaGenClass.Constraint) {
    for (    ElementDefn e : root.getElements()) {
      scanNestedTypes(root,root.getName(),e);
    }
    for (    ElementDefn e : enums) {
      generateEnum(e);
    }
    for (    ElementDefn e : strucs) {
      generateType(e,clss == JavaGenClass.Resource ? JavaGenClass.BackboneElement : JavaGenClass.Structure);
    }
    allfields=""String_Node_Str"";
    int i=0;
    for (    ElementDefn e : root.getElements()) {
      generateField(root,e,""String_Node_Str"",i++);
    }
    write(""String_Node_Str"" + Long.toString(allfields.hashCode()) + ""String_Node_Str"");
    hashSum=hashSum + allfields.hashCode();
    List<ElementDefn> mandatory=new ArrayList<ElementDefn>();
    generateConstructor(upFirst(name),mandatory,""String_Node_Str"");
    for (    ElementDefn e : root.getElements()) {
      if (e.isMandatory())       mandatory.add(e);
    }
    if (mandatory.size() > 0)     generateConstructor(upFirst(name),mandatory,""String_Node_Str"");
    generateTypeSpecificConstructors(upFirst(name));
    for (    ElementDefn e : root.getElements()) {
      generateAccessors(root,e,""String_Node_Str"",upFirst(name));
    }
    generateTypeSpecificAccessors(name,clss);
    generateChildrenRegister(root,""String_Node_Str"",isAbstract);
    generatePropertySetter(root,""String_Node_Str"");
    generateChildAdder(root,""String_Node_Str"",classname);
    generateFhirType(root.getName());
  }
 else {
    write(""String_Node_Str"" + inheritedHash + ""String_Node_Str"");
  }
  generateCopy(root,classname,false,isAbstract);
  generateEquals(root,classname,false,isAbstract);
  generateIsEmpty(root,classname,false,isAbstract);
  if (clss == JavaGenClass.Resource && !isAbstract) {
    write(""String_Node_Str"");
    write(""String_Node_Str"");
    write(""String_Node_Str"" + root.getName() + ""String_Node_Str"");
    write(""String_Node_Str"");
    write(""String_Node_Str"");
  }
 else   if (isAbstract && Utilities.noString(root.typeCode()) && clss != JavaGenClass.Structure) {
    write(""String_Node_Str"");
  }
  if (map != null) {
    for (    SearchParameterDefn sp : map.values()) {
      write(""String_Node_Str"" + sp.getCode() + ""String_Node_Str""+ pipeSeparate(sp.getExpressions())+ ""String_Node_Str""+ Utilities.escapeJava(sp.getDescription())+ ""String_Node_Str""+ sp.getType().toString()+ ""String_Node_Str"");
      write(""String_Node_Str"" + clean(sp.getCode()).toUpperCase() + ""String_Node_Str""+ sp.getCode()+ ""String_Node_Str"");
    }
  }
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  flush();
}","public void generate(ElementDefn root,String name,JavaGenClass clss,ProfiledType cd,Date genDate,String version,boolean isAbstract,Map<String,SearchParameterDefn> map) throws Exception {
  typeNames.clear();
  typeNameStrings.clear();
  enums.clear();
  strucs.clear();
  enumNames.clear();
  this.clss=clss;
  boolean isRefType=root.getName().equals(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"" + Config.FULL_LICENSE_CODE + ""String_Node_Str"");
  write(""String_Node_Str"" + Config.DATE_FORMAT().format(genDate) + ""String_Node_Str""+ version+ ""String_Node_Str"");
  if (clss != JavaGenClass.Constraint) {
    boolean l=true;
    boolean h=hasXhtml(root);
    boolean d=hasDecimal(root);
    boolean s=hasString(root);
    boolean e=hasSharedEnums(root);
    if (l || h || d|| e) {
      if (l)       write(""String_Node_Str"");
      if (h)       write(""String_Node_Str"");
      write(""String_Node_Str"");
      if (d)       write(""String_Node_Str"");
      if (s)       write(""String_Node_Str"");
      if (e)       write(""String_Node_Str"");
    }
    if (clss == JavaGenClass.Resource) {
      write(""String_Node_Str"");
      write(""String_Node_Str"");
    }
    write(""String_Node_Str"");
    write(""String_Node_Str"");
  }
  if (clss != JavaGenClass.Resource) {
    write(""String_Node_Str"");
  }
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  jdoc(""String_Node_Str"",root.getDefinition());
  classname=upFirst(name);
  if (clss == JavaGenClass.Resource) {
    if (!isAbstract) {
      write(""String_Node_Str"" + upFirst(name).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ upFirst(name)+ ""String_Node_Str"");
    }
    String hierarchy;
    if (Utilities.noString(root.typeCode())) {
      hierarchy=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(upFirst(name))) {
      hierarchy=root.typeCode() + ""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(upFirst(name))) {
      hierarchy=root.typeCode() + ""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(upFirst(name))) {
      hierarchy=root.typeCode() + ""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(upFirst(name))) {
      hierarchy=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(upFirst(name))) {
      hierarchy=root.typeCode() + ""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(upFirst(name))) {
      hierarchy=root.typeCode() + ""String_Node_Str"";
    }
 else {
      hierarchy=root.typeCode();
    }
    write(""String_Node_Str"" + (isAbstract ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ upFirst(name)+ ""String_Node_Str""+ hierarchy+ ""String_Node_Str"");
  }
 else   if (clss == JavaGenClass.Structure && upFirst(name).equals(""String_Node_Str"")) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    isAbstract=true;
  }
 else   if (clss == JavaGenClass.Structure) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    boolean isBackboneElement=upFirst(name).equals(""String_Node_Str"");
    isAbstract=isBackboneElement;
    String absractKeyword=isAbstract ? ""String_Node_Str"" : ""String_Node_Str"";
    String hierarchyKeyword;
    if (name.equals(""String_Node_Str"")) {
      hierarchyKeyword=""String_Node_Str"";
    }
 else     if (name.equals(""String_Node_Str"")) {
      hierarchyKeyword=""String_Node_Str"";
    }
 else {
      hierarchyKeyword=""String_Node_Str"";
    }
    write(""String_Node_Str"" + absractKeyword + ""String_Node_Str""+ upFirst(name)+ ""String_Node_Str""+ hierarchyKeyword+ ""String_Node_Str"");
    if (isBackboneElement) {
      write(""String_Node_Str"");
    }
  }
 else   if (clss == JavaGenClass.BackboneElement) {
    write(""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
  }
 else   if (clss == JavaGenClass.Constraint) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str""+ upFirst(root.getName())+ ""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(cd.getName()) + ""String_Node_Str""+ upFirst(root.getName())+ ""String_Node_Str"");
  }
 else   if (root.getName().equals(""String_Node_Str"")) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
  }
 else   if (root.getName().equals(""String_Node_Str"")) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
  }
 else   if (root.getName().equals(""String_Node_Str"")) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
  }
 else   if (root.getName().equals(""String_Node_Str"")) {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
  }
 else {
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
    write(""String_Node_Str"" + upFirst(name) + ""String_Node_Str"");
  }
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  if (clss != JavaGenClass.Constraint) {
    for (    ElementDefn e : root.getElements()) {
      scanNestedTypes(root,root.getName(),e);
    }
    for (    ElementDefn e : enums) {
      generateEnum(e);
    }
    for (    ElementDefn e : strucs) {
      generateType(e,clss == JavaGenClass.Resource ? JavaGenClass.BackboneElement : JavaGenClass.Structure);
    }
    allfields=""String_Node_Str"";
    int i=0;
    for (    ElementDefn e : root.getElements()) {
      generateField(root,e,""String_Node_Str"",i++);
    }
    write(""String_Node_Str"" + Long.toString(allfields.hashCode()) + ""String_Node_Str"");
    hashSum=hashSum + allfields.hashCode();
    List<ElementDefn> mandatory=new ArrayList<ElementDefn>();
    generateConstructor(upFirst(name),mandatory,""String_Node_Str"");
    for (    ElementDefn e : root.getElements()) {
      if (e.isMandatory())       mandatory.add(e);
    }
    if (mandatory.size() > 0)     generateConstructor(upFirst(name),mandatory,""String_Node_Str"");
    generateTypeSpecificConstructors(upFirst(name));
    for (    ElementDefn e : root.getElements()) {
      generateAccessors(root,e,""String_Node_Str"",upFirst(name));
    }
    generateTypeSpecificAccessors(name,clss);
    generateChildrenRegister(root,""String_Node_Str"",isAbstract);
    generatePropertySetter(root,""String_Node_Str"");
    generateChildAdder(root,""String_Node_Str"",classname);
    generateFhirType(root.getName());
  }
 else {
    write(""String_Node_Str"" + inheritedHash + ""String_Node_Str"");
  }
  generateCopy(root,classname,false,isAbstract);
  generateEquals(root,classname,false,isAbstract);
  generateIsEmpty(root,classname,false,isAbstract);
  if (clss == JavaGenClass.Resource && !isAbstract) {
    write(""String_Node_Str"");
    write(""String_Node_Str"");
    write(""String_Node_Str"" + root.getName() + ""String_Node_Str"");
    write(""String_Node_Str"");
    write(""String_Node_Str"");
  }
 else   if (isAbstract && Utilities.noString(root.typeCode()) && clss != JavaGenClass.Structure) {
    write(""String_Node_Str"");
  }
  if (map != null) {
    for (    SearchParameterDefn sp : map.values()) {
      write(""String_Node_Str"" + sp.getCode() + ""String_Node_Str""+ sp.getExpression()+ ""String_Node_Str""+ Utilities.escapeJava(sp.getDescription())+ ""String_Node_Str""+ sp.getType().toString()+ ""String_Node_Str"");
      write(""String_Node_Str"" + clean(sp.getCode()).toUpperCase() + ""String_Node_Str""+ sp.getCode()+ ""String_Node_Str"");
    }
  }
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  write(""String_Node_Str"");
  flush();
}",0.9988826815642458
24066,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPath,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPath,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (!diffMatches.get(0).hasSlicing() || slicingDone)) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile().get(0).asStringValue();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBase());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBase());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasName())         outcome.setName(diffMatches.get(0).getName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
            if (outcome.getType().size() > 1)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getName()+ ""String_Node_Str""+ contextName);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath());
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        if (!diffMatches.get(0).hasName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          start=1;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPath,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (!orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriiminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasName())         diffpos++;
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getName().equals(outcome.getName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPath,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,currentBase.copy());
              outcome.setPath(fixedPath(contextPath,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getName().equals(diffItem.getName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,original.copy());
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffpos++;
        }
      }
    }
  }
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPath,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPath,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (!diffMatches.get(0).hasSlicing() || slicingDone)) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile().get(0).asStringValue();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBase());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBase());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasName())         outcome.setName(diffMatches.get(0).getName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
            if (outcome.getType().size() > 1)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getName()+ ""String_Node_Str""+ contextName);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath());
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        if (!diffMatches.get(0).hasName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          start=1;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPath,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (!orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriiminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasName())         diffpos++;
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getName().equals(outcome.getName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPath,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,currentBase.copy());
              outcome.setPath(fixedPath(contextPath,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getName().equals(diffItem.getName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,original.copy());
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffpos++;
        }
      }
    }
  }
}",0.997246990179562
24067,"/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPath,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPath,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (!diffMatches.get(0).hasSlicing() || slicingDone)) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile().get(0).asStringValue();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBase());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBase());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasName())         outcome.setName(diffMatches.get(0).getName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
            if (outcome.getType().size() > 1)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getName()+ ""String_Node_Str""+ contextName);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath());
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        if (!diffMatches.get(0).hasName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          start=1;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPath,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (!orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriiminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasName())         diffpos++;
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getName().equals(outcome.getName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPath,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,currentBase.copy());
              outcome.setPath(fixedPath(contextPath,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getName().equals(diffItem.getName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,original.copy());
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffpos++;
        }
      }
    }
  }
}","/** 
 * @param trimDifferential
 * @throws DefinitionException , FHIRException 
 * @throws Exception
 */
private void processPaths(StructureDefinitionSnapshotComponent result,StructureDefinitionSnapshotComponent base,StructureDefinitionDifferentialComponent differential,int baseCursor,int diffCursor,int baseLimit,int diffLimit,String url,String profileName,String contextPath,boolean trimDifferential,String contextName,String resultPathBase,boolean slicingDone) throws DefinitionException, FHIRException {
  while (baseCursor <= baseLimit) {
    ElementDefinition currentBase=base.getElement().get(baseCursor);
    String cpath=fixedPath(contextPath,currentBase.getPath());
    List<ElementDefinition> diffMatches=getDiffMatches(differential,cpath,diffCursor,diffLimit,profileName);
    if (!currentBase.hasSlicing()) {
      if (diffMatches.isEmpty()) {
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        markDerived(outcome);
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
      }
 else       if (diffMatches.size() == 1 && (!diffMatches.get(0).hasSlicing() || slicingDone)) {
        ElementDefinition template=null;
        if (diffMatches.get(0).hasType() && diffMatches.get(0).getType().size() == 1 && diffMatches.get(0).getType().get(0).hasProfile() && !diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
          String p=diffMatches.get(0).getType().get(0).getProfile().get(0).asStringValue();
          StructureDefinition sd=context.fetchResource(StructureDefinition.class,p);
          if (sd != null) {
            if (!sd.hasSnapshot()) {
              StructureDefinition sdb=context.fetchResource(StructureDefinition.class,sd.getBase());
              if (sdb == null)               throw new DefinitionException(""String_Node_Str"" + sd.getBase());
              generateSnapshot(sdb,sd,sd.getUrl(),sd.getName());
            }
            template=sd.getSnapshot().getElement().get(0).copy().setPath(currentBase.getPath());
            if (!diffMatches.get(0).getType().get(0).getCode().equals(""String_Node_Str"")) {
              template.setMin(currentBase.getMin());
              template.setMax(currentBase.getMax());
            }
          }
        }
        if (template == null)         template=currentBase.copy();
 else         template=overWriteWithCurrent(template,currentBase);
        ElementDefinition outcome=updateURLs(url,template);
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasName())         outcome.setName(diffMatches.get(0).getName());
        outcome.setSlicing(null);
        updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
        if (outcome.getPath().endsWith(""String_Node_Str"") && outcome.getType().size() == 1 && !outcome.getType().get(0).getCode().equals(""String_Node_Str""))         outcome.setPath(outcome.getPath().substring(0,outcome.getPath().length() - 3) + Utilities.capitalize(outcome.getType().get(0).getCode()));
        if (resultPathBase == null)         resultPathBase=outcome.getPath();
 else         if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        baseCursor++;
        diffCursor=differential.getElement().indexOf(diffMatches.get(0)) + 1;
        if (differential.getElement().size() > diffCursor && outcome.getPath().contains(""String_Node_Str"") && isDataType(outcome.getType())) {
          if (pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str"")) {
            if (outcome.getType().size() > 1)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName);
            StructureDefinition dt=getProfileForDataType(outcome.getType().get(0));
            if (dt == null)             throw new DefinitionException(diffMatches.get(0).getPath() + ""String_Node_Str"" + differential.getElement().get(diffCursor).getPath()+ ""String_Node_Str""+ typeCode(outcome.getType())+ ""String_Node_Str""+ profileName+ ""String_Node_Str"");
            contextName=dt.getUrl();
            int start=diffCursor;
            while (differential.getElement().size() > diffCursor && pathStartsWith(differential.getElement().get(diffCursor).getPath(),diffMatches.get(0).getPath() + ""String_Node_Str""))             diffCursor++;
            processPaths(result,dt.getSnapshot(),differential,1,start - 1,dt.getSnapshot().getElement().size() - 1,diffCursor - 1,url,profileName + pathTail(diffMatches,0),diffMatches.get(0).getPath(),trimDifferential,contextName,resultPathBase,false);
          }
        }
      }
 else {
        if (!unbounded(currentBase) && !isSlicedToOneOnly(diffMatches.get(0)))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath() + ""String_Node_Str""+ currentBase.getName()+ ""String_Node_Str""+ contextName);
        if (!diffMatches.get(0).hasSlicing() && !isExtension(currentBase))         throw new DefinitionException(""String_Node_Str"" + currentBase.getPath());
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (!diffMatches.get(0).hasSlicing())         outcome.setSlicing(makeExtensionSlicing());
 else         outcome.setSlicing(diffMatches.get(0).getSlicing().copy());
        if (!outcome.getPath().startsWith(resultPathBase))         throw new DefinitionException(""String_Node_Str"");
        result.getElement().add(outcome);
        int start=0;
        if (!diffMatches.get(0).hasName()) {
          updateFromDefinition(outcome,diffMatches.get(0),profileName,trimDifferential,url);
          if (!outcome.hasType()) {
            throw new DefinitionException(""String_Node_Str"");
          }
          start=1;
        }
 else         checkExtensionDoco(outcome);
        int nbl=findEndOfElement(base,baseCursor);
        int ndc=diffCursor;
        int ndl=diffCursor;
        for (int i=start; i < diffMatches.size(); i++) {
          ndc=differential.getElement().indexOf(diffMatches.get(i));
          ndl=findEndOfElement(differential,ndc);
          processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,i),contextPath,trimDifferential,contextName,resultPathBase,true);
        }
        baseCursor=nbl + 1;
        diffCursor=ndl + 1;
      }
    }
 else {
      String path=currentBase.getPath();
      ElementDefinition original=currentBase;
      if (diffMatches.isEmpty()) {
        while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path)) {
          ElementDefinition outcome=updateURLs(url,base.getElement().get(baseCursor).copy());
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          baseCursor++;
        }
      }
 else {
        boolean closed=currentBase.getSlicing().getRules() == SlicingRules.CLOSED;
        int diffpos=0;
        boolean isExtension=cpath.endsWith(""String_Node_Str"") || cpath.endsWith(""String_Node_Str"");
        if (diffMatches.get(0).hasSlicing()) {
          if (!isExtension)           diffpos++;
          ElementDefinitionSlicingComponent dSlice=diffMatches.get(0).getSlicing();
          ElementDefinitionSlicingComponent bSlice=currentBase.getSlicing();
          if (!orderMatches(dSlice.getOrderedElement(),bSlice.getOrderedElement()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!discriiminatorMatches(dSlice.getDiscriminator(),bSlice.getDiscriminator()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
          if (!ruleMatches(dSlice.getRules(),bSlice.getRules()))           throw new DefinitionException(""String_Node_Str"" + summariseSlicing(dSlice) + ""String_Node_Str""+ summariseSlicing(bSlice)+ ""String_Node_Str""+ path+ ""String_Node_Str""+ contextName+ ""String_Node_Str"");
        }
        ElementDefinition outcome=updateURLs(url,currentBase.copy());
        outcome.setPath(fixedPath(contextPath,outcome.getPath()));
        updateFromBase(outcome,currentBase);
        if (diffMatches.get(0).hasSlicing() && !isExtension) {
          updateFromSlicing(outcome.getSlicing(),diffMatches.get(0).getSlicing());
          updateFromDefinition(outcome,diffMatches.get(0),profileName,closed,url);
        }
        if (diffMatches.get(0).hasSlicing() && !diffMatches.get(0).hasName())         diffpos++;
        result.getElement().add(outcome);
        List<ElementDefinition> baseMatches=getSiblings(base.getElement(),currentBase);
        for (        ElementDefinition baseItem : baseMatches) {
          baseCursor=base.getElement().indexOf(baseItem);
          outcome=updateURLs(url,baseItem.copy());
          updateFromBase(outcome,currentBase);
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          if (diffpos < diffMatches.size() && diffMatches.get(diffpos).getName().equals(outcome.getName())) {
            int nbl=findEndOfElement(base,baseCursor);
            int ndc=differential.getElement().indexOf(diffMatches.get(diffpos));
            int ndl=findEndOfElement(differential,ndc);
            processPaths(result,base,differential,baseCursor,ndc,nbl,ndl,url,profileName + pathTail(diffMatches,diffpos),contextPath,closed,contextName,resultPathBase,true);
            baseCursor=nbl + 1;
            diffCursor=ndl + 1;
            diffpos++;
          }
 else {
            result.getElement().add(outcome);
            baseCursor++;
            while (baseCursor < base.getElement().size() && base.getElement().get(baseCursor).getPath().startsWith(path) && !base.getElement().get(baseCursor).getPath().equals(path)) {
              outcome=updateURLs(url,currentBase.copy());
              outcome.setPath(fixedPath(contextPath,outcome.getPath()));
              if (!outcome.getPath().startsWith(resultPathBase))               throw new DefinitionException(""String_Node_Str"");
              result.getElement().add(outcome);
              baseCursor++;
            }
          }
        }
        if (closed && diffpos < diffMatches.size())         throw new DefinitionException(""String_Node_Str"" + profileName + ""String_Node_Str""+ path+ ""String_Node_Str""+ cpath+ ""String_Node_Str"");
        while (diffpos < diffMatches.size()) {
          ElementDefinition diffItem=diffMatches.get(diffpos);
          for (          ElementDefinition baseItem : baseMatches)           if (baseItem.getName().equals(diffItem.getName()))           throw new DefinitionException(""String_Node_Str"");
          outcome=updateURLs(url,original.copy());
          outcome.setPath(fixedPath(contextPath,outcome.getPath()));
          updateFromBase(outcome,currentBase);
          outcome.setSlicing(null);
          if (!outcome.getPath().startsWith(resultPathBase))           throw new DefinitionException(""String_Node_Str"");
          result.getElement().add(outcome);
          updateFromDefinition(outcome,diffItem,profileName,trimDifferential,url);
          diffpos++;
        }
      }
    }
  }
}",0.997246990179562
24068,"private void createChildren(){
  if (element == null)   throw new Error(""String_Node_Str"");
  if (element instanceof JsonPrimitive) {
    if (_element != null && _element instanceof JsonObject)     for (    Entry<String,JsonElement> t : ((JsonObject)_element).entrySet())     processChild(t.getKey(),t.getValue());
  }
 else   if (element instanceof JsonObject) {
    for (    Entry<String,JsonElement> t : ((JsonObject)element).entrySet())     if (!t.getKey().equals(""String_Node_Str"")) {
      processChild(t.getKey(),t.getValue());
    }
  }
 else   if (element instanceof JsonNull) {
  }
 else   throw new Error(""String_Node_Str"" + element.getClass().getName());
}","private void createChildren(){
  if (element != null) {
    if (element instanceof JsonPrimitive) {
      if (_element != null && _element instanceof JsonObject)       for (      Entry<String,JsonElement> t : ((JsonObject)_element).entrySet())       processChild(t.getKey(),t.getValue());
    }
 else     if (element instanceof JsonObject) {
      for (      Entry<String,JsonElement> t : ((JsonObject)element).entrySet())       if (!t.getKey().equals(""String_Node_Str"")) {
        processChild(t.getKey(),t.getValue());
      }
    }
 else     if (element instanceof JsonNull) {
    }
 else     throw new Error(""String_Node_Str"" + element.getClass().getName());
  }
  if (_element != null) {
  }
}",0.9062957540263544
24069,"private void createChildren(){
  if (element == null)   throw new Error(""String_Node_Str"");
  if (element instanceof JsonPrimitive) {
    if (_element != null && _element instanceof JsonObject)     for (    Entry<String,JsonElement> t : ((JsonObject)_element).entrySet())     processChild(t.getKey(),t.getValue());
  }
 else   if (element instanceof JsonObject) {
    for (    Entry<String,JsonElement> t : ((JsonObject)element).entrySet())     if (!t.getKey().equals(""String_Node_Str"")) {
      processChild(t.getKey(),t.getValue());
    }
  }
 else   if (element instanceof JsonNull) {
  }
 else   throw new Error(""String_Node_Str"" + element.getClass().getName());
}","private void createChildren(){
  if (element != null) {
    if (element instanceof JsonPrimitive) {
      if (_element != null && _element instanceof JsonObject)       for (      Entry<String,JsonElement> t : ((JsonObject)_element).entrySet())       processChild(t.getKey(),t.getValue());
    }
 else     if (element instanceof JsonObject) {
      for (      Entry<String,JsonElement> t : ((JsonObject)element).entrySet())       if (!t.getKey().equals(""String_Node_Str"")) {
        processChild(t.getKey(),t.getValue());
      }
    }
 else     if (element instanceof JsonNull) {
    }
 else     throw new Error(""String_Node_Str"" + element.getClass().getName());
  }
  if (_element != null) {
  }
}",0.9062957540263544
24070,"private String describeTypes(List<TypeRefComponent> types) throws Exception {
  if (types.isEmpty())   return null;
  StringBuilder b=new StringBuilder();
  if (types.size() == 1)   describeType(b,types.get(0));
 else {
    boolean first=true;
    b.append(""String_Node_Str"");
    for (    TypeRefComponent t : types) {
      if (first)       first=false;
 else       b.append(""String_Node_Str"");
      describeType(b,t);
    }
  }
  return b.toString();
}","private String describeTypes(List<TypeRefComponent> types) throws Exception {
  if (types.isEmpty())   return ""String_Node_Str"";
  StringBuilder b=new StringBuilder();
  if (types.size() == 1)   describeType(b,types.get(0));
 else {
    boolean first=true;
    b.append(""String_Node_Str"");
    for (    TypeRefComponent t : types) {
      if (first)       first=false;
 else       b.append(""String_Node_Str"");
      describeType(b,t);
    }
  }
  return b.toString();
}",0.9772972972972972
24071,"private List<LinkTriple> determinePath(String n,String type,String crumbTitle){
  List<LinkTriple> res=new ArrayList<ImplementationGuideDefn.LinkTriple>();
  if (type.equals(""String_Node_Str"") && hasVSRegistry()) {
    res.add(new LinkTriple(ig.getPage().getSource(),ig.getId().toUpperCase(),ig.getName()));
    findPage(getVSRegistry().getSource(),res,ig.getPage().getPage());
    res.add(new LinkTriple(null,crumbTitle,null));
  }
 else   if (type.startsWith(""String_Node_Str"")) {
    res.add(new LinkTriple(ig.getPage().getSource(),ig.getId().toUpperCase(),ig.getName()));
    res.add(new LinkTriple(null,""String_Node_Str"",""String_Node_Str""));
  }
 else {
    res.add(new LinkTriple(ig.getPage().getSource(),ig.getId().toUpperCase(),ig.getName()));
    if (!n.equals(ig.getPage().getSource())) {
      if (!findPage(n,res,ig.getPage().getPage())) {
        issues.add(new ValidationMessage(Source.Publisher,IssueType.PROCESSING,code + ""String_Node_Str"" + n,""String_Node_Str"" + n + ""String_Node_Str"",IssueSeverity.INFORMATION));
        res.add(new LinkTriple(null,""String_Node_Str"",""String_Node_Str""));
      }
    }
  }
  return res;
}","private List<LinkTriple> determinePath(String n,String type,String crumbTitle) throws Exception {
  List<LinkTriple> res=new ArrayList<ImplementationGuideDefn.LinkTriple>();
  if (type.equals(""String_Node_Str"") && hasVSRegistry()) {
    res.add(new LinkTriple(ig.getPage().getSource(),ig.getId().toUpperCase(),ig.getName()));
    findPage(getVSRegistry().getSource(),res,ig.getPage().getPage());
    res.add(new LinkTriple(null,crumbTitle,null));
  }
 else   if (type.startsWith(""String_Node_Str"")) {
    res.add(new LinkTriple(ig.getPage().getSource(),ig.getId().toUpperCase(),ig.getName()));
    res.add(new LinkTriple(null,""String_Node_Str"",""String_Node_Str""));
  }
 else {
    res.add(new LinkTriple(ig.getPage().getSource(),ig.getId().toUpperCase(),ig.getName()));
    if (!n.equals(ig.getPage().getSource())) {
      if (!findPage(n,res,ig.getPage().getPage()) && !findLogicalPage(n,res,ig.getPage().getPage())) {
        issues.add(new ValidationMessage(Source.Publisher,IssueType.PROCESSING,code + ""String_Node_Str"" + n,""String_Node_Str"" + n + ""String_Node_Str"",IssueSeverity.INFORMATION));
        res.add(new LinkTriple(null,""String_Node_Str"",""String_Node_Str""));
      }
    }
  }
  return res;
}",0.9710144927536232
24072,"public String makeList(String pagename,String type,String genlevel,String crumbTitle){
  String n=pagename.replace(""String_Node_Str"",""String_Node_Str"");
  if (n.startsWith(code + File.separator))   n=n.substring(code.length() + 1);
  if (!n.endsWith(""String_Node_Str""))   n=n + ""String_Node_Str"";
  List<LinkTriple> path=determinePath(n,type,crumbTitle);
  StringBuilder b=new StringBuilder();
  b.append(""String_Node_Str"" + pagename + ""String_Node_Str""+ type+ ""String_Node_Str""+ crumbTitle+ ""String_Node_Str"");
  int i=0;
  for (  LinkTriple lt : path) {
    i++;
    String t=lt.getTitle() == null ? ""String_Node_Str"" : ""String_Node_Str"" + lt.getTitle() + ""String_Node_Str"";
    if (i == path.size() || lt.getUrl() == null)     b.append(""String_Node_Str"" + t + ""String_Node_Str""+ lt.getDisplay()+ ""String_Node_Str"");
 else     b.append(""String_Node_Str"" + t + ""String_Node_Str""+ lt.getUrl()+ ""String_Node_Str""+ lt.getDisplay()+ ""String_Node_Str"");
  }
  return b.toString();
}","public String makeList(String pagename,String type,String genlevel,String crumbTitle) throws Exception {
  String n=pagename.replace(""String_Node_Str"",""String_Node_Str"");
  if (n.startsWith(code + File.separator))   n=n.substring(code.length() + 1);
  if (!n.endsWith(""String_Node_Str""))   n=n + ""String_Node_Str"";
  List<LinkTriple> path=determinePath(n,type,crumbTitle);
  StringBuilder b=new StringBuilder();
  b.append(""String_Node_Str"" + pagename + ""String_Node_Str""+ type+ ""String_Node_Str""+ crumbTitle+ ""String_Node_Str"");
  int i=0;
  for (  LinkTriple lt : path) {
    i++;
    String t=lt.getTitle() == null ? ""String_Node_Str"" : ""String_Node_Str"" + lt.getTitle() + ""String_Node_Str"";
    if (i == path.size() || lt.getUrl() == null)     b.append(""String_Node_Str"" + t + ""String_Node_Str""+ lt.getDisplay()+ ""String_Node_Str"");
 else     b.append(""String_Node_Str"" + t + ""String_Node_Str""+ lt.getUrl()+ ""String_Node_Str""+ lt.getDisplay()+ ""String_Node_Str"");
  }
  return b.toString();
}",0.9908814589665652
24073,"private void readSearchParams(ResourceDefn root2,Sheet sheet,boolean forProfile) throws Exception {
  if (sheet != null) {
    tabfmt.sheet(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    for (int row=0; row < sheet.rows.size(); row++) {
      tabfmt.row();
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      if (!sheet.hasColumn(row,""String_Node_Str""))       throw new Exception(""String_Node_Str"" + getLocation(row));
      String n=sheet.getColumn(row,""String_Node_Str"");
      if (!n.startsWith(""String_Node_Str"")) {
        if (!sheet.hasColumn(row,""String_Node_Str""))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        if (n.endsWith(""String_Node_Str"") || n.endsWith(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        if (root2.getSearchParams().containsKey(n))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        String d=sheet.getColumn(row,""String_Node_Str"");
        SearchType t=readSearchType(sheet.getColumn(row,""String_Node_Str""),row);
        SearchParameter.XPathUsageType pu=readSearchXPathUsage(sheet.getColumn(row,""String_Node_Str""),row);
        if (Utilities.noString(sheet.getColumn(row,""String_Node_Str"")) && !root2.getName().equals(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        List<String> pn=new ArrayList<String>();
        SearchParameterDefn sp=null;
        if (t == SearchType.composite) {
          String[] pl=sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"");
          if (Utilities.noString(d))           throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
          for (          String pi : pl) {
            String p=pi.trim();
            if (!root2.getSearchParams().containsKey(p)) {
              boolean found=false;
              if (p.endsWith(""String_Node_Str""))               for (              String pan : root2.getSearchParams().keySet()) {
                if (pan.startsWith(p.substring(0,p.length() - 3)))                 found=true;
              }
              if (!found)               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ p+ ""String_Node_Str""+ getLocation(row));
            }
            pn.add(p);
            sp=new SearchParameterDefn(n,d,t,pu);
            sp.getComposites().addAll(pn);
          }
        }
 else {
          String[] pl=sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"");
          for (          String pi : pl) {
            String p=pi.trim();
            ElementDefn e=null;
            if (!Utilities.noString(p) && !p.startsWith(""String_Node_Str"") && !p.startsWith(""String_Node_Str"")&& definitions != null) {
              e=root2.getRoot().getElementForPath(trimIndexes(p),definitions,""String_Node_Str"",true);
            }
            if (Utilities.noString(d) && e != null)             d=e.getShortDefn();
            if (p.startsWith(""String_Node_Str"")) {
              String url=extractExtensionUrl(p);
              StructureDefinition ex=extensionDefinitions.get(url);
              if (ex == null)               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ url+ ""String_Node_Str""+ getLocation(row));
              if (Utilities.noString(d))               d=ex.getDescription();
              pn.add(p);
            }
            if (d == null)             throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
            if (e != null)             pn.add(p);
            if (t == SearchType.reference) {
              if (e == null && !forProfile && !sheet.hasColumn(row,""String_Node_Str""))               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
              if (!forProfile && e != null && (!e.hasType(""String_Node_Str"")) && (!e.hasType(""String_Node_Str"")))               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ e.typeCode());
            }
 else {
              if (e != null && e.hasOnlyType(""String_Node_Str""))               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ t.toString()+ ""String_Node_Str""+ e.typeCode());
              if (t == SearchType.uri) {
                if (e != null && !e.typeCode().equals(""String_Node_Str""))                 throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ t.toString()+ ""String_Node_Str""+ e.typeCode());
              }
 else {
                if (e != null && e.typeCode().equals(""String_Node_Str""))                 throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ t.toString()+ ""String_Node_Str""+ e.typeCode());
              }
            }
          }
          if (!forProfile && t == SearchType.reference && pn.size() == 0 && !sheet.hasColumn(row,""String_Node_Str""))           throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
          sp=new SearchParameterDefn(n,d,t,pu);
          sp.getPaths().addAll(pn);
          if (!Utilities.noString(sheet.getColumn(row,""String_Node_Str""))) {
            sp.setManualTypes(sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str""));
          }
        }
        root2.getSearchParams().put(n,sp);
      }
    }
  }
}","private void readSearchParams(ResourceDefn root2,Sheet sheet,boolean forProfile) throws Exception {
  if (sheet != null) {
    tabfmt.sheet(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    tabfmt.column(""String_Node_Str"");
    for (int row=0; row < sheet.rows.size(); row++) {
      tabfmt.row();
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      tabfmt.cell(sheet.getColumn(row,""String_Node_Str""));
      if (!sheet.hasColumn(row,""String_Node_Str""))       throw new Exception(""String_Node_Str"" + getLocation(row));
      String n=sheet.getColumn(row,""String_Node_Str"");
      if (!n.startsWith(""String_Node_Str"")) {
        if (!sheet.hasColumn(row,""String_Node_Str""))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        if (n.endsWith(""String_Node_Str"") || n.endsWith(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        if (root2.getSearchParams().containsKey(n))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        String d=sheet.getColumn(row,""String_Node_Str"");
        SearchType t=readSearchType(sheet.getColumn(row,""String_Node_Str""),row);
        SearchParameter.XPathUsageType pu=readSearchXPathUsage(sheet.getColumn(row,""String_Node_Str""),row);
        if (Utilities.noString(sheet.getColumn(row,""String_Node_Str"")) && !root2.getName().equals(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
        List<String> pn=new ArrayList<String>();
        SearchParameterDefn sp=null;
        if (t == SearchType.composite) {
          String[] pl=sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"");
          if (Utilities.noString(d))           throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
          for (          String pi : pl) {
            String p=pi.trim();
            if (!root2.getSearchParams().containsKey(p)) {
              boolean found=false;
              if (p.endsWith(""String_Node_Str""))               for (              String pan : root2.getSearchParams().keySet()) {
                if (pan.startsWith(p.substring(0,p.length() - 3)))                 found=true;
              }
              if (!found)               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ p+ ""String_Node_Str""+ getLocation(row));
            }
            pn.add(p);
            sp=new SearchParameterDefn(n,d,t,pu);
            sp.getComposites().addAll(pn);
          }
        }
 else {
          String[] pl=sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str"");
          for (          String pi : pl) {
            String p=pi.trim();
            ElementDefn e=null;
            if (!Utilities.noString(p) && !p.startsWith(""String_Node_Str"") && !p.startsWith(""String_Node_Str"")&& definitions != null) {
              e=root2.getRoot().getElementForPath(trimIndexes(p),definitions,""String_Node_Str"",true);
            }
            if (Utilities.noString(d) && e != null)             d=e.getShortDefn();
            if (p.startsWith(""String_Node_Str"")) {
              String url=extractExtensionUrl(p);
              StructureDefinition ex=extensionDefinitions.get(url);
              if (ex == null)               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ url+ ""String_Node_Str""+ getLocation(row));
              if (Utilities.noString(d))               d=ex.getDescription();
              pn.add(p);
            }
            if (d == null)             throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
            if (e != null)             pn.add(p);
            if (t == SearchType.reference) {
              if (e == null && !forProfile && !sheet.hasColumn(row,""String_Node_Str""))               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
              if (!forProfile && e != null && (!e.hasType(""String_Node_Str"")) && (!e.hasType(""String_Node_Str"")))               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ e.typeCode());
            }
 else {
              if (e != null && e.hasOnlyType(""String_Node_Str""))               throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ t.toString()+ ""String_Node_Str""+ e.typeCode());
              if (t == SearchType.uri) {
                if (e != null && !(e.typeCode().equals(""String_Node_Str"") | e.typeCode().equals(""String_Node_Str"")))                 throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ t.toString()+ ""String_Node_Str""+ e.typeCode());
              }
 else {
                if (e != null && e.typeCode().equals(""String_Node_Str""))                 throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ t.toString()+ ""String_Node_Str""+ e.typeCode());
              }
            }
          }
          if (!forProfile && t == SearchType.reference && pn.size() == 0 && !sheet.hasColumn(row,""String_Node_Str""))           throw new Exception(""String_Node_Str"" + root2.getName() + ""String_Node_Str""+ n+ ""String_Node_Str""+ getLocation(row));
          sp=new SearchParameterDefn(n,d,t,pu);
          sp.getPaths().addAll(pn);
          if (!Utilities.noString(sheet.getColumn(row,""String_Node_Str""))) {
            sp.setManualTypes(sheet.getColumn(row,""String_Node_Str"").split(""String_Node_Str""));
          }
        }
        root2.getSearchParams().put(n,sp);
      }
    }
  }
}",0.996620293955828
24074,"/** 
 * Entry point to the publisher. This classes Java Main() calls this function to actually produce the specification
 * @param folder
 * @throws Exception
 */
public void execute(String folder){
  page.log(""String_Node_Str"" + folder + ""String_Node_Str""+ Config.DATE_FORMAT().format(page.getGenDate().getTime()),LogMessageType.Process);
  if (web)   page.log(""String_Node_Str"",LogMessageType.Process);
 else   page.log(""String_Node_Str"",LogMessageType.Process);
  try {
    page.setFolders(new FolderManager(folder));
    if (isGenerate && page.getSvnRevision() == null)     page.setSvnRevision(checkSubversion(folder));
    registerReferencePlatforms();
    if (!initialize(folder))     throw new Exception(""String_Node_Str"");
    page.log(""String_Node_Str"" + page.getVersion() + ""String_Node_Str""+ page.getSvnRevision(),LogMessageType.Hint);
    cache=new IniFile(page.getFolders().rootDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    loadSuppressedMessages(page.getFolders().rootDir);
    boolean doAny=false;
    for (    String n : dates.keySet()) {
      Long d=cache.getLongProperty(""String_Node_Str"",n);
      boolean b=d == null || (dates.get(n) > d);
      cache.setLongProperty(""String_Node_Str"",n,dates.get(n).longValue(),null);
      buildFlags.put(n.toLowerCase(),b);
      doAny=doAny || b;
    }
    cache.save();
    if (noPartialBuild || !doAny || !(new File(page.getFolders().dstDir + ""String_Node_Str"").exists()))     buildFlags.put(""String_Node_Str"",true);
    if (singlePage != null) {
      for (      String n : buildFlags.keySet())       buildFlags.put(n,false);
      buildFlags.put(""String_Node_Str"" + singlePage.toLowerCase(),true);
    }
 else     if (singleResource != null) {
      for (      String n : buildFlags.keySet())       buildFlags.put(n,false);
      buildFlags.put(singleResource.toLowerCase(),true);
    }
    if (!buildFlags.get(""String_Node_Str"")) {
      Utilities.tone(1000,10);
      Utilities.tone(1400,10);
      Utilities.tone(1800,10);
      Utilities.tone(1000,10);
      Utilities.tone(1400,10);
      Utilities.tone(1800,10);
      page.log(""String_Node_Str"",LogMessageType.Process);
      CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
      for (      String n : buildFlags.keySet())       if (buildFlags.get(n))       b.append(n);
      page.log(""String_Node_Str"" + b.toString(),LogMessageType.Process);
    }
 else {
      Utilities.tone(1200,30);
      page.log(""String_Node_Str"",LogMessageType.Process);
    }
    Utilities.createDirectory(page.getFolders().dstDir);
    Utilities.deleteTempFiles();
    page.getBreadCrumbManager().parse(page.getFolders().srcDir + ""String_Node_Str"");
    page.loadSnomed();
    page.loadLoinc();
    prsr.parse(page.getGenDate(),page.getValidationErrors());
    if (web || (isGenerate && buildFlags.get(""String_Node_Str""))) {
      page.log(""String_Node_Str"",LogMessageType.Process);
      Utilities.clearDirectory(page.getFolders().dstDir);
      Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"");
      Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"");
    }
    for (    ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs())     if (!ig.isCore())     Utilities.createDirectory(page.getFolders().dstDir + ig.getCode());
    if (buildFlags.get(""String_Node_Str"")) {
      copyStaticContent();
    }
    loadValueSets1();
    prsr.getRegistry().commit();
    validate();
    processProfiles();
    checkAllOk();
    if (isGenerate) {
      String eCorePath=page.getFolders().dstDir + ""String_Node_Str"";
      generateECore(prsr.getECoreParseResults(),eCorePath);
      produceSpecification(eCorePath);
      checkAllOk();
    }
 else     if (genRDF)     processRDF();
    validationProcess();
    processWarnings(false);
    if (isGenerate && buildFlags.get(""String_Node_Str""))     produceQA();
    if (!buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"",LogMessageType.Process);
      CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
      for (      String n : buildFlags.keySet())       if (buildFlags.get(n))       b.append(n);
      page.log(""String_Node_Str"" + b.toString(),LogMessageType.Process);
    }
 else     page.log(""String_Node_Str"",LogMessageType.Process);
    Utilities.tone(800,10);
    Utilities.tone(1000,10);
    Utilities.tone(1200,10);
    Utilities.tone(1000,10);
    Utilities.tone(800,10);
    page.log(""String_Node_Str"" + Config.DATE_FORMAT().format(Calendar.getInstance().getTime()),LogMessageType.Process);
  }
 catch (  Exception e) {
    if (!(e instanceof NullPointerException)) {
      try {
        processWarnings(e instanceof EValidationFailed);
      }
 catch (      Exception e2) {
        page.log(""String_Node_Str"" + e.getMessage(),LogMessageType.Error);
        e.printStackTrace();
      }
    }
    if (!buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"",LogMessageType.Process);
      CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
      for (      String n : buildFlags.keySet())       if (buildFlags.get(n))       b.append(n);
      page.log(""String_Node_Str"" + b.toString(),LogMessageType.Process);
    }
 else     page.log(""String_Node_Str"",LogMessageType.Process);
    Utilities.tone(800,20);
    Utilities.tone(1000,20);
    Utilities.tone(1200,20);
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException e1) {
    }
    Utilities.tone(800,20);
    Utilities.tone(1000,20);
    Utilities.tone(1200,20);
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException e1) {
    }
    Utilities.tone(800,20);
    Utilities.tone(1000,20);
    Utilities.tone(1200,20);
    page.log(""String_Node_Str"" + Config.DATE_FORMAT().format(Calendar.getInstance().getTime()),LogMessageType.Process);
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(1);
  }
}","/** 
 * Entry point to the publisher. This classes Java Main() calls this function to actually produce the specification
 * @param folder
 * @throws Exception
 */
public void execute(String folder){
  page.log(""String_Node_Str"" + folder + ""String_Node_Str""+ Config.DATE_FORMAT().format(page.getGenDate().getTime()),LogMessageType.Process);
  if (web)   page.log(""String_Node_Str"",LogMessageType.Process);
 else   page.log(""String_Node_Str"",LogMessageType.Process);
  try {
    page.setFolders(new FolderManager(folder));
    if (isGenerate && page.getSvnRevision() == null)     page.setSvnRevision(checkSubversion(folder));
    registerReferencePlatforms();
    if (!initialize(folder))     throw new Exception(""String_Node_Str"");
    page.log(""String_Node_Str"" + page.getVersion() + ""String_Node_Str""+ page.getSvnRevision(),LogMessageType.Hint);
    cache=new IniFile(page.getFolders().rootDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    loadSuppressedMessages(page.getFolders().rootDir);
    boolean doAny=false;
    for (    String n : dates.keySet()) {
      Long d=cache.getLongProperty(""String_Node_Str"",n);
      boolean b=d == null || (dates.get(n) > d);
      cache.setLongProperty(""String_Node_Str"",n,dates.get(n).longValue(),null);
      buildFlags.put(n.toLowerCase(),b);
      doAny=doAny || b;
    }
    cache.save();
    if (noPartialBuild || !doAny || !(new File(page.getFolders().dstDir + ""String_Node_Str"").exists()))     buildFlags.put(""String_Node_Str"",true);
    if (singlePage != null) {
      for (      String n : buildFlags.keySet())       buildFlags.put(n,false);
      buildFlags.put(""String_Node_Str"" + singlePage.toLowerCase(),true);
    }
 else     if (singleResource != null) {
      for (      String n : buildFlags.keySet())       buildFlags.put(n,false);
      buildFlags.put(singleResource.toLowerCase(),true);
    }
    if (!buildFlags.get(""String_Node_Str"")) {
      Utilities.tone(1000,10);
      Utilities.tone(1400,10);
      Utilities.tone(1800,10);
      Utilities.tone(1000,10);
      Utilities.tone(1400,10);
      Utilities.tone(1800,10);
      page.log(""String_Node_Str"",LogMessageType.Process);
      CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
      for (      String n : buildFlags.keySet())       if (buildFlags.get(n))       b.append(n);
      page.log(""String_Node_Str"" + b.toString(),LogMessageType.Process);
    }
 else {
      Utilities.tone(1200,30);
      page.log(""String_Node_Str"",LogMessageType.Process);
    }
    Utilities.createDirectory(page.getFolders().dstDir);
    Utilities.deleteTempFiles();
    page.getBreadCrumbManager().parse(page.getFolders().srcDir + ""String_Node_Str"");
    page.loadSnomed();
    page.loadLoinc();
    prsr.parse(page.getGenDate(),page.getValidationErrors());
    if (web) {
      page.log(""String_Node_Str"",LogMessageType.Process);
      Utilities.clearDirectory(page.getFolders().dstDir);
    }
    if (web || (isGenerate && buildFlags.get(""String_Node_Str""))) {
      Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"");
      Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"");
    }
    for (    ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs())     if (!ig.isCore())     Utilities.createDirectory(page.getFolders().dstDir + ig.getCode());
    if (buildFlags.get(""String_Node_Str"")) {
      copyStaticContent();
    }
    loadValueSets1();
    prsr.getRegistry().commit();
    validate();
    processProfiles();
    checkAllOk();
    if (isGenerate) {
      String eCorePath=page.getFolders().dstDir + ""String_Node_Str"";
      generateECore(prsr.getECoreParseResults(),eCorePath);
      produceSpecification(eCorePath);
      checkAllOk();
    }
 else     if (genRDF)     processRDF();
    validationProcess();
    processWarnings(false);
    if (isGenerate && buildFlags.get(""String_Node_Str""))     produceQA();
    if (!buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"",LogMessageType.Process);
      CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
      for (      String n : buildFlags.keySet())       if (buildFlags.get(n))       b.append(n);
      page.log(""String_Node_Str"" + b.toString(),LogMessageType.Process);
    }
 else     page.log(""String_Node_Str"",LogMessageType.Process);
    Utilities.tone(800,10);
    Utilities.tone(1000,10);
    Utilities.tone(1200,10);
    Utilities.tone(1000,10);
    Utilities.tone(800,10);
    page.log(""String_Node_Str"" + Config.DATE_FORMAT().format(Calendar.getInstance().getTime()),LogMessageType.Process);
  }
 catch (  Exception e) {
    if (!(e instanceof NullPointerException)) {
      try {
        processWarnings(e instanceof EValidationFailed);
      }
 catch (      Exception e2) {
        page.log(""String_Node_Str"" + e.getMessage(),LogMessageType.Error);
        e.printStackTrace();
      }
    }
    if (!buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"",LogMessageType.Process);
      CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
      for (      String n : buildFlags.keySet())       if (buildFlags.get(n))       b.append(n);
      page.log(""String_Node_Str"" + b.toString(),LogMessageType.Process);
    }
 else     page.log(""String_Node_Str"",LogMessageType.Process);
    Utilities.tone(800,20);
    Utilities.tone(1000,20);
    Utilities.tone(1200,20);
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException e1) {
    }
    Utilities.tone(800,20);
    Utilities.tone(1000,20);
    Utilities.tone(1200,20);
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException e1) {
    }
    Utilities.tone(800,20);
    Utilities.tone(1000,20);
    Utilities.tone(1200,20);
    page.log(""String_Node_Str"" + Config.DATE_FORMAT().format(Calendar.getInstance().getTime()),LogMessageType.Process);
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(1);
  }
}",0.9787269822584712
24075,"@Override public boolean isIdPartValid(){
  String id=getIdPart();
  if (StringUtils.isBlank(id)) {
    return false;
  }
  if (id.length() > 64) {
    return false;
  }
  for (int i=0; i < id.length(); i++) {
    char nextChar=id.charAt(i);
    if (nextChar >= 'a' && nextChar <= 'z') {
      continue;
    }
    if (nextChar >= 'A' && nextChar <= 'Z') {
      continue;
    }
    if (nextChar >= '0' && nextChar <= '9') {
      continue;
    }
    if (nextChar == '-' || nextChar == '.') {
      continue;
    }
    return false;
  }
  return true;
}","public boolean isIdPartValid(){
  String id=getIdPart();
  if (StringUtils.isBlank(id)) {
    return false;
  }
  if (id.length() > 64) {
    return false;
  }
  for (int i=0; i < id.length(); i++) {
    char nextChar=id.charAt(i);
    if (nextChar >= 'a' && nextChar <= 'z') {
      continue;
    }
    if (nextChar >= 'A' && nextChar <= 'Z') {
      continue;
    }
    if (nextChar >= '0' && nextChar <= '9') {
      continue;
    }
    if (nextChar == '-' || nextChar == '.') {
      continue;
    }
    return false;
  }
  return true;
}",0.9908592321755028
24076,"public String getIndexPrefixForFile(String page,String logicalName){
  if (page.startsWith(code + ""String_Node_Str""))   page=page.substring(code.length() + 1);
  ImplementationGuidePageComponent p=getPage(page,ig.getPage());
  if (p == null)   return sectionId + ""String_Node_Str"";
 else   return p.getUserString(ToolResourceUtilities.NAME_PAGE_INDEX);
}","public String getIndexPrefixForFile(String page,String logicalName){
  if (page.startsWith(code + ""String_Node_Str"") || page.startsWith(code + ""String_Node_Str""))   page=page.substring(code.length() + 1);
  ImplementationGuidePageComponent p=getPage(page,ig.getPage());
  if (p == null)   return sectionId + ""String_Node_Str"";
 else   return p.getUserString(ToolResourceUtilities.NAME_PAGE_INDEX);
}",0.9402390438247012
24077,"public String makeList(String pagename,String type,String genlevel,String crumbTitle){
  String n=pagename;
  if (n.startsWith(code + File.separator))   n=n.substring(code.length() + 1);
  if (!n.endsWith(""String_Node_Str""))   n=n + ""String_Node_Str"";
  List<LinkTriple> path=determinePath(n,type,crumbTitle);
  StringBuilder b=new StringBuilder();
  b.append(""String_Node_Str"" + pagename + ""String_Node_Str""+ type+ ""String_Node_Str""+ crumbTitle+ ""String_Node_Str"");
  int i=0;
  for (  LinkTriple lt : path) {
    i++;
    String t=lt.getTitle() == null ? ""String_Node_Str"" : ""String_Node_Str"" + lt.getTitle() + ""String_Node_Str"";
    if (i == path.size() || lt.getUrl() == null)     b.append(""String_Node_Str"" + t + ""String_Node_Str""+ lt.getDisplay()+ ""String_Node_Str"");
 else     b.append(""String_Node_Str"" + t + ""String_Node_Str""+ lt.getUrl()+ ""String_Node_Str""+ lt.getDisplay()+ ""String_Node_Str"");
  }
  return b.toString();
}","public String makeList(String pagename,String type,String genlevel,String crumbTitle){
  String n=pagename.replace(""String_Node_Str"",""String_Node_Str"");
  if (n.startsWith(code + File.separator))   n=n.substring(code.length() + 1);
  if (!n.endsWith(""String_Node_Str""))   n=n + ""String_Node_Str"";
  List<LinkTriple> path=determinePath(n,type,crumbTitle);
  StringBuilder b=new StringBuilder();
  b.append(""String_Node_Str"" + pagename + ""String_Node_Str""+ type+ ""String_Node_Str""+ crumbTitle+ ""String_Node_Str"");
  int i=0;
  for (  LinkTriple lt : path) {
    i++;
    String t=lt.getTitle() == null ? ""String_Node_Str"" : ""String_Node_Str"" + lt.getTitle() + ""String_Node_Str"";
    if (i == path.size() || lt.getUrl() == null)     b.append(""String_Node_Str"" + t + ""String_Node_Str""+ lt.getDisplay()+ ""String_Node_Str"");
 else     b.append(""String_Node_Str"" + t + ""String_Node_Str""+ lt.getUrl()+ ""String_Node_Str""+ lt.getDisplay()+ ""String_Node_Str"");
  }
  return b.toString();
}",0.976452119309262
24078,"@Override public String getLink(XhtmlGenerator ref,XhtmlGeneratorAdornerState state,Element node) throws Exception {
  if (state == null) {
    if (node == null || !definitions.hasResource(node.getLocalName()))     return null;
 else {
      definitions.getResourceByName(node.getLocalName()).getRoot().setCoveredByExample(true);
      return prefix + node.getLocalName().toLowerCase() + ""String_Node_Str"";
    }
  }
 else {
    ExampleAdornerState s=(ExampleAdornerState)state;
    if (s.definition == null)     if (node.getNamespaceURI().equals(""String_Node_Str""))     return prefix + ""String_Node_Str"";
 else     return null;
    ElementDefn t=s.definition;
    ElementDefn child=t.getElementByName(node.getNodeName(),true,definitions,""String_Node_Str"");
    String p=child == null ? null : s.path + ""String_Node_Str"" + child.getName();
    while (child == null && t != null && definitions.hasElementDefn(t.typeCode())) {
      t=definitions.getElementDefn(t.typeCode());
      child=t.getElementByName(node.getNodeName(),true,definitions,""String_Node_Str"");
      if (child != null) {
        p=t.getName() + ""String_Node_Str"" + child.getName();
      }
    }
    if (child == null)     if (node.getNamespaceURI().equals(""String_Node_Str""))     return prefix + ""String_Node_Str"";
 else     return null;
 else {
      child.setCoveredByExample(true);
      String r=p.contains(""String_Node_Str"") ? p.substring(0,p.indexOf(""String_Node_Str"")) : p;
      return prefix + definitions.getSrcFile(r) + ""String_Node_Str""+ p;
    }
  }
}","@Override public String getLink(XhtmlGenerator ref,XhtmlGeneratorAdornerState state,Element node) throws Exception {
  if (state == null) {
    if (node == null || !definitions.hasResource(node.getLocalName()))     return null;
 else {
      definitions.getResourceByName(node.getLocalName()).getRoot().setCoveredByExample(true);
      return prefix + node.getLocalName().toLowerCase() + ""String_Node_Str"";
    }
  }
 else {
    ExampleAdornerState s=(ExampleAdornerState)state;
    if (s.definition == null)     if (node.getNamespaceURI().equals(""String_Node_Str""))     return prefix + ""String_Node_Str"";
 else     return null;
    ElementDefn t=s.definition;
    if (t.typeCode().equals(""String_Node_Str"") && (s.path.endsWith(""String_Node_Str"") || s.path.endsWith(""String_Node_Str"")) && definitions.isResource(node.getNodeName()))     return null;
    ElementDefn child=t.getElementByName(node.getNodeName(),true,definitions,""String_Node_Str"");
    String p=child == null ? null : s.path + ""String_Node_Str"" + child.getName();
    while (child == null && t != null && definitions.hasElementDefn(t.typeCode())) {
      t=definitions.getElementDefn(t.typeCode());
      child=t.getElementByName(node.getNodeName(),true,definitions,""String_Node_Str"");
      if (child != null) {
        p=t.getName() + ""String_Node_Str"" + child.getName();
      }
    }
    if (child == null)     if (node.getNamespaceURI().equals(""String_Node_Str""))     return prefix + ""String_Node_Str"";
 else     return null;
 else {
      child.setCoveredByExample(true);
      String r=p.contains(""String_Node_Str"") ? p.substring(0,p.indexOf(""String_Node_Str"")) : p;
      return prefix + definitions.getSrcFile(r) + ""String_Node_Str""+ p;
    }
  }
}",0.9419354838709676
24079,"@Override public XhtmlGeneratorAdornerState getState(XhtmlGenerator ref,XhtmlGeneratorAdornerState state,Element node) throws Exception {
  if (state == null) {
    if (node == null)     return new ExampleAdornerState(State.Unknown,""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"");
 else     if (definitions.hasResource(node.getLocalName()))     return new ExampleAdornerState(State.Element,node.getLocalName(),definitions.getResourceByName(node.getLocalName()).getRoot(),""String_Node_Str"",""String_Node_Str"");
 else     return new ExampleAdornerState(State.Unknown,""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    ExampleAdornerState s=(ExampleAdornerState)state;
    if (s.getState() == State.Element) {
      String p=s.path + ""String_Node_Str"" + node.getNodeName();
      ElementDefn e=s.getDefinition().getElementByName(node.getLocalName(),true,definitions,""String_Node_Str"");
      if (e == null && definitions.hasElementDefn(s.getDefinition().typeCode())) {
        ElementDefn t=definitions.getElementDefn(s.getDefinition().typeCode());
        while (t != null && e == null) {
          e=t.getElementByName(node.getLocalName(),true,definitions,""String_Node_Str"");
          if (e != null)           p=t.getName() + ""String_Node_Str"" + e.getName();
 else           if (definitions.hasElementDefn(t.typeCode()))           t=definitions.getElementDefn(t.typeCode());
 else           t=null;
        }
      }
 else       if (e != null)       p=s.path + ""String_Node_Str"" + e.getName();
      if (e == null)       return new ExampleAdornerState(State.Unknown,s.path,null,""String_Node_Str"",""String_Node_Str"");
      if (!e.isBaseResourceElement() && e.typeCode().contains(""String_Node_Str""))       return new ExampleAdornerState(State.Reference,p,e,""String_Node_Str"",""String_Node_Str"");
 else       if (!e.isBaseResourceElement() && e.typeCode().equals(""String_Node_Str""))       return new ExampleAdornerState(State.Reference,p,e,""String_Node_Str"",""String_Node_Str"");
 else       return new ExampleAdornerState(State.Element,p,e,""String_Node_Str"",""String_Node_Str"");
    }
 else     if (s.getState() == State.Reference) {
      if (node.getLocalName().equals(""String_Node_Str"")) {
        String type=extractType(node.getAttribute(""String_Node_Str""));
        String id=extractId(node.getAttribute(""String_Node_Str""),type);
        if (id == null)         return new ExampleAdornerState(State.Element,s.path + ""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"");
        ResourceDefn r=definitions.getResourceByName(type);
        if (r == null)         throw new Exception(""String_Node_Str"" + type);
        for (        Example e : r.getExamples()) {
          if (id.equals(e.getId()))           return new ExampleAdornerState(State.Reference,s.path + ""String_Node_Str"",s.getDefinition(),""String_Node_Str"" + prefix + e.getTitle()+ ""String_Node_Str"",""String_Node_Str"");
          if (e.getXml() != null && e.getXml().getDocumentElement().getLocalName().equals(""String_Node_Str"")) {
            List<Element> entries=new ArrayList<Element>();
            XMLUtil.getNamedChildren(e.getXml().getDocumentElement(),""String_Node_Str"",entries);
            String url=""String_Node_Str"" + type + ""String_Node_Str""+ id;
            for (            Element c : entries) {
              String t=XMLUtil.getNamedChild(c,""String_Node_Str"").getAttribute(""String_Node_Str"");
              if (url.equals(t))               return new ExampleAdornerState(State.Reference,s.path + ""String_Node_Str"",s.getDefinition(),""String_Node_Str"" + prefix + e.getTitle()+ ""String_Node_Str""+ id+ ""String_Node_Str"",""String_Node_Str"");
            }
          }
        }
        return new ExampleAdornerState(State.Reference,s.path + ""String_Node_Str"",s.getDefinition(),""String_Node_Str"",""String_Node_Str"");
      }
 else       return new ExampleAdornerState(State.Reference,s.path,s.getDefinition(),""String_Node_Str"",""String_Node_Str"");
    }
 else     return new ExampleAdornerState(State.Unknown,s.path,null,""String_Node_Str"",""String_Node_Str"");
  }
}","@Override public XhtmlGeneratorAdornerState getState(XhtmlGenerator ref,XhtmlGeneratorAdornerState state,Element node) throws Exception {
  if (state == null) {
    if (node == null)     return new ExampleAdornerState(State.Unknown,""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"");
 else     if (definitions.hasResource(node.getLocalName()))     return new ExampleAdornerState(State.Element,node.getLocalName(),definitions.getResourceByName(node.getLocalName()).getRoot(),""String_Node_Str"",""String_Node_Str"");
 else     return new ExampleAdornerState(State.Unknown,""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    ExampleAdornerState s=(ExampleAdornerState)state;
    if (s.getState() == State.Element) {
      if (s.definition.typeCode().equals(""String_Node_Str"") && (s.path.endsWith(""String_Node_Str"") || s.path.endsWith(""String_Node_Str"")) && definitions.isResource(node.getNodeName()))       return new ExampleAdornerState(State.Element,s.path,definitions.getResourceByName(node.getNodeName()).getRoot(),""String_Node_Str"",""String_Node_Str"");
      String p=s.path + ""String_Node_Str"" + node.getNodeName();
      ElementDefn e=s.getDefinition().getElementByName(node.getLocalName(),true,definitions,""String_Node_Str"");
      if (e == null && definitions.hasElementDefn(s.getDefinition().typeCode())) {
        ElementDefn t=definitions.getElementDefn(s.getDefinition().typeCode());
        while (t != null && e == null) {
          e=t.getElementByName(node.getLocalName(),true,definitions,""String_Node_Str"");
          if (e != null)           p=t.getName() + ""String_Node_Str"" + e.getName();
 else           if (definitions.hasElementDefn(t.typeCode()))           t=definitions.getElementDefn(t.typeCode());
 else           t=null;
        }
      }
 else       if (e != null)       p=s.path + ""String_Node_Str"" + e.getName();
      if (e == null)       return new ExampleAdornerState(State.Unknown,s.path,null,""String_Node_Str"",""String_Node_Str"");
      if (!e.isBaseResourceElement() && e.typeCode().contains(""String_Node_Str""))       return new ExampleAdornerState(State.Reference,p,e,""String_Node_Str"",""String_Node_Str"");
 else       if (!e.isBaseResourceElement() && e.typeCode().equals(""String_Node_Str""))       return new ExampleAdornerState(State.Reference,p,e,""String_Node_Str"",""String_Node_Str"");
 else       return new ExampleAdornerState(State.Element,p,e,""String_Node_Str"",""String_Node_Str"");
    }
 else     if (s.getState() == State.Reference) {
      if (node.getLocalName().equals(""String_Node_Str"")) {
        String type=extractType(node.getAttribute(""String_Node_Str""));
        String id=extractId(node.getAttribute(""String_Node_Str""),type);
        if (id == null)         return new ExampleAdornerState(State.Element,s.path + ""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"");
        ResourceDefn r=definitions.getResourceByName(type);
        if (r == null)         throw new Exception(""String_Node_Str"" + type);
        for (        Example e : r.getExamples()) {
          if (id.equals(e.getId()))           return new ExampleAdornerState(State.Reference,s.path + ""String_Node_Str"",s.getDefinition(),""String_Node_Str"" + prefix + e.getTitle()+ ""String_Node_Str"",""String_Node_Str"");
          if (e.getXml() != null && e.getXml().getDocumentElement().getLocalName().equals(""String_Node_Str"")) {
            List<Element> entries=new ArrayList<Element>();
            XMLUtil.getNamedChildren(e.getXml().getDocumentElement(),""String_Node_Str"",entries);
            String url=""String_Node_Str"" + type + ""String_Node_Str""+ id;
            for (            Element c : entries) {
              String t=XMLUtil.getNamedChild(c,""String_Node_Str"").getAttribute(""String_Node_Str"");
              if (url.equals(t))               return new ExampleAdornerState(State.Reference,s.path + ""String_Node_Str"",s.getDefinition(),""String_Node_Str"" + prefix + e.getTitle()+ ""String_Node_Str""+ id+ ""String_Node_Str"",""String_Node_Str"");
            }
          }
        }
        return new ExampleAdornerState(State.Reference,s.path + ""String_Node_Str"",s.getDefinition(),""String_Node_Str"",""String_Node_Str"");
      }
 else       return new ExampleAdornerState(State.Reference,s.path,s.getDefinition(),""String_Node_Str"",""String_Node_Str"");
    }
 else     return new ExampleAdornerState(State.Unknown,s.path,null,""String_Node_Str"",""String_Node_Str"");
  }
}",0.9598776326626662
24080,"private void generateElementDefinition(ElementDefinition ed,ElementDefinition parent){
  DataElement de=new DataElement();
  de.setId(ed.getPath().replace(""String_Node_Str"",""String_Node_Str""));
  if (de.getId().length() > 64)   de.setId(de.getId().substring(0,64));
  de.getMeta().setLastUpdatedElement(new InstantType(genDate));
  de.setUrl(""String_Node_Str"" + de.getId());
  if (dataElements != null)   dataElements.addEntry().setResource(de).setFullUrl(de.getUrl());
  de.setName(ed.getName());
  de.setStatus(ConformanceResourceStatus.DRAFT);
  de.setExperimental(true);
  de.setStringency(DataElementStringency.FULLYSPECIFIED);
  if (parent != null) {
    Extension ext=de.addExtension();
    ext.setUrl(""String_Node_Str"");
    Extension ext2=ext.addExtension();
    ext2.setUrl(""String_Node_Str"");
    ext2.setValue(new CodeType(""String_Node_Str""));
    ext2=ext.addExtension();
    ext2.setUrl(""String_Node_Str"");
    ext2.setValue(new StringType(""String_Node_Str""));
    ext2=ext.addExtension();
    ext2.setUrl(""String_Node_Str"");
    ext2.setValue(new UriType(""String_Node_Str"" + parent.getPath()));
  }
  de.addElement(ed);
}","private void generateElementDefinition(ElementDefinition ed,ElementDefinition parent){
  String id=ed.getPath().replace(""String_Node_Str"",""String_Node_Str"");
  if (id.length() > 64)   id=id.substring(0,64);
  DataElement de;
  if (des.containsKey(id)) {
    de=des.get(id);
    de.getElement().clear();
    de.getExtension().clear();
  }
 else {
    de=new DataElement();
    de.setId(id);
    des.put(id,de);
    if (dataElements != null)     dataElements.addEntry().setResource(de).setFullUrl(de.getUrl());
  }
  de.getMeta().setLastUpdatedElement(new InstantType(genDate));
  de.setUrl(""String_Node_Str"" + de.getId());
  de.setName(ed.getName());
  de.setStatus(ConformanceResourceStatus.DRAFT);
  de.setExperimental(true);
  de.setStringency(DataElementStringency.FULLYSPECIFIED);
  if (parent != null) {
    Extension ext=de.addExtension();
    ext.setUrl(""String_Node_Str"");
    Extension ext2=ext.addExtension();
    ext2.setUrl(""String_Node_Str"");
    ext2.setValue(new CodeType(""String_Node_Str""));
    ext2=ext.addExtension();
    ext2.setUrl(""String_Node_Str"");
    ext2.setValue(new StringType(""String_Node_Str""));
    ext2=ext.addExtension();
    ext2.setUrl(""String_Node_Str"");
    ext2.setValue(new UriType(""String_Node_Str"" + parent.getPath()));
  }
  de.addElement(ed);
}",0.7962046204620462
24081,"private boolean discriiminatorMatches(List<StringType> diff,List<StringType> base){
  if (diff.isEmpty() || base.isEmpty())   return true;
  if (diff.size() != base.size())   return false;
  for (int i=0; i < diff.size(); i++)   if (diff.get(i).getValue().equals(base.get(i).getValue()))   return false;
  return true;
}","private boolean discriiminatorMatches(List<StringType> diff,List<StringType> base){
  if (diff.isEmpty() || base.isEmpty())   return true;
  if (diff.size() != base.size())   return false;
  for (int i=0; i < diff.size(); i++)   if (!diff.get(i).getValue().equals(base.get(i).getValue()))   return false;
  return true;
}",0.998439937597504
24082,"private boolean orderMatches(BooleanType diff,BooleanType base){
  return (diff == null) || (base == null) || (diff == base);
}","private boolean orderMatches(BooleanType diff,BooleanType base){
  return (diff == null) || (base == null) || (diff.getValue() == base.getValue());
}",0.9202898550724636
24083,"private void addToSpine(XMLWriter xml,String n) throws IOException {
  int i=getEntryIndex(n);
  xml.comment(n,false);
  xml.attribute(""String_Node_Str"",""String_Node_Str"" + Integer.toString(i));
  xml.element(""String_Node_Str"",null);
}","private void addToSpine(XMLWriter xml,String n) throws IOException {
  int i=getEntryIndex(n);
  if (i >= 0) {
    xml.comment(n,false);
    xml.attribute(""String_Node_Str"",""String_Node_Str"" + Integer.toString(i));
    xml.element(""String_Node_Str"",null);
  }
}",0.9475806451612904
24084,"public void produce() throws FileNotFoundException, Exception {
  ZipGenerator zip=new ZipGenerator(Utilities.path(page.getFolders().dstDir,""String_Node_Str"" + page.getVersion() + ""String_Node_Str""));
  zip.addMimeTypeFile(""String_Node_Str"",Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),false);
  zip.addBytes(""String_Node_Str"",generateContentFile(),false);
  zip.addBytes(""String_Node_Str"",generateIndexFile(),false);
  build(zip);
  zip.close();
}","public void produce() throws FileNotFoundException, Exception {
  ZipGenerator zip=new ZipGenerator(Utilities.path(page.getFolders().dstDir,""String_Node_Str"" + page.getVersion() + ""String_Node_Str""));
  zip.addMimeTypeFile(""String_Node_Str"",Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),false);
  zip.addBytes(""String_Node_Str"",generateContentFile(),false);
  zip.addBytes(""String_Node_Str"",generateIndexFile(),false);
  build(zip);
  zip.close();
  new EpubReader().readEpub(new FileInputStream(Utilities.path(page.getFolders().dstDir,""String_Node_Str"" + page.getVersion() + ""String_Node_Str"")));
}",0.8940677966101694
24085,"private void produceSpec() throws Exception {
  for (  StructureDefinition ed : page.getWorkerContext().getExtensionDefinitions().values()) {
    String filename=""String_Node_Str"" + ed.getUrl().substring(40).toLowerCase();
    ed.setUserData(""String_Node_Str"",filename);
    ImplementationGuideDefn ig=page.getDefinitions().getIgs().get(ed.getUserString(ToolResourceUtilities.NAME_RES_IG));
    ed.setUserData(""String_Node_Str"",(ig.isCore() ? ""String_Node_Str"" : ig.getCode() + File.separator) + filename + ""String_Node_Str"");
  }
  for (  ValueSet vs : page.getWorkerContext().getCodeSystems().values())   if (!vs.hasCodeSystem())   throw new Error(""String_Node_Str"" + vs.getName() + ""String_Node_Str""+ vs.getUrl()+ ""String_Node_Str"");
  loadValueSets2();
  page.log(""String_Node_Str"",LogMessageType.Process);
  for (  StructureDefinition ae : page.getWorkerContext().getExtensionDefinitions().values())   produceExtensionDefinition(ae);
  checkAllOk();
  page.log(""String_Node_Str"",LogMessageType.Process);
  for (  String rname : page.getDefinitions().getBaseResources().keySet()) {
    ResourceDefn r=page.getDefinitions().getBaseResources().get(rname);
    produceResource1(r,r.isAbstract());
  }
  for (  String rname : page.getDefinitions().sortedResourceNames()) {
    if (!rname.equals(""String_Node_Str"") && wantBuild(rname)) {
      ResourceDefn r=page.getDefinitions().getResources().get(rname);
      produceResource1(r,false);
    }
  }
  if (buildFlags.get(""String_Node_Str"")) {
    page.log(""String_Node_Str"",LogMessageType.Process);
    produceBaseProfile();
  }
  for (  String rname : page.getDefinitions().getBaseResources().keySet()) {
    ResourceDefn r=page.getDefinitions().getBaseResources().get(rname);
    page.log(""String_Node_Str"" + r.getName(),LogMessageType.Process);
    produceResource2(r,true,rname.equals(""String_Node_Str"") ? ""String_Node_Str"" : null);
  }
  for (  String rname : page.getDefinitions().sortedResourceNames()) {
    if (!rname.equals(""String_Node_Str"") && wantBuild(rname)) {
      ResourceDefn r=page.getDefinitions().getResources().get(rname);
      page.log(""String_Node_Str"" + r.getName(),LogMessageType.Process);
      produceResource2(r,false,null);
    }
  }
  for (  Compartment c : page.getDefinitions().getCompartments()) {
    if (buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"" + c.getName(),LogMessageType.Process);
      produceCompartment(c);
    }
  }
  processExamplesByBatch();
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    if (buildFlags.get(""String_Node_Str"") || buildFlags.get(""String_Node_Str"" + n.toLowerCase())) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      producePage(n,page.getIni().getStringProperty(""String_Node_Str"",n));
    }
  }
  for (  ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs()) {
    for (    String n : ig.getPageList()) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      produceIgPage(n,ig);
    }
    for (    Profile p : ig.getProfiles()) {
      if (!p.getOperations().isEmpty()) {
        produceIgOperations(ig,p);
      }
    }
  }
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    page.log(""String_Node_Str"" + n,LogMessageType.Process);
    for (    ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs()) {
      if (!ig.isCore())       produceIgPage(n,ig,page.getIni().getStringProperty(""String_Node_Str"",n));
    }
  }
  for (  String n : page.getDefinitions().getDictionaries().keySet()) {
    if (buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      produceDictionary(page.getDefinitions().getDictionaries().get(n));
    }
  }
  for (  ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs()) {
    for (    LogicalModel lm : ig.getLogicalModels()) {
      page.log(""String_Node_Str"" + lm.getId(),LogMessageType.Process);
      produceLogicalModel(lm,ig);
    }
  }
  int i=0;
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    page.log(""String_Node_Str"" + n,LogMessageType.Process);
    produceSid(i,n,page.getIni().getStringProperty(""String_Node_Str"",n));
    i++;
  }
  if (buildFlags.get(""String_Node_Str"")) {
    page.log(""String_Node_Str"",LogMessageType.Process);
    checkFragments();
    for (    Profile p : page.getDefinitions().getPackList()) {
      page.log(""String_Node_Str"" + p.getId(),LogMessageType.Process);
      produceConformancePackage(""String_Node_Str"",p,null);
    }
    processExamplesByBatch();
    produceV2();
    produceV3();
    page.getVsValidator().checkDuplicates(page.getValidationErrors());
    if (buildFlags.get(""String_Node_Str"")) {
      page.getToc().put(""String_Node_Str"",new TocEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      page.log(""String_Node_Str"",LogMessageType.Process);
      producePage(""String_Node_Str"",null);
    }
    checkAllOk();
    page.log(""String_Node_Str"",LogMessageType.Process);
    checkBundleURLs(profileFeed);
    FileOutputStream s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,profileFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,profileFeed);
    s.close();
    checkBundleURLs(typeFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,typeFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,typeFeed);
    s.close();
    Bundle extensionsFeed=new Bundle();
    extensionsFeed.setId(""String_Node_Str"");
    extensionsFeed.setType(BundleType.COLLECTION);
    extensionsFeed.setMeta(new Meta().setLastUpdated(profileFeed.getMeta().getLastUpdated()));
    Set<String> urls=new HashSet<String>();
    for (    StructureDefinition ed : page.getWorkerContext().getExtensionDefinitions().values()) {
      if (!urls.contains(ed.getUrl())) {
        urls.add(ed.getUrl());
        extensionsFeed.getEntry().add(new BundleEntryComponent().setResource(ed).setFullUrl(ed.getUrl()));
      }
    }
    checkBundleURLs(extensionsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,extensionsFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,extensionsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    Bundle searchParamsFeed=new Bundle();
    searchParamsFeed.setId(""String_Node_Str"");
    searchParamsFeed.setType(BundleType.COLLECTION);
    searchParamsFeed.setMeta(new Meta().setLastUpdated(profileFeed.getMeta().getLastUpdated()));
    for (    ResourceDefn rd : page.getDefinitions().getBaseResources().values())     addSearchParams(searchParamsFeed,rd);
    for (    ResourceDefn rd : page.getDefinitions().getResources().values())     addSearchParams(searchParamsFeed,rd);
    for (    Profile cp : page.getDefinitions().getPackList()) {
      addSearchParams(searchParamsFeed,cp);
    }
    checkBundleURLs(searchParamsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,searchParamsFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,searchParamsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    for (    ResourceDefn rd : page.getDefinitions().getResources().values())     addOtherProfiles(profileOthersFeed,rd);
    for (    Profile cp : page.getDefinitions().getPackList()) {
      addOtherProfiles(profileOthersFeed,cp);
    }
    checkBundleURLs(profileOthersFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,profileOthersFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,profileOthersFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    checkBundleURLs(dataElements);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,dataElements);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,dataElements);
    s.close();
    checkBundleURLs(valueSetsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,valueSetsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,valueSetsFeed);
    s.close();
    checkBundleURLs(conceptMapsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,conceptMapsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,conceptMapsFeed);
    s.close();
    checkBundleURLs(v2Valuesets);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v2Valuesets);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v2Valuesets);
    s.close();
    checkBundleURLs(v3Valuesets);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v3Valuesets);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v3Valuesets);
    s.close();
    produceComparisons();
    page.log(""String_Node_Str"",LogMessageType.Process);
    ZipGenerator zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    minify(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"");
    minify(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"");
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().srcDir,""String_Node_Str"",""String_Node_Str""),false);
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().dstDir,""String_Node_Str""),false);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFiles(page.getFolders().dstDir + ""String_Node_Str"" + File.separator,""String_Node_Str"",null,null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    if (web) {
      page.log(""String_Node_Str"",LogMessageType.Process);
      produceZip();
    }
    page.log(""String_Node_Str"",LogMessageType.Process);
    page.getEpub().produce();
    checkAllOk();
  }
 else   page.log(""String_Node_Str"",LogMessageType.Error);
}","private void produceSpec() throws Exception {
  for (  StructureDefinition ed : page.getWorkerContext().getExtensionDefinitions().values()) {
    String filename=""String_Node_Str"" + ed.getUrl().substring(40).toLowerCase();
    ed.setUserData(""String_Node_Str"",filename);
    ImplementationGuideDefn ig=page.getDefinitions().getIgs().get(ed.getUserString(ToolResourceUtilities.NAME_RES_IG));
    ed.setUserData(""String_Node_Str"",(ig.isCore() ? ""String_Node_Str"" : ig.getCode() + File.separator) + filename + ""String_Node_Str"");
  }
  for (  ValueSet vs : page.getWorkerContext().getCodeSystems().values())   if (!vs.hasCodeSystem())   throw new Error(""String_Node_Str"" + vs.getName() + ""String_Node_Str""+ vs.getUrl()+ ""String_Node_Str"");
  loadValueSets2();
  page.log(""String_Node_Str"",LogMessageType.Process);
  for (  StructureDefinition ae : page.getWorkerContext().getExtensionDefinitions().values())   produceExtensionDefinition(ae);
  checkAllOk();
  page.log(""String_Node_Str"",LogMessageType.Process);
  for (  String rname : page.getDefinitions().getBaseResources().keySet()) {
    ResourceDefn r=page.getDefinitions().getBaseResources().get(rname);
    produceResource1(r,r.isAbstract());
  }
  for (  String rname : page.getDefinitions().sortedResourceNames()) {
    if (!rname.equals(""String_Node_Str"") && wantBuild(rname)) {
      ResourceDefn r=page.getDefinitions().getResources().get(rname);
      produceResource1(r,false);
    }
  }
  if (buildFlags.get(""String_Node_Str"")) {
    page.log(""String_Node_Str"",LogMessageType.Process);
    produceBaseProfile();
  }
  for (  String rname : page.getDefinitions().getBaseResources().keySet()) {
    ResourceDefn r=page.getDefinitions().getBaseResources().get(rname);
    page.log(""String_Node_Str"" + r.getName(),LogMessageType.Process);
    produceResource2(r,true,rname.equals(""String_Node_Str"") ? ""String_Node_Str"" : null);
  }
  for (  String rname : page.getDefinitions().sortedResourceNames()) {
    if (!rname.equals(""String_Node_Str"") && wantBuild(rname)) {
      ResourceDefn r=page.getDefinitions().getResources().get(rname);
      page.log(""String_Node_Str"" + r.getName(),LogMessageType.Process);
      produceResource2(r,false,null);
    }
  }
  for (  Compartment c : page.getDefinitions().getCompartments()) {
    if (buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"" + c.getName(),LogMessageType.Process);
      produceCompartment(c);
    }
  }
  processExamplesByBatch();
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    if (buildFlags.get(""String_Node_Str"") || buildFlags.get(""String_Node_Str"" + n.toLowerCase())) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      producePage(n,page.getIni().getStringProperty(""String_Node_Str"",n));
    }
  }
  for (  ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs()) {
    for (    String n : ig.getPageList()) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      produceIgPage(n,ig);
    }
    for (    Profile p : ig.getProfiles()) {
      if (!p.getOperations().isEmpty()) {
        produceIgOperations(ig,p);
      }
    }
  }
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    page.log(""String_Node_Str"" + n,LogMessageType.Process);
    for (    ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs()) {
      if (!ig.isCore())       produceIgPage(n,ig,page.getIni().getStringProperty(""String_Node_Str"",n));
    }
  }
  for (  String n : page.getDefinitions().getDictionaries().keySet()) {
    if (buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      produceDictionary(page.getDefinitions().getDictionaries().get(n));
    }
  }
  for (  ImplementationGuideDefn ig : page.getDefinitions().getSortedIgs()) {
    for (    LogicalModel lm : ig.getLogicalModels()) {
      page.log(""String_Node_Str"" + lm.getId(),LogMessageType.Process);
      produceLogicalModel(lm,ig);
    }
  }
  int i=0;
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    page.log(""String_Node_Str"" + n,LogMessageType.Process);
    produceSid(i,n,page.getIni().getStringProperty(""String_Node_Str"",n));
    i++;
  }
  if (buildFlags.get(""String_Node_Str"")) {
    page.log(""String_Node_Str"",LogMessageType.Process);
    checkFragments();
    for (    Profile p : page.getDefinitions().getPackList()) {
      page.log(""String_Node_Str"" + p.getId(),LogMessageType.Process);
      produceConformancePackage(""String_Node_Str"",p,null);
    }
    processExamplesByBatch();
    produceV2();
    produceV3();
    page.getVsValidator().checkDuplicates(page.getValidationErrors());
    if (buildFlags.get(""String_Node_Str"")) {
      page.getToc().put(""String_Node_Str"",new TocEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      page.log(""String_Node_Str"",LogMessageType.Process);
      producePage(""String_Node_Str"",null);
    }
    checkAllOk();
    page.log(""String_Node_Str"",LogMessageType.Process);
    checkBundleURLs(profileFeed);
    FileOutputStream s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,profileFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,profileFeed);
    s.close();
    checkBundleURLs(typeFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,typeFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,typeFeed);
    s.close();
    Bundle extensionsFeed=new Bundle();
    extensionsFeed.setId(""String_Node_Str"");
    extensionsFeed.setType(BundleType.COLLECTION);
    extensionsFeed.setMeta(new Meta().setLastUpdated(profileFeed.getMeta().getLastUpdated()));
    Set<String> urls=new HashSet<String>();
    for (    StructureDefinition ed : page.getWorkerContext().getExtensionDefinitions().values()) {
      if (!urls.contains(ed.getUrl())) {
        urls.add(ed.getUrl());
        extensionsFeed.getEntry().add(new BundleEntryComponent().setResource(ed).setFullUrl(ed.getUrl()));
      }
    }
    checkBundleURLs(extensionsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,extensionsFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,extensionsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    Bundle searchParamsFeed=new Bundle();
    searchParamsFeed.setId(""String_Node_Str"");
    searchParamsFeed.setType(BundleType.COLLECTION);
    searchParamsFeed.setMeta(new Meta().setLastUpdated(profileFeed.getMeta().getLastUpdated()));
    for (    ResourceDefn rd : page.getDefinitions().getBaseResources().values())     addSearchParams(searchParamsFeed,rd);
    for (    ResourceDefn rd : page.getDefinitions().getResources().values())     addSearchParams(searchParamsFeed,rd);
    for (    Profile cp : page.getDefinitions().getPackList()) {
      addSearchParams(searchParamsFeed,cp);
    }
    checkBundleURLs(searchParamsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,searchParamsFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,searchParamsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    for (    ResourceDefn rd : page.getDefinitions().getResources().values())     addOtherProfiles(profileOthersFeed,rd);
    for (    Profile cp : page.getDefinitions().getPackList()) {
      addOtherProfiles(profileOthersFeed,cp);
    }
    checkBundleURLs(profileOthersFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,profileOthersFeed);
    s.close();
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,profileOthersFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    checkBundleURLs(dataElements);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,dataElements);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,dataElements);
    s.close();
    checkBundleURLs(valueSetsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,valueSetsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,valueSetsFeed);
    s.close();
    checkBundleURLs(conceptMapsFeed);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,conceptMapsFeed);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,conceptMapsFeed);
    s.close();
    checkBundleURLs(v2Valuesets);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v2Valuesets);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v2Valuesets);
    s.close();
    checkBundleURLs(v3Valuesets);
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new XmlParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v3Valuesets);
    s.close();
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    s=new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str"");
    new JsonParser().setOutputStyle(OutputStyle.PRETTY).compose(s,v3Valuesets);
    s.close();
    produceComparisons();
    page.log(""String_Node_Str"",LogMessageType.Process);
    ZipGenerator zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    minify(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"");
    minify(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"");
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().srcDir,""String_Node_Str"",""String_Node_Str""),false);
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().dstDir,""String_Node_Str""),false);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFiles(page.getFolders().dstDir + ""String_Node_Str"" + File.separator,""String_Node_Str"",null,null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    if (web) {
      page.log(""String_Node_Str"",LogMessageType.Process);
      produceZip();
    }
    page.log(""String_Node_Str"",LogMessageType.Process);
    page.getEpub().produce();
    checkAllOk();
  }
 else   page.log(""String_Node_Str"",LogMessageType.Error);
}",0.9953091171517922
24086,"private void updateFromDefinition(ElementDefinition dest,ElementDefinition source,String pn,ProfileKnowledgeProvider pkp,boolean trimDifferential) throws Exception {
  ElementDefinition base=dest;
  ElementDefinition derived=source;
  if (derived != null) {
    boolean isExtension=base.getPath().equals(""String_Node_Str"") || base.getPath().endsWith(""String_Node_Str"") || base.getPath().endsWith(""String_Node_Str"");
    if (isExtension) {
      base.setDefinition(""String_Node_Str"");
      base.setShort(""String_Node_Str"");
      base.setCommentsElement(null);
      base.setRequirementsElement(null);
      base.getAlias().clear();
      base.getMapping().clear();
    }
    if (derived.hasShortElement()) {
      if (!Base.compareDeep(derived.getShortElement(),base.getShortElement(),false))       base.setShortElement(derived.getShortElement().copy());
 else       if (trimDifferential)       derived.setShortElement(null);
 else       if (derived.hasShortElement())       derived.getShortElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasDefinitionElement()) {
      if (derived.getDefinition().startsWith(""String_Node_Str""))       base.setDefinition(base.getDefinition() + ""String_Node_Str"" + derived.getDefinition().substring(3));
 else       if (!Base.compareDeep(derived.getDefinitionElement(),base.getDefinitionElement(),false))       base.setDefinitionElement(derived.getDefinitionElement().copy());
 else       if (trimDifferential)       derived.setDefinitionElement(null);
 else       if (derived.hasDefinitionElement())       derived.getDefinitionElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasCommentsElement()) {
      if (derived.getComments().startsWith(""String_Node_Str""))       base.setComments(base.getComments() + ""String_Node_Str"" + derived.getComments().substring(3));
 else       if (!Base.compareDeep(derived.getCommentsElement(),base.getCommentsElement(),false))       derived.setCommentsElement(null);
 else       if (trimDifferential)       base.setCommentsElement(derived.getCommentsElement().copy());
 else       if (derived.hasCommentsElement())       derived.getCommentsElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasRequirementsElement()) {
      if (derived.getRequirements().startsWith(""String_Node_Str""))       base.setRequirements(base.getRequirements() + ""String_Node_Str"" + derived.getRequirements().substring(3));
 else       if (!Base.compareDeep(derived.getRequirementsElement(),base.getRequirementsElement(),false))       derived.setRequirementsElement(null);
 else       if (trimDifferential)       base.setRequirementsElement(derived.getRequirementsElement().copy());
 else       if (derived.hasRequirementsElement())       derived.getRequirementsElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasAlias()) {
      if (!Base.compareDeep(derived.getAlias(),base.getAlias(),false))       for (      StringType s : derived.getAlias()) {
        if (!base.hasAlias(s.getValue()))         base.getAlias().add(s.copy());
      }
 else       if (trimDifferential)       derived.getAlias().clear();
 else       for (      StringType t : derived.getAlias())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMinElement()) {
      if (!Base.compareDeep(derived.getMinElement(),base.getMinElement(),false))       base.setMinElement(derived.getMinElement().copy());
 else       if (trimDifferential)       derived.setMinElement(null);
 else       derived.getMinElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMaxElement()) {
      if (!Base.compareDeep(derived.getMaxElement(),base.getMaxElement(),false))       base.setMaxElement(derived.getMaxElement().copy());
 else       if (trimDifferential)       derived.setMaxElement(null);
 else       derived.getMaxElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasFixed()) {
      if (!Base.compareDeep(derived.getFixed(),base.getFixed(),true)) {
        base.setFixed(derived.getFixed().copy());
      }
 else       if (trimDifferential)       derived.setFixed(null);
 else       derived.getFixed().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasPattern()) {
      if (!Base.compareDeep(derived.getPattern(),base.getPattern(),false)) {
        base.setPattern(derived.getPattern().copy());
      }
 else       if (trimDifferential)       derived.setPattern(null);
 else       derived.getPattern().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasExample()) {
      if (!Base.compareDeep(derived.getExample(),base.getExample(),false))       base.setExample(derived.getExample().copy());
 else       if (trimDifferential)       derived.setExample(null);
 else       derived.getExample().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMaxLengthElement()) {
      if (!Base.compareDeep(derived.getMaxLengthElement(),base.getMaxLengthElement(),false))       base.setMaxLengthElement(derived.getMaxLengthElement().copy());
 else       if (trimDifferential)       derived.setMaxLengthElement(null);
 else       derived.getMaxLengthElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMustSupportElement()) {
      if (!Base.compareDeep(derived.getMustSupportElement(),base.getMustSupportElement(),false))       base.setMustSupportElement(derived.getMustSupportElement().copy());
 else       if (trimDifferential)       derived.setMustSupportElement(null);
 else       derived.getMustSupportElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (isExtension) {
      if (!Base.compareDeep(derived.getIsModifierElement(),base.getIsModifierElement(),false))       base.setIsModifierElement(derived.getIsModifierElement().copy());
 else       if (trimDifferential)       derived.setIsModifierElement(null);
 else       derived.getIsModifierElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasBinding()) {
      if (!Base.compareDeep(derived.getBinding(),base.getBinding(),false)) {
        if (base.hasBinding() && base.getBinding().getStrength() == BindingStrength.REQUIRED && base.getBinding().getStrength() != BindingStrength.REQUIRED)         throw new Exception(""String_Node_Str"" + pn + ""String_Node_Str""+ derived.getPath()+ ""String_Node_Str""+ base.getBinding().getStrength().toCode()+ ""String_Node_Str""+ base.getBinding().getStrength().toCode());
        base.setBinding(derived.getBinding().copy());
      }
 else       if (trimDifferential)       derived.setBinding(null);
 else       derived.getBinding().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasIsSummaryElement()) {
      if (!Base.compareDeep(derived.getIsSummaryElement(),base.getIsSummaryElement(),false))       base.setIsSummaryElement(derived.getIsSummaryElement().copy());
 else       if (trimDifferential)       derived.setIsSummaryElement(null);
 else       derived.getIsSummaryElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasType()) {
      if (!Base.compareDeep(derived.getType(),base.getType(),false)) {
        if (base.hasType()) {
          for (          TypeRefComponent ts : derived.getType()) {
            boolean ok=false;
            CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
            for (            TypeRefComponent td : base.getType()) {
              b.append(td.getCode());
              if (td.getCode().equals(ts.getCode()) || td.getCode().equals(""String_Node_Str"") || td.getCode().equals(""String_Node_Str"")|| td.getCode().equals(""String_Node_Str"")|| ((td.getCode().equals(""String_Node_Str"") || (td.getCode().equals(""String_Node_Str"")) && pkp.isResource(ts.getCode()))))               ok=true;
            }
            if (!ok)             throw new Exception(""String_Node_Str"" + pn + ""String_Node_Str""+ derived.getPath()+ ""String_Node_Str""+ ts.getCode()+ ""String_Node_Str""+ b.toString());
          }
        }
        base.getType().clear();
        for (        TypeRefComponent t : derived.getType())         base.getType().add(t.copy());
      }
 else       if (trimDifferential)       derived.getType().clear();
 else       for (      TypeRefComponent t : derived.getType())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMapping()) {
      if (!Base.compareDeep(derived.getMapping(),base.getMapping(),false)) {
        for (        ElementDefinitionMappingComponent s : derived.getMapping()) {
          boolean found=false;
          for (          ElementDefinitionMappingComponent d : base.getMapping()) {
            found=found || (d.getIdentity().equals(s.getIdentity()) && d.getMap().equals(s.getMap()));
          }
          if (!found)           base.getMapping().add(s);
        }
      }
 else       if (trimDifferential)       derived.getMapping().clear();
 else       for (      ElementDefinitionMappingComponent t : derived.getMapping())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasConstraint()) {
      for (      ElementDefinitionConstraintComponent s : derived.getConstraint()) {
        base.getConstraint().add(s);
      }
    }
  }
}","private void updateFromDefinition(ElementDefinition dest,ElementDefinition source,String pn,ProfileKnowledgeProvider pkp,boolean trimDifferential) throws Exception {
  ElementDefinition base=dest;
  ElementDefinition derived=source;
  if (derived != null) {
    boolean isExtension=base.getPath().equals(""String_Node_Str"") || base.getPath().endsWith(""String_Node_Str"") || base.getPath().endsWith(""String_Node_Str"");
    if (isExtension) {
      base.setDefinition(""String_Node_Str"");
      base.setShort(""String_Node_Str"");
      base.setCommentsElement(null);
      base.setRequirementsElement(null);
      base.getAlias().clear();
      base.getMapping().clear();
    }
    if (derived.hasShortElement()) {
      if (!Base.compareDeep(derived.getShortElement(),base.getShortElement(),false))       base.setShortElement(derived.getShortElement().copy());
 else       if (trimDifferential)       derived.setShortElement(null);
 else       if (derived.hasShortElement())       derived.getShortElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasDefinitionElement()) {
      if (derived.getDefinition().startsWith(""String_Node_Str""))       base.setDefinition(base.getDefinition() + ""String_Node_Str"" + derived.getDefinition().substring(3));
 else       if (!Base.compareDeep(derived.getDefinitionElement(),base.getDefinitionElement(),false))       base.setDefinitionElement(derived.getDefinitionElement().copy());
 else       if (trimDifferential)       derived.setDefinitionElement(null);
 else       if (derived.hasDefinitionElement())       derived.getDefinitionElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasCommentsElement()) {
      if (derived.getComments().startsWith(""String_Node_Str""))       base.setComments(base.getComments() + ""String_Node_Str"" + derived.getComments().substring(3));
 else       if (!Base.compareDeep(derived.getCommentsElement(),base.getCommentsElement(),false))       base.setCommentsElement(derived.getCommentsElement().copy());
 else       if (trimDifferential)       base.setCommentsElement(derived.getCommentsElement().copy());
 else       if (derived.hasCommentsElement())       derived.getCommentsElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasRequirementsElement()) {
      if (derived.getRequirements().startsWith(""String_Node_Str""))       base.setRequirements(base.getRequirements() + ""String_Node_Str"" + derived.getRequirements().substring(3));
 else       if (!Base.compareDeep(derived.getRequirementsElement(),base.getRequirementsElement(),false))       base.setRequirementsElement(derived.getRequirementsElement().copy());
 else       if (trimDifferential)       base.setRequirementsElement(derived.getRequirementsElement().copy());
 else       if (derived.hasRequirementsElement())       derived.getRequirementsElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasAlias()) {
      if (!Base.compareDeep(derived.getAlias(),base.getAlias(),false))       for (      StringType s : derived.getAlias()) {
        if (!base.hasAlias(s.getValue()))         base.getAlias().add(s.copy());
      }
 else       if (trimDifferential)       derived.getAlias().clear();
 else       for (      StringType t : derived.getAlias())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMinElement()) {
      if (!Base.compareDeep(derived.getMinElement(),base.getMinElement(),false))       base.setMinElement(derived.getMinElement().copy());
 else       if (trimDifferential)       derived.setMinElement(null);
 else       derived.getMinElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMaxElement()) {
      if (!Base.compareDeep(derived.getMaxElement(),base.getMaxElement(),false))       base.setMaxElement(derived.getMaxElement().copy());
 else       if (trimDifferential)       derived.setMaxElement(null);
 else       derived.getMaxElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasFixed()) {
      if (!Base.compareDeep(derived.getFixed(),base.getFixed(),true)) {
        base.setFixed(derived.getFixed().copy());
      }
 else       if (trimDifferential)       derived.setFixed(null);
 else       derived.getFixed().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasPattern()) {
      if (!Base.compareDeep(derived.getPattern(),base.getPattern(),false)) {
        base.setPattern(derived.getPattern().copy());
      }
 else       if (trimDifferential)       derived.setPattern(null);
 else       derived.getPattern().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasExample()) {
      if (!Base.compareDeep(derived.getExample(),base.getExample(),false))       base.setExample(derived.getExample().copy());
 else       if (trimDifferential)       derived.setExample(null);
 else       derived.getExample().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMaxLengthElement()) {
      if (!Base.compareDeep(derived.getMaxLengthElement(),base.getMaxLengthElement(),false))       base.setMaxLengthElement(derived.getMaxLengthElement().copy());
 else       if (trimDifferential)       derived.setMaxLengthElement(null);
 else       derived.getMaxLengthElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMustSupportElement()) {
      if (!Base.compareDeep(derived.getMustSupportElement(),base.getMustSupportElement(),false))       base.setMustSupportElement(derived.getMustSupportElement().copy());
 else       if (trimDifferential)       derived.setMustSupportElement(null);
 else       derived.getMustSupportElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (isExtension) {
      if (!Base.compareDeep(derived.getIsModifierElement(),base.getIsModifierElement(),false))       base.setIsModifierElement(derived.getIsModifierElement().copy());
 else       if (trimDifferential)       derived.setIsModifierElement(null);
 else       derived.getIsModifierElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasBinding()) {
      if (!Base.compareDeep(derived.getBinding(),base.getBinding(),false)) {
        if (base.hasBinding() && base.getBinding().getStrength() == BindingStrength.REQUIRED && base.getBinding().getStrength() != BindingStrength.REQUIRED)         throw new Exception(""String_Node_Str"" + pn + ""String_Node_Str""+ derived.getPath()+ ""String_Node_Str""+ base.getBinding().getStrength().toCode()+ ""String_Node_Str""+ base.getBinding().getStrength().toCode());
        base.setBinding(derived.getBinding().copy());
      }
 else       if (trimDifferential)       derived.setBinding(null);
 else       derived.getBinding().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasIsSummaryElement()) {
      if (!Base.compareDeep(derived.getIsSummaryElement(),base.getIsSummaryElement(),false))       base.setIsSummaryElement(derived.getIsSummaryElement().copy());
 else       if (trimDifferential)       derived.setIsSummaryElement(null);
 else       derived.getIsSummaryElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasType()) {
      if (!Base.compareDeep(derived.getType(),base.getType(),false)) {
        if (base.hasType()) {
          for (          TypeRefComponent ts : derived.getType()) {
            boolean ok=false;
            CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
            for (            TypeRefComponent td : base.getType()) {
              b.append(td.getCode());
              if (td.getCode().equals(ts.getCode()) || td.getCode().equals(""String_Node_Str"") || td.getCode().equals(""String_Node_Str"")|| td.getCode().equals(""String_Node_Str"")|| ((td.getCode().equals(""String_Node_Str"") || (td.getCode().equals(""String_Node_Str"")) && pkp.isResource(ts.getCode()))))               ok=true;
            }
            if (!ok)             throw new Exception(""String_Node_Str"" + pn + ""String_Node_Str""+ derived.getPath()+ ""String_Node_Str""+ ts.getCode()+ ""String_Node_Str""+ b.toString());
          }
        }
        base.getType().clear();
        for (        TypeRefComponent t : derived.getType())         base.getType().add(t.copy());
      }
 else       if (trimDifferential)       derived.getType().clear();
 else       for (      TypeRefComponent t : derived.getType())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMapping()) {
      if (!Base.compareDeep(derived.getMapping(),base.getMapping(),false)) {
        for (        ElementDefinitionMappingComponent s : derived.getMapping()) {
          boolean found=false;
          for (          ElementDefinitionMappingComponent d : base.getMapping()) {
            found=found || (d.getIdentity().equals(s.getIdentity()) && d.getMap().equals(s.getMap()));
          }
          if (!found)           base.getMapping().add(s);
        }
      }
 else       if (trimDifferential)       derived.getMapping().clear();
 else       for (      ElementDefinitionMappingComponent t : derived.getMapping())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasConstraint()) {
      for (      ElementDefinitionConstraintComponent s : derived.getConstraint()) {
        base.getConstraint().add(s);
      }
    }
  }
}",0.9944066681289756
24087,"/** 
 * note: snapshot implies that we are generating a resource or a data type; for other profiles, the snapshot is generated elsewhere
 */
private ElementDefinition defineElement(Profile ap,StructureDefinition p,List<ElementDefinition> elements,ElementDefn e,String path,Set<String> slices,List<SliceHandle> parentSlices,SnapShotMode snapshot,boolean root) throws Exception {
  ElementDefinition ce=new ElementDefinition();
  elements.add(ce);
  ce.setPath(path);
  if (e.isXmlAttribute())   ce.addRepresentation(PropertyRepresentation.XMLATTR);
  List<SliceHandle> myParents=new ArrayList<ProfileGenerator.SliceHandle>();
  myParents.addAll(parentSlices);
  if (!Utilities.noString(e.getProfileName())) {
    if (e.getDiscriminator().size() > 0 && !slices.contains(path)) {
      ce.setSlicing(new ElementDefinitionSlicingComponent());
      ce.getSlicing().setDescription(e.getSliceDescription());
      String[] d=e.getDiscriminator().get(0).split(""String_Node_Str"");
      if (d.length >= 1)       ce.getSlicing().addDiscriminator(d[0].trim());
      if (d.length >= 2)       ce.getSlicing().setOrdered(Boolean.parseBoolean(d[1].trim()));
 else       ce.getSlicing().setOrdered(false);
      if (d.length >= 3)       ce.getSlicing().setRules(SlicingRules.fromCode(d[2].trim()));
 else       ce.getSlicing().setRules(SlicingRules.OPEN);
      for (int i=1; i < e.getDiscriminator().size(); i++) {
        ce.getSlicing().addDiscriminator(e.getDiscriminator().get(i).trim());
      }
      ce=new ElementDefinition();
      elements.add(ce);
      ce.setPath(path);
      slices.add(path);
    }
    SliceHandle hnd=new SliceHandle();
    hnd.name=path;
    myParents.add(hnd);
    ce.setName(e.getProfileName());
  }
  addToPaths(myParents,path,ce,p.getName());
  if (!""String_Node_Str"".equals(e.getComments()))   ce.setComments(e.getComments());
  if (!""String_Node_Str"".equals(e.getShortDefn()))   ce.setShort(e.getShortDefn());
  if (!""String_Node_Str"".equals(e.getDefinition())) {
    ce.setDefinition(e.getDefinition());
    if (""String_Node_Str"".equals(e.getShortDefn()))     ce.setShort(e.getDefinition());
  }
  if (!Utilities.noString(e.getRequirements()))   ce.setRequirements(e.getRequirements());
  if (e.hasMustSupport())   ce.setMustSupport(e.isMustSupport());
  if (e.getMaxLength() != null)   ce.setMax(e.getMaxLength());
  if (e.getMinCardinality() != null)   ce.setMin(e.getMinCardinality());
  if (e.getMaxCardinality() != null)   ce.setMax(e.getMaxCardinality() == Integer.MAX_VALUE ? ""String_Node_Str"" : e.getMaxCardinality().toString());
  if (!root) {
    if (e.typeCode().startsWith(""String_Node_Str"")) {
      ce.setNameReference(getNameForPath(myParents,e.typeCode().substring(1)));
    }
 else {
      List<TypeRef> expandedTypes=new ArrayList<TypeRef>();
      for (      TypeRef t : e.getTypes()) {
        if (t.hasParams() && !""String_Node_Str"".equals(t.getName())) {
          throw new Exception(""String_Node_Str"" + path + ""String_Node_Str""+ p.getName());
        }
        if (t.getParams().size() > 1) {
          if (t.getProfile() != null && t.getParams().size() != 1) {
            throw new Exception(""String_Node_Str"" + path + ""String_Node_Str""+ p.getName());
          }
          for (          String param : t.getParams()) {
            TypeRef childType=new TypeRef(t.getName());
            childType.getParams().add(param);
            childType.getAggregations().addAll(t.getAggregations());
            expandedTypes.add(childType);
          }
        }
 else         if (!t.getName().startsWith(""String_Node_Str"")) {
          expandedTypes.add(t);
        }
      }
      if (expandedTypes.isEmpty()) {
        if (snapshot != SnapShotMode.None)         ce.addType().setCode(snapshot == SnapShotMode.DataType ? ""String_Node_Str"" : ""String_Node_Str"");
      }
 else       for (      TypeRef t : expandedTypes) {
        TypeRefComponent type=new TypeRefComponent();
        type.setCode(t.getName());
        String profile=t.getProfile();
        if (profile == null && t.hasParams()) {
          profile=t.getParams().get(0);
        }
        if (profile != null) {
          if (profile.startsWith(""String_Node_Str"") || profile.startsWith(""String_Node_Str"")) {
            type.addProfile(profile);
          }
 else {
            type.addProfile(""String_Node_Str"" + (profile.equals(""String_Node_Str"") ? ""String_Node_Str"" : profile));
          }
        }
        for (        String aggregation : t.getAggregations()) {
          type.addAggregation(AggregationMode.fromCode(aggregation));
        }
        ce.getType().add(type);
      }
    }
  }
  for (  Invariant id : e.getStatedInvariants())   ce.addCondition(id.getId());
  ce.setFixed(e.getFixed());
  ce.setPattern(e.getPattern());
  ce.setDefaultValue(e.getDefaultValue());
  ce.setMeaningWhenMissing(e.getMeaningWhenMissing());
  ce.setExample(e.getExample());
  ce.setRequirements(e.getRequirements());
  for (  String s : e.getAliases())   ce.addAlias(s);
  if (e.hasModifier())   ce.setIsModifier(e.isModifier());
  if (e.hasSummaryItem())   ce.setIsSummaryElement(Factory.newBoolean(e.isSummary()));
  for (  String n : definitions.getMapTypes().keySet()) {
    addMapping(p,ce,n,e.getMapping(n),null);
  }
  if (ap != null) {
    for (    String n : ap.getMappingSpaces().keySet()) {
      addMapping(p,ce,n,e.getMapping(n),ap);
    }
  }
  ToolingExtensions.addDisplayHint(ce,e.getDisplayHint());
  for (  String in : e.getInvariants().keySet()) {
    ElementDefinitionConstraintComponent con=new ElementDefinitionConstraintComponent();
    Invariant inv=e.getInvariants().get(in);
    con.setKey(inv.getId());
    con.setRequirements(inv.getRequirements());
    if (Utilities.noString(inv.getSeverity()))     con.setSeverity(ConstraintSeverity.ERROR);
 else     con.setSeverity(ConstraintSeverity.fromCode(inv.getSeverity()));
    con.setHuman(inv.getEnglish());
    con.setXpath(inv.getXpath());
    ce.getConstraint().add(con);
  }
  if (e.hasBinding()) {
    ce.setBinding(generateBinding(e.getBinding()));
  }
  if (snapshot != SnapShotMode.None && !e.getElements().isEmpty()) {
  }
  Set<String> containedSlices=new HashSet<String>();
  if (snapshot != SnapShotMode.None) {
    if (!root && Utilities.noString(e.typeCode())) {
      if (snapshot == SnapShotMode.Resource)       defineAncestorElements(""String_Node_Str"",path,snapshot,containedSlices,p,elements);
 else       defineAncestorElements(""String_Node_Str"",path,snapshot,containedSlices,p,elements);
    }
 else     if (root && !Utilities.noString(e.typeCode()))     defineAncestorElements(e.typeCode(),path,snapshot,containedSlices,p,elements);
  }
  for (  ElementDefn child : e.getElements())   defineElement(ap,p,elements,child,path + ""String_Node_Str"" + child.getName(),containedSlices,myParents,snapshot,false);
  return ce;
}","/** 
 * note: snapshot implies that we are generating a resource or a data type; for other profiles, the snapshot is generated elsewhere
 */
private ElementDefinition defineElement(Profile ap,StructureDefinition p,List<ElementDefinition> elements,ElementDefn e,String path,Set<String> slices,List<SliceHandle> parentSlices,SnapShotMode snapshot,boolean root) throws Exception {
  ElementDefinition ce=new ElementDefinition();
  elements.add(ce);
  ce.setPath(path);
  if (e.isXmlAttribute())   ce.addRepresentation(PropertyRepresentation.XMLATTR);
  List<SliceHandle> myParents=new ArrayList<ProfileGenerator.SliceHandle>();
  myParents.addAll(parentSlices);
  if (!Utilities.noString(e.getProfileName())) {
    if (e.getDiscriminator().size() > 0 && !slices.contains(path)) {
      ce.setSlicing(new ElementDefinitionSlicingComponent());
      ce.getSlicing().setDescription(e.getSliceDescription());
      String[] d=e.getDiscriminator().get(0).split(""String_Node_Str"");
      if (d.length >= 1)       ce.getSlicing().addDiscriminator(d[0].trim());
      if (d.length >= 2)       ce.getSlicing().setOrdered(Boolean.parseBoolean(d[1].trim()));
 else       ce.getSlicing().setOrdered(false);
      if (d.length >= 3)       ce.getSlicing().setRules(SlicingRules.fromCode(d[2].trim()));
 else       ce.getSlicing().setRules(SlicingRules.OPEN);
      for (int i=1; i < e.getDiscriminator().size(); i++) {
        ce.getSlicing().addDiscriminator(e.getDiscriminator().get(i).trim());
      }
      ce=new ElementDefinition();
      elements.add(ce);
      ce.setPath(path);
      slices.add(path);
    }
    SliceHandle hnd=new SliceHandle();
    hnd.name=path;
    myParents.add(hnd);
    ce.setName(e.getProfileName());
  }
  addToPaths(myParents,path,ce,p.getName());
  if (!!Utilities.noString(e.getComments()))   ce.setComments(e.getComments());
  if (!Utilities.noString(e.getShortDefn()))   ce.setShort(e.getShortDefn());
  if (!Utilities.noString(e.getDefinition())) {
    ce.setDefinition(e.getDefinition());
    if (!Utilities.noString(e.getShortDefn()))     ce.setShort(e.getDefinition());
  }
  if (!Utilities.noString(e.getRequirements()))   ce.setRequirements(e.getRequirements());
  if (e.hasMustSupport())   ce.setMustSupport(e.isMustSupport());
  if (e.getMaxLength() != null)   ce.setMax(e.getMaxLength());
  if (e.getMinCardinality() != null)   ce.setMin(e.getMinCardinality());
  if (e.getMaxCardinality() != null)   ce.setMax(e.getMaxCardinality() == Integer.MAX_VALUE ? ""String_Node_Str"" : e.getMaxCardinality().toString());
  if (!root) {
    if (e.typeCode().startsWith(""String_Node_Str"")) {
      ce.setNameReference(getNameForPath(myParents,e.typeCode().substring(1)));
    }
 else {
      List<TypeRef> expandedTypes=new ArrayList<TypeRef>();
      for (      TypeRef t : e.getTypes()) {
        if (t.hasParams() && !""String_Node_Str"".equals(t.getName())) {
          throw new Exception(""String_Node_Str"" + path + ""String_Node_Str""+ p.getName());
        }
        if (t.getParams().size() > 1) {
          if (t.getProfile() != null && t.getParams().size() != 1) {
            throw new Exception(""String_Node_Str"" + path + ""String_Node_Str""+ p.getName());
          }
          for (          String param : t.getParams()) {
            TypeRef childType=new TypeRef(t.getName());
            childType.getParams().add(param);
            childType.getAggregations().addAll(t.getAggregations());
            expandedTypes.add(childType);
          }
        }
 else         if (!t.getName().startsWith(""String_Node_Str"")) {
          expandedTypes.add(t);
        }
      }
      if (expandedTypes.isEmpty()) {
        if (snapshot != SnapShotMode.None)         ce.addType().setCode(snapshot == SnapShotMode.DataType ? ""String_Node_Str"" : ""String_Node_Str"");
      }
 else       for (      TypeRef t : expandedTypes) {
        TypeRefComponent type=new TypeRefComponent();
        type.setCode(t.getName());
        String profile=t.getProfile();
        if (profile == null && t.hasParams()) {
          profile=t.getParams().get(0);
        }
        if (profile != null) {
          if (profile.startsWith(""String_Node_Str"") || profile.startsWith(""String_Node_Str"")) {
            type.addProfile(profile);
          }
 else {
            type.addProfile(""String_Node_Str"" + (profile.equals(""String_Node_Str"") ? ""String_Node_Str"" : profile));
          }
        }
        for (        String aggregation : t.getAggregations()) {
          type.addAggregation(AggregationMode.fromCode(aggregation));
        }
        ce.getType().add(type);
      }
    }
  }
  for (  Invariant id : e.getStatedInvariants())   ce.addCondition(id.getId());
  ce.setFixed(e.getFixed());
  ce.setPattern(e.getPattern());
  ce.setDefaultValue(e.getDefaultValue());
  ce.setMeaningWhenMissing(e.getMeaningWhenMissing());
  ce.setExample(e.getExample());
  ce.setRequirements(e.getRequirements());
  for (  String s : e.getAliases())   ce.addAlias(s);
  if (e.hasModifier())   ce.setIsModifier(e.isModifier());
  if (e.hasSummaryItem())   ce.setIsSummaryElement(Factory.newBoolean(e.isSummary()));
  for (  String n : definitions.getMapTypes().keySet()) {
    addMapping(p,ce,n,e.getMapping(n),null);
  }
  if (ap != null) {
    for (    String n : ap.getMappingSpaces().keySet()) {
      addMapping(p,ce,n,e.getMapping(n),ap);
    }
  }
  ToolingExtensions.addDisplayHint(ce,e.getDisplayHint());
  for (  String in : e.getInvariants().keySet()) {
    ElementDefinitionConstraintComponent con=new ElementDefinitionConstraintComponent();
    Invariant inv=e.getInvariants().get(in);
    con.setKey(inv.getId());
    con.setRequirements(inv.getRequirements());
    if (Utilities.noString(inv.getSeverity()))     con.setSeverity(ConstraintSeverity.ERROR);
 else     con.setSeverity(ConstraintSeverity.fromCode(inv.getSeverity()));
    con.setHuman(inv.getEnglish());
    con.setXpath(inv.getXpath());
    ce.getConstraint().add(con);
  }
  if (e.hasBinding()) {
    ce.setBinding(generateBinding(e.getBinding()));
  }
  if (snapshot != SnapShotMode.None && !e.getElements().isEmpty()) {
  }
  Set<String> containedSlices=new HashSet<String>();
  if (snapshot != SnapShotMode.None) {
    if (!root && Utilities.noString(e.typeCode())) {
      if (snapshot == SnapShotMode.Resource)       defineAncestorElements(""String_Node_Str"",path,snapshot,containedSlices,p,elements);
 else       defineAncestorElements(""String_Node_Str"",path,snapshot,containedSlices,p,elements);
    }
 else     if (root && !Utilities.noString(e.typeCode()))     defineAncestorElements(e.typeCode(),path,snapshot,containedSlices,p,elements);
  }
  for (  ElementDefn child : e.getElements())   defineElement(ap,p,elements,child,path + ""String_Node_Str"" + child.getName(),containedSlices,myParents,snapshot,false);
  return ce;
}",0.987527512839325
24088,"private void roundTrip() throws Exception {
  page.log(""String_Node_Str"",LogMessageType.Process);
  page.log(""String_Node_Str"",LogMessageType.Process);
  List<String> list=new ArrayList<String>();
  listExamples(list);
  Collections.sort(list);
  for (  PlatformGenerator gen : page.getReferenceImplementations()) {
    if (gen.doesTest()) {
      page.log(""String_Node_Str"" + gen.getTitle(),LogMessageType.Process);
      gen.test(page.getFolders(),list);
    }
  }
  page.log(""String_Node_Str"",LogMessageType.Process);
  if (buildFlags.get(""String_Node_Str"")) {
    list=new ArrayList<String>();
    listCollections1(list);
  }
  for (  PlatformGenerator gen : page.getReferenceImplementations()) {
    if (gen.doesTest()) {
      page.log(""String_Node_Str"" + gen.getTitle(),LogMessageType.Process);
      gen.test(page.getFolders(),list);
    }
  }
  page.log(""String_Node_Str"",LogMessageType.Process);
  if (buildFlags.get(""String_Node_Str"")) {
    list=new ArrayList<String>();
    listCollections2(list);
  }
  for (  PlatformGenerator gen : page.getReferenceImplementations()) {
    if (gen.doesTest()) {
      page.log(""String_Node_Str"" + gen.getTitle(),LogMessageType.Process);
      gen.test(page.getFolders(),list);
    }
  }
  list=new ArrayList<String>();
  listExamples(list);
  listCollections1(list);
  listCollections2(list);
  Collections.sort(list);
  for (  String n : list) {
    page.log(""String_Node_Str"" + n,LogMessageType.Process);
    validateRoundTrip(n);
  }
  for (  String rn : page.getDefinitions().sortedResourceNames()) {
    ResourceDefn r=page.getDefinitions().getResourceByName(rn);
    for (    SearchParameterDefn sp : r.getSearchParams().values()) {
      if (!sp.isWorks() && !sp.getCode().equals(""String_Node_Str"")) {
        page.getValidationErrors().add(new ValidationMessage(Source.Publisher,IssueType.INFORMATIONAL,-1,-1,rn + ""String_Node_Str"" + sp.getCode(),""String_Node_Str"" + rn + ""String_Node_Str""+ sp.getCode()+ ""String_Node_Str""+ sp.getXPath()+ ""String_Node_Str"",IssueSeverity.WARNING));
      }
    }
  }
}","private void roundTrip() throws Exception {
  page.log(""String_Node_Str"",LogMessageType.Process);
  page.log(""String_Node_Str"",LogMessageType.Process);
  List<String> list=new ArrayList<String>();
  listExamples(list);
  Collections.sort(list);
  for (  PlatformGenerator gen : page.getReferenceImplementations()) {
    if (gen.doesTest()) {
      page.log(""String_Node_Str"" + gen.getTitle(),LogMessageType.Process);
      gen.test(page.getFolders(),list);
    }
  }
  page.log(""String_Node_Str"",LogMessageType.Process);
  if (buildFlags.get(""String_Node_Str"")) {
    list=new ArrayList<String>();
    listCollections1(list);
  }
  for (  PlatformGenerator gen : page.getReferenceImplementations()) {
    if (gen.doesTest()) {
      page.log(""String_Node_Str"" + gen.getTitle(),LogMessageType.Process);
      gen.test(page.getFolders(),list);
    }
  }
  page.log(""String_Node_Str"",LogMessageType.Process);
  if (buildFlags.get(""String_Node_Str"")) {
    list=new ArrayList<String>();
    listCollections2(list);
  }
  for (  PlatformGenerator gen : page.getReferenceImplementations()) {
    if (gen.doesTest()) {
      page.log(""String_Node_Str"" + gen.getTitle(),LogMessageType.Process);
      gen.test(page.getFolders(),list);
    }
  }
  list=new ArrayList<String>();
  listExamples(list);
  listCollections1(list);
  listCollections2(list);
  Collections.sort(list);
  for (  String n : list) {
    page.log(""String_Node_Str"" + n,LogMessageType.Process);
    validateRoundTrip(n);
  }
  for (  String rn : page.getDefinitions().sortedResourceNames()) {
    ResourceDefn r=page.getDefinitions().getResourceByName(rn);
    for (    SearchParameterDefn sp : r.getSearchParams().values()) {
      if (!sp.isWorks() && !sp.getCode().equals(""String_Node_Str"") && !Utilities.noString(sp.getXPath())) {
        page.getValidationErrors().add(new ValidationMessage(Source.Publisher,IssueType.INFORMATIONAL,-1,-1,rn + ""String_Node_Str"" + sp.getCode(),""String_Node_Str"" + rn + ""String_Node_Str""+ sp.getCode()+ ""String_Node_Str""+ sp.getXPath()+ ""String_Node_Str"",IssueSeverity.WARNING));
      }
    }
  }
}",0.9908565928777672
24089,"public static boolean isWhitespace(String s){
  boolean ok=true;
  for (int i=0; i < s.length(); i++)   ok=ok && Character.isWhitespace(s.charAt(i));
  return ok;
}","private static boolean isWhitespace(int b){
  return b == 9 || b == 10 || b == 13 || b == 32;
}",0.3783783783783784
24090,"private void compareXml(String t,String n,String fn1,String fn2) throws Exception {
  char sc=File.separatorChar;
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setNamespaceAware(true);
  dbf.setCoalescing(true);
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setIgnoringComments(true);
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document doc1=db.parse(new CSFile(fn1));
  doc1.normalizeDocument();
  stripWhitespaceAndComments(doc1);
  Document doc2=db.parse(new CSFile(fn2));
  doc2.normalizeDocument();
  stripWhitespaceAndComments(doc2);
  XmlGenerator xmlgen=new XmlGenerator();
  File tmp1=Utilities.createTempFile(""String_Node_Str"",""String_Node_Str"");
  xmlgen.generate(doc1.getDocumentElement(),tmp1,doc1.getDocumentElement().getNamespaceURI(),doc1.getDocumentElement().getLocalName());
  File tmp2=Utilities.createTempFile(""String_Node_Str"",""String_Node_Str"");
  xmlgen.generate(doc2.getDocumentElement(),tmp2,doc2.getDocumentElement().getNamespaceURI(),doc2.getDocumentElement().getLocalName());
  boolean ok=!TextFile.fileToString(tmp1.getAbsolutePath()).equals(TextFile.fileToString(tmp2.getAbsolutePath()));
  if (ok) {
    page.getValidationErrors().add(new ValidationMessage(Source.Publisher,IssueType.BUSINESSRULE,-1,-1,""String_Node_Str"",""String_Node_Str"" + t + ""String_Node_Str""+ n,IssueSeverity.WARNING));
    String diff=diffProgram != null ? diffProgram : System.getenv(""String_Node_Str"") + sc + ""String_Node_Str""+ sc+ ""String_Node_Str"";
    if (new CSFile(diff).exists()) {
      List<String> command=new ArrayList<String>();
      command.add(""String_Node_Str"" + diff + ""String_Node_Str""+ tmp1.getAbsolutePath()+ ""String_Node_Str""+ tmp2.getAbsolutePath()+ ""String_Node_Str"");
      ProcessBuilder builder=new ProcessBuilder(command);
      builder.directory(new CSFile(page.getFolders().rootDir));
      builder.start();
    }
 else {
      page.log(""String_Node_Str"" + fn1 + ""String_Node_Str""+ fn2+ ""String_Node_Str"",LogMessageType.Warning);
    }
  }
}","private void compareXml(String t,String n,String fn1,String fn2) throws Exception {
  char sc=File.separatorChar;
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setNamespaceAware(true);
  dbf.setCoalescing(true);
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setIgnoringComments(true);
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document doc1=db.parse(new CSFile(fn1));
  doc1.normalizeDocument();
  stripWhitespaceAndComments(doc1);
  Document doc2=db.parse(new CSFile(fn2));
  doc2.normalizeDocument();
  stripWhitespaceAndComments(doc2);
  XmlGenerator xmlgen=new XmlGenerator();
  File tmp1=Utilities.createTempFile(""String_Node_Str"",""String_Node_Str"");
  xmlgen.generate(doc1.getDocumentElement(),tmp1,doc1.getDocumentElement().getNamespaceURI(),doc1.getDocumentElement().getLocalName());
  File tmp2=Utilities.createTempFile(""String_Node_Str"",""String_Node_Str"");
  xmlgen.generate(doc2.getDocumentElement(),tmp2,doc2.getDocumentElement().getNamespaceURI(),doc2.getDocumentElement().getLocalName());
  boolean ok=Utilities.compareIgnoreWhitespace(tmp1,tmp2);
  if (!ok) {
    page.getValidationErrors().add(new ValidationMessage(Source.Publisher,IssueType.BUSINESSRULE,-1,-1,""String_Node_Str"",""String_Node_Str"" + t + ""String_Node_Str""+ n,IssueSeverity.WARNING));
    String diff=diffProgram != null ? diffProgram : System.getenv(""String_Node_Str"") + sc + ""String_Node_Str""+ sc+ ""String_Node_Str"";
    if (new CSFile(diff).exists()) {
      List<String> command=new ArrayList<String>();
      command.add(""String_Node_Str"" + diff + ""String_Node_Str""+ tmp1.getAbsolutePath()+ ""String_Node_Str""+ tmp2.getAbsolutePath()+ ""String_Node_Str"");
      ProcessBuilder builder=new ProcessBuilder(command);
      builder.directory(new CSFile(page.getFolders().rootDir));
      builder.start();
    }
 else {
      page.log(""String_Node_Str"" + fn1 + ""String_Node_Str""+ fn2+ ""String_Node_Str"",LogMessageType.Warning);
    }
  }
}",0.9600201156650742
24091,"private void updateFromDefinition(ElementDefinition dest,ElementDefinition source,String pn,ProfileKnowledgeProvider pkp,boolean trimDifferential) throws Exception {
  ElementDefinition base=dest;
  ElementDefinition derived=source;
  if (derived != null) {
    boolean isExtension=base.getPath().equals(""String_Node_Str"") || base.getPath().endsWith(""String_Node_Str"") || base.getPath().endsWith(""String_Node_Str"");
    if (isExtension) {
      base.setDefinition(""String_Node_Str"");
      base.setShort(""String_Node_Str"");
      base.setCommentsElement(null);
      base.setRequirementsElement(null);
      base.getAlias().clear();
      base.getMapping().clear();
    }
    if (derived.hasShortElement()) {
      if (!Base.compareDeep(derived.getShortElement(),base.getShortElement(),false))       base.setShortElement(derived.getShortElement().copy());
 else       if (trimDifferential)       derived.setShortElement(null);
 else       if (derived.hasShortElement())       derived.getShortElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasDefinitionElement()) {
      if (derived.getDefinition().startsWith(""String_Node_Str""))       base.setDefinition(base.getDefinition() + ""String_Node_Str"" + derived.getDefinition().substring(3));
 else       if (!Base.compareDeep(derived.getDefinitionElement(),base.getDefinitionElement(),false))       base.setDefinitionElement(derived.getDefinitionElement().copy());
 else       if (trimDifferential)       derived.setDefinitionElement(null);
 else       if (derived.hasDefinitionElement())       derived.getDefinitionElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasCommentsElement()) {
      if (derived.getComments().startsWith(""String_Node_Str""))       base.setComments(base.getComments() + ""String_Node_Str"" + derived.getComments().substring(3));
 else       if (!Base.compareDeep(derived.getCommentsElement(),base.getCommentsElement(),false))       derived.setCommentsElement(null);
 else       if (trimDifferential)       base.setCommentsElement(derived.getCommentsElement().copy());
 else       if (derived.hasCommentsElement())       derived.getCommentsElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasRequirementsElement()) {
      if (derived.getRequirements().startsWith(""String_Node_Str""))       base.setRequirements(base.getRequirements() + ""String_Node_Str"" + derived.getRequirements().substring(3));
 else       if (!Base.compareDeep(derived.getRequirementsElement(),base.getRequirementsElement(),false))       derived.setRequirementsElement(null);
 else       if (trimDifferential)       base.setRequirementsElement(derived.getRequirementsElement().copy());
 else       if (derived.hasRequirementsElement())       derived.getRequirementsElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasAlias()) {
      if (!Base.compareDeep(derived.getAlias(),base.getAlias(),false))       for (      StringType s : derived.getAlias()) {
        if (!base.hasAlias(s.getValue()))         base.getAlias().add(s.copy());
      }
 else       if (trimDifferential)       derived.getAlias().clear();
 else       for (      StringType t : derived.getAlias())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMinElement()) {
      if (!Base.compareDeep(derived.getMinElement(),base.getMinElement(),false))       base.setMinElement(derived.getMinElement().copy());
 else       if (trimDifferential)       derived.setMinElement(null);
 else       derived.getMinElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMaxElement()) {
      if (!Base.compareDeep(derived.getMaxElement(),base.getMaxElement(),false))       base.setMaxElement(derived.getMaxElement().copy());
 else       if (trimDifferential)       derived.setMaxElement(null);
 else       derived.getMaxElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasFixed()) {
      if (!Base.compareDeep(derived.getFixed(),base.getFixed(),true)) {
        base.setFixed(derived.getFixed().copy());
      }
 else       if (trimDifferential)       derived.setFixed(null);
 else       derived.getFixed().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasPattern()) {
      if (!Base.compareDeep(derived.getPattern(),base.getPattern(),false)) {
        base.setPattern(derived.getPattern().copy());
      }
 else       if (trimDifferential)       derived.setPattern(null);
 else       derived.getPattern().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasExample()) {
      if (!Base.compareDeep(derived.getExample(),base.getExample(),false))       base.setExample(derived.getExample().copy());
 else       if (trimDifferential)       derived.setExample(null);
 else       derived.getExample().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMaxLengthElement()) {
      if (!Base.compareDeep(derived.getMaxLengthElement(),base.getMaxLengthElement(),false))       base.setMaxLengthElement(derived.getMaxLengthElement().copy());
 else       if (trimDifferential)       derived.setMaxLengthElement(null);
 else       derived.getMaxLengthElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMustSupportElement()) {
      if (!Base.compareDeep(derived.getMustSupportElement(),base.getMustSupportElement(),false))       base.setMustSupportElement(derived.getMustSupportElement().copy());
 else       if (trimDifferential)       derived.setMustSupportElement(null);
 else       derived.getMustSupportElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (isExtension) {
      if (!Base.compareDeep(derived.getIsModifierElement(),base.getIsModifierElement(),false))       base.setIsModifierElement(derived.getIsModifierElement().copy());
 else       if (trimDifferential)       derived.setIsModifierElement(null);
 else       derived.getIsModifierElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasBinding()) {
      if (!Base.compareDeep(derived.getBinding(),base.getBinding(),false)) {
        if (base.hasBinding() && base.getBinding().getStrength() == BindingStrength.REQUIRED && base.getBinding().getStrength() != BindingStrength.REQUIRED)         throw new Exception(""String_Node_Str"" + pn + ""String_Node_Str""+ derived.getPath()+ ""String_Node_Str""+ base.getBinding().getStrength().toCode()+ ""String_Node_Str""+ base.getBinding().getStrength().toCode());
        base.setBinding(derived.getBinding().copy());
      }
 else       if (trimDifferential)       derived.setBinding(null);
 else       derived.getBinding().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasIsSummaryElement()) {
      if (!Base.compareDeep(derived.getIsSummaryElement(),base.getIsSummaryElement(),false))       base.setIsSummaryElement(derived.getIsSummaryElement().copy());
 else       if (trimDifferential)       derived.setIsSummaryElement(null);
 else       derived.getIsSummaryElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasType()) {
      if (!Base.compareDeep(derived.getType(),base.getType(),false)) {
        if (base.hasType()) {
          for (          TypeRefComponent ts : derived.getType()) {
            boolean ok=false;
            CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
            for (            TypeRefComponent td : base.getType()) {
              b.append(td.getCode());
              if (td.getCode().equals(ts.getCode()) || td.getCode().equals(""String_Node_Str"") || td.getCode().equals(""String_Node_Str"")|| td.getCode().equals(""String_Node_Str"")|| (td.getCode().equals(""String_Node_Str"") && pkp.isResource(ts.getCode())))               ok=true;
            }
            if (!ok)             throw new Exception(""String_Node_Str"" + pn + ""String_Node_Str""+ derived.getPath()+ ""String_Node_Str""+ ts.getCode()+ ""String_Node_Str""+ b.toString());
          }
        }
        base.getType().clear();
        for (        TypeRefComponent t : derived.getType())         base.getType().add(t.copy());
      }
 else       if (trimDifferential)       derived.getType().clear();
 else       for (      TypeRefComponent t : derived.getType())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMapping()) {
      if (!Base.compareDeep(derived.getMapping(),base.getMapping(),false)) {
        for (        ElementDefinitionMappingComponent s : derived.getMapping()) {
          boolean found=false;
          for (          ElementDefinitionMappingComponent d : base.getMapping()) {
            found=found || (d.getIdentity().equals(s.getIdentity()) && d.getMap().equals(s.getMap()));
          }
          if (!found)           base.getMapping().add(s);
        }
      }
 else       if (trimDifferential)       derived.getMapping().clear();
 else       for (      ElementDefinitionMappingComponent t : derived.getMapping())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasConstraint()) {
      for (      ElementDefinitionConstraintComponent s : derived.getConstraint()) {
        base.getConstraint().add(s);
      }
    }
  }
}","private void updateFromDefinition(ElementDefinition dest,ElementDefinition source,String pn,ProfileKnowledgeProvider pkp,boolean trimDifferential) throws Exception {
  ElementDefinition base=dest;
  ElementDefinition derived=source;
  if (derived != null) {
    boolean isExtension=base.getPath().equals(""String_Node_Str"") || base.getPath().endsWith(""String_Node_Str"") || base.getPath().endsWith(""String_Node_Str"");
    if (isExtension) {
      base.setDefinition(""String_Node_Str"");
      base.setShort(""String_Node_Str"");
      base.setCommentsElement(null);
      base.setRequirementsElement(null);
      base.getAlias().clear();
      base.getMapping().clear();
    }
    if (derived.hasShortElement()) {
      if (!Base.compareDeep(derived.getShortElement(),base.getShortElement(),false))       base.setShortElement(derived.getShortElement().copy());
 else       if (trimDifferential)       derived.setShortElement(null);
 else       if (derived.hasShortElement())       derived.getShortElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasDefinitionElement()) {
      if (derived.getDefinition().startsWith(""String_Node_Str""))       base.setDefinition(base.getDefinition() + ""String_Node_Str"" + derived.getDefinition().substring(3));
 else       if (!Base.compareDeep(derived.getDefinitionElement(),base.getDefinitionElement(),false))       base.setDefinitionElement(derived.getDefinitionElement().copy());
 else       if (trimDifferential)       derived.setDefinitionElement(null);
 else       if (derived.hasDefinitionElement())       derived.getDefinitionElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasCommentsElement()) {
      if (derived.getComments().startsWith(""String_Node_Str""))       base.setComments(base.getComments() + ""String_Node_Str"" + derived.getComments().substring(3));
 else       if (!Base.compareDeep(derived.getCommentsElement(),base.getCommentsElement(),false))       derived.setCommentsElement(null);
 else       if (trimDifferential)       base.setCommentsElement(derived.getCommentsElement().copy());
 else       if (derived.hasCommentsElement())       derived.getCommentsElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasRequirementsElement()) {
      if (derived.getRequirements().startsWith(""String_Node_Str""))       base.setRequirements(base.getRequirements() + ""String_Node_Str"" + derived.getRequirements().substring(3));
 else       if (!Base.compareDeep(derived.getRequirementsElement(),base.getRequirementsElement(),false))       derived.setRequirementsElement(null);
 else       if (trimDifferential)       base.setRequirementsElement(derived.getRequirementsElement().copy());
 else       if (derived.hasRequirementsElement())       derived.getRequirementsElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasAlias()) {
      if (!Base.compareDeep(derived.getAlias(),base.getAlias(),false))       for (      StringType s : derived.getAlias()) {
        if (!base.hasAlias(s.getValue()))         base.getAlias().add(s.copy());
      }
 else       if (trimDifferential)       derived.getAlias().clear();
 else       for (      StringType t : derived.getAlias())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMinElement()) {
      if (!Base.compareDeep(derived.getMinElement(),base.getMinElement(),false))       base.setMinElement(derived.getMinElement().copy());
 else       if (trimDifferential)       derived.setMinElement(null);
 else       derived.getMinElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMaxElement()) {
      if (!Base.compareDeep(derived.getMaxElement(),base.getMaxElement(),false))       base.setMaxElement(derived.getMaxElement().copy());
 else       if (trimDifferential)       derived.setMaxElement(null);
 else       derived.getMaxElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasFixed()) {
      if (!Base.compareDeep(derived.getFixed(),base.getFixed(),true)) {
        base.setFixed(derived.getFixed().copy());
      }
 else       if (trimDifferential)       derived.setFixed(null);
 else       derived.getFixed().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasPattern()) {
      if (!Base.compareDeep(derived.getPattern(),base.getPattern(),false)) {
        base.setPattern(derived.getPattern().copy());
      }
 else       if (trimDifferential)       derived.setPattern(null);
 else       derived.getPattern().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasExample()) {
      if (!Base.compareDeep(derived.getExample(),base.getExample(),false))       base.setExample(derived.getExample().copy());
 else       if (trimDifferential)       derived.setExample(null);
 else       derived.getExample().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMaxLengthElement()) {
      if (!Base.compareDeep(derived.getMaxLengthElement(),base.getMaxLengthElement(),false))       base.setMaxLengthElement(derived.getMaxLengthElement().copy());
 else       if (trimDifferential)       derived.setMaxLengthElement(null);
 else       derived.getMaxLengthElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMustSupportElement()) {
      if (!Base.compareDeep(derived.getMustSupportElement(),base.getMustSupportElement(),false))       base.setMustSupportElement(derived.getMustSupportElement().copy());
 else       if (trimDifferential)       derived.setMustSupportElement(null);
 else       derived.getMustSupportElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (isExtension) {
      if (!Base.compareDeep(derived.getIsModifierElement(),base.getIsModifierElement(),false))       base.setIsModifierElement(derived.getIsModifierElement().copy());
 else       if (trimDifferential)       derived.setIsModifierElement(null);
 else       derived.getIsModifierElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasBinding()) {
      if (!Base.compareDeep(derived.getBinding(),base.getBinding(),false)) {
        if (base.hasBinding() && base.getBinding().getStrength() == BindingStrength.REQUIRED && base.getBinding().getStrength() != BindingStrength.REQUIRED)         throw new Exception(""String_Node_Str"" + pn + ""String_Node_Str""+ derived.getPath()+ ""String_Node_Str""+ base.getBinding().getStrength().toCode()+ ""String_Node_Str""+ base.getBinding().getStrength().toCode());
        base.setBinding(derived.getBinding().copy());
      }
 else       if (trimDifferential)       derived.setBinding(null);
 else       derived.getBinding().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasIsSummaryElement()) {
      if (!Base.compareDeep(derived.getIsSummaryElement(),base.getIsSummaryElement(),false))       base.setIsSummaryElement(derived.getIsSummaryElement().copy());
 else       if (trimDifferential)       derived.setIsSummaryElement(null);
 else       derived.getIsSummaryElement().setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasType()) {
      if (!Base.compareDeep(derived.getType(),base.getType(),false)) {
        if (base.hasType()) {
          for (          TypeRefComponent ts : derived.getType()) {
            boolean ok=false;
            CommaSeparatedStringBuilder b=new CommaSeparatedStringBuilder();
            for (            TypeRefComponent td : base.getType()) {
              b.append(td.getCode());
              if (td.getCode().equals(ts.getCode()) || td.getCode().equals(""String_Node_Str"") || td.getCode().equals(""String_Node_Str"")|| td.getCode().equals(""String_Node_Str"")|| ((td.getCode().equals(""String_Node_Str"") || (td.getCode().equals(""String_Node_Str"")) && pkp.isResource(ts.getCode()))))               ok=true;
            }
            if (!ok)             throw new Exception(""String_Node_Str"" + pn + ""String_Node_Str""+ derived.getPath()+ ""String_Node_Str""+ ts.getCode()+ ""String_Node_Str""+ b.toString());
          }
        }
        base.getType().clear();
        for (        TypeRefComponent t : derived.getType())         base.getType().add(t.copy());
      }
 else       if (trimDifferential)       derived.getType().clear();
 else       for (      TypeRefComponent t : derived.getType())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasMapping()) {
      if (!Base.compareDeep(derived.getMapping(),base.getMapping(),false)) {
        for (        ElementDefinitionMappingComponent s : derived.getMapping()) {
          boolean found=false;
          for (          ElementDefinitionMappingComponent d : base.getMapping()) {
            found=found || (d.getIdentity().equals(s.getIdentity()) && d.getMap().equals(s.getMap()));
          }
          if (!found)           base.getMapping().add(s);
        }
      }
 else       if (trimDifferential)       derived.getMapping().clear();
 else       for (      ElementDefinitionMappingComponent t : derived.getMapping())       t.setUserData(DERIVATION_EQUALS,true);
    }
    if (derived.hasConstraint()) {
      for (      ElementDefinitionConstraintComponent s : derived.getConstraint()) {
        base.getConstraint().add(s);
      }
    }
  }
}",0.9974627688913404
24092,"private void writeElement(Writer out,Element node,XhtmlGeneratorAdornerState state,int level) throws Exception {
  out.write(""String_Node_Str"" + node.getNodeName() + ""String_Node_Str"");
  if (node.hasAttributes()) {
    out.write(""String_Node_Str"");
    XhtmlGeneratorAdornerState newstate=adorner == null ? new XhtmlGeneratorAdornerState(""String_Node_Str"",""String_Node_Str"") : adorner.getState(this,state,node);
    for (int i=0; i < node.getAttributes().getLength(); i++) {
      if (adorner != null) {
        XhtmlGeneratorAdornerState attrState=adorner.getAttributeMarkup(this,newstate,node,node.getAttributes().item(i).getNodeName(),node.getAttributes().item(i).getTextContent());
        out.write(""String_Node_Str"" + node.getAttributes().item(i).getNodeName() + ""String_Node_Str""+ attrState.getPrefix()+ escapeHtml(Utilities.escapeXml(node.getAttributes().item(i).getTextContent()),level)+ attrState.getSuffix()+ ""String_Node_Str"");
      }
 else       out.write(""String_Node_Str"" + node.getAttributes().item(i).getNodeName() + ""String_Node_Str""+ escapeHtml(Utilities.escapeXml(node.getAttributes().item(i).getTextContent()),level)+ ""String_Node_Str"");
    }
    out.write(""String_Node_Str"");
  }
  if (node.hasChildNodes()) {
    out.write(""String_Node_Str"");
    XhtmlGeneratorAdornerState newstate=adorner == null ? new XhtmlGeneratorAdornerState(""String_Node_Str"",""String_Node_Str"") : adorner.getState(this,state,node);
    if (newstate.isSuppress())     out.write(""String_Node_Str"" + escapeHtml(newstate.getSupressionMessage(),level) + ""String_Node_Str"");
 else {
      out.write(newstate.getPrefix());
      for (int i=0; i < node.getChildNodes().getLength(); i++)       writeNode(out,node.getChildNodes().item(i),newstate,level + 2);
      out.write(newstate.getSuffix());
    }
    out.write(""String_Node_Str"" + node.getNodeName() + ""String_Node_Str"");
  }
 else   out.write(""String_Node_Str"");
}","private void writeElement(Writer out,Element node,XhtmlGeneratorAdornerState state,int level) throws Exception {
  String link=adorner == null ? null : adorner.getLink(this,state,node);
  if (link != null)   out.write(""String_Node_Str"" + link + ""String_Node_Str""+ node.getNodeName()+ ""String_Node_Str"");
 else   out.write(""String_Node_Str"" + node.getNodeName() + ""String_Node_Str"");
  if (node.hasAttributes()) {
    out.write(""String_Node_Str"");
    XhtmlGeneratorAdornerState newstate=adorner == null ? new XhtmlGeneratorAdornerState(""String_Node_Str"",""String_Node_Str"") : adorner.getState(this,state,node);
    for (int i=0; i < node.getAttributes().getLength(); i++) {
      if (adorner != null) {
        XhtmlGeneratorAdornerState attrState=adorner.getAttributeMarkup(this,newstate,node,node.getAttributes().item(i).getNodeName(),node.getAttributes().item(i).getTextContent());
        out.write(""String_Node_Str"" + node.getAttributes().item(i).getNodeName() + ""String_Node_Str""+ attrState.getPrefix()+ escapeHtml(Utilities.escapeXml(node.getAttributes().item(i).getTextContent()),level)+ attrState.getSuffix()+ ""String_Node_Str"");
      }
 else       out.write(""String_Node_Str"" + node.getAttributes().item(i).getNodeName() + ""String_Node_Str""+ escapeHtml(Utilities.escapeXml(node.getAttributes().item(i).getTextContent()),level)+ ""String_Node_Str"");
    }
    out.write(""String_Node_Str"");
  }
  if (node.hasChildNodes()) {
    out.write(""String_Node_Str"");
    XhtmlGeneratorAdornerState newstate=adorner == null ? new XhtmlGeneratorAdornerState(""String_Node_Str"",""String_Node_Str"") : adorner.getState(this,state,node);
    if (newstate.isSuppress())     out.write(""String_Node_Str"" + escapeHtml(newstate.getSupressionMessage(),level) + ""String_Node_Str"");
 else {
      out.write(newstate.getPrefix());
      for (int i=0; i < node.getChildNodes().getLength(); i++)       writeNode(out,node.getChildNodes().item(i),newstate,level + 2);
      out.write(newstate.getSuffix());
    }
    if (link != null)     out.write(""String_Node_Str"" + link + ""String_Node_Str""+ node.getNodeName()+ ""String_Node_Str"");
 else     out.write(""String_Node_Str"" + node.getNodeName() + ""String_Node_Str"");
  }
 else   out.write(""String_Node_Str"");
}",0.8980477223427332
24093,"private void sortElements(ElementDefinitionHolder edh,ElementDefinitionComparer cmp,List<String> errors){
  Collections.sort(edh.getChildren(),cmp);
  cmp.checkForErrors(errors);
  for (  ElementDefinitionHolder child : edh.getChildren()) {
    if (child.getChildren().size() > 1) {
      ElementDefinition ed=cmp.snapshot.get(child.getBaseIndex());
      ElementDefinitionComparer ccmp;
      if (ed.getType().isEmpty() || isAbstract(ed.getType().get(0).getCode()) || ed.getType().get(0).getCode().equals(ed.getPath())) {
        ccmp=new ElementDefinitionComparer(true,cmp.snapshot,cmp.base,cmp.prefixLength,cmp.name,cmp.pkp);
      }
 else       if (ed.getType().get(0).getCode().equals(""String_Node_Str"") && child.getSelf().getType().size() == 1 && child.getSelf().getType().get(0).hasProfile()) {
        ccmp=new ElementDefinitionComparer(true,context.getExtensionDefinitions().get(child.getSelf().getType().get(0).getProfile().get(0).getValue()).getSnapshot().getElement(),ed.getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name,cmp.pkp);
      }
 else       if (ed.getType().size() == 1 && !ed.getType().get(0).getCode().equals(""String_Node_Str"")) {
        ccmp=new ElementDefinitionComparer(false,context.getProfiles().get(""String_Node_Str"" + ed.getType().get(0).getCode()).getSnapshot().getElement(),ed.getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name,cmp.pkp);
      }
 else       if (child.getSelf().getType().size() == 1) {
        ccmp=new ElementDefinitionComparer(false,context.getProfiles().get(""String_Node_Str"" + child.getSelf().getType().get(0).getCode()).getSnapshot().getElement(),child.getSelf().getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name,cmp.pkp);
      }
 else       if (ed.getPath().endsWith(""String_Node_Str"") && !child.getSelf().getPath().endsWith(""String_Node_Str"")) {
        String p=child.getSelf().getPath().substring(ed.getPath().length() - 3);
        ccmp=new ElementDefinitionComparer(false,context.getProfiles().get(""String_Node_Str"" + p).getSnapshot().getElement(),p,child.getSelf().getPath().length(),cmp.name,cmp.pkp);
      }
 else {
        throw new Error(""String_Node_Str"");
      }
      sortElements(child,ccmp,errors);
    }
  }
}","private void sortElements(ElementDefinitionHolder edh,ElementDefinitionComparer cmp,List<String> errors){
  if (edh.getChildren().size() == 1)   edh.getChildren().get(0).baseIndex=cmp.find(edh.getChildren().get(0).getSelf().getPath());
 else   Collections.sort(edh.getChildren(),cmp);
  cmp.checkForErrors(errors);
  for (  ElementDefinitionHolder child : edh.getChildren()) {
    if (child.getChildren().size() > 0) {
      ElementDefinition ed=cmp.snapshot.get(child.getBaseIndex());
      ElementDefinitionComparer ccmp;
      if (ed.getType().isEmpty() || isAbstract(ed.getType().get(0).getCode()) || ed.getType().get(0).getCode().equals(ed.getPath())) {
        ccmp=new ElementDefinitionComparer(true,cmp.snapshot,cmp.base,cmp.prefixLength,cmp.name,cmp.pkp);
      }
 else       if (ed.getType().get(0).getCode().equals(""String_Node_Str"") && child.getSelf().getType().size() == 1 && child.getSelf().getType().get(0).hasProfile()) {
        ccmp=new ElementDefinitionComparer(true,context.getExtensionDefinitions().get(child.getSelf().getType().get(0).getProfile().get(0).getValue()).getSnapshot().getElement(),ed.getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name,cmp.pkp);
      }
 else       if (ed.getType().size() == 1 && !ed.getType().get(0).getCode().equals(""String_Node_Str"")) {
        ccmp=new ElementDefinitionComparer(false,context.getProfiles().get(""String_Node_Str"" + ed.getType().get(0).getCode()).getSnapshot().getElement(),ed.getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name,cmp.pkp);
      }
 else       if (child.getSelf().getType().size() == 1) {
        ccmp=new ElementDefinitionComparer(false,context.getProfiles().get(""String_Node_Str"" + child.getSelf().getType().get(0).getCode()).getSnapshot().getElement(),child.getSelf().getType().get(0).getCode(),child.getSelf().getPath().length(),cmp.name,cmp.pkp);
      }
 else       if (ed.getPath().endsWith(""String_Node_Str"") && !child.getSelf().getPath().endsWith(""String_Node_Str"")) {
        String p=child.getSelf().getPath().substring(ed.getPath().length() - 3);
        ccmp=new ElementDefinitionComparer(false,context.getProfiles().get(""String_Node_Str"" + p).getSnapshot().getElement(),p,child.getSelf().getPath().length(),cmp.name,cmp.pkp);
      }
 else {
        throw new Error(""String_Node_Str"");
      }
      sortElements(child,ccmp,errors);
    }
  }
}",0.970194384449244
24094,"public ElementDefinitionHolder(ElementDefinition self){
  super();
  this.self=self;
  children=new ArrayList<ElementDefinitionHolder>();
}","public ElementDefinitionHolder(ElementDefinition self){
  super();
  this.self=self;
  this.name=self.getPath();
  children=new ArrayList<ElementDefinitionHolder>();
}",0.9084967320261438
24095,"public static String getDirectoryForFile(String filepath){
  int i=filepath.lastIndexOf(File.separator);
  if (i == -1)   return filepath;
 else   return filepath.substring(0,i);
}","public static String getDirectoryForFile(String filepath){
  File f=new File(filepath);
  return f.getParent();
}",0.6552901023890785
24096,"private void loadIgs() throws Exception {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document xdoc=builder.parse(new CSFileInputStream(srcDir + ""String_Node_Str""));
  Element root=xdoc.getDocumentElement();
  if (root.getNodeName().equals(""String_Node_Str"")) {
    Element ig=XMLUtil.getFirstChild(root);
    while (ig != null) {
      if (ig.getNodeName().equals(""String_Node_Str"")) {
        ImplementationGuide igg=new ImplementationGuide(ig.getAttribute(""String_Node_Str""),ig.getAttribute(""String_Node_Str""),ig.getAttribute(""String_Node_Str""),ig.getAttribute(""String_Node_Str""),""String_Node_Str"".equals(ig.getAttribute(""String_Node_Str"")));
        definitions.getIgs().put(igg.getCode(),igg);
        definitions.getSortedIgs().add(igg);
      }
      ig=XMLUtil.getNextSibling(ig);
    }
  }
}","private void loadIgs() throws Exception {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document xdoc=builder.parse(new CSFileInputStream(srcDir + ""String_Node_Str""));
  Element root=xdoc.getDocumentElement();
  if (root.getNodeName().equals(""String_Node_Str"")) {
    Element ig=XMLUtil.getFirstChild(root);
    while (ig != null) {
      if (ig.getNodeName().equals(""String_Node_Str"")) {
        ImplementationGuide igg=new ImplementationGuide(ig.getAttribute(""String_Node_Str""),ig.getAttribute(""String_Node_Str""),ig.getAttribute(""String_Node_Str""),ig.getAttribute(""String_Node_Str"").replace('\\',File.separatorChar),""String_Node_Str"".equals(ig.getAttribute(""String_Node_Str"")));
        definitions.getIgs().put(igg.getCode(),igg);
        definitions.getSortedIgs().add(igg);
      }
      ig=XMLUtil.getNextSibling(ig);
    }
  }
}",0.9823812066203952
24097,"private void produceIgPage(String file,ImplementationGuide ig) throws Exception {
  String logicalName=Utilities.fileTitle(file);
  String src=TextFile.fileToString(Utilities.path(page.getFolders().rootDir,Utilities.getDirectoryForFile(ig.getSource()),file));
  src=page.processPageIncludes(file,src,""String_Node_Str"",null,null,null,logicalName);
  TextFile.stringToFile(src,page.getFolders().dstDir + file);
  src=addSectionNumbers(file,logicalName,src,null);
  TextFile.stringToFile(src,page.getFolders().dstDir + file);
  src=TextFile.fileToString(Utilities.path(page.getFolders().rootDir,Utilities.getDirectoryForFile(ig.getSource()),file)).replace(""String_Node_Str"",""String_Node_Str"");
  src=page.processPageIncludesForBook(file,src,""String_Node_Str"",null);
  cachePage(file,src,logicalName);
}","private void produceIgPage(String file,ImplementationGuide ig) throws Exception {
  String logicalName=Utilities.fileTitle(file);
  String actualName=Utilities.path(page.getFolders().rootDir,Utilities.getDirectoryForFile(ig.getSource()),file);
  String src=TextFile.fileToString(actualName);
  src=page.processPageIncludes(file,src,""String_Node_Str"",null,null,null,logicalName);
  TextFile.stringToFile(src,page.getFolders().dstDir + file);
  src=addSectionNumbers(file,logicalName,src,null);
  TextFile.stringToFile(src,page.getFolders().dstDir + file);
  src=TextFile.fileToString(actualName).replace(""String_Node_Str"",""String_Node_Str"");
  src=page.processPageIncludesForBook(file,src,""String_Node_Str"",null);
  cachePage(file,src,logicalName);
}",0.2480620155038759
24098,"public static String path(String... args){
  StringBuilder s=new StringBuilder();
  boolean d=false;
  for (  String arg : args) {
    if (!d)     d=!noString(arg);
 else     if (!s.toString().endsWith(File.separator))     s.append(File.separator);
    String a=arg;
    a=a.replace(""String_Node_Str"",File.separator);
    if (a.startsWith(File.separator))     a=a.substring(File.separator.length());
    if (""String_Node_Str"".equals(a)) {
      int i=s.substring(0,s.length() - 1).lastIndexOf(File.separator);
      s=new StringBuilder(s.substring(0,i + 1));
    }
 else     s.append(a);
  }
  return s.toString();
}","public static String path(String... args){
  StringBuilder s=new StringBuilder();
  boolean d=false;
  for (  String arg : args) {
    if (!d)     d=!noString(arg);
 else     if (!s.toString().endsWith(File.separator))     s.append(File.separator);
    String a=arg;
    a=a.replace(""String_Node_Str"",File.separator);
    if (s.length() > 0 && a.startsWith(File.separator))     a=a.substring(File.separator.length());
    if (""String_Node_Str"".equals(a)) {
      int i=s.substring(0,s.length() - 1).lastIndexOf(File.separator);
      s=new StringBuilder(s.substring(0,i + 1));
    }
 else     s.append(a);
  }
  return s.toString();
}",0.9856
24099,"public static String path(String... args){
  StringBuilder s=new StringBuilder();
  boolean d=false;
  for (  String arg : args) {
    if (!d)     d=!noString(arg);
 else     if (!s.toString().endsWith(File.separator))     s.append(File.separator);
    s.append(arg);
  }
  return s.toString();
}","public static String path(String... args){
  StringBuilder s=new StringBuilder();
  boolean d=false;
  for (  String arg : args) {
    if (!d)     d=!noString(arg);
 else     if (!s.toString().endsWith(File.separator))     s.append(File.separator);
    String a=arg;
    a=a.replace(""String_Node_Str"",File.separator);
    if (a.startsWith(File.separator))     a=a.substring(File.separator.length());
    if (""String_Node_Str"".equals(a)) {
      int i=s.substring(0,s.length() - 1).lastIndexOf(File.separator);
      s=new StringBuilder(s.substring(0,i + 1));
    }
 else     s.append(a);
  }
  return s.toString();
}",0.5679824561403509
24100,"@Test public void testTransactionSuccess(){
  try {
    Patient patient=buildPatient();
    OperationOutcome createdPatientEntry=testClient.create(Patient.class,patient);
    patient.setBirthDateElement(new DateType(""String_Node_Str""));
    Reference patientReference=new Reference();
    patient.setId(getEntryPath(createdPatientEntry));
    patientReference.setReference(getEntryPath(createdPatientEntry));
    Observation obs=new Observation();
    obs.setSubject(patientReference);
    obs.setApplies(Factory.newDateTime(""String_Node_Str""));
    OperationOutcome createdObservationEntry=testClient.create(Observation.class,obs);
    obs.setId(getEntryPath(createdObservationEntry));
    Bundle batchFeed=new Bundle();
    batchFeed.getEntry().add(new BundleEntryComponent().setResource(patient));
    batchFeed.getEntry().add(new BundleEntryComponent().setResource(obs));
    System.out.println(new String(ClientUtils.getFeedAsByteArray(batchFeed,false,false)));
    Bundle responseFeed=testClient.transaction(batchFeed);
    assertNotNull(responseFeed);
    assert(responseFeed.getEntry().get(0).getResource() instanceof Patient);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail();
  }
}","@Test public void testTransactionSuccess(){
  try {
    Patient patient=buildPatient();
    OperationOutcome createdPatientEntry=testClient.create(Patient.class,patient);
    patient.setBirthDateElement(new DateType(""String_Node_Str""));
    Reference patientReference=new Reference();
    patient.setId(getEntryPath(createdPatientEntry));
    patientReference.setReference(getEntryPath(createdPatientEntry));
    Observation obs=new Observation();
    obs.setSubject(patientReference);
    obs.setEffective(Factory.newDateTime(""String_Node_Str""));
    OperationOutcome createdObservationEntry=testClient.create(Observation.class,obs);
    obs.setId(getEntryPath(createdObservationEntry));
    Bundle batchFeed=new Bundle();
    batchFeed.getEntry().add(new BundleEntryComponent().setResource(patient));
    batchFeed.getEntry().add(new BundleEntryComponent().setResource(obs));
    System.out.println(new String(ClientUtils.getFeedAsByteArray(batchFeed,false,false)));
    Bundle responseFeed=testClient.transaction(batchFeed);
    assertNotNull(responseFeed);
    assert(responseFeed.getEntry().get(0).getResource() instanceof Patient);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail();
  }
}",0.9933774834437086
24101,"private String getTerminologyNotes(StructureDefinition profile){
  List<String> txlist=new ArrayList<String>();
  Map<String,ElementDefinitionBindingComponent> txmap=new HashMap<String,ElementDefinitionBindingComponent>();
  for (  ElementDefinition ed : profile.getSnapshot().getElement()) {
    if (ed.hasBinding()) {
      txlist.add(ed.getPath());
      txmap.put(ed.getPath(),ed.getBinding());
    }
  }
  if (txlist.isEmpty())   return ""String_Node_Str"";
 else {
    StringBuilder b=new StringBuilder();
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
    for (    String path : txlist) {
      ElementDefinitionBindingComponent tx=txmap.get(path);
      String vss=""String_Node_Str"";
      if (tx.hasReference()) {
        if (tx.getReference() instanceof UriType)         vss=""String_Node_Str"" + ((UriType)tx.getReference()).asStringValue() + ""String_Node_Str""+ Utilities.escapeXml(((UriType)tx.getReference()).asStringValue())+ ""String_Node_Str"";
 else {
          String uri=((Reference)tx.getReference()).getReference();
          ValueSet vs=valueSets.get(uri);
          if (vs == null)           vss=""String_Node_Str"" + uri + ""String_Node_Str""+ Utilities.escapeXml(uri)+ ""String_Node_Str"";
 else           vss=""String_Node_Str"" + vs.getUserData(""String_Node_Str"") + ""String_Node_Str""+ Utilities.escapeXml(vs.getName())+ ""String_Node_Str"";
        }
      }
      b.append(""String_Node_Str"").append(path).append(""String_Node_Str"").append(tx.getName()).append(""String_Node_Str"").append(tx.getStrength().toCode()).append(""String_Node_Str"").append(vss).append(""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
    return b.toString();
  }
}","private String getTerminologyNotes(StructureDefinition profile){
  List<String> txlist=new ArrayList<String>();
  Map<String,ElementDefinitionBindingComponent> txmap=new HashMap<String,ElementDefinitionBindingComponent>();
  for (  ElementDefinition ed : profile.getSnapshot().getElement()) {
    if (ed.hasBinding()) {
      String path=ed.getPath();
      if (ed.getType().size() == 1 && ed.getType().get(0).getCode().equals(""String_Node_Str""))       path=path + ""String_Node_Str"" + ed.getType().get(0).getProfile()+ ""String_Node_Str"";
      txlist.add(path);
      txmap.put(path,ed.getBinding());
    }
  }
  if (txlist.isEmpty())   return ""String_Node_Str"";
 else {
    StringBuilder b=new StringBuilder();
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
    for (    String path : txlist) {
      ElementDefinitionBindingComponent tx=txmap.get(path);
      String vss=""String_Node_Str"";
      if (tx.hasReference()) {
        if (tx.getReference() instanceof UriType)         vss=""String_Node_Str"" + ((UriType)tx.getReference()).asStringValue() + ""String_Node_Str""+ Utilities.escapeXml(((UriType)tx.getReference()).asStringValue())+ ""String_Node_Str"";
 else {
          String uri=((Reference)tx.getReference()).getReference();
          ValueSet vs=valueSets.get(uri);
          if (vs == null)           vss=""String_Node_Str"" + uri + ""String_Node_Str""+ Utilities.escapeXml(uri)+ ""String_Node_Str"";
 else           vss=""String_Node_Str"" + vs.getUserData(""String_Node_Str"") + ""String_Node_Str""+ Utilities.escapeXml(vs.getName())+ ""String_Node_Str"";
        }
      }
      b.append(""String_Node_Str"").append(path).append(""String_Node_Str"").append(tx.getName()).append(""String_Node_Str"").append(tx.getStrength().toCode()).append(""String_Node_Str"").append(vss).append(""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
    return b.toString();
  }
}",0.9342904472667036
24102,"private String getPackageContent(ConformancePackage pack){
  StringBuilder s=new StringBuilder();
  s.append(""String_Node_Str"");
  if (pack.getProfiles().size() > 0) {
    s.append(""String_Node_Str"");
    for (    ProfileDefn p : pack.getProfiles())     s.append(""String_Node_Str"").append(p.getId()).append(""String_Node_Str"").append(Utilities.escapeXml(p.getTitle())).append(""String_Node_Str"").append(Utilities.escapeXml(p.getResource().getDescription())).append(""String_Node_Str"");
  }
  if (pack.getExtensions().size() > 0) {
    s.append(""String_Node_Str"");
    for (    ExtensionDefinition ed : pack.getExtensions())     s.append(""String_Node_Str"").append(ed.getId()).append(""String_Node_Str"").append(Utilities.escapeXml(ed.getId())).append(""String_Node_Str"").append(Utilities.escapeXml(ed.getName())).append(""String_Node_Str"").append(Utilities.escapeXml(ed.getDescription())).append(""String_Node_Str"");
  }
  s.append(""String_Node_Str"");
  if (pack.getSearchParameters().size() > 0) {
    StringBuilder b=new StringBuilder();
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
    List<String> names=new ArrayList<String>();
    for (    SearchParameter sp : pack.getSearchParameters())     names.add(sp.getName());
    Collections.sort(names);
    for (    String name : names) {
      SearchParameter p=null;
      for (      SearchParameter sp : pack.getSearchParameters())       if (name.equals(sp.getName()))       p=sp;
      b.append(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getType().toCode()+ ""String_Node_Str""+ p.getType().toCode()+ ""String_Node_Str""+ ""String_Node_Str""+ Utilities.escapeXml(p.getDescription())+ ""String_Node_Str""+ p.getXpath()+ (p.getType() == SearchParamType.REFERENCE ? asText(p.getTarget()) : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ pack.getId()+ ""String_Node_Str""+ p.getId()+ ""String_Node_Str""+ pack.getId()+ ""String_Node_Str""+ p.getId()+ ""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
    s.append(b.toString());
  }
  return s.toString();
}","private String getPackageContent(ConformancePackage pack) throws Exception {
  StringBuilder s=new StringBuilder();
  s.append(""String_Node_Str"");
  if (pack.getProfiles().size() > 0) {
    s.append(""String_Node_Str"");
    for (    ProfileDefn p : pack.getProfiles())     s.append(""String_Node_Str"").append(p.getId()).append(""String_Node_Str"").append(Utilities.escapeXml(p.getTitle())).append(""String_Node_Str"").append(Utilities.escapeXml(p.getResource().getDescription())).append(""String_Node_Str"");
  }
  if (pack.getExtensions().size() > 0) {
    s.append(""String_Node_Str"");
    for (    ExtensionDefinition ed : pack.getExtensions())     s.append(""String_Node_Str"").append(ed.getId()).append(""String_Node_Str"").append(ed.getId()).append(""String_Node_Str"").append(Utilities.escapeXml(ed.getId())).append(""String_Node_Str"").append(Utilities.escapeXml(ed.getName())).append(""String_Node_Str"").append(processMarkdown(ed.getDescription())).append(""String_Node_Str"");
  }
  s.append(""String_Node_Str"");
  if (pack.getSearchParameters().size() > 0) {
    StringBuilder b=new StringBuilder();
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"");
    List<String> names=new ArrayList<String>();
    for (    SearchParameter sp : pack.getSearchParameters())     names.add(sp.getName());
    Collections.sort(names);
    for (    String name : names) {
      SearchParameter p=null;
      for (      SearchParameter sp : pack.getSearchParameters())       if (name.equals(sp.getName()))       p=sp;
      b.append(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getType().toCode()+ ""String_Node_Str""+ p.getType().toCode()+ ""String_Node_Str""+ ""String_Node_Str""+ Utilities.escapeXml(p.getDescription())+ ""String_Node_Str""+ p.getXpath()+ (p.getType() == SearchParamType.REFERENCE ? asText(p.getTarget()) : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ pack.getId()+ ""String_Node_Str""+ p.getId()+ ""String_Node_Str""+ pack.getId()+ ""String_Node_Str""+ p.getId()+ ""String_Node_Str"");
    }
    b.append(""String_Node_Str"");
    s.append(b.toString());
  }
  return s.toString();
}",0.9772567409144196
24103,"private String orgDT(String name,String xml,String tree,String ref,String ts,String json){
  StringBuilder b=new StringBuilder();
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + tree + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + xml + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + json + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + tree + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + xml + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + json + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  return b.toString();
}","private String orgDT(String name,String xml,String tree,String ref,String ts,String json){
  StringBuilder b=new StringBuilder();
  b.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + tree + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + xml + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + json + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + name + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + tree + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + xml + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"" + json + ""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  return b.toString();
}",0.9960461285008236
24104,"private String genIGProfilelist(){
  StringBuilder b=new StringBuilder();
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  List<String> names=new ArrayList<String>();
  for (  Resource ae : igResources.values()) {
    if (ae instanceof Profile)     names.add(ae.getId());
  }
  Collections.sort(names);
  for (  String s : names) {
    @SuppressWarnings(""String_Node_Str"") Profile ae=(Profile)igResources.get(s);
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"" + ((String)ae.getUserData(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ Utilities.escapeXml(ae.getName())+ ""String_Node_Str"");
    b.append(""String_Node_Str"" + Utilities.escapeXml(ae.getDescription()) + ""String_Node_Str"");
    b.append(""String_Node_Str"");
  }
  b.append(""String_Node_Str"");
  return b.toString();
}","private String genIGProfilelist(){
  StringBuilder b=new StringBuilder();
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"");
  List<String> names=new ArrayList<String>();
  for (  Resource ae : igResources.values()) {
    if (ae instanceof Profile)     names.add(ae.getId());
  }
  Collections.sort(names);
  for (  String s : names) {
    @SuppressWarnings(""String_Node_Str"") Profile ae=(Profile)igResources.get(s);
    b.append(""String_Node_Str"");
    b.append(""String_Node_Str"" + ((String)ae.getUserData(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ Utilities.escapeXml(ae.getName())+ ""String_Node_Str"");
    b.append(""String_Node_Str"").append(Utilities.escapeXml(ae.getDescription())).append(""String_Node_Str"");
    b.append(""String_Node_Str"");
  }
  b.append(""String_Node_Str"");
  return b.toString();
}",0.9873150105708244
24105,"private String asText(List<CodeType> target){
  StringBuilder b=new StringBuilder();
  boolean first=true;
  for (  CodeType rn : target) {
    if (first) {
      first=false;
      b.append(""String_Node_Str"");
    }
 else     b.append(""String_Node_Str"");
    if (rn.equals(""String_Node_Str""))     b.append(""String_Node_Str"");
 else     b.append(""String_Node_Str"").append(rn.getValue().toLowerCase()).append(""String_Node_Str"").append(rn.getValue()).append(""String_Node_Str"");
  }
  if (!first)   b.append(""String_Node_Str"");
  return b.toString();
}","private String asText(List<CodeType> target){
  StringBuilder b=new StringBuilder();
  boolean first=true;
  for (  CodeType rn : target) {
    if (first) {
      first=false;
      b.append(""String_Node_Str"");
    }
 else     b.append(""String_Node_Str"");
    final String value=rn.getValue();
    if (""String_Node_Str"".equals(value))     b.append(""String_Node_Str"");
 else     b.append(""String_Node_Str"").append(value.toLowerCase()).append(""String_Node_Str"").append(value).append(""String_Node_Str"");
  }
  if (!first)   b.append(""String_Node_Str"");
  return b.toString();
}",0.7462154942119323
24106,"private String describeMsg(List<String> resources,List<String> aggregations){
  if (resources.size() == 0 && aggregations.size() == 0)   return ""String_Node_Str"";
 else {
    String s=resources.size() == 0 ? ""String_Node_Str"" : Utilities.asCSV(resources);
    if (aggregations.size() == 0)     return s;
 else     return s + ""String_Node_Str"" + Utilities.asHtmlBr(""String_Node_Str"" + resources.get(0),aggregations)+ ""String_Node_Str"";
  }
}","private String describeMsg(List<String> resources,List<String> aggregations){
  if (resources.isEmpty() && aggregations.isEmpty())   return ""String_Node_Str"";
 else {
    String s=resources.isEmpty() ? ""String_Node_Str"" : Utilities.asCSV(resources);
    if (aggregations.isEmpty())     return s;
 else     return s + ""String_Node_Str"" + Utilities.asHtmlBr(""String_Node_Str"" + resources.get(0),aggregations)+ ""String_Node_Str"";
  }
}",0.6995412844036697
24107,"private String genConceptMapsTable() throws Exception {
  StringBuilder s=new StringBuilder();
  s.append(""String_Node_Str"");
  s.append(""String_Node_Str"");
  List<String> sorts=new ArrayList<String>();
  sorts.addAll(conceptMaps.keySet());
  Collections.sort(sorts);
  for (  String sn : sorts) {
    ConceptMap ae=conceptMaps.get(sn);
    String n=sn.substring(23);
    ConceptMap cm=ae;
    s.append(""String_Node_Str"").append(ae.getUserData(""String_Node_Str"")).append(""String_Node_Str"").append(cm.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(getValueSetRef(""String_Node_Str"",((Reference)cm.getSource()).getReference())).append(""String_Node_Str"").append(describeValueSetByRef(((Reference)cm.getSource()).getReference())).append(""String_Node_Str"").append(""String_Node_Str"").append(getValueSetRef(""String_Node_Str"",((Reference)cm.getTarget()).getReference())).append(""String_Node_Str"").append(describeValueSetByRef(((Reference)cm.getTarget()).getReference())).append(""String_Node_Str"");
  }
  s.append(""String_Node_Str"");
  return s.toString();
}","private String genConceptMapsTable() throws Exception {
  StringBuilder s=new StringBuilder();
  s.append(""String_Node_Str"");
  s.append(""String_Node_Str"");
  List<String> sorts=new ArrayList<String>();
  sorts.addAll(conceptMaps.keySet());
  Collections.sort(sorts);
  for (  String sn : sorts) {
    ConceptMap ae=conceptMaps.get(sn);
    ConceptMap cm=ae;
    s.append(""String_Node_Str"").append(ae.getUserData(""String_Node_Str"")).append(""String_Node_Str"").append(cm.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(getValueSetRef(""String_Node_Str"",((Reference)cm.getSource()).getReference())).append(""String_Node_Str"").append(describeValueSetByRef(((Reference)cm.getSource()).getReference())).append(""String_Node_Str"").append(""String_Node_Str"").append(getValueSetRef(""String_Node_Str"",((Reference)cm.getTarget()).getReference())).append(""String_Node_Str"").append(describeValueSetByRef(((Reference)cm.getTarget()).getReference())).append(""String_Node_Str"");
  }
  s.append(""String_Node_Str"");
  return s.toString();
}",0.98531501657982
24108,"private String generateHumanSummary(ConformancePackage pack,Profile profile){
  try {
    if (""String_Node_Str"".equalsIgnoreCase(pack.metadata(""String_Node_Str"")))     return ""String_Node_Str"";
    if (profile.getDifferential() == null)     return ""String_Node_Str"";
    StringBuilder tx=new StringBuilder();
    StringBuilder card=new StringBuilder();
    StringBuilder fixed=new StringBuilder();
    StringBuilder ext=new StringBuilder();
    StringBuilder slices=new StringBuilder();
    for (    ElementDefinition ed : profile.getDifferential().getElement()) {
      if (ed.hasBinding()) {
        String s=summariseBinding(ed.getBinding(),ed.getPath(),hasType(ed,""String_Node_Str""));
        if (s != null)         tx.append(s);
      }
      if (ed.getMin() == 1)       card.append(""String_Node_Str"").append(ed.getPath()).append(""String_Node_Str"");
 else       if (""String_Node_Str"".equals(ed.getMax()))       card.append(""String_Node_Str"").append(ed.getPath()).append(""String_Node_Str"");
      if (ed.hasFixed())       fixed.append(""String_Node_Str"").append(ed.getPath()).append(""String_Node_Str"").append(summariseValue(ed.getFixed())).append(""String_Node_Str"");
 else       if (ed.hasPattern())       fixed.append(""String_Node_Str"").append(ed.getPath()).append(""String_Node_Str"").append(summariseValue(ed.getPattern())).append(""String_Node_Str"");
      if (ed.getPath().endsWith(""String_Node_Str""))       ext.append(summariseExtension(ed.getType(),false,ed.getPath()));
 else       if (ed.getPath().endsWith(""String_Node_Str""))       ext.append(summariseExtension(ed.getType(),true,ed.getPath()));
    }
    StringBuilder res=new StringBuilder(""String_Node_Str"");
    if (tx.length() > 0)     res.append(""String_Node_Str"").append(tx.toString()).append(""String_Node_Str"");
    if (card.length() > 0)     res.append(""String_Node_Str"").append(card.toString()).append(""String_Node_Str"");
    if (fixed.length() > 0)     res.append(""String_Node_Str"").append(fixed.toString()).append(""String_Node_Str"");
    if (ext.length() > 0)     res.append(""String_Node_Str"").append(ext.toString()).append(""String_Node_Str"");
    return res.toString();
  }
 catch (  Exception e) {
    return ""String_Node_Str"" + Utilities.escapeXml(e.getMessage()) + ""String_Node_Str"";
  }
}","private String generateHumanSummary(ConformancePackage pack,Profile profile){
  try {
    if (""String_Node_Str"".equalsIgnoreCase(pack.metadata(""String_Node_Str"")))     return ""String_Node_Str"";
    if (profile.getDifferential() == null)     return ""String_Node_Str"";
    StringBuilder tx=new StringBuilder();
    StringBuilder card=new StringBuilder();
    StringBuilder fixed=new StringBuilder();
    StringBuilder ext=new StringBuilder();
    for (    ElementDefinition ed : profile.getDifferential().getElement()) {
      if (ed.hasBinding()) {
        String s=summariseBinding(ed.getBinding(),ed.getPath(),hasType(ed,""String_Node_Str""));
        if (s != null)         tx.append(s);
      }
      if (ed.getMin() == 1)       card.append(""String_Node_Str"").append(ed.getPath()).append(""String_Node_Str"");
 else       if (""String_Node_Str"".equals(ed.getMax()))       card.append(""String_Node_Str"").append(ed.getPath()).append(""String_Node_Str"");
      if (ed.hasFixed())       fixed.append(""String_Node_Str"").append(ed.getPath()).append(""String_Node_Str"").append(summariseValue(ed.getFixed())).append(""String_Node_Str"");
 else       if (ed.hasPattern())       fixed.append(""String_Node_Str"").append(ed.getPath()).append(""String_Node_Str"").append(summariseValue(ed.getPattern())).append(""String_Node_Str"");
      if (ed.getPath().endsWith(""String_Node_Str""))       ext.append(summariseExtension(ed.getType(),false,ed.getPath()));
 else       if (ed.getPath().endsWith(""String_Node_Str""))       ext.append(summariseExtension(ed.getType(),true,ed.getPath()));
    }
    StringBuilder res=new StringBuilder(""String_Node_Str"");
    if (tx.length() > 0)     res.append(""String_Node_Str"").append(tx.toString()).append(""String_Node_Str"");
    if (card.length() > 0)     res.append(""String_Node_Str"").append(card.toString()).append(""String_Node_Str"");
    if (fixed.length() > 0)     res.append(""String_Node_Str"").append(fixed.toString()).append(""String_Node_Str"");
    if (ext.length() > 0)     res.append(""String_Node_Str"").append(ext.toString()).append(""String_Node_Str"");
    return res.toString();
  }
 catch (  Exception e) {
    return ""String_Node_Str"" + Utilities.escapeXml(e.getMessage()) + ""String_Node_Str"";
  }
}",0.9897413024085636
24109,"public String processConformancePackageIncludes(ConformancePackage pack,String src,String intro,String notes) throws Exception {
  String workingTitle=null;
  int level=0;
  boolean even=false;
  while (src.contains(""String_Node_Str"") || src.contains(""String_Node_Str"")) {
    int i1=src.indexOf(""String_Node_Str"");
    int i2=src.indexOf(""String_Node_Str"");
    if (i1 == -1) {
      i1=src.indexOf(""String_Node_Str"");
      i2=src.indexOf(""String_Node_Str"");
    }
    String s1=src.substring(0,i1);
    String s2=src.substring(i1 + 2,i2).trim();
    String s3=src.substring(i2 + 2);
    String[] com=s2.split(""String_Node_Str"");
    if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + com[1] + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      workingTitle=s2.substring(9).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      src=s1 + s3;
    }
 else     if (com[0].equals(""String_Node_Str"")) {
      src=s1 + reflink(com[1]) + s3;
    }
 else     if (com[0].equals(""String_Node_Str"")) {
      level=Integer.parseInt(com[1]);
      src=s1 + s3;
    }
 else     if (com.length != 1)     throw new Exception(""String_Node_Str"" + s2 + ""String_Node_Str""+ pack.getId());
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pageHeader(pack.getId().toUpperCase().substring(0,1) + pack.getId().substring(1)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (workingTitle == null ? Utilities.escapeXml(pack.getTitle() + ""String_Node_Str"") : workingTitle) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.escapeXml(pack.getId().toUpperCase().substring(0,1) + pack.getId().substring(1)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pack.getId() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (intro == null ? pack.metadata(""String_Node_Str"") : intro) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (notes == null ? ""String_Node_Str"" : notes) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + makeCanonical(pack.getId()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + version + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Config.DATE_FORMAT().format(new Date()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genV2Index() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genV3CSIndex() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genV3VSIndex() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pack.getId() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + getEventsTable() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genResCodes() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genDTCodes() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + allParamlist() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genBindingTable(true) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genBindingsTable() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genCodeSystemsTable() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genValueSetsTable() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genIGValueSetsTable() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genConceptMapsTable() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genBindingTable(false) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genResImplList() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genReferenceImplList() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ig.getName() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.make(pack.getId()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.navlist(pack.getId(),genlevel(level)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.makelist(pack.getId(),""String_Node_Str"",genlevel(level)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + new SimpleDateFormat(""String_Node_Str"").format(new Date()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + svnRevision + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + publicationType + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + publicationNotice + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genlevel(level) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pack.getId() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.URLEncode(pack.getId()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.URLEncode(baseURL) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.escapeXml(pack.getDescription()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + getPackageContent(pack) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + getSearch(pack) + s3;
 else     throw new Exception(""String_Node_Str"" + s2 + ""String_Node_Str""+ pack.getId());
  }
  return src;
}","public String processConformancePackageIncludes(ConformancePackage pack,String src,String intro,String notes) throws Exception {
  String workingTitle=null;
  int level=0;
  while (src.contains(""String_Node_Str"") || src.contains(""String_Node_Str"")) {
    int i1=src.indexOf(""String_Node_Str"");
    int i2=src.indexOf(""String_Node_Str"");
    if (i1 == -1) {
      i1=src.indexOf(""String_Node_Str"");
      i2=src.indexOf(""String_Node_Str"");
    }
    String s1=src.substring(0,i1);
    String s2=src.substring(i1 + 2,i2).trim();
    String s3=src.substring(i2 + 2);
    String[] com=s2.split(""String_Node_Str"");
    if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + com[1] + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      workingTitle=s2.substring(9).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      src=s1 + s3;
    }
 else     if (com[0].equals(""String_Node_Str"")) {
      src=s1 + reflink(com[1]) + s3;
    }
 else     if (com[0].equals(""String_Node_Str"")) {
      level=Integer.parseInt(com[1]);
      src=s1 + s3;
    }
 else     if (com.length != 1)     throw new Exception(""String_Node_Str"" + s2 + ""String_Node_Str""+ pack.getId());
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pageHeader(pack.getId().toUpperCase().substring(0,1) + pack.getId().substring(1)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (workingTitle == null ? Utilities.escapeXml(pack.getTitle() + ""String_Node_Str"") : workingTitle) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.escapeXml(pack.getId().toUpperCase().substring(0,1) + pack.getId().substring(1)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pack.getId() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (intro == null ? pack.metadata(""String_Node_Str"") : intro) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (notes == null ? ""String_Node_Str"" : notes) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + makeCanonical(pack.getId()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + version + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Config.DATE_FORMAT().format(new Date()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genV2Index() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genV3CSIndex() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genV3VSIndex() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pack.getId() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + getEventsTable() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genResCodes() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genDTCodes() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + allParamlist() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genBindingTable(true) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genBindingsTable() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genCodeSystemsTable() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genValueSetsTable() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genIGValueSetsTable() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genConceptMapsTable() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genBindingTable(false) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genResImplList() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genReferenceImplList() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ig.getName() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.make(pack.getId()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.navlist(pack.getId(),genlevel(level)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.makelist(pack.getId(),""String_Node_Str"",genlevel(level)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + new SimpleDateFormat(""String_Node_Str"").format(new Date()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + svnRevision + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + publicationType + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + publicationNotice + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genlevel(level) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pack.getId() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.URLEncode(pack.getId()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.URLEncode(baseURL) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.escapeXml(pack.getDescription()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + getPackageContent(pack) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + getSearch(pack) + s3;
 else     throw new Exception(""String_Node_Str"" + s2 + ""String_Node_Str""+ pack.getId());
  }
  return src;
}",0.9983136593591906
24110,"private String combineNotes(List<String> followUps,String notes) throws Exception {
  String s=""String_Node_Str"";
  if (notes != null && !notes.equals(""String_Node_Str""))   s=notes;
  if (followUps.size() > 0)   if (s != ""String_Node_Str"")   s=s + ""String_Node_Str"" + Utilities.asCSV(followUps);
 else   s=""String_Node_Str"" + Utilities.asCSV(followUps);
  return processMarkdown(s);
}","private String combineNotes(List<String> followUps,String notes) throws Exception {
  String s=""String_Node_Str"";
  if (notes != null && !notes.equals(""String_Node_Str""))   s=notes;
  if (followUps.size() > 0)   if (!s.isEmpty())   s=s + ""String_Node_Str"" + Utilities.asCSV(followUps);
 else   s=""String_Node_Str"" + Utilities.asCSV(followUps);
  return processMarkdown(s);
}",0.9577836411609498
24111,"private String sourceSummary(ValueSet vs){
  StringBuilder b=new StringBuilder();
  List<String> done=new ArrayList<String>();
  if (vs.hasDefine()) {
    String n=""String_Node_Str"";
    if (vs.getDescription().contains(""String_Node_Str""))     n=""String_Node_Str"";
    if (vs.getDescription().contains(""String_Node_Str""))     n=""String_Node_Str"";
    if (vs.getDefine().getSystem().startsWith(""String_Node_Str"") && !(vs.getDefine().getSystem().startsWith(""String_Node_Str"")))     n=""String_Node_Str"";
    if (vs.getDefine().getSystem().equals(""String_Node_Str""))     n=""String_Node_Str"";
    b.append(""String_Node_Str"" + n);
  }
  if (vs.hasCompose())   for (  ConceptSetComponent c : vs.getCompose().getInclude()) {
    String uri=c.getSystem();
    String n=""String_Node_Str"";
    if (uri != null) {
      if (""String_Node_Str"".equals(uri))       n=""String_Node_Str"";
      if (""String_Node_Str"".equals(uri))       n=""String_Node_Str"";
      if (""String_Node_Str"".equals(uri))       n=""String_Node_Str"";
      if (""String_Node_Str"".equals(uri))       n=""String_Node_Str"";
      if (""String_Node_Str"".equals(uri))       n=""String_Node_Str"";
      if (""String_Node_Str"".equals(uri))       n=""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str""))       n=""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str""))       n=""String_Node_Str"";
    }
    if (!done.contains(n))     b.append(""String_Node_Str"" + n);
    done.add(n);
  }
  return b.length() == 0 ? ""String_Node_Str"" : b.substring(2);
}","private String sourceSummary(ValueSet vs){
  StringBuilder b=new StringBuilder();
  List<String> done=new ArrayList<String>();
  if (vs.hasDefine()) {
    String n=""String_Node_Str"";
    if (vs.getDescription().contains(""String_Node_Str""))     n=""String_Node_Str"";
    if (vs.getDescription().contains(""String_Node_Str""))     n=""String_Node_Str"";
    if (vs.getDefine().getSystem().startsWith(""String_Node_Str"") && !(vs.getDefine().getSystem().startsWith(""String_Node_Str"")))     n=""String_Node_Str"";
    if (vs.getDefine().getSystem().equals(""String_Node_Str""))     n=""String_Node_Str"";
    b.append(""String_Node_Str"" + n);
  }
  if (vs.hasCompose())   for (  ConceptSetComponent c : vs.getCompose().getInclude()) {
    String uri=c.getSystem();
    String n=""String_Node_Str"";
    if (uri != null) {
      if (""String_Node_Str"".equals(uri))       n=""String_Node_Str"";
      if (""String_Node_Str"".equals(uri))       n=""String_Node_Str"";
      if (""String_Node_Str"".equals(uri))       n=""String_Node_Str"";
      if (""String_Node_Str"".equals(uri))       n=""String_Node_Str"";
      if (""String_Node_Str"".equals(uri))       n=""String_Node_Str"";
      if (""String_Node_Str"".equals(uri))       n=""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str""))       n=""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str""))       n=""String_Node_Str"";
    }
    if (!done.contains(n))     b.append(""String_Node_Str"").append(n);
    done.add(n);
  }
  return b.length() == 0 ? ""String_Node_Str"" : b.substring(2);
}",0.996031746031746
24112,"private void generateAccessors(ElementDefn root,ElementDefn e,String indent,String className) throws Exception {
  String tn=typeNames.get(e);
  if (e.unbounded()) {
    jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
    if (tn == null && e.usesCompositeType()) {
      write(indent + ""String_Node_Str"" + root.getName()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ root.getName()+ ""String_Node_Str"");
    }
 else {
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
    }
    write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(""String_Node_Str"");
    jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
    if (e.getTypes().size() == 1 && (definitions.getPrimitives().containsKey(e.typeCode()) || e.typeCode().equals(""String_Node_Str""))) {
      write(""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      if (isJavaPrimitive(e))       write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
 else       write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      if (!definitions.getBaseResources().containsKey(tn)) {
        write(""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        if (!rn.equals(""String_Node_Str"")) {
          write(""String_Node_Str"");
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
      }
    }
  }
 else {
    if (isJavaPrimitive(e)) {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + e.getDefinition());
      write(indent + ""String_Node_Str"" + getSimpleType(tn)+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ (e.typeCode().equals(""String_Node_Str"") ? ""String_Node_Str"" : (e.typeCode().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str""))+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + e.getDefinition());
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      if (e.getMinCardinality() == 0 && !tn.equals(""String_Node_Str"") && !tn.equals(""String_Node_Str"")) {
        if (isString(tn))         write(indent + ""String_Node_Str"");
 else         write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      if (e.getMinCardinality() == 0 && !tn.equals(""String_Node_Str"") && !tn.equals(""String_Node_Str"")) {
        write(indent + ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      if (!tn.equals(""String_Node_Str"") && !tn.equals(""String_Node_Str"") && !tn.endsWith(""String_Node_Str"")) {
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() > 1 && (tn.equals(""String_Node_Str"") || !tn.endsWith(""String_Node_Str""))) {
        for (        TypeRef t : e.getTypes()) {
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
          String ttn=getTypename(t);
          write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ttn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ ttn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
      }
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        if (!rn.equals(""String_Node_Str"")) {
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        }
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
    }
  }
}","private void generateAccessors(ElementDefn root,ElementDefn e,String indent,String className) throws Exception {
  String tn=typeNames.get(e);
  if (e.unbounded()) {
    jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
    if (tn == null && e.usesCompositeType()) {
      write(indent + ""String_Node_Str"" + root.getName()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ root.getName()+ ""String_Node_Str"");
    }
 else {
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
    }
    write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(""String_Node_Str"");
    jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
    if (e.getTypes().size() == 1 && (definitions.getPrimitives().containsKey(e.typeCode()) || e.typeCode().equals(""String_Node_Str""))) {
      write(""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      if (isJavaPrimitive(e))       write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
 else       write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      if (!definitions.getBaseResources().containsKey(tn)) {
        write(""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        if (!rn.equals(""String_Node_Str"")) {
          write(""String_Node_Str"");
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
      }
    }
  }
 else {
    if (isJavaPrimitive(e)) {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + e.getDefinition());
      write(indent + ""String_Node_Str"" + getSimpleType(tn)+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      if (e.typeCode().equals(""String_Node_Str""))       write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
 else       if (e.typeCode().equals(""String_Node_Str""))       write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
 else       write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + e.getDefinition());
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      if (e.getMinCardinality() == 0 && !tn.equals(""String_Node_Str"") && !tn.equals(""String_Node_Str"")) {
        if (isString(tn))         write(indent + ""String_Node_Str"");
 else         write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      if (e.getMinCardinality() == 0 && !tn.equals(""String_Node_Str"") && !tn.equals(""String_Node_Str"")) {
        write(indent + ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      if (!tn.equals(""String_Node_Str"") && !tn.equals(""String_Node_Str"") && !tn.endsWith(""String_Node_Str"")) {
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() > 1 && (tn.equals(""String_Node_Str"") || !tn.endsWith(""String_Node_Str""))) {
        for (        TypeRef t : e.getTypes()) {
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
          String ttn=getTypename(t);
          write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ttn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ ttn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
      }
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        if (!rn.equals(""String_Node_Str"")) {
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        }
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
    }
  }
}",0.9800036916261612
24113,"private void generateAccessors(ElementDefn root,ElementDefn e,String indent,String className) throws Exception {
  String tn=typeNames.get(e);
  if (e.unbounded()) {
    jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
    if (tn == null && e.usesCompositeType()) {
      write(indent + ""String_Node_Str"" + root.getName()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ root.getName()+ ""String_Node_Str"");
    }
 else {
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
    }
    write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(""String_Node_Str"");
    jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
    if (e.getTypes().size() == 1 && (definitions.getPrimitives().containsKey(e.typeCode()) || e.typeCode().equals(""String_Node_Str""))) {
      write(""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      if (isJavaPrimitive(e))       write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
 else       write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      if (!definitions.getBaseResources().containsKey(tn)) {
        write(""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        if (!rn.equals(""String_Node_Str"")) {
          write(""String_Node_Str"");
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
      }
    }
  }
 else {
    if (isJavaPrimitive(e)) {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + e.getDefinition());
      write(indent + ""String_Node_Str"" + getSimpleType(tn)+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ (e.typeCode().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + e.getDefinition());
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      if (e.getMinCardinality() == 0) {
        if (tn.equals(""String_Node_Str""))         write(indent + ""String_Node_Str"");
 else         if (tn.equals(""String_Node_Str""))         write(indent + ""String_Node_Str"");
 else         if (isString(tn))         write(indent + ""String_Node_Str"");
 else         write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      if (e.getMinCardinality() == 0) {
        write(indent + ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      if (!tn.equals(""String_Node_Str"") && !tn.equals(""String_Node_Str"") && !tn.endsWith(""String_Node_Str"")) {
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() > 1 && (tn.equals(""String_Node_Str"") || !tn.endsWith(""String_Node_Str""))) {
        for (        TypeRef t : e.getTypes()) {
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
          String ttn=getTypename(t);
          write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ttn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ ttn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
      }
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        if (!rn.equals(""String_Node_Str"")) {
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        }
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
    }
  }
}","private void generateAccessors(ElementDefn root,ElementDefn e,String indent,String className) throws Exception {
  String tn=typeNames.get(e);
  if (e.unbounded()) {
    jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
    if (tn == null && e.usesCompositeType()) {
      write(indent + ""String_Node_Str"" + root.getName()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ root.getName()+ ""String_Node_Str"");
    }
 else {
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
    }
    write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(""String_Node_Str"");
    jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
    if (e.getTypes().size() == 1 && (definitions.getPrimitives().containsKey(e.typeCode()) || e.typeCode().equals(""String_Node_Str""))) {
      write(""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      if (isJavaPrimitive(e))       write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
 else       write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      if (!definitions.getBaseResources().containsKey(tn)) {
        write(""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        if (!rn.equals(""String_Node_Str"")) {
          write(""String_Node_Str"");
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
      }
    }
  }
 else {
    if (isJavaPrimitive(e)) {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + e.getDefinition());
      write(indent + ""String_Node_Str"" + getSimpleType(tn)+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ (e.typeCode().equals(""String_Node_Str"") ? ""String_Node_Str"" : (e.typeCode().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str""))+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + e.getDefinition());
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      if (e.getMinCardinality() == 0) {
        if (tn.equals(""String_Node_Str""))         write(indent + ""String_Node_Str"");
 else         if (tn.equals(""String_Node_Str""))         write(indent + ""String_Node_Str"");
 else         if (isString(tn))         write(indent + ""String_Node_Str"");
 else         write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str""+ (tn.startsWith(""String_Node_Str"") ? ""String_Node_Str"" + tn.substring(12,tn.length() - 1) + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      if (e.getMinCardinality() == 0) {
        write(indent + ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      if (!tn.equals(""String_Node_Str"") && !tn.equals(""String_Node_Str"") && !tn.endsWith(""String_Node_Str"")) {
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() > 1 && (tn.equals(""String_Node_Str"") || !tn.endsWith(""String_Node_Str""))) {
        for (        TypeRef t : e.getTypes()) {
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
          String ttn=getTypename(t);
          write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ttn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ ttn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + ttn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
      }
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        if (!rn.equals(""String_Node_Str"")) {
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        }
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
    }
  }
}",0.9969869226229304
24114,"private void generateMetaTypeMembers(String name,boolean isResource){
  String modifier=isResource && name.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  if (isResource)   ln(""String_Node_Str"" + modifier + ""String_Node_Str""+ name+ ""String_Node_Str"");
  ln(""String_Node_Str"" + ""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str"");
  ln();
}","private void generateMetaTypeMembers(String name,boolean isResource){
  String modifier=isResource && name.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  if (isResource) {
    ln(""String_Node_Str"");
    ln(""String_Node_Str"" + modifier + ""String_Node_Str""+ name+ ""String_Node_Str"");
  }
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + ""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str"");
  ln();
}",0.684863523573201
24115,"private ResourceDefn parseCommonTypeColumns() throws Exception {
  ResourceDefn resource=new ResourceDefn();
  Sheet sheet=loadSheet(""String_Node_Str"");
  Map<String,BindingSpecification> typeLocalBindings=null;
  if (sheet != null)   typeLocalBindings=readBindings(sheet);
  sheet=loadSheet(""String_Node_Str"");
  Map<String,Invariant> invariants=null;
  if (sheet != null)   invariants=readInvariants(sheet);
  sheet=loadSheet(""String_Node_Str"");
  if (sheet == null)   throw new Exception(""String_Node_Str"");
  for (int row=0; row < sheet.rows.size(); row++) {
    processLine(resource,sheet,row,invariants);
  }
  if (invariants != null) {
    for (    Invariant inv : invariants.values()) {
      if (Utilities.noString(inv.getContext()))       log.log(""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"",LogMessageType.Warning);
 else {
        ElementDefn ed=findContext(resource.getRoot(),inv.getContext(),""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
        if (ed.getName().endsWith(""String_Node_Str"") && !inv.getContext().endsWith(""String_Node_Str""))         inv.setFixedName(inv.getContext().substring(inv.getContext().lastIndexOf(""String_Node_Str"") + 1));
        ed.getInvariants().put(inv.getId(),inv);
        if (Utilities.noString(inv.getXpath()))         log.log(""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getEnglish()+ ""String_Node_Str"",LogMessageType.Warning);
 else         if (inv.getXpath().contains(""String_Node_Str""))         log.log(""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getEnglish()+ ""String_Node_Str"",LogMessageType.Warning);
      }
    }
  }
  if (typeLocalBindings != null)   resource.getRoot().getNestedBindings().putAll(typeLocalBindings);
  scanNestedTypes(resource,resource.getRoot(),resource.getName());
  return resource;
}","private ResourceDefn parseCommonTypeColumns() throws Exception {
  ResourceDefn resource=new ResourceDefn();
  Sheet sheet=loadSheet(""String_Node_Str"");
  Map<String,BindingSpecification> typeLocalBindings=null;
  if (sheet != null)   typeLocalBindings=readBindings(sheet);
  sheet=loadSheet(""String_Node_Str"");
  Map<String,Invariant> invariants=null;
  if (sheet != null)   invariants=readInvariants(sheet);
  sheet=loadSheet(""String_Node_Str"");
  if (sheet == null)   throw new Exception(""String_Node_Str"");
  for (int row=0; row < sheet.rows.size(); row++) {
    processLine(resource,sheet,row,invariants,false);
  }
  if (invariants != null) {
    for (    Invariant inv : invariants.values()) {
      if (Utilities.noString(inv.getContext()))       log.log(""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"",LogMessageType.Warning);
 else {
        ElementDefn ed=findContext(resource.getRoot(),inv.getContext(),""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
        if (ed.getName().endsWith(""String_Node_Str"") && !inv.getContext().endsWith(""String_Node_Str""))         inv.setFixedName(inv.getContext().substring(inv.getContext().lastIndexOf(""String_Node_Str"") + 1));
        ed.getInvariants().put(inv.getId(),inv);
        if (Utilities.noString(inv.getXpath()))         log.log(""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getEnglish()+ ""String_Node_Str"",LogMessageType.Warning);
 else         if (inv.getXpath().contains(""String_Node_Str""))         log.log(""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getEnglish()+ ""String_Node_Str"",LogMessageType.Warning);
      }
    }
  }
  if (typeLocalBindings != null)   resource.getRoot().getNestedBindings().putAll(typeLocalBindings);
  scanNestedTypes(resource,resource.getRoot(),resource.getName());
  return resource;
}",0.9985007496251874
24116,"private ProfileDefn parseProfileSheet(Definitions definitions,ConformancePackage ap,String n,List<String> namedSheets,boolean published) throws Exception {
  Sheet sheet;
  ResourceDefn resource=new ResourceDefn();
  resource.setPublishedInProfile(published);
  sheet=loadSheet(n + ""String_Node_Str"");
  Map<String,Invariant> invariants=null;
  if (sheet != null) {
    invariants=readInvariants(sheet);
  }
 else {
    invariants=new HashMap<String,Invariant>();
  }
  sheet=loadSheet(n);
  if (sheet == null)   throw new Exception(""String_Node_Str"" + n + ""String_Node_Str"");
  for (int row=0; row < sheet.rows.size(); row++) {
    ElementDefn e=processLine(resource,sheet,row,invariants);
    if (e != null)     for (    TypeRef t : e.getTypes()) {
      if (t.getProfile() != null && !t.getName().equals(""String_Node_Str"") && t.getProfile().startsWith(""String_Node_Str"")) {
        if (!namedSheets.contains(t.getProfile().substring(1)))         namedSheets.add(t.getProfile().substring(1));
      }
    }
  }
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    int row=0;
    while (row < sheet.rows.size()) {
      if (sheet.getColumn(row,""String_Node_Str"").startsWith(""String_Node_Str""))       row++;
 else       row=processExtension(resource.getRoot().getElementByName(""String_Node_Str""),sheet,row,definitions,ap.metadata(""String_Node_Str""),ap);
    }
  }
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    readSearchParams(resource,sheet,true);
  }
  if (invariants != null) {
    for (    Invariant inv : invariants.values()) {
      if (Utilities.noString(inv.getContext()))       log.log(""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"",LogMessageType.Warning);
 else {
        ElementDefn ed=findContext(resource.getRoot(),inv.getContext(),""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
        if (ed.getName().endsWith(""String_Node_Str"") && !inv.getContext().endsWith(""String_Node_Str""))         inv.setFixedName(inv.getContext().substring(inv.getContext().lastIndexOf(""String_Node_Str"") + 1));
        ed.getInvariants().put(inv.getId(),inv);
        if (Utilities.noString(inv.getXpath()))         log.log(""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getEnglish()+ ""String_Node_Str"",LogMessageType.Warning);
 else         if (inv.getXpath().contains(""String_Node_Str""))         log.log(""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getEnglish()+ ""String_Node_Str"",LogMessageType.Warning);
      }
    }
  }
  resource.getRoot().setProfileName(n);
  ProfileDefn p=new ProfileDefn(ap.getName() + '-' + n,resource.getName(),resource);
  return p;
}","private ProfileDefn parseProfileSheet(Definitions definitions,ConformancePackage ap,String n,List<String> namedSheets,boolean published) throws Exception {
  Sheet sheet;
  ResourceDefn resource=new ResourceDefn();
  resource.setPublishedInProfile(published);
  sheet=loadSheet(n + ""String_Node_Str"");
  Map<String,Invariant> invariants=null;
  if (sheet != null) {
    invariants=readInvariants(sheet);
  }
 else {
    invariants=new HashMap<String,Invariant>();
  }
  sheet=loadSheet(n);
  if (sheet == null)   throw new Exception(""String_Node_Str"" + n + ""String_Node_Str"");
  for (int row=0; row < sheet.rows.size(); row++) {
    ElementDefn e=processLine(resource,sheet,row,invariants,true);
    if (e != null)     for (    TypeRef t : e.getTypes()) {
      if (t.getProfile() != null && !t.getName().equals(""String_Node_Str"") && t.getProfile().startsWith(""String_Node_Str"")) {
        if (!namedSheets.contains(t.getProfile().substring(1)))         namedSheets.add(t.getProfile().substring(1));
      }
    }
  }
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    int row=0;
    while (row < sheet.rows.size()) {
      if (sheet.getColumn(row,""String_Node_Str"").startsWith(""String_Node_Str""))       row++;
 else       row=processExtension(resource.getRoot().getElementByName(""String_Node_Str""),sheet,row,definitions,ap.metadata(""String_Node_Str""),ap);
    }
  }
  sheet=loadSheet(n + ""String_Node_Str"");
  if (sheet != null) {
    readSearchParams(resource,sheet,true);
  }
  if (invariants != null) {
    for (    Invariant inv : invariants.values()) {
      if (Utilities.noString(inv.getContext()))       log.log(""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"",LogMessageType.Warning);
 else {
        ElementDefn ed=findContext(resource.getRoot(),inv.getContext(),""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str"");
        if (ed.getName().endsWith(""String_Node_Str"") && !inv.getContext().endsWith(""String_Node_Str""))         inv.setFixedName(inv.getContext().substring(inv.getContext().lastIndexOf(""String_Node_Str"") + 1));
        ed.getInvariants().put(inv.getId(),inv);
        if (Utilities.noString(inv.getXpath()))         log.log(""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getEnglish()+ ""String_Node_Str"",LogMessageType.Warning);
 else         if (inv.getXpath().contains(""String_Node_Str""))         log.log(""String_Node_Str"" + resource.getRoot().getName() + ""String_Node_Str""+ inv.getId()+ ""String_Node_Str""+ inv.getEnglish()+ ""String_Node_Str"",LogMessageType.Warning);
      }
    }
  }
  resource.getRoot().setProfileName(n);
  ProfileDefn p=new ProfileDefn(ap.getName() + '-' + n,resource.getName(),resource);
  return p;
}",0.9991158267020336
24117,"private void writeEntry(String path,String cardinality,String type,String conceptDomain,ElementDefn e) throws Exception {
  write(""String_Node_Str"" + path.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ path+ ""String_Node_Str"");
  tableRow(""String_Node_Str"",null,e.getDefinition());
  tableRow(""String_Node_Str"",""String_Node_Str"",cardinality + (e.hasCondition() ? ""String_Node_Str"" + e.getCondition() : ""String_Node_Str""));
  tableRowNE(""String_Node_Str"",""String_Node_Str"",describeBinding(e));
  if (!Utilities.noString(type) && type.startsWith(""String_Node_Str""))   tableRowNE(""String_Node_Str"",null,""String_Node_Str"" + type.substring(1) + ""String_Node_Str""+ type.substring(1)+ ""String_Node_Str"");
 else   tableRowNE(""String_Node_Str"",""String_Node_Str"",type);
  tableRow(""String_Node_Str"",""String_Node_Str"",displayBoolean(e.isModifier()));
  tableRowNE(""String_Node_Str"",null,page.processMarkdown(e.getRequirements()));
  tableRow(""String_Node_Str"",null,toSeperatedString(e.getAliases()));
  if (e.isSummaryItem())   tableRow(""String_Node_Str"",""String_Node_Str"",Boolean.toString(e.isSummaryItem()));
  tableRow(""String_Node_Str"",null,e.getComments());
  tableRowNE(""String_Node_Str"",null,invariants(e.getInvariants(),e.getStatedInvariants()));
  tableRow(""String_Node_Str"",null,e.getMapping(Definitions.LOINC_MAPPING));
  tableRow(""String_Node_Str"",null,e.getMapping(Definitions.SNOMED_MAPPING));
  tableRow(""String_Node_Str"",null,e.getTodo());
  if (e.getTasks().size() > 0) {
    tableRowNE(""String_Node_Str"",null,tasks(e.getTasks()));
  }
}","private void writeEntry(String path,String cardinality,String type,String conceptDomain,ElementDefn e) throws Exception {
  write(""String_Node_Str"" + path.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ path+ ""String_Node_Str"");
  tableRow(""String_Node_Str"",null,page.processMarkdown(e.getDefinition()));
  tableRow(""String_Node_Str"",""String_Node_Str"",cardinality + (e.hasCondition() ? ""String_Node_Str"" + e.getCondition() : ""String_Node_Str""));
  tableRowNE(""String_Node_Str"",""String_Node_Str"",describeBinding(e));
  if (!Utilities.noString(type) && type.startsWith(""String_Node_Str""))   tableRowNE(""String_Node_Str"",null,""String_Node_Str"" + type.substring(1) + ""String_Node_Str""+ type.substring(1)+ ""String_Node_Str"");
 else   tableRowNE(""String_Node_Str"",""String_Node_Str"",type);
  tableRow(""String_Node_Str"",""String_Node_Str"",displayBoolean(e.isModifier()));
  tableRowNE(""String_Node_Str"",null,page.processMarkdown(e.getRequirements()));
  tableRow(""String_Node_Str"",null,toSeperatedString(e.getAliases()));
  if (e.isSummaryItem())   tableRow(""String_Node_Str"",""String_Node_Str"",Boolean.toString(e.isSummaryItem()));
  tableRow(""String_Node_Str"",null,page.processMarkdown(e.getComments()));
  tableRowNE(""String_Node_Str"",null,invariants(e.getInvariants(),e.getStatedInvariants()));
  tableRow(""String_Node_Str"",null,e.getMapping(Definitions.LOINC_MAPPING));
  tableRow(""String_Node_Str"",null,e.getMapping(Definitions.SNOMED_MAPPING));
  tableRow(""String_Node_Str"",null,e.getTodo());
  if (e.getTasks().size() > 0) {
    tableRowNE(""String_Node_Str"",null,tasks(e.getTasks()));
  }
}",0.9864947820748926
24118,"public String processExtensionIncludes(String filename,ExtensionDefinition ed,String xml,String tx,String src,String pagePath) throws Exception {
  String workingTitle=null;
  while (src.contains(""String_Node_Str"") || src.contains(""String_Node_Str"")) {
    int i1=src.indexOf(""String_Node_Str"");
    int i2=src.indexOf(""String_Node_Str"");
    if (i1 == -1) {
      i1=src.indexOf(""String_Node_Str"");
      i2=src.indexOf(""String_Node_Str"");
    }
    String s1=src.substring(0,i1);
    String s2=src.substring(i1 + 2,i2).trim();
    String s3=src.substring(i2 + 2);
    String[] com=s2.split(""String_Node_Str"");
    if (com[0].equals(""String_Node_Str""))     src=s1 + generateSideBar(com.length > 1 ? com[1] : ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + com[1] + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + extDefnHeader(filename,com.length > 1 ? com[1] : null) + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      workingTitle=s2.substring(9).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      src=s1 + s3;
    }
 else     if (com.length != 1)     throw new Exception(""String_Node_Str"" + s2 + ""String_Node_Str""+ filename);
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pageHeader(ed.getName()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (workingTitle == null ? Utilities.escapeXml(ed.getName()) : workingTitle) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.escapeXml(ed.getName()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (filename.contains(""String_Node_Str"") ? filename.substring(0,filename.lastIndexOf(""String_Node_Str"")) : filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + filename + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      if (ed.getDate() != null)       src=s1 + ed.getDate().toHumanDisplay() + s3;
 else       src=s1 + ""String_Node_Str"" + s3;
    }
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ini.getStringProperty(""String_Node_Str"",""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Config.DATE_FORMAT().format(new Date()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ed.getDescription() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (ed.getStatus() == null ? ""String_Node_Str"" : ed.getStatus().toCode()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ed.getPublisher() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + xml + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + tx + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genExtensionConstraints(ed) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.pluralizeMe(filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.make(filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.navlist(filename,genlevel(0)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.makelist(filename,""String_Node_Str"" + ed.getName(),genlevel(0)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + new SimpleDateFormat(""String_Node_Str"").format(new Date()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + svnRevision + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genlevel(0) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + publicationType + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + publicationNotice + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pagePath + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ed.getUrl() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.URLEncode(pagePath) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.URLEncode(baseURL) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + mappingsExtension(ed) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + definitionsExtension(ed) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ed.getPublisher() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + generateExtensionTable(ed,filename) + s3;
 else     throw new Exception(""String_Node_Str"" + s2 + ""String_Node_Str""+ filename);
  }
  return src;
}","public String processExtensionIncludes(String filename,ExtensionDefinition ed,String xml,String tx,String src,String pagePath) throws Exception {
  String workingTitle=null;
  while (src.contains(""String_Node_Str"") || src.contains(""String_Node_Str"")) {
    int i1=src.indexOf(""String_Node_Str"");
    int i2=src.indexOf(""String_Node_Str"");
    if (i1 == -1) {
      i1=src.indexOf(""String_Node_Str"");
      i2=src.indexOf(""String_Node_Str"");
    }
    String s1=src.substring(0,i1);
    String s2=src.substring(i1 + 2,i2).trim();
    String s3=src.substring(i2 + 2);
    String[] com=s2.split(""String_Node_Str"");
    if (com[0].equals(""String_Node_Str""))     src=s1 + generateSideBar(com.length > 1 ? com[1] : ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + com[1] + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + extDefnHeader(filename,com.length > 1 ? com[1] : null) + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      workingTitle=s2.substring(9).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      src=s1 + s3;
    }
 else     if (com.length != 1)     throw new Exception(""String_Node_Str"" + s2 + ""String_Node_Str""+ filename);
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pageHeader(ed.getName()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (workingTitle == null ? Utilities.escapeXml(ed.getName()) : workingTitle) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.escapeXml(ed.getName()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (filename.contains(""String_Node_Str"") ? filename.substring(0,filename.lastIndexOf(""String_Node_Str"")) : filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + filename + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      if (ed.getDate() != null)       src=s1 + ed.getDate().toHumanDisplay() + s3;
 else       src=s1 + ""String_Node_Str"" + s3;
    }
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ini.getStringProperty(""String_Node_Str"",""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Config.DATE_FORMAT().format(new Date()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Processor.process(Utilities.escapeXml(ed.getDescription())) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (ed.getStatus() == null ? ""String_Node_Str"" : ed.getStatus().toCode()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ed.getPublisher() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + xml + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + tx + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genExtensionConstraints(ed) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.pluralizeMe(filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.make(filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.navlist(filename,genlevel(0)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.makelist(filename,""String_Node_Str"" + ed.getName(),genlevel(0)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + new SimpleDateFormat(""String_Node_Str"").format(new Date()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + svnRevision + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genlevel(0) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + publicationType + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + publicationNotice + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pagePath + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ed.getUrl() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.URLEncode(pagePath) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.URLEncode(baseURL) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + mappingsExtension(ed) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + definitionsExtension(ed) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ed.getPublisher() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + generateExtensionTable(ed,filename) + s3;
 else     throw new Exception(""String_Node_Str"" + s2 + ""String_Node_Str""+ filename);
  }
  return src;
}",0.9965905216501876
24119,"private void produceConformancePackage(String resourceName,ConformancePackage pack) throws Exception {
  for (  ProfileDefn profile : pack.getProfiles())   produceProfile(resourceName,pack,profile);
  String src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=page.processConformancePackageIncludes(pack,src);
  page.getEpub().registerFile(pack.getId() + ""String_Node_Str"",""String_Node_Str"" + pack.getName(),EPubManager.XHTML_TYPE);
  TextFile.stringToFile(src,page.getFolders().dstDir + pack.getId() + ""String_Node_Str"");
  for (  Example ex : pack.getExamples()) {
    processExample(ex,null,null);
  }
}","private void produceConformancePackage(String resourceName,ConformancePackage pack) throws Exception {
  for (  ProfileDefn profile : pack.getProfiles())   produceProfile(resourceName,pack,profile);
  String src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=page.processConformancePackageIncludes(pack,src);
  page.getEpub().registerFile(pack.getId() + ""String_Node_Str"",""String_Node_Str"" + pack.getName(),EPubManager.XHTML_TYPE);
  TextFile.stringToFile(src,page.getFolders().dstDir + pack.getId() + ""String_Node_Str"");
  for (  Example ex : pack.getExamples()) {
    processExample(ex,resourceName,null);
  }
}",0.9874411302982732
24120,"private void produceResource2(ResourceDefn resource,boolean isAbstract) throws Exception {
  File tmp=Utilities.createTempFile(""String_Node_Str"",""String_Node_Str"");
  String n=resource.getName().toLowerCase();
  String xml=xmls.get(n);
  TerminologyNotesGenerator tgen=new TerminologyNotesGenerator(new FileOutputStream(tmp),page);
  tgen.generate(resource.getRoot(),page.getDefinitions().getBindings());
  tgen.close();
  String tx=TextFile.fileToString(tmp.getAbsolutePath());
  DictHTMLGenerator dgen=new DictHTMLGenerator(new FileOutputStream(tmp),page);
  dgen.generate(resource.getRoot());
  dgen.close();
  String dict=TextFile.fileToString(tmp.getAbsolutePath());
  MappingsGenerator mgen=new MappingsGenerator(page.getDefinitions());
  mgen.generate(resource);
  String mappings=mgen.getMappings();
  String mappingsList=mgen.getMappingsList();
  SvgGenerator svg=new SvgGenerator(page);
  svg.generate(resource,page.getFolders().dstDir + n + ""String_Node_Str"");
  for (  ConformancePackage ap : resource.getConformancePackages())   produceConformancePackage(resource.getName(),ap);
  Profile profile=(Profile)ResourceUtilities.getById(profileFeed,ResourceType.Profile,resource.getName());
  for (  Example e : resource.getExamples()) {
    try {
      processExample(e,resource,profile);
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + e.getFileTitle(),ex);
    }
  }
  try {
    processQuestionnaire(resource,profile);
  }
 catch (  Exception e) {
    page.log(""String_Node_Str"" + e.getMessage(),LogMessageType.Error);
  }
  String prefix=page.getBreadCrumbManager().getIndexPrefixForReference(resource.getName());
  SectionTracker st=new SectionTracker(prefix);
  st.start(""String_Node_Str"");
  page.getSectionTrackerCache().put(n,st);
  String template=isAbstract ? ""String_Node_Str"" : ""String_Node_Str"";
  String src=TextFile.fileToString(page.getFolders().srcDir + template + ""String_Node_Str"");
  src=insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str"");
  TextFile.stringToFile(src,page.getFolders().dstDir + n + ""String_Node_Str"");
  String pages=page.getIni().getStringProperty(""String_Node_Str"",n);
  if (!Utilities.noString(pages)) {
    for (    String p : pages.split(""String_Node_Str"")) {
      producePage(p,n);
    }
  }
  src=TextFile.fileToString(page.getFolders().srcDir + template + ""String_Node_Str"");
  TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  if (!isAbstract) {
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
    TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
    page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
    TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
    page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
    TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
    page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
    TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
    page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  }
  if (!resource.getOperations().isEmpty()) {
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
    TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
    page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
    for (    Operation t : resource.getOperations().values()) {
      produceOperation(resource,t);
    }
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    src=page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str"");
    cachePage(n + ""String_Node_Str"",src,""String_Node_Str"" + resource.getName());
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    src=page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str"");
    cachePage(n + ""String_Node_Str"",src,""String_Node_Str"" + resource.getName());
  }
  tmp.delete();
  if (!isAbstract) {
    Profile p=generateProfile(resource,n,xml);
    if (!n.equals(""String_Node_Str""))     generateQuestionnaire(n,p);
  }
}","private void produceResource2(ResourceDefn resource,boolean isAbstract) throws Exception {
  File tmp=Utilities.createTempFile(""String_Node_Str"",""String_Node_Str"");
  String n=resource.getName().toLowerCase();
  String xml=xmls.get(n);
  TerminologyNotesGenerator tgen=new TerminologyNotesGenerator(new FileOutputStream(tmp),page);
  tgen.generate(resource.getRoot(),page.getDefinitions().getBindings());
  tgen.close();
  String tx=TextFile.fileToString(tmp.getAbsolutePath());
  DictHTMLGenerator dgen=new DictHTMLGenerator(new FileOutputStream(tmp),page);
  dgen.generate(resource.getRoot());
  dgen.close();
  String dict=TextFile.fileToString(tmp.getAbsolutePath());
  MappingsGenerator mgen=new MappingsGenerator(page.getDefinitions());
  mgen.generate(resource);
  String mappings=mgen.getMappings();
  String mappingsList=mgen.getMappingsList();
  SvgGenerator svg=new SvgGenerator(page);
  svg.generate(resource,page.getFolders().dstDir + n + ""String_Node_Str"");
  for (  ConformancePackage ap : resource.getConformancePackages())   produceConformancePackage(resource.getName(),ap);
  Profile profile=(Profile)ResourceUtilities.getById(profileFeed,ResourceType.Profile,resource.getName());
  for (  Example e : resource.getExamples()) {
    try {
      processExample(e,resource.getName(),profile);
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + e.getFileTitle(),ex);
    }
  }
  try {
    processQuestionnaire(resource,profile);
  }
 catch (  Exception e) {
    page.log(""String_Node_Str"" + e.getMessage(),LogMessageType.Error);
  }
  String prefix=page.getBreadCrumbManager().getIndexPrefixForReference(resource.getName());
  SectionTracker st=new SectionTracker(prefix);
  st.start(""String_Node_Str"");
  page.getSectionTrackerCache().put(n,st);
  String template=isAbstract ? ""String_Node_Str"" : ""String_Node_Str"";
  String src=TextFile.fileToString(page.getFolders().srcDir + template + ""String_Node_Str"");
  src=insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str"");
  TextFile.stringToFile(src,page.getFolders().dstDir + n + ""String_Node_Str"");
  String pages=page.getIni().getStringProperty(""String_Node_Str"",n);
  if (!Utilities.noString(pages)) {
    for (    String p : pages.split(""String_Node_Str"")) {
      producePage(p,n);
    }
  }
  src=TextFile.fileToString(page.getFolders().srcDir + template + ""String_Node_Str"");
  TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  if (!isAbstract) {
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
    TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
    page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
    TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
    page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
    TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
    page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
    TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
    page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  }
  if (!resource.getOperations().isEmpty()) {
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
    TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
    page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
    for (    Operation t : resource.getOperations().values()) {
      produceOperation(resource,t);
    }
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    src=page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str"");
    cachePage(n + ""String_Node_Str"",src,""String_Node_Str"" + resource.getName());
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    src=page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"",n + ""String_Node_Str"");
    cachePage(n + ""String_Node_Str"",src,""String_Node_Str"" + resource.getName());
  }
  tmp.delete();
  if (!isAbstract) {
    Profile p=generateProfile(resource,n,xml);
    if (!n.equals(""String_Node_Str""))     generateQuestionnaire(n,p);
  }
}",0.9991709500911956
24121,"private void processExample(Example e,ResourceDefn resource,Profile profile) throws Exception {
  if (e.getType() == ExampleType.Tool)   return;
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document xdoc;
  String narrative=null;
  String n=e.getFileTitle();
  if (!e.getPath().exists())   throw new Exception(""String_Node_Str"");
  xdoc=e.getXml() == null ? builder.parse(new CSFileInputStream(e.getPath())) : e.getXml();
  XmlGenerator xmlgen=new XmlGenerator();
  if (xdoc.getDocumentElement().getLocalName().equals(""String_Node_Str""))   xmlgen.generate(xdoc.getDocumentElement(),new CSFile(page.getFolders().dstDir + n + ""String_Node_Str""),""String_Node_Str"",xdoc.getDocumentElement().getLocalName());
 else {
    xmlgen.generate(xdoc.getDocumentElement(),new CSFile(page.getFolders().dstDir + n + ""String_Node_Str""),""String_Node_Str"",xdoc.getDocumentElement().getLocalName());
  }
  String rt=null;
  Resource r;
  try {
    XmlParser xml=new XmlParser();
    XhtmlNode combined=new XhtmlNode(NodeType.Element,""String_Node_Str"");
    Resource rf=xml.parse(new CSFileInputStream(page.getFolders().dstDir + n + ""String_Node_Str""));
    if (rf.getId() == null)     throw new Exception(""String_Node_Str"" + n + ""String_Node_Str"");
    boolean wantSave=false;
    if (rf instanceof Bundle) {
      rt=((Bundle)rf).getEntry().get(0).getResource().getResourceType().toString();
      for (      BundleEntryComponent ae : ((Bundle)rf).getEntry()) {
        r=ae.getResource();
        if (r.getId() == null)         throw new Exception(""String_Node_Str"" + n + ""String_Node_Str"");
        if (r instanceof DomainResource) {
          DomainResource dr=(DomainResource)r;
          wantSave=wantSave || (dr.getText() == null || dr.getText().getDiv() == null);
          if (true) {
            NarrativeGenerator gen=new NarrativeGenerator(""String_Node_Str"",page.getWorkerContext().clone(new SpecificationInternalClient(page,(Bundle)r)));
            gen.generate(dr);
          }
          if (dr.getText() != null && dr.getText().getDiv() != null) {
            combined.getChildNodes().add(dr.getText().getDiv());
            combined.addTag(""String_Node_Str"");
          }
        }
      }
      narrative=new XhtmlComposer().setXmlOnly(true).compose(combined);
      if (true) {
        new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + n + ""String_Node_Str""),rf,true,true);
        xdoc=builder.parse(new CSFileInputStream(page.getFolders().dstDir + n + ""String_Node_Str""));
      }
      r=null;
    }
 else {
      r=rf;
      rt=r.getResourceType().toString();
      if (r instanceof DomainResource) {
        DomainResource dr=(DomainResource)r;
        wantSave=dr.getText() == null || dr.getText().getDiv() == null;
        if (wantSave) {
          NarrativeGenerator gen=new NarrativeGenerator(""String_Node_Str"",page.getWorkerContext().clone(new SpecificationInternalClient(page,null)));
          gen.generate(dr);
        }
        if (dr.getText() != null && dr.getText().getDiv() != null) {
          narrative=new XhtmlComposer().compose(dr.getText().getDiv());
          if (true) {
            new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + n + ""String_Node_Str""),r,true,true);
            xdoc=builder.parse(new CSFileInputStream(page.getFolders().dstDir + n + ""String_Node_Str""));
          }
        }
 else         narrative=""String_Node_Str"";
      }
    }
  }
 catch (  Exception ex) {
    XhtmlNode xhtml=new XhtmlNode(NodeType.Element,""String_Node_Str"");
    xhtml.addTag(""String_Node_Str"").setAttribute(""String_Node_Str"",""String_Node_Str"").addText(""String_Node_Str"" + ex.getMessage());
    narrative=new XhtmlComposer().compose(xhtml);
    r=null;
  }
  if (r instanceof ValueSet) {
    ValueSet vs=(ValueSet)r;
    new ValueSetValidator(page.getWorkerContext()).validate(""String_Node_Str"" + n,vs,false,false);
    if (vs.getIdentifier() == null)     throw new Exception(""String_Node_Str"" + e.getPath().getAbsolutePath() + ""String_Node_Str"");
    vs.setTag(""String_Node_Str"",n + ""String_Node_Str"");
    if (vs.getIdentifier().startsWith(""String_Node_Str""))     page.getValueSets().put(vs.getIdentifier(),vs);
    if (vs.getDefine() != null) {
      page.getCodeSystems().put(vs.getDefine().getSystem().toString(),vs);
    }
    addToResourceFeed(vs,valueSetsFeed);
    page.getDefinitions().getValuesets().put(vs.getIdentifier(),vs);
    if (vs.getDefine() != null) {
      page.getDefinitions().getCodeSystems().put(vs.getDefine().getSystem(),vs);
    }
  }
 else   if (r instanceof ConceptMap) {
    ConceptMap cm=(ConceptMap)r;
    new ConceptMapValidator(page.getDefinitions(),e.getPath().getAbsolutePath()).validate(cm,false);
    if (cm.getIdentifier() == null)     throw new Exception(""String_Node_Str"" + e.getPath().getAbsolutePath() + ""String_Node_Str"");
    addToResourceFeed(cm,conceptMapsFeed);
    page.getDefinitions().getConceptMaps().put(cm.getIdentifier(),cm);
    cm.setTag(""String_Node_Str"",n + ""String_Node_Str"");
    page.getConceptMaps().put(cm.getIdentifier(),cm);
  }
  try {
    javaReferencePlatform.canonicaliseXml(page.getFolders().dstDir,page.getFolders().dstDir + n + ""String_Node_Str"",page.getFolders().dstDir + n + ""String_Node_Str"");
  }
 catch (  Throwable t) {
    System.out.println(""String_Node_Str"" + page.getFolders().dstDir + n+ ""String_Node_Str"");
    t.printStackTrace(System.err);
    TextFile.stringToFile(t.getMessage(),page.getFolders().dstDir + n + ""String_Node_Str"");
  }
  String json;
  try {
    json=javaReferencePlatform.convertToJson(page.getFolders().dstDir,page.getFolders().dstDir + n + ""String_Node_Str"",page.getFolders().dstDir + n + ""String_Node_Str"");
  }
 catch (  Throwable t) {
    System.out.println(""String_Node_Str"" + page.getFolders().dstDir + n+ ""String_Node_Str"");
    t.printStackTrace(System.err);
    TextFile.stringToFile(t.getMessage(),page.getFolders().dstDir + n + ""String_Node_Str"");
    json=t.getMessage();
  }
  String json2=""String_Node_Str"" + Utilities.escapeXml(e.getDescription()) + ""String_Node_Str""+ page.getFolders().dstDir+ n+ ""String_Node_Str""+ page.getFolders().dstDir+ n+ ""String_Node_Str""+ Utilities.escapeXml(json)+ ""String_Node_Str"";
  json=""String_Node_Str"" + Utilities.escapeXml(e.getDescription()) + ""String_Node_Str""+ Utilities.escapeXml(json)+ ""String_Node_Str"";
  String html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",json);
  html=page.processPageIncludes(n + ""String_Node_Str"",html,resource == null ? ""String_Node_Str"" + rt : ""String_Node_Str"" + resource.getName(),null,null);
  TextFile.stringToFile(html,page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerExternal(n + ""String_Node_Str"");
  e.setJson(json2);
  builder=factory.newDocumentBuilder();
  xdoc=builder.parse(new CSFileInputStream(new CSFile(page.getFolders().dstDir + n + ""String_Node_Str"")));
  XhtmlGenerator xhtml=new XhtmlGenerator(new ExampleAdorner(page.getDefinitions()));
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  xhtml.generate(xdoc,b,n.toUpperCase().substring(0,1) + n.substring(1),Utilities.noString(e.getId()) ? e.getDescription() : e.getDescription() + ""String_Node_Str"" + e.getId()+ ""String_Node_Str"",0,true,n + ""String_Node_Str"");
  html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",b.toString());
  html=page.processPageIncludes(n + ""String_Node_Str"",html,resource == null ? ""String_Node_Str"" + rt : ""String_Node_Str"" + resource.getName(),null,null);
  TextFile.stringToFile(html,page.getFolders().dstDir + n + ""String_Node_Str"");
  if (e.isInBook()) {
    XhtmlDocument d=new XhtmlParser().parse(new CSFileInputStream(page.getFolders().dstDir + n + ""String_Node_Str""),""String_Node_Str"");
    XhtmlNode pre=d.getElement(""String_Node_Str"").getElement(""String_Node_Str"").getElement(""String_Node_Str"");
    e.setXhtm(b.toString());
  }
  if (!Utilities.noString(e.getId()))   Utilities.copyFile(new CSFile(page.getFolders().dstDir + n + ""String_Node_Str""),new CSFile(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ n+ ""String_Node_Str""+ e.getId()+ ""String_Node_Str""));
 else   Utilities.copyFile(new CSFile(page.getFolders().dstDir + n + ""String_Node_Str""),new CSFile(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ n+ ""String_Node_Str""));
  html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",narrative == null ? ""String_Node_Str"" : narrative);
  html=page.processPageIncludes(n + ""String_Node_Str"",html,resource == null ? ""String_Node_Str"" + rt : ""String_Node_Str"" + resource.getName(),null,null);
  TextFile.stringToFile(html,page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerExternal(n + ""String_Node_Str"");
  page.getEpub().registerExternal(n + ""String_Node_Str"");
  page.getEpub().registerExternal(n + ""String_Node_Str"");
}","private void processExample(Example e,String resourceName,Profile profile) throws Exception {
  if (e.getType() == ExampleType.Tool)   return;
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document xdoc;
  String narrative=null;
  String n=e.getFileTitle();
  if (!e.getPath().exists())   throw new Exception(""String_Node_Str"");
  xdoc=e.getXml() == null ? builder.parse(new CSFileInputStream(e.getPath())) : e.getXml();
  XmlGenerator xmlgen=new XmlGenerator();
  if (xdoc.getDocumentElement().getLocalName().equals(""String_Node_Str""))   xmlgen.generate(xdoc.getDocumentElement(),new CSFile(page.getFolders().dstDir + n + ""String_Node_Str""),""String_Node_Str"",xdoc.getDocumentElement().getLocalName());
 else {
    xmlgen.generate(xdoc.getDocumentElement(),new CSFile(page.getFolders().dstDir + n + ""String_Node_Str""),""String_Node_Str"",xdoc.getDocumentElement().getLocalName());
  }
  String rt=null;
  Resource r;
  try {
    XmlParser xml=new XmlParser();
    XhtmlNode combined=new XhtmlNode(NodeType.Element,""String_Node_Str"");
    Resource rf=xml.parse(new CSFileInputStream(page.getFolders().dstDir + n + ""String_Node_Str""));
    if (rf.getId() == null)     throw new Exception(""String_Node_Str"" + n + ""String_Node_Str"");
    boolean wantSave=false;
    if (rf instanceof Bundle) {
      rt=((Bundle)rf).getEntry().get(0).getResource().getResourceType().toString();
      for (      BundleEntryComponent ae : ((Bundle)rf).getEntry()) {
        r=ae.getResource();
        if (r.getId() == null)         throw new Exception(""String_Node_Str"" + n + ""String_Node_Str"");
        if (r instanceof DomainResource) {
          DomainResource dr=(DomainResource)r;
          wantSave=wantSave || (dr.getText() == null || dr.getText().getDiv() == null);
          if (true) {
            NarrativeGenerator gen=new NarrativeGenerator(""String_Node_Str"",page.getWorkerContext().clone(new SpecificationInternalClient(page,(Bundle)r)));
            gen.generate(dr);
          }
          if (dr.getText() != null && dr.getText().getDiv() != null) {
            combined.getChildNodes().add(dr.getText().getDiv());
            combined.addTag(""String_Node_Str"");
          }
        }
      }
      narrative=new XhtmlComposer().setXmlOnly(true).compose(combined);
      if (true) {
        new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + n + ""String_Node_Str""),rf,true,true);
        xdoc=builder.parse(new CSFileInputStream(page.getFolders().dstDir + n + ""String_Node_Str""));
      }
      r=null;
    }
 else {
      r=rf;
      rt=r.getResourceType().toString();
      if (r instanceof DomainResource) {
        DomainResource dr=(DomainResource)r;
        wantSave=dr.getText() == null || dr.getText().getDiv() == null;
        if (wantSave) {
          NarrativeGenerator gen=new NarrativeGenerator(""String_Node_Str"",page.getWorkerContext().clone(new SpecificationInternalClient(page,null)));
          gen.generate(dr);
        }
        if (dr.getText() != null && dr.getText().getDiv() != null) {
          narrative=new XhtmlComposer().compose(dr.getText().getDiv());
          if (true) {
            new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + n + ""String_Node_Str""),r,true,true);
            xdoc=builder.parse(new CSFileInputStream(page.getFolders().dstDir + n + ""String_Node_Str""));
          }
        }
 else         narrative=""String_Node_Str"";
      }
    }
  }
 catch (  Exception ex) {
    XhtmlNode xhtml=new XhtmlNode(NodeType.Element,""String_Node_Str"");
    xhtml.addTag(""String_Node_Str"").setAttribute(""String_Node_Str"",""String_Node_Str"").addText(""String_Node_Str"" + ex.getMessage());
    narrative=new XhtmlComposer().compose(xhtml);
    r=null;
  }
  if (r instanceof ValueSet) {
    ValueSet vs=(ValueSet)r;
    new ValueSetValidator(page.getWorkerContext()).validate(""String_Node_Str"" + n,vs,false,false);
    if (vs.getIdentifier() == null)     throw new Exception(""String_Node_Str"" + e.getPath().getAbsolutePath() + ""String_Node_Str"");
    vs.setTag(""String_Node_Str"",n + ""String_Node_Str"");
    if (vs.getIdentifier().startsWith(""String_Node_Str""))     page.getValueSets().put(vs.getIdentifier(),vs);
    if (vs.getDefine() != null) {
      page.getCodeSystems().put(vs.getDefine().getSystem().toString(),vs);
    }
    addToResourceFeed(vs,valueSetsFeed);
    page.getDefinitions().getValuesets().put(vs.getIdentifier(),vs);
    if (vs.getDefine() != null) {
      page.getDefinitions().getCodeSystems().put(vs.getDefine().getSystem(),vs);
    }
  }
 else   if (r instanceof ConceptMap) {
    ConceptMap cm=(ConceptMap)r;
    new ConceptMapValidator(page.getDefinitions(),e.getPath().getAbsolutePath()).validate(cm,false);
    if (cm.getIdentifier() == null)     throw new Exception(""String_Node_Str"" + e.getPath().getAbsolutePath() + ""String_Node_Str"");
    addToResourceFeed(cm,conceptMapsFeed);
    page.getDefinitions().getConceptMaps().put(cm.getIdentifier(),cm);
    cm.setTag(""String_Node_Str"",n + ""String_Node_Str"");
    page.getConceptMaps().put(cm.getIdentifier(),cm);
  }
  try {
    javaReferencePlatform.canonicaliseXml(page.getFolders().dstDir,page.getFolders().dstDir + n + ""String_Node_Str"",page.getFolders().dstDir + n + ""String_Node_Str"");
  }
 catch (  Throwable t) {
    System.out.println(""String_Node_Str"" + page.getFolders().dstDir + n+ ""String_Node_Str"");
    t.printStackTrace(System.err);
    TextFile.stringToFile(t.getMessage(),page.getFolders().dstDir + n + ""String_Node_Str"");
  }
  String json;
  try {
    json=javaReferencePlatform.convertToJson(page.getFolders().dstDir,page.getFolders().dstDir + n + ""String_Node_Str"",page.getFolders().dstDir + n + ""String_Node_Str"");
  }
 catch (  Throwable t) {
    System.out.println(""String_Node_Str"" + page.getFolders().dstDir + n+ ""String_Node_Str"");
    t.printStackTrace(System.err);
    TextFile.stringToFile(t.getMessage(),page.getFolders().dstDir + n + ""String_Node_Str"");
    json=t.getMessage();
  }
  String json2=""String_Node_Str"" + Utilities.escapeXml(e.getDescription()) + ""String_Node_Str""+ page.getFolders().dstDir+ n+ ""String_Node_Str""+ page.getFolders().dstDir+ n+ ""String_Node_Str""+ Utilities.escapeXml(json)+ ""String_Node_Str"";
  json=""String_Node_Str"" + Utilities.escapeXml(e.getDescription()) + ""String_Node_Str""+ Utilities.escapeXml(json)+ ""String_Node_Str"";
  String html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",json);
  html=page.processPageIncludes(n + ""String_Node_Str"",html,resourceName == null ? ""String_Node_Str"" + rt : ""String_Node_Str"" + resourceName,null,null);
  TextFile.stringToFile(html,page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerExternal(n + ""String_Node_Str"");
  e.setJson(json2);
  builder=factory.newDocumentBuilder();
  xdoc=builder.parse(new CSFileInputStream(new CSFile(page.getFolders().dstDir + n + ""String_Node_Str"")));
  XhtmlGenerator xhtml=new XhtmlGenerator(new ExampleAdorner(page.getDefinitions()));
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  xhtml.generate(xdoc,b,n.toUpperCase().substring(0,1) + n.substring(1),Utilities.noString(e.getId()) ? e.getDescription() : e.getDescription() + ""String_Node_Str"" + e.getId()+ ""String_Node_Str"",0,true,n + ""String_Node_Str"");
  html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",b.toString());
  html=page.processPageIncludes(n + ""String_Node_Str"",html,resourceName == null ? ""String_Node_Str"" + rt : ""String_Node_Str"" + resourceName,null,null);
  TextFile.stringToFile(html,page.getFolders().dstDir + n + ""String_Node_Str"");
  if (e.isInBook()) {
    XhtmlDocument d=new XhtmlParser().parse(new CSFileInputStream(page.getFolders().dstDir + n + ""String_Node_Str""),""String_Node_Str"");
    XhtmlNode pre=d.getElement(""String_Node_Str"").getElement(""String_Node_Str"").getElement(""String_Node_Str"");
    e.setXhtm(b.toString());
  }
  if (!Utilities.noString(e.getId()))   Utilities.copyFile(new CSFile(page.getFolders().dstDir + n + ""String_Node_Str""),new CSFile(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ n+ ""String_Node_Str""+ e.getId()+ ""String_Node_Str""));
 else   Utilities.copyFile(new CSFile(page.getFolders().dstDir + n + ""String_Node_Str""),new CSFile(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ n+ ""String_Node_Str""));
  html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",narrative == null ? ""String_Node_Str"" : narrative);
  html=page.processPageIncludes(n + ""String_Node_Str"",html,resourceName == null ? ""String_Node_Str"" + rt : ""String_Node_Str"" + resourceName,null,null);
  TextFile.stringToFile(html,page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerExternal(n + ""String_Node_Str"");
  page.getEpub().registerExternal(n + ""String_Node_Str"");
  page.getEpub().registerExternal(n + ""String_Node_Str"");
}",0.994912067249198
24122,"public void write(int lvl,StringBuilder s,ValueSet vs,List<ConceptDefinitionComponent> list,ConceptDefinitionComponent owner,Map<String,ConceptDefinitionComponent> handled) throws Exception {
  if (!select && children.size() == 0)   return;
  if (handled.containsKey(code)) {
    if (owner == null)     throw new Exception(""String_Node_Str"");
    ToolingExtensions.addSubsumes(owner,code);
    s.append(""String_Node_Str"" + Integer.toString(lvl) + ""String_Node_Str"");
    for (int i=1; i < lvl; i++)     s.append(""String_Node_Str"");
    s.append(""String_Node_Str"" + Utilities.escapeXml(Utilities.nmtokenize(code)) + ""String_Node_Str""+ Utilities.escapeXml(code)+ ""String_Node_Str"");
  }
 else {
    ConceptDefinitionComponent concept=new ValueSet.ConceptDefinitionComponent();
    handled.put(code,concept);
    concept.setCode(code);
    concept.setDisplay(display);
    concept.setDefinition(textDefinition);
    concept.setAbstract(!select);
    String d=""String_Node_Str"";
    if (deprecated) {
      ToolingExtensions.markDeprecated(concept);
      d=""String_Node_Str"";
    }
    list.add(concept);
    s.append(""String_Node_Str"" + (deprecated ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Integer.toString(lvl)+ ""String_Node_Str"");
    for (int i=1; i < lvl; i++)     s.append(""String_Node_Str"");
    if (select) {
      s.append(Utilities.escapeXml(code) + ""String_Node_Str"" + Utilities.escapeXml(Utilities.nmtokenize(code))+ ""String_Node_Str""+ d+ ""String_Node_Str""+ Utilities.escapeXml(display)+ ""String_Node_Str"");
    }
 else     s.append(""String_Node_Str"" + Utilities.escapeXml(code) + ""String_Node_Str""+ d+ ""String_Node_Str""+ Utilities.escapeXml(Utilities.nmtokenize(code))+ ""String_Node_Str"");
    if (definition != null)     s.append(definition);
    s.append(""String_Node_Str"");
    for (    CodeInfo child : children) {
      child.write(lvl + 1,s,vs,concept.getConcept(),concept,handled);
    }
  }
}","public void write(int lvl,StringBuilder s,ValueSet vs,List<ConceptDefinitionComponent> list,ConceptDefinitionComponent owner,Map<String,ConceptDefinitionComponent> handled) throws Exception {
  if (!select && children.size() == 0)   return;
  if (handled.containsKey(code)) {
    if (owner == null)     throw new Exception(""String_Node_Str"");
    ToolingExtensions.addSubsumes(owner,code);
    s.append(""String_Node_Str"").append(Integer.toString(lvl)).append(""String_Node_Str"");
    for (int i=1; i < lvl; i++)     s.append(""String_Node_Str"");
    s.append(""String_Node_Str"").append(Utilities.escapeXml(Utilities.nmtokenize(code))).append(""String_Node_Str"").append(Utilities.escapeXml(code)).append(""String_Node_Str"");
  }
 else {
    ConceptDefinitionComponent concept=new ValueSet.ConceptDefinitionComponent();
    handled.put(code,concept);
    concept.setCode(code);
    concept.setDisplay(display);
    concept.setDefinition(textDefinition);
    concept.setAbstract(!select);
    String d=""String_Node_Str"";
    if (deprecated) {
      ToolingExtensions.markDeprecated(concept);
      d=""String_Node_Str"";
    }
    list.add(concept);
    s.append(""String_Node_Str"" + (deprecated ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Integer.toString(lvl)+ ""String_Node_Str"");
    for (int i=1; i < lvl; i++)     s.append(""String_Node_Str"");
    if (select) {
      s.append(Utilities.escapeXml(code) + ""String_Node_Str"" + Utilities.escapeXml(Utilities.nmtokenize(code))+ ""String_Node_Str""+ d+ ""String_Node_Str""+ Utilities.escapeXml(display)+ ""String_Node_Str"");
    }
 else     s.append(""String_Node_Str"" + Utilities.escapeXml(code) + ""String_Node_Str""+ d+ ""String_Node_Str""+ Utilities.escapeXml(Utilities.nmtokenize(code))+ ""String_Node_Str"");
    if (definition != null)     s.append(definition);
    s.append(""String_Node_Str"");
    for (    CodeInfo child : children) {
      child.write(lvl + 1,s,vs,concept.getConcept(),concept,handled);
    }
  }
}",0.9733333333333334
24123,"private void generateConceptMapV2(BindingSpecification cd,String filename,String src,String srcCS) throws Exception {
  ConceptMap cm=new ConceptMap();
  cm.setIdentifier(""String_Node_Str"" + Utilities.fileTitle(filename));
  cm.setName(""String_Node_Str"" + cd.getName());
  cm.setPublisher(""String_Node_Str"");
  cm.getTelecom().add(org.hl7.fhir.instance.model.Factory.newContactPoint(ContactPointSystem.URL,Utilities.noString(cd.getWebSite()) ? ""String_Node_Str"" : cd.getWebSite()));
  cm.getTelecom().add(org.hl7.fhir.instance.model.Factory.newContactPoint(ContactPointSystem.EMAIL,Utilities.noString(cd.getEmail()) ? ""String_Node_Str"" : cd.getEmail()));
  if (!Utilities.noString(cd.getCopyright()))   cm.setCopyright(cd.getCopyright());
  Set<String> tbls=new HashSet<String>();
  cm.setStatus(ConceptMap.ValuesetStatus.DRAFT);
  cm.setDateElement(Factory.nowDateTime());
  cm.setSource(Factory.makeReference(src));
  cm.setTarget(Factory.makeReference(cd.getV2Map()));
  for (  DefinedCode c : cd.getCodes()) {
    if (!Utilities.noString(c.getV2Map())) {
      for (      String m : c.getV2Map().split(""String_Node_Str"")) {
        ConceptMapElementComponent cc=new ConceptMap.ConceptMapElementComponent();
        cc.setCodeSystem(srcCS);
        cc.setCode(c.getCode());
        ConceptMapElementMapComponent map=new ConceptMap.ConceptMapElementMapComponent();
        cc.getMap().add(map);
        cm.getElement().add(cc);
        String[] n=m.split(""String_Node_Str"");
        if (n.length > 1)         map.setComments(n[1].substring(0,n[1].length() - 1));
        n=n[0].split(""String_Node_Str"");
        tbls.add(n[0].substring(1));
        map.setCodeSystem(""String_Node_Str"" + n[0].substring(1));
        map.setCode(n[1].trim());
        if (n[0].charAt(0) == '=')         map.setEquivalence(ConceptEquivalence.EQUAL);
        if (n[0].charAt(0) == '~')         map.setEquivalence(ConceptEquivalence.EQUIVALENT);
        if (n[0].charAt(0) == '>')         map.setEquivalence(ConceptEquivalence.WIDER);
        if (n[0].charAt(0) == '<')         map.setEquivalence(ConceptEquivalence.NARROWER);
      }
    }
  }
  StringBuilder b=new StringBuilder();
  boolean first=false;
  for (  String s : tbls) {
    if (first)     b.append(""String_Node_Str"");
    first=false;
    b.append(s);
  }
  cm.setDescription(""String_Node_Str"" + b.toString() + ""String_Node_Str"");
  NarrativeGenerator gen=new NarrativeGenerator(""String_Node_Str"",page.getWorkerContext());
  gen.generate(cm);
  JsonComposer json=new JsonComposer();
  json.compose(new FileOutputStream(page.getFolders().dstDir + Utilities.changeFileExt(filename,""String_Node_Str"")),cm,true);
  String n=Utilities.changeFileExt(filename,""String_Node_Str"");
  jsonToXhtml(n,cm.getName(),resource2Json(cm),""String_Node_Str"");
  XmlComposer xml=new XmlComposer();
  xml.compose(new FileOutputStream(page.getFolders().dstDir + Utilities.changeFileExt(filename,""String_Node_Str"")),cm,true);
  cloneToXhtml(n,cm.getName(),false,""String_Node_Str"");
  String narrative=new XhtmlComposer().setXmlOnly(true).compose(cm.getText().getDiv());
  String html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",narrative);
  html=page.processPageIncludes(Utilities.changeFileExt(filename,""String_Node_Str""),html,""String_Node_Str"",null,null);
  TextFile.stringToFile(html,page.getFolders().dstDir + Utilities.changeFileExt(filename,""String_Node_Str""));
  AtomEntry<ConceptMap> e=new AtomEntry<ConceptMap>();
  e.setResource(cm);
  e.setId(cm.getIdentifier());
  e.getLinks().put(""String_Node_Str"",Utilities.changeFileExt(filename,""String_Node_Str""));
  e.getLinks().put(""String_Node_Str"",Utilities.changeFileExt(filename,""String_Node_Str""));
  conceptMapsFeed.getEntryList().add(e);
  page.getConceptMaps().put(cm.getIdentifier(),e);
  page.getEpub().registerFile(n + ""String_Node_Str"",cm.getName(),EPubManager.XHTML_TYPE);
  page.getEpub().registerFile(n + ""String_Node_Str"",cm.getName(),EPubManager.XHTML_TYPE);
  page.getEpub().registerFile(n + ""String_Node_Str"",cm.getName(),EPubManager.XHTML_TYPE);
}","private void generateConceptMapV2(BindingSpecification cd,String filename,String src,String srcCS) throws Exception {
  ConceptMap cm=new ConceptMap();
  cm.setIdentifier(""String_Node_Str"" + Utilities.fileTitle(filename));
  cm.setName(""String_Node_Str"" + cd.getName());
  cm.setPublisher(""String_Node_Str"");
  cm.getTelecom().add(org.hl7.fhir.instance.model.Factory.newContactPoint(ContactPointSystem.URL,Utilities.noString(cd.getWebSite()) ? ""String_Node_Str"" : cd.getWebSite()));
  cm.getTelecom().add(org.hl7.fhir.instance.model.Factory.newContactPoint(ContactPointSystem.EMAIL,Utilities.noString(cd.getEmail()) ? ""String_Node_Str"" : cd.getEmail()));
  if (!Utilities.noString(cd.getCopyright()))   cm.setCopyright(cd.getCopyright());
  Set<String> tbls=new HashSet<String>();
  cm.setStatus(ConceptMap.ValuesetStatus.DRAFT);
  cm.setDateElement(Factory.nowDateTime());
  cm.setSource(Factory.makeReference(src));
  cm.setTarget(Factory.makeReference(cd.getV2Map()));
  for (  DefinedCode c : cd.getCodes()) {
    if (!Utilities.noString(c.getV2Map())) {
      for (      String m : c.getV2Map().split(""String_Node_Str"")) {
        ConceptMapElementComponent cc=new ConceptMap.ConceptMapElementComponent();
        cc.setCodeSystem(srcCS);
        cc.setCode(c.getCode());
        ConceptMapElementMapComponent map=new ConceptMap.ConceptMapElementMapComponent();
        cc.getMap().add(map);
        cm.getElement().add(cc);
        String[] n=m.split(""String_Node_Str"");
        if (n.length > 1)         map.setComments(n[1].substring(0,n[1].length() - 1));
        n=n[0].split(""String_Node_Str"");
        tbls.add(n[0].substring(1));
        map.setCodeSystem(""String_Node_Str"" + n[0].substring(1));
        map.setCode(n[1].trim());
        if (n[0].charAt(0) == '=')         map.setEquivalence(ConceptEquivalence.EQUAL);
        if (n[0].charAt(0) == '~')         map.setEquivalence(ConceptEquivalence.EQUIVALENT);
        if (n[0].charAt(0) == '>')         map.setEquivalence(ConceptEquivalence.WIDER);
        if (n[0].charAt(0) == '<')         map.setEquivalence(ConceptEquivalence.NARROWER);
      }
    }
  }
  StringBuilder b=new StringBuilder();
  boolean first=false;
  for (  String s : tbls) {
    if (first)     b.append(""String_Node_Str"");
    first=true;
    b.append(s);
  }
  cm.setDescription(""String_Node_Str"" + b.toString() + ""String_Node_Str"");
  NarrativeGenerator gen=new NarrativeGenerator(""String_Node_Str"",page.getWorkerContext());
  gen.generate(cm);
  JsonComposer json=new JsonComposer();
  json.compose(new FileOutputStream(page.getFolders().dstDir + Utilities.changeFileExt(filename,""String_Node_Str"")),cm,true);
  String n=Utilities.changeFileExt(filename,""String_Node_Str"");
  jsonToXhtml(n,cm.getName(),resource2Json(cm),""String_Node_Str"");
  XmlComposer xml=new XmlComposer();
  xml.compose(new FileOutputStream(page.getFolders().dstDir + Utilities.changeFileExt(filename,""String_Node_Str"")),cm,true);
  cloneToXhtml(n,cm.getName(),false,""String_Node_Str"");
  String narrative=new XhtmlComposer().setXmlOnly(true).compose(cm.getText().getDiv());
  String html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",narrative);
  html=page.processPageIncludes(Utilities.changeFileExt(filename,""String_Node_Str""),html,""String_Node_Str"",null,null);
  TextFile.stringToFile(html,page.getFolders().dstDir + Utilities.changeFileExt(filename,""String_Node_Str""));
  AtomEntry<ConceptMap> e=new AtomEntry<ConceptMap>();
  e.setResource(cm);
  e.setId(cm.getIdentifier());
  e.getLinks().put(""String_Node_Str"",Utilities.changeFileExt(filename,""String_Node_Str""));
  e.getLinks().put(""String_Node_Str"",Utilities.changeFileExt(filename,""String_Node_Str""));
  conceptMapsFeed.getEntryList().add(e);
  page.getConceptMaps().put(cm.getIdentifier(),e);
  page.getEpub().registerFile(n + ""String_Node_Str"",cm.getName(),EPubManager.XHTML_TYPE);
  page.getEpub().registerFile(n + ""String_Node_Str"",cm.getName(),EPubManager.XHTML_TYPE);
  page.getEpub().registerFile(n + ""String_Node_Str"",cm.getName(),EPubManager.XHTML_TYPE);
}",0.9991445680068436
24124,"private void generateConceptMapV3(BindingSpecification cd,String filename,String src,String srcCS) throws Exception {
  ConceptMap cm=new ConceptMap();
  cm.setIdentifier(""String_Node_Str"" + Utilities.fileTitle(filename));
  cm.setName(""String_Node_Str"" + cd.getName());
  cm.setPublisher(""String_Node_Str"");
  cm.getTelecom().add(org.hl7.fhir.instance.model.Factory.newContactPoint(ContactPointSystem.URL,Utilities.noString(cd.getWebSite()) ? ""String_Node_Str"" : cd.getWebSite()));
  cm.getTelecom().add(org.hl7.fhir.instance.model.Factory.newContactPoint(ContactPointSystem.EMAIL,Utilities.noString(cd.getEmail()) ? ""String_Node_Str"" : cd.getEmail()));
  if (!Utilities.noString(cd.getCopyright()))   cm.setCopyright(cd.getCopyright());
  Set<String> tbls=new HashSet<String>();
  cm.setStatus(ConceptMap.ValuesetStatus.DRAFT);
  cm.setDateElement(Factory.nowDateTime());
  cm.setSource(Factory.makeReference(src));
  cm.setTarget(Factory.makeReference(cd.getV3Map()));
  for (  DefinedCode c : cd.getCodes()) {
    if (!Utilities.noString(c.getV3Map())) {
      for (      String m : c.getV3Map().split(""String_Node_Str"")) {
        ConceptMapElementComponent cc=new ConceptMap.ConceptMapElementComponent();
        cc.setCodeSystem(srcCS);
        cc.setCode(c.getCode());
        ConceptMapElementMapComponent map=new ConceptMap.ConceptMapElementMapComponent();
        cc.getMap().add(map);
        cm.getElement().add(cc);
        String[] n=m.split(""String_Node_Str"");
        if (n.length > 1)         map.setComments(n[1].substring(0,n[1].length() - 1));
        n=n[0].split(""String_Node_Str"");
        if (n.length != 2)         throw new Exception(""String_Node_Str"" + cd.getName() + ""String_Node_Str""+ c.getCode()+ ""String_Node_Str""+ m+ ""String_Node_Str"");
        tbls.add(n[0].substring(1));
        map.setCodeSystem(""String_Node_Str"" + n[0].substring(1));
        map.setCode(n[1]);
        if (n[0].charAt(0) == '=')         map.setEquivalence(ConceptEquivalence.EQUAL);
        if (n[0].charAt(0) == '~')         map.setEquivalence(ConceptEquivalence.EQUIVALENT);
        if (n[0].charAt(0) == '>')         map.setEquivalence(ConceptEquivalence.NARROWER);
        if (n[0].charAt(0) == '<')         map.setEquivalence(ConceptEquivalence.WIDER);
      }
    }
  }
  StringBuilder b=new StringBuilder();
  boolean first=false;
  for (  String s : tbls) {
    if (first)     b.append(""String_Node_Str"");
    first=false;
    b.append(s);
  }
  cm.setDescription(""String_Node_Str"" + b.toString() + ""String_Node_Str"");
  NarrativeGenerator gen=new NarrativeGenerator(""String_Node_Str"",page.getWorkerContext());
  gen.generate(cm);
  JsonComposer json=new JsonComposer();
  json.compose(new FileOutputStream(page.getFolders().dstDir + Utilities.changeFileExt(filename,""String_Node_Str"")),cm,true);
  String n=Utilities.changeFileExt(filename,""String_Node_Str"");
  jsonToXhtml(n,cm.getName(),resource2Json(cm),""String_Node_Str"");
  XmlComposer xml=new XmlComposer();
  xml.compose(new FileOutputStream(page.getFolders().dstDir + Utilities.changeFileExt(filename,""String_Node_Str"")),cm,true);
  cloneToXhtml(n,cm.getName(),false,""String_Node_Str"");
  String narrative=new XhtmlComposer().setXmlOnly(true).compose(cm.getText().getDiv());
  String html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",narrative);
  html=page.processPageIncludes(Utilities.changeFileExt(filename,""String_Node_Str""),html,""String_Node_Str"",null,null);
  TextFile.stringToFile(html,page.getFolders().dstDir + Utilities.changeFileExt(filename,""String_Node_Str""));
  AtomEntry<ConceptMap> e=new AtomEntry<ConceptMap>();
  e.setResource(cm);
  e.setId(cm.getIdentifier());
  e.getLinks().put(""String_Node_Str"",Utilities.changeFileExt(filename,""String_Node_Str""));
  e.getLinks().put(""String_Node_Str"",Utilities.changeFileExt(filename,""String_Node_Str""));
  conceptMapsFeed.getEntryList().add(e);
  page.getConceptMaps().put(cm.getIdentifier(),e);
  page.getEpub().registerFile(n + ""String_Node_Str"",cm.getName(),EPubManager.XHTML_TYPE);
  page.getEpub().registerFile(n + ""String_Node_Str"",cm.getName(),EPubManager.XHTML_TYPE);
  page.getEpub().registerFile(n + ""String_Node_Str"",cm.getName(),EPubManager.XHTML_TYPE);
}","private void generateConceptMapV3(BindingSpecification cd,String filename,String src,String srcCS) throws Exception {
  ConceptMap cm=new ConceptMap();
  cm.setIdentifier(""String_Node_Str"" + Utilities.fileTitle(filename));
  cm.setName(""String_Node_Str"" + cd.getName());
  cm.setPublisher(""String_Node_Str"");
  cm.getTelecom().add(org.hl7.fhir.instance.model.Factory.newContactPoint(ContactPointSystem.URL,Utilities.noString(cd.getWebSite()) ? ""String_Node_Str"" : cd.getWebSite()));
  cm.getTelecom().add(org.hl7.fhir.instance.model.Factory.newContactPoint(ContactPointSystem.EMAIL,Utilities.noString(cd.getEmail()) ? ""String_Node_Str"" : cd.getEmail()));
  if (!Utilities.noString(cd.getCopyright()))   cm.setCopyright(cd.getCopyright());
  Set<String> tbls=new HashSet<String>();
  cm.setStatus(ConceptMap.ValuesetStatus.DRAFT);
  cm.setDateElement(Factory.nowDateTime());
  cm.setSource(Factory.makeReference(src));
  cm.setTarget(Factory.makeReference(cd.getV3Map()));
  for (  DefinedCode c : cd.getCodes()) {
    if (!Utilities.noString(c.getV3Map())) {
      for (      String m : c.getV3Map().split(""String_Node_Str"")) {
        ConceptMapElementComponent cc=new ConceptMap.ConceptMapElementComponent();
        cc.setCodeSystem(srcCS);
        cc.setCode(c.getCode());
        ConceptMapElementMapComponent map=new ConceptMap.ConceptMapElementMapComponent();
        cc.getMap().add(map);
        cm.getElement().add(cc);
        String[] n=m.split(""String_Node_Str"");
        if (n.length > 1)         map.setComments(n[1].substring(0,n[1].length() - 1));
        n=n[0].split(""String_Node_Str"");
        if (n.length != 2)         throw new Exception(""String_Node_Str"" + cd.getName() + ""String_Node_Str""+ c.getCode()+ ""String_Node_Str""+ m+ ""String_Node_Str"");
        tbls.add(n[0].substring(1));
        map.setCodeSystem(""String_Node_Str"" + n[0].substring(1));
        map.setCode(n[1]);
        if (n[0].charAt(0) == '=')         map.setEquivalence(ConceptEquivalence.EQUAL);
        if (n[0].charAt(0) == '~')         map.setEquivalence(ConceptEquivalence.EQUIVALENT);
        if (n[0].charAt(0) == '>')         map.setEquivalence(ConceptEquivalence.NARROWER);
        if (n[0].charAt(0) == '<')         map.setEquivalence(ConceptEquivalence.WIDER);
      }
    }
  }
  StringBuilder b=new StringBuilder();
  boolean first=false;
  for (  String s : tbls) {
    if (first)     b.append(""String_Node_Str"");
    first=true;
    b.append(s);
  }
  cm.setDescription(""String_Node_Str"" + b.toString() + ""String_Node_Str"");
  NarrativeGenerator gen=new NarrativeGenerator(""String_Node_Str"",page.getWorkerContext());
  gen.generate(cm);
  JsonComposer json=new JsonComposer();
  json.compose(new FileOutputStream(page.getFolders().dstDir + Utilities.changeFileExt(filename,""String_Node_Str"")),cm,true);
  String n=Utilities.changeFileExt(filename,""String_Node_Str"");
  jsonToXhtml(n,cm.getName(),resource2Json(cm),""String_Node_Str"");
  XmlComposer xml=new XmlComposer();
  xml.compose(new FileOutputStream(page.getFolders().dstDir + Utilities.changeFileExt(filename,""String_Node_Str"")),cm,true);
  cloneToXhtml(n,cm.getName(),false,""String_Node_Str"");
  String narrative=new XhtmlComposer().setXmlOnly(true).compose(cm.getText().getDiv());
  String html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",narrative);
  html=page.processPageIncludes(Utilities.changeFileExt(filename,""String_Node_Str""),html,""String_Node_Str"",null,null);
  TextFile.stringToFile(html,page.getFolders().dstDir + Utilities.changeFileExt(filename,""String_Node_Str""));
  AtomEntry<ConceptMap> e=new AtomEntry<ConceptMap>();
  e.setResource(cm);
  e.setId(cm.getIdentifier());
  e.getLinks().put(""String_Node_Str"",Utilities.changeFileExt(filename,""String_Node_Str""));
  e.getLinks().put(""String_Node_Str"",Utilities.changeFileExt(filename,""String_Node_Str""));
  conceptMapsFeed.getEntryList().add(e);
  page.getConceptMaps().put(cm.getIdentifier(),e);
  page.getEpub().registerFile(n + ""String_Node_Str"",cm.getName(),EPubManager.XHTML_TYPE);
  page.getEpub().registerFile(n + ""String_Node_Str"",cm.getName(),EPubManager.XHTML_TYPE);
  page.getEpub().registerFile(n + ""String_Node_Str"",cm.getName(),EPubManager.XHTML_TYPE);
}",0.9991761798281746
24125,"private String listTargetIds(String type) throws Exception {
  StringBuilder b=new StringBuilder();
  ResourceDefn r=page.getDefinitions().getResourceByName(type);
  if (r != null) {
    for (    Example e : r.getExamples()) {
      if (!Utilities.noString(e.getId()))       b.append(e.getId() + ""String_Node_Str"");
      if (e.getXml() != null) {
        if (e.getXml().getDocumentElement().getLocalName().equals(""String_Node_Str"")) {
          List<Element> entries=new ArrayList<Element>();
          XMLUtil.getNamedChildren(e.getXml().getDocumentElement(),""String_Node_Str"",entries);
          for (          Element c : entries) {
            String id=XMLUtil.getNamedChild(c,""String_Node_Str"").getTextContent();
            if (id.startsWith(""String_Node_Str"") && id.contains(""String_Node_Str""))             b.append(id.substring(id.indexOf(""String_Node_Str"") + 1) + ""String_Node_Str"");
 else             b.append(id + ""String_Node_Str"");
          }
        }
      }
    }
  }
 else   b.append(""String_Node_Str"");
  return b.toString();
}","private String listTargetIds(String type) throws Exception {
  StringBuilder b=new StringBuilder();
  ResourceDefn r=page.getDefinitions().getResourceByName(type);
  if (r != null) {
    for (    Example e : r.getExamples()) {
      if (!Utilities.noString(e.getId()))       b.append(e.getId()).append(""String_Node_Str"");
      if (e.getXml() != null) {
        if (e.getXml().getDocumentElement().getLocalName().equals(""String_Node_Str"")) {
          List<Element> entries=new ArrayList<Element>();
          XMLUtil.getNamedChildren(e.getXml().getDocumentElement(),""String_Node_Str"",entries);
          for (          Element c : entries) {
            String id=XMLUtil.getNamedChild(c,""String_Node_Str"").getTextContent();
            if (id.startsWith(""String_Node_Str"") && id.contains(""String_Node_Str""))             b.append(id.substring(id.indexOf(""String_Node_Str"") + 1)).append(""String_Node_Str"");
 else             b.append(id).append(""String_Node_Str"");
          }
        }
      }
    }
  }
 else   b.append(""String_Node_Str"");
  return b.toString();
}",0.9829706717123936
24126,"private void checkFragments() throws Exception {
  List<String> errors=new ArrayList<String>();
  StringBuilder s=new StringBuilder();
  s.append(""String_Node_Str"");
  int i=0;
  for (  Fragment f : fragments) {
    s.append(""String_Node_Str"" + Integer.toString(i) + ""String_Node_Str""+ f.getPage()+ ""String_Node_Str""+ f.getType()+ ""String_Node_Str"");
    s.append(f.getXml());
    s.append(""String_Node_Str"");
    i++;
  }
  s.append(""String_Node_Str"");
  String err=javaReferencePlatform.checkFragments(page.getFolders().dstDir,s.toString(),false);
  if (err == null)   throw new Exception(""String_Node_Str"");
  if (!err.startsWith(""String_Node_Str""))   throw new Exception(err);
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document errDoc=builder.parse(new ByteArrayInputStream(err.getBytes()));
  Element result=XMLUtil.getFirstChild(errDoc.getDocumentElement());
  while (result != null) {
    String id=result.getAttribute(""String_Node_Str"");
    String outcome=result.getAttribute(""String_Node_Str"");
    if (!""String_Node_Str"".equals(outcome)) {
      Fragment f=fragments.get(Integer.parseInt(id));
      String msg=""String_Node_Str"" + f.getPage() + ""String_Node_Str""+ result.getAttribute(""String_Node_Str"")+ ""String_Node_Str""+ f.getXml();
      page.log(msg,LogMessageType.Error);
      page.log(""String_Node_Str"",LogMessageType.Error);
      errors.add(msg);
    }
    result=XMLUtil.getNextSibling(result);
  }
  if (errors.size() > 0)   throw new Exception(""String_Node_Str"");
}","private void checkFragments() throws Exception {
  List<String> errors=new ArrayList<String>();
  StringBuilder s=new StringBuilder();
  s.append(""String_Node_Str"");
  int i=0;
  for (  Fragment f : fragments) {
    s.append(""String_Node_Str"").append(Integer.toString(i)).append(""String_Node_Str"").append(f.getPage()).append(""String_Node_Str"").append(f.getType()).append(""String_Node_Str"");
    s.append(f.getXml());
    s.append(""String_Node_Str"");
    i++;
  }
  s.append(""String_Node_Str"");
  String err=javaReferencePlatform.checkFragments(page.getFolders().dstDir,s.toString(),false);
  if (err == null)   throw new Exception(""String_Node_Str"");
  if (!err.startsWith(""String_Node_Str""))   throw new Exception(err);
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document errDoc=builder.parse(new ByteArrayInputStream(err.getBytes()));
  Element result=XMLUtil.getFirstChild(errDoc.getDocumentElement());
  while (result != null) {
    String id=result.getAttribute(""String_Node_Str"");
    String outcome=result.getAttribute(""String_Node_Str"");
    if (!""String_Node_Str"".equals(outcome)) {
      Fragment f=fragments.get(Integer.parseInt(id));
      String msg=""String_Node_Str"" + f.getPage() + ""String_Node_Str""+ result.getAttribute(""String_Node_Str"")+ ""String_Node_Str""+ f.getXml();
      page.log(msg,LogMessageType.Error);
      page.log(""String_Node_Str"",LogMessageType.Error);
      errors.add(msg);
    }
    result=XMLUtil.getNextSibling(result);
  }
  if (errors.size() > 0)   throw new Exception(""String_Node_Str"");
}",0.9573667711598746
24127,"private ValueSet buildV3CodeSystem(String id,String date,Element e,String csOid,String vsOid) throws Exception {
  StringBuilder s=new StringBuilder();
  ValueSet vs=new ValueSet();
  vs.setIdentifier(""String_Node_Str"" + id);
  vs.setName(""String_Node_Str"" + id);
  vs.setPublisher(""String_Node_Str"");
  vs.getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,""String_Node_Str""));
  vs.setStatus(ValuesetStatus.ACTIVE);
  ValueSetDefineComponent def=new ValueSet.ValueSetDefineComponent();
  vs.setDefine(def);
  def.setCaseSensitive(true);
  def.setSystem(""String_Node_Str"" + id);
  Element r=XMLUtil.getNamedChild(e,""String_Node_Str"");
  if (r != null) {
    s.append(""String_Node_Str"" + r.getAttribute(""String_Node_Str"") + ""String_Node_Str"");
    vs.setDate(new DateAndTime(r.getAttribute(""String_Node_Str"")));
  }
  if (csOid != null)   s.append(""String_Node_Str"" + csOid + ""String_Node_Str"");
  if (vsOid != null)   s.append(""String_Node_Str"" + vsOid + ""String_Node_Str"");
  r=XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(e,""String_Node_Str""),""String_Node_Str""),""String_Node_Str""),""String_Node_Str"");
  if (r == null)   r=XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(e,""String_Node_Str""),""String_Node_Str""),""String_Node_Str""),""String_Node_Str"");
  if (r != null) {
    s.append(""String_Node_Str"");
    s.append(""String_Node_Str"" + nodeToString(r) + ""String_Node_Str"");
    s.append(""String_Node_Str"");
    vs.setDescription(XMLUtil.htmlToXmlEscapedPlainText(r));
  }
 else   vs.setDescription(""String_Node_Str"");
  List<CodeInfo> codes=new ArrayList<CodeInfo>();
  Element c=XMLUtil.getFirstChild(XMLUtil.getNamedChild(e,""String_Node_Str""));
  while (c != null) {
    if (c.getNodeName().equals(""String_Node_Str"")) {
      CodeInfo ci=new CodeInfo();
      ci.select=!""String_Node_Str"".equals(c.getAttribute(""String_Node_Str""));
      r=XMLUtil.getNamedChild(c,""String_Node_Str"");
      ci.code=r == null ? null : r.getAttribute(""String_Node_Str"");
      r=XMLUtil.getNamedChild(c,""String_Node_Str"");
      ci.display=r == null ? null : r.getAttribute(""String_Node_Str"");
      r=XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(c,""String_Node_Str""),""String_Node_Str""),""String_Node_Str""),""String_Node_Str"");
      ci.definition=r == null ? null : nodeToString(r);
      ci.textDefinition=r == null ? null : nodeToText(r).trim();
      ci.deprecated=XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(c,""String_Node_Str""),""String_Node_Str""),""String_Node_Str"") != null;
      List<Element> pl=new ArrayList<Element>();
      XMLUtil.getNamedChildren(c,""String_Node_Str"",pl);
      for (      Element p : pl) {
        if (p.getAttribute(""String_Node_Str"").equals(""String_Node_Str""))         ci.parents.add(XMLUtil.getFirstChild(p).getAttribute(""String_Node_Str""));
      }
      if (!""String_Node_Str"".equals(XMLUtil.getNamedChild(c,""String_Node_Str"").getAttribute(""String_Node_Str"")))       codes.add(ci);
    }
    c=XMLUtil.getNextSibling(c);
  }
  for (  CodeInfo ci : codes) {
    for (    String p : ci.parents) {
      CodeInfo pi=null;
      for (      CodeInfo cip : codes) {
        if (cip.code != null && cip.code.equals(p))         pi=cip;
      }
      if (pi != null)       pi.children.add(ci);
    }
  }
  s.append(""String_Node_Str"");
  s.append(""String_Node_Str"");
  Map<String,ConceptDefinitionComponent> handled=new HashMap<String,ValueSet.ConceptDefinitionComponent>();
  for (  CodeInfo ci : codes) {
    if (ci.parents.size() == 0) {
      ci.write(1,s,vs,def.getConcept(),null,handled);
    }
  }
  s.append(""String_Node_Str"");
  vs.setText(new Narrative());
  vs.getText().setStatus(NarrativeStatus.GENERATED);
  vs.getText().setDiv(new XhtmlParser().parse(""String_Node_Str"" + s.toString() + ""String_Node_Str"",""String_Node_Str"").getElement(""String_Node_Str""));
  new ValueSetValidator(page.getWorkerContext()).validate(""String_Node_Str"" + id,vs,false,true);
  return vs;
}","private ValueSet buildV3CodeSystem(String id,String date,Element e,String csOid,String vsOid) throws Exception {
  StringBuilder s=new StringBuilder();
  ValueSet vs=new ValueSet();
  vs.setIdentifier(""String_Node_Str"" + id);
  vs.setName(""String_Node_Str"" + id);
  vs.setPublisher(""String_Node_Str"");
  vs.getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,""String_Node_Str""));
  vs.setStatus(ValuesetStatus.ACTIVE);
  ValueSetDefineComponent def=new ValueSet.ValueSetDefineComponent();
  vs.setDefine(def);
  def.setCaseSensitive(true);
  def.setSystem(""String_Node_Str"" + id);
  Element r=XMLUtil.getNamedChild(e,""String_Node_Str"");
  if (r != null) {
    s.append(""String_Node_Str"" + r.getAttribute(""String_Node_Str"") + ""String_Node_Str"");
    vs.setDate(new DateAndTime(r.getAttribute(""String_Node_Str"")));
  }
  if (csOid != null)   s.append(""String_Node_Str"" + csOid + ""String_Node_Str"");
  if (vsOid != null)   s.append(""String_Node_Str"" + vsOid + ""String_Node_Str"");
  r=XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(e,""String_Node_Str""),""String_Node_Str""),""String_Node_Str""),""String_Node_Str"");
  if (r == null)   r=XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(e,""String_Node_Str""),""String_Node_Str""),""String_Node_Str""),""String_Node_Str"");
  if (r != null) {
    s.append(""String_Node_Str"");
    s.append(""String_Node_Str"").append(nodeToString(r)).append(""String_Node_Str"");
    s.append(""String_Node_Str"");
    vs.setDescription(XMLUtil.htmlToXmlEscapedPlainText(r));
  }
 else   vs.setDescription(""String_Node_Str"");
  List<CodeInfo> codes=new ArrayList<CodeInfo>();
  Element c=XMLUtil.getFirstChild(XMLUtil.getNamedChild(e,""String_Node_Str""));
  while (c != null) {
    if (c.getNodeName().equals(""String_Node_Str"")) {
      CodeInfo ci=new CodeInfo();
      ci.select=!""String_Node_Str"".equals(c.getAttribute(""String_Node_Str""));
      r=XMLUtil.getNamedChild(c,""String_Node_Str"");
      ci.code=r == null ? null : r.getAttribute(""String_Node_Str"");
      r=XMLUtil.getNamedChild(c,""String_Node_Str"");
      ci.display=r == null ? null : r.getAttribute(""String_Node_Str"");
      r=XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(c,""String_Node_Str""),""String_Node_Str""),""String_Node_Str""),""String_Node_Str"");
      ci.definition=r == null ? null : nodeToString(r);
      ci.textDefinition=r == null ? null : nodeToText(r).trim();
      ci.deprecated=XMLUtil.getNamedChild(XMLUtil.getNamedChild(XMLUtil.getNamedChild(c,""String_Node_Str""),""String_Node_Str""),""String_Node_Str"") != null;
      List<Element> pl=new ArrayList<Element>();
      XMLUtil.getNamedChildren(c,""String_Node_Str"",pl);
      for (      Element p : pl) {
        if (p.getAttribute(""String_Node_Str"").equals(""String_Node_Str""))         ci.parents.add(XMLUtil.getFirstChild(p).getAttribute(""String_Node_Str""));
      }
      if (!""String_Node_Str"".equals(XMLUtil.getNamedChild(c,""String_Node_Str"").getAttribute(""String_Node_Str"")))       codes.add(ci);
    }
    c=XMLUtil.getNextSibling(c);
  }
  for (  CodeInfo ci : codes) {
    for (    String p : ci.parents) {
      CodeInfo pi=null;
      for (      CodeInfo cip : codes) {
        if (cip.code != null && cip.code.equals(p))         pi=cip;
      }
      if (pi != null)       pi.children.add(ci);
    }
  }
  s.append(""String_Node_Str"");
  s.append(""String_Node_Str"");
  Map<String,ConceptDefinitionComponent> handled=new HashMap<String,ValueSet.ConceptDefinitionComponent>();
  for (  CodeInfo ci : codes) {
    if (ci.parents.size() == 0) {
      ci.write(1,s,vs,def.getConcept(),null,handled);
    }
  }
  s.append(""String_Node_Str"");
  vs.setText(new Narrative());
  vs.getText().setStatus(NarrativeStatus.GENERATED);
  vs.getText().setDiv(new XhtmlParser().parse(""String_Node_Str"" + s.toString() + ""String_Node_Str"",""String_Node_Str"").getElement(""String_Node_Str""));
  new ValueSetValidator(page.getWorkerContext()).validate(""String_Node_Str"" + id,vs,false,true);
  return vs;
}",0.9970414201183432
24128,"private ValueSet buildV2Valueset(String id,Element e) throws Exception {
  ValueSet vs=new ValueSet();
  vs.setIdentifier(""String_Node_Str"" + id);
  vs.setName(""String_Node_Str"" + id);
  vs.setPublisher(""String_Node_Str"");
  vs.getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,""String_Node_Str""));
  vs.setStatus(ValuesetStatus.ACTIVE);
  vs.setDate(new DateAndTime(""String_Node_Str""));
  ValueSetDefineComponent def=new ValueSet.ValueSetDefineComponent();
  vs.setDefine(def);
  def.setCaseSensitive(true);
  def.setSystem(""String_Node_Str"" + id);
  StringBuilder s=new StringBuilder();
  String desc=""String_Node_Str"";
  Element c=XMLUtil.getFirstChild(e);
  Map<String,String> codes=new HashMap<String,String>();
  while (c != null) {
    desc=c.getAttribute(""String_Node_Str"");
    vs.setDescription(""String_Node_Str"" + id + ""String_Node_Str""+ desc+ ""String_Node_Str"");
    vs.setName(""String_Node_Str"" + desc);
    Element g=XMLUtil.getFirstChild(c);
    while (g != null) {
      codes.put(g.getAttribute(""String_Node_Str""),g.getAttribute(""String_Node_Str""));
      g=XMLUtil.getNextSibling(g);
    }
    c=XMLUtil.getNextSibling(c);
  }
  s.append(""String_Node_Str"" + Utilities.escapeXml(desc) + ""String_Node_Str"");
  s.append(""String_Node_Str"");
  s.append(""String_Node_Str"");
  List<String> cs=new ArrayList<String>();
  cs.addAll(codes.keySet());
  Collections.sort(cs);
  for (  String cd : cs) {
    String min=null;
    String max=null;
    c=XMLUtil.getFirstChild(e);
    while (c != null) {
      Element g=XMLUtil.getFirstChild(c);
      while (g != null) {
        if (cd.equals(g.getAttribute(""String_Node_Str""))) {
          if (min == null)           min=c.getAttribute(""String_Node_Str"");
          max=c.getAttribute(""String_Node_Str"");
        }
        g=XMLUtil.getNextSibling(g);
      }
      c=XMLUtil.getNextSibling(c);
    }
    String ver=(""String_Node_Str"".equals(min) ? ""String_Node_Str"" : ""String_Node_Str"" + min) + (""String_Node_Str"".equals(max) ? ""String_Node_Str"" : ""String_Node_Str"" + max);
    ConceptDefinitionComponent concept=new ValueSet.ConceptDefinitionComponent();
    concept.setCode(cd);
    concept.setDisplay(codes.get(cd));
    if (!(""String_Node_Str"".equals(max)))     ToolingExtensions.markDeprecated(concept);
    def.getConcept().add(concept);
    String nm=Utilities.nmtokenize(cd);
    s.append(""String_Node_Str"" + Utilities.escapeXml(cd) + ""String_Node_Str""+ Utilities.escapeXml(nm)+ ""String_Node_Str""+ Utilities.escapeXml(codes.get(cd))+ ""String_Node_Str""+ ver+ ""String_Node_Str"");
  }
  s.append(""String_Node_Str"");
  vs.setText(new Narrative());
  vs.getText().setStatus(NarrativeStatus.ADDITIONAL);
  vs.getText().setDiv(new XhtmlParser().parse(""String_Node_Str"" + s.toString() + ""String_Node_Str"",""String_Node_Str"").getElement(""String_Node_Str""));
  new ValueSetValidator(page.getWorkerContext()).validate(""String_Node_Str"" + id,vs,false,true);
  return vs;
}","private ValueSet buildV2Valueset(String id,Element e) throws Exception {
  ValueSet vs=new ValueSet();
  vs.setIdentifier(""String_Node_Str"" + id);
  vs.setName(""String_Node_Str"" + id);
  vs.setPublisher(""String_Node_Str"");
  vs.getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,""String_Node_Str""));
  vs.setStatus(ValuesetStatus.ACTIVE);
  vs.setDate(new DateAndTime(""String_Node_Str""));
  ValueSetDefineComponent def=new ValueSet.ValueSetDefineComponent();
  vs.setDefine(def);
  def.setCaseSensitive(true);
  def.setSystem(""String_Node_Str"" + id);
  StringBuilder s=new StringBuilder();
  String desc=""String_Node_Str"";
  Element c=XMLUtil.getFirstChild(e);
  Map<String,String> codes=new HashMap<String,String>();
  while (c != null) {
    desc=c.getAttribute(""String_Node_Str"");
    vs.setDescription(""String_Node_Str"" + id + ""String_Node_Str""+ desc+ ""String_Node_Str"");
    vs.setName(""String_Node_Str"" + desc);
    Element g=XMLUtil.getFirstChild(c);
    while (g != null) {
      codes.put(g.getAttribute(""String_Node_Str""),g.getAttribute(""String_Node_Str""));
      g=XMLUtil.getNextSibling(g);
    }
    c=XMLUtil.getNextSibling(c);
  }
  s.append(""String_Node_Str"").append(Utilities.escapeXml(desc)).append(""String_Node_Str"");
  s.append(""String_Node_Str"");
  s.append(""String_Node_Str"");
  List<String> cs=new ArrayList<String>();
  cs.addAll(codes.keySet());
  Collections.sort(cs);
  for (  String cd : cs) {
    String min=null;
    String max=null;
    c=XMLUtil.getFirstChild(e);
    while (c != null) {
      Element g=XMLUtil.getFirstChild(c);
      while (g != null) {
        if (cd.equals(g.getAttribute(""String_Node_Str""))) {
          if (min == null)           min=c.getAttribute(""String_Node_Str"");
          max=c.getAttribute(""String_Node_Str"");
        }
        g=XMLUtil.getNextSibling(g);
      }
      c=XMLUtil.getNextSibling(c);
    }
    String ver=(""String_Node_Str"".equals(min) ? ""String_Node_Str"" : ""String_Node_Str"" + min) + (""String_Node_Str"".equals(max) ? ""String_Node_Str"" : ""String_Node_Str"" + max);
    ConceptDefinitionComponent concept=new ValueSet.ConceptDefinitionComponent();
    concept.setCode(cd);
    concept.setDisplay(codes.get(cd));
    if (!(""String_Node_Str"".equals(max)))     ToolingExtensions.markDeprecated(concept);
    def.getConcept().add(concept);
    String nm=Utilities.nmtokenize(cd);
    s.append(""String_Node_Str"" + Utilities.escapeXml(cd) + ""String_Node_Str""+ Utilities.escapeXml(nm)+ ""String_Node_Str""+ Utilities.escapeXml(codes.get(cd))+ ""String_Node_Str""+ ver+ ""String_Node_Str"");
  }
  s.append(""String_Node_Str"");
  vs.setText(new Narrative());
  vs.getText().setStatus(NarrativeStatus.ADDITIONAL);
  vs.getText().setDiv(new XhtmlParser().parse(""String_Node_Str"" + s.toString() + ""String_Node_Str"",""String_Node_Str"").getElement(""String_Node_Str""));
  new ValueSetValidator(page.getWorkerContext()).validate(""String_Node_Str"" + id,vs,false,true);
  return vs;
}",0.9959225280326198
24129,"private ValueSet buildV2ValuesetVersioned(String id,String version,Element e) throws Exception {
  StringBuilder s=new StringBuilder();
  ValueSet vs=new ValueSet();
  vs.setIdentifier(""String_Node_Str"" + id + ""String_Node_Str""+ version);
  vs.setName(""String_Node_Str"" + id + ""String_Node_Str""+ version);
  vs.setPublisher(""String_Node_Str"");
  vs.getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,""String_Node_Str""));
  vs.setStatus(ValuesetStatus.ACTIVE);
  vs.setDate(new DateAndTime(""String_Node_Str""));
  ValueSetDefineComponent def=new ValueSet.ValueSetDefineComponent();
  vs.setDefine(def);
  def.setCaseSensitive(true);
  def.setSystem(""String_Node_Str"" + id + ""String_Node_Str""+ version);
  String desc=""String_Node_Str"";
  String minlim=null;
  String maxlim=null;
  Element c=XMLUtil.getFirstChild(e);
  Map<String,String> codes=new HashMap<String,String>();
  while (c != null) {
    if (version.equals(c.getAttribute(""String_Node_Str""))) {
      if (minlim == null)       minlim=c.getAttribute(""String_Node_Str"");
      maxlim=c.getAttribute(""String_Node_Str"");
      desc=c.getAttribute(""String_Node_Str"");
      vs.setDescription(""String_Node_Str"" + id + ""String_Node_Str""+ version+ ""String_Node_Str""+ desc+ ""String_Node_Str"");
      Element g=XMLUtil.getFirstChild(c);
      while (g != null) {
        codes.put(g.getAttribute(""String_Node_Str""),g.getAttribute(""String_Node_Str""));
        g=XMLUtil.getNextSibling(g);
      }
    }
    c=XMLUtil.getNextSibling(c);
  }
  s.append(""String_Node_Str"" + Utilities.escapeXml(desc) + ""String_Node_Str"");
  s.append(""String_Node_Str"");
  s.append(""String_Node_Str"");
  List<String> cs=new ArrayList<String>();
  cs.addAll(codes.keySet());
  Collections.sort(cs);
  for (  String cd : cs) {
    String min=null;
    String max=null;
    c=XMLUtil.getFirstChild(e);
    while (c != null) {
      if (version.equals(c.getAttribute(""String_Node_Str""))) {
        Element g=XMLUtil.getFirstChild(c);
        while (g != null) {
          if (cd.equals(g.getAttribute(""String_Node_Str""))) {
            if (min == null)             min=c.getAttribute(""String_Node_Str"");
            max=c.getAttribute(""String_Node_Str"");
          }
          g=XMLUtil.getNextSibling(g);
        }
      }
      c=XMLUtil.getNextSibling(c);
    }
    String ver=(minlim.equals(min) ? ""String_Node_Str"" + minlim : ""String_Node_Str"" + min) + (maxlim.equals(max) ? ""String_Node_Str"" : ""String_Node_Str"" + max);
    ConceptDefinitionComponent concept=new ValueSet.ConceptDefinitionComponent();
    concept.setCode(cd);
    concept.setDisplay(codes.get(cd));
    def.getConcept().add(concept);
    s.append(""String_Node_Str"" + Utilities.escapeXml(cd) + ""String_Node_Str""+ Utilities.escapeXml(Utilities.nmtokenize(cd))+ ""String_Node_Str""+ Utilities.escapeXml(codes.get(cd))+ ""String_Node_Str""+ ver+ ""String_Node_Str"");
  }
  s.append(""String_Node_Str"");
  vs.setText(new Narrative());
  vs.getText().setStatus(NarrativeStatus.ADDITIONAL);
  vs.getText().setDiv(new XhtmlParser().parse(""String_Node_Str"" + s.toString() + ""String_Node_Str"",""String_Node_Str"").getElement(""String_Node_Str""));
  new ValueSetValidator(page.getWorkerContext()).validate(""String_Node_Str"" + id,vs,false,true);
  return vs;
}","private ValueSet buildV2ValuesetVersioned(String id,String version,Element e) throws Exception {
  StringBuilder s=new StringBuilder();
  ValueSet vs=new ValueSet();
  vs.setIdentifier(""String_Node_Str"" + id + ""String_Node_Str""+ version);
  vs.setName(""String_Node_Str"" + id + ""String_Node_Str""+ version);
  vs.setPublisher(""String_Node_Str"");
  vs.getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,""String_Node_Str""));
  vs.setStatus(ValuesetStatus.ACTIVE);
  vs.setDate(new DateAndTime(""String_Node_Str""));
  ValueSetDefineComponent def=new ValueSet.ValueSetDefineComponent();
  vs.setDefine(def);
  def.setCaseSensitive(true);
  def.setSystem(""String_Node_Str"" + id + ""String_Node_Str""+ version);
  String desc=""String_Node_Str"";
  String minlim=null;
  String maxlim=null;
  Element c=XMLUtil.getFirstChild(e);
  Map<String,String> codes=new HashMap<String,String>();
  while (c != null) {
    if (version.equals(c.getAttribute(""String_Node_Str""))) {
      if (minlim == null)       minlim=c.getAttribute(""String_Node_Str"");
      maxlim=c.getAttribute(""String_Node_Str"");
      desc=c.getAttribute(""String_Node_Str"");
      vs.setDescription(""String_Node_Str"" + id + ""String_Node_Str""+ version+ ""String_Node_Str""+ desc+ ""String_Node_Str"");
      Element g=XMLUtil.getFirstChild(c);
      while (g != null) {
        codes.put(g.getAttribute(""String_Node_Str""),g.getAttribute(""String_Node_Str""));
        g=XMLUtil.getNextSibling(g);
      }
    }
    c=XMLUtil.getNextSibling(c);
  }
  s.append(""String_Node_Str"").append(Utilities.escapeXml(desc)).append(""String_Node_Str"");
  s.append(""String_Node_Str"");
  s.append(""String_Node_Str"");
  List<String> cs=new ArrayList<String>();
  cs.addAll(codes.keySet());
  Collections.sort(cs);
  for (  String cd : cs) {
    String min=null;
    String max=null;
    c=XMLUtil.getFirstChild(e);
    while (c != null) {
      if (version.equals(c.getAttribute(""String_Node_Str""))) {
        Element g=XMLUtil.getFirstChild(c);
        while (g != null) {
          if (cd.equals(g.getAttribute(""String_Node_Str""))) {
            if (min == null)             min=c.getAttribute(""String_Node_Str"");
            max=c.getAttribute(""String_Node_Str"");
          }
          g=XMLUtil.getNextSibling(g);
        }
      }
      c=XMLUtil.getNextSibling(c);
    }
    String ver=(minlim.equals(min) ? ""String_Node_Str"" + minlim : ""String_Node_Str"" + min) + (maxlim.equals(max) ? ""String_Node_Str"" : ""String_Node_Str"" + max);
    ConceptDefinitionComponent concept=new ValueSet.ConceptDefinitionComponent();
    concept.setCode(cd);
    concept.setDisplay(codes.get(cd));
    def.getConcept().add(concept);
    s.append(""String_Node_Str"" + Utilities.escapeXml(cd) + ""String_Node_Str""+ Utilities.escapeXml(Utilities.nmtokenize(cd))+ ""String_Node_Str""+ Utilities.escapeXml(codes.get(cd))+ ""String_Node_Str""+ ver+ ""String_Node_Str"");
  }
  s.append(""String_Node_Str"");
  vs.setText(new Narrative());
  vs.getText().setStatus(NarrativeStatus.ADDITIONAL);
  vs.getText().setDiv(new XhtmlParser().parse(""String_Node_Str"" + s.toString() + ""String_Node_Str"",""String_Node_Str"").getElement(""String_Node_Str""));
  new ValueSetValidator(page.getWorkerContext()).validate(""String_Node_Str"" + id,vs,false,true);
  return vs;
}",0.9963144963144964
24130,"private boolean addDefineRowToTable(XhtmlNode t,ConceptDefinitionComponent c,int i,boolean comment,boolean deprecated,Map<ConceptMap,String> maps){
  boolean hasExtensions=false;
  XhtmlNode tr=t.addTag(""String_Node_Str"");
  XhtmlNode td=tr.addTag(""String_Node_Str"");
  String s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
  td.addText(s);
  td.addText(c.getCode());
  XhtmlNode a=td.addTag(""String_Node_Str"");
  a.setAttribute(""String_Node_Str"",Utilities.nmtokenize(c.getCode()));
  a.addText(""String_Node_Str"");
  td=tr.addTag(""String_Node_Str"");
  if (c.getDisplay() != null)   td.addText(c.getDisplay());
  td=tr.addTag(""String_Node_Str"");
  if (c.getDefinition() != null)   smartAddText(td,c.getDefinition());
  if (deprecated) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getDeprecated(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  if (comment) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getComment(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  for (  ConceptMap m : maps.keySet()) {
    td=tr.addTag(""String_Node_Str"");
    List<ConceptMapElementMapComponent> mappings=findMappingsForCode(c.getCode(),m);
    boolean first=true;
    for (    ConceptMapElementMapComponent mapping : mappings) {
      if (!first)       td.addTag(""String_Node_Str"");
      first=false;
      XhtmlNode span=td.addTag(""String_Node_Str"");
      span.setAttribute(""String_Node_Str"",mapping.getEquivalence().toString());
      span.addText(getCharForEquivalence(mapping));
      a=td.addTag(""String_Node_Str"");
      a.setAttribute(""String_Node_Str"",prefix + maps.get(m) + ""String_Node_Str""+ mapping.getCode());
      a.addText(mapping.getCode());
      if (!Utilities.noString(mapping.getComments()))       td.addTag(""String_Node_Str"").addText(""String_Node_Str"" + mapping.getComments() + ""String_Node_Str"");
    }
  }
  for (  CodeType e : ToolingExtensions.getSubsumes(c)) {
    hasExtensions=true;
    tr=t.addTag(""String_Node_Str"");
    td=tr.addTag(""String_Node_Str"");
    s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
    td.addText(s);
    a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",""String_Node_Str"" + Utilities.nmtokenize(e.getValue()));
    a.addText(c.getCode());
  }
  for (  ConceptDefinitionComponent cc : c.getConcept()) {
    hasExtensions=addDefineRowToTable(t,cc,i + 1,comment,deprecated,maps) || hasExtensions;
  }
  return hasExtensions;
}","private boolean addDefineRowToTable(XhtmlNode t,ConceptDefinitionComponent c,int i,boolean comment,boolean deprecated,Map<ConceptMap,String> maps){
  boolean hasExtensions=false;
  XhtmlNode tr=t.addTag(""String_Node_Str"");
  XhtmlNode td=tr.addTag(""String_Node_Str"");
  String s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
  td.addText(s);
  td.addText(c.getCode());
  if (c.getCode() != null) {
    XhtmlNode a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",Utilities.nmtokenize(c.getCode()));
    a.addText(""String_Node_Str"");
  }
  td=tr.addTag(""String_Node_Str"");
  if (c.getDisplay() != null)   td.addText(c.getDisplay());
  td=tr.addTag(""String_Node_Str"");
  if (c.getDefinition() != null)   smartAddText(td,c.getDefinition());
  if (deprecated) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getDeprecated(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  if (comment) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getComment(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  for (  ConceptMap m : maps.keySet()) {
    td=tr.addTag(""String_Node_Str"");
    List<ConceptMapElementMapComponent> mappings=findMappingsForCode(c.getCode(),m);
    boolean first=true;
    for (    ConceptMapElementMapComponent mapping : mappings) {
      if (!first)       td.addTag(""String_Node_Str"");
      first=false;
      XhtmlNode span=td.addTag(""String_Node_Str"");
      span.setAttribute(""String_Node_Str"",mapping.getEquivalence() == null ? ""String_Node_Str"" : mapping.getEquivalence().toString());
      span.addText(getCharForEquivalence(mapping));
      a=td.addTag(""String_Node_Str"");
      a.setAttribute(""String_Node_Str"",prefix + maps.get(m) + ""String_Node_Str""+ mapping.getCode());
      a.addText(mapping.getCode());
      if (!Utilities.noString(mapping.getComments()))       td.addTag(""String_Node_Str"").addText(""String_Node_Str"" + mapping.getComments() + ""String_Node_Str"");
    }
  }
  for (  CodeType e : ToolingExtensions.getSubsumes(c)) {
    hasExtensions=true;
    tr=t.addTag(""String_Node_Str"");
    td=tr.addTag(""String_Node_Str"");
    s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
    td.addText(s);
    a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",""String_Node_Str"" + Utilities.nmtokenize(e.getValue()));
    a.addText(c.getCode());
  }
  for (  ConceptDefinitionComponent cc : c.getConcept()) {
    hasExtensions=addDefineRowToTable(t,cc,i + 1,comment,deprecated,maps) || hasExtensions;
  }
  return hasExtensions;
}",0.9646781789638932
24131,"private String getCharForEquivalence(ConceptMapElementMapComponent mapping){
switch (mapping.getEquivalence()) {
case EQUAL:
    return ""String_Node_Str"";
case EQUIVALENT:
  return ""String_Node_Str"";
case WIDER:
return ""String_Node_Str"";
case NARROWER:
return ""String_Node_Str"";
case INEXACT:
return ""String_Node_Str"";
case UNMATCHED:
return ""String_Node_Str"";
case DISJOINT:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}","private String getCharForEquivalence(ConceptMapElementMapComponent mapping){
  if (mapping.getEquivalence() == null)   return ""String_Node_Str"";
switch (mapping.getEquivalence()) {
case EQUAL:
    return ""String_Node_Str"";
case EQUIVALENT:
  return ""String_Node_Str"";
case WIDER:
return ""String_Node_Str"";
case NARROWER:
return ""String_Node_Str"";
case INEXACT:
return ""String_Node_Str"";
case UNMATCHED:
return ""String_Node_Str"";
case DISJOINT:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}",0.9284210526315788
24132,"protected void composeNamedReference(String name,Resource resource) throws Exception {
  if (resource instanceof AdverseReaction)   composeAdverseReaction(name,(AdverseReaction)resource);
 else   if (resource instanceof AdverseReactionRisk)   composeAdverseReactionRisk(name,(AdverseReactionRisk)resource);
 else   if (resource instanceof Alert)   composeAlert(name,(Alert)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(name,(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(name,(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(name,(AppointmentResponse)resource);
 else   if (resource instanceof Availability)   composeAvailability(name,(Availability)resource);
 else   if (resource instanceof Basic)   composeBasic(name,(Basic)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(name,(CarePlan)resource);
 else   if (resource instanceof Composition)   composeComposition(name,(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(name,(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(name,(Condition)resource);
 else   if (resource instanceof Conformance)   composeConformance(name,(Conformance)resource);
 else   if (resource instanceof Contract)   composeContract(name,(Contract)resource);
 else   if (resource instanceof Contraindication)   composeContraindication(name,(Contraindication)resource);
 else   if (resource instanceof DataElement)   composeDataElement(name,(DataElement)resource);
 else   if (resource instanceof Device)   composeDevice(name,(Device)resource);
 else   if (resource instanceof DeviceObservationReport)   composeDeviceObservationReport(name,(DeviceObservationReport)resource);
 else   if (resource instanceof DiagnosticOrder)   composeDiagnosticOrder(name,(DiagnosticOrder)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(name,(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(name,(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(name,(DocumentReference)resource);
 else   if (resource instanceof Encounter)   composeEncounter(name,(Encounter)resource);
 else   if (resource instanceof FamilyHistory)   composeFamilyHistory(name,(FamilyHistory)resource);
 else   if (resource instanceof Group)   composeGroup(name,(Group)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(name,(HealthcareService)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(name,(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(name,(Immunization)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(name,(ImmunizationRecommendation)resource);
 else   if (resource instanceof List_)   composeList_(name,(List_)resource);
 else   if (resource instanceof Location)   composeLocation(name,(Location)resource);
 else   if (resource instanceof Media)   composeMedia(name,(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(name,(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(name,(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(name,(MedicationDispense)resource);
 else   if (resource instanceof MedicationPrescription)   composeMedicationPrescription(name,(MedicationPrescription)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(name,(MedicationStatement)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(name,(MessageHeader)resource);
 else   if (resource instanceof Namespace)   composeNamespace(name,(Namespace)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(name,(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(name,(Observation)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(name,(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(name,(OperationOutcome)resource);
 else   if (resource instanceof Order)   composeOrder(name,(Order)resource);
 else   if (resource instanceof OrderResponse)   composeOrderResponse(name,(OrderResponse)resource);
 else   if (resource instanceof Organization)   composeOrganization(name,(Organization)resource);
 else   if (resource instanceof Other)   composeOther(name,(Other)resource);
 else   if (resource instanceof Patient)   composePatient(name,(Patient)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(name,(Practitioner)resource);
 else   if (resource instanceof Procedure)   composeProcedure(name,(Procedure)resource);
 else   if (resource instanceof Profile)   composeProfile(name,(Profile)resource);
 else   if (resource instanceof Provenance)   composeProvenance(name,(Provenance)resource);
 else   if (resource instanceof Query)   composeQuery(name,(Query)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(name,(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireAnswers)   composeQuestionnaireAnswers(name,(QuestionnaireAnswers)resource);
 else   if (resource instanceof ReferralRequest)   composeReferralRequest(name,(ReferralRequest)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(name,(RelatedPerson)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(name,(RiskAssessment)resource);
 else   if (resource instanceof SecurityEvent)   composeSecurityEvent(name,(SecurityEvent)resource);
 else   if (resource instanceof Slot)   composeSlot(name,(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(name,(Specimen)resource);
 else   if (resource instanceof Subscription)   composeSubscription(name,(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(name,(Substance)resource);
 else   if (resource instanceof Supply)   composeSupply(name,(Supply)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(name,(ValueSet)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   throw new Exception(""String_Node_Str"" + resource.getClass().getName());
}","protected void composeNamedReference(String name,Resource resource) throws Exception {
  if (resource instanceof AdverseReaction)   composeAdverseReaction(name,(AdverseReaction)resource);
 else   if (resource instanceof AdverseReactionRisk)   composeAdverseReactionRisk(name,(AdverseReactionRisk)resource);
 else   if (resource instanceof Alert)   composeAlert(name,(Alert)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(name,(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(name,(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(name,(AppointmentResponse)resource);
 else   if (resource instanceof Availability)   composeAvailability(name,(Availability)resource);
 else   if (resource instanceof Basic)   composeBasic(name,(Basic)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(name,(CarePlan)resource);
 else   if (resource instanceof Composition)   composeComposition(name,(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(name,(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(name,(Condition)resource);
 else   if (resource instanceof Conformance)   composeConformance(name,(Conformance)resource);
 else   if (resource instanceof Contract)   composeContract(name,(Contract)resource);
 else   if (resource instanceof Contraindication)   composeContraindication(name,(Contraindication)resource);
 else   if (resource instanceof Coverage)   composeCoverage(name,(Coverage)resource);
 else   if (resource instanceof DataElement)   composeDataElement(name,(DataElement)resource);
 else   if (resource instanceof Device)   composeDevice(name,(Device)resource);
 else   if (resource instanceof DeviceObservationReport)   composeDeviceObservationReport(name,(DeviceObservationReport)resource);
 else   if (resource instanceof DiagnosticOrder)   composeDiagnosticOrder(name,(DiagnosticOrder)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(name,(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(name,(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(name,(DocumentReference)resource);
 else   if (resource instanceof Encounter)   composeEncounter(name,(Encounter)resource);
 else   if (resource instanceof FamilyHistory)   composeFamilyHistory(name,(FamilyHistory)resource);
 else   if (resource instanceof Group)   composeGroup(name,(Group)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(name,(HealthcareService)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(name,(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(name,(Immunization)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(name,(ImmunizationRecommendation)resource);
 else   if (resource instanceof List_)   composeList_(name,(List_)resource);
 else   if (resource instanceof Location)   composeLocation(name,(Location)resource);
 else   if (resource instanceof Media)   composeMedia(name,(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(name,(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(name,(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(name,(MedicationDispense)resource);
 else   if (resource instanceof MedicationPrescription)   composeMedicationPrescription(name,(MedicationPrescription)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(name,(MedicationStatement)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(name,(MessageHeader)resource);
 else   if (resource instanceof Namespace)   composeNamespace(name,(Namespace)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(name,(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(name,(Observation)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(name,(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(name,(OperationOutcome)resource);
 else   if (resource instanceof OralHealthClaim)   composeOralHealthClaim(name,(OralHealthClaim)resource);
 else   if (resource instanceof Order)   composeOrder(name,(Order)resource);
 else   if (resource instanceof OrderResponse)   composeOrderResponse(name,(OrderResponse)resource);
 else   if (resource instanceof Organization)   composeOrganization(name,(Organization)resource);
 else   if (resource instanceof Other)   composeOther(name,(Other)resource);
 else   if (resource instanceof Patient)   composePatient(name,(Patient)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(name,(Practitioner)resource);
 else   if (resource instanceof Procedure)   composeProcedure(name,(Procedure)resource);
 else   if (resource instanceof Profile)   composeProfile(name,(Profile)resource);
 else   if (resource instanceof Provenance)   composeProvenance(name,(Provenance)resource);
 else   if (resource instanceof Query)   composeQuery(name,(Query)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(name,(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireAnswers)   composeQuestionnaireAnswers(name,(QuestionnaireAnswers)resource);
 else   if (resource instanceof ReferralRequest)   composeReferralRequest(name,(ReferralRequest)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(name,(RelatedPerson)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(name,(RiskAssessment)resource);
 else   if (resource instanceof SecurityEvent)   composeSecurityEvent(name,(SecurityEvent)resource);
 else   if (resource instanceof Slot)   composeSlot(name,(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(name,(Specimen)resource);
 else   if (resource instanceof Subscription)   composeSubscription(name,(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(name,(Substance)resource);
 else   if (resource instanceof Supply)   composeSupply(name,(Supply)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(name,(ValueSet)resource);
 else   if (resource instanceof Binary)   composeBinary(name,(Binary)resource);
 else   throw new Exception(""String_Node_Str"" + resource.getClass().getName());
}",0.9856665428889714
24133,"@Override protected void composeResource(Resource resource) throws Exception {
  if (resource instanceof AdverseReaction)   composeAdverseReaction(""String_Node_Str"",(AdverseReaction)resource);
 else   if (resource instanceof AdverseReactionRisk)   composeAdverseReactionRisk(""String_Node_Str"",(AdverseReactionRisk)resource);
 else   if (resource instanceof Alert)   composeAlert(""String_Node_Str"",(Alert)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(""String_Node_Str"",(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(""String_Node_Str"",(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(""String_Node_Str"",(AppointmentResponse)resource);
 else   if (resource instanceof Availability)   composeAvailability(""String_Node_Str"",(Availability)resource);
 else   if (resource instanceof Basic)   composeBasic(""String_Node_Str"",(Basic)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(""String_Node_Str"",(CarePlan)resource);
 else   if (resource instanceof Composition)   composeComposition(""String_Node_Str"",(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(""String_Node_Str"",(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(""String_Node_Str"",(Condition)resource);
 else   if (resource instanceof Conformance)   composeConformance(""String_Node_Str"",(Conformance)resource);
 else   if (resource instanceof Contract)   composeContract(""String_Node_Str"",(Contract)resource);
 else   if (resource instanceof Contraindication)   composeContraindication(""String_Node_Str"",(Contraindication)resource);
 else   if (resource instanceof DataElement)   composeDataElement(""String_Node_Str"",(DataElement)resource);
 else   if (resource instanceof Device)   composeDevice(""String_Node_Str"",(Device)resource);
 else   if (resource instanceof DeviceObservationReport)   composeDeviceObservationReport(""String_Node_Str"",(DeviceObservationReport)resource);
 else   if (resource instanceof DiagnosticOrder)   composeDiagnosticOrder(""String_Node_Str"",(DiagnosticOrder)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(""String_Node_Str"",(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(""String_Node_Str"",(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(""String_Node_Str"",(DocumentReference)resource);
 else   if (resource instanceof Encounter)   composeEncounter(""String_Node_Str"",(Encounter)resource);
 else   if (resource instanceof FamilyHistory)   composeFamilyHistory(""String_Node_Str"",(FamilyHistory)resource);
 else   if (resource instanceof Group)   composeGroup(""String_Node_Str"",(Group)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(""String_Node_Str"",(HealthcareService)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(""String_Node_Str"",(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(""String_Node_Str"",(Immunization)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(""String_Node_Str"",(ImmunizationRecommendation)resource);
 else   if (resource instanceof List_)   composeList_(""String_Node_Str"",(List_)resource);
 else   if (resource instanceof Location)   composeLocation(""String_Node_Str"",(Location)resource);
 else   if (resource instanceof Media)   composeMedia(""String_Node_Str"",(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(""String_Node_Str"",(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(""String_Node_Str"",(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(""String_Node_Str"",(MedicationDispense)resource);
 else   if (resource instanceof MedicationPrescription)   composeMedicationPrescription(""String_Node_Str"",(MedicationPrescription)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(""String_Node_Str"",(MedicationStatement)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(""String_Node_Str"",(MessageHeader)resource);
 else   if (resource instanceof Namespace)   composeNamespace(""String_Node_Str"",(Namespace)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(""String_Node_Str"",(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(""String_Node_Str"",(Observation)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(""String_Node_Str"",(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(""String_Node_Str"",(OperationOutcome)resource);
 else   if (resource instanceof Order)   composeOrder(""String_Node_Str"",(Order)resource);
 else   if (resource instanceof OrderResponse)   composeOrderResponse(""String_Node_Str"",(OrderResponse)resource);
 else   if (resource instanceof Organization)   composeOrganization(""String_Node_Str"",(Organization)resource);
 else   if (resource instanceof Other)   composeOther(""String_Node_Str"",(Other)resource);
 else   if (resource instanceof Patient)   composePatient(""String_Node_Str"",(Patient)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(""String_Node_Str"",(Practitioner)resource);
 else   if (resource instanceof Procedure)   composeProcedure(""String_Node_Str"",(Procedure)resource);
 else   if (resource instanceof Profile)   composeProfile(""String_Node_Str"",(Profile)resource);
 else   if (resource instanceof Provenance)   composeProvenance(""String_Node_Str"",(Provenance)resource);
 else   if (resource instanceof Query)   composeQuery(""String_Node_Str"",(Query)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(""String_Node_Str"",(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireAnswers)   composeQuestionnaireAnswers(""String_Node_Str"",(QuestionnaireAnswers)resource);
 else   if (resource instanceof ReferralRequest)   composeReferralRequest(""String_Node_Str"",(ReferralRequest)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(""String_Node_Str"",(RelatedPerson)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(""String_Node_Str"",(RiskAssessment)resource);
 else   if (resource instanceof SecurityEvent)   composeSecurityEvent(""String_Node_Str"",(SecurityEvent)resource);
 else   if (resource instanceof Slot)   composeSlot(""String_Node_Str"",(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(""String_Node_Str"",(Specimen)resource);
 else   if (resource instanceof Subscription)   composeSubscription(""String_Node_Str"",(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(""String_Node_Str"",(Substance)resource);
 else   if (resource instanceof Supply)   composeSupply(""String_Node_Str"",(Supply)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(""String_Node_Str"",(ValueSet)resource);
 else   if (resource instanceof Binary)   composeBinary(""String_Node_Str"",(Binary)resource);
 else   throw new Exception(""String_Node_Str"" + resource.getClass().getName());
}","@Override protected void composeResource(Resource resource) throws Exception {
  if (resource instanceof AdverseReaction)   composeAdverseReaction(""String_Node_Str"",(AdverseReaction)resource);
 else   if (resource instanceof AdverseReactionRisk)   composeAdverseReactionRisk(""String_Node_Str"",(AdverseReactionRisk)resource);
 else   if (resource instanceof Alert)   composeAlert(""String_Node_Str"",(Alert)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(""String_Node_Str"",(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(""String_Node_Str"",(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(""String_Node_Str"",(AppointmentResponse)resource);
 else   if (resource instanceof Availability)   composeAvailability(""String_Node_Str"",(Availability)resource);
 else   if (resource instanceof Basic)   composeBasic(""String_Node_Str"",(Basic)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(""String_Node_Str"",(CarePlan)resource);
 else   if (resource instanceof Composition)   composeComposition(""String_Node_Str"",(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(""String_Node_Str"",(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(""String_Node_Str"",(Condition)resource);
 else   if (resource instanceof Conformance)   composeConformance(""String_Node_Str"",(Conformance)resource);
 else   if (resource instanceof Contract)   composeContract(""String_Node_Str"",(Contract)resource);
 else   if (resource instanceof Contraindication)   composeContraindication(""String_Node_Str"",(Contraindication)resource);
 else   if (resource instanceof Coverage)   composeCoverage(""String_Node_Str"",(Coverage)resource);
 else   if (resource instanceof DataElement)   composeDataElement(""String_Node_Str"",(DataElement)resource);
 else   if (resource instanceof Device)   composeDevice(""String_Node_Str"",(Device)resource);
 else   if (resource instanceof DeviceObservationReport)   composeDeviceObservationReport(""String_Node_Str"",(DeviceObservationReport)resource);
 else   if (resource instanceof DiagnosticOrder)   composeDiagnosticOrder(""String_Node_Str"",(DiagnosticOrder)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(""String_Node_Str"",(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(""String_Node_Str"",(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(""String_Node_Str"",(DocumentReference)resource);
 else   if (resource instanceof Encounter)   composeEncounter(""String_Node_Str"",(Encounter)resource);
 else   if (resource instanceof FamilyHistory)   composeFamilyHistory(""String_Node_Str"",(FamilyHistory)resource);
 else   if (resource instanceof Group)   composeGroup(""String_Node_Str"",(Group)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(""String_Node_Str"",(HealthcareService)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(""String_Node_Str"",(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(""String_Node_Str"",(Immunization)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(""String_Node_Str"",(ImmunizationRecommendation)resource);
 else   if (resource instanceof List_)   composeList_(""String_Node_Str"",(List_)resource);
 else   if (resource instanceof Location)   composeLocation(""String_Node_Str"",(Location)resource);
 else   if (resource instanceof Media)   composeMedia(""String_Node_Str"",(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(""String_Node_Str"",(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(""String_Node_Str"",(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(""String_Node_Str"",(MedicationDispense)resource);
 else   if (resource instanceof MedicationPrescription)   composeMedicationPrescription(""String_Node_Str"",(MedicationPrescription)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(""String_Node_Str"",(MedicationStatement)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(""String_Node_Str"",(MessageHeader)resource);
 else   if (resource instanceof Namespace)   composeNamespace(""String_Node_Str"",(Namespace)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(""String_Node_Str"",(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(""String_Node_Str"",(Observation)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(""String_Node_Str"",(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(""String_Node_Str"",(OperationOutcome)resource);
 else   if (resource instanceof OralHealthClaim)   composeOralHealthClaim(""String_Node_Str"",(OralHealthClaim)resource);
 else   if (resource instanceof Order)   composeOrder(""String_Node_Str"",(Order)resource);
 else   if (resource instanceof OrderResponse)   composeOrderResponse(""String_Node_Str"",(OrderResponse)resource);
 else   if (resource instanceof Organization)   composeOrganization(""String_Node_Str"",(Organization)resource);
 else   if (resource instanceof Other)   composeOther(""String_Node_Str"",(Other)resource);
 else   if (resource instanceof Patient)   composePatient(""String_Node_Str"",(Patient)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(""String_Node_Str"",(Practitioner)resource);
 else   if (resource instanceof Procedure)   composeProcedure(""String_Node_Str"",(Procedure)resource);
 else   if (resource instanceof Profile)   composeProfile(""String_Node_Str"",(Profile)resource);
 else   if (resource instanceof Provenance)   composeProvenance(""String_Node_Str"",(Provenance)resource);
 else   if (resource instanceof Query)   composeQuery(""String_Node_Str"",(Query)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(""String_Node_Str"",(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireAnswers)   composeQuestionnaireAnswers(""String_Node_Str"",(QuestionnaireAnswers)resource);
 else   if (resource instanceof ReferralRequest)   composeReferralRequest(""String_Node_Str"",(ReferralRequest)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(""String_Node_Str"",(RelatedPerson)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(""String_Node_Str"",(RiskAssessment)resource);
 else   if (resource instanceof SecurityEvent)   composeSecurityEvent(""String_Node_Str"",(SecurityEvent)resource);
 else   if (resource instanceof Slot)   composeSlot(""String_Node_Str"",(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(""String_Node_Str"",(Specimen)resource);
 else   if (resource instanceof Subscription)   composeSubscription(""String_Node_Str"",(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(""String_Node_Str"",(Substance)resource);
 else   if (resource instanceof Supply)   composeSupply(""String_Node_Str"",(Supply)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(""String_Node_Str"",(ValueSet)resource);
 else   if (resource instanceof Binary)   composeBinary(""String_Node_Str"",(Binary)resource);
 else   throw new Exception(""String_Node_Str"" + resource.getClass().getName());
}",0.9778158119939436
24134,"private boolean hasTypeName(JsonObject json,String prefix){
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  return false;
}","private boolean hasTypeName(JsonObject json,String prefix){
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  if (json.has(prefix + ""String_Node_Str"") || json.has(""String_Node_Str"" + prefix + ""String_Node_Str""))   return true;
  return false;
}",0.9912696063924238
24135,"@Override protected Resource parseResource(JsonObject json) throws Exception {
  String t=json.get(""String_Node_Str"").getAsString();
  if (Utilities.noString(t))   throw new Exception(""String_Node_Str"");
  if (t.equals(""String_Node_Str""))   return parseAdverseReaction(json);
 else   if (t.equals(""String_Node_Str""))   return parseAdverseReactionRisk(json);
 else   if (t.equals(""String_Node_Str""))   return parseAlert(json);
 else   if (t.equals(""String_Node_Str""))   return parseAllergyIntolerance(json);
 else   if (t.equals(""String_Node_Str""))   return parseAppointment(json);
 else   if (t.equals(""String_Node_Str""))   return parseAppointmentResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseAvailability(json);
 else   if (t.equals(""String_Node_Str""))   return parseBasic(json);
 else   if (t.equals(""String_Node_Str""))   return parseCarePlan(json);
 else   if (t.equals(""String_Node_Str""))   return parseComposition(json);
 else   if (t.equals(""String_Node_Str""))   return parseConceptMap(json);
 else   if (t.equals(""String_Node_Str""))   return parseCondition(json);
 else   if (t.equals(""String_Node_Str""))   return parseConformance(json);
 else   if (t.equals(""String_Node_Str""))   return parseContract(json);
 else   if (t.equals(""String_Node_Str""))   return parseContraindication(json);
 else   if (t.equals(""String_Node_Str""))   return parseDataElement(json);
 else   if (t.equals(""String_Node_Str""))   return parseDevice(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceObservationReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseDiagnosticOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseDiagnosticReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseDocumentManifest(json);
 else   if (t.equals(""String_Node_Str""))   return parseDocumentReference(json);
 else   if (t.equals(""String_Node_Str""))   return parseEncounter(json);
 else   if (t.equals(""String_Node_Str""))   return parseFamilyHistory(json);
 else   if (t.equals(""String_Node_Str""))   return parseGroup(json);
 else   if (t.equals(""String_Node_Str""))   return parseHealthcareService(json);
 else   if (t.equals(""String_Node_Str""))   return parseImagingStudy(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunization(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunizationRecommendation(json);
 else   if (t.equals(""String_Node_Str""))   return parseList_(json);
 else   if (t.equals(""String_Node_Str""))   return parseLocation(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedia(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedication(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationAdministration(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationDispense(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationPrescription(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationStatement(json);
 else   if (t.equals(""String_Node_Str""))   return parseMessageHeader(json);
 else   if (t.equals(""String_Node_Str""))   return parseNamespace(json);
 else   if (t.equals(""String_Node_Str""))   return parseNutritionOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseObservation(json);
 else   if (t.equals(""String_Node_Str""))   return parseOperationDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseOperationOutcome(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrderResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrganization(json);
 else   if (t.equals(""String_Node_Str""))   return parseOther(json);
 else   if (t.equals(""String_Node_Str""))   return parsePatient(json);
 else   if (t.equals(""String_Node_Str""))   return parsePractitioner(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcedure(json);
 else   if (t.equals(""String_Node_Str""))   return parseProfile(json);
 else   if (t.equals(""String_Node_Str""))   return parseProvenance(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuery(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuestionnaire(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuestionnaireAnswers(json);
 else   if (t.equals(""String_Node_Str""))   return parseReferralRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseRelatedPerson(json);
 else   if (t.equals(""String_Node_Str""))   return parseRiskAssessment(json);
 else   if (t.equals(""String_Node_Str""))   return parseSecurityEvent(json);
 else   if (t.equals(""String_Node_Str""))   return parseSlot(json);
 else   if (t.equals(""String_Node_Str""))   return parseSpecimen(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubscription(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubstance(json);
 else   if (t.equals(""String_Node_Str""))   return parseSupply(json);
 else   if (t.equals(""String_Node_Str""))   return parseValueSet(json);
 else   if (t.equals(""String_Node_Str""))   return parseBinary(json);
  throw new Exception(""String_Node_Str"" + t + ""String_Node_Str"");
}","@Override protected Resource parseResource(JsonObject json) throws Exception {
  String t=json.get(""String_Node_Str"").getAsString();
  if (Utilities.noString(t))   throw new Exception(""String_Node_Str"");
  if (t.equals(""String_Node_Str""))   return parseAdverseReaction(json);
 else   if (t.equals(""String_Node_Str""))   return parseAdverseReactionRisk(json);
 else   if (t.equals(""String_Node_Str""))   return parseAlert(json);
 else   if (t.equals(""String_Node_Str""))   return parseAllergyIntolerance(json);
 else   if (t.equals(""String_Node_Str""))   return parseAppointment(json);
 else   if (t.equals(""String_Node_Str""))   return parseAppointmentResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseAvailability(json);
 else   if (t.equals(""String_Node_Str""))   return parseBasic(json);
 else   if (t.equals(""String_Node_Str""))   return parseCarePlan(json);
 else   if (t.equals(""String_Node_Str""))   return parseComposition(json);
 else   if (t.equals(""String_Node_Str""))   return parseConceptMap(json);
 else   if (t.equals(""String_Node_Str""))   return parseCondition(json);
 else   if (t.equals(""String_Node_Str""))   return parseConformance(json);
 else   if (t.equals(""String_Node_Str""))   return parseContract(json);
 else   if (t.equals(""String_Node_Str""))   return parseContraindication(json);
 else   if (t.equals(""String_Node_Str""))   return parseCoverage(json);
 else   if (t.equals(""String_Node_Str""))   return parseDataElement(json);
 else   if (t.equals(""String_Node_Str""))   return parseDevice(json);
 else   if (t.equals(""String_Node_Str""))   return parseDeviceObservationReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseDiagnosticOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseDiagnosticReport(json);
 else   if (t.equals(""String_Node_Str""))   return parseDocumentManifest(json);
 else   if (t.equals(""String_Node_Str""))   return parseDocumentReference(json);
 else   if (t.equals(""String_Node_Str""))   return parseEncounter(json);
 else   if (t.equals(""String_Node_Str""))   return parseFamilyHistory(json);
 else   if (t.equals(""String_Node_Str""))   return parseGroup(json);
 else   if (t.equals(""String_Node_Str""))   return parseHealthcareService(json);
 else   if (t.equals(""String_Node_Str""))   return parseImagingStudy(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunization(json);
 else   if (t.equals(""String_Node_Str""))   return parseImmunizationRecommendation(json);
 else   if (t.equals(""String_Node_Str""))   return parseList_(json);
 else   if (t.equals(""String_Node_Str""))   return parseLocation(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedia(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedication(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationAdministration(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationDispense(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationPrescription(json);
 else   if (t.equals(""String_Node_Str""))   return parseMedicationStatement(json);
 else   if (t.equals(""String_Node_Str""))   return parseMessageHeader(json);
 else   if (t.equals(""String_Node_Str""))   return parseNamespace(json);
 else   if (t.equals(""String_Node_Str""))   return parseNutritionOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseObservation(json);
 else   if (t.equals(""String_Node_Str""))   return parseOperationDefinition(json);
 else   if (t.equals(""String_Node_Str""))   return parseOperationOutcome(json);
 else   if (t.equals(""String_Node_Str""))   return parseOralHealthClaim(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrder(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrderResponse(json);
 else   if (t.equals(""String_Node_Str""))   return parseOrganization(json);
 else   if (t.equals(""String_Node_Str""))   return parseOther(json);
 else   if (t.equals(""String_Node_Str""))   return parsePatient(json);
 else   if (t.equals(""String_Node_Str""))   return parsePractitioner(json);
 else   if (t.equals(""String_Node_Str""))   return parseProcedure(json);
 else   if (t.equals(""String_Node_Str""))   return parseProfile(json);
 else   if (t.equals(""String_Node_Str""))   return parseProvenance(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuery(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuestionnaire(json);
 else   if (t.equals(""String_Node_Str""))   return parseQuestionnaireAnswers(json);
 else   if (t.equals(""String_Node_Str""))   return parseReferralRequest(json);
 else   if (t.equals(""String_Node_Str""))   return parseRelatedPerson(json);
 else   if (t.equals(""String_Node_Str""))   return parseRiskAssessment(json);
 else   if (t.equals(""String_Node_Str""))   return parseSecurityEvent(json);
 else   if (t.equals(""String_Node_Str""))   return parseSlot(json);
 else   if (t.equals(""String_Node_Str""))   return parseSpecimen(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubscription(json);
 else   if (t.equals(""String_Node_Str""))   return parseSubstance(json);
 else   if (t.equals(""String_Node_Str""))   return parseSupply(json);
 else   if (t.equals(""String_Node_Str""))   return parseValueSet(json);
 else   if (t.equals(""String_Node_Str""))   return parseBinary(json);
  throw new Exception(""String_Node_Str"" + t + ""String_Node_Str"");
}",0.9859208164036662
24136,"@Override protected void composeResource(Resource resource) throws Exception {
  if (resource instanceof AdverseReaction)   composeAdverseReaction(""String_Node_Str"",(AdverseReaction)resource);
 else   if (resource instanceof AdverseReactionRisk)   composeAdverseReactionRisk(""String_Node_Str"",(AdverseReactionRisk)resource);
 else   if (resource instanceof Alert)   composeAlert(""String_Node_Str"",(Alert)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(""String_Node_Str"",(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(""String_Node_Str"",(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(""String_Node_Str"",(AppointmentResponse)resource);
 else   if (resource instanceof Availability)   composeAvailability(""String_Node_Str"",(Availability)resource);
 else   if (resource instanceof Basic)   composeBasic(""String_Node_Str"",(Basic)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(""String_Node_Str"",(CarePlan)resource);
 else   if (resource instanceof Composition)   composeComposition(""String_Node_Str"",(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(""String_Node_Str"",(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(""String_Node_Str"",(Condition)resource);
 else   if (resource instanceof Conformance)   composeConformance(""String_Node_Str"",(Conformance)resource);
 else   if (resource instanceof Contract)   composeContract(""String_Node_Str"",(Contract)resource);
 else   if (resource instanceof Contraindication)   composeContraindication(""String_Node_Str"",(Contraindication)resource);
 else   if (resource instanceof DataElement)   composeDataElement(""String_Node_Str"",(DataElement)resource);
 else   if (resource instanceof Device)   composeDevice(""String_Node_Str"",(Device)resource);
 else   if (resource instanceof DeviceObservationReport)   composeDeviceObservationReport(""String_Node_Str"",(DeviceObservationReport)resource);
 else   if (resource instanceof DiagnosticOrder)   composeDiagnosticOrder(""String_Node_Str"",(DiagnosticOrder)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(""String_Node_Str"",(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(""String_Node_Str"",(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(""String_Node_Str"",(DocumentReference)resource);
 else   if (resource instanceof Encounter)   composeEncounter(""String_Node_Str"",(Encounter)resource);
 else   if (resource instanceof FamilyHistory)   composeFamilyHistory(""String_Node_Str"",(FamilyHistory)resource);
 else   if (resource instanceof Group)   composeGroup(""String_Node_Str"",(Group)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(""String_Node_Str"",(HealthcareService)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(""String_Node_Str"",(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(""String_Node_Str"",(Immunization)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(""String_Node_Str"",(ImmunizationRecommendation)resource);
 else   if (resource instanceof List_)   composeList_(""String_Node_Str"",(List_)resource);
 else   if (resource instanceof Location)   composeLocation(""String_Node_Str"",(Location)resource);
 else   if (resource instanceof Media)   composeMedia(""String_Node_Str"",(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(""String_Node_Str"",(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(""String_Node_Str"",(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(""String_Node_Str"",(MedicationDispense)resource);
 else   if (resource instanceof MedicationPrescription)   composeMedicationPrescription(""String_Node_Str"",(MedicationPrescription)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(""String_Node_Str"",(MedicationStatement)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(""String_Node_Str"",(MessageHeader)resource);
 else   if (resource instanceof Namespace)   composeNamespace(""String_Node_Str"",(Namespace)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(""String_Node_Str"",(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(""String_Node_Str"",(Observation)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(""String_Node_Str"",(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(""String_Node_Str"",(OperationOutcome)resource);
 else   if (resource instanceof Order)   composeOrder(""String_Node_Str"",(Order)resource);
 else   if (resource instanceof OrderResponse)   composeOrderResponse(""String_Node_Str"",(OrderResponse)resource);
 else   if (resource instanceof Organization)   composeOrganization(""String_Node_Str"",(Organization)resource);
 else   if (resource instanceof Other)   composeOther(""String_Node_Str"",(Other)resource);
 else   if (resource instanceof Patient)   composePatient(""String_Node_Str"",(Patient)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(""String_Node_Str"",(Practitioner)resource);
 else   if (resource instanceof Procedure)   composeProcedure(""String_Node_Str"",(Procedure)resource);
 else   if (resource instanceof Profile)   composeProfile(""String_Node_Str"",(Profile)resource);
 else   if (resource instanceof Provenance)   composeProvenance(""String_Node_Str"",(Provenance)resource);
 else   if (resource instanceof Query)   composeQuery(""String_Node_Str"",(Query)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(""String_Node_Str"",(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireAnswers)   composeQuestionnaireAnswers(""String_Node_Str"",(QuestionnaireAnswers)resource);
 else   if (resource instanceof ReferralRequest)   composeReferralRequest(""String_Node_Str"",(ReferralRequest)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(""String_Node_Str"",(RelatedPerson)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(""String_Node_Str"",(RiskAssessment)resource);
 else   if (resource instanceof SecurityEvent)   composeSecurityEvent(""String_Node_Str"",(SecurityEvent)resource);
 else   if (resource instanceof Slot)   composeSlot(""String_Node_Str"",(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(""String_Node_Str"",(Specimen)resource);
 else   if (resource instanceof Subscription)   composeSubscription(""String_Node_Str"",(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(""String_Node_Str"",(Substance)resource);
 else   if (resource instanceof Supply)   composeSupply(""String_Node_Str"",(Supply)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(""String_Node_Str"",(ValueSet)resource);
 else   if (resource instanceof Binary)   composeBinary(""String_Node_Str"",(Binary)resource);
 else   throw new Exception(""String_Node_Str"" + resource.getClass().getName());
}","@Override protected void composeResource(Resource resource) throws Exception {
  if (resource instanceof AdverseReaction)   composeAdverseReaction(""String_Node_Str"",(AdverseReaction)resource);
 else   if (resource instanceof AdverseReactionRisk)   composeAdverseReactionRisk(""String_Node_Str"",(AdverseReactionRisk)resource);
 else   if (resource instanceof Alert)   composeAlert(""String_Node_Str"",(Alert)resource);
 else   if (resource instanceof AllergyIntolerance)   composeAllergyIntolerance(""String_Node_Str"",(AllergyIntolerance)resource);
 else   if (resource instanceof Appointment)   composeAppointment(""String_Node_Str"",(Appointment)resource);
 else   if (resource instanceof AppointmentResponse)   composeAppointmentResponse(""String_Node_Str"",(AppointmentResponse)resource);
 else   if (resource instanceof Availability)   composeAvailability(""String_Node_Str"",(Availability)resource);
 else   if (resource instanceof Basic)   composeBasic(""String_Node_Str"",(Basic)resource);
 else   if (resource instanceof CarePlan)   composeCarePlan(""String_Node_Str"",(CarePlan)resource);
 else   if (resource instanceof Composition)   composeComposition(""String_Node_Str"",(Composition)resource);
 else   if (resource instanceof ConceptMap)   composeConceptMap(""String_Node_Str"",(ConceptMap)resource);
 else   if (resource instanceof Condition)   composeCondition(""String_Node_Str"",(Condition)resource);
 else   if (resource instanceof Conformance)   composeConformance(""String_Node_Str"",(Conformance)resource);
 else   if (resource instanceof Contract)   composeContract(""String_Node_Str"",(Contract)resource);
 else   if (resource instanceof Contraindication)   composeContraindication(""String_Node_Str"",(Contraindication)resource);
 else   if (resource instanceof Coverage)   composeCoverage(""String_Node_Str"",(Coverage)resource);
 else   if (resource instanceof DataElement)   composeDataElement(""String_Node_Str"",(DataElement)resource);
 else   if (resource instanceof Device)   composeDevice(""String_Node_Str"",(Device)resource);
 else   if (resource instanceof DeviceObservationReport)   composeDeviceObservationReport(""String_Node_Str"",(DeviceObservationReport)resource);
 else   if (resource instanceof DiagnosticOrder)   composeDiagnosticOrder(""String_Node_Str"",(DiagnosticOrder)resource);
 else   if (resource instanceof DiagnosticReport)   composeDiagnosticReport(""String_Node_Str"",(DiagnosticReport)resource);
 else   if (resource instanceof DocumentManifest)   composeDocumentManifest(""String_Node_Str"",(DocumentManifest)resource);
 else   if (resource instanceof DocumentReference)   composeDocumentReference(""String_Node_Str"",(DocumentReference)resource);
 else   if (resource instanceof Encounter)   composeEncounter(""String_Node_Str"",(Encounter)resource);
 else   if (resource instanceof FamilyHistory)   composeFamilyHistory(""String_Node_Str"",(FamilyHistory)resource);
 else   if (resource instanceof Group)   composeGroup(""String_Node_Str"",(Group)resource);
 else   if (resource instanceof HealthcareService)   composeHealthcareService(""String_Node_Str"",(HealthcareService)resource);
 else   if (resource instanceof ImagingStudy)   composeImagingStudy(""String_Node_Str"",(ImagingStudy)resource);
 else   if (resource instanceof Immunization)   composeImmunization(""String_Node_Str"",(Immunization)resource);
 else   if (resource instanceof ImmunizationRecommendation)   composeImmunizationRecommendation(""String_Node_Str"",(ImmunizationRecommendation)resource);
 else   if (resource instanceof List_)   composeList_(""String_Node_Str"",(List_)resource);
 else   if (resource instanceof Location)   composeLocation(""String_Node_Str"",(Location)resource);
 else   if (resource instanceof Media)   composeMedia(""String_Node_Str"",(Media)resource);
 else   if (resource instanceof Medication)   composeMedication(""String_Node_Str"",(Medication)resource);
 else   if (resource instanceof MedicationAdministration)   composeMedicationAdministration(""String_Node_Str"",(MedicationAdministration)resource);
 else   if (resource instanceof MedicationDispense)   composeMedicationDispense(""String_Node_Str"",(MedicationDispense)resource);
 else   if (resource instanceof MedicationPrescription)   composeMedicationPrescription(""String_Node_Str"",(MedicationPrescription)resource);
 else   if (resource instanceof MedicationStatement)   composeMedicationStatement(""String_Node_Str"",(MedicationStatement)resource);
 else   if (resource instanceof MessageHeader)   composeMessageHeader(""String_Node_Str"",(MessageHeader)resource);
 else   if (resource instanceof Namespace)   composeNamespace(""String_Node_Str"",(Namespace)resource);
 else   if (resource instanceof NutritionOrder)   composeNutritionOrder(""String_Node_Str"",(NutritionOrder)resource);
 else   if (resource instanceof Observation)   composeObservation(""String_Node_Str"",(Observation)resource);
 else   if (resource instanceof OperationDefinition)   composeOperationDefinition(""String_Node_Str"",(OperationDefinition)resource);
 else   if (resource instanceof OperationOutcome)   composeOperationOutcome(""String_Node_Str"",(OperationOutcome)resource);
 else   if (resource instanceof OralHealthClaim)   composeOralHealthClaim(""String_Node_Str"",(OralHealthClaim)resource);
 else   if (resource instanceof Order)   composeOrder(""String_Node_Str"",(Order)resource);
 else   if (resource instanceof OrderResponse)   composeOrderResponse(""String_Node_Str"",(OrderResponse)resource);
 else   if (resource instanceof Organization)   composeOrganization(""String_Node_Str"",(Organization)resource);
 else   if (resource instanceof Other)   composeOther(""String_Node_Str"",(Other)resource);
 else   if (resource instanceof Patient)   composePatient(""String_Node_Str"",(Patient)resource);
 else   if (resource instanceof Practitioner)   composePractitioner(""String_Node_Str"",(Practitioner)resource);
 else   if (resource instanceof Procedure)   composeProcedure(""String_Node_Str"",(Procedure)resource);
 else   if (resource instanceof Profile)   composeProfile(""String_Node_Str"",(Profile)resource);
 else   if (resource instanceof Provenance)   composeProvenance(""String_Node_Str"",(Provenance)resource);
 else   if (resource instanceof Query)   composeQuery(""String_Node_Str"",(Query)resource);
 else   if (resource instanceof Questionnaire)   composeQuestionnaire(""String_Node_Str"",(Questionnaire)resource);
 else   if (resource instanceof QuestionnaireAnswers)   composeQuestionnaireAnswers(""String_Node_Str"",(QuestionnaireAnswers)resource);
 else   if (resource instanceof ReferralRequest)   composeReferralRequest(""String_Node_Str"",(ReferralRequest)resource);
 else   if (resource instanceof RelatedPerson)   composeRelatedPerson(""String_Node_Str"",(RelatedPerson)resource);
 else   if (resource instanceof RiskAssessment)   composeRiskAssessment(""String_Node_Str"",(RiskAssessment)resource);
 else   if (resource instanceof SecurityEvent)   composeSecurityEvent(""String_Node_Str"",(SecurityEvent)resource);
 else   if (resource instanceof Slot)   composeSlot(""String_Node_Str"",(Slot)resource);
 else   if (resource instanceof Specimen)   composeSpecimen(""String_Node_Str"",(Specimen)resource);
 else   if (resource instanceof Subscription)   composeSubscription(""String_Node_Str"",(Subscription)resource);
 else   if (resource instanceof Substance)   composeSubstance(""String_Node_Str"",(Substance)resource);
 else   if (resource instanceof Supply)   composeSupply(""String_Node_Str"",(Supply)resource);
 else   if (resource instanceof ValueSet)   composeValueSet(""String_Node_Str"",(ValueSet)resource);
 else   if (resource instanceof Binary)   composeBinary(""String_Node_Str"",(Binary)resource);
 else   throw new Exception(""String_Node_Str"" + resource.getClass().getName());
}",0.9778158119939436
24137,"private boolean addDefineRowToTable(XhtmlNode t,ConceptDefinitionComponent c,int i,boolean comment,boolean deprecated,Map<ConceptMap,String> maps){
  boolean hasExtensions=false;
  XhtmlNode tr=t.addTag(""String_Node_Str"");
  XhtmlNode td=tr.addTag(""String_Node_Str"");
  String s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
  td.addText(s);
  td.addText(c.getCode());
  if (c.getCode() != null) {
    XhtmlNode a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",Utilities.nmtokenize(c.getCode()));
    a.addText(""String_Node_Str"");
  }
  td=tr.addTag(""String_Node_Str"");
  if (c.getDisplay() != null)   td.addText(c.getDisplay());
  td=tr.addTag(""String_Node_Str"");
  if (c.getDefinition() != null)   smartAddText(td,c.getDefinition());
  if (deprecated) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getDeprecated(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  if (comment) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getComment(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  for (  ConceptMap m : maps.keySet()) {
    td=tr.addTag(""String_Node_Str"");
    List<ConceptMapElementMapComponent> mappings=findMappingsForCode(c.getCode(),m);
    boolean first=true;
    for (    ConceptMapElementMapComponent mapping : mappings) {
      if (!first)       td.addTag(""String_Node_Str"");
      first=false;
      XhtmlNode span=td.addTag(""String_Node_Str"");
      span.setAttribute(""String_Node_Str"",mapping.getEquivalence() == null ? ""String_Node_Str"" : mapping.getEquivalence().toString());
      span.addText(getCharForEquivalence(mapping));
      a=td.addTag(""String_Node_Str"");
      a.setAttribute(""String_Node_Str"",prefix + maps.get(m) + ""String_Node_Str""+ mapping.getCode());
      a.addText(mapping.getCode());
      if (!Utilities.noString(mapping.getComments()))       td.addTag(""String_Node_Str"").addText(""String_Node_Str"" + mapping.getComments() + ""String_Node_Str"");
    }
  }
  for (  CodeType e : ToolingExtensions.getSubsumes(c)) {
    hasExtensions=true;
    tr=t.addTag(""String_Node_Str"");
    td=tr.addTag(""String_Node_Str"");
    s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
    td.addText(s);
    a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",""String_Node_Str"" + Utilities.nmtokenize(e.getValue()));
    a.addText(c.getCode());
  }
  for (  ConceptDefinitionComponent cc : c.getConcept()) {
    hasExtensions=addDefineRowToTable(t,cc,i + 1,comment,deprecated,maps) || hasExtensions;
  }
  return hasExtensions;
}","private boolean addDefineRowToTable(XhtmlNode t,ConceptDefinitionComponent c,int i,boolean comment,boolean deprecated,Map<ConceptMap,String> maps){
  boolean hasExtensions=false;
  XhtmlNode tr=t.addTag(""String_Node_Str"");
  XhtmlNode td=tr.addTag(""String_Node_Str"");
  String s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
  td.addText(s);
  td.addText(c.getCode());
  XhtmlNode a;
  if (c.getCode() != null) {
    a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",Utilities.nmtokenize(c.getCode()));
    a.addText(""String_Node_Str"");
  }
  td=tr.addTag(""String_Node_Str"");
  if (c.getDisplay() != null)   td.addText(c.getDisplay());
  td=tr.addTag(""String_Node_Str"");
  if (c.getDefinition() != null)   smartAddText(td,c.getDefinition());
  if (deprecated) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getDeprecated(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  if (comment) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getComment(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  for (  ConceptMap m : maps.keySet()) {
    td=tr.addTag(""String_Node_Str"");
    List<ConceptMapElementMapComponent> mappings=findMappingsForCode(c.getCode(),m);
    boolean first=true;
    for (    ConceptMapElementMapComponent mapping : mappings) {
      if (!first)       td.addTag(""String_Node_Str"");
      first=false;
      XhtmlNode span=td.addTag(""String_Node_Str"");
      span.setAttribute(""String_Node_Str"",mapping.getEquivalence() == null ? ""String_Node_Str"" : mapping.getEquivalence().toString());
      span.addText(getCharForEquivalence(mapping));
      a=td.addTag(""String_Node_Str"");
      a.setAttribute(""String_Node_Str"",prefix + maps.get(m) + ""String_Node_Str""+ mapping.getCode());
      a.addText(mapping.getCode());
      if (!Utilities.noString(mapping.getComments()))       td.addTag(""String_Node_Str"").addText(""String_Node_Str"" + mapping.getComments() + ""String_Node_Str"");
    }
  }
  for (  CodeType e : ToolingExtensions.getSubsumes(c)) {
    hasExtensions=true;
    tr=t.addTag(""String_Node_Str"");
    td=tr.addTag(""String_Node_Str"");
    s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
    td.addText(s);
    a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",""String_Node_Str"" + Utilities.nmtokenize(e.getValue()));
    a.addText(c.getCode());
  }
  for (  ConceptDefinitionComponent cc : c.getConcept()) {
    hasExtensions=addDefineRowToTable(t,cc,i + 1,comment,deprecated,maps) || hasExtensions;
  }
  return hasExtensions;
}",0.9871029836381136
24138,"private void generateAccessors(ElementDefn root,ElementDefn e,String indent,String className) throws Exception {
  String tn=typeNames.get(e);
  if (e.unbounded()) {
    jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
    if (tn == null && e.usesCompositeType())     write(indent + ""String_Node_Str"" + root.getName()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
 else     write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(""String_Node_Str"");
    write(""String_Node_Str"");
    jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
    if (e.getTypes().size() == 1 && (definitions.getPrimitives().containsKey(e.typeCode()) || e.getTypes().get(0).isIdRef() || e.typeCode().equals(""String_Node_Str""))) {
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        if (!rn.equals(""String_Node_Str"")) {
          write(""String_Node_Str"");
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
      }
    }
  }
 else {
    if (isJavaPrimitive(e)) {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + e.getDefinition());
      write(indent + ""String_Node_Str"" + getSimpleType(tn)+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ (e.typeCode().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + e.getDefinition());
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      if (e.getMinCardinality() == 0) {
        if (tn.equals(""String_Node_Str""))         write(indent + ""String_Node_Str"");
 else         if (tn.equals(""String_Node_Str""))         write(indent + ""String_Node_Str"");
 else         write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      if (e.getMinCardinality() == 0) {
        write(indent + ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
    }
  }
}","private void generateAccessors(ElementDefn root,ElementDefn e,String indent,String className) throws Exception {
  String tn=typeNames.get(e);
  if (e.unbounded()) {
    jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
    if (tn == null && e.usesCompositeType())     write(indent + ""String_Node_Str"" + root.getName()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
 else     write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
    write(indent + ""String_Node_Str"");
    write(""String_Node_Str"");
    write(""String_Node_Str"");
    jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
    if (e.getTypes().size() == 1 && (definitions.getPrimitives().containsKey(e.typeCode()) || e.getTypes().get(0).isIdRef() || e.typeCode().equals(""String_Node_Str""))) {
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      if (isJavaPrimitive(e))       write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
 else       write(indent + ""String_Node_Str"" + e.typeCode()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        if (!rn.equals(""String_Node_Str"")) {
          write(""String_Node_Str"");
          jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(indent + ""String_Node_Str"");
          write(""String_Node_Str"");
        }
      }
    }
  }
 else {
    if (isJavaPrimitive(e)) {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + e.getDefinition());
      write(indent + ""String_Node_Str"" + getSimpleType(tn)+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ (e.typeCode().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + e.getDefinition());
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ getSimpleType(tn)+ ""String_Node_Str"");
      if (e.getMinCardinality() == 0) {
        if (tn.equals(""String_Node_Str""))         write(indent + ""String_Node_Str"");
 else         if (tn.equals(""String_Node_Str""))         write(indent + ""String_Node_Str"");
 else         write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      if (e.getMinCardinality() == 0) {
        write(indent + ""String_Node_Str"");
      }
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
    }
 else {
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + tn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ tn+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(indent + ""String_Node_Str"");
      write(""String_Node_Str"");
      if (e.getTypes().size() == 1 && e.typeCode().startsWith(""String_Node_Str"")) {
        List<String> params=e.getTypes().get(0).getParams();
        String rn=params.size() == 1 ? params.get(0) : ""String_Node_Str"";
        if (rn.equals(""String_Node_Str""))         rn=""String_Node_Str"";
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + rn+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
        jdoc(indent,""String_Node_Str"" + getElementName(e.getName(),true) + ""String_Node_Str""+ e.getDefinition()+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + className+ ""String_Node_Str""+ getTitle(getElementName(e.getName(),false))+ ""String_Node_Str""+ rn+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"" + getElementName(e.getName(),true)+ ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(indent + ""String_Node_Str"");
        write(""String_Node_Str"");
      }
    }
  }
}",0.9942674172390642
24139,"private boolean addDefineRowToTable(XhtmlNode t,ConceptDefinitionComponent c,int i,boolean comment,boolean deprecated,Map<ConceptMap,String> maps){
  boolean hasExtensions=false;
  XhtmlNode tr=t.addTag(""String_Node_Str"");
  XhtmlNode td=tr.addTag(""String_Node_Str"");
  String s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
  td.addText(s);
  td.addText(c.getCode());
  if (c.getCode() != null) {
    XhtmlNode a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",Utilities.nmtokenize(c.getCode()));
    a.addText(""String_Node_Str"");
  }
  td=tr.addTag(""String_Node_Str"");
  if (c.getDisplay() != null)   td.addText(c.getDisplay());
  td=tr.addTag(""String_Node_Str"");
  if (c.getDefinition() != null)   smartAddText(td,c.getDefinition());
  if (deprecated) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getDeprecated(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  if (comment) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getComment(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  for (  ConceptMap m : maps.keySet()) {
    td=tr.addTag(""String_Node_Str"");
    List<ConceptMapElementMapComponent> mappings=findMappingsForCode(c.getCode(),m);
    boolean first=true;
    for (    ConceptMapElementMapComponent mapping : mappings) {
      if (!first)       td.addTag(""String_Node_Str"");
      first=false;
      XhtmlNode span=td.addTag(""String_Node_Str"");
      span.setAttribute(""String_Node_Str"",mapping.getEquivalence() == null ? ""String_Node_Str"" : mapping.getEquivalence().toString());
      span.addText(getCharForEquivalence(mapping));
      a=td.addTag(""String_Node_Str"");
      a.setAttribute(""String_Node_Str"",prefix + maps.get(m) + ""String_Node_Str""+ mapping.getCode());
      a.addText(mapping.getCode());
      if (!Utilities.noString(mapping.getComments()))       td.addTag(""String_Node_Str"").addText(""String_Node_Str"" + mapping.getComments() + ""String_Node_Str"");
    }
  }
  for (  CodeType e : ToolingExtensions.getSubsumes(c)) {
    hasExtensions=true;
    tr=t.addTag(""String_Node_Str"");
    td=tr.addTag(""String_Node_Str"");
    s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
    td.addText(s);
    a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",""String_Node_Str"" + Utilities.nmtokenize(e.getValue()));
    a.addText(c.getCode());
  }
  for (  ConceptDefinitionComponent cc : c.getConcept()) {
    hasExtensions=addDefineRowToTable(t,cc,i + 1,comment,deprecated,maps) || hasExtensions;
  }
  return hasExtensions;
}","private boolean addDefineRowToTable(XhtmlNode t,ConceptDefinitionComponent c,int i,boolean comment,boolean deprecated,Map<ConceptMap,String> maps){
  boolean hasExtensions=false;
  XhtmlNode tr=t.addTag(""String_Node_Str"");
  XhtmlNode td=tr.addTag(""String_Node_Str"");
  String s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
  td.addText(s);
  td.addText(c.getCode());
  XhtmlNode a;
  if (c.getCode() != null) {
    a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",Utilities.nmtokenize(c.getCode()));
    a.addText(""String_Node_Str"");
  }
  td=tr.addTag(""String_Node_Str"");
  if (c.getDisplay() != null)   td.addText(c.getDisplay());
  td=tr.addTag(""String_Node_Str"");
  if (c.getDefinition() != null)   smartAddText(td,c.getDefinition());
  if (deprecated) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getDeprecated(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  if (comment) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getComment(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  for (  ConceptMap m : maps.keySet()) {
    td=tr.addTag(""String_Node_Str"");
    List<ConceptMapElementMapComponent> mappings=findMappingsForCode(c.getCode(),m);
    boolean first=true;
    for (    ConceptMapElementMapComponent mapping : mappings) {
      if (!first)       td.addTag(""String_Node_Str"");
      first=false;
      XhtmlNode span=td.addTag(""String_Node_Str"");
      span.setAttribute(""String_Node_Str"",mapping.getEquivalence() == null ? ""String_Node_Str"" : mapping.getEquivalence().toString());
      span.addText(getCharForEquivalence(mapping));
      a=td.addTag(""String_Node_Str"");
      a.setAttribute(""String_Node_Str"",prefix + maps.get(m) + ""String_Node_Str""+ mapping.getCode());
      a.addText(mapping.getCode());
      if (!Utilities.noString(mapping.getComments()))       td.addTag(""String_Node_Str"").addText(""String_Node_Str"" + mapping.getComments() + ""String_Node_Str"");
    }
  }
  for (  CodeType e : ToolingExtensions.getSubsumes(c)) {
    hasExtensions=true;
    tr=t.addTag(""String_Node_Str"");
    td=tr.addTag(""String_Node_Str"");
    s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
    td.addText(s);
    a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",""String_Node_Str"" + Utilities.nmtokenize(e.getValue()));
    a.addText(c.getCode());
  }
  for (  ConceptDefinitionComponent cc : c.getConcept()) {
    hasExtensions=addDefineRowToTable(t,cc,i + 1,comment,deprecated,maps) || hasExtensions;
  }
  return hasExtensions;
}",0.9871029836381136
24140,"private boolean addDefineRowToTable(XhtmlNode t,ConceptDefinitionComponent c,int i,boolean comment,boolean deprecated,Map<ConceptMap,String> maps){
  boolean hasExtensions=false;
  XhtmlNode tr=t.addTag(""String_Node_Str"");
  XhtmlNode td=tr.addTag(""String_Node_Str"");
  String s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
  td.addText(s);
  td.addText(c.getCode());
  XhtmlNode a=td.addTag(""String_Node_Str"");
  a.setAttribute(""String_Node_Str"",Utilities.nmtokenize(c.getCode()));
  a.addText(""String_Node_Str"");
  td=tr.addTag(""String_Node_Str"");
  if (c.getDisplay() != null)   td.addText(c.getDisplay());
  td=tr.addTag(""String_Node_Str"");
  if (c.getDefinition() != null)   smartAddText(td,c.getDefinition());
  if (deprecated) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getDeprecated(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  if (comment) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getComment(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  for (  ConceptMap m : maps.keySet()) {
    td=tr.addTag(""String_Node_Str"");
    List<ConceptMapElementMapComponent> mappings=findMappingsForCode(c.getCode(),m);
    boolean first=true;
    for (    ConceptMapElementMapComponent mapping : mappings) {
      if (!first)       td.addTag(""String_Node_Str"");
      first=false;
      XhtmlNode span=td.addTag(""String_Node_Str"");
      span.setAttribute(""String_Node_Str"",mapping.getEquivalence() == null ? ""String_Node_Str"" : mapping.getEquivalence().toString());
      span.addText(getCharForEquivalence(mapping));
      a=td.addTag(""String_Node_Str"");
      a.setAttribute(""String_Node_Str"",prefix + maps.get(m) + ""String_Node_Str""+ mapping.getCode());
      a.addText(mapping.getCode());
      if (!Utilities.noString(mapping.getComments()))       td.addTag(""String_Node_Str"").addText(""String_Node_Str"" + mapping.getComments() + ""String_Node_Str"");
    }
  }
  for (  CodeType e : ToolingExtensions.getSubsumes(c)) {
    hasExtensions=true;
    tr=t.addTag(""String_Node_Str"");
    td=tr.addTag(""String_Node_Str"");
    s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
    td.addText(s);
    a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",""String_Node_Str"" + Utilities.nmtokenize(e.getValue()));
    a.addText(c.getCode());
  }
  for (  ConceptDefinitionComponent cc : c.getConcept()) {
    hasExtensions=addDefineRowToTable(t,cc,i + 1,comment,deprecated,maps) || hasExtensions;
  }
  return hasExtensions;
}","private boolean addDefineRowToTable(XhtmlNode t,ConceptDefinitionComponent c,int i,boolean comment,boolean deprecated,Map<ConceptMap,String> maps){
  boolean hasExtensions=false;
  XhtmlNode tr=t.addTag(""String_Node_Str"");
  XhtmlNode td=tr.addTag(""String_Node_Str"");
  String s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
  td.addText(s);
  td.addText(c.getCode());
  if (c.getCode() != null) {
    XhtmlNode a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",Utilities.nmtokenize(c.getCode()));
    a.addText(""String_Node_Str"");
  }
  td=tr.addTag(""String_Node_Str"");
  if (c.getDisplay() != null)   td.addText(c.getDisplay());
  td=tr.addTag(""String_Node_Str"");
  if (c.getDefinition() != null)   smartAddText(td,c.getDefinition());
  if (deprecated) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getDeprecated(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  if (comment) {
    td=tr.addTag(""String_Node_Str"");
    s=ToolingExtensions.getComment(c);
    if (s != null) {
      smartAddText(td,s);
      hasExtensions=true;
    }
  }
  for (  ConceptMap m : maps.keySet()) {
    td=tr.addTag(""String_Node_Str"");
    List<ConceptMapElementMapComponent> mappings=findMappingsForCode(c.getCode(),m);
    boolean first=true;
    for (    ConceptMapElementMapComponent mapping : mappings) {
      if (!first)       td.addTag(""String_Node_Str"");
      first=false;
      XhtmlNode span=td.addTag(""String_Node_Str"");
      span.setAttribute(""String_Node_Str"",mapping.getEquivalence() == null ? ""String_Node_Str"" : mapping.getEquivalence().toString());
      span.addText(getCharForEquivalence(mapping));
      a=td.addTag(""String_Node_Str"");
      a.setAttribute(""String_Node_Str"",prefix + maps.get(m) + ""String_Node_Str""+ mapping.getCode());
      a.addText(mapping.getCode());
      if (!Utilities.noString(mapping.getComments()))       td.addTag(""String_Node_Str"").addText(""String_Node_Str"" + mapping.getComments() + ""String_Node_Str"");
    }
  }
  for (  CodeType e : ToolingExtensions.getSubsumes(c)) {
    hasExtensions=true;
    tr=t.addTag(""String_Node_Str"");
    td=tr.addTag(""String_Node_Str"");
    s=Utilities.padLeft(""String_Node_Str"",'.',i * 2);
    td.addText(s);
    a=td.addTag(""String_Node_Str"");
    a.setAttribute(""String_Node_Str"",""String_Node_Str"" + Utilities.nmtokenize(e.getValue()));
    a.addText(c.getCode());
  }
  for (  ConceptDefinitionComponent cc : c.getConcept()) {
    hasExtensions=addDefineRowToTable(t,cc,i + 1,comment,deprecated,maps) || hasExtensions;
  }
  return hasExtensions;
}",0.9924286546301688
24141,"private Cell generateDescription(HeirarchicalTableGenerator gen,Row row,ElementComponent definition,ElementComponent fallback,boolean used,String baseURL,String url,ProfileKnowledgeProvider pkp,Profile profile) throws Exception {
  Cell c=gen.new Cell();
  row.getCells().add(c);
  if (used) {
    if (definition.getDefinition() != null && definition.getDefinition().getShort() != null) {
      if (!c.getPieces().isEmpty())       c.addPiece(gen.new Piece(""String_Node_Str""));
      c.addPiece(gen.new Piece(null,definition.getDefinition().getShort(),null));
    }
 else     if (fallback != null && fallback.getDefinition() != null && fallback.getDefinition().getShort() != null) {
      if (!c.getPieces().isEmpty())       c.addPiece(gen.new Piece(""String_Node_Str""));
      c.addPiece(gen.new Piece(null,fallback.getDefinition().getShort(),null));
    }
    if (url != null) {
      if (!c.getPieces().isEmpty())       c.addPiece(gen.new Piece(""String_Node_Str""));
      String fullUrl=url.startsWith(""String_Node_Str"") ? baseURL + url : url;
      String ref=pkp.getLinkForExtension(profile,url);
      c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
      c.getPieces().add(gen.new Piece(ref,fullUrl,null));
    }
    if (definition.getSlicing() != null) {
      if (!c.getPieces().isEmpty())       c.addPiece(gen.new Piece(""String_Node_Str""));
      c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
      c.getPieces().add(gen.new Piece(null,describeSlice(definition.getSlicing()),null));
    }
    if (definition.getDefinition() != null) {
      if (definition.getDefinition().getBinding() != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        String ref=pkp.resolveBinding(definition.getDefinition().getBinding());
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(ref,definition.getDefinition().getBinding().getName(),null));
        if (definition.getDefinition().getBinding().getConformance() != null || definition.getDefinition().getBinding().getIsExtensibleElement() != null) {
          c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          if (definition.getDefinition().getBinding().getConformance() != null)           c.getPieces().add(gen.new Piece(null,definition.getDefinition().getBinding().getConformance().toCode(),definition.getDefinition().getBinding().getConformance().getDefinition()));
          if (definition.getDefinition().getBinding().getIsExtensibleElement() != null)           c.getPieces().add(gen.new Piece(null,definition.getDefinition().getBinding().getIsExtensibleElement().toString(),null));
          c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
        }
      }
      for (      ElementDefinitionConstraintComponent inv : definition.getDefinition().getConstraint()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"" + inv.getKey() + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,inv.getHuman(),null));
      }
      if (definition.getDefinition().getValue() != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,buildJson(definition.getDefinition().getValue()),null).addStyle(""String_Node_Str""));
      }
 else       if (definition.getDefinition().getPattern() != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,buildJson(definition.getDefinition().getPattern()),null).addStyle(""String_Node_Str""));
      }
 else       if (definition.getDefinition().getExample() != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,buildJson(definition.getDefinition().getExample()),null).addStyle(""String_Node_Str""));
      }
    }
  }
  return c;
}","private Cell generateDescription(HeirarchicalTableGenerator gen,Row row,ElementComponent definition,ElementComponent fallback,boolean used,String baseURL,String url,ProfileKnowledgeProvider pkp,Profile profile) throws Exception {
  Cell c=gen.new Cell();
  row.getCells().add(c);
  if (used) {
    if (definition.getDefinition() != null && definition.getDefinition().getShort() != null) {
      if (!c.getPieces().isEmpty())       c.addPiece(gen.new Piece(""String_Node_Str""));
      c.addPiece(gen.new Piece(null,definition.getDefinition().getShort(),null));
    }
 else     if (fallback != null && fallback.getDefinition() != null && fallback.getDefinition().getShort() != null) {
      if (!c.getPieces().isEmpty())       c.addPiece(gen.new Piece(""String_Node_Str""));
      c.addPiece(gen.new Piece(null,fallback.getDefinition().getShort(),null));
    }
    if (url != null) {
      if (!c.getPieces().isEmpty())       c.addPiece(gen.new Piece(""String_Node_Str""));
      String fullUrl=url.startsWith(""String_Node_Str"") ? baseURL + url : url;
      String ref=pkp.getLinkForExtension(profile,url);
      c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
      c.getPieces().add(gen.new Piece(ref,fullUrl,null));
    }
    if (definition.getSlicing() != null) {
      if (!c.getPieces().isEmpty())       c.addPiece(gen.new Piece(""String_Node_Str""));
      c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
      c.getPieces().add(gen.new Piece(null,describeSlice(definition.getSlicing()),null));
    }
    if (definition.getDefinition() != null) {
      if (definition.getDefinition().getBinding() != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        String ref=pkp.resolveBinding(definition.getDefinition().getBinding());
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(ref,definition.getDefinition().getBinding().getName(),null));
        if (definition.getDefinition().getBinding().getConformance() != null || definition.getDefinition().getBinding().getIsExtensibleElement() != null) {
          c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          if (definition.getDefinition().getBinding().getConformance() != null)           c.getPieces().add(gen.new Piece(null,definition.getDefinition().getBinding().getConformance().toCode(),definition.getDefinition().getBinding().getConformance().getDefinition()));
          if (definition.getDefinition().getBinding().getConformance() != null && definition.getDefinition().getBinding().getIsExtensibleElement() != null)           c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
          if (definition.getDefinition().getBinding().getIsExtensibleElement() != null)           c.getPieces().add(gen.new Piece(null,definition.getDefinition().getBinding().getIsExtensible() ? ""String_Node_Str"" : ""String_Node_Str"",null));
          c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null));
        }
      }
      for (      ElementDefinitionConstraintComponent inv : definition.getDefinition().getConstraint()) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"" + inv.getKey() + ""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,inv.getHuman(),null));
      }
      if (definition.getDefinition().getValue() != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,buildJson(definition.getDefinition().getValue()),null).addStyle(""String_Node_Str""));
      }
 else       if (definition.getDefinition().getPattern() != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,buildJson(definition.getDefinition().getPattern()),null).addStyle(""String_Node_Str""));
      }
 else       if (definition.getDefinition().getExample() != null) {
        if (!c.getPieces().isEmpty())         c.addPiece(gen.new Piece(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,""String_Node_Str"",null).addStyle(""String_Node_Str""));
        c.getPieces().add(gen.new Piece(null,buildJson(definition.getDefinition().getExample()),null).addStyle(""String_Node_Str""));
      }
    }
  }
  return c;
}",0.9704129186084318
24142,"public String describeSlice(ElementSlicingComponent slicing){
  return (slicing.getOrdered() ? ""String_Node_Str"" : ""String_Node_Str"") + describe(slicing.getRules()) + ""String_Node_Str""+ slicing.getDiscriminator().toString();
}","public String describeSlice(ElementSlicingComponent slicing){
  return (slicing.getOrdered() ? ""String_Node_Str"" : ""String_Node_Str"") + describe(slicing.getRules()) + ""String_Node_Str""+ commas(slicing.getDiscriminator());
}",0.9621380846325168
24143,"private void processDataType(Profile profile,GroupComponent group,ElementComponent element,String path,TypeRefComponent t,List<QuestionnaireAnswers.GroupComponent> answerGroups) throws Exception {
  if (t.getCode().equals(""String_Node_Str""))   addCodeQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str"") || t.getCode().equals(""String_Node_Str"") || t.getCode().equals(""String_Node_Str""))   addStringQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addUriQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addBooleanQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addDecimalQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str"") || t.getCode().equals(""String_Node_Str""))   addDateTimeQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addInstantQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addTimeQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addCodeableConceptQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addPeriodQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addRatioQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addHumanNameQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addAddressQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addContactPointQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addIdentifierQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addIntegerQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addCodingQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addQuantityQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addReferenceQuestions(group,element,path,t.getProfile(),answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addIdRefQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addDurationQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addBinaryQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addAttachmentQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addAgeQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addRangeQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addTimingQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addSampledDataQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addExtensionQuestions(profile,group,element,path,t.getProfile(),answerGroups);
 else   if (!t.getCode().equals(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + t.getCode() + ""String_Node_Str""+ element.getPath());
}","private void processDataType(Profile profile,GroupComponent group,ElementComponent element,String path,TypeRefComponent t,List<QuestionnaireAnswers.GroupComponent> answerGroups) throws Exception {
  if (t.getCode().equals(""String_Node_Str""))   addCodeQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str"") || t.getCode().equals(""String_Node_Str"") || t.getCode().equals(""String_Node_Str""))   addStringQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addUriQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addBooleanQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addDecimalQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str"") || t.getCode().equals(""String_Node_Str""))   addDateTimeQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addInstantQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addTimeQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addCodeableConceptQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addPeriodQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addRatioQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addHumanNameQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addAddressQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addContactPointQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addIdentifierQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addIntegerQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addCodingQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addQuantityQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addMoneyQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addReferenceQuestions(group,element,path,t.getProfile(),answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addIdRefQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addDurationQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addBinaryQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addAttachmentQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addAgeQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addRangeQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addTimingQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addSampledDataQuestions(group,element,path,answerGroups);
 else   if (t.getCode().equals(""String_Node_Str""))   addExtensionQuestions(profile,group,element,path,t.getProfile(),answerGroups);
 else   if (!t.getCode().equals(""String_Node_Str""))   throw new Exception(""String_Node_Str"" + t.getCode() + ""String_Node_Str""+ element.getPath());
}",0.9852341442835044
24144,"public static Coding makeCoding(String code) throws Exception {
  String[] parts=code.split(""String_Node_Str"");
  Coding c=new Coding();
  if (parts.length == 2) {
    c.setSystem(parts[0]);
    c.setCode(parts[1]);
  }
 else   if (parts.length == 3) {
    c.setSystem(parts[0]);
    c.setCode(parts[1]);
    c.setDisplay(parts[2]);
  }
 else   throw new Exception(""String_Node_Str"");
  return c;
}","public static Coding makeCoding(String code) throws Exception {
  String[] parts=code.split(""String_Node_Str"");
  Coding c=new Coding();
  if (parts.length == 2) {
    c.setSystem(parts[0]);
    c.setCode(parts[1]);
  }
 else   if (parts.length == 3) {
    c.setSystem(parts[0]);
    c.setCode(parts[1]);
    c.setDisplay(parts[2]);
  }
 else   throw new Exception(""String_Node_Str"" + code + ""String_Node_Str"");
  return c;
}",0.9671931956257594
24145,"public Profile generate(ProfileDefn profile,String id,String html,Calendar genDate) throws Exception {
  if (profile.getSource() != null)   return profile.getSource();
  Profile p=new Profile();
  p.setUrl(""String_Node_Str"" + id);
  p.setName(profile.metadata(""String_Node_Str""));
  p.setPublisher(profile.metadata(""String_Node_Str""));
  if (profile.hasMetadata(""String_Node_Str""))   p.getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,profile.metadata(""String_Node_Str"")));
  if (profile.hasMetadata(""String_Node_Str""))   p.setDescription(profile.metadata(""String_Node_Str""));
  if (profile.hasMetadata(""String_Node_Str""))   p.setRequirements(profile.metadata(""String_Node_Str""));
  if (profile.hasMetadata(""String_Node_Str""))   p.setDateElement(Factory.newDateTime(profile.metadata(""String_Node_Str"").substring(0,10)));
 else   p.setDate(new DateAndTime(genDate));
  if (profile.hasMetadata(""String_Node_Str""))   p.setStatus(Profile.ResourceProfileStatus.fromCode(profile.metadata(""String_Node_Str"")));
  for (  String s : profile.getMetadata().get(""String_Node_Str""))   p.getCode().add(Factory.makeCoding(s));
  Set<String> containedSlices=new HashSet<String>();
  for (  ResourceDefn resource : profile.getResources()) {
    Profile.ProfileStructureComponent c=new Profile.ProfileStructureComponent();
    p.getStructure().add(c);
    c.setPublish(resource.isPublishedInProfile());
    c.setType(resource.getRoot().getName());
    c.setName(resource.getRoot().getName());
    c.setBase(""String_Node_Str"" + c.getType());
    if (!""String_Node_Str"".equals(resource.getRoot().getProfileName()))     c.setName(resource.getRoot().getProfileName());
    c.setDifferential(new ConstraintComponent());
    defineElement(profile,p,c.getDifferential(),resource.getRoot(),resource.getName(),containedSlices,new ArrayList<ProfileGenerator.SliceHandle>(),SnapShotMode.None);
    List<String> names=new ArrayList<String>();
    names.addAll(resource.getSearchParams().keySet());
    Collections.sort(names);
    for (    String pn : names) {
      SearchParameter param=resource.getSearchParams().get(pn);
      makeSearchParam(p,c,resource.getName(),param);
    }
    reset();
    ProfileStructureComponent base=definitions.getSnapShotForType(c.getType());
    new ProfileUtilities(context).generateSnapshot(base,c,""String_Node_Str"" + c.getType(),p.getName());
    reset();
  }
  for (  ExtensionDefn ex : profile.getExtensions())   p.getExtensionDefn().add(generateExtensionDefn(ex,p));
  XhtmlNode div=new XhtmlNode(NodeType.Element,""String_Node_Str"");
  div.addText(""String_Node_Str"");
  p.setText(new Narrative());
  p.getText().setStatus(NarrativeStatus.GENERATED);
  p.getText().setDiv(div);
  return p;
}","public Profile generate(ProfileDefn profile,String id,String html,Calendar genDate) throws Exception {
  if (profile.getSource() != null)   return profile.getSource();
  Profile p=new Profile();
  p.setUrl(""String_Node_Str"" + id);
  p.setName(profile.metadata(""String_Node_Str""));
  p.setPublisher(profile.metadata(""String_Node_Str""));
  if (profile.hasMetadata(""String_Node_Str""))   p.getTelecom().add(Factory.newContactPoint(ContactPointSystem.URL,profile.metadata(""String_Node_Str"")));
  if (profile.hasMetadata(""String_Node_Str""))   p.setDescription(profile.metadata(""String_Node_Str""));
  if (profile.hasMetadata(""String_Node_Str""))   p.setRequirements(profile.metadata(""String_Node_Str""));
  if (profile.hasMetadata(""String_Node_Str""))   p.setDateElement(Factory.newDateTime(profile.metadata(""String_Node_Str"").substring(0,10)));
 else   p.setDate(new DateAndTime(genDate));
  if (profile.hasMetadata(""String_Node_Str""))   p.setStatus(Profile.ResourceProfileStatus.fromCode(profile.metadata(""String_Node_Str"")));
  for (  String s : profile.getMetadata().get(""String_Node_Str""))   if (!Utilities.noString(s))   p.getCode().add(Factory.makeCoding(s));
  Set<String> containedSlices=new HashSet<String>();
  for (  ResourceDefn resource : profile.getResources()) {
    Profile.ProfileStructureComponent c=new Profile.ProfileStructureComponent();
    p.getStructure().add(c);
    c.setPublish(resource.isPublishedInProfile());
    c.setType(resource.getRoot().getName());
    c.setName(resource.getRoot().getName());
    c.setBase(""String_Node_Str"" + c.getType());
    if (!""String_Node_Str"".equals(resource.getRoot().getProfileName()))     c.setName(resource.getRoot().getProfileName());
    c.setDifferential(new ConstraintComponent());
    defineElement(profile,p,c.getDifferential(),resource.getRoot(),resource.getName(),containedSlices,new ArrayList<ProfileGenerator.SliceHandle>(),SnapShotMode.None);
    List<String> names=new ArrayList<String>();
    names.addAll(resource.getSearchParams().keySet());
    Collections.sort(names);
    for (    String pn : names) {
      SearchParameter param=resource.getSearchParams().get(pn);
      makeSearchParam(p,c,resource.getName(),param);
    }
    reset();
    ProfileStructureComponent base=definitions.getSnapShotForType(c.getType());
    new ProfileUtilities(context).generateSnapshot(base,c,""String_Node_Str"" + c.getType(),p.getName());
    reset();
  }
  for (  ExtensionDefn ex : profile.getExtensions())   p.getExtensionDefn().add(generateExtensionDefn(ex,p));
  XhtmlNode div=new XhtmlNode(NodeType.Element,""String_Node_Str"");
  div.addText(""String_Node_Str"");
  p.setText(new Narrative());
  p.getText().setStatus(NarrativeStatus.GENERATED);
  p.getText().setDiv(div);
  return p;
}",0.9945075064079092
24146,"public String makelist(String name,String type,String prefix) throws Exception {
  StringBuilder b=new StringBuilder();
  if (name.equals(""String_Node_Str"")) {
    b.append(""String_Node_Str"");
  }
 else {
    b.append(""String_Node_Str"" + prefix + ""String_Node_Str""+ translations.getMessage(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"");
    name=name + ""String_Node_Str"";
    if (map.containsKey(name)) {
      String[] path=map.get(name).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length - 1; i++) {
        focus=getChild(focus,path[i]);
        b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      focus=getChild(focus,path[path.length - 1]);
      b.append(""String_Node_Str"" + focus.getTitle() + ""String_Node_Str"");
    }
 else     if (map.containsKey(type)) {
      String[] path=map.get(type).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length - 1; i++) {
        focus=getChild(focus,path[i]);
        b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"" + Utilities.fileTitle(name) + ""String_Node_Str"");
    }
 else     if (type.equals(""String_Node_Str"") && name.contains(""String_Node_Str"") && map.containsKey(name.substring(0,name.indexOf(""String_Node_Str"")))) {
      String[] path=map.get(name.substring(0,name.indexOf(""String_Node_Str""))).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"");
    }
 else     if (type.startsWith(""String_Node_Str"") && type.contains(""String_Node_Str"")) {
      String[] path=map.get(type.substring(type.indexOf(""String_Node_Str"") + 1).toLowerCase()).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      if (type.startsWith(""String_Node_Str""))       b.append(""String_Node_Str"");
 else       b.append(""String_Node_Str"");
    }
 else     if (type.startsWith(""String_Node_Str"") && type.contains(""String_Node_Str"")) {
      String[] path=map.get(type.substring(type.indexOf(""String_Node_Str"") + 1).toLowerCase()).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"");
    }
 else     if (type.equals(""String_Node_Str"") && name.contains(""String_Node_Str"")) {
      String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"" + prefix + name.substring(0,name.indexOf(""String_Node_Str""))+ ""String_Node_Str""+ name.substring(0,name.indexOf(""String_Node_Str""))+ ""String_Node_Str"");
      b.append(""String_Node_Str"");
    }
 else     if (type.equals(""String_Node_Str"") && name.contains(""String_Node_Str"")) {
      String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"");
    }
 else     if (type.startsWith(""String_Node_Str"") && map.containsKey(Utilities.fileTitle(name))) {
      String[] path=map.get(Utilities.fileTitle(name)).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length - 1; i++) {
        focus=getChild(focus,path[i]);
        b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      focus=getChild(focus,path[path.length - 1]);
      if (type.equals(""String_Node_Str"")) {
        b.append(""String_Node_Str"" + focus.getResource() + ""String_Node_Str"");
      }
 else {
        b.append(""String_Node_Str"" + focus.getResource().toLowerCase() + ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
        b.append(""String_Node_Str"" + type.substring(4) + ""String_Node_Str"");
      }
    }
 else     if (type.startsWith(""String_Node_Str"")) {
      String[] path=map.get(type.substring(type.indexOf(""String_Node_Str"") + 1).toLowerCase()).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"" + Utilities.fileTitle(name) + ""String_Node_Str"");
    }
 else     if (type.startsWith(""String_Node_Str"")) {
      String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"");
    }
 else {
      String t=type.substring(type.lastIndexOf(""String_Node_Str"") + 1);
      if (t == null)       throw new Exception(""String_Node_Str"" + type);
      String obj=map.get(t.toLowerCase());
      if (obj == null)       throw new Exception(""String_Node_Str"" + type);
      if (type.startsWith(""String_Node_Str"")) {
        String[] path=obj.split(""String_Node_Str"");
        Page focus=home;
        for (int i=0; i < path.length; i++) {
          focus=getChild(focus,path[i]);
          if (focus.type == PageType.resource)           b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else           b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
        }
        b.append(""String_Node_Str"");
      }
 else       if (type.startsWith(""String_Node_Str"")) {
        String[] path=obj.split(""String_Node_Str"");
        Page focus=home;
        for (int i=0; i < path.length; i++) {
          focus=getChild(focus,path[i]);
          if (focus.type == PageType.resource)           b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else           b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
        }
        b.append(""String_Node_Str"" + prefix + Utilities.fileTitle(name)+ ""String_Node_Str""+ Utilities.fileTitle(name)+ ""String_Node_Str"");
        b.append(""String_Node_Str"");
      }
 else       if (type.startsWith(""String_Node_Str"")) {
        String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
        Page focus=home;
        for (int i=0; i < path.length; i++) {
          focus=getChild(focus,path[i]);
          if (focus.type == PageType.resource)           b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else           b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
        }
        b.append(""String_Node_Str"");
      }
 else       if (type.startsWith(""String_Node_Str"")) {
        String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
        Page focus=home;
        for (int i=0; i < path.length - 1; i++) {
          focus=getChild(focus,path[i]);
          b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
        }
        b.append(""String_Node_Str"" + Utilities.fileTitle(name) + ""String_Node_Str"");
        b.append(""String_Node_Str"");
      }
 else       if (type.startsWith(""String_Node_Str"")) {
        String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
        Page focus=home;
        for (int i=0; i < path.length - 1; i++) {
          focus=getChild(focus,path[i]);
          b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
        }
        b.append(""String_Node_Str"" + Utilities.fileTitle(name.substring(3)) + ""String_Node_Str"");
        b.append(""String_Node_Str"");
      }
 else       if (type.startsWith(""String_Node_Str"")) {
        String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
        Page focus=home;
        for (int i=0; i < path.length - 1; i++) {
          focus=getChild(focus,path[i]);
          b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
        }
        b.append(""String_Node_Str"" + prefix + ""String_Node_Str"");
        b.append(""String_Node_Str"" + prefix + ""String_Node_Str"");
        b.append(""String_Node_Str"" + type.substring(4) + ""String_Node_Str"");
      }
 else {
        b.append(""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str"");
      }
    }
  }
  b.append(""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str"");
  return b.toString();
}","public String makelist(String name,String type,String prefix) throws Exception {
  StringBuilder b=new StringBuilder();
  if (name.equals(""String_Node_Str"")) {
    b.append(""String_Node_Str"");
  }
 else {
    b.append(""String_Node_Str"" + prefix + ""String_Node_Str""+ translations.getMessage(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"");
    name=name + ""String_Node_Str"";
    if (map.containsKey(name)) {
      String[] path=map.get(name).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length - 1; i++) {
        focus=getChild(focus,path[i]);
        b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      focus=getChild(focus,path[path.length - 1]);
      b.append(""String_Node_Str"" + focus.getTitle() + ""String_Node_Str"");
    }
 else     if (map.containsKey(type)) {
      String[] path=map.get(type).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length - 1; i++) {
        focus=getChild(focus,path[i]);
        b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"" + Utilities.fileTitle(name) + ""String_Node_Str"");
    }
 else     if (type.equals(""String_Node_Str"") && name.contains(""String_Node_Str"") && map.containsKey(name.substring(0,name.indexOf(""String_Node_Str"")))) {
      String[] path=map.get(name.substring(0,name.indexOf(""String_Node_Str""))).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"");
    }
 else     if (type.startsWith(""String_Node_Str"") && type.contains(""String_Node_Str"")) {
      String[] path=map.get(type.substring(type.indexOf(""String_Node_Str"") + 1).toLowerCase()).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      if (type.startsWith(""String_Node_Str""))       b.append(""String_Node_Str"");
 else       b.append(""String_Node_Str"");
    }
 else     if (type.startsWith(""String_Node_Str"") && type.contains(""String_Node_Str"")) {
      String[] path=map.get(type.substring(type.indexOf(""String_Node_Str"") + 1).toLowerCase()).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"");
    }
 else     if (type.equals(""String_Node_Str"") && name.contains(""String_Node_Str"")) {
      String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"" + prefix + name.substring(0,name.indexOf(""String_Node_Str""))+ ""String_Node_Str""+ name.substring(0,name.indexOf(""String_Node_Str""))+ ""String_Node_Str"");
      b.append(""String_Node_Str"");
    }
 else     if (type.equals(""String_Node_Str"") && name.contains(""String_Node_Str"")) {
      String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"");
    }
 else     if (type.startsWith(""String_Node_Str"") && map.containsKey(Utilities.fileTitle(name))) {
      String[] path=map.get(Utilities.fileTitle(name)).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length - 1; i++) {
        focus=getChild(focus,path[i]);
        b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      focus=getChild(focus,path[path.length - 1]);
      if (type.equals(""String_Node_Str"")) {
        b.append(""String_Node_Str"" + focus.getResource() + ""String_Node_Str"");
      }
 else {
        b.append(""String_Node_Str"" + focus.getResource().toLowerCase() + ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
        b.append(""String_Node_Str"" + type.substring(4) + ""String_Node_Str"");
      }
    }
 else     if (type.startsWith(""String_Node_Str"")) {
      String[] path=map.get(type.substring(type.indexOf(""String_Node_Str"") + 1).toLowerCase()).split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"" + Utilities.fileTitle(name) + ""String_Node_Str"");
    }
 else     if (type.startsWith(""String_Node_Str"")) {
      String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
      Page focus=home;
      for (int i=0; i < path.length; i++) {
        focus=getChild(focus,path[i]);
        if (focus.type == PageType.resource)         b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else         b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
      }
      b.append(""String_Node_Str"");
    }
 else     if (type.startsWith(""String_Node_Str"")) {
      String t=type.substring(type.lastIndexOf(""String_Node_Str"") + 1);
      if (t == null)       throw new Exception(""String_Node_Str"" + type);
      String obj=map.get(t.toLowerCase());
      if (obj == null)       throw new Exception(""String_Node_Str"" + t);
      if (type.startsWith(""String_Node_Str"")) {
        String[] path=obj.split(""String_Node_Str"");
        Page focus=home;
        for (int i=0; i < path.length; i++) {
          focus=getChild(focus,path[i]);
          if (focus.type == PageType.resource)           b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else           b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
        }
        b.append(""String_Node_Str"");
      }
 else       if (type.startsWith(""String_Node_Str"")) {
        String[] path=obj.split(""String_Node_Str"");
        Page focus=home;
        for (int i=0; i < path.length; i++) {
          focus=getChild(focus,path[i]);
          if (focus.type == PageType.resource)           b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else           b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
        }
        b.append(""String_Node_Str"" + prefix + Utilities.fileTitle(name)+ ""String_Node_Str""+ Utilities.fileTitle(name)+ ""String_Node_Str"");
        b.append(""String_Node_Str"");
      }
 else       if (type.startsWith(""String_Node_Str"")) {
        String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
        Page focus=home;
        for (int i=0; i < path.length; i++) {
          focus=getChild(focus,path[i]);
          if (focus.type == PageType.resource)           b.append(""String_Node_Str"" + prefix + focus.getResource().toLowerCase()+ ""String_Node_Str""+ focus.getResource()+ ""String_Node_Str"");
 else           b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
        }
        b.append(""String_Node_Str"");
      }
 else       if (type.startsWith(""String_Node_Str"")) {
        String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
        Page focus=home;
        for (int i=0; i < path.length - 1; i++) {
          focus=getChild(focus,path[i]);
          b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
        }
        b.append(""String_Node_Str"" + Utilities.fileTitle(name) + ""String_Node_Str"");
        b.append(""String_Node_Str"");
      }
 else       if (type.startsWith(""String_Node_Str"")) {
        String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
        Page focus=home;
        for (int i=0; i < path.length - 1; i++) {
          focus=getChild(focus,path[i]);
          b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
        }
        b.append(""String_Node_Str"" + Utilities.fileTitle(name.substring(3)) + ""String_Node_Str"");
        b.append(""String_Node_Str"");
      }
 else       if (type.startsWith(""String_Node_Str"")) {
        String[] path=map.get(""String_Node_Str"").split(""String_Node_Str"");
        Page focus=home;
        for (int i=0; i < path.length - 1; i++) {
          focus=getChild(focus,path[i]);
          b.append(""String_Node_Str"" + prefix + focus.getFilename()+ ""String_Node_Str""+ focus.getTitle()+ ""String_Node_Str"");
        }
        b.append(""String_Node_Str"" + prefix + ""String_Node_Str"");
        b.append(""String_Node_Str"" + prefix + ""String_Node_Str"");
        b.append(""String_Node_Str"" + type.substring(4) + ""String_Node_Str"");
      }
 else {
        b.append(""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str"");
      }
    }
  }
  b.append(""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str"");
  return b.toString();
}",0.9978846932805256
24147,"private ValueSet makeTypeList(Profile profile,List<TypeRefComponent> types,String path){
  ValueSet vs=new ValueSet();
  vs.setIdentifierSimple(Utilities.makeUuidUrn());
  vs.setNameSimple(""String_Node_Str"" + path);
  vs.setDescriptionSimple(vs.getNameSimple());
  vs.setStatusSimple(ValuesetStatus.active);
  vs.setExpansion(new ValueSetExpansionComponent());
  vs.getExpansion().setTimestampSimple(DateAndTime.now());
  for (  TypeRefComponent t : types) {
    ValueSetExpansionContainsComponent cc=vs.getExpansion().addContains();
    if (t.getCodeSimple().equals(""String_Node_Str"") && (t.getProfileSimple() != null && t.getProfileSimple().startsWith(""String_Node_Str""))) {
      cc.setCodeSimple(t.getProfileSimple().substring(28));
      cc.setSystemSimple(""String_Node_Str"");
      cc.setDisplaySimple(cc.getCodeSimple());
    }
 else {
      ProfileUtilities pu=new ProfileUtilities(context);
      StrucResult ps=null;
      if (!Utilities.noString(t.getProfileSimple()))       ps=pu.getStructure(profile,t.getProfileSimple());
      if (ps != null && ps.getStructure() != null) {
        cc.setCodeSimple(t.getProfileSimple());
        cc.setDisplaySimple(structure.getNameSimple());
        cc.setSystemSimple(""String_Node_Str"");
      }
 else {
        cc.setCodeSimple(t.getCodeSimple());
        cc.setDisplaySimple(t.getCodeSimple());
        cc.setSystemSimple(""String_Node_Str"");
      }
    }
    t.setTag(""String_Node_Str"",cc.getCodeSimple());
  }
  return vs;
}","private ValueSet makeTypeList(Profile profile,List<TypeRefComponent> types,String path) throws Exception {
  ValueSet vs=new ValueSet();
  vs.setIdentifierSimple(Utilities.makeUuidUrn());
  vs.setNameSimple(""String_Node_Str"" + path);
  vs.setDescriptionSimple(vs.getNameSimple());
  vs.setStatusSimple(ValuesetStatus.active);
  vs.setExpansion(new ValueSetExpansionComponent());
  vs.getExpansion().setTimestampSimple(DateAndTime.now());
  for (  TypeRefComponent t : types) {
    ValueSetExpansionContainsComponent cc=vs.getExpansion().addContains();
    if (t.getCodeSimple().equals(""String_Node_Str"") && (t.getProfileSimple() != null && t.getProfileSimple().startsWith(""String_Node_Str""))) {
      cc.setCodeSimple(t.getProfileSimple().substring(28));
      cc.setSystemSimple(""String_Node_Str"");
      cc.setDisplaySimple(cc.getCodeSimple());
    }
 else {
      ProfileUtilities pu=new ProfileUtilities(context);
      StrucResult ps=null;
      if (!Utilities.noString(t.getProfileSimple()))       ps=pu.getStructure(profile,t.getProfileSimple());
      if (ps != null && ps.getStructure() != null) {
        cc.setCodeSimple(t.getProfileSimple());
        cc.setDisplaySimple(structure.getNameSimple());
        cc.setSystemSimple(""String_Node_Str"");
      }
 else {
        cc.setCodeSimple(t.getCodeSimple());
        cc.setDisplaySimple(t.getCodeSimple());
        cc.setSystemSimple(""String_Node_Str"");
      }
    }
    t.setTag(""String_Node_Str"",cc.getCodeSimple());
  }
  return vs;
}",0.9939556749496308
24148,"private void writeText(XhtmlNode node) throws Exception {
  for (  char c : node.getContent().toCharArray()) {
    if (c == '&')     dst.append(""String_Node_Str"");
 else     if (c == '<')     dst.append(""String_Node_Str"");
 else     if (c == '>')     dst.append(""String_Node_Str"");
 else     if (c == '""')     dst.append(""String_Node_Str"");
 else     if (c == XhtmlNode.NBSP.charAt(0))     dst.append(""String_Node_Str"");
 else     if (c == (char)0xA7)     dst.append(""String_Node_Str"");
 else     if (c == (char)169)     dst.append(""String_Node_Str"");
 else     if (c == (char)8482)     dst.append(""String_Node_Str"");
 else     if (c == (char)956)     dst.append(""String_Node_Str"");
 else     if (c == (char)174)     dst.append(""String_Node_Str"");
 else     dst.append(c);
  }
}","private void writeText(XhtmlNode node) throws Exception {
  for (  char c : node.getContent().toCharArray()) {
    if (c == '&')     dst.append(""String_Node_Str"");
 else     if (c == '<')     dst.append(""String_Node_Str"");
 else     if (c == '>')     dst.append(""String_Node_Str"");
 else     if (c == '""')     dst.append(""String_Node_Str"");
 else     if (!xmlOnly) {
      dst.append(c);
    }
 else {
      if (c == XhtmlNode.NBSP.charAt(0))       dst.append(""String_Node_Str"");
 else       if (c == (char)0xA7)       dst.append(""String_Node_Str"");
 else       if (c == (char)169)       dst.append(""String_Node_Str"");
 else       if (c == (char)8482)       dst.append(""String_Node_Str"");
 else       if (c == (char)956)       dst.append(""String_Node_Str"");
 else       if (c == (char)174)       dst.append(""String_Node_Str"");
 else       dst.append(c);
    }
  }
}",0.6597687157638467
24149,"private void buildQuestion(Questionnaire questionnaire,GroupComponent group,Profile profile,ProfileStructureComponent structure,ElementComponent element,String path) throws Exception {
  group.setLinkIdSimple(path);
  group.setTextSimple(element.getDefinition().getShortSimple());
  group.setRequiredSimple(element.getDefinition().getMin().getValue() > 0);
  group.setRepeatsSimple(!element.getDefinition().getMax().getValue().equals(""String_Node_Str""));
  if (Utilities.noString(element.getDefinition().getCommentsSimple()))   ToolingExtensions.addFlyOver(group,element.getDefinition().getFormalSimple() + ""String_Node_Str"" + element.getDefinition().getCommentsSimple());
 else   ToolingExtensions.addFlyOver(group,element.getDefinition().getFormalSimple());
  if (!element.getDefinition().getType().isEmpty() || element.getDefinition().getType().get(0).getCodeSimple().equals(""String_Node_Str"")) {
    QuestionComponent q=addQuestion(group,AnswerFormat.choice,element.getPathSimple(),""String_Node_Str"",""String_Node_Str"");
    List<TypeRefComponent> types=expandTypeList(element.getDefinition().getType());
    q.setOptions(makeTypeList(questionnaire,profile,types,element.getPathSimple()));
    for (    TypeRefComponent t : types) {
      GroupComponent sub=q.addGroup();
      sub.setLinkIdSimple(element.getPathSimple() + ""String_Node_Str"" + t.getTag(""String_Node_Str""));
      sub.setTextSimple(t.getTag(""String_Node_Str""));
      processDataType(questionnaire,profile,sub,element,element.getPathSimple() + ""String_Node_Str"" + t.getTag(""String_Node_Str""),t);
    }
  }
 else   processDataType(questionnaire,profile,group,element,element.getPathSimple(),element.getDefinition().getType().get(0));
}","private void buildQuestion(Questionnaire questionnaire,GroupComponent group,Profile profile,ProfileStructureComponent structure,ElementComponent element,String path) throws Exception {
  group.setLinkIdSimple(path);
  group.setTextSimple(element.getDefinition().getShortSimple());
  group.setRequiredSimple(element.getDefinition().getMin().getValue() > 0);
  group.setRepeatsSimple(!element.getDefinition().getMax().getValue().equals(""String_Node_Str""));
  if (Utilities.noString(element.getDefinition().getCommentsSimple()))   ToolingExtensions.addFlyOver(group,element.getDefinition().getFormalSimple() + ""String_Node_Str"" + element.getDefinition().getCommentsSimple());
 else   ToolingExtensions.addFlyOver(group,element.getDefinition().getFormalSimple());
  if (element.getDefinition().getType().size() > 1 || element.getDefinition().getType().get(0).getCodeSimple().equals(""String_Node_Str"")) {
    QuestionComponent q=addQuestion(group,AnswerFormat.choice,element.getPathSimple(),""String_Node_Str"",""String_Node_Str"");
    List<TypeRefComponent> types=expandTypeList(element.getDefinition().getType());
    q.setOptions(makeTypeList(questionnaire,profile,types,element.getPathSimple()));
    for (    TypeRefComponent t : types) {
      GroupComponent sub=q.addGroup();
      sub.setLinkIdSimple(element.getPathSimple() + ""String_Node_Str"" + t.getTag(""String_Node_Str""));
      sub.setTextSimple(t.getTag(""String_Node_Str""));
      processDataType(questionnaire,profile,sub,element,element.getPathSimple() + ""String_Node_Str"" + t.getTag(""String_Node_Str""),t);
    }
  }
 else   processDataType(questionnaire,profile,group,element,element.getPathSimple(),element.getDefinition().getType().get(0));
}",0.994128009395185
24150,"public void process() throws Exception {
  byte[] defn=loadDefinitions();
  readDefinitions(engine,defn);
  engine.setProfile(readProfile(loadProfile()));
  engine.setSource(loadSource());
  engine.process();
}","public void process() throws Exception {
  byte[] defn=loadDefinitions();
  readDefinitions(engine,defn);
  if (!Utilities.noString(profile))   engine.setProfile(readProfile(loadProfile()));
  engine.setSource(loadSource());
  engine.process();
}",0.9210526315789472
24151,"private void genElement(String defPath,HeirarchicalTableGenerator gen,List<Row> rows,ElementComponent element,List<ElementComponent> all,Profile profile,ProfileKnowledgeProvider pkp,boolean showMissing,String profileBaseFileName) throws Exception {
  if (!onlyInformationIsMapping(all,element)) {
    Row row=gen.new Row();
    row.setAnchor(element.getPathSimple());
    String s=tail(element.getPathSimple());
    boolean hasDef=element.getDefinition() != null;
    boolean ext=false;
    if (s.equals(""String_Node_Str"") || s.equals(""String_Node_Str"")) {
      row.setIcon(""String_Node_Str"");
      ext=true;
    }
 else     if (!hasDef || element.getDefinition().getType().size() == 0)     row.setIcon(""String_Node_Str"");
 else     if (hasDef && element.getDefinition().getType().size() > 1) {
      if (allTypesAre(element.getDefinition().getType(),""String_Node_Str""))       row.setIcon(""String_Node_Str"");
 else       row.setIcon(""String_Node_Str"");
    }
 else     if (hasDef && element.getDefinition().getType().get(0).getCode().getValue().startsWith(""String_Node_Str""))     row.setIcon(""String_Node_Str"");
 else     if (hasDef && isPrimitive(element.getDefinition().getType().get(0).getCode().getValue()))     row.setIcon(""String_Node_Str"");
 else     if (hasDef && isReference(element.getDefinition().getType().get(0).getCode().getValue()))     row.setIcon(""String_Node_Str"");
 else     if (hasDef && isDataType(element.getDefinition().getType().get(0).getCode().getValue()))     row.setIcon(""String_Node_Str"");
 else     row.setIcon(""String_Node_Str"");
    String ref=defPath == null ? null : defPath + makePathLink(element);
    UnusedTracker used=new UnusedTracker();
    used.used=true;
    Cell left=gen.new Cell(null,ref,s,!hasDef ? null : element.getDefinition().getFormalSimple(),null);
    row.getCells().add(left);
    if (ext) {
      if (element.getDefinition() != null && element.getDefinition().getType().size() == 1 && element.getDefinition().getType().get(0).getProfile() != null) {
        ExtensionDefinition extDefn=pkp.getExtensionDefinition(profile,element.getDefinition().getType().get(0).getProfileSimple());
        if (extDefn == null) {
          row.getCells().add(gen.new Cell(null,null,!hasDef ? null : describeCardinality(element.getDefinition(),null,used),null,null));
          row.getCells().add(gen.new Cell(null,null,""String_Node_Str"" + element.getDefinition().getType().get(0).getProfileSimple(),null,null));
          generateDescription(gen,row,element,null,used.used,profile.getUrlSimple(),element.getDefinition().getType().get(0).getProfileSimple(),pkp,profile);
        }
 else {
          row.getCells().add(gen.new Cell(null,null,!hasDef ? null : describeCardinality(element.getDefinition(),extDefn.getDefn().getElement().get(0).getDefinition(),used),null,null));
          genTypes(gen,pkp,row,extDefn.getDefn().getElement().get(0),profileBaseFileName);
          generateDescription(gen,row,element,extDefn.getDefn().getElement().get(0),used.used,profile.getUrlSimple(),element.getDefinition().getType().get(0).getProfileSimple(),pkp,profile);
        }
      }
 else       if (element.getDefinition() != null) {
        row.getCells().add(gen.new Cell(null,null,!hasDef ? null : describeCardinality(element.getDefinition(),null,used),null,null));
        genTypes(gen,pkp,row,element,profileBaseFileName);
        generateDescription(gen,row,element,null,used.used,null,null,pkp,profile);
      }
 else {
        row.getCells().add(gen.new Cell(null,null,!hasDef ? null : describeCardinality(element.getDefinition(),null,used),null,null));
        row.getCells().add(gen.new Cell());
        generateDescription(gen,row,element,null,used.used,null,null,pkp,profile);
      }
    }
 else {
      row.getCells().add(gen.new Cell(null,null,!hasDef ? null : describeCardinality(element.getDefinition(),null,used),null,null));
      if (hasDef)       genTypes(gen,pkp,row,element,profileBaseFileName);
 else       row.getCells().add(gen.new Cell());
      generateDescription(gen,row,element,null,used.used,null,null,pkp,profile);
    }
    if (element.getSlicing() != null) {
      row.setIcon(""String_Node_Str"");
      row.getCells().get(2).getPieces().clear();
      for (      Cell cell : row.getCells())       for (      Piece p : cell.getPieces()) {
        p.addStyle(""String_Node_Str"");
      }
    }
    if (used.used || showMissing)     rows.add(row);
    if (!used.used) {
      for (      Cell cell : row.getCells())       for (      Piece p : cell.getPieces()) {
        p.setStyle(""String_Node_Str"");
        p.setReference(null);
      }
    }
 else {
      List<ElementComponent> children=getChildren(all,element);
      for (      ElementComponent child : children)       genElement(defPath,gen,row.getSubRows(),child,all,profile,pkp,showMissing,profileBaseFileName);
    }
  }
}","private void genElement(String defPath,HeirarchicalTableGenerator gen,List<Row> rows,ElementComponent element,List<ElementComponent> all,Profile profile,ProfileKnowledgeProvider pkp,boolean showMissing,String profileBaseFileName) throws Exception {
  if (!onlyInformationIsMapping(all,element)) {
    Row row=gen.new Row();
    row.setAnchor(element.getPathSimple());
    String s=tail(element.getPathSimple());
    boolean hasDef=element.getDefinition() != null;
    boolean ext=false;
    if (s.equals(""String_Node_Str"") || s.equals(""String_Node_Str"")) {
      row.setIcon(""String_Node_Str"");
      ext=true;
    }
 else     if (!hasDef || element.getDefinition().getType().size() == 0)     row.setIcon(""String_Node_Str"");
 else     if (hasDef && element.getDefinition().getType().size() > 1) {
      if (allTypesAre(element.getDefinition().getType(),""String_Node_Str""))       row.setIcon(""String_Node_Str"");
 else       row.setIcon(""String_Node_Str"");
    }
 else     if (hasDef && element.getDefinition().getType().get(0).getCode().getValue().startsWith(""String_Node_Str""))     row.setIcon(""String_Node_Str"");
 else     if (hasDef && isPrimitive(element.getDefinition().getType().get(0).getCode().getValue()))     row.setIcon(""String_Node_Str"");
 else     if (hasDef && isReference(element.getDefinition().getType().get(0).getCode().getValue()))     row.setIcon(""String_Node_Str"");
 else     if (hasDef && isDataType(element.getDefinition().getType().get(0).getCode().getValue()))     row.setIcon(""String_Node_Str"");
 else     row.setIcon(""String_Node_Str"");
    String ref=defPath == null ? null : defPath + makePathLink(element);
    UnusedTracker used=new UnusedTracker();
    used.used=true;
    Cell left=gen.new Cell(null,ref,s,!hasDef ? null : element.getDefinition().getFormalSimple(),null);
    row.getCells().add(left);
    if (ext) {
      if (element.getDefinition() != null && element.getDefinition().getType().size() == 1 && element.getDefinition().getType().get(0).getProfile() != null) {
        ExtensionDefinition extDefn=pkp.getExtensionDefinition(profile,element.getDefinition().getType().get(0).getProfileSimple());
        if (extDefn == null) {
          row.getCells().add(gen.new Cell(null,null,!hasDef ? null : describeCardinality(element.getDefinition(),null,used),null,null));
          row.getCells().add(gen.new Cell(null,null,""String_Node_Str"" + element.getDefinition().getType().get(0).getProfileSimple(),null,null));
          generateDescription(gen,row,element,null,used.used,profile.getUrlSimple(),element.getDefinition().getType().get(0).getProfileSimple(),pkp,profile);
        }
 else {
          row.getCells().add(gen.new Cell(null,null,!hasDef ? null : describeCardinality(element.getDefinition(),extDefn.getDefn().getElement().get(0).getDefinition(),used),null,null));
          genTypes(gen,pkp,row,extDefn.getDefn().getElement().get(0),profileBaseFileName,profile);
          generateDescription(gen,row,element,extDefn.getDefn().getElement().get(0),used.used,profile.getUrlSimple(),element.getDefinition().getType().get(0).getProfileSimple(),pkp,profile);
        }
      }
 else       if (element.getDefinition() != null) {
        row.getCells().add(gen.new Cell(null,null,!hasDef ? null : describeCardinality(element.getDefinition(),null,used),null,null));
        genTypes(gen,pkp,row,element,profileBaseFileName,profile);
        generateDescription(gen,row,element,null,used.used,null,null,pkp,profile);
      }
 else {
        row.getCells().add(gen.new Cell(null,null,!hasDef ? null : describeCardinality(element.getDefinition(),null,used),null,null));
        row.getCells().add(gen.new Cell());
        generateDescription(gen,row,element,null,used.used,null,null,pkp,profile);
      }
    }
 else {
      row.getCells().add(gen.new Cell(null,null,!hasDef ? null : describeCardinality(element.getDefinition(),null,used),null,null));
      if (hasDef)       genTypes(gen,pkp,row,element,profileBaseFileName,profile);
 else       row.getCells().add(gen.new Cell());
      generateDescription(gen,row,element,null,used.used,null,null,pkp,profile);
    }
    if (element.getSlicing() != null) {
      row.setIcon(""String_Node_Str"");
      row.getCells().get(2).getPieces().clear();
      for (      Cell cell : row.getCells())       for (      Piece p : cell.getPieces()) {
        p.addStyle(""String_Node_Str"");
      }
    }
    if (used.used || showMissing)     rows.add(row);
    if (!used.used) {
      for (      Cell cell : row.getCells())       for (      Piece p : cell.getPieces()) {
        p.setStyle(""String_Node_Str"");
        p.setReference(null);
      }
    }
 else {
      List<ElementComponent> children=getChildren(all,element);
      for (      ElementComponent child : children)       genElement(defPath,gen,row.getSubRows(),child,all,profile,pkp,showMissing,profileBaseFileName);
    }
  }
}",0.99752984767394
24152,"private void genTypes(HeirarchicalTableGenerator gen,ProfileKnowledgeProvider pkp,Row r,ElementComponent e,String profileBaseFileName) throws Exception {
  Cell c=gen.new Cell();
  r.getCells().add(c);
  boolean first=true;
  for (  TypeRefComponent t : e.getDefinition().getType()) {
    if (first)     first=false;
 else     c.addPiece(gen.new Piece(null,""String_Node_Str"",null));
    if (t.getCodeSimple().equals(""String_Node_Str"")) {
      if (t.getProfileSimple().startsWith(""String_Node_Str"")) {
        String rn=t.getProfileSimple().substring(28);
        c.addPiece(gen.new Piece(pkp.getLinkFor(rn),rn,null));
      }
 else       if (t.getProfileSimple().startsWith(""String_Node_Str""))       c.addPiece(gen.new Piece(profileBaseFileName + ""String_Node_Str"" + t.getProfileSimple().substring(1).toLowerCase()+ ""String_Node_Str"",t.getProfileSimple(),null));
 else       c.addPiece(gen.new Piece(t.getProfileSimple(),t.getProfileSimple(),null));
    }
 else     if (pkp.hasLinkFor(t.getCodeSimple())) {
      c.addPiece(gen.new Piece(pkp.getLinkFor(t.getCodeSimple()),t.getCodeSimple(),null));
    }
 else     c.addPiece(gen.new Piece(null,t.getCodeSimple(),null));
  }
}","private void genTypes(HeirarchicalTableGenerator gen,ProfileKnowledgeProvider pkp,Row r,ElementComponent e,String profileBaseFileName,Profile profile) throws Exception {
  Cell c=gen.new Cell();
  r.getCells().add(c);
  boolean first=true;
  for (  TypeRefComponent t : e.getDefinition().getType()) {
    if (first)     first=false;
 else     c.addPiece(gen.new Piece(null,""String_Node_Str"",null));
    if (t.getCodeSimple().equals(""String_Node_Str"") || (t.getCodeSimple().equals(""String_Node_Str"") && t.getProfile() != null)) {
      if (t.getProfileSimple().startsWith(""String_Node_Str"")) {
        String rn=t.getProfileSimple().substring(28);
        c.addPiece(gen.new Piece(pkp.getLinkFor(rn),rn,null));
      }
 else       if (t.getProfileSimple().startsWith(""String_Node_Str""))       c.addPiece(gen.new Piece(profileBaseFileName + ""String_Node_Str"" + t.getProfileSimple().substring(1).toLowerCase()+ ""String_Node_Str"",t.getProfileSimple(),null));
 else       c.addPiece(gen.new Piece(t.getProfileSimple(),t.getProfileSimple(),null));
    }
 else     if (t.getProfile() != null) {
      String ref;
      ref=pkp.getLinkForProfile(profile,t.getProfileSimple());
      if (ref != null) {
        String[] parts=ref.split(""String_Node_Str"");
        c.addPiece(gen.new Piece(parts[0],parts[1],t.getCodeSimple()));
      }
 else       c.addPiece(gen.new Piece(ref,t.getCodeSimple(),null));
    }
 else     if (pkp.hasLinkFor(t.getCodeSimple())) {
      c.addPiece(gen.new Piece(pkp.getLinkFor(t.getCodeSimple()),t.getCodeSimple(),null));
    }
 else     c.addPiece(gen.new Piece(null,t.getCodeSimple(),null));
  }
}",0.8014311270125224
24153,"private void genExtension(String defFile,HeirarchicalTableGenerator gen,List<Row> rows,ProfileExtensionDefnComponent ext,Profile profile,ProfileKnowledgeProvider pkp,String profileBaseFileName) throws Exception {
  Row r=gen.new Row();
  rows.add(r);
  r.setAnchor(ext.getCodeSimple());
  ElementComponent e=ext.getElement().get(0);
  r.getCells().add(gen.new Cell(null,defFile == null ? ""String_Node_Str"" : defFile + ""String_Node_Str"" + ext.getCodeSimple(),ext.getCodeSimple(),e.getDefinition().getFormalSimple(),null));
  r.getCells().add(gen.new Cell(null,null,describeCardinality(e.getDefinition(),null,new UnusedTracker()),null,null));
  if (ext.getElement().size() == 1) {
    r.setIcon(""String_Node_Str"");
    genTypes(gen,pkp,r,e,profileBaseFileName);
  }
 else {
    r.setIcon(""String_Node_Str"");
    r.getCells().add(gen.new Cell());
  }
  Cell c=generateDescription(gen,r,e,null,true,profile.getUrlSimple(),null,pkp,profile);
  c.addPiece(gen.new Piece(""String_Node_Str"")).addPiece(gen.new Piece(null,describeExtensionContext(ext),null));
  List<ElementComponent> children=getChildren(ext.getElement(),e);
  for (  ElementComponent child : children)   genElement(defFile == null ? ""String_Node_Str"" : defFile + ""String_Node_Str"",gen,r.getSubRows(),child,ext.getElement(),profile,pkp,true,profileBaseFileName);
}","private void genExtension(String defFile,HeirarchicalTableGenerator gen,List<Row> rows,ProfileExtensionDefnComponent ext,Profile profile,ProfileKnowledgeProvider pkp,String profileBaseFileName) throws Exception {
  Row r=gen.new Row();
  rows.add(r);
  r.setAnchor(ext.getCodeSimple());
  ElementComponent e=ext.getElement().get(0);
  r.getCells().add(gen.new Cell(null,defFile == null ? ""String_Node_Str"" : defFile + ""String_Node_Str"" + ext.getCodeSimple(),ext.getCodeSimple(),e.getDefinition().getFormalSimple(),null));
  r.getCells().add(gen.new Cell(null,null,describeCardinality(e.getDefinition(),null,new UnusedTracker()),null,null));
  if (ext.getElement().size() == 1) {
    r.setIcon(""String_Node_Str"");
    genTypes(gen,pkp,r,e,profileBaseFileName,profile);
  }
 else {
    r.setIcon(""String_Node_Str"");
    r.getCells().add(gen.new Cell());
  }
  Cell c=generateDescription(gen,r,e,null,true,profile.getUrlSimple(),null,pkp,profile);
  c.addPiece(gen.new Piece(""String_Node_Str"")).addPiece(gen.new Piece(null,describeExtensionContext(ext),null));
  List<ElementComponent> children=getChildren(ext.getElement(),e);
  for (  ElementComponent child : children)   genElement(defFile == null ? ""String_Node_Str"" : defFile + ""String_Node_Str"",gen,r.getSubRows(),child,ext.getElement(),profile,pkp,true,profileBaseFileName);
}",0.9969834087481146
24154,"public List<String> validate(Profile profile){
  List<String> errors=new ArrayList<String>();
  for (  ProfileStructureComponent sc : profile.getStructure()) {
    for (    ElementComponent ec : sc.getDifferential().getElement()) {
      checkExtensions(profile,errors,sc,""String_Node_Str"",ec);
    }
    for (    ElementComponent ec : sc.getSnapshot().getElement()) {
      checkExtensions(profile,errors,sc,""String_Node_Str"",ec);
    }
  }
  return errors;
}","public List<String> validate(Profile profile){
  List<String> errors=new ArrayList<String>();
  for (  ProfileStructureComponent sc : profile.getStructure()) {
    for (    ElementComponent ec : sc.getDifferential().getElement()) {
      checkExtensions(profile,errors,sc,""String_Node_Str"",ec);
    }
    if (sc.getSnapshot() == null)     errors.add(""String_Node_Str"" + profile.getNameSimple() + ""String_Node_Str""+ sc.getNameSimple());
 else     for (    ElementComponent ec : sc.getSnapshot().getElement()) {
      checkExtensions(profile,errors,sc,""String_Node_Str"",ec);
    }
  }
  return errors;
}",0.8671065032987747
24155,"private ElementDefinitionBindingComponent generateBinding(String bn,Profile p) throws Exception {
  BindingSpecification src=definitions.getBindingByName(bn);
  if (src == null)   return null;
  ElementDefinitionBindingComponent dst=new Profile.ElementDefinitionBindingComponent();
  dst.setName(Factory.newString_(src.getName()));
  dst.setConformanceSimple(convert(src.getBindingStrength()));
  dst.setIsExtensibleSimple(src.getExtensibility() == BindingExtensibility.Extensible);
  dst.setDescription(Factory.newString_(src.getDefinition()));
  if (src.getBinding() != Binding.Unbound)   dst.setReference(buildReference(src));
  return dst;
}","private ElementDefinitionBindingComponent generateBinding(String bn,Profile p) throws Exception {
  BindingSpecification src=definitions.getBindingByName(bn);
  if (src == null)   return null;
  ElementDefinitionBindingComponent dst=new Profile.ElementDefinitionBindingComponent();
  dst.setName(Factory.newString_(src.getName()));
  if (src.getBindingStrength() != null) {
    dst.setConformanceSimple(convert(src.getBindingStrength()));
    dst.setIsExtensibleSimple(src.getExtensibility() == BindingExtensibility.Extensible);
  }
 else {
    if (src.getElementType() == ElementType.Simple) {
      dst.setConformanceSimple(convert(BindingStrength.Required));
      dst.setIsExtensibleSimple(false);
    }
 else     if (src.getElementType() == ElementType.Complex) {
      dst.setIsExtensibleSimple(true);
      if (src.isExample()) {
        dst.setConformanceSimple(convert(BindingStrength.Example));
      }
 else {
        dst.setConformanceSimple(convert(BindingStrength.Preferred));
      }
    }
 else {
      dst.setConformanceSimple(convert(BindingStrength.Unstated));
      dst.setIsExtensibleSimple(true);
    }
  }
  dst.setDescription(Factory.newString_(src.getDefinition()));
  if (src.getBinding() != Binding.Unbound)   dst.setReference(buildReference(src));
  return dst;
}",0.6663223140495868
24156,"String processProfileIncludes(String filename,ProfileDefn profile,String xml,String tx,String src,String example,String intro,String notes,String master,String pagePath,ProfileStructureComponent structure,String basefilename,Map<String,Example> examples) throws Exception {
  String wikilink=""String_Node_Str"" + prepWikiName(filename) + ""String_Node_Str"";
  String workingTitle=null;
  while (src.contains(""String_Node_Str"") || src.contains(""String_Node_Str"")) {
    int i1=src.indexOf(""String_Node_Str"");
    int i2=src.indexOf(""String_Node_Str"");
    if (i1 == -1) {
      i1=src.indexOf(""String_Node_Str"");
      i2=src.indexOf(""String_Node_Str"");
    }
    String s1=src.substring(0,i1);
    String s2=src.substring(i1 + 2,i2).trim();
    String s3=src.substring(i2 + 2);
    String[] com=s2.split(""String_Node_Str"");
    if (com[0].equals(""String_Node_Str""))     src=s1 + generateSideBar(com.length > 1 ? com[1] : ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + profileHeader(basefilename,com.length > 1 ? com[1] : ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + com[1] + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      wikilink=com[1];
      src=s1 + s3;
    }
 else     if (com[0].equals(""String_Node_Str"")) {
      workingTitle=s2.substring(9).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      src=s1 + s3;
    }
 else     if (com.length != 1)     throw new Exception(""String_Node_Str"" + s2 + ""String_Node_Str""+ filename);
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + wikilink + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pageHeader(profile.metadata(""String_Node_Str"")) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (workingTitle == null ? Utilities.escapeXml(Utilities.escapeXml(profile.metadata(""String_Node_Str""))) : workingTitle) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.escapeXml(profile.metadata(""String_Node_Str"")) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (filename.contains(""String_Node_Str"") ? filename.substring(0,filename.lastIndexOf(""String_Node_Str"")) : filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + filename + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      if (!Utilities.noString(profile.metadata(""String_Node_Str""))) {
        Date d=new SimpleDateFormat(""String_Node_Str"").parse(profile.metadata(""String_Node_Str""));
        src=s1 + Config.DATE_FORMAT().format(d) + s3;
      }
 else       src=s1 + ""String_Node_Str"" + s3;
    }
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ini.getStringProperty(""String_Node_Str"",""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Config.DATE_FORMAT().format(new Date()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + profile.metadata(""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (intro == null ? profile.metadata(""String_Node_Str"") : intro) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (notes == null ? ""String_Node_Str"" : notes) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + describeStatus(profile.metadata(""String_Node_Str"")) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + profile.metadata(""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + xml + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      src=s1 + ""String_Node_Str"" + ProfileUtilities.summarise(profile.getSource(),this)+ s3;
    }
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + tx + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (profile.getResources().size() == 0 ? ""String_Node_Str"" : genProfileConstraints(profile.getResources().get(0))) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.pluralizeMe(filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.make(filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.navlist(filename,genlevel(0)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.makelist(filename,(master == null ? ""String_Node_Str"" : ""String_Node_Str"" + master),genlevel(0)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + new SimpleDateFormat(""String_Node_Str"").format(new Date()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + svnRevision + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genlevel(0) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + publicationType + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + publicationNotice + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + generateProfileExtensionsTable(profile,filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + generateProfileConstraintLinks(profile,filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pagePath + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + profile.getSource().getUrlSimple() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.URLEncode(pagePath) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.URLEncode(baseURL) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + baseLink(structure) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + generateProfileStructureTable(profile,structure,true,filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + generateProfileStructureTable(profile,structure,false,filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + mapOnPageProfile(profile.getSource()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + definitionsOnPageProfile(profile.getSource()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + mappingsProfile(profile.getSource()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + definitionsProfile(profile.getSource()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + profileExampleList(profile,examples,example) + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      src=s1 + ""String_Node_Str"" + profile.metadata(""String_Node_Str"")+ s3;
    }
 else     throw new Exception(""String_Node_Str"" + s2 + ""String_Node_Str""+ filename);
  }
  return src;
}","String processProfileIncludes(String filename,ProfileDefn profile,String xml,String tx,String src,String example,String intro,String notes,String master,String pagePath,ProfileStructureComponent structure,String basefilename,Map<String,Example> examples) throws Exception {
  String wikilink=""String_Node_Str"" + prepWikiName(filename) + ""String_Node_Str"";
  String workingTitle=null;
  while (src.contains(""String_Node_Str"") || src.contains(""String_Node_Str"")) {
    int i1=src.indexOf(""String_Node_Str"");
    int i2=src.indexOf(""String_Node_Str"");
    if (i1 == -1) {
      i1=src.indexOf(""String_Node_Str"");
      i2=src.indexOf(""String_Node_Str"");
    }
    String s1=src.substring(0,i1);
    String s2=src.substring(i1 + 2,i2).trim();
    String s3=src.substring(i2 + 2);
    String[] com=s2.split(""String_Node_Str"");
    if (com[0].equals(""String_Node_Str""))     src=s1 + generateSideBar(com.length > 1 ? com[1] : ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + profileHeader(basefilename,com.length > 1 ? com[1] : ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + com[1] + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      wikilink=com[1];
      src=s1 + s3;
    }
 else     if (com[0].equals(""String_Node_Str"")) {
      workingTitle=s2.substring(9).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      src=s1 + s3;
    }
 else     if (com.length != 1)     throw new Exception(""String_Node_Str"" + s2 + ""String_Node_Str""+ filename);
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + wikilink + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pageHeader(profile.metadata(""String_Node_Str"")) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + TextFile.fileToString(folders.srcDir + ""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (workingTitle == null ? Utilities.escapeXml(Utilities.escapeXml(profile.metadata(""String_Node_Str""))) : workingTitle) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.escapeXml(profile.metadata(""String_Node_Str"")) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (filename.contains(""String_Node_Str"") ? filename.substring(0,filename.lastIndexOf(""String_Node_Str"")) : filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + filename + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      if (!Utilities.noString(profile.metadata(""String_Node_Str""))) {
        Date d=new SimpleDateFormat(""String_Node_Str"").parse(profile.metadata(""String_Node_Str""));
        src=s1 + Config.DATE_FORMAT().format(d) + s3;
      }
 else       src=s1 + ""String_Node_Str"" + s3;
    }
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ini.getStringProperty(""String_Node_Str"",""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Config.DATE_FORMAT().format(new Date()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + profile.metadata(""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (intro == null ? profile.metadata(""String_Node_Str"") : intro) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (notes == null ? ""String_Node_Str"" : notes) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + describeStatus(profile.metadata(""String_Node_Str"")) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + profile.metadata(""String_Node_Str"") + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + xml + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      src=s1 + ""String_Node_Str"" + ProfileUtilities.summarise(profile.getSource(),this)+ s3;
    }
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + tx + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + (profile.getResources().size() == 0 ? ""String_Node_Str"" : genProfileConstraints(profile.getResources().get(0))) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.pluralizeMe(filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + ""String_Node_Str"" + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.make(filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.navlist(filename,genlevel(0)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + breadCrumbManager.makelist(filename,(master == null ? ""String_Node_Str"" : ""String_Node_Str"" + master),genlevel(0)) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + new SimpleDateFormat(""String_Node_Str"").format(new Date()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + svnRevision + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + genlevel(0) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + publicationType + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + publicationNotice + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + generateProfileExtensionsTable(profile,filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + generateProfileConstraintLinks(profile,filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + pagePath + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + profile.getSource().getUrlSimple() + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.URLEncode(pagePath) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + Utilities.URLEncode(baseURL) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + baseLink(structure) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + generateProfileStructureTable(profile,structure,true,filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + generateProfileStructureTable(profile,structure,false,filename) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + mapOnPageProfile(profile.getSource()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + definitionsOnPageProfile(profile.getSource()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + mappingsProfile(profile.getSource()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + definitionsProfile(profile.getSource()) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + profileExampleList(profile,examples,example) + s3;
 else     if (com[0].equals(""String_Node_Str""))     src=s1 + profileReviewLink(profile) + s3;
 else     if (com[0].equals(""String_Node_Str"")) {
      src=s1 + ""String_Node_Str"" + profile.metadata(""String_Node_Str"")+ s3;
    }
 else     throw new Exception(""String_Node_Str"" + s2 + ""String_Node_Str""+ filename);
  }
  return src;
}",0.9874285714285714
24157,"private void loadIG() throws FileNotFoundException, Exception {
  for (  String folder : page.getIg().getInputFolders()) {
    File[] files=new File(folder).listFiles();
    if (files != null) {
      for (      File f : files) {
        if (f.getName().endsWith(""String_Node_Str"")) {
          ResourceOrFeed rf=new XmlParser().parseGeneral(new FileInputStream(f));
          if (rf.getFeed() != null) {
            for (            AtomEntry<? extends org.hl7.fhir.instance.model.Resource> ae : rf.getFeed().getEntryList()) {
              loadIgResource(ae);
            }
          }
 else {
            AtomEntry<org.hl7.fhir.instance.model.Resource> ae=new AtomEntry<org.hl7.fhir.instance.model.Resource>();
            ae.setId(page.getIg().getBaseUri() + rf.getResource().getResourceType().toString() + ""String_Node_Str""+ Utilities.fileTitle(f.getAbsolutePath()));
            ae.setResource(rf.getResource());
            ae.getLinks().put(""String_Node_Str"",page.getIg().getFilePrefix() + f.getName());
            ae.getResource().setTag(""String_Node_Str"",ae.getLinks().get(""String_Node_Str""));
            loadIgResource(ae);
          }
        }
      }
    }
  }
}","private void loadIG() throws FileNotFoundException, Exception {
  for (  String folder : page.getIg().getInputFolders()) {
    File[] files=new File(folder).listFiles();
    if (files != null) {
      for (      File f : files) {
        if (f.getName().endsWith(""String_Node_Str"")) {
          ResourceOrFeed rf=new XmlParser().parseGeneral(new FileInputStream(f));
          if (rf.getFeed() != null) {
            for (            AtomEntry<? extends org.hl7.fhir.instance.model.Resource> ae : rf.getFeed().getEntryList()) {
              loadIgResource(ae);
            }
          }
 else {
            AtomEntry<org.hl7.fhir.instance.model.Resource> ae=new AtomEntry<org.hl7.fhir.instance.model.Resource>();
            ae.setId(page.getIg().getBaseUri() + rf.getResource().getResourceType().toString() + ""String_Node_Str""+ Utilities.fileTitle(f.getAbsolutePath()));
            ae.setResource(rf.getResource());
            ae.setTitle(f.getName());
            ae.getLinks().put(""String_Node_Str"",page.getIg().getFilePrefix() + f.getName());
            ae.getResource().setTag(""String_Node_Str"",ae.getLinks().get(""String_Node_Str""));
            loadIgResource(ae);
          }
        }
      }
    }
  }
}",0.984126984126984
24158,"/** 
 * Entry point to the publisher. This classes Java Main() calls this function to actually produce the specification
 * @param folder
 * @throws Exception
 */
public void execute(String folder,String igName) throws Exception {
  if (igName != null) {
    page.setIg(ImplementationGuideDetails.loadFromFile(igName));
    page.log(""String_Node_Str"" + igName + ""String_Node_Str""+ folder+ ""String_Node_Str""+ Config.DATE_FORMAT().format(page.getGenDate().getTime()),LogMessageType.Process);
  }
 else {
    page.log(""String_Node_Str"" + folder + ""String_Node_Str""+ Config.DATE_FORMAT().format(page.getGenDate().getTime()),LogMessageType.Process);
    if (web)     page.log(""String_Node_Str"",LogMessageType.Process);
 else     page.log(""String_Node_Str"",LogMessageType.Process);
  }
  page.setFolders(new FolderManager(folder));
  if (page.hasIG()) {
    String path=page.getIg().getOutputFolder();
    if (!path.endsWith(File.separator))     path=path + File.separator;
    page.getFolders().dstDir=path;
  }
  if (isGenerate)   page.setSvnRevision(checkSubversion(folder));
  registerReferencePlatforms();
  if (initialize(folder)) {
    page.log(""String_Node_Str"" + page.getVersion() + ""String_Node_Str""+ page.getSvnRevision(),LogMessageType.Hint);
    cache=new IniFile(page.getFolders().rootDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    loadSuppressedMessages(page.getFolders().rootDir);
    boolean doAny=false;
    for (    String n : dates.keySet()) {
      Long d=cache.getLongProperty(""String_Node_Str"",n);
      boolean b=d == null || (dates.get(n) > d);
      cache.setLongProperty(""String_Node_Str"",n,dates.get(n).longValue(),null);
      buildFlags.put(n.toLowerCase(),b);
      doAny=doAny || b;
    }
    if (!doAny || !(new File(page.getFolders().dstDir + ""String_Node_Str"").exists()))     buildFlags.put(""String_Node_Str"",true);
    buildFlags.put(""String_Node_Str"",true);
    cache.save();
    if (!buildFlags.get(""String_Node_Str""))     page.log(""String_Node_Str"",LogMessageType.Process);
    Utilities.createDirectory(page.getFolders().dstDir);
    Utilities.deleteTempFiles();
    page.getBreadCrumbManager().parse(page.getFolders().srcDir + ""String_Node_Str"");
    page.loadSnomed();
    page.loadLoinc();
    prsr.parse(page.getGenDate(),page.getVersion());
    if (page.hasIG()) {
      loadIG();
    }
    if (buildFlags.get(""String_Node_Str"")) {
      copyStaticContent();
    }
    defineSpecialValues();
    loadValueSets1();
    processProfiles();
    if (page.hasIG()) {
      processIGFiles();
    }
    if (validate()) {
      if (isGenerate) {
        page.log(""String_Node_Str"",LogMessageType.Process);
        if (buildFlags.get(""String_Node_Str""))         Utilities.clearDirectory(page.getFolders().dstDir);
        Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"");
        Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"");
        Utilities.clearDirectory(page.getFolders().rootDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
        Utilities.clearDirectory(page.getFolders().rootDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
        String eCorePath=page.getFolders().dstDir + ""String_Node_Str"";
        generateECore(prsr.getECoreParseResults(),eCorePath);
        produceSpecification(eCorePath);
      }
      validateXml();
      if (isGenerate && buildFlags.get(""String_Node_Str""))       produceQA();
      page.log(""String_Node_Str"" + Config.DATE_FORMAT().format(Calendar.getInstance().getTime()),LogMessageType.Process);
    }
 else {
      page.log(""String_Node_Str"" + Config.DATE_FORMAT().format(Calendar.getInstance().getTime()),LogMessageType.Process);
      throw new Exception(""String_Node_Str"");
    }
  }
}","/** 
 * Entry point to the publisher. This classes Java Main() calls this function to actually produce the specification
 * @param folder
 * @throws Exception
 */
public void execute(String folder,String igName) throws Exception {
  if (igName != null) {
    page.setIg(ImplementationGuideDetails.loadFromFile(igName));
    page.log(""String_Node_Str"" + igName + ""String_Node_Str""+ folder+ ""String_Node_Str""+ Config.DATE_FORMAT().format(page.getGenDate().getTime()),LogMessageType.Process);
  }
 else {
    page.log(""String_Node_Str"" + folder + ""String_Node_Str""+ Config.DATE_FORMAT().format(page.getGenDate().getTime()),LogMessageType.Process);
    if (web)     page.log(""String_Node_Str"",LogMessageType.Process);
 else     page.log(""String_Node_Str"",LogMessageType.Process);
  }
  page.setFolders(new FolderManager(folder));
  if (page.hasIG()) {
    String path=page.getIg().getOutputFolder();
    if (!path.endsWith(File.separator))     path=path + File.separator;
    page.getFolders().dstDir=path;
  }
  if (isGenerate)   page.setSvnRevision(checkSubversion(folder));
  registerReferencePlatforms();
  if (initialize(folder)) {
    page.log(""String_Node_Str"" + page.getVersion() + ""String_Node_Str""+ page.getSvnRevision(),LogMessageType.Hint);
    cache=new IniFile(page.getFolders().rootDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    loadSuppressedMessages(page.getFolders().rootDir);
    boolean doAny=false;
    for (    String n : dates.keySet()) {
      Long d=cache.getLongProperty(""String_Node_Str"",n);
      boolean b=d == null || (dates.get(n) > d);
      cache.setLongProperty(""String_Node_Str"",n,dates.get(n).longValue(),null);
      buildFlags.put(n.toLowerCase(),b);
      doAny=doAny || b;
    }
    if (!doAny || !(new File(page.getFolders().dstDir + ""String_Node_Str"").exists()))     buildFlags.put(""String_Node_Str"",true);
    buildFlags.put(""String_Node_Str"",true);
    cache.save();
    if (!buildFlags.get(""String_Node_Str""))     page.log(""String_Node_Str"",LogMessageType.Process);
    Utilities.createDirectory(page.getFolders().dstDir);
    Utilities.deleteTempFiles();
    page.getBreadCrumbManager().parse(page.getFolders().srcDir + ""String_Node_Str"");
    page.loadSnomed();
    page.loadLoinc();
    prsr.parse(page.getGenDate(),page.getVersion());
    if (page.hasIG()) {
      loadIG();
    }
    if (buildFlags.get(""String_Node_Str"")) {
      copyStaticContent();
    }
    defineSpecialValues();
    loadValueSets1();
    if (validate()) {
      processProfiles();
      if (page.hasIG()) {
        processIGFiles();
      }
      if (isGenerate) {
        page.log(""String_Node_Str"",LogMessageType.Process);
        if (buildFlags.get(""String_Node_Str""))         Utilities.clearDirectory(page.getFolders().dstDir);
        Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"");
        Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"");
        Utilities.clearDirectory(page.getFolders().rootDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
        Utilities.clearDirectory(page.getFolders().rootDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
        String eCorePath=page.getFolders().dstDir + ""String_Node_Str"";
        generateECore(prsr.getECoreParseResults(),eCorePath);
        produceSpecification(eCorePath);
      }
      validateXml();
      if (isGenerate && buildFlags.get(""String_Node_Str""))       produceQA();
      page.log(""String_Node_Str"" + Config.DATE_FORMAT().format(Calendar.getInstance().getTime()),LogMessageType.Process);
    }
 else {
      page.log(""String_Node_Str"" + Config.DATE_FORMAT().format(Calendar.getInstance().getTime()),LogMessageType.Process);
      throw new Exception(""String_Node_Str"");
    }
  }
}",0.9932079414838036
24159,"private Profile produceProfile(String filename,ProfileDefn profile,String filePath,String master,Map<String,Example> examples) throws Exception {
  File tmp=Utilities.createTempFile(""String_Node_Str"",""String_Node_Str"");
  String title=filename.contains(""String_Node_Str"") ? filename.substring(0,filename.lastIndexOf(""String_Node_Str"")) : filename;
  XmlSpecGenerator gen=new XmlSpecGenerator(new FileOutputStream(tmp),null,""String_Node_Str"",page);
  gen.generate(profile,""String_Node_Str"" + title);
  gen.close();
  String xml=TextFile.fileToString(tmp.getAbsolutePath());
  ProfileGenerator pgen=new ProfileGenerator(page.getDefinitions(),page.getWorkerContext());
  Profile p=pgen.generate(profile,title,xml,page.getGenDate());
  XmlComposer comp=new XmlComposer();
  comp.compose(new FileOutputStream(page.getFolders().dstDir + title + ""String_Node_Str""),p,true,false);
  Utilities.copyFile(new CSFile(page.getFolders().dstDir + title + ""String_Node_Str""),new CSFile(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ title+ ""String_Node_Str""));
  JsonComposer jcomp=new JsonComposer();
  jcomp.compose(new FileOutputStream(page.getFolders().dstDir + title + ""String_Node_Str""),p,true);
  TerminologyNotesGenerator tgen=new TerminologyNotesGenerator(new FileOutputStream(tmp),page);
  tgen.generate(profile,page.getDefinitions().getBindings());
  tgen.close();
  String tx=TextFile.fileToString(tmp.getAbsolutePath());
  String introAndNotesPath=Utilities.path(page.getFolders().rootDir,""String_Node_Str"");
  if (master != null)   introAndNotesPath=Utilities.path(page.getFolders().rootDir,""String_Node_Str"",master.toLowerCase());
  String intro=null;
  if (profile.getMetadata().containsKey(""String_Node_Str"") && !Utilities.noString(profile.getMetadata().get(""String_Node_Str"").get(0))) {
    intro=page.loadXmlNotesFromFile(introAndNotesPath + File.separator + profile.getMetadata().get(""String_Node_Str"").get(0),false,null,null);
  }
  String notes=null;
  if (profile.getMetadata().containsKey(""String_Node_Str"") && !Utilities.noString(profile.getMetadata().get(""String_Node_Str"").get(0)))   notes=page.loadXmlNotesFromFile(introAndNotesPath + File.separator + profile.getMetadata().get(""String_Node_Str"").get(0),false,null,null);
  String exXml=""String_Node_Str"";
  if (examples != null) {
    for (    String en : examples.keySet()) {
      String ep=examples.get(en).getPath().getAbsolutePath();
      String n=Utilities.changeFileExt(en,""String_Node_Str"");
      DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
      factory.setNamespaceAware(true);
      DocumentBuilder builder=factory.newDocumentBuilder();
      Document xdoc=builder.parse(new CSFileInputStream(ep));
      XmlGenerator xmlgen=new XmlGenerator();
      File dst=new File(page.getFolders().dstDir + en);
      xmlgen.generate(xdoc.getDocumentElement(),dst,xdoc.getDocumentElement().getLocalName().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"",xdoc.getDocumentElement().getLocalName());
      builder=factory.newDocumentBuilder();
      xdoc=builder.parse(new CSFileInputStream(dst.getAbsolutePath()));
      XhtmlGenerator xhtml=new XhtmlGenerator(null);
      exXml=xhtml.generateInsert(xdoc,""String_Node_Str"" + profile.metadata(""String_Node_Str""),null);
      cloneToXhtml(n,""String_Node_Str"" + profile.metadata(""String_Node_Str""),true,""String_Node_Str"");
      String json;
      try {
        json=javaReferencePlatform.convertToJson(page.getFolders().dstDir,page.getFolders().dstDir + n + ""String_Node_Str"",page.getFolders().dstDir + n + ""String_Node_Str"");
      }
 catch (      Throwable t) {
        System.out.println(""String_Node_Str"" + page.getFolders().dstDir + n+ ""String_Node_Str"");
        t.printStackTrace(System.err);
        TextFile.stringToFile(t.getMessage(),page.getFolders().dstDir + n + ""String_Node_Str"");
        json=t.getMessage();
      }
      String head=""String_Node_Str"" + Utilities.escapeXml(""String_Node_Str"" + profile.metadata(""String_Node_Str"")) + ""String_Node_Str""+ ""String_Node_Str""+ Utilities.escapeXml(""String_Node_Str"" + profile.metadata(""String_Node_Str""))+ ""String_Node_Str""+ n+ ""String_Node_Str"";
      String tail=""String_Node_Str"";
      TextFile.stringToFile(head + Utilities.escapeXml(json) + tail,page.getFolders().dstDir + n + ""String_Node_Str"");
      page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + profile.metadata(""String_Node_Str""),EPubManager.XHTML_TYPE);
    }
  }
  String src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=page.processProfileIncludes(filename,profile,xml,tx,src,exXml,intro,notes,master,title + ""String_Node_Str"",null,filename,examples);
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"" + profile.getSource().getNameSimple(),EPubManager.XHTML_TYPE);
  TextFile.stringToFile(src,page.getFolders().dstDir + title + ""String_Node_Str"");
  for (  ProfileStructureComponent s : profile.getSource().getStructure()) {
    String fn=Utilities.changeFileExt(filename,""String_Node_Str"" + Utilities.getFileNameForName(s.getNameSimple())) + ""String_Node_Str"";
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
    src=page.processProfileIncludes(fn,profile,""String_Node_Str"",tx,src,exXml,intro,notes,master,title + ""String_Node_Str"",s,filename,examples);
    page.getEpub().registerFile(fn,""String_Node_Str"" + profile.getSource().getNameSimple() + ""String_Node_Str""+ s.getNameSimple(),EPubManager.XHTML_TYPE);
    TextFile.stringToFile(src,page.getFolders().dstDir + fn);
  }
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=page.processProfileIncludes(filename,profile,xml,tx,src,exXml,intro,notes,master,title + ""String_Node_Str"",null,filename,examples);
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"" + profile.getSource().getNameSimple(),EPubManager.XHTML_TYPE);
  TextFile.stringToFile(src,page.getFolders().dstDir + title + ""String_Node_Str"");
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=page.processProfileIncludes(filename,profile,xml,tx,src,exXml,intro,notes,master,title + ""String_Node_Str"",null,filename,examples);
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"" + profile.getSource().getNameSimple(),EPubManager.XHTML_TYPE);
  TextFile.stringToFile(src,page.getFolders().dstDir + title + ""String_Node_Str"");
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=page.processProfileIncludes(filename,profile,xml,tx,src,exXml,intro,notes,master,title + ""String_Node_Str"",null,filename,examples);
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"" + profile.getSource().getNameSimple(),EPubManager.XHTML_TYPE);
  TextFile.stringToFile(src,page.getFolders().dstDir + title + ""String_Node_Str"");
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document xdoc=builder.parse(new CSFileInputStream(page.getFolders().dstDir + title + ""String_Node_Str""));
  XmlGenerator xmlgen=new XmlGenerator();
  xmlgen.generate(xdoc.getDocumentElement(),tmp,""String_Node_Str"",xdoc.getDocumentElement().getLocalName());
  builder=factory.newDocumentBuilder();
  xdoc=builder.parse(new CSFileInputStream(tmp.getAbsolutePath()));
  XhtmlGenerator xhtml=new XhtmlGenerator(new ExampleAdorner(page.getDefinitions()));
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  xhtml.generate(xdoc,b,""String_Node_Str"",profile.metadata(""String_Node_Str""),0,true,title + ""String_Node_Str"");
  String html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",b.toString());
  html=page.processProfileIncludes(title + ""String_Node_Str"",profile,""String_Node_Str"",""String_Node_Str"",html,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",master,title + ""String_Node_Str"",null,filename,examples);
  TextFile.stringToFile(html,page.getFolders().dstDir + title + ""String_Node_Str"");
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"",EPubManager.XHTML_TYPE);
  String n=title + ""String_Node_Str"";
  String json=resource2Json(p);
  json=""String_Node_Str"" + Utilities.escapeXml(""String_Node_Str"" + profile.metadata(""String_Node_Str"")) + ""String_Node_Str""+ Utilities.escapeXml(json)+ ""String_Node_Str"";
  html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",json);
  html=page.processProfileIncludes(title + ""String_Node_Str"",profile,""String_Node_Str"",""String_Node_Str"",html,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",master,title + ""String_Node_Str"",null,filename,examples);
  TextFile.stringToFile(html,page.getFolders().dstDir + title + ""String_Node_Str"");
  page.getEpub().registerExternal(n + ""String_Node_Str"");
  tmp.delete();
  return p;
}","private Profile produceProfile(String filename,ProfileDefn profile,String filePath,String master,Map<String,Example> examples) throws Exception {
  File tmp=Utilities.createTempFile(""String_Node_Str"",""String_Node_Str"");
  String title=filename.contains(""String_Node_Str"") ? filename.substring(0,filename.lastIndexOf(""String_Node_Str"")) : filename;
  XmlSpecGenerator gen=new XmlSpecGenerator(new FileOutputStream(tmp),null,""String_Node_Str"",page);
  gen.generate(profile,""String_Node_Str"" + title);
  gen.close();
  String xml=TextFile.fileToString(tmp.getAbsolutePath());
  ProfileGenerator pgen=new ProfileGenerator(page.getDefinitions(),page.getWorkerContext());
  Profile p=pgen.generate(profile,title,xml,page.getGenDate());
  XmlComposer comp=new XmlComposer();
  comp.compose(new FileOutputStream(page.getFolders().dstDir + title + ""String_Node_Str""),p,true,false);
  Utilities.copyFile(new CSFile(page.getFolders().dstDir + title + ""String_Node_Str""),new CSFile(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ title+ ""String_Node_Str""));
  JsonComposer jcomp=new JsonComposer();
  jcomp.compose(new FileOutputStream(page.getFolders().dstDir + title + ""String_Node_Str""),p,true);
  TerminologyNotesGenerator tgen=new TerminologyNotesGenerator(new FileOutputStream(tmp),page);
  tgen.generate(profile,page.getDefinitions().getBindings());
  tgen.close();
  String tx=TextFile.fileToString(tmp.getAbsolutePath());
  String introAndNotesPath=Utilities.path(page.getFolders().rootDir,""String_Node_Str"");
  if (master != null)   introAndNotesPath=Utilities.path(page.getFolders().rootDir,""String_Node_Str"",master.toLowerCase());
  String intro=null;
  if (profile.getMetadata().containsKey(""String_Node_Str"") && !Utilities.noString(profile.getMetadata().get(""String_Node_Str"").get(0))) {
    intro=page.loadXmlNotesFromFile(introAndNotesPath + File.separator + profile.getMetadata().get(""String_Node_Str"").get(0),false,null,null);
  }
  String notes=null;
  if (profile.getMetadata().containsKey(""String_Node_Str"") && !Utilities.noString(profile.getMetadata().get(""String_Node_Str"").get(0)))   notes=page.loadXmlNotesFromFile(introAndNotesPath + File.separator + profile.getMetadata().get(""String_Node_Str"").get(0),false,null,null);
  String exXml=""String_Node_Str"";
  if (examples != null) {
    for (    String en : examples.keySet()) {
      String ep=examples.get(en).getPath().getAbsolutePath();
      String n=Utilities.changeFileExt(en,""String_Node_Str"");
      DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
      factory.setNamespaceAware(true);
      DocumentBuilder builder=factory.newDocumentBuilder();
      Document xdoc=builder.parse(new CSFileInputStream(ep));
      XmlGenerator xmlgen=new XmlGenerator();
      File dst=new File(page.getFolders().dstDir + en);
      xmlgen.generate(xdoc.getDocumentElement(),dst,xdoc.getDocumentElement().getLocalName().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"",xdoc.getDocumentElement().getLocalName());
      builder=factory.newDocumentBuilder();
      xdoc=builder.parse(new CSFileInputStream(dst.getAbsolutePath()));
      XhtmlGenerator xhtml=new XhtmlGenerator(null);
      exXml=xhtml.generateInsert(xdoc,""String_Node_Str"" + profile.metadata(""String_Node_Str""),null);
      cloneToXhtml(n,""String_Node_Str"" + profile.metadata(""String_Node_Str""),true,""String_Node_Str"");
      String json;
      try {
        json=javaReferencePlatform.convertToJson(page.getFolders().dstDir,page.getFolders().dstDir + n + ""String_Node_Str"",page.getFolders().dstDir + n + ""String_Node_Str"");
      }
 catch (      Throwable t) {
        System.out.println(""String_Node_Str"" + page.getFolders().dstDir + n+ ""String_Node_Str"");
        t.printStackTrace(System.err);
        TextFile.stringToFile(t.getMessage(),page.getFolders().dstDir + n + ""String_Node_Str"");
        json=t.getMessage();
      }
      String head=""String_Node_Str"" + Utilities.escapeXml(""String_Node_Str"" + profile.metadata(""String_Node_Str"")) + ""String_Node_Str""+ ""String_Node_Str""+ Utilities.escapeXml(""String_Node_Str"" + profile.metadata(""String_Node_Str""))+ ""String_Node_Str""+ n+ ""String_Node_Str"";
      String tail=""String_Node_Str"";
      TextFile.stringToFile(head + Utilities.escapeXml(json) + tail,page.getFolders().dstDir + n + ""String_Node_Str"");
      page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + profile.metadata(""String_Node_Str""),EPubManager.XHTML_TYPE);
    }
  }
  String src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=page.processProfileIncludes(filename,profile,xml,tx,src,exXml,intro,notes,master,title + ""String_Node_Str"",null,filename,examples);
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"" + profile.getSource().getNameSimple(),EPubManager.XHTML_TYPE);
  TextFile.stringToFile(src,page.getFolders().dstDir + title + ""String_Node_Str"");
  for (  ProfileStructureComponent s : profile.getSource().getStructure()) {
    String fn=Utilities.changeFileExt(filename,""String_Node_Str"" + Utilities.getFileNameForName(s.getNameSimple())) + ""String_Node_Str"";
    src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
    src=page.processProfileIncludes(fn,profile,""String_Node_Str"",tx,src,exXml,intro,notes,master,title + ""String_Node_Str"",s,filename,examples);
    page.getEpub().registerFile(fn,""String_Node_Str"" + profile.getSource().getNameSimple() + ""String_Node_Str""+ s.getNameSimple(),EPubManager.XHTML_TYPE);
    TextFile.stringToFile(src,page.getFolders().dstDir + fn);
  }
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=page.processProfileIncludes(filename,profile,xml,tx,src,exXml,intro,notes,master,title + ""String_Node_Str"",null,filename,examples);
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"" + profile.getSource().getNameSimple(),EPubManager.XHTML_TYPE);
  TextFile.stringToFile(src,page.getFolders().dstDir + title + ""String_Node_Str"");
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=page.processProfileIncludes(filename,profile,xml,tx,src,exXml,intro,notes,master,title + ""String_Node_Str"",null,filename,examples);
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"" + profile.getSource().getNameSimple(),EPubManager.XHTML_TYPE);
  TextFile.stringToFile(src,page.getFolders().dstDir + title + ""String_Node_Str"");
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=page.processProfileIncludes(filename,profile,xml,tx,src,exXml,intro,notes,master,title + ""String_Node_Str"",null,filename,examples);
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"" + profile.getSource().getNameSimple(),EPubManager.XHTML_TYPE);
  TextFile.stringToFile(src,page.getFolders().dstDir + title + ""String_Node_Str"");
  new ReviewSpreadsheetGenerator().generate(page.getFolders().dstDir + title + ""String_Node_Str"",""String_Node_Str"",page.getGenDate(),profile.getSource());
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document xdoc=builder.parse(new CSFileInputStream(page.getFolders().dstDir + title + ""String_Node_Str""));
  XmlGenerator xmlgen=new XmlGenerator();
  xmlgen.generate(xdoc.getDocumentElement(),tmp,""String_Node_Str"",xdoc.getDocumentElement().getLocalName());
  builder=factory.newDocumentBuilder();
  xdoc=builder.parse(new CSFileInputStream(tmp.getAbsolutePath()));
  XhtmlGenerator xhtml=new XhtmlGenerator(new ExampleAdorner(page.getDefinitions()));
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  xhtml.generate(xdoc,b,""String_Node_Str"",profile.metadata(""String_Node_Str""),0,true,title + ""String_Node_Str"");
  String html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",b.toString());
  html=page.processProfileIncludes(title + ""String_Node_Str"",profile,""String_Node_Str"",""String_Node_Str"",html,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",master,title + ""String_Node_Str"",null,filename,examples);
  TextFile.stringToFile(html,page.getFolders().dstDir + title + ""String_Node_Str"");
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"",EPubManager.XHTML_TYPE);
  String n=title + ""String_Node_Str"";
  String json=resource2Json(p);
  json=""String_Node_Str"" + Utilities.escapeXml(""String_Node_Str"" + profile.metadata(""String_Node_Str"")) + ""String_Node_Str""+ Utilities.escapeXml(json)+ ""String_Node_Str"";
  html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",json);
  html=page.processProfileIncludes(title + ""String_Node_Str"",profile,""String_Node_Str"",""String_Node_Str"",html,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",master,title + ""String_Node_Str"",null,filename,examples);
  TextFile.stringToFile(html,page.getFolders().dstDir + title + ""String_Node_Str"");
  page.getEpub().registerExternal(n + ""String_Node_Str"");
  tmp.delete();
  return p;
}",0.9913951035363348
24160,"/** 
 * @param value
 * @param unit
 */
public Canonical(Decimal value,Term unit){
  super();
  this.value=value;
  this.unit=unit;
}","/** 
 * @param value
 * @param unit
 */
public Canonical(Decimal value){
  super();
  this.value=value;
}",0.8823529411764706
24161,"public void divideValue(Decimal divisor) throws Exception {
  value=value.divide(divisor);
}","public void divideValue(int divisor) throws Exception {
  value=value.divide(new Decimal(divisor));
}",0.8911917098445595
24162,"private void readExamples(ResourceDefn defn,Sheet sheet) throws Exception {
  if (sheet != null) {
    for (int row=0; row < sheet.rows.size(); row++) {
      String name=sheet.getColumn(row,""String_Node_Str"");
      if (name != null && !name.equals(""String_Node_Str"")) {
        String id=sheet.getColumn(row,""String_Node_Str"");
        String desc=sheet.getColumn(row,""String_Node_Str"");
        if (desc == null || desc.equals(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ this.name);
        File file=new CSFile(folder + sheet.getColumn(row,""String_Node_Str""));
        String type=sheet.getColumn(row,""String_Node_Str"");
        if (!file.exists() && !(""String_Node_Str"".equals(type) || isSpecialType(type)))         throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ file.getAbsolutePath()+ ""String_Node_Str""+ this.name);
        String pn=sheet.getColumn(row,""String_Node_Str"");
        if (Utilities.noString(pn)) {
          defn.getExamples().add(new Example(name,id,desc,file,parseExampleType(type,row),parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false)));
        }
 else {
          RegisteredProfile rp=null;
          for (          RegisteredProfile r : defn.getProfiles()) {
            if (r.getName().equals(pn))             rp=r;
          }
          if (rp == null)           throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ pn+ ""String_Node_Str""+ this.name);
          rp.getExamples().put(id,new Example(name,id,desc,file,parseExampleType(type,row),parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false)));
        }
      }
    }
  }
  if (defn.getExamples().size() == 0) {
    File file=new CSFile(folder + title + ""String_Node_Str"");
    if (!file.exists())     throw new Exception(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ this.name);
    defn.getExamples().add(new Example(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + title,file,ExampleType.XmlFile,true));
  }
}","private void readExamples(ResourceDefn defn,Sheet sheet) throws Exception {
  if (sheet != null) {
    for (int row=0; row < sheet.rows.size(); row++) {
      String name=sheet.getColumn(row,""String_Node_Str"");
      if (name != null && !name.equals(""String_Node_Str"")) {
        String id=sheet.getColumn(row,""String_Node_Str"");
        String desc=sheet.getColumn(row,""String_Node_Str"");
        if (desc == null || desc.equals(""String_Node_Str""))         throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ this.name);
        String filename=sheet.getColumn(row,""String_Node_Str"");
        File file=new CSFile(folder + filename);
        String type=sheet.getColumn(row,""String_Node_Str"");
        if (!file.exists() && !(""String_Node_Str"".equals(type) || isSpecialType(type)))         throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ file.getAbsolutePath()+ ""String_Node_Str""+ this.name);
        String pn=sheet.getColumn(row,""String_Node_Str"");
        if (Utilities.noString(pn)) {
          defn.getExamples().add(new Example(name,id,desc,file,parseExampleType(type,row),parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false)));
        }
 else {
          RegisteredProfile rp=null;
          for (          RegisteredProfile r : defn.getProfiles()) {
            if (r.getName().equals(pn))             rp=r;
          }
          if (rp == null)           throw new Exception(""String_Node_Str"" + name + ""String_Node_Str""+ pn+ ""String_Node_Str""+ this.name);
          rp.getExamples().put(filename,new Example(filename,id,desc,file,parseExampleType(type,row),parseBoolean(sheet.getColumn(row,""String_Node_Str""),row,false)));
        }
      }
    }
  }
  if (defn.getExamples().size() == 0) {
    File file=new CSFile(folder + title + ""String_Node_Str"");
    if (!file.exists())     throw new Exception(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ this.name);
    defn.getExamples().add(new Example(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + title,file,ExampleType.XmlFile,true));
  }
}",0.9697117733268196
24163,"public CCDAConverter(UcumService ucumSvc){
  super();
  this.ucumSvc=ucumSvc;
}","public CCDAConverter(UcumService ucumSvc,WorkerContext context){
  super();
  this.ucumSvc=ucumSvc;
  this.context=context;
}",0.7745098039215687
24164,"private String addResource(Resource r,String title,String id) throws Exception {
  if (r.getText() == null)   r.setText(new Narrative());
  if (r.getText().getDiv() == null) {
    r.getText().setStatusSimple(NarrativeStatus.generated);
    new NarrativeGenerator(""String_Node_Str"",null,null,null,null,profiles,null).generate(r);
  }
  AtomEntry<Resource> e=new AtomEntry<Resource>();
  e.setUpdated(DateAndTime.now());
  e.setResource(r);
  e.setTitle(title);
  e.setId(id);
  feed.getEntryList().add(e);
  return id;
}","private String addResource(Resource r,String title,String id) throws Exception {
  if (r.getText() == null)   r.setText(new Narrative());
  if (r.getText().getDiv() == null) {
    r.getText().setStatusSimple(NarrativeStatus.generated);
    new NarrativeGenerator(""String_Node_Str"",context).generate(r);
  }
  AtomEntry<Resource> e=new AtomEntry<Resource>();
  e.setUpdated(DateAndTime.now());
  e.setResource(r);
  e.setTitle(title);
  e.setId(id);
  feed.getEntryList().add(e);
  return id;
}",0.9604743083003952
24165,"public static void main(String[] args){
  try {
    CCDAConverter c=new CCDAConverter(new UcumEssenceService(UCUM_PATH));
    c.initialize(SRC_PATH);
    AtomFeed a=c.convert(new FileInputStream(DEF_PATH + ""String_Node_Str""));
    String fx=DEF_PATH + ""String_Node_Str"";
    XmlComposer x=new XmlComposer();
    x.compose(new FileOutputStream(fx),a,true);
    String fj=DEF_PATH + ""String_Node_Str"";
    JsonComposer j=new JsonComposer();
    j.compose(new FileOutputStream(fj),a,true);
    System.out.println(""String_Node_Str"" + fx + ""String_Node_Str""+ fj);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    CCDAConverter c=new CCDAConverter(new UcumEssenceService(UCUM_PATH),WorkerContext.fromPack(Utilities.path(SRC_PATH,""String_Node_Str"")));
    AtomFeed a=c.convert(new FileInputStream(DEF_PATH + ""String_Node_Str""));
    String fx=DEF_PATH + ""String_Node_Str"";
    XmlComposer x=new XmlComposer();
    x.compose(new FileOutputStream(fx),a,true);
    String fj=DEF_PATH + ""String_Node_Str"";
    JsonComposer j=new JsonComposer();
    j.compose(new FileOutputStream(fj),a,true);
    System.out.println(""String_Node_Str"" + fx + ""String_Node_Str""+ fj);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9396078431372548
24166,"private AtomFeed parseAtom(JsonObject json) throws Exception {
  AtomFeed res=new AtomFeed();
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setTitle(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setId(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setUpdated(new DateAndTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonObject author=json.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject();
    if (author.has(""String_Node_Str""))     res.setAuthorName(author.get(""String_Node_Str"").getAsString());
    if (author.has(""String_Node_Str""))     res.setAuthorUri(author.get(""String_Node_Str"").getAsString());
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      parseLink(res.getLinks(),array.get(i).getAsJsonObject());
    }
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonObject cat=json.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject();
    if (cat.has(""String_Node_Str"") && cat.has(""String_Node_Str""))     res.getTags().add(new AtomCategory(cat.get(""String_Node_Str"").getAsString(),cat.get(""String_Node_Str"").getAsString(),cat.has(""String_Node_Str"") ? cat.get(""String_Node_Str"").getAsString() : null));
  }
  JsonArray array=json.getAsJsonArray(""String_Node_Str"");
  if (array != null) {
    for (int i=0; i < array.size(); i++) {
      res.getEntryList().add(parseEntry(array.get(i).getAsJsonObject()));
    }
  }
  return res;
}","private AtomFeed parseAtom(JsonObject json) throws Exception {
  AtomFeed res=new AtomFeed();
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setTitle(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setId(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setUpdated(new DateAndTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonObject author=json.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject();
    if (author.has(""String_Node_Str""))     res.setAuthorName(author.get(""String_Node_Str"").getAsString());
    if (author.has(""String_Node_Str""))     res.setAuthorUri(author.get(""String_Node_Str"").getAsString());
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      parseLink(res.getLinks(),array.get(i).getAsJsonObject());
    }
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    for (    JsonElement t : json.getAsJsonArray(""String_Node_Str"")) {
      JsonObject cat=t.getAsJsonObject();
      if (cat.has(""String_Node_Str"") && cat.has(""String_Node_Str""))       res.getTags().add(new AtomCategory(cat.get(""String_Node_Str"").getAsString(),cat.get(""String_Node_Str"").getAsString(),cat.has(""String_Node_Str"") ? cat.get(""String_Node_Str"").getAsString() : null));
    }
  }
  JsonArray array=json.getAsJsonArray(""String_Node_Str"");
  if (array != null) {
    for (int i=0; i < array.size(); i++) {
      res.getEntryList().add(parseEntry(array.get(i).getAsJsonObject()));
    }
  }
  return res;
}",0.965163381042398
24167,"@SuppressWarnings(""String_Node_Str"") private <T extends Resource>AtomEntry<T> parseEntry(JsonObject json) throws Exception {
  AtomEntry<T> res=new AtomEntry<T>();
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setTitle(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setId(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setUpdated(new DateAndTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setPublished(new DateAndTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      parseLink(res.getLinks(),array.get(i).getAsJsonObject());
    }
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonObject author=json.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject();
    if (author.has(""String_Node_Str"") && !author.get(""String_Node_Str"").isJsonNull())     res.setAuthorName(author.get(""String_Node_Str"").getAsString());
    if (author.has(""String_Node_Str"") && !author.get(""String_Node_Str"").isJsonNull())     res.setAuthorUri(author.get(""String_Node_Str"").getAsString());
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonObject cat=json.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject();
    if (cat.has(""String_Node_Str"") && cat.has(""String_Node_Str"") && !cat.get(""String_Node_Str"").isJsonNull()&& !cat.get(""String_Node_Str"").isJsonNull())     res.getTags().add(new AtomCategory(cat.get(""String_Node_Str"").getAsString(),cat.get(""String_Node_Str"").getAsString(),cat.has(""String_Node_Str"") ? cat.get(""String_Node_Str"").getAsString() : null));
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setSummary(new XhtmlParser().parse(json.get(""String_Node_Str"").getAsString(),""String_Node_Str"").getChildNodes().get(0));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setResource((T)new JsonParser().parse(json.getAsJsonObject(""String_Node_Str"")));
  return res;
}","@SuppressWarnings(""String_Node_Str"") private <T extends Resource>AtomEntry<T> parseEntry(JsonObject json) throws Exception {
  AtomEntry<T> res=new AtomEntry<T>();
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setTitle(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setId(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setUpdated(new DateAndTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setPublished(new DateAndTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      parseLink(res.getLinks(),array.get(i).getAsJsonObject());
    }
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonObject author=json.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject();
    if (author.has(""String_Node_Str"") && !author.get(""String_Node_Str"").isJsonNull())     res.setAuthorName(author.get(""String_Node_Str"").getAsString());
    if (author.has(""String_Node_Str"") && !author.get(""String_Node_Str"").isJsonNull())     res.setAuthorUri(author.get(""String_Node_Str"").getAsString());
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    for (    JsonElement t : json.getAsJsonArray(""String_Node_Str"")) {
      JsonObject cat=t.getAsJsonObject();
      if (cat.has(""String_Node_Str"") && cat.has(""String_Node_Str"") && !cat.get(""String_Node_Str"").isJsonNull()&& !cat.get(""String_Node_Str"").isJsonNull())       res.getTags().add(new AtomCategory(cat.get(""String_Node_Str"").getAsString(),cat.get(""String_Node_Str"").getAsString(),cat.has(""String_Node_Str"") ? cat.get(""String_Node_Str"").getAsString() : null));
    }
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setSummary(new XhtmlParser().parse(json.get(""String_Node_Str"").getAsString(),""String_Node_Str"").getChildNodes().get(0));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setResource((T)new JsonParser().parse(json.getAsJsonObject(""String_Node_Str"")));
  return res;
}",0.9734403953057444
24168,"private void updateFromDefinition(ElementComponent dest,ElementComponent source){
  if (dest.getDefinition() == null)   dest.setDefinition(new ElementDefinitionComponent());
  ElementDefinitionComponent dst=dest.getDefinition();
  ElementDefinitionComponent src=source.getDefinition();
  if (src != null) {
    if (src.getShort() != null)     dst.setShort(src.getShort().copy());
    if (src.getFormal() != null)     dst.setFormal(src.getFormal().copy());
    if (src.getComments() != null)     dst.setComments(src.getComments().copy());
    if (src.getRequirements() != null)     dst.setRequirements(src.getRequirements().copy());
    for (    String_ s : src.getSynonym()) {
      if (!dst.hasSynonymSimple(s.getValue()))       dst.getSynonym().add(s.copy());
    }
    if (src.getMin() != null)     dst.setMin(src.getMin().copy());
    if (src.getMax() != null)     dst.setMax(src.getMax().copy());
    if (src.getValue() != null)     dst.setValue(src.getValue().copy());
    if (src.getExample() != null)     dst.setExample(src.getExample().copy());
    if (src.getMaxLength() != null)     dst.setMaxLength(src.getMaxLength().copy());
    if (src.getMustSupport() != null)     dst.setMustSupport(src.getMustSupport().copy());
    if (src.getBinding() != null)     dst.setBinding(src.getBinding().copy());
    src.getType().clear();
    src.getType().addAll(dst.getType());
    dst.getMapping().addAll(src.getMapping());
    dst.getConstraint().addAll(src.getConstraint());
  }
}","private void updateFromDefinition(ElementComponent dest,ElementComponent source){
  if (dest.getDefinition() == null)   dest.setDefinition(new ElementDefinitionComponent());
  ElementDefinitionComponent dst=dest.getDefinition();
  ElementDefinitionComponent src=source.getDefinition();
  if (src != null) {
    if (src.getShort() != null)     dst.setShort(src.getShort().copy());
    if (src.getFormal() != null)     dst.setFormal(src.getFormal().copy());
    if (src.getComments() != null)     dst.setComments(src.getComments().copy());
    if (src.getRequirements() != null)     dst.setRequirements(src.getRequirements().copy());
    for (    String_ s : src.getSynonym()) {
      if (!dst.hasSynonymSimple(s.getValue()))       dst.getSynonym().add(s.copy());
    }
    if (src.getMin() != null)     dst.setMin(src.getMin().copy());
    if (src.getMax() != null)     dst.setMax(src.getMax().copy());
    if (src.getValue() != null)     dst.setValue(src.getValue().copy());
    if (src.getExample() != null)     dst.setExample(src.getExample().copy());
    if (src.getMaxLength() != null)     dst.setMaxLength(src.getMaxLength().copy());
    if (src.getMustSupport() != null)     dst.setMustSupport(src.getMustSupport().copy());
    if (src.getBinding() != null)     dst.setBinding(src.getBinding().copy());
    dst.getType().clear();
    for (    TypeRefComponent t : src.getType())     dst.getType().add(t.copy());
    dst.getMapping().addAll(src.getMapping());
    dst.getConstraint().addAll(src.getConstraint());
  }
}",0.9311148086522464
24169,"private void composeProfileProfileStructureComponent(String name,Profile.ProfileStructureComponent element) throws Exception {
  if (element != null) {
    open(name);
    composeBackbone(element);
    composeCodeCore(""String_Node_Str"",element.getType(),false);
    composeCodeExtras(""String_Node_Str"",element.getType(),false);
    composeUriCore(""String_Node_Str"",element.getBase(),false);
    composeUriExtras(""String_Node_Str"",element.getBase(),false);
    composeStringCore(""String_Node_Str"",element.getName(),false);
    composeStringExtras(""String_Node_Str"",element.getName(),false);
    composeBooleanCore(""String_Node_Str"",element.getPublish(),false);
    composeBooleanExtras(""String_Node_Str"",element.getPublish(),false);
    composeStringCore(""String_Node_Str"",element.getPurpose(),false);
    composeStringExtras(""String_Node_Str"",element.getPurpose(),false);
    composeProfileConstraintComponent(""String_Node_Str"",element.getSnapshot());
    composeProfileConstraintComponent(""String_Node_Str"",element.getDifferential());
    if (element.getSearchParam().size() > 0) {
      openArray(""String_Node_Str"");
      for (      Profile.ProfileStructureSearchParamComponent e : element.getSearchParam())       composeProfileProfileStructureSearchParamComponent(null,e);
      closeArray();
    }
    ;
    close();
  }
}","private void composeProfileProfileStructureComponent(String name,Profile.ProfileStructureComponent element) throws Exception {
  if (element != null) {
    open(name);
    composeBackbone(element);
    composeCodeCore(""String_Node_Str"",element.getType(),false);
    composeCodeExtras(""String_Node_Str"",element.getType(),false);
    composeUriCore(""String_Node_Str"",element.getBase(),false);
    composeUriExtras(""String_Node_Str"",element.getBase(),false);
    composeIdCore(""String_Node_Str"",element.getName(),false);
    composeIdExtras(""String_Node_Str"",element.getName(),false);
    composeBooleanCore(""String_Node_Str"",element.getPublish(),false);
    composeBooleanExtras(""String_Node_Str"",element.getPublish(),false);
    composeStringCore(""String_Node_Str"",element.getPurpose(),false);
    composeStringExtras(""String_Node_Str"",element.getPurpose(),false);
    composeProfileConstraintComponent(""String_Node_Str"",element.getSnapshot());
    composeProfileConstraintComponent(""String_Node_Str"",element.getDifferential());
    if (element.getSearchParam().size() > 0) {
      openArray(""String_Node_Str"");
      for (      Profile.ProfileStructureSearchParamComponent e : element.getSearchParam())       composeProfileProfileStructureSearchParamComponent(null,e);
      closeArray();
    }
    ;
    close();
  }
}",0.9486016628873772
24170,"private Profile.ProfileStructureComponent parseProfileProfileStructureComponent(JsonObject json,Profile owner) throws Exception {
  Profile.ProfileStructureComponent res=new Profile.ProfileStructureComponent();
  parseBackboneProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setType(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getType());
  if (json.has(""String_Node_Str""))   res.setBase(parseUri(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getBase());
  if (json.has(""String_Node_Str""))   res.setName(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getName());
  if (json.has(""String_Node_Str""))   res.setPublish(parseBoolean(json.get(""String_Node_Str"").getAsBoolean()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPublish());
  if (json.has(""String_Node_Str""))   res.setPurpose(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPurpose());
  if (json.has(""String_Node_Str""))   res.setSnapshot(parseProfileConstraintComponent(json.getAsJsonObject(""String_Node_Str""),owner));
  if (json.has(""String_Node_Str""))   res.setDifferential(parseProfileConstraintComponent(json.getAsJsonObject(""String_Node_Str""),owner));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getSearchParam().add(parseProfileProfileStructureSearchParamComponent(array.get(i).getAsJsonObject(),owner));
    }
  }
  ;
  return res;
}","private Profile.ProfileStructureComponent parseProfileProfileStructureComponent(JsonObject json,Profile owner) throws Exception {
  Profile.ProfileStructureComponent res=new Profile.ProfileStructureComponent();
  parseBackboneProperties(json,res);
  if (json.has(""String_Node_Str""))   res.setType(parseCode(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getType());
  if (json.has(""String_Node_Str""))   res.setBase(parseUri(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getBase());
  if (json.has(""String_Node_Str""))   res.setName(parseId(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getName());
  if (json.has(""String_Node_Str""))   res.setPublish(parseBoolean(json.get(""String_Node_Str"").getAsBoolean()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPublish());
  if (json.has(""String_Node_Str""))   res.setPurpose(parseString(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str""))   parseElementProperties(json.getAsJsonObject(""String_Node_Str""),res.getPurpose());
  if (json.has(""String_Node_Str""))   res.setSnapshot(parseProfileConstraintComponent(json.getAsJsonObject(""String_Node_Str""),owner));
  if (json.has(""String_Node_Str""))   res.setDifferential(parseProfileConstraintComponent(json.getAsJsonObject(""String_Node_Str""),owner));
  if (json.has(""String_Node_Str"")) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      res.getSearchParam().add(parseProfileProfileStructureSearchParamComponent(array.get(i).getAsJsonObject(),owner));
    }
  }
  ;
  return res;
}",0.9979231568016614
24171,"private AtomFeed parseAtom(JsonObject json) throws Exception {
  AtomFeed res=new AtomFeed();
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setTitle(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setId(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setUpdated(new DateAndTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonObject author=json.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject();
    if (author.has(""String_Node_Str""))     res.setAuthorName(author.get(""String_Node_Str"").getAsString());
    if (author.has(""String_Node_Str""))     res.setAuthorUri(author.get(""String_Node_Str"").getAsString());
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      parseLink(res.getLinks(),array.get(i).getAsJsonObject());
    }
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonObject cat=json.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject();
    if (cat.has(""String_Node_Str"") && cat.has(""String_Node_Str""))     res.getTags().add(new AtomCategory(cat.get(""String_Node_Str"").getAsString(),cat.get(""String_Node_Str"").getAsString(),cat.has(""String_Node_Str"") ? cat.get(""String_Node_Str"").getAsString() : null));
  }
  JsonArray array=json.getAsJsonArray(""String_Node_Str"");
  if (array != null) {
    for (int i=0; i < array.size(); i++) {
      res.getEntryList().add(parseEntry(array.get(i).getAsJsonObject()));
    }
  }
  return res;
}","private AtomFeed parseAtom(JsonObject json) throws Exception {
  AtomFeed res=new AtomFeed();
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setTitle(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setId(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setUpdated(new DateAndTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonObject author=json.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject();
    if (author.has(""String_Node_Str""))     res.setAuthorName(author.get(""String_Node_Str"").getAsString());
    if (author.has(""String_Node_Str""))     res.setAuthorUri(author.get(""String_Node_Str"").getAsString());
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      parseLink(res.getLinks(),array.get(i).getAsJsonObject());
    }
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    for (    JsonElement t : json.getAsJsonArray(""String_Node_Str"")) {
      JsonObject cat=t.getAsJsonObject();
      if (cat.has(""String_Node_Str"") && cat.has(""String_Node_Str""))       res.getTags().add(new AtomCategory(cat.get(""String_Node_Str"").getAsString(),cat.get(""String_Node_Str"").getAsString(),cat.has(""String_Node_Str"") ? cat.get(""String_Node_Str"").getAsString() : null));
    }
  }
  JsonArray array=json.getAsJsonArray(""String_Node_Str"");
  if (array != null) {
    for (int i=0; i < array.size(); i++) {
      res.getEntryList().add(parseEntry(array.get(i).getAsJsonObject()));
    }
  }
  return res;
}",0.965163381042398
24172,"@SuppressWarnings(""String_Node_Str"") private <T extends Resource>AtomEntry<T> parseEntry(JsonObject json) throws Exception {
  AtomEntry<T> res=new AtomEntry<T>();
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setTitle(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setId(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setUpdated(new DateAndTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setPublished(new DateAndTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      parseLink(res.getLinks(),array.get(i).getAsJsonObject());
    }
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonObject author=json.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject();
    if (author.has(""String_Node_Str"") && !author.get(""String_Node_Str"").isJsonNull())     res.setAuthorName(author.get(""String_Node_Str"").getAsString());
    if (author.has(""String_Node_Str"") && !author.get(""String_Node_Str"").isJsonNull())     res.setAuthorUri(author.get(""String_Node_Str"").getAsString());
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonObject cat=json.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject();
    if (cat.has(""String_Node_Str"") && cat.has(""String_Node_Str"") && !cat.get(""String_Node_Str"").isJsonNull()&& !cat.get(""String_Node_Str"").isJsonNull())     res.getTags().add(new AtomCategory(cat.get(""String_Node_Str"").getAsString(),cat.get(""String_Node_Str"").getAsString(),cat.has(""String_Node_Str"") ? cat.get(""String_Node_Str"").getAsString() : null));
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setSummary(new XhtmlParser().parse(json.get(""String_Node_Str"").getAsString(),""String_Node_Str"").getChildNodes().get(0));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setResource((T)new JsonParser().parse(json.getAsJsonObject(""String_Node_Str"")));
  return res;
}","@SuppressWarnings(""String_Node_Str"") private <T extends Resource>AtomEntry<T> parseEntry(JsonObject json) throws Exception {
  AtomEntry<T> res=new AtomEntry<T>();
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setTitle(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setId(json.get(""String_Node_Str"").getAsString());
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setUpdated(new DateAndTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setPublished(new DateAndTime(json.get(""String_Node_Str"").getAsString()));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonArray array=json.getAsJsonArray(""String_Node_Str"");
    for (int i=0; i < array.size(); i++) {
      parseLink(res.getLinks(),array.get(i).getAsJsonObject());
    }
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    JsonObject author=json.getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject();
    if (author.has(""String_Node_Str"") && !author.get(""String_Node_Str"").isJsonNull())     res.setAuthorName(author.get(""String_Node_Str"").getAsString());
    if (author.has(""String_Node_Str"") && !author.get(""String_Node_Str"").isJsonNull())     res.setAuthorUri(author.get(""String_Node_Str"").getAsString());
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull()) {
    for (    JsonElement t : json.getAsJsonArray(""String_Node_Str"")) {
      JsonObject cat=t.getAsJsonObject();
      if (cat.has(""String_Node_Str"") && cat.has(""String_Node_Str"") && !cat.get(""String_Node_Str"").isJsonNull()&& !cat.get(""String_Node_Str"").isJsonNull())       res.getTags().add(new AtomCategory(cat.get(""String_Node_Str"").getAsString(),cat.get(""String_Node_Str"").getAsString(),cat.has(""String_Node_Str"") ? cat.get(""String_Node_Str"").getAsString() : null));
    }
  }
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setSummary(new XhtmlParser().parse(json.get(""String_Node_Str"").getAsString(),""String_Node_Str"").getChildNodes().get(0));
  if (json.has(""String_Node_Str"") && !json.get(""String_Node_Str"").isJsonNull())   res.setResource((T)new JsonParser().parse(json.getAsJsonObject(""String_Node_Str"")));
  return res;
}",0.9734403953057444
24173,"private void composeProfileProfileStructureComponent(String name,Profile.ProfileStructureComponent element) throws Exception {
  if (element != null) {
    composeElementAttributes(element);
    xml.open(FHIR_NS,name);
    composeBackboneElements(element);
    composeCode(""String_Node_Str"",element.getType());
    composeUri(""String_Node_Str"",element.getBase());
    composeString(""String_Node_Str"",element.getName());
    composeBoolean(""String_Node_Str"",element.getPublish());
    composeString(""String_Node_Str"",element.getPurpose());
    composeProfileConstraintComponent(""String_Node_Str"",element.getSnapshot());
    composeProfileConstraintComponent(""String_Node_Str"",element.getDifferential());
    for (    Profile.ProfileStructureSearchParamComponent e : element.getSearchParam())     composeProfileProfileStructureSearchParamComponent(""String_Node_Str"",e);
    xml.close(FHIR_NS,name);
  }
}","private void composeProfileProfileStructureComponent(String name,Profile.ProfileStructureComponent element) throws Exception {
  if (element != null) {
    composeElementAttributes(element);
    xml.open(FHIR_NS,name);
    composeBackboneElements(element);
    composeCode(""String_Node_Str"",element.getType());
    composeUri(""String_Node_Str"",element.getBase());
    composeId(""String_Node_Str"",element.getName());
    composeBoolean(""String_Node_Str"",element.getPublish());
    composeString(""String_Node_Str"",element.getPurpose());
    composeProfileConstraintComponent(""String_Node_Str"",element.getSnapshot());
    composeProfileConstraintComponent(""String_Node_Str"",element.getDifferential());
    for (    Profile.ProfileStructureSearchParamComponent e : element.getSearchParam())     composeProfileProfileStructureSearchParamComponent(""String_Node_Str"",e);
    xml.close(FHIR_NS,name);
  }
}",0.9955555555555556
24174,"private void produceV3() throws Exception {
  page.log(""String_Node_Str"",LogMessageType.Process);
  Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"");
  Utilities.clearDirectory(page.getFolders().dstDir + ""String_Node_Str"");
  String src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
  TextFile.stringToFile(addSectionNumbers(""String_Node_Str"",""String_Node_Str"",page.processPageIncludes(""String_Node_Str"",src,""String_Node_Str"",null),null),page.getFolders().dstDir + ""String_Node_Str"");
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
  cachePage(""String_Node_Str"",page.processPageIncludesForBook(""String_Node_Str"",src,""String_Node_Str""),""String_Node_Str"");
  IniFile ini=new IniFile(page.getFolders().srcDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
  Element e=XMLUtil.getFirstChild(page.getV3src().getDocumentElement());
  while (e != null) {
    if (e.getNodeName().equals(""String_Node_Str"")) {
      if (!ini.getBooleanProperty(""String_Node_Str"",e.getAttribute(""String_Node_Str""))) {
        Element r=XMLUtil.getNamedChild(XMLUtil.getNamedChild(e,""String_Node_Str""),""String_Node_Str"");
        if (r != null && ""String_Node_Str"".equals(r.getAttribute(""String_Node_Str"")) || ini.getBooleanProperty(""String_Node_Str"",e.getAttribute(""String_Node_Str""))) {
          String id=e.getAttribute(""String_Node_Str"");
          Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ id);
          Utilities.clearDirectory(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ id);
          src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
          String sf=page.processPageIncludes(id + ""String_Node_Str"",src,""String_Node_Str"",null,""String_Node_Str"" + File.separator + id+ File.separator+ ""String_Node_Str"");
          sf=addSectionNumbers(""String_Node_Str"" + id + ""String_Node_Str"",""String_Node_Str"",sf,Utilities.oidTail(e.getAttribute(""String_Node_Str"")));
          TextFile.stringToFile(sf,page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ id+ File.separator+ ""String_Node_Str"");
          page.getEpub().registerExternal(""String_Node_Str"" + File.separator + id+ File.separator+ ""String_Node_Str"");
        }
      }
    }
    if (e.getNodeName().equals(""String_Node_Str"")) {
      if (ini.getBooleanProperty(""String_Node_Str"",e.getAttribute(""String_Node_Str""))) {
        String id=e.getAttribute(""String_Node_Str"");
        Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ id);
        Utilities.clearDirectory(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ id);
        src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
        String sf=page.processPageIncludes(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ id+ File.separator+ ""String_Node_Str"",src,""String_Node_Str"",null);
        sf=addSectionNumbers(""String_Node_Str"" + id + ""String_Node_Str"",""String_Node_Str"",sf,Utilities.oidTail(e.getAttribute(""String_Node_Str"")));
        TextFile.stringToFile(sf,page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ id+ File.separator+ ""String_Node_Str"");
        page.getEpub().registerExternal(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ id+ File.separator+ ""String_Node_Str"");
      }
    }
    e=XMLUtil.getNextSibling(e);
  }
}","private void produceV3() throws Exception {
  page.log(""String_Node_Str"",LogMessageType.Process);
  Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"");
  Utilities.clearDirectory(page.getFolders().dstDir + ""String_Node_Str"");
  String src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
  TextFile.stringToFile(addSectionNumbers(""String_Node_Str"",""String_Node_Str"",page.processPageIncludes(""String_Node_Str"",src,""String_Node_Str"",null),null),page.getFolders().dstDir + ""String_Node_Str"");
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
  cachePage(""String_Node_Str"",page.processPageIncludesForBook(""String_Node_Str"",src,""String_Node_Str""),""String_Node_Str"");
  IniFile ini=new IniFile(page.getFolders().srcDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
  Element e=XMLUtil.getFirstChild(page.getV3src().getDocumentElement());
  while (e != null) {
    if (e.getNodeName().equals(""String_Node_Str"")) {
      if (!ini.getBooleanProperty(""String_Node_Str"",e.getAttribute(""String_Node_Str""))) {
        Element r=XMLUtil.getNamedChild(XMLUtil.getNamedChild(e,""String_Node_Str""),""String_Node_Str"");
        if (r != null && ""String_Node_Str"".equals(r.getAttribute(""String_Node_Str"")) || ini.getBooleanProperty(""String_Node_Str"",e.getAttribute(""String_Node_Str""))) {
          String id=e.getAttribute(""String_Node_Str"");
          Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ id);
          Utilities.clearDirectory(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ id);
          src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
          String sf=page.processPageIncludes(id + ""String_Node_Str"",src,""String_Node_Str"",null,""String_Node_Str"" + File.separator + id+ File.separator+ ""String_Node_Str"");
          sf=addSectionNumbers(""String_Node_Str"" + id + ""String_Node_Str"",""String_Node_Str"",sf,Utilities.oidTail(e.getAttribute(""String_Node_Str"")));
          TextFile.stringToFile(sf,page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ id+ File.separator+ ""String_Node_Str"");
          page.getEpub().registerExternal(""String_Node_Str"" + File.separator + id+ File.separator+ ""String_Node_Str"");
        }
      }
    }
    if (e.getNodeName().equals(""String_Node_Str"")) {
      if (ini.getBooleanProperty(""String_Node_Str"",e.getAttribute(""String_Node_Str""))) {
        String id=e.getAttribute(""String_Node_Str"");
        Utilities.createDirectory(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ id);
        Utilities.clearDirectory(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ id);
        src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
        String sf=page.processPageIncludes(id + ""String_Node_Str"",src,""String_Node_Str"",null,""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ id+ File.separator+ ""String_Node_Str"");
        sf=addSectionNumbers(""String_Node_Str"" + id + ""String_Node_Str"",""String_Node_Str"",sf,Utilities.oidTail(e.getAttribute(""String_Node_Str"")));
        TextFile.stringToFile(sf,page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ id+ File.separator+ ""String_Node_Str"");
        page.getEpub().registerExternal(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ id+ File.separator+ ""String_Node_Str"");
      }
    }
    e=XMLUtil.getNextSibling(e);
  }
}",0.9725934926420952
24175,"private void produceResource2(ResourceDefn resource) throws Exception {
  File tmp=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  tmp.deleteOnExit();
  String n=resource.getName().toLowerCase();
  String xml=xmls.get(n);
  TerminologyNotesGenerator tgen=new TerminologyNotesGenerator(new FileOutputStream(tmp),page);
  tgen.generate(resource.getRoot(),page.getDefinitions().getBindings());
  tgen.close();
  String tx=TextFile.fileToString(tmp.getAbsolutePath());
  DictHTMLGenerator dgen=new DictHTMLGenerator(new FileOutputStream(tmp),page);
  dgen.generate(resource.getRoot());
  dgen.close();
  String dict=TextFile.fileToString(tmp.getAbsolutePath());
  MappingsGenerator mgen=new MappingsGenerator();
  mgen.generate(resource);
  String mappings=mgen.getMappings();
  String mappingsList=mgen.getMappingsList();
  SvgGenerator svg=new SvgGenerator(page);
  svg.generate(resource,page.getFolders().dstDir + n + ""String_Node_Str"");
  for (  RegisteredProfile p : resource.getProfiles())   p.setResource(produceProfile(p.getDestFilename(),p.getProfile(),p.getExamplePath(),p.getExample(),resource.getName()));
  Profile profile=(Profile)profileFeed.getById(""String_Node_Str"" + resource.getName().toLowerCase()).getResource();
  for (  Example e : resource.getExamples()) {
    try {
      processExample(e,resource,profile);
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + e.getFileTitle(),ex);
    }
  }
  String prefix=page.getBreadCrumbManager().getIndexPrefixForResource(resource.getName());
  SectionTracker st=new SectionTracker(prefix);
  st.start(""String_Node_Str"");
  page.getSectionTrackerCache().put(n,st);
  String src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str""),st,n + ""String_Node_Str"");
  TextFile.stringToFile(src,page.getFolders().dstDir + n + ""String_Node_Str"");
  String pages=page.getIni().getStringProperty(""String_Node_Str"",n);
  if (!Utilities.noString(pages)) {
    for (    String p : pages.split(""String_Node_Str"")) {
      producePage(p,n);
    }
  }
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  src=page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"");
  cachePage(n + ""String_Node_Str"",src,""String_Node_Str"" + resource.getName());
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  src=page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"");
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  src=page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"");
  cachePage(n + ""String_Node_Str"",src,""String_Node_Str"" + resource.getName());
  tmp.delete();
  generateProfile(resource,n,xml,GenerationMode.Resource);
}","private void produceResource2(ResourceDefn resource) throws Exception {
  File tmp=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  tmp.deleteOnExit();
  String n=resource.getName().toLowerCase();
  String xml=xmls.get(n);
  TerminologyNotesGenerator tgen=new TerminologyNotesGenerator(new FileOutputStream(tmp),page);
  tgen.generate(resource.getRoot(),page.getDefinitions().getBindings());
  tgen.close();
  String tx=TextFile.fileToString(tmp.getAbsolutePath());
  DictHTMLGenerator dgen=new DictHTMLGenerator(new FileOutputStream(tmp),page);
  dgen.generate(resource.getRoot());
  dgen.close();
  String dict=TextFile.fileToString(tmp.getAbsolutePath());
  MappingsGenerator mgen=new MappingsGenerator();
  mgen.generate(resource);
  String mappings=mgen.getMappings();
  String mappingsList=mgen.getMappingsList();
  SvgGenerator svg=new SvgGenerator(page);
  svg.generate(resource,page.getFolders().dstDir + n + ""String_Node_Str"");
  for (  RegisteredProfile p : resource.getProfiles())   p.setResource(produceProfile(p.getDestFilename(),p.getProfile(),p.getExamplePath(),p.getFilepath(),p.getExample(),resource.getName()));
  Profile profile=(Profile)profileFeed.getById(""String_Node_Str"" + resource.getName().toLowerCase()).getResource();
  for (  Example e : resource.getExamples()) {
    try {
      processExample(e,resource,profile);
    }
 catch (    Exception ex) {
      throw new Exception(""String_Node_Str"" + e.getFileTitle(),ex);
    }
  }
  String prefix=page.getBreadCrumbManager().getIndexPrefixForResource(resource.getName());
  SectionTracker st=new SectionTracker(prefix);
  st.start(""String_Node_Str"");
  page.getSectionTrackerCache().put(n,st);
  String src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str""),st,n + ""String_Node_Str"");
  TextFile.stringToFile(src,page.getFolders().dstDir + n + ""String_Node_Str"");
  String pages=page.getIni().getStringProperty(""String_Node_Str"",n);
  if (!Utilities.noString(pages)) {
    for (    String p : pages.split(""String_Node_Str"")) {
      producePage(p,n);
    }
  }
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  TextFile.stringToFile(insertSectionNumbers(page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str""),st,n + ""String_Node_Str""),page.getFolders().dstDir + n + ""String_Node_Str"");
  page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + resource.getName(),EPubManager.XHTML_TYPE);
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  src=page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"");
  cachePage(n + ""String_Node_Str"",src,""String_Node_Str"" + resource.getName());
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  src=page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"");
  src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  src=page.processResourceIncludes(n,resource,xml,tx,dict,src,mappings,mappingsList,""String_Node_Str"");
  cachePage(n + ""String_Node_Str"",src,""String_Node_Str"" + resource.getName());
  tmp.delete();
  generateProfile(resource,n,xml,GenerationMode.Resource);
}",0.9984432769021212
24176,"private Profile produceProfile(String filename,ProfileDefn profile,String examplePath,String exampleName,String master) throws Exception {
  File tmp=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  tmp.deleteOnExit();
  String title=filename.contains(""String_Node_Str"") ? filename.substring(0,filename.lastIndexOf(""String_Node_Str"")) : filename;
  validateProfile(profile);
  XmlSpecGenerator gen=new XmlSpecGenerator(new FileOutputStream(tmp),null,""String_Node_Str"",page);
  gen.generate(profile);
  gen.close();
  String xml=TextFile.fileToString(tmp.getAbsolutePath());
  ProfileGenerator pgen=new ProfileGenerator(page.getDefinitions());
  Profile p=pgen.generate(profile,xml,GenerationMode.Resource);
  XmlComposer comp=new XmlComposer();
  comp.compose(new FileOutputStream(page.getFolders().dstDir + title + ""String_Node_Str""),p,true,false);
  Utilities.copyFile(new CSFile(page.getFolders().dstDir + title + ""String_Node_Str""),new CSFile(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ title+ ""String_Node_Str""));
  JsonComposer jcomp=new JsonComposer();
  jcomp.compose(new FileOutputStream(page.getFolders().dstDir + title + ""String_Node_Str""),p,true);
  TerminologyNotesGenerator tgen=new TerminologyNotesGenerator(new FileOutputStream(tmp),page);
  tgen.generate(profile,page.getDefinitions().getBindings());
  tgen.close();
  String tx=TextFile.fileToString(tmp.getAbsolutePath());
  String introAndNotesPath=null;
  if (examplePath != null)   introAndNotesPath=Utilities.getDirectoryForFile(examplePath);
 else   introAndNotesPath=Utilities.path(page.getFolders().rootDir,""String_Node_Str"");
  String intro=null;
  if (profile.getMetadata().containsKey(""String_Node_Str"") && !Utilities.noString(profile.getMetadata().get(""String_Node_Str"").get(0)))   intro=page.loadXmlNotesFromFile(introAndNotesPath + File.separator + profile.getMetadata().get(""String_Node_Str"").get(0),true,null,null);
  String notes=null;
  if (profile.getMetadata().containsKey(""String_Node_Str"") && !Utilities.noString(profile.getMetadata().get(""String_Node_Str"").get(0)))   notes=page.loadXmlNotesFromFile(introAndNotesPath + File.separator + profile.getMetadata().get(""String_Node_Str"").get(0),false,null,null);
  String exXml=""String_Node_Str"";
  if (examplePath != null) {
    String n=Utilities.changeFileExt(exampleName,""String_Node_Str"");
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setNamespaceAware(true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document xdoc=builder.parse(new CSFileInputStream(examplePath));
    XmlGenerator xmlgen=new XmlGenerator();
    File dst=new File(page.getFolders().dstDir + exampleName);
    xmlgen.generate(xdoc.getDocumentElement(),dst,xdoc.getDocumentElement().getLocalName().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"",xdoc.getDocumentElement().getLocalName());
    builder=factory.newDocumentBuilder();
    xdoc=builder.parse(new CSFileInputStream(dst.getAbsolutePath()));
    XhtmlGenerator xhtml=new XhtmlGenerator(null);
    exXml=xhtml.generateInsert(xdoc,""String_Node_Str"" + profile.metadata(""String_Node_Str""),null);
    cloneToXhtml(n,""String_Node_Str"" + profile.metadata(""String_Node_Str""),true,""String_Node_Str"");
    String json;
    try {
      json=javaReferencePlatform.convertToJson(page.getFolders().dstDir,page.getFolders().dstDir + n + ""String_Node_Str"",page.getFolders().dstDir + n + ""String_Node_Str"");
    }
 catch (    Throwable t) {
      System.out.println(""String_Node_Str"" + page.getFolders().dstDir + n+ ""String_Node_Str"");
      t.printStackTrace(System.err);
      TextFile.stringToFile(t.getMessage(),page.getFolders().dstDir + n + ""String_Node_Str"");
      json=t.getMessage();
    }
    String head=""String_Node_Str"" + Utilities.escapeXml(""String_Node_Str"" + profile.metadata(""String_Node_Str"")) + ""String_Node_Str""+ ""String_Node_Str""+ Utilities.escapeXml(""String_Node_Str"" + profile.metadata(""String_Node_Str""))+ ""String_Node_Str""+ n+ ""String_Node_Str"";
    String tail=""String_Node_Str"";
    TextFile.stringToFile(head + Utilities.escapeXml(json) + tail,page.getFolders().dstDir + n + ""String_Node_Str"");
    page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + profile.metadata(""String_Node_Str""),EPubManager.XHTML_TYPE);
  }
  String src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=page.processProfileIncludes(filename,profile,xml,tx,src,exXml,intro,notes,master);
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"" + exampleName,EPubManager.XHTML_TYPE);
  TextFile.stringToFile(src,page.getFolders().dstDir + title + ""String_Node_Str"");
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"" + exampleName,EPubManager.XHTML_TYPE);
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document xdoc=builder.parse(new CSFileInputStream(page.getFolders().dstDir + title + ""String_Node_Str""));
  XmlGenerator xmlgen=new XmlGenerator();
  xmlgen.generate(xdoc.getDocumentElement(),tmp,""String_Node_Str"",xdoc.getDocumentElement().getLocalName());
  builder=factory.newDocumentBuilder();
  xdoc=builder.parse(new CSFileInputStream(tmp.getAbsolutePath()));
  XhtmlGenerator xhtml=new XhtmlGenerator(new ExampleAdorner(page.getDefinitions()));
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  xhtml.generate(xdoc,b,""String_Node_Str"",profile.metadata(""String_Node_Str""),0,true,title + ""String_Node_Str"");
  String html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",b.toString());
  html=page.processPageIncludes(title + ""String_Node_Str"",html,master == null ? ""String_Node_Str"" : ""String_Node_Str"" + master,null);
  TextFile.stringToFile(html,page.getFolders().dstDir + title + ""String_Node_Str"");
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"",EPubManager.XHTML_TYPE);
  jsonToXhtml(title + ""String_Node_Str"",""String_Node_Str"" + profile.metadata(""String_Node_Str""),resource2Json(p),master == null ? ""String_Node_Str"" : ""String_Node_Str"" + master);
  tmp.delete();
  return p;
}","private Profile produceProfile(String filename,ProfileDefn profile,String examplePath,String filePath,String exampleName,String master) throws Exception {
  File tmp=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  tmp.deleteOnExit();
  String title=filename.contains(""String_Node_Str"") ? filename.substring(0,filename.lastIndexOf(""String_Node_Str"")) : filename;
  validateProfile(profile);
  XmlSpecGenerator gen=new XmlSpecGenerator(new FileOutputStream(tmp),null,""String_Node_Str"",page);
  gen.generate(profile);
  gen.close();
  String xml=TextFile.fileToString(tmp.getAbsolutePath());
  ProfileGenerator pgen=new ProfileGenerator(page.getDefinitions());
  Profile p=pgen.generate(profile,xml,GenerationMode.Resource);
  XmlComposer comp=new XmlComposer();
  comp.compose(new FileOutputStream(page.getFolders().dstDir + title + ""String_Node_Str""),p,true,false);
  Utilities.copyFile(new CSFile(page.getFolders().dstDir + title + ""String_Node_Str""),new CSFile(page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ title+ ""String_Node_Str""));
  JsonComposer jcomp=new JsonComposer();
  jcomp.compose(new FileOutputStream(page.getFolders().dstDir + title + ""String_Node_Str""),p,true);
  TerminologyNotesGenerator tgen=new TerminologyNotesGenerator(new FileOutputStream(tmp),page);
  tgen.generate(profile,page.getDefinitions().getBindings());
  tgen.close();
  String tx=TextFile.fileToString(tmp.getAbsolutePath());
  String introAndNotesPath=null;
  if (examplePath != null)   introAndNotesPath=Utilities.getDirectoryForFile(examplePath);
 else   if (exampleName == ""String_Node_Str"")   introAndNotesPath=Utilities.getDirectoryForFile(filePath);
 else   introAndNotesPath=Utilities.path(page.getFolders().rootDir,""String_Node_Str"");
  String intro=null;
  if (profile.getMetadata().containsKey(""String_Node_Str"") && !Utilities.noString(profile.getMetadata().get(""String_Node_Str"").get(0)))   intro=page.loadXmlNotesFromFile(introAndNotesPath + File.separator + profile.getMetadata().get(""String_Node_Str"").get(0),true,null,null);
  String notes=null;
  if (profile.getMetadata().containsKey(""String_Node_Str"") && !Utilities.noString(profile.getMetadata().get(""String_Node_Str"").get(0)))   notes=page.loadXmlNotesFromFile(introAndNotesPath + File.separator + profile.getMetadata().get(""String_Node_Str"").get(0),false,null,null);
  String exXml=""String_Node_Str"";
  if (examplePath != null) {
    String n=Utilities.changeFileExt(exampleName,""String_Node_Str"");
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setNamespaceAware(true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document xdoc=builder.parse(new CSFileInputStream(examplePath));
    XmlGenerator xmlgen=new XmlGenerator();
    File dst=new File(page.getFolders().dstDir + exampleName);
    xmlgen.generate(xdoc.getDocumentElement(),dst,xdoc.getDocumentElement().getLocalName().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"",xdoc.getDocumentElement().getLocalName());
    builder=factory.newDocumentBuilder();
    xdoc=builder.parse(new CSFileInputStream(dst.getAbsolutePath()));
    XhtmlGenerator xhtml=new XhtmlGenerator(null);
    exXml=xhtml.generateInsert(xdoc,""String_Node_Str"" + profile.metadata(""String_Node_Str""),null);
    cloneToXhtml(n,""String_Node_Str"" + profile.metadata(""String_Node_Str""),true,""String_Node_Str"");
    String json;
    try {
      json=javaReferencePlatform.convertToJson(page.getFolders().dstDir,page.getFolders().dstDir + n + ""String_Node_Str"",page.getFolders().dstDir + n + ""String_Node_Str"");
    }
 catch (    Throwable t) {
      System.out.println(""String_Node_Str"" + page.getFolders().dstDir + n+ ""String_Node_Str"");
      t.printStackTrace(System.err);
      TextFile.stringToFile(t.getMessage(),page.getFolders().dstDir + n + ""String_Node_Str"");
      json=t.getMessage();
    }
    String head=""String_Node_Str"" + Utilities.escapeXml(""String_Node_Str"" + profile.metadata(""String_Node_Str"")) + ""String_Node_Str""+ ""String_Node_Str""+ Utilities.escapeXml(""String_Node_Str"" + profile.metadata(""String_Node_Str""))+ ""String_Node_Str""+ n+ ""String_Node_Str"";
    String tail=""String_Node_Str"";
    TextFile.stringToFile(head + Utilities.escapeXml(json) + tail,page.getFolders().dstDir + n + ""String_Node_Str"");
    page.getEpub().registerFile(n + ""String_Node_Str"",""String_Node_Str"" + profile.metadata(""String_Node_Str""),EPubManager.XHTML_TYPE);
  }
  String src=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"");
  src=page.processProfileIncludes(filename,profile,xml,tx,src,exXml,intro,notes,master);
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"" + exampleName,EPubManager.XHTML_TYPE);
  TextFile.stringToFile(src,page.getFolders().dstDir + title + ""String_Node_Str"");
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"" + exampleName,EPubManager.XHTML_TYPE);
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document xdoc=builder.parse(new CSFileInputStream(page.getFolders().dstDir + title + ""String_Node_Str""));
  XmlGenerator xmlgen=new XmlGenerator();
  xmlgen.generate(xdoc.getDocumentElement(),tmp,""String_Node_Str"",xdoc.getDocumentElement().getLocalName());
  builder=factory.newDocumentBuilder();
  xdoc=builder.parse(new CSFileInputStream(tmp.getAbsolutePath()));
  XhtmlGenerator xhtml=new XhtmlGenerator(new ExampleAdorner(page.getDefinitions()));
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  xhtml.generate(xdoc,b,""String_Node_Str"",profile.metadata(""String_Node_Str""),0,true,title + ""String_Node_Str"");
  String html=TextFile.fileToString(page.getFolders().srcDir + ""String_Node_Str"").replace(""String_Node_Str"",b.toString());
  html=page.processPageIncludes(title + ""String_Node_Str"",html,master == null ? ""String_Node_Str"" : ""String_Node_Str"" + master,null);
  TextFile.stringToFile(html,page.getFolders().dstDir + title + ""String_Node_Str"");
  page.getEpub().registerFile(title + ""String_Node_Str"",""String_Node_Str"",EPubManager.XHTML_TYPE);
  jsonToXhtml(title + ""String_Node_Str"",""String_Node_Str"" + profile.metadata(""String_Node_Str""),resource2Json(p),master == null ? ""String_Node_Str"" : ""String_Node_Str"" + master);
  tmp.delete();
  return p;
}",0.9902264600715136
24177,"private void produceSpec() throws Exception {
  if (buildFlags.get(""String_Node_Str"")) {
    if (page.getIni().getPropertyNames(""String_Node_Str"") != null)     for (    String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
      Utilities.copyFile(new CSFile(page.getFolders().srcDir + n),new CSFile(page.getFolders().dstDir + n));
      page.getEpub().registerFile(n,""String_Node_Str"",EPubManager.determineType(n));
    }
    for (    String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
      Utilities.copyFile(new CSFile(page.getFolders().imgDir + n),new CSFile(page.getFolders().dstDir + n));
      page.getEpub().registerFile(n,""String_Node_Str"",EPubManager.determineType(n));
    }
    for (    String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
      Utilities.copyFile(new CSFile(page.getFolders().rootDir + n),new CSFile(page.getFolders().dstDir + page.getIni().getStringProperty(""String_Node_Str"",n)));
      page.getEpub().registerFile(page.getIni().getStringProperty(""String_Node_Str"",n),""String_Node_Str"",EPubManager.determineType(page.getIni().getStringProperty(""String_Node_Str"",n)));
    }
    page.log(""String_Node_Str"",LogMessageType.Process);
    Utilities.copyDirectory(page.getFolders().rootDir + page.getIni().getStringProperty(""String_Node_Str"",""String_Node_Str""),page.getFolders().dstDir,page.getEpub());
    TextFile.stringToFile(""String_Node_Str"" + page.getVersion() + ""String_Node_Str""+ page.getSvnRevision()+ ""String_Node_Str""+ page.getVersion()+ ""String_Node_Str""+ page.getSvnRevision()+ ""String_Node_Str""+ new SimpleDateFormat(""String_Node_Str"").format(page.getGenDate().getTime()),Utilities.path(page.getFolders().dstDir,""String_Node_Str""));
    for (    String n : page.getDefinitions().getDiagrams().keySet()) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      page.getSvgs().put(n,TextFile.fileToString(page.getFolders().srcDir + page.getDefinitions().getDiagrams().get(n)));
    }
    loadValueSets();
  }
  for (  String rname : page.getDefinitions().sortedResourceNames()) {
    if (!rname.equals(""String_Node_Str"") && wantBuild(rname)) {
      ResourceDefn r=page.getDefinitions().getResources().get(rname);
      produceResource1(r);
    }
  }
  if (buildFlags.get(""String_Node_Str"")) {
    page.log(""String_Node_Str"",LogMessageType.Process);
    produceBaseProfile();
  }
  for (  String rname : page.getDefinitions().sortedResourceNames()) {
    if (!rname.equals(""String_Node_Str"") && wantBuild(rname)) {
      ResourceDefn r=page.getDefinitions().getResources().get(rname);
      page.log(""String_Node_Str"" + r.getName(),LogMessageType.Process);
      produceResource2(r);
    }
  }
  for (  Compartment c : page.getDefinitions().getCompartments()) {
    if (buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"" + c.getName(),LogMessageType.Process);
      produceCompartment(c);
    }
  }
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    if (buildFlags.get(""String_Node_Str"") || buildFlags.get(""String_Node_Str"" + n.toLowerCase())) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      producePage(n,page.getIni().getStringProperty(""String_Node_Str"",n));
    }
  }
  int i=0;
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    page.log(""String_Node_Str"" + n,LogMessageType.Process);
    produceSid(i,n,page.getIni().getStringProperty(""String_Node_Str"",n));
    i++;
  }
  if (buildFlags.get(""String_Node_Str"")) {
    page.log(""String_Node_Str"",LogMessageType.Process);
    checkFragments();
    for (    String n : page.getDefinitions().getProfiles().keySet()) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      produceProfile(n,page.getDefinitions().getProfiles().get(n),null,null,null);
    }
    produceV2();
    produceV3();
    page.log(""String_Node_Str"",LogMessageType.Process);
    new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),profileFeed,true,false);
    new JsonComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),profileFeed,true);
    cloneToXhtml(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    jsonToXhtml(""String_Node_Str"",""String_Node_Str"",resource2Json(profileFeed),""String_Node_Str"");
    new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),typeFeed,true,false);
    new JsonComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),typeFeed,true);
    cloneToXhtml(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    jsonToXhtml(""String_Node_Str"",""String_Node_Str"",resource2Json(typeFeed),""String_Node_Str"");
    int ec=0;
    for (    AtomEntry<? extends org.hl7.fhir.instance.model.Resource> e : valueSetsFeed.getEntryList()) {
      ValueSet vs=(ValueSet)e.getResource();
      if (!vs.getIdentifierSimple().equals(e.getId())) {
        ec++;
        page.log(""String_Node_Str"" + e.getId() + ""String_Node_Str""+ vs.getIdentifierSimple()+ ""String_Node_Str"",LogMessageType.Error);
      }
    }
    if (ec > 0)     throw new Exception(""String_Node_Str"");
    new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),valueSetsFeed,true,false);
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    new JsonComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),valueSetsFeed,true);
    cloneToXhtml(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    jsonToXhtml(""String_Node_Str"",""String_Node_Str"",resource2Json(valueSetsFeed),""String_Node_Str"");
    new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),conceptMapsFeed,true,false);
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    new JsonComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),conceptMapsFeed,true);
    cloneToXhtml(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    jsonToXhtml(""String_Node_Str"",""String_Node_Str"",resource2Json(conceptMapsFeed),""String_Node_Str"");
    new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),v2Valuesets,true,false);
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    new JsonComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),v2Valuesets,true);
    cloneToXhtml(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    jsonToXhtml(""String_Node_Str"",""String_Node_Str"",resource2Json(v2Valuesets),""String_Node_Str"");
    new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),v3Valuesets,true,false);
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    new JsonComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),v3Valuesets,true);
    cloneToXhtml(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    jsonToXhtml(""String_Node_Str"",""String_Node_Str"",resource2Json(v3Valuesets),""String_Node_Str"");
    page.log(""String_Node_Str"",LogMessageType.Process);
    ZipGenerator zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().srcDir,""String_Node_Str"",""String_Node_Str""),false);
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().dstDir,""String_Node_Str""),false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFiles(page.getFolders().dstDir + ""String_Node_Str"" + File.separator,""String_Node_Str"",null,null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    produceZip();
    page.log(""String_Node_Str"",LogMessageType.Process);
    page.getEpub().produce();
  }
 else   page.log(""String_Node_Str"",LogMessageType.Error);
}","private void produceSpec() throws Exception {
  if (buildFlags.get(""String_Node_Str"")) {
    if (page.getIni().getPropertyNames(""String_Node_Str"") != null)     for (    String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
      Utilities.copyFile(new CSFile(page.getFolders().srcDir + n),new CSFile(page.getFolders().dstDir + n));
      page.getEpub().registerFile(n,""String_Node_Str"",EPubManager.determineType(n));
    }
    for (    String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
      Utilities.copyFile(new CSFile(page.getFolders().imgDir + n),new CSFile(page.getFolders().dstDir + n));
      page.getEpub().registerFile(n,""String_Node_Str"",EPubManager.determineType(n));
    }
    for (    String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
      Utilities.copyFile(new CSFile(page.getFolders().rootDir + n),new CSFile(page.getFolders().dstDir + page.getIni().getStringProperty(""String_Node_Str"",n)));
      page.getEpub().registerFile(page.getIni().getStringProperty(""String_Node_Str"",n),""String_Node_Str"",EPubManager.determineType(page.getIni().getStringProperty(""String_Node_Str"",n)));
    }
    page.log(""String_Node_Str"",LogMessageType.Process);
    Utilities.copyDirectory(page.getFolders().rootDir + page.getIni().getStringProperty(""String_Node_Str"",""String_Node_Str""),page.getFolders().dstDir,page.getEpub());
    TextFile.stringToFile(""String_Node_Str"" + page.getVersion() + ""String_Node_Str""+ page.getSvnRevision()+ ""String_Node_Str""+ page.getVersion()+ ""String_Node_Str""+ page.getSvnRevision()+ ""String_Node_Str""+ new SimpleDateFormat(""String_Node_Str"").format(page.getGenDate().getTime()),Utilities.path(page.getFolders().dstDir,""String_Node_Str""));
    for (    String n : page.getDefinitions().getDiagrams().keySet()) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      page.getSvgs().put(n,TextFile.fileToString(page.getFolders().srcDir + page.getDefinitions().getDiagrams().get(n)));
    }
    loadValueSets();
  }
  for (  String rname : page.getDefinitions().sortedResourceNames()) {
    if (!rname.equals(""String_Node_Str"") && wantBuild(rname)) {
      ResourceDefn r=page.getDefinitions().getResources().get(rname);
      produceResource1(r);
    }
  }
  if (buildFlags.get(""String_Node_Str"")) {
    page.log(""String_Node_Str"",LogMessageType.Process);
    produceBaseProfile();
  }
  for (  String rname : page.getDefinitions().sortedResourceNames()) {
    if (!rname.equals(""String_Node_Str"") && wantBuild(rname)) {
      ResourceDefn r=page.getDefinitions().getResources().get(rname);
      page.log(""String_Node_Str"" + r.getName(),LogMessageType.Process);
      produceResource2(r);
    }
  }
  for (  Compartment c : page.getDefinitions().getCompartments()) {
    if (buildFlags.get(""String_Node_Str"")) {
      page.log(""String_Node_Str"" + c.getName(),LogMessageType.Process);
      produceCompartment(c);
    }
  }
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    if (buildFlags.get(""String_Node_Str"") || buildFlags.get(""String_Node_Str"" + n.toLowerCase())) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      producePage(n,page.getIni().getStringProperty(""String_Node_Str"",n));
    }
  }
  int i=0;
  for (  String n : page.getIni().getPropertyNames(""String_Node_Str"")) {
    page.log(""String_Node_Str"" + n,LogMessageType.Process);
    produceSid(i,n,page.getIni().getStringProperty(""String_Node_Str"",n));
    i++;
  }
  if (buildFlags.get(""String_Node_Str"")) {
    page.log(""String_Node_Str"",LogMessageType.Process);
    checkFragments();
    for (    String n : page.getDefinitions().getProfiles().keySet()) {
      page.log(""String_Node_Str"" + n,LogMessageType.Process);
      produceProfile(n,page.getDefinitions().getProfiles().get(n),null,null,null,null);
    }
    produceV2();
    produceV3();
    page.log(""String_Node_Str"",LogMessageType.Process);
    new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),profileFeed,true,false);
    new JsonComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),profileFeed,true);
    cloneToXhtml(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    jsonToXhtml(""String_Node_Str"",""String_Node_Str"",resource2Json(profileFeed),""String_Node_Str"");
    new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),typeFeed,true,false);
    new JsonComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),typeFeed,true);
    cloneToXhtml(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    jsonToXhtml(""String_Node_Str"",""String_Node_Str"",resource2Json(typeFeed),""String_Node_Str"");
    int ec=0;
    for (    AtomEntry<? extends org.hl7.fhir.instance.model.Resource> e : valueSetsFeed.getEntryList()) {
      ValueSet vs=(ValueSet)e.getResource();
      if (!vs.getIdentifierSimple().equals(e.getId())) {
        ec++;
        page.log(""String_Node_Str"" + e.getId() + ""String_Node_Str""+ vs.getIdentifierSimple()+ ""String_Node_Str"",LogMessageType.Error);
      }
    }
    if (ec > 0)     throw new Exception(""String_Node_Str"");
    new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),valueSetsFeed,true,false);
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    new JsonComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),valueSetsFeed,true);
    cloneToXhtml(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    jsonToXhtml(""String_Node_Str"",""String_Node_Str"",resource2Json(valueSetsFeed),""String_Node_Str"");
    new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),conceptMapsFeed,true,false);
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    new JsonComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),conceptMapsFeed,true);
    cloneToXhtml(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    jsonToXhtml(""String_Node_Str"",""String_Node_Str"",resource2Json(conceptMapsFeed),""String_Node_Str"");
    new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),v2Valuesets,true,false);
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    new JsonComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),v2Valuesets,true);
    cloneToXhtml(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    jsonToXhtml(""String_Node_Str"",""String_Node_Str"",resource2Json(v2Valuesets),""String_Node_Str"");
    new XmlComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),v3Valuesets,true,false);
    Utilities.copyFile(page.getFolders().dstDir + ""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
    new JsonComposer().compose(new FileOutputStream(page.getFolders().dstDir + ""String_Node_Str""),v3Valuesets,true);
    cloneToXhtml(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    jsonToXhtml(""String_Node_Str"",""String_Node_Str"",resource2Json(v3Valuesets),""String_Node_Str"");
    page.log(""String_Node_Str"",LogMessageType.Process);
    ZipGenerator zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().srcDir,""String_Node_Str"",""String_Node_Str""),false);
    zip.addFileName(""String_Node_Str"",Utilities.path(page.getFolders().dstDir,""String_Node_Str""),false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFiles(Utilities.path(page.getFolders().rootDir,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.addFileName(""String_Node_Str"",page.getFolders().dstDir + ""String_Node_Str"",false);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFiles(page.getFolders().dstDir + ""String_Node_Str"" + File.separator,""String_Node_Str"",null,null);
    zip.close();
    zip=new ZipGenerator(page.getFolders().dstDir + ""String_Node_Str"");
    zip.addFiles(page.getFolders().dstDir,""String_Node_Str"",""String_Node_Str"",null);
    zip.close();
    page.log(""String_Node_Str"",LogMessageType.Process);
    produceZip();
    page.log(""String_Node_Str"",LogMessageType.Process);
    page.getEpub().produce();
  }
 else   page.log(""String_Node_Str"",LogMessageType.Error);
}",0.9997734378540032
24178,"private static int readField(String date,int i,int j){
  String s=date.substring(i,i + j);
  return java.lang.Integer.parseInt(s);
}","private static int readField(String date,int i,int j){
  String s=date.substring(i,i + j);
  if (s.startsWith(""String_Node_Str""))   s=s.substring(1);
  return java.lang.Integer.parseInt(s);
}",0.8173374613003096
24179,"/** 
 * Parse content that may be either a resource or a bundle
 */
@Override public ResourceOrFeed parseGeneral(InputStream input) throws Exception {
  XmlPullParser xpp=loadXml(input);
  ResourceOrFeed r=new ResourceOrFeed();
  if (xpp.getNamespace().equals(FHIR_NS) && !xpp.getName().equalsIgnoreCase(""String_Node_Str""))   r.resource=parseResource(xpp);
 else   if (xpp.getNamespace().equals(ATOM_NS) || (xpp.getNamespace().equals(FHIR_NS) && xpp.getName().equalsIgnoreCase(""String_Node_Str"")))   r.feed=parseFeed(xpp);
 else   if (xpp.getNamespace().equals(FHIR_NS) && xpp.getName().equals(""String_Node_Str""))   r.taglist=parseTagList(xpp);
 else   throw new Exception(""String_Node_Str"" + xpp.getNamespace() + ""String_Node_Str"");
  return r;
}","/** 
 * Parse content that may be either a resource or a bundle
 */
@Override public ResourceOrFeed parseGeneral(InputStream input) throws Exception {
  XmlPullParser xpp=loadXml(input);
  ResourceOrFeed r=new ResourceOrFeed();
  if (xpp.getNamespace().equals(FHIR_NS) && !xpp.getName().equalsIgnoreCase(""String_Node_Str""))   r.resource=parseResource(xpp);
 else   if (xpp.getNamespace().equals(ATOM_NS) || (xpp.getNamespace().equals(FHIR_NS) && xpp.getName().equalsIgnoreCase(""String_Node_Str"")))   r.feed=parseFeed(xpp);
 else   if (xpp.getNamespace().equals(FHIR_NS) && xpp.getName().equalsIgnoreCase(""String_Node_Str""))   r.taglist=parseTagList(xpp);
 else   throw new Exception(""String_Node_Str"" + xpp.getNamespace() + ""String_Node_Str"");
  return r;
}",0.9933510638297872
24180,"private AtomFeed parseAtom(XmlPullParser xpp) throws Exception {
  AtomFeed res=new AtomFeed();
  if (!(xpp.getName().equals(""String_Node_Str"") || xpp.getName().equals(""String_Node_Str"")))   throw new Exception(""String_Node_Str"" + xpp.getName() + ""String_Node_Str"");
  xpp.next();
  int eventType=nextNoWhitespace(xpp);
  while (eventType != XmlPullParser.END_TAG) {
    if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
      res.setTitle(parseString(xpp));
    }
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str""))     res.setId(parseString(xpp));
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
      res.getLinks().put(xpp.getAttributeValue(null,""String_Node_Str""),xpp.getAttributeValue(null,""String_Node_Str""));
      skipEmptyElement(xpp);
    }
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str""))     res.setUpdated(parseDate(xpp));
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
      res.getTags().add(new AtomCategory(xpp.getAttributeValue(null,""String_Node_Str""),xpp.getAttributeValue(null,""String_Node_Str""),xpp.getAttributeValue(null,""String_Node_Str"")));
      skipEmptyElement(xpp);
    }
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str""))     res.getEntryList().add(parseEntry(xpp));
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
      xpp.next();
      eventType=nextNoWhitespace(xpp);
      while (eventType != XmlPullParser.END_TAG) {
        if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
          res.setAuthorName(parseString(xpp));
        }
 else         if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str""))         res.setAuthorUri(parseString(xpp));
 else         throw new Exception(""String_Node_Str"");
        eventType=nextNoWhitespace(xpp);
      }
      xpp.next();
    }
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
      res.setTotalResults(parseInt(xpp));
    }
 else     skipElementWithContent(xpp);
    eventType=nextNoWhitespace(xpp);
  }
  return res;
}","private AtomFeed parseAtom(XmlPullParser xpp) throws Exception {
  AtomFeed res=new AtomFeed();
  if (!(xpp.getName().equals(""String_Node_Str"") || xpp.getName().equalsIgnoreCase(""String_Node_Str"")))   throw new Exception(""String_Node_Str"" + xpp.getName() + ""String_Node_Str"");
  xpp.next();
  int eventType=nextNoWhitespace(xpp);
  while (eventType != XmlPullParser.END_TAG) {
    if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
      res.setTitle(parseString(xpp));
    }
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str""))     res.setId(parseString(xpp));
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
      res.getLinks().put(xpp.getAttributeValue(null,""String_Node_Str""),xpp.getAttributeValue(null,""String_Node_Str""));
      skipEmptyElement(xpp);
    }
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str""))     res.setUpdated(parseDate(xpp));
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
      res.getTags().add(new AtomCategory(xpp.getAttributeValue(null,""String_Node_Str""),xpp.getAttributeValue(null,""String_Node_Str""),xpp.getAttributeValue(null,""String_Node_Str"")));
      skipEmptyElement(xpp);
    }
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str""))     res.getEntryList().add(parseEntry(xpp));
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
      xpp.next();
      eventType=nextNoWhitespace(xpp);
      while (eventType != XmlPullParser.END_TAG) {
        if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
          res.setAuthorName(parseString(xpp));
        }
 else         if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str""))         res.setAuthorUri(parseString(xpp));
 else         throw new Exception(""String_Node_Str"");
        eventType=nextNoWhitespace(xpp);
      }
      xpp.next();
    }
 else     if (eventType == XmlPullParser.START_TAG && xpp.getName().equals(""String_Node_Str"")) {
      res.setTotalResults(parseInt(xpp));
    }
 else     skipElementWithContent(xpp);
    eventType=nextNoWhitespace(xpp);
  }
  return res;
}",0.9978614200171086
24181,"public GenBlock generateEnum(BindingDefn binding) throws Exception {
  begin();
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + binding.getDefinition());
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + binding.getName() + ""String_Node_Str"");
  ln(""String_Node_Str"" + GeneratorUtils.generateCSharpTypeName(binding.getName()));
  bs(""String_Node_Str"");
  for (  DefinedCode code : binding.getCode()) {
    String definition=code.getDefinition();
    if (definition != null) {
      ln(""String_Node_Str"");
      ln(""String_Node_Str"" + code.getDefinition());
      ln(""String_Node_Str"");
    }
    ln(""String_Node_Str"" + ""String_Node_Str"" + code.getCode() + ""String_Node_Str""+ ""String_Node_Str"");
    ln(GeneratorUtils.generateCSharpEnumMemberName(code.getCode()) + ""String_Node_Str"");
  }
  es(""String_Node_Str"");
  return end();
}","public GenBlock generateEnum(BindingDefn binding) throws Exception {
  begin();
  generateDocComment(binding.getDefinition());
  ln(""String_Node_Str"" + binding.getName() + ""String_Node_Str"");
  ln(""String_Node_Str"" + GeneratorUtils.generateCSharpTypeName(binding.getName()));
  bs(""String_Node_Str"");
  for (  DefinedCode code : binding.getCode()) {
    String definition=code.getDefinition();
    if (definition != null) {
      generateDocComment(code.getDefinition());
    }
    ln(""String_Node_Str"" + ""String_Node_Str"" + code.getCode() + ""String_Node_Str""+ ""String_Node_Str"");
    ln(GeneratorUtils.generateCSharpEnumMemberName(code.getCode()) + ""String_Node_Str"");
  }
  es(""String_Node_Str"");
  return end();
}",0.8229974160206718
24182,"private void generateSimpleValueAccess(ElementDefn member,TypeRef tref,String memberCsType,String singleElementCsType,String memberName) throws Exception {
  boolean isList=member.getMaxCardinality() == -1;
  boolean isTypedEnum=GeneratorUtils.isCodeWithCodeList(getDefinitions(),tref);
  String csType=null;
  String simpleMemberName=GeneratorUtils.generateCSharpMemberName(member);
  if (isTypedEnum)   csType=GeneratorUtils.buildFullyScopedTypeName(tref.getFullBindingRef()) + ""String_Node_Str"";
 else   csType=GeneratorUtils.mapPrimitiveToCSharpType(tref.getName());
  if (isList)   csType=""String_Node_Str"" + csType + ""String_Node_Str"";
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + member.getAnnotation().getShortDefinition());
  ln(""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + csType + ""String_Node_Str""+ simpleMemberName);
  bs(""String_Node_Str"");
  ln(""String_Node_Str"" + memberName + ""String_Node_Str"");
  if (!isList)   nl(memberName + ""String_Node_Str"");
 else   nl(memberName + ""String_Node_Str"");
  nl(""String_Node_Str"");
  ln(""String_Node_Str"");
  bs(""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + memberName + ""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + memberName + ""String_Node_Str""+ memberCsType);
  if (!isList)   nl(""String_Node_Str"");
 else {
    nl(""String_Node_Str"");
    nl(singleElementCsType + ""String_Node_Str"");
  }
  ln(""String_Node_Str"" + simpleMemberName + ""String_Node_Str"");
  es(""String_Node_Str"");
  es(""String_Node_Str"");
  ln();
}","private void generateSimpleValueAccess(ElementDefn member,TypeRef tref,String memberCsType,String singleElementCsType,String memberName) throws Exception {
  boolean isList=member.getMaxCardinality() == -1;
  boolean isTypedEnum=GeneratorUtils.isCodeWithCodeList(getDefinitions(),tref);
  String csType=null;
  String simpleMemberName=GeneratorUtils.generateCSharpMemberName(member);
  if (isTypedEnum)   csType=GeneratorUtils.buildFullyScopedTypeName(tref.getFullBindingRef()) + ""String_Node_Str"";
 else   csType=GeneratorUtils.mapPrimitiveToCSharpType(tref.getName());
  if (isList)   csType=""String_Node_Str"" + csType + ""String_Node_Str"";
  generateDocComment(member.getAnnotation().getShortDefinition(),""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + csType + ""String_Node_Str""+ simpleMemberName);
  bs(""String_Node_Str"");
  ln(""String_Node_Str"" + memberName + ""String_Node_Str"");
  if (!isList)   nl(memberName + ""String_Node_Str"");
 else   nl(memberName + ""String_Node_Str"");
  nl(""String_Node_Str"");
  ln(""String_Node_Str"");
  bs(""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + memberName + ""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + memberName + ""String_Node_Str""+ memberCsType);
  if (!isList)   nl(""String_Node_Str"");
 else {
    nl(""String_Node_Str"");
    nl(singleElementCsType + ""String_Node_Str"");
  }
  ln(""String_Node_Str"" + simpleMemberName + ""String_Node_Str"");
  es(""String_Node_Str"");
  es(""String_Node_Str"");
  ln();
}",0.967741935483871
24183,"public GenBlock compositeClass(CompositeTypeDefn composite) throws Exception {
  begin();
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + composite.getAnnotations().getShortDefinition());
  ln(""String_Node_Str"");
  compositeClassHeader(composite);
  bs(""String_Node_Str"");
  if (composite.getBinding().size() > 0)   enums(composite.getBinding());
  if (composite.getLocalCompositeTypes().size() > 0)   nestedLocalTypes(composite.getLocalCompositeTypes());
  if (hasPrimitiveValueElement(composite)) {
    PrimitiveDefn prim=definitions.findPrimitive(composite.getName());
    generateExtraPrimitiveMembers(prim,GeneratorUtils.generateCSharpTypeName(composite.getName()));
  }
  generateMembers(composite);
  String derivation=composite.getName();
  if (derivation.compareTo(""String_Node_Str"") == 0 || derivation.compareTo(""String_Node_Str"") == 0) {
    ln(""String_Node_Str"");
    ln(""String_Node_Str"");
    bs(""String_Node_Str"");
    ln(""String_Node_Str"");
    ln(""String_Node_Str"");
    es(""String_Node_Str"");
  }
  es(""String_Node_Str"");
  ln();
  return end();
}","public GenBlock compositeClass(CompositeTypeDefn composite) throws Exception {
  begin();
  generateDocComment(composite.getAnnotations().getShortDefinition());
  compositeClassHeader(composite);
  bs(""String_Node_Str"");
  if (composite.getBinding().size() > 0)   enums(composite.getBinding());
  if (composite.getLocalCompositeTypes().size() > 0)   nestedLocalTypes(composite.getLocalCompositeTypes());
  if (hasPrimitiveValueElement(composite)) {
    PrimitiveDefn prim=definitions.findPrimitive(composite.getName());
    generateExtraPrimitiveMembers(prim,GeneratorUtils.generateCSharpTypeName(composite.getName()));
  }
  generateMembers(composite);
  String derivation=composite.getName();
  if (derivation.compareTo(""String_Node_Str"") == 0 || derivation.compareTo(""String_Node_Str"") == 0) {
    ln(""String_Node_Str"");
    ln(""String_Node_Str"");
    bs(""String_Node_Str"");
    ln(""String_Node_Str"");
    ln(""String_Node_Str"");
    es(""String_Node_Str"");
  }
  es(""String_Node_Str"");
  ln();
  return end();
}",0.9557692307692308
24184,"private void generateMemberProperty(CompositeTypeDefn context,ElementDefn member,int order) throws Exception {
  TypeRef tref=GeneratorUtils.getMemberTypeForElement(getDefinitions(),member);
  boolean isFhirPrimitive=Character.isLowerCase(tref.getName().charAt(0));
  boolean needsNativeProperty=(isFhirPrimitive && member.getXmlFormatHint() != XmlFormatHint.ELEMENT) || member.isPrimitiveValueElement();
  boolean hasBothPrimitiveAndElementProperty=isFhirPrimitive && !needsNativeProperty;
  String choiceType=null;
  String choices=""String_Node_Str"";
  if (member.isPolymorph()) {
    for (    TypeRef choiceTRef : member.getType()) {
      String name=choiceTRef.getName();
      if (name.equals(TypeRef.ELEMENT_TYPE_NAME))       choiceType=""String_Node_Str"";
 else       if (name.equals(TypeRef.RESOURCE_TYPE_NAME))       choiceType=""String_Node_Str"";
 else       choiceType=""String_Node_Str"";
      choices+=""String_Node_Str"" + GeneratorUtils.buildFullyScopedTypeName(choiceTRef) + ""String_Node_Str"";
    }
    if (choices.endsWith(""String_Node_Str""))     choices=choices.substring(0,choices.length() - 1);
  }
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + member.getAnnotation().getShortDefinition());
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + member.getName() + ""String_Node_Str"");
  if (member.isPrimitiveValueElement())   nl(""String_Node_Str"");
  if (member.getXmlFormatHint() != XmlFormatHint.ELEMENT)   nl(""String_Node_Str"" + member.getXmlFormatHint().getName());
  if (member.isSummaryItem())   nl(""String_Node_Str"");
  if (order != 0)   nl(""String_Node_Str"" + Integer.toString(order));
  if (choiceType != null)   nl(""String_Node_Str"" + choiceType);
  nl(""String_Node_Str"");
  if (choices.length() > 0) {
    ln(""String_Node_Str"");
    nl(choices);
    nl(""String_Node_Str"");
  }
  if (!member.isPolymorph() && member.getType().get(0).getName().equals(""String_Node_Str"")) {
    ln(""String_Node_Str"");
    boolean isNext=false;
    for (    String resParam : member.getType().get(0).getResourceParams()) {
      if (isNext)       nl(""String_Node_Str"");
      nl(""String_Node_Str"" + resParam + ""String_Node_Str"");
      isNext=true;
    }
    nl(""String_Node_Str"");
  }
  if (member.getMinCardinality() > 0 || member.getMaxCardinality() != 1) {
    ln(""String_Node_Str"");
    nl(""String_Node_Str"" + Integer.toString(member.getMinCardinality()));
    nl(""String_Node_Str"" + Integer.toString(member.getMaxCardinality()));
    nl(""String_Node_Str"");
  }
  if (needsNativeProperty)   addPrimitiveValidators(tref.getName());
  ln(""String_Node_Str"");
  ln(""String_Node_Str"");
  String memberCsType;
  if (GeneratorUtils.isCodeWithCodeList(getDefinitions(),tref))   memberCsType=""String_Node_Str"" + GeneratorUtils.buildFullyScopedTypeName(tref.getFullBindingRef()) + ""String_Node_Str"";
 else   if (needsNativeProperty)   memberCsType=GeneratorUtils.mapPrimitiveToCSharpType(tref.getName());
 else   memberCsType=GeneratorUtils.buildFullyScopedTypeName(tref);
  String singleElementCsType=memberCsType;
  if (member.getMaxCardinality() == -1)   memberCsType=""String_Node_Str"" + memberCsType + ""String_Node_Str"";
  String memberName=GeneratorUtils.generateCSharpMemberName(member);
  if (hasBothPrimitiveAndElementProperty) {
    memberName+=""String_Node_Str"";
  }
  member.getGeneratorAnnotations().put(CLASSGEN_MEMBER_NAME,memberName);
  member.getGeneratorAnnotations().put(CLASSGEN_MEMBER_CSTYPE,memberCsType);
  nl(memberCsType + ""String_Node_Str"" + memberName);
  bs(""String_Node_Str"");
  ln(""String_Node_Str"" + memberName + ""String_Node_Str"");
  ln(""String_Node_Str"" + memberName + ""String_Node_Str""+ memberName+ ""String_Node_Str"");
  es(""String_Node_Str"");
  ln(""String_Node_Str"" + memberCsType + ""String_Node_Str""+ memberName+ ""String_Node_Str"");
  ln();
  if (hasBothPrimitiveAndElementProperty)   generateSimpleValueAccess(member,tref,memberCsType,singleElementCsType,memberName);
}","private void generateMemberProperty(CompositeTypeDefn context,ElementDefn member,int order) throws Exception {
  TypeRef tref=GeneratorUtils.getMemberTypeForElement(getDefinitions(),member);
  boolean isFhirPrimitive=Character.isLowerCase(tref.getName().charAt(0));
  boolean needsNativeProperty=(isFhirPrimitive && member.getXmlFormatHint() != XmlFormatHint.ELEMENT) || member.isPrimitiveValueElement();
  boolean hasBothPrimitiveAndElementProperty=isFhirPrimitive && !needsNativeProperty;
  String choiceType=null;
  String choices=""String_Node_Str"";
  if (member.isPolymorph()) {
    for (    TypeRef choiceTRef : member.getType()) {
      String name=choiceTRef.getName();
      if (name.equals(TypeRef.ELEMENT_TYPE_NAME))       choiceType=""String_Node_Str"";
 else       if (name.equals(TypeRef.RESOURCE_TYPE_NAME))       choiceType=""String_Node_Str"";
 else       choiceType=""String_Node_Str"";
      choices+=""String_Node_Str"" + GeneratorUtils.buildFullyScopedTypeName(choiceTRef) + ""String_Node_Str"";
    }
    if (choices.endsWith(""String_Node_Str""))     choices=choices.substring(0,choices.length() - 1);
  }
  generateDocComment(member.getAnnotation().getShortDefinition());
  ln(""String_Node_Str"" + member.getName() + ""String_Node_Str"");
  if (member.isPrimitiveValueElement())   nl(""String_Node_Str"");
  if (member.getXmlFormatHint() != XmlFormatHint.ELEMENT)   nl(""String_Node_Str"" + member.getXmlFormatHint().getName());
  if (member.isSummaryItem())   nl(""String_Node_Str"");
  if (order != 0)   nl(""String_Node_Str"" + Integer.toString(order));
  if (choiceType != null)   nl(""String_Node_Str"" + choiceType);
  nl(""String_Node_Str"");
  if (choices.length() > 0) {
    ln(""String_Node_Str"");
    nl(choices);
    nl(""String_Node_Str"");
  }
  if (!member.isPolymorph() && member.getType().get(0).getName().equals(""String_Node_Str"")) {
    ln(""String_Node_Str"");
    boolean isNext=false;
    for (    String resParam : member.getType().get(0).getResourceParams()) {
      if (isNext)       nl(""String_Node_Str"");
      nl(""String_Node_Str"" + resParam + ""String_Node_Str"");
      isNext=true;
    }
    nl(""String_Node_Str"");
  }
  if (member.getMinCardinality() > 0 || member.getMaxCardinality() != 1) {
    ln(""String_Node_Str"");
    nl(""String_Node_Str"" + Integer.toString(member.getMinCardinality()));
    nl(""String_Node_Str"" + Integer.toString(member.getMaxCardinality()));
    nl(""String_Node_Str"");
  }
  if (needsNativeProperty)   addPrimitiveValidators(tref.getName());
  ln(""String_Node_Str"");
  ln(""String_Node_Str"");
  String memberCsType;
  if (GeneratorUtils.isCodeWithCodeList(getDefinitions(),tref))   memberCsType=""String_Node_Str"" + GeneratorUtils.buildFullyScopedTypeName(tref.getFullBindingRef()) + ""String_Node_Str"";
 else   if (needsNativeProperty)   memberCsType=GeneratorUtils.mapPrimitiveToCSharpType(tref.getName());
 else   memberCsType=GeneratorUtils.buildFullyScopedTypeName(tref);
  String singleElementCsType=memberCsType;
  if (member.getMaxCardinality() == -1)   memberCsType=""String_Node_Str"" + memberCsType + ""String_Node_Str"";
  String memberName=GeneratorUtils.generateCSharpMemberName(member);
  if (hasBothPrimitiveAndElementProperty) {
    memberName+=""String_Node_Str"";
  }
  member.getGeneratorAnnotations().put(CLASSGEN_MEMBER_NAME,memberName);
  member.getGeneratorAnnotations().put(CLASSGEN_MEMBER_CSTYPE,memberCsType);
  nl(memberCsType + ""String_Node_Str"" + memberName);
  bs(""String_Node_Str"");
  ln(""String_Node_Str"" + memberName + ""String_Node_Str"");
  ln(""String_Node_Str"" + memberName + ""String_Node_Str""+ memberName+ ""String_Node_Str"");
  es(""String_Node_Str"");
  ln(""String_Node_Str"" + memberCsType + ""String_Node_Str""+ memberName+ ""String_Node_Str"");
  ln();
  if (hasBothPrimitiveAndElementProperty)   generateSimpleValueAccess(member,tref,memberCsType,singleElementCsType,memberName);
}",0.9881443298969071
24185,"public GenBlock generateConstrained(ConstrainedTypeDefn constrained) throws Exception {
  begin();
  header(definitions.getDate(),definitions.getVersion());
  ln(""String_Node_Str"");
  bs(""String_Node_Str"");
  ln(""String_Node_Str"");
  ln(""String_Node_Str"" + constrained.getAnnotations().getShortDefinition());
  ln(""String_Node_Str"");
  ln(""String_Node_Str"");
  nl(""String_Node_Str"" + constrained.getName() + ""String_Node_Str"");
  nl(""String_Node_Str"");
  ln(""String_Node_Str"" + GeneratorUtils.generateCSharpTypeName(constrained.getName()));
  nl(""String_Node_Str"");
  nl(GeneratorUtils.generateCSharpTypeName(constrained.getConstrainedBaseType().getName()));
  bs(""String_Node_Str"");
  ln(""String_Node_Str"");
  for (  Invariant inv : constrained.getDetail())   ln(""String_Node_Str"" + inv.getHuman());
  es(""String_Node_Str"");
  es(""String_Node_Str"");
  return end();
}","public GenBlock generateConstrained(ConstrainedTypeDefn constrained) throws Exception {
  begin();
  header(definitions.getDate(),definitions.getVersion());
  ln(""String_Node_Str"");
  bs(""String_Node_Str"");
  generateDocComment(constrained.getAnnotations().getShortDefinition());
  ln(""String_Node_Str"");
  nl(""String_Node_Str"" + constrained.getName() + ""String_Node_Str"");
  nl(""String_Node_Str"");
  ln(""String_Node_Str"" + GeneratorUtils.generateCSharpTypeName(constrained.getName()));
  nl(""String_Node_Str"");
  nl(GeneratorUtils.generateCSharpTypeName(constrained.getConstrainedBaseType().getName()));
  bs(""String_Node_Str"");
  ln(""String_Node_Str"");
  for (  Invariant inv : constrained.getDetail())   ln(""String_Node_Str"" + inv.getHuman());
  es(""String_Node_Str"");
  es(""String_Node_Str"");
  return end();
}",0.9453032104637336
24186,"@Override public void run(){
  errorsInARowCount=0;
  boolean verboseInitLogging=true;
  while (!shouldStop.get()) {
    try {
      if (verboseInitLogging) {
        log.info(""String_Node_Str"" + destination);
      }
 else {
        log.debug(""String_Node_Str"" + destination);
      }
      final Connection connection=connectionFactory.createConnection();
      try {
        connection.start();
        final Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);
        try {
          final Destination d=destinationCreator.create(session,destination);
          final ActiveMQMessageConsumer messageConsumer=(ActiveMQMessageConsumer)session.createConsumer(d);
          try {
            if (verboseInitLogging) {
              log.info(""String_Node_Str"" + destination);
            }
 else {
              log.debug(""String_Node_Str"" + destination);
            }
            isReceiving.set(true);
            runReceiveLoop(messageConsumer);
          }
  finally {
            isReceiving.set(false);
            ActiveMQUtils.silent(() -> messageConsumer.close());
          }
        }
  finally {
          ActiveMQUtils.silent(() -> session.close());
        }
      }
  finally {
        ActiveMQUtils.silent(() -> connection.close());
      }
    }
 catch (    Throwable e) {
      errorsInARowCount++;
      boolean continuingErrorSituation=errorsInARowCount > 1;
      verboseInitLogging=true;
      if (e instanceof javax.jms.IllegalStateException && e.getMessage().equals(""String_Node_Str"") && !continuingErrorSituation) {
        log.debug(""String_Node_Str"",e);
        verboseInitLogging=false;
      }
 else {
        log.error(""String_Node_Str"",e);
      }
      if (continuingErrorSituation) {
        log.info(""String_Node_Str"",errorsInARowCount,SLEEP_TIME_MILLS);
        ActiveMQUtils.silent(() -> Thread.sleep(SLEEP_TIME_MILLS));
      }
    }
  }
  log.debug(""String_Node_Str"");
}","@Override public void run(){
  errorsInARowCount=0;
  boolean verboseInitLogging=true;
  while (!shouldStop.get()) {
    try {
      if (verboseInitLogging) {
        log.info(""String_Node_Str"" + destination);
      }
 else {
        log.debug(""String_Node_Str"" + destination);
      }
      final Connection connection=connectionFactory.createConnection();
      try {
        connection.start();
        final Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);
        try {
          final Destination d=destinationCreator.create(session,destination);
          final MessageConsumer rawMessageConsumer=session.createConsumer(d);
          final ActiveMQMessageConsumer messageConsumer=convertToActiveMQMessageConsumer(rawMessageConsumer);
          try {
            if (verboseInitLogging) {
              log.info(""String_Node_Str"" + destination);
            }
 else {
              log.debug(""String_Node_Str"" + destination);
            }
            isReceiving.set(true);
            runReceiveLoop(messageConsumer);
          }
  finally {
            isReceiving.set(false);
            ActiveMQUtils.silent(() -> messageConsumer.close());
          }
        }
  finally {
          ActiveMQUtils.silent(() -> session.close());
        }
      }
  finally {
        ActiveMQUtils.silent(() -> connection.close());
      }
    }
 catch (    Throwable e) {
      errorsInARowCount++;
      boolean continuingErrorSituation=errorsInARowCount > 1;
      verboseInitLogging=true;
      if (e instanceof javax.jms.IllegalStateException && e.getMessage().equals(""String_Node_Str"") && !continuingErrorSituation) {
        log.debug(""String_Node_Str"",e);
        verboseInitLogging=false;
      }
 else {
        log.error(""String_Node_Str"",e);
      }
      if (continuingErrorSituation) {
        log.info(""String_Node_Str"",errorsInARowCount,SLEEP_TIME_MILLS);
        ActiveMQUtils.silent(() -> Thread.sleep(SLEEP_TIME_MILLS));
      }
    }
  }
  log.debug(""String_Node_Str"");
}",0.9710953346855984
24187,"private void doTestRedelivery(String destinationName) throws Exception {
  ActiveMQConnectionFactory connectionFactory=new ActiveMQConnectionFactory(url);
  ObjectMapper objectMapper=new ObjectMapper();
  ActiveMQReceiverHandler<String> h=new ActiveMQReceiverHandler<>(destinationName,connectionFactory,(m) -> receiveMessage(m),String.class,objectMapper,(m,e) -> exceptionHandler(m,e),1);
  h.start();
  ActiveMQSender sender=new ActiveMQSenderImpl(connectionFactory,objectMapper,destinationName,Optional.<Integer>empty(),false);
  sender.sendJson(""String_Node_Str"");
  sender.sendJson(""String_Node_Str"");
  sender.sendJson(""String_Node_Str"");
  Thread.sleep(1000);
  assertEquals(3 + 1,errorCount);
  assertEquals(2,okCount);
}","private void doTestRedelivery(String destinationName) throws Exception {
  ActiveMQConnectionFactory realConnectionFactory=new ActiveMQConnectionFactory(url);
  PooledConnectionFactory connectionFactory=new PooledConnectionFactory();
  connectionFactory.setConnectionFactory(realConnectionFactory);
  ObjectMapper objectMapper=new ObjectMapper();
  ActiveMQReceiverHandler<String> h=new ActiveMQReceiverHandler<>(destinationName,connectionFactory,(m) -> receiveMessage(m),String.class,objectMapper,(m,e) -> exceptionHandler(m,e),1);
  h.start();
  ActiveMQSender sender=new ActiveMQSenderImpl(connectionFactory,objectMapper,destinationName,Optional.<Integer>empty(),false);
  sender.sendJson(""String_Node_Str"");
  sender.sendJson(""String_Node_Str"");
  sender.sendJson(""String_Node_Str"");
  Thread.sleep(1000);
  assertEquals(3 + 1,errorCount);
  assertEquals(2,okCount);
}",0.90875
24188,"private static String getSide(){
  return FMLCommonHandler.instance().getSide().toString().toLowerCase();
}","private static String getSide(){
  return FMLCommonHandler.instance().getSide().toString().toLowerCase(Locale.ENGLISH);
}",0.9385964912280702
24189,"@Override protected void shutdownOutputRequested(ChannelPipeline pipeline,ShutdownOutputEvent evt) throws Exception {
  TlsChildChannel httpChildChannel=(TlsChildChannel)pipeline.getChannel();
  ChannelFuture httpFuture=evt.getFuture();
  closeRequested(httpChildChannel,httpFuture);
}","@Override protected void shutdownOutputRequested(ChannelPipeline pipeline,ShutdownOutputEvent evt) throws Exception {
  TlsChildChannel tlsChildChannel=(TlsChildChannel)pipeline.getChannel();
  ChannelFuture tlsFuture=evt.getFuture();
  closeRequested(tlsChildChannel,tlsFuture);
}",0.950530035335689
24190,"@Override public void closeRequested(final ChannelHandlerContext ctx,final ChannelStateEvent e) throws Exception {
  childChannels.close().addListener(new ChannelGroupFutureListener(){
    @Override public void operationComplete(    ChannelGroupFuture future) throws Exception {
      ctx.sendDownstream(e);
    }
  }
);
}","@Override protected void closeRequested(ChannelPipeline pipeline,ChannelStateEvent evt) throws Exception {
  final TlsServerChannel tlsCloseChannel=(TlsServerChannel)evt.getChannel();
  final ChannelFuture tlsCloseFuture=evt.getFuture();
  boolean wasBound=tlsCloseChannel.isBound();
  if (!tlsCloseFuture.isDone()) {
    if (wasBound) {
      unbindRequested(pipeline,evt);
    }
    Channel transport=tlsCloseChannel.getTransport();
    if (transport != null) {
      ChannelFuture closeFuture=transport.close();
      if (closeFuture.isDone()) {
        handleTlsTransportCloseComplete(tlsCloseChannel,tlsCloseFuture,closeFuture);
      }
 else {
        closeFuture.addListener(new ChannelFutureListener(){
          @Override public void operationComplete(          ChannelFuture closeFuture) throws Exception {
            handleTlsTransportCloseComplete(tlsCloseChannel,tlsCloseFuture,closeFuture);
          }
        }
);
      }
    }
  }
}",0.3411949685534591
24191,"private ChannelHandler createParentHandler(TlsServerChannel channel,final ChannelAddress address){
  return new SimpleChannelHandler(){
    private final ChannelGroup childChannels=new DefaultChannelGroup();
    @Override public void childChannelOpen(    ChannelHandlerContext ctx,    ChildChannelStateEvent e) throws Exception {
      e.getChannel().setAttachment(address);
      childChannels.add(e.getChildChannel());
      super.childChannelOpen(ctx,e);
    }
    @Override public void childChannelClosed(    ChannelHandlerContext ctx,    ChildChannelStateEvent e) throws Exception {
      childChannels.remove(e.getChildChannel());
      super.childChannelClosed(ctx,e);
    }
    @Override public void closeRequested(    final ChannelHandlerContext ctx,    final ChannelStateEvent e) throws Exception {
      childChannels.close().addListener(new ChannelGroupFutureListener(){
        @Override public void operationComplete(        ChannelGroupFuture future) throws Exception {
          ctx.sendDownstream(e);
        }
      }
);
    }
  }
;
}","private ChannelHandler createParentHandler(TlsServerChannel channel,final ChannelAddress address){
  return new SimpleChannelHandler(){
    @Override public void childChannelOpen(    ChannelHandlerContext ctx,    ChildChannelStateEvent e) throws Exception {
      e.getChannel().setAttachment(address);
      super.childChannelOpen(ctx,e);
    }
  }
;
}",0.499644128113879
24192,"@Override public void childChannelOpen(ChannelHandlerContext ctx,ChildChannelStateEvent e) throws Exception {
  e.getChannel().setAttachment(address);
  childChannels.add(e.getChildChannel());
  super.childChannelOpen(ctx,e);
}","@Override public void childChannelOpen(ChannelHandlerContext ctx,ChildChannelStateEvent e) throws Exception {
  e.getChannel().setAttachment(address);
  super.childChannelOpen(ctx,e);
}",0.8980582524271845
24193,"@Override public void operationComplete(ChannelGroupFuture future) throws Exception {
  ctx.sendDownstream(e);
}","@Override public void operationComplete(ChannelFuture closeFuture) throws Exception {
  handleTlsTransportCloseComplete(tlsCloseChannel,tlsCloseFuture,closeFuture);
}",0.6906474820143885
24194,"@Override public void channelClosed(final ChannelHandlerContext ctx,final ChannelStateEvent e) throws Exception {
  if (robot != null) {
    robot.dispose().addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        channelClosedFuture.setSuccess();
        ctx.sendUpstream(e);
        initialize();
      }
    }
);
  }
}","@Override public void channelClosed(final ChannelHandlerContext ctx,final ChannelStateEvent e) throws Exception {
  if (robot != null) {
    robot.dispose().addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        channelClosedFuture.setSuccess();
        ctx.sendUpstream(e);
      }
    }
);
  }
}",0.9518987341772152
24195,"@Override public void disposeReceived(final ChannelHandlerContext ctx,MessageEvent evt) throws Exception {
  if (robot == null || robot.getPreparedFuture() == null) {
    sendErrorMessage(ctx,ERROR_MSG_NOT_PREPARED);
    return;
  }
  try {
    robot.dispose().addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        writeDisposed(ctx);
        initialize();
      }
    }
);
  }
 catch (  Exception e) {
    sendErrorMessage(ctx,e);
    return;
  }
}","@Override public void disposeReceived(final ChannelHandlerContext ctx,MessageEvent evt) throws Exception {
  if (robot == null || robot.getPreparedFuture() == null) {
    sendErrorMessage(ctx,ERROR_MSG_NOT_PREPARED);
    return;
  }
  try {
    robot.dispose().addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        writeDisposed(ctx);
      }
    }
);
  }
 catch (  Exception e) {
    sendErrorMessage(ctx,e);
    return;
  }
}",0.8403041825095057
24196,"void notifyException(Exception exception){
  this.exception=exception;
  if (testThread != null) {
    testThread.interrupt();
  }
}","void notifyException(Exception exception){
  this.exception=exception;
  if (testThread != null) {
    testThread.interrupt();
    if (testThread != Thread.currentThread())     testThread.interrupt();
  }
}",0.7810650887573964
24197,"void notifyFinished(){
switch (state) {
case INIT:
    notifyPrepared();
  break;
case PREPARED:
case STARTABLE:
state=State.FINISHED;
finished.countDown();
break;
default :
throw new IllegalStateException(state.name());
}
}","void notifyFinished(){
switch (state) {
case INIT:
    notifyPrepared();
case PREPARED:
case STARTABLE:
  state=State.FINISHED;
finished.countDown();
break;
default :
throw new IllegalStateException(state.name());
}
}",0.9750566893424036
24198,"@Override public ScriptPair call() throws Exception {
  try {
    if (abortScheduled) {
      return new ScriptPair();
    }
    controller.connect();
    PrepareCommand prepare=new PrepareCommand();
    prepare.setNames(names);
    prepare.setOverriddenScriptProperties(overridenScriptProperties);
    controller.writeCommand(prepare);
    boolean abortWritten=false;
    String expectedScript=null;
    while (true) {
      try {
        CommandEvent event=controller.readEvent(200,MILLISECONDS);
switch (event.getKind()) {
case PREPARED:
          PreparedEvent prepared=(PreparedEvent)event;
        expectedScript=prepared.getScript();
      for (      String barrier : prepared.getBarriers()) {
        barriers.put(barrier,new CountDownLatch(1));
      }
    latch.notifyPrepared();
  latch.awaitStartable();
if (abortScheduled && !abortWritten) {
  sendAbortCommand();
  abortWritten=true;
}
 else {
  StartCommand start=new StartCommand();
  controller.writeCommand(start);
}
break;
case STARTED:
break;
case NOTIFIED:
NotifiedEvent notifiedEvent=(NotifiedEvent)event;
String barrier=notifiedEvent.getBarrier();
CountDownLatch notifiedLatch=barriers.get(barrier);
notifiedLatch.countDown();
break;
case ERROR:
ErrorEvent error=(ErrorEvent)event;
throw new SpecificationException(format(""String_Node_Str"",error.getSummary(),error.getDescription()));
case FINISHED:
FinishedEvent finished=(FinishedEvent)event;
String observedScript=finished.getScript();
return new ScriptPair(expectedScript,observedScript);
default :
throw new IllegalArgumentException(""String_Node_Str"" + event.getKind());
}
}
 catch (SocketTimeoutException e) {
if (abortScheduled && !abortWritten) {
sendAbortCommand();
abortWritten=true;
}
if (Thread.interrupted()) {
throw new InterruptedException();
}
}
}
}
 catch (ConnectException e) {
Exception exception=new Exception(""String_Node_Str"",e);
exception.fillInStackTrace();
latch.notifyException(exception);
throw e;
}
catch (Exception e) {
latch.notifyException(e);
throw e;
}
 finally {
latch.notifyFinished();
}
}","@Override public ScriptPair call() throws Exception {
  try {
    if (abortScheduled) {
      return new ScriptPair();
    }
    controller.connect();
    PrepareCommand prepare=new PrepareCommand();
    prepare.setNames(names);
    prepare.setOverriddenScriptProperties(overridenScriptProperties);
    controller.writeCommand(prepare);
    boolean abortWritten=false;
    String expectedScript=null;
    String observedScript=null;
    boolean finishedReceived=false;
    while (true) {
      try {
        CommandEvent event=controller.readEvent(200,MILLISECONDS);
switch (event.getKind()) {
case PREPARED:
          PreparedEvent prepared=(PreparedEvent)event;
        expectedScript=prepared.getScript();
      for (      String barrier : prepared.getBarriers()) {
        barriers.put(barrier,new CountDownLatch(1));
      }
    latch.notifyPrepared();
  latch.awaitStartable();
if (abortScheduled && !abortWritten) {
  sendAbortCommand();
  abortWritten=true;
}
 else {
  StartCommand start=new StartCommand();
  controller.writeCommand(start);
}
break;
case STARTED:
break;
case NOTIFIED:
NotifiedEvent notifiedEvent=(NotifiedEvent)event;
String barrier=notifiedEvent.getBarrier();
CountDownLatch notifiedLatch=barriers.get(barrier);
notifiedLatch.countDown();
break;
case ERROR:
ErrorEvent error=(ErrorEvent)event;
throw new SpecificationException(format(""String_Node_Str"",error.getSummary(),error.getDescription()));
case FINISHED:
FinishedEvent finished=(FinishedEvent)event;
observedScript=finished.getScript();
finishedReceived=true;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + event.getKind());
}
}
 catch (SocketTimeoutException e) {
if (finishedReceived) return new ScriptPair(expectedScript,observedScript);
if (abortScheduled && !abortWritten) {
sendAbortCommand();
abortWritten=true;
}
if (Thread.interrupted()) {
throw new InterruptedException();
}
}
}
}
 catch (ConnectException e) {
Exception exception=new Exception(""String_Node_Str"",e);
exception.fillInStackTrace();
latch.notifyException(exception);
throw e;
}
catch (Exception e) {
latch.notifyException(e);
throw e;
}
 finally {
latch.notifyFinished();
}
}",0.928927977180889
24199,"@Override public void evaluate() throws Throwable {
  latch.setInterruptOnException(Thread.currentThread());
  FutureTask<ScriptPair> scriptFuture=new FutureTask<>(scriptRunner);
  try {
    new Thread(scriptFuture).start();
    try {
      latch.awaitPrepared();
    }
 catch (    InterruptedException e) {
      if (latch.hasException()) {
        throw latch.getException();
      }
 else       throw e;
    }
    try {
      statement.evaluate();
    }
 catch (    AssumptionViolatedException e) {
      if (!latch.isFinished()) {
        scriptRunner.abort();
      }
      throw e;
    }
catch (    Throwable cause) {
      if (latch.hasException()) {
        if (cause instanceof InterruptedException) {
          throw latch.getException();
        }
        throw cause;
      }
 else {
        if (!latch.isFinished()) {
          scriptRunner.abort();
        }
        try {
          ScriptPair scripts=scriptFuture.get(5,SECONDS);
          try {
            assertEquals(""String_Node_Str"",scripts.getExpectedScript(),scripts.getObservedScript());
            throw cause;
          }
 catch (          ComparisonFailure f) {
            f.initCause(cause);
            throw f;
          }
        }
 catch (        ExecutionException ee) {
          throw ee.getCause().initCause(cause);
        }
catch (        Exception e) {
          throw cause;
        }
      }
    }
    String k3poSimpleName=K3poRule.class.getSimpleName();
    assertTrue(format(""String_Node_Str"",k3poSimpleName,k3poSimpleName,k3poSimpleName),latch.isStartable());
    ScriptPair scripts=scriptFuture.get();
    assertEquals(""String_Node_Str"",scripts.getExpectedScript(),scripts.getObservedScript());
  }
  finally {
    try {
      scriptRunner.dispose();
    }
  finally {
      scriptFuture.cancel(true);
    }
  }
}","@Override public void evaluate() throws Throwable {
  latch.setInterruptOnException(Thread.currentThread());
  FutureTask<ScriptPair> scriptFuture=new FutureTask<>(scriptRunner);
  try {
    new Thread(scriptFuture).start();
    try {
      latch.awaitPrepared();
    }
 catch (    InterruptedException e) {
      if (latch.hasException()) {
        throw latch.getException();
      }
 else       throw e;
    }
    try {
      statement.evaluate();
    }
 catch (    AssumptionViolatedException e) {
      if (!latch.isFinished()) {
        scriptRunner.abort();
      }
      throw e;
    }
catch (    Throwable cause) {
      if (latch.hasException()) {
        if (cause instanceof InterruptedException) {
          throw latch.getException();
        }
        throw cause;
      }
 else {
        if (!latch.isFinished()) {
          scriptRunner.abort();
        }
        try {
          ScriptPair scripts=scriptFuture.get(5,SECONDS);
          try {
            assertEquals(""String_Node_Str"",scripts.getExpectedScript(),scripts.getObservedScript());
            throw cause;
          }
 catch (          ComparisonFailure f) {
            f.initCause(cause);
            throw f;
          }
        }
 catch (        ExecutionException ee) {
          throw ee.getCause().initCause(cause);
        }
catch (        Exception e) {
          throw cause;
        }
      }
    }
    String k3poSimpleName=K3poRule.class.getSimpleName();
    assertTrue(format(""String_Node_Str"",k3poSimpleName,k3poSimpleName,k3poSimpleName),latch.isStartable());
    ScriptPair scripts=scriptFuture.get();
    assertEquals(""String_Node_Str"",scripts.getExpectedScript(),scripts.getObservedScript());
  }
  finally {
    try {
      scriptRunner.dispose();
    }
  finally {
      scriptFuture.cancel(true);
      Thread.interrupted();
    }
  }
}",0.9884931506849316
24200,"void notifyException(Exception exception){
  this.exception=exception;
  prepared.countDown();
  startable.countDown();
  finished.countDown();
  if (testThread != null) {
    testThread.interrupt();
  }
}","void notifyException(Exception exception){
  this.exception=exception;
  if (testThread != null) {
    testThread.interrupt();
  }
}",0.7833827893175074
24201,"public void abort(){
  System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  this.abortScheduled=true;
  latch.notifyAbort();
}","public void abort(){
  System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  this.abortScheduled=true;
  latch.notifyAbort();
}",0.947945205479452
24202,"private void writeNotifiedOnBarrier(final String barrier,final ChannelHandlerContext ctx) throws Exception {
  robot.awaitBarrier(barrier).addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      if (future.isSuccess()) {
        logger.debug(""String_Node_Str"" + barrier);
        final NotifiedMessage notified=new NotifiedMessage();
        notified.setBarrier(barrier);
        Channels.write(ctx,Channels.future(null),notified);
      }
    }
  }
);
}","private void writeNotifiedOnBarrier(final String barrier,final ChannelHandlerContext ctx) throws Exception {
  final CountDownLatch latch=new CountDownLatch(1);
  notifiedLatches.add(latch);
  robot.awaitBarrier(barrier).addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      try {
        if (future.isSuccess()) {
          logger.debug(""String_Node_Str"" + barrier);
          final NotifiedMessage notified=new NotifiedMessage();
          notified.setBarrier(barrier);
          Channels.write(ctx,Channels.future(null),notified);
        }
      }
  finally {
        latch.countDown();
      }
    }
  }
);
}",0.8641171684296176
24203,"private ChannelFutureListener whenAbortedOrFinished(final ChannelHandlerContext ctx){
  final AtomicBoolean latch=new AtomicBoolean();
  return new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      if (latch.compareAndSet(false,true)) {
        sendFinishedMessage(ctx);
      }
    }
  }
;
}","private ChannelFutureListener whenAbortedOrFinished(final ChannelHandlerContext ctx){
  final AtomicBoolean oneTimeOnly=new AtomicBoolean();
  return new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      if (oneTimeOnly.compareAndSet(false,true)) {
        for (        CountDownLatch latch : notifiedLatches) {
          latch.await();
        }
        sendFinishedMessage(ctx);
      }
    }
  }
;
}",0.8441247002398081
24204,"@Override public void operationComplete(ChannelFuture future) throws Exception {
  if (latch.compareAndSet(false,true)) {
    sendFinishedMessage(ctx);
  }
}","@Override public void operationComplete(ChannelFuture future) throws Exception {
  if (oneTimeOnly.compareAndSet(false,true)) {
    for (    CountDownLatch latch : notifiedLatches) {
      latch.await();
    }
    sendFinishedMessage(ctx);
  }
}",0.7562189054726368
24205,"private void writeNotifiedOnBarrier(final String barrier,final ChannelHandlerContext ctx) throws Exception {
  robot.awaitBarrier(barrier).addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      if (future.isSuccess()) {
        logger.debug(""String_Node_Str"" + barrier);
        final NotifiedMessage notified=new NotifiedMessage();
        notified.setBarrier(barrier);
        Channels.write(ctx,Channels.future(null),notified);
      }
    }
  }
);
}","private void writeNotifiedOnBarrier(final String barrier,final ChannelHandlerContext ctx) throws Exception {
  final CountDownLatch latch=new CountDownLatch(1);
  finishLatches.add(latch);
  robot.awaitBarrier(barrier).addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      try {
        if (future.isSuccess()) {
          logger.debug(""String_Node_Str"" + barrier);
          final NotifiedMessage notified=new NotifiedMessage();
          notified.setBarrier(barrier);
          Channels.write(ctx,Channels.future(null),notified);
        }
      }
  finally {
        latch.countDown();
      }
    }
  }
);
}",0.8655256723716381
24206,"private ChannelFutureListener whenAbortedOrFinished(final ChannelHandlerContext ctx){
  final AtomicBoolean latch=new AtomicBoolean();
  return new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      if (latch.compareAndSet(false,true)) {
        sendFinishedMessage(ctx);
      }
    }
  }
;
}","private ChannelFutureListener whenAbortedOrFinished(final ChannelHandlerContext ctx){
  return new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      for (      CountDownLatch latch : finishLatches) {
        latch.await();
      }
      sendFinishedMessage(ctx);
    }
  }
;
}",0.7598870056497176
24207,"@Override public void operationComplete(ChannelFuture future) throws Exception {
  if (latch.compareAndSet(false,true)) {
    sendFinishedMessage(ctx);
  }
}","@Override public void operationComplete(ChannelFuture future) throws Exception {
  for (  CountDownLatch latch : finishLatches) {
    latch.await();
  }
  sendFinishedMessage(ctx);
}",0.7551622418879056
24208,"@Override public void evaluate() throws Throwable {
  latch.setInterruptOnException(Thread.currentThread());
  FutureTask<ScriptPair> scriptFuture=new FutureTask<>(scriptRunner);
  try {
    new Thread(scriptFuture).start();
    latch.awaitPrepared();
    try {
      statement.evaluate();
    }
 catch (    AssumptionViolatedException e) {
      if (!latch.isFinished()) {
        scriptRunner.abort();
      }
      throw e;
    }
catch (    Throwable cause) {
      if (latch.hasException()) {
        throw cause;
      }
 else {
        if (!latch.isFinished()) {
          scriptRunner.abort();
        }
        try {
          ScriptPair scripts=scriptFuture.get(5,SECONDS);
          try {
            assertEquals(""String_Node_Str"",scripts.getExpectedScript(),scripts.getObservedScript());
            throw cause;
          }
 catch (          ComparisonFailure f) {
            f.initCause(cause);
            throw f;
          }
        }
 catch (        ExecutionException ee) {
          throw ee.getCause().initCause(cause);
        }
catch (        Exception e) {
          throw cause;
        }
      }
    }
    scriptRunner.dispose();
    String k3poSimpleName=K3poRule.class.getSimpleName();
    assertTrue(format(""String_Node_Str"",k3poSimpleName,k3poSimpleName),latch.isStartable());
    ScriptPair scripts=scriptFuture.get();
    assertEquals(""String_Node_Str"",scripts.getExpectedScript(),scripts.getObservedScript());
  }
  finally {
    scriptFuture.cancel(true);
  }
}","@Override public void evaluate() throws Throwable {
  latch.setInterruptOnException(Thread.currentThread());
  FutureTask<ScriptPair> scriptFuture=new FutureTask<>(scriptRunner);
  try {
    new Thread(scriptFuture).start();
    latch.awaitPrepared();
    try {
      statement.evaluate();
    }
 catch (    AssumptionViolatedException e) {
      if (!latch.isFinished()) {
        scriptRunner.abort();
      }
      throw e;
    }
catch (    Throwable cause) {
      if (latch.hasException()) {
        throw cause;
      }
 else {
        if (!latch.isFinished()) {
          scriptRunner.abort();
        }
        try {
          ScriptPair scripts=scriptFuture.get(5,SECONDS);
          try {
            assertEquals(""String_Node_Str"",scripts.getExpectedScript(),scripts.getObservedScript());
            throw cause;
          }
 catch (          ComparisonFailure f) {
            f.initCause(cause);
            throw f;
          }
        }
 catch (        ExecutionException ee) {
          throw ee.getCause().initCause(cause);
        }
catch (        Exception e) {
          throw cause;
        }
      }
    }
    String k3poSimpleName=K3poRule.class.getSimpleName();
    assertTrue(format(""String_Node_Str"",k3poSimpleName,k3poSimpleName),latch.isStartable());
    ScriptPair scripts=scriptFuture.get();
    assertEquals(""String_Node_Str"",scripts.getExpectedScript(),scripts.getObservedScript());
  }
  finally {
    try {
      scriptRunner.dispose();
    }
  finally {
      scriptFuture.cancel(true);
    }
  }
}",0.966996699669967
24209,"@Override protected void closeRequested(ChannelPipeline pipeline,ChannelStateEvent evt) throws Exception {
}","@Override protected void closeRequested(ChannelPipeline pipeline,ChannelStateEvent evt) throws Exception {
  HttpClientChannel httpClientChannel=(HttpClientChannel)pipeline.getChannel();
  ChannelFuture httpFuture=evt.getFuture();
  httpFuture.setSuccess();
switch (httpClientChannel.state()) {
case UPGRADEABLE:
    transport.close();
  break;
default :
ChannelFuture inputShutdown=future(httpClientChannel);
shutdownOutputRequested(httpClientChannel,inputShutdown);
break;
}
boolean wasConnected=httpClientChannel.isConnected();
boolean wasBound=httpClientChannel.isBound();
if (httpClientChannel.setClosed()) {
if (wasConnected) {
fireChannelDisconnected(httpClientChannel);
}
if (wasBound) {
fireChannelUnbound(httpClientChannel);
}
fireChannelClosed(httpClientChannel);
}
}",0.2437923250564334
24210,"@Override protected void closeRequested(ChannelPipeline pipeline,ChannelStateEvent evt) throws Exception {
}","@Override protected void closeRequested(ChannelPipeline pipeline,ChannelStateEvent evt) throws Exception {
  HttpClientChannel httpClientChannel=(HttpClientChannel)pipeline.getChannel();
  ChannelFuture httpFuture=evt.getFuture();
  httpFuture.setSuccess();
switch (httpClientChannel.state()) {
case UPGRADEABLE:
    transport.close();
  break;
default :
ChannelFuture inputShutdown=future(httpClientChannel);
shutdownOutputRequested(httpClientChannel,inputShutdown);
break;
}
boolean wasConnected=httpClientChannel.isConnected();
boolean wasBound=httpClientChannel.isBound();
if (httpClientChannel.setClosed()) {
if (wasConnected) {
fireChannelDisconnected(httpClientChannel);
}
if (wasBound) {
fireChannelUnbound(httpClientChannel);
}
fireChannelClosed(httpClientChannel);
}
}",0.2437923250564334
24211,"@Override protected void closeRequested(ChannelPipeline pipeline,ChannelStateEvent evt) throws Exception {
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  channel.worker.close(channel);
}","@Override protected void closeRequested(ChannelPipeline pipeline,ChannelStateEvent evt) throws Exception {
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture future=evt.getFuture();
  channel.worker.close(channel,future);
}",0.8939051918735892
24212,"@Override protected void shutdownOutputRequested(ChannelPipeline pipeline,ShutdownOutputEvent evt) throws Exception {
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture shutdownOutputFuture=evt.getFuture();
  channel.worker.shutdownOutput(channel,shutdownOutputFuture);
}","@Override protected void shutdownOutputRequested(ChannelPipeline pipeline,ShutdownOutputEvent evt) throws Exception {
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture future=evt.getFuture();
  channel.worker.shutdownOutput(channel,future);
}",0.899641577060932
24213,"@Override protected void writeRequested(ChannelPipeline pipeline,MessageEvent evt) throws Exception {
  ChannelBuffer channelBuffer=(ChannelBuffer)evt.getMessage();
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture writeFuture=evt.getFuture();
  channel.worker.write(channel,channelBuffer,writeFuture);
}","@Override protected void writeRequested(ChannelPipeline pipeline,MessageEvent evt) throws Exception {
  ChannelBuffer channelBuffer=(ChannelBuffer)evt.getMessage();
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture future=evt.getFuture();
  channel.worker.write(channel,channelBuffer,future);
}",0.7546583850931677
24214,"@Override protected void flushRequested(ChannelPipeline pipeline,FlushEvent evt) throws Exception {
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture flushFuture=evt.getFuture();
  channel.worker.flush(channel,flushFuture);
}","@Override protected void flushRequested(ChannelPipeline pipeline,FlushEvent evt) throws Exception {
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture future=evt.getFuture();
  channel.worker.flush(channel,future);
}",0.925925925925926
24215,"@Override protected void closeRequested(ChannelPipeline pipeline,ChannelStateEvent evt) throws Exception {
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  channel.worker.close(channel);
}","@Override protected void closeRequested(ChannelPipeline pipeline,ChannelStateEvent evt) throws Exception {
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture future=evt.getFuture();
  channel.worker.close(channel,future);
}",0.8939051918735892
24216,"@Override protected void connectRequested(ChannelPipeline pipeline,ChannelStateEvent evt) throws Exception {
  AgronaClientChannel channel=(AgronaClientChannel)evt.getChannel();
  AgronaChannelAddress remoteAddress=(AgronaChannelAddress)evt.getValue();
  if (!channel.isBound()) {
    ChannelAddress localAddress=remoteAddress;
    channel.setLocalAddress(localAddress);
    channel.setBound();
    fireChannelBound(channel,localAddress);
  }
  ChannelFuture connectFuture=evt.getFuture();
  channel.boss.connect(channel,remoteAddress,connectFuture);
}","@Override protected void connectRequested(ChannelPipeline pipeline,ChannelStateEvent evt) throws Exception {
  AgronaClientChannel channel=(AgronaClientChannel)evt.getChannel();
  AgronaChannelAddress remoteAddress=(AgronaChannelAddress)evt.getValue();
  if (!channel.isBound()) {
    ChannelAddress localAddress=remoteAddress;
    channel.setLocalAddress(localAddress);
    channel.setBound();
    fireChannelBound(channel,localAddress);
  }
  ChannelFuture future=evt.getFuture();
  channel.boss.connect(channel,remoteAddress,future);
}",0.9614678899082568
24217,"@Override protected void shutdownOutputRequested(ChannelPipeline pipeline,ShutdownOutputEvent evt) throws Exception {
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture shutdownOutputFuture=evt.getFuture();
  channel.worker.shutdownOutput(channel,shutdownOutputFuture);
}","@Override protected void shutdownOutputRequested(ChannelPipeline pipeline,ShutdownOutputEvent evt) throws Exception {
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture future=evt.getFuture();
  channel.worker.shutdownOutput(channel,future);
}",0.899641577060932
24218,"@Override protected void writeRequested(ChannelPipeline pipeline,MessageEvent evt) throws Exception {
  ChannelBuffer channelBuffer=(ChannelBuffer)evt.getMessage();
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture writeFuture=evt.getFuture();
  channel.worker.write(channel,channelBuffer,writeFuture);
}","@Override protected void writeRequested(ChannelPipeline pipeline,MessageEvent evt) throws Exception {
  ChannelBuffer channelBuffer=(ChannelBuffer)evt.getMessage();
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture future=evt.getFuture();
  channel.worker.write(channel,channelBuffer,future);
}",0.7546583850931677
24219,"@Override protected void flushRequested(ChannelPipeline pipeline,FlushEvent evt) throws Exception {
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture flushFuture=evt.getFuture();
  channel.worker.flush(channel,flushFuture);
}","@Override protected void flushRequested(ChannelPipeline pipeline,FlushEvent evt) throws Exception {
  AgronaChannel channel=(AgronaChannel)evt.getChannel();
  ChannelFuture future=evt.getFuture();
  channel.worker.flush(channel,future);
}",0.925925925925926
24220,"@Override public void run(){
  flushWriteBufferIfNecessary(channel);
  if (channel.setClosed()) {
    fireChannelDisconnected(channel);
    fireChannelUnbound(channel);
    fireChannelClosed(channel);
  }
}","@Override public void run(){
  flushWriteBufferIfNecessary(channel);
  future.setSuccess();
  if (channel.setClosed()) {
    fireChannelDisconnected(channel);
    fireChannelUnbound(channel);
    fireChannelClosed(channel);
  }
}",0.896551724137931
24221,"public void shutdownOutput(AgronaChannel channel,ChannelFuture shutdownOutputFuture){
  registerTask(new ShutdownOutputTask(channel,shutdownOutputFuture));
}","public void shutdownOutput(AgronaChannel channel,ChannelFuture future){
  registerTask(new ShutdownOutputTask(channel,future));
}",0.8881118881118881
24222,"public CloseTask(AgronaChannel channel){
  this.channel=channel;
}","public CloseTask(AgronaChannel channel,ChannelFuture future){
  this.channel=channel;
  this.future=future;
}",0.7542857142857143
24223,"public void flush(AgronaChannel channel,ChannelFuture flushFuture){
  registerTask(new FlushTask(channel,flushFuture));
}","public void flush(AgronaChannel channel,ChannelFuture future){
  registerTask(new FlushTask(channel,future));
}",0.956896551724138
24224,"public void write(AgronaChannel channel,ChannelBuffer channelBuffer,ChannelFuture writeFuture){
  registerTask(new WriteTask(channel,channelBuffer,writeFuture));
}","public void write(AgronaChannel channel,ChannelBuffer channelBuffer,ChannelFuture future){
  registerTask(new WriteTask(channel,channelBuffer,future));
}",0.9556962025316456
24225,"public void close(AgronaChannel channel){
  readableChannels.remove(channel);
  registerTask(new CloseTask(channel));
}","public void close(AgronaChannel channel,ChannelFuture future){
  readableChannels.remove(channel);
  registerTask(new CloseTask(channel,future));
}",0.8947368421052632
24226,"public boolean destroy(){
  if (destroyed) {
    return true;
  }
  abort();
  if (createdBootstrapFactory) {
    try {
      bootstrapFactory.shutdown();
      bootstrapFactory.releaseExternalResources();
    }
 catch (    Exception e) {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"",e);
      }
      return false;
    }
  }
  if (this.configuration != null) {
    for (    ServerBootstrap serverBootstrap : this.configuration.getServerBootstraps()) {
      serverBootstrap.shutdown();
      serverBootstrap.releaseExternalResources();
    }
  }
  return destroyed=true;
}","public boolean destroy(){
  if (destroyed) {
    return true;
  }
  abort();
  if (createdBootstrapFactory) {
    try {
      bootstrapFactory.shutdown();
      bootstrapFactory.releaseExternalResources();
    }
 catch (    Exception e) {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"",e);
      }
      return false;
    }
  }
  if (this.configuration != null && !this.preparedFuture.isDone()) {
    for (    ServerBootstrap serverBootstrap : this.configuration.getServerBootstraps()) {
      this.configuration.getServerBootstraps();
      serverBootstrap.shutdown();
      serverBootstrap.releaseExternalResources();
    }
  }
  return destroyed=true;
}",0.9371605896043445
24227,"@Override public void evaluate() throws Throwable {
  ScriptRunner scriptRunner=new ScriptRunner(controlURL,scriptNames,latch);
  FutureTask<ScriptPair> scriptFuture=new FutureTask<ScriptPair>(scriptRunner);
  try {
    new Thread(scriptFuture).start();
    latch.awaitPrepared();
    try {
      statement.evaluate();
    }
 catch (    AssumptionViolatedException e) {
      if (!latch.isFinished()) {
        scriptRunner.abort();
      }
      throw e;
    }
catch (    Throwable cause) {
      if (latch.hasException()) {
        throw cause;
      }
 else {
        if (!latch.isFinished()) {
          scriptRunner.abort();
        }
        try {
          ScriptPair scripts=scriptFuture.get(5,SECONDS);
          try {
            assertEquals(""String_Node_Str"",scripts.getExpectedScript(),scripts.getObservedScript());
            throw cause;
          }
 catch (          ComparisonFailure f) {
            f.initCause(cause);
            throw f;
          }
        }
 catch (        ExecutionException ee) {
          throw ee.getCause().initCause(cause);
        }
catch (        Exception e) {
          throw cause;
        }
      }
    }
    assertTrue(format(""String_Node_Str"",K3poRule.class.getSimpleName()),latch.isStartable());
    ScriptPair scripts=scriptFuture.get();
    assertEquals(""String_Node_Str"",scripts.getExpectedScript(),scripts.getObservedScript());
  }
  finally {
    scriptFuture.cancel(true);
  }
}","@Override public void evaluate() throws Throwable {
  ScriptRunner scriptRunner=new ScriptRunner(controlURL,scriptNames,latch);
  FutureTask<ScriptPair> scriptFuture=new FutureTask<ScriptPair>(scriptRunner);
  try {
    new Thread(scriptFuture).start();
    latch.awaitPrepared();
    try {
      statement.evaluate();
    }
 catch (    AssumptionViolatedException e) {
      if (!latch.isFinished()) {
        scriptRunner.abort();
      }
      throw e;
    }
catch (    Throwable cause) {
      if (latch.hasException()) {
        throw cause;
      }
 else {
        if (!latch.isFinished()) {
          scriptRunner.abort();
        }
        try {
          ScriptPair scripts=scriptFuture.get(5,SECONDS);
          try {
            assertEquals(""String_Node_Str"",scripts.getExpectedScript(),scripts.getObservedScript());
            throw cause;
          }
 catch (          ComparisonFailure f) {
            f.initCause(cause);
            throw f;
          }
        }
 catch (        ExecutionException ee) {
          throw ee.getCause().initCause(cause);
        }
catch (        Exception e) {
          throw cause;
        }
      }
    }
    String k3poSimpleName=K3poRule.class.getSimpleName();
    assertTrue(format(""String_Node_Str"",k3poSimpleName,k3poSimpleName),latch.isStartable());
    ScriptPair scripts=scriptFuture.get();
    assertEquals(""String_Node_Str"",scripts.getExpectedScript(),scripts.getObservedScript());
  }
  finally {
    scriptFuture.cancel(true);
  }
}",0.969016002723868
24228,"private boolean equals(LocationInfo that){
  return this.line == that.line && this.column == that.column;
}","@Override public boolean equals(Object obj){
  return (this == obj) || ((obj instanceof LocationInfo) && equalTo((LocationInfo)obj));
}",0.3636363636363636
24229,"@Override public String toString(){
  return String.format(""String_Node_Str"",line,column);
}","@Override public String toString(){
  return format(""String_Node_Str"",line,column);
}",0.96045197740113
24230,"@Override public CommandEvent readEvent(int timeout,TimeUnit unit) throws Exception {
  checkConnected();
  connection.setReadTimeout((int)unit.toMillis(timeout));
  InputStream bytesIn=connection.getInputStream();
  CharsetDecoder decoder=UTF_8.newDecoder();
  BufferedReader textIn=new BufferedReader(new InputStreamReader(bytesIn,decoder));
  String eventType=textIn.readLine();
switch (eventType.charAt(0)) {
case 'P':
    if (""String_Node_Str"".equals(eventType)) {
      return readPreparedEvent(textIn);
    }
  break;
case 'S':
if (""String_Node_Str"".equals(eventType)) {
  return readStartedEvent(textIn);
}
break;
case 'E':
if (""String_Node_Str"".equals(eventType)) {
return readErrorEvent(textIn);
}
break;
case 'F':
if (""String_Node_Str"".equals(eventType)) {
return readFinishedEvent(textIn);
}
break;
}
throw new IllegalStateException(""String_Node_Str"" + eventType);
}","@Override public CommandEvent readEvent(int timeout,TimeUnit unit) throws Exception {
  checkConnected();
  connection.setReadTimeout((int)unit.toMillis(timeout));
  String eventType=textIn.readLine();
switch (eventType.charAt(0)) {
case 'P':
    if (""String_Node_Str"".equals(eventType)) {
      return readPreparedEvent();
    }
  break;
case 'S':
if (""String_Node_Str"".equals(eventType)) {
  return readStartedEvent();
}
break;
case 'E':
if (""String_Node_Str"".equals(eventType)) {
return readErrorEvent();
}
break;
case 'F':
if (""String_Node_Str"".equals(eventType)) {
return readFinishedEvent();
}
break;
}
throw new IllegalStateException(""String_Node_Str"" + eventType);
}",0.2268041237113402
24231,"private FinishedEvent readFinishedEvent(BufferedReader textIn) throws IOException {
  FinishedEvent finished=new FinishedEvent();
  String line;
  int length=-1;
  do {
    line=textIn.readLine();
    Matcher matcher=HEADER_PATTERN.matcher(line);
    if (matcher.matches()) {
      String headerName=matcher.group(1);
      String headerValue=matcher.group(2);
switch (headerName.charAt(0)) {
case 'c':
        if (""String_Node_Str"".equals(headerName)) {
          length=parseInt(headerValue);
        }
      break;
case 'n':
    if (""String_Node_Str"".equals(headerName)) {
      finished.setName(headerValue);
    }
  break;
default :
throw new IllegalStateException(""String_Node_Str"" + headerName);
}
}
}
 while (!line.isEmpty());
if (length >= 0) {
finished.setExpectedScript(readContent(textIn,length));
}
do {
line=textIn.readLine();
Matcher matcher=HEADER_PATTERN.matcher(line);
if (matcher.matches()) {
String headerName=matcher.group(1);
String headerValue=matcher.group(2);
switch (headerName.charAt(0)) {
case 'c':
if (""String_Node_Str"".equals(headerName)) {
length=parseInt(headerValue);
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + headerName);
}
}
}
 while (!line.isEmpty());
if (length >= 0) {
finished.setObservedScript(readContent(textIn,length));
}
return finished;
}","private FinishedEvent readFinishedEvent() throws IOException {
  FinishedEvent finished=new FinishedEvent();
  String line;
  int length=-1;
  do {
    line=textIn.readLine();
    Matcher matcher=HEADER_PATTERN.matcher(line);
    if (matcher.matches()) {
      String headerName=matcher.group(1);
      String headerValue=matcher.group(2);
switch (headerName.charAt(0)) {
case 'c':
        if (""String_Node_Str"".equals(headerName)) {
          length=parseInt(headerValue);
        }
      break;
case 'n':
    if (""String_Node_Str"".equals(headerName)) {
      finished.setName(headerValue);
    }
  break;
default :
throw new IllegalStateException(""String_Node_Str"" + headerName);
}
}
}
 while (!line.isEmpty());
if (length >= 0) {
finished.setExpectedScript(readContent(length));
}
do {
line=textIn.readLine();
Matcher matcher=HEADER_PATTERN.matcher(line);
if (matcher.matches()) {
String headerName=matcher.group(1);
String headerValue=matcher.group(2);
switch (headerName.charAt(0)) {
case 'c':
if (""String_Node_Str"".equals(headerName)) {
length=parseInt(headerValue);
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + headerName);
}
}
}
 while (!line.isEmpty());
if (length >= 0) {
finished.setObservedScript(readContent(length));
}
return finished;
}",0.9864812668984164
24232,"private PreparedEvent readPreparedEvent(BufferedReader textIn) throws IOException {
  PreparedEvent prepared=new PreparedEvent();
  String line;
  do {
    line=textIn.readLine();
    Matcher matcher=HEADER_PATTERN.matcher(line);
    if (matcher.matches()) {
      String headerName=matcher.group(1);
      String headerValue=matcher.group(2);
switch (headerName.charAt(0)) {
case 'n':
        if (""String_Node_Str"".equals(headerName)) {
          prepared.setName(headerValue);
        }
      break;
default :
    throw new IllegalStateException(""String_Node_Str"" + headerName);
}
}
}
 while (!line.isEmpty());
return prepared;
}","private PreparedEvent readPreparedEvent() throws IOException {
  PreparedEvent prepared=new PreparedEvent();
  String line;
  do {
    line=textIn.readLine();
    Matcher matcher=HEADER_PATTERN.matcher(line);
    if (matcher.matches()) {
      String headerName=matcher.group(1);
      String headerValue=matcher.group(2);
switch (headerName.charAt(0)) {
case 'n':
        if (""String_Node_Str"".equals(headerName)) {
          prepared.setName(headerValue);
        }
      break;
default :
    throw new IllegalStateException(""String_Node_Str"" + headerName);
}
}
}
 while (!line.isEmpty());
return prepared;
}",0.983078162771958
24233,"private StartedEvent readStartedEvent(BufferedReader textIn) throws IOException {
  StartedEvent started=new StartedEvent();
  String line;
  do {
    line=textIn.readLine();
    Matcher matcher=HEADER_PATTERN.matcher(line);
    if (matcher.matches()) {
      String headerName=matcher.group(1);
      String headerValue=matcher.group(2);
switch (headerName.charAt(0)) {
case 'n':
        if (""String_Node_Str"".equals(headerName)) {
          started.setName(headerValue);
        }
      break;
default :
    throw new IllegalStateException(""String_Node_Str"" + headerName);
}
}
}
 while (!line.isEmpty());
return started;
}","private StartedEvent readStartedEvent() throws IOException {
  StartedEvent started=new StartedEvent();
  String line;
  do {
    line=textIn.readLine();
    Matcher matcher=HEADER_PATTERN.matcher(line);
    if (matcher.matches()) {
      String headerName=matcher.group(1);
      String headerValue=matcher.group(2);
switch (headerName.charAt(0)) {
case 'n':
        if (""String_Node_Str"".equals(headerName)) {
          started.setName(headerValue);
        }
      break;
default :
    throw new IllegalStateException(""String_Node_Str"" + headerName);
}
}
}
 while (!line.isEmpty());
return started;
}",0.982885085574572
24234,"private String readContent(final BufferedReader textIn,final int length) throws IOException {
  final char[] content=new char[length];
  int bytesRead=0;
  do {
    int result=textIn.read(content,bytesRead,length - bytesRead);
    if (result == -1) {
      throw new EOFException(""String_Node_Str"");
    }
    bytesRead+=result;
  }
 while (bytesRead != length);
  return new String(content);
}","private String readContent(final int length) throws IOException {
  final char[] content=new char[length];
  int bytesRead=0;
  do {
    int result=textIn.read(content,bytesRead,length - bytesRead);
    if (result == -1) {
      throw new EOFException(""String_Node_Str"");
    }
    bytesRead+=result;
  }
 while (bytesRead != length);
  return new String(content);
}",0.963157894736842
24235,"public TcpRobotControl(URL location){
  this.location=location;
}","public TcpRobotControl(URL location) throws Exception {
  this.location=location;
}",0.8783783783783784
24236,"private ErrorEvent readErrorEvent(BufferedReader textIn) throws IOException {
  ErrorEvent error=new ErrorEvent();
  String line;
  int length=0;
  do {
    line=textIn.readLine();
    Matcher matcher=HEADER_PATTERN.matcher(line);
    if (matcher.matches()) {
      String headerName=matcher.group(1);
      String headerValue=matcher.group(2);
switch (headerName.charAt(0)) {
case 'c':
        if (""String_Node_Str"".equals(headerName)) {
          length=parseInt(headerValue);
        }
      break;
case 'n':
    if (""String_Node_Str"".equals(headerName)) {
      error.setName(headerValue);
    }
  break;
case 's':
if (""String_Node_Str"".equals(headerName)) {
  error.setSummary(headerValue);
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + headerName);
}
}
}
 while (!line.isEmpty());
if (length > 0) {
error.setDescription(readContent(textIn,length));
}
return error;
}","private ErrorEvent readErrorEvent() throws IOException {
  ErrorEvent error=new ErrorEvent();
  String line;
  int length=0;
  do {
    line=textIn.readLine();
    Matcher matcher=HEADER_PATTERN.matcher(line);
    if (matcher.matches()) {
      String headerName=matcher.group(1);
      String headerValue=matcher.group(2);
switch (headerName.charAt(0)) {
case 'c':
        if (""String_Node_Str"".equals(headerName)) {
          length=parseInt(headerValue);
        }
      break;
case 'n':
    if (""String_Node_Str"".equals(headerName)) {
      error.setName(headerValue);
    }
  break;
case 's':
if (""String_Node_Str"".equals(headerName)) {
  error.setSummary(headerValue);
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + headerName);
}
}
}
 while (!line.isEmpty());
if (length > 0) {
error.setDescription(readContent(length));
}
return error;
}",0.984144960362401
24237,"@Override public void connect() throws Exception {
  connection=location.openConnection();
  connection.connect();
}","@Override public void connect() throws Exception {
  connection=location.openConnection();
  connection.connect();
  InputStream bytesIn=connection.getInputStream();
  CharsetDecoder decoder=UTF_8.newDecoder();
  textIn=new BufferedReader(new InputStreamReader(bytesIn,decoder));
}",0.5843828715365239
24238,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  if (e.getMessage() instanceof HttpRequest) {
    HttpRequest request=(HttpRequest)e.getMessage();
    String URI=request.getUri();
    if (URI == null || URI.length() < 2 || URI.charAt(0) != '/') {
      sendInvalidRequestResponse(ctx,e,copiedBuffer(format(""String_Node_Str"",URI),UTF_8));
      return;
    }
    HttpMethod method=request.getMethod();
    if (method != HttpMethod.POST) {
      sendInvalidRequestResponse(ctx,e,copiedBuffer(format(""String_Node_Str"",method.toString()),UTF_8));
      return;
    }
    String messageType=URI.substring(1).toUpperCase();
    ControlMessage msg=null;
    char type=messageType.charAt(0);
switch (type) {
case 'P':
      if (messageType.equals(""String_Node_Str"")) {
        msg=new PrepareMessage();
      }
    break;
case 'S':
  if (messageType.equals(""String_Node_Str"")) {
    msg=new StartMessage();
  }
break;
case 'A':
if (messageType.equals(""String_Node_Str"")) {
msg=new AbortMessage();
}
break;
case 'R':
if (messageType.equals(""String_Node_Str"")) {
msg=new ResultRequestMessage();
}
break;
default :
sendInvalidRequestResponse(ctx,e,copiedBuffer(format(""String_Node_Str"",URI),UTF_8));
return;
}
String content=new String(request.getContent().array(),""String_Node_Str"");
int startIndex=content.indexOf(""String_Node_Str"");
int beginIndex=startIndex + ""String_Node_Str"".length();
int endIndex=content.lastIndexOf(""String_Node_Str"");
if (startIndex == -1 || endIndex == -1 || beginIndex == endIndex) {
sendInvalidRequestResponse(ctx,e,copiedBuffer(format(""String_Node_Str"",content),UTF_8));
return;
}
String name=content.substring(beginIndex,endIndex);
msg.setName(name);
if (msg instanceof PrepareMessage) {
synchronized (this) {
if (currentState != State.INITIAL && currentState != State.FINISHED && currentState != State.ERROR) {
sendBadRequestMessage(ctx,e,""String_Node_Str"",msg.getName());
}
 else {
ClearCacheMessage clearCachedEntry=new ClearCacheMessage();
clearCachedEntry.setName(msg.getName());
ctx.sendDownstream(new DownstreamMessageEvent(e.getChannel(),e.getFuture(),clearCachedEntry,e.getRemoteAddress()));
ctx.sendUpstream(new UpstreamMessageEvent(e.getChannel(),msg,e.getRemoteAddress()));
}
}
}
 else if (msg instanceof StartMessage) {
synchronized (this) {
if (currentState != State.PREPARED) {
sendBadRequestMessage(ctx,e,""String_Node_Str"",msg.getName());
}
 else {
ctx.sendUpstream(new UpstreamMessageEvent(e.getChannel(),msg,e.getRemoteAddress()));
}
}
}
 else if (msg instanceof ResultRequestMessage) {
synchronized (this) {
if (currentState != State.FINISHED && currentState != State.ERROR && currentState != State.STARTED) {
sendBadRequestMessage(ctx,e,""String_Node_Str"",msg.getName());
}
 else {
ctx.sendDownstream(new DownstreamMessageEvent(e.getChannel(),e.getFuture(),msg,e.getRemoteAddress()));
}
}
}
 else if (msg instanceof AbortMessage) {
synchronized (this) {
switch (currentState) {
case INITIAL:
case ERROR:
case ABORTED:
sendBadRequestMessage(ctx,e,""String_Node_Str"",msg.getName());
break;
case FINISHED:
case PREPARED:
case STARTED:
default :
currentState=State.ABORTED;
ctx.sendUpstream(new UpstreamMessageEvent(e.getChannel(),msg,e.getRemoteAddress()));
break;
}
}
}
 else {
ctx.sendUpstream(new UpstreamMessageEvent(e.getChannel(),msg,e.getRemoteAddress()));
}
}
 else {
ctx.sendUpstream(e);
}
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  if (e.getMessage() instanceof HttpRequest) {
    HttpRequest request=(HttpRequest)e.getMessage();
    String content=new String(request.getContent().array(),""String_Node_Str"");
    String name=getName(content);
    String URI=request.getUri();
    if (URI == null || URI.length() < 2 || URI.charAt(0) != '/') {
      sendBadRequestMessage(ctx,e,format(""String_Node_Str"",URI),name);
      return;
    }
    HttpMethod method=request.getMethod();
    if (method != HttpMethod.POST) {
      sendBadRequestMessage(ctx,e,format(""String_Node_Str"",method.toString()),name);
      return;
    }
    String messageType=URI.substring(1).toUpperCase();
    ControlMessage msg=null;
    char type=messageType.charAt(0);
switch (type) {
case 'P':
      if (messageType.equals(""String_Node_Str"")) {
        msg=new PrepareMessage();
      }
    break;
case 'S':
  if (messageType.equals(""String_Node_Str"")) {
    msg=new StartMessage();
  }
break;
case 'A':
if (messageType.equals(""String_Node_Str"")) {
msg=new AbortMessage();
}
break;
case 'R':
if (messageType.equals(""String_Node_Str"")) {
msg=new ResultRequestMessage();
}
break;
default :
break;
}
if (msg == null) {
sendBadRequestMessage(ctx,e,format(""String_Node_Str"",URI),getName(content));
return;
}
if (name.equals(""String_Node_Str"")) {
sendBadRequestMessage(ctx,e,format(""String_Node_Str"",content),name);
return;
}
msg.setName(name);
if (msg instanceof PrepareMessage) {
synchronized (this) {
if (currentState != State.INITIAL && currentState != State.FINISHED && currentState != State.ERROR) {
sendBadRequestMessage(ctx,e,""String_Node_Str"",msg.getName());
}
 else {
ClearCacheMessage clearCachedEntry=new ClearCacheMessage();
clearCachedEntry.setName(msg.getName());
ctx.sendDownstream(new DownstreamMessageEvent(e.getChannel(),e.getFuture(),clearCachedEntry,e.getRemoteAddress()));
ctx.sendUpstream(new UpstreamMessageEvent(e.getChannel(),msg,e.getRemoteAddress()));
}
}
}
 else if (msg instanceof StartMessage) {
synchronized (this) {
if (currentState != State.PREPARED) {
sendBadRequestMessage(ctx,e,""String_Node_Str"",msg.getName());
}
 else {
ctx.sendUpstream(new UpstreamMessageEvent(e.getChannel(),msg,e.getRemoteAddress()));
}
}
}
 else if (msg instanceof ResultRequestMessage) {
synchronized (this) {
if (currentState != State.FINISHED && currentState != State.ERROR && currentState != State.STARTED) {
sendBadRequestMessage(ctx,e,""String_Node_Str"",msg.getName());
}
 else {
ctx.sendDownstream(new DownstreamMessageEvent(e.getChannel(),e.getFuture(),msg,e.getRemoteAddress()));
}
}
}
 else if (msg instanceof AbortMessage) {
synchronized (this) {
switch (currentState) {
case INITIAL:
case ERROR:
case ABORTED:
sendBadRequestMessage(ctx,e,""String_Node_Str"",msg.getName());
break;
case FINISHED:
case PREPARED:
case STARTED:
default :
currentState=State.ABORTED;
ctx.sendUpstream(new UpstreamMessageEvent(e.getChannel(),msg,e.getRemoteAddress()));
break;
}
}
}
 else {
ctx.sendUpstream(new UpstreamMessageEvent(e.getChannel(),msg,e.getRemoteAddress()));
}
}
 else {
ctx.sendUpstream(e);
}
}",0.8845682792406614
24239,"@Test public void testAbortAfterFinished() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(prepare);
  outputStream.flush();
  String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
  ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
  while (prepared.hasRemaining()) {
    prepared.put((byte)inputStream.read());
  }
  prepared.flip();
  assertEquals(preparedExpected,prepared);
  byte[] start=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(start);
  outputStream.flush();
  String startedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer startedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + startedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ startedContent).getBytes(""String_Node_Str""));
  ByteBuffer started=ByteBuffer.allocate(startedExpected.capacity());
  while (started.hasRemaining()) {
    started.put((byte)inputStream.read());
  }
  started.flip();
  assertEquals(startedExpected,started);
  byte[] resultRequest=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(resultRequest);
  outputStream.flush();
  String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
  String errorContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer errorExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + errorContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ errorContent).getBytes(""String_Node_Str""));
  ByteBuffer finished=ByteBuffer.allocate(errorExpected.capacity());
  while (finished.hasRemaining()) {
    finished.put((byte)inputStream.read());
    if (!finished.hasRemaining() && finished.capacity() == errorExpected.capacity()) {
      if (inputStream.available() > 0) {
        ByteBuffer temp=ByteBuffer.allocate(finishedExpected.capacity());
        finished.flip();
        temp.put(finished);
        finished=temp;
      }
 else {
        finished.flip();
        assertEquals(errorExpected,finished);
        Thread.sleep(200);
        finished=ByteBuffer.allocate(errorExpected.capacity());
        outputStream.write(resultRequest);
        outputStream.flush();
      }
    }
  }
  finished.flip();
  assertEquals(finishedExpected,finished);
  byte[] abort=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(abort);
  outputStream.flush();
  ByteBuffer finishedRecv=ByteBuffer.allocate(finishedExpected.capacity());
  while (finishedRecv.hasRemaining()) {
    finishedRecv.put((byte)inputStream.read());
  }
  finishedRecv.flip();
  client.close();
  assertEquals(finishedExpected,finishedRecv);
}","@Test(timeout=TEST_TIMEOUT) public void testAbortAfterFinished() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(prepare);
  outputStream.flush();
  String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
  ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
  while (prepared.hasRemaining()) {
    prepared.put((byte)inputStream.read());
  }
  prepared.flip();
  assertEquals(preparedExpected,prepared);
  byte[] start=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(start);
  outputStream.flush();
  String startedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer startedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + startedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ startedContent).getBytes(""String_Node_Str""));
  ByteBuffer started=ByteBuffer.allocate(startedExpected.capacity());
  while (started.hasRemaining()) {
    started.put((byte)inputStream.read());
  }
  started.flip();
  assertEquals(startedExpected,started);
  byte[] resultRequest=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(resultRequest);
  outputStream.flush();
  String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
  String errorContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer errorExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + errorContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ errorContent).getBytes(""String_Node_Str""));
  ByteBuffer finished=ByteBuffer.allocate(errorExpected.capacity());
  while (finished.hasRemaining()) {
    finished.put((byte)inputStream.read());
    if (!finished.hasRemaining() && finished.capacity() == errorExpected.capacity()) {
      if (inputStream.available() > 0) {
        ByteBuffer temp=ByteBuffer.allocate(finishedExpected.capacity());
        finished.flip();
        temp.put(finished);
        finished=temp;
      }
 else {
        finished.flip();
        assertEquals(errorExpected,finished);
        Thread.sleep(200);
        finished=ByteBuffer.allocate(errorExpected.capacity());
        outputStream.write(resultRequest);
        outputStream.flush();
      }
    }
  }
  finished.flip();
  assertEquals(finishedExpected,finished);
  byte[] abort=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(abort);
  outputStream.flush();
  ByteBuffer finishedRecv=ByteBuffer.allocate(finishedExpected.capacity());
  while (finishedRecv.hasRemaining()) {
    finishedRecv.put((byte)inputStream.read());
  }
  finishedRecv.flip();
  client.close();
  assertEquals(finishedExpected,finishedRecv);
}",0.9843146169583996
24240,"@Test public void testFullSession() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(prepare);
  outputStream.flush();
  String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
  ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
  while (prepared.hasRemaining()) {
    prepared.put((byte)inputStream.read());
  }
  prepared.flip();
  assertEquals(preparedExpected,prepared);
  byte[] start=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(start);
  outputStream.flush();
  String startedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer startedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + startedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ startedContent).getBytes(""String_Node_Str""));
  ByteBuffer started=ByteBuffer.allocate(startedExpected.capacity());
  while (started.hasRemaining()) {
    started.put((byte)inputStream.read());
  }
  started.flip();
  assertEquals(startedExpected,started);
  byte[] resultRequest=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(resultRequest);
  outputStream.flush();
  String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
  String errorContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer errorExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + errorContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ errorContent).getBytes(""String_Node_Str""));
  ByteBuffer finished=ByteBuffer.allocate(errorExpected.capacity());
  while (finished.hasRemaining()) {
    finished.put((byte)inputStream.read());
    if (!finished.hasRemaining() && finished.capacity() == errorExpected.capacity()) {
      if (inputStream.available() > 0) {
        ByteBuffer temp=ByteBuffer.allocate(finishedExpected.capacity());
        finished.flip();
        temp.put(finished);
        finished=temp;
      }
 else {
        finished.flip();
        assertEquals(errorExpected,finished);
        Thread.sleep(200);
        finished=ByteBuffer.allocate(errorExpected.capacity());
        outputStream.write(resultRequest);
        outputStream.flush();
      }
    }
  }
  finished.flip();
  client.close();
  assertEquals(finishedExpected,finished);
}","@Test(timeout=TEST_TIMEOUT) public void testFullSession() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(prepare);
  outputStream.flush();
  String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
  ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
  while (prepared.hasRemaining()) {
    prepared.put((byte)inputStream.read());
  }
  prepared.flip();
  assertEquals(preparedExpected,prepared);
  byte[] start=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(start);
  outputStream.flush();
  String startedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer startedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + startedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ startedContent).getBytes(""String_Node_Str""));
  ByteBuffer started=ByteBuffer.allocate(startedExpected.capacity());
  while (started.hasRemaining()) {
    started.put((byte)inputStream.read());
  }
  started.flip();
  assertEquals(startedExpected,started);
  byte[] resultRequest=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(resultRequest);
  outputStream.flush();
  String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
  String errorContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer errorExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + errorContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ errorContent).getBytes(""String_Node_Str""));
  ByteBuffer finished=ByteBuffer.allocate(errorExpected.capacity());
  while (finished.hasRemaining()) {
    finished.put((byte)inputStream.read());
    if (!finished.hasRemaining() && finished.capacity() == errorExpected.capacity()) {
      if (inputStream.available() > 0) {
        ByteBuffer temp=ByteBuffer.allocate(finishedExpected.capacity());
        finished.flip();
        temp.put(finished);
        finished=temp;
      }
 else {
        finished.flip();
        assertEquals(errorExpected,finished);
        Thread.sleep(200);
        finished=ByteBuffer.allocate(errorExpected.capacity());
        outputStream.write(resultRequest);
        outputStream.flush();
      }
    }
  }
  finished.flip();
  client.close();
  assertEquals(finishedExpected,finished);
}",0.985926404131698
24241,"@Test public void testPreparedThenAbort() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(prepare);
  outputStream.flush();
  String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
  ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
  while (prepared.hasRemaining()) {
    prepared.put((byte)inputStream.read());
  }
  prepared.flip();
  assertEquals(preparedExpected,prepared);
  byte[] abort=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(abort);
  outputStream.flush();
  String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
  ByteBuffer finished=ByteBuffer.allocate(finishedExpected.capacity());
  while (finished.hasRemaining()) {
    finished.put((byte)inputStream.read());
  }
  finished.flip();
  client.close();
  assertEquals(finishedExpected,finished);
}","@Test(timeout=TEST_TIMEOUT) public void testPreparedThenAbort() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(prepare);
  outputStream.flush();
  String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
  ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
  while (prepared.hasRemaining()) {
    prepared.put((byte)inputStream.read());
  }
  prepared.flip();
  assertEquals(preparedExpected,prepared);
  byte[] abort=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(abort);
  outputStream.flush();
  String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
  ByteBuffer finished=ByteBuffer.allocate(finishedExpected.capacity());
  while (finished.hasRemaining()) {
    finished.put((byte)inputStream.read());
  }
  finished.flip();
  client.close();
  assertEquals(finishedExpected,finished);
}",0.981211836542978
24242,"@Test public void testInvalidScriptLocation() throws Exception {
  String script=loadScript(""String_Node_Str"");
  robot.prepareAndStart(script).await();
  RobotCompletionFuture doneFuture=robot.getScriptCompleteFuture();
  doneFuture.await();
}","@Test(timeout=TEST_TIMEOUT) public void testInvalidScriptLocation() throws Exception {
  String script=loadScript(""String_Node_Str"");
  robot.prepareAndStart(script).await();
  RobotCompletionFuture doneFuture=robot.getScriptCompleteFuture();
  doneFuture.await();
}",0.9568627450980391
24243,"@Test public void testWaitThenAbortAfterFinished() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(prepare);
  outputStream.flush();
  String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
  ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
  while (prepared.hasRemaining()) {
    prepared.put((byte)inputStream.read());
  }
  prepared.flip();
  assertEquals(preparedExpected,prepared);
  byte[] start=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(start);
  outputStream.flush();
  String startedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer startedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + startedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ startedContent).getBytes(""String_Node_Str""));
  ByteBuffer started=ByteBuffer.allocate(startedExpected.capacity());
  while (started.hasRemaining()) {
    started.put((byte)inputStream.read());
  }
  started.flip();
  assertEquals(startedExpected,started);
  byte[] resultRequest=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(resultRequest);
  outputStream.flush();
  String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
  String errorContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer errorExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + errorContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ errorContent).getBytes(""String_Node_Str""));
  ByteBuffer finished=ByteBuffer.allocate(errorExpected.capacity());
  while (finished.hasRemaining()) {
    finished.put((byte)inputStream.read());
    if (!finished.hasRemaining() && finished.capacity() == errorExpected.capacity()) {
      if (inputStream.available() > 0) {
        ByteBuffer temp=ByteBuffer.allocate(finishedExpected.capacity());
        finished.flip();
        temp.put(finished);
        finished=temp;
      }
 else {
        finished.flip();
        assertEquals(errorExpected,finished);
        Thread.sleep(200);
        finished=ByteBuffer.allocate(errorExpected.capacity());
        outputStream.write(resultRequest);
        outputStream.flush();
      }
    }
  }
  finished.flip();
  assertEquals(finishedExpected,finished);
  Thread.sleep(1000);
  byte[] abort=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(abort);
  outputStream.flush();
  String badRequestContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer badRequestExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + badRequestContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ badRequestContent).getBytes(""String_Node_Str""));
  ByteBuffer badRequest=ByteBuffer.allocate(badRequestExpected.capacity());
  while (badRequest.hasRemaining()) {
    badRequest.put((byte)inputStream.read());
  }
  badRequest.flip();
  client.close();
  assertEquals(badRequestExpected,badRequest);
}","@Test(timeout=TEST_TIMEOUT) public void testWaitThenAbortAfterFinished() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(prepare);
  outputStream.flush();
  String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
  ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
  while (prepared.hasRemaining()) {
    prepared.put((byte)inputStream.read());
  }
  prepared.flip();
  assertEquals(preparedExpected,prepared);
  byte[] start=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(start);
  outputStream.flush();
  String startedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer startedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + startedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ startedContent).getBytes(""String_Node_Str""));
  ByteBuffer started=ByteBuffer.allocate(startedExpected.capacity());
  while (started.hasRemaining()) {
    started.put((byte)inputStream.read());
  }
  started.flip();
  assertEquals(startedExpected,started);
  byte[] resultRequest=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(resultRequest);
  outputStream.flush();
  String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
  String errorContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer errorExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + errorContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ errorContent).getBytes(""String_Node_Str""));
  ByteBuffer finished=ByteBuffer.allocate(errorExpected.capacity());
  while (finished.hasRemaining()) {
    finished.put((byte)inputStream.read());
    if (!finished.hasRemaining() && finished.capacity() == errorExpected.capacity()) {
      if (inputStream.available() > 0) {
        ByteBuffer temp=ByteBuffer.allocate(finishedExpected.capacity());
        finished.flip();
        temp.put(finished);
        finished=temp;
      }
 else {
        finished.flip();
        assertEquals(errorExpected,finished);
        Thread.sleep(200);
        finished=ByteBuffer.allocate(errorExpected.capacity());
        outputStream.write(resultRequest);
        outputStream.flush();
      }
    }
  }
  finished.flip();
  assertEquals(finishedExpected,finished);
  Thread.sleep(1000);
  byte[] abort=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(abort);
  outputStream.flush();
  String badRequestContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer badRequestExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + badRequestContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ badRequestContent).getBytes(""String_Node_Str""));
  ByteBuffer badRequest=ByteBuffer.allocate(badRequestExpected.capacity());
  while (badRequest.hasRemaining()) {
    badRequest.put((byte)inputStream.read());
  }
  badRequest.flip();
  client.close();
  assertEquals(badRequestExpected,badRequest);
}",0.9856220045842884
24244,"@Test public void testAbortBeforePrepare() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] abort=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(abort);
  outputStream.flush();
  String badRequestContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer badRequestExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + badRequestContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ badRequestContent).getBytes(""String_Node_Str""));
  ByteBuffer badRequest=ByteBuffer.allocate(badRequestExpected.capacity());
  while (badRequest.hasRemaining()) {
    badRequest.put((byte)inputStream.read());
  }
  badRequest.flip();
  client.close();
  assertEquals(badRequestExpected,badRequest);
}","@Test(timeout=TEST_TIMEOUT) public void testAbortBeforePrepare() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] abort=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(abort);
  outputStream.flush();
  String badRequestContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer badRequestExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + badRequestContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ badRequestContent).getBytes(""String_Node_Str""));
  ByteBuffer badRequest=ByteBuffer.allocate(badRequestExpected.capacity());
  while (badRequest.hasRemaining()) {
    badRequest.put((byte)inputStream.read());
  }
  badRequest.flip();
  client.close();
  assertEquals(badRequestExpected,badRequest);
}",0.980963045912654
24245,"@Test public void testMultipleRuns() throws Exception {
  for (int i=0; i < 3; i++) {
    String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
    Socket client=new Socket();
    client.connect(new InetSocketAddress(""String_Node_Str"",61234));
    OutputStream outputStream=client.getOutputStream();
    InputStream inputStream=client.getInputStream();
    byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
    outputStream.write(prepare);
    outputStream.flush();
    String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
    ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
    ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
    while (prepared.hasRemaining()) {
      prepared.put((byte)inputStream.read());
    }
    prepared.flip();
    assertEquals(preparedExpected,prepared);
    byte[] start=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
    outputStream.write(start);
    outputStream.flush();
    String startedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str"";
    ByteBuffer startedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + startedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ startedContent).getBytes(""String_Node_Str""));
    ByteBuffer started=ByteBuffer.allocate(startedExpected.capacity());
    while (started.hasRemaining()) {
      started.put((byte)inputStream.read());
    }
    started.flip();
    assertEquals(startedExpected,started);
    byte[] resultRequest=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
    outputStream.write(resultRequest);
    outputStream.flush();
    String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
    String errorContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    ByteBuffer errorExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + errorContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ errorContent).getBytes(""String_Node_Str""));
    ByteBuffer finished=ByteBuffer.allocate(errorExpected.capacity());
    while (finished.hasRemaining()) {
      finished.put((byte)inputStream.read());
      if (!finished.hasRemaining() && finished.capacity() == errorExpected.capacity()) {
        if (inputStream.available() > 0) {
          ByteBuffer temp=ByteBuffer.allocate(finishedExpected.capacity());
          finished.flip();
          temp.put(finished);
          finished=temp;
        }
 else {
          finished.flip();
          assertEquals(errorExpected,finished);
          Thread.sleep(200);
          finished=ByteBuffer.allocate(errorExpected.capacity());
          outputStream.write(resultRequest);
          outputStream.flush();
        }
      }
    }
    finished.flip();
    client.close();
    assertEquals(finishedExpected,finished);
  }
}","@Test(timeout=TEST_TIMEOUT) public void testMultipleRuns() throws Exception {
  for (int i=0; i < 3; i++) {
    String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
    Socket client=new Socket();
    client.connect(new InetSocketAddress(""String_Node_Str"",61234));
    OutputStream outputStream=client.getOutputStream();
    InputStream inputStream=client.getInputStream();
    byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
    outputStream.write(prepare);
    outputStream.flush();
    String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
    ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
    ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
    while (prepared.hasRemaining()) {
      prepared.put((byte)inputStream.read());
    }
    prepared.flip();
    assertEquals(preparedExpected,prepared);
    byte[] start=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
    outputStream.write(start);
    outputStream.flush();
    String startedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str"";
    ByteBuffer startedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + startedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ startedContent).getBytes(""String_Node_Str""));
    ByteBuffer started=ByteBuffer.allocate(startedExpected.capacity());
    while (started.hasRemaining()) {
      started.put((byte)inputStream.read());
    }
    started.flip();
    assertEquals(startedExpected,started);
    byte[] resultRequest=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
    outputStream.write(resultRequest);
    outputStream.flush();
    String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
    String errorContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    ByteBuffer errorExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + errorContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ errorContent).getBytes(""String_Node_Str""));
    ByteBuffer finished=ByteBuffer.allocate(errorExpected.capacity());
    while (finished.hasRemaining()) {
      finished.put((byte)inputStream.read());
      if (!finished.hasRemaining() && finished.capacity() == errorExpected.capacity()) {
        if (inputStream.available() > 0) {
          ByteBuffer temp=ByteBuffer.allocate(finishedExpected.capacity());
          finished.flip();
          temp.put(finished);
          finished=temp;
        }
 else {
          finished.flip();
          assertEquals(errorExpected,finished);
          Thread.sleep(200);
          finished=ByteBuffer.allocate(errorExpected.capacity());
          outputStream.write(resultRequest);
          outputStream.flush();
        }
      }
    }
    finished.flip();
    client.close();
    assertEquals(finishedExpected,finished);
  }
}",0.9864410996392586
24246,"@Test public void testStartedThenAbort() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(prepare);
  outputStream.flush();
  String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
  ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
  while (prepared.hasRemaining()) {
    prepared.put((byte)inputStream.read());
  }
  prepared.flip();
  assertEquals(preparedExpected,prepared);
  byte[] start=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(start);
  outputStream.flush();
  String startedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer startedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + startedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ startedContent).getBytes(""String_Node_Str""));
  ByteBuffer started=ByteBuffer.allocate(startedExpected.capacity());
  while (started.hasRemaining()) {
    started.put((byte)inputStream.read());
  }
  started.flip();
  assertEquals(startedExpected,started);
  byte[] abort=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(abort);
  outputStream.flush();
  String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
  ByteBuffer finished=ByteBuffer.allocate(finishedExpected.capacity());
  while (finished.hasRemaining()) {
    finished.put((byte)inputStream.read());
  }
  finished.flip();
  client.close();
  assertEquals(finishedExpected,finished);
}","@Test(timeout=TEST_TIMEOUT) public void testStartedThenAbort() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(prepare);
  outputStream.flush();
  String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
  ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
  while (prepared.hasRemaining()) {
    prepared.put((byte)inputStream.read());
  }
  prepared.flip();
  assertEquals(preparedExpected,prepared);
  byte[] start=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(start);
  outputStream.flush();
  String startedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer startedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + startedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ startedContent).getBytes(""String_Node_Str""));
  ByteBuffer started=ByteBuffer.allocate(startedExpected.capacity());
  while (started.hasRemaining()) {
    started.put((byte)inputStream.read());
  }
  started.flip();
  assertEquals(startedExpected,started);
  byte[] abort=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(abort);
  outputStream.flush();
  String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
  ByteBuffer finished=ByteBuffer.allocate(finishedExpected.capacity());
  while (finished.hasRemaining()) {
    finished.put((byte)inputStream.read());
  }
  finished.flip();
  client.close();
  assertEquals(finishedExpected,finished);
}",0.9815034787035466
24247,"@Override public void startReceived(final ChannelHandlerContext ctx,MessageEvent evt) throws Exception {
  final boolean infoDebugEnabled=logger.isDebugEnabled();
  final StartMessage start=(StartMessage)evt.getMessage();
  final String name=start.getName();
  if (infoDebugEnabled) {
    logger.debug(""String_Node_Str"" + name);
  }
  try {
    ChannelFuture startFuture=robot.start();
    startFuture.addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      final ChannelFuture f){
        final StartedMessage started=new StartedMessage();
        started.setName(name);
        Channels.write(ctx,Channels.future(null),started);
      }
    }
);
  }
 catch (  Exception e) {
    sendErrorMessage(ctx,e,name);
    return;
  }
  scriptDoneFuture=robot.getScriptCompleteFuture();
  scriptDoneFuture.addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    final ChannelFuture f){
      String expectedScript=scriptDoneFuture.getExpectedScript();
      String observedScript=scriptDoneFuture.getObservedScript();
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name + ""String_Node_Str"");
      }
      FinishedMessage finished=new FinishedMessage();
      finished.setName(name);
      finished.setExpectedScript(expectedScript);
      finished.setObservedScript(observedScript);
      Channels.write(ctx,Channels.future(null),finished);
    }
  }
);
}","@Override public void startReceived(final ChannelHandlerContext ctx,MessageEvent evt) throws Exception {
  final boolean infoDebugEnabled=logger.isDebugEnabled();
  final StartMessage start=(StartMessage)evt.getMessage();
  final String name=start.getName();
  if (infoDebugEnabled) {
    logger.debug(""String_Node_Str"" + name);
  }
  try {
    ChannelFuture startFuture=robot.start();
    startFuture.addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      final ChannelFuture f){
        final StartedMessage started=new StartedMessage();
        started.setName(name);
        Channels.write(ctx,Channels.future(null),started);
      }
    }
);
  }
 catch (  Exception e) {
    sendErrorMessage(ctx,e,name);
    return;
  }
  scriptDoneFuture=robot.getScriptCompleteFuture();
  scriptDoneFuture.addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    final ChannelFuture f){
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name + ""String_Node_Str"");
      }
      sendFinishedMessage(ctx,name,scriptDoneFuture);
    }
  }
);
}",0.8572536850271528
24248,"@Override public void abortReceived(ChannelHandlerContext ctx,MessageEvent evt) throws Exception {
  AbortMessage abort=(AbortMessage)evt.getMessage();
  if (logger.isInfoEnabled()) {
    logger.debug(""String_Node_Str"" + abort.getName());
  }
  robot.abort();
  if (robot != null && robot.getScriptCompleteFuture().isDone()) {
    FinishedMessage finished=new FinishedMessage();
    finished.setName(abort.getName());
    finished.setExpectedScript(robot.getScriptCompleteFuture().getExpectedScript());
    finished.setObservedScript(robot.getScriptCompleteFuture().getObservedScript());
    Channels.write(ctx,Channels.future(null),finished);
  }
}","@Override public void abortReceived(ChannelHandlerContext ctx,MessageEvent evt) throws Exception {
  AbortMessage abort=(AbortMessage)evt.getMessage();
  if (logger.isInfoEnabled()) {
    logger.debug(""String_Node_Str"" + abort.getName());
  }
  robot.abort();
  if (ctx.getPipeline().get(""String_Node_Str"") != null && robot != null && robot.getScriptCompleteFuture().isDone()) {
    sendFinishedMessage(ctx,abort.getName(),robot.getScriptCompleteFuture());
  }
 else   if (robot != null && !robot.getStartedFuture().isDone()) {
    sendFinishedMessage(ctx,abort.getName(),robot.getScriptCompleteFuture());
  }
}",0.5666666666666667
24249,"@Override public void operationComplete(final ChannelFuture f){
  String expectedScript=scriptDoneFuture.getExpectedScript();
  String observedScript=scriptDoneFuture.getObservedScript();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  FinishedMessage finished=new FinishedMessage();
  finished.setName(name);
  finished.setExpectedScript(expectedScript);
  finished.setObservedScript(observedScript);
  Channels.write(ctx,Channels.future(null),finished);
}","@Override public void operationComplete(final ChannelFuture f){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sendFinishedMessage(ctx,name,scriptDoneFuture);
}",0.2527472527472527
24250,"@Override protected Object encode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  if (msg instanceof ControlMessage) {
    ControlMessage controlMessage=(ControlMessage)msg;
switch (controlMessage.getKind()) {
case PREPARED:
      return createHttpResponse((ChannelBuffer)encodeMessageWithoutContent(ctx,channel,controlMessage));
case STARTED:
    return createHttpResponse((ChannelBuffer)encodeMessageWithoutContent(ctx,channel,controlMessage));
case ERROR:
  return createHttpResponse((ChannelBuffer)encodeErrorMessage(ctx,channel,(ErrorMessage)controlMessage));
case FINISHED:
ChannelBuffer header=(ChannelBuffer)encodeFinishedMessage(ctx,channel,(FinishedMessage)controlMessage);
scriptResultCache.put(controlMessage.getName(),createHttpResponse(header));
return ChannelBuffers.EMPTY_BUFFER;
case RESULT_REQUEST:
if (scriptResultCache.containsKey(controlMessage.getName()) && (lastResultRequestName == null || System.currentTimeMillis() - lastResultRequestTime.getTime() <= 500)) {
lastResultRequestName=controlMessage.getName();
lastResultRequestTime=new Date();
scheduler.schedule(clearLastRequestEntry,500,TimeUnit.MILLISECONDS);
return scriptResultCache.get(controlMessage.getName());
}
 else if (lastResultRequestName != null && lastResultRequestName.equals(controlMessage.getName())) {
BadRequestMessage badRequest=new BadRequestMessage();
badRequest.setName(controlMessage.getName());
badRequest.setContent(""String_Node_Str"");
return encodeBadRequestMessage(ctx,channel,badRequest);
}
 else {
ErrorMessage errorMessage=new ErrorMessage();
errorMessage.setName(controlMessage.getName());
errorMessage.setDescription(""String_Node_Str"");
errorMessage.setSummary(""String_Node_Str"");
return createHttpResponse((ChannelBuffer)encodeErrorMessage(ctx,channel,errorMessage));
}
case BAD_REQUEST:
return encodeBadRequestMessage(ctx,channel,(BadRequestMessage)controlMessage);
case CLEAR_CACHE:
scriptResultCache.clear();
lastResultRequestTime=null;
lastResultRequestName=null;
return ChannelBuffers.EMPTY_BUFFER;
default :
break;
}
}
return msg;
}","@Override protected Object encode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  if (msg instanceof ControlMessage) {
    ControlMessage controlMessage=(ControlMessage)msg;
switch (controlMessage.getKind()) {
case PREPARED:
      return createHttpResponse((ChannelBuffer)encodeMessageWithoutContent(ctx,channel,controlMessage));
case STARTED:
    return createHttpResponse((ChannelBuffer)encodeMessageWithoutContent(ctx,channel,controlMessage));
case ERROR:
  return createHttpResponse((ChannelBuffer)encodeErrorMessage(ctx,channel,(ErrorMessage)controlMessage));
case FINISHED:
ChannelBuffer header=(ChannelBuffer)encodeFinishedMessage(ctx,channel,(FinishedMessage)controlMessage);
scriptResultCache.put(controlMessage.getName(),createHttpResponse(header));
return ChannelBuffers.EMPTY_BUFFER;
case RESULT_REQUEST:
if (scriptResultCache.containsKey(controlMessage.getName()) && (lastResultRequestName == null || System.currentTimeMillis() - lastResultRequestTime.getTime() <= TIME_LIMIT_MILLIS)) {
lastResultRequestName=controlMessage.getName();
lastResultRequestTime=new Date();
scheduler.schedule(clearLastRequestEntry,TIME_LIMIT_MILLIS,TimeUnit.MILLISECONDS);
return scriptResultCache.get(controlMessage.getName());
}
 else if (lastResultRequestName != null && lastResultRequestName.equals(controlMessage.getName())) {
BadRequestMessage badRequest=new BadRequestMessage();
badRequest.setName(controlMessage.getName());
badRequest.setContent(""String_Node_Str"");
return encodeBadRequestMessage(ctx,channel,badRequest);
}
 else {
ErrorMessage errorMessage=new ErrorMessage();
errorMessage.setName(controlMessage.getName());
errorMessage.setDescription(""String_Node_Str"");
errorMessage.setSummary(""String_Node_Str"");
return createHttpResponse((ChannelBuffer)encodeErrorMessage(ctx,channel,errorMessage));
}
case BAD_REQUEST:
return encodeBadRequestMessage(ctx,channel,(BadRequestMessage)controlMessage);
case CLEAR_CACHE:
scriptResultCache.clear();
lastResultRequestTime=null;
lastResultRequestName=null;
return ChannelBuffers.EMPTY_BUFFER;
default :
break;
}
}
return msg;
}",0.990426041168023
24251,"@Test(timeout=TEST_TIMEOUT) public void shouldRecieveGetRequestAndProvideResponse() throws Exception {
  String script=combineScripts(""String_Node_Str"",""String_Node_Str"");
  String expected=script;
  robot.prepareAndStart(script).await();
  RobotCompletionFuture doneFuture=robot.getScriptCompleteFuture();
  doneFuture.await();
  assertEquals(expected,doneFuture.getObservedScript());
}","@Test(timeout=TEST_TIMEOUT) public void shouldRecieveGetRequestAndProvideResponse() throws Exception {
  String script=combineScripts(""String_Node_Str"",""String_Node_Str"");
  String expected=script;
  System.out.println(expected);
  robot.prepareAndStart(script).await();
  RobotCompletionFuture doneFuture=robot.getScriptCompleteFuture();
  doneFuture.await();
  assertEquals(expected,doneFuture.getObservedScript());
}",0.9602977667493796
24252,"@Override public int hashCode(){
  int hashCode=super.hashTo();
  hashCode<<=4;
  hashCode^=(expectedScript != null) ? expectedScript.hashCode() : 0;
  hashCode<<=4;
  hashCode+=(scriptFormatOverride != null) ? scriptFormatOverride.hashCode() : 0;
  return hashCode;
}","@Override public int hashCode(){
  int hashCode=super.hashTo();
  hashCode<<=4;
  hashCode^=(expectedScriptPath != null) ? expectedScriptPath.hashCode() : 0;
  hashCode<<=4;
  hashCode+=(scriptFormatOverride != null) ? scriptFormatOverride.hashCode() : 0;
  return hashCode;
}",0.9852941176470588
24253,"protected final boolean equals(PrepareMessage that){
  return super.equalTo(that) && (this.compatibilityKind == that.compatibilityKind) && (this.expectedScriptPath == that.expectedScriptPath || (this.expectedScriptPath != null && this.expectedScriptPath.equals(that.expectedScriptPath)))&& (this.expectedScript == that.expectedScript || (this.expectedScript != null && this.expectedScript.equals(that.expectedScript)) && (this.scriptFormatOverride == that.scriptFormatOverride));
}","protected final boolean equals(PrepareMessage that){
  return super.equalTo(that) && (this.compatibilityKind == that.compatibilityKind) && (this.expectedScriptPath == that.expectedScriptPath || (this.expectedScriptPath != null && this.expectedScriptPath.equals(that.expectedScriptPath)))&& (this.scriptFormatOverride == that.scriptFormatOverride);
}",0.8409638554216867
24254,"@Override public void prepareReceived(final ChannelHandlerContext ctx,MessageEvent evt) throws Exception {
  final PrepareMessage prepare=(PrepareMessage)evt.getMessage();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + prepare.getScriptName());
  }
  robot=new Robot();
  ChannelFuture prepareFuture;
  try {
    prepareFuture=robot.prepare(prepare.getExpectedScript());
  }
 catch (  Exception e) {
    sendErrorMessage(ctx,e,prepare.getScriptName());
    return;
  }
  prepareFuture.addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    final ChannelFuture f){
      PreparedMessage prepared=new PreparedMessage();
      prepared.setCompatibilityKind(prepare.getCompatibilityKind());
      prepared.setScriptName(prepare.getScriptName());
      Channels.write(ctx,Channels.future(null),prepared);
    }
  }
);
}","@Override public void prepareReceived(final ChannelHandlerContext ctx,MessageEvent evt) throws Exception {
  final PrepareMessage prepare=(PrepareMessage)evt.getMessage();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + prepare.getScriptName());
  }
  robot=new Robot();
  ChannelFuture prepareFuture;
  try {
    byte[] encoded=Files.readAllBytes(Paths.get(prepare.getExpectedScriptPath()));
    new String(encoded,UTF_8);
    prepareFuture=robot.prepare(new String(encoded,UTF_8));
  }
 catch (  Exception e) {
    sendErrorMessage(ctx,e,prepare.getScriptName());
    return;
  }
  prepareFuture.addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    final ChannelFuture f){
      PreparedMessage prepared=new PreparedMessage();
      prepared.setCompatibilityKind(prepare.getCompatibilityKind());
      prepared.setScriptName(prepare.getScriptName());
      Channels.write(ctx,Channels.future(null),prepared);
    }
  }
);
}",0.9104638619201726
24255,"@Test public void testStartedThenAbort() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(prepare);
  outputStream.flush();
  String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
  ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
  while (prepared.hasRemaining()) {
    prepared.put((byte)inputStream.read());
  }
  prepared.flip();
  assertEquals(preparedExpected,prepared);
  byte[] start=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(start);
  outputStream.flush();
  String startedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer startedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + startedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ startedContent).getBytes(""String_Node_Str""));
  ByteBuffer started=ByteBuffer.allocate(startedExpected.capacity());
  while (started.hasRemaining()) {
    started.put((byte)inputStream.read());
  }
  started.flip();
  assertEquals(startedExpected,started);
  byte[] abort=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(abort);
  outputStream.flush();
  String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
  ByteBuffer finished=ByteBuffer.allocate(finishedExpected.capacity());
  while (finished.hasRemaining()) {
    finished.put((byte)inputStream.read());
  }
  finished.flip();
  client.close();
  assertEquals(finishedExpected,finished);
}","@Test public void testStartedThenAbort() throws Exception {
  String path=Paths.get(String.format(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath().toString(),SCRIPT_PATH,""String_Node_Str"")).toString();
  Socket client=new Socket();
  client.connect(new InetSocketAddress(""String_Node_Str"",61234));
  OutputStream outputStream=client.getOutputStream();
  InputStream inputStream=client.getInputStream();
  byte[] prepare=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(prepare);
  outputStream.flush();
  String preparedContent=""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer preparedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + preparedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ preparedContent).getBytes(""String_Node_Str""));
  ByteBuffer prepared=ByteBuffer.allocate(preparedExpected.capacity());
  while (prepared.hasRemaining()) {
    prepared.put((byte)inputStream.read());
  }
  prepared.flip();
  assertEquals(preparedExpected,prepared);
  byte[] start=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(start);
  outputStream.flush();
  String startedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str"";
  ByteBuffer startedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + startedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ startedContent).getBytes(""String_Node_Str""));
  ByteBuffer started=ByteBuffer.allocate(startedExpected.capacity());
  while (started.hasRemaining()) {
    started.put((byte)inputStream.read());
  }
  started.flip();
  assertEquals(startedExpected,started);
  byte[] abort=(""String_Node_Str"" + ""String_Node_Str"" + (""String_Node_Str"".length() + path.length() + ""String_Node_Str"".length()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ path+ ""String_Node_Str"").getBytes(""String_Node_Str"");
  outputStream.write(abort);
  outputStream.flush();
  String finishedContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ByteBuffer finishedExpected=ByteBuffer.wrap((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + finishedContent.length() + ""String_Node_Str""+ ""String_Node_Str""+ finishedContent).getBytes(""String_Node_Str""));
  ByteBuffer finished=ByteBuffer.allocate(finishedExpected.capacity());
  while (finished.hasRemaining()) {
    finished.put((byte)inputStream.read());
  }
  finished.flip();
  client.close();
  System.out.println(new String(finishedExpected.array(),""String_Node_Str""));
  System.out.println(new String(finished.array(),""String_Node_Str""));
  assertEquals(finishedExpected,finished);
}",0.9757615460203078
24256,"private void sendErrorMessage(ChannelHandlerContext ctx,Exception exception,String scriptName){
  ErrorMessage error=new ErrorMessage();
  error.setDescription(exception.getMessage());
  error.setScriptName(scriptName);
  if (exception instanceof ScriptParseException) {
    if (logger.isDebugEnabled()) {
      logger.error(""String_Node_Str"",exception);
    }
 else {
      logger.error(""String_Node_Str"" + exception);
    }
    error.setSummary(""String_Node_Str"");
    Channels.write(ctx,Channels.future(null),error);
  }
 else {
    logger.error(""String_Node_Str"",exception);
    error.setSummary(""String_Node_Str"");
  }
  Channels.write(ctx,Channels.future(null),error);
}","private void sendErrorMessage(ChannelHandlerContext ctx,Exception exception,String scriptName){
  ErrorMessage error=new ErrorMessage();
  error.setDescription(exception.getMessage());
  error.setScriptName(scriptName);
  if (exception instanceof ScriptParseException) {
    if (logger.isDebugEnabled()) {
      logger.error(""String_Node_Str"",exception);
    }
 else {
      logger.error(""String_Node_Str"" + exception);
    }
    error.setSummary(""String_Node_Str"");
    Channels.write(ctx,Channels.future(null),error);
  }
 else {
    logger.error(""String_Node_Str"",exception);
    error.setSummary(""String_Node_Str"");
    Channels.write(ctx,Channels.future(null),error);
  }
}",0.9955686853766618
24257,"private void sendErrorMessage(ChannelHandlerContext ctx,Exception exception,String scriptName){
  ErrorMessage error=new ErrorMessage();
  error.setDescription(exception.getMessage());
  error.setScriptName(scriptName);
  if (exception instanceof ScriptParseException) {
    if (logger.isDebugEnabled()) {
      logger.error(""String_Node_Str"",exception);
    }
 else {
      logger.error(""String_Node_Str"" + exception);
    }
    error.setSummary(""String_Node_Str"");
    Channels.write(ctx,Channels.future(null),error);
  }
 else {
    logger.error(""String_Node_Str"",exception);
    error.setSummary(""String_Node_Str"");
  }
  Channels.write(ctx,Channels.future(null),error);
}","private void sendErrorMessage(ChannelHandlerContext ctx,Exception exception,String scriptName){
  ErrorMessage error=new ErrorMessage();
  error.setDescription(exception.getMessage());
  error.setScriptName(scriptName);
  if (exception instanceof ScriptParseException) {
    if (logger.isDebugEnabled()) {
      logger.error(""String_Node_Str"",exception);
    }
 else {
      logger.error(""String_Node_Str"" + exception);
    }
    error.setSummary(""String_Node_Str"");
    Channels.write(ctx,Channels.future(null),error);
  }
 else {
    logger.error(""String_Node_Str"",exception);
    error.setSummary(""String_Node_Str"");
    Channels.write(ctx,Channels.future(null),error);
  }
}",0.9955686853766618
24258,"@Override public void deliverResult(final QueryResult result){
  mTracker.registerObserver(result,mObserver);
  if (isReset()) {
    mTracker.reset();
  }
 else {
    if (isStarted() && result.isValid()) {
      super.deliverResult(result);
    }
    if (result.isValid() && !result.hasError()) {
      mTracker.trackValidResult(result);
    }
 else {
      mTracker.trackInvalidResult(result,mObserver);
    }
  }
}","@Override public void deliverResult(final QueryResult result){
  mTracker.registerObserver(result,mObserver);
  if (isReset()) {
    mTracker.reset();
  }
 else {
    if (isStarted() && result.isValid()) {
      super.deliverResult(result);
    }
    if (!result.hasError()) {
      trackResult(result);
    }
  }
}",0.8481532147742818
24259,"@Override public void deliverResult(final QueryResult result){
  mTracker.registerObserver(result,mObserver);
  if (isReset()) {
    mTracker.reset();
  }
 else {
    if (isStarted() && result.isValid()) {
      super.deliverResult(result);
    }
    if (result.isValid() && !result.hasError()) {
      mTracker.trackValidResult(result);
    }
 else {
      mTracker.trackInvalidResult(result,mObserver);
    }
  }
}","@Override public void deliverResult(final QueryResult result){
  mTracker.registerObserver(result,mObserver);
  if (isReset()) {
    mTracker.reset();
  }
 else {
    if (isStarted() && result.isValid()) {
      super.deliverResult(result);
    }
    if (!result.hasError()) {
      trackResult(result);
    }
  }
}",0.8481532147742818
24260,"public boolean isValid(){
  return mIsValid;
}","public boolean isValid(){
  return mIsValid && !hasError();
}",0.8598130841121495
24261,"private void executeTasks(final Set<Task<?>> tasks){
  for (  final Task<?> task : tasks) {
    executeTaskNow(task);
  }
}","private void executeTasks(final Set<Task<?>> tasks){
  for (  final Task<?> task : tasks) {
    task.execute();
  }
}",0.9333333333333332
24262,"private void addTaskToPending(final Task<?> task){
synchronized (mTaskLock) {
    mPendingTasks.add(task);
  }
}","private void addTaskToPending(final Task<?> task){
synchronized (mTaskLock) {
    task.setTaskObserver(this);
    task.setRequestExecutor(mExecutor);
    task.setPriority(mPriority);
    task.setContext(mContext);
    mPendingTasks.add(task);
  }
}",0.6222222222222222
24263,"private void notifyComplete(){
  if (mObserver != null) {
    mObserver.onTaskComplete(this);
  }
  notifyDependentsOfCompletion();
}","private void notifyComplete(){
  mFinished=true;
  if (mObserver != null) {
    mObserver.onTaskComplete(this);
  }
  notifyDependentsOfCompletion();
}",0.9366197183098592
24264,"private void startNetworkingRequest(){
  if (mExecutor != null) {
    final NetworkingPrioritizable<T> prioritzable=new NetworkingPrioritizable<T>(this);
    final NetworkingRequest<T> request=new NetworkingRequest<T>(prioritzable,mPriority.ordinal(),this);
    mExecutor.executeNetworkingRequest(request);
  }
 else {
    notifyFailure(new ServiceError(Messages.NO_EXECUTOR));
  }
}","private void startNetworkingRequest(){
  if (mExecutor != null) {
    final NetworkingPrioritizable<T> prioritizable=new NetworkingPrioritizable<T>(this);
    final NetworkingRequest<T> request=new NetworkingRequest<T>(prioritizable,mPriority.ordinal(),this);
    mExecutor.executeNetworkingRequest(request);
  }
 else {
    notifyFailure(new ServiceError(Messages.NO_EXECUTOR));
  }
}",0.9973958333333334
24265,"protected void onPrerequisiteComplete(final Task<?> task){
synchronized (mTaskLock) {
    mPrerequisites.remove(task);
    checkPrerequisites();
  }
}","protected void onPrerequisiteComplete(final Task<?> task){
synchronized (mTaskLock) {
    mPrerequisites.remove(task);
    checkExecution();
  }
}",0.945945945945946
24266,"private void checkExecution(){
  if (!mErrors.isEmpty()) {
    final ServiceError error=mErrors.get(0);
    notifyFailure(error);
  }
 else {
    notifyStarted();
    startNetworkingRequest();
  }
}","private void checkExecution(){
  if (!mFinished && allPrerequisitesComplete()) {
    if (!mErrors.isEmpty()) {
      final ServiceError error=mErrors.get(0);
      notifyFailure(error);
    }
 else {
      notifyStarted();
      startNetworkingRequest();
    }
  }
}",0.7974137931034483
24267,"@Override public final Identifier<?> getIdentifier(){
  return mIdentifier;
}","@Override public final Identifier<?> getIdentifier(){
  if (mIdentifier == null) {
    mIdentifier=onCreateIdentifier();
  }
  return mIdentifier;
}",0.6844444444444444
24268,"public void execute(){
  mIdentifier=onCreateIdentifier();
  checkPrerequisites();
}","public void execute(){
  checkExecution();
}",0.59375
24269,"private void notifyFailure(final ServiceError error){
  if (mObserver != null) {
    mObserver.onTaskFailure(this,error);
  }
  notifyDependentsOfFailure(error);
}","private void notifyFailure(final ServiceError error){
  mFinished=true;
  if (mObserver != null) {
    mObserver.onTaskFailure(this,error);
  }
  notifyDependentsOfFailure(error);
}",0.9476744186046512
24270,"protected void onPrerequisiteFailure(final Task<?> task,final ServiceError error){
synchronized (mTaskLock) {
    mPrerequisites.remove(task);
    mErrors.add(error);
    checkPrerequisites();
  }
}","protected void onPrerequisiteFailure(final Task<?> task,final ServiceError error){
synchronized (mTaskLock) {
    mPrerequisites.remove(task);
    mErrors.add(error);
    checkExecution();
  }
}",0.9591836734693876
24271,"@Override public void onFailure(final Context context,final ServiceError error){
  final int errorCode=error.getCode();
  final String errorMessage=error.getMessage();
  ContentBroadcaster.broadcast(context,getUri(),errorCode,errorMessage);
}","@Override public void onFailure(final Context context,final ServiceError error){
  final int errorCode=error.getCode();
  final String errorMessage=error.getMessage();
  ErrorBroadcaster.broadcast(context,getUri(),errorCode,errorMessage);
}",0.975103734439834
24272,"@Override public void onSuccess(final Context context,final List<Task<?>> completed){
  final Uri uri=getUri();
  AppNetUriCache.add(uri);
  final ContentResolver resolver=context.getContentResolver();
  resolver.notifyChange(uri,null);
}","@Override public void onSuccess(final Context context,final List<Task<?>> completed){
  final ContentResolver resolver=context.getContentResolver();
  resolver.notifyChange(getUri(),null);
}",0.8598130841121495
24273,"@Override public void onFailure(final Context context,final ServiceError error){
  final int errorCode=error.getCode();
  final String errorMessage=error.getMessage();
  ContentBroadcaster.broadcast(context,getUri(),errorCode,errorMessage);
}","@Override public void onFailure(final Context context,final ServiceError error){
  final int errorCode=error.getCode();
  final String errorMessage=error.getMessage();
  ErrorBroadcaster.broadcast(context,getUri(),errorCode,errorMessage);
}",0.975103734439834
24274,"@Override public void onFailure(final Context context,final ServiceError error){
  final int errorCode=error.getCode();
  final String errorMessage=error.getMessage();
  ContentBroadcaster.broadcast(context,getUri(),errorCode,errorMessage);
}","@Override public void onFailure(final Context context,final ServiceError error){
  final int errorCode=error.getCode();
  final String errorMessage=error.getMessage();
  ErrorBroadcaster.broadcast(context,getUri(),errorCode,errorMessage);
}",0.975103734439834
24275,"@Override public void onFailure(final Context context,final ServiceError error){
  final int errorCode=error.getCode();
  final String errorMessage=error.getMessage();
  ContentBroadcaster.broadcast(context,getUri(),errorCode,errorMessage);
}","@Override public void onFailure(final Context context,final ServiceError error){
  final int errorCode=error.getCode();
  final String errorMessage=error.getMessage();
  ErrorBroadcaster.broadcast(context,getUri(),errorCode,errorMessage);
}",0.975103734439834
24276,"@Override public void onFailure(final Context context,final ServiceError error){
  final int errorCode=error.getCode();
  final String errorMessage=error.getMessage();
  ContentBroadcaster.broadcast(context,getUri(),errorCode,errorMessage);
}","@Override public void onFailure(final Context context,final ServiceError error){
  final int errorCode=error.getCode();
  final String errorMessage=error.getMessage();
  ErrorBroadcaster.broadcast(context,getUri(),errorCode,errorMessage);
}",0.975103734439834
24277,"@Override public void onFailure(final Context context,final ServiceError error){
  final int errorCode=error.getCode();
  final String errorMessage=error.getMessage();
  ContentBroadcaster.broadcast(context,getUri(),errorCode,errorMessage);
}","@Override public void onFailure(final Context context,final ServiceError error){
  final int errorCode=error.getCode();
  final String errorMessage=error.getMessage();
  ErrorBroadcaster.broadcast(context,getUri(),errorCode,errorMessage);
}",0.975103734439834
24278,"private void handleAction(final Action action,final Operation operation){
  if (action == Action.START) {
    startOperation(operation);
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}","private void handleAction(final Action action,final Operation operation){
  if (action == Action.START) {
    handleStart(operation);
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}",0.9422632794457276
24279,"public static void main(String[] args) throws Exception {
  OptionsParser op=new OptionsParser(Opts.class);
  op.doParse(args);
  if (Opts.ace)   Opts.debug=true;
  if (Opts.propertiesFile != null)   ARKref.loadProperties(Opts.propertiesFile);
  if (!Opts.stdin && (Opts.input == null || Opts.input.length == 0)) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"");
    System.exit(-1);
  }
  U.pl(""String_Node_Str"" + op.doGetOptionPairs());
  if (Opts.stdin) {
    File tmpFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tmpFile.deleteOnExit();
    String tmpPath=tmpFile.getAbsolutePath();
    String tmpPrefix=tmpPath.substring(0,tmpPath.lastIndexOf(""String_Node_Str""));
    File tmpParseFile=new File(tmpPrefix + ""String_Node_Str"");
    tmpParseFile.deleteOnExit();
    File tmpSSTFile=new File(tmpPrefix + ""String_Node_Str"");
    tmpSSTFile.deleteOnExit();
    File tmpSentFile=new File(tmpPrefix + ""String_Node_Str"");
    tmpSentFile.deleteOnExit();
    PrintWriter pw=new PrintWriter(new FileOutputStream(tmpFile));
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    String buf;
    while ((buf=br.readLine()) != null) {
      pw.println(buf);
    }
    pw.close();
    Opts.input=new String[1];
    Opts.input[0]=tmpFile.getAbsolutePath();
  }
 else {
  }
  boolean dots=Opts.input.length > 1;
  for (  String path : Opts.input) {
    path=Preprocess.shortPath(path);
    if (dots)     System.err.print(""String_Node_Str"");
    U.pl(""String_Node_Str"" + path + ""String_Node_Str"");
    Document d;
    if (Opts.ace) {
      if (Opts.forcePre || !Preprocess.alreadyPreprocessed(path)) {
        AcePreprocess.go(path);
        Preprocess.go(path);
      }
      d=Document.loadFiles(path);
      AceDocument aceDoc=AceDocument.load(path);
      d.ensureSurfaceSentenceLoad(path);
      FindAceMentions.go(d,aceDoc);
      Resolve.go(d);
      RefsToEntities.go(d);
      Eval.pairwise(aceDoc,d.entGraph());
    }
 else {
      if (Opts.forcePre || !Preprocess.alreadyPreprocessed(path)) {
        Preprocess.go(path);
      }
      d=Document.loadFiles(path);
      FindMentions.go(d);
      Resolve.go(d);
      RefsToEntities.go(d);
    }
    if (!Opts.debug) {
      PrintWriter pw=null;
      if (Opts.stdin) {
        pw=new PrintWriter(System.out);
      }
 else {
        String filename=path + ""String_Node_Str"";
        File file=new File(filename);
        pw=new PrintWriter(new FileOutputStream(file));
        U.pl(""String_Node_Str"" + filename);
      }
      WriteEntityXml.writeTaggedDocument(d,pw);
    }
  }
  if (dots)   System.err.println(""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  OptionsParser op=new OptionsParser(Opts.class);
  op.doParse(args);
  if (Opts.ace)   Opts.debug=true;
  if (Opts.propertiesFile != null) {
    ARKref.setPropertiesPath(Opts.propertiesFile);
    ARKref.loadProperties(Opts.propertiesFile);
  }
  if (!Opts.stdin && (Opts.input == null || Opts.input.length == 0)) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"");
    System.exit(-1);
  }
  U.pl(""String_Node_Str"" + op.doGetOptionPairs());
  if (Opts.stdin) {
    File tmpFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tmpFile.deleteOnExit();
    String tmpPath=tmpFile.getAbsolutePath();
    String tmpPrefix=tmpPath.substring(0,tmpPath.lastIndexOf(""String_Node_Str""));
    File tmpParseFile=new File(tmpPrefix + ""String_Node_Str"");
    tmpParseFile.deleteOnExit();
    File tmpSSTFile=new File(tmpPrefix + ""String_Node_Str"");
    tmpSSTFile.deleteOnExit();
    File tmpSentFile=new File(tmpPrefix + ""String_Node_Str"");
    tmpSentFile.deleteOnExit();
    PrintWriter pw=new PrintWriter(new FileOutputStream(tmpFile));
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    String buf;
    while ((buf=br.readLine()) != null) {
      pw.println(buf);
    }
    pw.close();
    Opts.input=new String[1];
    Opts.input[0]=tmpFile.getAbsolutePath();
  }
 else {
  }
  boolean dots=Opts.input.length > 1;
  for (  String path : Opts.input) {
    path=Preprocess.shortPath(path);
    if (dots)     System.err.print(""String_Node_Str"");
    U.pl(""String_Node_Str"" + path + ""String_Node_Str"");
    Document d;
    if (Opts.ace) {
      if (Opts.forcePre || !Preprocess.alreadyPreprocessed(path)) {
        AcePreprocess.go(path);
        Preprocess.go(path);
      }
      d=Document.loadFiles(path);
      AceDocument aceDoc=AceDocument.load(path);
      d.ensureSurfaceSentenceLoad(path);
      FindAceMentions.go(d,aceDoc);
      Resolve.go(d);
      RefsToEntities.go(d);
      Eval.pairwise(aceDoc,d.entGraph());
    }
 else {
      if (Opts.forcePre || !Preprocess.alreadyPreprocessed(path)) {
        Preprocess.go(path);
      }
      d=Document.loadFiles(path);
      FindMentions.go(d);
      Resolve.go(d);
      RefsToEntities.go(d);
    }
    if (!Opts.debug) {
      PrintWriter pw=null;
      if (Opts.stdin) {
        pw=new PrintWriter(System.out);
      }
 else {
        String filename=path + ""String_Node_Str"";
        File file=new File(filename);
        pw=new PrintWriter(new FileOutputStream(file));
        U.pl(""String_Node_Str"" + filename);
      }
      WriteEntityXml.writeTaggedDocument(d,pw);
    }
  }
  if (dots)   System.err.println(""String_Node_Str"");
}",0.9754911131898972
24280,"public List<String> annotateSentenceWithSupersenses(Tree sentence){
  List<String> result=new ArrayList<String>();
  int numleaves=sentence.getLeaves().size();
  if (numleaves <= 1) {
    return result;
  }
  LabeledSentence labeled=generateSupersenseTaggingInput(sentence);
  int port=new Integer(ARKref.getProperties().getProperty(""String_Node_Str"",""String_Node_Str""));
  String host=""String_Node_Str"";
  Socket client;
  PrintWriter pw;
  BufferedReader br;
  String line;
  try {
    client=new Socket(host,port);
    pw=new PrintWriter(client.getOutputStream());
    br=new BufferedReader(new InputStreamReader(client.getInputStream()));
    String inputStr=""String_Node_Str"";
    for (int i=0; i < labeled.length(); i++) {
      String token=labeled.getTokens().get(i);
      String stem=labeled.getStems().get(i);
      String pos=labeled.getPOS().get(i);
      inputStr+=token + ""String_Node_Str"" + stem+ ""String_Node_Str""+ pos+ ""String_Node_Str"";
    }
    pw.println(inputStr);
    pw.flush();
    while ((line=br.readLine()) != null) {
      String[] parts=line.split(""String_Node_Str"");
      result.add(parts[2]);
    }
    br.close();
    pw.close();
    client.close();
  }
 catch (  Exception ex) {
    if (ARKref.Opts.debug)     System.err.println(""String_Node_Str"");
  }
  if (result.size() == 0) {
    try {
      if (sst == null) {
        sst=DiscriminativeTagger.loadModel(ARKref.getProperties().getProperty(""String_Node_Str"",""String_Node_Str""));
      }
      sst.findBestLabelSequenceViterbi(labeled,sst.getWeights());
      for (      String pred : labeled.getPredictions()) {
        result.add(pred);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  while (result.size() < numleaves)   result.add(""String_Node_Str"");
  if (ARKref.Opts.debug)   System.err.println(""String_Node_Str"" + result);
  return result;
}","public List<String> annotateSentenceWithSupersenses(Tree sentence){
  List<String> result=new ArrayList<String>();
  int numleaves=sentence.getLeaves().size();
  if (numleaves <= 1) {
    return result;
  }
  LabeledSentence labeled=generateSupersenseTaggingInput(sentence);
  int port=new Integer(ARKref.getProperties().getProperty(""String_Node_Str"",""String_Node_Str""));
  String host=""String_Node_Str"";
  Socket client;
  PrintWriter pw;
  BufferedReader br;
  String line;
  try {
    client=new Socket(host,port);
    pw=new PrintWriter(client.getOutputStream());
    br=new BufferedReader(new InputStreamReader(client.getInputStream()));
    String inputStr=""String_Node_Str"";
    for (int i=0; i < labeled.length(); i++) {
      String token=labeled.getTokens().get(i);
      String stem=labeled.getStems().get(i);
      String pos=labeled.getPOS().get(i);
      inputStr+=token + ""String_Node_Str"" + stem+ ""String_Node_Str""+ pos+ ""String_Node_Str"";
    }
    pw.println(inputStr);
    pw.flush();
    while ((line=br.readLine()) != null) {
      String[] parts=line.split(""String_Node_Str"");
      result.add(parts[2]);
    }
    br.close();
    pw.close();
    client.close();
  }
 catch (  Exception ex) {
    if (ARKref.Opts.debug)     System.err.println(""String_Node_Str"");
  }
  if (result.size() == 0) {
    try {
      if (sst == null) {
        DiscriminativeTagger.loadProperties(ARKref.getPropertiesPath());
        sst=DiscriminativeTagger.loadModel(ARKref.getProperties().getProperty(""String_Node_Str"",""String_Node_Str""));
      }
      sst.findBestLabelSequenceViterbi(labeled,sst.getWeights());
      for (      String pred : labeled.getPredictions()) {
        result.add(pred);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  while (result.size() < numleaves)   result.add(""String_Node_Str"");
  if (ARKref.Opts.debug)   System.err.println(""String_Node_Str"" + result);
  return result;
}",0.7860330795484379
24281,"public ParseResult parseSentence(String sentence){
  String result=""String_Node_Str"";
  int port=new Integer(ARKref.getProperties().getProperty(""String_Node_Str"",""String_Node_Str""));
  String host=""String_Node_Str"";
  Socket client;
  PrintWriter pw;
  BufferedReader br;
  String line;
  try {
    client=new Socket(host,port);
    pw=new PrintWriter(client.getOutputStream());
    br=new BufferedReader(new InputStreamReader(client.getInputStream()));
    pw.println(sentence);
    pw.flush();
    while ((line=br.readLine()) != null) {
      if (br.ready()) {
        line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
        line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
        result+=line + ""String_Node_Str"";
      }
 else {
        lastParseScore=new Double(line);
      }
    }
    br.close();
    pw.close();
    client.close();
    System.err.println(""String_Node_Str"" + result);
    lastParse=readTreeFromString(result);
    boolean success=!Strings.normalizeWhitespace(result).equals(""String_Node_Str"");
    return new ParseResult(success,lastParse,lastParseScore);
  }
 catch (  Exception ex) {
    if (DEBUG)     System.err.println(""String_Node_Str"");
  }
  if (parser == null) {
    try {
      Options op=new Options();
      String serializedInputFileOrUrl=ARKref.getProperties().getProperty(""String_Node_Str"",""String_Node_Str"");
      parser=new LexicalizedParser(serializedInputFileOrUrl,op);
      int maxLength=new Integer(ARKref.getProperties().getProperty(""String_Node_Str"",""String_Node_Str"")).intValue();
      parser.setMaxLength(maxLength);
      parser.setOptionFlags(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    if (parser.parse(sentence)) {
      lastParse=parser.getBestParse();
      lastParseScore=parser.getPCFGScore();
      TreePrint tp=new TreePrint(""String_Node_Str"",""String_Node_Str"",new PennTreebankLanguagePack());
      StringWriter sb=new StringWriter();
      pw=new PrintWriter(sb);
      tp.printTree(lastParse,pw);
      pw.flush();
      lastParse=readTreeFromString(sb.getBuffer().toString());
      return new ParseResult(true,lastParse,lastParseScore);
    }
  }
 catch (  Exception e) {
  }
  lastParse=readTreeFromString(""String_Node_Str"");
  lastParseScore=-99999.0;
  return new ParseResult(false,lastParse,lastParseScore);
}","public ParseResult parseSentence(String sentence){
  String result=""String_Node_Str"";
  int port=new Integer(ARKref.getProperties().getProperty(""String_Node_Str"",""String_Node_Str""));
  String host=""String_Node_Str"";
  Socket client;
  PrintWriter pw;
  BufferedReader br;
  String line;
  try {
    client=new Socket(host,port);
    pw=new PrintWriter(client.getOutputStream());
    br=new BufferedReader(new InputStreamReader(client.getInputStream()));
    pw.println(sentence);
    pw.flush();
    while ((line=br.readLine()) != null) {
      if (br.ready()) {
        line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
        line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
        result+=line + ""String_Node_Str"";
      }
 else {
        lastParseScore=new Double(line);
      }
    }
    br.close();
    pw.close();
    client.close();
    System.err.println(""String_Node_Str"" + result);
    lastParse=readTreeFromString(result);
    boolean success=!Strings.normalizeWhitespace(result).equals(""String_Node_Str"");
    return new ParseResult(success,lastParse,lastParseScore);
  }
 catch (  Exception ex) {
  }
  if (parser == null) {
    if (DEBUG)     System.err.println(""String_Node_Str"");
    try {
      Options op=new Options();
      String serializedInputFileOrUrl=ARKref.getProperties().getProperty(""String_Node_Str"",""String_Node_Str"");
      parser=new LexicalizedParser(serializedInputFileOrUrl,op);
      int maxLength=new Integer(ARKref.getProperties().getProperty(""String_Node_Str"",""String_Node_Str"")).intValue();
      parser.setMaxLength(maxLength);
      parser.setOptionFlags(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    if (parser.parse(sentence)) {
      lastParse=parser.getBestParse();
      lastParseScore=parser.getPCFGScore();
      TreePrint tp=new TreePrint(""String_Node_Str"",""String_Node_Str"",new PennTreebankLanguagePack());
      StringWriter sb=new StringWriter();
      pw=new PrintWriter(sb);
      tp.printTree(lastParse,pw);
      pw.flush();
      lastParse=readTreeFromString(sb.getBuffer().toString());
      return new ParseResult(true,lastParse,lastParseScore);
    }
  }
 catch (  Exception e) {
  }
  lastParse=readTreeFromString(""String_Node_Str"");
  lastParseScore=-99999.0;
  return new ParseResult(false,lastParse,lastParseScore);
}",0.9882253994953742
24282,"/** 
 * saves doc-level token alignments in the analysis.Word objects Requires surfSent's in the document's sentences.
 */
public void doTokenAlignments(String docText){
  U.pl(""String_Node_Str"");
  for (  Sentence s : sentences) {
    U.pf(""String_Node_Str"",s.ID(),StringUtils.join(s.tokens()));
    AlignedSub cleanText=AnalysisUtilities.moreCleanup(s.surfSent.rawText);
    int[] wordAlignsInSent=AnalysisUtilities.alignTokens(cleanText.text,s.words);
    for (int i=0; i < wordAlignsInSent.length; i++)     if (wordAlignsInSent[i] != -1)     wordAlignsInSent[i]=cleanText.alignments[wordAlignsInSent[i]];
    for (int i=0; i < s.words.size(); i++) {
      if (wordAlignsInSent[i] == -1) {
        s.words.get(i).charStart=-1;
      }
 else {
        s.words.get(i).charStart=s.surfSent.alignments[wordAlignsInSent[i]];
      }
    }
    if (s.words.get(0).charStart == -1) {
      s.words.get(0).charStart=s.surfSent.alignments[0];
    }
    for (int i=1; i < s.words.size(); i++) {
      if (s.words.get(i).charStart == -1) {
        Word prev=s.words.get(i - 1);
        s.words.get(i).charStart=prev.charStart + prev.token.length();
      }
    }
  }
}","/** 
 * saves doc-level token alignments in the analysis.Word objects Requires surfSent's in the document's sentences.
 */
public void doTokenAlignments(String docText){
  U.pl(""String_Node_Str"");
  for (  Sentence s : sentences) {
    U.pf(""String_Node_Str"",s.ID(),StringUtils.join(s.tokens()));
    AlignedSub cleanText=AnalysisUtilities.moreCleanup(s.surfSent.rawText);
    int[] wordAlignsInSent=AnalysisUtilities.alignTokens(cleanText.text,s.words);
    for (int i=0; i < wordAlignsInSent.length; i++)     if (wordAlignsInSent[i] != -1)     wordAlignsInSent[i]=cleanText.alignments[wordAlignsInSent[i]];
    for (int i=0; i < s.words.size(); i++) {
      if (wordAlignsInSent[i] == -1) {
        s.words.get(i).charStart=-1;
      }
 else {
        s.words.get(i).charStart=s.surfSent.alignments[wordAlignsInSent[i]];
      }
    }
    if (s.words != null && s.words.size() > 0 && s.words.get(0).charStart == -1) {
      s.words.get(0).charStart=s.surfSent.alignments[0];
    }
    for (int i=1; i < s.words.size(); i++) {
      if (s.words.get(i).charStart == -1) {
        Word prev=s.words.get(i - 1);
        s.words.get(i).charStart=prev.charStart + prev.token.length();
      }
    }
  }
}",0.9826197541331072
24283,"public Tree findNodeThatCoversSpan(Sentence sent,Tree startLeaf,Tree endLeaf){
  Tree res=null;
  int smallestSpan=999999;
  int nodeSpanLength;
  for (  Tree t : sent.rootNode().subTrees()) {
    if (!(t.dominates(startLeaf) && t.dominates(endLeaf))) {
      continue;
    }
    nodeSpanLength=t.getLeaves().size();
    if (smallestSpan > nodeSpanLength) {
      smallestSpan=nodeSpanLength;
      res=t;
    }
  }
  return res;
}","public Tree findNodeThatCoversSpan(Sentence sent,Tree startLeaf,Tree endLeaf){
}",0.3131115459882583
24284,"/** 
 * saves doc-level token alignments in the analysis.Word objects Requires surfSent's in the document's sentences.
 */
public void doTokenAlignments(String docText){
  U.pl(""String_Node_Str"");
  for (  Sentence s : sentences) {
    AlignedSub cleanText=AnalysisUtilities.cleanupMarkup(s.surfSent.rawText);
    int[] wordAlignsInSent=AnalysisUtilities.alignTokens(cleanText.text,s.words);
    for (int i=0; i < wordAlignsInSent.length; i++)     if (wordAlignsInSent[i] != -1)     wordAlignsInSent[i]=cleanText.alignments[wordAlignsInSent[i]];
    for (int i=0; i < s.words.size(); i++) {
      if (wordAlignsInSent[i] == -1) {
        s.words.get(i).charStart=-1;
      }
 else {
        s.words.get(i).charStart=s.surfSent.alignments[wordAlignsInSent[i]];
      }
    }
    if (s.words.get(0).charStart == -1) {
      s.words.get(0).charStart=s.surfSent.alignments[0];
    }
    for (int i=1; i < s.words.size(); i++) {
      if (s.words.get(i).charStart == -1) {
        Word prev=s.words.get(i - 1);
        s.words.get(i).charStart=prev.charStart + prev.token.length();
      }
    }
  }
}","/** 
 * saves doc-level token alignments in the analysis.Word objects Requires surfSent's in the document's sentences.
 */
public void doTokenAlignments(String docText){
  U.pl(""String_Node_Str"");
  for (  Sentence s : sentences) {
    AlignedSub cleanText=AnalysisUtilities.moreCleanup(s.surfSent.rawText);
    int[] wordAlignsInSent=AnalysisUtilities.alignTokens(cleanText.text,s.words);
    for (int i=0; i < wordAlignsInSent.length; i++)     if (wordAlignsInSent[i] != -1)     wordAlignsInSent[i]=cleanText.alignments[wordAlignsInSent[i]];
    for (int i=0; i < s.words.size(); i++) {
      if (wordAlignsInSent[i] == -1) {
        s.words.get(i).charStart=-1;
      }
 else {
        s.words.get(i).charStart=s.surfSent.alignments[wordAlignsInSent[i]];
      }
    }
    if (s.words.get(0).charStart == -1) {
      s.words.get(0).charStart=s.surfSent.alignments[0];
    }
    for (int i=1; i < s.words.size(); i++) {
      if (s.words.get(i).charStart == -1) {
        Word prev=s.words.get(i - 1);
        s.words.get(i).charStart=prev.charStart + prev.token.length();
      }
    }
  }
}",0.9908675799086758
24285,"public static List<SentenceBreaker.Sentence> cleanAndBreakSentences(String docText){
  docText=docText.replaceAll(""String_Node_Str"",""String_Node_Str"");
  AlignedSub cleaner=AnalysisUtilities.cleanupDocument(docText);
  List<SentenceBreaker.Sentence> sentences=SentenceBreaker.getSentences(cleaner.text);
  for (  SentenceBreaker.Sentence s : sentences) {
    U.pf(""String_Node_Str"",s.cleanText);
    U.pf(""String_Node_Str"",s.charStart,s.charEnd);
    s.setAlignmentProjection(cleaner.alignments);
    U.pf(""String_Node_Str"",s.charStart,s.charEnd);
  }
  return sentences;
}","public static List<SentenceBreaker.Sentence> cleanAndBreakSentences(String docText){
  docText=docText.replaceAll(""String_Node_Str"",""String_Node_Str"");
  AlignedSub cleaner=AnalysisUtilities.cleanupDocument(docText);
  List<SentenceBreaker.Sentence> sentences=SentenceBreaker.getSentences(cleaner);
  return sentences;
}",0.6808510638297872
24286,"/** 
 * some ACE docs have weird markup in them that serve as paragraph-ish markers 
 */
public static AlignedSub cleanupDocument(String document){
  AlignedSub ret=new AlignedSub(document).replaceAll(""String_Node_Str"",""String_Node_Str"");
  return ret;
}","/** 
 * some ACE docs have weird markup in them that serve as paragraph-ish markers 
 */
public static AlignedSub cleanupDocument(String document){
  AlignedSub ret=new AlignedSub(document);
  ret=ret.replaceAll(""String_Node_Str"",""String_Node_Str"");
  ret=ret.replaceAll(leadingWhitespace,""String_Node_Str"");
  return ret;
}",0.8546712802768166
24287,"public static void main(String[] args) throws IOException {
  for (  String arg : args) {
    if (args.length > 1)     U.pf(""String_Node_Str"",arg);
    String text=U.readFile(arg);
    text=AnalysisUtilities.cleanupDocument(text).text;
    for (    Sentence s : getSentences(text)) {
      U.pf(""String_Node_Str"",StringUtils.join(s.tokens,""String_Node_Str""));
    }
  }
}","public static void main(String[] args) throws IOException {
  for (  String arg : args) {
    if (args.length > 1)     U.pf(""String_Node_Str"",arg);
    String text=U.readFile(arg);
    AlignedSub textAS=AnalysisUtilities.cleanupDocument(text);
    for (    Sentence s : getSentences(textAS)) {
      U.pf(""String_Node_Str"",s.charStart,s.charEnd,U.backslashEscape(s.rawText));
      U.pf(""String_Node_Str"",StringUtils.join(s.tokens,""String_Node_Str""));
      U.pf(""String_Node_Str"",s.cleanText);
    }
  }
}",0.8255416191562144
24288,"public String toString(){
switch (this) {
case First:
    return ""String_Node_Str"";
case Second:
  return ""String_Node_Str"";
case Third:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}","public String toString(){
switch (this) {
case First:
    return ""String_Node_Str"";
case Second:
  return ""String_Node_Str"";
case Third:
return ""String_Node_Str"";
default :
return null;
}
}",0.9514066496163684
24289,"/** 
 * Note: This is slightly different than what is described in H&K EMNLP 09. I think the head rules they used were slightly different (or possibly their description is a little off). The Stanford Parser API says that for sentences like ""painter Pablo Picasso"", the head is ""painter"", and thus their are mentions for ""painter Pablo Picasso"" and ""Pablo Picasso"" but not just ""painter"". Therefore, we connect ""painter Pablo Picasso"" and ""Pablo Picasso"" by looking at the NP *PREVIOUS* to ""Pablo Picasso"" to see if it is a person, rather than subsequent to it, as H&K describe.
 * @param m
 * @param d
 * @return
 */
private static Mention findAntecedentInRoleAppositiveConstruction(Mention m,Document d){
  Tree root=m.getSentence().getRootNode();
  Tree node=m.getNode();
  Tree parent=node.parent(root);
  if (!parent.label().value().equals(""String_Node_Str"")) {
    return null;
  }
  int index=parent.indexOf(node);
  if (index - 1 < 0) {
    return null;
  }
  Tree nextSibling=parent.getChild(index - 1);
  HeadFinder headFinder=AnalysisUtilities.getInstance().getHeadFinder();
  if (nextSibling.label().value().equals(""String_Node_Str"") && parent.headTerminal(headFinder) == nextSibling.headTerminal(headFinder) && m.neType().matches(""String_Node_Str"")) {
    Tree maxProj=SyntacticPaths.getMaximalProjection(parent,root);
    for (    Mention m2 : d.getMentions()) {
      if (maxProj == m2.getNode()) {
        return m2;
      }
    }
  }
  return null;
}","/** 
 * Note: This is slightly different than what is described in H&K EMNLP 09. I think the head rules they used were slightly different (or possibly their description is a little off).
 * @param m
 * @param d
 * @return
 */
private static Mention findAntecedentInRoleAppositiveConstruction(Mention m,Document d){
  Tree root=m.getSentence().getRootNode();
  Tree node=m.getNode();
  Tree parent=node.parent(root);
  if (!parent.label().value().equals(""String_Node_Str"")) {
    return null;
  }
  int index=parent.indexOf(node);
  if (index + 1 >= parent.numChildren()) {
    return null;
  }
  TregexPattern pat=TregexPatternFactory.getPattern(""String_Node_Str"");
  TregexMatcher matcher=pat.matcher(parent);
  while (matcher.find()) {
    if (matcher.getNode(""String_Node_Str"") == node) {
      Tree head=matcher.getNode(""String_Node_Str"");
      Tree maxProj=SyntacticPaths.getMaximalProjection(head,root);
      for (      Mention cand : d.getMentions()) {
        if (cand.getNode() == maxProj) {
          if (cand.neType().matches(""String_Node_Str"")) {
            return cand;
          }
          break;
        }
      }
    }
  }
  return null;
}",0.5104761904761905
24290,"private static void addInternalNPStructureForRoleAppositives(Tree tree){
  TreeFactory factory=new LabeledScoredTreeFactory();
  String patS=""String_Node_Str"";
  TregexPattern pat=TregexPatternFactory.getPattern(patS);
  TregexMatcher matcher=pat.matcher(tree);
  String prevLabelS=""String_Node_Str"";
  String curLabelS;
  Tree tmp;
  int start;
  Tree newNode;
  while (matcher.find()) {
    Tree parentNP=matcher.getNode(""String_Node_Str"");
    start=-1;
    boolean endOfSubseq;
    for (int i=0; i < parentNP.numChildren(); i++) {
      endOfSubseq=false;
      tmp=parentNP.getChild(i);
      curLabelS=tmp.label().value();
      if (start == -1) {
        if (curLabelS.matches(""String_Node_Str"")) {
          start=i;
        }
      }
 else {
        if (prevLabelS.matches(""String_Node_Str"")) {
          endOfSubseq=!curLabelS.matches(""String_Node_Str"");
        }
 else         if (prevLabelS.matches(""String_Node_Str"")) {
          endOfSubseq=!curLabelS.matches(""String_Node_Str"");
        }
      }
      if (endOfSubseq) {
        newNode=factory.newTreeNode(""String_Node_Str"",new ArrayList<Tree>());
        for (int j=0; j < i - start; j++) {
          newNode.addChild(parentNP.getChild(start));
          parentNP.removeChild(start);
        }
        parentNP.addChild(start,newNode);
        i=start + 1;
        if (curLabelS.matches(""String_Node_Str"")) {
          start=i;
        }
 else {
          start=-1;
        }
      }
      prevLabelS=curLabelS;
    }
    if (start != -1) {
      newNode=factory.newTreeNode(""String_Node_Str"",new ArrayList<Tree>());
      for (int j=0; j < parentNP.numChildren() - start + 1; j++) {
        newNode.addChild(parentNP.getChild(start));
        parentNP.removeChild(start);
      }
      parentNP.addChild(start,newNode);
    }
  }
}","private static void addInternalNPStructureForRoleAppositives(Tree tree){
  TreeFactory factory=new LabeledScoredTreeFactory();
  String patS=""String_Node_Str"";
  TregexPattern pat=TregexPatternFactory.getPattern(patS);
  TregexMatcher matcher=pat.matcher(tree);
  String prevLabelS=""String_Node_Str"";
  String curLabelS;
  Tree tmp;
  int start;
  Tree newNode;
  while (matcher.find()) {
    Tree parentNP=matcher.getNode(""String_Node_Str"");
    start=-1;
    boolean endOfSubseq;
    for (int i=0; i < parentNP.numChildren(); i++) {
      endOfSubseq=false;
      tmp=parentNP.getChild(i);
      curLabelS=tmp.label().value();
      if (start == -1) {
        if (curLabelS.matches(""String_Node_Str"")) {
          start=i;
        }
      }
 else {
        if (prevLabelS.matches(""String_Node_Str"")) {
          endOfSubseq=!curLabelS.matches(""String_Node_Str"");
        }
      }
      if (endOfSubseq) {
        newNode=factory.newTreeNode(""String_Node_Str"",new ArrayList<Tree>());
        for (int j=0; j < i - start; j++) {
          newNode.addChild(parentNP.getChild(start));
          parentNP.removeChild(start);
        }
        parentNP.addChild(start,newNode);
        i=start + 1;
        if (curLabelS.matches(""String_Node_Str"")) {
          start=i;
        }
 else {
          start=-1;
        }
      }
      prevLabelS=curLabelS;
    }
    if (start != -1) {
      newNode=factory.newTreeNode(""String_Node_Str"",new ArrayList<Tree>());
      for (int j=0; j < parentNP.numChildren() - start + 1; j++) {
        newNode.addChild(parentNP.getChild(start));
        parentNP.removeChild(start);
      }
      parentNP.addChild(start,newNode);
    }
  }
}",0.962557603686636
24291,"public void testRoleAppositives() throws IOException {
  Document d=Document.loadFiles(""String_Node_Str"");
  _Pipeline.go(d);
  assertTrue(d.getMentions().toString(),d.getMentions().size() == 8);
  Mention m1=d.getMentions().get(0);
  Mention m2=d.getMentions().get(1);
  Mention m5=d.getMentions().get(4);
  Mention m6=d.getMentions().get(5);
  Mention m7=d.getMentions().get(6);
  System.err.println(d.getMentions().toString());
  assertTrue(m1.getNode().yield().toString(),m1.getNode().yield().toString().equalsIgnoreCase(""String_Node_Str""));
  assertTrue(m2.getNode().yield().toString(),m2.getNode().yield().toString().equalsIgnoreCase(""String_Node_Str""));
  assertTrue(m5.getNode().yield().toString(),m5.getNode().yield().toString().equalsIgnoreCase(""String_Node_Str""));
  assertTrue(m6.getNode().yield().toString(),m6.getNode().yield().toString().equalsIgnoreCase(""String_Node_Str""));
  assertTrue(m7.getNode().yield().toString(),m7.getNode().yield().toString().equalsIgnoreCase(""String_Node_Str""));
  assertTrue(m2.getNode().toString(),d.getEntGraph().getLinkedMentions(m2).contains(m1));
  assertTrue(m7.getNode().toString(),d.getEntGraph().getLinkedMentions(m7).contains(m5));
  assertTrue(m6.getNode().toString(),d.getEntGraph().getLinkedMentions(m6).contains(m5));
}","public void testRoleAppositives() throws IOException {
  Document d=Document.loadFiles(""String_Node_Str"");
  _Pipeline.go(d);
  assertTrue(d.getMentions().toString(),d.getMentions().size() == 8);
  Mention m1=d.getMentions().get(0);
  Mention m2=d.getMentions().get(1);
  Mention m5=d.getMentions().get(4);
  Mention m6=d.getMentions().get(5);
  Mention m7=d.getMentions().get(6);
  assertTrue(m1.getNode().yield().toString(),m1.getNode().yield().toString().equalsIgnoreCase(""String_Node_Str""));
  assertTrue(m2.getNode().yield().toString(),m2.getNode().yield().toString().equalsIgnoreCase(""String_Node_Str""));
  assertTrue(m5.getNode().yield().toString(),m5.getNode().yield().toString().equalsIgnoreCase(""String_Node_Str""));
  assertTrue(m6.getNode().yield().toString(),m6.getNode().yield().toString().equalsIgnoreCase(""String_Node_Str""));
  assertTrue(m7.getNode().yield().toString(),m7.getNode().yield().toString().equalsIgnoreCase(""String_Node_Str""));
  assertTrue(m2.getNode().toString(),d.getEntGraph().getLinkedMentions(m2).contains(m1));
  assertTrue(m7.getNode().toString(),d.getEntGraph().getLinkedMentions(m7).contains(m5));
  assertTrue(m6.getNode().toString(),d.getEntGraph().getLinkedMentions(m6).contains(m5));
}",0.9800319488817892
24292,"public Tree getTree(){
  if (tree == null) {
    TreeFactory factory=new LabeledScoredTreeFactory();
    tree=factory.newTreeNode(""String_Node_Str"",new ArrayList<Tree>());
    for (int i=0; i < sentences.size(); i++) {
      tree.addChild(sentences.get(i).getRootNode());
    }
  }
  return tree;
}","/** 
 * make a right branching tree out of all the sentence trees e.g., (DOCROOT T1 (DOCROOT T2 (DOCROOT T3)))  This will make sure that ndoes in t3 are further from nodes in t1  than they are fromnodes in t2.
 * @return
 */
public Tree getTree(){
  if (tree == null) {
    TreeFactory factory=new LabeledScoredTreeFactory();
    tree=factory.newTreeNode(""String_Node_Str"",new ArrayList<Tree>());
    Tree tmpTree1=tree;
    Tree tmpTree2;
    for (int i=0; i < sentences.size(); i++) {
      tmpTree1.addChild(sentences.get(i).getRootNode());
      if (i < sentences.size() - 1) {
        tmpTree2=factory.newTreeNode(""String_Node_Str"",new ArrayList<Tree>());
        tmpTree1.addChild(tmpTree2);
        tmpTree1=tmpTree2;
      }
    }
  }
  return tree;
}",0.5581835383159887
24293,"public static void go(Document d){
  System.out.println(""String_Node_Str"");
  int id=0;
  String patS=""String_Node_Str"";
  TregexPattern pat=TregexPatternFactory.getPattern(patS);
  for (  Sentence s : d.sentences) {
    TregexMatcher matcher=pat.matcher(s.root);
    while (matcher.find()) {
      Tree match=matcher.getMatch();
      Mention mention=new Mention(++id,s,match);
      System.out.println(""String_Node_Str"" + mention);
      d.mentions.add(mention);
      d.node2mention.put(match,mention);
    }
  }
}","public static void go(Document d){
  System.out.println(""String_Node_Str"");
  int id=0;
  String patS=""String_Node_Str"";
  TregexPattern pat=TregexPatternFactory.getPattern(patS);
  for (  Sentence s : d.sentences) {
    TregexMatcher matcher=pat.matcher(s.root);
    while (matcher.find()) {
      Tree match=matcher.getMatch();
      Mention mention=new Mention(++id,s,match);
      System.out.println(""String_Node_Str"" + mention);
      d.mentions.add(mention);
      d.set_node2mention(s,match,mention);
    }
  }
}",0.9787644787644788
24294,"public static void go(Document d){
  System.out.println(""String_Node_Str"");
  TregexPattern pat=TregexPatternFactory.getPattern(""String_Node_Str"");
  for (  Sentence s : d.sentences) {
    TregexMatcher matcher=pat.matcher(s.root);
    while (matcher.find()) {
      Tree NP=matcher.getNode(""String_Node_Str"");
      Tree PRP=matcher.getNode(""String_Node_Str"");
      String pronoun=pronoun(PRP);
      Mention mention=d.node2mention.get(NP);
      System.out.println(""String_Node_Str"" + mention);
      System.out.println(""String_Node_Str"" + pronoun);
      resolve(mention,pronoun,d);
    }
  }
}","public static void go(Document d){
  System.out.println(""String_Node_Str"");
  TregexPattern pat=TregexPatternFactory.getPattern(""String_Node_Str"");
  for (  Sentence s : d.sentences) {
    TregexMatcher matcher=pat.matcher(s.root);
    while (matcher.find()) {
      Tree NP=matcher.getNode(""String_Node_Str"");
      Tree PRP=matcher.getNode(""String_Node_Str"");
      String pronoun=pronoun(PRP);
      Mention mention=d.node2mention(s,NP);
      System.out.println(""String_Node_Str"" + mention);
      System.out.println(""String_Node_Str"" + pronoun);
      resolve(mention,pronoun,d);
    }
  }
}",0.9932998324958124
24295,"public Document(){
  sentences=new ArrayList<Sentence>();
  mentions=new ArrayList<Mention>();
  node2mention=new HashMap<Tree,Mention>();
  refGraph=new RefGraph();
}","public Document(){
  sentences=new ArrayList<Sentence>();
  mentions=new ArrayList<Mention>();
  node2mention=new HashMap();
  refGraph=new RefGraph();
}",0.95625
24296,"public Sentence(int id){
  this.id=id;
  words=new ArrayList<Word>();
  node2word=new HashMap<Tree,Word>();
}","public Sentence(int id){
  this.id=id;
  words=new ArrayList<Word>();
  node2word=new HashMap();
}",0.9468599033816424
24297,"private void assemblePlayer(float x,float y){
  Entity player=EntityFactory.createPlayer(world,x,y);
  player.addToWorld();
  groupManager.add(player,""String_Node_Str"");
  Entity mouseCursor=EntityFactory.createMouseCursor(world,x,y);
  mouseCursor.addToWorld();
  final Inbetween inbetween=new Inbetween(player,mouseCursor);
  inbetween.tween=0.4f;
  Entity midpoint=world.createEntity().addComponent(new Pos(0,0)).addComponent(inbetween);
  midpoint.addToWorld();
  world.createEntity().addComponent(new Pos(0,0)).addComponent(new Physics()).addComponent(new Homing(midpoint)).addComponent(new CameraFocus()).addToWorld();
  Entity rifle=EntityFactory.createGrenadeLauncher(world,x,y,player).addComponent(new Aim(mouseCursor));
  rifle.addToWorld();
  Inventory inventory=new Inventory();
  inventory.weapon=rifle;
  player.addComponent(inventory);
  tagManager.register(""String_Node_Str"",player);
}","private void assemblePlayer(float x,float y){
  Entity player=EntityFactory.createPlayer(world,x,y);
  player.addToWorld();
  groupManager.add(player,""String_Node_Str"");
  Entity mouseCursor=EntityFactory.createMouseCursor(world,x,y);
  mouseCursor.addToWorld();
  final Inbetween inbetween=new Inbetween(player,mouseCursor);
  inbetween.tween=0.4f;
  Entity midpoint=world.createEntity().addComponent(new Pos(0,0)).addComponent(inbetween);
  midpoint.addToWorld();
  world.createEntity().addComponent(new Pos(0,0)).addComponent(new Physics()).addComponent(new Homing(midpoint)).addComponent(new CameraFocus()).addToWorld();
  Entity rifle=EntityFactory.createRifle(world,x,y,player).addComponent(new Aim(mouseCursor));
  rifle.addToWorld();
  Inventory inventory=new Inventory();
  inventory.weapon=rifle;
  player.addComponent(inventory);
  tagManager.register(""String_Node_Str"",player);
}",0.9888392857142856
24298,"public static Entity createShotgun(World world,float x,float y,Entity player){
  Weapon weapon=new Weapon();
  weapon.fireCooldown=0.25f;
  weapon.minBullets=8;
  weapon.maxBullets=10;
  weapon.spread=20;
  weapon.bulletSpeed*=0.9f;
  weapon.bulletAnimId=""String_Node_Str"";
  weapon.shellParticle=""String_Node_Str"";
  return newPositioned(world,x,y).addComponent(new Anim(""String_Node_Str"",Anim.Layer.PLAYER_ARM,WEAPON_ROT_ORIGIN_X,WEAPON_ROT_ORIGIN_Y)).addComponent(new Attached(player,PLAYER_WEAPON_MOUNT_X - WEAPON_ROT_ORIGIN_X,PLAYER_WEAPON_MOUNT_Y - WEAPON_ROT_ORIGIN_Y)).addComponent(weapon).addComponent(new Bounds(G.CELL_SIZE,G.CELL_SIZE));
}","public static Entity createShotgun(World world,float x,float y,Entity player){
  Weapon weapon=new Weapon();
  weapon.fireCooldown=0.25f;
  weapon.minBullets=8;
  weapon.maxBullets=10;
  weapon.bulletPayload.maxLifetime=0.5f;
  weapon.spread=20;
  weapon.bulletSpeed*=0.9f;
  weapon.bulletAnimId=""String_Node_Str"";
  weapon.shellParticle=""String_Node_Str"";
  return newPositioned(world,x,y).addComponent(new Anim(""String_Node_Str"",Anim.Layer.PLAYER_ARM,WEAPON_ROT_ORIGIN_X,WEAPON_ROT_ORIGIN_Y)).addComponent(new Attached(player,PLAYER_WEAPON_MOUNT_X - WEAPON_ROT_ORIGIN_X,PLAYER_WEAPON_MOUNT_Y - WEAPON_ROT_ORIGIN_Y)).addComponent(weapon).addComponent(new Bounds(G.CELL_SIZE,G.CELL_SIZE));
}",0.9694258016405668
24299,"public static Entity createRifle(World world,float x,float y,Entity player){
  Weapon weapon=new Weapon();
  weapon.shellParticle=""String_Node_Str"";
  weapon.recoil=2;
  return newPositioned(world,x,y).addComponent(new Anim(""String_Node_Str"",Anim.Layer.PLAYER_ARM,WEAPON_ROT_ORIGIN_X,WEAPON_ROT_ORIGIN_Y)).addComponent(new Attached(player,PLAYER_WEAPON_MOUNT_X - WEAPON_ROT_ORIGIN_X,PLAYER_WEAPON_MOUNT_Y - WEAPON_ROT_ORIGIN_Y)).addComponent(weapon).addComponent(new Bounds(G.CELL_SIZE,G.CELL_SIZE));
}","public static Entity createRifle(World world,float x,float y,Entity player){
  Weapon weapon=new Weapon();
  weapon.shellParticle=""String_Node_Str"";
  weapon.recoil=2;
  weapon.bulletPayload.maxLifetime=1.5f;
  return newPositioned(world,x,y).addComponent(new Anim(""String_Node_Str"",Anim.Layer.PLAYER_ARM,WEAPON_ROT_ORIGIN_X,WEAPON_ROT_ORIGIN_Y)).addComponent(new Attached(player,PLAYER_WEAPON_MOUNT_X - WEAPON_ROT_ORIGIN_X,PLAYER_WEAPON_MOUNT_Y - WEAPON_ROT_ORIGIN_Y)).addComponent(weapon).addComponent(new Bounds(G.CELL_SIZE,G.CELL_SIZE));
}",0.9607655502392344
24300,"public MainScreen(){
  G.screen=this;
  G.world=new World();
  G.world.setSystem(new AssetSystem());
  G.world.setSystem(new MapSystem());
  G.world.setSystem(new EntitySpawnSystem());
  G.world.setSystem(new CameraSystem());
  G.world.setSystem(new PlayerControlSystem());
  G.world.setSystem(new GravitySystem());
  G.world.setSystem(new MapCollisionSystem());
  G.world.setSystem(new AfterPhysicsSystem());
  G.world.setSystem(new CameraFocusSystem());
  G.world.setSystem(new MapRenderSystem());
  G.world.setSystem(new AnimRenderSystem());
  G.world.initialize();
}","public MainScreen(){
  G.screen=this;
  G.world=new World();
  G.world.setSystem(new TerminalSystem());
  G.world.setSystem(new AssetSystem());
  G.world.setSystem(new MapSystem());
  G.world.setSystem(new EntitySpawnSystem());
  G.world.setSystem(new CameraSystem());
  G.world.setSystem(new PlayerControlSystem());
  G.world.setSystem(new GravitySystem());
  G.world.setSystem(new MapCollisionSystem());
  G.world.setSystem(new AfterPhysicsSystem());
  G.world.setSystem(new CameraFocusSystem());
  G.world.setSystem(new MapRenderSystem());
  G.world.setSystem(new AnimRenderSystem());
  G.world.initialize();
}",0.9636517328825022
24301,"@Override protected void process(Entity e){
  final Physics physics=ym.get(e);
  final Pos pos=pm.get(e);
  pos.x+=physics.vx;
  pos.y+=physics.vy;
}","@Override protected void process(Entity e){
  final Physics physics=ym.get(e);
  final Pos pos=pm.get(e);
  pos.x+=physics.vx * world.getDelta();
  pos.y+=physics.vy * world.getDelta();
}",0.8869047619047619
24302,"@Override protected void process(Entity e){
  final Physics physics=pm.get(e);
  final Gravity gravity=gm.get(e);
  physics.vy+=gravity.y * world.delta;
  physics.vx+=gravity.x * world.delta;
}","@Override protected void process(Entity e){
  final Physics physics=pm.get(e);
  final Gravity gravity=gm.get(e);
  physics.vy+=gravity.y * 100 * world.delta;
  physics.vx+=gravity.x * GRAVITY_FACTOR * world.delta;
}",0.9437652811735942
24303,"@Override protected void process(Entity e){
  final Physics physics=ym.get(e);
  final Pos pos=pm.get(e);
  final Bounds bounds=bm.get(e);
  float px=pos.x + physics.vx * world.delta;
  float py=pos.y + physics.vy * world.delta;
  if ((physics.vx > 0 && solidMask.atScreen(px + bounds.x2,py + bounds.y1 + (bounds.y2 - bounds.y1) * 0.5f)) || (physics.vx < 0 && solidMask.atScreen(px + bounds.x1,py + bounds.y1 + (bounds.y2 - bounds.y1) * 0.5f))) {
    physics.vx=0;
    px=pos.x;
  }
  if ((physics.vy > 0 && solidMask.atScreen(px + bounds.x1 + (bounds.x2 - bounds.x1) * 0.5f,py + bounds.y2)) || (physics.vy < 0 && solidMask.atScreen(px + bounds.x1 + (bounds.x2 - bounds.x1) * 0.5f,py + bounds.y1))) {
    physics.vy=0;
    py=pos.x;
  }
}","@Override protected void process(Entity e){
  final Physics physics=ym.get(e);
  final Pos pos=pm.get(e);
  final Bounds bounds=bm.get(e);
  if (physics.vx == 0 && physics.vy == 0)   return;
  float px=pos.x + physics.vx * world.delta;
  float py=pos.y + physics.vy * world.delta;
  if ((physics.vx > 0 && collides(px + bounds.x2,py + bounds.y1 + (bounds.y2 - bounds.y1) * 0.5f)) || (physics.vx < 0 && collides(px + bounds.x1,py + bounds.y1 + (bounds.y2 - bounds.y1) * 0.5f))) {
    physics.vx=0;
    px=pos.x;
  }
  if ((physics.vy > 0 && collides(px + bounds.x1 + (bounds.x2 - bounds.x1) * 0.5f,py + bounds.y2)) || (physics.vy < 0 && collides(px + bounds.x1 + (bounds.x2 - bounds.x1) * 0.5f,py + bounds.y1))) {
    physics.vy=0;
  }
}",0.8846675712347354
24304,"@Override protected void process(Entity e){
  Physics physics=pm.get(e);
  float dx=0;
  float dy=0;
  if (Gdx.input.isKeyPressed(Input.Keys.A))   dx=-1;
  if (Gdx.input.isKeyPressed(Input.Keys.D))   dx=1;
  if (Gdx.input.isKeyPressed(Input.Keys.S))   dy=-1;
  if (Gdx.input.isKeyPressed(Input.Keys.W))   dy=1;
  if (dx != 0)   physics.vx=dx * 5;
  if (dy != 0)   physics.vy=dy * 5;
}","@Override protected void process(Entity e){
  Physics physics=pm.get(e);
  float dx=0;
  float dy=0;
  if (Gdx.input.isKeyPressed(Input.Keys.A))   dx=-1;
  if (Gdx.input.isKeyPressed(Input.Keys.D))   dx=1;
  if (Gdx.input.isKeyPressed(Input.Keys.S))   dy=-1;
  if (Gdx.input.isKeyPressed(Input.Keys.W))   dy=1;
  if (dx != 0)   physics.vx=dx * 100;
  if (dy != 0)   physics.vy=dy * 100;
}",0.9896373056994818
24305,"public AssetSystem(){
  font=new BitmapFont(Gdx.files.internal(""String_Node_Str""),false);
  font.setColor(0,0,0,0.9f);
  tileset=new Texture(""String_Node_Str"");
  add(""String_Node_Str"",0,0,TILE_SIZE,TILE_SIZE,1);
  add(""String_Node_Str"",32,224,TILE_SIZE,TILE_SIZE,1);
  add(""String_Node_Str"",0,448,TILE_SIZE,TILE_SIZE,1);
}","public AssetSystem(){
  font=new BitmapFont(Gdx.files.internal(""String_Node_Str""),false);
  font.setColor(0,0,0,0.9f);
  tileset=new Texture(""String_Node_Str"");
  add(""String_Node_Str"",0,0,TILE_SIZE,TILE_SIZE,1);
  add(""String_Node_Str"",32,224,TILE_SIZE,TILE_SIZE,1);
  add(""String_Node_Str"",0,448,TILE_SIZE,TILE_SIZE,1);
  add(""String_Node_Str"",44,51,3,3,1);
}",0.9444444444444444
24306,"@Override public View getView(int position,View convertView,ViewGroup parent){
  int viewType=getItemViewType(position);
  boolean hasImg=TYPE_IMAGE == viewType || TYPE_IMAGE_SANS_DESCRIPTION == viewType;
  ViewFeedItem view=null != convertView ? (ViewFeedItem)convertView : new ViewFeedItem(m_context,viewType);
  FeedItem item=m_feedItems.get(position);
  boolean isRead=READ_ITEM_TIMES.contains(item.m_time);
  view.m_item=item;
  view.hasImage=hasImg;
  view.setAlpha(isRead && !hasImg ? 0.5F : 1.0F);
  view.setBackgroundColor(isRead ? Color.TRANSPARENT : Color.WHITE);
  if (hasImg) {
    view.setBitmap(null);
    view.setTag(position);
    AsyncLoadImage.newInstance(view,item.m_imageName,position,isRead ? 0.5F : 1.0F);
  }
  if (parent.isShown() && m_isReadingItems) {
    READ_ITEM_TIMES.add(item.m_time);
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  int viewType=getItemViewType(position);
  boolean hasImg=TYPE_IMAGE == viewType || TYPE_IMAGE_SANS_DESCRIPTION == viewType;
  ViewFeedItem view=null != convertView ? (ViewFeedItem)convertView : new ViewFeedItem(m_context,viewType);
  FeedItem item=m_feedItems.get(position);
  boolean isRead=READ_ITEM_TIMES.contains(item.m_time);
  view.m_item=item;
  view.m_hasImage=hasImg;
  view.setAlpha(isRead ? 0.5F : 1.0F);
  view.setBackgroundColor(isRead ? Color.TRANSPARENT : Color.WHITE);
  if (hasImg) {
    view.setBitmap(null);
    view.setTag(position);
    AsyncLoadImage.newInstance(view,item.m_imageName,position);
  }
  if (parent.isShown() && m_isReadingItems && ListFragmentTag.s_hasScrolled) {
    READ_ITEM_TIMES.add(item.m_time);
  }
  return view;
}",0.9600477042337509
24307,"private AsyncLoadImage(ViewFeedItem view,int viewTag,float opacity){
  m_context=view.getContext();
  m_view=new WeakReference<>(view);
  m_viewTag=viewTag;
  m_opacity=opacity;
}","private AsyncLoadImage(ViewFeedItem view,int viewTag){
  m_context=view.getContext();
  m_view=new WeakReference<>(view);
  m_viewTag=viewTag;
}",0.891640866873065
24308,"static void newInstance(ViewFeedItem view,String imageName,int viewTag,float opacity){
  AsyncTask<String,Void,Bitmap> task=new AsyncLoadImage(view,viewTag,opacity);
  task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,imageName);
}","static void newInstance(ViewFeedItem view,String imageName,int viewTag){
  AsyncTask<String,Void,Bitmap> task=new AsyncLoadImage(view,viewTag);
  task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,imageName);
}",0.9508928571428572
24309,"@Override protected void onPostExecute(Bitmap result){
  if (isCancelled()) {
    return;
  }
  ViewFeedItem view=m_view.get();
  if (null != view && (Integer)view.getTag() == m_viewTag && null != result) {
    AlphaAnimation animation=new AlphaAnimation(0.0F,m_opacity);
    animation.setDuration(IMAGE_FADE_IN_DURATION);
    animation.setFillAfter(true);
    view.setBitmap(result);
    view.setAnimation(animation);
  }
}","@Override protected void onPostExecute(Bitmap result){
  if (isCancelled()) {
    return;
  }
  ViewFeedItem view=m_view.get();
  if (null != view && (Integer)view.getTag() == m_viewTag && null != result) {
    view.setBitmap(result);
  }
}",0.6626506024096386
24310,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  AdapterTags.READ_ITEM_TIMES.addAll(Read.longSet(this,READ_ITEMS));
  FragmentManager manager=getFragmentManager();
  FragmentTransaction transaction=manager.beginTransaction();
  m_FragmentNavigationDrawer=(FragmentNavigationDrawer)manager.findFragmentById(R.id.navigation_drawer);
  m_FragmentNavigationDrawer.setUp(R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.drawer_layout));
  AsyncNavigationAdapter.update(this);
  for (int i=0; FRAGMENT_TAGS.length > i; i++) {
    Fragment fragment=getFragment(manager,FRAGMENT_TAGS[i]);
    if (!fragment.isAdded()) {
      transaction.add(R.id.content_frame,fragment,FRAGMENT_TAGS[i]);
    }
    if (0 != i && !fragment.isHidden()) {
      transaction.hide(fragment);
    }
  }
  transaction.commit();
  m_currentFragment=FRAGMENT_TAGS[0];
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  AdapterTags.READ_ITEM_TIMES.addAll(Read.longSet(this,READ_ITEMS));
  FragmentManager manager=getFragmentManager();
  FragmentTransaction transaction=manager.beginTransaction();
  m_FragmentNavigationDrawer=(FragmentNavigationDrawer)manager.findFragmentById(R.id.navigation_drawer);
  m_FragmentNavigationDrawer.setUp(R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.drawer_layout));
  AsyncNewTagAdapters.update(this);
  for (int i=0; FRAGMENT_TAGS.length > i; i++) {
    Fragment fragment=getFragment(manager,FRAGMENT_TAGS[i]);
    if (!fragment.isAdded()) {
      transaction.add(R.id.content_frame,fragment,FRAGMENT_TAGS[i]);
    }
    if (0 != i && !fragment.isHidden()) {
      transaction.hide(fragment);
    }
  }
  transaction.commit();
  m_currentFragment=FRAGMENT_TAGS[0];
}",0.9919571045576407
24311,"@Override protected void onStop(){
  super.onStop();
  Write.longSet(this,READ_ITEMS,AdapterTags.READ_ITEM_TIMES);
  setServiceIntent(ALARM_SERVICE_START);
}","@Override protected void onStop(){
  super.onStop();
  Write.longSet(this,READ_ITEMS,AdapterTags.READ_ITEM_TIMES);
  setServiceIntent(ALARM_SERVICE_START);
  ListFragmentTag.s_hasScrolled=false;
}",0.8895184135977338
24312,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  Activity activity=getActivity();
  setListAdapter(new AdapterTags(activity));
  ListView listView=getListView();
  listView.setOnScrollListener(new OnScrollFeed(activity,listView.getPaddingTop()));
  listView.setDivider(new ColorDrawable(getResources().getColor(R.color.item_separator)));
  listView.setDividerHeight(1);
  registerForContextMenu(listView);
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  final Activity activity=getActivity();
  setListAdapter(new AdapterTags(activity));
  ListView listView=getListView();
  listView.setDivider(new ColorDrawable(getResources().getColor(R.color.item_separator)));
  listView.setDividerHeight(1);
  listView.setOnScrollListener(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
      if (AbsListView.OnScrollListener.SCROLL_STATE_IDLE == scrollState) {
        AsyncNavigationAdapter.update(activity);
      }
      if (AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL == scrollState) {
        s_hasScrolled=true;
      }
    }
    @Override public void onScroll(    AbsListView v,    int fir,    int visible,    int total){
    }
  }
);
  registerForContextMenu(listView);
}",0.5562724014336917
24313,"@Override public void onDraw(Canvas canvas){
  if (hasImage && null == m_image) {
    return;
  }
  float verticalPosition=drawBase(canvas);
  verticalPosition=drawBitmap(canvas,verticalPosition);
  if (null != m_item.m_desLines && 0 != m_item.m_desLines.length && null != m_item.m_desLines[0]) {
    if (hasImage) {
      verticalPosition+=Utilities.getDp(4.0F);
    }
    drawDes(canvas,verticalPosition);
  }
}","@Override public void onDraw(Canvas canvas){
  if (m_hasImage && null == m_image) {
    return;
  }
  float verticalPosition=drawBase(canvas);
  verticalPosition=drawBitmap(canvas,verticalPosition);
  if (null != m_item.m_desLines && 0 != m_item.m_desLines.length && null != m_item.m_desLines[0]) {
    if (m_hasImage) {
      verticalPosition+=Utilities.getDp(4.0F);
    }
    drawDes(canvas,verticalPosition);
  }
}",0.9951807228915662
24314,"float drawBase(Canvas canvas){
  boolean rtl=Utilities.isTextRtl(m_item.m_title);
  float verticalPosition=m_paints[0].getTextSize() + Utilities.EIGHT_DP;
  int startPadding=rtl ? SCREEN - Utilities.EIGHT_DP : Utilities.EIGHT_DP;
  int endPadding=rtl ? Utilities.EIGHT_DP : SCREEN - Utilities.EIGHT_DP;
  Paint.Align start=rtl ? Paint.Align.RIGHT : Paint.Align.LEFT;
  Paint.Align end=rtl ? Paint.Align.LEFT : Paint.Align.RIGHT;
  m_paints[1].setTextAlign(end);
  canvas.drawText(getTime(m_item.m_time),endPadding,verticalPosition,m_paints[1]);
  String[] info={m_item.m_title,m_item.m_url};
  for (int i=0; 2 > i; i++) {
    m_paints[i].setTextAlign(start);
    canvas.drawText(info[i],startPadding,verticalPosition,m_paints[i]);
    verticalPosition+=m_paints[i].getTextSize();
  }
  return hasImage ? verticalPosition : verticalPosition + Utilities.getDp(4.0F);
}","float drawBase(Canvas canvas){
  boolean rtl=Utilities.isTextRtl(m_item.m_title);
  float verticalPosition=m_paints[0].getTextSize() + Utilities.EIGHT_DP;
  int startPadding=rtl ? SCREEN - Utilities.EIGHT_DP : Utilities.EIGHT_DP;
  int endPadding=rtl ? Utilities.EIGHT_DP : SCREEN - Utilities.EIGHT_DP;
  Paint.Align start=rtl ? Paint.Align.RIGHT : Paint.Align.LEFT;
  Paint.Align end=rtl ? Paint.Align.LEFT : Paint.Align.RIGHT;
  m_paints[1].setTextAlign(end);
  canvas.drawText(getTime(m_item.m_time),endPadding,verticalPosition,m_paints[1]);
  String[] info={m_item.m_title,m_item.m_url};
  for (int i=0; 2 > i; i++) {
    m_paints[i].setTextAlign(start);
    canvas.drawText(info[i],startPadding,verticalPosition,m_paints[i]);
    verticalPosition+=m_paints[i].getTextSize();
  }
  return m_hasImage ? verticalPosition : verticalPosition + Utilities.getDp(4.0F);
}",0.9988465974625144
24315,"@Override public View getView(int position,View convertView,ViewGroup parent){
  TextView view=(TextView)convertView;
  int viewType=getItemViewType(position);
  if (null == convertView) {
    view=new TextView(m_context);
    view.setTextColor(Color.WHITE);
    view.setTypeface(SANS_SERIF_LITE);
    view.setGravity(Gravity.CENTER_VERTICAL);
switch (viewType) {
case Types.TITLE:
      view.setMinHeight(MIN_HEIGHT_MAIN);
    view.setPadding(Paddings.V_MAIN,Paddings.H_MAIN,Paddings.V_MAIN,Paddings.H_MAIN);
  view.setTextSize(TypedValue.COMPLEX_UNIT_SP,TextSizes.MAIN);
view.setCompoundDrawablePadding(Paddings.COMPOUND_DRAWABLE);
break;
case Types.DIVIDER:
ColorDrawable divider=new ColorDrawable(Color.parseColor(""String_Node_Str""));
divider.setBounds(0,0,parent.getWidth(),3);
view.setCompoundDrawables(null,null,null,divider);
view.setCompoundDrawablePadding(Paddings.V_MAIN);
view.setPadding(Paddings.H_DIV,Paddings.V_DIV,Paddings.H_DIV,Paddings.V_DIV);
view.setText(m_context.getString(R.string.tag_title));
view.setTextSize(TypedValue.COMPLEX_UNIT_SP,TextSizes.DIV);
break;
case Types.TAG:
view.setMinHeight(MIN_HEIGHT_TAG);
view.setTextSize(TypedValue.COMPLEX_UNIT_SP,TextSizes.TAG);
view.setPadding(Paddings.H_TAG,-Paddings.V_TAG,Paddings.H_TAG,Paddings.V_TAG);
view.setLineSpacing(0.0F,0.1F);
}
}
switch (viewType) {
case Types.TITLE:
view.setText(m_navigationTitles[position]);
view.setCompoundDrawablesRelativeWithIntrinsicBounds(NAV_ICONS[position],0,0,0);
break;
case Types.TAG:
int count=getItem(position - 4).m_count;
String tag=getItem(position - 4).m_title;
String allTag=m_context.getString(R.string.all_tag);
tag=Utilities.isRtl(allTag.charAt(0)) ? (char)0x200F + tag + '\n'+ (char)0x200E : (char)0x200E + tag + '\n'+ (char)0x200F;
view.setText(tag + (0 == count ? ""String_Node_Str"" : Utilities.getLocaleInt(count)));
}
return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  TextView view=(TextView)convertView;
  int viewType=getItemViewType(position);
  if (null == convertView) {
    view=new TextView(m_context);
    view.setTextColor(Color.WHITE);
    view.setTypeface(SANS_SERIF_LITE);
    view.setGravity(Gravity.CENTER_VERTICAL);
switch (viewType) {
case Types.TITLE:
      view.setMinHeight(MIN_HEIGHT_MAIN);
    view.setPadding(Paddings.V_MAIN,Paddings.H_MAIN,Paddings.V_MAIN,Paddings.H_MAIN);
  view.setTextSize(TypedValue.COMPLEX_UNIT_SP,TextSizes.MAIN);
view.setCompoundDrawablePadding(Paddings.COMPOUND_DRAWABLE);
break;
case Types.DIVIDER:
ColorDrawable divider=new ColorDrawable(Color.parseColor(""String_Node_Str""));
divider.setBounds(0,0,parent.getWidth(),3);
view.setCompoundDrawables(null,null,null,divider);
view.setCompoundDrawablePadding(Paddings.V_MAIN);
view.setPadding(Paddings.H_DIV,Paddings.V_DIV,Paddings.H_DIV,Paddings.V_DIV);
view.setText(m_context.getString(R.string.tag_title));
view.setTextSize(TypedValue.COMPLEX_UNIT_SP,TextSizes.DIV);
break;
case Types.TAG:
view.setMinHeight(MIN_HEIGHT_TAG);
view.setTextSize(TypedValue.COMPLEX_UNIT_SP,TextSizes.TAG);
view.setPadding(Paddings.H_TAG,-Paddings.V_TAG,Paddings.H_TAG,Paddings.V_TAG);
view.setLineSpacing(0.0F,0.1F);
}
}
switch (viewType) {
case Types.TITLE:
view.setText(m_navigationTitles[position]);
view.setCompoundDrawablesRelativeWithIntrinsicBounds(NAV_ICONS[position],0,0,0);
break;
case Types.TAG:
int count=getItem(position - 4).m_count;
String tag=getItem(position - 4).m_title;
String allTag=m_context.getString(R.string.all_tag);
tag=Utilities.isTextRtl(allTag) ? (char)0x200F + tag + '\n'+ (char)0x200E : (char)0x200E + tag + '\n'+ (char)0x200F;
view.setText(tag + (0 == count ? ""String_Node_Str"" : Utilities.getLocaleInt(count)));
}
return view;
}",0.9962243797195254
24316,"@Override protected Void doInBackground(String... applicationFolder){
  String appFolder=applicationFolder[0];
  String[][] feedsIndex=Read.csvFile(Read.INDEX,appFolder,'f','u','t');
  String[] feedNames=feedsIndex[0];
  String[] feedUrls=feedsIndex[1];
  String[] feedTags=feedsIndex[2];
  int size=feedNames.length;
  Editable[] editables=new SpannableStringBuilder[size];
  for (int i=0; i < size; i++) {
    Editable editable=new SpannableStringBuilder();
    editable.append(feedNames[i]);
    editable.append(""String_Node_Str"");
    int titleLength=feedNames[i].length();
    editable.setSpan(TITLE_SIZE,0,titleLength,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    String feedContentFileName=feedNames[i] + File.separatorChar + ServiceUpdate.CONTENT_FILE;
    int feedContentSize=count(feedContentFileName,appFolder);
    String contentSize=Integer.toString(feedContentSize);
    editable.append(feedUrls[i]);
    editable.append(""String_Node_Str"");
    int thirdLinePosition=editable.length();
    editable.append(""String_Node_Str"");
    editable.setSpan(SPAN_BOLD,thirdLinePosition,editable.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    editable.append(contentSize);
    editable.append(""String_Node_Str"");
    int currentPosition=editable.length();
    editable.append(feedTags[i]);
    editable.setSpan(SPAN_BOLD,currentPosition,editable.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    editables[i]=editable;
  }
  publishProgress(editables);
  return null;
}","@Override protected Void doInBackground(String... applicationFolder){
  String appFolder=applicationFolder[0];
  String[][] feedsIndex=Read.csvFile(Read.INDEX,appFolder,'f','u','t');
  String[] feedNames=feedsIndex[0];
  String[] feedUrls=feedsIndex[1];
  String[] feedTags=feedsIndex[2];
  boolean rtl=Utilities.isTextRtl(PagerAdapterFeeds.TAG_LIST.get(0));
  char direction=rtl ? (char)0x200F : (char)0x200E;
  int size=feedNames.length;
  Editable[] editables=new SpannableStringBuilder[size];
  for (int i=0; i < size; i++) {
    Editable editable=new SpannableStringBuilder();
    editable.append(direction);
    editable.append(feedNames[i]);
    editable.append(""String_Node_Str"");
    int titleLength=editable.length();
    editable.setSpan(TITLE_SIZE,0,titleLength,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    String feedContentFileName=feedNames[i] + File.separatorChar + ServiceUpdate.CONTENT_FILE;
    int feedContentSize=count(feedContentFileName,appFolder);
    String contentSize=Utilities.getLocaleInt(feedContentSize);
    editable.append(direction);
    editable.append(feedUrls[i]);
    editable.append(""String_Node_Str"");
    int thirdLinePosition=editable.length();
    editable.append(direction);
    editable.append(""String_Node_Str"");
    editable.setSpan(SPAN_BOLD,thirdLinePosition,editable.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    editable.append(contentSize);
    editable.append(""String_Node_Str"");
    int currentPosition=editable.length();
    editable.append(feedTags[i]);
    editable.setSpan(SPAN_BOLD,currentPosition,editable.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    editables[i]=editable;
  }
  publishProgress(editables);
  return null;
}",0.9141767323585506
24317,"@Override protected NavItem[] doInBackground(String... applicationFolder){
  String appFolder=applicationFolder[0];
  String append=File.separatorChar + ServiceUpdate.ITEM_LIST;
  String[][] content=Read.csvFile(Read.INDEX,appFolder,'f','t');
  String[] feedNames=content[0];
  String[] feedTags=content[1];
  int tagTotal=PagerAdapterFeeds.TAG_LIST.size();
  int feedTotal=feedNames.length;
  NavItem[] navItems=new NavItem[tagTotal];
  List<Collection<Long>> feedItems=new ArrayList<>(feedTotal);
  for (  String feedName : feedNames) {
    feedItems.add(Read.longSet(feedName + append,appFolder));
  }
  Collection<Long> itemsInTag=new HashSet<>(0);
  for (int i=0; tagTotal > i; i++) {
    String tag=PagerAdapterFeeds.TAG_LIST.get(i);
    for (int j=0; j < feedTotal; j++) {
      if (0 == i || feedTags[j].contains(tag)) {
        itemsInTag.addAll(feedItems.get(j));
      }
    }
    itemsInTag.removeAll(AdapterTags.READ_ITEM_TIMES);
    navItems[i]=new NavItem(tag,itemsInTag.size());
    itemsInTag.clear();
  }
  return navItems;
}","@Override protected NavItem[] doInBackground(String... applicationFolder){
  String appFolder=applicationFolder[0];
  String append=File.separatorChar + ServiceUpdate.ITEM_LIST;
  String[][] content=Read.csvFile(Read.INDEX,appFolder,'f','t');
  String[] feedNames=content[0];
  String[] feedTags=content[1];
  int tagTotal=PagerAdapterFeeds.TAG_LIST.size();
  int feedTotal=feedNames.length;
  NavItem[] navItems=new NavItem[tagTotal];
  List<Collection<Long>> feedItems=new ArrayList<>(feedTotal);
  for (  String feedName : feedNames) {
    feedItems.add(Read.longSet(feedName + append,appFolder));
  }
  Collection<Long> itemsInTag=Collections.synchronizedCollection(new HashSet<Long>(0));
  for (int i=0; tagTotal > i; i++) {
    String tag=PagerAdapterFeeds.TAG_LIST.get(i);
    for (int j=0; j < feedTotal; j++) {
      if (0 == i || feedTags[j].contains(tag)) {
        itemsInTag.addAll(feedItems.get(j));
      }
    }
    itemsInTag.removeAll(AdapterTags.READ_ITEM_TIMES);
    navItems[i]=new NavItem(tag,itemsInTag.size());
    itemsInTag.clear();
  }
  return navItems;
}",0.9811853245531514
24318,"float drawBase(Canvas canvas){
  float verticalPosition=getPaddingTop() + 20.0F;
  if (Utilities.isRtl(m_item.m_title.charAt(0))) {
    PAINTS[0].setTextAlign(Paint.Align.RIGHT);
    PAINTS[1].setTextAlign(Paint.Align.RIGHT);
    canvas.drawText(m_item.m_title,screen - getPaddingRight(),verticalPosition,PAINTS[0]);
    verticalPosition+=PAINTS[0].getTextSize();
    canvas.drawText(m_item.m_url,screen - getPaddingRight(),verticalPosition,PAINTS[1]);
    PAINTS[0].setTextAlign(Paint.Align.LEFT);
    PAINTS[1].setTextAlign(Paint.Align.LEFT);
  }
 else {
    canvas.drawText(m_item.m_title,getPaddingLeft(),verticalPosition,PAINTS[0]);
    verticalPosition+=PAINTS[0].getTextSize();
    canvas.drawText(m_item.m_url,getPaddingLeft(),verticalPosition,PAINTS[1]);
  }
  return verticalPosition + PAINTS[1].getTextSize();
}","float drawBase(Canvas canvas){
  float verticalPosition=getPaddingTop() + 20.0F;
  if (Utilities.isTextRtl(m_item.m_title)) {
    PAINTS[0].setTextAlign(Paint.Align.RIGHT);
    PAINTS[1].setTextAlign(Paint.Align.RIGHT);
    canvas.drawText(m_item.m_title,screen - getPaddingRight(),verticalPosition,PAINTS[0]);
    verticalPosition+=PAINTS[0].getTextSize();
    canvas.drawText(m_item.m_url,screen - getPaddingRight(),verticalPosition,PAINTS[1]);
    PAINTS[0].setTextAlign(Paint.Align.LEFT);
    PAINTS[1].setTextAlign(Paint.Align.LEFT);
  }
 else {
    canvas.drawText(m_item.m_title,getPaddingLeft(),verticalPosition,PAINTS[0]);
    verticalPosition+=PAINTS[0].getTextSize();
    canvas.drawText(m_item.m_url,getPaddingLeft(),verticalPosition,PAINTS[1]);
  }
  return verticalPosition + PAINTS[1].getTextSize();
}",0.9914529914529916
24319,"void drawDes(Canvas canvas,float verticalPosition){
  if (m_item.m_desLines[0].isEmpty()) {
    return;
  }
  float position=verticalPosition;
  boolean rtl=Utilities.isRtl(m_item.m_desLines[0].charAt(0));
  if (rtl) {
    PAINTS[2].setTextAlign(Paint.Align.RIGHT);
  }
  for (int i=0; 3 > i; i++) {
    canvas.drawText(m_item.m_desLines[i],rtl ? screen - getPaddingRight() : getPaddingLeft(),position,PAINTS[2]);
    position+=PAINTS[2].getTextSize();
  }
  PAINTS[2].setTextAlign(Paint.Align.LEFT);
}","void drawDes(Canvas canvas,float verticalPosition){
  if (m_item.m_desLines[0].isEmpty()) {
    return;
  }
  float position=verticalPosition;
  boolean rtl=Utilities.isTextRtl(m_item.m_desLines[0]);
  if (rtl) {
    PAINTS[2].setTextAlign(Paint.Align.RIGHT);
  }
  for (int i=0; 3 > i; i++) {
    canvas.drawText(m_item.m_desLines[i],rtl ? screen - getPaddingRight() : getPaddingLeft(),position,PAINTS[2]);
    position+=PAINTS[2].getTextSize();
  }
  PAINTS[2].setTextAlign(Paint.Align.LEFT);
}",0.9859719438877756
24320,"static Fragment newInstance(final Activity activity,final String applicationFolder){
  FragmentManage fragment=new FragmentManage(activity);
  BaseAdapter baseAdapter=new AdapterManageFragments(activity);
  fragment.m_listView.setAdapter(baseAdapter);
  fragment.m_listView.setId(LIST_VIEW_MANAGE);
  fragment.m_listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Dialog dialog=DialogEditFeed.newInstance(activity,position,applicationFolder);
      dialog.show();
    }
  }
);
  AlertDialog.Builder build=new AlertDialog.Builder(activity);
  ViewPager feedPager=(ViewPager)activity.findViewById(FragmentFeeds.VIEW_PAGER_ID);
  PagerAdapterFeeds pagerAdapterFeeds=(PagerAdapterFeeds)feedPager.getAdapter();
  ListView navigationDrawer=(ListView)activity.findViewById(R.id.navigation_drawer);
  BaseAdapter navigationAdapter=(BaseAdapter)navigationDrawer.getAdapter();
  fragment.m_listView.setOnItemLongClickListener(new OnLongClickManageFeedItem(fragment.m_listView,pagerAdapterFeeds,navigationAdapter,build,applicationFolder));
  AsyncManage.newInstance(baseAdapter,applicationFolder);
  return fragment;
}","static Fragment newInstance(){
  return new FragmentManage();
}",0.0920245398773006
24321,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  m_listView.setBackgroundColor(Color.WHITE);
  m_listView.setDivider(new ColorDrawable(Color.argb(255,237,237,237)));
  m_listView.setDividerHeight(2);
  return m_listView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final Activity activity=(Activity)container.getContext();
  final String applicationFolder=FeedsActivity.getApplicationFolder(activity);
  BaseAdapter baseAdapter=new AdapterManageFragments(activity);
  ListView listView=new ListView(activity);
  listView.setAdapter(baseAdapter);
  listView.setId(LIST_VIEW_MANAGE);
  listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Dialog dialog=DialogEditFeed.newInstance(activity,position,applicationFolder);
      dialog.show();
    }
  }
);
  AlertDialog.Builder build=new AlertDialog.Builder(activity);
  ViewPager feedPager=(ViewPager)activity.findViewById(FragmentFeeds.VIEW_PAGER_ID);
  PagerAdapterFeeds pagerAdapterFeeds=(PagerAdapterFeeds)feedPager.getAdapter();
  ListView navigationDrawer=(ListView)activity.findViewById(R.id.navigation_drawer);
  BaseAdapter navigationAdapter=(BaseAdapter)navigationDrawer.getAdapter();
  listView.setOnItemLongClickListener(new OnLongClickManageFeedItem(listView,pagerAdapterFeeds,navigationAdapter,build,applicationFolder));
  listView.setBackgroundColor(Color.WHITE);
  listView.setDivider(new ColorDrawable(Color.argb(255,237,237,237)));
  listView.setDividerHeight(2);
  AsyncManage.newInstance(baseAdapter,applicationFolder);
  return listView;
}",0.3129251700680272
24322,"@Override public void onItemClick(AdapterView parent,View view,int position,long id){
  m_drawerLayout.closeDrawers();
  boolean tagWasClicked=3 < position;
  boolean feedsWasClicked=0 == position;
  int currentPage=m_tagsViewPager.getCurrentItem();
  boolean clickedDifferentPage=currentPage != position;
  String feedTitle=m_navigationTitles[0];
  String selectedTitle=tagWasClicked ? feedTitle : m_navigationTitles[position];
  if (tagWasClicked && clickedDifferentPage) {
    m_tagsViewPager.setCurrentItem(position - 4);
  }
  m_actionBar.setTitle(selectedTitle);
  boolean updateSubTitle=feedsWasClicked || tagWasClicked;
  String subtitle=updateSubTitle ? ""String_Node_Str"" + m_navAdapter.getItem(currentPage) : null;
  m_actionBar.setSubtitle(subtitle);
  FragmentTransaction transaction=m_fragmentManager.beginTransaction();
  for (  String navigationTitle : m_navigationTitles) {
    Fragment frag=m_fragmentManager.findFragmentByTag(navigationTitle);
    if (null != frag) {
      transaction.hide(frag);
    }
  }
  Fragment selectedFragment=m_fragmentManager.findFragmentByTag(selectedTitle);
  if (null == selectedFragment) {
    Activity activity=(Activity)m_drawerLayout.getContext();
    String applicationFolder=FeedsActivity.getApplicationFolder(activity);
    Fragment fragment=1 == position ? FragmentManage.newInstance(activity,applicationFolder) : FragmentSettings.newInstance();
    transaction.add(R.id.content_frame,fragment,selectedTitle);
  }
 else {
    transaction.show(selectedFragment);
  }
  transaction.commit();
}","@Override public void onItemClick(AdapterView parent,View view,int position,long id){
  m_drawerLayout.closeDrawers();
  boolean tagWasClicked=3 < position;
  boolean feedsWasClicked=0 == position;
  int currentPage=m_tagsViewPager.getCurrentItem();
  boolean clickedDifferentPage=currentPage != position;
  String feedTitle=m_navigationTitles[0];
  String selectedTitle=tagWasClicked ? feedTitle : m_navigationTitles[position];
  if (tagWasClicked && clickedDifferentPage) {
    m_tagsViewPager.setCurrentItem(position - 4);
  }
  m_actionBar.setTitle(selectedTitle);
  boolean updateSubTitle=feedsWasClicked || tagWasClicked;
  String subtitle=updateSubTitle ? ""String_Node_Str"" + m_navAdapter.getItem(currentPage) : null;
  m_actionBar.setSubtitle(subtitle);
  FragmentTransaction transaction=m_fragmentManager.beginTransaction();
  for (  String navigationTitle : m_navigationTitles) {
    Fragment frag=m_fragmentManager.findFragmentByTag(navigationTitle);
    if (null != frag) {
      transaction.hide(frag);
    }
  }
  Fragment selectedFragment=m_fragmentManager.findFragmentByTag(selectedTitle);
  if (null == selectedFragment) {
    Fragment fragment=1 == position ? FragmentManage.newInstance() : FragmentSettings.newInstance();
    transaction.add(R.id.content_frame,fragment,selectedTitle);
  }
 else {
    transaction.show(selectedFragment);
  }
  transaction.commit();
}",0.9447852760736196
24323,"@Override public void onScrollStateChanged(AbsListView view,int scrollState){
  if (!touched && listview.getVisibility() == View.VISIBLE)   touched=true;
  if (listview.getChildAt(0).getTop() < sixteen && listview.getChildAt(0).getTop() >= eight)   read_items.add(content_links.get(content_links.size() - 1));
  if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE)   main.update_navigation_data(null,false);
}","@Override public void onScrollStateChanged(AbsListView view,int scrollState){
  if (listview.getChildAt(0).getTop() == eight) {
    utilities.log(main.storage,""String_Node_Str"");
    read_items.add(content_links.get(content_links.size() - 1));
  }
  if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE)   main.update_navigation_data(null,false);
}",0.6938775510204082
24324,"@Override public View getView(int pos,View convertView,ViewGroup parent){
  final int position=total - pos - 1;
  if (first) {
    listview=(ListView)parent;
    listview.setOnScrollListener(new AbsListView.OnScrollListener(){
      @Override public void onScroll(      AbsListView view,      int firstVisibleItem,      int visibleItemCount,      int totalItemCount){
      }
      @Override public void onScrollStateChanged(      AbsListView view,      int scrollState){
        if (!touched && listview.getVisibility() == View.VISIBLE)         touched=true;
        if (listview.getChildAt(0).getTop() < sixteen && listview.getChildAt(0).getTop() >= eight)         read_items.add(content_links.get(content_links.size() - 1));
        if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE)         main.update_navigation_data(null,false);
      }
    }
);
    first=false;
  }
  ViewHolder holder;
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.card_layout,parent,false);
    holder=new ViewHolder();
    holder.title_view=(TextView)convertView.findViewById(R.id.title);
    holder.time_view=(TextView)convertView.findViewById(R.id.time);
    holder.description_view=(TextView)convertView.findViewById(R.id.description);
    holder.image_view=(ImageView)convertView.findViewById(R.id.image);
    holder.left=(ImageView)convertView.findViewById(R.id.white_left_shadow);
    holder.right=(ImageView)convertView.findViewById(R.id.white_right_shadow);
    convertView.setOnClickListener(new webview_mode());
    convertView.setOnLongClickListener(new long_press());
    convertView.setTag(holder);
  }
 else   holder=(ViewHolder)convertView.getTag();
  final String link=content_links.get(position);
  final int height=content_height.get(position);
  final int width=content_width.get(position);
  boolean image_exists=false;
  if (width == 0)   holder.image_view.setVisibility(View.GONE);
 else   image_exists=true;
  if (image_exists) {
    holder.image_view.setImageDrawable(new ColorDrawable(Color.WHITE));
    holder.image_view.setVisibility(View.VISIBLE);
    holder.left.setVisibility(View.GONE);
    holder.right.setVisibility(View.GONE);
    ViewGroup.LayoutParams iv=holder.image_view.getLayoutParams();
    iv.height=(int)((((double)screen_width) / (width)) * (height));
    iv.width=LayoutParams.MATCH_PARENT;
    holder.image_view.setLayoutParams(iv);
    holder.image_view.setPadding(0,four,0,0);
    holder.image_view.setTag(position);
    if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB)     (new image()).execute(holder,holder.image_view,holder.image_view.getTag());
 else     (new image()).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,holder.image_view,holder.image_view.getTag());
  }
  if (read_items.contains(content_links.get(position))) {
    holder.title_view.setAlpha(0.6f);
    holder.description_view.setAlpha(0.6f);
    holder.time_view.setAlpha(0.6f);
    holder.image_view.setAlpha(0.6f);
  }
 else   if (holder.title_view.getAlpha() == 0.6f) {
    holder.title_view.setAlpha(1.0f);
    holder.description_view.setAlpha(1.0f);
    holder.time_view.setAlpha(1.0f);
    holder.image_view.setAlpha(1.0f);
  }
  if (touched && position - 1 >= 0)   read_items.add(content_links.get(position - 1));
  String title=content_titles.get(position);
  String description=content_des.get(position);
  if (!description.equals(""String_Node_Str"")) {
    holder.description_view.setVisibility(View.VISIBLE);
    if (image_exists) {
      holder.left.setVisibility(View.VISIBLE);
      holder.right.setVisibility(View.VISIBLE);
      holder.description_view.setPadding(eight,four,eight,eight);
      holder.image_view.setPadding(0,four,0,four);
    }
 else     holder.description_view.setPadding(eight,two,eight,eight);
    holder.description_view.setText(description);
  }
 else {
    holder.description_view.setVisibility(View.GONE);
    if (!image_exists) {
      holder.time_view.setPadding(eight,0,eight,eight);
    }
  }
  holder.title_view.setText(title);
  holder.time_view.setText(link);
  return convertView;
}","@Override public View getView(int pos,View convertView,ViewGroup parent){
  final int position=total - pos - 1;
  if (first) {
    listview=(ListView)parent;
    listview.setOnScrollListener(new AbsListView.OnScrollListener(){
      @Override public void onScroll(      AbsListView view,      int firstVisibleItem,      int visibleItemCount,      int totalItemCount){
      }
      @Override public void onScrollStateChanged(      AbsListView view,      int scrollState){
        if (listview.getChildAt(0).getTop() == eight) {
          utilities.log(main.storage,""String_Node_Str"");
          read_items.add(content_links.get(content_links.size() - 1));
        }
        if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE)         main.update_navigation_data(null,false);
      }
    }
);
    first=false;
  }
  ViewHolder holder;
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.card_layout,parent,false);
    holder=new ViewHolder();
    holder.title_view=(TextView)convertView.findViewById(R.id.title);
    holder.time_view=(TextView)convertView.findViewById(R.id.time);
    holder.description_view=(TextView)convertView.findViewById(R.id.description);
    holder.image_view=(ImageView)convertView.findViewById(R.id.image);
    holder.left=(ImageView)convertView.findViewById(R.id.white_left_shadow);
    holder.right=(ImageView)convertView.findViewById(R.id.white_right_shadow);
    convertView.setOnClickListener(new webview_mode());
    convertView.setOnLongClickListener(new long_press());
    convertView.setTag(holder);
  }
 else   holder=(ViewHolder)convertView.getTag();
  final String link=content_links.get(position);
  final int height=content_height.get(position);
  final int width=content_width.get(position);
  boolean image_exists=false;
  if (width == 0)   holder.image_view.setVisibility(View.GONE);
 else   image_exists=true;
  if (image_exists) {
    holder.image_view.setImageDrawable(new ColorDrawable(Color.WHITE));
    holder.image_view.setVisibility(View.VISIBLE);
    holder.left.setVisibility(View.GONE);
    holder.right.setVisibility(View.GONE);
    ViewGroup.LayoutParams iv=holder.image_view.getLayoutParams();
    iv.height=(int)((((double)screen_width) / (width)) * (height));
    iv.width=LayoutParams.MATCH_PARENT;
    holder.image_view.setLayoutParams(iv);
    holder.image_view.setPadding(0,four,0,0);
    holder.image_view.setTag(position);
    if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB)     (new image()).execute(holder,holder.image_view,holder.image_view.getTag());
 else     (new image()).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,holder.image_view,holder.image_view.getTag());
  }
  if (read_items.contains(content_links.get(position))) {
    holder.title_view.setAlpha(0.6f);
    holder.description_view.setAlpha(0.6f);
    holder.time_view.setAlpha(0.6f);
    holder.image_view.setAlpha(0.6f);
  }
 else   if (holder.title_view.getAlpha() == 0.6f) {
    holder.title_view.setAlpha(1.0f);
    holder.description_view.setAlpha(1.0f);
    holder.time_view.setAlpha(1.0f);
    holder.image_view.setAlpha(1.0f);
  }
  if (listview.getVisibility() == View.VISIBLE) {
    if (position - 1 >= 0)     read_items.add(content_links.get(position - 1));
  }
  String title=content_titles.get(position);
  String description=content_des.get(position);
  if (!description.equals(""String_Node_Str"")) {
    holder.description_view.setVisibility(View.VISIBLE);
    if (image_exists) {
      holder.left.setVisibility(View.VISIBLE);
      holder.right.setVisibility(View.VISIBLE);
      holder.description_view.setPadding(eight,four,eight,eight);
      holder.image_view.setPadding(0,four,0,four);
    }
 else     holder.description_view.setPadding(eight,two,eight,eight);
    holder.description_view.setText(description);
  }
 else {
    holder.description_view.setVisibility(View.GONE);
    if (!image_exists) {
      holder.time_view.setPadding(eight,0,eight,eight);
    }
  }
  holder.title_view.setText(title);
  holder.time_view.setText(link);
  return convertView;
}",0.8850616831562232
24325,"private static void jump_to_latest_unread(){
  final int page_number=viewpager.getCurrentItem();
  int oldest_unread=-1;
  final String group_path=storage + GROUPS_DIRECTORY + current_groups.get(page_number)+ main.SEPAR;
  final String group_content_path=group_path + current_groups.get(page_number) + CONTENT_APPENDIX;
  if (!utilities.exists(group_content_path))   return;
  List<String> links=utilities.get_adapter_feeds_cards(fragment_manager,viewpager,page_number).content_links;
  final int size=links.size();
  for (int m=0; m < size; m++) {
    if (!adapter_feeds_cards.read_items.contains(links.get(m))) {
      oldest_unread=m;
      break;
    }
  }
  if (oldest_unread == 0)   oldest_unread=links.size();
  ListView lv=((ListFragment)fragment_manager.findFragmentByTag(""String_Node_Str"" + viewpager.getId() + ""String_Node_Str""+ Integer.toString(page_number))).getListView();
  if (lv == null)   return;
  if (oldest_unread == links.size()) {
    lv.setSelection(links.size());
    return;
  }
  if (oldest_unread == -1)   oldest_unread++;
  final int position=links.size() - oldest_unread - 1;
  if (position >= 0)   lv.setSelection(position);
 else   lv.setSelection(0);
}","private static void jump_to_latest_unread(){
  final int page_number=viewpager.getCurrentItem();
  int oldest_unread=-1;
  final String group_path=storage + GROUPS_DIRECTORY + current_groups.get(page_number)+ main.SEPAR;
  final String group_content_path=group_path + current_groups.get(page_number) + CONTENT_APPENDIX;
  if (!utilities.exists(group_content_path))   return;
  List<String> links=utilities.get_adapter_feeds_cards(fragment_manager,viewpager,page_number).content_links;
  final int size=links.size();
  for (int m=0; m < size; m++) {
    if (!adapter_feeds_cards.read_items.contains(links.get(m))) {
      oldest_unread=m;
      break;
    }
  }
  if (oldest_unread == 0)   oldest_unread=links.size();
  ListView lv=((ListFragment)fragment_manager.findFragmentByTag(""String_Node_Str"" + viewpager.getId() + ""String_Node_Str""+ Integer.toString(page_number))).getListView();
  if (lv == null)   return;
  if (oldest_unread == links.size()) {
    lv.setSelection(links.size());
    return;
  }
  if (oldest_unread == -1)   oldest_unread=links.size() - 1;
  final int position=links.size() - oldest_unread - 1;
  if (position >= 0)   lv.setSelection(position);
 else   lv.setSelection(0);
}",0.9626834381551362
24326,"private void remove_string_from_file(String file_path,String string,Boolean contains){
  final List<String> list=read_file_to_list(file_path);
  delete(file_path);
  try {
    final BufferedWriter out=new BufferedWriter(new FileWriter(file_path,true));
    for (    String item : list) {
      if (contains) {
        if (!item.contains(string))         out.write(item + ""String_Node_Str"");
      }
 else {
        if (!item.equals(string))         out.write(item + ""String_Node_Str"");
      }
    }
    out.close();
  }
 catch (  Exception e) {
  }
}","private static void remove_string_from_file(String file_path,String string,Boolean contains){
  final List<String> list=read_file_to_list(file_path);
  delete(file_path);
  try {
    final BufferedWriter out=new BufferedWriter(new FileWriter(file_path,true));
    for (    String item : list) {
      if (contains) {
        if (!item.contains(string))         out.write(item + ""String_Node_Str"");
      }
 else {
        if (!item.equals(string))         out.write(item + ""String_Node_Str"");
      }
    }
    out.close();
  }
 catch (  Exception e) {
  }
}",0.993688007213706
24327,"private void set_refresh(final boolean mode){
  if (optionsMenu != null) {
    final MenuItem refreshItem=optionsMenu.findItem(R.id.refresh);
    if (refreshItem != null) {
      if (mode)       refreshItem.setActionView(R.layout.progress_circle);
 else       refreshItem.setActionView(null);
    }
 else     log(""String_Node_Str"");
  }
 else   log(""String_Node_Str"");
}","private static void set_refresh(final boolean mode){
  if (optionsMenu != null) {
    final MenuItem refreshItem=optionsMenu.findItem(R.id.refresh);
    if (refreshItem != null) {
      if (mode)       refreshItem.setActionView(R.layout.progress_circle);
 else       refreshItem.setActionView(null);
    }
 else     log(""String_Node_Str"");
  }
 else   log(""String_Node_Str"");
}",0.9906291834002676
24328,"private void update_manage_feeds(){
  if (feed_list_adapter != null) {
    feed_list_adapter.clear_list();
    final List<List<String>> content=read_csv_to_list(new String[]{storage + ""String_Node_Str"" + all_string+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    final List<String> feed_titles=content.get(0);
    final List<String> feed_urls=content.get(1);
    final List<String> feed_groups=content.get(2);
    final int size=feed_titles.size();
    for (int i=0; i < size; i++)     feed_list_adapter.add_list(feed_titles.get(i),feed_urls.get(i) + ""String_Node_Str"" + feed_groups.get(i)+ ""String_Node_Str""+ Integer.toString(count_lines(storage + ""String_Node_Str"" + feed_titles.get(i)+ ""String_Node_Str"") - 1)+ ""String_Node_Str"");
    feed_list_adapter.notifyDataSetChanged();
  }
}","private static void update_manage_feeds(){
  if (feed_list_adapter != null) {
    feed_list_adapter.clear_list();
    final List<List<String>> content=read_csv_to_list(new String[]{storage + ""String_Node_Str"" + all_string+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    final List<String> feed_titles=content.get(0);
    final List<String> feed_urls=content.get(1);
    final List<String> feed_groups=content.get(2);
    final int size=feed_titles.size();
    for (int i=0; i < size; i++)     feed_list_adapter.add_list(feed_titles.get(i),feed_urls.get(i) + ""String_Node_Str"" + feed_groups.get(i)+ ""String_Node_Str""+ Integer.toString(count_lines(storage + ""String_Node_Str"" + feed_titles.get(i)+ ""String_Node_Str"") - 1)+ ""String_Node_Str"");
    feed_list_adapter.notifyDataSetChanged();
  }
}",0.995734308348568
24329,"@Override protected Long doInBackground(Void... hey){
}","@Override protected Long doInBackground(Void... hey){
  if (new_items.get(page_number)) {
    while (check_service_running()) {
      try {
        Thread.sleep(100);
      }
 catch (      Exception e) {
      }
    }
    log(""String_Node_Str"");
  }
  String group=current_groups.get(page_number);
  final String group_file_path=storage + ""String_Node_Str"" + group+ ""String_Node_Str"";
  final String group_content_path=group_file_path + ""String_Node_Str"";
  String thumbnail_path;
  if ((!exists(group_file_path)) || (!exists(group_content_path)))   return 0L;
  List<List<String>> contenter=read_csv_to_list(new String[]{group_content_path,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  List<String> marker=contenter.get(0);
  List<String> titles=contenter.get(1);
  List<String> descriptions=contenter.get(2);
  List<String> links=contenter.get(3);
  List<String> images=contenter.get(4);
  List<String> widths=contenter.get(5);
  List<String> heights=contenter.get(6);
  if (links.get(0).length() < 1)   return 0L;
  Set<String> existing_items=new HashSet<String>();
  try {
    existing_items=new HashSet<String>(get_card_adapter(page_number).return_links());
  }
 catch (  Exception e) {
  }
  final int size=titles.size();
  int width, height;
  ssize=size;
  String image;
  String tag;
  while (lv == null) {
    try {
      Thread.sleep(50);
    }
 catch (    Exception e) {
    }
    if ((viewpager != null) && (l == null))     l=(fragment_card)fragment_manager.findFragmentByTag(""String_Node_Str"" + viewpager.getId() + ""String_Node_Str""+ Integer.toString(page_number));
    if ((l != null) && (ith == null))     ith=((card_adapter)l.getListAdapter());
    if ((l != null) && (lv == null))     lv=l.getListView();
  }
  for (int m=0; m < size; m++) {
    thumbnail_path=""String_Node_Str"";
    width=0;
    height=0;
    image=images.get(m);
    if (!image.isEmpty()) {
      width=Integer.parseInt(widths.get(m));
      if (width > 32) {
        height=Integer.parseInt(heights.get(m));
        thumbnail_path=storage + ""String_Node_Str"" + image.substring(image.lastIndexOf(""String_Node_Str"") + 1,image.length());
      }
 else       width=0;
    }
    markerer=false;
    if (marker.get(m).equals(""String_Node_Str"")) {
      markerer=true;
      marker_position=0;
    }
    if (marker_position != -1)     marker_position++;
    if (existing_items.add(links.get(m)))     publishProgress(titles.get(m),descriptions.get(m),links.get(m),thumbnail_path,height,width,markerer);
  }
  new_items.set(page_number,false);
  return 0L;
}",0.0410907732536421
24330,"private void process_user_feed(AlertDialog edit_dialog,String new_group,String URL_check,String feed_name,String spinner_group,String mode){
  boolean found=false, new_group_mode=false;
  if (new_group.length() > 0) {
    new_group_mode=true;
    for (    String group : current_groups) {
      if ((group.toLowerCase()).equals(new_group))       found=true;
    }
    String[] words=new_group.split(""String_Node_Str"");
    new_group=""String_Node_Str"";
    if (words.length == 1) {
      char cap=Character.toUpperCase(words[0].charAt(0));
      new_group+=cap + words[0].substring(1,words[0].length());
    }
 else {
      for (int i=0; i < words.length - 1; i++) {
        char cap=Character.toUpperCase(words[i].charAt(0));
        new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
      }
      char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
      new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
    }
  }
 else   new_group=spinner_group;
  Boolean rss=false;
  check_finished=-1;
  if (!URL_check.contains(""String_Node_Str"")) {
    new check_feed_exists().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,""String_Node_Str"" + URL_check);
    while (check_finished == -1) {
    }
    if (check_finished == 0) {
      check_finished=-1;
      new check_feed_exists().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,""String_Node_Str"" + URL_check);
      while (check_finished == -1) {
      }
      if (check_finished == 1)       URL_check=""String_Node_Str"" + URL_check;
    }
 else     if (check_finished == 1)     URL_check=""String_Node_Str"" + URL_check;
  }
 else {
    new check_feed_exists().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,URL_check);
    while (check_finished == -1) {
    }
  }
  if (check_finished == 1)   rss=true;
  if (rss != null && !rss)   toast_message(""String_Node_Str"",false);
 else {
    if ((!found) && (new_group_mode))     add_group(new_group);
    if (feed_name.isEmpty())     feed_name=feed_title;
    feed_name=illegal_file_chars.matcher(feed_name).replaceAll(""String_Node_Str"");
    if (mode.equals(""String_Node_Str""))     edit_feed(current_title,feed_name,URL_check,current_group,new_group);
 else     add_feed(feed_name,URL_check,new_group);
    edit_dialog.dismiss();
  }
}","private static void process_user_feed(AlertDialog edit_dialog,String new_group,String URL_check,String feed_name,String spinner_group,String mode){
  boolean found=false, new_group_mode=false;
  if (new_group.length() > 0) {
    new_group_mode=true;
    for (    String group : current_groups) {
      if ((group.toLowerCase()).equals(new_group))       found=true;
    }
    String[] words=new_group.split(""String_Node_Str"");
    new_group=""String_Node_Str"";
    if (words.length == 1) {
      char cap=Character.toUpperCase(words[0].charAt(0));
      new_group+=cap + words[0].substring(1,words[0].length());
    }
 else {
      for (int i=0; i < words.length - 1; i++) {
        char cap=Character.toUpperCase(words[i].charAt(0));
        new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
      }
      char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
      new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
    }
  }
 else   new_group=spinner_group;
  Boolean rss=false;
  check_finished=-1;
  if (!URL_check.contains(""String_Node_Str"")) {
    new check_feed_exists().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,""String_Node_Str"" + URL_check);
    while (check_finished == -1) {
    }
    if (check_finished == 0) {
      check_finished=-1;
      new check_feed_exists().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,""String_Node_Str"" + URL_check);
      while (check_finished == -1) {
      }
      if (check_finished == 1)       URL_check=""String_Node_Str"" + URL_check;
    }
 else     if (check_finished == 1)     URL_check=""String_Node_Str"" + URL_check;
  }
 else {
    new check_feed_exists().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,URL_check);
    while (check_finished == -1) {
    }
  }
  if (check_finished == 1)   rss=true;
  if (rss != null && !rss)   toast_message(""String_Node_Str"",false);
 else {
    if ((!found) && (new_group_mode))     add_group(new_group);
    if (feed_name.isEmpty())     feed_name=feed_title;
    feed_name=illegal_file_chars.matcher(feed_name).replaceAll(""String_Node_Str"");
    if (mode.equals(""String_Node_Str""))     edit_feed(current_title,feed_name,URL_check,current_group,new_group);
 else     add_feed(feed_name,URL_check,new_group);
    edit_dialog.dismiss();
  }
}",0.9984851763687512
24331,"private void add_feed(String feed_name,String feed_url,String feed_group){
  append_string_to_file(storage + ""String_Node_Str"" + feed_group+ ""String_Node_Str"",""String_Node_Str"" + feed_name + ""String_Node_Str""+ feed_url+ ""String_Node_Str"");
  append_string_to_file(storage + ""String_Node_Str"" + all_string+ ""String_Node_Str"",""String_Node_Str"" + feed_name + ""String_Node_Str""+ feed_url+ ""String_Node_Str""+ feed_group+ ""String_Node_Str"");
  update_manage_feeds();
  update_manage_groups();
}","private static void add_feed(String feed_name,String feed_url,String feed_group){
  append_string_to_file(storage + ""String_Node_Str"" + feed_group+ ""String_Node_Str"",""String_Node_Str"" + feed_name + ""String_Node_Str""+ feed_url+ ""String_Node_Str"");
  append_string_to_file(storage + ""String_Node_Str"" + all_string+ ""String_Node_Str"",""String_Node_Str"" + feed_name + ""String_Node_Str""+ feed_url+ ""String_Node_Str""+ feed_group+ ""String_Node_Str"");
  update_manage_feeds();
  update_manage_groups();
}",0.992878942014242
24332,"@Override public String getPageTitle(int position){
  if (position == 0)   return getString(R.string.groups_manage_sub);
 else   return getString(R.string.feeds_manage_sub);
}","@Override public String getPageTitle(int position){
  if (position == 0)   return activity_context.getString(R.string.groups_manage_sub);
 else   return activity_context.getString(R.string.feeds_manage_sub);
}",0.9114583333333334
24333,"private void add_group(String group_name){
  append_string_to_file(storage + ""String_Node_Str"",group_name + ""String_Node_Str"");
  update_groups();
}","private static void add_group(String group_name){
  append_string_to_file(storage + ""String_Node_Str"",group_name + ""String_Node_Str"");
  update_groups();
}",0.976897689768977
24334,"private void update_group(int page_number){
  save_positions();
  set_refresh(true);
  Intent intent=new Intent(this,service_update.class);
  intent.putExtra(""String_Node_Str"",page_number);
  intent.putExtra(""String_Node_Str"",pref.getBoolean(""String_Node_Str"",false));
  startService(intent);
  if (page_number == 0) {
    for (int i=0; i < new_items.size(); i++)     new_items.set(i,true);
  }
 else {
    new_items.set(0,true);
    new_items.set(page_number,true);
  }
  new refresh_page(page_number).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}","private static void update_group(int page_number){
  save_positions();
  set_refresh(true);
  Intent intent=new Intent(activity_context,service_update.class);
  intent.putExtra(""String_Node_Str"",page_number);
  intent.putExtra(""String_Node_Str"",pref.getBoolean(""String_Node_Str"",false));
  activity_context.startService(intent);
  if (page_number == 0) {
    for (int i=0; i < new_items.size(); i++)     new_items.set(i,true);
  }
 else {
    new_items.set(0,true);
    new_items.set(page_number,true);
  }
  new refresh_page(page_number).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.961605584642234
24335,"private void save_positions(){
  card_adapter adapter;
  BufferedWriter out;
  String url, group;
  List<String> feeds, lines;
  Boolean found_url=false;
  final int size=current_groups.size();
  for (int i=1; i < size; i++) {
    try {
      group=current_groups.get(i);
      adapter=(card_adapter)((fragment_card)fragment_manager.findFragmentByTag(""String_Node_Str"" + viewpager.getId() + ""String_Node_Str""+ Integer.toString(i))).getListView().getAdapter();
      if (adapter.getCount() > 0) {
        feeds=read_csv_to_list(new String[]{storage + ""String_Node_Str"" + group+ ""String_Node_Str"",""String_Node_Str""}).get(0);
        found_url=false;
        url=adapter.return_latest_url();
        if (!url.isEmpty()) {
          for (          String feed : feeds) {
            lines=read_file_to_list(storage + ""String_Node_Str"" + feed+ ""String_Node_Str"");
            delete(storage + ""String_Node_Str"" + feed+ ""String_Node_Str"");
            out=new BufferedWriter(new FileWriter(storage + ""String_Node_Str"" + feed+ ""String_Node_Str"",true));
            for (            String line : lines) {
              if (!found_url) {
                if (!line.contains(url))                 out.write(line + ""String_Node_Str"");
 else                 if (!line.substring(0,9).equals(""String_Node_Str"")) {
                  out.write(""String_Node_Str"" + line + ""String_Node_Str"");
                  found_url=true;
                }
 else                 out.write(line + ""String_Node_Str"");
              }
 else               out.write(line + ""String_Node_Str"");
            }
            out.close();
            if (found_url)             break;
          }
          sort_group_content_by_time(group);
        }
      }
    }
 catch (    Exception e) {
    }
  }
  if (found_url)   sort_group_content_by_time(all_string);
}","private static void save_positions(){
  card_adapter adapter;
  BufferedWriter out;
  String url, group;
  List<String> feeds, lines;
  Boolean found_url=false;
  final int size=current_groups.size();
  for (int i=1; i < size; i++) {
    try {
      group=current_groups.get(i);
      adapter=(card_adapter)((fragment_card)fragment_manager.findFragmentByTag(""String_Node_Str"" + viewpager.getId() + ""String_Node_Str""+ Integer.toString(i))).getListView().getAdapter();
      if (adapter.getCount() > 0) {
        feeds=read_csv_to_list(new String[]{storage + ""String_Node_Str"" + group+ ""String_Node_Str"",""String_Node_Str""}).get(0);
        found_url=false;
        url=adapter.return_latest_url();
        if (!url.isEmpty()) {
          for (          String feed : feeds) {
            lines=read_file_to_list(storage + ""String_Node_Str"" + feed+ ""String_Node_Str"");
            delete(storage + ""String_Node_Str"" + feed+ ""String_Node_Str"");
            out=new BufferedWriter(new FileWriter(storage + ""String_Node_Str"" + feed+ ""String_Node_Str"",true));
            for (            String line : lines) {
              if (!found_url) {
                if (!line.contains(url))                 out.write(line + ""String_Node_Str"");
 else                 if (!line.substring(0,9).equals(""String_Node_Str"")) {
                  out.write(""String_Node_Str"" + line + ""String_Node_Str"");
                  found_url=true;
                }
 else                 out.write(line + ""String_Node_Str"");
              }
 else               out.write(line + ""String_Node_Str"");
            }
            out.close();
            if (found_url)             break;
          }
          sort_group_content_by_time(group);
        }
      }
    }
 catch (    Exception e) {
    }
  }
  if (found_url)   sort_group_content_by_time(all_string);
}",0.998082717063818
24336,"private card_adapter get_card_adapter(int page_index){
  return ((card_adapter)((fragment_card)fragment_manager.findFragmentByTag(""String_Node_Str"" + viewpager.getId() + ""String_Node_Str""+ Integer.toString(page_index))).getListAdapter());
}","private static card_adapter get_card_adapter(int page_index){
  return ((card_adapter)((fragment_card)fragment_manager.findFragmentByTag(""String_Node_Str"" + viewpager.getId() + ""String_Node_Str""+ Integer.toString(page_index))).getListAdapter());
}",0.9856262833675564
24337,"private void show_add_dialog(){
  LayoutInflater inflater=LayoutInflater.from(this);
  final View add_rss_dialog=inflater.inflate(R.layout.add_rss_dialog,null);
  Spinner group_spinner=(Spinner)add_rss_dialog.findViewById(R.id.group_spinner);
  List<String> spinner_groups=new ArrayList<String>();
  for (int i=1; i < current_groups.size(); i++) {
    spinner_groups.add(current_groups.get(i));
  }
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.group_spinner_text,spinner_groups);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  group_spinner.setAdapter(adapter);
  final AlertDialog alertDialog=new AlertDialog.Builder(this,2).setTitle(""String_Node_Str"").setView(add_rss_dialog).setCancelable(true).setPositiveButton(getString(R.string.add_dialog),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).setNegativeButton(getString(R.string.cancel_dialog),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).create();
  alertDialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      Button b=alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
      b.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
          String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
          String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
          String spinner_group;
          try {
            spinner_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
          }
 catch (          Exception e) {
            spinner_group=""String_Node_Str"";
          }
          process_user_feed(alertDialog,new_group,URL_check,feed_name,spinner_group,""String_Node_Str"");
        }
      }
);
    }
  }
);
  alertDialog.show();
}","private static void show_add_dialog(){
  final View add_rss_dialog=inf.inflate(R.layout.add_rss_dialog,null);
  Spinner group_spinner=(Spinner)add_rss_dialog.findViewById(R.id.group_spinner);
  List<String> spinner_groups=new ArrayList<String>();
  for (int i=1; i < current_groups.size(); i++) {
    spinner_groups.add(current_groups.get(i));
  }
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(activity_context,R.layout.group_spinner_text,spinner_groups);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  group_spinner.setAdapter(adapter);
  final AlertDialog alertDialog=new AlertDialog.Builder(activity_context,2).setTitle(""String_Node_Str"").setView(add_rss_dialog).setCancelable(true).setPositiveButton(activity_context.getString(R.string.add_dialog),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).setNegativeButton(activity_context.getString(R.string.cancel_dialog),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).create();
  alertDialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      Button b=alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
      b.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
          String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
          String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
          String spinner_group;
          try {
            spinner_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
          }
 catch (          Exception e) {
            spinner_group=""String_Node_Str"";
          }
          process_user_feed(alertDialog,new_group,URL_check,feed_name,spinner_group,""String_Node_Str"");
        }
      }
);
    }
  }
);
  alertDialog.show();
}",0.9572881355932203
24338,"private boolean check_service_running(){
  ActivityManager manager=(ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);
  for (  RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE))   if (service_update.class.getName().equals(service.service.getClassName()))   return true;
  return false;
}","private static boolean check_service_running(){
  ActivityManager manager=(ActivityManager)activity_context.getSystemService(Context.ACTIVITY_SERVICE);
  for (  RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE))   if (service_update.class.getName().equals(service.service.getClassName()))   return true;
  return false;
}",0.9640718562874252
24339,"private byte[] concat_byte_arrays(byte[] a,byte[] b){
  final int a_length=a.length;
  final int b_length=b.length;
  byte[] c=new byte[a_length + b_length];
  System.arraycopy(a,0,c,0,a_length);
  System.arraycopy(b,0,c,a_length,b_length);
  return c;
}","private static byte[] concat_byte_arrays(byte[] a,byte[] b){
  final int a_length=a.length;
  final int b_length=b.length;
  byte[] c=new byte[a_length + b_length];
  System.arraycopy(a,0,c,0,a_length);
  System.arraycopy(b,0,c,a_length,b_length);
  return c;
}",0.9864077669902912
24340,"private void update_manage_groups(){
  if (group_list_adapter != null) {
    String group, info;
    int content_size, number, j;
    List<String> content;
    group_list_adapter.clear_list();
    final int size=current_groups.size();
    for (int i=0; i < size; i++) {
      group=current_groups.get(i);
      content=read_csv_to_list(new String[]{storage + ""String_Node_Str"" + group+ ""String_Node_Str"",""String_Node_Str""}).get(0);
      content_size=content.size();
      if (i == 0)       info=(size == 1) ? ""String_Node_Str"" : size + ""String_Node_Str"";
 else {
        info=""String_Node_Str"";
        number=3;
        if (content_size < 3)         number=content_size;
        for (j=0; j < number - 1; j++)         info+=content.get(j) + ""String_Node_Str"";
        info+=(content_size > 3) ? ""String_Node_Str"" : content.get(number - 1);
      }
      group_list_adapter.add_list(group,Integer.toString(content_size) + ""String_Node_Str"" + info);
    }
    group_list_adapter.notifyDataSetChanged();
  }
}","private static void update_manage_groups(){
  if (group_list_adapter != null) {
    String group, info;
    int content_size, number, j;
    List<String> content;
    group_list_adapter.clear_list();
    final int size=current_groups.size();
    for (int i=0; i < size; i++) {
      group=current_groups.get(i);
      content=read_csv_to_list(new String[]{storage + ""String_Node_Str"" + group+ ""String_Node_Str"",""String_Node_Str""}).get(0);
      content_size=content.size();
      if (i == 0)       info=(size == 1) ? ""String_Node_Str"" : size + ""String_Node_Str"";
 else {
        info=""String_Node_Str"";
        number=3;
        if (content_size < 3)         number=content_size;
        for (j=0; j < number - 1; j++)         info+=content.get(j) + ""String_Node_Str"";
        info+=(content_size > 3) ? ""String_Node_Str"" : content.get(number - 1);
      }
      group_list_adapter.add_list(group,Integer.toString(content_size) + ""String_Node_Str"" + info);
    }
    group_list_adapter.notifyDataSetChanged();
  }
}",0.9965397923875432
24341,"private void show_edit_dialog(int position){
  poser=position;
  final LayoutInflater inflater=LayoutInflater.from(activity_context);
  final View edit_rss_dialog=inflater.inflate(R.layout.add_rss_dialog,null);
  final List<List<String>> content=read_csv_to_list(new String[]{storage + ""String_Node_Str"" + all_string+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  final String current_title=content.get(0).get(position);
  final String current_url=content.get(1).get(position);
  final String current_group=content.get(2).get(position);
  int current_spinner_position=0;
  final Spinner group_spinner=(Spinner)edit_rss_dialog.findViewById(R.id.group_spinner);
  List<String> spinner_groups=new ArrayList<String>();
  for (int i=1; i < current_groups.size(); i++) {
    spinner_groups.add(current_groups.get(i));
    if ((current_groups.get(i)).equals(current_group))     current_spinner_position=i - 1;
  }
  final ArrayAdapter<String> adapter=new ArrayAdapter<String>(activity_context,R.layout.group_spinner_text,spinner_groups);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  group_spinner.setAdapter(adapter);
  ((EditText)edit_rss_dialog.findViewById(R.id.name_edit)).setText(current_title);
  ((EditText)edit_rss_dialog.findViewById(R.id.URL_edit)).setText(current_url);
  group_spinner.setSelection(current_spinner_position);
  final AlertDialog edit_dialog=new AlertDialog.Builder(activity_context,2).setTitle(getString(R.string.edit_dialog_title)).setView(edit_rss_dialog).setCancelable(true).setPositiveButton(getString(R.string.accept_dialog),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).setNegativeButton(getString(R.string.cancel_dialog),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).create();
  edit_dialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      Button b=edit_dialog.getButton(AlertDialog.BUTTON_POSITIVE);
      b.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          String new_group=((EditText)edit_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
          String URL_check=((EditText)edit_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
          String feed_name=((EditText)edit_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
          String spinner_group=((Spinner)edit_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
          process_user_feed(edit_dialog,new_group,URL_check,feed_name,spinner_group,""String_Node_Str"");
        }
      }
);
    }
  }
);
  edit_dialog.show();
}","private static void show_edit_dialog(int position){
  poser=position;
  final LayoutInflater inflater=LayoutInflater.from(activity_context);
  final View edit_rss_dialog=inflater.inflate(R.layout.add_rss_dialog,null);
  final List<List<String>> content=read_csv_to_list(new String[]{storage + ""String_Node_Str"" + all_string+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  final String current_title=content.get(0).get(position);
  final String current_url=content.get(1).get(position);
  final String current_group=content.get(2).get(position);
  int current_spinner_position=0;
  final Spinner group_spinner=(Spinner)edit_rss_dialog.findViewById(R.id.group_spinner);
  List<String> spinner_groups=new ArrayList<String>();
  for (int i=1; i < current_groups.size(); i++) {
    spinner_groups.add(current_groups.get(i));
    if ((current_groups.get(i)).equals(current_group))     current_spinner_position=i - 1;
  }
  final ArrayAdapter<String> adapter=new ArrayAdapter<String>(activity_context,R.layout.group_spinner_text,spinner_groups);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  group_spinner.setAdapter(adapter);
  ((EditText)edit_rss_dialog.findViewById(R.id.name_edit)).setText(current_title);
  ((EditText)edit_rss_dialog.findViewById(R.id.URL_edit)).setText(current_url);
  group_spinner.setSelection(current_spinner_position);
  final AlertDialog edit_dialog=new AlertDialog.Builder(activity_context,2).setTitle(activity_context.getString(R.string.edit_dialog_title)).setView(edit_rss_dialog).setCancelable(true).setPositiveButton(activity_context.getString(R.string.accept_dialog),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).setNegativeButton(activity_context.getString(R.string.cancel_dialog),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).create();
  edit_dialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      Button b=edit_dialog.getButton(AlertDialog.BUTTON_POSITIVE);
      b.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          String new_group=((EditText)edit_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
          String URL_check=((EditText)edit_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
          String feed_name=((EditText)edit_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
          String spinner_group=((Spinner)edit_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
          process_user_feed(edit_dialog,new_group,URL_check,feed_name,spinner_group,""String_Node_Str"");
        }
      }
);
    }
  }
);
  edit_dialog.show();
}",0.9900309384668272
24342,"private void edit_feed(String old_name,String new_name,String new_url,String old_group,String new_group){
  remove_string_from_file(storage + ""String_Node_Str"" + all_string+ ""String_Node_Str"",old_name,true);
  append_string_to_file(storage + ""String_Node_Str"" + all_string+ ""String_Node_Str"",""String_Node_Str"" + new_name + ""String_Node_Str""+ new_url+ ""String_Node_Str""+ new_group+ ""String_Node_Str"");
  if (!old_name.equals(new_name))   (new File(storage + ""String_Node_Str"" + old_name+ ""String_Node_Str"")).renameTo((new File(storage + ""String_Node_Str"" + new_name+ ""String_Node_Str"")));
  if (!old_group.equals(new_group)) {
    remove_string_from_file(storage + ""String_Node_Str"" + old_group+ ""String_Node_Str"",old_name,true);
    append_string_to_file(storage + ""String_Node_Str"" + new_group+ ""String_Node_Str"",""String_Node_Str"" + new_name + ""String_Node_Str""+ new_url+ ""String_Node_Str"");
    if (!exists(""String_Node_Str"" + old_group + ""String_Node_Str""))     remove_string_from_file(storage + ""String_Node_Str"",old_group,false);
  }
 else {
    remove_string_from_file(storage + ""String_Node_Str"" + old_group+ ""String_Node_Str"",old_name,true);
    append_string_to_file(storage + ""String_Node_Str"" + old_group+ ""String_Node_Str"",""String_Node_Str"" + new_name + ""String_Node_Str""+ new_url+ ""String_Node_Str"");
  }
  feed_list_adapter.remove_item(poser);
  feed_list_adapter.add_list_pos(poser,new_name,new_url + ""String_Node_Str"" + new_group+ ""String_Node_Str""+ Integer.toString(count_lines(storage + ""String_Node_Str"" + new_name+ ""String_Node_Str"") - 1)+ ""String_Node_Str"");
  feed_list_adapter.notifyDataSetChanged();
  update_groups();
  update_manage_feeds();
  update_manage_groups();
  sort_group_content_by_time(all_string);
  if (exists(""String_Node_Str"" + old_group + ""String_Node_Str""))   sort_group_content_by_time(old_group);
  if (exists(""String_Node_Str"" + new_group + ""String_Node_Str""))   sort_group_content_by_time(new_group);
}","private static void edit_feed(String old_name,String new_name,String new_url,String old_group,String new_group){
  remove_string_from_file(storage + ""String_Node_Str"" + all_string+ ""String_Node_Str"",old_name,true);
  append_string_to_file(storage + ""String_Node_Str"" + all_string+ ""String_Node_Str"",""String_Node_Str"" + new_name + ""String_Node_Str""+ new_url+ ""String_Node_Str""+ new_group+ ""String_Node_Str"");
  if (!old_name.equals(new_name))   (new File(storage + ""String_Node_Str"" + old_name+ ""String_Node_Str"")).renameTo((new File(storage + ""String_Node_Str"" + new_name+ ""String_Node_Str"")));
  if (!old_group.equals(new_group)) {
    remove_string_from_file(storage + ""String_Node_Str"" + old_group+ ""String_Node_Str"",old_name,true);
    append_string_to_file(storage + ""String_Node_Str"" + new_group+ ""String_Node_Str"",""String_Node_Str"" + new_name + ""String_Node_Str""+ new_url+ ""String_Node_Str"");
    if (!exists(""String_Node_Str"" + old_group + ""String_Node_Str""))     remove_string_from_file(storage + ""String_Node_Str"",old_group,false);
  }
 else {
    remove_string_from_file(storage + ""String_Node_Str"" + old_group+ ""String_Node_Str"",old_name,true);
    append_string_to_file(storage + ""String_Node_Str"" + old_group+ ""String_Node_Str"",""String_Node_Str"" + new_name + ""String_Node_Str""+ new_url+ ""String_Node_Str"");
  }
  feed_list_adapter.remove_item(poser);
  feed_list_adapter.add_list_pos(poser,new_name,new_url + ""String_Node_Str"" + new_group+ ""String_Node_Str""+ Integer.toString(count_lines(storage + ""String_Node_Str"" + new_name+ ""String_Node_Str"") - 1)+ ""String_Node_Str"");
  feed_list_adapter.notifyDataSetChanged();
  update_groups();
  update_manage_feeds();
  update_manage_groups();
  sort_group_content_by_time(all_string);
  if (exists(""String_Node_Str"" + old_group + ""String_Node_Str""))   sort_group_content_by_time(old_group);
  if (exists(""String_Node_Str"" + new_group + ""String_Node_Str""))   sort_group_content_by_time(new_group);
}",0.9982074263764404
24343,"private void perform_initial_operations(){
  storage=getExternalFilesDir(null).getAbsolutePath() + ""String_Node_Str"";
  delete(storage + ""String_Node_Str"");
  File folder_file;
  for (  String folder : folders) {
    folder_file=new File(storage.concat(folder));
    if (!folder_file.exists())     folder_file.mkdir();
  }
  feeds_string=getString(R.string.feeds_title);
  manage_string=getString(R.string.manage_title);
  settings_string=getString(R.string.settings_title);
  navigation_string=getString(R.string.navigation_title);
  all_string=getString(R.string.all_group);
  mTitle=feeds_string;
  pref=PreferenceManager.getDefaultSharedPreferences(this);
  application_context=getApplicationContext();
  activity_context=this;
}","private void perform_initial_operations(){
  storage=getExternalFilesDir(null).getAbsolutePath() + ""String_Node_Str"";
  delete(storage + ""String_Node_Str"");
  File folder_file;
  for (  String folder : folders) {
    folder_file=new File(storage.concat(folder));
    if (!folder_file.exists())     folder_file.mkdir();
  }
  feeds_string=getString(R.string.feeds_title);
  manage_string=getString(R.string.manage_title);
  settings_string=getString(R.string.settings_title);
  navigation_string=getString(R.string.navigation_title);
  all_string=getString(R.string.all_group);
  mTitle=feeds_string;
  pref=PreferenceManager.getDefaultSharedPreferences(this);
  application_context=getApplicationContext();
  activity_context=this;
  inf=getLayoutInflater();
}",0.9819156061620896
24344,"@Override protected void onHandleIntent(Intent intent){
  PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
  PowerManager.WakeLock wakelock=pm.newWakeLock(pm.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  wakelock.acquire();
  group=Integer.parseInt(intent.getStringExtra(""String_Node_Str""));
  storage=this.getExternalFilesDir(null).getAbsolutePath() + ""String_Node_Str"";
  List<String> all_groups=read_file_to_list(""String_Node_Str"",0);
  String grouper=all_groups.get(group);
  String group_file_path=storage + ""String_Node_Str"" + grouper+ ""String_Node_Str"";
  String partial_image_path=storage + ""String_Node_Str"";
  String partial_thumbnail_path=storage + ""String_Node_Str"";
  List<List<String>> content=read_csv_to_list(new String[]{group_file_path,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  List<String> group_feeds_names=content.get(0);
  List<String> group_feeds_urls=content.get(1);
  String image_name=""String_Node_Str"", thumbnail_path=""String_Node_Str"", feed_path=""String_Node_Str"";
  final int size=group_feeds_names.size();
  for (int i=0; i < size; i++) {
    feed_path=storage + ""String_Node_Str"" + group_feeds_names.get(i);
    download_file(group_feeds_urls.get(i),""String_Node_Str"" + group_feeds_names.get(i) + ""String_Node_Str"");
    new parsered(feed_path + ""String_Node_Str"");
  }
  if (!grouper.equals(""String_Node_Str""))   sort_group_content_by_time(""String_Node_Str"");
 else {
    for (    String gro : all_groups) {
      if (!gro.equals(""String_Node_Str""))       sort_group_content_by_time(gro);
    }
  }
  String group_content_path=storage + ""String_Node_Str"" + grouper+ ""String_Node_Str"";
  String[] passer={group_content_path,""String_Node_Str"",""String_Node_Str""};
  List<List<String>> contenter=read_csv_to_list(passer);
  List<String> images=contenter.get(0);
  final int sizer=images.size();
  for (int m=0; m < sizer; m++) {
    if (!images.get(m).equals(""String_Node_Str"")) {
      image_name=images.get(m).substring(images.get(m).lastIndexOf(""String_Node_Str"") + 1,images.get(m).length());
      if (!(new File(partial_image_path + image_name)).exists())       download_file(images.get(m),""String_Node_Str"" + image_name);
      if (!(new File(partial_thumbnail_path + image_name)).exists())       compress_file(image_name,grouper,false);
    }
  }
  List<Integer> unread_list=new ArrayList<Integer>();
  for (  String gro : all_groups) {
    int count=0;
    List<String> count_list=read_file_to_list(""String_Node_Str"" + gro + ""String_Node_Str"",0);
    int sized=count_list.size();
    int i;
    for (i=sized - 1; i >= 0; i--) {
      if (count_list.get(i).substring(0,9).equals(""String_Node_Str""))       break;
    }
    unread_list.add(sized - i - 1);
  }
  int group_items=0;
  for (  int un : unread_list) {
    if (un > 0)     group_items++;
  }
  if ((unread_list.get(0) > 0)) {
    NotificationCompat.Builder not_builder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.rss_icon).setContentTitle(Integer.toString(unread_list.get(0)) + ""String_Node_Str"" + ((unread_list.get(0) == 1) ? ""String_Node_Str"" : ""String_Node_Str"")).setContentText(Integer.toString(group_items - 1) + ""String_Node_Str"" + (((group_items - 1) == 1) ? ""String_Node_Str"" : ""String_Node_Str"")).setAutoCancel(true);
    Intent result_intent=new Intent(this,main_view.class);
    TaskStackBuilder stack_builder=TaskStackBuilder.create(this);
    stack_builder.addParentStack(main_view.class);
    stack_builder.addNextIntent(result_intent);
    PendingIntent result_pending_intent=stack_builder.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);
    not_builder.setContentIntent(result_pending_intent);
    NotificationManager notification_manager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
    notification_manager.notify(1,not_builder.build());
  }
  wakelock.release();
  stopSelf();
}","@Override protected void onHandleIntent(Intent intent){
  PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
  PowerManager.WakeLock wakelock=pm.newWakeLock(pm.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  wakelock.acquire();
  group=Integer.parseInt(intent.getStringExtra(""String_Node_Str""));
  storage=this.getExternalFilesDir(null).getAbsolutePath() + ""String_Node_Str"";
  List<String> all_groups=read_file_to_list(""String_Node_Str"",0);
  String grouper=all_groups.get(group);
  String group_file_path=storage + ""String_Node_Str"" + grouper+ ""String_Node_Str"";
  String partial_image_path=storage + ""String_Node_Str"";
  String partial_thumbnail_path=storage + ""String_Node_Str"";
  List<List<String>> content=read_csv_to_list(new String[]{group_file_path,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  List<String> group_feeds_names=content.get(0);
  List<String> group_feeds_urls=content.get(1);
  String image_name=""String_Node_Str"", thumbnail_path=""String_Node_Str"", feed_path=""String_Node_Str"";
  final int size=group_feeds_names.size();
  for (int i=0; i < size; i++) {
    feed_path=storage + ""String_Node_Str"" + group_feeds_names.get(i);
    download_file(group_feeds_urls.get(i),""String_Node_Str"" + group_feeds_names.get(i) + ""String_Node_Str"");
    new parsered(feed_path + ""String_Node_Str"");
  }
  if (!grouper.equals(""String_Node_Str""))   sort_group_content_by_time(""String_Node_Str"");
 else {
    for (    String gro : all_groups)     sort_group_content_by_time(gro);
  }
  String group_content_path=storage + ""String_Node_Str"" + grouper+ ""String_Node_Str"";
  String[] passer={group_content_path,""String_Node_Str"",""String_Node_Str""};
  List<List<String>> contenter=read_csv_to_list(passer);
  List<String> images=contenter.get(0);
  final int sizer=images.size();
  for (int m=0; m < sizer; m++) {
    if (!images.get(m).equals(""String_Node_Str"")) {
      image_name=images.get(m).substring(images.get(m).lastIndexOf(""String_Node_Str"") + 1,images.get(m).length());
      if (!(new File(partial_image_path + image_name)).exists())       download_file(images.get(m),""String_Node_Str"" + image_name);
      if (!(new File(partial_thumbnail_path + image_name)).exists())       compress_file(image_name,grouper,false);
    }
  }
  List<Integer> unread_list=new ArrayList<Integer>();
  for (  String gro : all_groups) {
    int count=0;
    List<String> count_list=read_file_to_list(""String_Node_Str"" + gro + ""String_Node_Str"",0);
    int sized=count_list.size();
    int i;
    for (i=sized - 1; i >= 0; i--) {
      if (count_list.get(i).substring(0,9).equals(""String_Node_Str""))       break;
    }
    if (i == sized - 1)     i++;
    unread_list.add(sized - i);
  }
  int group_items=0;
  int total=0;
  for (  int un : unread_list) {
    if (un > 0)     group_items++;
  }
  for (int i=1; i < unread_list.size(); i++)   total+=unread_list.get(i);
  if (total > 0) {
    NotificationCompat.Builder not_builder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.rss_icon).setContentTitle(Integer.toString(total) + ""String_Node_Str"" + ((total == 1) ? ""String_Node_Str"" : ""String_Node_Str"")).setContentText(Integer.toString(group_items - 1) + ((group_items - 1 == 1) ? ""String_Node_Str"" : ""String_Node_Str"") + ((total == 1) ? ""String_Node_Str"" : ""String_Node_Str"")).setAutoCancel(true);
    Intent result_intent=new Intent(this,main_view.class);
    TaskStackBuilder stack_builder=TaskStackBuilder.create(this);
    stack_builder.addParentStack(main_view.class);
    stack_builder.addNextIntent(result_intent);
    PendingIntent result_pending_intent=stack_builder.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);
    not_builder.setContentIntent(result_pending_intent);
    NotificationManager notification_manager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
    notification_manager.notify(1,not_builder.build());
  }
  main_view.log(Integer.toString(unread_list.get(0)));
  wakelock.release();
  stopSelf();
}",0.9207278279679348
24345,"private void sort_group_content_by_time(String group){
  Date time;
  List<String> feeds_array=read_csv_to_list(new String[]{storage + ""String_Node_Str"" + group+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}).get(0);
  List<Date> dates=new ArrayList<Date>();
  List<String> links_ordered=new ArrayList<String>();
  List<String> content_all=new ArrayList<String>();
  List<String> links, pubDates, content;
  for (  String feed : feeds_array) {
    String content_path=storage + ""String_Node_Str"" + feed+ ""String_Node_Str"";
    File test=new File(content_path);
    if (test.exists()) {
      List<List<String>> contenter=read_csv_to_list(new String[]{content_path,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
      links=contenter.get(0);
      pubDates=contenter.get(1);
      content=read_file_to_list(""String_Node_Str"" + feed + ""String_Node_Str"",0);
      if (pubDates.get(0).length() < 8)       pubDates=read_csv_to_list(new String[]{content_path,""String_Node_Str"",""String_Node_Str""}).get(0);
      if (pubDates.get(0).length() < 8)       pubDates=read_csv_to_list(new String[]{content_path,""String_Node_Str"",""String_Node_Str""}).get(0);
      final int size=pubDates.size();
      for (int i=0; i < size; i++) {
        content_all.add(content.get(i));
        try {
          time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
        }
 catch (        Exception e) {
          try {
            time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
          }
 catch (          Exception t) {
            try {
              time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
            }
 catch (            Exception c) {
              try {
                time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
              }
 catch (              Exception n) {
                try {
                  time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
                }
 catch (                Exception o) {
                  try {
                    time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
                  }
 catch (                  Exception r) {
                    try {
                      time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
                    }
 catch (                    Exception x) {
                      main_view.log(""String_Node_Str"" + pubDates.get(i));
                      time=new Date();
                    }
                  }
                }
              }
            }
          }
        }
        final int sizer=dates.size();
        for (int j=0; j < sizer; j++) {
          if (time.before(dates.get(j))) {
            dates.add(j,time);
            links_ordered.add(j,links.get(i));
            break;
          }
 else           if ((j == dates.size() - 1) && (time.after(dates.get(j)))) {
            dates.add(time);
            links_ordered.add(links.get(i));
            break;
          }
        }
        if (dates.size() == 0) {
          dates.add(time);
          links_ordered.add(links.get(i));
        }
      }
    }
  }
  final String group_content_path=""String_Node_Str"" + group + ""String_Node_Str"";
  String last_url=""String_Node_Str"";
  if (main_view.exists(""String_Node_Str"" + group + ""String_Node_Str"")) {
    List<List<String>> bonne=read_csv_to_list(new String[]{storage + ""String_Node_Str"" + group+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    List<String> urls=bonne.get(0);
    List<String> marks=bonne.get(1);
    int sized=marks.size();
    for (int i=sized - 1; i >= 0; i--) {
      if (marks.get(i).equals(""String_Node_Str"")) {
        last_url=urls.get(i);
        break;
      }
    }
    if ((last_url.equals(""String_Node_Str"")) && (sized > 0))     last_url=urls.get(0);
  }
  if (last_url.equals(""String_Node_Str""))   last_url=links_ordered.get(0);
  main_view.delete(group_content_path);
  try {
    BufferedWriter out=new BufferedWriter(new FileWriter(storage + group_content_path,true));
    if (links_ordered.size() > 0) {
      for (      String link : links_ordered) {
        for (        String line : content_all) {
          if (line.contains(link)) {
            if (link.equals(last_url))             out.write(line + ""String_Node_Str"");
 else             out.write(line + ""String_Node_Str"");
            break;
          }
        }
      }
    }
    out.close();
  }
 catch (  Exception e) {
  }
}","private void sort_group_content_by_time(String group){
  Date time;
  List<String> feeds_array=read_csv_to_list(new String[]{storage + ""String_Node_Str"" + group+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}).get(0);
  List<Date> dates=new ArrayList<Date>();
  List<String> links_ordered=new ArrayList<String>();
  List<String> content_all=new ArrayList<String>();
  List<String> links, pubDates, content;
  for (  String feed : feeds_array) {
    String content_path=storage + ""String_Node_Str"" + feed+ ""String_Node_Str"";
    File test=new File(content_path);
    if (test.exists()) {
      List<List<String>> contenter=read_csv_to_list(new String[]{content_path,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
      links=contenter.get(0);
      pubDates=contenter.get(1);
      content=read_file_to_list(""String_Node_Str"" + feed + ""String_Node_Str"",0);
      if (pubDates.get(0).length() < 8)       pubDates=read_csv_to_list(new String[]{content_path,""String_Node_Str"",""String_Node_Str""}).get(0);
      if (pubDates.get(0).length() < 8)       pubDates=read_csv_to_list(new String[]{content_path,""String_Node_Str"",""String_Node_Str""}).get(0);
      final int size=pubDates.size();
      for (int i=0; i < size; i++) {
        content_all.add(content.get(i));
        try {
          time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
        }
 catch (        Exception e) {
          try {
            time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
          }
 catch (          Exception t) {
            try {
              time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
            }
 catch (            Exception c) {
              try {
                time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
              }
 catch (              Exception n) {
                try {
                  time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
                }
 catch (                Exception o) {
                  try {
                    time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
                  }
 catch (                  Exception r) {
                    try {
                      time=(new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH)).parse(pubDates.get(i));
                    }
 catch (                    Exception x) {
                      main_view.log(""String_Node_Str"" + pubDates.get(i));
                      time=new Date();
                    }
                  }
                }
              }
            }
          }
        }
        final int sizer=dates.size();
        for (int j=0; j < sizer; j++) {
          if (time.before(dates.get(j))) {
            dates.add(j,time);
            links_ordered.add(j,links.get(i));
            break;
          }
 else           if ((j == dates.size() - 1) && (time.after(dates.get(j)))) {
            dates.add(time);
            links_ordered.add(links.get(i));
            break;
          }
        }
        if (dates.size() == 0) {
          dates.add(time);
          links_ordered.add(links.get(i));
        }
      }
    }
  }
  final String group_content_path=""String_Node_Str"" + group + ""String_Node_Str"";
  String last_url=""String_Node_Str"";
  if (main_view.exists(""String_Node_Str"" + group + ""String_Node_Str"")) {
    List<List<String>> bonne=read_csv_to_list(new String[]{storage + ""String_Node_Str"" + group+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    List<String> urls=bonne.get(1);
    List<String> marks=bonne.get(0);
    int sized=marks.size();
    for (int i=sized - 1; i >= 0; i--) {
      if (marks.get(i).equals(""String_Node_Str"")) {
        main_view.log(""String_Node_Str"" + Integer.toString(i));
        last_url=urls.get(i);
        break;
      }
    }
    if ((last_url.equals(""String_Node_Str"")) && (sized > 0))     last_url=urls.get(0);
  }
  if (last_url.equals(""String_Node_Str""))   last_url=links_ordered.get(0);
  main_view.delete(group_content_path);
  try {
    BufferedWriter out=new BufferedWriter(new FileWriter(storage + group_content_path,true));
    if (links_ordered.size() > 0) {
      for (      String link : links_ordered) {
        for (        String line : content_all) {
          if (line.contains(link)) {
            if (link.equals(last_url)) {
              main_view.log(""String_Node_Str"");
              out.write(""String_Node_Str"" + line + ""String_Node_Str"");
            }
 else             out.write(line + ""String_Node_Str"");
            break;
          }
        }
      }
    }
    out.close();
  }
 catch (  Exception e) {
  }
}",0.982762289848904
24346,"@Override public void onClick(View view){
  String new_group=((EditText)edit_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
  boolean found=false;
  boolean new_group_mode=false;
  if (new_group.length() > 0) {
    new_group_mode=true;
    for (    String group : current_groups) {
      if ((group.toLowerCase()).equals(new_group))       found=true;
    }
    String[] words=new_group.split(""String_Node_Str"");
    new_group=""String_Node_Str"";
    if (words.length == 1) {
      char cap=Character.toUpperCase(words[0].charAt(0));
      new_group+=cap + words[0].substring(1,words[0].length());
    }
 else {
      for (int i=0; i < words.length - 1; i++) {
        char cap=Character.toUpperCase(words[i].charAt(0));
        new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
      }
      char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
      new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
    }
  }
 else   new_group=((Spinner)edit_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
  Boolean rss=false;
  String URL_check=((EditText)edit_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
  String feed_name=((EditText)edit_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
  check_finished=-1;
  if ((!URL_check.contains(""String_Node_Str"")) && (!URL_check.contains(""String_Node_Str""))) {
    new check_feed_exists().execute(""String_Node_Str"" + URL_check);
    while (check_finished == -1) {
    }
    if (check_finished == 0) {
      check_finished=-1;
      new check_feed_exists().execute(""String_Node_Str"" + URL_check);
      while (check_finished == -1) {
      }
      if (check_finished == 1)       URL_check=""String_Node_Str"" + URL_check;
    }
 else     if (check_finished == 1)     URL_check=""String_Node_Str"" + URL_check;
  }
 else {
    new check_feed_exists().execute(URL_check);
    while (check_finished == -1) {
    }
  }
  if (check_finished == 1)   rss=true;
  if (rss != null && !rss)   toast_message(""String_Node_Str"",0);
 else {
    if ((!found) && (new_group_mode))     add_group(new_group);
    if (feed_name.equals(""String_Node_Str""))     feed_name=feed_title;
    edit_feed(current_title,feed_name,URL_check,current_group,new_group);
    edit_dialog.dismiss();
  }
}","@Override public void onClick(View view){
  String new_group=((EditText)edit_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
  boolean found=false;
  boolean new_group_mode=false;
  if (new_group.length() > 0) {
    new_group_mode=true;
    for (    String group : current_groups) {
      if ((group.toLowerCase()).equals(new_group))       found=true;
    }
    String[] words=new_group.split(""String_Node_Str"");
    new_group=""String_Node_Str"";
    if (words.length == 1) {
      char cap=Character.toUpperCase(words[0].charAt(0));
      new_group+=cap + words[0].substring(1,words[0].length());
    }
 else {
      for (int i=0; i < words.length - 1; i++) {
        char cap=Character.toUpperCase(words[i].charAt(0));
        new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
      }
      char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
      new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
    }
  }
 else   new_group=((Spinner)edit_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
  Boolean rss=false;
  String URL_check=((EditText)edit_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
  String feed_name=((EditText)edit_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
  check_finished=-1;
  if ((!URL_check.contains(""String_Node_Str"")) && (!URL_check.contains(""String_Node_Str""))) {
    new check_feed_exists().execute(""String_Node_Str"" + URL_check);
    while (check_finished == -1) {
    }
    if (check_finished == 0) {
      check_finished=-1;
      new check_feed_exists().execute(""String_Node_Str"" + URL_check);
      while (check_finished == -1) {
      }
      if (check_finished == 1)       URL_check=""String_Node_Str"" + URL_check;
    }
 else     if (check_finished == 1)     URL_check=""String_Node_Str"" + URL_check;
  }
 else {
    new check_feed_exists().execute(URL_check);
    while (check_finished == -1) {
    }
  }
  if (check_finished == 1)   rss=true;
  if (rss != null && !rss)   toast_message(""String_Node_Str"",0);
 else {
    if ((!found) && (new_group_mode))     add_group(new_group);
    if (feed_name.equals(""String_Node_Str""))     feed_name=feed_title;
    edit_feed(poser,current_title,feed_name,URL_check,current_group,new_group);
    edit_dialog.dismiss();
  }
}",0.998742665549036
24347,"@Override public boolean onItemLongClick(AdapterView<?> parent,View view,int pos,long id){
  final int position=pos;
  AlertDialog.Builder builder=new AlertDialog.Builder(activity_context);
  builder.setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      String details=feed_list_adapter.get_info(position);
      String title=feed_list_adapter.getItem(position);
      details=details.substring(details.indexOf('\n') + 1,details.indexOf(' '));
      (new File(storage + ""String_Node_Str"" + title+ ""String_Node_Str"")).delete();
      (new File(storage + ""String_Node_Str"")).delete();
      (new File(storage + ""String_Node_Str"" + details+ ""String_Node_Str"")).delete();
      (new File(storage + details + ""String_Node_Str"")).delete();
      File all_file=new File(storage + ""String_Node_Str"" + details+ ""String_Node_Str"");
      List<String> feeds=read_file_to_list_static(""String_Node_Str"" + details + ""String_Node_Str"",0);
      all_file.delete();
      for (int i=0; i < feeds.size(); i++) {
        if (!feeds.get(i).contains(title))         append_string_to_file_static(""String_Node_Str"" + details + ""String_Node_Str"",feeds.get(i) + ""String_Node_Str"");
      }
      if (!(new File(storage + ""String_Node_Str"" + details+ ""String_Node_Str"")).exists()) {
        all_file=new File(storage + ""String_Node_Str"");
        feeds=read_file_to_list_static(""String_Node_Str"",0);
        all_file.delete();
        for (int i=0; i < feeds.size(); i++) {
          if (!feeds.get(i).contains(details))           append_string_to_file_static(""String_Node_Str"",feeds.get(i) + ""String_Node_Str"");
        }
      }
      feed_list_adapter.remove_item(position);
      feed_list_adapter.notifyDataSetChanged();
      all_file=new File(storage + ""String_Node_Str"");
      feeds=read_file_to_list_static(""String_Node_Str"",0);
      all_file.delete();
      for (int i=0; i < feeds.size(); i++) {
        if (!feeds.get(i).contains(title))         append_string_to_file_static(""String_Node_Str"",feeds.get(i) + ""String_Node_Str"");
      }
      feed_list_adapter.remove_item(position);
      feed_list_adapter.notifyDataSetChanged();
    }
  }
);
  AlertDialog alert=builder.create();
  alert.show();
  return true;
}","@Override public boolean onItemLongClick(AdapterView<?> parent,View view,int pos,long id){
  positionrr=pos;
  AlertDialog.Builder builder=new AlertDialog.Builder(activity_context);
  builder.setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      String details=feed_list_adapter.get_info(positionrr);
      String title=feed_list_adapter.getItem(positionrr);
      details=details.substring(details.indexOf('\n') + 1,details.indexOf(' '));
      (new File(storage + ""String_Node_Str"" + title+ ""String_Node_Str"")).delete();
      (new File(storage + ""String_Node_Str"")).delete();
      (new File(storage + ""String_Node_Str"" + details+ ""String_Node_Str"")).delete();
      (new File(storage + details + ""String_Node_Str"")).delete();
      File all_file=new File(storage + ""String_Node_Str"" + details+ ""String_Node_Str"");
      List<String> feeds=read_file_to_list_static(""String_Node_Str"" + details + ""String_Node_Str"",0);
      all_file.delete();
      for (int i=0; i < feeds.size(); i++) {
        if (!feeds.get(i).contains(title))         append_string_to_file_static(""String_Node_Str"" + details + ""String_Node_Str"",feeds.get(i) + ""String_Node_Str"");
      }
      if (!(new File(storage + ""String_Node_Str"" + details+ ""String_Node_Str"")).exists()) {
        all_file=new File(storage + ""String_Node_Str"");
        feeds=read_file_to_list_static(""String_Node_Str"",0);
        all_file.delete();
        for (int i=0; i < feeds.size(); i++) {
          if (!feeds.get(i).contains(details))           append_string_to_file_static(""String_Node_Str"",feeds.get(i) + ""String_Node_Str"");
        }
      }
      all_file=new File(storage + ""String_Node_Str"");
      feeds=read_file_to_list_static(""String_Node_Str"",0);
      all_file.delete();
      for (int i=0; i < feeds.size(); i++) {
        if (!feeds.get(i).contains(title))         append_string_to_file_static(""String_Node_Str"",feeds.get(i) + ""String_Node_Str"");
      }
      feed_list_adapter.remove_item(positionrr);
      feed_list_adapter.notifyDataSetChanged();
    }
  }
);
  AlertDialog alert=builder.create();
  alert.show();
  return true;
}",0.9750496798410244
24348,"@Override public void onShow(DialogInterface dialog){
  Button b=edit_dialog.getButton(AlertDialog.BUTTON_POSITIVE);
  b.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String new_group=((EditText)edit_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
      boolean found=false;
      boolean new_group_mode=false;
      if (new_group.length() > 0) {
        new_group_mode=true;
        for (        String group : current_groups) {
          if ((group.toLowerCase()).equals(new_group))           found=true;
        }
        String[] words=new_group.split(""String_Node_Str"");
        new_group=""String_Node_Str"";
        if (words.length == 1) {
          char cap=Character.toUpperCase(words[0].charAt(0));
          new_group+=cap + words[0].substring(1,words[0].length());
        }
 else {
          for (int i=0; i < words.length - 1; i++) {
            char cap=Character.toUpperCase(words[i].charAt(0));
            new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
          }
          char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
          new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
        }
      }
 else       new_group=((Spinner)edit_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
      Boolean rss=false;
      String URL_check=((EditText)edit_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
      String feed_name=((EditText)edit_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
      check_finished=-1;
      if ((!URL_check.contains(""String_Node_Str"")) && (!URL_check.contains(""String_Node_Str""))) {
        new check_feed_exists().execute(""String_Node_Str"" + URL_check);
        while (check_finished == -1) {
        }
        if (check_finished == 0) {
          check_finished=-1;
          new check_feed_exists().execute(""String_Node_Str"" + URL_check);
          while (check_finished == -1) {
          }
          if (check_finished == 1)           URL_check=""String_Node_Str"" + URL_check;
        }
 else         if (check_finished == 1)         URL_check=""String_Node_Str"" + URL_check;
      }
 else {
        new check_feed_exists().execute(URL_check);
        while (check_finished == -1) {
        }
      }
      if (check_finished == 1)       rss=true;
      if (rss != null && !rss)       toast_message(""String_Node_Str"",0);
 else {
        if ((!found) && (new_group_mode))         add_group(new_group);
        if (feed_name.equals(""String_Node_Str""))         feed_name=feed_title;
        edit_feed(current_title,feed_name,URL_check,current_group,new_group);
        edit_dialog.dismiss();
      }
    }
  }
);
}","@Override public void onShow(DialogInterface dialog){
  Button b=edit_dialog.getButton(AlertDialog.BUTTON_POSITIVE);
  b.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String new_group=((EditText)edit_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
      boolean found=false;
      boolean new_group_mode=false;
      if (new_group.length() > 0) {
        new_group_mode=true;
        for (        String group : current_groups) {
          if ((group.toLowerCase()).equals(new_group))           found=true;
        }
        String[] words=new_group.split(""String_Node_Str"");
        new_group=""String_Node_Str"";
        if (words.length == 1) {
          char cap=Character.toUpperCase(words[0].charAt(0));
          new_group+=cap + words[0].substring(1,words[0].length());
        }
 else {
          for (int i=0; i < words.length - 1; i++) {
            char cap=Character.toUpperCase(words[i].charAt(0));
            new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
          }
          char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
          new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
        }
      }
 else       new_group=((Spinner)edit_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
      Boolean rss=false;
      String URL_check=((EditText)edit_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
      String feed_name=((EditText)edit_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
      check_finished=-1;
      if ((!URL_check.contains(""String_Node_Str"")) && (!URL_check.contains(""String_Node_Str""))) {
        new check_feed_exists().execute(""String_Node_Str"" + URL_check);
        while (check_finished == -1) {
        }
        if (check_finished == 0) {
          check_finished=-1;
          new check_feed_exists().execute(""String_Node_Str"" + URL_check);
          while (check_finished == -1) {
          }
          if (check_finished == 1)           URL_check=""String_Node_Str"" + URL_check;
        }
 else         if (check_finished == 1)         URL_check=""String_Node_Str"" + URL_check;
      }
 else {
        new check_feed_exists().execute(URL_check);
        while (check_finished == -1) {
        }
      }
      if (check_finished == 1)       rss=true;
      if (rss != null && !rss)       toast_message(""String_Node_Str"",0);
 else {
        if ((!found) && (new_group_mode))         add_group(new_group);
        if (feed_name.equals(""String_Node_Str""))         feed_name=feed_title;
        edit_feed(poser,current_title,feed_name,URL_check,current_group,new_group);
        edit_dialog.dismiss();
      }
    }
  }
);
}",0.9989327641408752
24349,"private static void show_edit_dialog(int position){
  LayoutInflater inflater=LayoutInflater.from(activity_context);
  final View edit_rss_dialog=inflater.inflate(R.layout.add_rss_dialog,null);
  final String current_group=feed_groups.get(position);
  final String current_title=feed_titles.get(position);
  Spinner group_spinner=(Spinner)edit_rss_dialog.findViewById(R.id.group_spinner);
  ArrayAdapter adapter=new ArrayAdapter(activity_context,R.layout.group_spinner_text,current_groups);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  group_spinner.setAdapter(adapter);
  int i;
  for (i=0; i < current_groups.length; i++) {
    if (current_groups[i].equals(current_group))     break;
  }
  ((EditText)edit_rss_dialog.findViewById(R.id.name_edit)).setText(current_title);
  ((EditText)edit_rss_dialog.findViewById(R.id.URL_edit)).setText(feed_urls.get(position));
  group_spinner.setSelection(i);
  final AlertDialog edit_dialog=new AlertDialog.Builder(activity_context,2).setTitle(""String_Node_Str"").setView(edit_rss_dialog).setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).create();
  edit_dialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      Button b=edit_dialog.getButton(AlertDialog.BUTTON_POSITIVE);
      b.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          String new_group=((EditText)edit_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
          boolean found=false;
          boolean new_group_mode=false;
          if (new_group.length() > 0) {
            new_group_mode=true;
            for (            String group : current_groups) {
              if ((group.toLowerCase()).equals(new_group))               found=true;
            }
            String[] words=new_group.split(""String_Node_Str"");
            new_group=""String_Node_Str"";
            if (words.length == 1) {
              char cap=Character.toUpperCase(words[0].charAt(0));
              new_group+=cap + words[0].substring(1,words[0].length());
            }
 else {
              for (int i=0; i < words.length - 1; i++) {
                char cap=Character.toUpperCase(words[i].charAt(0));
                new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
              }
              char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
              new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
            }
          }
 else           new_group=((Spinner)edit_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
          Boolean rss=false;
          String URL_check=((EditText)edit_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
          String feed_name=((EditText)edit_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
          check_finished=-1;
          if ((!URL_check.contains(""String_Node_Str"")) && (!URL_check.contains(""String_Node_Str""))) {
            new check_feed_exists().execute(""String_Node_Str"" + URL_check);
            while (check_finished == -1) {
            }
            if (check_finished == 0) {
              check_finished=-1;
              new check_feed_exists().execute(""String_Node_Str"" + URL_check);
              while (check_finished == -1) {
              }
              if (check_finished == 1)               URL_check=""String_Node_Str"" + URL_check;
            }
 else             if (check_finished == 1)             URL_check=""String_Node_Str"" + URL_check;
          }
 else {
            new check_feed_exists().execute(URL_check);
            while (check_finished == -1) {
            }
          }
          if (check_finished == 1)           rss=true;
          if (rss != null && !rss)           toast_message(""String_Node_Str"",0);
 else {
            if ((!found) && (new_group_mode))             add_group(new_group);
            if (feed_name.equals(""String_Node_Str""))             feed_name=feed_title;
            edit_feed(current_title,feed_name,URL_check,current_group,new_group);
            edit_dialog.dismiss();
          }
        }
      }
);
    }
  }
);
  edit_dialog.show();
}","private static void show_edit_dialog(int position){
  poser=position;
  LayoutInflater inflater=LayoutInflater.from(activity_context);
  final View edit_rss_dialog=inflater.inflate(R.layout.add_rss_dialog,null);
  final String current_group=feed_groups.get(position);
  final String current_title=feed_titles.get(position);
  Spinner group_spinner=(Spinner)edit_rss_dialog.findViewById(R.id.group_spinner);
  ArrayAdapter adapter=new ArrayAdapter(activity_context,R.layout.group_spinner_text,current_groups);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  group_spinner.setAdapter(adapter);
  int i;
  for (i=0; i < current_groups.length; i++) {
    if (current_groups[i].equals(current_group))     break;
  }
  ((EditText)edit_rss_dialog.findViewById(R.id.name_edit)).setText(current_title);
  ((EditText)edit_rss_dialog.findViewById(R.id.URL_edit)).setText(feed_urls.get(position));
  group_spinner.setSelection(i);
  final AlertDialog edit_dialog=new AlertDialog.Builder(activity_context,2).setTitle(""String_Node_Str"").setView(edit_rss_dialog).setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).create();
  edit_dialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      Button b=edit_dialog.getButton(AlertDialog.BUTTON_POSITIVE);
      b.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          String new_group=((EditText)edit_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
          boolean found=false;
          boolean new_group_mode=false;
          if (new_group.length() > 0) {
            new_group_mode=true;
            for (            String group : current_groups) {
              if ((group.toLowerCase()).equals(new_group))               found=true;
            }
            String[] words=new_group.split(""String_Node_Str"");
            new_group=""String_Node_Str"";
            if (words.length == 1) {
              char cap=Character.toUpperCase(words[0].charAt(0));
              new_group+=cap + words[0].substring(1,words[0].length());
            }
 else {
              for (int i=0; i < words.length - 1; i++) {
                char cap=Character.toUpperCase(words[i].charAt(0));
                new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
              }
              char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
              new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
            }
          }
 else           new_group=((Spinner)edit_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
          Boolean rss=false;
          String URL_check=((EditText)edit_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
          String feed_name=((EditText)edit_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
          check_finished=-1;
          if ((!URL_check.contains(""String_Node_Str"")) && (!URL_check.contains(""String_Node_Str""))) {
            new check_feed_exists().execute(""String_Node_Str"" + URL_check);
            while (check_finished == -1) {
            }
            if (check_finished == 0) {
              check_finished=-1;
              new check_feed_exists().execute(""String_Node_Str"" + URL_check);
              while (check_finished == -1) {
              }
              if (check_finished == 1)               URL_check=""String_Node_Str"" + URL_check;
            }
 else             if (check_finished == 1)             URL_check=""String_Node_Str"" + URL_check;
          }
 else {
            new check_feed_exists().execute(URL_check);
            while (check_finished == -1) {
            }
          }
          if (check_finished == 1)           rss=true;
          if (rss != null && !rss)           toast_message(""String_Node_Str"",0);
 else {
            if ((!found) && (new_group_mode))             add_group(new_group);
            if (feed_name.equals(""String_Node_Str""))             feed_name=feed_title;
            edit_feed(poser,current_title,feed_name,URL_check,current_group,new_group);
            edit_dialog.dismiss();
          }
        }
      }
);
    }
  }
);
  edit_dialog.show();
}",0.9973975276512688
24350,"private static void edit_feed(String old_feed_name,String feed_name,String feed_url,String old_group,String feed_group){
  List<String> feeds=read_file_to_list_static(""String_Node_Str"",0);
  (new File(storage + ""String_Node_Str"")).delete();
  for (int i=0; i < feeds.size(); i++) {
    if (feeds.get(i).contains(old_feed_name))     append_string_to_file_static(""String_Node_Str"",""String_Node_Str"" + feed_name + ""String_Node_Str""+ feed_url+ ""String_Node_Str""+ feed_group+ ""String_Node_Str"");
 else     append_string_to_file_static(""String_Node_Str"",feeds.get(i) + ""String_Node_Str"");
  }
  if (!old_feed_name.equals(feed_name)) {
    (new File(storage + ""String_Node_Str"" + old_feed_name+ ""String_Node_Str"")).renameTo((new File(storage + ""String_Node_Str"" + feed_name+ ""String_Node_Str"")));
  }
  File group_file=new File(storage + ""String_Node_Str"" + feed_group+ ""String_Node_Str"");
  if (group_file.exists()) {
    (new File(storage + ""String_Node_Str"" + feed_group+ ""String_Node_Str"")).delete();
    feeds=read_file_to_list_static(""String_Node_Str"" + feed_group + ""String_Node_Str"",0);
    group_file.delete();
    for (int i=0; i < feeds.size(); i++) {
      if (feeds.get(i).contains(old_feed_name))       append_string_to_file_static(""String_Node_Str"" + feed_group + ""String_Node_Str"",""String_Node_Str"" + feed_name + ""String_Node_Str""+ feed_url+ ""String_Node_Str"");
 else       append_string_to_file_static(""String_Node_Str"" + feed_group + ""String_Node_Str"",feeds.get(i) + ""String_Node_Str"");
    }
  }
 else {
    append_string_to_file_static(""String_Node_Str"" + feed_group + ""String_Node_Str"",""String_Node_Str"" + feed_name + ""String_Node_Str""+ feed_url+ ""String_Node_Str"");
    feeds=read_file_to_list_static(""String_Node_Str"" + old_group + ""String_Node_Str"",0);
    group_file=new File(storage + ""String_Node_Str"" + old_group+ ""String_Node_Str"");
    group_file.delete();
    Boolean append=false;
    for (int i=0; i < feeds.size(); i++) {
      if (!feeds.get(i).contains(old_feed_name)) {
        append_string_to_file_static(""String_Node_Str"" + old_group + ""String_Node_Str"",""String_Node_Str"" + feed_name + ""String_Node_Str""+ feed_url+ ""String_Node_Str"");
        append=true;
      }
    }
    if (append == false) {
      feeds=read_file_to_list_static(""String_Node_Str"",0);
      group_file=new File(storage + ""String_Node_Str"");
      group_file.delete();
      for (int i=0; i < feeds.size(); i++) {
        if (!feeds.get(i).contains(old_group))         append_string_to_file_static(""String_Node_Str"",feeds.get(i) + ""String_Node_Str"");
      }
    }
  }
  (new File(storage + ""String_Node_Str"")).delete();
  feed_adapter temp=feed_manage.return_feed_adapter();
  temp.clear_list();
  update_feeds_list();
  for (int i=0; i < feed_titles.size(); i++) {
    temp.add_list(feed_titles.get(i),feed_urls.get(i) + ""String_Node_Str"" + feed_groups.get(i));
    temp.notifyDataSetChanged();
  }
  update_groups();
  if (!old_group.equals(feed_group)) {
    (new File(storage + ""String_Node_Str"" + old_group+ ""String_Node_Str"")).delete();
  }
}","private static void edit_feed(int pos,String old_feed_name,String feed_name,String feed_url,String old_group,String feed_group){
  List<String> feeds=read_file_to_list_static(""String_Node_Str"",0);
  (new File(storage + ""String_Node_Str"")).delete();
  for (int i=0; i < feeds.size(); i++) {
    if (feeds.get(i).contains(old_feed_name))     append_string_to_file_static(""String_Node_Str"",""String_Node_Str"" + feed_name + ""String_Node_Str""+ feed_url+ ""String_Node_Str""+ feed_group+ ""String_Node_Str"");
 else     append_string_to_file_static(""String_Node_Str"",feeds.get(i) + ""String_Node_Str"");
  }
  if (!old_feed_name.equals(feed_name)) {
    (new File(storage + ""String_Node_Str"" + old_feed_name+ ""String_Node_Str"")).renameTo((new File(storage + ""String_Node_Str"" + feed_name+ ""String_Node_Str"")));
  }
  if (!old_group.equals(feed_group)) {
    File group_file=new File(storage + ""String_Node_Str"" + feed_group+ ""String_Node_Str"");
    append_string_to_file_static(""String_Node_Str"" + feed_group + ""String_Node_Str"",""String_Node_Str"" + feed_name + ""String_Node_Str""+ feed_url+ ""String_Node_Str"");
    feeds=read_file_to_list_static(""String_Node_Str"" + old_group + ""String_Node_Str"",0);
    group_file=new File(storage + ""String_Node_Str"" + old_group+ ""String_Node_Str"");
    group_file.delete();
    Boolean append=false;
    for (int i=0; i < feeds.size(); i++) {
      if (!feeds.get(i).contains(old_feed_name)) {
        append_string_to_file_static(""String_Node_Str"" + old_group + ""String_Node_Str"",feeds.get(i) + ""String_Node_Str"");
        append=true;
      }
    }
    if (append == false) {
      feeds=read_file_to_list_static(""String_Node_Str"",0);
      group_file=new File(storage + ""String_Node_Str"");
      group_file.delete();
      for (int i=0; i < feeds.size(); i++) {
        if (!feeds.get(i).contains(old_group))         append_string_to_file_static(""String_Node_Str"",feeds.get(i) + ""String_Node_Str"");
      }
    }
    (new File(storage + ""String_Node_Str"" + old_group+ ""String_Node_Str"")).delete();
  }
  (new File(storage + ""String_Node_Str"")).delete();
  feed_adapter temp=feed_manage.return_feed_adapter();
  update_feeds_list();
  temp.remove_item(poser);
  temp.add_list_pos(poser,feed_name,feed_url + ""String_Node_Str"" + feed_group+ ""String_Node_Str""+ Integer.toString(count_lines(""String_Node_Str"" + feed_name + ""String_Node_Str"") - 1)+ ""String_Node_Str"");
  temp.notifyDataSetChanged();
  update_groups();
}",0.5270442542342014
24351,"@Override protected Long doInBackground(Object... ton){
  String[] feeds_array=read_feeds_to_array(get_filepath(current_groups[((Integer)ton[1])] + ""String_Node_Str""));
  String[] titles, descriptions, links, images;
  boolean success=true, exists=true;
  for (  String feed : feeds_array) {
    if ((!((Boolean)ton[0])) && (((Integer)ton[1]) != 0))     success=update_feed(feed);
    if (!((new File(get_filepath(feed + ""String_Node_Str""))).exists()))     exists=false;
  }
  if (exists) {
    File test=new File(get_filepath(current_groups[((Integer)ton[1])] + ""String_Node_Str""));
    if ((!test.exists()) || (!((Boolean)ton[0])))     sort_groups_by_time(current_groups[((Integer)ton[1])]);
    if (success) {
      String content_path=get_filepath(current_groups[((Integer)ton[1])] + ""String_Node_Str"");
      titles=read_csv_to_array(""String_Node_Str"",content_path);
      if (titles.length > 0) {
        images=read_csv_to_array(""String_Node_Str"",content_path);
        descriptions=read_csv_to_array(""String_Node_Str"",content_path);
        links=read_csv_to_array(""String_Node_Str"",content_path);
        int image_width=0, image_height=0;
        String partial_image_path=get_filepath(""String_Node_Str"");
        String partial_thumbnail_path=get_filepath(""String_Node_Str"");
        String image_name=""String_Node_Str"", thumbnail_path=""String_Node_Str"";
        File image, thumbnail;
        for (int m=0; m < titles.length; m++) {
          if (!images[m].equals(""String_Node_Str"")) {
            image_name=images[m].substring(images[m].lastIndexOf(""String_Node_Str"") + 1,images[m].length());
            image=new File(partial_image_path + image_name);
            thumbnail=new File(partial_thumbnail_path + image_name);
            if (!image.exists()) {
              download_file(images[m],""String_Node_Str"" + image_name);
              compress_file(partial_image_path + image_name,partial_thumbnail_path + image_name,image_name);
            }
 else             if (!thumbnail.exists())             compress_file(partial_image_path + image_name,partial_thumbnail_path + image_name,image_name);
            Integer[] dim=get_dim(image_name);
            image_height=dim[1];
            image_width=dim[0];
            thumbnail_path=partial_thumbnail_path + image_name;
          }
          List<String> ith_list=get_card_adapter(((Integer)ton[1])).return_links();
          if ((!ith_list.contains(links[m])) || (ith_list.size() == 0))           publishProgress(((Integer)ton[1]),titles[m],descriptions[m],links[m],thumbnail_path,image_height,image_width);
        }
      }
    }
  }
  return 1L;
}","@Override protected Long doInBackground(Object... ton){
  String[] feeds_array=read_feeds_to_array(get_filepath(current_groups[((Integer)ton[1])] + ""String_Node_Str""));
  String[] titles, descriptions, links, images;
  boolean success=true, exists=true;
  for (  String feed : feeds_array) {
    if ((!((Boolean)ton[0])) && (((Integer)ton[1]) != 0))     success=update_feed(feed);
    if (!((new File(get_filepath(feed + ""String_Node_Str""))).exists()))     exists=false;
  }
  if (exists) {
    File test=new File(get_filepath(current_groups[((Integer)ton[1])] + ""String_Node_Str""));
    if ((!test.exists()) || (!((Boolean)ton[0])))     sort_groups_by_time(current_groups[((Integer)ton[1])]);
    if (success) {
      String content_path=get_filepath(current_groups[((Integer)ton[1])] + ""String_Node_Str"");
      titles=read_csv_to_array(""String_Node_Str"",content_path);
      if (titles.length > 0) {
        images=read_csv_to_array(""String_Node_Str"",content_path);
        descriptions=read_csv_to_array(""String_Node_Str"",content_path);
        links=read_csv_to_array(""String_Node_Str"",content_path);
        int image_width=0, image_height=0;
        String partial_image_path=get_filepath(""String_Node_Str"");
        String partial_thumbnail_path=get_filepath(""String_Node_Str"");
        String image_name=""String_Node_Str"", thumbnail_path=""String_Node_Str"";
        File image, thumbnail;
        for (int m=0; m < titles.length; m++) {
          if (!images[m].equals(""String_Node_Str"")) {
            image_name=images[m].substring(images[m].lastIndexOf(""String_Node_Str"") + 1,images[m].length());
            image=new File(partial_image_path + image_name);
            thumbnail=new File(partial_thumbnail_path + image_name);
            if (!image.exists()) {
              download_file(images[m],""String_Node_Str"" + image_name);
              compress_file(partial_image_path + image_name,partial_thumbnail_path + image_name,image_name);
            }
 else             if (!thumbnail.exists())             compress_file(partial_image_path + image_name,partial_thumbnail_path + image_name,image_name);
            Integer[] dim=get_dim(image_name);
            image_height=dim[1];
            image_width=dim[0];
            thumbnail_path=partial_thumbnail_path + image_name;
          }
 else {
            thumbnail_path=""String_Node_Str"";
            image_height=0;
            image_width=0;
          }
          List<String> ith_list=get_card_adapter(((Integer)ton[1])).return_links();
          if ((!ith_list.contains(links[m])) || (ith_list.size() == 0))           publishProgress(((Integer)ton[1]),titles[m],descriptions[m],links[m],thumbnail_path,image_height,image_width);
        }
      }
    }
  }
  return 1L;
}",0.9774632147513505
24352,"private void parse_local_xml(String file_name){
  try {
    final String[] start=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    final String[] end=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] of_types=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    File in=new File(file_name);
    BufferedReader reader=new BufferedReader(new FileReader(in));
    int filesize=(int)(in.length() + 1);
    char[] current=new char[1];
    char[] buf=new char[filesize + 1];
    String end_tag=""String_Node_Str"";
    reader.mark(2);
    while (reader.read() != -1) {
      reader.reset();
      String buf_string=get_next_tag(reader,of_types,file_name);
      if ((buf_string.contains(""String_Node_Str"")) || (buf_string.contains(""String_Node_Str"")))       to_file(file_name + ""String_Node_Str"",""String_Node_Str"",true);
 else       if ((buf_string.contains(""String_Node_Str"")) || (buf_string.contains(""String_Node_Str""))) {
        check_for_image(file_name);
        check_for_url(file_name);
      }
 else {
        for (int i=0; i < start.length; i++) {
          if (buf_string.equals(start[i])) {
            if (buf_string.equals(""String_Node_Str""))             buf_string=""String_Node_Str"";
 else             if (buf_string.equals(""String_Node_Str""))             buf_string=""String_Node_Str"";
            to_file(file_name + ""String_Node_Str"",buf_string.substring(1,buf_string.length() - 1) + ""String_Node_Str"",true);
            while (!(end_tag.equals(end[i]))) {
              int count=0;
              current=new char[1];
              buf=new char[filesize];
              while (current[0] != '<') {
                buf[count]=current[0];
                reader.read(current,0,1);
                count++;
              }
              String cont=(new String(buf)).trim().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              if (cont.contains(""String_Node_Str""))               to_file(file_name + ""String_Node_Str"",cont.substring(cont.indexOf(""String_Node_Str"") + 5,cont.indexOf(""String_Node_Str"",cont.indexOf(""String_Node_Str"") + 6)) + ""String_Node_Str"",false);
              cont=cont.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
              to_file(file_name + ""String_Node_Str"",cont,true);
              buf=new char[1024];
              count=0;
              while (current[0] != '>') {
                buf[count]=current[0];
                reader.read(current,0,1);
                count++;
              }
              buf[count]=current[0];
              end_tag=new String(buf);
              end_tag=end_tag.trim();
              if (!(end_tag.equals(end[i])))               to_file(file_name + ""String_Node_Str"",end_tag,true);
            }
            to_file(file_name + ""String_Node_Str"",""String_Node_Str"",true);
            break;
          }
        }
      }
      reader.mark(2);
    }
  }
 catch (  Exception e) {
  }
}","private void parse_local_xml(String file_name){
  try {
    final String[] start=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    final String[] end=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] of_types=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    File in=new File(file_name);
    BufferedReader reader=new BufferedReader(new FileReader(in));
    int filesize=(int)(in.length() + 1);
    char[] current=new char[1];
    char[] buf=new char[filesize + 1];
    String end_tag=""String_Node_Str"";
    reader.mark(2);
    while (reader.read() != -1) {
      reader.reset();
      String buf_string=get_next_tag(reader,of_types,file_name);
      if ((buf_string.contains(""String_Node_Str"")) || (buf_string.contains(""String_Node_Str"")))       to_file(file_name + ""String_Node_Str"",""String_Node_Str"",true);
 else       if ((buf_string.contains(""String_Node_Str"")) || (buf_string.contains(""String_Node_Str""))) {
        check_for_image(file_name);
        check_for_url(file_name);
      }
 else {
        for (int i=0; i < start.length; i++) {
          if (buf_string.equals(start[i])) {
            if (buf_string.equals(""String_Node_Str""))             buf_string=""String_Node_Str"";
 else             if (buf_string.equals(""String_Node_Str""))             buf_string=""String_Node_Str"";
            to_file(file_name + ""String_Node_Str"",buf_string.substring(1,buf_string.length() - 1) + ""String_Node_Str"",true);
            while (!(end_tag.equals(end[i]))) {
              int count=0;
              current=new char[1];
              buf=new char[filesize];
              while (current[0] != '<') {
                buf[count]=current[0];
                reader.read(current,0,1);
                count++;
              }
              String cont=(new String(buf)).trim().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              if (cont.contains(""String_Node_Str""))               to_file(file_name + ""String_Node_Str"",cont.substring(cont.indexOf(""String_Node_Str"") + 5,cont.indexOf(""String_Node_Str"",cont.indexOf(""String_Node_Str"") + 6)) + ""String_Node_Str"",false);
              cont=cont.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
              to_file(file_name + ""String_Node_Str"",cont,true);
              buf=new char[1024];
              count=0;
              while (current[0] != '>') {
                buf[count]=current[0];
                reader.read(current,0,1);
                count++;
              }
              buf[count]=current[0];
              end_tag=new String(buf);
              end_tag=end_tag.trim();
              if (!(end_tag.equals(end[i])))               to_file(file_name + ""String_Node_Str"",end_tag,true);
            }
            to_file(file_name + ""String_Node_Str"",""String_Node_Str"",true);
            break;
          }
        }
      }
      reader.mark(2);
    }
  }
 catch (  Exception e) {
  }
}",0.9886934673366834
24353,"@Override public void onClick(View view){
  String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
  if (new_group.length() > 0) {
    String[] groups=read_file_to_array(""String_Node_Str"");
    boolean found=false;
    for (int i=0; i < groups.length; i++) {
      if ((groups[i].toLowerCase()).equals(new_group))       found=true;
    }
    String[] words=new_group.split(""String_Node_Str"");
    new_group=""String_Node_Str"";
    for (int i=0; i < words.length; i++) {
      char cap=Character.toUpperCase(words[i].charAt(0));
      new_group+=""String_Node_Str"" + cap + words[i].substring(1,words[i].length());
    }
    if (!found)     add_group(new_group);
  }
 else   new_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
  Boolean rss=false;
  String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
  String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
  File in=new File(get_filepath(""String_Node_Str""));
  download_finished=0;
  new adownload_file().execute(URL_check,""String_Node_Str"");
  while (download_finished == 0) {
    try {
      Thread.sleep(20);
    }
 catch (    Exception e) {
    }
  }
  if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
    try {
      BufferedReader reader=new BufferedReader(new FileReader(in));
      try {
        reader.readLine();
        String line=reader.readLine();
        if (line.contains(""String_Node_Str""))         rss=true;
 else         if ((line.contains(""String_Node_Str"")) || (line.contains(""String_Node_Str"")))         rss=true;
      }
 catch (      Exception e) {
        rss=false;
      }
    }
 catch (    Exception e) {
      rss=false;
    }
  }
  if (rss != null && !rss)   toast_message(""String_Node_Str"",0);
 else {
    if (feed_name.equals(""String_Node_Str"")) {
      new parsered(get_filepath(""String_Node_Str""));
      String[] title=read_file_to_array(""String_Node_Str"");
      feed_name=title[0];
      File temp=new File(get_filepath(""String_Node_Str""));
      temp.delete();
      temp=new File(get_filepath(""String_Node_Str""));
      temp.delete();
    }
    add_feed(feed_name,URL_check,new_group);
    alertDialog.dismiss();
  }
  in.delete();
}","@Override public void onClick(View view){
  String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
  if (new_group.length() > 0) {
    String[] groups=read_file_to_array(""String_Node_Str"");
    boolean found=false;
    for (int i=0; i < groups.length; i++) {
      if ((groups[i].toLowerCase()).equals(new_group))       found=true;
    }
    String[] words=new_group.split(""String_Node_Str"");
    new_group=""String_Node_Str"";
    if (words.length == 1) {
      char cap=Character.toUpperCase(words[0].charAt(0));
      new_group+=cap + words[i].substring(1,words[0].length());
    }
 else {
      for (int i=0; i < words.length - 1; i++) {
        char cap=Character.toUpperCase(words[i].charAt(0));
        new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
      }
      new_group+=cap + words[i].substring(1,words[i].length());
    }
    if (!found)     add_group(new_group);
  }
 else   new_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
  Boolean rss=false;
  String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
  String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
  File in=new File(get_filepath(""String_Node_Str""));
  download_finished=0;
  new adownload_file().execute(URL_check,""String_Node_Str"");
  while (download_finished == 0) {
    try {
      Thread.sleep(20);
    }
 catch (    Exception e) {
    }
  }
  if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
    try {
      BufferedReader reader=new BufferedReader(new FileReader(in));
      try {
        reader.readLine();
        String line=reader.readLine();
        if (line.contains(""String_Node_Str""))         rss=true;
 else         if ((line.contains(""String_Node_Str"")) || (line.contains(""String_Node_Str"")))         rss=true;
      }
 catch (      Exception e) {
        rss=false;
      }
    }
 catch (    Exception e) {
      rss=false;
    }
  }
  if (rss != null && !rss)   toast_message(""String_Node_Str"",0);
 else {
    if (feed_name.equals(""String_Node_Str"")) {
      new parsered(get_filepath(""String_Node_Str""));
      String[] title=read_file_to_array(""String_Node_Str"");
      feed_name=title[0];
      File temp=new File(get_filepath(""String_Node_Str""));
      temp.delete();
      temp=new File(get_filepath(""String_Node_Str""));
      temp.delete();
    }
    add_feed(feed_name,URL_check,new_group);
    alertDialog.dismiss();
  }
  in.delete();
}",0.9449485783424078
24354,"private void show_add_dialog(){
  LayoutInflater inflater=LayoutInflater.from(this);
  final View add_rss_dialog=inflater.inflate(R.layout.add_rss_dialog,null);
  check_for_no_groups();
  String[] array_spinner=read_file_to_array(""String_Node_Str"");
  Spinner group_spinner=(Spinner)add_rss_dialog.findViewById(R.id.group_spinner);
  ArrayAdapter adapter=new ArrayAdapter(this,R.layout.group_spinner_text,array_spinner);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  group_spinner.setAdapter(adapter);
  final AlertDialog alertDialog=new AlertDialog.Builder(this,2).setTitle(""String_Node_Str"").setView(add_rss_dialog).setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).create();
  alertDialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      Button b=alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
      b.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
          if (new_group.length() > 0) {
            String[] groups=read_file_to_array(""String_Node_Str"");
            boolean found=false;
            for (int i=0; i < groups.length; i++) {
              if ((groups[i].toLowerCase()).equals(new_group))               found=true;
            }
            String[] words=new_group.split(""String_Node_Str"");
            new_group=""String_Node_Str"";
            for (int i=0; i < words.length; i++) {
              char cap=Character.toUpperCase(words[i].charAt(0));
              new_group+=""String_Node_Str"" + cap + words[i].substring(1,words[i].length());
            }
            if (!found)             add_group(new_group);
          }
 else           new_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
          Boolean rss=false;
          String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
          String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
          File in=new File(get_filepath(""String_Node_Str""));
          download_finished=0;
          new adownload_file().execute(URL_check,""String_Node_Str"");
          while (download_finished == 0) {
            try {
              Thread.sleep(20);
            }
 catch (            Exception e) {
            }
          }
          if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
            try {
              BufferedReader reader=new BufferedReader(new FileReader(in));
              try {
                reader.readLine();
                String line=reader.readLine();
                if (line.contains(""String_Node_Str""))                 rss=true;
 else                 if ((line.contains(""String_Node_Str"")) || (line.contains(""String_Node_Str"")))                 rss=true;
              }
 catch (              Exception e) {
                rss=false;
              }
            }
 catch (            Exception e) {
              rss=false;
            }
          }
          if (rss != null && !rss)           toast_message(""String_Node_Str"",0);
 else {
            if (feed_name.equals(""String_Node_Str"")) {
              new parsered(get_filepath(""String_Node_Str""));
              String[] title=read_file_to_array(""String_Node_Str"");
              feed_name=title[0];
              File temp=new File(get_filepath(""String_Node_Str""));
              temp.delete();
              temp=new File(get_filepath(""String_Node_Str""));
              temp.delete();
            }
            add_feed(feed_name,URL_check,new_group);
            alertDialog.dismiss();
          }
          in.delete();
        }
      }
);
    }
  }
);
  alertDialog.show();
}","private void show_add_dialog(){
  LayoutInflater inflater=LayoutInflater.from(this);
  final View add_rss_dialog=inflater.inflate(R.layout.add_rss_dialog,null);
  check_for_no_groups();
  String[] array_spinner=read_file_to_array(""String_Node_Str"");
  Spinner group_spinner=(Spinner)add_rss_dialog.findViewById(R.id.group_spinner);
  ArrayAdapter adapter=new ArrayAdapter(this,R.layout.group_spinner_text,array_spinner);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  group_spinner.setAdapter(adapter);
  final AlertDialog alertDialog=new AlertDialog.Builder(this,2).setTitle(""String_Node_Str"").setView(add_rss_dialog).setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).create();
  alertDialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      Button b=alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
      b.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
          if (new_group.length() > 0) {
            String[] groups=read_file_to_array(""String_Node_Str"");
            boolean found=false;
            for (int i=0; i < groups.length; i++) {
              if ((groups[i].toLowerCase()).equals(new_group))               found=true;
            }
            String[] words=new_group.split(""String_Node_Str"");
            new_group=""String_Node_Str"";
            if (words.length == 1) {
              char cap=Character.toUpperCase(words[0].charAt(0));
              new_group+=cap + words[i].substring(1,words[0].length());
            }
 else {
              for (int i=0; i < words.length - 1; i++) {
                char cap=Character.toUpperCase(words[i].charAt(0));
                new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
              }
              new_group+=cap + words[i].substring(1,words[i].length());
            }
            if (!found)             add_group(new_group);
          }
 else           new_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
          Boolean rss=false;
          String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
          String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
          File in=new File(get_filepath(""String_Node_Str""));
          download_finished=0;
          new adownload_file().execute(URL_check,""String_Node_Str"");
          while (download_finished == 0) {
            try {
              Thread.sleep(20);
            }
 catch (            Exception e) {
            }
          }
          if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
            try {
              BufferedReader reader=new BufferedReader(new FileReader(in));
              try {
                reader.readLine();
                String line=reader.readLine();
                if (line.contains(""String_Node_Str""))                 rss=true;
 else                 if ((line.contains(""String_Node_Str"")) || (line.contains(""String_Node_Str"")))                 rss=true;
              }
 catch (              Exception e) {
                rss=false;
              }
            }
 catch (            Exception e) {
              rss=false;
            }
          }
          if (rss != null && !rss)           toast_message(""String_Node_Str"",0);
 else {
            if (feed_name.equals(""String_Node_Str"")) {
              new parsered(get_filepath(""String_Node_Str""));
              String[] title=read_file_to_array(""String_Node_Str"");
              feed_name=title[0];
              File temp=new File(get_filepath(""String_Node_Str""));
              temp.delete();
              temp=new File(get_filepath(""String_Node_Str""));
              temp.delete();
            }
            add_feed(feed_name,URL_check,new_group);
            alertDialog.dismiss();
          }
          in.delete();
        }
      }
);
    }
  }
);
  alertDialog.show();
}",0.957659208261618
24355,"@Override public void onShow(DialogInterface dialog){
  Button b=alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
  b.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
      if (new_group.length() > 0) {
        String[] groups=read_file_to_array(""String_Node_Str"");
        boolean found=false;
        for (int i=0; i < groups.length; i++) {
          if ((groups[i].toLowerCase()).equals(new_group))           found=true;
        }
        String[] words=new_group.split(""String_Node_Str"");
        new_group=""String_Node_Str"";
        for (int i=0; i < words.length; i++) {
          char cap=Character.toUpperCase(words[i].charAt(0));
          new_group+=""String_Node_Str"" + cap + words[i].substring(1,words[i].length());
        }
        if (!found)         add_group(new_group);
      }
 else       new_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
      Boolean rss=false;
      String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
      String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
      File in=new File(get_filepath(""String_Node_Str""));
      download_finished=0;
      new adownload_file().execute(URL_check,""String_Node_Str"");
      while (download_finished == 0) {
        try {
          Thread.sleep(20);
        }
 catch (        Exception e) {
        }
      }
      if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
        try {
          BufferedReader reader=new BufferedReader(new FileReader(in));
          try {
            reader.readLine();
            String line=reader.readLine();
            if (line.contains(""String_Node_Str""))             rss=true;
 else             if ((line.contains(""String_Node_Str"")) || (line.contains(""String_Node_Str"")))             rss=true;
          }
 catch (          Exception e) {
            rss=false;
          }
        }
 catch (        Exception e) {
          rss=false;
        }
      }
      if (rss != null && !rss)       toast_message(""String_Node_Str"",0);
 else {
        if (feed_name.equals(""String_Node_Str"")) {
          new parsered(get_filepath(""String_Node_Str""));
          String[] title=read_file_to_array(""String_Node_Str"");
          feed_name=title[0];
          File temp=new File(get_filepath(""String_Node_Str""));
          temp.delete();
          temp=new File(get_filepath(""String_Node_Str""));
          temp.delete();
        }
        add_feed(feed_name,URL_check,new_group);
        alertDialog.dismiss();
      }
      in.delete();
    }
  }
);
}","@Override public void onShow(DialogInterface dialog){
  Button b=alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
  b.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
      if (new_group.length() > 0) {
        String[] groups=read_file_to_array(""String_Node_Str"");
        boolean found=false;
        for (int i=0; i < groups.length; i++) {
          if ((groups[i].toLowerCase()).equals(new_group))           found=true;
        }
        String[] words=new_group.split(""String_Node_Str"");
        new_group=""String_Node_Str"";
        if (words.length == 1) {
          char cap=Character.toUpperCase(words[0].charAt(0));
          new_group+=cap + words[i].substring(1,words[0].length());
        }
 else {
          for (int i=0; i < words.length - 1; i++) {
            char cap=Character.toUpperCase(words[i].charAt(0));
            new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
          }
          new_group+=cap + words[i].substring(1,words[i].length());
        }
        if (!found)         add_group(new_group);
      }
 else       new_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
      Boolean rss=false;
      String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
      String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
      File in=new File(get_filepath(""String_Node_Str""));
      download_finished=0;
      new adownload_file().execute(URL_check,""String_Node_Str"");
      while (download_finished == 0) {
        try {
          Thread.sleep(20);
        }
 catch (        Exception e) {
        }
      }
      if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
        try {
          BufferedReader reader=new BufferedReader(new FileReader(in));
          try {
            reader.readLine();
            String line=reader.readLine();
            if (line.contains(""String_Node_Str""))             rss=true;
 else             if ((line.contains(""String_Node_Str"")) || (line.contains(""String_Node_Str"")))             rss=true;
          }
 catch (          Exception e) {
            rss=false;
          }
        }
 catch (        Exception e) {
          rss=false;
        }
      }
      if (rss != null && !rss)       toast_message(""String_Node_Str"",0);
 else {
        if (feed_name.equals(""String_Node_Str"")) {
          new parsered(get_filepath(""String_Node_Str""));
          String[] title=read_file_to_array(""String_Node_Str"");
          feed_name=title[0];
          File temp=new File(get_filepath(""String_Node_Str""));
          temp.delete();
          temp=new File(get_filepath(""String_Node_Str""));
          temp.delete();
        }
        add_feed(feed_name,URL_check,new_group);
        alertDialog.dismiss();
      }
      in.delete();
    }
  }
);
}",0.9494983846284646
24356,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.card_layout,parent,false);
    holder=new ViewHolder();
    holder.title_view=(TextView)convertView.findViewById(R.id.title);
    holder.time_view=(TextView)convertView.findViewById(R.id.time);
    holder.description_view=(TextView)convertView.findViewById(R.id.description);
    convertView.setTag(holder);
  }
 else   holder=(ViewHolder)convertView.getTag();
  holder.title_view.setText(content_titles.get(position));
  holder.time_view.setText(content_times.get(position));
  holder.description_view.setText(content_des.get(position));
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.card_layout,parent,false);
    holder=new ViewHolder();
    holder.title_view=(TextView)convertView.findViewById(R.id.title);
    holder.time_view=(TextView)convertView.findViewById(R.id.time);
    holder.description_view=(TextView)convertView.findViewById(R.id.description);
    convertView.setTag(holder);
  }
 else   holder=(ViewHolder)convertView.getTag();
  holder.title_view.setText(content_titles.get(position));
  holder.time_view.setText(content_links.get(position));
  holder.description_view.setText(content_des.get(position));
  return convertView;
}",0.9945429740791268
24357,"public void add_list(List<String> new_titles,List<String> new_des,List<String> new_times){
  content_titles=new_titles;
  content_des=new_des;
  content_times=new_times;
}","public void add_list(List<String> new_titles,List<String> new_des,List<String> new_links){
  content_titles=new_titles;
  content_des=new_des;
  content_links=new_links;
}",0.9473684210526316
24358,"@Override public void onClick(View view){
  String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
  boolean found=false;
  boolean new_group_mode=false;
  if (new_group.length() > 0) {
    new_group_mode=true;
    for (int i=0; i < current_groups.length; i++) {
      if ((current_groups[i].toLowerCase()).equals(new_group))       found=true;
    }
    String[] words=new_group.split(""String_Node_Str"");
    new_group=""String_Node_Str"";
    if (words.length == 1) {
      char cap=Character.toUpperCase(words[0].charAt(0));
      new_group+=cap + words[0].substring(1,words[0].length());
    }
 else {
      for (int i=0; i < words.length - 1; i++) {
        char cap=Character.toUpperCase(words[i].charAt(0));
        new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
      }
      char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
      new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
    }
  }
 else   new_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
  Boolean rss=false;
  String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
  String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
  File in=new File(get_filepath(""String_Node_Str""));
  download_finished=0;
  new adownload_file().execute(URL_check,""String_Node_Str"");
  while (download_finished == 0) {
    try {
      Thread.sleep(20);
    }
 catch (    Exception e) {
    }
  }
  if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
    try {
      BufferedReader reader=new BufferedReader(new FileReader(in));
      try {
        for (int i=0; i < 3; i++) {
          String line=reader.readLine();
          if (line.contains(""String_Node_Str"")) {
            rss=true;
            break;
          }
 else           if ((line.contains(""String_Node_Str"")) || (line.contains(""String_Node_Str""))) {
            rss=true;
            break;
          }
        }
      }
 catch (      Exception e) {
        rss=false;
      }
    }
 catch (    Exception e) {
      rss=false;
    }
  }
  if (rss != null && !rss)   toast_message(""String_Node_Str"",0);
 else {
    if ((!found) && (new_group_mode))     add_group(new_group);
    if (feed_name.equals(""String_Node_Str"")) {
      new parsered(get_filepath(""String_Node_Str""));
      String[] title=read_csv_to_array(""String_Node_Str"",get_filepath(""String_Node_Str""));
      feed_name=title[0];
      File temp=new File(get_filepath(""String_Node_Str""));
      temp.delete();
    }
    add_feed(feed_name,URL_check,new_group);
    alertDialog.dismiss();
  }
  in.delete();
}","@Override public void onClick(View view){
  String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
  boolean found=false;
  boolean new_group_mode=false;
  if (new_group.length() > 0) {
    new_group_mode=true;
    for (int i=0; i < current_groups.length; i++) {
      if ((current_groups[i].toLowerCase()).equals(new_group))       found=true;
    }
    String[] words=new_group.split(""String_Node_Str"");
    new_group=""String_Node_Str"";
    if (words.length == 1) {
      char cap=Character.toUpperCase(words[0].charAt(0));
      new_group+=cap + words[0].substring(1,words[0].length());
    }
 else {
      for (int i=0; i < words.length - 1; i++) {
        char cap=Character.toUpperCase(words[i].charAt(0));
        new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
      }
      char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
      new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
    }
  }
 else   new_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
  Boolean rss=false;
  String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
  String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
  File in=new File(get_filepath(""String_Node_Str""));
  download_finished=0;
  new adownload_file().execute(URL_check,""String_Node_Str"");
  while (download_finished == 0) {
    try {
      Thread.sleep(20);
    }
 catch (    Exception e) {
    }
  }
  if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
    try {
      BufferedReader reader=new BufferedReader(new FileReader(in));
      try {
        for (int i=0; i < 3; i++) {
          String line=reader.readLine();
          if (line.contains(""String_Node_Str"")) {
            rss=true;
            break;
          }
 else           if ((line.contains(""String_Node_Str"")) || (line.contains(""String_Node_Str""))) {
            rss=true;
            break;
          }
        }
      }
 catch (      Exception e) {
        rss=false;
      }
    }
 catch (    Exception e) {
      rss=false;
    }
  }
  if (rss != null && !rss)   toast_message(""String_Node_Str"",0);
 else {
    if ((!found) && (new_group_mode))     add_group(new_group);
    if (feed_name.equals(""String_Node_Str"")) {
      try {
        String file_path=get_filepath(""String_Node_Str"");
        File temp=new File(file_path + ""String_Node_Str"");
        new parsered(file_path);
        String line=(new BufferedReader(new FileReader(temp))).readLine();
        int content_start=line.indexOf(""String_Node_Str"") + 6;
        feed_name=line.substring(content_start,line.indexOf('|',content_start));
        temp.delete();
        (new File(file_path)).delete();
      }
 catch (      Exception e) {
        toast_message(""String_Node_Str"",1);
      }
    }
    add_feed(feed_name,URL_check,new_group);
    alertDialog.dismiss();
  }
  in.delete();
}",0.8860888813213008
24359,"private void show_add_dialog(){
  LayoutInflater inflater=LayoutInflater.from(this);
  final View add_rss_dialog=inflater.inflate(R.layout.add_rss_dialog,null);
  check_for_no_groups();
  Spinner group_spinner=(Spinner)add_rss_dialog.findViewById(R.id.group_spinner);
  ArrayAdapter adapter=new ArrayAdapter(this,R.layout.group_spinner_text,current_groups);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  group_spinner.setAdapter(adapter);
  final AlertDialog alertDialog=new AlertDialog.Builder(this,2).setTitle(""String_Node_Str"").setView(add_rss_dialog).setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).create();
  alertDialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      Button b=alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
      b.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
          boolean found=false;
          boolean new_group_mode=false;
          if (new_group.length() > 0) {
            new_group_mode=true;
            for (int i=0; i < current_groups.length; i++) {
              if ((current_groups[i].toLowerCase()).equals(new_group))               found=true;
            }
            String[] words=new_group.split(""String_Node_Str"");
            new_group=""String_Node_Str"";
            if (words.length == 1) {
              char cap=Character.toUpperCase(words[0].charAt(0));
              new_group+=cap + words[0].substring(1,words[0].length());
            }
 else {
              for (int i=0; i < words.length - 1; i++) {
                char cap=Character.toUpperCase(words[i].charAt(0));
                new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
              }
              char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
              new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
            }
          }
 else           new_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
          Boolean rss=false;
          String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
          String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
          File in=new File(get_filepath(""String_Node_Str""));
          download_finished=0;
          new adownload_file().execute(URL_check,""String_Node_Str"");
          while (download_finished == 0) {
            try {
              Thread.sleep(20);
            }
 catch (            Exception e) {
            }
          }
          if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
            try {
              BufferedReader reader=new BufferedReader(new FileReader(in));
              try {
                for (int i=0; i < 3; i++) {
                  String line=reader.readLine();
                  if (line.contains(""String_Node_Str"")) {
                    rss=true;
                    break;
                  }
 else                   if ((line.contains(""String_Node_Str"")) || (line.contains(""String_Node_Str""))) {
                    rss=true;
                    break;
                  }
                }
              }
 catch (              Exception e) {
                rss=false;
              }
            }
 catch (            Exception e) {
              rss=false;
            }
          }
          if (rss != null && !rss)           toast_message(""String_Node_Str"",0);
 else {
            if ((!found) && (new_group_mode))             add_group(new_group);
            if (feed_name.equals(""String_Node_Str"")) {
              new parsered(get_filepath(""String_Node_Str""));
              String[] title=read_csv_to_array(""String_Node_Str"",get_filepath(""String_Node_Str""));
              feed_name=title[0];
              File temp=new File(get_filepath(""String_Node_Str""));
              temp.delete();
            }
            add_feed(feed_name,URL_check,new_group);
            alertDialog.dismiss();
          }
          in.delete();
        }
      }
);
    }
  }
);
  alertDialog.show();
}","private void show_add_dialog(){
  LayoutInflater inflater=LayoutInflater.from(this);
  final View add_rss_dialog=inflater.inflate(R.layout.add_rss_dialog,null);
  check_for_no_groups();
  Spinner group_spinner=(Spinner)add_rss_dialog.findViewById(R.id.group_spinner);
  ArrayAdapter adapter=new ArrayAdapter(this,R.layout.group_spinner_text,current_groups);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  group_spinner.setAdapter(adapter);
  final AlertDialog alertDialog=new AlertDialog.Builder(this,2).setTitle(""String_Node_Str"").setView(add_rss_dialog).setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
    }
  }
).create();
  alertDialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      Button b=alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
      b.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
          boolean found=false;
          boolean new_group_mode=false;
          if (new_group.length() > 0) {
            new_group_mode=true;
            for (int i=0; i < current_groups.length; i++) {
              if ((current_groups[i].toLowerCase()).equals(new_group))               found=true;
            }
            String[] words=new_group.split(""String_Node_Str"");
            new_group=""String_Node_Str"";
            if (words.length == 1) {
              char cap=Character.toUpperCase(words[0].charAt(0));
              new_group+=cap + words[0].substring(1,words[0].length());
            }
 else {
              for (int i=0; i < words.length - 1; i++) {
                char cap=Character.toUpperCase(words[i].charAt(0));
                new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
              }
              char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
              new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
            }
          }
 else           new_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
          Boolean rss=false;
          String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
          String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
          File in=new File(get_filepath(""String_Node_Str""));
          download_finished=0;
          new adownload_file().execute(URL_check,""String_Node_Str"");
          while (download_finished == 0) {
            try {
              Thread.sleep(20);
            }
 catch (            Exception e) {
            }
          }
          if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
            try {
              BufferedReader reader=new BufferedReader(new FileReader(in));
              try {
                for (int i=0; i < 3; i++) {
                  String line=reader.readLine();
                  if (line.contains(""String_Node_Str"")) {
                    rss=true;
                    break;
                  }
 else                   if ((line.contains(""String_Node_Str"")) || (line.contains(""String_Node_Str""))) {
                    rss=true;
                    break;
                  }
                }
              }
 catch (              Exception e) {
                rss=false;
              }
            }
 catch (            Exception e) {
              rss=false;
            }
          }
          if (rss != null && !rss)           toast_message(""String_Node_Str"",0);
 else {
            if ((!found) && (new_group_mode))             add_group(new_group);
            if (feed_name.equals(""String_Node_Str"")) {
              try {
                String file_path=get_filepath(""String_Node_Str"");
                File temp=new File(file_path + ""String_Node_Str"");
                new parsered(file_path);
                String line=(new BufferedReader(new FileReader(temp))).readLine();
                int content_start=line.indexOf(""String_Node_Str"") + 6;
                feed_name=line.substring(content_start,line.indexOf('|',content_start));
                temp.delete();
                (new File(file_path)).delete();
              }
 catch (              Exception e) {
                toast_message(""String_Node_Str"",1);
              }
            }
            add_feed(feed_name,URL_check,new_group);
            alertDialog.dismiss();
          }
          in.delete();
        }
      }
);
    }
  }
);
  alertDialog.show();
}",0.9163486333161424
24360,"protected Long doInBackground(Void... ton){
  String file_path=get_filepath(""String_Node_Str"");
  String[] feeds_array=read_feeds_to_array(0,file_path);
  String[] url_array=read_feeds_to_array(1,file_path);
  String[] group_array=read_feeds_to_array(2,file_path);
  File wait;
  String feed_path;
  for (int k=0; k < feeds_array.length; k++) {
    feed_path=get_filepath(feeds_array[k] + ""String_Node_Str"");
    wait=new File(feed_path);
    download_file(url_array[k],feeds_array[k] + ""String_Node_Str"");
    String[] len=read_file_to_array(feeds_array[k] + ""String_Node_Str"");
    new parsered(feed_path);
    wait.delete();
    remove_duplicates(feeds_array[k] + ""String_Node_Str"",len.length);
    String[] titles=read_csv_to_array(""String_Node_Str"",feed_path + ""String_Node_Str"");
    String[] links=read_csv_to_array(""String_Node_Str"",feed_path + ""String_Node_Str"");
    if (links[0].length() < 10)     links=read_csv_to_array(""String_Node_Str"",feed_path + ""String_Node_Str"");
    String[] descriptions=read_csv_to_array(""String_Node_Str"",feed_path + ""String_Node_Str"");
    for (int i=0; i < current_groups.length; i++) {
      if (current_groups[i].equals(group_array[k])) {
        ((card_adapter)((ArrayListFragment)getFragmentManager().findFragmentByTag(""String_Node_Str"" + viewPager.getId() + ""String_Node_Str""+ Integer.toString(i))).getListAdapter()).add_list(Arrays.asList(titles),Arrays.asList(descriptions),Arrays.asList(links));
        publishProgress(i);
        break;
      }
    }
  }
  long lo=1;
  return lo;
}","protected Long doInBackground(Void... ton){
  ((card_adapter)((ArrayListFragment)getFragmentManager().findFragmentByTag(""String_Node_Str"" + viewPager.getId() + ""String_Node_Str"")).getListAdapter()).clear_static_list();
  for (int i=0; i < current_groups.length; i++) {
    String[] feeds_array=read_feeds_to_array(0,get_filepath(current_groups[i] + ""String_Node_Str""));
    String[] url_array=read_feeds_to_array(1,get_filepath(current_groups[i] + ""String_Node_Str""));
    File wait;
    String feed_path;
    List<String> titles=new ArrayList();
    List<String> descriptions=new ArrayList();
    List<String> links=new ArrayList();
    for (int k=0; k < feeds_array.length; k++) {
      feed_path=get_filepath(feeds_array[k] + ""String_Node_Str"");
      wait=new File(feed_path);
      download_file(url_array[k],feeds_array[k] + ""String_Node_Str"");
      String[] len=read_file_to_array(feeds_array[k] + ""String_Node_Str"");
      new parsered(feed_path);
      wait.delete();
      remove_duplicates(feeds_array[k] + ""String_Node_Str"",len.length);
      titles.addAll(Arrays.asList(read_csv_to_array(""String_Node_Str"",feed_path + ""String_Node_Str"")));
      descriptions.addAll(Arrays.asList(read_csv_to_array(""String_Node_Str"",feed_path + ""String_Node_Str"")));
      String[] link=read_csv_to_array(""String_Node_Str"",feed_path + ""String_Node_Str"");
      if (link[0].length() < 10)       link=read_csv_to_array(""String_Node_Str"",feed_path + ""String_Node_Str"");
      links.addAll(Arrays.asList(link));
    }
    ((card_adapter)((ArrayListFragment)getFragmentManager().findFragmentByTag(""String_Node_Str"" + viewPager.getId() + ""String_Node_Str""+ Integer.toString(i))).getListAdapter()).add_list(titles,descriptions,links);
    ((card_adapter)((ArrayListFragment)getFragmentManager().findFragmentByTag(""String_Node_Str"" + viewPager.getId() + ""String_Node_Str"")).getListAdapter()).add_static_list(titles,descriptions,links);
    publishProgress(i);
  }
  long lo=1;
  return lo;
}",0.5748434832100171
24361,"@Override public void onShow(DialogInterface dialog){
  Button b=alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
  b.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
      boolean found=false;
      boolean new_group_mode=false;
      if (new_group.length() > 0) {
        new_group_mode=true;
        for (int i=0; i < current_groups.length; i++) {
          if ((current_groups[i].toLowerCase()).equals(new_group))           found=true;
        }
        String[] words=new_group.split(""String_Node_Str"");
        new_group=""String_Node_Str"";
        if (words.length == 1) {
          char cap=Character.toUpperCase(words[0].charAt(0));
          new_group+=cap + words[0].substring(1,words[0].length());
        }
 else {
          for (int i=0; i < words.length - 1; i++) {
            char cap=Character.toUpperCase(words[i].charAt(0));
            new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
          }
          char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
          new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
        }
      }
 else       new_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
      Boolean rss=false;
      String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
      String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
      File in=new File(get_filepath(""String_Node_Str""));
      download_finished=0;
      new adownload_file().execute(URL_check,""String_Node_Str"");
      while (download_finished == 0) {
        try {
          Thread.sleep(20);
        }
 catch (        Exception e) {
        }
      }
      if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
        try {
          BufferedReader reader=new BufferedReader(new FileReader(in));
          try {
            for (int i=0; i < 3; i++) {
              String line=reader.readLine();
              if (line.contains(""String_Node_Str"")) {
                rss=true;
                break;
              }
 else               if ((line.contains(""String_Node_Str"")) || (line.contains(""String_Node_Str""))) {
                rss=true;
                break;
              }
            }
          }
 catch (          Exception e) {
            rss=false;
          }
        }
 catch (        Exception e) {
          rss=false;
        }
      }
      if (rss != null && !rss)       toast_message(""String_Node_Str"",0);
 else {
        if ((!found) && (new_group_mode))         add_group(new_group);
        if (feed_name.equals(""String_Node_Str"")) {
          new parsered(get_filepath(""String_Node_Str""));
          String[] title=read_csv_to_array(""String_Node_Str"",get_filepath(""String_Node_Str""));
          feed_name=title[0];
          File temp=new File(get_filepath(""String_Node_Str""));
          temp.delete();
        }
        add_feed(feed_name,URL_check,new_group);
        alertDialog.dismiss();
      }
      in.delete();
    }
  }
);
}","@Override public void onShow(DialogInterface dialog){
  Button b=alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
  b.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String new_group=((EditText)add_rss_dialog.findViewById(R.id.group_edit)).getText().toString().trim().toLowerCase();
      boolean found=false;
      boolean new_group_mode=false;
      if (new_group.length() > 0) {
        new_group_mode=true;
        for (int i=0; i < current_groups.length; i++) {
          if ((current_groups[i].toLowerCase()).equals(new_group))           found=true;
        }
        String[] words=new_group.split(""String_Node_Str"");
        new_group=""String_Node_Str"";
        if (words.length == 1) {
          char cap=Character.toUpperCase(words[0].charAt(0));
          new_group+=cap + words[0].substring(1,words[0].length());
        }
 else {
          for (int i=0; i < words.length - 1; i++) {
            char cap=Character.toUpperCase(words[i].charAt(0));
            new_group+=cap + words[i].substring(1,words[i].length()) + ""String_Node_Str"";
          }
          char cap=Character.toUpperCase(words[words.length - 1].charAt(0));
          new_group+=cap + words[words.length - 1].substring(1,words[words.length - 1].length());
        }
      }
 else       new_group=((Spinner)add_rss_dialog.findViewById(R.id.group_spinner)).getSelectedItem().toString();
      Boolean rss=false;
      String URL_check=((EditText)add_rss_dialog.findViewById(R.id.URL_edit)).getText().toString().trim();
      String feed_name=((EditText)add_rss_dialog.findViewById(R.id.name_edit)).getText().toString().trim();
      File in=new File(get_filepath(""String_Node_Str""));
      download_finished=0;
      new adownload_file().execute(URL_check,""String_Node_Str"");
      while (download_finished == 0) {
        try {
          Thread.sleep(20);
        }
 catch (        Exception e) {
        }
      }
      if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
        try {
          BufferedReader reader=new BufferedReader(new FileReader(in));
          try {
            for (int i=0; i < 3; i++) {
              String line=reader.readLine();
              if (line.contains(""String_Node_Str"")) {
                rss=true;
                break;
              }
 else               if ((line.contains(""String_Node_Str"")) || (line.contains(""String_Node_Str""))) {
                rss=true;
                break;
              }
            }
          }
 catch (          Exception e) {
            rss=false;
          }
        }
 catch (        Exception e) {
          rss=false;
        }
      }
      if (rss != null && !rss)       toast_message(""String_Node_Str"",0);
 else {
        if ((!found) && (new_group_mode))         add_group(new_group);
        if (feed_name.equals(""String_Node_Str"")) {
          try {
            String file_path=get_filepath(""String_Node_Str"");
            File temp=new File(file_path + ""String_Node_Str"");
            new parsered(file_path);
            String line=(new BufferedReader(new FileReader(temp))).readLine();
            int content_start=line.indexOf(""String_Node_Str"") + 6;
            feed_name=line.substring(content_start,line.indexOf('|',content_start));
            temp.delete();
            (new File(file_path)).delete();
          }
 catch (          Exception e) {
            toast_message(""String_Node_Str"",1);
          }
        }
        add_feed(feed_name,URL_check,new_group);
        alertDialog.dismiss();
      }
      in.delete();
    }
  }
);
}",0.8913075025395444
24362,"protected void onProgressUpdate(Integer... progress){
  ((card_adapter)((ArrayListFragment)getFragmentManager().findFragmentByTag(""String_Node_Str"" + viewPager.getId() + ""String_Node_Str""+ Integer.toString(progress[0]))).getListAdapter()).notifyDataSetChanged();
}","protected void onProgressUpdate(Integer... progress){
  ((card_adapter)((ArrayListFragment)getFragmentManager().findFragmentByTag(""String_Node_Str"" + viewPager.getId() + ""String_Node_Str""+ Integer.toString(progress[0]))).getListAdapter()).notifyDataSetChanged();
  ((card_adapter)((ArrayListFragment)getFragmentManager().findFragmentByTag(""String_Node_Str"" + viewPager.getId() + ""String_Node_Str"")).getListAdapter()).notifyDataSetChanged();
}",0.7478753541076487
24363,"@Override public void characters(char[] ac,int i,int j) throws SAXException {
  String tmpValue=new String(ac,i,j);
  boolean empty=true;
  if (tmpValue.length() > 0) {
    for (int k=0; i < tmpValue.length() - 1; i++) {
      if ((tmpValue.charAt(k) != ' ') && (tmpValue.charAt(k) != '\t')) {
        empty=false;
        break;
      }
    }
  }
  if (empty == false) {
    try {
      if (title_mode.equals(""String_Node_Str"")) {
        for (int l=0; l < content_titles.length; l++) {
          if (content_titles[l] == tmpValue) {
          }
 else {
            title_mode=""String_Node_Str"";
            if ((mode.equals(""String_Node_Str"")))             to_file(this.file + ""String_Node_Str"",""String_Node_Str"");
          }
        }
      }
      if (title_mode.equals(""String_Node_Str"")) {
        if (mode.equals(""String_Node_Str""))         to_file(this.file + ""String_Node_Str"",tmpValue + ""String_Node_Str"");
        if (mode.equals(""String_Node_Str""))         to_file(this.file + ""String_Node_Str"",tmpValue + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
    }
  }
}","@Override public void characters(char[] ac,int i,int j) throws SAXException {
  String content_string=new String(ac,i,j);
  boolean empty=true;
  if (content_string.length() > 0) {
    for (int k=0; i < content_string.length() - 1; i++) {
      if ((content_string.charAt(k) != ' ') && (content_string.charAt(k) != '\t')) {
        empty=false;
        break;
      }
    }
  }
  if (empty == false) {
    try {
      if ((check_existing == true) && (skip == false)) {
        boolean match=false;
        for (int l=0; l < content_titles.length; l++) {
          if (content_titles[l].equals(content_string)) {
            match=true;
            break;
          }
        }
        if (match == false) {
          check_existing=false;
          to_file(this.file + ""String_Node_Str"",""String_Node_Str"");
        }
        skip=true;
      }
      if (check_existing == false) {
        if (mode.equals(""String_Node_Str""))         to_file(this.file + ""String_Node_Str"",content_string + ""String_Node_Str"");
        if (mode.equals(""String_Node_Str""))         to_file(this.file + ""String_Node_Str"",content_string + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
    }
  }
}",0.334503950834065
24364,"public parsered(String file_path){
  this.file=file_path;
  parse_local_xml(file_path);
}","public parsered(String file_path){
  this.file=file_path;
  content_titles=read_csv_to_array(""String_Node_Str"",""String_Node_Str"");
  parse_local_xml(file_path);
}",0.7091633466135459
24365,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  try {
    if ((title_mode.equals(""String_Node_Str"")) || (qName.equals(""String_Node_Str""))) {
      if (qName.equals(""String_Node_Str"")) {
        mode=""String_Node_Str"";
        title_mode=""String_Node_Str"";
        to_file(this.file + ""String_Node_Str"",""String_Node_Str"");
        content_titles=read_csv_to_array(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (qName.equals(""String_Node_Str"")) {
        mode=""String_Node_Str"";
        to_file(this.file + ""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
  }
}","@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  try {
    if (qName.equals(""String_Node_Str"")) {
      mode=""String_Node_Str"";
      if (check_existing == true) {
        check_existing=false;
        skip=false;
      }
 else {
        content_titles=read_csv_to_array(""String_Node_Str"",""String_Node_Str"");
        to_file(this.file + ""String_Node_Str"",""String_Node_Str"");
      }
    }
 else     if (qName.equals(""String_Node_Str"")) {
      mode=""String_Node_Str"";
      to_file(this.file + ""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  Exception e) {
  }
}",0.3596559812353401
24366,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  try {
    if (qName.equals(""String_Node_Str""))     mode=""String_Node_Str"";
 else     if (qName.equals(""String_Node_Str""))     mode=""String_Node_Str"";
    if (qName.equals(""String_Node_Str""))     title_mode=""String_Node_Str"";
 else {
      if ((mode.equals(""String_Node_Str"")) && (!(qName.equals(""String_Node_Str""))))       to_file(this.file + ""String_Node_Str"",qName + ""String_Node_Str"");
 else       if ((mode.equals(""String_Node_Str"")) && (!(qName.equals(""String_Node_Str""))) && (!(qName.equals(""String_Node_Str"")))&& (!(qName.equals(""String_Node_Str""))))       to_file(this.file + ""String_Node_Str"",qName + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
  }
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  try {
    if (qName.equals(""String_Node_Str""))     mode=""String_Node_Str"";
 else     if (qName.equals(""String_Node_Str""))     mode=""String_Node_Str"";
    if (check_existing == false) {
      if ((qName == ""String_Node_Str"") && (mode.equals(""String_Node_Str"")))       check_existing=true;
 else {
        if ((mode.equals(""String_Node_Str"")) && (!(qName.equals(""String_Node_Str""))) && (!qName.equals(""String_Node_Str"")))         to_file(this.file + ""String_Node_Str"",qName + ""String_Node_Str"");
 else         if ((mode.equals(""String_Node_Str"")) && (!(qName.equals(""String_Node_Str""))) && (!(qName.equals(""String_Node_Str"")))&& (!(qName.equals(""String_Node_Str""))))         to_file(this.file + ""String_Node_Str"",qName + ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
  }
}",0.8549618320610687
24367,"@Override public void run(){
  boolean was_interrupted=false;
  _is_playing=true;
  while (!was_interrupted) {
    try {
      getSamples(_samples,_buffer_size);
      if (_buffer.length < _buffer_size) {
        _buffer=new short[_buffer_size];
      }
      for (int i=0; i < _buffer_size; i++) {
        _buffer[i]=(short)(_samples[i] * Short.MAX_VALUE);
      }
      if (_track != null) {
        _track.write(_buffer,0,_buffer_size);
      }
    }
 catch (    Exception e) {
      was_interrupted=true;
      Log.e(TAG,LOGPREFIX + ""String_Node_Str"" + e.toString());
    }
    if (Thread.interrupted()) {
      was_interrupted=true;
    }
  }
  if (_track != null) {
    _track.release();
  }
  _is_playing=false;
}","@Override public void run(){
  boolean was_interrupted=false;
  _is_playing=true;
  while (!was_interrupted) {
    try {
      getSamples(_samples,_buffer_size);
      if (_buffer.length < _buffer_size) {
        _buffer=new short[_buffer_size];
      }
      for (int i=0; i < _buffer_size; i++) {
        _buffer[i]=(short)(_samples[i] * Short.MAX_VALUE);
      }
      if (_track != null) {
        _track.write(_buffer,0,_buffer_size);
      }
    }
 catch (    Exception e) {
      was_interrupted=true;
      Log.e(TAG,LOGPREFIX + ""String_Node_Str"" + e.toString());
    }
    if (Thread.interrupted()) {
      was_interrupted=true;
    }
  }
  _is_playing=false;
}",0.9640287769784172
24368,"public synchronized void stop(){
  if (_thread == null) {
    return;
  }
  _thread.interrupt();
  _is_playing=false;
  if (_track.getPlayState() == AudioTrack.PLAYSTATE_PLAYING) {
    _track.flush();
    _track.stop();
  }
  _track.release();
  _track=null;
  resetFlags();
}","/** 
 * Kill the thread, stop and release audio resources
 */
public synchronized void stop(){
  if (_thread == null) {
    return;
  }
  _thread.interrupt();
  _is_playing=false;
  if (_track.getPlayState() == AudioTrack.PLAYSTATE_PLAYING) {
    _track.pause();
    _track.flush();
  }
  _track.release();
  _track=null;
  resetFlags();
}",0.8357723577235773
24369,"public Association hasAndBelongsToMany(String name){
  Association assoc=new Association(relations,name,false,false);
  relations.put(name,assoc);
  return assoc;
}","public Association hasAndBelongsToMany(String name){
  return assoc(name,false,false);
}",0.6666666666666666
24370,"public Association hasOne(String name){
  Association assoc=new Association(relations,name,true,true);
  relations.put(name,assoc);
  return assoc;
}","public Association hasOne(String name){
  return assoc(name,true,true);
}",0.6216216216216216
24371,"public Association belongsTo(String name){
  Association assoc=new Association(relations,name,true,false);
  relations.put(name,assoc);
  return assoc;
}","public Association belongsTo(String name){
  return assoc(name,true,false);
}",0.6347826086956522
24372,"public Association hasMany(String name){
  Association assoc=new Association(relations,name,false,true);
  relations.put(name,assoc);
  return assoc;
}","public Association hasMany(String name){
  return assoc(name,false,true);
}",0.6283185840707964
24373,"public PreparedStatement prepare(String sql,Object[] params,int[] types){
  try {
    PreparedStatement call;
    if (sql.trim().startsWith(""String_Node_Str"")) {
      call=base.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
    }
 else {
      call=base.prepareStatement(sql);
    }
    if (params != null && params.length > 0) {
      for (int i=0; i < params.length; i++) {
        if (params[i] != null) {
          call.setObject(i + 1,params[i]);
        }
 else {
          call.setNull(i + 1,types[i]);
        }
      }
    }
    return call;
  }
 catch (  SQLException e) {
    throw new SqlExecuteException(sql,e);
  }
}","public PreparedStatement prepare(String sql,Object[] params,int[] types){
  try {
    PreparedStatement call;
    if (sql.trim().toLowerCase().startsWith(""String_Node_Str"")) {
      call=base.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
    }
 else {
      call=base.prepareStatement(sql);
    }
    if (params != null && params.length > 0) {
      for (int i=0; i < params.length; i++) {
        if (params[i] != null) {
          call.setObject(i + 1,params[i]);
        }
 else {
          call.setNull(i + 1,types[i]);
        }
      }
    }
    return call;
  }
 catch (  SQLException e) {
    throw new SqlExecuteException(sql,e);
  }
}",0.9891640866873064
24374,"public static String toHexString(byte[] coded,int offsetStart,int offsetEnd){
  if (coded == null) {
    return ""String_Node_Str"";
  }
  int len=coded.length - offsetEnd;
  StringBuilder result=new StringBuilder(len * 3);
  for (int i=offsetStart; i < len; i++) {
    int c=coded[i];
    if (c < 0) {
      c+=256;
    }
    int hex1=c & 0xF;
    int hex2=c >> 4;
    result.append(HEX_DIGIT[hex2]);
    result.append(HEX_DIGIT[hex1]);
    result.append(' ');
  }
  return result.toString();
}","public static String toHexString(byte[] coded,int offset,int length){
  if (coded == null) {
    return ""String_Node_Str"";
  }
  StringBuilder result=new StringBuilder(length * 3);
  for (int i=0; i < length; i++) {
    int c=coded[i + offset];
    if (c < 0) {
      c+=256;
    }
    int hex1=c & 0xF;
    int hex2=c >> 4;
    result.append(HEX_DIGIT[hex2]);
    result.append(HEX_DIGIT[hex1]);
    result.append(' ');
  }
  return result.toString();
}",0.9123548046462512
24375,"public static int convertToInt16(byte[] bytes){
  if (bytes.length >= 2) {
    return ((bytes[0] & 0xff) << 8) + ((bytes[1] & 0xff) << 0);
  }
  return 0;
}","public static int convertToInt16(byte[] bytes,boolean isLE){
  if (bytes.length >= 2) {
    if (isLE) {
      return ((bytes[1] & 0xff) << 8) + ((bytes[0] & 0xff) << 0);
    }
 else {
      return ((bytes[0] & 0xff) << 8) + ((bytes[1] & 0xff) << 0);
    }
  }
  return 0;
}",0.6526806526806527
24376,"public static int convertToInt32(byte[] bytes){
  if (bytes.length >= 4) {
    return (((bytes[0] & 0xff) << 24) + ((bytes[1] & 0xff) << 16) + ((bytes[2] & 0xff) << 8)+ ((bytes[3] & 0xff) << 0));
  }
  return 0;
}","public static int convertToInt32(byte[] bytes,boolean isLE){
  if (bytes.length >= 4) {
    if (isLE) {
      return (((bytes[3] & 0xff) << 24) + ((bytes[2] & 0xff) << 16) + ((bytes[1] & 0xff) << 8)+ ((bytes[0] & 0xff) << 0));
    }
 else {
      return (((bytes[0] & 0xff) << 24) + ((bytes[1] & 0xff) << 16) + ((bytes[2] & 0xff) << 8)+ ((bytes[3] & 0xff) << 0));
    }
  }
  return 0;
}",0.7
24377,"/** 
 * <ʵ����> <������ϸ����>
 * @param clazz
 * @return
 * @see [�ࡢ��#��������#��Ա]
 */
public static <E>E newInstance(Class<E> clazz){
  try {
    Constructor<E> ctr=clazz.getConstructor();
    return ctr.newInstance();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * <ʵ����> <������ϸ����>
 * @param clazz
 * @return
 * @see [�ࡢ��#��������#��Ա]
 */
public static <E>E newInstance(Class<E> clazz){
  try {
    Constructor<E> ctr=clazz.getConstructor();
    ctr.setAccessible(true);
    return ctr.newInstance();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.9533011272141708
24378,"/** 
 * Returns the number of remaining bytes that can be read (or skipped over) from this input stream. <p> The value returned is <code>count&nbsp;- pos</code>, which is the number of bytes remaining to be read from the input buffer.
 * @return the number of remaining bytes that can be read (or skipped over)from this input stream without blocking.
 */
public int available(){
  return count - pos;
}","/** 
 * Returns the number of remaining bytes that can be read (or skipped over) from this input stream. <p> The value returned is <code>count&nbsp;- pos</code>, which is the number of bytes remaining to be read from the input buffer.
 * @return the number of remaining bytes that can be read (or skipped over)from this input stream without blocking.
 */
public int available(){
  return count - pos + offsetStart;
}",0.982885085574572
24379,"/** 
 * Reads up to <code>len</code> bytes of data into an array of bytes from this input stream. If <code>pos</code> equals <code>count</code>, then <code>-1</code> is returned to indicate end of file. Otherwise, the number <code>k</code> of bytes read is equal to the smaller of <code>len</code> and <code>count-pos</code>. If <code>k</code> is positive, then bytes <code>buf[pos]</code> through <code>buf[pos+k-1]</code> are copied into <code>b[off]</code> through <code>b[off+k-1]</code> in the manner performed by <code>System.arraycopy</code>. The value <code>k</code> is added into <code>pos</code> and <code>k</code> is returned. <p> This <code>read</code> method cannot block.
 * @param b the buffer into which the data is read.
 * @param off the start offset in the destination array <code>b</code>
 * @param len the maximum number of bytes read.
 * @return the total number of bytes read into the buffer, or<code>-1</code> if there is no more data because the end of the stream has been reached.
 * @exception NullPointerException If <code>b</code> is <code>null</code>.
 * @exception IndexOutOfBoundsException If <code>off</code> is negative,<code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off</code>
 */
public int read(byte b[],int off,int len){
  if (b == null) {
    throw new NullPointerException();
  }
 else   if (off < 0 || len < 0 || len > b.length - off) {
    throw new IndexOutOfBoundsException();
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + len > count) {
    len=count - pos;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buffer,pos,b,off,len);
  pos+=len;
  return len;
}","/** 
 * Reads up to <code>len</code> bytes of data into an array of bytes from this input stream. If <code>pos</code> equals <code>count</code>, then <code>-1</code> is returned to indicate end of file. Otherwise, the number <code>k</code> of bytes read is equal to the smaller of <code>len</code> and <code>count-pos</code>. If <code>k</code> is positive, then bytes <code>buf[pos]</code> through <code>buf[pos+k-1]</code> are copied into <code>b[off]</code> through <code>b[off+k-1]</code> in the manner performed by <code>System.arraycopy</code>. The value <code>k</code> is added into <code>pos</code> and <code>k</code> is returned. <p> This <code>read</code> method cannot block.
 * @param b the buffer into which the data is read.
 * @param off the start offset in the destination array <code>b</code>
 * @param len the maximum number of bytes read.
 * @return the total number of bytes read into the buffer, or<code>-1</code> if there is no more data because the end of the stream has been reached.
 * @exception NullPointerException If <code>b</code> is <code>null</code>.
 * @exception IndexOutOfBoundsException If <code>off</code> is negative,<code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off</code>
 */
public int read(byte b[],int off,int len){
  if (b == null) {
    throw new NullPointerException();
  }
 else   if (off < 0 || len < 0 || len > b.length - off) {
    throw new IndexOutOfBoundsException();
  }
  if (pos - offsetStart >= count) {
    return -1;
  }
  if (pos + len - offsetStart > count) {
    len=count - pos + offsetStart;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buffer,pos,b,off,len);
  pos+=len;
  return len;
}",0.9875
24380,"public void offset(int offstart,int offend){
  offsetStart+=offstart;
  offsetEnd+=offend;
  count-=offend;
}","public void offset(int offstart,int offend){
  offsetStart+=offstart;
  offsetEnd+=offend;
  count-=offend;
  count-=offstart;
}",0.919831223628692
24381,"public void setCursor(int pos){
  this.pos=pos;
}","public void setCursor(int pos){
  this.pos=pos + offsetStart;
}",0.875
24382,"@Override public String toString(){
  return StringHelper.buffer(""String_Node_Str"",pos,""String_Node_Str"",count,']',ByteHelper.toHexString(buffer,offsetStart,offsetEnd));
}","@Override public String toString(){
  return StringHelper.buffer(""String_Node_Str"",pos,""String_Node_Str"",count,']',ByteHelper.toHexString(buffer,offsetStart,count));
}",0.970414201183432
24383,"@Override public String toString(){
  StringBuilder ret=new StringBuilder(64);
  if (head != null) {
    for (    ByteBuffer bytes : head) {
      ret.append(ByteHelper.toHexString(bytes.array()));
      ret.append(""String_Node_Str"");
    }
  }
  ret.append(ByteHelper.toHexString(buffer,0,buffer.length - count));
  if (tail != null) {
    for (    ByteBuffer bytes : tail) {
      ret.append(""String_Node_Str"");
      ret.append(ByteHelper.toHexString(bytes.array()));
    }
  }
  return ret.toString();
}","@Override public String toString(){
  StringBuilder ret=new StringBuilder(64);
  if (head != null) {
    for (    ByteBuffer bytes : head) {
      ret.append(ByteHelper.toHexString(bytes.array()));
      ret.append(""String_Node_Str"");
    }
  }
  ret.append(ByteHelper.toHexString(buffer,0,count));
  if (tail != null) {
    for (    ByteBuffer bytes : tail) {
      ret.append(""String_Node_Str"");
      ret.append(ByteHelper.toHexString(bytes.array()));
    }
  }
  return ret.toString();
}",0.9839679358717436
24384,"public OCMap(){
  map=new HashMap<K,E>();
  mapList=new HashMap<K,List<E>>();
}","public OCMap(Map<? extends K,? extends E> map){
  map=this.map;
  mapList=new HashMap<K,List<E>>();
}",0.7111111111111111
24385,"@Override public void beforeDecode(Decoder decoder,BytesInputStream in,CodecParameter param) throws IOException {
  int codeLen=verifier.verifyLength();
  byte[] srcCode=new byte[codeLen];
  in.setCursor(in.getCount() - codeLen);
  in.read(srcCode);
  in.moveHead();
  byte[] bytes=in.getDirectBytes();
  in.offset(0,codeLen);
  Object code=verifier.update(null,bytes,in.position(),in.getCount());
  byte[] codes=verifier.getVerifyCode(code,param.isLittleEndian());
  if (log.isDebugEnabled()) {
    log.debug(StringHelper.buffer(""String_Node_Str"",ByteHelper.toHexString(srcCode),""String_Node_Str"",ByteHelper.toHexString(codes),""String_Node_Str"",verifier.getClass()));
  }
  for (int i=0; i < codeLen; i++) {
    if (srcCode[i] != codes[i]) {
      throw new VerifyException(""String_Node_Str"" + ByteHelper.toHexString(srcCode) + ""String_Node_Str""+ ByteHelper.toHexString(codes));
    }
  }
}","@Override public void beforeDecode(Decoder decoder,BytesInputStream in,CodecParameter param) throws IOException {
  int codeLen=verifier.verifyLength();
  byte[] srcCode=new byte[codeLen];
  in.setCursor(in.getCount() - codeLen);
  in.read(srcCode);
  in.moveHead();
  byte[] bytes=in.getDirectBytes();
  in.offset(0,codeLen);
  Object code=verifier.update(null,bytes,in.position(),in.getCount());
  byte[] codes=verifier.getVerifyCode(code,param.isLittleEndian());
  if (codes == null) {
    throw new VerifyException(""String_Node_Str"" + verifier);
  }
  if (log.isDebugEnabled()) {
    log.debug(StringHelper.buffer(""String_Node_Str"",ByteHelper.toHexString(srcCode),""String_Node_Str"",ByteHelper.toHexString(codes),""String_Node_Str"",verifier.getClass()));
  }
  for (int i=0; i < codeLen; i++) {
    if (srcCode[i] != codes[i]) {
      throw new VerifyException(""String_Node_Str"" + ByteHelper.toHexString(srcCode) + ""String_Node_Str""+ ByteHelper.toHexString(codes));
    }
  }
}",0.9529411764705882
24386,"@Override public void afterEncode(Encoder encoder,BytesOutputStream out,CodecParameter param) throws IOException {
  computeTotalLength(out,verifier.verifyLength(),param.getCodecConfig());
  Object code=null;
  if (out.getHead() != null) {
    for (    ByteBuffer buf : out.getHead()) {
      code=verifier.update(code,buf.array());
    }
  }
  code=verifier.update(code,out.getDirectBytes(),0,out.size());
  if (out.getTail() != null) {
    for (    ByteBuffer buf : out.getTail()) {
      code=verifier.update(code,buf.array());
    }
  }
  byte[] codes=verifier.getVerifyCode(code,param.isLittleEndian());
  out.newBufferTailEnd(codes.length).put(codes);
}","@Override public void afterEncode(Encoder encoder,BytesOutputStream out,CodecParameter param) throws IOException {
  computeTotalLength(out,verifier.verifyLength(),param.getCodecConfig());
  Object code=null;
  if (out.getHead() != null) {
    for (    ByteBuffer buf : out.getHead()) {
      code=verifier.update(code,buf.array());
    }
  }
  code=verifier.update(code,out.getDirectBytes(),0,out.size());
  if (out.getTail() != null) {
    for (    ByteBuffer buf : out.getTail()) {
      code=verifier.update(code,buf.array());
    }
  }
  byte[] codes=verifier.getVerifyCode(code,param.isLittleEndian());
  if (codes == null) {
    throw new VerifyException(""String_Node_Str"" + verifier);
  }
  out.newBufferTailEnd(codes.length).put(codes);
}",0.937411095305832
24387,"public static VerifyWrapper CRC16(){
  return new VerifyWrapper(new CRC16());
}","public static VerifyWrapper CRC16(){
  return new VerifyWrapper(new CRC16Verifier());
}",0.9518072289156626
24388,"@Override public void checkConfiguration() throws RuntimeConfigurationException {
  if (!(PHONEGAP_PATH.equals(""String_Node_Str""))) {
    throw new RuntimeConfigurationException(""String_Node_Str"");
  }
  if (!(PHONEGAP_COMMAND.equals(""String_Node_Str""))) {
    throw new RuntimeConfigurationException(""String_Node_Str"");
  }
  if ((!(PHONEGAP_PLATFORM.equals(""String_Node_Str"")) || (!(PHONEGAP_PLATFORM.equals(""String_Node_Str""))) || (!(PHONEGAP_PLATFORM.equals(""String_Node_Str""))))) {
    throw new RuntimeConfigurationException(""String_Node_Str"");
  }
}","@Override public void checkConfiguration() throws RuntimeConfigurationException {
  if (!(PHONEGAP_PATH.equals(""String_Node_Str""))) {
    throw new RuntimeConfigurationException(""String_Node_Str"");
  }
  if (!(PHONEGAP_COMMAND.equals(""String_Node_Str""))) {
    throw new RuntimeConfigurationException(""String_Node_Str"");
  }
  if (!(PHONEGAP_PLATFORM.equals(""String_Node_Str"") || PHONEGAP_PLATFORM.equals(""String_Node_Str"") || PHONEGAP_PLATFORM.equals(""String_Node_Str""))) {
    throw new RuntimeConfigurationException(""String_Node_Str"");
  }
}",0.9890909090909092
24389,"@SuppressWarnings(""String_Node_Str"") public static <T>T createNewService(String apiEndpointUrl,Class<T> restServiceClass,BaseHttpClient client){
  T service;
  if (restServiceClass.isAnnotationPresent(RestApi.class)) {
    String restClassName=restServiceClass.getName();
    service=(T)cachedServices.get(restClassName);
    if (service == null) {
      service=(T)Proxy.newProxyInstance(restServiceClass.getClassLoader(),new Class[]{restServiceClass},new RestServiceInvocationHandler(apiEndpointUrl));
      T found=(T)cachedServices.putIfAbsent(restClassName,service);
      if (found != null) {
        service=found;
      }
      setupMethodMetaDataCache(restServiceClass,client);
    }
  }
 else {
    throw new IllegalArgumentException(restServiceClass + ""String_Node_Str"");
  }
  return service;
}","public static <T>T createNewService(String apiEndpointUrl,Class<T> restServiceClass,BaseHttpClient client,boolean debugMode){
  if (debugMode) {
    GlobalSettings.DEBUG=true;
  }
 else {
    GlobalSettings.DEBUG=false;
  }
  return createNewService(apiEndpointUrl,restServiceClass,client);
}",0.2204007285974499
24390,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  RestMethodMetaDataCache methodMetaDataCache=cachedMethodMetaData.get(method);
  try {
    if (methodMetaDataCache != null) {
      return methodMetaDataCache.invoke(baseUrl,args);
    }
 else {
      return method.invoke(this,args);
    }
  }
 catch (  InvocationTargetException e) {
    throw e.getCause();
  }
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  RestApiMethodMetadata methodMetaDataCache=cachedMethodMetaData.get(method);
  try {
    if (methodMetaDataCache != null) {
      return methodMetaDataCache.invoke(baseUrl,args);
    }
 else {
      return method.invoke(this,args);
    }
  }
 catch (  InvocationTargetException e) {
    throw e.getCause();
  }
}",0.955665024630542
24391,"/** 
 * Initialize method meta data cache for every method
 * @param restServiceClass {@link T}
 * @param client {@link ApacheHttpClient}
 */
private static void setupMethodMetaDataCache(Class<?> restServiceClass,BaseHttpClient httpClient){
  for (  Method method : restServiceClass.getMethods()) {
    if (method.isAnnotationPresent(Get.class) || method.isAnnotationPresent(Post.class)) {
      cachedMethodMetaData.putIfAbsent(method,new RestMethodMetaDataCache(method,httpClient));
    }
  }
}","/** 
 * Initialize method meta data cache for every method
 * @param restServiceClass {@link T}
 * @param client {@link ApacheHttpClient}
 */
private static void setupMethodMetaDataCache(Class<?> restServiceClass,BaseHttpClient httpClient){
  for (  Method method : restServiceClass.getMethods()) {
    if (method.isAnnotationPresent(Get.class) || method.isAnnotationPresent(Post.class)) {
      cachedMethodMetaData.putIfAbsent(method,new RestApiMethodMetadata(method,httpClient));
    }
  }
}",0.9636363636363636
24392,"/** 
 * Handle cookies with cookie-handler
 */
private void setupCookieManager(){
  CookieManager cookieManager=new CookieManager();
  CookieHandler.setDefault(cookieManager);
}","/** 
 * Handle cookies with cookie-handler
 */
private void setupCookieManager(){
  CookieManager cookieManager=new CookieManager();
  CookieHandler.setDefault(cookieManager);
  Logger.log(""String_Node_Str"");
}",0.9147286821705426
24393,"/** 
 * @param url
 * @param nameValuePairs
 * @exception IOException ,  {@link HttpCredentialException},   {@link BaseException},   {@link HttpEndpointNotFoundException}
 * @return {@link String}
 */
private HttpResponse doHttpGet(String url,List<NameValuePair> nameValuePairs) throws IOException {
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + url);
  HttpGet get=createHttpGetRequest(url,nameValuePairs);
  return executeHttpRequest(get);
}","/** 
 * @param url
 * @param nameValuePairs
 * @exception IOException ,  {@link HttpCredentialException},   {@link BaseException},   {@link HttpEndpointNotFoundException}
 * @return {@link String}
 */
private HttpResponse doHttpGet(String url,List<NameValuePair> nameValuePairs) throws IOException {
  Logger.log(""String_Node_Str"" + url);
  HttpGet get=createHttpGetRequest(url,nameValuePairs);
  return executeHttpRequest(get);
}",0.963302752293578
24394,"/** 
 * Execute the post request and return content. Reuse the createHttpPostRequest and executeHttpRequest methods
 * @param url
 * @param nameValuePairs
 * @exception IOException ,  {@link HttpCredentialException},   {@link BaseException},   {@link HttpEndpointNotFoundException}
 * @return {@link String}
 */
private HttpResponse doHttpPost(String url,List<NameValuePair> nameValuePairs) throws IOException {
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + url);
  HttpPost post=createHttpPostRequest(url,nameValuePairs);
  return executeHttpRequest(post);
}","/** 
 * Execute the post request and return content. Reuse the createHttpPostRequest and executeHttpRequest methods
 * @param url
 * @param nameValuePairs
 * @exception IOException ,  {@link HttpCredentialException},   {@link BaseException},   {@link HttpEndpointNotFoundException}
 * @return {@link String}
 */
private HttpResponse doHttpPost(String url,List<NameValuePair> nameValuePairs) throws IOException {
  Logger.log(""String_Node_Str"" + url);
  HttpPost post=createHttpPostRequest(url,nameValuePairs);
  return executeHttpRequest(post);
}",0.9710144927536232
24395,"private Response handleHttpResponse(HttpResponse httpResponse) throws IOException {
  int statusCode=httpResponse.getStatusLine().getStatusCode();
  InputStream contentStream=httpResponse.getEntity().getContent();
  Log.d(TAG,""String_Node_Str"" + statusCode);
switch (statusCode) {
case 200:
    return new Response(statusCode,StringHelper.EMPTY,com.windigo.http.Header.convertFromApacheHeaders(httpResponse.getAllHeaders()),contentStream);
case 401:
  httpResponse.getEntity().consumeContent();
return new Response(statusCode,httpResponse.getStatusLine().toString(),com.windigo.http.Header.convertFromApacheHeaders(httpResponse.getAllHeaders()),contentStream);
case 404:
httpResponse.getEntity().consumeContent();
return new Response(statusCode,httpResponse.getStatusLine().toString(),com.windigo.http.Header.convertFromApacheHeaders(httpResponse.getAllHeaders()),contentStream);
case 500:
httpResponse.getEntity().consumeContent();
return new Response(statusCode,httpResponse.getStatusLine().toString(),com.windigo.http.Header.convertFromApacheHeaders(httpResponse.getAllHeaders()),contentStream);
default :
httpResponse.getEntity().consumeContent();
return new Response(statusCode,httpResponse.getStatusLine().toString(),com.windigo.http.Header.convertFromApacheHeaders(httpResponse.getAllHeaders()),contentStream);
}
}","private Response handleHttpResponse(HttpResponse httpResponse) throws IOException {
  int statusCode=httpResponse.getStatusLine().getStatusCode();
  InputStream contentStream=httpResponse.getEntity().getContent();
  Logger.log(""String_Node_Str"" + statusCode);
switch (statusCode) {
case 200:
    return new Response(statusCode,StringHelper.EMPTY,com.windigo.http.Header.convertFromApacheHeaders(httpResponse.getAllHeaders()),contentStream);
case 401:
  httpResponse.getEntity().consumeContent();
return new Response(statusCode,httpResponse.getStatusLine().toString(),com.windigo.http.Header.convertFromApacheHeaders(httpResponse.getAllHeaders()),contentStream);
case 404:
httpResponse.getEntity().consumeContent();
return new Response(statusCode,httpResponse.getStatusLine().toString(),com.windigo.http.Header.convertFromApacheHeaders(httpResponse.getAllHeaders()),contentStream);
case 500:
httpResponse.getEntity().consumeContent();
return new Response(statusCode,httpResponse.getStatusLine().toString(),com.windigo.http.Header.convertFromApacheHeaders(httpResponse.getAllHeaders()),contentStream);
default :
httpResponse.getEntity().consumeContent();
return new Response(statusCode,httpResponse.getStatusLine().toString(),com.windigo.http.Header.convertFromApacheHeaders(httpResponse.getAllHeaders()),contentStream);
}
}",0.9943246311010216
24396,"/** 
 * Create   {@link HttpGet} request with given {@link String} urland  {@link NameValuePair} request parameters
 * @param url
 * @param nameValuePairs
 * @return {@link HttpGet}
 */
public HttpGet createHttpGetRequest(String url,List<NameValuePair> nameValuePairs){
  String queryString=URLEncodedUtils.format(sanitizeParameters(nameValuePairs),HTTP.UTF_8);
  String fullUrlString=new StringBuilder(url + ""String_Node_Str"" + queryString).toString();
  HttpGet httpGet=new HttpGet(fullUrlString);
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + httpGet.getURI());
  return httpGet;
}","/** 
 * Create   {@link HttpGet} request with given {@link String} urland  {@link NameValuePair} request parameters
 * @param url
 * @param nameValuePairs
 * @return {@link HttpGet}
 */
public HttpGet createHttpGetRequest(String url,List<NameValuePair> nameValuePairs){
  String queryString=URLEncodedUtils.format(sanitizeParameters(nameValuePairs),HTTP.UTF_8);
  String fullUrlString=new StringBuilder(url + ""String_Node_Str"" + queryString).toString();
  HttpGet httpGet=new HttpGet(fullUrlString);
  Logger.log(""String_Node_Str"" + httpGet.getURI());
  return httpGet;
}",0.977469670710572
24397,"/** 
 * Remove the null parameters from the list of   {@link NameValuePair} pairs
 * @param paramPairs
 * @return {@link List}
 */
private List<NameValuePair> sanitizeParameters(List<NameValuePair> paramPairs){
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  for (  NameValuePair param : paramPairs) {
    if (param.getValue() != null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"" + param);
      params.add(param);
    }
  }
  return params;
}","/** 
 * Remove the null parameters from the list of   {@link NameValuePair} pairs
 * @param paramPairs
 * @return {@link List}
 */
private List<NameValuePair> sanitizeParameters(List<NameValuePair> paramPairs){
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  for (  NameValuePair param : paramPairs) {
    if (param.getValue() != null) {
      Logger.log(""String_Node_Str"" + param.getName() + ""String_Node_Str""+ param.getValue());
      params.add(param);
    }
  }
  return params;
}",0.9130434782608696
24398,"/** 
 * Execute the given   {@link HttpRequestBase}. Closes all the expired  connection pool items and set heeaders if present.
 * @param httpRequest
 * @throws IOException
 * @return {@link HttpResponse}
 */
public HttpResponse executeHttpRequest(HttpRequestBase httpRequest) throws IOException {
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + httpRequest.getURI().toString());
  if (headers != null && headers.length > 0) {
    httpRequest.setHeaders(headers);
  }
  try {
    mHttpClient.getConnectionManager().closeExpiredConnections();
    return mHttpClient.execute(httpRequest);
  }
 catch (  IOException e) {
    httpRequest.abort();
    throw e;
  }
}","/** 
 * Execute the given   {@link HttpRequestBase}. Closes all the expired  connection pool items and set heeaders if present.
 * @param httpRequest
 * @throws IOException
 * @return {@link HttpResponse}
 */
public HttpResponse executeHttpRequest(HttpRequestBase httpRequest) throws IOException {
  Logger.log(""String_Node_Str"" + httpRequest.getURI().toString());
  if (headers != null && headers.length > 0) {
    httpRequest.setHeaders(headers);
    Logger.log(""String_Node_Str"" + headers.length + ""String_Node_Str"");
  }
  try {
    mHttpClient.getConnectionManager().closeExpiredConnections();
    return mHttpClient.execute(httpRequest);
  }
 catch (  IOException e) {
    httpRequest.abort();
    throw e;
  }
}",0.9273255813953488
24399,"@Override public Response execute(Request request) throws IOException {
  Response response=null;
  headers=com.windigo.http.Header.convertToApacheHeaders(request.getHeaders());
  setupCookieManager();
switch (request.getHttpRequestType()) {
case GET:
    HttpResponse httpGetResponse=doHttpGet(request.getFullUrl(),request.getQueryParams());
  response=handleHttpResponse(httpGetResponse);
return response;
case POST:
HttpResponse httpPostResponse=doHttpPost(request.getFullUrl(),request.getBodyParams());
response=handleHttpResponse(httpPostResponse);
return response;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Response execute(Request request) throws IOException {
  if (request == null)   throw new IllegalArgumentException(""String_Node_Str"");
  Logger.log(request.toString());
  Response response=null;
  headers=com.windigo.http.Header.convertToApacheHeaders(request.getHeaders());
  setupCookieManager();
switch (request.getHttpRequestType()) {
case GET:
    HttpResponse httpGetResponse=doHttpGet(request.getFullUrl(),request.getQueryParams());
  response=handleHttpResponse(httpGetResponse);
return response;
case POST:
HttpResponse httpPostResponse=doHttpPost(request.getFullUrl(),request.getBodyParams());
response=handleHttpResponse(httpPostResponse);
return response;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}",0.918103448275862
24400,"/** 
 * Handle cookies with cookie-handler
 */
private void setupCookieManager(){
  CookieManager cookieManager=new CookieManager();
  CookieHandler.setDefault(cookieManager);
}","/** 
 * Handle cookies with cookie-handler
 */
private void setupCookieManager(){
  CookieManager cookieManager=new CookieManager();
  CookieHandler.setDefault(cookieManager);
  Logger.log(""String_Node_Str"");
}",0.9147286821705426
24401,"/** 
 * Set the header list to   {@link URLConnection} object
 * @param headers
 */
private void addHeaders(List<Header> headers){
  if (headers.size() == 0)   return;
  for (  Header header : headers) {
    connection.addRequestProperty(header.getName(),header.getValue());
  }
}","/** 
 * Set the header list to   {@link URLConnection} object
 * @param headers
 */
private void addHeaders(List<Header> headers){
  if (headers.size() == 0)   return;
  for (  Header header : headers) {
    connection.addRequestProperty(header.getName(),header.getValue());
    Logger.log(""String_Node_Str"" + header.getName() + ""String_Node_Str""+ header.getValue());
  }
}",0.8575803981623277
24402,"/** 
 * Open http url connection to url and return connection
 * @param request
 * @return {@link HttpURLConnection}
 * @throws MalformedURLException
 * @throws IOException
 */
protected HttpURLConnection openHttpURLConnection(Request request) throws MalformedURLException, IOException {
  HttpURLConnection connection=(HttpURLConnection)new URL(request.getFullUrl()).openConnection();
  connection.setRequestMethod(request.getHttpRequestType().toString());
  connection.setConnectTimeout(GlobalSettings.CONNNECTION_TIMEOUT);
  connection.setReadTimeout(GlobalSettings.CONNECTION_READ_TIMEOUT);
  return connection;
}","/** 
 * Open http url connection to url and return connection
 * @param request
 * @return {@link HttpURLConnection}
 * @throws MalformedURLException
 * @throws IOException
 */
protected HttpURLConnection openHttpURLConnection(Request request) throws MalformedURLException, IOException {
  HttpURLConnection connection=(HttpURLConnection)new URL(request.getFullUrl()).openConnection();
  connection.setRequestMethod(request.getHttpRequestType().toString());
  connection.setConnectTimeout(GlobalSettings.CONNNECTION_TIMEOUT);
  connection.setReadTimeout(GlobalSettings.CONNECTION_READ_TIMEOUT);
  Logger.log(""String_Node_Str"" + GlobalSettings.CONNNECTION_TIMEOUT);
  Logger.log(""String_Node_Str"" + GlobalSettings.CONNECTION_READ_TIMEOUT);
  return connection;
}",0.8708272859216255
24403,"/** 
 * Form response wrapper with   {@link Response} object
 * @return {@link Response}
 * @throws IOException
 */
private Response getResponse() throws IOException {
  String reason=connection.getResponseMessage();
  reason=(reason == null ? ""String_Node_Str"" : reason);
  List<Header> headers=getResponseHeaders();
  int statusCode=connection.getResponseCode();
  InputStream is;
  if (statusCode >= 400) {
    is=connection.getErrorStream();
  }
 else {
    is=connection.getInputStream();
  }
  return new Response(statusCode,reason,headers,is);
}","/** 
 * Form response wrapper with   {@link Response} object
 * @return {@link Response}
 * @throws IOException
 */
private Response getResponse() throws IOException {
  String reason=connection.getResponseMessage();
  reason=(reason == null ? ""String_Node_Str"" : reason);
  List<Header> headers=getResponseHeaders();
  int statusCode=connection.getResponseCode();
  Logger.log(""String_Node_Str"" + statusCode);
  InputStream is;
  if (statusCode >= 400) {
    is=connection.getErrorStream();
  }
 else {
    is=connection.getInputStream();
  }
  return new Response(statusCode,reason,headers,is);
}",0.96
24404,"/** 
 * Read response header to   {@link List}
 * @return {@link List} of {@link Header}
 */
private List<Header> getResponseHeaders(){
  List<Header> headers=new ArrayList<Header>();
  for (  Map.Entry<String,List<String>> fieldEntry : connection.getHeaderFields().entrySet()) {
    String nameString=fieldEntry.getKey();
    for (    String value : fieldEntry.getValue()) {
      headers.add(new Header(nameString,value));
    }
  }
  return headers;
}","/** 
 * Read response header to   {@link List}
 * @return {@link List} of {@link Header}
 */
private List<Header> getResponseHeaders(){
  List<Header> headers=new ArrayList<Header>();
  for (  Map.Entry<String,List<String>> fieldEntry : connection.getHeaderFields().entrySet()) {
    String nameString=fieldEntry.getKey();
    for (    String value : fieldEntry.getValue()) {
      Logger.log(""String_Node_Str"" + nameString + ""String_Node_Str""+ value);
      headers.add(new Header(nameString,value));
    }
  }
  return headers;
}",0.9218274111675128
24405,"/** 
 * Setup   {@link HttpURLConnection} to remote urlset some configuration and body if exist
 * @param request
 * @throws MalformedURLException
 * @throws IOException
 */
private void setupHttpUrlConnectionClient(HttpURLConnection connection,Request request) throws MalformedURLException, IOException {
  connection.setDoInput(true);
  addHeaders(request.getHeaders());
  if (request.hasBody()) {
    connection.setDoOutput(true);
    OutputStream os=connection.getOutputStream();
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(os,""String_Node_Str""));
    bw.write(writeBodyParams(request.getBodyParams()));
    bw.flush();
    bw.close();
    os.close();
  }
}","/** 
 * Setup   {@link HttpURLConnection} to remote urlset some configuration and body if exist
 * @param request
 * @throws MalformedURLException
 * @throws IOException
 */
private void setupHttpUrlConnectionClient(HttpURLConnection connection,Request request) throws MalformedURLException, IOException {
  connection.setDoInput(true);
  Logger.log(""String_Node_Str"" + request.getHeaders().size() + ""String_Node_Str"");
  addHeaders(request.getHeaders());
  if (request.hasBody()) {
    connection.setDoOutput(true);
    OutputStream os=connection.getOutputStream();
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(os,""String_Node_Str""));
    bw.write(writeBodyParams(request.getBodyParams()));
    bw.flush();
    bw.close();
    os.close();
  }
}",0.942560553633218
24406,"/** 
 * Writes body parameters to as %s=%s url encoded format
 * @param bodyParams
 * @return {@link String}
 * @throws UnsupportedEncodingException
 */
private String writeBodyParams(List<NameValuePair> bodyParams) throws UnsupportedEncodingException {
  StringBuilder bodyBuilder=new StringBuilder();
  for (  NameValuePair param : bodyParams) {
    bodyBuilder.append(URLEncoder.encode(param.getName(),""String_Node_Str""));
    bodyBuilder.append(""String_Node_Str"");
    bodyBuilder.append(URLEncoder.encode(param.getValue(),""String_Node_Str""));
  }
  return bodyBuilder.toString();
}","/** 
 * Writes body parameters to as %s=%s url encoded format
 * @param bodyParams
 * @return {@link String}
 * @throws UnsupportedEncodingException
 */
private String writeBodyParams(List<NameValuePair> bodyParams) throws UnsupportedEncodingException {
  StringBuilder bodyBuilder=new StringBuilder();
  for (  NameValuePair param : bodyParams) {
    bodyBuilder.append(URLEncoder.encode(param.getName(),""String_Node_Str""));
    bodyBuilder.append(""String_Node_Str"");
    bodyBuilder.append(URLEncoder.encode(param.getValue(),""String_Node_Str""));
  }
  Logger.log(""String_Node_Str"" + bodyBuilder.toString());
  return bodyBuilder.toString();
}",0.9073170731707316
24407,"@Override public Response execute(Request request) throws IOException {
  if (request == null)   throw new IllegalArgumentException(""String_Node_Str"");
  Logger.log(HttpUrlConnectionClient.class,request.toString());
  setupCookieManager();
  connection=openHttpURLConnection(request);
  setupHttpUrlConnectionClient(connection,request);
  return getResponse();
}","@Override public Response execute(Request request) throws IOException {
  if (request == null)   throw new IllegalArgumentException(""String_Node_Str"");
  Logger.log(request.toString());
  setupCookieManager();
  connection=openHttpURLConnection(request);
  setupHttpUrlConnectionClient(connection,request);
  return getResponse();
}",0.956772334293948
24408,"/** 
 * Creates a compound converter resulting from the combined transformation of the specified converters.
 * @param left the left converter.
 * @param right the right converter.
 * @throws IllegalArgumentException if either the left or right converter are </code>null</code>
 */
public Pair(UnitConverter left,UnitConverter right){
  this.left=left;
  this.right=right;
}","/** 
 * Creates a compound converter resulting from the combined transformation of the specified converters.
 * @param left the left converter.
 * @param right the right converter.
 * @throws IllegalArgumentException if either the left or right converter are <code>null</code>
 */
public Pair(UnitConverter left,UnitConverter right){
  this.left=left;
  this.right=right;
}",0.998661311914324
24409,"/** 
 * Casts this quantity to a parameterized unit of specified nature or throw a <code>ClassCastException</code> if the dimension of the specified quantity and this measure unit's dimension do not match. For example: <br/> <code> Measure<Length> length = Quantities.getQuantity(""2 km"").asType(Length.class); </code>
 * @param type the quantity class identifying the nature of the quantity.
 * @return this quantity parameterized with the specified type.
 * @throws ClassCastException if the dimension of this unit is different from the specified quantity dimension.
 * @throws UnsupportedOperationException if the specified quantity class does not have a public static field named ""UNIT"" holding the SI unit for the quantity.
 * @see Unit#asType(Class)
 */
@SuppressWarnings(""String_Node_Str"") public final <T extends Quantity<T>>Quantity<T> asType(Class<T> type) throws ClassCastException {
  this.getUnit().asType(type);
  return (Quantity<T>)this;
}","/** 
 * Casts this quantity to a parameterized unit of specified nature or throw a <code>ClassCastException</code> if the dimension of the specified quantity and this measure unit's dimension do not match. For example: <br> <code> Measure&lt;Length&gt; length = Quantities.getQuantity(""2 km"").asType(Length.class); </code>
 * @param type the quantity class identifying the nature of the quantity.
 * @return this quantity parameterized with the specified type.
 * @throws ClassCastException if the dimension of this unit is different from the specified quantity dimension.
 * @throws UnsupportedOperationException if the specified quantity class does not have a public static field named ""UNIT"" holding the SI unit for the quantity.
 * @see Unit#asType(Class)
 */
@SuppressWarnings(""String_Node_Str"") public final <T extends Quantity<T>>Quantity<T> asType(Class<T> type) throws ClassCastException {
  this.getUnit().asType(type);
  return (Quantity<T>)this;
}",0.9942498693152118
24410,"/** 
 * Annotates the specified unit. Annotation does not change the unit semantic. Annotations are often written between curly braces behind units. For example: <code> Unit<Volume> PERCENT_VOL = Units.PERCENT.annotate(""vol""); // ""%{vol}"" AbstractUnit<Mass> KG_TOTAL = Units.KILOGRAM.annotate(""total""); // ""kg{total}"" AbstractUnit<Dimensionless> RED_BLOOD_CELLS = ONE.annotate(""RBC""); // ""{RBC}"" </code> Note: Annotations of system units are not considered themselves as system units.
 * @param annotation the unit annotation.
 * @return the annotated unit.
 */
public AnnotatedUnit<Q> annotate(String annotation){
  return new AnnotatedUnit<Q>(this,annotation);
}","/** 
 * Annotates the specified unit. Annotation does not change the unit semantic. Annotations are often written between curly braces behind units. For example: <code> Unit&lt;Volume&gt; PERCENT_VOL = Units.PERCENT.annotate(""vol""); // ""%{vol}"" AbstractUnit&lt;Mass&gt; KG_TOTAL = Units.KILOGRAM.annotate(""total""); // ""kg{total}"" AbstractUnit&lt;Dimensionless&gt; RED_BLOOD_CELLS = ONE.annotate(""RBC""); // ""{RBC}"" </code> Note: Annotations of system units are not considered themselves as system units.
 * @param annotation the unit annotation.
 * @return the annotated unit.
 */
public AnnotatedUnit<Q> annotate(String annotation){
  return new AnnotatedUnit<Q>(this,annotation);
}",0.9777117384843982
24411,"/** 
 * Returns the system unit (unscaled SI unit) from which this unit is derived. They can be be used to identify a quantity given the unit. For example:[code] static boolean isAngularVelocity(AbstractUnit<?> unit) { return unit.getSystemUnit().equals(RADIAN.divide(SECOND)); } assert(REVOLUTION.divide(MINUTE).isAngularVelocity()); // Returns true. [/code]
 * @return the unscaled metric unit from which this unit is derived.
 */
public final AbstractUnit<Q> getSystemUnit(){
  return toSystemUnit();
}","/** 
 * Returns the system unit (unscaled SI unit) from which this unit is derived. They can be be used to identify a quantity given the unit. For example:[code] static boolean isAngularVelocity(AbstractUnit&lt;?&gt; unit) { return unit.getSystemUnit().equals(RADIAN.divide(SECOND)); } assert(REVOLUTION.divide(MINUTE).isAngularVelocity()); // Returns true. [/code]
 * @return the unscaled metric unit from which this unit is derived.
 */
public final AbstractUnit<Q> getSystemUnit(){
  return toSystemUnit();
}",0.9901574803149606
24412,"/** 
 * Returns the unscaled standard (SI) unit from which this unit is derived. The SI unit can be be used to identify a quantity given the unit. For example:<code> static boolean isAngularVelocity(AbstractUnit<?> unit) { return unit.toSystemUnit().equals(RADIAN.divide(SECOND)); } assert(REVOLUTION.divide(MINUTE).isAngularVelocity()); // Returns true. </code>
 * @return the unscaled metric unit from which this unit is derived.
 */
protected abstract AbstractUnit<Q> toSystemUnit();","/** 
 * Returns the unscaled standard (SI) unit from which this unit is derived. The SI unit can be be used to identify a quantity given the unit. For example:<code> static boolean isAngularVelocity(AbstractUnit&lt;?&gt; unit) { return unit.toSystemUnit().equals(RADIAN.divide(SECOND)); } assert(REVOLUTION.divide(MINUTE).isAngularVelocity()); // Returns true. </code>
 * @return the unscaled metric unit from which this unit is derived.
 */
protected abstract AbstractUnit<Q> toSystemUnit();",0.9897750511247444
24413,"/** 
 * Returns the physics unit represented by the specified characters. Locale-sensitive unit parsing may be handled using the OSGi   {@link javax.measure.spi.UnitFormatService} or for non-OSGi applications instances of{@link SimpleUnitFormat}. <p> Note: The standard format supports dimensionless units.[code] AbstractUnit<Dimensionless> PERCENT = AbstractUnit.parse(""100"").inverse().asType(Dimensionless.class); [/code] </p>
 * @param charSequence the character sequence to parse.
 * @return <code>SimpleUnitFormat.getInstance().parse(csq)</code>
 * @throws ParserException if the specified character sequence cannot be parsed correctly.
 */
public static Unit<?> parse(CharSequence charSequence){
  return SimpleUnitFormat.getInstance().parse(charSequence);
}","/** 
 * Returns the physics unit represented by the specified characters. Locale-sensitive unit parsing may be handled using the OSGi   {@link javax.measure.spi.UnitFormatService} or for non-OSGi applications instances of{@link SimpleUnitFormat}. <p> Note: The standard format supports dimensionless units.[code] AbstractUnit&lt;Dimensionless&gt; PERCENT = AbstractUnit.parse(""100"").inverse().asType(Dimensionless.class); [/code] </p>
 * @param charSequence the character sequence to parse.
 * @return <code>SimpleUnitFormat.getInstance().parse(csq)</code>
 * @throws ParserException if the specified character sequence cannot be parsed correctly.
 */
public static Unit<?> parse(CharSequence charSequence){
  return SimpleUnitFormat.getInstance().parse(charSequence);
}",0.9934810951760104
24414,"/** 
 * Returns the decimal quantity of unknown type corresponding to the specified representation. This method can be used to parse dimensionless quantities.<br/> <code> Quantity<Dimensionless> proportion = NumberQuantity.parse(""0.234"").asType(Dimensionless.class); </code> <p> Note: This method handles only   {@link tec.units.ri.SimpleUnitFormat.UnitFormat#getStandard standard} unit format.</p>
 * @param csq the decimal value and its unit (if any) separated by space(s).
 * @return <code>QuantityFormat.getInstance().parse(csq)</code>
 */
public static Quantity<?> parse(CharSequence csq){
  return QuantityFormat.getInstance().parse(csq);
}","/** 
 * Returns the decimal quantity of unknown type corresponding to the specified representation. This method can be used to parse dimensionless quantities.<br> <code> Quantity&lt;Dimensionless&gt; proportion = NumberQuantity.parse(""0.234"").asType(Dimensionless.class); </code> <p> Note: This method handles only   {@link tec.units.ri.SimpleUnitFormat.UnitFormat#getStandard standard} unit format.</p>
 * @param csq the decimal value and its unit (if any) separated by space(s).
 * @return <code>QuantityFormat.getInstance().parse(csq)</code>
 */
public static Quantity<?> parse(CharSequence csq){
  return QuantityFormat.getInstance().parse(csq);
}",0.9915188897455668
24415,"/** 
 * Connects to the given RMI port (default: 9999) and invokes shutdown on the loader. <ul> <li>Arg 0 = port number</li> <li>Arg 1 = auth name</li> <li>Arg 2 = auth password</li> </ul>
 * @param args see args list
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args){
  try {
    String policyFile=System.getProperty(""String_Node_Str"");
    if (policyFile == null) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String configRoot=Bootstrap.getConfigurationRoot(Bootstrap.getRed5Root());
      System.out.printf(""String_Node_Str"",configRoot);
      System.setProperty(""String_Node_Str"",configRoot + ""String_Node_Str"");
    }
    String rmiAdapterHost=System.getProperty(""String_Node_Str"");
    if (rmiAdapterHost == null) {
      String ipv4=System.getProperty(""String_Node_Str"");
      if (""String_Node_Str"".equals(ipv4)) {
        rmiAdapterHost=""String_Node_Str"";
      }
 else {
        rmiAdapterHost=""String_Node_Str"";
      }
    }
    ClassLoader baseLoader=Thread.currentThread().getContextClassLoader();
    ClassLoader loader=ClassLoaderBuilder.build(null,ClassLoaderBuilder.USE_RED5_LIB,baseLoader);
    Thread.currentThread().setContextClassLoader(loader);
    JMXServiceURL url=null;
    JMXConnector jmxc=null;
    HashMap<String,Object> env=null;
    if (null == args || args.length < 1) {
      System.out.printf(""String_Node_Str"",rmiAdapterHost);
      url=new JMXServiceURL(""String_Node_Str"" + rmiAdapterHost + ""String_Node_Str""+ rmiAdapterHost+ ""String_Node_Str"");
    }
 else {
      System.out.printf(""String_Node_Str"",rmiAdapterHost,args[0]);
      url=new JMXServiceURL(""String_Node_Str"" + rmiAdapterHost + ""String_Node_Str""+ args[0]+ ""String_Node_Str""+ rmiAdapterHost+ ""String_Node_Str""+ args[0]+ ""String_Node_Str"");
      if (args.length > 1) {
        env=new HashMap<String,Object>(1);
        String[] credentials=new String[]{args[1],args[2]};
        env.put(""String_Node_Str"",credentials);
      }
    }
    jmxc=JMXConnectorFactory.connect(url,env);
    MBeanServerConnection mbs=jmxc.getMBeanServerConnection();
    ShutdownMXBean proxy=null;
    ObjectName tomcatObjectName=new ObjectName(""String_Node_Str"");
    ObjectName jettyObjectName=new ObjectName(""String_Node_Str"");
    ObjectName winstoneObjectName=new ObjectName(""String_Node_Str"");
    ObjectName contextLoaderObjectName=new ObjectName(""String_Node_Str"");
    if (mbs.isRegistered(jettyObjectName)) {
      System.out.println(""String_Node_Str"");
      proxy=JMX.newMXBeanProxy(mbs,jettyObjectName,ShutdownMXBean.class,true);
    }
 else     if (mbs.isRegistered(tomcatObjectName)) {
      System.out.println(""String_Node_Str"");
      proxy=JMX.newMXBeanProxy(mbs,tomcatObjectName,ShutdownMXBean.class,true);
    }
 else     if (mbs.isRegistered(winstoneObjectName)) {
      System.out.println(""String_Node_Str"");
      proxy=JMX.newMXBeanProxy(mbs,winstoneObjectName,ShutdownMXBean.class,true);
    }
 else     if (mbs.isRegistered(contextLoaderObjectName)) {
      System.out.println(""String_Node_Str"");
      proxy=JMX.newMXBeanProxy(mbs,contextLoaderObjectName,ShutdownMXBean.class,true);
    }
 else {
      System.out.println(""String_Node_Str"");
    }
    if (proxy != null) {
      System.out.println(""String_Node_Str"");
      proxy.destroy();
    }
    jmxc.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Connects to the given RMI port (default: 9999) and invokes shutdown on the loader. <ul> <li>Arg 0 = port number</li> <li>Arg 1 = auth name</li> <li>Arg 2 = auth password</li> </ul>
 * @param args see args list
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args){
  try {
    String policyFile=System.getProperty(""String_Node_Str"");
    if (policyFile == null) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String configRoot=Bootstrap.getConfigurationRoot(Bootstrap.getRed5Root());
      System.out.printf(""String_Node_Str"",configRoot);
      System.setProperty(""String_Node_Str"",configRoot + ""String_Node_Str"");
    }
    String rmiAdapterHost=System.getProperty(""String_Node_Str"");
    if (rmiAdapterHost == null) {
      String ipv4=System.getProperty(""String_Node_Str"");
      if (""String_Node_Str"".equals(ipv4)) {
        rmiAdapterHost=""String_Node_Str"";
      }
 else {
        rmiAdapterHost=""String_Node_Str"";
      }
    }
    ClassLoader baseLoader=Thread.currentThread().getContextClassLoader();
    ClassLoader loader=ClassLoaderBuilder.build(null,ClassLoaderBuilder.USE_RED5_LIB,baseLoader);
    Thread.currentThread().setContextClassLoader(loader);
    JMXServiceURL url=null;
    JMXConnector jmxc=null;
    HashMap<String,Object> env=null;
    if (null == args || args.length < 1) {
      System.out.printf(""String_Node_Str"",rmiAdapterHost);
      url=new JMXServiceURL(""String_Node_Str"" + rmiAdapterHost + ""String_Node_Str""+ rmiAdapterHost+ ""String_Node_Str"");
    }
 else {
      System.out.printf(""String_Node_Str"",rmiAdapterHost,args[0]);
      url=new JMXServiceURL(""String_Node_Str"" + rmiAdapterHost + ""String_Node_Str""+ args[0]+ ""String_Node_Str""+ rmiAdapterHost+ ""String_Node_Str""+ args[0]+ ""String_Node_Str"");
      if (args.length > 1) {
        env=new HashMap<String,Object>(1);
        String[] credentials=new String[]{args[1],args[2]};
        env.put(""String_Node_Str"",credentials);
      }
    }
    jmxc=JMXConnectorFactory.connect(url,env);
    MBeanServerConnection mbs=jmxc.getMBeanServerConnection();
    final ShutdownMXBean proxy;
    ObjectName tomcatObjectName=new ObjectName(""String_Node_Str"");
    ObjectName jettyObjectName=new ObjectName(""String_Node_Str"");
    ObjectName winstoneObjectName=new ObjectName(""String_Node_Str"");
    ObjectName contextLoaderObjectName=new ObjectName(""String_Node_Str"");
    if (mbs.isRegistered(jettyObjectName)) {
      System.out.println(""String_Node_Str"");
      proxy=JMX.newMXBeanProxy(mbs,jettyObjectName,ShutdownMXBean.class,true);
    }
 else     if (mbs.isRegistered(tomcatObjectName)) {
      System.out.println(""String_Node_Str"");
      proxy=JMX.newMXBeanProxy(mbs,tomcatObjectName,ShutdownMXBean.class,true);
    }
 else     if (mbs.isRegistered(winstoneObjectName)) {
      System.out.println(""String_Node_Str"");
      proxy=JMX.newMXBeanProxy(mbs,winstoneObjectName,ShutdownMXBean.class,true);
    }
 else     if (mbs.isRegistered(contextLoaderObjectName)) {
      System.out.println(""String_Node_Str"");
      proxy=JMX.newMXBeanProxy(mbs,contextLoaderObjectName,ShutdownMXBean.class,true);
    }
 else {
      System.out.println(""String_Node_Str"");
      proxy=null;
    }
    if (proxy != null) {
      System.out.println(""String_Node_Str"");
      final CountDownLatch latch=new CountDownLatch(1);
      new Thread(new Runnable(){
        public void run(){
          try {
            proxy.destroy();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
          latch.countDown();
        }
      }
,""String_Node_Str"").start();
      try {
        latch.await(5,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        System.out.println(""String_Node_Str"");
      }
 finally {
        System.exit(0);
      }
    }
    jmxc.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9209876543209876
24416,"@Override public void onZoomChange(int zoomValue,boolean stopped,Camera camera){
}","@Override public synchronized void onZoomChange(int zoomValue,boolean stopped,Camera camera){
}",0.9265536723163842
24417,"/** 
 * Handle glass tap gestures
 */
@Override public boolean onGesture(Gesture g){
switch (g) {
case TAP:
    if (cameraMode == CAMERA_MODE.PHOTO_MODE) {
      String s=mCamera.getParameters().getFocusMode();
      if (!s.equalsIgnoreCase(""String_Node_Str"")) {
        mCamera.autoFocus(new AutoFocusCallback(){
          @Override public void onAutoFocus(          boolean success,          Camera camera){
            if (success)             camera.takePicture(null,null,mPictureCallback);
          }
        }
);
      }
 else {
        mCamera.takePicture(null,null,mPictureCallback);
      }
    }
 else {
      Intent intent=new Intent();
      intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
      intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
      setResult(RESULT_OK,intent);
      finish();
    }
  return true;
case SWIPE_RIGHT:
if (enablezoom) mPreview.zoomIn();
return true;
case SWIPE_LEFT:
if (enablezoom) mPreview.zoomOut();
return true;
default :
return false;
}
}","/** 
 * Handle glass tap gestures
 */
@Override public synchronized boolean onGesture(Gesture g){
switch (g) {
case TAP:
    if (cameraMode == CAMERA_MODE.PHOTO_MODE) {
      String s=mCamera.getParameters().getFocusMode();
      if (!s.equalsIgnoreCase(""String_Node_Str"")) {
        mCamera.autoFocus(new AutoFocusCallback(){
          @Override public void onAutoFocus(          boolean success,          Camera camera){
            if (success)             camera.takePicture(null,null,mPictureCallback);
          }
        }
);
      }
 else {
        mCamera.takePicture(null,null,mPictureCallback);
      }
    }
 else {
      Intent intent=new Intent();
      intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
      intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
      setResult(RESULT_OK,intent);
      finish();
    }
  return true;
case SWIPE_RIGHT:
if (enablezoom) mPreview.zoomIn();
return true;
case SWIPE_LEFT:
if (enablezoom) mPreview.zoomOut();
return true;
default :
return false;
}
}",0.9936055090998523
24418,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.e(tag,""String_Node_Str"");
  mSoundEffects=new SoundEffectPlayer();
  mSoundEffects.setup(this);
  LoadExtras(getIntent());
  Log.e(tag,""String_Node_Str"");
  loadUI();
  Log.e(tag,""String_Node_Str"");
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.e(tag,""String_Node_Str"");
  mSoundEffects=new SoundEffectPlayer();
  mSoundEffects.setup(this);
  loadExtras(getIntent());
  Log.e(tag,""String_Node_Str"");
  loadUI();
  Log.e(tag,""String_Node_Str"");
}",0.9966996699669968
24419,"/** 
 * Create a sub directory to save photos and videos
 */
private void createSubDirectory(){
  if (cameraMode == CAMERA_MODE.PHOTO_MODE) {
    folderPath=folderPath + File.separator + PHOTO_DIRECTORY;
  }
 else {
    folderPath=folderPath + File.separator + VIDEO_DIRECTORY;
  }
}","/** 
 * Create a sub directory to save photos and videos
 */
private void createSubDirectory(){
  if (cameraMode == CAMERA_MODE.VIDEO_MODE) {
    folderPath=folderPath + File.separator + VIDEO_DIRECTORY;
  }
 else {
    folderPath=folderPath + File.separator + PHOTO_DIRECTORY;
  }
}",0.9575971731448764
24420,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  if (mCamera != null) {
    mCamera.stopPreview();
    mCamera.release();
    mCamera=null;
  }
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  if (mCamera != null) {
    mCamera.stopPreview();
    mCamera.release();
    mCamera=null;
  }
  mHolder=null;
}",0.9523809523809524
24421,"@Override public void surfaceCreated(SurfaceHolder holder){
  if (mCamera != null) {
    try {
      if (mCamera.getParameters().isZoomSupported()) {
        mCamera.setZoomChangeListener(this);
        zoomOffset=mCamera.getParameters().getMaxZoom() / 4;
      }
      mCamera.setPreviewDisplay(holder);
      mCamera.startPreview();
    }
 catch (    IOException e) {
      Log.e(""String_Node_Str"",e.getMessage());
    }
  }
}","@Override public synchronized void surfaceCreated(SurfaceHolder holder){
  if (mCamera != null) {
    try {
      if (mCamera.getParameters().isZoomSupported()) {
        mCamera.setZoomChangeListener(this);
        zoomOffset=mCamera.getParameters().getMaxZoom() / 4;
      }
      mCamera.setPreviewDisplay(holder);
      mCamera.startPreview();
    }
 catch (    IOException e) {
      Log.e(""String_Node_Str"",e.getMessage());
    }
  }
}",0.9850402761795168
24422,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mSoundEffects=new SoundEffectPlayer();
  mSoundEffects.setup(this);
  LoadExtras(getIntent());
  loadUI();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.e(tag,""String_Node_Str"");
  mSoundEffects=new SoundEffectPlayer();
  mSoundEffects.setup(this);
  LoadExtras(getIntent());
  Log.e(tag,""String_Node_Str"");
  loadUI();
  Log.e(tag,""String_Node_Str"");
}",0.8117647058823529
24423,"/** 
 * Handle glass tap gestures
 */
@Override public synchronized boolean onGesture(Gesture g){
switch (g) {
case TAP:
    if (cameraMode == CAMERA_MODE.PHOTO_MODE) {
      mOverlay.setMode(CameraOverlay.Mode.FOCUS);
      mCamera.takePicture(null,null,mPictureCallback);
      mSoundEffects.shutter();
    }
 else {
      try {
        recorder.stop();
      }
 catch (      Exception e) {
        Log.e(""String_Node_Str"",e.getMessage());
      }
      mExecutorService.shutdown();
      mCamera.stopPreview();
      mSoundEffects.camcorderStop();
      mOverlay.setMode(Mode.PLAIN);
      Intent intent=new Intent();
      intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
      intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
      setResult(RESULT_OK,intent);
      MediaScannerConnection.scanFile(getApplicationContext(),new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
    }
  return true;
case SWIPE_RIGHT:
if (enablezoom) mPreview.zoomIn();
return true;
case SWIPE_LEFT:
if (enablezoom) mPreview.zoomOut();
return true;
default :
return false;
}
}","/** 
 * Handle glass tap gestures
 */
@Override public synchronized boolean onGesture(Gesture g){
switch (g) {
case TAP:
    if (cameraMode == CAMERA_MODE.PHOTO_MODE) {
      mOverlay.setMode(CameraOverlay.Mode.FOCUS);
      mCamera.takePicture(null,null,mPictureCallback);
      mSoundEffects.shutter();
    }
 else {
      try {
        recorder.stop();
      }
 catch (      Exception e) {
        Log.e(""String_Node_Str"",e.getMessage());
      }
      mExecutorService.shutdown();
      mCamera.stopPreview();
      try {
        mCamera.reconnect();
      }
 catch (      IOException e) {
        Log.e(""String_Node_Str"",e.getMessage());
      }
      mSoundEffects.camcorderStop();
      mOverlay.setMode(Mode.PLAIN);
      Intent intent=new Intent();
      intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
      intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
      setResult(RESULT_OK,intent);
      MediaScannerConnection.scanFile(getApplicationContext(),new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
    }
  return true;
case SWIPE_RIGHT:
if (enablezoom) mPreview.zoomIn();
return true;
case SWIPE_LEFT:
if (enablezoom) mPreview.zoomOut();
return true;
default :
return false;
}
}",0.940973718224903
24424,"@Override public void onScanCompleted(String path,Uri uri){
  releaseMediaRecorder();
  System.gc();
  CuxtomCamActivity.this.finish();
}","@Override public void onScanCompleted(String path,Uri uri){
  releaseMediaRecorder();
  previewCameraLayout.removeAllViewsInLayout();
  CuxtomCamActivity.this.finish();
  System.gc();
  Log.e(tag,""String_Node_Str"");
}",0.7231638418079096
24425,"@Override public void run(){
  startVideoRecorder();
  mSoundEffects.camcorder();
  initVideoRecordingUI();
}","@Override public void run(){
  Log.e(tag,""String_Node_Str"");
  mCamera.stopPreview();
  mCamera.unlock();
  startVideoRecorder();
  Log.e(tag,""String_Node_Str"");
  mSoundEffects.camcorder();
  initVideoRecordingUI();
  Log.e(tag,""String_Node_Str"");
}",0.6072423398328691
24426,"private void releaseMediaRecorder(){
  if (recorder != null) {
    recorder.reset();
    recorder.release();
    recorder=null;
    mCamera=null;
  }
}","private void releaseMediaRecorder(){
  if (recorder != null) {
    recorder.reset();
    recorder.release();
    recorder=null;
  }
  mCamera=null;
  mPreview.surfaceDestroyed(null);
}",0.8955223880597015
24427,"/** 
 * Initialize video recorder to record video
 */
private void initRecorder(){
  try {
    File dir=new File(folderPath);
    if (!dir.exists()) {
      dir.mkdirs();
    }
    mCamera.stopPreview();
    mCamera.unlock();
    videofile=new File(dir,fileName + ""String_Node_Str"");
    recorder.setCamera(mCamera);
    recorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
    recorder.setProfile(CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH));
    recorder.setOutputFile(videofile.getAbsolutePath());
    recorder.setPreviewDisplay(mPreview.getHolder().getSurface());
    recorder.setMaxDuration(video_duration * 1000);
    recorder.setOnInfoListener(new OnInfoListener(){
      @Override public void onInfo(      MediaRecorder mr,      int what,      int extra){
        if (what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED) {
          mExecutorService.shutdown();
          mCamera.stopPreview();
          mSoundEffects.camcorderStop();
          mOverlay.setMode(Mode.PLAIN);
          Intent intent=new Intent();
          intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
          intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
          setResult(RESULT_OK,intent);
          MediaScannerConnection.scanFile(CuxtomCamActivity.this,new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
        }
      }
    }
);
    recorder.prepare();
    recorder.start();
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
}","/** 
 * Initialize video recorder to record video
 */
private void initRecorder(){
  try {
    File dir=new File(folderPath);
    if (!dir.exists()) {
      dir.mkdirs();
    }
    videofile=new File(dir,fileName + ""String_Node_Str"");
    recorder.setCamera(mCamera);
    recorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
    recorder.setProfile(CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH));
    recorder.setOutputFile(videofile.getAbsolutePath());
    recorder.setPreviewDisplay(mPreview.getHolder().getSurface());
    recorder.setMaxDuration(video_duration * 1000);
    recorder.setOnInfoListener(new OnInfoListener(){
      @Override public void onInfo(      MediaRecorder mr,      int what,      int extra){
        if (what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED) {
          mExecutorService.shutdown();
          mCamera.stopPreview();
          try {
            mCamera.reconnect();
          }
 catch (          IOException e) {
            Log.e(""String_Node_Str"",e.getMessage());
          }
          mSoundEffects.camcorderStop();
          mOverlay.setMode(Mode.PLAIN);
          Intent intent=new Intent();
          intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
          intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
          setResult(RESULT_OK,intent);
          MediaScannerConnection.scanFile(CuxtomCamActivity.this,new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
        }
      }
    }
);
    recorder.prepare();
    recorder.start();
    mOverlay.setMode(Mode.RECORDING);
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
}",0.9246658566221142
24428,"@Override public void onInfo(MediaRecorder mr,int what,int extra){
  if (what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED) {
    mExecutorService.shutdown();
    mCamera.stopPreview();
    mSoundEffects.camcorderStop();
    mOverlay.setMode(Mode.PLAIN);
    Intent intent=new Intent();
    intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
    intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
    setResult(RESULT_OK,intent);
    MediaScannerConnection.scanFile(CuxtomCamActivity.this,new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
  }
}","@Override public void onInfo(MediaRecorder mr,int what,int extra){
  if (what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED) {
    mExecutorService.shutdown();
    mCamera.stopPreview();
    try {
      mCamera.reconnect();
    }
 catch (    IOException e) {
      Log.e(""String_Node_Str"",e.getMessage());
    }
    mSoundEffects.camcorderStop();
    mOverlay.setMode(Mode.PLAIN);
    Intent intent=new Intent();
    intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
    intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
    setResult(RESULT_OK,intent);
    MediaScannerConnection.scanFile(CuxtomCamActivity.this,new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
  }
}",0.9037721324095458
24429,"@Override public void onCameraInit(){
  if (cameraMode == CAMERA_MODE.VIDEO_MODE) {
    mOverlay.setMode(Mode.RECORDING);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        startVideoRecorder();
        mSoundEffects.camcorder();
        initVideoRecordingUI();
      }
    }
,1000);
  }
}","@Override public synchronized void onCameraInit(){
  Log.e(tag,""String_Node_Str"");
  if (cameraMode == CAMERA_MODE.VIDEO_MODE) {
    Log.e(tag,""String_Node_Str"");
    runOnUiThread(new Runnable(){
      @Override public void run(){
        Log.e(tag,""String_Node_Str"");
        mCamera.stopPreview();
        mCamera.unlock();
        startVideoRecorder();
        Log.e(tag,""String_Node_Str"");
        mSoundEffects.camcorder();
        initVideoRecordingUI();
        Log.e(tag,""String_Node_Str"");
      }
    }
);
  }
}",0.6148409893992933
24430,"/** 
 * Start merging the video files
 */
private void mergeVideoIntoOneFile(){
  previewCameraLayout.removeAllViews();
  File dir=new File(folderPath);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  videofile=new File(dir,fileName + ""String_Node_Str"");
  VideoMerger videoMerger=new VideoMerger(CuxtomCamActivity.this,videoFiles,videofile);
  videoMerger.setVideoMergeListener(new OnVideoListener(){
    @Override public void onVideoMerged(){
      Intent intent=new Intent();
      intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
      intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
      setResult(RESULT_OK,intent);
      MediaScannerConnection.scanFile(getApplicationContext(),new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
    }
    @Override public void onVideoMergeFailed(    Exception e){
    }
  }
);
  videoMerger.execute();
}","/** 
 * Start merging the video files
 */
private void mergeVideoIntoOneFile(){
  previewCameraLayout.removeAllViews();
  File dir=new File(folderPath);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  videofile=new File(dir,fileName + ""String_Node_Str"");
  VideoMerger videoMerger=new VideoMerger(CuxtomCamActivity.this,videoFiles,videofile);
  videoMerger.setVideoMergeListener(new OnVideoListener(){
    @Override public void onVideoMerged(){
      Intent intent=new Intent();
      intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
      intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
      setResult(RESULT_OK,intent);
      MediaScannerConnection.scanFile(getApplicationContext(),new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
    }
    @Override public void onVideoMergeFailed(    Exception e){
      Log.e(""String_Node_Str"",e.getMessage());
    }
  }
);
  videoMerger.execute();
}",0.9739033870072182
24431,"@Override public void onVideoMergeFailed(Exception e){
}","@Override public void onVideoMergeFailed(Exception e){
  Log.e(""String_Node_Str"",e.getMessage());
}",0.7225806451612903
24432,"@Override protected Void doInBackground(Void... params){
  List<Movie> movies=new ArrayList<Movie>();
  List<Track> videoTracks=new LinkedList<Track>();
  List<Track> audioTracks=new LinkedList<Track>();
  try {
    for (int i=0; i < videoFiles.size(); i++) {
      movies.add(MovieCreator.build(videoFiles.get(i).getAbsolutePath()));
    }
    for (    Movie m : movies) {
      for (      Track t : m.getTracks()) {
        if (t.getHandler().equals(""String_Node_Str"")) {
          audioTracks.add(t);
        }
        if (t.getHandler().equals(""String_Node_Str"")) {
          videoTracks.add(t);
        }
      }
    }
    Movie finalMovie=new Movie();
    if (audioTracks.size() > 0) {
      finalMovie.addTrack(new AppendTrack(audioTracks.toArray(new Track[audioTracks.size()])));
    }
    if (videoTracks.size() > 0) {
      finalMovie.addTrack(new AppendTrack(videoTracks.toArray(new Track[videoTracks.size()])));
    }
    Container out=new DefaultMp4Builder().build(finalMovie);
    FileChannel fc=new RandomAccessFile(finalVideoFile,""String_Node_Str"").getChannel();
    for (int i=0; i < out.getBoxes().size(); i++) {
      finalVideoFileSize+=out.getBoxes().get(i).getSize();
    }
    Thread t=new Thread(new Runnable(){
      @Override public void run(){
        Log.e(""String_Node_Str"",""String_Node_Str"");
        long currentFileSize=0;
        if (finalVideoFile.exists())         currentFileSize=finalVideoFile.length();
        while (finalVideoFileSize != currentFileSize) {
          try {
            Thread.sleep(5000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          if (finalVideoFile.exists()) {
            currentFileSize=finalVideoFile.length();
            Log.e(""String_Node_Str"",""String_Node_Str"" + finalVideoFileSize + ""String_Node_Str""+ currentFileSize);
            int progress=(int)(currentFileSize * 100 / finalVideoFileSize);
            publishProgress(progress);
          }
        }
        Log.e(""String_Node_Str"",""String_Node_Str"");
      }
    }
);
    t.start();
    out.writeContainer(fc);
    t.stop();
    fc.close();
    for (int i=0; i < videoFiles.size(); i++) {
      videoFiles.get(i).delete();
    }
    publishProgress(100);
  }
 catch (  Exception e) {
    exception=e;
  }
  return null;
}","@Override protected Void doInBackground(Void... params){
  List<Movie> movies=new ArrayList<Movie>();
  List<Track> videoTracks=new LinkedList<Track>();
  List<Track> audioTracks=new LinkedList<Track>();
  try {
    for (int i=0; i < videoFiles.size(); i++) {
      movies.add(MovieCreator.build(videoFiles.get(i).getAbsolutePath()));
    }
    for (    Movie m : movies) {
      for (      Track t : m.getTracks()) {
        if (t.getHandler().equals(""String_Node_Str"")) {
          audioTracks.add(t);
        }
        if (t.getHandler().equals(""String_Node_Str"")) {
          videoTracks.add(t);
        }
      }
    }
    Movie finalMovie=new Movie();
    if (audioTracks.size() > 0) {
      finalMovie.addTrack(new AppendTrack(audioTracks.toArray(new Track[audioTracks.size()])));
    }
    if (videoTracks.size() > 0) {
      finalMovie.addTrack(new AppendTrack(videoTracks.toArray(new Track[videoTracks.size()])));
    }
    Container out=new DefaultMp4Builder().build(finalMovie);
    FileChannel fc=new RandomAccessFile(finalVideoFile,""String_Node_Str"").getChannel();
    for (int i=0; i < out.getBoxes().size(); i++) {
      finalVideoFileSize+=out.getBoxes().get(i).getSize();
    }
    Thread t=new Thread(new Runnable(){
      @Override public void run(){
        fileSizeCheckerThread=true;
        Log.e(""String_Node_Str"",""String_Node_Str"");
        long currentFileSize=0;
        if (finalVideoFile.exists())         currentFileSize=finalVideoFile.length();
        while (currentFileSize < finalVideoFileSize) {
          try {
            Thread.sleep(5000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          if (finalVideoFile.exists()) {
            currentFileSize=finalVideoFile.length();
            Log.e(""String_Node_Str"",""String_Node_Str"" + finalVideoFileSize + ""String_Node_Str""+ currentFileSize);
            int progress=(int)(currentFileSize * 100 / finalVideoFileSize);
            publishProgress(progress);
          }
          if (currentFileSize >= finalVideoFileSize)           break;
        }
        fileSizeCheckerThread=false;
        Log.e(""String_Node_Str"",""String_Node_Str"");
      }
    }
);
    t.start();
    out.writeContainer(fc);
    fc.close();
    for (int i=0; i < videoFiles.size(); i++) {
      videoFiles.get(i).delete();
    }
    publishProgress(100);
    if (fileSizeCheckerThread)     Thread.sleep(5000);
  }
 catch (  Exception e) {
    exception=e;
  }
  return null;
}",0.9482220835932628
24433,"@Override public void run(){
  Log.e(""String_Node_Str"",""String_Node_Str"");
  long currentFileSize=0;
  if (finalVideoFile.exists())   currentFileSize=finalVideoFile.length();
  while (finalVideoFileSize != currentFileSize) {
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    if (finalVideoFile.exists()) {
      currentFileSize=finalVideoFile.length();
      Log.e(""String_Node_Str"",""String_Node_Str"" + finalVideoFileSize + ""String_Node_Str""+ currentFileSize);
      int progress=(int)(currentFileSize * 100 / finalVideoFileSize);
      publishProgress(progress);
    }
  }
  Log.e(""String_Node_Str"",""String_Node_Str"");
}","@Override public void run(){
  fileSizeCheckerThread=true;
  Log.e(""String_Node_Str"",""String_Node_Str"");
  long currentFileSize=0;
  if (finalVideoFile.exists())   currentFileSize=finalVideoFile.length();
  while (currentFileSize < finalVideoFileSize) {
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    if (finalVideoFile.exists()) {
      currentFileSize=finalVideoFile.length();
      Log.e(""String_Node_Str"",""String_Node_Str"" + finalVideoFileSize + ""String_Node_Str""+ currentFileSize);
      int progress=(int)(currentFileSize * 100 / finalVideoFileSize);
      publishProgress(progress);
    }
    if (currentFileSize >= finalVideoFileSize)     break;
  }
  fileSizeCheckerThread=false;
  Log.e(""String_Node_Str"",""String_Node_Str"");
}",0.8955823293172691
24434,"@Override public synchronized void surfaceChanged(SurfaceHolder holder,int format,int width,int height){
  if (mHolder.getSurface() == null) {
    return;
  }
  if (cameraMode == CAMERA_MODE.PHOTO_MODE) {
    try {
      Parameters mParameters=mCamera.getParameters();
      mCamera.stopPreview();
      List<Camera.Size> pictureSizes=mParameters.getSupportedPictureSizes();
      List<int[]> fps=mParameters.getSupportedPreviewFpsRange();
      Camera.Size picturesize=pictureSizes.get(0);
      mParameters.setPictureSize(picturesize.width,picturesize.height);
      mParameters.setPreviewFpsRange(fps.get(5)[0],fps.get(5)[1]);
      onOrientationChanged(mParameters,Configuration.ORIENTATION_LANDSCAPE);
      mCamera.setParameters(mParameters);
      mCamera.setPreviewDisplay(mHolder);
      mCamera.startPreview();
    }
 catch (    Exception e) {
      Log.e(TAG,""String_Node_Str"" + e.getMessage());
    }
  }
  if (mCallback != null)   mCallback.onCameraInit();
}","@Override public synchronized void surfaceChanged(SurfaceHolder holder,int format,int width,int height){
  if (mHolder.getSurface() == null) {
    return;
  }
  if (cameraMode == CAMERA_MODE.PHOTO_MODE) {
    try {
      mCamera.stopPreview();
      mCamera.setPreviewDisplay(holder);
    }
 catch (    Exception e) {
      Log.e(TAG + ""String_Node_Str"",e.getMessage());
    }
    Parameters mParameters=mCamera.getParameters();
    List<Camera.Size> pictureSizes=mParameters.getSupportedPictureSizes();
    List<int[]> fps=mParameters.getSupportedPreviewFpsRange();
    Camera.Size picturesize=pictureSizes.get(0);
    mParameters.setPictureSize(picturesize.width,picturesize.height);
    mParameters.setPreviewFpsRange(fps.get(5)[0],fps.get(5)[1]);
    onOrientationChanged(mParameters,Configuration.ORIENTATION_LANDSCAPE);
    mCamera.setParameters(mParameters);
    mCamera.startPreview();
  }
  if (mCallback != null)   mCallback.onCameraInit();
}",0.766510660426417
24435,"@Override public void surfaceCreated(SurfaceHolder holder){
  if (mCamera != null) {
    try {
      if (mCamera.getParameters().isZoomSupported()) {
        mCamera.setZoomChangeListener(this);
        zoomOffset=mCamera.getParameters().getMaxZoom() / 5;
      }
      mCamera.setPreviewDisplay(holder);
      mCamera.startPreview();
      mCamera.lock();
    }
 catch (    IOException e) {
      Log.e(""String_Node_Str"",e.getMessage());
    }
  }
}","@Override public void surfaceCreated(SurfaceHolder holder){
  if (mCamera != null) {
    try {
      if (mCamera.getParameters().isZoomSupported()) {
        mCamera.setZoomChangeListener(this);
        zoomOffset=mCamera.getParameters().getMaxZoom() / 5;
      }
      mCamera.setPreviewDisplay(holder);
      mCamera.startPreview();
    }
 catch (    IOException e) {
      Log.e(""String_Node_Str"",e.getMessage());
    }
  }
}",0.9749430523917996
24436,"/** 
 * Ignore swipe down event
 */
@Override public boolean onKeyUp(int keyCode,KeyEvent event){
  if (keyCode == KEY_SWIPE_DOWN) {
    if (videofile != null) {
      mExecutorService.shutdown();
      recorder.stop();
      mCamera.stopPreview();
      videofile.delete();
    }
    setResult(RESULT_CANCELED);
    finish();
    return true;
  }
  return false;
}","/** 
 * Ignore swipe down event
 */
@Override public boolean onKeyUp(int keyCode,KeyEvent event){
  if (keyCode == KEY_SWIPE_DOWN) {
    if (videofile != null) {
      mExecutorService.shutdown();
      recorder.stop();
      mCamera.stopPreview();
      videofile.delete();
    }
    setResult(RESULT_CANCELED);
    releaseMediaRecorder();
    finish();
    return true;
  }
  return false;
}",0.9630606860158312
24437,"/** 
 * Handle glass tap gestures
 */
@Override public synchronized boolean onGesture(Gesture g){
switch (g) {
case TAP:
    if (cameraMode == CAMERA_MODE.PHOTO_MODE) {
      mOverlay.setMode(CameraOverlay.Mode.FOCUS);
      mCamera.takePicture(null,null,mPictureCallback);
      mSoundEffects.shutter();
    }
 else {
      recorder.stop();
      mExecutorService.shutdown();
      mSoundEffects.camcorderStop();
      mCamera.stopPreview();
      mOverlay.setMode(Mode.PLAIN);
      Intent intent=new Intent();
      intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
      intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
      setResult(RESULT_OK,intent);
      MediaScannerConnection.scanFile(getApplicationContext(),new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
    }
  return true;
case SWIPE_RIGHT:
if (enablezoom) mPreview.zoomIn();
return true;
case SWIPE_LEFT:
if (enablezoom) mPreview.zoomOut();
return true;
default :
return false;
}
}","/** 
 * Handle glass tap gestures
 */
@Override public synchronized boolean onGesture(Gesture g){
switch (g) {
case TAP:
    if (cameraMode == CAMERA_MODE.PHOTO_MODE) {
      mOverlay.setMode(CameraOverlay.Mode.FOCUS);
      mCamera.takePicture(null,null,mPictureCallback);
      mSoundEffects.shutter();
    }
 else {
      try {
        recorder.stop();
      }
 catch (      Exception e) {
        Log.e(""String_Node_Str"",e.getMessage());
      }
      mExecutorService.shutdown();
      mCamera.stopPreview();
      mSoundEffects.camcorderStop();
      mOverlay.setMode(Mode.PLAIN);
      Intent intent=new Intent();
      intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
      intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
      setResult(RESULT_OK,intent);
      MediaScannerConnection.scanFile(getApplicationContext(),new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
    }
  return true;
case SWIPE_RIGHT:
if (enablezoom) mPreview.zoomIn();
return true;
case SWIPE_LEFT:
if (enablezoom) mPreview.zoomOut();
return true;
default :
return false;
}
}",0.9190751445086706
24438,"@Override public void run(){
  mSoundEffects.camcorder();
  startVideoRecorder();
  initVideoRecordingUI();
}","@Override public void run(){
  startVideoRecorder();
  mSoundEffects.camcorder();
  initVideoRecordingUI();
}",0.7798165137614679
24439,"private void releaseMediaRecorder(){
  if (recorder != null) {
    recorder.reset();
    recorder.release();
    recorder=null;
  }
}","private void releaseMediaRecorder(){
  if (recorder != null) {
    recorder.reset();
    recorder.release();
    recorder=null;
    mCamera=null;
  }
}",0.9366197183098592
24440,"/** 
 * Initialize video recorder to record video
 */
private void initRecorder(){
  try {
    File dir=new File(folderPath);
    if (!dir.exists()) {
      dir.mkdirs();
    }
    mCamera.stopPreview();
    mCamera.unlock();
    videofile=new File(dir,fileName + ""String_Node_Str"");
    recorder.setCamera(mCamera);
    recorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
    recorder.setProfile(CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH));
    recorder.setOutputFile(videofile.getAbsolutePath());
    recorder.setPreviewDisplay(mPreview.getHolder().getSurface());
    recorder.setMaxDuration(video_duration * 1000);
    recorder.setOnInfoListener(new OnInfoListener(){
      @Override public void onInfo(      MediaRecorder mr,      int what,      int extra){
        if (what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED) {
          mExecutorService.shutdown();
          mSoundEffects.camcorderStop();
          mCamera.stopPreview();
          mOverlay.setMode(Mode.PLAIN);
          Intent intent=new Intent();
          intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
          intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
          setResult(RESULT_OK,intent);
          MediaScannerConnection.scanFile(CuxtomCamActivity.this,new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
        }
      }
    }
);
    recorder.prepare();
    recorder.start();
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
}","/** 
 * Initialize video recorder to record video
 */
private void initRecorder(){
  try {
    File dir=new File(folderPath);
    if (!dir.exists()) {
      dir.mkdirs();
    }
    mCamera.stopPreview();
    mCamera.unlock();
    videofile=new File(dir,fileName + ""String_Node_Str"");
    recorder.setCamera(mCamera);
    recorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
    recorder.setProfile(CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH));
    recorder.setOutputFile(videofile.getAbsolutePath());
    recorder.setPreviewDisplay(mPreview.getHolder().getSurface());
    recorder.setMaxDuration(video_duration * 1000);
    recorder.setOnInfoListener(new OnInfoListener(){
      @Override public void onInfo(      MediaRecorder mr,      int what,      int extra){
        if (what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED) {
          mExecutorService.shutdown();
          mCamera.stopPreview();
          mSoundEffects.camcorderStop();
          mOverlay.setMode(Mode.PLAIN);
          Intent intent=new Intent();
          intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
          intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
          setResult(RESULT_OK,intent);
          MediaScannerConnection.scanFile(CuxtomCamActivity.this,new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
        }
      }
    }
);
    recorder.prepare();
    recorder.start();
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
}",0.973901973265436
24441,"@Override public void onInfo(MediaRecorder mr,int what,int extra){
  if (what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED) {
    mExecutorService.shutdown();
    mSoundEffects.camcorderStop();
    mCamera.stopPreview();
    mOverlay.setMode(Mode.PLAIN);
    Intent intent=new Intent();
    intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
    intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
    setResult(RESULT_OK,intent);
    MediaScannerConnection.scanFile(CuxtomCamActivity.this,new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
  }
}","@Override public void onInfo(MediaRecorder mr,int what,int extra){
  if (what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED) {
    mExecutorService.shutdown();
    mCamera.stopPreview();
    mSoundEffects.camcorderStop();
    mOverlay.setMode(Mode.PLAIN);
    Intent intent=new Intent();
    intent.putExtra(CuxtomIntent.FILE_PATH,videofile.getPath());
    intent.putExtra(CuxtomIntent.FILE_TYPE,FILE_TYPE.VIDEO);
    setResult(RESULT_OK,intent);
    MediaScannerConnection.scanFile(CuxtomCamActivity.this,new String[]{videofile.getPath()},null,CuxtomCamActivity.this);
  }
}",0.9540034071550256
24442,"@Override public void onCameraInit(){
  if (cameraMode == CAMERA_MODE.VIDEO_MODE) {
    mOverlay.setMode(Mode.RECORDING);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        mSoundEffects.camcorder();
        startVideoRecorder();
        initVideoRecordingUI();
      }
    }
,1000);
  }
}","@Override public void onCameraInit(){
  if (cameraMode == CAMERA_MODE.VIDEO_MODE) {
    mOverlay.setMode(Mode.RECORDING);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        startVideoRecorder();
        mSoundEffects.camcorder();
        initVideoRecordingUI();
      }
    }
,1000);
  }
}",0.908256880733945
24443,"/** 
 * Load UI according to the seetings
 */
private void loadUI(){
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  previewCameraLayout=new RelativeLayout(this);
  previewCameraLayout.setLayoutParams(new LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT,android.view.ViewGroup.LayoutParams.MATCH_PARENT));
  mCamera=getCameraInstance();
  mPreview=new CameraPreview(this,mCamera,cameraMode,new Handler());
  mPreview.setCameraListener(this);
  mOverlay=new CameraOverlay(this);
  previewCameraLayout.addView(mPreview);
  previewCameraLayout.addView(mOverlay);
  setContentView(previewCameraLayout);
  tv_recordingDuration=new TextView(this);
  mGestureDetector=new GestureDetector(this);
  mGestureDetector.setBaseListener(this);
}","/** 
 * Load UI according to the settings provided by calling activity
 */
private void loadUI(){
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  previewCameraLayout=new RelativeLayout(this);
  previewCameraLayout.setLayoutParams(new LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT,android.view.ViewGroup.LayoutParams.MATCH_PARENT));
  mCamera=getCameraInstance();
  mPreview=new CameraPreview(this,mCamera,cameraMode,new Handler());
  mPreview.setCameraListener(this);
  mOverlay=new CameraOverlay(this);
  previewCameraLayout.addView(mPreview);
  previewCameraLayout.addView(mOverlay);
  setContentView(previewCameraLayout);
  tv_recordingDuration=new TextView(this);
  mGestureDetector=new GestureDetector(this);
  mGestureDetector.setBaseListener(this);
}",0.9818607372732592
24444,"/** 
 * Load all the extra values that have been sent by the calling activity
 * @param intent containing extras
 */
private void loadExtras(Intent intent){
  if (intent.hasExtra(CuxtomIntent.FOLDER_PATH)) {
    folderPath=intent.getStringExtra(CuxtomIntent.FOLDER_PATH);
    createSubDirectory();
  }
 else {
    folderPath=Environment.getExternalStorageDirectory() + File.separator + Environment.DIRECTORY_PICTURES+ File.separator+ DEFAULT_DIRECTORY;
    createSubDirectory();
  }
  if (intent.hasExtra(CuxtomIntent.CAMERA_MODE)) {
    cameraMode=intent.getIntExtra(CuxtomIntent.CAMERA_MODE,CAMERA_MODE.PHOTO_MODE);
  }
 else {
    cameraMode=CAMERA_MODE.PHOTO_MODE;
  }
  if (intent.hasExtra(CuxtomIntent.FILE_NAME)) {
    fileName=intent.getStringExtra(CuxtomIntent.FILE_NAME);
  }
 else {
    String timeStamp=new SimpleDateFormat(""String_Node_Str"").format(new Date());
    if (cameraMode == CAMERA_MODE.PHOTO_MODE) {
      fileName=""String_Node_Str"" + timeStamp;
    }
 else {
      fileName=""String_Node_Str"" + timeStamp;
    }
  }
  if (cameraMode == CAMERA_MODE.VIDEO_MODE && intent.hasExtra(CuxtomIntent.VIDEO_DURATION)) {
    video_duration=intent.getIntExtra(CuxtomIntent.VIDEO_DURATION,3600);
  }
 else {
    video_duration=3600;
  }
  if (intent.hasExtra(CuxtomIntent.ENABLE_ZOOM)) {
    enablezoom=intent.getBooleanExtra(CuxtomIntent.ENABLE_ZOOM,true);
  }
 else {
    enablezoom=true;
  }
}","/** 
 * Load all the extra values that have been sent by the calling activity
 * @param intent containing extras
 */
private void loadExtras(Intent intent){
  if (intent.hasExtra(CuxtomIntent.CAMERA_MODE)) {
    cameraMode=intent.getIntExtra(CuxtomIntent.CAMERA_MODE,CAMERA_MODE.PHOTO_MODE);
  }
 else {
    cameraMode=CAMERA_MODE.PHOTO_MODE;
  }
  if (intent.hasExtra(CuxtomIntent.FOLDER_PATH)) {
    folderPath=intent.getStringExtra(CuxtomIntent.FOLDER_PATH);
  }
 else {
    folderPath=Environment.getExternalStorageDirectory() + File.separator + Environment.DIRECTORY_PICTURES+ File.separator+ DEFAULT_DIRECTORY;
    createSubDirectory();
  }
  if (intent.hasExtra(CuxtomIntent.FILE_NAME)) {
    fileName=intent.getStringExtra(CuxtomIntent.FILE_NAME);
  }
 else {
    String timeStamp=new SimpleDateFormat(""String_Node_Str"").format(new Date());
    if (cameraMode == CAMERA_MODE.PHOTO_MODE) {
      fileName=""String_Node_Str"" + timeStamp;
    }
 else {
      fileName=""String_Node_Str"" + timeStamp;
    }
  }
  if (cameraMode == CAMERA_MODE.VIDEO_MODE && intent.hasExtra(CuxtomIntent.VIDEO_DURATION)) {
    video_duration=intent.getIntExtra(CuxtomIntent.VIDEO_DURATION,3600);
  }
 else {
    video_duration=3600;
  }
  if (intent.hasExtra(CuxtomIntent.ENABLE_ZOOM)) {
    enablezoom=intent.getBooleanExtra(CuxtomIntent.ENABLE_ZOOM,true);
  }
 else {
    enablezoom=true;
  }
}",0.8542713567839196
24445,"protected String resolveExpression(String expression){
  return valueResolver.resolveStringValue(expression);
}","/** 
 * Will replace property placeholders with their values, e.g. ${serverUrl}/customer with http://example.com/js/customer if serverUrl is a property that the application context resolves to http://example.com.js
 * @param expression
 * @return
 */
protected String resolveExpression(String expression){
  return valueResolver.resolveStringValue(expression);
}",0.4693446088794926
24446,"@Override public boolean isVertexValueCorrect(LongWritable vertexId,VertexValue value){
  return value.matchedID != vertexId.get();
}","@Override public boolean isVertexValueCorrect(LongWritable vertexId,VertexValue value){
  return value.getMatchedID() != vertexId.get();
}",0.974169741697417
24447,"@Override public boolean isVertexValueCorrect(LongWritable vertexId,VertexValue value){
  return value.matchedID != vertexId.get();
}","@Override public boolean isVertexValueCorrect(LongWritable vertexId,VertexValue value){
  return value.getMatchedID() != vertexId.get();
}",0.974169741697417
24448,"/** 
 * Whether the given vertex is a neighbor of a vertex that has been configured to be debugged. If so then the given vertex will also be debugged.
 * @param vertex a vertex.
 * @return whether the vertex is a neighbor of vertex that should bedebugged.
 */
private void addVertexToVerticesToDebugSetIfNeighbor(Vertex<I,V,E> vertex){
  for (  Edge<I,E> edge : vertex.getEdges()) {
    if (verticesToDebugSet.contains(edge.getTargetVertexId())) {
      verticesToDebugSet.add(vertex.getId());
    }
  }
}","/** 
 * Whether the given vertex is a neighbor of a vertex that has been configured to be debugged. If so then the given vertex will also be debugged.
 * @param vertex a vertex.
 */
private void addVertexToVerticesToDebugSetIfNeighbor(Vertex<I,V,E> vertex){
  for (  Edge<I,E> edge : vertex.getEdges()) {
    if (verticesToDebugSet.contains(edge.getTargetVertexId())) {
      verticesToDebugSet.add(vertex.getId());
    }
  }
}",0.9163090128755365
24449,"@SuppressWarnings(""String_Node_Str"") private void insertIDIntoVerticesToDebugSetIfLongOrInt(Class<?> idType,String idString){
  if (LongWritable.class.isAssignableFrom(idType)) {
    verticesToDebugSet.add((I)new LongWritable(Long.valueOf(idString)));
  }
 else   if (IntWritable.class.isAssignableFrom(idType)) {
    verticesToDebugSet.add((I)new IntWritable(Integer.valueOf(idString)));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
}","/** 
 * Add given string to the vertex set for debugging.
 * @param idType type of vertex id
 * @param idString string representation of the vertex to add
 */
@SuppressWarnings(""String_Node_Str"") private void insertIDIntoVerticesToDebugSetIfLongOrInt(Class<?> idType,String idString){
  if (LongWritable.class.isAssignableFrom(idType)) {
    verticesToDebugSet.add((I)new LongWritable(Long.valueOf(idString)));
  }
 else   if (IntWritable.class.isAssignableFrom(idType)) {
    verticesToDebugSet.add((I)new IntWritable(Integer.valueOf(idString)));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.8639863130881095
24450,"/** 
 * Whether the specified vertex should be debugged.
 * @param vertex a vertex.
 * @return whether the vertex should be debugged.
 */
public boolean shouldDebugVertex(Vertex<I,V,E> vertex,long superstepNo){
  if (vertex.isHalted()) {
    return false;
  }
  if (debugAllVertices) {
    return true;
  }
  if (verticesToDebugSet == null) {
    return false;
  }
 else {
    if (superstepNo == 0 && debugNeighborsOfVerticesToDebug) {
      addVertexToVerticesToDebugSetIfNeighbor(vertex);
    }
    return verticesToDebugSet.contains(vertex.getId());
  }
}","/** 
 * Whether the specified vertex should be debugged.
 * @param vertex a vertex.
 * @param superstepNo the superstep number.
 * @return whether the vertex should be debugged.
 */
public boolean shouldDebugVertex(Vertex<I,V,E> vertex,long superstepNo){
  if (vertex.isHalted()) {
    return false;
  }
  if (debugAllVertices) {
    return true;
  }
  if (verticesToDebugSet == null) {
    return false;
  }
 else {
    if (superstepNo == 0 && debugNeighborsOfVerticesToDebug) {
      addVertexToVerticesToDebugSetIfNeighbor(vertex);
    }
    return verticesToDebugSet.contains(vertex.getId());
  }
}",0.9620689655172414
24451,"@Override public void preSuperstep(){
  phase=Phase.values()[((IntWritable)getAggregatedValue(GraphColoringMaster.PHASE)).get()];
  colorToAssign=((IntWritable)getAggregatedValue(GraphColoringMaster.COLOR_TO_ASSIGN)).get();
  System.out.println(getSuperstep() + ""String_Node_Str"" + phase+ ""String_Node_Str""+ colorToAssign);
}","@Override public void preSuperstep(){
  phase=Phase.values()[((IntWritable)getAggregatedValue(GraphColoringMaster.PHASE)).get()];
  colorToAssign=((IntWritable)getAggregatedValue(GraphColoringMaster.COLOR_TO_ASSIGN)).get();
}",0.8181818181818182
24452,"protected void setVertexColor(Vertex<LongWritable,VertexValue,NullWritable> vertex,int colorToAssign){
  VertexValue value=vertex.getValue();
  value.setColor(colorToAssign);
  vertex.setValue(value);
}","/** 
 * Set the vertex color.
 * @param vertex the vertex
 * @param colorToAssign the color
 */
protected void setVertexColor(Vertex<LongWritable,VertexValue,NullWritable> vertex,int colorToAssign){
  VertexValue value=vertex.getValue();
  value.setColor(colorToAssign);
  vertex.setValue(value);
}",0.808
24453,"protected void setVertexState(Vertex<LongWritable,VertexValue,NullWritable> vertex,State newState){
  VertexValue value=vertex.getValue();
  value.setState(newState);
  vertex.setValue(value);
}","/** 
 * Set the vertex state.
 * @param vertex the vertex
 * @param newState the new state
 */
protected void setVertexState(Vertex<LongWritable,VertexValue,NullWritable> vertex,State newState){
  VertexValue value=vertex.getValue();
  value.setState(newState);
  vertex.setValue(value);
}",0.8033126293995859
24454,"@Override public void compute(){
  if (phase != null) {
switch (phase) {
case LOTTERY:
      phase=Phase.CONFLICT_RESOLUTION;
    break;
case CONFLICT_RESOLUTION:
  phase=Phase.EDGE_CLEANING;
break;
case EDGE_CLEANING:
long numUnknown=((LongWritable)getAggregatedValue(NUM_VERTICES_UNKNOWN)).get();
if (numUnknown == 0) {
setAggregatedValue(COLOR_TO_ASSIGN,new IntWritable(++colorToAssign));
phase=Phase.COLOR_ASSIGNMENT;
}
 else {
phase=Phase.LOTTERY;
}
break;
case COLOR_ASSIGNMENT:
System.out.println(getSuperstep() + ""String_Node_Str"" + phase+ ""String_Node_Str""+ colorToAssign);
long numColored=((LongWritable)getAggregatedValue(NUM_VERTICES_COLORED)).get();
if (numColored == getTotalNumVertices()) {
haltComputation();
return;
}
phase=Phase.LOTTERY;
break;
default :
throw new IllegalStateException();
}
}
 else {
phase=Phase.LOTTERY;
}
setAggregatedValue(PHASE,new IntWritable(phase.ordinal()));
}","@Override public void compute(){
  if (phase != null) {
switch (phase) {
case LOTTERY:
      phase=Phase.CONFLICT_RESOLUTION;
    break;
case CONFLICT_RESOLUTION:
  phase=Phase.EDGE_CLEANING;
break;
case EDGE_CLEANING:
long numUnknown=((LongWritable)getAggregatedValue(NUM_VERTICES_UNKNOWN)).get();
if (numUnknown == 0) {
setAggregatedValue(COLOR_TO_ASSIGN,new IntWritable(++colorToAssign));
phase=Phase.COLOR_ASSIGNMENT;
}
 else {
phase=Phase.LOTTERY;
}
break;
case COLOR_ASSIGNMENT:
long numColored=((LongWritable)getAggregatedValue(NUM_VERTICES_COLORED)).get();
if (numColored == getTotalNumVertices()) {
haltComputation();
return;
}
phase=Phase.LOTTERY;
break;
default :
throw new IllegalStateException();
}
}
 else {
phase=Phase.LOTTERY;
}
setAggregatedValue(PHASE,new IntWritable(phase.ordinal()));
}",0.942690058479532
24455,"/** 
 * Constructs a match granting or denying message.
 * @param vertex Sending vertex
 * @param isGranting True iff it is a granting message
 */
public Message(Vertex<LongWritable,VertexValue,NullWritable> vertex,boolean isGranting){
  this(vertex,new BooleanWritable(isGranting));
}","/** 
 * Constructs a match granting or denying message.
 * @param vertex Sending vertex
 * @param isGranting True iff it is a granting message
 */
public Message(Vertex<LongWritable,VertexValue,NullWritable> vertex,boolean isGranting){
  this(vertex);
  type=isGranting ? Type.REQUEST_GRANTED : Type.REQUEST_DENIED;
}",0.840531561461794
24456,"public LongWritable getSenderVertex(){
  return senderVertex;
}","public long getSenderVertex(){
  return senderVertex;
}",0.9152542372881356
24457,"public void setMatchedVertex(LongWritable matchedVertex){
  this.matchedVertex=matchedVertex;
}","/** 
 * Sets matched vertex.
 * @param matchedVertex Matched vertex id
 */
public void setMatchedVertex(long matchedVertex){
  this.matched=true;
  this.matchedVertex=matchedVertex;
}",0.6187050359712231
24458,"public LongWritable getMatchedVertex(){
  return matchedVertex;
}","public long getMatchedVertex(){
  return matchedVertex;
}",0.918032786885246
24459,"@Override public void compute(Vertex<LongWritable,VertexValue,NullWritable> vertex,Iterable<Message> messages) throws IOException {
  int phase=(int)(getSuperstep() % 4);
switch (phase) {
case 0:
    if (isUnmatchedLeft(vertex)) {
      sendMessageToAllEdges(vertex,createRequestMessage(vertex));
      vertex.voteToHalt();
    }
  break;
case 1:
if (isUnmatchedRight(vertex)) {
  int i=0;
  for (  Message msg : messages) {
    Message reply=(i == 0) ? createGrantingMessage(vertex) : createDenyingMessage(vertex);
    sendMessage(msg.getSenderVertex(),reply);
    ++i;
  }
  vertex.voteToHalt();
}
break;
case 2:
if (isUnmatchedLeft(vertex)) {
for (Message msg : messages) {
if (msg.isGranting().get()) {
  sendMessage(msg.getSenderVertex(),createGrantingMessage(vertex));
  vertex.getValue().setMatchedVertex(msg.getSenderVertex());
  break;
}
}
}
break;
case 3:
if (isUnmatchedRight(vertex)) {
for (Message msg : messages) {
vertex.getValue().setMatchedVertex(msg.getSenderVertex());
break;
}
vertex.voteToHalt();
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + phase);
}
}","@Override public void compute(Vertex<LongWritable,VertexValue,NullWritable> vertex,Iterable<Message> messages) throws IOException {
  int phase=(int)(getSuperstep() % 4);
switch (phase) {
case 0:
    if (isUnmatchedLeft(vertex)) {
      sendMessageToAllEdges(vertex,createRequestMessage(vertex));
      vertex.voteToHalt();
    }
  break;
case 1:
if (isUnmatchedRight(vertex)) {
  int i=0;
  for (  Message msg : messages) {
    Message reply=(i == 0) ? createGrantingMessage(vertex) : createDenyingMessage(vertex);
    sendMessage(new LongWritable(msg.getSenderVertex()),reply);
    ++i;
  }
  vertex.voteToHalt();
}
break;
case 2:
if (isUnmatchedLeft(vertex)) {
for (Message msg : messages) {
if (msg.isGranting()) {
  sendMessage(new LongWritable(msg.getSenderVertex()),createGrantingMessage(vertex));
  vertex.getValue().setMatchedVertex(msg.getSenderVertex());
  break;
}
}
}
break;
case 3:
if (isUnmatchedRight(vertex)) {
for (Message msg : messages) {
vertex.getValue().setMatchedVertex(msg.getSenderVertex());
break;
}
vertex.voteToHalt();
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + phase);
}
}",0.9623318385650224
24460,"@Override public void readFields(DataInput in) throws IOException {
  if (in.readBoolean()) {
    senderVertex=new LongWritable();
    senderVertex.readFields(in);
  }
 else {
    senderVertex=null;
  }
  if (in.readBoolean()) {
    isGranting=new BooleanWritable();
    isGranting.readFields(in);
  }
 else {
    isGranting=null;
  }
}","@Override public void readFields(DataInput in) throws IOException {
  senderVertex=in.readLong();
  type=Type.values()[in.readInt()];
}",0.4755838641188959
24461,"public BooleanWritable isGranting(){
  return isGranting;
}","public boolean isGranting(){
  return type.equals(Type.REQUEST_GRANTED);
}",0.631578947368421
24462,"/** 
 * @param vertex The vertex to test
 * @return Whether the vertex has a match
 */
private boolean hasNotMatchedYet(Vertex<LongWritable,VertexValue,NullWritable> vertex){
  return vertex.getValue().matchedVertex == null;
}","/** 
 * @param vertex The vertex to test
 * @return Whether the vertex has a match
 */
private boolean hasNotMatchedYet(Vertex<LongWritable,VertexValue,NullWritable> vertex){
  return !vertex.getValue().isMatched();
}",0.9525959367945824
24463,"@Override public String toString(){
  if (isGranting == null) {
    return ""String_Node_Str"" + senderVertex;
  }
 else   if (isGranting.get()) {
    return ""String_Node_Str"" + senderVertex;
  }
 else {
    return ""String_Node_Str"" + senderVertex;
  }
}","@Override public String toString(){
  return type + ""String_Node_Str"" + senderVertex;
}",0.471976401179941
24464,"@Override public void write(DataOutput out) throws IOException {
  out.writeBoolean(senderVertex != null);
  if (senderVertex != null) {
    senderVertex.write(out);
  }
  out.writeBoolean(isGranting != null);
  if (isGranting != null) {
    isGranting.write(out);
  }
}","@Override public void write(DataOutput out) throws IOException {
  out.writeLong(senderVertex);
  out.writeInt(type.ordinal());
}",0.5714285714285714
24465,"@Override public void compute(Vertex<LongWritable,VertexValue,NullWritable> vertex,Iterable<Message> messages) throws IOException {
  int phase=(int)(getSuperstep() % 4);
switch (phase) {
case 0:
    if (isUnmatchedLeft(vertex)) {
      sendMessageToAllEdges(vertex,createRequestMessage(vertex));
      vertex.voteToHalt();
    }
  break;
case 1:
if (isUnmatchedRight(vertex)) {
  int i=0;
  for (  Message msg : messages) {
    Message reply=(i == 0) ? createGrantingMessage(vertex) : createDenyingMessage(vertex);
    sendMessage(new LongWritable(msg.getSenderVertex()),reply);
    ++i;
  }
  vertex.voteToHalt();
}
break;
case 2:
if (isUnmatchedLeft(vertex)) {
for (Message msg : messages) {
if (msg.isGranting()) {
  sendMessage(new LongWritable(msg.getSenderVertex()),createGrantingMessage(vertex));
  vertex.getValue().setMatchedVertex(msg.getSenderVertex());
  break;
}
}
}
break;
case 3:
if (isUnmatchedRight(vertex)) {
for (Message msg : messages) {
vertex.getValue().setMatchedVertex(msg.getSenderVertex());
break;
}
vertex.voteToHalt();
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + phase);
}
}","@Override public void compute(Vertex<LongWritable,VertexValue,NullWritable> vertex,Iterable<Message> messages) throws IOException {
  int phase=(int)(getSuperstep() % 4);
switch (phase) {
case 0:
    if (isLeft(vertex)) {
      if (isNotMatchedYet(vertex)) {
        sendMessageToAllEdges(vertex,createRequestMessage(vertex));
        vertex.voteToHalt();
      }
    }
  break;
case 1:
if (isRight(vertex)) {
  if (isNotMatchedYet(vertex)) {
    int i=0;
    for (    Message msg : messages) {
      Message reply=(i == 0) ? createGrantingMessage(vertex) : createDenyingMessage(vertex);
      sendMessage(new LongWritable(msg.getSenderVertex()),reply);
      ++i;
    }
    vertex.voteToHalt();
  }
}
break;
case 2:
if (isLeft(vertex)) {
if (isNotMatchedYet(vertex)) {
for (Message msg : messages) {
  if (msg.isGranting()) {
    sendMessage(new LongWritable(msg.getSenderVertex()),createGrantingMessage(vertex));
    vertex.getValue().setMatchedVertex(msg.getSenderVertex());
    break;
  }
}
}
}
break;
case 3:
if (isRight(vertex)) {
if (isNotMatchedYet(vertex)) {
for (Message msg : messages) {
vertex.getValue().setMatchedVertex(msg.getSenderVertex());
break;
}
vertex.voteToHalt();
}
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + phase);
}
}",0.6353039134054954
24466,"/** 
 * Converts the message integrity violation wrapper to JSON.
 * @param msgIntegrityViolationWrapper {@link MsgIntegrityViolationWrapper}object.
 * @return message integrity violation data stored as json.
 */
public static JSONObject msgIntegrityToJson(MsgIntegrityViolationWrapper msgIntegrityViolationWrapper) throws JSONException {
  JSONObject scenarioObj=new JSONObject();
  ArrayList<JSONObject> violationsList=new ArrayList<JSONObject>();
  scenarioObj.put(""String_Node_Str"",msgIntegrityViolationWrapper.getSuperstepNo());
  for (  Object msgWrapper : msgIntegrityViolationWrapper.getExtendedOutgoingMessageWrappers()) {
    ExtendedOutgoingMessageWrapper extendedOutgoingMessageWrapper=(ExtendedOutgoingMessageWrapper)msgWrapper;
    JSONObject violationObj=new JSONObject();
    violationObj.put(""String_Node_Str"",extendedOutgoingMessageWrapper.srcId);
    violationObj.put(""String_Node_Str"",extendedOutgoingMessageWrapper.destinationId);
    violationObj.put(""String_Node_Str"",extendedOutgoingMessageWrapper.message);
    violationsList.add(violationObj);
  }
  scenarioObj.put(""String_Node_Str"",violationsList);
  return scenarioObj;
}","/** 
 * Converts the message integrity violation wrapper to JSON.
 * @param msgIntegrityViolationWrapper {@link MsgIntegrityViolationWrapper}object.
 * @return message integrity violation data stored as json.
 */
public static JSONObject msgIntegrityToJson(MsgIntegrityViolationWrapper msgIntegrityViolationWrapper) throws JSONException {
  JSONObject scenarioObj=new JSONObject();
  ArrayList<JSONObject> violationsList=new ArrayList<JSONObject>();
  scenarioObj.put(""String_Node_Str"",msgIntegrityViolationWrapper.getSuperstepNo());
  for (  Object msgWrapper : msgIntegrityViolationWrapper.getExtendedOutgoingMessageWrappers()) {
    ExtendedOutgoingMessageWrapper extendedOutgoingMessageWrapper=(ExtendedOutgoingMessageWrapper)msgWrapper;
    JSONObject violationObj=new JSONObject();
    violationObj.put(""String_Node_Str"",extendedOutgoingMessageWrapper.getSrcId());
    violationObj.put(""String_Node_Str"",extendedOutgoingMessageWrapper.getDestinationId());
    violationObj.put(""String_Node_Str"",extendedOutgoingMessageWrapper.getMessage());
    violationsList.add(violationObj);
  }
  scenarioObj.put(""String_Node_Str"",violationsList);
  return scenarioObj;
}",0.9857451403887688
24467,"/** 
 * Converts a Giraph Scenario (giraphScenarioWrapper object) to JSON (JSONObject)
 * @param giraphScenarioWrapper Giraph Scenario object.
 * @return scenario data stored as json.
 */
public static JSONObject scenarioToJSON(GiraphVertexScenarioWrapper giraphScenarioWrapper) throws JSONException {
  VertexContextWrapper contextWrapper=giraphScenarioWrapper.getContextWrapper();
  JSONObject scenarioObj=new JSONObject();
  scenarioObj.put(""String_Node_Str"",contextWrapper.getVertexIdWrapper());
  scenarioObj.put(""String_Node_Str"",contextWrapper.getVertexValueAfterWrapper());
  JSONObject outgoingMessagesObj=new JSONObject();
  JSONArray neighborsList=new JSONArray();
  for (  Object outgoingMessage : contextWrapper.getOutgoingMessageWrappers()) {
    OutgoingMessageWrapper outgoingMessageWrapper=(OutgoingMessageWrapper)outgoingMessage;
    outgoingMessagesObj.put(outgoingMessageWrapper.destinationId.toString(),outgoingMessageWrapper.message.toString());
  }
  ArrayList<String> incomingMessagesList=new ArrayList<String>();
  for (  Object incomingMessage : contextWrapper.getIncomingMessageWrappers()) {
    incomingMessagesList.add(incomingMessage.toString());
  }
  for (  Object neighbor : contextWrapper.getNeighborWrappers()) {
    JSONObject neighborObject=new JSONObject();
    NeighborWrapper neighborWrapper=(NeighborWrapper)neighbor;
    neighborObject.put(""String_Node_Str"",neighborWrapper.getNbrId());
    neighborObject.put(""String_Node_Str"",neighborWrapper.getEdgeValue());
    neighborsList.put(neighborObject);
  }
  scenarioObj.put(""String_Node_Str"",outgoingMessagesObj);
  scenarioObj.put(""String_Node_Str"",incomingMessagesList);
  scenarioObj.put(""String_Node_Str"",neighborsList);
  if (giraphScenarioWrapper.hasExceptionWrapper()) {
    JSONObject exceptionObj=new JSONObject();
    ExceptionWrapper exceptionWrapper=giraphScenarioWrapper.getExceptionWrapper();
    exceptionObj.put(""String_Node_Str"",exceptionWrapper.getErrorMessage());
    exceptionObj.put(""String_Node_Str"",exceptionWrapper.getStackTrace());
    scenarioObj.put(""String_Node_Str"",exceptionObj);
  }
  JSONObject aggregateObj=new JSONObject();
  for (  Object aggregatedValue : contextWrapper.getCommonVertexMasterContextWrapper().getPreviousAggregatedValues()) {
    AggregatedValueWrapper aggregatedValueWrapper=(AggregatedValueWrapper)aggregatedValue;
    aggregateObj.put(aggregatedValueWrapper.getKey(),aggregatedValueWrapper.getValue());
  }
  scenarioObj.put(""String_Node_Str"",aggregateObj);
  return scenarioObj;
}","/** 
 * Converts a Giraph Scenario (giraphScenarioWrapper object) to JSON (JSONObject)
 * @param giraphScenarioWrapper Giraph Scenario object.
 * @return scenario data stored as json.
 */
public static JSONObject scenarioToJSON(GiraphVertexScenarioWrapper giraphScenarioWrapper) throws JSONException {
  VertexContextWrapper contextWrapper=giraphScenarioWrapper.getContextWrapper();
  JSONObject scenarioObj=new JSONObject();
  scenarioObj.put(""String_Node_Str"",contextWrapper.getVertexIdWrapper());
  scenarioObj.put(""String_Node_Str"",contextWrapper.getVertexValueAfterWrapper());
  JSONObject outgoingMessagesObj=new JSONObject();
  JSONArray neighborsList=new JSONArray();
  for (  Object outgoingMessage : contextWrapper.getOutgoingMessageWrappers()) {
    OutgoingMessageWrapper outgoingMessageWrapper=(OutgoingMessageWrapper)outgoingMessage;
    outgoingMessagesObj.put(outgoingMessageWrapper.getDestinationId().toString(),outgoingMessageWrapper.getMessage().toString());
  }
  ArrayList<String> incomingMessagesList=new ArrayList<String>();
  for (  Object incomingMessage : contextWrapper.getIncomingMessageWrappers()) {
    incomingMessagesList.add(incomingMessage.toString());
  }
  for (  Object neighbor : contextWrapper.getNeighborWrappers()) {
    JSONObject neighborObject=new JSONObject();
    NeighborWrapper neighborWrapper=(NeighborWrapper)neighbor;
    neighborObject.put(""String_Node_Str"",neighborWrapper.getNbrId());
    neighborObject.put(""String_Node_Str"",neighborWrapper.getEdgeValue());
    neighborsList.put(neighborObject);
  }
  scenarioObj.put(""String_Node_Str"",outgoingMessagesObj);
  scenarioObj.put(""String_Node_Str"",incomingMessagesList);
  scenarioObj.put(""String_Node_Str"",neighborsList);
  if (giraphScenarioWrapper.hasExceptionWrapper()) {
    JSONObject exceptionObj=new JSONObject();
    ExceptionWrapper exceptionWrapper=giraphScenarioWrapper.getExceptionWrapper();
    exceptionObj.put(""String_Node_Str"",exceptionWrapper.getErrorMessage());
    exceptionObj.put(""String_Node_Str"",exceptionWrapper.getStackTrace());
    scenarioObj.put(""String_Node_Str"",exceptionObj);
  }
  JSONObject aggregateObj=new JSONObject();
  for (  Object aggregatedValue : contextWrapper.getCommonVertexMasterContextWrapper().getPreviousAggregatedValues()) {
    AggregatedValueWrapper aggregatedValueWrapper=(AggregatedValueWrapper)aggregatedValue;
    aggregateObj.put(aggregatedValueWrapper.getKey(),aggregatedValueWrapper.getValue());
  }
  scenarioObj.put(""String_Node_Str"",aggregateObj);
  return scenarioObj;
}",0.9948636902410116
24468,"public boolean hasExceptionWrapper(){
  return exceptionWrapper != null;
}","/** 
 * Checks if this has an exception wrapper.
 * @return True if this has an exception wrapper.
 */
public boolean hasExceptionWrapper(){
  return exceptionWrapper != null;
}",0.5896414342629482
24469,"public GiraphMasterScenarioWrapper(String masterClassUnderTest){
  this.masterClassUnderTest=masterClassUnderTest;
  this.commonVertexMasterContextWrapper=new CommonVertexMasterContextWrapper();
  this.exceptionWrapper=null;
}","/** 
 * Constructor with a MasterCompute class name.
 * @param masterClassUnderTest The MasterCompute class name.
 */
public GiraphMasterScenarioWrapper(String masterClassUnderTest){
  this.masterClassUnderTest=masterClassUnderTest;
  this.commonVertexMasterContextWrapper=new CommonVertexMasterContextWrapper();
  this.exceptionWrapper=null;
}",0.7929824561403509
24470,"/** 
 * Returns the HDFS FileSystem reference. Note: We assume that the classpath contains the Hadoop's conf directory or the core-site.xml and hdfs-site.xml configuration directories.
 * @return a {@link FileSystem} object to be used to read from HDFS.
 */
public static FileSystem getFileSystem() throws IOException {
  Configuration configuration=new Configuration();
  return FileSystem.get(configuration);
}","/** 
 * Returns the HDFS FileSystem reference. Note: We assume that the classpath contains the Hadoop's conf directory or the core-site.xml and hdfs-site.xml configuration directories.
 * @return a {@link FileSystem} object to be used to read from HDFS.
 */
public static FileSystem getFileSystem() throws IOException {
  if (FILE_SYSTEM_CACHED == null) {
    Configuration configuration=new Configuration();
    FILE_SYSTEM_CACHED=FileSystem.get(configuration);
  }
  return FILE_SYSTEM_CACHED;
}",0.8910891089108911
24471,"/** 
 * @param jobId id of the job, whose jar path will be returned.
 * @return a url wrapped inside an array for convenience.
 */
public static URL[] getCachedJobJarPath(String jobId){
  Path jarSignaturePath=new Path(DebuggerUtils.getTraceFileRoot(jobId) + ""String_Node_Str"" + ""String_Node_Str"");
  try {
    FileSystem fs=getFileSystem();
    List<String> lines=IOUtils.readLines(fs.open(jarSignaturePath));
    if (lines.size() > 0) {
      String jarSignature=lines.get(0);
      File localFile=new File(DebuggerUtils.JARCACHE_LOCAL + ""String_Node_Str"" + jarSignature+ ""String_Node_Str"");
      if (!localFile.exists()) {
        Path hdfsPath=new Path(fs.getUri().resolve(DebuggerUtils.JARCACHE_HDFS + ""String_Node_Str"" + jarSignature+ ""String_Node_Str""));
        Logger.getLogger(ServerUtils.class).info(""String_Node_Str"" + hdfsPath + ""String_Node_Str""+ localFile);
        localFile.getParentFile().mkdirs();
        fs.copyToLocalFile(hdfsPath,new Path(localFile.toURI()));
      }
      return new URL[]{localFile.toURI().toURL()};
    }
  }
 catch (  IOException e) {
    LOG.warn(""String_Node_Str"" + e.toString());
  }
  return new URL[0];
}","/** 
 * @param jobId id of the job, whose jar path will be returned.
 * @return a url wrapped inside an array for convenience.
 */
public static URL[] getCachedJobJarPath(String jobId){
  Path jarSignaturePath=new Path(DebuggerUtils.getTraceFileRoot(jobId) + ""String_Node_Str"" + ""String_Node_Str"");
  try {
    FileSystem fs=getFileSystem();
    try (FSDataInputStream jarSignatureInput=fs.open(jarSignaturePath)){
      List<String> lines=IOUtils.readLines(jarSignatureInput);
      if (lines.size() > 0) {
        String jarSignature=lines.get(0);
        File localFile=new File(DebuggerUtils.JARCACHE_LOCAL + ""String_Node_Str"" + jarSignature+ ""String_Node_Str"");
        if (!localFile.exists()) {
          Path hdfsPath=new Path(fs.getUri().resolve(DebuggerUtils.JARCACHE_HDFS + ""String_Node_Str"" + jarSignature+ ""String_Node_Str""));
          Logger.getLogger(ServerUtils.class).info(""String_Node_Str"" + hdfsPath + ""String_Node_Str""+ localFile);
          localFile.getParentFile().mkdirs();
          fs.copyToLocalFile(hdfsPath,new Path(localFile.toURI()));
        }
        return new URL[]{localFile.toURI().toURL()};
      }
    }
   }
 catch (  IOException e) {
    LOG.warn(""String_Node_Str"" + e.toString());
  }
  return new URL[0];
}",0.8951747088186356
24472,"/** 
 * Loads a protocol buffer stored in a file into this wrapper object.
 * @param fileName the full path of the file where the protocol buffer isstored.
 */
public void load(String fileName) throws ClassNotFoundException, IOException, InstantiationException, IllegalAccessException {
  loadFromProto(parseProtoFromInputStream(new FileInputStream(fileName)));
}","/** 
 * Loads a protocol buffer stored in a file into this wrapper object.
 * @param fileName the full path of the file where the protocol buffer isstored.
 */
public void load(String fileName) throws ClassNotFoundException, IOException, InstantiationException, IllegalAccessException {
  try (FileInputStream inputStream=new FileInputStream(fileName)){
    loadFromProto(parseProtoFromInputStream(inputStream));
  }
 }",0.8439897698209718
24473,"/** 
 * Adds data stored in the given master scenario wrapper to the context.
 * @param commonVertexMasterContextWrapper {@link CommonVertexMasterContextWrapper} object.
 */
public void addCommonMasterVertexContext(CommonVertexMasterContextWrapper commonVertexMasterContextWrapper){
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getSuperstepNoWrapper());
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getTotalNumVerticesWrapper());
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getTotalNumEdgesWrapper());
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getPreviousAggregatedValues());
  List<Config> configs=new ArrayList<>();
  if (commonVertexMasterContextWrapper.getConfig() != null) {
    for (    Map.Entry<String,String> entry : commonVertexMasterContextWrapper.getConfig()) {
      configs.add(new Config(entry.getKey(),entry.getValue()));
    }
  }
  context.put(""String_Node_Str"",configs);
}","/** 
 * Adds data stored in the given master scenario wrapper to the context.
 * @param commonVertexMasterContextWrapper {@link CommonVertexMasterContextWrapper} object.
 */
public void addCommonMasterVertexContext(CommonVertexMasterContextWrapper commonVertexMasterContextWrapper){
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getSuperstepNoWrapper());
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getTotalNumVerticesWrapper());
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getTotalNumEdgesWrapper());
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getPreviousAggregatedValues());
  List<Config> configs=new ArrayList<>();
  if (commonVertexMasterContextWrapper.getConfig() != null) {
    for (    Map.Entry<String,String> entry : (Iterable<Map.Entry<String,String>>)commonVertexMasterContextWrapper.getConfig()) {
      configs.add(new Config(entry.getKey(),entry.getValue()));
    }
  }
  context.put(""String_Node_Str"",configs);
}",0.9818731117824774
24474,"public void addCommonMasterVertexContext(CommonVertexMasterContextWrapper commonVertexMasterContextWrapper){
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getSuperstepNoWrapper());
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getTotalNumVerticesWrapper());
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getTotalNumEdgesWrapper());
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getPreviousAggregatedValues());
  List<Config> configs=new ArrayList<>();
  if (commonVertexMasterContextWrapper.getConfig() != null) {
    for (    Entry<String,String> entry : commonVertexMasterContextWrapper.getConfig()) {
      configs.add(new Config(entry.getKey(),entry.getValue()));
    }
  }
  context.put(""String_Node_Str"",configs);
}","public void addCommonMasterVertexContext(CommonVertexMasterContextWrapper commonVertexMasterContextWrapper){
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getSuperstepNoWrapper());
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getTotalNumVerticesWrapper());
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getTotalNumEdgesWrapper());
  context.put(""String_Node_Str"",commonVertexMasterContextWrapper.getPreviousAggregatedValues());
  List<Config> configs=new ArrayList<>();
  if (commonVertexMasterContextWrapper.getConfig() != null) {
    for (    Map.Entry<String,String> entry : commonVertexMasterContextWrapper.getConfig()) {
      configs.add(new Config(entry.getKey(),entry.getValue()));
    }
  }
  context.put(""String_Node_Str"",configs);
}",0.9974968710888612
24475,"@SuppressWarnings(""String_Node_Str"") public final void readConfig(GiraphConfiguration config){
  this.debugNeighborsOfVerticesToDebug=config.getBoolean(DEBUG_NEIGHBORS_FLAG,false);
  String superstepsToDebugStr=config.get(SUPERSTEPS_TO_DEBUG_FLAG,null);
  if (superstepsToDebugStr == null) {
    superstepsToDebugSet=null;
  }
 else {
    String[] superstepsToDebugArray=superstepsToDebugStr.split(SUPERSTEP_DELIMITER);
    superstepsToDebugSet=new HashSet<>();
    for (    String superstepStr : superstepsToDebugArray) {
      superstepsToDebugSet.add(Long.valueOf(superstepStr));
    }
  }
  debugAllVertices=config.getBoolean(DEBUG_ALL_VERTICES_FLAG,false);
  if (!debugAllVertices) {
    String verticesToDebugStr=config.get(VERTICES_TO_DEBUG_FLAG,null);
    Class<? extends Computation> userComputationClass=config.getComputationClass();
    Class<?>[] typeArguments=ReflectionUtils.getTypeArguments(Computation.class,userComputationClass);
    Class<?> idType=typeArguments[0];
    if (verticesToDebugStr != null) {
      String[] verticesToDebugArray=verticesToDebugStr.split(VERTEX_ID_DELIMITER);
      this.verticesToDebugSet=new HashSet<>();
      for (      String idString : verticesToDebugArray) {
        if (LongWritable.class.isAssignableFrom(idType)) {
          verticesToDebugSet.add((I)new LongWritable(Long.valueOf(idString)));
        }
 else         if (IntWritable.class.isAssignableFrom(idType)) {
          verticesToDebugSet.add((I)new IntWritable(Integer.valueOf(idString)));
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
  }
  LOG.debug(""String_Node_Str"" + this);
}","/** 
 * Configures this class through a   {@link GiraphConfiguration}, which may contain some flags passed in by the user.
 * @param config a {@link GiraphConfiguration} object.
 */
@SuppressWarnings(""String_Node_Str"") public final void readConfig(GiraphConfiguration config){
  this.debugNeighborsOfVerticesToDebug=config.getBoolean(DEBUG_NEIGHBORS_FLAG,false);
  String superstepsToDebugStr=config.get(SUPERSTEPS_TO_DEBUG_FLAG,null);
  if (superstepsToDebugStr == null) {
    superstepsToDebugSet=null;
  }
 else {
    String[] superstepsToDebugArray=superstepsToDebugStr.split(SUPERSTEP_DELIMITER);
    superstepsToDebugSet=new HashSet<>();
    for (    String superstepStr : superstepsToDebugArray) {
      superstepsToDebugSet.add(Long.valueOf(superstepStr));
    }
  }
  debugAllVertices=config.getBoolean(DEBUG_ALL_VERTICES_FLAG,false);
  if (!debugAllVertices) {
    String verticesToDebugStr=config.get(VERTICES_TO_DEBUG_FLAG,null);
    Class<? extends Computation> userComputationClass=config.getComputationClass();
    Class<?>[] typeArguments=ReflectionUtils.getTypeArguments(Computation.class,userComputationClass);
    Class<?> idType=typeArguments[0];
    if (verticesToDebugStr != null) {
      String[] verticesToDebugArray=verticesToDebugStr.split(VERTEX_ID_DELIMITER);
      this.verticesToDebugSet=new HashSet<>();
      for (      String idString : verticesToDebugArray) {
        if (LongWritable.class.isAssignableFrom(idType)) {
          verticesToDebugSet.add((I)new LongWritable(Long.valueOf(idString)));
        }
 else         if (IntWritable.class.isAssignableFrom(idType)) {
          verticesToDebugSet.add((I)new IntWritable(Integer.valueOf(idString)));
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
  }
  LOG.debug(""String_Node_Str"" + this);
}",0.949076664801343
24476,"public boolean shouldDebugSuperstep(long superstepNo){
  return superstepsToDebugSet == null || superstepsToDebugSet.contains(superstepNo);
}","/** 
 * Whether vertices should be debugged in the specified superstep.
 * @param superstepNo superstep number.
 * @return whether the superstep should be debugged.
 */
public boolean shouldDebugSuperstep(long superstepNo){
  return superstepsToDebugSet == null || superstepsToDebugSet.contains(superstepNo);
}",0.6252771618625277
24477,"private boolean isVertexANeighborOfAVertexToDebug(Vertex<I,V,E> vertex){
  for (  Edge<I,E> edge : vertex.getEdges()) {
    if (verticesToDebugSet.contains(edge.getTargetVertexId())) {
      return true;
    }
  }
  return false;
}","/** 
 * Whether the given vertex is a neighbor of a vertex that has been configured to be debugged. If so then the given vertex will also be debugged.
 * @param vertex a vertex.
 * @return whether the vertex is a neighbor of vertex that should bedebugged.
 */
private boolean isVertexANeighborOfAVertexToDebug(Vertex<I,V,E> vertex){
  for (  Edge<I,E> edge : vertex.getEdges()) {
    if (verticesToDebugSet.contains(edge.getTargetVertexId())) {
      return true;
    }
  }
  return false;
}",0.6398891966759003
24478,"public boolean isVertexValueCorrect(I vertexId,V value){
  return true;
}","/** 
 * @param vertexId id of the vertex.
 * @param value value of the vertex.
 * @return whether this vertex's value is correct, i.e, does not violate aconstraint.
 */
public boolean isVertexValueCorrect(I vertexId,V value){
  return true;
}",0.4634920634920635
24479,"public boolean shouldCheckMessageIntegrity(){
  return false;
}","/** 
 * @return whether message integrity constraints should be checked, i.e.,whether Graft should call the  {@link #isMessageCorrect(WritableComparable,WritableComparable,Writable)} method on this message.
 */
public boolean shouldCheckMessageIntegrity(){
  return false;
}",0.373887240356083
24480,"public boolean shouldCheckVertexValueIntegrity(){
  return false;
}","/** 
 * @return whether a vertex value integrity constraints should be checked,i.e., whether Graft should call the  {@link #isVertexValueCorrect(WritableComparable,Writable) method on this vertex.}
 */
public boolean shouldCheckVertexValueIntegrity(){
  return false;
}",0.3988095238095238
24481,"public boolean shouldDebugVertex(Vertex<I,V,E> vertex){
  if (debugAllVertices) {
    return true;
  }
  if (verticesToDebugSet == null) {
    return false;
  }
 else {
    return verticesToDebugSet.contains(vertex.getId()) || debugNeighborsOfVerticesToDebug && isVertexANeighborOfAVertexToDebug(vertex);
  }
}","/** 
 * Whether the specified vertex should be debugged.
 * @param vertex a vertex.
 * @return whether the vertex should be debugged.
 */
public boolean shouldDebugVertex(Vertex<I,V,E> vertex){
  if (debugAllVertices) {
    return true;
  }
  if (verticesToDebugSet == null) {
    return false;
  }
 else {
    return verticesToDebugSet.contains(vertex.getId()) || debugNeighborsOfVerticesToDebug && isVertexANeighborOfAVertexToDebug(vertex);
  }
}",0.8179419525065963
24482,"public boolean isMessageCorrect(I srcId,I dstId,M1 message){
  return true;
}","/** 
 * @param srcId source id of the message.
 * @param dstId destination id of the message.
 * @param message message sent between srcId and dstId.
 * @return whether this message is correct, i.e, does not violate aconstraint.
 */
public boolean isMessageCorrect(I srcId,I dstId,M1 message){
  return true;
}",0.3979328165374677
24483,"public DebugConfig(){
  verticesToDebugSet=null;
  debugAllVertices=false;
  debugNeighborsOfVerticesToDebug=false;
  superstepsToDebugSet=null;
}","/** 
 * Default public constructor. Configures not to debug any vertex in any superstep. But below {#link   {@link #shouldCatchExceptions()} returnstrue by default, so configures Graft to only catch exceptions.
 */
public DebugConfig(){
  verticesToDebugSet=null;
  debugAllVertices=false;
  debugNeighborsOfVerticesToDebug=false;
  superstepsToDebugSet=null;
}",0.5759368836291914
24484,"public boolean shouldCatchExceptions(){
  return true;
}","/** 
 * @return whether exceptions should be caught.
 */
public boolean shouldCatchExceptions(){
  return true;
}",0.6627218934911243
24485,"/** 
 * Propagates the smallest vertex id to all neighbors. Will always choose to halt and only reactivate if a smaller id has been sent to it.
 * @param vertex Vertex
 * @param messages Iterator of messages from the previous superstep.
 * @throws IOException
 */
@Override public void compute(Vertex<IntWritable,IntWritable,NullWritable> vertex,Iterable<IntWritable> messages) throws IOException {
  int currentComponent=vertex.getValue().get();
  if (getSuperstep() == 0) {
    vertex.setValue(new IntWritable(currentComponent));
    for (    Edge<IntWritable,NullWritable> edge : vertex.getEdges()) {
      sendMessage(edge.getTargetVertexId(),vertex.getValue());
    }
    vertex.voteToHalt();
    return;
  }
  boolean changed=false;
  for (  IntWritable message : messages) {
    int candidateComponent=message.get();
    if (candidateComponent > currentComponent) {
      System.out.println(""String_Node_Str"" + getSuperstep() + ""String_Node_Str""+ vertex.getId()+ ""String_Node_Str""+ candidateComponent);
      currentComponent=candidateComponent;
      changed=true;
    }
  }
  if (changed) {
    vertex.setValue(new IntWritable(currentComponent));
    for (    Edge<IntWritable,NullWritable> edge : vertex.getEdges()) {
      sendMessage(edge.getTargetVertexId(),vertex.getValue());
    }
  }
  vertex.voteToHalt();
}","/** 
 * Propagates the smallest vertex id to all neighbors. Will always choose to halt and only reactivate if a smaller id has been sent to it.
 * @param vertex Vertex
 * @param messages Iterator of messages from the previous superstep.
 * @throws IOException
 */
@Override public void compute(Vertex<IntWritable,IntWritable,NullWritable> vertex,Iterable<IntWritable> messages) throws IOException {
  int currentComponent=vertex.getValue().get();
  if (getSuperstep() == 0) {
    vertex.setValue(new IntWritable(currentComponent));
    for (    Edge<IntWritable,NullWritable> edge : vertex.getEdges()) {
      sendMessage(edge.getTargetVertexId(),vertex.getValue());
    }
    vertex.voteToHalt();
    return;
  }
  boolean changed=false;
  for (  IntWritable message : messages) {
    int candidateComponent=message.get();
    if (candidateComponent > currentComponent) {
      System.out.print(""String_Node_Str"" + getSuperstep() + ""String_Node_Str""+ vertex.getId()+ ""String_Node_Str""+ candidateComponent+ ""String_Node_Str"");
      currentComponent=candidateComponent;
      changed=true;
    }
  }
  if (changed) {
    vertex.setValue(new IntWritable(currentComponent));
    for (    Edge<IntWritable,NullWritable> edge : vertex.getEdges()) {
      sendMessage(edge.getTargetVertexId(),vertex.getValue());
    }
  }
  vertex.voteToHalt();
}",0.9921259842519684
24486,"@Override public void compute(Vertex<LongWritable,DoubleWritable,FloatWritable> vertex,Iterable<DoubleWritable> messages) throws IOException {
  LongWritable aggregatedValue=getAggregatedValue(SimpleShortestPathsMaster.NV_DISTANCE_LESS_THAN_THREE_AGGREGATOR);
  if (aggregatedValue != null) {
    System.out.println(""String_Node_Str"" + aggregatedValue.get());
  }
  if (getSuperstep() == 0) {
    vertex.setValue(new DoubleWritable(isSource(vertex) ? 0d : Double.MAX_VALUE));
  }
  double previousValue=vertex.getValue().get();
  double minDist=previousValue;
  for (  DoubleWritable message : messages) {
    minDist=Math.min(minDist,message.get());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + vertex.getId() + ""String_Node_Str""+ minDist+ ""String_Node_Str""+ vertex.getValue());
  }
  if (minDist < vertex.getValue().get() || getSuperstep() == 0 && minDist == 0) {
    vertex.setValue(new DoubleWritable(minDist));
    for (    Edge<LongWritable,FloatWritable> edge : vertex.getEdges()) {
      double distance=minDist + edge.getValue().get();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + vertex.getId() + ""String_Node_Str""+ edge.getTargetVertexId()+ ""String_Node_Str""+ distance);
      }
      sendMessage(edge.getTargetVertexId(),new DoubleWritable(minDist));
    }
  }
  if (previousValue > 3 && minDist <= 3) {
    aggregate(SimpleShortestPathsMaster.NV_DISTANCE_LESS_THAN_THREE_AGGREGATOR,new LongWritable(1));
  }
  vertex.voteToHalt();
}","@Override public void compute(Vertex<LongWritable,DoubleWritable,FloatWritable> vertex,Iterable<DoubleWritable> messages) throws IOException {
  LongWritable aggregatedValue=getAggregatedValue(SimpleShortestPathsMaster.NV_DISTANCE_LESS_THAN_THREE_AGGREGATOR);
  if (aggregatedValue != null) {
    System.out.print(""String_Node_Str"" + aggregatedValue.get() + ""String_Node_Str"");
  }
  if (getSuperstep() == 0) {
    vertex.setValue(new DoubleWritable(isSource(vertex) ? 0d : Double.MAX_VALUE));
  }
  double previousValue=vertex.getValue().get();
  double minDist=previousValue;
  for (  DoubleWritable message : messages) {
    minDist=Math.min(minDist,message.get());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + vertex.getId() + ""String_Node_Str""+ minDist+ ""String_Node_Str""+ vertex.getValue());
  }
  if (minDist < vertex.getValue().get() || getSuperstep() == 0 && minDist == 0) {
    vertex.setValue(new DoubleWritable(minDist));
    for (    Edge<LongWritable,FloatWritable> edge : vertex.getEdges()) {
      double distance=minDist + edge.getValue().get();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + vertex.getId() + ""String_Node_Str""+ edge.getTargetVertexId()+ ""String_Node_Str""+ distance);
      }
      sendMessage(edge.getTargetVertexId(),new DoubleWritable(minDist));
    }
  }
  if (previousValue > 3 && minDist <= 3) {
    aggregate(SimpleShortestPathsMaster.NV_DISTANCE_LESS_THAN_THREE_AGGREGATOR,new LongWritable(1));
  }
  vertex.voteToHalt();
}",0.992686170212766
24487,"private void interceptMessageAndCheckIntegrityIfNecessary(I id,M2 message){
  if (debugConfig.shouldCheckMessageIntegrity() && !debugConfig.isMessageCorrect(id,vertexId,message) && numMessageViolationsLogged < NUM_VIOLATIONS_TO_LOG) {
    msgIntegrityViolationWrapper.addMsgWrapper(vertexId,id,message);
    hasViolatedMsgValueConstraint=true;
    numMessageViolationsLogged++;
  }
}","private void interceptMessageAndCheckIntegrityIfNecessary(I id,M2 message){
  if (debugConfig.shouldCheckMessageIntegrity() && !debugConfig.isMessageCorrect(vertexId,id,message) && numMessageViolationsLogged < NUM_VIOLATIONS_TO_LOG) {
    msgIntegrityViolationWrapper.addMsgWrapper(vertexId,id,message);
    hasViolatedMsgValueConstraint=true;
    numMessageViolationsLogged++;
  }
}",0.9921671018276762
24488,"final protected void interceptPostSuperstepEnd(){
  if (debugConfig.shouldCheckMessageIntegrity() && msgIntegrityViolationWrapper.numMsgWrappers() > 0) {
    commonVertexMasterInterceptionUtil.saveScenarioWrapper(msgIntegrityViolationWrapper,DebuggerUtils.getMessageIntegrityAllTraceFullFileName(getSuperstep(),commonVertexMasterInterceptionUtil.getJobId(),getContext().getTaskAttemptID().getTaskID().getId()));
  }
}","final protected void interceptPostSuperstepEnd(){
  if (debugConfig.shouldCheckMessageIntegrity() && msgIntegrityViolationWrapper.numMsgWrappers() > 0) {
    commonVertexMasterInterceptionUtil.saveScenarioWrapper(msgIntegrityViolationWrapper,DebuggerUtils.getMessageIntegrityAllTraceFullFileName(getSuperstep(),commonVertexMasterInterceptionUtil.getJobId(),UUID.randomUUID().toString()));
  }
}",0.9247842170160296
24489,"/** 
 * A convenience method around  {@link #getFullTraceFileName(DebugTrace,String,Long,String,Integer)}.
 */
public static String getMessageIntegrityAllTraceFullFileName(long superstepNo,String jobId,int taskId){
  return getFullTraceFileName(DebugTrace.INTEGRITY_MESSAGE_ALL,jobId,superstepNo,null,taskId);
}","/** 
 * A convenience method around  {@link #getFullTraceFileName(DebugTrace,String,Long,String,Integer)}.
 */
public static String getMessageIntegrityAllTraceFullFileName(long superstepNo,String jobId,String taskId){
  return getFullTraceFileName(DebugTrace.INTEGRITY_MESSAGE_ALL,jobId,superstepNo,null,taskId);
}",0.9856
24490,"private static String getTraceFileName(DebugTrace debugTrace,Long superstepNo,String vertexId,Integer taskId){
  String format=getTraceFileFormat(debugTrace);
switch (debugTrace) {
case VERTEX_REGULAR:
    return String.format(format,superstepNo,vertexId);
case VERTEX_EXCEPTION:
  return String.format(format,superstepNo,vertexId);
case INTEGRITY_MESSAGE_ALL:
return String.format(format,taskId,superstepNo);
case INTEGRITY_MESSAGE_SINGLE_VERTEX:
return String.format(format,superstepNo,vertexId);
case INTEGRITY_VERTEX:
return String.format(format,superstepNo,vertexId);
case MASTER_REGULAR:
return String.format(format,superstepNo);
case MASTER_EXCEPTION:
return String.format(format,superstepNo);
default :
return null;
}
}","private static String getTraceFileName(DebugTrace debugTrace,Long superstepNo,String vertexId,String taskId){
  String format=getTraceFileFormat(debugTrace);
switch (debugTrace) {
case VERTEX_REGULAR:
    return String.format(format,superstepNo,vertexId);
case VERTEX_EXCEPTION:
  return String.format(format,superstepNo,vertexId);
case INTEGRITY_MESSAGE_ALL:
return String.format(format,taskId,superstepNo);
case INTEGRITY_MESSAGE_SINGLE_VERTEX:
return String.format(format,superstepNo,vertexId);
case INTEGRITY_VERTEX:
return String.format(format,superstepNo,vertexId);
case MASTER_REGULAR:
return String.format(format,superstepNo);
case MASTER_EXCEPTION:
return String.format(format,superstepNo);
default :
return null;
}
}",0.9910529938059188
24491,"public static GiraphMasterScenarioWrapper readMasterScenarioFromTrace(String jobId,long superstepNo,DebugTrace debugTrace) throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
  if (!EnumSet.of(DebugTrace.MASTER_ALL,DebugTrace.MASTER_EXCEPTION,DebugTrace.MASTER_REGULAR).contains(debugTrace)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FileSystem fs=ServerUtils.getFileSystem();
  GiraphMasterScenarioWrapper giraphScenarioWrapper=new GiraphMasterScenarioWrapper();
  if (debugTrace == DebugTrace.MASTER_REGULAR || debugTrace == DebugTrace.MASTER_ALL) {
    String traceFilePath=ServerUtils.getMasterTraceFilePath(jobId,superstepNo,DebugTrace.MASTER_REGULAR);
    try {
      giraphScenarioWrapper.loadFromHDFS(fs,traceFilePath);
      return giraphScenarioWrapper;
    }
 catch (    FileNotFoundException e) {
      if (debugTrace == DebugTrace.MASTER_ALL) {
        Debug.println(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        throw e;
      }
    }
  }
  String traceFilePath=ServerUtils.getMasterTraceFilePath(jobId,superstepNo,DebugTrace.MASTER_EXCEPTION);
  giraphScenarioWrapper.loadFromHDFS(fs,traceFilePath);
  return giraphScenarioWrapper;
}","public static GiraphMasterScenarioWrapper readMasterScenarioFromTrace(String jobId,long superstepNo,DebugTrace debugTrace) throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
  if (!EnumSet.of(DebugTrace.MASTER_ALL,DebugTrace.MASTER_EXCEPTION,DebugTrace.MASTER_REGULAR).contains(debugTrace)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FileSystem fs=ServerUtils.getFileSystem();
  GiraphMasterScenarioWrapper giraphScenarioWrapper=new GiraphMasterScenarioWrapper();
  if (debugTrace == DebugTrace.MASTER_REGULAR || debugTrace == DebugTrace.MASTER_ALL) {
    String traceFilePath=ServerUtils.getMasterTraceFilePath(jobId,superstepNo,DebugTrace.MASTER_REGULAR);
    try {
      giraphScenarioWrapper.loadFromHDFS(fs,traceFilePath,getCachedJobJarPath(jobId));
      return giraphScenarioWrapper;
    }
 catch (    FileNotFoundException e) {
      if (debugTrace == DebugTrace.MASTER_ALL) {
        Debug.println(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        throw e;
      }
    }
  }
  String traceFilePath=ServerUtils.getMasterTraceFilePath(jobId,superstepNo,DebugTrace.MASTER_EXCEPTION);
  giraphScenarioWrapper.loadFromHDFS(fs,traceFilePath,getCachedJobJarPath(jobId));
  return giraphScenarioWrapper;
}",0.9785202863961814
24492,"public static String getTraceFileRoot(String jobId,DebugTrace debugTrace){
switch (debugTrace) {
case VERTEX_REGULAR:
case VERTEX_EXCEPTION:
case VERTEX_ALL:
case INTEGRITY_MESSAGE:
case INTEGRITY_VERTEX:
case MASTER_REGULAR:
case MASTER_EXCEPTION:
case MASTER_ALL:
    return String.format(""String_Node_Str"",ServerUtils.TRACE_ROOT,jobId);
default :
  throw new IllegalArgumentException(""String_Node_Str"");
}
}","public static String getTraceFileRoot(String jobId,DebugTrace debugTrace){
switch (debugTrace) {
case VERTEX_REGULAR:
case VERTEX_EXCEPTION:
case VERTEX_ALL:
case INTEGRITY_MESSAGE:
case INTEGRITY_VERTEX:
case MASTER_REGULAR:
case MASTER_EXCEPTION:
case MASTER_ALL:
case JAR_SIGNATURE:
    return String.format(""String_Node_Str"",ServerUtils.TRACE_ROOT,jobId);
default :
  throw new IllegalArgumentException(""String_Node_Str"");
}
}",0.9761904761904762
24493,"public static String getCachedJobJarPath(String jobId){
  return null;
}","public static URL getCachedJobJarPath(String jobId) throws IOException {
  Path jarSignaturePath=new Path(getTraceFileRoot(jobId,DebugTrace.JAR_SIGNATURE) + ""String_Node_Str"" + ""String_Node_Str"");
  FileSystem fs=getFileSystem();
  String jarSignature=IOUtils.readLines(fs.open(jarSignaturePath)).get(0);
  File localFile=new File(JARCACHE_LOCAL + ""String_Node_Str"" + jarSignature+ ""String_Node_Str"");
  if (!localFile.exists()) {
    Path hdfsPath=new Path(fs.getUri().resolve(JARCACHE_HDFS + ""String_Node_Str"" + jarSignature+ ""String_Node_Str""));
    Logger.getLogger(ServerUtils.class).info(""String_Node_Str"" + hdfsPath + ""String_Node_Str""+ localFile);
    localFile.getParentFile().mkdirs();
    fs.copyToLocalFile(hdfsPath,new Path(localFile.toURI()));
  }
  return localFile.toURI().toURL();
}",0.1308840413318025
24494,"public static GiraphVertexScenarioWrapper readScenarioFromTrace(String jobId,long superstepNo,String vertexId,DebugTrace debugTrace) throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
  if (!EnumSet.of(DebugTrace.VERTEX_ALL,DebugTrace.VERTEX_EXCEPTION,DebugTrace.VERTEX_REGULAR).contains(debugTrace)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FileSystem fs=ServerUtils.getFileSystem();
  GiraphVertexScenarioWrapper giraphScenarioWrapper=new GiraphVertexScenarioWrapper();
  if (debugTrace == DebugTrace.VERTEX_REGULAR || debugTrace == DebugTrace.VERTEX_ALL) {
    String traceFilePath=ServerUtils.getVertexTraceFilePath(jobId,superstepNo,vertexId,DebugTrace.VERTEX_REGULAR);
    try {
      giraphScenarioWrapper.loadFromHDFS(fs,traceFilePath);
      return giraphScenarioWrapper;
    }
 catch (    FileNotFoundException e) {
      if (debugTrace == DebugTrace.VERTEX_ALL) {
        Debug.println(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        throw e;
      }
    }
  }
  String traceFilePath=ServerUtils.getVertexTraceFilePath(jobId,superstepNo,vertexId,DebugTrace.VERTEX_EXCEPTION);
  giraphScenarioWrapper.loadFromHDFS(fs,traceFilePath);
  return giraphScenarioWrapper;
}","public static GiraphVertexScenarioWrapper readScenarioFromTrace(String jobId,long superstepNo,String vertexId,DebugTrace debugTrace) throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
  if (!EnumSet.of(DebugTrace.VERTEX_ALL,DebugTrace.VERTEX_EXCEPTION,DebugTrace.VERTEX_REGULAR).contains(debugTrace)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FileSystem fs=ServerUtils.getFileSystem();
  GiraphVertexScenarioWrapper giraphScenarioWrapper=new GiraphVertexScenarioWrapper();
  if (debugTrace == DebugTrace.VERTEX_REGULAR || debugTrace == DebugTrace.VERTEX_ALL) {
    String traceFilePath=ServerUtils.getVertexTraceFilePath(jobId,superstepNo,vertexId,DebugTrace.VERTEX_REGULAR);
    try {
      giraphScenarioWrapper.loadFromHDFS(fs,traceFilePath,getCachedJobJarPath(jobId));
      return giraphScenarioWrapper;
    }
 catch (    FileNotFoundException e) {
      if (debugTrace == DebugTrace.VERTEX_ALL) {
        Debug.println(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        throw e;
      }
    }
  }
  String traceFilePath=ServerUtils.getVertexTraceFilePath(jobId,superstepNo,vertexId,DebugTrace.VERTEX_EXCEPTION);
  giraphScenarioWrapper.loadFromHDFS(fs,traceFilePath,getCachedJobJarPath(jobId));
  return giraphScenarioWrapper;
}",0.978988326848249
24495,"public static VertexValueIntegrityViolationWrapper readVertexIntegrityViolationFromTrace(String jobId,String taskId,long superstepNo) throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
  FileSystem fs=ServerUtils.getFileSystem();
  String traceFilePath=ServerUtils.getIntegrityTraceFilePath(jobId,taskId,superstepNo,DebugTrace.INTEGRITY_VERTEX);
  VertexValueIntegrityViolationWrapper vertexValueIntegrityViolationWrapper=new VertexValueIntegrityViolationWrapper();
  vertexValueIntegrityViolationWrapper.loadFromHDFS(fs,traceFilePath);
  return vertexValueIntegrityViolationWrapper;
}","public static VertexValueIntegrityViolationWrapper readVertexIntegrityViolationFromTrace(String jobId,String taskId,long superstepNo) throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
  FileSystem fs=ServerUtils.getFileSystem();
  String traceFilePath=ServerUtils.getIntegrityTraceFilePath(jobId,taskId,superstepNo,DebugTrace.INTEGRITY_VERTEX);
  VertexValueIntegrityViolationWrapper vertexValueIntegrityViolationWrapper=new VertexValueIntegrityViolationWrapper();
  vertexValueIntegrityViolationWrapper.loadFromHDFS(fs,traceFilePath,getCachedJobJarPath(jobId));
  return vertexValueIntegrityViolationWrapper;
}",0.9789227166276346
24496,"public static MsgIntegrityViolationWrapper readMsgIntegrityViolationFromTrace(String jobId,String taskId,long superstepNo) throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
  FileSystem fs=ServerUtils.getFileSystem();
  String traceFilePath=ServerUtils.getIntegrityTraceFilePath(jobId,taskId,superstepNo,DebugTrace.INTEGRITY_MESSAGE);
  MsgIntegrityViolationWrapper msgIntegrityViolationWrapper=new MsgIntegrityViolationWrapper();
  msgIntegrityViolationWrapper.loadFromHDFS(fs,traceFilePath);
  return msgIntegrityViolationWrapper;
}","public static MsgIntegrityViolationWrapper readMsgIntegrityViolationFromTrace(String jobId,String taskId,long superstepNo) throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
  FileSystem fs=ServerUtils.getFileSystem();
  String traceFilePath=ServerUtils.getIntegrityTraceFilePath(jobId,taskId,superstepNo,DebugTrace.INTEGRITY_MESSAGE);
  MsgIntegrityViolationWrapper msgIntegrityViolationWrapper=new MsgIntegrityViolationWrapper();
  msgIntegrityViolationWrapper.loadFromHDFS(fs,traceFilePath,getCachedJobJarPath(jobId));
  return msgIntegrityViolationWrapper;
}",0.9771380186282812
24497,"public void loadFromHDFS(FileSystem fs,String fileName) throws ClassNotFoundException, IOException, InstantiationException, IllegalAccessException {
  loadFromProto(parseProtoFromInputStream(fs.open(new Path(fileName))));
}","/** 
 * Add given URLs to the CLASSPATH before loading from HDFS. To do so, we hack the system class loader, assuming it is an URLClassLoader. XXX Setting the currentThread's context class loader has no effect on Class#forName().
 * @see http://stackoverflow.com/a/12963811/390044
 * @param fs
 * @param fileName
 * @param classPaths
 * @throws ClassNotFoundException
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws IOException
 */
public void loadFromHDFS(FileSystem fs,String fileName,URL... classPaths) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
  for (  URL url : classPaths)   addPath(url);
  loadFromHDFS(fs,fileName);
}",0.2365591397849462
24498,"final protected void interceptInitializeEnd(){
  commonVertexMasterInterceptionUtil=new CommonVertexMasterInterceptionUtil(getContext().getJobID().toString());
  String debugConfigFileName=DEBUG_CONFIG_CLASS.get(getConf());
  LOG.info(""String_Node_Str"" + debugConfigFileName);
  Class<?> clazz;
  try {
    clazz=Class.forName(debugConfigFileName);
    debugConfig=(DebugConfig<I,V,E,M1,M2>)clazz.newInstance();
    debugConfig.readConfig(getConf());
    LOG.info(""String_Node_Str"" + debugConfigFileName);
    vertexIdClazz=getConf().getVertexIdClass();
    vertexValueClazz=getConf().getVertexValueClass();
    edgeValueClazz=getConf().getEdgeValueClass();
    incomingMessageClazz=getConf().getIncomingMessageValueClass();
    outgoingMessageClazz=getConf().getOutgoingMessageValueClass();
  }
 catch (  InstantiationException|ClassNotFoundException|IllegalAccessException e) {
    LOG.error(""String_Node_Str"" + debugConfigFileName);
    e.printStackTrace();
    throw new RuntimeException(e);
  }
  String jarSignature=getConf().get(JAR_SIGNATURE_KEY);
  if (jarSignature != null) {
    FileSystem fs=CommonVertexMasterInterceptionUtil.getFileSystem();
    Path jarSignaturePath=new Path(commonVertexMasterInterceptionUtil.getTraceDirectory() + ""String_Node_Str"" + ""String_Node_Str"");
    try {
      if (!fs.exists(jarSignaturePath)) {
        OutputStream f=fs.create(jarSignaturePath,true).getWrappedStream();
        IOUtils.write(jarSignature,f);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
  }
}","final protected void interceptInitializeEnd(){
  commonVertexMasterInterceptionUtil=new CommonVertexMasterInterceptionUtil(getContext().getJobID().toString());
  String debugConfigFileName=DEBUG_CONFIG_CLASS.get(getConf());
  LOG.info(""String_Node_Str"" + debugConfigFileName);
  Class<?> clazz;
  try {
    clazz=Class.forName(debugConfigFileName);
    debugConfig=(DebugConfig<I,V,E,M1,M2>)clazz.newInstance();
    debugConfig.readConfig(getConf());
    LOG.info(""String_Node_Str"" + debugConfigFileName);
    vertexIdClazz=getConf().getVertexIdClass();
    vertexValueClazz=getConf().getVertexValueClass();
    edgeValueClazz=getConf().getEdgeValueClass();
    incomingMessageClazz=getConf().getIncomingMessageValueClass();
    outgoingMessageClazz=getConf().getOutgoingMessageValueClass();
  }
 catch (  InstantiationException|ClassNotFoundException|IllegalAccessException e) {
    LOG.error(""String_Node_Str"" + debugConfigFileName);
    e.printStackTrace();
    throw new RuntimeException(e);
  }
  String jarSignature=getConf().get(JAR_SIGNATURE_KEY);
  if (jarSignature != null) {
    FileSystem fs=CommonVertexMasterInterceptionUtil.getFileSystem();
    Path jarSignaturePath=new Path(commonVertexMasterInterceptionUtil.getTraceDirectory() + ""String_Node_Str"" + ""String_Node_Str"");
    try {
      if (!fs.exists(jarSignaturePath)) {
        OutputStream f=fs.create(jarSignaturePath,true).getWrappedStream();
        IOUtils.write(jarSignature,f);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.9880990672241878
24499,"@Override public GeneratedMessage buildProtoObject(){
  Exception.Builder exceptionBuilder=Exception.newBuilder();
  exceptionBuilder.setMessage(errorMessage);
  exceptionBuilder.setStackTrace(stackTrace);
  return exceptionBuilder.build();
}","@Override public GeneratedMessage buildProtoObject(){
  Exception.Builder exceptionBuilder=Exception.newBuilder();
  exceptionBuilder.setMessage(getErrorMessage());
  exceptionBuilder.setStackTrace(getStackTrace());
  return exceptionBuilder.build();
}",0.97165991902834
24500,"public void setErrorMessage(String errorMessage){
  this.errorMessage=errorMessage;
}","public void setErrorMessage(String errorMessage){
  this.errorMessage=""String_Node_Str"" + errorMessage;
}",0.8947368421052632
24501,"public void setStackTrace(String stackTrace){
  this.stackTrace=stackTrace;
}","public void setStackTrace(String stackTrace){
  this.stackTrace=""String_Node_Str"" + stackTrace;
}",0.8850574712643678
24502,"public void processRequest(HttpExchange httpExchange,HashMap<String,String> paramMap){
  String jobId=paramMap.get(ServerUtils.JOB_ID_KEY);
  String superstepId=paramMap.get(ServerUtils.SUPERSTEP_ID_KEY);
  Debug.println(""String_Node_Str"",paramMap.toString());
  try {
    if (jobId == null || superstepId == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    Long superstepNo=Long.parseLong(paramMap.get(ServerUtils.SUPERSTEP_ID_KEY));
    if (superstepNo < -1) {
      this.statusCode=HttpURLConnection.HTTP_BAD_REQUEST;
      this.response=String.format(""String_Node_Str"",ServerUtils.SUPERSTEP_ID_KEY);
      return;
    }
    ArrayList<String> vertexIds=null;
    String rawVertexIds=paramMap.get(ServerUtils.VERTEX_ID_KEY);
    if (rawVertexIds == null) {
      vertexIds=ServerUtils.getVerticesDebugged(jobId,superstepNo);
    }
 else {
      vertexIds=new ArrayList(Arrays.asList(rawVertexIds.split(""String_Node_Str"")));
    }
    if (this.responseMimeType == javax.ws.rs.core.MediaType.APPLICATION_OCTET_STREAM) {
      if (vertexIds.size() > 1) {
        this.statusCode=HttpURLConnection.HTTP_BAD_REQUEST;
        this.response=""String_Node_Str"";
        return;
      }
      this.statusCode=HttpURLConnection.HTTP_OK;
      this.responseBytes=ServerUtils.readTrace(jobId,superstepNo,vertexIds.get(0).trim());
      return;
    }
    JSONObject scenarioObj=new JSONObject();
    for (    String vertexId : vertexIds) {
      GiraphScenarioWrapper giraphScenarioWrapper;
      giraphScenarioWrapper=ServerUtils.readScenarioFromTrace(jobId,superstepNo,vertexId.trim());
      scenarioObj.put(vertexId,ServerUtils.scenarioToJSON(giraphScenarioWrapper));
    }
    this.statusCode=HttpURLConnection.HTTP_OK;
    this.response=scenarioObj.toString();
  }
 catch (  IllegalArgumentException e) {
    this.statusCode=HttpURLConnection.HTTP_BAD_REQUEST;
    this.response=String.format(""String_Node_Str"",ServerUtils.JOB_ID_KEY,ServerUtils.SUPERSTEP_ID_KEY);
  }
catch (  ClassNotFoundException e) {
    this.statusCode=HttpURLConnection.HTTP_INTERNAL_ERROR;
    this.response=""String_Node_Str"";
  }
catch (  IOException e) {
    this.statusCode=HttpURLConnection.HTTP_BAD_REQUEST;
    this.response=""String_Node_Str"";
  }
catch (  JSONException e) {
    this.statusCode=HttpURLConnection.HTTP_INTERNAL_ERROR;
    this.response=""String_Node_Str"";
  }
}","public void processRequest(HttpExchange httpExchange,HashMap<String,String> paramMap){
  String jobId=paramMap.get(ServerUtils.JOB_ID_KEY);
  String superstepId=paramMap.get(ServerUtils.SUPERSTEP_ID_KEY);
  Debug.println(""String_Node_Str"",paramMap.toString());
  try {
    if (jobId == null || superstepId == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    Long superstepNo=Long.parseLong(paramMap.get(ServerUtils.SUPERSTEP_ID_KEY));
    if (superstepNo < -1) {
      this.statusCode=HttpURLConnection.HTTP_BAD_REQUEST;
      this.response=String.format(""String_Node_Str"",ServerUtils.SUPERSTEP_ID_KEY);
      return;
    }
    ArrayList<String> vertexIds=null;
    String rawVertexIds=paramMap.get(ServerUtils.VERTEX_ID_KEY);
    if (rawVertexIds == null) {
      vertexIds=ServerUtils.getVerticesDebugged(jobId,superstepNo);
    }
 else {
      vertexIds=new ArrayList(Arrays.asList(rawVertexIds.split(""String_Node_Str"")));
    }
    if (paramMap.get(""String_Node_Str"") != null) {
      if (vertexIds.size() > 1) {
        this.statusCode=HttpURLConnection.HTTP_BAD_REQUEST;
        this.response=""String_Node_Str"";
        return;
      }
      String vertexId=vertexIds.get(0).trim();
      this.responseContentType=MediaType.APPLICATION_OCTET_STREAM;
      this.statusCode=HttpURLConnection.HTTP_OK;
      this.responseBytes=ServerUtils.readTrace(jobId,superstepNo,vertexId);
      String fileName=String.format(""String_Node_Str"",jobId,ServerUtils.getTraceFileName(superstepNo,vertexId));
      this.setResponseHeader(""String_Node_Str"",""String_Node_Str"" + fileName);
      return;
    }
    JSONObject scenarioObj=new JSONObject();
    for (    String vertexId : vertexIds) {
      GiraphScenarioWrapper giraphScenarioWrapper;
      giraphScenarioWrapper=ServerUtils.readScenarioFromTrace(jobId,superstepNo,vertexId.trim());
      scenarioObj.put(vertexId,ServerUtils.scenarioToJSON(giraphScenarioWrapper));
    }
    this.statusCode=HttpURLConnection.HTTP_OK;
    this.response=scenarioObj.toString();
  }
 catch (  IllegalArgumentException e) {
    this.statusCode=HttpURLConnection.HTTP_BAD_REQUEST;
    this.response=String.format(""String_Node_Str"",ServerUtils.JOB_ID_KEY,ServerUtils.SUPERSTEP_ID_KEY);
  }
catch (  ClassNotFoundException e) {
    this.statusCode=HttpURLConnection.HTTP_INTERNAL_ERROR;
    this.response=""String_Node_Str"";
  }
catch (  IOException e) {
    this.statusCode=HttpURLConnection.HTTP_BAD_REQUEST;
    this.response=""String_Node_Str"";
  }
catch (  JSONException e) {
    this.statusCode=HttpURLConnection.HTTP_INTERNAL_ERROR;
    this.response=""String_Node_Str"";
  }
}",0.5529200717560295
24503,"private void setMandatoryResponseHeaders(){
  Headers headers=this.httpExchange.getResponseHeaders();
  headers.add(""String_Node_Str"",""String_Node_Str"");
  headers.add(""String_Node_Str"",this.responseMimeType);
}","private void setMandatoryResponseHeaders(){
  Headers headers=this.httpExchange.getResponseHeaders();
  headers.add(""String_Node_Str"",""String_Node_Str"");
  headers.add(""String_Node_Str"",this.responseContentType);
}",0.9741176470588236
24504,"public void handle(HttpExchange httpExchange) throws IOException {
  this.httpExchange=httpExchange;
  this.setResponseMimeType();
  String rawUrl=httpExchange.getRequestURI().getQuery();
  HashMap<String,String> paramMap;
  int statusCode;
  try {
    paramMap=ServerUtils.getUrlParams(rawUrl);
    processRequest(httpExchange,paramMap);
  }
 catch (  UnsupportedEncodingException ex) {
    this.statusCode=HttpURLConnection.HTTP_BAD_REQUEST;
    this.response=""String_Node_Str"";
  }
  if (this.statusCode != HttpURLConnection.HTTP_OK) {
    this.responseMimeType=MediaType.TEXT_PLAIN;
  }
  this.setMandatoryResponseHeaders();
  if (this.responseMimeType == MediaType.APPLICATION_JSON || this.statusCode != HttpURLConnection.HTTP_OK) {
    this.writeTextResponse();
  }
 else {
    this.writeByteResponse();
  }
}","public void handle(HttpExchange httpExchange) throws IOException {
  this.httpExchange=httpExchange;
  this.responseContentType=MediaType.APPLICATION_JSON;
  String rawUrl=httpExchange.getRequestURI().getQuery();
  HashMap<String,String> paramMap;
  int statusCode;
  try {
    paramMap=ServerUtils.getUrlParams(rawUrl);
    processRequest(httpExchange,paramMap);
  }
 catch (  UnsupportedEncodingException ex) {
    this.statusCode=HttpURLConnection.HTTP_BAD_REQUEST;
    this.response=""String_Node_Str"";
  }
  if (this.statusCode != HttpURLConnection.HTTP_OK) {
    this.responseContentType=MediaType.TEXT_PLAIN;
  }
  this.setMandatoryResponseHeaders();
  this.writeResponse();
}",0.8309953239812959
24505,"public static GiraphScenarioWrapper readScenarioFromTrace(String jobId,long superstepNo,String vertexId) throws IOException, ClassNotFoundException {
  FileSystem fs=ServerUtils.getFileSystem();
  String traceFilePath=String.format(""String_Node_Str"",jobId,superstepNo,vertexId);
  GiraphScenearioSaverLoader giraphSaverLoader=new GiraphScenearioSaverLoader<>();
  GiraphScenarioWrapper giraphScenarioWrapper=giraphSaverLoader.loadFromHDFS(fs,traceFilePath);
  return giraphScenarioWrapper;
}","public static GiraphScenarioWrapper readScenarioFromTrace(String jobId,long superstepNo,String vertexId) throws IOException, ClassNotFoundException {
  FileSystem fs=ServerUtils.getFileSystem();
  String traceFilePath=ServerUtils.getTraceFilePath(jobId,superstepNo,vertexId);
  GiraphScenearioSaverLoader giraphSaverLoader=new GiraphScenearioSaverLoader<>();
  GiraphScenarioWrapper giraphScenarioWrapper=giraphSaverLoader.loadFromHDFS(fs,traceFilePath);
  return giraphScenarioWrapper;
}",0.9438202247191012
24506,"public static byte[] readTrace(String jobId,long superstepNo,String vertexId) throws IOException {
  FileSystem fs=ServerUtils.getFileSystem();
  String traceFilePath=String.format(""String_Node_Str"",jobId,superstepNo,vertexId);
  byte[] data=IOUtils.toByteArray(fs.open(new Path(traceFilePath)));
  return data;
}","public static byte[] readTrace(String jobId,long superstepNo,String vertexId) throws IOException {
  FileSystem fs=ServerUtils.getFileSystem();
  String traceFilePath=ServerUtils.getTraceFilePath(jobId,superstepNo,vertexId);
  byte[] data=IOUtils.toByteArray(fs.open(new Path(traceFilePath)));
  return data;
}",0.9085072231139648
24507,"/** 
 * Is this vertex the source id?
 * @param vertex Vertex
 * @return True if the source id
 */
private boolean isSource(Vertex<LongWritable,?,?> vertex){
  return vertex.getId().get() == 0;
}","/** 
 * Is this vertex the source id?
 * @param vertex Vertex
 * @return True if the source id
 */
private boolean isSource(Vertex<LongWritable,?,?> vertex){
  return vertex.getId().get() == SOURCE_ID.get(getConf());
}",0.9394673123486684
24508,"public void compute(Vertex<I,V,E> vertex,Iterable<M1> messages) throws IOException {
  shouldDebugVertex=debugConfig.shouldDebugSuperstep(getSuperstep()) && debugConfig.shouldDebugVertex(vertex.getId());
  if (shouldDebugVertex) {
    initGiraphScenario();
    debugVertexBeforeComputation(vertex,messages);
  }
  computeFurther(vertex,messages);
  if (shouldDebugVertex) {
    giraphScenarioWrapper.getContextWrapper().setVertexValueAfterWrapper(vertex.getValue());
    new GiraphScenearioSaverLoader<I,V,E,M1,M2>().saveToHDFS(""String_Node_Str"" + getSuperstep() + ""String_Node_Str""+ vertex.getId()+ ""String_Node_Str"",giraphScenarioWrapper);
  }
}","public void compute(Vertex<I,V,E> vertex,Iterable<M1> messages) throws IOException {
  shouldDebugVertex=debugConfig.shouldDebugSuperstep(getSuperstep()) && debugConfig.shouldDebugVertex(vertex.getId());
  if (shouldDebugVertex) {
    initGiraphScenario();
    debugVertexBeforeComputation(vertex,messages);
  }
  computeFurther(vertex,messages);
  if (shouldDebugVertex) {
    giraphScenarioWrapper.getContextWrapper().setVertexValueAfterWrapper(vertex.getValue());
    new GiraphScenearioSaverLoader<I,V,E,M1,M2>().saveToHDFS(FileSystem.get(new Configuration()),""String_Node_Str"" + getContext().getJobID() + ""String_Node_Str""+ getSuperstep()+ ""String_Node_Str""+ vertex.getId()+ ""String_Node_Str"",giraphScenarioWrapper);
  }
}",0.9112081513828238
24509,"private void debugVertexBeforeComputation(Vertex<I,V,E> vertex,Iterable<M1> messages){
  System.out.println(""String_Node_Str"" + vertex.getId() + ""String_Node_Str"");
  giraphScenarioWrapper.getContextWrapper().setSuperstepNoWrapper(getSuperstep());
  debugVertex(vertex);
  for (  M1 message : messages) {
    giraphScenarioWrapper.getContextWrapper().addIncomingMessageWrapper(message);
    System.out.print(""String_Node_Str"" + message);
  }
  System.out.println(""String_Node_Str"" + vertex.getId() + ""String_Node_Str"");
}","private void debugVertexBeforeComputation(Vertex<I,V,E> vertex,Iterable<M1> messages) throws IOException {
  giraphScenarioWrapper.getContextWrapper().setSuperstepNoWrapper(getSuperstep());
  giraphScenarioWrapper.getContextWrapper().setVertexIdWrapper(vertex.getId());
  giraphScenarioWrapper.getContextWrapper().setVertexValueBeforeWrapper(vertex.getValue());
  Iterable<Edge<I,E>> returnVal=vertex.getEdges();
  for (  Edge<I,E> edge : returnVal) {
    giraphScenarioWrapper.getContextWrapper().addNeighborWrapper(edge.getTargetVertexId(),edge.getValue());
  }
  for (  M1 message : messages) {
    giraphScenarioWrapper.getContextWrapper().addIncomingMessageWrapper(message);
  }
}",0.4129353233830846
24510,"/** 
 * First intercepts the sent messages to all edges if necessary and calls and then calls AbstractComputation's sendMessageToAllEdges method. 
 * @param vertex Vertex whose edges to send the message to.
 * @param message Message sent to all edges.
 */
@Override public void sendMessageToAllEdges(Vertex<I,V,E> vertex,M2 message){
  if (shouldDebugVertex) {
    System.out.print(""String_Node_Str"" + message);
    for (    Edge<I,E> edge : vertex.getEdges()) {
      System.out.print(""String_Node_Str"" + edge.getTargetVertexId());
    }
    System.out.println();
  }
  super.sendMessageToAllEdges(vertex,message);
}","/** 
 * First intercepts the sent messages to all edges if necessary and calls and then calls AbstractComputation's sendMessageToAllEdges method. 
 * @param vertex Vertex whose edges to send the message to.
 * @param message Message sent to all edges.
 */
@Override public void sendMessageToAllEdges(Vertex<I,V,E> vertex,M2 message){
  if (shouldDebugVertex) {
  }
  super.sendMessageToAllEdges(vertex,message);
}",0.7300970873786408
24511,"/** 
 * First intercepts the sent message if necessary and calls and then calls AbstractComputation's sendMessage method. 
 * @param id Vertex id to send the message to
 * @param message Message data to send
 */
@Override public void sendMessage(I id,M2 message){
  System.out.println(""String_Node_Str"");
  if (shouldDebugVertex) {
    giraphScenarioWrapper.getContextWrapper().addOutgoingMessageWrapper(id,message);
    System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ message);
  }
  super.sendMessage(id,message);
}","/** 
 * First intercepts the sent message if necessary and calls and then calls AbstractComputation's sendMessage method. 
 * @param id Vertex id to send the message to
 * @param message Message data to send
 */
@Override public void sendMessage(I id,M2 message){
  if (shouldDebugVertex) {
    giraphScenarioWrapper.getContextWrapper().addOutgoingMessageWrapper(id,message);
  }
  super.sendMessage(id,message);
}",0.8266384778012685
24512,"private void initGiraphScenario(){
  System.out.println(this.getClass().getCanonicalName());
  ParameterizedType parameterizedType=(ParameterizedType)debugConfig.getClass().getGenericSuperclass();
  System.out.println(((Class<I>)parameterizedType.getActualTypeArguments()[0]).getCanonicalName());
  System.out.println(((Class<V>)parameterizedType.getActualTypeArguments()[1]).getCanonicalName());
  System.out.println(((Class<E>)parameterizedType.getActualTypeArguments()[2]).getCanonicalName());
  System.out.println(((Class<M1>)parameterizedType.getActualTypeArguments()[3]).getCanonicalName());
  System.out.println(((Class<M2>)parameterizedType.getActualTypeArguments()[4]).getCanonicalName());
  giraphScenarioWrapper=new GiraphScenarioWrapper(this.getClass(),(Class<I>)parameterizedType.getActualTypeArguments()[0],(Class<V>)parameterizedType.getActualTypeArguments()[1],(Class<E>)parameterizedType.getActualTypeArguments()[2],(Class<M1>)parameterizedType.getActualTypeArguments()[3],(Class<M2>)parameterizedType.getActualTypeArguments()[4]);
  giraphScenarioWrapper.setContextWrapper(giraphScenarioWrapper.new ContextWrapper());
}","private void initGiraphScenario(){
  ParameterizedType parameterizedType=(ParameterizedType)debugConfig.getClass().getGenericSuperclass();
  giraphScenarioWrapper=new GiraphScenarioWrapper(this.getClass(),(Class<I>)parameterizedType.getActualTypeArguments()[0],(Class<V>)parameterizedType.getActualTypeArguments()[1],(Class<E>)parameterizedType.getActualTypeArguments()[2],(Class<M1>)parameterizedType.getActualTypeArguments()[3],(Class<M2>)parameterizedType.getActualTypeArguments()[4]);
  giraphScenarioWrapper.setContextWrapper(giraphScenarioWrapper.new ContextWrapper());
}",0.4830805134189031
24513,"@Override public boolean shouldDebugVertex(LongWritable vertexId){
  return vertexId.get() == 1L;
}","@Override public boolean shouldDebugVertex(LongWritable vertexId){
  return true;
}",0.8791208791208791
24514,"public void setVertexValueAfterWrapper(V vertexValueAfter){
  this.vertexValueAfter=vertexValueAfter;
}","public void setVertexValueAfterWrapper(V vertexValueAfter){
  this.vertexValueAfter=makeCloneOf(vertexValueAfter,vertexValueClass);
}",0.8728813559322034
24515,"public void addNeighborWrapper(I neighborId,E edgeValue){
  neighbors.add(new NeighborWrapper(neighborId,edgeValue));
}","public void addNeighborWrapper(I neighborId,E edgeValue){
  neighbors.add(new NeighborWrapper(makeCloneOf(neighborId,vertexIdClass),makeCloneOf(edgeValue,edgeValueClass)));
}",0.8122866894197952
24516,"public void addIncomingMessageWrapper(M1 message){
  inMsgs.add(message);
}","public void addIncomingMessageWrapper(M1 message){
  inMsgs.add(makeCloneOf(message,incomingMessageClass));
}",0.8152173913043478
24517,"public void addOutgoingMessageWrapper(I receiverId,M2 message){
  outMsgs.add(new OutgoingMessageWrapper(receiverId,message));
}","public void addOutgoingMessageWrapper(I receiverId,M2 message){
  outMsgs.add(new OutgoingMessageWrapper(makeCloneOf(receiverId,vertexIdClass),makeCloneOf(message,outgoingMessageClass)));
}",0.807570977917981
24518,"public void setVertexValueBeforeWrapper(V vertexValueBefore){
  this.vertexValueBefore=vertexValueBefore;
}","public void setVertexValueBeforeWrapper(V vertexValueBefore){
  this.vertexValueBefore=makeCloneOf(vertexValueBefore,vertexValueClass);
}",0.8770491803278688
24519,"public void saveToHDFS(String fileName,GiraphScenarioWrapper<I,V,E,M1,M2> scenarioWrapper) throws IOException {
  GiraphScenario giraphScenario=buildGiraphScnearioFromWrapper(scenarioWrapper);
  Path pt=new Path(fileName);
  FileSystem fs=FileSystem.get(new Configuration());
  giraphScenario.writeTo(fs.create(pt,true).getWrappedStream());
}","public void saveToHDFS(FileSystem fs,String fileName,GiraphScenarioWrapper<I,V,E,M1,M2> scenarioWrapper) throws IOException {
  GiraphScenario giraphScenario=buildGiraphScnearioFromWrapper(scenarioWrapper);
  Path pt=new Path(fileName);
  giraphScenario.writeTo(fs.create(pt,true).getWrappedStream());
}",0.896124031007752
24520,"@SuppressWarnings(""String_Node_Str"") public GiraphScenarioWrapper<I,V,E,M1,M2> load(String fileName) throws ClassNotFoundException, IOException {
  GiraphScenario giraphScenario=GiraphScenario.parseFrom(new FileInputStream(fileName));
  Class<?> clazz=Class.forName(giraphScenario.getClassUnderTest());
  Class<? extends Computation<I,V,E,M1,M2>> classUnderTest=(Class<? extends Computation<I,V,E,M1,M2>>)castClassToUpperBound(clazz,Computation.class);
  Class<I> vertexIdClass=(Class<I>)castClassToUpperBound(Class.forName(giraphScenario.getVertexIdClass()),WritableComparable.class);
  Class<V> vertexValueClass=(Class<V>)castClassToUpperBound(Class.forName(giraphScenario.getVertexValueClass()),Writable.class);
  Class<E> edgeValueClass=(Class<E>)castClassToUpperBound(Class.forName(giraphScenario.getEdgeValueClass()),Writable.class);
  Class<M1> incomingMessageClass=(Class<M1>)castClassToUpperBound(Class.forName(giraphScenario.getIncomingMessageClass()),Writable.class);
  Class<M2> outgoingMessageClass=(Class<M2>)castClassToUpperBound(Class.forName(giraphScenario.getOutgoingMessageClass()),Writable.class);
  GiraphScenarioWrapper<I,V,E,M1,M2> giraphScenarioWrapper=new GiraphScenarioWrapper(classUnderTest,vertexIdClass,vertexValueClass,edgeValueClass,incomingMessageClass,outgoingMessageClass);
  ContextOrBuilder context=giraphScenario.getContextOrBuilder();
  GiraphScenarioWrapper<I,V,E,M1,M2>.ContextWrapper contextWrapper=giraphScenarioWrapper.new ContextWrapper();
  I vertexId=newInstance(vertexIdClass);
  fromByteString(context.getVertexId(),vertexId);
  contextWrapper.setVertexIdWrapper(vertexId);
  V vertexValue=newInstance(vertexValueClass);
  fromByteString(context.getVertexValueBefore(),vertexValue);
  contextWrapper.setVertexValueBeforeWrapper(vertexValue);
  fromByteString(context.getVertexValueAfter(),vertexValue);
  contextWrapper.setVertexValueAfterWrapper(vertexValue);
  for (  Neighbor neighbor : context.getNeighborList()) {
    I neighborId=newInstance(vertexIdClass);
    fromByteString(neighbor.getNeighborId(),neighborId);
    E edgeValue;
    if (neighbor.hasEdgeValue()) {
      edgeValue=newInstance(edgeValueClass);
      fromByteString(neighbor.getEdgeValue(),edgeValue);
    }
 else {
      edgeValue=null;
    }
    contextWrapper.addNeighborWrapper(neighborId,edgeValue);
  }
  for (int i=0; i < context.getInMessageCount(); i++) {
    M1 msg=newInstance(incomingMessageClass);
    fromByteString(context.getInMessage(i),msg);
    contextWrapper.addIncomingMessageWrapper(msg);
  }
  for (  OutMsg outmsg : context.getOutMessageList()) {
    I destinationId=newInstance(vertexIdClass);
    fromByteString(outmsg.getDestinationId(),destinationId);
    M2 msg=newInstance(outgoingMessageClass);
    fromByteString(outmsg.getMsgData(),msg);
    contextWrapper.addOutgoingMessageWrapper(destinationId,msg);
  }
  giraphScenarioWrapper.setContextWrapper(contextWrapper);
  return giraphScenarioWrapper;
}","public GiraphScenarioWrapper<I,V,E,M1,M2> load(String fileName) throws ClassNotFoundException, IOException {
  GiraphScenario giraphScenario=GiraphScenario.parseFrom(new FileInputStream(fileName));
  return loadGiraphScneario(giraphScenario);
}",0.1363778542383484
24521,"private static <T>T newInstance(Class<T> theClass){
  return NullWritable.class.isAssignableFrom(theClass) ? null : ReflectionUtils.newInstance(theClass);
}","static <T>T newInstance(Class<T> theClass){
  return NullWritable.class.isAssignableFrom(theClass) ? null : ReflectionUtils.newInstance(theClass);
}",0.9736842105263158
24522,"private GiraphScenario buildGiraphScnearioFromWrapper(GiraphScenarioWrapper<I,V,E,M1,M2> scenarioWrapper){
  GiraphScenario.Builder giraphScenarioBuilder=GiraphScenario.newBuilder();
  Context.Builder contextBuilder=Context.newBuilder();
  Neighbor.Builder neighborBuilder=Neighbor.newBuilder();
  OutMsg.Builder outMsgBuilder=OutMsg.newBuilder();
  giraphScenarioBuilder.clear();
  giraphScenarioBuilder.setClassUnderTest(scenarioWrapper.getClassUnderTest().getName());
  giraphScenarioBuilder.setVertexIdClass(scenarioWrapper.getVertexIdClass().getName());
  giraphScenarioBuilder.setVertexValueClass(scenarioWrapper.getVertexValueClass().getName());
  giraphScenarioBuilder.setEdgeValueClass(scenarioWrapper.getEdgeValueClass().getName());
  giraphScenarioBuilder.setIncomingMessageClass(scenarioWrapper.getIncomingMessageClass().getName());
  giraphScenarioBuilder.setOutgoingMessageClass(scenarioWrapper.getOutgoingMessageClass().getName());
  GiraphScenarioWrapper<I,V,E,M1,M2>.ContextWrapper contextWrapper=scenarioWrapper.getContextWrapper();
  contextBuilder.clear();
  contextBuilder.setSuperstepNo(contextWrapper.getSuperstepNoWrapper()).setVertexId(toByteString(contextWrapper.getVertexIdWrapper())).setVertexValueBefore(toByteString(contextWrapper.getVertexValueBeforeWrapper())).setVertexValueAfter(toByteString(contextWrapper.getVertexValueAfterWrapper()));
  for (  GiraphScenarioWrapper<I,V,E,M1,M2>.ContextWrapper.NeighborWrapper neighbor : contextWrapper.getNeighborWrappers()) {
    neighborBuilder.clear();
    neighborBuilder.setNeighborId(toByteString(neighbor.getNbrId()));
    E edgeValue=neighbor.getEdgeValue();
    if (edgeValue != null) {
      neighborBuilder.setEdgeValue(toByteString(edgeValue));
    }
 else {
      neighborBuilder.clearEdgeValue();
    }
    contextBuilder.addNeighbor(neighborBuilder);
  }
  for (  M1 msg : contextWrapper.getIncomingMessageWrappers()) {
    contextBuilder.addInMessage(toByteString(msg));
  }
  for (  OutgoingMessageWrapper msg : contextWrapper.getOutgoingMessageWrappers()) {
    outMsgBuilder.setMsgData(toByteString(msg.message));
    outMsgBuilder.setDestinationId(toByteString(msg.destinationId));
    contextBuilder.addOutMessage(outMsgBuilder);
  }
  giraphScenarioBuilder.setContext(contextBuilder.build());
  GiraphScenario giraphScenario=giraphScenarioBuilder.build();
  return giraphScenario;
}","private GiraphScenario buildGiraphScnearioFromWrapper(GiraphScenarioWrapper<I,V,E,M1,M2> scenarioWrapper){
  GiraphScenario.Builder giraphScenarioBuilder=GiraphScenario.newBuilder();
  giraphScenarioBuilder.setClassUnderTest(scenarioWrapper.getClassUnderTest().getName());
  giraphScenarioBuilder.setVertexIdClass(scenarioWrapper.getVertexIdClass().getName());
  giraphScenarioBuilder.setVertexValueClass(scenarioWrapper.getVertexValueClass().getName());
  giraphScenarioBuilder.setEdgeValueClass(scenarioWrapper.getEdgeValueClass().getName());
  giraphScenarioBuilder.setIncomingMessageClass(scenarioWrapper.getIncomingMessageClass().getName());
  giraphScenarioBuilder.setOutgoingMessageClass(scenarioWrapper.getOutgoingMessageClass().getName());
  GiraphScenarioWrapper<I,V,E,M1,M2>.ContextWrapper contextWrapper=scenarioWrapper.getContextWrapper();
  Context.Builder contextBuilder=Context.newBuilder();
  contextBuilder.setSuperstepNo(contextWrapper.getSuperstepNoWrapper()).setVertexId(toByteString(contextWrapper.getVertexIdWrapper())).setVertexValueBefore(toByteString(contextWrapper.getVertexValueBeforeWrapper())).setVertexValueAfter(toByteString(contextWrapper.getVertexValueAfterWrapper()));
  for (  GiraphScenarioWrapper<I,V,E,M1,M2>.ContextWrapper.NeighborWrapper neighbor : contextWrapper.getNeighborWrappers()) {
    Neighbor.Builder neighborBuilder=Neighbor.newBuilder();
    neighborBuilder.setNeighborId(toByteString(neighbor.getNbrId()));
    E edgeValue=neighbor.getEdgeValue();
    if (edgeValue != null) {
      neighborBuilder.setEdgeValue(toByteString(edgeValue));
    }
 else {
      neighborBuilder.clearEdgeValue();
    }
    contextBuilder.addNeighbor(neighborBuilder.build());
  }
  for (  M1 msg : contextWrapper.getIncomingMessageWrappers()) {
    contextBuilder.addInMessage(toByteString(msg));
  }
  for (  OutgoingMessageWrapper msg : contextWrapper.getOutgoingMessageWrappers()) {
    OutMsg.Builder outMsgBuilder=OutMsg.newBuilder();
    outMsgBuilder.setMsgData(toByteString(msg.message));
    outMsgBuilder.setDestinationId(toByteString(msg.destinationId));
    contextBuilder.addOutMessage(outMsgBuilder);
  }
  giraphScenarioBuilder.setContext(contextBuilder.build());
  GiraphScenario giraphScenario=giraphScenarioBuilder.build();
  return giraphScenario;
}",0.9131736526946108
24523,"@Override public void start(Stage primaryStage){
  TreeView<CheckBoxContentImpl> view=new TreeView<>();
  view.setShowRoot(false);
  view.setCellFactory(TreeCellFactories.checkBoxFactory());
  try {
    LiveDirs<ChangeSource,CheckBoxContentImpl> dirs=new LiveDirs<>(ChangeSource.EXTERNAL,CheckBoxContentImpl::getPath,CheckBoxContentImpl::new,Platform::runLater);
    dirs.addTopLevelDirectory(Paths.get(System.getProperty(""String_Node_Str""),""String_Node_Str"").toAbsolutePath());
    view.setRoot(dirs.model().getRoot());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  primaryStage.setScene(new Scene(view,500,500));
  primaryStage.show();
}","@Override public void start(Stage primaryStage){
  TreeView<CheckBoxContentImpl> view=new TreeView<>();
  view.setShowRoot(false);
  view.setCellFactory(TreeCellFactories.checkBoxFactory());
  try {
    LiveDirs<ChangeSource,CheckBoxContentImpl> dirs=new LiveDirs<>(ChangeSource.EXTERNAL,CheckBoxContentImpl::getPath,CheckBoxContentImpl::new,Platform::runLater);
    dirs.addTopLevelDirectory(Paths.get(System.getProperty(""String_Node_Str""),""String_Node_Str"").toAbsolutePath());
    view.setRoot(dirs.model().getRoot());
    primaryStage.setOnCloseRequest(val -> dirs.dispose());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  primaryStage.setScene(new Scene(view,500,500));
  primaryStage.show();
}",0.9569028487947406
24524,"@Override public void start(Stage primaryStage){
  TreeView<Path> view=new TreeView<>();
  view.setShowRoot(false);
  try {
    LiveDirs<ChangeSource,Path> dirs=LiveDirs.getNormalInstance(ChangeSource.EXTERNAL);
    dirs.addTopLevelDirectory(Paths.get(System.getProperty(""String_Node_Str""),""String_Node_Str"").toAbsolutePath());
    view.setRoot(dirs.model().getRoot());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  primaryStage.setScene(new Scene(view,500,500));
  primaryStage.show();
}","@Override public void start(Stage primaryStage){
  TreeView<Path> view=new TreeView<>();
  view.setShowRoot(false);
  try {
    LiveDirs<ChangeSource,Path> dirs=LiveDirs.getNormalInstance(ChangeSource.EXTERNAL);
    dirs.addTopLevelDirectory(Paths.get(System.getProperty(""String_Node_Str""),""String_Node_Str"").toAbsolutePath());
    view.setRoot(dirs.model().getRoot());
    primaryStage.setOnCloseRequest(val -> dirs.dispose());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  primaryStage.setScene(new Scene(view,500,500));
  primaryStage.show();
}",0.9447047797563262
24525,"/** 
 * Creates a LiveDirs instance to be used from a designated thread.
 * @param projector converts the ({@link T})   {@link TreeItem#getValue()} into a {@link Path} object
 * @param injector converts a given {@link Path} object into {@link T}. The reverse of   {@code projector}
 * @param externalInitiator object to represent an initiator of an externalfile-system change.
 * @param clientThreadExecutor executor to execute actions on the callerthread. Used to publish updates and errors on the caller thread.
 * @throws IOException
 */
public LiveDirs(I externalInitiator,Function<T,Path> projector,Function<Path,T> injector,Executor clientThreadExecutor) throws IOException {
  this.externalInitiator=externalInitiator;
  this.clientThreadExecutor=clientThreadExecutor;
  this.dirWatcher=new DirWatcher(clientThreadExecutor);
  this.model=new LiveDirsModel<>(externalInitiator,projector,injector);
  this.io=new LiveDirsIO<>(dirWatcher,model,clientThreadExecutor);
  this.dirWatcher.signalledKeys().subscribe(key -> processKey(key));
  this.errors=EventStreams.merge(dirWatcher.errors(),model.errors(),localErrors);
}","/** 
 * Creates a LiveDirs instance to be used from a designated thread.
 * @param projector converts the ({@link T})   {@link TreeItem#getValue()} into a {@link Path} object
 * @param injector converts a given {@link Path} object into {@link T}. The reverse of   {@code projector}
 * @param externalInitiator object to represent an initiator of an externalfile-system change.
 * @param clientThreadExecutor executor to execute actions on the callerthread. Used to publish updates and errors on the caller thread.
 * @throws IOException
 */
public LiveDirs(I externalInitiator,Function<T,Path> projector,Function<Path,T> injector,Executor clientThreadExecutor) throws IOException {
  this.externalInitiator=externalInitiator;
  this.clientThreadExecutor=clientThreadExecutor;
  this.dirWatcher=new DirWatcher(clientThreadExecutor);
  this.model=new LiveDirsModel<>(externalInitiator,projector,injector);
  this.io=new LiveDirsIO<>(dirWatcher,model,clientThreadExecutor);
  this.dirWatcher.signalledKeys().subscribe(this::processKey);
  this.errors=EventStreams.merge(dirWatcher.errors(),model.errors(),localErrors);
}",0.9848214285714286
24526,"private <T>CompletionStage<T> wrap(CompletionStage<T> stage){
  return new CompletionStageWithDefaultExecutor<>(stage,clientThreadExecutor);
}","private <U>CompletionStage<U> wrap(CompletionStage<U> stage){
  return new CompletionStageWithDefaultExecutor<>(stage,clientThreadExecutor);
}",0.9788732394366196
24527,"@Override public void run(){
  LOG.info(String.format(""String_Node_Str"",inboundEndpoint.getName()));
  long delay=0L;
  while (running) {
    try {
      if (delay > 0) {
        try {
          Thread.sleep(delay);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          LOG.error(""String_Node_Str"",e);
        }
 finally {
          delay=0;
        }
      }
      TestContext context=testContextFactory.getObject();
      Message message=inboundEndpoint.createConsumer().receive(context,inboundEndpoint.getEndpointConfiguration().getTimeout());
      if (message != null) {
        LOG.debug(String.format(""String_Node_Str"",message.getId()));
        Message response=endpointAdapter.handleMessage(processRequestMessage(message));
        if (response != null) {
          Producer producer=inboundEndpoint.createProducer();
          if (producer instanceof ReplyProducer) {
            LOG.debug(String.format(""String_Node_Str"",message.getId()));
            producer.send(processResponseMessage(response),context);
          }
        }
      }
    }
 catch (    ActionTimeoutException e) {
    }
catch (    SimulatorException|CitrusRuntimeException e) {
      LOG.error(""String_Node_Str"",e.getMessage());
      if (LOG.isDebugEnabled()) {
        LOG.debug(e.getMessage(),e);
      }
    }
catch (    Exception e) {
      delay=exceptionDelay;
      LOG.error(""String_Node_Str"",e.getMessage());
      if (LOG.isDebugEnabled()) {
        LOG.debug(e.getMessage(),e);
      }
    }
  }
}","@Override public void run(){
  LOG.info(""String_Node_Str"",inboundEndpoint.getName());
  long delay=0L;
  while (running) {
    try {
      if (delay > 0) {
        try {
          Thread.sleep(delay);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          LOG.error(""String_Node_Str"",e);
        }
 finally {
          delay=0;
        }
      }
      TestContext context=testContextFactory.getObject();
      Message message=inboundEndpoint.createConsumer().receive(context,inboundEndpoint.getEndpointConfiguration().getTimeout());
      if (message != null) {
        LOG.debug(""String_Node_Str"",message.getId());
        Message response=endpointAdapter.handleMessage(processRequestMessage(message));
        if (response != null) {
          Producer producer=inboundEndpoint.createProducer();
          if (producer instanceof ReplyProducer) {
            LOG.debug(""String_Node_Str"",message.getId());
            producer.send(processResponseMessage(response),context);
          }
        }
      }
    }
 catch (    ActionTimeoutException e) {
    }
catch (    SimulatorException|CitrusRuntimeException e) {
      LOG.error(""String_Node_Str"",e.getMessage());
      if (LOG.isDebugEnabled()) {
        LOG.debug(e.getMessage(),e);
      }
    }
catch (    Exception e) {
      delay=exceptionDelay;
      LOG.error(""String_Node_Str"",e.getMessage());
      if (LOG.isDebugEnabled()) {
        LOG.debug(e.getMessage(),e);
      }
    }
  }
}",0.9852216748768472
24528,"@Override public String extractMappingKey(Message request){
  Optional<String> v=keyExtractors.parallelStream().map(keyExtractor -> lookupScenarioName(request,keyExtractor)).filter(Optional::isPresent).map(Optional::get).findAny();
  return v.orElse(null);
}","@Override public String extractMappingKey(Message request){
  Optional<String> v=keyExtractors.stream().map(keyExtractor -> lookupScenarioName(request,keyExtractor)).filter(Optional::isPresent).map(Optional::get).findFirst();
  return v.orElse(null);
}",0.9647058823529412
24529,"/** 
 * Lookup scenario name from given request.
 * @param request
 * @param keyExtractor
 * @return
 */
private Optional<String> lookupScenarioName(Message request,XPathPayloadMappingKeyExtractor keyExtractor){
  return Optional.ofNullable(keyExtractor.getMappingKey(request));
}","/** 
 * Lookup scenario name from given request.
 * @param request
 * @param keyExtractor
 * @return
 */
private Optional<String> lookupScenarioName(Message request,XPathPayloadMappingKeyExtractor keyExtractor){
  final String noMatch=""String_Node_Str"";
  try {
    final String mappingKey=keyExtractor.getMappingKey(request);
    final String scenarioLookupResult=StringUtils.hasLength(mappingKey) ? mappingKey : noMatch;
    LOG.debug(""String_Node_Str"",scenarioLookupResult);
    return Optional.ofNullable(mappingKey);
  }
 catch (  RuntimeException e) {
    LOG.debug(""String_Node_Str"",noMatch,e.getMessage());
    return Optional.empty();
  }
}",0.5382131324004306
24530,"@Override public boolean isHandlerFor(Message message,TestContext context){
  return xPathPayloadMappingKeyExtractor.extractMappingKey(message).equals(context.replaceDynamicContentInString(value));
}","@Override public boolean isHandlerFor(Message message,TestContext context){
  boolean isIntermediateMessage;
  try {
    isIntermediateMessage=xPathPayloadMappingKeyExtractor.extractMappingKey(message).equals(context.replaceDynamicContentInString(value));
  }
 catch (  RuntimeException e) {
    LOG.debug(""String_Node_Str"",message.getId(),e.getMessage());
    isIntermediateMessage=false;
  }
  LOG.debug(""String_Node_Str"",message.getId(),isIntermediateMessage);
  return isIntermediateMessage;
}",0.5517241379310345
24531,"private Future<?> startScenarioAsync(Long executionId,String name,SimulatorScenario scenario,List<ScenarioParameter> scenarioParameters){
  final ExecutorService executorService=Executors.newSingleThreadExecutor(r -> {
    Thread t=new Thread(r,""String_Node_Str"" + name);
    t.setDaemon(true);
    return t;
  }
);
  return executorService.submit(() -> {
    try {
      if (scenario instanceof Executable) {
        if (scenarioParameters != null) {
          scenarioParameters.forEach(p -> addVariable(scenario,p.getName(),p.getValue()));
        }
        addVariable(scenario,ScenarioExecution.EXECUTION_ID,executionId);
        ((Executable)scenario).execute();
      }
 else {
        TestContext context=citrus.createTestContext();
        ReflectionUtils.doWithLocalMethods(scenario.getClass(),m -> {
          if (!m.getName().equals(""String_Node_Str"")) {
            return;
          }
          if (m.getParameterCount() != 1) {
            throw new SimulatorException(""String_Node_Str"" + m.getParameterCount());
          }
          Class<?> parameterType=m.getParameterTypes()[0];
          if (parameterType.equals(ScenarioDesigner.class)) {
            ScenarioDesigner designer=new ScenarioDesigner(scenario.getScenarioEndpoint(),citrus.getApplicationContext(),context);
            if (scenarioParameters != null) {
              scenarioParameters.forEach(p -> designer.variable(p.getName(),p.getValue()));
            }
            designer.variable(ScenarioExecution.EXECUTION_ID,executionId);
            CitrusAnnotations.injectAll(scenario,citrus,context);
            ReflectionUtils.invokeMethod(m,scenario,designer);
            citrus.run(designer.getTestCase(),context);
          }
 else           if (parameterType.equals(ScenarioRunner.class)) {
            ScenarioRunner runner=new ScenarioRunner(scenario.getScenarioEndpoint(),citrus.getApplicationContext(),context);
            if (scenarioParameters != null) {
              scenarioParameters.forEach(p -> runner.variable(p.getName(),p.getValue()));
            }
            runner.variable(ScenarioExecution.EXECUTION_ID,executionId);
            CitrusAnnotations.injectAll(scenario,citrus,context);
            try {
              runner.start();
              ReflectionUtils.invokeMethod(m,scenario,runner);
            }
  finally {
              runner.stop();
            }
          }
 else {
            throw new SimulatorException(""String_Node_Str"" + parameterType);
          }
        }
);
      }
      LOG.debug(String.format(""String_Node_Str"",name));
    }
 catch (    Exception e) {
      LOG.error(String.format(""String_Node_Str"",name),e);
    }
    executorService.shutdownNow();
  }
);
}","private Future<?> startScenarioAsync(Long executionId,String name,SimulatorScenario scenario,List<ScenarioParameter> scenarioParameters){
  final ExecutorService executorService=Executors.newSingleThreadExecutor(r -> {
    Thread t=new Thread(r,""String_Node_Str"" + name);
    t.setDaemon(true);
    return t;
  }
);
  return executorService.submit(() -> {
    try {
      if (scenario instanceof Executable) {
        if (scenarioParameters != null) {
          scenarioParameters.forEach(p -> addVariable(scenario,p.getName(),p.getValue()));
        }
        addVariable(scenario,ScenarioExecution.EXECUTION_ID,executionId);
        ((Executable)scenario).execute();
      }
 else {
        TestContext context=citrus.createTestContext();
        ReflectionUtils.doWithLocalMethods(scenario.getClass(),m -> {
          if (m.getDeclaringClass().equals(SimulatorScenario.class)) {
            return;
          }
          if (!m.getName().equals(""String_Node_Str"")) {
            return;
          }
          if (m.getParameterCount() != 1) {
            throw new SimulatorException(""String_Node_Str"" + m.getParameterCount());
          }
          Class<?> parameterType=m.getParameterTypes()[0];
          if (parameterType.equals(ScenarioDesigner.class)) {
            ScenarioDesigner designer=new ScenarioDesigner(scenario.getScenarioEndpoint(),citrus.getApplicationContext(),context);
            if (scenarioParameters != null) {
              scenarioParameters.forEach(p -> designer.variable(p.getName(),p.getValue()));
            }
            designer.variable(ScenarioExecution.EXECUTION_ID,executionId);
            CitrusAnnotations.injectAll(scenario,citrus,context);
            ReflectionUtils.invokeMethod(m,scenario,designer);
            citrus.run(designer.getTestCase(),context);
          }
 else           if (parameterType.equals(ScenarioRunner.class)) {
            ScenarioRunner runner=new ScenarioRunner(scenario.getScenarioEndpoint(),citrus.getApplicationContext(),context);
            if (scenarioParameters != null) {
              scenarioParameters.forEach(p -> runner.variable(p.getName(),p.getValue()));
            }
            runner.variable(ScenarioExecution.EXECUTION_ID,executionId);
            CitrusAnnotations.injectAll(scenario,citrus,context);
            try {
              runner.start();
              ReflectionUtils.invokeMethod(m,scenario,runner);
            }
  finally {
              runner.stop();
            }
          }
 else {
            throw new SimulatorException(""String_Node_Str"" + parameterType);
          }
        }
);
      }
      LOG.debug(String.format(""String_Node_Str"",name));
    }
 catch (    Exception e) {
      LOG.error(String.format(""String_Node_Str"",name),e);
    }
    executorService.shutdownNow();
  }
);
}",0.981296531686944
24532,"@Override public Message dispatchMessage(Message request,String mappingName){
  CompletableFuture<Message> responseFuture=new CompletableFuture<>();
  SimulatorScenario scenario;
  if (applicationContext.containsBean(mappingName)) {
    scenario=applicationContext.getBean(mappingName,SimulatorScenario.class);
  }
 else {
    LOG.info(String.format(""String_Node_Str"" + ""String_Node_Str"",mappingName,configuration.getDefaultScenario()));
    scenario=applicationContext.getBean(configuration.getDefaultScenario(),SimulatorScenario.class);
  }
  scenario.getScenarioEndpoint().setName(mappingName);
  scenario.getScenarioEndpoint().add(request,responseFuture);
  scenarioService.run(scenario,mappingName,Collections.EMPTY_LIST);
  try {
    if (handleResponse) {
      return responseFuture.get(configuration.getDefaultTimeout(),TimeUnit.MILLISECONDS);
    }
 else {
      return null;
    }
  }
 catch (  TimeoutException e) {
    LOG.warn(String.format(""String_Node_Str"",mappingName));
    return null;
  }
catch (  InterruptedException|ExecutionException e) {
    throw new SimulatorException(e);
  }
}","@Override public Message dispatchMessage(Message request,String mappingName){
  String scenarioName=mappingName;
  CompletableFuture<Message> responseFuture=new CompletableFuture<>();
  SimulatorScenario scenario;
  if (StringUtils.hasText(scenarioName) && applicationContext.containsBean(scenarioName)) {
    scenario=applicationContext.getBean(scenarioName,SimulatorScenario.class);
  }
 else {
    scenarioName=configuration.getDefaultScenario();
    LOG.info(String.format(""String_Node_Str"" + ""String_Node_Str"",mappingName,scenarioName));
    scenario=applicationContext.getBean(scenarioName,SimulatorScenario.class);
  }
  scenario.getScenarioEndpoint().setName(scenarioName);
  scenario.getScenarioEndpoint().add(request,responseFuture);
  scenarioService.run(scenario,scenarioName,Collections.EMPTY_LIST);
  try {
    if (handleResponse) {
      return responseFuture.get(configuration.getDefaultTimeout(),TimeUnit.MILLISECONDS);
    }
 else {
      return null;
    }
  }
 catch (  TimeoutException e) {
    LOG.warn(String.format(""String_Node_Str"",scenarioName));
    return null;
  }
catch (  InterruptedException|ExecutionException e) {
    throw new SimulatorException(e);
  }
}",0.8727114210985178
24533,"/** 
 * Default constructor with correlation handler.
 */
public CorrelationHandlerBuilder(ScenarioEndpoint scenarioEndpoint){
  super(new StartCorrelationHandlerAction());
  this.scenarioEndpoint=scenarioEndpoint;
}","/** 
 * Default constructor with correlation handler.
 */
public CorrelationHandlerBuilder(ScenarioEndpoint scenarioEndpoint,ApplicationContext applicationContext){
  super(new StartCorrelationHandlerAction());
  this.scenarioEndpoint=scenarioEndpoint;
  this.applicationContext=applicationContext;
}",0.8372093023255814
24534,"public CorrelationHandlerBuilder onPayload(String expression,String value){
  return withHandler(new XPathPayloadCorrelationHandler(scenarioEndpoint,expression,value));
}","public CorrelationHandlerBuilder onPayload(String expression,String value){
  return withHandler(new XPathPayloadCorrelationHandler(lookupNamespaceContextBuilder(),scenarioEndpoint,expression,value));
}",0.913978494623656
24535,"/** 
 * Default constructor using expression value to match.
 * @param scenarioEndpoint
 * @param expression
 * @param value
 */
public XPathPayloadCorrelationHandler(ScenarioEndpoint scenarioEndpoint,String expression,String value){
  super(scenarioEndpoint);
  this.xPathPayloadMappingKeyExtractor.setXpathExpression(expression);
  this.value=value;
}","/** 
 * Default constructor using expression value to match.
 * @param namespaceContextBuilder
 * @param scenarioEndpoint
 * @param expression
 * @param value
 */
public XPathPayloadCorrelationHandler(NamespaceContextBuilder namespaceContextBuilder,ScenarioEndpoint scenarioEndpoint,String expression,String value){
  super(scenarioEndpoint);
  this.xPathPayloadMappingKeyExtractor.setNamespaceContextBuilder(namespaceContextBuilder);
  this.xPathPayloadMappingKeyExtractor.setXpathExpression(expression);
  this.value=value;
}",0.634090909090909
24536,"/** 
 * Start new message correlation so scenario is provided with additional inbound messages.
 * @return
 */
public CorrelationManager correlation(){
  return () -> {
    CorrelationHandlerBuilder builder=new CorrelationHandlerBuilder(scenarioEndpoint);
    action(builder);
    doFinally().actions(builder.stop());
    return builder;
  }
;
}","/** 
 * Start new message correlation so scenario is provided with additional inbound messages.
 * @return
 */
public CorrelationManager correlation(){
  return () -> {
    CorrelationHandlerBuilder builder=new CorrelationHandlerBuilder(scenarioEndpoint,getApplicationContext());
    action(builder);
    doFinally().actions(builder.stop());
    return builder;
  }
;
}",0.9663865546218487
24537,"/** 
 * Start new message correlation so scenario is provided with additional inbound messages.
 * @return
 */
public StartCorrelationHandlerAction correlation(CorrelationBuilderSupport configurer){
  CorrelationHandlerBuilder builder=new CorrelationHandlerBuilder(scenarioEndpoint);
  configurer.configure(() -> builder);
  doFinally().actions(builder.stop());
  return run(builder.build());
}","/** 
 * Start new message correlation so scenario is provided with additional inbound messages.
 * @return
 */
public StartCorrelationHandlerAction correlation(CorrelationBuilderSupport configurer){
  CorrelationHandlerBuilder builder=new CorrelationHandlerBuilder(scenarioEndpoint,getApplicationContext());
  configurer.configure(() -> builder);
  doFinally().actions(builder.stop());
  return run(builder.build());
}",0.9704433497536946
24538,"@PostConstruct private void init(){
  scenarios=applicationContext.getBeansOfType(SimulatorScenario.class);
  log.info(String.format(""String_Node_Str"",Arrays.toString(scenarios.keySet().toArray())));
  scenarioStarters=applicationContext.getBeansOfType(ScenarioStarter.class);
  log.info(String.format(""String_Node_Str"",Arrays.toString(scenarioStarters.keySet().toArray())));
}","@PostConstruct private void init(){
  scenarios=findSimulatorScenarios(applicationContext);
  scenarioStarters=findScenarioStarters(applicationContext);
}",0.4143126177024482
24539,"private Future<?> startScenarioAsync(Long executionId,String name,SimulatorScenario scenario,List<ScenarioParameter> scenarioParameters){
  final ExecutorService executorService=Executors.newSingleThreadExecutor(r -> {
    Thread t=((ThreadFactory)r1 -> new Thread(r1,""String_Node_Str"" + name)).newThread(r);
    t.setDaemon(true);
    return t;
  }
);
  return executorService.submit(() -> {
    try {
      if (scenario instanceof Executable) {
        if (scenarioParameters != null) {
          scenarioParameters.forEach(p -> addVariable(scenario,p.getName(),p.getValue()));
        }
        addVariable(scenario,ScenarioExecution.EXECUTION_ID,executionId);
        ((Executable)scenario).execute();
      }
 else {
        TestContext context=citrus.createTestContext();
        ReflectionUtils.doWithLocalMethods(scenario.getClass(),m -> {
          if (!m.getName().equals(""String_Node_Str"")) {
            return;
          }
          if (m.getParameterCount() != 1) {
            throw new SimulatorException(""String_Node_Str"" + m.getParameterCount());
          }
          Class<?> parameterType=m.getParameterTypes()[0];
          if (parameterType.equals(ScenarioDesigner.class)) {
            ScenarioDesigner designer=new ScenarioDesigner(scenario.getScenarioEndpoint(),citrus.getApplicationContext(),context);
            if (scenarioParameters != null) {
              scenarioParameters.forEach(p -> designer.variable(p.getName(),p.getValue()));
            }
            designer.variable(ScenarioExecution.EXECUTION_ID,executionId);
            CitrusAnnotations.injectAll(scenario,citrus,context);
            ReflectionUtils.invokeMethod(m,scenario,designer);
            citrus.run(designer.getTestCase(),context);
          }
 else           if (parameterType.equals(ScenarioRunner.class)) {
            ScenarioRunner runner=new ScenarioRunner(scenario.getScenarioEndpoint(),citrus.getApplicationContext(),context);
            if (scenarioParameters != null) {
              scenarioParameters.forEach(p -> runner.variable(p.getName(),p.getValue()));
            }
            runner.variable(ScenarioExecution.EXECUTION_ID,executionId);
            CitrusAnnotations.injectAll(scenario,citrus,context);
            try {
              runner.start();
              ReflectionUtils.invokeMethod(m,scenario,runner);
            }
  finally {
              runner.stop();
            }
          }
 else {
            throw new SimulatorException(""String_Node_Str"" + parameterType);
          }
        }
);
      }
      log.debug(String.format(""String_Node_Str"",name));
    }
 catch (    Exception e) {
      log.error(String.format(""String_Node_Str"",name),e);
    }
    executorService.shutdownNow();
  }
);
}","private Future<?> startScenarioAsync(Long executionId,String name,SimulatorScenario scenario,List<ScenarioParameter> scenarioParameters){
  final ExecutorService executorService=Executors.newSingleThreadExecutor(r -> {
    Thread t=new Thread(r,""String_Node_Str"" + name);
    t.setDaemon(true);
    return t;
  }
);
  return executorService.submit(() -> {
    try {
      if (scenario instanceof Executable) {
        if (scenarioParameters != null) {
          scenarioParameters.forEach(p -> addVariable(scenario,p.getName(),p.getValue()));
        }
        addVariable(scenario,ScenarioExecution.EXECUTION_ID,executionId);
        ((Executable)scenario).execute();
      }
 else {
        TestContext context=citrus.createTestContext();
        ReflectionUtils.doWithLocalMethods(scenario.getClass(),m -> {
          if (!m.getName().equals(""String_Node_Str"")) {
            return;
          }
          if (m.getParameterCount() != 1) {
            throw new SimulatorException(""String_Node_Str"" + m.getParameterCount());
          }
          Class<?> parameterType=m.getParameterTypes()[0];
          if (parameterType.equals(ScenarioDesigner.class)) {
            ScenarioDesigner designer=new ScenarioDesigner(scenario.getScenarioEndpoint(),citrus.getApplicationContext(),context);
            if (scenarioParameters != null) {
              scenarioParameters.forEach(p -> designer.variable(p.getName(),p.getValue()));
            }
            designer.variable(ScenarioExecution.EXECUTION_ID,executionId);
            CitrusAnnotations.injectAll(scenario,citrus,context);
            ReflectionUtils.invokeMethod(m,scenario,designer);
            citrus.run(designer.getTestCase(),context);
          }
 else           if (parameterType.equals(ScenarioRunner.class)) {
            ScenarioRunner runner=new ScenarioRunner(scenario.getScenarioEndpoint(),citrus.getApplicationContext(),context);
            if (scenarioParameters != null) {
              scenarioParameters.forEach(p -> runner.variable(p.getName(),p.getValue()));
            }
            runner.variable(ScenarioExecution.EXECUTION_ID,executionId);
            CitrusAnnotations.injectAll(scenario,citrus,context);
            try {
              runner.start();
              ReflectionUtils.invokeMethod(m,scenario,runner);
            }
  finally {
              runner.stop();
            }
          }
 else {
            throw new SimulatorException(""String_Node_Str"" + parameterType);
          }
        }
);
      }
      log.debug(String.format(""String_Node_Str"",name));
    }
 catch (    Exception e) {
      log.error(String.format(""String_Node_Str"",name),e);
    }
    executorService.shutdownNow();
  }
);
}",0.9909943025179196
24540,"@Override public Collection<ScenarioParameter> lookupScenarioParameters(String scenarioName){
  if (scenarioStarters.containsKey(scenarioName)) {
    return scenarioStarters.get(scenarioName).getScenarioParameters();
  }
  return Collections.EMPTY_LIST;
}","@Override public Collection<ScenarioParameter> lookupScenarioParameters(String scenarioName){
  if (scenarioStarters.containsKey(scenarioName)) {
    return scenarioStarters.get(scenarioName).getScenarioParameters();
  }
  return Collections.emptyList();
}",0.9628180039138944
24541,"/** 
 * Adds a new variable to the testExecutable using the supplied key an value.
 * @param scenario
 * @param key            variable name
 * @param value          variable value
 */
private void addVariable(SimulatorScenario scenario,String key,Object value){
  if (scenario instanceof TestDesigner) {
    ((TestDesigner)scenario).variable(key,value);
  }
  if (scenario instanceof TestRunner) {
    ((TestRunner)scenario).variable(key,value);
  }
}","/** 
 * Adds a new variable to the testExecutable using the supplied key an value.
 * @param scenario
 * @param key      variable name
 * @param value    variable value
 */
private void addVariable(SimulatorScenario scenario,String key,Object value){
  if (scenario instanceof TestDesigner) {
    ((TestDesigner)scenario).variable(key,value);
  }
  if (scenario instanceof TestRunner) {
    ((TestRunner)scenario).variable(key,value);
  }
}",0.9865470852017936
24542,"/** 
 * Start up runnable in separate thread.
 */
public void start(){
  running=true;
  taskExecutor.execute(this);
}","/** 
 * Start up runnable in separate thread.
 */
public void start(){
  running=true;
  taskExecutor.setDaemon(true);
  taskExecutor.execute(this);
}",0.8805970149253731
24543,"@Override public final Long run(String name,List<ScenarioParameter> scenarioParameters){
  log.info(String.format(""String_Node_Str"",name));
  Executable testExecutable=applicationContext.getBean(name,Executable.class);
  if (testExecutable instanceof ApplicationContextAware) {
    ((ApplicationContextAware)testExecutable).setApplicationContext(applicationContext);
  }
  prepare(testExecutable);
  if (scenarioParameters != null) {
    scenarioParameters.forEach(p -> addTestVariable(testExecutable,p.getName(),p.getValue()));
  }
  ScenarioExecution es=activityService.createExecutionScenario(name,scenarioParameters);
  addTestVariable(testExecutable,ScenarioExecution.EXECUTION_ID,es.getExecutionId());
  ExecutorService executor=Executors.newSingleThreadExecutor();
  executor.submit(() -> {
    log.debug(String.format(""String_Node_Str"",name));
    try {
      testExecutable.execute();
      log.debug(String.format(""String_Node_Str"",name));
    }
 catch (    Exception e) {
      log.error(String.format(""String_Node_Str"",name),e);
    }
  }
);
  return es.getExecutionId();
}","@Override public final Long run(String name,List<ScenarioParameter> scenarioParameters){
  log.info(String.format(""String_Node_Str"",name));
  Executable testExecutable=applicationContext.getBean(name,Executable.class);
  if (testExecutable instanceof ApplicationContextAware) {
    ((ApplicationContextAware)testExecutable).setApplicationContext(applicationContext);
  }
  prepare(testExecutable);
  if (scenarioParameters != null) {
    scenarioParameters.forEach(p -> addTestVariable(testExecutable,p.getName(),p.getValue()));
  }
  ScenarioExecution es=activityService.createExecutionScenario(name,scenarioParameters);
  addTestVariable(testExecutable,ScenarioExecution.EXECUTION_ID,es.getExecutionId());
  executeScenarioAsync(name,testExecutable);
  return es.getExecutionId();
}",0.7972177635098984
24544,"/** 
 * Tests the UpdateFaxStatus simulation starter. It launches the simulation started via the simulator's REST interface and verifies that the status update was sent.
 */
public void testUpdateFaxStatusStarter(){
  ReferenceId referenceId=new ReferenceId();
  Status status=new Status(FaxStatusEnumType.QUEUED);
  StatusMessage statusMessage=new StatusMessage(""String_Node_Str"");
  http().client(restEndpoint).send().post(""String_Node_Str"").contentType(""String_Node_Str"").payload(asJson(referenceId.asScenarioParameter(),status.asScenarioParameter(),statusMessage.asScenarioParameter()));
  receive(simulatorOutboundEndpoint).payload(payloadHelper.generateFaxStatusMessage(referenceId.getValue(),FaxStatusEnumType.QUEUED,statusMessage.getValue()),payloadHelper.getMarshaller());
}","/** 
 * Tests the UpdateFaxStatus simulation starter. It launches the simulation started via the simulator's REST interface and verifies that the status update was sent.
 */
@CitrusTest public void testUpdateFaxStatusStarter(){
  ReferenceId referenceId=new ReferenceId();
  Status status=new Status(FaxStatusEnumType.QUEUED);
  StatusMessage statusMessage=new StatusMessage(""String_Node_Str"");
  http().client(restEndpoint).send().post(""String_Node_Str"").contentType(""String_Node_Str"").payload(asJson(referenceId.asScenarioParameter(),status.asScenarioParameter(),statusMessage.asScenarioParameter()));
  http().client(restEndpoint).receive().response(HttpStatus.OK);
  receive(simulatorOutboundEndpoint).payload(payloadHelper.generateFaxStatusMessage(referenceId.getValue(),FaxStatusEnumType.QUEUED,statusMessage.getValue()),payloadHelper.getMarshaller());
}",0.953134510042605
24545,"@Override public void onTestActionFinish(TestCase testCase,TestAction testAction){
  executionService.completeTestAction(testCase,testAction);
}","@Override public void onTestActionFinish(TestCase testCase,TestAction testAction){
  if (!ignoreTestAction(testAction)) {
    executionService.completeTestAction(testCase,testAction);
  }
}",0.8648648648648649
24546,"@Override public void onTestActionStart(TestCase testCase,TestAction testAction){
  if (!testAction.getClass().equals(SleepAction.class)) {
    LOG.debug(testCase.getName() + ""String_Node_Str"" + StringUtils.arrayToCommaDelimitedString(getParameters(testCase))+ ""String_Node_Str""+ testAction.getName()+ ""String_Node_Str""+ (StringUtils.hasText(testAction.getDescription()) ? testAction.getDescription() : ""String_Node_Str""));
    executionService.createTestAction(testCase,testAction);
  }
}","@Override public void onTestActionStart(TestCase testCase,TestAction testAction){
  if (!ignoreTestAction(testAction)) {
    LOG.debug(testCase.getName() + ""String_Node_Str"" + StringUtils.arrayToCommaDelimitedString(getParameters(testCase))+ ""String_Node_Str""+ testAction.getName()+ ""String_Node_Str""+ (StringUtils.hasText(testAction.getDescription()) ? testAction.getDescription() : ""String_Node_Str""));
    executionService.createTestAction(testCase,testAction);
  }
}",0.9238790406673618
24547,"@Override public List<ScenarioParameter> getScenarioParameter(){
  List<ScenarioParameter> parameters=new ArrayList<ScenarioParameter>();
  parameters.add(new ScenarioParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").addScenarioFilter(HelloStarter.class));
  return parameters;
}","@Override public List<ScenarioParameter> getScenarioParameter(){
  List<ScenarioParameter> parameters=new ArrayList<>();
  parameters.add(new ScenarioParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").addScenarioFilter(HelloStarter.class));
  return parameters;
}",0.9702276707530648
24548,"@Override public List<ScenarioParameter> getScenarioParameter(){
  List<ScenarioParameter> parameters=new ArrayList<ScenarioParameter>();
  parameters.add(new ScenarioParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").addScenarioFilter(HelloStarter.class));
  return parameters;
}","@Override public List<ScenarioParameter> getScenarioParameter(){
  List<ScenarioParameter> parameters=new ArrayList<>();
  parameters.add(new ScenarioParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").addScenarioFilter(HelloStarter.class));
  return parameters;
}",0.9702276707530648
24549,"@Override public List<ScenarioParameter> getScenarioParameter(){
  List<ScenarioParameter> parameters=new ArrayList<ScenarioParameter>();
  parameters.add(new ScenarioParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").addScenarioFilter(HelloStarter.class));
  return parameters;
}","@Override public List<ScenarioParameter> getScenarioParameter(){
  List<ScenarioParameter> parameters=new ArrayList<>();
  parameters.add(new ScenarioParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").addScenarioFilter(HelloStarter.class));
  return parameters;
}",0.9702276707530648
24550,"public void frameworkEvent(FrameworkEvent event){
  if (event.getType() != FrameworkEvent.PACKAGES_REFRESHED)   return;
  long bundleID=bundlesToKill.removeLast().longValue();
  System.out.println(""String_Node_Str"" + bundleID);
  j3.vm.OSGi.resetReferencesToBundle(bundleID);
}","public void frameworkEvent(FrameworkEvent event){
  if (event.getType() != FrameworkEvent.PACKAGES_REFRESHED)   return;
  if (bundlesToKill.isEmpty())   return;
  long bundleID=bundlesToKill.removeLast().longValue();
  System.out.println(""String_Node_Str"" + bundleID);
  j3.vm.OSGi.resetReferencesToBundle(bundleID);
}",0.93109243697479
24551,"public void tracePageAcquired(Space space,Address startAddress,int numPages){
}","public native void tracePageAcquired(Space space,Address startAddress,int numPages);",0.9325153374233128
24552,"public void heapSizeChanged(Extent heapSize){
}",public native void heapSizeChanged(Extent heapSize);,0.8888888888888888
24553,"public void tracePageReleased(Space space,Address startAddress,int numPages){
}","public native void tracePageReleased(Space space,Address startAddress,int numPages);",0.9325153374233128
24554,"@Override public String dataSourceIngestNow(List<DataSourceUI> dataSourceUIList) throws ServerSideException {
  try {
    for (    DataSourceUI dataSourceUI : dataSourceUIList) {
      DataSource dataSource=ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager().getDataSourceContainer(dataSourceUI.getDataSourceSet()).getDataSource();
      if (dataSource == null) {
        return ""String_Node_Str"";
      }
      int oldValue=dataSource.getMaxRecord4Sample();
      ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager().startIngestDataSource(dataSourceUI.getDataSourceSet(),true,oldValue != -1);
    }
  }
 catch (  ObjectNotFoundException e) {
    return ""String_Node_Str"";
  }
catch (  AlreadyExistsException e) {
    return ""String_Node_Str"";
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new ServerSideException(Util.stackTraceToString(e));
  }
  return ""String_Node_Str"";
}","@Override public String dataSourceIngestNow(List<DataSourceUI> dataSourceUIList) throws ServerSideException {
  try {
    for (    DataSourceUI dataSourceUI : dataSourceUIList) {
      DataSource dataSource=ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager().getDataSourceContainer(dataSourceUI.getDataSourceSet()).getDataSource();
      if (dataSource == null) {
        return ""String_Node_Str"";
      }
      ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager().startIngestDataSource(dataSourceUI.getDataSourceSet(),true,!dataSource.isSample());
    }
  }
 catch (  ObjectNotFoundException e) {
    return ""String_Node_Str"";
  }
catch (  AlreadyExistsException e) {
    return ""String_Node_Str"";
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new ServerSideException(Util.stackTraceToString(e));
  }
  return ""String_Node_Str"";
}",0.8173340647284696
24555,"public static SaveDataResponse saveDataSource(boolean update,DatasetType type,String originalDSset,DataSourceUI dataSourceUI,int pageSize) throws ServerSideException {
  SaveDataResponse saveDataResponse=new SaveDataResponse();
  try {
    DefaultRepoxManager repoxManagerEuropeana=(DefaultRepoxManager)ConfigSingleton.getRepoxContextUtil().getRepoxManager();
    ResponseState urlStatus=Util.getUrlStatus(dataSourceUI);
    if (urlStatus != null) {
      saveDataResponse.setResponseState(urlStatus);
      return saveDataResponse;
    }
    MetadataTransformationManager metadataTransformationManager=ConfigSingleton.getRepoxContextUtil().getRepoxManager().getMetadataTransformationManager();
    Map<String,MetadataTransformation> metadataTransformations=new HashMap<String,MetadataTransformation>();
    for (    TransformationUI transformationUI : dataSourceUI.getMetadataTransformations()) {
      MetadataTransformation loadedTransformation=metadataTransformationManager.loadMetadataTransformation(transformationUI.getIdentifier());
      metadataTransformations.put(transformationUI.getIdentifier(),loadedTransformation);
    }
    List<ExternalRestService> externalRestServices=saveExternalServices(dataSourceUI);
    if (update) {
      DataSourceContainer dataSourceContainer=repoxManagerEuropeana.getDataManager().getDataSourceContainer(dataSourceUI.getDataSourceSet());
      DataSourceContainer originalDSC=repoxManagerEuropeana.getDataManager().getDataSourceContainer(originalDSset);
      if (dataSourceContainer != null && !originalDSC.getDataSource().getId().equals(dataSourceUI.getDataSourceSet())) {
        saveDataResponse.setResponseState(ResponseState.ALREADY_EXISTS);
        return saveDataResponse;
      }
      DataSource createdDataSource=null;
      try {
        if (type == DatasetType.OAI) {
          createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceOai(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getOaiSource(),dataSourceUI.getOaiSet(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat(),dataSourceUI.isUseLastUpdateDate());
        }
 else         if (type == DatasetType.SRU) {
          createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceSruRecordUpdate(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat(),dataSourceUI.isUseLastUpdateDate());
        }
 else         if (type == DatasetType.FOLDER) {
          if (dataSourceUI.getRetrieveStartegy().equals(FolderFileRetrieveStrategy.FOLDERFILERETRIEVESTRATEGY)) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceFolder(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getIsoVariant(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,dataSourceUI.getRecordRootName(),dataSourceUI.getDirPath(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat(),dataSourceUI.isUseLastUpdateDate());
          }
 else           if (dataSourceUI.getRetrieveStartegy().equals(FtpFileRetrieveStrategy.FTPFILERETRIEVESTRATEGY)) {
            if (dataSourceUI.getUser() != null && !dataSourceUI.getUser().isEmpty()) {
              if (!FileUtilSecond.checkFtpServer(dataSourceUI.getServer(),""String_Node_Str"",dataSourceUI.getFolderPath(),dataSourceUI.getUser(),dataSourceUI.getPassword())) {
                saveDataResponse.setResponseState(ResponseState.FTP_CONNECTION_FAILED);
                return saveDataResponse;
              }
            }
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceFtp(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getIsoVariant(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,dataSourceUI.getRecordRootName(),dataSourceUI.getServer(),dataSourceUI.getUser(),dataSourceUI.getPassword(),dataSourceUI.getFolderPath(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat(),dataSourceUI.isUseLastUpdateDate());
          }
 else           if (dataSourceUI.getRetrieveStartegy().equals(HttpFileRetrieveStrategy.HTTPFILERETRIEVESTRATEGY)) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceHttp(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getIsoVariant(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,dataSourceUI.getRecordRootName(),dataSourceUI.getHttpURL(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat(),dataSourceUI.isUseLastUpdateDate());
          }
        }
 else         if (type == DatasetType.Z39) {
          if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceZ3950IdSequence(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getZ39Address(),dataSourceUI.getZ39Port(),dataSourceUI.getZ39Database(),dataSourceUI.getZ39User(),dataSourceUI.getZ39Password(),dataSourceUI.getZ39RecordSyntax(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getZ39MaximumId(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,metadataTransformations,externalRestServices,dataSourceUI.isUseLastUpdateDate());
          }
 else           if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
            File z3950=null;
            if (!Z39FileUpload.ignoreUploadFile()) {
              z3950=Z39FileUpload.getZ39TempFile();
              Z39FileUpload.deleteTempFile();
            }
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceZ3950IdList(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getZ39Address(),dataSourceUI.getZ39Port(),dataSourceUI.getZ39Database(),dataSourceUI.getZ39User(),dataSourceUI.getZ39Password(),dataSourceUI.getZ39RecordSyntax(),dataSourceUI.getCharacterEncoding(),z3950 != null ? z3950.getAbsolutePath() : ""String_Node_Str"",dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,metadataTransformations,externalRestServices,dataSourceUI.isUseLastUpdateDate());
          }
 else           if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
            Format formatter=new SimpleDateFormat(""String_Node_Str"");
            String earliestDateString=formatter.format(dataSourceUI.getZ39EarlistDate());
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceZ3950Timestamp(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getZ39Address(),dataSourceUI.getZ39Port(),dataSourceUI.getZ39Database(),dataSourceUI.getZ39User(),dataSourceUI.getZ39Password(),dataSourceUI.getZ39RecordSyntax(),dataSourceUI.getCharacterEncoding(),earliestDateString,dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,metadataTransformations,externalRestServices,dataSourceUI.isUseLastUpdateDate());
          }
        }
        if (dataSourceUI.getExternalServicesRunType() != null)         createdDataSource.setExternalServicesRunType(ExternalServiceStates.ContainerType.valueOf(dataSourceUI.getExternalServicesRunType()));
        replaceExportPathWithUpdatedId(originalDSset,dataSourceUI,createdDataSource);
        ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager().setDataSetSampleState(dataSourceUI.isSample(),createdDataSource);
        createdDataSource.getTags().clear();
        for (        DataSetTagUI dataSetTagUI : dataSourceUI.getTags()) {
          createdDataSource.getTags().add(new DataSourceTag(dataSetTagUI.getName()));
        }
        ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager().saveData();
        saveDataResponse.setPage(PagingUtil.getDataPage(createdDataSource.getId(),pageSize));
        saveDataResponse.setResponseState(ResponseState.SUCCESS);
      }
 catch (      ParseException e) {
        saveDataResponse.setResponseState(ResponseState.OTHER);
      }
catch (      ObjectNotFoundException e) {
        saveDataResponse.setResponseState(ResponseState.NOT_FOUND);
      }
catch (      InvalidArgumentsException e) {
        saveDataResponse.setResponseState(ResponseState.INVALID_ARGUMENTS);
      }
catch (      IncompatibleInstanceException e) {
        saveDataResponse.setResponseState(ResponseState.INCOMPATIBLE_TYPE);
      }
      return saveDataResponse;
    }
 else {
      DataSourceContainer dataSourceContainerTest=repoxManagerEuropeana.getDataManager().getDataSourceContainer(dataSourceUI.getDataSourceSet());
      if (dataSourceContainerTest != null) {
        saveDataResponse.setResponseState(ResponseState.ALREADY_EXISTS);
        return saveDataResponse;
      }
      DataSource createdDataSource=null;
      try {
        if (type == DatasetType.OAI) {
          createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceOai(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getOaiSource(),dataSourceUI.getOaiSet(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat());
        }
 else         if (type == DatasetType.SRU) {
          createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceSruRecordUpdate(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat());
        }
 else         if (type == DatasetType.FOLDER) {
          if (dataSourceUI.getRetrieveStartegy().equals(FolderFileRetrieveStrategy.FOLDERFILERETRIEVESTRATEGY)) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceFolder(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getIsoVariant(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,dataSourceUI.getRecordRootName(),dataSourceUI.getDirPath(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat());
          }
 else           if (dataSourceUI.getRetrieveStartegy().equals(FtpFileRetrieveStrategy.FTPFILERETRIEVESTRATEGY)) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            if (dataSourceUI.getUser() != null && !dataSourceUI.getUser().isEmpty()) {
              if (!FileUtilSecond.checkFtpServer(dataSourceUI.getServer(),""String_Node_Str"",dataSourceUI.getFolderPath(),dataSourceUI.getUser(),dataSourceUI.getPassword())) {
                saveDataResponse.setResponseState(ResponseState.FTP_CONNECTION_FAILED);
                return saveDataResponse;
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceFtp(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getIsoVariant(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,dataSourceUI.getRecordRootName(),dataSourceUI.getServer(),dataSourceUI.getUser(),dataSourceUI.getPassword(),dataSourceUI.getFolderPath(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat());
          }
 else           if (dataSourceUI.getRetrieveStartegy().equals(HttpFileRetrieveStrategy.HTTPFILERETRIEVESTRATEGY)) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceHttp(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getIsoVariant(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,dataSourceUI.getRecordRootName(),dataSourceUI.getHttpURL(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat());
          }
        }
 else         if (type == DatasetType.Z39) {
          if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceZ3950IdSequence(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getZ39Address(),dataSourceUI.getZ39Port(),dataSourceUI.getZ39Database(),dataSourceUI.getZ39User(),dataSourceUI.getZ39Password(),dataSourceUI.getZ39RecordSyntax(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getZ39MaximumId(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,metadataTransformations,externalRestServices);
          }
 else           if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
            File z3950=null;
            if (!Z39FileUpload.ignoreUploadFile()) {
              z3950=Z39FileUpload.getZ39TempFile();
              Z39FileUpload.deleteTempFile();
            }
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceZ3950IdList(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getZ39Address(),dataSourceUI.getZ39Port(),dataSourceUI.getZ39Database(),dataSourceUI.getZ39User(),dataSourceUI.getZ39Password(),dataSourceUI.getZ39RecordSyntax(),dataSourceUI.getCharacterEncoding(),z3950.getAbsolutePath(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,metadataTransformations,externalRestServices);
          }
 else           if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
            Format formatter=new SimpleDateFormat(""String_Node_Str"");
            String earliestDateString=formatter.format(dataSourceUI.getZ39EarlistDate());
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceZ3950Timestamp(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getZ39Address(),dataSourceUI.getZ39Port(),dataSourceUI.getZ39Database(),dataSourceUI.getZ39User(),dataSourceUI.getZ39Password(),dataSourceUI.getZ39RecordSyntax(),dataSourceUI.getCharacterEncoding(),earliestDateString,dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,metadataTransformations,externalRestServices);
          }
        }
      }
 catch (      SQLException e) {
        saveDataResponse.setResponseState(ResponseState.ERROR_DATABASE);
        return saveDataResponse;
      }
catch (      ObjectNotFoundException e) {
        saveDataResponse.setResponseState(ResponseState.NOT_FOUND);
        return saveDataResponse;
      }
catch (      AlreadyExistsException e) {
        saveDataResponse.setResponseState(ResponseState.ALREADY_EXISTS);
        return saveDataResponse;
      }
catch (      InvalidArgumentsException e) {
        saveDataResponse.setResponseState(ResponseState.INVALID_ARGUMENTS);
        return saveDataResponse;
      }
catch (      ParseException e) {
        saveDataResponse.setResponseState(ResponseState.OTHER);
        return saveDataResponse;
      }
      if (dataSourceUI.getExternalServicesRunType() != null)       createdDataSource.setExternalServicesRunType(ExternalServiceStates.ContainerType.valueOf(dataSourceUI.getExternalServicesRunType()));
      createdDataSource.setExportDir(dataSourceUI.getExportDirectory());
      ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager().setDataSetSampleState(dataSourceUI.isSample(),createdDataSource);
      createdDataSource.getTags().clear();
      for (      DataSetTagUI dataSetTagUI : dataSourceUI.getTags()) {
        createdDataSource.getTags().add(new DataSourceTag(dataSetTagUI.getName()));
      }
      ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager().saveData();
      saveDataResponse.setPage(PagingUtil.getDataPage(createdDataSource.getId(),pageSize));
      saveDataResponse.setResponseState(ResponseState.SUCCESS);
      return saveDataResponse;
    }
  }
 catch (  DocumentException e) {
    saveDataResponse.setResponseState(ResponseState.OTHER);
    return saveDataResponse;
  }
catch (  IOException e) {
    saveDataResponse.setResponseState(ResponseState.OTHER);
    return saveDataResponse;
  }
}","public static SaveDataResponse saveDataSource(boolean update,DatasetType type,String originalDSset,DataSourceUI dataSourceUI,int pageSize) throws ServerSideException {
  SaveDataResponse saveDataResponse=new SaveDataResponse();
  try {
    DefaultRepoxManager repoxManagerEuropeana=(DefaultRepoxManager)ConfigSingleton.getRepoxContextUtil().getRepoxManager();
    ResponseState urlStatus=Util.getUrlStatus(dataSourceUI);
    if (urlStatus != null) {
      saveDataResponse.setResponseState(urlStatus);
      return saveDataResponse;
    }
    MetadataTransformationManager metadataTransformationManager=ConfigSingleton.getRepoxContextUtil().getRepoxManager().getMetadataTransformationManager();
    Map<String,MetadataTransformation> metadataTransformations=new HashMap<String,MetadataTransformation>();
    for (    TransformationUI transformationUI : dataSourceUI.getMetadataTransformations()) {
      MetadataTransformation loadedTransformation=metadataTransformationManager.loadMetadataTransformation(transformationUI.getIdentifier());
      metadataTransformations.put(transformationUI.getIdentifier(),loadedTransformation);
    }
    List<ExternalRestService> externalRestServices=saveExternalServices(dataSourceUI);
    if (update) {
      DataSourceContainer dataSourceContainer=repoxManagerEuropeana.getDataManager().getDataSourceContainer(dataSourceUI.getDataSourceSet());
      DataSourceContainer originalDSC=repoxManagerEuropeana.getDataManager().getDataSourceContainer(originalDSset);
      if (dataSourceContainer != null && !originalDSC.getDataSource().getId().equals(dataSourceUI.getDataSourceSet())) {
        saveDataResponse.setResponseState(ResponseState.ALREADY_EXISTS);
        return saveDataResponse;
      }
      DataSource createdDataSource=null;
      try {
        if (type == DatasetType.OAI) {
          createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceOai(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getOaiSource(),dataSourceUI.getOaiSet(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat(),dataSourceUI.isUseLastUpdateDate());
        }
 else         if (type == DatasetType.SRU) {
          createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceSruRecordUpdate(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat(),dataSourceUI.isUseLastUpdateDate());
        }
 else         if (type == DatasetType.FOLDER) {
          if (dataSourceUI.getRetrieveStartegy().equals(FolderFileRetrieveStrategy.FOLDERFILERETRIEVESTRATEGY)) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceFolder(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getIsoVariant(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,dataSourceUI.getRecordRootName(),dataSourceUI.getDirPath(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat(),dataSourceUI.isUseLastUpdateDate());
          }
 else           if (dataSourceUI.getRetrieveStartegy().equals(FtpFileRetrieveStrategy.FTPFILERETRIEVESTRATEGY)) {
            if (dataSourceUI.getUser() != null && !dataSourceUI.getUser().isEmpty()) {
              if (!FileUtilSecond.checkFtpServer(dataSourceUI.getServer(),""String_Node_Str"",dataSourceUI.getFolderPath(),dataSourceUI.getUser(),dataSourceUI.getPassword())) {
                saveDataResponse.setResponseState(ResponseState.FTP_CONNECTION_FAILED);
                return saveDataResponse;
              }
            }
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceFtp(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getIsoVariant(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,dataSourceUI.getRecordRootName(),dataSourceUI.getServer(),dataSourceUI.getUser(),dataSourceUI.getPassword(),dataSourceUI.getFolderPath(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat(),dataSourceUI.isUseLastUpdateDate());
          }
 else           if (dataSourceUI.getRetrieveStartegy().equals(HttpFileRetrieveStrategy.HTTPFILERETRIEVESTRATEGY)) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceHttp(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getIsoVariant(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,dataSourceUI.getRecordRootName(),dataSourceUI.getHttpURL(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat(),dataSourceUI.isUseLastUpdateDate());
          }
        }
 else         if (type == DatasetType.Z39) {
          if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceZ3950IdSequence(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getZ39Address(),dataSourceUI.getZ39Port(),dataSourceUI.getZ39Database(),dataSourceUI.getZ39User(),dataSourceUI.getZ39Password(),dataSourceUI.getZ39RecordSyntax(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getZ39MaximumId(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,metadataTransformations,externalRestServices,dataSourceUI.isUseLastUpdateDate());
          }
 else           if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
            File z3950=null;
            if (!Z39FileUpload.ignoreUploadFile()) {
              z3950=Z39FileUpload.getZ39TempFile();
              Z39FileUpload.deleteTempFile();
            }
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceZ3950IdList(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getZ39Address(),dataSourceUI.getZ39Port(),dataSourceUI.getZ39Database(),dataSourceUI.getZ39User(),dataSourceUI.getZ39Password(),dataSourceUI.getZ39RecordSyntax(),dataSourceUI.getCharacterEncoding(),z3950 != null ? z3950.getAbsolutePath() : ""String_Node_Str"",dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,metadataTransformations,externalRestServices,dataSourceUI.isUseLastUpdateDate());
          }
 else           if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
            Format formatter=new SimpleDateFormat(""String_Node_Str"");
            String earliestDateString=formatter.format(dataSourceUI.getZ39EarlistDate());
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().updateDataSourceZ3950Timestamp(originalDSset,dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getZ39Address(),dataSourceUI.getZ39Port(),dataSourceUI.getZ39Database(),dataSourceUI.getZ39User(),dataSourceUI.getZ39Password(),dataSourceUI.getZ39RecordSyntax(),dataSourceUI.getCharacterEncoding(),earliestDateString,dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,metadataTransformations,externalRestServices,dataSourceUI.isUseLastUpdateDate());
          }
        }
        if (dataSourceUI.getExternalServicesRunType() != null)         createdDataSource.setExternalServicesRunType(ExternalServiceStates.ContainerType.valueOf(dataSourceUI.getExternalServicesRunType()));
        replaceExportPathWithUpdatedId(originalDSset,dataSourceUI,createdDataSource);
        ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager().setDataSetSampleState(dataSourceUI.isSample(),createdDataSource);
        createdDataSource.getTags().clear();
        for (        DataSetTagUI dataSetTagUI : dataSourceUI.getTags()) {
          createdDataSource.getTags().add(new DataSourceTag(dataSetTagUI.getName()));
        }
        ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager().saveData();
        saveDataResponse.setPage(PagingUtil.getDataPage(createdDataSource.getId(),pageSize));
        saveDataResponse.setResponseState(ResponseState.SUCCESS);
      }
 catch (      ParseException e) {
        saveDataResponse.setResponseState(ResponseState.OTHER);
      }
catch (      ObjectNotFoundException e) {
        saveDataResponse.setResponseState(ResponseState.NOT_FOUND);
      }
catch (      InvalidArgumentsException e) {
        saveDataResponse.setResponseState(ResponseState.INVALID_ARGUMENTS);
      }
catch (      IncompatibleInstanceException e) {
        saveDataResponse.setResponseState(ResponseState.INCOMPATIBLE_TYPE);
      }
catch (      AlreadyExistsException e) {
        saveDataResponse.setResponseState(ResponseState.ALREADY_EXISTS);
      }
      return saveDataResponse;
    }
 else {
      DataSourceContainer dataSourceContainerTest=repoxManagerEuropeana.getDataManager().getDataSourceContainer(dataSourceUI.getDataSourceSet());
      if (dataSourceContainerTest != null) {
        saveDataResponse.setResponseState(ResponseState.ALREADY_EXISTS);
        return saveDataResponse;
      }
      DataSource createdDataSource=null;
      try {
        if (type == DatasetType.OAI) {
          createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceOai(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getOaiSource(),dataSourceUI.getOaiSet(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat());
        }
 else         if (type == DatasetType.SRU) {
          createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceSruRecordUpdate(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat());
        }
 else         if (type == DatasetType.FOLDER) {
          if (dataSourceUI.getRetrieveStartegy().equals(FolderFileRetrieveStrategy.FOLDERFILERETRIEVESTRATEGY)) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceFolder(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getIsoVariant(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,dataSourceUI.getRecordRootName(),dataSourceUI.getDirPath(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat());
          }
 else           if (dataSourceUI.getRetrieveStartegy().equals(FtpFileRetrieveStrategy.FTPFILERETRIEVESTRATEGY)) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            if (dataSourceUI.getUser() != null && !dataSourceUI.getUser().isEmpty()) {
              if (!FileUtilSecond.checkFtpServer(dataSourceUI.getServer(),""String_Node_Str"",dataSourceUI.getFolderPath(),dataSourceUI.getUser(),dataSourceUI.getPassword())) {
                saveDataResponse.setResponseState(ResponseState.FTP_CONNECTION_FAILED);
                return saveDataResponse;
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceFtp(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getIsoVariant(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,dataSourceUI.getRecordRootName(),dataSourceUI.getServer(),dataSourceUI.getUser(),dataSourceUI.getPassword(),dataSourceUI.getFolderPath(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat());
          }
 else           if (dataSourceUI.getRetrieveStartegy().equals(HttpFileRetrieveStrategy.HTTPFILERETRIEVESTRATEGY)) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceHttp(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getSourceMDFormat(),dataSourceUI.getIsoVariant(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,dataSourceUI.getRecordRootName(),dataSourceUI.getHttpURL(),metadataTransformations,externalRestServices,dataSourceUI.getMarcFormat());
          }
        }
 else         if (type == DatasetType.Z39) {
          if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceZ3950IdSequence(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getZ39Address(),dataSourceUI.getZ39Port(),dataSourceUI.getZ39Database(),dataSourceUI.getZ39User(),dataSourceUI.getZ39Password(),dataSourceUI.getZ39RecordSyntax(),dataSourceUI.getCharacterEncoding(),dataSourceUI.getZ39MaximumId(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,metadataTransformations,externalRestServices);
          }
 else           if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
            File z3950=null;
            if (!Z39FileUpload.ignoreUploadFile()) {
              z3950=Z39FileUpload.getZ39TempFile();
              Z39FileUpload.deleteTempFile();
            }
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceZ3950IdList(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getZ39Address(),dataSourceUI.getZ39Port(),dataSourceUI.getZ39Database(),dataSourceUI.getZ39User(),dataSourceUI.getZ39Password(),dataSourceUI.getZ39RecordSyntax(),dataSourceUI.getCharacterEncoding(),z3950.getAbsolutePath(),dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,metadataTransformations,externalRestServices);
          }
 else           if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
            Format formatter=new SimpleDateFormat(""String_Node_Str"");
            String earliestDateString=formatter.format(dataSourceUI.getZ39EarlistDate());
            Map<String,String> namespaces=new HashMap<String,String>();
            if (dataSourceUI.getRecordIdPolicy().equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
              for (int i=0; i < dataSourceUI.getNamespaceList().size(); i+=2) {
                namespaces.put(dataSourceUI.getNamespaceList().get(i),dataSourceUI.getNamespaceList().get(i + 1));
              }
            }
            createdDataSource=repoxManagerEuropeana.getDataManager().createDataSourceZ3950Timestamp(dataSourceUI.getDataSetParent().getId(),dataSourceUI.getDataSourceSet(),dataSourceUI.getDescription(),dataSourceUI.getNameCode(),dataSourceUI.getName(),dataSourceUI.getExportDirectory(),dataSourceUI.getSchema(),dataSourceUI.getMetadataNamespace(),dataSourceUI.getZ39Address(),dataSourceUI.getZ39Port(),dataSourceUI.getZ39Database(),dataSourceUI.getZ39User(),dataSourceUI.getZ39Password(),dataSourceUI.getZ39RecordSyntax(),dataSourceUI.getCharacterEncoding(),earliestDateString,dataSourceUI.getRecordIdPolicy(),dataSourceUI.getIdXPath(),namespaces,metadataTransformations,externalRestServices);
          }
        }
      }
 catch (      SQLException e) {
        saveDataResponse.setResponseState(ResponseState.ERROR_DATABASE);
        return saveDataResponse;
      }
catch (      ObjectNotFoundException e) {
        saveDataResponse.setResponseState(ResponseState.NOT_FOUND);
        return saveDataResponse;
      }
catch (      AlreadyExistsException e) {
        saveDataResponse.setResponseState(ResponseState.ALREADY_EXISTS);
        return saveDataResponse;
      }
catch (      InvalidArgumentsException e) {
        saveDataResponse.setResponseState(ResponseState.INVALID_ARGUMENTS);
        return saveDataResponse;
      }
catch (      ParseException e) {
        saveDataResponse.setResponseState(ResponseState.OTHER);
        return saveDataResponse;
      }
      if (dataSourceUI.getExternalServicesRunType() != null)       createdDataSource.setExternalServicesRunType(ExternalServiceStates.ContainerType.valueOf(dataSourceUI.getExternalServicesRunType()));
      createdDataSource.setExportDir(dataSourceUI.getExportDirectory());
      ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager().setDataSetSampleState(dataSourceUI.isSample(),createdDataSource);
      createdDataSource.getTags().clear();
      for (      DataSetTagUI dataSetTagUI : dataSourceUI.getTags()) {
        createdDataSource.getTags().add(new DataSourceTag(dataSetTagUI.getName()));
      }
      ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager().saveData();
      saveDataResponse.setPage(PagingUtil.getDataPage(createdDataSource.getId(),pageSize));
      saveDataResponse.setResponseState(ResponseState.SUCCESS);
      return saveDataResponse;
    }
  }
 catch (  DocumentException e) {
    saveDataResponse.setResponseState(ResponseState.OTHER);
    return saveDataResponse;
  }
catch (  IOException e) {
    saveDataResponse.setResponseState(ResponseState.OTHER);
    return saveDataResponse;
  }
}",0.997438911747418
24556,"public DataSource updateDataSourceOai(String oldId,String id,String description,String nameCode,String name,String exportPath,String schema,String namespace,String metadataFormat,String oaiSourceURL,String oaiSet,Map<String,MetadataTransformation> metadataTransformations,List<ExternalRestService> externalRestServices,String marcFormat,boolean useLastIngestDate) throws DocumentException, IOException, ObjectNotFoundException, InvalidArgumentsException, IncompatibleInstanceException {
  DefaultDataSourceContainer oldDataSourceContainer=(DefaultDataSourceContainer)getDataSourceContainer(oldId);
  if (oldDataSourceContainer != null) {
    DataSource dataSource=oldDataSourceContainer.getDataSource();
    if (!isIdValid(id))     throw new InvalidArgumentsException(id);
    if (!oaiSourceURL.startsWith(""String_Node_Str"") && !oaiSourceURL.startsWith(""String_Node_Str"")) {
      oaiSourceURL=""String_Node_Str"" + oaiSourceURL;
    }
    if (new java.net.URL(oaiSourceURL).openConnection().getHeaderField(0) != null && FileUtilSecond.checkUrl(oaiSourceURL)) {
      DataProvider dataProviderParent=getDataProviderParent(oldId);
      if (dataProviderParent != null) {
        if (!(dataSource instanceof OaiDataSource)) {
          DataSource newDataSource=new OaiDataSource(dataProviderParent,id,description,schema,namespace,metadataFormat,oaiSourceURL,oaiSet,new IdProvidedRecordIdPolicy(),new TreeMap<String,MetadataTransformation>());
          newDataSource.setAccessPoints(dataSource.getAccessPoints());
          newDataSource.setStatus(dataSource.getStatus());
          setLastIngestDate(useLastIngestDate,dataSource,newDataSource);
          newDataSource.setOldTasksList(dataSource.getOldTasksList());
          newDataSource.setTags(dataSource.getTags());
          DefaultDataSourceContainer dataSourceContainer=new DefaultDataSourceContainer(newDataSource,nameCode,name,exportPath);
          dataProviderParent.getDataSourceContainers().put(newDataSource.getId(),dataSourceContainer);
          dataSource=newDataSource;
        }
        dataSource.setId(id);
        dataSource.setDescription(description);
        dataSource.setSchema(schema);
        dataSource.setNamespace(namespace);
        dataSource.setMetadataFormat(metadataFormat);
        ((OaiDataSource)dataSource).setOaiSourceURL(oaiSourceURL);
        ((OaiDataSource)dataSource).setOaiSet(oaiSet);
        dataSource.setMetadataTransformations(metadataTransformations);
        dataSource.setExternalRestServices(externalRestServices);
        dataSource.setMarcFormat(marcFormat);
        dataSource.setExportDir(exportPath);
        if (!id.equals(oldId)) {
          DefaultDataSourceContainer dataSourceContainer=new DefaultDataSourceContainer(dataSource,nameCode,name,exportPath);
          updateDataSourceContainer(dataSourceContainer,oldId);
        }
 else {
          oldDataSourceContainer.setName(name);
          oldDataSourceContainer.setNameCode(nameCode);
        }
        updateDataProvider(dataProviderParent,dataProviderParent.getId());
        return dataSource;
      }
 else {
        throw new ObjectNotFoundException(id);
      }
    }
 else {
      throw new InvalidArgumentsException(oaiSourceURL);
    }
  }
 else {
    throw new ObjectNotFoundException(id);
  }
}","public DataSource updateDataSourceOai(String oldId,String id,String description,String nameCode,String name,String exportPath,String schema,String namespace,String metadataFormat,String oaiSourceURL,String oaiSet,Map<String,MetadataTransformation> metadataTransformations,List<ExternalRestService> externalRestServices,String marcFormat,boolean useLastIngestDate) throws DocumentException, IOException, ObjectNotFoundException, InvalidArgumentsException, AlreadyExistsException {
  DefaultDataSourceContainer oldDataSourceContainer=(DefaultDataSourceContainer)getDataSourceContainer(oldId);
  if (oldDataSourceContainer != null) {
    DataSource dataSource=oldDataSourceContainer.getDataSource();
    if (!oldId.equals(id) && getDataSourceContainer(id) != null)     throw new AlreadyExistsException(id);
    if (!isIdValid(id))     throw new InvalidArgumentsException(id);
    String newOaiSourceURL=oaiSourceURL;
    if (!newOaiSourceURL.startsWith(""String_Node_Str"") && !newOaiSourceURL.startsWith(""String_Node_Str"")) {
      newOaiSourceURL=""String_Node_Str"" + newOaiSourceURL;
    }
    if (new java.net.URL(newOaiSourceURL).openConnection().getHeaderField(0) != null && FileUtilSecond.checkUrl(newOaiSourceURL)) {
      DataProvider dataProviderParent=getDataProviderParent(oldId);
      if (dataProviderParent != null) {
        if (!(dataSource instanceof OaiDataSource)) {
          DataSource newDataSource=new OaiDataSource(dataProviderParent,id,description,schema,namespace,metadataFormat,newOaiSourceURL,oaiSet,new IdProvidedRecordIdPolicy(),new TreeMap<String,MetadataTransformation>());
          newDataSource.setAccessPoints(dataSource.getAccessPoints());
          newDataSource.setStatus(dataSource.getStatus());
          setLastIngestDate(useLastIngestDate,dataSource,newDataSource);
          newDataSource.setOldTasksList(dataSource.getOldTasksList());
          newDataSource.setTags(dataSource.getTags());
          DefaultDataSourceContainer dataSourceContainer=new DefaultDataSourceContainer(newDataSource,nameCode,name,exportPath);
          dataProviderParent.getDataSourceContainers().put(newDataSource.getId(),dataSourceContainer);
          dataSource=newDataSource;
        }
        dataSource.setId(id);
        dataSource.setDescription(description);
        dataSource.setSchema(schema);
        dataSource.setNamespace(namespace);
        dataSource.setMetadataFormat(metadataFormat);
        ((OaiDataSource)dataSource).setOaiSourceURL(newOaiSourceURL);
        ((OaiDataSource)dataSource).setOaiSet(oaiSet);
        dataSource.setMetadataTransformations(metadataTransformations);
        dataSource.setExternalRestServices(externalRestServices);
        dataSource.setMarcFormat(marcFormat);
        dataSource.setExportDir(exportPath);
        if (!id.equals(oldId)) {
          DefaultDataSourceContainer dataSourceContainer=new DefaultDataSourceContainer(dataSource,nameCode,name,exportPath);
          updateDataSourceContainer(dataSourceContainer,oldId);
        }
 else {
          oldDataSourceContainer.setName(name);
          oldDataSourceContainer.setNameCode(nameCode);
        }
        saveData();
        updateDataProvider(dataProviderParent,dataProviderParent.getId());
        return dataSource;
      }
 else {
        throw new ObjectNotFoundException(id);
      }
    }
 else {
      throw new InvalidArgumentsException(oaiSourceURL);
    }
  }
 else {
    throw new ObjectNotFoundException(id);
  }
}",0.9565088318242542
24557,"public void saveData(){
  String metadataFormat;
  if (mdPrefixesCombo.isVisible()) {
    metadataFormat=mdPrefixesCombo.getValue().getValue();
  }
 else   metadataFormat=dataSourceSchemaForm.getMetadataFormatCombo().getValue().getShortDesignation();
  String oai_url=oaiUrl.getValue().trim();
  String oai_set;
  if (oaiSet.isVisible())   oai_set=oaiSet.getValue();
 else   oai_set=setsCombo.getValue().getValue();
  String desc=description.getValue();
  if (dataSourceUI == null) {
    dataSourceUI=new DataSourceUI(parent,desc.trim(),""String_Node_Str"",metadataFormat + ""String_Node_Str"",""String_Node_Str"" + metadataFormat.trim(),parent.getCountry(),desc.trim(),""String_Node_Str"",oai_url.trim(),oai_set != null ? oai_set.trim() : ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",metadataFormat);
  }
  dataSourceUI.setIngest(""String_Node_Str"" + metadataFormat.trim());
  dataSourceUI.setSourceMDFormat(metadataFormat != null ? metadataFormat.trim() : ""String_Node_Str"");
  dataSourceUI.setOaiSource(oai_url != null ? oai_url.trim() : ""String_Node_Str"");
  dataSourceUI.setOaiSet((oai_set != null && !oai_set.equals(""String_Node_Str"") && !oai_set.equals(""String_Node_Str"")) ? oai_set.trim() : null);
  dataSourceUI.setExportDirectory(exportPath.getValue() != null ? exportPath.getValue().trim() : ""String_Node_Str"");
  dataSourceUI.setMarcFormat(dataSourceSchemaForm.getMarcFormat().trim());
  if (HarvesterUI.getProjectType() == ProjectType.DEFAULT)   saveDataSource(dataSourceUI,oldDataSetId,DatasetType.OAI,dataSourceSchemaForm.getSchema().getValue(),dataSourceSchemaForm.getMetadataNamespace().getValue(),metadataFormat,name.getValue(),nameCode.getValue(),exportPath.getValue());
 else   saveDataSource(dataSourceUI,oldDataSetId,DatasetType.OAI,dataSourceSchemaForm.getSchema().getValue(),dataSourceSchemaForm.getMetadataNamespace().getValue(),metadataFormat,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public void saveData(){
  String metadataFormat;
  if (mdPrefixesCombo.isVisible()) {
    metadataFormat=mdPrefixesCombo.getValue().getValue();
  }
 else   metadataFormat=dataSourceSchemaForm.getMetadataFormatCombo().getValue().getShortDesignation();
  String oai_url=oaiUrl.getValue().trim();
  String oai_set;
  if (oaiSet.isVisible())   oai_set=oaiSet.getValue();
 else   oai_set=setsCombo.getValue().getValue();
  String desc=description.getValue();
  if (dataSourceUI == null) {
    dataSourceUI=new DataSourceUI(parent,desc.trim(),""String_Node_Str"",metadataFormat + ""String_Node_Str"",""String_Node_Str"" + metadataFormat.trim(),parent.getCountry(),desc.trim(),""String_Node_Str"",oai_url.trim(),oai_set != null ? oai_set.trim() : ""String_Node_Str"",""String_Node_Str"",IdGeneratedRecordIdPolicy.IDGENERATED,metadataFormat);
  }
  dataSourceUI.setIngest(""String_Node_Str"" + metadataFormat.trim());
  dataSourceUI.setSourceMDFormat(metadataFormat != null ? metadataFormat.trim() : ""String_Node_Str"");
  dataSourceUI.setOaiSource(oai_url != null ? oai_url.trim() : ""String_Node_Str"");
  dataSourceUI.setOaiSet((oai_set != null && !oai_set.equals(""String_Node_Str"") && !oai_set.equals(""String_Node_Str"")) ? oai_set.trim() : null);
  dataSourceUI.setExportDirectory(exportPath.getValue() != null ? exportPath.getValue().trim() : ""String_Node_Str"");
  dataSourceUI.setMarcFormat(dataSourceSchemaForm.getMarcFormat().trim());
  if (HarvesterUI.getProjectType() == ProjectType.DEFAULT)   saveDataSource(dataSourceUI,oldDataSetId,DatasetType.OAI,dataSourceSchemaForm.getSchema().getValue(),dataSourceSchemaForm.getMetadataNamespace().getValue(),metadataFormat,name.getValue(),nameCode.getValue(),exportPath.getValue());
 else   saveDataSource(dataSourceUI,oldDataSetId,DatasetType.OAI,dataSourceSchemaForm.getSchema().getValue(),dataSourceSchemaForm.getMetadataNamespace().getValue(),metadataFormat,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9865702479338844
24558,"public void setEditMode(DataSourceUI ds){
  editIsSampleCheckBox(ds.isSample());
  setScrollMode(Style.Scroll.AUTO);
  dataSourceUI=ds;
  edit=true;
  oldDataSetId=ds.getDataSourceSet();
  editTagsContainer(dataSourceUI);
  setEditTransformationCombo(dataSourceUI);
  dataSourceServicesPanel.setEditServices(dataSourceUI);
  harvestMethodCombo.getStore().clearFilters();
  idPolicyCombo.getStore().clearFilters();
  recordSyntaxCombo.getStore().clearFilters();
  characterEncoding.getStore().clearFilters();
  String idPolicy=dataSourceUI.getRecordIdPolicy();
  if (idPolicy.equals(""String_Node_Str"")) {
    idPolicyCombo.setValue(idPolicyCombo.getStore().getAt(0));
  }
 else   if (idPolicy.equals(""String_Node_Str"")) {
    idPolicyCombo.setValue(idPolicyCombo.getStore().getAt(1));
    idXPathField.setValue(dataSourceUI.getIdXPath());
    setEditNamespaces(dataSourceUI);
  }
  for (  ModelData comboSel : recordSyntaxCombo.getStore().getModels()) {
    if (comboSel.get(""String_Node_Str"").equals(dataSourceUI.getZ39RecordSyntax()))     recordSyntaxCombo.setValue(comboSel);
  }
  for (  ModelData comboSel : characterEncoding.getStore().getModels()) {
    if (comboSel.get(""String_Node_Str"").equals(dataSourceUI.getCharacterEncoding()))     characterEncoding.setValue(comboSel);
  }
  if (dataSourceUI.getZ39HarvestMethod() == null) {
    harvestMethodCombo.setValue(harvestMethodCombo.getStore().getAt(2));
    maximumID.clear();
  }
 else   if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
    harvestMethodCombo.setValue(harvestMethodCombo.getStore().getAt(2));
    if (!dataSourceUI.getZ39MaximumId().equals(""String_Node_Str"") && !dataSourceUI.getZ39MaximumId().isEmpty() && dataSourceUI.getZ39MaximumId() != null)     maximumID.setValue(Long.valueOf(dataSourceUI.getZ39MaximumId()));
  }
 else   if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
    harvestMethodCombo.setValue(harvestMethodCombo.getStore().getAt(1));
    fileUploadField.setValue(dataSourceUI.getZ39IdListFile());
  }
 else   if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
    harvestMethodCombo.setValue(harvestMethodCombo.getStore().getAt(0));
    earliestDate.setValue(dataSourceUI.getZ39EarlistDate());
  }
  address.setValue(dataSourceUI.getZ39Address());
  recordSet.setValue(dataSourceUI.getDataSourceSet());
  description.setValue(dataSourceUI.getDescription());
  address.setValue(dataSourceUI.getZ39Address());
  port.setValue(dataSourceUI.getZ39Port());
  database.setValue(dataSourceUI.getZ39Database());
  user.setValue(dataSourceUI.getZ39User());
  password.setValue(dataSourceUI.getZ39Password());
  exportPath.setValue(dataSourceUI.getExportDirectory());
  if (HarvesterUI.getProjectType() == ProjectType.DEFAULT) {
    name.setValue(dataSourceUI.getName());
    nameCode.setValue(dataSourceUI.getNameCode());
  }
}","public void setEditMode(DataSourceUI ds){
  editIsSampleCheckBox(ds.isSample());
  setScrollMode(Style.Scroll.AUTO);
  dataSourceUI=ds;
  edit=true;
  oldDataSetId=ds.getDataSourceSet();
  editTagsContainer(dataSourceUI);
  setEditTransformationCombo(dataSourceUI);
  dataSourceServicesPanel.setEditServices(dataSourceUI);
  harvestMethodCombo.getStore().clearFilters();
  idPolicyCombo.getStore().clearFilters();
  recordSyntaxCombo.getStore().clearFilters();
  characterEncoding.getStore().clearFilters();
  String idPolicy=dataSourceUI.getRecordIdPolicy();
  if (idPolicy.equals(IdGeneratedRecordIdPolicy.IDGENERATED)) {
    idPolicyCombo.setValue(idPolicyCombo.getStore().getAt(0));
  }
 else   if (idPolicy.equals(IdExtractedRecordIdPolicy.IDEXTRACTED)) {
    idPolicyCombo.setValue(idPolicyCombo.getStore().getAt(1));
    idXPathField.setValue(dataSourceUI.getIdXPath());
    setEditNamespaces(dataSourceUI);
  }
  for (  ModelData comboSel : recordSyntaxCombo.getStore().getModels()) {
    if (comboSel.get(""String_Node_Str"").equals(dataSourceUI.getZ39RecordSyntax()))     recordSyntaxCombo.setValue(comboSel);
  }
  for (  ModelData comboSel : characterEncoding.getStore().getModels()) {
    if (comboSel.get(""String_Node_Str"").equals(dataSourceUI.getCharacterEncoding()))     characterEncoding.setValue(comboSel);
  }
  if (dataSourceUI.getZ39HarvestMethod() == null) {
    harvestMethodCombo.setValue(harvestMethodCombo.getStore().getAt(2));
    maximumID.clear();
  }
 else   if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
    harvestMethodCombo.setValue(harvestMethodCombo.getStore().getAt(2));
    if (!dataSourceUI.getZ39MaximumId().equals(""String_Node_Str"") && !dataSourceUI.getZ39MaximumId().isEmpty() && dataSourceUI.getZ39MaximumId() != null)     maximumID.setValue(Long.valueOf(dataSourceUI.getZ39MaximumId()));
  }
 else   if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
    harvestMethodCombo.setValue(harvestMethodCombo.getStore().getAt(1));
    fileUploadField.setValue(dataSourceUI.getZ39IdListFile());
  }
 else   if (dataSourceUI.getZ39HarvestMethod().equals(""String_Node_Str"")) {
    harvestMethodCombo.setValue(harvestMethodCombo.getStore().getAt(0));
    earliestDate.setValue(dataSourceUI.getZ39EarlistDate());
  }
  address.setValue(dataSourceUI.getZ39Address());
  recordSet.setValue(dataSourceUI.getDataSourceSet());
  description.setValue(dataSourceUI.getDescription());
  address.setValue(dataSourceUI.getZ39Address());
  port.setValue(dataSourceUI.getZ39Port());
  database.setValue(dataSourceUI.getZ39Database());
  user.setValue(dataSourceUI.getZ39User());
  password.setValue(dataSourceUI.getZ39Password());
  exportPath.setValue(dataSourceUI.getExportDirectory());
  if (HarvesterUI.getProjectType() == ProjectType.DEFAULT) {
    name.setValue(dataSourceUI.getName());
    nameCode.setValue(dataSourceUI.getNameCode());
  }
}",0.9816354816354816
24559,"public void saveData(){
  String idPolicy;
  if (idPolicyCombo.getValue().get(""String_Node_Str"").equals(""String_Node_Str""))   idPolicy=""String_Node_Str"";
 else   idPolicy=""String_Node_Str"";
  String idXPath=idXPathField.getValue();
  String harvestMethod=""String_Node_Str"";
  if (harvestMethodCombo.getValue().get(""String_Node_Str"").equals(""String_Node_Str""))   harvestMethod=""String_Node_Str"";
 else   if (harvestMethodCombo.getValue().get(""String_Node_Str"").equals(""String_Node_Str""))   harvestMethod=""String_Node_Str"";
 else   harvestMethod=""String_Node_Str"";
  String charEnc=characterEncoding.getValue().get(""String_Node_Str"");
  String recordSyntax=recordSyntaxCombo.getValue().get(""String_Node_Str"");
  String userId=user.getValue();
  String pwd=password.getValue();
  String fileUploadPath=fileUploadField.getValue();
  String maxId=null;
  if (maximumID.getValue() != null)   maxId=String.valueOf(maximumID.getValue().longValue());
  Date earlyDate=earliestDate.getValue();
  String addr=address.getValue();
  String prt=port.getValue();
  String db=database.getValue();
  String desc=description.getValue();
  if (dataSourceUI == null) {
    dataSourceUI=new DataSourceUI(parent,desc.trim(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",parent.getCountry().trim(),desc.trim(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",idPolicy.trim(),""String_Node_Str"");
  }
  dataSourceUI.setIngest(""String_Node_Str"");
  if (idXPath != null) {
    dataSourceUI.setIdXPath(idXPath.trim());
  }
  if (fileUploadPath != null) {
    dataSourceUI.setZ39IdListFile(fileUploadPath.trim());
  }
  if (maxId != null) {
    dataSourceUI.setZ39MaximumId(maxId.trim());
  }
  if (userId != null) {
    dataSourceUI.setZ39User(userId.trim());
  }
  if (pwd != null) {
    dataSourceUI.setZ39Password(pwd.trim());
  }
  dataSourceUI.setCharacterEncoding(charEnc.trim());
  dataSourceUI.setRecordIdPolicy(idPolicy.trim());
  dataSourceUI.setZ39HarvestMethod(harvestMethod.trim());
  dataSourceUI.setZ39RecordSyntax(recordSyntax.trim());
  if (earlyDate != null) {
    dataSourceUI.setZ39EarliestDate(earlyDate);
  }
  dataSourceUI.setZ39Address(addr.trim());
  dataSourceUI.setZ39Port(prt.trim());
  dataSourceUI.setZ39Database(db.trim());
  List<String> namespaces=namespacePanelExtension.getFinalNamespacesList();
  dataSourceUI.setNamespaceList(namespaces);
  dataSourceUI.setExportDirectory(exportPath.getValue() != null ? exportPath.getValue().trim() : ""String_Node_Str"");
  if (HarvesterUI.getProjectType() == ProjectType.DEFAULT)   saveDataSource(dataSourceUI,oldDataSetId,DatasetType.Z39,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",name.getValue(),nameCode.getValue(),exportPath.getValue());
 else   saveDataSource(dataSourceUI,oldDataSetId,DatasetType.Z39,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public void saveData(){
  String idPolicy;
  if (idPolicyCombo.getValue().get(""String_Node_Str"").equals(""String_Node_Str""))   idPolicy=IdGeneratedRecordIdPolicy.IDGENERATED;
 else   idPolicy=IdExtractedRecordIdPolicy.IDEXTRACTED;
  String idXPath=idXPathField.getValue();
  String harvestMethod=""String_Node_Str"";
  if (harvestMethodCombo.getValue().get(""String_Node_Str"").equals(""String_Node_Str""))   harvestMethod=""String_Node_Str"";
 else   if (harvestMethodCombo.getValue().get(""String_Node_Str"").equals(""String_Node_Str""))   harvestMethod=""String_Node_Str"";
 else   harvestMethod=""String_Node_Str"";
  String charEnc=characterEncoding.getValue().get(""String_Node_Str"");
  String recordSyntax=recordSyntaxCombo.getValue().get(""String_Node_Str"");
  String userId=user.getValue();
  String pwd=password.getValue();
  String fileUploadPath=fileUploadField.getValue();
  String maxId=null;
  if (maximumID.getValue() != null)   maxId=String.valueOf(maximumID.getValue().longValue());
  Date earlyDate=earliestDate.getValue();
  String addr=address.getValue();
  String prt=port.getValue();
  String db=database.getValue();
  String desc=description.getValue();
  if (dataSourceUI == null) {
    dataSourceUI=new DataSourceUI(parent,desc.trim(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",parent.getCountry().trim(),desc.trim(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",idPolicy.trim(),""String_Node_Str"");
  }
  dataSourceUI.setIngest(""String_Node_Str"");
  if (idXPath != null) {
    dataSourceUI.setIdXPath(idXPath.trim());
  }
  if (fileUploadPath != null) {
    dataSourceUI.setZ39IdListFile(fileUploadPath.trim());
  }
  if (maxId != null) {
    dataSourceUI.setZ39MaximumId(maxId.trim());
  }
  if (userId != null) {
    dataSourceUI.setZ39User(userId.trim());
  }
  if (pwd != null) {
    dataSourceUI.setZ39Password(pwd.trim());
  }
  dataSourceUI.setCharacterEncoding(charEnc.trim());
  dataSourceUI.setRecordIdPolicy(idPolicy.trim());
  dataSourceUI.setZ39HarvestMethod(harvestMethod.trim());
  dataSourceUI.setZ39RecordSyntax(recordSyntax.trim());
  if (earlyDate != null) {
    dataSourceUI.setZ39EarliestDate(earlyDate);
  }
  dataSourceUI.setZ39Address(addr.trim());
  dataSourceUI.setZ39Port(prt.trim());
  dataSourceUI.setZ39Database(db.trim());
  List<String> namespaces=namespacePanelExtension.getFinalNamespacesList();
  dataSourceUI.setNamespaceList(namespaces);
  dataSourceUI.setExportDirectory(exportPath.getValue() != null ? exportPath.getValue().trim() : ""String_Node_Str"");
  if (HarvesterUI.getProjectType() == ProjectType.DEFAULT)   saveDataSource(dataSourceUI,oldDataSetId,DatasetType.Z39,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",name.getValue(),nameCode.getValue(),exportPath.getValue());
 else   saveDataSource(dataSourceUI,oldDataSetId,DatasetType.Z39,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9774281805745554
24560,"private static void loadIdExtractedInfo(DirectoryImporterDataSource dataSourceDirectoryImporter,DataSource dataSource,DataSourceUI dataSourceUI){
  if (dataSourceDirectoryImporter.getRecordIdPolicy() instanceof IdExtractedRecordIdPolicy) {
    IdExtractedRecordIdPolicy idExtracted=(IdExtractedRecordIdPolicy)dataSource.getRecordIdPolicy();
    dataSourceUI.setIdXPath(idExtracted.getIdentifierXpath());
    dataSourceUI.setRecordIdPolicy(""String_Node_Str"");
    Map<String,String> namespaces=idExtracted.getNamespaces();
    Iterator iterator=namespaces.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry mapEntry=(Map.Entry)iterator.next();
      dataSourceUI.getNamespaceList().add(""String_Node_Str"" + mapEntry.getKey());
      dataSourceUI.getNamespaceList().add(""String_Node_Str"" + mapEntry.getValue());
    }
  }
 else   dataSourceUI.setRecordIdPolicy(""String_Node_Str"");
}","private static void loadIdExtractedInfo(DirectoryImporterDataSource dataSourceDirectoryImporter,DataSource dataSource,DataSourceUI dataSourceUI){
  if (dataSourceDirectoryImporter.getRecordIdPolicy() instanceof IdExtractedRecordIdPolicy) {
    IdExtractedRecordIdPolicy idExtracted=(IdExtractedRecordIdPolicy)dataSource.getRecordIdPolicy();
    dataSourceUI.setIdXPath(idExtracted.getIdentifierXpath());
    dataSourceUI.setRecordIdPolicy(IdExtractedRecordIdPolicy.IDEXTRACTED);
    Map<String,String> namespaces=idExtracted.getNamespaces();
    Iterator iterator=namespaces.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry mapEntry=(Map.Entry)iterator.next();
      dataSourceUI.getNamespaceList().add(""String_Node_Str"" + mapEntry.getKey());
      dataSourceUI.getNamespaceList().add(""String_Node_Str"" + mapEntry.getValue());
    }
  }
 else   dataSourceUI.setRecordIdPolicy(IdGeneratedRecordIdPolicy.IDGENERATED);
}",0.6108695652173913
24561,"/** 
 * Create new Aggregator
 * @param name
 * @param nameCode
 * @param homepageUrl
 * @throws IOException
 * @throws DocumentException
 * @return MessageType
 * @throws InvalidArgumentsException 
 * @throws AlreadyExistsException 
 */
public Aggregator createAggregator(String name,String nameCode,String homepageUrl) throws DocumentException, IOException, InvalidArgumentsException, AlreadyExistsException {
  Aggregator newAggregator=new Aggregator();
  if (homepageUrl != null && !homepageUrl.equals(""String_Node_Str"")) {
    try {
      String generatedHomepageUrl=null;
      if (!homepageUrl.startsWith(""String_Node_Str"") && !homepageUrl.startsWith(""String_Node_Str"")) {
        generatedHomepageUrl=""String_Node_Str"" + homepageUrl;
      }
      if (!FileUtilSecond.checkUrl(generatedHomepageUrl)) {
        throw new Exception();
      }
      newAggregator.setHomePage(generatedHomepageUrl);
    }
 catch (    Exception e) {
      throw new InvalidArgumentsException(homepageUrl);
    }
  }
  newAggregator.setName(name);
  newAggregator.setNameCode(nameCode);
  newAggregator.setId(Aggregator.generateId(newAggregator.getName()));
  if (!checkIfAggregatorExists(aggregators,newAggregator)) {
    aggregators.add(newAggregator);
    saveData();
    return newAggregator;
  }
 else   throw new AlreadyExistsException(newAggregator.getName());
}","/** 
 * Create new Aggregator
 * @param name
 * @param nameCode
 * @param homepageUrl
 * @throws IOException
 * @throws DocumentException
 * @return MessageType
 * @throws InvalidArgumentsException 
 * @throws AlreadyExistsException 
 */
public Aggregator createAggregator(String name,String nameCode,String homepageUrl) throws DocumentException, IOException, InvalidArgumentsException, AlreadyExistsException {
  Aggregator newAggregator=new Aggregator();
  if (homepageUrl != null && !homepageUrl.equals(""String_Node_Str"")) {
    try {
      String generatedHomepageUrl=null;
      if (!homepageUrl.startsWith(""String_Node_Str"") && !homepageUrl.startsWith(""String_Node_Str"")) {
        generatedHomepageUrl=""String_Node_Str"" + homepageUrl;
      }
      if (!FileUtilSecond.checkUrl(generatedHomepageUrl)) {
        throw new Exception();
      }
      newAggregator.setHomePage(generatedHomepageUrl);
    }
 catch (    Exception e) {
      throw new InvalidArgumentsException(homepageUrl);
    }
  }
 else   if (homepageUrl != null && homepageUrl.equals(""String_Node_Str""))   newAggregator.setHomePage(homepageUrl);
  newAggregator.setName(name);
  newAggregator.setNameCode(nameCode);
  newAggregator.setId(Aggregator.generateId(newAggregator.getName()));
  if (!checkIfAggregatorExists(aggregators,newAggregator)) {
    aggregators.add(newAggregator);
    saveData();
    return newAggregator;
  }
 else   throw new AlreadyExistsException(newAggregator.getName());
}",0.9589525831564047
24562,"/** 
 * Update Aggregator
 * @param oldAggregatorId
 * @param name
 * @param nameCode
 * @param homepageUrl
 * @throws IOException
 * @return MessageType
 * @throws ObjectNotFoundException 
 * @throws InvalidArgumentsException 
 */
public Aggregator updateAggregator(String oldAggregatorId,String name,String nameCode,String homepageUrl) throws ObjectNotFoundException, InvalidArgumentsException, IOException {
  Aggregator aggregator=((DefaultDataManager)ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager()).getAggregator(oldAggregatorId);
  if (aggregator != null) {
    if (name != null)     aggregator.setName(name);
    if (nameCode != null)     aggregator.setNameCode(nameCode);
    if (homepageUrl != null && !homepageUrl.equals(""String_Node_Str"")) {
      try {
        if (!homepageUrl.startsWith(""String_Node_Str"") && !homepageUrl.startsWith(""String_Node_Str"")) {
          homepageUrl=""String_Node_Str"" + homepageUrl;
        }
        if (!FileUtilSecond.checkUrl(homepageUrl)) {
          throw new Exception();
        }
        aggregator.setHomePage(homepageUrl);
      }
 catch (      Exception e) {
        throw new InvalidArgumentsException(homepageUrl);
      }
    }
    for (    Aggregator actualAggregator : aggregators) {
      if (actualAggregator.getId().equals(oldAggregatorId)) {
        aggregators.remove(actualAggregator);
        break;
      }
    }
    aggregators.add(aggregator);
    saveData();
    return aggregator;
  }
 else {
    throw new ObjectNotFoundException(oldAggregatorId);
  }
}","/** 
 * Update Aggregator
 * @param oldAggregatorId
 * @param name
 * @param nameCode
 * @param homepageUrl
 * @throws IOException
 * @return MessageType
 * @throws ObjectNotFoundException 
 * @throws InvalidArgumentsException 
 */
public Aggregator updateAggregator(String oldAggregatorId,String name,String nameCode,String homepageUrl) throws ObjectNotFoundException, InvalidArgumentsException, IOException {
  Aggregator aggregator=((DefaultDataManager)ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager()).getAggregator(oldAggregatorId);
  if (aggregator != null) {
    if (name != null)     aggregator.setName(name);
    if (nameCode != null)     aggregator.setNameCode(nameCode);
    if (homepageUrl != null && !homepageUrl.equals(""String_Node_Str"")) {
      try {
        if (!homepageUrl.startsWith(""String_Node_Str"") && !homepageUrl.startsWith(""String_Node_Str"")) {
          homepageUrl=""String_Node_Str"" + homepageUrl;
        }
        if (!FileUtilSecond.checkUrl(homepageUrl)) {
          throw new Exception();
        }
        aggregator.setHomePage(homepageUrl);
      }
 catch (      Exception e) {
        throw new InvalidArgumentsException(homepageUrl);
      }
    }
 else     if (homepageUrl != null && homepageUrl.equals(""String_Node_Str"")) {
      aggregator.setHomePage(homepageUrl);
    }
    for (    Aggregator actualAggregator : aggregators) {
      if (actualAggregator.getId().equals(oldAggregatorId)) {
        aggregators.remove(actualAggregator);
        break;
      }
    }
    aggregators.add(aggregator);
    saveData();
    return aggregator;
  }
 else {
    throw new ObjectNotFoundException(oldAggregatorId);
  }
}",0.9606445615122404
24563,"private DataProviderUI parseDataProviderEuropeana(DataProvider dataProvider,AggregatorUI aggregatorUI) throws ServerSideException {
  DataProvider dataProviderEuropeana=dataProvider;
  String country;
  if (dataProviderEuropeana.getCountry() != null)   country=dataProviderEuropeana.getCountry();
 else   country=""String_Node_Str"";
  DataProviderUI newDataProviderUI=new DataProviderUI(dataProviderEuropeana.getId(),dataProviderEuropeana.getName(),country,(country != null && !country.equals(""String_Node_Str"")) ? Countries.getCountries().get(country) : ""String_Node_Str"");
  newDataProviderUI.setName(dataProviderEuropeana.getName());
  newDataProviderUI.setNameCode(dataProviderEuropeana.getNameCode());
  newDataProviderUI.setDescription(dataProviderEuropeana.getDescription());
  if (dataProviderEuropeana.getHomePage() != null)   newDataProviderUI.setHomepage(dataProviderEuropeana.getHomePage().toString());
  newDataProviderUI.setType(dataProviderEuropeana.getProviderType().name());
  newDataProviderUI.setParentAggregatorID(aggregatorUI.getId());
  return newDataProviderUI;
}","private DataProviderUI parseDataProviderEuropeana(DataProvider dataProvider,AggregatorUI aggregatorUI) throws ServerSideException {
  DataProvider dataProviderEuropeana=dataProvider;
  String country;
  if (dataProviderEuropeana.getCountry() != null)   country=dataProviderEuropeana.getCountry();
 else   country=""String_Node_Str"";
  DataProviderUI newDataProviderUI=new DataProviderUI(dataProviderEuropeana.getId(),dataProviderEuropeana.getName(),country,(country != null && !country.equals(""String_Node_Str"")) ? Countries.getCountries().get(country) : ""String_Node_Str"");
  newDataProviderUI.setName(dataProviderEuropeana.getName());
  newDataProviderUI.setNameCode(dataProviderEuropeana.getNameCode());
  newDataProviderUI.setDescription(dataProviderEuropeana.getDescription());
  if (dataProviderEuropeana.getHomepage() != null)   newDataProviderUI.setHomepage(dataProviderEuropeana.getHomepage().toString());
  newDataProviderUI.setType(dataProviderEuropeana.getProviderType().name());
  newDataProviderUI.setParentAggregatorID(aggregatorUI.getId());
  return newDataProviderUI;
}",0.9981566820276496
24564,"/** 
 * Load the list of data providers from XML file
 * @param file2Read
 * @return List of data providers
 * @throws DocumentException
 * @throws IOException
 */
@Override public List<DataProvider> loadDataProvidersFromFile(File file2Read,File repositoryPath) throws DocumentException, IOException, ParseException {
  List<DataProvider> dataProvidersLoaded=new ArrayList<DataProvider>();
  SAXReader reader=new SAXReader();
  Document document=reader.read(file2Read);
  if (configuration != null && configuration.getCurrentServerOAIUrl() != null) {
    ExternalServiceUtil.replaceAllExternalServices(document,configuration.getCurrentServerOAIUrl());
    XmlUtil.writePrettyPrint(dataProvidersFile,document);
  }
  if (!document.getRootElement().elements(""String_Node_Str"").isEmpty()) {
    for (    Element currentDataProviderElement : (List<Element>)document.getRootElement().elements(""String_Node_Str"")) {
      String providerId=currentDataProviderElement.attributeValue(""String_Node_Str"");
      String providerName=currentDataProviderElement.elementText(""String_Node_Str"");
      String providerCountry=currentDataProviderElement.elementText(""String_Node_Str"");
      String providerDescription=currentDataProviderElement.elementText(""String_Node_Str"");
      HashMap<String,DataSourceContainer> dataSourceContainers=new HashMap<String,DataSourceContainer>();
      DataProvider provider=new DataProvider(providerId,providerName,providerCountry,providerDescription,dataSourceContainers,null,null,null);
      for (      Element currentDataSourceElement : (List<Element>)currentDataProviderElement.elements(""String_Node_Str"")) {
        String id=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String description=currentDataSourceElement.elementText(""String_Node_Str"");
        String metadataFormat=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String schema=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String namespace=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String lastIngest=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String sample=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String status=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String isSampleStr=currentDataSourceElement.attributeValue(""String_Node_Str"");
        if (isSampleStr == null)         isSampleStr=""String_Node_Str"";
        boolean isSample=Boolean.valueOf(isSampleStr);
        if (namespace == null) {
          namespace=MetadataTransformationManager.getNamespace(metadataFormat);
        }
        if (schema == null) {
          schema=MetadataTransformationManager.getSchema(metadataFormat);
        }
        Element recordIdPolicyNode=currentDataSourceElement.element(""String_Node_Str"");
        String recordIdPolicyClass=recordIdPolicyNode.attributeValue(""String_Node_Str"");
        RecordIdPolicy recordIdPolicy=null;
        if (recordIdPolicyClass.equals(IdGeneratedRecordIdPolicy.class.getSimpleName())) {
          recordIdPolicy=new IdGeneratedRecordIdPolicy();
        }
 else         if (recordIdPolicyClass.equals(IdProvidedRecordIdPolicy.class.getSimpleName())) {
          recordIdPolicy=new IdProvidedRecordIdPolicy();
        }
 else         if (recordIdPolicyClass.equals(IdExtractedRecordIdPolicy.class.getSimpleName())) {
          String identifierXpath=recordIdPolicyNode.element(""String_Node_Str"").getText();
          Map<String,String> namespaces=new TreeMap<String,String>();
          Element namespacesElement=recordIdPolicyNode.element(""String_Node_Str"");
          if (namespacesElement != null) {
            List<Element> namespaceElement=namespacesElement.elements(""String_Node_Str"");
            for (            Element currentNamespace : namespaceElement) {
              namespaces.put(currentNamespace.elementText(""String_Node_Str""),currentNamespace.elementText(""String_Node_Str""));
            }
          }
          recordIdPolicy=new IdExtractedRecordIdPolicy(identifierXpath,namespaces);
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + recordIdPolicyClass);
        }
        Map<String,MetadataTransformation> metadataTransformations=new HashMap<String,MetadataTransformation>();
        for (        Element metadataTransformationElement : (List<Element>)currentDataSourceElement.element(""String_Node_Str"").elements(""String_Node_Str"")) {
          String transformationId=metadataTransformationElement.getText();
          MetadataTransformation metadataTransformation=metadataTransformationManager.loadMetadataTransformation(transformationId);
          if (metadataTransformation != null)           metadataTransformations.put(metadataTransformation.getId(),metadataTransformation);
        }
        DataSource dataSource=null;
        DataSource existDataSource=getDataSource(id);
        if (existDataSource != null) {
          int i=0;
          while (true) {
            if (getDataSourceContainer(id + i) == null) {
              id=(id + i);
              break;
            }
            i++;
          }
        }
        String dataSourceType=currentDataSourceElement.attribute(""String_Node_Str"").getText();
        if (dataSourceType.equals(""String_Node_Str"")) {
          String oaiSource=currentDataSourceElement.elementText(""String_Node_Str"");
          String oaiSet=(currentDataSourceElement.element(""String_Node_Str"") != null ? currentDataSourceElement.elementText(""String_Node_Str"") : null);
          dataSource=new OaiDataSource(provider,id,description,schema,namespace,metadataFormat,oaiSource,oaiSet,new IdProvidedRecordIdPolicy(),metadataTransformations);
        }
 else         if (dataSourceType.equals(""String_Node_Str"")) {
          dataSource=new SruRecordUpdateDataSource(provider,id,description,schema,namespace,metadataFormat,recordIdPolicy,metadataTransformations);
        }
 else         if (dataSourceType.equals(""String_Node_Str"")) {
          String sourcesDirPath=currentDataSourceElement.elementText(""String_Node_Str"");
          String extractStrategyString=currentDataSourceElement.elementText(""String_Node_Str"");
          Element currentRetrieveStrategy=currentDataSourceElement.element(""String_Node_Str"");
          String retrieveStrategyString=null;
          if (currentRetrieveStrategy != null) {
            retrieveStrategyString=currentRetrieveStrategy.attributeValue(""String_Node_Str"");
          }
          FileRetrieveStrategy retrieveStrategy;
          if (retrieveStrategyString != null && retrieveStrategyString.equals(FtpFileRetrieveStrategy.class.getName())) {
            String server=currentRetrieveStrategy.elementText(""String_Node_Str"");
            String user=currentRetrieveStrategy.elementText(""String_Node_Str"");
            String password=currentRetrieveStrategy.elementText(""String_Node_Str"");
            String idType;
            if (user != null && password != null) {
              idType=FtpFileRetrieveStrategy.NORMAL;
            }
 else {
              idType=FtpFileRetrieveStrategy.ANONYMOUS;
            }
            String ftpPath=currentRetrieveStrategy.elementText(""String_Node_Str"");
            retrieveStrategy=new FtpFileRetrieveStrategy(server,user,password,idType,ftpPath);
          }
 else           if (retrieveStrategyString != null && retrieveStrategyString.equals(HttpFileRetrieveStrategy.class.getName())) {
            String url=currentRetrieveStrategy.elementText(""String_Node_Str"");
            retrieveStrategy=new HttpFileRetrieveStrategy(url);
          }
 else {
            retrieveStrategy=new FolderFileRetrieveStrategy();
          }
          CharacterEncoding characterEncoding=null;
          String recordXPath=null;
          Map<String,String> namespaces=null;
          FileExtractStrategy extractStrategy=null;
          if (extractStrategyString.equals(Iso2709FileExtractStrategy.class.getSimpleName())) {
            characterEncoding=CharacterEncoding.get(currentDataSourceElement.attributeValue(""String_Node_Str""));
            String isoImplementationClass=currentDataSourceElement.attributeValue(""String_Node_Str"");
            extractStrategy=new Iso2709FileExtractStrategy(isoImplementationClass);
          }
 else           if (extractStrategyString.equals(MarcXchangeFileExtractStrategy.class.getSimpleName())) {
            extractStrategy=new MarcXchangeFileExtractStrategy();
          }
 else           if (extractStrategyString.equals(SimpleFileExtractStrategy.class.getSimpleName())) {
            extractStrategy=new SimpleFileExtractStrategy();
            Element splitRecordsElement=currentDataSourceElement.element(""String_Node_Str"");
            if (splitRecordsElement != null) {
              recordXPath=splitRecordsElement.elementText(""String_Node_Str"");
              namespaces=new TreeMap<String,String>();
              Element namespacesElement=splitRecordsElement.element(""String_Node_Str"");
              if (namespacesElement != null) {
                List<Element> namespaceElement=namespacesElement.elements(""String_Node_Str"");
                for (                Element currentNamespace : namespaceElement) {
                  namespaces.put(currentNamespace.elementText(""String_Node_Str""),currentNamespace.elementText(""String_Node_Str""));
                }
              }
            }
          }
          dataSource=new DirectoryImporterDataSource(provider,id,description,schema,namespace,metadataFormat,extractStrategy,retrieveStrategy,characterEncoding,sourcesDirPath,recordIdPolicy,metadataTransformations,recordXPath,namespaces);
        }
 else         if (dataSourceType.equals(""String_Node_Str"")) {
          Element targetElement=currentDataSourceElement.element(""String_Node_Str"");
          String targetAddress=targetElement.elementText(""String_Node_Str"");
          int targetPort=Integer.parseInt(targetElement.elementText(""String_Node_Str""));
          String targetDatabase=targetElement.elementText(""String_Node_Str"");
          String targetUser=targetElement.elementText(""String_Node_Str"");
          String targetPassword=targetElement.elementText(""String_Node_Str"");
          String targetRecordSyntax=targetElement.elementText(""String_Node_Str"");
          CharacterEncoding targetCharacterEncoding=CharacterEncoding.get(targetElement.elementText(""String_Node_Str""));
          Target target=new Target(targetAddress,targetPort,targetDatabase,targetUser,targetPassword,targetCharacterEncoding,targetRecordSyntax);
          Harvester harvestMethod=null;
          String harvestMethodString=currentDataSourceElement.elementText(""String_Node_Str"");
          if (harvestMethodString.equals(TimestampHarvester.class.getSimpleName())) {
            String timestampString=currentDataSourceElement.elementText(""String_Node_Str"");
            try {
              Date earliestTimestamp=DateUtil.string2Date(timestampString,""String_Node_Str"");
              harvestMethod=new TimestampHarvester(target,earliestTimestamp);
            }
 catch (            ParseException e) {
              log.error(""String_Node_Str"" + timestampString,e);
              break;
            }
          }
 else           if (harvestMethodString.equals(IdListHarvester.class.getSimpleName())) {
            String filePath=currentDataSourceElement.elementText(""String_Node_Str"");
            File idListFile=new File(filePath);
            harvestMethod=new IdListHarvester(target,idListFile);
          }
 else           if (harvestMethodString.equals(IdSequenceHarvester.class.getSimpleName())) {
            String maximumIdString=currentDataSourceElement.elementText(""String_Node_Str"");
            Long maximumId=(maximumIdString != null && !maximumIdString.isEmpty() ? Long.valueOf(maximumIdString) : null);
            harvestMethod=new IdSequenceHarvester(target,maximumId);
          }
          dataSource=new DataSourceZ3950(provider,id,description,schema,namespace,harvestMethod,recordIdPolicy,metadataTransformations);
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + dataSourceType + ""String_Node_Str"");
        }
        parseOldTasks(dataSource);
        boolean removeSynFile=false;
        if (dataSource != null) {
          if (status != null && !file2Read.getParentFile().getName().equals(""String_Node_Str"")) {
            if (status.equals(DataSource.StatusDS.OK.toString())) {
              dataSource.setStatus(DataSource.StatusDS.OK);
            }
 else             if (status.equals(DataSource.StatusDS.ERROR.toString())) {
              dataSource.setStatus(DataSource.StatusDS.ERROR);
            }
 else             if (status.equals(DataSource.StatusDS.WARNING.toString())) {
              dataSource.setStatus(DataSource.StatusDS.WARNING);
            }
 else             if (status.equals(DataSource.StatusDS.RUNNING.toString())) {
              dataSource.setStatus(DataSource.StatusDS.RUNNING);
            }
 else             if (status.equals(DataSource.StatusDS.CANCELED.toString())) {
              dataSource.setStatus(DataSource.StatusDS.CANCELED);
            }
 else             if (status.equals(DataSource.StatusDS.PRE_PROCESS_ERROR.toString())) {
              dataSource.setStatus(DataSource.StatusDS.PRE_PROCESS_ERROR);
            }
 else             if (status.equals(DataSource.StatusDS.POST_PROCESS_ERROR.toString())) {
              dataSource.setStatus(DataSource.StatusDS.POST_PROCESS_ERROR);
            }
          }
          if (lastIngest == null && !file2Read.getParentFile().getName().equals(""String_Node_Str"")) {
            lastIngest=dataSource.getSynchronizationDate(new File(new File(repositoryPath,id),""String_Node_Str""));
            removeSynFile=true;
          }
 else           if (file2Read.getParentFile().getName().equals(""String_Node_Str"")) {
            lastIngest=""String_Node_Str"";
          }
          if (lastIngest != null && !lastIngest.equals(""String_Node_Str"")) {
            try {
              dataSource.setLastUpdate(DateUtil.string2Date(lastIngest,TimeUtil.LONG_DATE_FORMAT));
            }
 catch (            ParseException e) {
              dataSource.setLastUpdate(DateUtil.string2Date(lastIngest,TimeUtil.SHORT_DATE_FORMAT));
            }
          }
          if (sample == null) {
            sample=String.valueOf(dataSource.getSampleNumber(new File(new File(repositoryPath,id),""String_Node_Str"")));
            removeSynFile=true;
          }
          if (!sample.equals(""String_Node_Str"") && !file2Read.getParentFile().getName().equals(""String_Node_Str"")) {
            dataSource.setMaxRecord4Sample(Integer.valueOf(sample));
          }
          if (removeSynFile) {
            File dataSourceSyncDate=new File(new File(repositoryPath,id),""String_Node_Str"");
            if (dataSourceSyncDate.exists()) {
              boolean result=dataSourceSyncDate.delete();
              if (result)               log.info(""String_Node_Str"" + id);
 else               log.error(""String_Node_Str"" + id);
            }
          }
          String marcFormat=currentDataSourceElement.attributeValue(""String_Node_Str"");
          if (marcFormat != null && !marcFormat.isEmpty())           dataSource.setMarcFormat(marcFormat);
          List servicesList=currentDataSourceElement.selectNodes(""String_Node_Str"");
          String executeType=currentDataSourceElement.valueOf(""String_Node_Str"");
          if (executeType != null && !executeType.isEmpty())           dataSource.setExternalServicesRunType(ExternalServiceStates.ContainerType.valueOf(executeType));
          for (          Object node : servicesList) {
            Node n=(Node)node;
            String serviceId=n.valueOf(""String_Node_Str"");
            String serviceType=n.valueOf(""String_Node_Str"");
            String enabled=n.valueOf(""String_Node_Str"");
            boolean isEnabled=Boolean.valueOf((enabled == null || enabled.isEmpty()) ? ""String_Node_Str"" : enabled);
            String serviceUri=n.valueOf(""String_Node_Str"");
            String serviceStatusUri=n.valueOf(""String_Node_Str"");
            String externalResultsUri=n.valueOf(""String_Node_Str"");
            String serviceName=n.valueOf(""String_Node_Str"");
            String externalServiceType=n.valueOf(""String_Node_Str"");
            if (externalServiceType == null || externalServiceType.isEmpty())             externalServiceType=ExternalServiceType.MONITORED.name();
            ExternalRestService externalRestService;
            if (externalServiceType.equals(ExternalServiceType.NO_MONITOR.name())) {
              externalRestService=new ExternalServiceNoMonitor(serviceId,serviceName,serviceUri,dataSource);
            }
 else {
              externalRestService=new ExternalRestService(serviceId,serviceName,serviceUri,serviceStatusUri,serviceType,ExternalServiceType.valueOf(externalServiceType));
            }
            externalRestService.setEnabled(isEnabled);
            if (externalResultsUri != null && !externalResultsUri.isEmpty())             externalRestService.setExternalResultsUri(externalResultsUri);
            List parametersList=n.selectNodes(""String_Node_Str"");
            for (            Object nodeP : parametersList) {
              Node parameterNode=(Node)nodeP;
              String parameterName=parameterNode.valueOf(""String_Node_Str"");
              String parameterValue=parameterNode.valueOf(""String_Node_Str"");
              String parameterType=parameterNode.valueOf(""String_Node_Str"");
              boolean parameterRequired=Boolean.parseBoolean(parameterNode.valueOf(""String_Node_Str""));
              String exampleStr=parameterNode.valueOf(""String_Node_Str"");
              String semanticsStr=parameterNode.valueOf(""String_Node_Str"");
              ServiceParameter serviceParameter=new ServiceParameter(parameterName,parameterType,parameterRequired,exampleStr,semanticsStr);
              serviceParameter.setValue(parameterValue);
              externalRestService.getServiceParameters().add(serviceParameter);
            }
            dataSource.getExternalRestServices().add(externalRestService);
          }
          loadDataSourceTags(currentDataSourceElement,dataSource);
          if (currentDataSourceElement.elementText(""String_Node_Str"") != null && !currentDataSourceElement.elementText(""String_Node_Str"").isEmpty())           dataSource.setExportDir(currentDataSourceElement.elementText(""String_Node_Str""));
 else {
            File newExportDir=new File(repositoryPath.getAbsolutePath() + File.separator + dataSource.getId()+ File.separator+ ""String_Node_Str"");
            dataSource.setExportDir(newExportDir.getAbsolutePath());
          }
          boolean exists=metadataSchemaManager.schemaExists(metadataFormat);
          if (!exists) {
            List<MetadataSchemaVersion> metadataSchemaVersions=new ArrayList<MetadataSchemaVersion>();
            metadataSchemaVersions.add(new MetadataSchemaVersion(1.0,schema));
            metadataSchemaManager.saveMetadataSchema(null,metadataFormat,null,namespace,null,null,metadataSchemaVersions,true);
          }
          dataSource.setIsSample(isSample);
          dataSourceContainers.put(dataSource.getId(),new LightDataSourceContainer(dataSource));
        }
      }
      if (getDataProvider(provider.getId()) != null) {
        provider.setId(DataProvider.generateId(provider.getName()));
      }
      dataProvidersLoaded.add(provider);
    }
  }
  if (dataProviders != null && dataProviders.size() > 0) {
    for (    DataProvider dataProviderLoaded : dataProvidersLoaded) {
      try {
        ConfigSingleton.getRepoxContextUtil().getRepoxManager().getAccessPointsManager().initialize(dataProviderLoaded.getDataSourceContainers());
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
      dataProviders.add(dataProviderLoaded);
    }
  }
 else {
    dataProviders=dataProvidersLoaded;
  }
  saveData();
  return dataProvidersLoaded;
}","/** 
 * Load the list of data providers from XML file
 * @param file2Read
 * @return List of data providers
 * @throws DocumentException
 * @throws IOException
 */
@Override public List<DataProvider> loadDataProvidersFromFile(File file2Read,File repositoryPath) throws DocumentException, IOException, ParseException {
  List<DataProvider> dataProvidersLoaded=new ArrayList<DataProvider>();
  SAXReader reader=new SAXReader();
  Document document=reader.read(file2Read);
  if (configuration != null && configuration.getCurrentServerOAIUrl() != null) {
    ExternalServiceUtil.replaceAllExternalServices(document,configuration.getCurrentServerOAIUrl());
    XmlUtil.writePrettyPrint(dataProvidersFile,document);
  }
  if (!document.getRootElement().elements(""String_Node_Str"").isEmpty()) {
    for (    Element currentDataProviderElement : (List<Element>)document.getRootElement().elements(""String_Node_Str"")) {
      String providerId=currentDataProviderElement.attributeValue(""String_Node_Str"");
      String providerName=currentDataProviderElement.elementText(""String_Node_Str"");
      String providerCountry=currentDataProviderElement.elementText(""String_Node_Str"");
      String providerDescription=currentDataProviderElement.elementText(""String_Node_Str"");
      HashMap<String,DataSourceContainer> dataSourceContainers=new HashMap<String,DataSourceContainer>();
      DataProvider provider=new DataProvider(providerId,providerName,providerCountry,providerDescription,dataSourceContainers,null,null,null,null);
      for (      Element currentDataSourceElement : (List<Element>)currentDataProviderElement.elements(""String_Node_Str"")) {
        String id=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String description=currentDataSourceElement.elementText(""String_Node_Str"");
        String metadataFormat=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String schema=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String namespace=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String lastIngest=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String sample=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String status=currentDataSourceElement.attributeValue(""String_Node_Str"");
        String isSampleStr=currentDataSourceElement.attributeValue(""String_Node_Str"");
        if (isSampleStr == null)         isSampleStr=""String_Node_Str"";
        boolean isSample=Boolean.valueOf(isSampleStr);
        if (namespace == null) {
          namespace=MetadataTransformationManager.getNamespace(metadataFormat);
        }
        if (schema == null) {
          schema=MetadataTransformationManager.getSchema(metadataFormat);
        }
        Element recordIdPolicyNode=currentDataSourceElement.element(""String_Node_Str"");
        String recordIdPolicyClass=recordIdPolicyNode.attributeValue(""String_Node_Str"");
        RecordIdPolicy recordIdPolicy=null;
        if (recordIdPolicyClass.equals(IdGeneratedRecordIdPolicy.class.getSimpleName())) {
          recordIdPolicy=new IdGeneratedRecordIdPolicy();
        }
 else         if (recordIdPolicyClass.equals(IdProvidedRecordIdPolicy.class.getSimpleName())) {
          recordIdPolicy=new IdProvidedRecordIdPolicy();
        }
 else         if (recordIdPolicyClass.equals(IdExtractedRecordIdPolicy.class.getSimpleName())) {
          String identifierXpath=recordIdPolicyNode.element(""String_Node_Str"").getText();
          Map<String,String> namespaces=new TreeMap<String,String>();
          Element namespacesElement=recordIdPolicyNode.element(""String_Node_Str"");
          if (namespacesElement != null) {
            List<Element> namespaceElement=namespacesElement.elements(""String_Node_Str"");
            for (            Element currentNamespace : namespaceElement) {
              namespaces.put(currentNamespace.elementText(""String_Node_Str""),currentNamespace.elementText(""String_Node_Str""));
            }
          }
          recordIdPolicy=new IdExtractedRecordIdPolicy(identifierXpath,namespaces);
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + recordIdPolicyClass);
        }
        Map<String,MetadataTransformation> metadataTransformations=new HashMap<String,MetadataTransformation>();
        for (        Element metadataTransformationElement : (List<Element>)currentDataSourceElement.element(""String_Node_Str"").elements(""String_Node_Str"")) {
          String transformationId=metadataTransformationElement.getText();
          MetadataTransformation metadataTransformation=metadataTransformationManager.loadMetadataTransformation(transformationId);
          if (metadataTransformation != null)           metadataTransformations.put(metadataTransformation.getId(),metadataTransformation);
        }
        DataSource dataSource=null;
        DataSource existDataSource=getDataSource(id);
        if (existDataSource != null) {
          int i=0;
          while (true) {
            if (getDataSourceContainer(id + i) == null) {
              id=(id + i);
              break;
            }
            i++;
          }
        }
        String dataSourceType=currentDataSourceElement.attribute(""String_Node_Str"").getText();
        if (dataSourceType.equals(""String_Node_Str"")) {
          String oaiSource=currentDataSourceElement.elementText(""String_Node_Str"");
          String oaiSet=(currentDataSourceElement.element(""String_Node_Str"") != null ? currentDataSourceElement.elementText(""String_Node_Str"") : null);
          dataSource=new OaiDataSource(provider,id,description,schema,namespace,metadataFormat,oaiSource,oaiSet,new IdProvidedRecordIdPolicy(),metadataTransformations);
        }
 else         if (dataSourceType.equals(""String_Node_Str"")) {
          dataSource=new SruRecordUpdateDataSource(provider,id,description,schema,namespace,metadataFormat,recordIdPolicy,metadataTransformations);
        }
 else         if (dataSourceType.equals(""String_Node_Str"")) {
          String sourcesDirPath=currentDataSourceElement.elementText(""String_Node_Str"");
          String extractStrategyString=currentDataSourceElement.elementText(""String_Node_Str"");
          Element currentRetrieveStrategy=currentDataSourceElement.element(""String_Node_Str"");
          String retrieveStrategyString=null;
          if (currentRetrieveStrategy != null) {
            retrieveStrategyString=currentRetrieveStrategy.attributeValue(""String_Node_Str"");
          }
          FileRetrieveStrategy retrieveStrategy;
          if (retrieveStrategyString != null && retrieveStrategyString.equals(FtpFileRetrieveStrategy.class.getName())) {
            String server=currentRetrieveStrategy.elementText(""String_Node_Str"");
            String user=currentRetrieveStrategy.elementText(""String_Node_Str"");
            String password=currentRetrieveStrategy.elementText(""String_Node_Str"");
            String idType;
            if (user != null && password != null) {
              idType=FtpFileRetrieveStrategy.NORMAL;
            }
 else {
              idType=FtpFileRetrieveStrategy.ANONYMOUS;
            }
            String ftpPath=currentRetrieveStrategy.elementText(""String_Node_Str"");
            retrieveStrategy=new FtpFileRetrieveStrategy(server,user,password,idType,ftpPath);
          }
 else           if (retrieveStrategyString != null && retrieveStrategyString.equals(HttpFileRetrieveStrategy.class.getName())) {
            String url=currentRetrieveStrategy.elementText(""String_Node_Str"");
            retrieveStrategy=new HttpFileRetrieveStrategy(url);
          }
 else {
            retrieveStrategy=new FolderFileRetrieveStrategy();
          }
          CharacterEncoding characterEncoding=null;
          String recordXPath=null;
          Map<String,String> namespaces=null;
          FileExtractStrategy extractStrategy=null;
          if (extractStrategyString.equals(Iso2709FileExtractStrategy.class.getSimpleName())) {
            characterEncoding=CharacterEncoding.get(currentDataSourceElement.attributeValue(""String_Node_Str""));
            String isoImplementationClass=currentDataSourceElement.attributeValue(""String_Node_Str"");
            extractStrategy=new Iso2709FileExtractStrategy(isoImplementationClass);
          }
 else           if (extractStrategyString.equals(MarcXchangeFileExtractStrategy.class.getSimpleName())) {
            extractStrategy=new MarcXchangeFileExtractStrategy();
          }
 else           if (extractStrategyString.equals(SimpleFileExtractStrategy.class.getSimpleName())) {
            extractStrategy=new SimpleFileExtractStrategy();
            Element splitRecordsElement=currentDataSourceElement.element(""String_Node_Str"");
            if (splitRecordsElement != null) {
              recordXPath=splitRecordsElement.elementText(""String_Node_Str"");
              namespaces=new TreeMap<String,String>();
              Element namespacesElement=splitRecordsElement.element(""String_Node_Str"");
              if (namespacesElement != null) {
                List<Element> namespaceElement=namespacesElement.elements(""String_Node_Str"");
                for (                Element currentNamespace : namespaceElement) {
                  namespaces.put(currentNamespace.elementText(""String_Node_Str""),currentNamespace.elementText(""String_Node_Str""));
                }
              }
            }
          }
          dataSource=new DirectoryImporterDataSource(provider,id,description,schema,namespace,metadataFormat,extractStrategy,retrieveStrategy,characterEncoding,sourcesDirPath,recordIdPolicy,metadataTransformations,recordXPath,namespaces);
        }
 else         if (dataSourceType.equals(""String_Node_Str"")) {
          Element targetElement=currentDataSourceElement.element(""String_Node_Str"");
          String targetAddress=targetElement.elementText(""String_Node_Str"");
          int targetPort=Integer.parseInt(targetElement.elementText(""String_Node_Str""));
          String targetDatabase=targetElement.elementText(""String_Node_Str"");
          String targetUser=targetElement.elementText(""String_Node_Str"");
          String targetPassword=targetElement.elementText(""String_Node_Str"");
          String targetRecordSyntax=targetElement.elementText(""String_Node_Str"");
          CharacterEncoding targetCharacterEncoding=CharacterEncoding.get(targetElement.elementText(""String_Node_Str""));
          Target target=new Target(targetAddress,targetPort,targetDatabase,targetUser,targetPassword,targetCharacterEncoding,targetRecordSyntax);
          Harvester harvestMethod=null;
          String harvestMethodString=currentDataSourceElement.elementText(""String_Node_Str"");
          if (harvestMethodString.equals(TimestampHarvester.class.getSimpleName())) {
            String timestampString=currentDataSourceElement.elementText(""String_Node_Str"");
            try {
              Date earliestTimestamp=DateUtil.string2Date(timestampString,""String_Node_Str"");
              harvestMethod=new TimestampHarvester(target,earliestTimestamp);
            }
 catch (            ParseException e) {
              log.error(""String_Node_Str"" + timestampString,e);
              break;
            }
          }
 else           if (harvestMethodString.equals(IdListHarvester.class.getSimpleName())) {
            String filePath=currentDataSourceElement.elementText(""String_Node_Str"");
            File idListFile=new File(filePath);
            harvestMethod=new IdListHarvester(target,idListFile);
          }
 else           if (harvestMethodString.equals(IdSequenceHarvester.class.getSimpleName())) {
            String maximumIdString=currentDataSourceElement.elementText(""String_Node_Str"");
            Long maximumId=(maximumIdString != null && !maximumIdString.isEmpty() ? Long.valueOf(maximumIdString) : null);
            harvestMethod=new IdSequenceHarvester(target,maximumId);
          }
          dataSource=new DataSourceZ3950(provider,id,description,schema,namespace,harvestMethod,recordIdPolicy,metadataTransformations);
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + dataSourceType + ""String_Node_Str"");
        }
        parseOldTasks(dataSource);
        boolean removeSynFile=false;
        if (dataSource != null) {
          if (status != null && !file2Read.getParentFile().getName().equals(""String_Node_Str"")) {
            if (status.equals(DataSource.StatusDS.OK.toString())) {
              dataSource.setStatus(DataSource.StatusDS.OK);
            }
 else             if (status.equals(DataSource.StatusDS.ERROR.toString())) {
              dataSource.setStatus(DataSource.StatusDS.ERROR);
            }
 else             if (status.equals(DataSource.StatusDS.WARNING.toString())) {
              dataSource.setStatus(DataSource.StatusDS.WARNING);
            }
 else             if (status.equals(DataSource.StatusDS.RUNNING.toString())) {
              dataSource.setStatus(DataSource.StatusDS.RUNNING);
            }
 else             if (status.equals(DataSource.StatusDS.CANCELED.toString())) {
              dataSource.setStatus(DataSource.StatusDS.CANCELED);
            }
 else             if (status.equals(DataSource.StatusDS.PRE_PROCESS_ERROR.toString())) {
              dataSource.setStatus(DataSource.StatusDS.PRE_PROCESS_ERROR);
            }
 else             if (status.equals(DataSource.StatusDS.POST_PROCESS_ERROR.toString())) {
              dataSource.setStatus(DataSource.StatusDS.POST_PROCESS_ERROR);
            }
          }
          if (lastIngest == null && !file2Read.getParentFile().getName().equals(""String_Node_Str"")) {
            lastIngest=dataSource.getSynchronizationDate(new File(new File(repositoryPath,id),""String_Node_Str""));
            removeSynFile=true;
          }
 else           if (file2Read.getParentFile().getName().equals(""String_Node_Str"")) {
            lastIngest=""String_Node_Str"";
          }
          if (lastIngest != null && !lastIngest.equals(""String_Node_Str"")) {
            try {
              dataSource.setLastUpdate(DateUtil.string2Date(lastIngest,TimeUtil.LONG_DATE_FORMAT));
            }
 catch (            ParseException e) {
              dataSource.setLastUpdate(DateUtil.string2Date(lastIngest,TimeUtil.SHORT_DATE_FORMAT));
            }
          }
          if (sample == null) {
            sample=String.valueOf(dataSource.getSampleNumber(new File(new File(repositoryPath,id),""String_Node_Str"")));
            removeSynFile=true;
          }
          if (!sample.equals(""String_Node_Str"") && !file2Read.getParentFile().getName().equals(""String_Node_Str"")) {
            dataSource.setMaxRecord4Sample(Integer.valueOf(sample));
          }
          if (removeSynFile) {
            File dataSourceSyncDate=new File(new File(repositoryPath,id),""String_Node_Str"");
            if (dataSourceSyncDate.exists()) {
              boolean result=dataSourceSyncDate.delete();
              if (result)               log.info(""String_Node_Str"" + id);
 else               log.error(""String_Node_Str"" + id);
            }
          }
          String marcFormat=currentDataSourceElement.attributeValue(""String_Node_Str"");
          if (marcFormat != null && !marcFormat.isEmpty())           dataSource.setMarcFormat(marcFormat);
          List servicesList=currentDataSourceElement.selectNodes(""String_Node_Str"");
          String executeType=currentDataSourceElement.valueOf(""String_Node_Str"");
          if (executeType != null && !executeType.isEmpty())           dataSource.setExternalServicesRunType(ExternalServiceStates.ContainerType.valueOf(executeType));
          for (          Object node : servicesList) {
            Node n=(Node)node;
            String serviceId=n.valueOf(""String_Node_Str"");
            String serviceType=n.valueOf(""String_Node_Str"");
            String enabled=n.valueOf(""String_Node_Str"");
            boolean isEnabled=Boolean.valueOf((enabled == null || enabled.isEmpty()) ? ""String_Node_Str"" : enabled);
            String serviceUri=n.valueOf(""String_Node_Str"");
            String serviceStatusUri=n.valueOf(""String_Node_Str"");
            String externalResultsUri=n.valueOf(""String_Node_Str"");
            String serviceName=n.valueOf(""String_Node_Str"");
            String externalServiceType=n.valueOf(""String_Node_Str"");
            if (externalServiceType == null || externalServiceType.isEmpty())             externalServiceType=ExternalServiceType.MONITORED.name();
            ExternalRestService externalRestService;
            if (externalServiceType.equals(ExternalServiceType.NO_MONITOR.name())) {
              externalRestService=new ExternalServiceNoMonitor(serviceId,serviceName,serviceUri,dataSource);
            }
 else {
              externalRestService=new ExternalRestService(serviceId,serviceName,serviceUri,serviceStatusUri,serviceType,ExternalServiceType.valueOf(externalServiceType));
            }
            externalRestService.setEnabled(isEnabled);
            if (externalResultsUri != null && !externalResultsUri.isEmpty())             externalRestService.setExternalResultsUri(externalResultsUri);
            List parametersList=n.selectNodes(""String_Node_Str"");
            for (            Object nodeP : parametersList) {
              Node parameterNode=(Node)nodeP;
              String parameterName=parameterNode.valueOf(""String_Node_Str"");
              String parameterValue=parameterNode.valueOf(""String_Node_Str"");
              String parameterType=parameterNode.valueOf(""String_Node_Str"");
              boolean parameterRequired=Boolean.parseBoolean(parameterNode.valueOf(""String_Node_Str""));
              String exampleStr=parameterNode.valueOf(""String_Node_Str"");
              String semanticsStr=parameterNode.valueOf(""String_Node_Str"");
              ServiceParameter serviceParameter=new ServiceParameter(parameterName,parameterType,parameterRequired,exampleStr,semanticsStr);
              serviceParameter.setValue(parameterValue);
              externalRestService.getServiceParameters().add(serviceParameter);
            }
            dataSource.getExternalRestServices().add(externalRestService);
          }
          loadDataSourceTags(currentDataSourceElement,dataSource);
          if (currentDataSourceElement.elementText(""String_Node_Str"") != null && !currentDataSourceElement.elementText(""String_Node_Str"").isEmpty())           dataSource.setExportDir(currentDataSourceElement.elementText(""String_Node_Str""));
 else {
            File newExportDir=new File(repositoryPath.getAbsolutePath() + File.separator + dataSource.getId()+ File.separator+ ""String_Node_Str"");
            dataSource.setExportDir(newExportDir.getAbsolutePath());
          }
          boolean exists=metadataSchemaManager.schemaExists(metadataFormat);
          if (!exists) {
            List<MetadataSchemaVersion> metadataSchemaVersions=new ArrayList<MetadataSchemaVersion>();
            metadataSchemaVersions.add(new MetadataSchemaVersion(1.0,schema));
            metadataSchemaManager.saveMetadataSchema(null,metadataFormat,null,namespace,null,null,metadataSchemaVersions,true);
          }
          dataSource.setIsSample(isSample);
          dataSourceContainers.put(dataSource.getId(),new LightDataSourceContainer(dataSource));
        }
      }
      if (getDataProvider(provider.getId()) != null) {
        provider.setId(DataProvider.generateId(provider.getName()));
      }
      dataProvidersLoaded.add(provider);
    }
  }
  if (dataProviders != null && dataProviders.size() > 0) {
    for (    DataProvider dataProviderLoaded : dataProvidersLoaded) {
      try {
        ConfigSingleton.getRepoxContextUtil().getRepoxManager().getAccessPointsManager().initialize(dataProviderLoaded.getDataSourceContainers());
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
      dataProviders.add(dataProviderLoaded);
    }
  }
 else {
    dataProviders=dataProvidersLoaded;
  }
  saveData();
  return dataProvidersLoaded;
}",0.999874752636457
24565,"Host getHost(Message.Request request){
}","Host getHost(Message.Request request){
  if (request instanceof Requests.DestinationSpecific) {
    Object routingKey=((Requests.DestinationSpecific)request).getRoutingKey();
    if (null == routingKey)     throw new NoHostAvailableException(String.format(""String_Node_Str""));
    Host host=getHostForRoutingKey(routingKey);
    if (null == host)     throw new NoHostAvailableException(String.format(""String_Node_Str"",routingKey));
    return host;
  }
 else {
    return null;
  }
}",0.152963671128107
24566,"public Date runningSince(){
  return initialStart;
}","public Date runningSince(){
  return new Date(initialStart.getTime());
}",0.8387096774193549
24567,"/** 
 * <p> Retrieve the identified <code>boolean</code> value from the <code>JobDataMap</code>. </p>
 * @throws ClassCastException if the identified object is not a String.
 */
public boolean getBooleanValueFromString(String key){
  Object obj=get(key);
  return new Boolean((String)obj).booleanValue();
}","/** 
 * <p> Retrieve the identified <code>boolean</code> value from the <code>JobDataMap</code>. </p>
 * @throws ClassCastException if the identified object is not a String.
 */
public boolean getBooleanValueFromString(String key){
  Object obj=get(key);
  return Boolean.valueOf((String)obj).booleanValue();
}",0.9805194805194806
24568,"/** 
 * <p> Retrieve the identified <code>Boolean</code> value from the <code>JobDataMap</code>. </p>
 * @throws ClassCastException if the identified object is not a String.
 */
public Boolean getBooleanFromString(String key){
  Object obj=get(key);
  return new Boolean((String)obj);
}","/** 
 * <p> Retrieve the identified <code>Boolean</code> value from the <code>JobDataMap</code>. </p>
 * @throws ClassCastException if the identified object is not a String.
 */
public Boolean getBooleanFromString(String key){
  Object obj=get(key);
  return Boolean.valueOf((String)obj);
}",0.9548611111111112
24569,"/** 
 * <p> Retrieve the identified <code>double</code> value from the <code>JobDataMap</code>. </p>
 * @throws ClassCastException if the identified object is not a String.
 */
public double getDoubleValueFromString(String key){
  Object obj=get(key);
  return new Double((String)obj).doubleValue();
}","/** 
 * <p> Retrieve the identified <code>double</code> value from the <code>JobDataMap</code>. </p>
 * @throws ClassCastException if the identified object is not a String.
 */
public double getDoubleValueFromString(String key){
  Object obj=get(key);
  return Double.valueOf((String)obj).doubleValue();
}",0.9801980198019802
24570,"/** 
 * <p> Retrieve the identified <code>Character</code> value from the <code>JobDataMap</code>. </p>
 * @throws ClassCastException if the identified object is not a String.
 */
public Character getCharacterFromString(String key){
  Object obj=get(key);
  return new Character(((String)obj).charAt(0));
}","/** 
 * <p> Retrieve the identified <code>Character</code> value from the <code>JobDataMap</code>. </p>
 * @throws ClassCastException if the identified object is not a String.
 */
public Character getCharacterFromString(String key){
  Object obj=get(key);
  return Character.valueOf(((String)obj).charAt(0));
}",0.9512987012987012
24571,"public void initialize() throws SchedulerException {
  try {
    bind();
  }
 catch (  Exception re) {
    throw new SchedulerException(""String_Node_Str"",re);
  }
  if (resources.getJMXExport()) {
    try {
      registerJMX();
    }
 catch (    Exception e) {
      throw new SchedulerException(""String_Node_Str"",e);
    }
  }
  getLog().info(""String_Node_Str"" + (new SchedulerMetaData(getSchedulerName(),getSchedulerInstanceId(),getClass(),boundRemotely,runningSince() != null,isInStandbyMode(),isShutdown(),runningSince(),numJobsExecuted(),getJobStoreClass(),supportsPersistence(),isClustered(),getThreadPoolClass(),getThreadPoolSize(),getVersion())).toString());
}","public void initialize() throws SchedulerException {
  try {
    bind();
  }
 catch (  Exception re) {
    throw new SchedulerException(""String_Node_Str"",re);
  }
  if (resources.getJMXExport()) {
    try {
      registerJMX();
    }
 catch (    Exception e) {
      throw new SchedulerException(""String_Node_Str"",e);
    }
  }
  this.schedThread.start();
  getLog().info(""String_Node_Str"" + (new SchedulerMetaData(getSchedulerName(),getSchedulerInstanceId(),getClass(),boundRemotely,runningSince() != null,isInStandbyMode(),isShutdown(),runningSince(),numJobsExecuted(),getJobStoreClass(),supportsPersistence(),isClustered(),getThreadPoolClass(),getThreadPoolSize(),getVersion())).toString());
}",0.9794721407624634
24572,"/** 
 * <p> Construct a new <code>QuartzSchedulerThread</code> for the given <code>QuartzScheduler</code> as a <code>Thread</code> with the given attributes. </p>
 */
QuartzSchedulerThread(QuartzScheduler qs,QuartzSchedulerResources qsRsrcs,boolean setDaemon,int threadPrio){
  super(qs.getSchedulerThreadGroup(),qsRsrcs.getThreadName());
  this.qs=qs;
  this.qsRsrcs=qsRsrcs;
  this.setDaemon(setDaemon);
  if (qsRsrcs.isThreadsInheritInitializersClassLoadContext()) {
    log.info(""String_Node_Str"" + Thread.currentThread().getName());
    this.setContextClassLoader(Thread.currentThread().getContextClassLoader());
  }
  this.setPriority(threadPrio);
  paused=true;
  halted=new AtomicBoolean(false);
  this.start();
}","/** 
 * <p> Construct a new <code>QuartzSchedulerThread</code> for the given <code>QuartzScheduler</code> as a <code>Thread</code> with the given attributes. </p>
 */
QuartzSchedulerThread(QuartzScheduler qs,QuartzSchedulerResources qsRsrcs,boolean setDaemon,int threadPrio){
  super(qs.getSchedulerThreadGroup(),qsRsrcs.getThreadName());
  this.qs=qs;
  this.qsRsrcs=qsRsrcs;
  this.setDaemon(setDaemon);
  if (qsRsrcs.isThreadsInheritInitializersClassLoadContext()) {
    log.info(""String_Node_Str"" + Thread.currentThread().getName());
    this.setContextClassLoader(Thread.currentThread().getContextClassLoader());
  }
  this.setPriority(threadPrio);
  paused=true;
  halted=new AtomicBoolean(false);
}",0.9887798036465638
24573,"private void setBeanProps(Object obj,Properties props) throws NoSuchMethodException, IllegalAccessException, java.lang.reflect.InvocationTargetException, IntrospectionException, SchedulerConfigException {
  props.remove(""String_Node_Str"");
  BeanInfo bi=Introspector.getBeanInfo(obj.getClass());
  PropertyDescriptor[] propDescs=bi.getPropertyDescriptors();
  PropertiesParser pp=new PropertiesParser(props);
  java.util.Enumeration<Object> keys=props.keys();
  while (keys.hasMoreElements()) {
    String name=(String)keys.nextElement();
    String c=name.substring(0,1).toUpperCase(Locale.US);
    String methName=""String_Node_Str"" + c + name.substring(1);
    java.lang.reflect.Method setMeth=getSetMethod(methName,propDescs);
    try {
      if (setMeth == null) {
        throw new NoSuchMethodException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
      Class<?>[] params=setMeth.getParameterTypes();
      if (params.length != 1) {
        throw new NoSuchMethodException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
      PropertiesParser refProps=pp;
      String refName=pp.getStringProperty(name);
      if (refName != null && refName.startsWith(""String_Node_Str"")) {
        refName=refName.substring(2);
        refProps=cfg;
      }
 else       refName=name;
      if (params[0].equals(int.class)) {
        setMeth.invoke(obj,new Object[]{new Integer(refProps.getIntProperty(refName))});
      }
 else       if (params[0].equals(long.class)) {
        setMeth.invoke(obj,new Object[]{new Long(refProps.getLongProperty(refName))});
      }
 else       if (params[0].equals(float.class)) {
        setMeth.invoke(obj,new Object[]{new Float(refProps.getFloatProperty(refName))});
      }
 else       if (params[0].equals(double.class)) {
        setMeth.invoke(obj,new Object[]{new Double(refProps.getDoubleProperty(refName))});
      }
 else       if (params[0].equals(boolean.class)) {
        setMeth.invoke(obj,new Object[]{new Boolean(refProps.getBooleanProperty(refName))});
      }
 else       if (params[0].equals(String.class)) {
        setMeth.invoke(obj,new Object[]{refProps.getStringProperty(refName)});
      }
 else {
        throw new NoSuchMethodException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
 catch (    NumberFormatException nfe) {
      throw new SchedulerConfigException(""String_Node_Str"" + name + ""String_Node_Str""+ nfe.toString());
    }
  }
}","private void setBeanProps(Object obj,Properties props) throws NoSuchMethodException, IllegalAccessException, java.lang.reflect.InvocationTargetException, IntrospectionException, SchedulerConfigException {
  props.remove(""String_Node_Str"");
  BeanInfo bi=Introspector.getBeanInfo(obj.getClass());
  PropertyDescriptor[] propDescs=bi.getPropertyDescriptors();
  PropertiesParser pp=new PropertiesParser(props);
  java.util.Enumeration<Object> keys=props.keys();
  while (keys.hasMoreElements()) {
    String name=(String)keys.nextElement();
    String c=name.substring(0,1).toUpperCase(Locale.US);
    String methName=""String_Node_Str"" + c + name.substring(1);
    java.lang.reflect.Method setMeth=getSetMethod(methName,propDescs);
    try {
      if (setMeth == null) {
        throw new NoSuchMethodException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
      Class<?>[] params=setMeth.getParameterTypes();
      if (params.length != 1) {
        throw new NoSuchMethodException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
      PropertiesParser refProps=pp;
      String refName=pp.getStringProperty(name);
      if (refName != null && refName.startsWith(""String_Node_Str"")) {
        refName=refName.substring(2);
        refProps=cfg;
      }
 else       refName=name;
      if (params[0].equals(int.class)) {
        setMeth.invoke(obj,new Object[]{Integer.valueOf(refProps.getIntProperty(refName))});
      }
 else       if (params[0].equals(long.class)) {
        setMeth.invoke(obj,new Object[]{Long.valueOf(refProps.getLongProperty(refName))});
      }
 else       if (params[0].equals(float.class)) {
        setMeth.invoke(obj,new Object[]{Float.valueOf(refProps.getFloatProperty(refName))});
      }
 else       if (params[0].equals(double.class)) {
        setMeth.invoke(obj,new Object[]{Double.valueOf(refProps.getDoubleProperty(refName))});
      }
 else       if (params[0].equals(boolean.class)) {
        setMeth.invoke(obj,new Object[]{Boolean.valueOf(refProps.getBooleanProperty(refName))});
      }
 else       if (params[0].equals(String.class)) {
        setMeth.invoke(obj,new Object[]{refProps.getStringProperty(refName)});
      }
 else {
        throw new NoSuchMethodException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
 catch (    NumberFormatException nfe) {
      throw new SchedulerConfigException(""String_Node_Str"" + name + ""String_Node_Str""+ nfe.toString());
    }
  }
}",0.9876695437731196
24574,"public void jobToBeExecuted(JobExecutionContext context){
  numJobsFired++;
synchronized (executingJobs) {
    executingJobs.put(((OperableTrigger)context.getTrigger()).getFireInstanceId(),context);
  }
}","public void jobToBeExecuted(JobExecutionContext context){
  numJobsFired.incrementAndGet();
synchronized (executingJobs) {
    executingJobs.put(((OperableTrigger)context.getTrigger()).getFireInstanceId(),context);
  }
}",0.9528301886792452
24575,"public int getNumJobsFired(){
  return numJobsFired;
}","public int getNumJobsFired(){
  return numJobsFired.get();
}",0.9473684210526316
24576,"/** 
 * @return whether the associated Job class carries the {@link PersistJobDataAfterExecution} annotation.
 */
public boolean isPersistJobDataAfterExecution(){
  if (jobClass == null) {
    return false;
  }
  return jobClass.isAnnotationPresent(PersistJobDataAfterExecution.class);
}","/** 
 * @return whether the associated Job class carries the {@link PersistJobDataAfterExecution} annotation.
 */
public boolean isPersistJobDataAfterExecution(){
  return ClassUtils.isAnnotationPresent(jobClass,PersistJobDataAfterExecution.class);
}",0.7895716945996276
24577,"/** 
 * @return whether the associated Job class carries the {@link DisallowConcurrentExecution} annotation.
 */
public boolean isConcurrentExectionDisallowed(){
  if (jobClass == null) {
    return false;
  }
  return jobClass.isAnnotationPresent(DisallowConcurrentExecution.class);
}","/** 
 * @return whether the associated Job class carries the {@link DisallowConcurrentExecution} annotation.
 */
public boolean isConcurrentExectionDisallowed(){
  return ClassUtils.isAnnotationPresent(jobClass,DisallowConcurrentExecution.class);
}",0.7879924953095685
24578,"/** 
 * <p> Get a <code>Date</code> object that represents the given time, on the given date. </p>
 * @param second The value (0-59) to give the seconds field of the date
 * @param minute The value (0-59) to give the minutes field of the date
 * @param hour The value (0-23) to give the hours field of the date
 * @param dayOfMonth The value (1-31) to give the day of month field of the date
 * @param month The value (1-12) to give the month field of the date
 * @param year The value (1970-2099) to give the year field of the date
 * @return the new date
 */
public static Date dateOf(int second,int minute,int hour,int dayOfMonth,int month,int year){
  validateSecond(second);
  validateMinute(minute);
  validateHour(hour);
  validateDayOfMonth(dayOfMonth);
  validateMonth(month);
  validateYear(year);
  Date date=new Date();
  Calendar c=Calendar.getInstance();
  c.setTime(date);
  c.set(Calendar.YEAR,year);
  c.set(Calendar.MONTH,month - 1);
  c.set(Calendar.DAY_OF_MONTH,dayOfMonth);
  c.set(Calendar.HOUR_OF_DAY,hour);
  c.set(Calendar.MINUTE,minute);
  c.set(Calendar.SECOND,second);
  c.set(Calendar.MILLISECOND,0);
  return c.getTime();
}","/** 
 * <p> Get a <code>Date</code> object that represents the given time, on the given date. </p>
 * @param second The value (0-59) to give the seconds field of the date
 * @param minute The value (0-59) to give the minutes field of the date
 * @param hour The value (0-23) to give the hours field of the date
 * @param dayOfMonth The value (1-31) to give the day of month field of the date
 * @param month The value (1-12) to give the month field of the date
 * @param year The value (1970-2099) to give the year field of the date
 * @return the new date
 */
public static Date dateOf(int hour,int minute,int second,int dayOfMonth,int month,int year){
  validateSecond(second);
  validateMinute(minute);
  validateHour(hour);
  validateDayOfMonth(dayOfMonth);
  validateMonth(month);
  validateYear(year);
  Date date=new Date();
  Calendar c=Calendar.getInstance();
  c.setTime(date);
  c.set(Calendar.YEAR,year);
  c.set(Calendar.MONTH,month - 1);
  c.set(Calendar.DAY_OF_MONTH,dayOfMonth);
  c.set(Calendar.HOUR_OF_DAY,hour);
  c.set(Calendar.MINUTE,minute);
  c.set(Calendar.SECOND,second);
  c.set(Calendar.MILLISECOND,0);
  return c.getTime();
}",0.9774501300954032
24579,"/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public TriggerState getTriggerState(TriggerKey triggerKey) throws SchedulerException {
  return (TriggerState)invoke(""String_Node_Str"",new Object[]{triggerKey.getName(),triggerKey.getGroup()},new String[]{String.class.getName(),String.class.getName()});
}","/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public TriggerState getTriggerState(TriggerKey triggerKey) throws SchedulerException {
  return (TriggerState)invoke(""String_Node_Str"",new Object[]{triggerKey},new String[]{TriggerKey.class.getName()});
}",0.9111389236545682
24580,"/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public void resumeTrigger(TriggerKey triggerKey) throws SchedulerException {
  invoke(""String_Node_Str"",new Object[]{triggerKey.getName(),triggerKey.getGroup()},new String[]{String.class.getName(),String.class.getName()});
}","/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public void resumeTrigger(TriggerKey triggerKey) throws SchedulerException {
  invoke(""String_Node_Str"",new Object[]{triggerKey},new String[]{TriggerKey.class.getName()});
}",0.903663500678426
24581,"/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public boolean deleteJob(JobKey jobKey) throws SchedulerException {
  return ((Boolean)invoke(""String_Node_Str"",new Object[]{jobKey.getName(),jobKey.getGroup()},new String[]{String.class.getName(),String.class.getName()})).booleanValue();
}","/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public boolean deleteJob(JobKey jobKey) throws SchedulerException {
  return ((Boolean)invoke(""String_Node_Str"",new Object[]{jobKey},new String[]{JobKey.class.getName()})).booleanValue();
}",0.8686605981794538
24582,"/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public void pauseJob(JobKey jobKey) throws SchedulerException {
  invoke(""String_Node_Str"",new Object[]{jobKey.getName(),jobKey.getGroup()},new String[]{String.class.getName(),String.class.getName()});
}","/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public void pauseJob(JobKey jobKey) throws SchedulerException {
  invoke(""String_Node_Str"",new Object[]{jobKey},new String[]{JobKey.class.getName()});
}",0.9093525179856116
24583,"/** 
 * @see org.quartz.Scheduler#interrupt(JobKey)
 */
public boolean interrupt(JobKey jobKey) throws UnableToInterruptJobException {
  try {
    return ((Boolean)invoke(""String_Node_Str"",new Object[]{jobKey.getName(),jobKey.getGroup()},new String[]{String.class.getName(),String.class.getName()})).booleanValue();
  }
 catch (  SchedulerException se) {
    throw new UnableToInterruptJobException(se);
  }
}","/** 
 * @see org.quartz.Scheduler#interrupt(JobKey)
 */
public boolean interrupt(JobKey jobKey) throws UnableToInterruptJobException {
  try {
    return ((Boolean)invoke(""String_Node_Str"",new Object[]{jobKey},new String[]{JobKey.class.getName()})).booleanValue();
  }
 catch (  SchedulerException se) {
    throw new UnableToInterruptJobException(se);
  }
}",0.9178617992177314
24584,"/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public void triggerJob(JobKey jobKey,JobDataMap data) throws SchedulerException {
  invoke(""String_Node_Str"",new Object[]{jobKey.getName(),jobKey.getGroup(),data},new String[]{String.class.getName(),String.class.getName(),JobDataMap.class.getName()});
}","/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public void triggerJob(JobKey jobKey,JobDataMap data) throws SchedulerException {
  invoke(""String_Node_Str"",new Object[]{jobKey,data},new String[]{JobKey.class.getName(),JobDataMap.class.getName()});
}",0.920754716981132
24585,"/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>. </p>
 */
public Trigger getTrigger(TriggerKey triggerKey) throws SchedulerException {
  return (Trigger)invoke(""String_Node_Str"",new Object[]{triggerKey.getName(),triggerKey.getGroup()},new String[]{String.class.getName(),String.class.getName()});
}","/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>. </p>
 */
public Trigger getTrigger(TriggerKey triggerKey) throws SchedulerException {
  return (Trigger)invoke(""String_Node_Str"",new Object[]{triggerKey},new String[]{TriggerKey.class.getName()});
}",0.8856682769726248
24586,"/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public void resumeJob(JobKey jobKey) throws SchedulerException {
  invoke(""String_Node_Str"",new Object[]{jobKey.getName(),jobKey.getGroup()},new String[]{String.class.getName(),String.class.getName()});
}","/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public void resumeJob(JobKey jobKey) throws SchedulerException {
  invoke(""String_Node_Str"",new Object[]{jobKey},new String[]{JobKey.class.getName()});
}",0.90961262553802
24587,"/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public boolean unscheduleJob(TriggerKey triggerKey) throws SchedulerException {
  return ((Boolean)invoke(""String_Node_Str"",new Object[]{triggerKey.getName(),triggerKey.getGroup()},new String[]{String.class.getName(),String.class.getName()})).booleanValue();
}","/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public boolean unscheduleJob(TriggerKey triggerKey) throws SchedulerException {
  return ((Boolean)invoke(""String_Node_Str"",new Object[]{triggerKey},new String[]{TriggerKey.class.getName()})).booleanValue();
}",0.865265760197775
24588,"/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public List<Trigger> getTriggersOfJob(JobKey jobKey) throws SchedulerException {
  return (List<Trigger>)invoke(""String_Node_Str"",new Object[]{jobKey.getName(),jobKey.getGroup()},new String[]{String.class.getName(),String.class.getName()});
}","/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public List<Trigger> getTriggersOfJob(JobKey jobKey) throws SchedulerException {
  return (List<Trigger>)invoke(""String_Node_Str"",new Object[]{jobKey},new String[]{JobKey.class.getName()});
}",0.9184993531694696
24589,"/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public JobDetail getJobDetail(JobKey jobKey) throws SchedulerException {
  return (JobDetail)invoke(""String_Node_Str"",new Object[]{jobKey.getName(),jobKey.getGroup()},new String[]{String.class.getName(),String.class.getName()});
}","/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public JobDetail getJobDetail(JobKey jobKey) throws SchedulerException {
  return (JobDetail)invoke(""String_Node_Str"",new Object[]{jobKey},new String[]{JobKey.class.getName()});
}",0.9158878504672896
24590,"/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public void pauseTrigger(TriggerKey triggerKey) throws SchedulerException {
  invoke(""String_Node_Str"",new Object[]{triggerKey.getName(),triggerKey.getGroup()},new String[]{String.class.getName(),String.class.getName()});
}","/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public void pauseTrigger(TriggerKey triggerKey) throws SchedulerException {
  invoke(""String_Node_Str"",new Object[]{triggerKey},new String[]{TriggerKey.class.getName()});
}",0.9034013605442176
24591,"/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public Date rescheduleJob(TriggerKey triggerKey,Trigger newTrigger) throws SchedulerException {
  return (Date)invoke(""String_Node_Str"",new Object[]{triggerKey.getName(),triggerKey.getGroup(),newTrigger},new String[]{String.class.getName(),String.class.getName(),Trigger.class.getName()});
}","/** 
 * <p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>, passing the <code>SchedulingContext</code> associated with this instance. </p>
 */
public Date rescheduleJob(TriggerKey triggerKey,Trigger newTrigger) throws SchedulerException {
  return (Date)invoke(""String_Node_Str"",new Object[]{triggerKey,newTrigger},new String[]{TriggerKey.class.getName(),Trigger.class.getName()});
}",0.9184845005740528
24592,"/** 
 * Find the key of the first non-serializable value in the given Map.
 * @return The key of the first non-serializable value in the given Map or null if all values are serializable.
 */
protected Object getKeyOfNonSerializableValue(Map data){
  for (Iterator entryIter=data.entrySet().iterator(); entryIter.hasNext(); ) {
    Map.Entry entry=(Map.Entry)entryIter.next();
    ByteArrayOutputStream baos=null;
    try {
      serializeObject(entry.getValue());
    }
 catch (    IOException e) {
      return entry.getKey();
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ignore) {
        }
      }
    }
  }
  return null;
}","/** 
 * Find the key of the first non-serializable value in the given Map.
 * @return The key of the first non-serializable value in the given Map or null if all values are serializable.
 */
protected Object getKeyOfNonSerializableValue(Map data){
  for (Iterator entryIter=data.entrySet().iterator(); entryIter.hasNext(); ) {
    Map.Entry entry=(Map.Entry)entryIter.next();
    ByteArrayOutputStream baos=null;
    try {
      baos=serializeObject(entry.getValue());
    }
 catch (    IOException e) {
      return entry.getKey();
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ignore) {
        }
      }
    }
  }
  return null;
}",0.9964463397299218
24593,"public RecoverMisfiredJobsResult(boolean hasMoreMisfiredTriggers,int processedMisfiredTriggerCount,long _earliestNewTime){
  _hasMoreMisfiredTriggers=hasMoreMisfiredTriggers;
  _processedMisfiredTriggerCount=processedMisfiredTriggerCount;
}","public RecoverMisfiredJobsResult(boolean hasMoreMisfiredTriggers,int processedMisfiredTriggerCount,long earliestNewTime){
  _hasMoreMisfiredTriggers=hasMoreMisfiredTriggers;
  _processedMisfiredTriggerCount=processedMisfiredTriggerCount;
  _earliestNewTime=earliestNewTime;
}",0.9281553398058252
24594,"public void addRuleInstances(Digester digester){
  digester.addObjectCreate(prefix,clazz);
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_NAME,""String_Node_Str"");
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_GROUP,""String_Node_Str"");
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_DESCRIPTION,""String_Node_Str"");
  digester.addRule(prefix + ""String_Node_Str"" + TAG_MISFIRE_INSTRUCTION,new MisfireInstructionRule(""String_Node_Str""));
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_CALENDAR_NAME,""String_Node_Str"");
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_JOB_NAME,""String_Node_Str"");
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_JOB_GROUP,""String_Node_Str"");
  Converter converter=new DateConverter(new String[]{XSD_DATE_FORMAT,DTD_DATE_FORMAT});
  digester.addRule(prefix + ""String_Node_Str"" + TAG_START_TIME,new SimpleConverterRule(""String_Node_Str"",converter,Date.class));
  digester.addRule(prefix + ""String_Node_Str"" + TAG_END_TIME,new SimpleConverterRule(""String_Node_Str"",converter,Date.class));
}","public void addRuleInstances(Digester digester){
  digester.addObjectCreate(prefix,clazz);
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_NAME,""String_Node_Str"");
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_GROUP,""String_Node_Str"");
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_DESCRIPTION,""String_Node_Str"");
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_VOLATILITY,""String_Node_Str"");
  digester.addRule(prefix + ""String_Node_Str"" + TAG_MISFIRE_INSTRUCTION,new MisfireInstructionRule(""String_Node_Str""));
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_CALENDAR_NAME,""String_Node_Str"");
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_JOB_NAME,""String_Node_Str"");
  digester.addBeanPropertySetter(prefix + ""String_Node_Str"" + TAG_JOB_GROUP,""String_Node_Str"");
  Converter converter=new DateConverter(new String[]{XSD_DATE_FORMAT,DTD_DATE_FORMAT});
  digester.addRule(prefix + ""String_Node_Str"" + TAG_START_TIME,new SimpleConverterRule(""String_Node_Str"",converter,Date.class));
  digester.addRule(prefix + ""String_Node_Str"" + TAG_END_TIME,new SimpleConverterRule(""String_Node_Str"",converter,Date.class));
}",0.958776030599235
24595,"/** 
 * <p> Get the convenience <code>JobDataMap</code> of this execution context. </p> <p> The <code>JobDataMap</code> found on this object serves as a convenience - it is a merge of the <code>JobDataMap</code> found on the  <code>JobDetail</code> and the one found on the <code>Trigger</code>, with  the value in the latter overriding any same-named values in the former. <i>It is thus considered a 'best practice' that the execute code of a Job retrieve data from the JobDataMap found on this object.</i> </p>
 */
public JobDataMap getJobDataMap(){
  return jobDataMap;
}","/** 
 * <p> Get the convenience <code>JobDataMap</code> of this execution context. </p> <p> The <code>JobDataMap</code> found on this object serves as a convenience - it is a merge of the <code>JobDataMap</code> found on the  <code>JobDetail</code> and the one found on the <code>Trigger</code>, with  the value in the latter overriding any same-named values in the former. <i>It is thus considered a 'best practice' that the execute code of a Job retrieve data from the JobDataMap found on this object</i> </p> <p>NOTE: Do not expect value 'set' into this JobDataMap to somehow be set back onto a <code>StatefulJob</code>'s own JobDataMap. </p>
 */
public JobDataMap getJobDataMap(){
  return jobDataMap;
}",0.8899297423887588
24596,"/** 
 * <p> Create a JobExcecutionContext with the given context data. </p>
 */
public JobExecutionContext(Scheduler scheduler,TriggerFiredBundle firedBundle,Job job){
  this.scheduler=scheduler;
  this.trigger=firedBundle.getTrigger();
  this.calendar=firedBundle.getCalendar();
  this.jobDetail=firedBundle.getJobDetail();
  this.job=job;
  this.recovering=firedBundle.isRecovering();
  this.fireTime=firedBundle.getFireTime();
  this.scheduledFireTime=firedBundle.getScheduledFireTime();
  this.prevFireTime=firedBundle.getPrevFireTime();
  this.nextFireTime=firedBundle.getNextFireTime();
  this.jobDataMap=jobDetail.getJobDataMap();
  jobDataMap.putAll(trigger.getJobDataMap());
}","/** 
 * <p> Create a JobExcecutionContext with the given context data. </p>
 */
public JobExecutionContext(Scheduler scheduler,TriggerFiredBundle firedBundle,Job job){
  this.scheduler=scheduler;
  this.trigger=firedBundle.getTrigger();
  this.calendar=firedBundle.getCalendar();
  this.jobDetail=firedBundle.getJobDetail();
  this.job=job;
  this.recovering=firedBundle.isRecovering();
  this.fireTime=firedBundle.getFireTime();
  this.scheduledFireTime=firedBundle.getScheduledFireTime();
  this.prevFireTime=firedBundle.getPrevFireTime();
  this.nextFireTime=firedBundle.getNextFireTime();
  this.jobDataMap=new JobDataMap();
  this.jobDataMap.putAll(jobDetail.getJobDataMap());
  this.jobDataMap.putAll(trigger.getJobDataMap());
}",0.959830866807611
24597,"/** 
 * Change routing settings
 */
public void updateRouting(Period per){
  if (this.open == true) {
    if (Alfred.run) {
      if (checkRouting()) {
        JsonObject newAllocation=new JsonObject();
        JsonObject newRouting=new JsonObject();
        JsonObject newIndex=new JsonObject();
        for (        String route : Alfred.allocation) {
          try {
            String[] sRoute=route.split(""String_Node_Str"");
            String routeValue=sRoute[1];
            String[] routeKey=sRoute[0].split(""String_Node_Str"");
            String routeType=routeKey[0];
            String routeItem=routeKey[1];
            if (newAllocation.has(routeType)) {
              newAllocation.getAsJsonObject(routeType).addProperty(routeItem,routeValue);
            }
 else {
              JsonObject newTypeEntry=new JsonObject();
              newTypeEntry.addProperty(routeItem,routeValue);
              newAllocation.add(routeType,newTypeEntry);
            }
          }
 catch (          Exception e) {
            Alfred.println(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
          }
        }
        newRouting.add(""String_Node_Str"",newAllocation);
        newIndex.add(""String_Node_Str"",newRouting);
        newIndex.toString();
        Alfred.println(""String_Node_Str"",""String_Node_Str"" + newIndex.toString());
        try {
          Alfred.putURL(""String_Node_Str"" + this.name + ""String_Node_Str"",newIndex.toString());
        }
 catch (        Exception e) {
          Alfred.println(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
          if (Alfred.retries > 1) {
            int r=1;
            while (r != Alfred.retries) {
              try {
                Alfred.putURL(""String_Node_Str"" + this.name + ""String_Node_Str"",newIndex.toString());
                r=Alfred.retries;
              }
 catch (              Exception ce) {
                Alfred.println(""String_Node_Str"",""String_Node_Str"" + ce.getMessage());
                r++;
              }
            }
          }
        }
      }
    }
 else {
      if (checkRouting()) {
        if (this.timeunit.equalsIgnoreCase(""String_Node_Str"")) {
          String expireTime=(per.getYears() != 0 ? ""String_Node_Str"" + Math.abs(per.getYears()) + ""String_Node_Str"" : ""String_Node_Str"") + (per.getDays() != 0 ? ""String_Node_Str"" + Math.abs(per.getDays()) + ""String_Node_Str"" : ""String_Node_Str"") + Math.abs(per.getHours())+ ""String_Node_Str"";
          Alfred.println(""String_Node_Str"",""String_Node_Str"" + this.name + ""String_Node_Str""+ expireTime+ ""String_Node_Str"");
        }
 else         if (this.timeunit.equalsIgnoreCase(""String_Node_Str"")) {
          String expireTime=Math.abs(per.getDays()) + ""String_Node_Str"";
          Alfred.println(""String_Node_Str"",""String_Node_Str"" + this.name + ""String_Node_Str""+ expireTime+ ""String_Node_Str"");
        }
 else {
          Alfred.println(""String_Node_Str"",""String_Node_Str"" + this.name + ""String_Node_Str"");
        }
      }
    }
  }
}","/** 
 * Change routing settings
 */
public void updateRouting(Period per){
  if (this.open == true) {
    if (Alfred.run) {
      if (checkRouting()) {
        JsonObject newAllocation=new JsonObject();
        JsonObject newRouting=new JsonObject();
        JsonObject newIndex=new JsonObject();
        for (        String route : Alfred.allocation) {
          try {
            String[] sRoute=route.split(""String_Node_Str"");
            String routeValue=sRoute[1];
            String[] routeKey=sRoute[0].split(""String_Node_Str"");
            String routeType=routeKey[0];
            String routeItem=routeKey[1];
            if (newAllocation.has(routeType)) {
              newAllocation.getAsJsonObject(routeType).addProperty(routeItem,routeValue);
            }
 else {
              JsonObject newTypeEntry=new JsonObject();
              newTypeEntry.addProperty(routeItem,routeValue);
              newAllocation.add(routeType,newTypeEntry);
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
            Alfred.println(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
          }
        }
        newRouting.add(""String_Node_Str"",newAllocation);
        newIndex.add(""String_Node_Str"",newRouting);
        newIndex.toString();
        Alfred.println(""String_Node_Str"",""String_Node_Str"" + newIndex.toString());
        try {
          Alfred.putURL(""String_Node_Str"" + this.name + ""String_Node_Str"",newIndex.toString());
        }
 catch (        Exception e) {
          Alfred.println(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
          if (Alfred.retries > 1) {
            int r=1;
            while (r != Alfred.retries) {
              try {
                Alfred.putURL(""String_Node_Str"" + this.name + ""String_Node_Str"",newIndex.toString());
                r=Alfred.retries;
              }
 catch (              Exception ce) {
                Alfred.println(""String_Node_Str"",""String_Node_Str"" + ce.getMessage());
                r++;
              }
            }
          }
        }
      }
    }
 else {
      if (checkRouting()) {
        if (this.timeunit.equalsIgnoreCase(""String_Node_Str"")) {
          String expireTime=(per.getYears() != 0 ? ""String_Node_Str"" + Math.abs(per.getYears()) + ""String_Node_Str"" : ""String_Node_Str"") + (per.getDays() != 0 ? ""String_Node_Str"" + Math.abs(per.getDays()) + ""String_Node_Str"" : ""String_Node_Str"") + Math.abs(per.getHours())+ ""String_Node_Str"";
          Alfred.println(""String_Node_Str"",""String_Node_Str"" + this.name + ""String_Node_Str""+ expireTime+ ""String_Node_Str"");
        }
 else         if (this.timeunit.equalsIgnoreCase(""String_Node_Str"")) {
          String expireTime=Math.abs(per.getDays()) + ""String_Node_Str"";
          Alfred.println(""String_Node_Str"",""String_Node_Str"" + this.name + ""String_Node_Str""+ expireTime+ ""String_Node_Str"");
        }
 else {
          Alfred.println(""String_Node_Str"",""String_Node_Str"" + this.name + ""String_Node_Str"");
        }
      }
    }
  }
}",0.9945228215767636
24598,"private void createPicture2(Graphics2D g){
  g.setColor(Color.GRAY);
  g.fillRect(0,0,205,304);
  ArrayList<GameItem> items=player.getInventory().getItems();
  int x=0, y=0;
  for (int i=0; i < items.size(); i++) {
    drawItem(items.get(i),g,2 + x * 40,29 + y * 40);
    if (++x == 5) {
      x=0;
      y++;
    }
  }
  g.drawImage(Resources.getImage(""String_Node_Str""),0,27,this);
  g.setColor(Color.YELLOW);
  g.setFont(new Font(""String_Node_Str"",Font.PLAIN,20));
  g.drawString(player.getMoney() + ""String_Node_Str"",90,287);
}","private void createPicture2(Graphics2D g){
  g.setColor(Color.GRAY);
  g.fillRect(0,0,205,304);
  ArrayList<GameItem> items=player.getInventory().getItems();
  for (int i=0; i < items.size(); i++) {
    drawItem(items.get(i),g,2 + (i % 5) * 40,29 + (i / 5) * 40);
  }
  g.drawImage(Resources.getImage(""String_Node_Str""),0,27,this);
  g.setColor(Color.YELLOW);
  g.setFont(new Font(""String_Node_Str"",Font.PLAIN,20));
  g.drawString(player.getMoney() + ""String_Node_Str"",90,287);
}",0.9207920792079208
24599,"@Override public void mouseClicked(MouseEvent e){
  int x=e.getX(), y=e.getY();
  int bodyPart=getEquipPlace(x,y);
  if (bodyPart != -1 && !player.isFree(bodyPart))   addActionRequest(""String_Node_Str"" + player.name + ""String_Node_Str""+ bodyPart);
  if (x < 440 || x > 630 || y < 30 || y > 260)   return;
  x-=440;
  y-=30;
  x/=40;
  y/=40;
  int itemIndex=x + 5 * y;
  if (itemIndex < player.getInventory().getMaxSize()) {
    GameItem item=player.getInventory().getItem(itemIndex);
    if (item != null) {
      if (item instanceof Weapon || item instanceof Armor) {
        if (e.getButton() == 3)         addActionRequest(""String_Node_Str"" + player.name + ""String_Node_Str""+ itemIndex);
 else         addActionRequest(""String_Node_Str"" + player.name + ""String_Node_Str""+ itemIndex);
      }
 else       if (item instanceof UsableItem) {
        addActionRequest(""String_Node_Str"" + player.name + ""String_Node_Str""+ itemIndex);
      }
    }
  }
}","@Override public void mouseClicked(MouseEvent e){
  int x=e.getX(), y=e.getY();
  int bodyPart=getEquipPlace(x,y);
  if (bodyPart != -1 && !player.isFree(bodyPart))   addActionRequest(""String_Node_Str"" + player.name + ""String_Node_Str""+ bodyPart);
  if (x < 440 || x > 630 || y < 30 || y > 260)   return;
  x-=440;
  y-=30;
  x/=40;
  y/=40;
  int itemIndex=x + 5 * y;
  if (itemIndex < player.getInventory().getSize()) {
    GameItem item=player.getInventory().getItem(itemIndex);
    if (item != null) {
      if (item instanceof Weapon || item instanceof Armor) {
        if (e.getButton() == 3)         addActionRequest(""String_Node_Str"" + player.name + ""String_Node_Str""+ itemIndex);
 else         addActionRequest(""String_Node_Str"" + player.name + ""String_Node_Str""+ itemIndex);
      }
 else       if (item instanceof UsableItem) {
        addActionRequest(""String_Node_Str"" + player.name + ""String_Node_Str""+ itemIndex);
      }
    }
  }
}",0.9984202211690364
24600,"@Override public void mouseMoved(MouseEvent e){
  int x=e.getX(), y=e.getY();
  int bodyPart=getEquipPlace(x,y);
  if (bodyPart != -1) {
    setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    selectedItem=player.getEquip(bodyPart);
    runOnUIThread(new Runnable(){
      @Override public void run(){
        if (selectedItem != null)         itemInfoLabel.setText(infoButton.getText().equals(INFO_ON) ? selectedItem.toPseudoHTML() : selectedItem.toPseudoHTMLShort());
      }
    }
);
    return;
  }
  if (x < 440 || x > 630 || y < 30 || y > 260) {
    setCursor(Cursor.getDefaultCursor());
    return;
  }
  x-=440;
  y-=30;
  x/=40;
  y/=40;
  setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  int itemIndex=x + 5 * y;
  if (itemIndex < player.getInventory().getMaxSize()) {
    GameItem item=player.getInventory().getItem(itemIndex);
    if (item != null && item != selectedItem) {
      selectedItem=item;
      runOnUIThread(new Runnable(){
        @Override public void run(){
          if (selectedItem != null)           itemInfoLabel.setText(infoButton.getText().equals(INFO_ON) ? selectedItem.toPseudoHTML() : selectedItem.toPseudoHTMLShort());
        }
      }
);
    }
  }
}","@Override public void mouseMoved(MouseEvent e){
  int x=e.getX(), y=e.getY();
  int bodyPart=getEquipPlace(x,y);
  if (bodyPart != -1) {
    setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    selectedItem=player.getEquip(bodyPart);
    runOnUIThread(new Runnable(){
      @Override public void run(){
        if (selectedItem != null)         itemInfoLabel.setText(infoButton.getText().equals(INFO_ON) ? selectedItem.toPseudoHTML() : selectedItem.toPseudoHTMLShort());
      }
    }
);
    return;
  }
  if (x < 440 || x > 630 || y < 30 || y > 260) {
    setCursor(Cursor.getDefaultCursor());
    return;
  }
  x-=440;
  y-=30;
  x/=40;
  y/=40;
  setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  int itemIndex=x + 5 * y;
  if (itemIndex < player.getInventory().getSize()) {
    GameItem item=player.getInventory().getItem(itemIndex);
    if (item != null && item != selectedItem) {
      selectedItem=item;
      runOnUIThread(new Runnable(){
        @Override public void run(){
          if (selectedItem != null)           itemInfoLabel.setText(infoButton.getText().equals(INFO_ON) ? selectedItem.toPseudoHTML() : selectedItem.toPseudoHTMLShort());
        }
      }
);
    }
  }
}",0.9987608426270136
24601,"public boolean addItem(GameItem item){
  if (items.size() < size) {
    return items.add(item);
  }
  Out.err(""String_Node_Str"");
  return false;
}","/** 
 * Adds item to inventory if inventory isnt full
 * @param item item to add
 * @return true if added, false otherwise
 */
public boolean addItem(GameItem item){
  if (isFull()) {
    Out.err(""String_Node_Str"");
    return false;
  }
  return items.add(item);
}",0.4805825242718446
24602,"public GameItem removeItem(GameItem item){
  if (!items.remove(item))   Out.err(""String_Node_Str"");
  return item;
}","/** 
 * Removes item from the inventory if it is in it
 * @param item
 * @return true if removed, false otherwise
 */
public boolean removeItem(GameItem item){
  if (!items.remove(item)) {
    Out.err(""String_Node_Str"");
    return false;
  }
  return true;
}",0.4533333333333333
24603,"public ArrayList<GameItem> getItems(){
  return new ArrayList<GameItem>(items);
}","/** 
 * @return a new copy of items list, retaining references to original items
 */
public ArrayList<GameItem> getItems(){
  return new ArrayList<GameItem>(items);
}",0.6558704453441295
24604,"public GameItem getItem(int index){
  if (index < items.size())   return items.get(index);
 else   return null;
}","/** 
 * Retrieve item at given index
 * @param index
 * @return item if index less than inventory size otherwise null
 */
public GameItem getItem(int index){
  return index < items.size() ? items.get(index) : null;
}",0.4741641337386018
24605,"public boolean isFull(){
  return items.size() >= size;
}","/** 
 * @return true if number of items in inventory reached maximum false otherwise
 */
public boolean isFull(){
  return items.size() == MAX_SIZE;
}",0.5024154589371981
24606,"@Override public void run(){
  List<Player> tmpPlayers=new ArrayList<Player>();
  while (true) {
    tmpPlayers=new ArrayList<Player>(players);
    for (Iterator<Animation> it=animations.iterator(); it.hasNext(); ) {
      Animation a=it.next();
      a.duration-=20.0f / 1000.0f;
      if (a.duration <= 0)       it.remove();
    }
    for (Iterator<Enemy> it=enemies.iterator(); it.hasNext(); ) {
      Enemy e=it.next();
      if (e.isAlive()) {
        AgentBehaviour ai=e.AI;
        for (        AgentRule rule : aiRules) {
          if (rule.matches(ai.type,ai.currentGoal,ai.currentMode)) {
          }
        }
        e.update();
      }
 else {
        it.remove();
      }
    }
    for (    Player p : tmpPlayers) {
      if (locationFacts.size() == 0) {
        locationFacts.put(new Point(p.getX(),p.getY()),0.1f);
      }
      p.update();
      for (Iterator<Chest> it=chests.iterator(); it.hasNext(); ) {
        Chest c=it.next();
        if (c.isOpened()) {
          it.remove();
        }
 else {
          if (distanceBetween(p,c) < 1) {
            c.open();
            for (            GameItem item : c.getItems())             p.getInventory().addItem(item);
            p.incMoney(c.money);
          }
        }
      }
    }
    Iterator<Entry<Point,Float>> iter=locationFacts.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Point,Float> pairs=(Map.Entry<Point,Float>)iter.next();
      pairs.setValue((float)(pairs.getValue() - 0.01));
      if (pairs.getValue() < 0)       iter.remove();
    }
    Player[] toSend=new Player[tmpPlayers.size()];
    for (int i=0; i < tmpPlayers.size(); i++)     toSend[i]=tmpPlayers.get(i);
    Chest[] chestsToSend=new Chest[chests.size()];
    for (int i=0; i < chests.size(); i++)     chestsToSend[i]=chests.get(i);
    Enemy[] eneToSend=new Enemy[enemies.size()];
    for (int i=0; i < enemies.size(); i++)     eneToSend[i]=enemies.get(i);
    Animation[] animsToSend=new Animation[animations.size()];
    for (int i=0; i < animations.size(); i++)     animsToSend[i]=animations.get(i);
    try {
      server.send(new DataPacket(toSend));
      server.send(new DataPacket(chestsToSend));
      server.send(new DataPacket(eneToSend));
      server.send(new DataPacket(animsToSend));
      Thread.sleep(20);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  List<Player> tmpPlayers=new ArrayList<Player>();
  while (true) {
    tmpPlayers=new ArrayList<Player>(players);
    for (Iterator<Animation> it=animations.iterator(); it.hasNext(); ) {
      Animation a=it.next();
      a.duration-=20.0f / 1000.0f;
      if (a.duration <= 0)       it.remove();
    }
    for (Iterator<Enemy> it=enemies.iterator(); it.hasNext(); ) {
      Enemy e=it.next();
      if (e.isAlive()) {
        AgentBehaviour ai=e.AI;
        for (        AgentRule rule : aiRules) {
          if (rule.matches(ai.type,ai.currentGoal,ai.currentMode)) {
          }
        }
        e.update();
      }
 else {
        it.remove();
      }
    }
    for (    Player p : tmpPlayers) {
      if (locationFacts.size() == 0) {
        locationFacts.put(new Point(p.getX(),p.getY()),0.1f);
      }
      p.update();
      for (Iterator<Chest> it=chests.iterator(); it.hasNext(); ) {
        Chest c=it.next();
        if (c.isOpened()) {
          it.remove();
        }
 else {
          if (distanceBetween(p,c) < 1) {
            if (p.getInventory().getSize() + c.getItems().size() <= Inventory.MAX_SIZE) {
              c.open();
              for (              GameItem item : c.getItems())               p.getInventory().addItem(item);
              p.incMoney(c.money);
            }
          }
        }
      }
    }
    Iterator<Entry<Point,Float>> iter=locationFacts.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Point,Float> pairs=(Map.Entry<Point,Float>)iter.next();
      pairs.setValue((float)(pairs.getValue() - 0.01));
      if (pairs.getValue() < 0)       iter.remove();
    }
    Player[] toSend=new Player[tmpPlayers.size()];
    for (int i=0; i < tmpPlayers.size(); i++)     toSend[i]=tmpPlayers.get(i);
    Chest[] chestsToSend=new Chest[chests.size()];
    for (int i=0; i < chests.size(); i++)     chestsToSend[i]=chests.get(i);
    Enemy[] eneToSend=new Enemy[enemies.size()];
    for (int i=0; i < enemies.size(); i++)     eneToSend[i]=enemies.get(i);
    Animation[] animsToSend=new Animation[animations.size()];
    for (int i=0; i < animations.size(); i++)     animsToSend[i]=animations.get(i);
    try {
      server.send(new DataPacket(toSend));
      server.send(new DataPacket(chestsToSend));
      server.send(new DataPacket(eneToSend));
      server.send(new DataPacket(animsToSend));
      Thread.sleep(20);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9657590759075908
24607,"public void update(){
  regenTick+=0.05f;
  if (regenTick >= 2.0f) {
    hp=Math.min((int)getTotalStat(MAX_HP),(int)(hp + getTotalStat(HP_REGEN)));
    sp=Math.min((int)getTotalStat(MAX_SP),(int)(sp + getTotalStat(SP_REGEN)));
    regenTick=0.0f;
  }
  for (  Skill sk : skills) {
    if (sk.active) {
      if (sk.getCurrentCooldown() > 0) {
        sk.reduceCurrentCooldown(0.05f);
      }
    }
 else {
      if (sk.getLevel() > 0)       sk.use(this,null);
    }
  }
  updateEffects();
  updateStatusEffects();
}","public void update(){
  regenTick+=0.05f;
  if (regenTick >= 2.0f) {
    hp=Math.min((int)getTotalStat(MAX_HP),(int)(hp + getTotalStat(HP_REGEN)));
    sp=Math.min((int)getTotalStat(MAX_SP),(int)(sp + getTotalStat(SP_REGEN)));
    regenTick=0.0f;
  }
  for (  Skill sk : skills) {
    if (sk.active) {
      if (sk.getCurrentCooldown() > 0) {
        sk.reduceCurrentCooldown(0.05f);
      }
    }
 else {
      if (sk.getLevel() > 0)       sk.use(this,null);
    }
  }
  updateEffects();
  updateStatusEffects();
  calculateStats();
}",0.9809523809523808
24608,"/** 
 * @param type
 * @param target can be null
 */
public AgentBehaviour(AgentType type,AgentGoalTarget target){
  this.type=type;
  currentGoal=type.initialGoal;
  currentTarget=target;
}","public AgentBehaviour(AgentType type,AgentGoal goal,AgentMode mode){
  this.type=type;
  currentGoal=goal;
  currentMode=mode;
}",0.6729559748427673
24609,"public AgentRule(AgentType type,AgentGoal goal){
  this.type=type;
  this.goal=goal;
}","public AgentRule(AgentType type,AgentGoal goal,AgentMode mode){
  this.type=type;
  this.goal=goal;
  this.mode=mode;
}",0.8390243902439024
24610,"public abstract void execute(EnemyAgent agent,AgentGoalTarget target);","public abstract void execute(Enemy agent,AgentGoalTarget target);",0.9629629629629628
24611,"public boolean matches(AgentType type,AgentGoal goal){
  return this.type == type && this.goal == goal;
}","public boolean matches(AgentType type,AgentGoal goal,AgentMode mode){
  return this.type == type && this.goal == goal && this.mode == mode;
}",0.8536585365853658
24612,"public static void load(){
  addArmor(new Armor(ID.Armor.HAT,""String_Node_Str"",Desc.Armor.HAT,10,13,ArmorType.HELM,0,0));
  addArmor(new Armor(ID.Armor.CLOTHES,""String_Node_Str"",Desc.Armor.CLOTHES,0,13,ArmorType.BODY,0,0));
  addArmor(new Armor(ID.Armor.SHOES,""String_Node_Str"",Desc.Armor.SHOES,0,14,ArmorType.SHOES,0,0));
  addArmor(new Armor(ID.Armor.CHAINMAL,""String_Node_Str"",Desc.Armor.CHAINMAL,4,13,ArmorType.BODY,15,5));
  addArmor(new Armor(ID.Armor.SOUL_BARRIER,""String_Node_Str"",Desc.Armor.SOUL_BARRIER,3,13,""String_Node_Str"",ItemLevel.UNIQUE,ArmorType.BODY,10,50,Element.NEUTRAL,3,new Rune(Attribute.WILLPOWER,3)));
  addArmor(new Armor(ID.Armor.DOMOVOI,""String_Node_Str"",Desc.Armor.DOMOVOI,2,13,""String_Node_Str"",ItemLevel.UNIQUE,ArmorType.BODY,15,30,Element.NEUTRAL,4,new Rune(Attribute.WILLPOWER,3)));
  addArmor(new Armor(ID.Armor.SAPPHIRE_LEGION_PLATE_MAIL,""String_Node_Str"",Desc.Armor.SAPPHIRE_LEGION_PLATE_MAIL,5,13,""String_Node_Str"",ItemLevel.UNIQUE,ArmorType.BODY,30,10,Element.NEUTRAL,4,new Rune(Attribute.VITALITY,4)));
  addArmor(new Armor(ID.Armor.THANATOS_BODY_ARMOR,""String_Node_Str"",Desc.Armor.THANATOS_BODY_ARMOR,6,13,""String_Node_Str"",ItemLevel.EPIC,ArmorType.BODY,50,25,Element.EARTH,4,new Rune(Attribute.VITALITY,5),new Rune(Attribute.PERCEPTION,4)));
  addWeapon(new Weapon(ID.Weapon.HANDS,""String_Node_Str"",Desc.Weapon.HANDS,0,7,WeaponType.MACE,0));
  addWeapon(new Weapon(ID.Weapon.IRON_SWORD,""String_Node_Str"",Desc.Weapon.IRON_SWORD,0,5,WeaponType.ONE_H_SWORD,15));
  addWeapon(new Weapon(ID.Weapon.KNIFE,""String_Node_Str"",Desc.Weapon.KNIFE,0,6,WeaponType.DAGGER,5));
  addWeapon(new Weapon(ID.Weapon.CLAYMORE,""String_Node_Str"",Desc.Weapon.CLAYMORE,10,5,WeaponType.TWO_H_SWORD,35));
  addWeapon(new Weapon(ID.Weapon.BROADSWORD,""String_Node_Str"",Desc.Weapon.BROADSWORD,11,5,WeaponType.TWO_H_SWORD,28));
  addWeapon(new Weapon(ID.Weapon.BATTLESWORD,""String_Node_Str"",Desc.Weapon.BATTLESWORD,12,5,""String_Node_Str"",ItemLevel.NORMAL,WeaponType.TWO_H_SWORD,44,Element.NEUTRAL,2,new Rune(Attribute.STRENGTH,2)));
  addWeapon(new Weapon(ID.Weapon.LONGSWORD,""String_Node_Str"",Desc.Weapon.LONGSWORD,9,5,""String_Node_Str"",ItemLevel.NORMAL,WeaponType.TWO_H_SWORD,33,Element.NEUTRAL,2,new Rune(Attribute.DEXTERITY,2),new Rune(Attribute.AGILITY,1)));
  addWeapon(new Weapon(ID.Weapon.GETSUGA_TENSHO,""String_Node_Str"",Desc.Weapon.GETSUGA_TENSHO,4,6,""String_Node_Str"",ItemLevel.EPIC,WeaponType.ONE_H_SWORD,150,Element.NEUTRAL,4,new Rune(Attribute.STRENGTH,5),new Rune(Attribute.AGILITY,4),new Rune(Attribute.DEXTERITY,4),new Rune(Attribute.LUCK,1)));
  addWeapon(new Weapon(ID.Weapon.SOUL_REAPER,""String_Node_Str"",Desc.Weapon.SOUL_REAPER,10,10,""String_Node_Str"",ItemLevel.EPIC,WeaponType.TWO_H_AXE,170,Element.NEUTRAL,4,new Rune(Attribute.STRENGTH,7),new Rune(Attribute.VITALITY,4),new Rune(Attribute.DEXTERITY,2)));
  addWeapon(new Weapon(ID.Weapon.GUT_RIPPER,""String_Node_Str"",Desc.Weapon.GUT_RIPPER,2,6,""String_Node_Str"",ItemLevel.EPIC,WeaponType.DAGGER,100,Element.NEUTRAL,4,new Rune(Attribute.AGILITY,4),new Rune(Attribute.DEXTERITY,4),new Rune(Attribute.LUCK,1)));
  addWeapon(new Weapon(ID.Weapon.DRAGON_CLAW,""String_Node_Str"",Desc.Weapon.DRAGON_CLAW,12,11,""String_Node_Str"",ItemLevel.EPIC,WeaponType.BOW,130,Element.FIRE,4,new Rune(Attribute.VITALITY,3),new Rune(Attribute.WISDOM,5),new Rune(Attribute.AGILITY,3)));
  addWeapon(new Weapon(ID.Weapon.FROSTMOURN,""String_Node_Str"",Desc.Weapon.FROSTMOURN,8,25,""String_Node_Str"",ItemLevel.EPIC,WeaponType.TWO_H_SWORD,130,Element.WATER,4,new Rune(Attribute.DEXTERITY,5),new Rune(Attribute.STRENGTH,3)));
  addSkill(new Skill(ID.Skill.HEAL,""String_Node_Str"",Desc.Skill.HEAL,true,10.0f){
    /** 
 */
    private static final long serialVersionUID=1379897406205500901L;
    @Override public int getManaCost(){
      return level * 10;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      target.setHP(Math.min(target.getHP() + 30 + level * 10,(int)target.getTotalStat(Stat.MAX_HP)));
    }
  }
);
  addSkill(new Skill(ID.Skill.MANA_BURN,""String_Node_Str"",Desc.Skill.MANA_BURN,true,10.0f){
    /** 
 */
    private static final long serialVersionUID=7719535667188968500L;
    @Override public int getManaCost(){
      return 50 + level * 25;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      int oldSP=target.getSP();
      target.setSP(Math.max(oldSP - 50 * level,0));
      caster.dealMagicalDamage(target,oldSP - target.getSP(),Element.NEUTRAL);
    }
  }
);
  addSkill(new Skill(ID.Skill.FINAL_STRIKE,""String_Node_Str"",Desc.Skill.FINAL_STRIKE,true,10.0f){
    /** 
 */
    private static final long serialVersionUID=2091028246707933529L;
    @Override public int getManaCost(){
      return 100 + level * 100;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float phys=(caster.getHP() - 1) * 0.003f + 250 * level;
      float mag=caster.getSP() * 0.003f + 250 * level;
      caster.setHP(1);
      caster.setSP(0);
      caster.dealMagicalDamage(target,mag,Element.NEUTRAL);
      caster.dealPhysicalDamage(target,phys,Element.NEUTRAL);
    }
  }
);
  addSkill(new Skill(ID.Skill.PIERCING_TOUCH,""String_Node_Str"",Desc.Skill.PIERCING_TOUCH,true,9.0f){
    /** 
 */
    private static final long serialVersionUID=1513947512801417510L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=level * 5 * (15 + target.getTotalStat(GameCharacter.ARM) / 100.0f);
      caster.dealPhysicalDamage(target,dmg);
    }
  }
);
  addSkill(new Skill(ID.Skill.BULLSEYE,""String_Node_Str"",Desc.Skill.BULLSEYE,true,60.0f){
    /** 
 */
    private static final long serialVersionUID=6923525936384357867L;
    @Override public int getManaCost(){
      return 5 + level * 10;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=100 + level * 85 - target.getTotalStat(GameCharacter.DEF);
      caster.dealPureDamage(target,dmg);
    }
  }
);
  addSkill(new Skill(ID.Skill.CLAUDIUS,""String_Node_Str"",Desc.Skill.CLAUDIUS,true,30.0f){
    /** 
 */
    private static final long serialVersionUID=5612472865672733186L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      target.addBonusAttribute(Attribute.VITALITY,2 * level);
      target.addBonusAttribute(Attribute.WISDOM,2 * level);
      target.addBonusAttribute(Attribute.LUCK,2 * level);
      target.addBonusAttribute(Attribute.INTELLECT,-3 * level);
    }
  }
);
  addSkill(new Skill(ID.Skill.FIVE_FINGER_DEATH_PUNCH,""String_Node_Str"",Desc.Skill.FIVE_FINGER_DEATH_PUNCH,true,30.0f){
    /** 
 */
    private static final long serialVersionUID=168758926959802026L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=20 + level * 30 - target.getTotalStat(Stat.ARM);
      caster.dealPhysicalDamage(target,dmg);
    }
  }
);
  addSkill(new Skill(ID.Skill.BLOODLUST,""String_Node_Str"",Desc.Skill.BLOODLUST,false,0.0f){
    /** 
 */
    private static final long serialVersionUID=5844145407908548491L;
    private int value=0;
    @Override public int getManaCost(){
      return 0;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      caster.addBonusStat(Stat.ATK,-value);
      value=(int)(10 * level * caster.getTotalStat(Stat.MAX_HP) / (caster.getHP() + 1));
      caster.addBonusStat(Stat.ATK,value);
    }
  }
);
  addSkill(new Skill(ID.Skill.BASH,""String_Node_Str"",Desc.Skill.BASH,true,15.0f){
    /** 
 */
    private static final long serialVersionUID=2177640389884854474L;
    @Override public int getManaCost(){
      return 5 + level * 3;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=(1 + (15 + 5 * level) / 100.0f) * caster.getTotalStat(Stat.ATK);
      caster.dealPhysicalDamage(target,dmg);
    }
  }
);
  addSkill(new Skill(ID.Skill.MIGHTY_SWING,""String_Node_Str"",Desc.Skill.MIGHTY_SWING,true,15.0f){
    /** 
 */
    private static final long serialVersionUID=8019137126608309704L;
    @Override public int getManaCost(){
      return 5 + level * 4;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      float diff=caster.getTotalAttribute(Attribute.STRENGTH) - target.getTotalAttribute(Attribute.STRENGTH);
      float dmg=(Math.max(diff,0) + 10 * level) * 5;
      caster.dealPhysicalDamage(target,dmg);
    }
  }
);
  addSkill(new Skill(ID.Skill.DOUBLE_EDGE,""String_Node_Str"",Desc.Skill.DOUBLE_EDGE,true,0.0f){
    /** 
 */
    private static final long serialVersionUID=-5670132035647752285L;
    @Override public int getManaCost(){
      return 0;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=(0.1f + 0.02f * level) * caster.getHP();
      caster.setHP(Math.round(caster.getHP() - dmg));
      caster.dealPureDamage(target,2 * dmg);
    }
  }
);
  addSkill(new Skill(ID.Skill.ROAR,""String_Node_Str"",Desc.Skill.ROAR,true,5.0f){
    /** 
 */
    private static final long serialVersionUID=5098091102433780519L;
    @Override public int getManaCost(){
      return 2 + level * 2;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      caster.addEffect(new Effect((5.0f),new Rune[]{new Rune(Attribute.STRENGTH,level * 2),new Rune(Attribute.VITALITY,level * 2)},new Essence[]{}));
    }
  }
);
  addSkill(new Skill(ID.Skill.LAST_STAND,""String_Node_Str"",Desc.Skill.LAST_STAND,true,60.0f){
    /** 
 */
    private static final long serialVersionUID=-8176078084748576113L;
    @Override public int getManaCost(){
      return 2 + level * 5;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      caster.addEffect(new Effect((20.0f),new Rune[]{},new Essence[]{new Essence(Stat.ATK,Math.round(caster.getBaseStat(Stat.ATK)))}));
    }
  }
);
  addSkill(new Skill(ID.Skill.SHATTER_ARMOR,""String_Node_Str"",Desc.Skill.SHATTER_ARMOR,true,30.0f){
    /** 
 */
    private static final long serialVersionUID=-4834599835655165707L;
    @Override public int getManaCost(){
      return 2 + level * 5;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      target.addEffect(new Effect((20.0f),new Rune[]{},new Essence[]{new Essence(Stat.ARM,-2 * level)}));
    }
  }
);
  addSkill(new Skill(ID.Skill.ARMOR_MASTERY,""String_Node_Str"",Desc.Skill.ARMOR_MASTERY,false,0.0f){
    /** 
 */
    private static final long serialVersionUID=8019137126608309704L;
    private int value=0;
    @Override public int getManaCost(){
      return 0;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      caster.addBonusStat(Stat.ARM,-value);
      value=2 * level;
      caster.addBonusStat(Stat.ARM,value);
    }
  }
);
  addSkill(new Skill(ID.Skill.WARRIOR_HEART,""String_Node_Str"",Desc.Skill.WARRIOR_HEART,false,0.0f){
    /** 
 */
    private static final long serialVersionUID=-9161209014480342120L;
    private int value=0;
    @Override public int getManaCost(){
      return 0;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      caster.addBonusStat(Stat.MAX_HP,-value);
      value=Math.round(0.025f * level * caster.getBaseStat(Stat.MAX_HP));
      caster.addBonusStat(Stat.MAX_HP,value);
    }
  }
);
  addEnemy(new Enemy(ID.Enemy.MINOR_FIRE_SPIRIT,""String_Node_Str"",Desc.Enemy.MINOR_FIRE_SPIRIT,EnemyType.NORMAL,new AgentBehaviour(AgentType.SCOUT,null),Element.FIRE,1,5,new DroppableItem(ID.Weapon.KNIFE,50)));
  addEnemy(new Enemy(ID.Enemy.MINOR_EARTH_SPIRIT,""String_Node_Str"",Desc.Enemy.MINOR_EARTH_SPIRIT,EnemyType.NORMAL,new AgentBehaviour(AgentType.ASSASSIN,null),Element.EARTH,1,5,new DroppableItem(ID.Weapon.IRON_SWORD,15)));
  addEssence(new Essence(""String_Node_Str"",Stat.ATK,5));
}","public static void load(){
  addArmor(new Armor(ID.Armor.HAT,""String_Node_Str"",Desc.Armor.HAT,10,13,ArmorType.HELM,0,0));
  addArmor(new Armor(ID.Armor.CLOTHES,""String_Node_Str"",Desc.Armor.CLOTHES,0,13,ArmorType.BODY,0,0));
  addArmor(new Armor(ID.Armor.SHOES,""String_Node_Str"",Desc.Armor.SHOES,0,14,ArmorType.SHOES,0,0));
  addArmor(new Armor(ID.Armor.CHAINMAL,""String_Node_Str"",Desc.Armor.CHAINMAL,4,13,ArmorType.BODY,15,5));
  addArmor(new Armor(ID.Armor.SOUL_BARRIER,""String_Node_Str"",Desc.Armor.SOUL_BARRIER,3,13,""String_Node_Str"",ItemLevel.UNIQUE,ArmorType.BODY,10,50,Element.NEUTRAL,3,new Rune(Attribute.WILLPOWER,3)));
  addArmor(new Armor(ID.Armor.DOMOVOI,""String_Node_Str"",Desc.Armor.DOMOVOI,2,13,""String_Node_Str"",ItemLevel.UNIQUE,ArmorType.BODY,15,30,Element.NEUTRAL,4,new Rune(Attribute.WILLPOWER,3)));
  addArmor(new Armor(ID.Armor.SAPPHIRE_LEGION_PLATE_MAIL,""String_Node_Str"",Desc.Armor.SAPPHIRE_LEGION_PLATE_MAIL,5,13,""String_Node_Str"",ItemLevel.UNIQUE,ArmorType.BODY,30,10,Element.NEUTRAL,4,new Rune(Attribute.VITALITY,4)));
  addArmor(new Armor(ID.Armor.THANATOS_BODY_ARMOR,""String_Node_Str"",Desc.Armor.THANATOS_BODY_ARMOR,6,13,""String_Node_Str"",ItemLevel.EPIC,ArmorType.BODY,50,25,Element.EARTH,4,new Rune(Attribute.VITALITY,5),new Rune(Attribute.PERCEPTION,4)));
  addWeapon(new Weapon(ID.Weapon.HANDS,""String_Node_Str"",Desc.Weapon.HANDS,0,7,WeaponType.MACE,0));
  addWeapon(new Weapon(ID.Weapon.IRON_SWORD,""String_Node_Str"",Desc.Weapon.IRON_SWORD,0,5,WeaponType.ONE_H_SWORD,15));
  addWeapon(new Weapon(ID.Weapon.KNIFE,""String_Node_Str"",Desc.Weapon.KNIFE,0,6,WeaponType.DAGGER,5));
  addWeapon(new Weapon(ID.Weapon.CLAYMORE,""String_Node_Str"",Desc.Weapon.CLAYMORE,10,5,WeaponType.TWO_H_SWORD,35));
  addWeapon(new Weapon(ID.Weapon.BROADSWORD,""String_Node_Str"",Desc.Weapon.BROADSWORD,11,5,WeaponType.TWO_H_SWORD,28));
  addWeapon(new Weapon(ID.Weapon.BATTLESWORD,""String_Node_Str"",Desc.Weapon.BATTLESWORD,12,5,""String_Node_Str"",ItemLevel.NORMAL,WeaponType.TWO_H_SWORD,44,Element.NEUTRAL,2,new Rune(Attribute.STRENGTH,2)));
  addWeapon(new Weapon(ID.Weapon.LONGSWORD,""String_Node_Str"",Desc.Weapon.LONGSWORD,9,5,""String_Node_Str"",ItemLevel.NORMAL,WeaponType.TWO_H_SWORD,33,Element.NEUTRAL,2,new Rune(Attribute.DEXTERITY,2),new Rune(Attribute.AGILITY,1)));
  addWeapon(new Weapon(ID.Weapon.GETSUGA_TENSHO,""String_Node_Str"",Desc.Weapon.GETSUGA_TENSHO,4,6,""String_Node_Str"",ItemLevel.EPIC,WeaponType.ONE_H_SWORD,150,Element.NEUTRAL,4,new Rune(Attribute.STRENGTH,5),new Rune(Attribute.AGILITY,4),new Rune(Attribute.DEXTERITY,4),new Rune(Attribute.LUCK,1)));
  addWeapon(new Weapon(ID.Weapon.SOUL_REAPER,""String_Node_Str"",Desc.Weapon.SOUL_REAPER,10,10,""String_Node_Str"",ItemLevel.EPIC,WeaponType.TWO_H_AXE,170,Element.NEUTRAL,4,new Rune(Attribute.STRENGTH,7),new Rune(Attribute.VITALITY,4),new Rune(Attribute.DEXTERITY,2)));
  addWeapon(new Weapon(ID.Weapon.GUT_RIPPER,""String_Node_Str"",Desc.Weapon.GUT_RIPPER,2,6,""String_Node_Str"",ItemLevel.EPIC,WeaponType.DAGGER,100,Element.NEUTRAL,4,new Rune(Attribute.AGILITY,4),new Rune(Attribute.DEXTERITY,4),new Rune(Attribute.LUCK,1)));
  addWeapon(new Weapon(ID.Weapon.DRAGON_CLAW,""String_Node_Str"",Desc.Weapon.DRAGON_CLAW,12,11,""String_Node_Str"",ItemLevel.EPIC,WeaponType.BOW,130,Element.FIRE,4,new Rune(Attribute.VITALITY,3),new Rune(Attribute.WISDOM,5),new Rune(Attribute.AGILITY,3)));
  addWeapon(new Weapon(ID.Weapon.FROSTMOURN,""String_Node_Str"",Desc.Weapon.FROSTMOURN,8,25,""String_Node_Str"",ItemLevel.EPIC,WeaponType.TWO_H_SWORD,130,Element.WATER,4,new Rune(Attribute.DEXTERITY,5),new Rune(Attribute.STRENGTH,3)));
  addSkill(new Skill(ID.Skill.HEAL,""String_Node_Str"",Desc.Skill.HEAL,true,10.0f){
    /** 
 */
    private static final long serialVersionUID=1379897406205500901L;
    @Override public int getManaCost(){
      return level * 10;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      target.setHP(Math.min(target.getHP() + 30 + level * 10,(int)target.getTotalStat(Stat.MAX_HP)));
    }
  }
);
  addSkill(new Skill(ID.Skill.MANA_BURN,""String_Node_Str"",Desc.Skill.MANA_BURN,true,10.0f){
    /** 
 */
    private static final long serialVersionUID=7719535667188968500L;
    @Override public int getManaCost(){
      return 50 + level * 25;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      int oldSP=target.getSP();
      target.setSP(Math.max(oldSP - 50 * level,0));
      caster.dealMagicalDamage(target,oldSP - target.getSP(),Element.NEUTRAL);
    }
  }
);
  addSkill(new Skill(ID.Skill.FINAL_STRIKE,""String_Node_Str"",Desc.Skill.FINAL_STRIKE,true,10.0f){
    /** 
 */
    private static final long serialVersionUID=2091028246707933529L;
    @Override public int getManaCost(){
      return 100 + level * 100;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float phys=(caster.getHP() - 1) * 0.003f + 250 * level;
      float mag=caster.getSP() * 0.003f + 250 * level;
      caster.setHP(1);
      caster.setSP(0);
      caster.dealMagicalDamage(target,mag,Element.NEUTRAL);
      caster.dealPhysicalDamage(target,phys,Element.NEUTRAL);
    }
  }
);
  addSkill(new Skill(ID.Skill.PIERCING_TOUCH,""String_Node_Str"",Desc.Skill.PIERCING_TOUCH,true,9.0f){
    /** 
 */
    private static final long serialVersionUID=1513947512801417510L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=level * 5 * (15 + target.getTotalStat(GameCharacter.ARM) / 100.0f);
      caster.dealPhysicalDamage(target,dmg);
    }
  }
);
  addSkill(new Skill(ID.Skill.BULLSEYE,""String_Node_Str"",Desc.Skill.BULLSEYE,true,60.0f){
    /** 
 */
    private static final long serialVersionUID=6923525936384357867L;
    @Override public int getManaCost(){
      return 5 + level * 10;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=100 + level * 85 - target.getTotalStat(GameCharacter.DEF);
      caster.dealPureDamage(target,dmg);
    }
  }
);
  addSkill(new Skill(ID.Skill.CLAUDIUS,""String_Node_Str"",Desc.Skill.CLAUDIUS,true,30.0f){
    /** 
 */
    private static final long serialVersionUID=5612472865672733186L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      target.addBonusAttribute(Attribute.VITALITY,2 * level);
      target.addBonusAttribute(Attribute.WISDOM,2 * level);
      target.addBonusAttribute(Attribute.LUCK,2 * level);
      target.addBonusAttribute(Attribute.INTELLECT,-3 * level);
    }
  }
);
  addSkill(new Skill(ID.Skill.FIVE_FINGER_DEATH_PUNCH,""String_Node_Str"",Desc.Skill.FIVE_FINGER_DEATH_PUNCH,true,30.0f){
    /** 
 */
    private static final long serialVersionUID=168758926959802026L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=20 + level * 30 - target.getTotalStat(Stat.ARM);
      caster.dealPhysicalDamage(target,dmg);
    }
  }
);
  addSkill(new Skill(ID.Skill.BLOODLUST,""String_Node_Str"",Desc.Skill.BLOODLUST,false,0.0f){
    /** 
 */
    private static final long serialVersionUID=5844145407908548491L;
    private int value=0;
    @Override public int getManaCost(){
      return 0;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      caster.addBonusStat(Stat.ATK,-value);
      value=(int)(10 * level * caster.getTotalStat(Stat.MAX_HP) / (caster.getHP() + 1));
      caster.addBonusStat(Stat.ATK,value);
    }
  }
);
  addSkill(new Skill(ID.Skill.BASH,""String_Node_Str"",Desc.Skill.BASH,true,15.0f){
    /** 
 */
    private static final long serialVersionUID=2177640389884854474L;
    @Override public int getManaCost(){
      return 5 + level * 3;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=(1 + (15 + 5 * level) / 100.0f) * caster.getTotalStat(Stat.ATK);
      caster.dealPhysicalDamage(target,dmg);
    }
  }
);
  addSkill(new Skill(ID.Skill.MIGHTY_SWING,""String_Node_Str"",Desc.Skill.MIGHTY_SWING,true,15.0f){
    /** 
 */
    private static final long serialVersionUID=8019137126608309704L;
    @Override public int getManaCost(){
      return 5 + level * 4;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      float diff=caster.getTotalAttribute(Attribute.STRENGTH) - target.getTotalAttribute(Attribute.STRENGTH);
      float dmg=(Math.max(diff,0) + 10 * level) * 5;
      caster.dealPhysicalDamage(target,dmg);
    }
  }
);
  addSkill(new Skill(ID.Skill.DOUBLE_EDGE,""String_Node_Str"",Desc.Skill.DOUBLE_EDGE,true,0.0f){
    /** 
 */
    private static final long serialVersionUID=-5670132035647752285L;
    @Override public int getManaCost(){
      return 0;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=(0.1f + 0.02f * level) * caster.getHP();
      caster.setHP(Math.round(caster.getHP() - dmg));
      caster.dealPureDamage(target,2 * dmg);
    }
  }
);
  addSkill(new Skill(ID.Skill.ROAR,""String_Node_Str"",Desc.Skill.ROAR,true,5.0f){
    /** 
 */
    private static final long serialVersionUID=5098091102433780519L;
    @Override public int getManaCost(){
      return 2 + level * 2;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      caster.addEffect(new Effect((5.0f),new Rune[]{new Rune(Attribute.STRENGTH,level * 2),new Rune(Attribute.VITALITY,level * 2)},new Essence[]{}));
    }
  }
);
  addSkill(new Skill(ID.Skill.LAST_STAND,""String_Node_Str"",Desc.Skill.LAST_STAND,true,60.0f){
    /** 
 */
    private static final long serialVersionUID=-8176078084748576113L;
    @Override public int getManaCost(){
      return 2 + level * 5;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      caster.addEffect(new Effect((20.0f),new Rune[]{},new Essence[]{new Essence(Stat.ATK,Math.round(caster.getBaseStat(Stat.ATK)))}));
    }
  }
);
  addSkill(new Skill(ID.Skill.SHATTER_ARMOR,""String_Node_Str"",Desc.Skill.SHATTER_ARMOR,true,30.0f){
    /** 
 */
    private static final long serialVersionUID=-4834599835655165707L;
    @Override public int getManaCost(){
      return 2 + level * 5;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      target.addEffect(new Effect((20.0f),new Rune[]{},new Essence[]{new Essence(Stat.ARM,-2 * level)}));
    }
  }
);
  addSkill(new Skill(ID.Skill.ARMOR_MASTERY,""String_Node_Str"",Desc.Skill.ARMOR_MASTERY,false,0.0f){
    /** 
 */
    private static final long serialVersionUID=8019137126608309704L;
    private int value=0;
    @Override public int getManaCost(){
      return 0;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      caster.addBonusStat(Stat.ARM,-value);
      value=2 * level;
      caster.addBonusStat(Stat.ARM,value);
    }
  }
);
  addSkill(new Skill(ID.Skill.WARRIOR_HEART,""String_Node_Str"",Desc.Skill.WARRIOR_HEART,false,0.0f){
    /** 
 */
    private static final long serialVersionUID=-9161209014480342120L;
    private int value=0;
    @Override public int getManaCost(){
      return 0;
    }
    @Override protected void useImpl(    GameCharacter caster,    GameCharacter target){
      caster.addBonusStat(Stat.MAX_HP,-value);
      value=Math.round(0.025f * level * caster.getBaseStat(Stat.MAX_HP));
      caster.addBonusStat(Stat.MAX_HP,value);
    }
  }
);
  addEnemy(new Enemy(ID.Enemy.MINOR_FIRE_SPIRIT,""String_Node_Str"",Desc.Enemy.MINOR_FIRE_SPIRIT,EnemyType.NORMAL,new AgentBehaviour(AgentType.SCOUT,AgentGoal.FIND_OBJECT,AgentMode.PASSIVE),Element.FIRE,1,5,new DroppableItem(ID.Weapon.KNIFE,50)));
  addEnemy(new Enemy(ID.Enemy.MINOR_EARTH_SPIRIT,""String_Node_Str"",Desc.Enemy.MINOR_EARTH_SPIRIT,EnemyType.NORMAL,new AgentBehaviour(AgentType.ASSASSIN,AgentGoal.KILL_OBJECT,AgentMode.AGGRESSIVE),Element.EARTH,1,5,new DroppableItem(ID.Weapon.IRON_SWORD,15)));
  addEnemy(new Enemy(ID.Enemy.MINOR_WATER_SPIRIT,""String_Node_Str"",Desc.Enemy.MINOR_WATER_SPIRIT,EnemyType.NORMAL,new AgentBehaviour(AgentType.GUARD,AgentGoal.GUARD_OBJECT,AgentMode.PATROL),Element.WATER,1,5,new DroppableItem(ID.Armor.CHAINMAL,25)));
  addEssence(new Essence(""String_Node_Str"",Stat.ATK,5));
}",0.9844848484848484
24613,"public void unEquipItem(int itemPlace){
  if (isFree(itemPlace) || inventory.isFull())   return;
  equip[itemPlace].onUnEquip(this);
  inventory.addItem(equip[itemPlace]);
  equip[itemPlace]=itemPlace >= RIGHT_HAND ? ObjectManager.getWeaponByID(ID.Weapon.HANDS) : ObjectManager.getArmorByID(""String_Node_Str"" + itemPlace);
  calculateStats();
}","public void unEquipItem(int itemPlace){
  if (isFree(itemPlace) || inventory.isFull())   return;
  if (equip[itemPlace] instanceof Weapon) {
    Weapon w=(Weapon)equip[itemPlace];
    if (w.type.ordinal() >= WeaponType.TWO_H_SWORD.ordinal()) {
      if (itemPlace == RIGHT_HAND)       equip[LEFT_HAND]=ObjectManager.getWeaponByID(ID.Weapon.HANDS);
 else       equip[RIGHT_HAND]=ObjectManager.getWeaponByID(ID.Weapon.HANDS);
    }
  }
  equip[itemPlace].onUnEquip(this);
  inventory.addItem(equip[itemPlace]);
  equip[itemPlace]=itemPlace >= RIGHT_HAND ? ObjectManager.getWeaponByID(ID.Weapon.HANDS) : ObjectManager.getArmorByID(""String_Node_Str"" + itemPlace);
  calculateStats();
}",0.4702439024390243
24614,"public StatsGUI(final Player p){
  super(640,304,""String_Node_Str"",true);
  this.setLocation(0,720);
  attributes.setBounds(0,0,320,304);
  stats.setBounds(320,0,320,304);
  attributes.setFocusable(false);
  stats.setFocusable(false);
  attributes.setVerticalAlignment(SwingConstants.TOP);
  stats.setVerticalAlignment(SwingConstants.TOP);
  attributes.setFont(new Font(""String_Node_Str"",Font.PLAIN,22));
  stats.setFont(new Font(""String_Node_Str"",Font.PLAIN,18));
  this.add(attributes);
  this.add(stats);
  for (int i=GameCharacter.STR; i <= GameCharacter.LUC; i++) {
    final int attr=i;
    buttons[i]=new JButton(""String_Node_Str"");
    buttons[i].setBounds(125,3 + 30 * i,45,28);
    buttons[i].setFont(new Font(""String_Node_Str"",Font.PLAIN,18));
    buttons[i].addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        actions.add(""String_Node_Str"" + p.name + ""String_Node_Str""+ attr);
      }
    }
);
    add(buttons[i]);
  }
  setVisible(true);
}","public StatsGUI(final Player p){
  super(640,304,""String_Node_Str"",true);
  this.setLocation(0,720);
  attributes.setBounds(0,0,320,304);
  stats.setBounds(320,0,320,304);
  attributes.setFocusable(false);
  stats.setFocusable(false);
  attributes.setVerticalAlignment(SwingConstants.TOP);
  stats.setVerticalAlignment(SwingConstants.TOP);
  attributes.setFont(new Font(""String_Node_Str"",Font.PLAIN,22));
  stats.setFont(new Font(""String_Node_Str"",Font.PLAIN,18));
  this.add(attributes);
  this.add(stats);
  for (int i=GameCharacter.STR; i <= GameCharacter.LUC; i++) {
    final int attr=i;
    buttons[i]=new JButton(""String_Node_Str"");
    buttons[i].setBounds(125,3 + 30 * i,45,28);
    buttons[i].setFont(new Font(""String_Node_Str"",Font.PLAIN,18));
    buttons[i].addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        actions.add(""String_Node_Str"" + p.name + ""String_Node_Str""+ attr);
      }
    }
);
    add(buttons[i]);
  }
  ToolTipManager.sharedInstance().setInitialDelay(0);
  JButton btn=new JButton();
  btn.setLocation(150,150);
  btn.setSize(40,40);
  btn.setIcon(new ImageIcon(Resources.getImage(""String_Node_Str"")));
  btn.setToolTipText(""String_Node_Str"");
  this.add(btn);
  setVisible(true);
}",0.8863636363636364
24615,"private Player getPlayerByName(String name){
  for (  Player p : players)   if (p.name.equals(name))   return p;
  return null;
}","/** 
 * @param name player name
 * @return player if name exists on the server, if not then null
 */
private Player getPlayerByName(String name){
  for (  Player p : players)   if (p.name.equals(name))   return p;
  return null;
}",0.7019498607242339
24616,"private void parseActions(String[] actions) throws BadActionRequestException {
  for (  String action : actions) {
    String[] tokens=action.split(""String_Node_Str"");
    String cmd=tokens[0];
    Player player=getPlayerByName(tokens[1]);
    if (player == null)     throw new BadActionRequestException(""String_Node_Str"" + tokens[1]);
    int value=0;
    try {
      value=Integer.parseInt(tokens[2]);
    }
 catch (    NumberFormatException e) {
      throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
    }
    int value2=0;
    if (tokens.length == 4) {
      try {
        value2=Integer.parseInt(tokens[3]);
      }
 catch (      NumberFormatException e) {
        throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
      }
    }
switch (cmd) {
case ATTR_UP:
      player.increaseAttr(value);
    break;
case EQUIP:
  GameItem item=player.getInventory().getItem(value);
if (item != null) {
  if (item instanceof Weapon) {
    player.equipWeapon((Weapon)item);
  }
 else   if (item instanceof Armor) {
    player.equipArmor((Armor)item);
  }
 else   throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case UNEQUIP:
player.unEquipItem(value);
break;
case REFINE:
GameItem itemToRefine=player.getInventory().getItem(value);
if (itemToRefine != null) {
if (itemToRefine instanceof EquippableItem) {
((EquippableItem)itemToRefine).refine();
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case ATTACK:
Enemy target=(Enemy)getGameCharacterByRuntimeID(value);
if (target != null && target.isAlive()) {
if (++player.atkTime >= ATK_INTERVAL / (1 + player.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=player.dealDamage(target);
animations.add(new Animation(player.getX(),player.getY(),0.5f,0,25,dmg + ""String_Node_Str""));
player.atkTime=0;
if (target.getHP() <= 0) {
player.gainBaseExperience(target.experience);
player.gainJobExperience(target.experience);
player.gainStatExperience(target.experience);
chests.add(target.onDeath());
}
}
if (++target.atkTime >= ATK_INTERVAL / (1 + target.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=target.dealDamage(player);
animations.add(new Animation(player.getX(),player.getY() + 80,0.5f,0,25,dmg + ""String_Node_Str""));
target.atkTime=0;
if (player.getHP() <= 0) {
}
}
}
break;
case SKILL_USE:
Enemy skTarget=(Enemy)getGameCharacterByRuntimeID(value2);
if (skTarget != null) {
player.useSkill(value,skTarget);
if (skTarget.getHP() <= 0) {
player.gainBaseExperience(skTarget.experience);
player.gainJobExperience(skTarget.experience);
player.gainStatExperience(skTarget.experience);
chests.add(skTarget.onDeath());
}
}
break;
case CHAT:
animations.add(new Animation(player.getX(),player.getY(),2.0f,0,0,player.name + ""String_Node_Str"" + tokens[4]));
break;
default :
throw new BadActionRequestException(""String_Node_Str"" + tokens[0]);
}
}
}","private void parseActions(String[] actions) throws BadActionRequestException {
  for (  String action : actions) {
    String[] tokens=action.split(""String_Node_Str"");
    String cmd=tokens[0];
    Player player=getPlayerByName(tokens[1]);
    if (player == null)     throw new BadActionRequestException(""String_Node_Str"" + tokens[1]);
    int value=0;
    try {
      value=Integer.parseInt(tokens[2]);
    }
 catch (    NumberFormatException e) {
      throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
    }
    int value2=0;
    if (tokens.length == 4) {
      try {
        value2=Integer.parseInt(tokens[3]);
      }
 catch (      NumberFormatException e) {
        throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
      }
    }
switch (cmd) {
case ATTR_UP:
      player.increaseAttr(value);
    break;
case EQUIP:
  GameItem item=player.getInventory().getItem(value);
if (item != null) {
  if (item instanceof Weapon) {
    player.equipWeapon((Weapon)item);
  }
 else   if (item instanceof Armor) {
    player.equipArmor((Armor)item);
  }
 else   throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case UNEQUIP:
player.unEquipItem(value);
break;
case REFINE:
GameItem itemToRefine=player.getInventory().getItem(value);
if (itemToRefine != null) {
if (itemToRefine instanceof EquippableItem) {
((EquippableItem)itemToRefine).refine();
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case ATTACK:
Enemy target=(Enemy)getGameCharacterByRuntimeID(value);
if (target != null && target.isAlive()) {
if (++player.atkTime >= ATK_INTERVAL / (1 + player.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=player.dealDamage(target);
animations.add(new Animation(player.getX(),player.getY(),0.5f,0,25,dmg + ""String_Node_Str""));
player.atkTime=0;
if (target.getHP() <= 0) {
player.gainBaseExperience(target.experience);
player.gainJobExperience(target.experience);
player.gainStatExperience(target.experience);
chests.add(target.onDeath());
}
}
if (++target.atkTime >= ATK_INTERVAL / (1 + target.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=target.dealDamage(player);
animations.add(new Animation(player.getX(),player.getY() + 80,0.5f,0,25,dmg + ""String_Node_Str""));
target.atkTime=0;
if (player.getHP() <= 0) {
}
}
}
break;
case SKILL_USE:
Enemy skTarget=(Enemy)getGameCharacterByRuntimeID(value2);
if (skTarget != null) {
player.useSkill(value,skTarget);
if (skTarget.getHP() <= 0) {
player.gainBaseExperience(skTarget.experience);
player.gainJobExperience(skTarget.experience);
player.gainStatExperience(skTarget.experience);
chests.add(skTarget.onDeath());
}
}
break;
case CHAT:
animations.add(new Animation(player.getX(),player.getY(),2.0f,0,0,tokens[4]));
break;
default :
throw new BadActionRequestException(""String_Node_Str"" + tokens[0]);
}
}
}",0.994342762063228
24617,"public int dealDamage(GameCharacter target){
  int totalDamage=0, totalPhysicalDamage=0, totalMagicalDamage=0;
  double elementalDamageModifier=getWeaponElement().getDamageModifierAgainst(target.getArmorElement());
  int basePhysicalDamage=(int)getTotalStat(ATK);
  if (GameMath.checkChance((int)getTotalStat(CRIT))) {
    basePhysicalDamage*=atkCritDmg;
  }
  int physicalDamageAfterReduction=(int)(((100 - target.getTotalStat(ARM)) * basePhysicalDamage) / 100.0 - target.getTotalStat(DEF) + GameMath.random(baseLevel));
  totalPhysicalDamage=(int)(elementalDamageModifier * physicalDamageAfterReduction);
  totalDamage=totalPhysicalDamage + totalMagicalDamage;
  if (totalDamage > 0) {
    target.hp-=totalDamage;
  }
  return totalDamage;
}","public int dealDamage(GameCharacter target){
  int totalDamage=0, totalPhysicalDamage=0, totalMagicalDamage=0;
  double elementalDamageModifier=getWeaponElement().getDamageModifierAgainst(target.getArmorElement());
  int basePhysicalDamage=(int)getTotalStat(ATK);
  if (GameMath.checkChance((int)getTotalStat(CRIT))) {
    basePhysicalDamage*=atkCritDmg;
  }
  int physicalDamageAfterReduction=(int)(((100 - target.getTotalStat(ARM)) * basePhysicalDamage) / 100.0 - target.getTotalStat(DEF) + GameMath.random(baseLevel));
  totalPhysicalDamage=(int)(elementalDamageModifier * physicalDamageAfterReduction);
  totalDamage=totalPhysicalDamage + totalMagicalDamage;
  totalDamage=Math.max(totalDamage,0);
  target.hp-=totalDamage;
  return totalDamage;
}",0.92904953145917
24618,"@Override public void run(){
  List<Player> tmpPlayers=new ArrayList<Player>();
  while (true) {
    tmpPlayers=new ArrayList<Player>(players);
    for (Iterator<Animation> itA=animations.iterator(); itA.hasNext(); ) {
      Animation a=itA.next();
      a.duration-=20.0f / 1000.0f;
      if (a.duration <= 0)       itA.remove();
    }
    for (    Enemy e : enemies) {
      AgentBehaviour ai=e.AI;
      for (      AgentRule rule : aiRules) {
        if (rule.matches(ai.type,ai.currentGoal)) {
        }
      }
    }
    for (    Player p : tmpPlayers) {
      if (locationFacts.size() == 0) {
        locationFacts.put(new Point(p.getX(),p.getY()),0.1f);
      }
      p.move();
      p.xSpeed=0;
      p.ySpeed=0;
      Skill[] skills=p.getSkills();
      for (      Skill sk : skills) {
        if (sk.active) {
          if (sk.getCurrentCooldown() > 0) {
            sk.reduceCurrentCooldown(0.05f);
          }
        }
      }
      for (      Enemy e : enemies) {
        if (e.AI.currentGoal == AgentGoal.GUARD_CHEST && p.getX() == e.AI.currentTarget.getX() && p.getY() == e.AI.currentTarget.getY()) {
          e.AI.setGoal(AgentGoal.KILL_PLAYER);
          e.AI.setTarget(p);
        }
        if (e.AI.currentGoal == AgentGoal.FIND_PLAYER && e.canSee(p)) {
          locationFacts.put(new Point(p.getX(),p.getY()),1.0f);
          e.AI.currentTarget=p;
        }
        if (e.AI.currentGoal == AgentGoal.KILL_PLAYER && e.AI.currentTarget == null && locationFacts.size() > 0) {
          e.AI.currentTarget=getLastKnownLocation();
        }
      }
    }
    Iterator<Entry<Point,Float>> iter=locationFacts.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Point,Float> pairs=(Map.Entry<Point,Float>)iter.next();
      pairs.setValue((float)(pairs.getValue() - 0.005));
      if (pairs.getValue() < 0)       iter.remove();
    }
    for (    Player p : tmpPlayers) {
      for (      Chest c : chests) {
        if (!c.isOpened() && p.getX() == c.x && p.getY() == c.y) {
          c.open();
          for (          GameItem item : c.getItems())           p.getInventory().addItem(item);
          p.incMoney(c.money);
        }
      }
    }
    for (Iterator<Chest> it=chests.iterator(); it.hasNext(); ) {
      if (it.next().isOpened()) {
        it.remove();
      }
    }
    for (Iterator<Enemy> it=enemies.iterator(); it.hasNext(); ) {
      if (!it.next().isAlive()) {
        it.remove();
      }
    }
    Player[] toSend=new Player[tmpPlayers.size()];
    for (int i=0; i < tmpPlayers.size(); i++)     toSend[i]=tmpPlayers.get(i);
    Chest[] chestsToSend=new Chest[chests.size()];
    for (int i=0; i < chests.size(); i++)     chestsToSend[i]=chests.get(i);
    Enemy[] eneToSend=new Enemy[enemies.size()];
    for (int i=0; i < enemies.size(); i++)     eneToSend[i]=enemies.get(i);
    Animation[] animsToSend=new Animation[animations.size()];
    for (int i=0; i < animations.size(); i++)     animsToSend[i]=animations.get(i);
    try {
      server.send(new DataPacket(toSend));
      server.send(new DataPacket(chestsToSend));
      server.send(new DataPacket(eneToSend));
      server.send(new DataPacket(animsToSend));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    try {
      Thread.sleep(20);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  List<Player> tmpPlayers=new ArrayList<Player>();
  while (true) {
    tmpPlayers=new ArrayList<Player>(players);
    for (Iterator<Animation> it=animations.iterator(); it.hasNext(); ) {
      Animation a=it.next();
      a.duration-=20.0f / 1000.0f;
      if (a.duration <= 0)       it.remove();
    }
    for (    Enemy e : enemies) {
      AgentBehaviour ai=e.AI;
      for (      AgentRule rule : aiRules) {
        if (rule.matches(ai.type,ai.currentGoal)) {
        }
      }
    }
    for (    Player p : tmpPlayers) {
      if (locationFacts.size() == 0) {
        locationFacts.put(new Point(p.getX(),p.getY()),0.1f);
      }
      p.move();
      p.xSpeed=0;
      p.ySpeed=0;
      Skill[] skills=p.getSkills();
      for (      Skill sk : skills) {
        if (sk.active) {
          if (sk.getCurrentCooldown() > 0) {
            sk.reduceCurrentCooldown(0.05f);
          }
        }
      }
      for (      Enemy e : enemies) {
        if (e.AI.currentGoal == AgentGoal.GUARD_CHEST && p.getX() == e.AI.currentTarget.getX() && p.getY() == e.AI.currentTarget.getY()) {
          e.AI.setGoal(AgentGoal.KILL_PLAYER);
          e.AI.setTarget(p);
        }
        if (e.AI.currentGoal == AgentGoal.FIND_PLAYER && e.canSee(p)) {
          locationFacts.put(new Point(p.getX(),p.getY()),1.0f);
          e.AI.currentTarget=p;
        }
        if (e.AI.currentGoal == AgentGoal.KILL_PLAYER && e.AI.currentTarget == null && locationFacts.size() > 0) {
          e.AI.currentTarget=getLastKnownLocation();
        }
      }
    }
    Iterator<Entry<Point,Float>> iter=locationFacts.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Point,Float> pairs=(Map.Entry<Point,Float>)iter.next();
      pairs.setValue((float)(pairs.getValue() - 0.005));
      if (pairs.getValue() < 0)       iter.remove();
    }
    for (    Player p : tmpPlayers) {
      for (      Chest c : chests) {
        if (!c.isOpened() && p.getX() == c.x && p.getY() == c.y) {
          c.open();
          for (          GameItem item : c.getItems())           p.getInventory().addItem(item);
          p.incMoney(c.money);
        }
      }
    }
    for (Iterator<Chest> it=chests.iterator(); it.hasNext(); ) {
      if (it.next().isOpened()) {
        it.remove();
      }
    }
    for (Iterator<Enemy> it=enemies.iterator(); it.hasNext(); ) {
      if (!it.next().isAlive()) {
        it.remove();
      }
    }
    Player[] toSend=new Player[tmpPlayers.size()];
    for (int i=0; i < tmpPlayers.size(); i++)     toSend[i]=tmpPlayers.get(i);
    Chest[] chestsToSend=new Chest[chests.size()];
    for (int i=0; i < chests.size(); i++)     chestsToSend[i]=chests.get(i);
    Enemy[] eneToSend=new Enemy[enemies.size()];
    for (int i=0; i < enemies.size(); i++)     eneToSend[i]=enemies.get(i);
    Animation[] animsToSend=new Animation[animations.size()];
    for (int i=0; i < animations.size(); i++)     animsToSend[i]=animations.get(i);
    try {
      server.send(new DataPacket(toSend));
      server.send(new DataPacket(chestsToSend));
      server.send(new DataPacket(eneToSend));
      server.send(new DataPacket(animsToSend));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    try {
      Thread.sleep(20);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.981149012567325
24619,"private void spawnEnemy(String id,int x,int y){
  Enemy e=ObjectManager.getEnemyByID(id);
  e.setRuntimeID(runtimeID++);
  e.setX(x);
  e.setY(y);
  enemies.add(e);
}","/** 
 * Spawns an enemy with given ID at x, y Also assigns runtimeID to that enemy
 * @param id ID of enemy to spawn
 * @param x x coord
 * @param y y coord
 */
private void spawnEnemy(String id,int x,int y){
  Enemy e=ObjectManager.getEnemyByID(id);
  e.setRuntimeID(runtimeID++);
  e.setX(x);
  e.setY(y);
  enemies.add(e);
}",0.6734279918864098
24620,"public void addEffect(Effect e){
synchronized (effects) {
    effects.add(e);
  }
}","public void addEffect(Effect e){
synchronized (effects) {
    e.onBegin(this);
    effects.add(e);
  }
}",0.8877005347593583
24621,"public void updateEffects(){
  for (Iterator<Effect> it=effects.iterator(); it.hasNext(); ) {
    Effect e=it.next();
    e.reduceDuration(0.05f);
    if (e.getDuration() <= 0)     it.remove();
  }
}","public void updateEffects(){
  for (Iterator<Effect> it=effects.iterator(); it.hasNext(); ) {
    Effect e=it.next();
    e.reduceDuration(0.05f);
    if (e.getDuration() <= 0) {
      e.onEnd(this);
      it.remove();
    }
  }
}",0.9277389277389276
24622,"@Override public void attackAI(AgentGoalTarget target){
  if (target instanceof GameCharacter)   this.attack((GameCharacter)target);
}","@Override public void attackAI(AgentGoalTarget target){
  for (int i=0; i < 3; i++) {
    if (x > target.getX())     xSpeed=-1;
    if (x < target.getX())     xSpeed=1;
    if (y > target.getY())     ySpeed=-1;
    if (y < target.getY())     ySpeed=1;
    if (x == target.getX() && y == target.getY())     AI.currentTarget=null;
    move();
    xSpeed=0;
    ySpeed=0;
  }
}",0.2480314960629921
24623,"@Override public void run(){
  List<Player> tmpPlayers=new ArrayList<Player>();
  while (true) {
    tmpPlayers=new ArrayList<Player>(players);
    for (Iterator<Animation> it=animations.iterator(); it.hasNext(); ) {
      Animation a=it.next();
      a.duration-=20.0f / 1000.0f;
      if (a.duration <= 0)       it.remove();
    }
    for (    Enemy e : enemies) {
      AgentBehaviour ai=e.AI;
      for (      AgentRule rule : aiRules) {
        if (rule.matches(ai.type,ai.currentGoal)) {
        }
      }
    }
    for (    Player p : tmpPlayers) {
      if (locationFacts.size() == 0) {
        locationFacts.put(new Point(p.getX(),p.getY()),0.1f);
      }
      p.move();
      p.xSpeed=0;
      p.ySpeed=0;
      Skill[] skills=p.getSkills();
      for (      Skill sk : skills) {
        if (sk.active) {
          if (sk.getCurrentCooldown() > 0) {
            sk.reduceCurrentCooldown(0.05f);
          }
        }
 else {
          if (sk.getLevel() > 0)           sk.use(p,null);
        }
      }
      p.updateEffects();
      for (      Enemy e : enemies) {
        if (e.AI.currentGoal == AgentGoal.GUARD_CHEST && p.getX() == e.AI.currentTarget.getX() && p.getY() == e.AI.currentTarget.getY()) {
          e.AI.setGoal(AgentGoal.KILL_PLAYER);
          e.AI.setTarget(p);
        }
        if (e.AI.currentGoal == AgentGoal.FIND_PLAYER && e.canSee(p)) {
          locationFacts.put(new Point(p.getX(),p.getY()),1.0f);
          e.AI.currentTarget=p;
        }
        if (e.AI.currentGoal == AgentGoal.KILL_PLAYER && e.AI.currentTarget == null && locationFacts.size() > 0) {
          e.AI.currentTarget=getLastKnownLocation();
        }
      }
    }
    Iterator<Entry<Point,Float>> iter=locationFacts.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Point,Float> pairs=(Map.Entry<Point,Float>)iter.next();
      pairs.setValue((float)(pairs.getValue() - 0.005));
      if (pairs.getValue() < 0)       iter.remove();
    }
    for (    Player p : tmpPlayers) {
      for (      Chest c : chests) {
        if (!c.isOpened() && p.getX() == c.x && p.getY() == c.y) {
          c.open();
          for (          GameItem item : c.getItems())           p.getInventory().addItem(item);
          p.incMoney(c.money);
        }
      }
    }
    for (Iterator<Chest> it=chests.iterator(); it.hasNext(); ) {
      if (it.next().isOpened()) {
        it.remove();
      }
    }
    for (Iterator<Enemy> it=enemies.iterator(); it.hasNext(); ) {
      if (!it.next().isAlive()) {
        it.remove();
      }
    }
    Player[] toSend=new Player[tmpPlayers.size()];
    for (int i=0; i < tmpPlayers.size(); i++)     toSend[i]=tmpPlayers.get(i);
    Chest[] chestsToSend=new Chest[chests.size()];
    for (int i=0; i < chests.size(); i++)     chestsToSend[i]=chests.get(i);
    Enemy[] eneToSend=new Enemy[enemies.size()];
    for (int i=0; i < enemies.size(); i++)     eneToSend[i]=enemies.get(i);
    Animation[] animsToSend=new Animation[animations.size()];
    for (int i=0; i < animations.size(); i++)     animsToSend[i]=animations.get(i);
    try {
      server.send(new DataPacket(toSend));
      server.send(new DataPacket(chestsToSend));
      server.send(new DataPacket(eneToSend));
      server.send(new DataPacket(animsToSend));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    try {
      Thread.sleep(20);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  List<Player> tmpPlayers=new ArrayList<Player>();
  while (true) {
    tmpPlayers=new ArrayList<Player>(players);
    for (Iterator<Animation> it=animations.iterator(); it.hasNext(); ) {
      Animation a=it.next();
      a.duration-=20.0f / 1000.0f;
      if (a.duration <= 0)       it.remove();
    }
    for (    Enemy e : enemies) {
      AgentBehaviour ai=e.AI;
      for (      AgentRule rule : aiRules) {
        if (rule.matches(ai.type,ai.currentGoal)) {
          rule.execute(e,ai.currentTarget);
        }
      }
    }
    for (    Player p : tmpPlayers) {
      if (locationFacts.size() == 0) {
        locationFacts.put(new Point(p.getX(),p.getY()),0.1f);
      }
      p.move();
      p.xSpeed=0;
      p.ySpeed=0;
      Skill[] skills=p.getSkills();
      for (      Skill sk : skills) {
        if (sk.active) {
          if (sk.getCurrentCooldown() > 0) {
            sk.reduceCurrentCooldown(0.05f);
          }
        }
 else {
          if (sk.getLevel() > 0)           sk.use(p,null);
        }
      }
      p.updateEffects();
      for (      Enemy e : enemies) {
        if (e.AI.currentGoal == AgentGoal.GUARD_CHEST && p.getX() == e.AI.currentTarget.getX() && p.getY() == e.AI.currentTarget.getY()) {
          e.AI.setGoal(AgentGoal.KILL_PLAYER);
          e.AI.setTarget(p);
        }
        if (e.AI.currentGoal == AgentGoal.FIND_PLAYER && e.canSee(p)) {
          locationFacts.put(new Point(p.getX(),p.getY()),1.0f);
          e.AI.currentTarget=p;
        }
        if (e.AI.currentGoal == AgentGoal.KILL_PLAYER && e.AI.currentTarget == null && locationFacts.size() > 0) {
          e.AI.currentTarget=getLastKnownLocation();
        }
      }
    }
    Iterator<Entry<Point,Float>> iter=locationFacts.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Point,Float> pairs=(Map.Entry<Point,Float>)iter.next();
      pairs.setValue((float)(pairs.getValue() - 0.005));
      if (pairs.getValue() < 0)       iter.remove();
    }
    for (    Player p : tmpPlayers) {
      for (      Chest c : chests) {
        if (!c.isOpened() && p.getX() == c.x && p.getY() == c.y) {
          c.open();
          for (          GameItem item : c.getItems())           p.getInventory().addItem(item);
          p.incMoney(c.money);
        }
      }
    }
    for (Iterator<Chest> it=chests.iterator(); it.hasNext(); ) {
      if (it.next().isOpened()) {
        it.remove();
      }
    }
    for (Iterator<Enemy> it=enemies.iterator(); it.hasNext(); ) {
      if (!it.next().isAlive()) {
        it.remove();
      }
    }
    Player[] toSend=new Player[tmpPlayers.size()];
    for (int i=0; i < tmpPlayers.size(); i++)     toSend[i]=tmpPlayers.get(i);
    Chest[] chestsToSend=new Chest[chests.size()];
    for (int i=0; i < chests.size(); i++)     chestsToSend[i]=chests.get(i);
    Enemy[] eneToSend=new Enemy[enemies.size()];
    for (int i=0; i < enemies.size(); i++)     eneToSend[i]=enemies.get(i);
    Animation[] animsToSend=new Animation[animations.size()];
    for (int i=0; i < animations.size(); i++)     animsToSend[i]=animations.get(i);
    try {
      server.send(new DataPacket(toSend));
      server.send(new DataPacket(chestsToSend));
      server.send(new DataPacket(eneToSend));
      server.send(new DataPacket(animsToSend));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    try {
      Thread.sleep(20);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.99364896073903
24624,"/** 
 * Parses any actions requested by game client General format for ""action"" string TODO: to be reconsidered, check length? or ifs? ""ACTION_NAME,PLAYER_NAME,VALUES...""
 * @param actions an array containing all actions from 1 client
 * @throws BadActionRequestException
 */
private void parseActions(String[] actions) throws BadActionRequestException {
  for (  String action : actions) {
    String[] tokens=action.split(""String_Node_Str"");
    String cmd=tokens[0];
    Player player=getPlayerByName(tokens[1]);
    if (player == null)     throw new BadActionRequestException(""String_Node_Str"" + tokens[1]);
    int value=0;
    try {
      value=Integer.parseInt(tokens[2]);
    }
 catch (    NumberFormatException e) {
      throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
    }
    int value2=0;
    if (tokens.length == 4) {
      try {
        value2=Integer.parseInt(tokens[3]);
      }
 catch (      NumberFormatException e) {
        throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
      }
    }
switch (cmd) {
case ATTR_UP:
      player.increaseAttr(value);
    break;
case SKILL_UP:
  player.increaseSkillLevel(value);
break;
case EQUIP:
GameItem item=player.getInventory().getItem(value);
if (item != null) {
if (item instanceof Weapon) {
player.equipWeapon((Weapon)item);
}
 else if (item instanceof Armor) {
player.equipArmor((Armor)item);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case UNEQUIP:
player.unEquipItem(value);
break;
case REFINE:
GameItem itemToRefine=player.getInventory().getItem(value);
if (itemToRefine != null) {
if (itemToRefine instanceof EquippableItem) {
((EquippableItem)itemToRefine).refine();
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case ATTACK:
Enemy target=(Enemy)getGameCharacterByRuntimeID(value);
if (target != null && target.isAlive() && distanceBetween(player,target) <= ((Weapon)player.getEquip(Player.RIGHT_HAND)).range) {
if (++player.atkTime >= ATK_INTERVAL / (1 + player.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=player.attack(target);
animations.add(new Animation(player.getX(),player.getY(),0.5f,0,25,dmg + ""String_Node_Str""));
player.atkTime=0;
if (target.getHP() <= 0) {
player.gainBaseExperience(target.experience);
player.gainJobExperience(target.experience);
player.gainStatExperience(target.experience);
chests.add(target.onDeath());
}
}
if (++target.atkTime >= ATK_INTERVAL / (1 + target.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=target.attack(player);
animations.add(new Animation(player.getX(),player.getY() + 80,0.5f,0,25,dmg + ""String_Node_Str""));
target.atkTime=0;
if (player.getHP() <= 0) {
}
}
}
break;
case SKILL_USE:
Enemy skTarget=(Enemy)getGameCharacterByRuntimeID(value2);
if (skTarget != null) {
player.useSkill(value,skTarget);
if (skTarget.getHP() <= 0) {
player.gainBaseExperience(skTarget.experience);
player.gainJobExperience(skTarget.experience);
player.gainStatExperience(skTarget.experience);
chests.add(skTarget.onDeath());
}
}
break;
case USE_ITEM:
UsableItem itemToUse=(UsableItem)player.getInventory().getItem(value);
itemToUse.onUse(player);
break;
case CHAT:
animations.add(new Animation(player.getX(),player.getY(),2.0f,0,0,tokens[4]));
break;
default :
throw new BadActionRequestException(""String_Node_Str"" + tokens[0]);
}
}
}","/** 
 * Parses any actions requested by game client General format for ""action"" string TODO: to be reconsidered, check length? or ifs? ""ACTION_NAME,PLAYER_NAME,VALUES...""
 * @param actions an array containing all actions from 1 client
 * @throws BadActionRequestException
 */
private void parseActions(String[] actions) throws BadActionRequestException {
  for (  String action : actions) {
    String[] tokens=action.split(""String_Node_Str"");
    String cmd=tokens[0];
    Player player=getPlayerByName(tokens[1]);
    if (player == null)     throw new BadActionRequestException(""String_Node_Str"" + tokens[1]);
    int value=0;
    try {
      value=Integer.parseInt(tokens[2]);
    }
 catch (    NumberFormatException e) {
      throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
    }
    int value2=0;
    if (tokens.length == 4) {
      try {
        value2=Integer.parseInt(tokens[3]);
      }
 catch (      NumberFormatException e) {
        throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
      }
    }
switch (cmd) {
case ATTR_UP:
      player.increaseAttr(value);
    break;
case SKILL_UP:
  player.increaseSkillLevel(value);
break;
case EQUIP:
GameItem item=player.getInventory().getItem(value);
if (item != null) {
if (item instanceof Weapon) {
player.equipWeapon((Weapon)item);
}
 else if (item instanceof Armor) {
player.equipArmor((Armor)item);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case UNEQUIP:
player.unEquipItem(value);
break;
case REFINE:
GameItem itemToRefine=player.getInventory().getItem(value);
if (itemToRefine != null) {
if (itemToRefine instanceof EquippableItem) {
((EquippableItem)itemToRefine).refine();
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case ATTACK:
Enemy target=(Enemy)getGameCharacterByRuntimeID(value);
if (target != null && target.isAlive() && distanceBetween(player,target) <= ((Weapon)player.getEquip(Player.RIGHT_HAND)).range) {
if (++player.atkTime >= ATK_INTERVAL / (1 + player.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=player.attack(target);
animations.add(new Animation(player.getX(),player.getY(),0.5f,0,25,dmg + ""String_Node_Str""));
player.atkTime=0;
if (target.getHP() <= 0) {
player.gainBaseExperience(target.experience);
player.gainJobExperience(target.experience);
player.gainStatExperience(target.experience);
chests.add(target.onDeath());
}
}
}
break;
case SKILL_USE:
Enemy skTarget=(Enemy)getGameCharacterByRuntimeID(value2);
if (skTarget != null) {
player.useSkill(value,skTarget);
if (skTarget.getHP() <= 0) {
player.gainBaseExperience(skTarget.experience);
player.gainJobExperience(skTarget.experience);
player.gainStatExperience(skTarget.experience);
chests.add(skTarget.onDeath());
}
}
break;
case USE_ITEM:
UsableItem itemToUse=(UsableItem)player.getInventory().getItem(value);
itemToUse.onUse(player);
break;
case CHAT:
animations.add(new Animation(player.getX(),player.getY(),2.0f,0,0,tokens[4]));
break;
default :
throw new BadActionRequestException(""String_Node_Str"" + tokens[0]);
}
}
}",0.9591078066914498
24625,"@Override public void execute(EnemyAgent agent,AgentGoalTarget target){
  List<Player> tmpPlayers=new ArrayList<Player>(players);
  for (  Player p : tmpPlayers) {
    if (agent.canSee(p)) {
      target=p;
      break;
    }
  }
  if (target != null)   agent.attackAI(target);
}","@Override public void execute(EnemyAgent agent,AgentGoalTarget target){
  List<Player> tmpPlayers=new ArrayList<Player>(players);
  for (  Player p : tmpPlayers) {
    if (agent.canSee(p)) {
      target=p;
      break;
    }
  }
  if (target != null)   processBasicAttack(agent,target);
}",0.9471830985915493
24626,"public GameServer(){
  try {
    server=new UDPServer(55555,new ClientQueryParser());
  }
 catch (  SocketException e) {
    e.printStackTrace();
  }
  chests.add(new Chest(25 * 40,16 * 40,1000,ObjectManager.getWeaponByID(""String_Node_Str""),ObjectManager.getWeaponByID(""String_Node_Str"")));
  chests.add(new Chest(0,80,2033,ObjectManager.getArmorByID(""String_Node_Str""),ObjectManager.getArmorByID(""String_Node_Str"")));
  spawnEnemy(""String_Node_Str"",640,160);
  spawnEnemy(""String_Node_Str"",720,720);
  spawnEnemy(""String_Node_Str"",40,40);
  spawnEnemy(""String_Node_Str"",40,120);
  spawnEnemy(""String_Node_Str"",400,120);
  spawnEnemy(""String_Node_Str"",320,160);
  spawnEnemy(""String_Node_Str"",40,360);
  spawnEnemy(""String_Node_Str"",600,120);
  AgentRule rule=new AgentRule(AgentType.GUARD,AgentGoal.GUARD_CHEST){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      if (target != null)       agent.patrol(target);
    }
  }
;
  AgentRule rule2=new AgentRule(AgentType.GUARD,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      List<Player> tmpPlayers=new ArrayList<Player>(players);
      for (      Player p : tmpPlayers) {
        if (agent.canSee(p)) {
          target=p;
          break;
        }
      }
      if (target != null && agent.canSee(target)) {
        agent.attackAI(target);
      }
    }
  }
;
  AgentRule rule3=new AgentRule(AgentType.SCOUT,AgentGoal.FIND_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      agent.search(getLastKnownLocation());
    }
  }
;
  AgentRule rule4=new AgentRule(AgentType.SCOUT,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      if (target != null)       agent.attackAI(target);
    }
  }
;
  AgentRule rule5=new AgentRule(AgentType.ASSASSIN,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      List<Player> tmpPlayers=new ArrayList<Player>(players);
      for (      Player p : tmpPlayers) {
        if (agent.canSee(p)) {
          target=p;
          break;
        }
      }
      if (target != null)       agent.attackAI(target);
    }
  }
;
  aiRules.add(rule);
  aiRules.add(rule2);
  aiRules.add(rule3);
  aiRules.add(rule4);
  aiRules.add(rule5);
  new Thread(new ServerLoop()).start();
}","public GameServer(){
  try {
    server=new UDPServer(55555,new ClientQueryParser());
  }
 catch (  SocketException e) {
    e.printStackTrace();
  }
  chests.add(new Chest(25 * 40,16 * 40,1000,ObjectManager.getWeaponByID(""String_Node_Str""),ObjectManager.getWeaponByID(""String_Node_Str"")));
  chests.add(new Chest(0,80,2033,ObjectManager.getArmorByID(""String_Node_Str""),ObjectManager.getArmorByID(""String_Node_Str"")));
  spawnEnemy(""String_Node_Str"",640,160);
  spawnEnemy(""String_Node_Str"",720,720);
  spawnEnemy(""String_Node_Str"",40,40);
  spawnEnemy(""String_Node_Str"",40,120);
  spawnEnemy(""String_Node_Str"",400,120);
  spawnEnemy(""String_Node_Str"",320,160);
  spawnEnemy(""String_Node_Str"",40,360);
  spawnEnemy(""String_Node_Str"",600,120);
  AgentRule rule=new AgentRule(AgentType.GUARD,AgentGoal.GUARD_CHEST){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      if (target != null)       agent.patrol(target);
    }
  }
;
  AgentRule rule2=new AgentRule(AgentType.GUARD,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      List<Player> tmpPlayers=new ArrayList<Player>(players);
      for (      Player p : tmpPlayers) {
        if (agent.canSee(p)) {
          target=p;
          break;
        }
      }
      if (target != null && agent.canSee(target)) {
      }
    }
  }
;
  AgentRule rule3=new AgentRule(AgentType.SCOUT,AgentGoal.FIND_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      agent.search(getLastKnownLocation());
    }
  }
;
  AgentRule rule4=new AgentRule(AgentType.SCOUT,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
    }
  }
;
  AgentRule rule5=new AgentRule(AgentType.ASSASSIN,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      List<Player> tmpPlayers=new ArrayList<Player>(players);
      for (      Player p : tmpPlayers) {
        if (agent.canSee(p)) {
          target=p;
          break;
        }
      }
      if (target != null)       processBasicAttack(agent,target);
    }
  }
;
  aiRules.add(rule);
  aiRules.add(rule2);
  aiRules.add(rule3);
  aiRules.add(rule4);
  aiRules.add(rule5);
  new Thread(new ServerLoop()).start();
}",0.9751892346509672
24627,"private void drawImage2(Graphics2D g){
  g.setColor(Color.GRAY);
  g.fillRect(0,0,205,304);
  ArrayList<GameItem> items=player.getInventory().getItems();
  int x=0, y=0;
  for (int i=0; i < items.size(); i++) {
    drawItem(items.get(i),g,2 + x * 40,29 + y * 40);
    if (++x == 6) {
      x=0;
      y++;
    }
  }
  g.drawImage(Resources.getImage(""String_Node_Str""),0,27,this);
  g.setColor(Color.YELLOW);
  g.setFont(new Font(""String_Node_Str"",Font.PLAIN,20));
  g.drawString(player.getMoney() + ""String_Node_Str"",90,287);
}","private void drawImage2(Graphics2D g){
  g.setColor(Color.GRAY);
  g.fillRect(0,0,205,304);
  ArrayList<GameItem> items=player.getInventory().getItems();
  int x=0, y=0;
  for (int i=0; i < items.size(); i++) {
    drawItem(items.get(i),g,2 + x * 40,29 + y * 40);
    if (++x == 5) {
      x=0;
      y++;
    }
  }
  g.drawImage(Resources.getImage(""String_Node_Str""),0,27,this);
  g.setColor(Color.YELLOW);
  g.setFont(new Font(""String_Node_Str"",Font.PLAIN,20));
  g.drawString(player.getMoney() + ""String_Node_Str"",90,287);
}",0.9981024667931688
24628,"@Override public void actionPerformed(ActionEvent e){
  actions.add(""String_Node_Str"" + p.name + ""String_Node_Str""+ attr);
}","@Override public void actionPerformed(ActionEvent e){
  actions.add(""String_Node_Str"" + p.name + ""String_Node_Str""+ skillValue);
}",0.952755905511811
24629,"public void update(final Player p){
  if (p != null) {
    Skill[] skills=p.getSkills();
    for (int i=0; i < skills.length; i++) {
      skillButtons[i].setToolTipText(skills[i].description);
    }
  }
  if (p == null || equal(p))   return;
  if (!p.hasAttributePoints()) {
    for (    JButton btn : buttons)     btn.setVisible(false);
  }
 else {
    for (int i=GameCharacter.STR; i <= GameCharacter.LUC; i++) {
      buttons[i].setVisible(p.getBaseAttribute(i) < 100);
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      attributes.setText(p.attributesToPseudoHTML());
      stats.setText(p.statsToPseudoHTML());
    }
  }
);
}","public void update(final Player p){
  if (p != null) {
    Skill[] skills=p.getSkills();
    for (int i=0; i < skills.length; i++) {
      skillButtons[i].setToolTipText(skills[i].name + ""String_Node_Str"" + ""String_Node_Str""+ skills[i].getLevel()+ ""String_Node_Str""+ skills[i].description);
      if (skills[i].getLevel() < Skill.MAX_LEVEL) {
        skillButtons[i].setEnabled(p.hasSkillPoints());
      }
    }
  }
  if (p == null || equal(p))   return;
  if (!p.hasAttributePoints()) {
    for (    JButton btn : buttons)     btn.setVisible(false);
  }
 else {
    for (int i=GameCharacter.STR; i <= GameCharacter.LUC; i++) {
      buttons[i].setVisible(p.getBaseAttribute(i) < 100);
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      attributes.setText(p.attributesToPseudoHTML());
      stats.setText(p.statsToPseudoHTML());
    }
  }
);
}",0.8635490070467648
24630,"public StatsGUI(final Player p){
  super(640,304,""String_Node_Str"",true);
  this.setLocation(0,720);
  attributes.setBounds(0,0,320,304);
  stats.setBounds(320,0,320,304);
  attributes.setFocusable(false);
  stats.setFocusable(false);
  attributes.setVerticalAlignment(SwingConstants.TOP);
  stats.setVerticalAlignment(SwingConstants.TOP);
  attributes.setFont(new Font(""String_Node_Str"",Font.PLAIN,22));
  stats.setFont(new Font(""String_Node_Str"",Font.PLAIN,18));
  this.add(attributes);
  this.add(stats);
  for (int i=GameCharacter.STR; i <= GameCharacter.LUC; i++) {
    final int attr=i;
    buttons[i]=new JButton(""String_Node_Str"");
    buttons[i].setBounds(125,3 + 30 * i,45,28);
    buttons[i].setFont(new Font(""String_Node_Str"",Font.PLAIN,18));
    buttons[i].addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        actions.add(""String_Node_Str"" + p.name + ""String_Node_Str""+ attr);
      }
    }
);
    add(buttons[i]);
  }
  ToolTipManager.sharedInstance().setInitialDelay(0);
  for (int i=0; i < 10; i++) {
    skillButtons[i]=new JButton(""String_Node_Str"");
    skillButtons[i].setLocation(180 + 50 * (i % 3),25 + 50 * (i / 3));
    skillButtons[i].setSize(40,40);
    skillButtons[i].setIcon(new ImageIcon(Resources.getImage(""String_Node_Str"")));
    this.add(skillButtons[i]);
  }
  setVisible(true);
}","public StatsGUI(final Player p){
  super(640,304,""String_Node_Str"",true);
  this.setLocation(0,720);
  attributes.setBounds(0,0,320,304);
  stats.setBounds(320,0,320,304);
  attributes.setFocusable(false);
  stats.setFocusable(false);
  attributes.setVerticalAlignment(SwingConstants.TOP);
  stats.setVerticalAlignment(SwingConstants.TOP);
  attributes.setFont(new Font(""String_Node_Str"",Font.PLAIN,22));
  stats.setFont(new Font(""String_Node_Str"",Font.PLAIN,18));
  this.add(attributes);
  this.add(stats);
  for (int i=GameCharacter.STR; i <= GameCharacter.LUC; i++) {
    final int attr=i;
    buttons[i]=new JButton(""String_Node_Str"");
    buttons[i].setBounds(125,3 + 30 * i,45,28);
    buttons[i].setFont(new Font(""String_Node_Str"",Font.PLAIN,18));
    buttons[i].addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        actions.add(""String_Node_Str"" + p.name + ""String_Node_Str""+ attr);
      }
    }
);
    add(buttons[i]);
  }
  ToolTipManager.sharedInstance().setInitialDelay(0);
  for (int i=0; i < 10; i++) {
    final int skillValue=i;
    skillButtons[i]=new JButton(""String_Node_Str"");
    skillButtons[i].setLocation(180 + 50 * (i % 3),25 + 50 * (i / 3));
    skillButtons[i].setSize(40,40);
    skillButtons[i].setIcon(new ImageIcon(Resources.getImage(""String_Node_Str"")));
    skillButtons[i].setEnabled(false);
    skillButtons[i].addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        actions.add(""String_Node_Str"" + p.name + ""String_Node_Str""+ skillValue);
      }
    }
);
    this.add(skillButtons[i]);
  }
  setVisible(true);
}",0.9043706868222148
24631,"public void baseLevelUp(){
  baseLevel++;
  calculateStats();
}","public void baseLevelUp(){
  baseLevel++;
  calculateStats();
  this.hp=(int)this.getTotalStat(Stat.MAX_HP);
  this.sp=(int)this.getTotalStat(Stat.MAX_SP);
}",0.5727272727272728
24632,"public static void load(){
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",10,13,ArmorType.HELM,0,0));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",0,13,ArmorType.BODY,0,0));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",0,14,ArmorType.SHOES,0,0));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",4,13,ArmorType.BODY,15,5));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",3,13,""String_Node_Str"",ItemLevel.UNIQUE,ArmorType.BODY,10,50,Element.NEUTRAL,3,new Rune(Attribute.WILLPOWER,3)));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",2,13,""String_Node_Str"",ItemLevel.UNIQUE,ArmorType.BODY,15,30,Element.NEUTRAL,4,new Rune(Attribute.WILLPOWER,3)));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",5,13,""String_Node_Str"",ItemLevel.UNIQUE,ArmorType.BODY,30,10,Element.NEUTRAL,4,new Rune(Attribute.VITALITY,4)));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",6,13,""String_Node_Str"",ItemLevel.EPIC,ArmorType.BODY,50,25,Element.EARTH,4,new Rune(Attribute.VITALITY,5),new Rune(Attribute.PERCEPTION,4)));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",0,7,WeaponType.MACE,0));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",4,6,""String_Node_Str"",ItemLevel.EPIC,WeaponType.ONE_H_SWORD,150,Element.NEUTRAL,4,new Rune(Attribute.STRENGTH,5),new Rune(Attribute.AGILITY,4),new Rune(Attribute.DEXTERITY,4),new Rune(Attribute.LUCK,1)));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",10,10,""String_Node_Str"",ItemLevel.EPIC,WeaponType.TWO_H_AXE,170,Element.NEUTRAL,4,new Rune(Attribute.STRENGTH,7),new Rune(Attribute.VITALITY,4),new Rune(Attribute.DEXTERITY,2)));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",2,6,""String_Node_Str"",ItemLevel.EPIC,WeaponType.DAGGER,100,Element.NEUTRAL,4,new Rune(Attribute.AGILITY,4),new Rune(Attribute.DEXTERITY,4),new Rune(Attribute.LUCK,1)));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",12,11,""String_Node_Str"",ItemLevel.EPIC,WeaponType.BOW,130,Element.FIRE,4,new Rune(Attribute.VITALITY,3),new Rune(Attribute.WISDOM,5),new Rune(Attribute.AGILITY,3)));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",8,25,""String_Node_Str"",ItemLevel.EPIC,WeaponType.TWO_H_SWORD,130,Element.WATER,4,new Rune(Attribute.DEXTERITY,5),new Rune(Attribute.STRENGTH,3)));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",0,5,WeaponType.ONE_H_SWORD,15));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",0,6,WeaponType.DAGGER,5));
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"",true,10.0f){
    /** 
 */
    private static final long serialVersionUID=1379897406205500901L;
    @Override public int getManaCost(){
      return level * 10;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      target.hp=Math.min(target.hp + 30 + level * 10,(int)target.getTotalStat(Stat.MAX_HP));
    }
  }
);
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"",true,10.0f){
    /** 
 */
    private static final long serialVersionUID=7719535667188968500L;
    @Override public int getManaCost(){
      return 50 + level * 25;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      int oldSP=target.sp;
      target.sp=Math.max(oldSP - 50 * level,0);
      target.hp-=(oldSP - target.sp);
    }
  }
);
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",true,10.0f){
    /** 
 */
    private static final long serialVersionUID=2091028246707933529L;
    @Override public int getManaCost(){
      return 100 + level * 100;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      int total=caster.hp - 1 + caster.sp;
      caster.hp=1;
      caster.sp=0;
      target.hp-=500 * level + total * 0.003f;
    }
  }
);
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",true,9.0f){
    /** 
 */
    private static final long serialVersionUID=1513947512801417510L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=level * 5 * (15 + target.getTotalStat(GameCharacter.ARM) / 100.0f);
      target.hp-=dmg;
    }
  }
);
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",true,60.0f){
    /** 
 */
    private static final long serialVersionUID=6923525936384357867L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=100 + level * 85 - target.getTotalStat(GameCharacter.DEF);
      target.hp-=dmg;
    }
  }
);
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",true,30.0f){
    /** 
 */
    private static final long serialVersionUID=5612472865672733186L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      target.addBonusAttribute(Attribute.VITALITY,2 * level);
      target.addBonusAttribute(Attribute.WISDOM,2 * level);
      target.addBonusAttribute(Attribute.LUCK,2 * level);
      target.addBonusAttribute(Attribute.INTELLECT,-3 * level);
    }
  }
);
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"",true,30.0f){
    /** 
 */
    private static final long serialVersionUID=168758926959802026L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=20 + level * 30 - target.getTotalStat(Stat.ARM);
      target.hp-=dmg;
    }
  }
);
  addEnemy(new Enemy(""String_Node_Str"",""String_Node_Str"",EnemyType.NORMAL,new AgentBehaviour(AgentType.SCOUT,null),Element.FIRE,1,5,new DroppableItem(""String_Node_Str"",50)));
  addEnemy(new Enemy(""String_Node_Str"",""String_Node_Str"",EnemyType.NORMAL,new AgentBehaviour(AgentType.SCOUT,null),Element.EARTH,1,5,new DroppableItem(""String_Node_Str"",15)));
  addEssence(new Essence(""String_Node_Str"",Stat.ATK,5));
}","public static void load(){
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",10,13,ArmorType.HELM,0,0));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",0,13,ArmorType.BODY,0,0));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",0,14,ArmorType.SHOES,0,0));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",4,13,ArmorType.BODY,15,5));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",3,13,""String_Node_Str"",ItemLevel.UNIQUE,ArmorType.BODY,10,50,Element.NEUTRAL,3,new Rune(Attribute.WILLPOWER,3)));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",2,13,""String_Node_Str"",ItemLevel.UNIQUE,ArmorType.BODY,15,30,Element.NEUTRAL,4,new Rune(Attribute.WILLPOWER,3)));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",5,13,""String_Node_Str"",ItemLevel.UNIQUE,ArmorType.BODY,30,10,Element.NEUTRAL,4,new Rune(Attribute.VITALITY,4)));
  addArmor(new Armor(""String_Node_Str"",""String_Node_Str"",6,13,""String_Node_Str"",ItemLevel.EPIC,ArmorType.BODY,50,25,Element.EARTH,4,new Rune(Attribute.VITALITY,5),new Rune(Attribute.PERCEPTION,4)));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",0,7,WeaponType.MACE,0));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",4,6,""String_Node_Str"",ItemLevel.EPIC,WeaponType.ONE_H_SWORD,150,Element.NEUTRAL,4,new Rune(Attribute.STRENGTH,5),new Rune(Attribute.AGILITY,4),new Rune(Attribute.DEXTERITY,4),new Rune(Attribute.LUCK,1)));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",10,10,""String_Node_Str"",ItemLevel.EPIC,WeaponType.TWO_H_AXE,170,Element.NEUTRAL,4,new Rune(Attribute.STRENGTH,7),new Rune(Attribute.VITALITY,4),new Rune(Attribute.DEXTERITY,2)));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",2,6,""String_Node_Str"",ItemLevel.EPIC,WeaponType.DAGGER,100,Element.NEUTRAL,4,new Rune(Attribute.AGILITY,4),new Rune(Attribute.DEXTERITY,4),new Rune(Attribute.LUCK,1)));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",12,11,""String_Node_Str"",ItemLevel.EPIC,WeaponType.BOW,130,Element.FIRE,4,new Rune(Attribute.VITALITY,3),new Rune(Attribute.WISDOM,5),new Rune(Attribute.AGILITY,3)));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",8,25,""String_Node_Str"",ItemLevel.EPIC,WeaponType.TWO_H_SWORD,130,Element.WATER,4,new Rune(Attribute.DEXTERITY,5),new Rune(Attribute.STRENGTH,3)));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",0,5,WeaponType.ONE_H_SWORD,15));
  addWeapon(new Weapon(""String_Node_Str"",""String_Node_Str"",0,6,WeaponType.DAGGER,5));
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"",true,10.0f){
    /** 
 */
    private static final long serialVersionUID=1379897406205500901L;
    @Override public int getManaCost(){
      return level * 10;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      target.hp=Math.min(target.hp + 30 + level * 10,(int)target.getTotalStat(Stat.MAX_HP));
    }
  }
);
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"",true,10.0f){
    /** 
 */
    private static final long serialVersionUID=7719535667188968500L;
    @Override public int getManaCost(){
      return 50 + level * 25;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      int oldSP=target.sp;
      target.sp=Math.max(oldSP - 50 * level,0);
      target.hp-=(oldSP - target.sp);
    }
  }
);
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",true,10.0f){
    /** 
 */
    private static final long serialVersionUID=2091028246707933529L;
    @Override public int getManaCost(){
      return 100 + level * 100;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      int total=caster.hp - 1 + caster.sp;
      caster.hp=1;
      caster.sp=0;
      target.hp-=500 * level + total * 0.003f;
    }
  }
);
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",true,9.0f){
    /** 
 */
    private static final long serialVersionUID=1513947512801417510L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=level * 5 * (15 + target.getTotalStat(GameCharacter.ARM) / 100.0f);
      target.hp-=dmg;
    }
  }
);
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",true,60.0f){
    /** 
 */
    private static final long serialVersionUID=6923525936384357867L;
    @Override public int getManaCost(){
      return 5 + level * 10;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=100 + level * 85 - target.getTotalStat(GameCharacter.DEF);
      target.hp-=dmg;
    }
  }
);
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",true,30.0f){
    /** 
 */
    private static final long serialVersionUID=5612472865672733186L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      target.addBonusAttribute(Attribute.VITALITY,2 * level);
      target.addBonusAttribute(Attribute.WISDOM,2 * level);
      target.addBonusAttribute(Attribute.LUCK,2 * level);
      target.addBonusAttribute(Attribute.INTELLECT,-3 * level);
    }
  }
);
  addSkill(new Skill(""String_Node_Str"",""String_Node_Str"",true,30.0f){
    /** 
 */
    private static final long serialVersionUID=168758926959802026L;
    @Override public int getManaCost(){
      return 25 + level * 30;
    }
    @Override public void useImpl(    GameCharacter caster,    GameCharacter target){
      float dmg=20 + level * 30 - target.getTotalStat(Stat.ARM);
      target.hp-=dmg;
    }
  }
);
  addEnemy(new Enemy(""String_Node_Str"",""String_Node_Str"",EnemyType.NORMAL,new AgentBehaviour(AgentType.SCOUT,null),Element.FIRE,1,5,new DroppableItem(""String_Node_Str"",50)));
  addEnemy(new Enemy(""String_Node_Str"",""String_Node_Str"",EnemyType.NORMAL,new AgentBehaviour(AgentType.SCOUT,null),Element.EARTH,1,5,new DroppableItem(""String_Node_Str"",15)));
  addEssence(new Essence(""String_Node_Str"",Stat.ATK,5));
}",0.9997565132700268
24633,"/** 
 * Parses any actions requested by game client General format for ""action"" string TODO: to be reconsidered, check length? or ifs? ""ACTION_NAME,PLAYER_NAME,VALUES...""
 * @param actions an array containing all actions from 1 client
 * @throws BadActionRequestException
 */
private void parseActions(String[] actions) throws BadActionRequestException {
  for (  String action : actions) {
    String[] tokens=action.split(""String_Node_Str"");
    String cmd=tokens[0];
    Player player=getPlayerByName(tokens[1]);
    if (player == null)     throw new BadActionRequestException(""String_Node_Str"" + tokens[1]);
    int value=0;
    try {
      value=Integer.parseInt(tokens[2]);
    }
 catch (    NumberFormatException e) {
      throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
    }
    int value2=0;
    if (tokens.length == 4) {
      try {
        value2=Integer.parseInt(tokens[3]);
      }
 catch (      NumberFormatException e) {
        throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
      }
    }
switch (cmd) {
case ATTR_UP:
      player.increaseAttr(value);
    break;
case EQUIP:
  GameItem item=player.getInventory().getItem(value);
if (item != null) {
  if (item instanceof Weapon) {
    player.equipWeapon((Weapon)item);
  }
 else   if (item instanceof Armor) {
    player.equipArmor((Armor)item);
  }
 else   throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case UNEQUIP:
player.unEquipItem(value);
break;
case REFINE:
GameItem itemToRefine=player.getInventory().getItem(value);
if (itemToRefine != null) {
if (itemToRefine instanceof EquippableItem) {
((EquippableItem)itemToRefine).refine();
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case ATTACK:
Enemy target=(Enemy)getGameCharacterByRuntimeID(value);
if (target != null && target.isAlive() && distanceBetween(player,target) <= ((Weapon)player.getEquip(Player.RIGHT_HAND)).range) {
if (++player.atkTime >= ATK_INTERVAL / (1 + player.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=player.dealDamage(target);
animations.add(new Animation(player.getX(),player.getY(),0.5f,0,25,dmg + ""String_Node_Str""));
player.atkTime=0;
if (target.getHP() <= 0) {
player.gainBaseExperience(target.experience);
player.gainJobExperience(target.experience);
player.gainStatExperience(target.experience);
chests.add(target.onDeath());
}
}
if (++target.atkTime >= ATK_INTERVAL / (1 + target.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=target.dealDamage(player);
animations.add(new Animation(player.getX(),player.getY() + 80,0.5f,0,25,dmg + ""String_Node_Str""));
target.atkTime=0;
if (player.getHP() <= 0) {
}
}
}
break;
case SKILL_USE:
Enemy skTarget=(Enemy)getGameCharacterByRuntimeID(value2);
if (skTarget != null) {
player.useSkill(value,skTarget);
if (skTarget.getHP() <= 0) {
player.gainBaseExperience(skTarget.experience);
player.gainJobExperience(skTarget.experience);
player.gainStatExperience(skTarget.experience);
chests.add(skTarget.onDeath());
}
}
break;
case USE_ITEM:
UsableItem itemToUse=(UsableItem)player.getInventory().getItem(value);
itemToUse.onUse(player);
break;
case CHAT:
animations.add(new Animation(player.getX(),player.getY(),2.0f,0,0,tokens[4]));
break;
default :
throw new BadActionRequestException(""String_Node_Str"" + tokens[0]);
}
}
}","/** 
 * Parses any actions requested by game client General format for ""action"" string TODO: to be reconsidered, check length? or ifs? ""ACTION_NAME,PLAYER_NAME,VALUES...""
 * @param actions an array containing all actions from 1 client
 * @throws BadActionRequestException
 */
private void parseActions(String[] actions) throws BadActionRequestException {
  for (  String action : actions) {
    String[] tokens=action.split(""String_Node_Str"");
    String cmd=tokens[0];
    Player player=getPlayerByName(tokens[1]);
    if (player == null)     throw new BadActionRequestException(""String_Node_Str"" + tokens[1]);
    int value=0;
    try {
      value=Integer.parseInt(tokens[2]);
    }
 catch (    NumberFormatException e) {
      throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
    }
    int value2=0;
    if (tokens.length == 4) {
      try {
        value2=Integer.parseInt(tokens[3]);
      }
 catch (      NumberFormatException e) {
        throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
      }
    }
switch (cmd) {
case ATTR_UP:
      player.increaseAttr(value);
    break;
case SKILL_UP:
  player.increaseSkillLevel(value);
break;
case EQUIP:
GameItem item=player.getInventory().getItem(value);
if (item != null) {
if (item instanceof Weapon) {
player.equipWeapon((Weapon)item);
}
 else if (item instanceof Armor) {
player.equipArmor((Armor)item);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case UNEQUIP:
player.unEquipItem(value);
break;
case REFINE:
GameItem itemToRefine=player.getInventory().getItem(value);
if (itemToRefine != null) {
if (itemToRefine instanceof EquippableItem) {
((EquippableItem)itemToRefine).refine();
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case ATTACK:
Enemy target=(Enemy)getGameCharacterByRuntimeID(value);
if (target != null && target.isAlive() && distanceBetween(player,target) <= ((Weapon)player.getEquip(Player.RIGHT_HAND)).range) {
if (++player.atkTime >= ATK_INTERVAL / (1 + player.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=player.dealDamage(target);
animations.add(new Animation(player.getX(),player.getY(),0.5f,0,25,dmg + ""String_Node_Str""));
player.atkTime=0;
if (target.getHP() <= 0) {
player.gainBaseExperience(target.experience);
player.gainJobExperience(target.experience);
player.gainStatExperience(target.experience);
chests.add(target.onDeath());
}
}
if (++target.atkTime >= ATK_INTERVAL / (1 + target.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=target.dealDamage(player);
animations.add(new Animation(player.getX(),player.getY() + 80,0.5f,0,25,dmg + ""String_Node_Str""));
target.atkTime=0;
if (player.getHP() <= 0) {
}
}
}
break;
case SKILL_USE:
Enemy skTarget=(Enemy)getGameCharacterByRuntimeID(value2);
if (skTarget != null) {
player.useSkill(value,skTarget);
if (skTarget.getHP() <= 0) {
player.gainBaseExperience(skTarget.experience);
player.gainJobExperience(skTarget.experience);
player.gainStatExperience(skTarget.experience);
chests.add(skTarget.onDeath());
}
}
break;
case USE_ITEM:
UsableItem itemToUse=(UsableItem)player.getInventory().getItem(value);
itemToUse.onUse(player);
break;
case CHAT:
animations.add(new Animation(player.getX(),player.getY(),2.0f,0,0,tokens[4]));
break;
default :
throw new BadActionRequestException(""String_Node_Str"" + tokens[0]);
}
}
}",0.9888220120378332
24634,"public GameServer(){
  try {
    server=new UDPServer(55555,new ClientQueryParser());
  }
 catch (  SocketException e) {
    e.printStackTrace();
  }
  chests.add(new Chest(80,80,1000,ObjectManager.getWeaponByID(""String_Node_Str""),ObjectManager.getWeaponByID(""String_Node_Str"")));
  chests.add(new Chest(0,80,2033,ObjectManager.getArmorByID(""String_Node_Str""),ObjectManager.getArmorByID(""String_Node_Str"")));
  spawnEnemy(""String_Node_Str"",640,160);
  spawnEnemy(""String_Node_Str"",720,720);
  AgentRule rule=new AgentRule(AgentType.GUARD,AgentGoal.GUARD_CHEST){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      if (target != null)       agent.patrol(target);
    }
  }
;
  AgentRule rule2=new AgentRule(AgentType.GUARD,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      List<Player> tmpPlayers=new ArrayList<Player>(players);
      for (      Player p : tmpPlayers) {
        if (agent.canSee(p)) {
          target=p;
          break;
        }
      }
      if (target != null)       agent.attack(target);
    }
  }
;
  AgentRule rule3=new AgentRule(AgentType.SCOUT,AgentGoal.FIND_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      agent.search(getLastKnownLocation());
    }
  }
;
  AgentRule rule4=new AgentRule(AgentType.SCOUT,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      if (target != null)       agent.attack(target);
    }
  }
;
  AgentRule rule5=new AgentRule(AgentType.ASSASSIN,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      List<Player> tmpPlayers=new ArrayList<Player>(players);
      for (      Player p : tmpPlayers) {
        if (agent.canSee(p)) {
          target=p;
          break;
        }
      }
      if (target != null)       agent.attack(target);
    }
  }
;
  aiRules.add(rule);
  aiRules.add(rule2);
  aiRules.add(rule3);
  aiRules.add(rule4);
  aiRules.add(rule5);
  new Thread(new ServerLoop()).start();
}","public GameServer(){
  try {
    server=new UDPServer(55555,new ClientQueryParser());
  }
 catch (  SocketException e) {
    e.printStackTrace();
  }
  chests.add(new Chest(80,80,1000,ObjectManager.getWeaponByID(""String_Node_Str""),ObjectManager.getWeaponByID(""String_Node_Str"")));
  chests.add(new Chest(0,80,2033,ObjectManager.getArmorByID(""String_Node_Str""),ObjectManager.getArmorByID(""String_Node_Str"")));
  spawnEnemy(""String_Node_Str"",640,160);
  spawnEnemy(""String_Node_Str"",720,720);
  spawnEnemy(""String_Node_Str"",40,40);
  spawnEnemy(""String_Node_Str"",40,120);
  spawnEnemy(""String_Node_Str"",400,120);
  spawnEnemy(""String_Node_Str"",320,160);
  spawnEnemy(""String_Node_Str"",40,360);
  spawnEnemy(""String_Node_Str"",600,120);
  AgentRule rule=new AgentRule(AgentType.GUARD,AgentGoal.GUARD_CHEST){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      if (target != null)       agent.patrol(target);
    }
  }
;
  AgentRule rule2=new AgentRule(AgentType.GUARD,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      List<Player> tmpPlayers=new ArrayList<Player>(players);
      for (      Player p : tmpPlayers) {
        if (agent.canSee(p)) {
          target=p;
          break;
        }
      }
      if (target != null)       agent.attack(target);
    }
  }
;
  AgentRule rule3=new AgentRule(AgentType.SCOUT,AgentGoal.FIND_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      agent.search(getLastKnownLocation());
    }
  }
;
  AgentRule rule4=new AgentRule(AgentType.SCOUT,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      if (target != null)       agent.attack(target);
    }
  }
;
  AgentRule rule5=new AgentRule(AgentType.ASSASSIN,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      List<Player> tmpPlayers=new ArrayList<Player>(players);
      for (      Player p : tmpPlayers) {
        if (agent.canSee(p)) {
          target=p;
          break;
        }
      }
      if (target != null)       agent.attack(target);
    }
  }
;
  aiRules.add(rule);
  aiRules.add(rule2);
  aiRules.add(rule3);
  aiRules.add(rule4);
  aiRules.add(rule5);
  new Thread(new ServerLoop()).start();
}",0.946078431372549
24635,"private void drawImage2(Graphics2D g){
  g.setColor(Color.GRAY);
  g.fillRect(0,0,205,304);
  ArrayList<GameItem> items=player.getInventory().getItems();
  int x=0, y=0;
  for (int i=0; i < items.size(); i++) {
    drawItem(items.get(i),g,2 + x * 40,29 + y * 40);
    if (++x == 6) {
      x=0;
      y++;
    }
  }
  g.drawImage(Resources.getImage(""String_Node_Str""),0,27,this);
}","private void drawImage2(Graphics2D g){
  g.setColor(Color.GRAY);
  g.fillRect(0,0,205,304);
  ArrayList<GameItem> items=player.getInventory().getItems();
  int x=0, y=0;
  for (int i=0; i < items.size(); i++) {
    drawItem(items.get(i),g,2 + x * 40,29 + y * 40);
    if (++x == 6) {
      x=0;
      y++;
    }
  }
  g.drawImage(Resources.getImage(""String_Node_Str""),0,27,this);
  g.setColor(Color.YELLOW);
  g.setFont(new Font(""String_Node_Str"",Font.PLAIN,20));
  g.drawString(player.getMoney() + ""String_Node_Str"",100,285);
}",0.8382838283828383
24636,"public void repaint(Player p){
  if (!player.getInventory().toString().equals(p.getInventory().toString()) || !isSameEquip(p)) {
    player=p;
    repaint();
  }
}","public void repaint(Player p){
  if (!player.getInventory().toString().equals(p.getInventory().toString()) || !isSameEquip(p) || player.getMoney() != p.getMoney()) {
    player=p;
    repaint();
  }
}",0.8980716253443526
24637,"public Enemy(String name,String description,EnemyType type,AgentBehaviour AI,Element element,int level,int x,int y){
  super(""String_Node_Str"" + uniqueEnemyID++,name,description,GameCharacterClass.MONSTER);
  this.type=type;
  this.AI=AI;
  this.baseLevel=level;
  this.element=element;
  this.x=x;
  this.y=y;
  this.hp=5000;
  this.experience=15;
}","public Enemy(String name,String description,EnemyType type,AgentBehaviour AI,Element element,int level,int x,int y){
  super(""String_Node_Str"" + uniqueEnemyID++,name,description,GameCharacterClass.MONSTER);
  this.type=type;
  this.AI=AI;
  this.baseLevel=level;
  this.element=element;
  this.x=x;
  this.y=y;
  this.hp=300;
  this.experience=15;
}",0.9957081545064378
24638,"@Override public int dealDamage(GameCharacter target){
  int dmg=super.dealDamage(target);
  if (target.hp <= 0 && target instanceof Enemy) {
    Enemy mob=(Enemy)target;
    gainBaseExperience(mob.experience);
    gainStatExperience(mob.experience);
    gainJobExperience(mob.experience);
  }
  return dmg;
}","@Override public int dealDamage(GameCharacter target){
  int dmg=super.dealDamage(target);
  return dmg;
}",0.5108433734939759
24639,"@Override public void run(){
  List<Player> tmpPlayers=new ArrayList<Player>();
  while (true) {
    tmpPlayers=new ArrayList<Player>(players);
    for (Iterator<Animation> itA=animations.iterator(); itA.hasNext(); ) {
      Animation a=itA.next();
      a.duration-=20.0f / 1000.0f;
      if (a.duration <= 0)       itA.remove();
    }
    for (    Enemy e : enemies) {
      AgentBehaviour ai=e.AI;
      for (      AgentRule rule : aiRules) {
        if (rule.matches(ai.type,ai.currentGoal)) {
        }
      }
    }
    for (    Player p : tmpPlayers) {
      if (locationFacts.size() == 0) {
        locationFacts.put(new Point(p.getX(),p.getY()),0.1f);
      }
      p.move();
      p.xSpeed=0;
      p.ySpeed=0;
      for (      Enemy e : enemies) {
        if (e.AI.currentGoal == AgentGoal.GUARD_CHEST && p.getX() == e.AI.currentTarget.getX() && p.getY() == e.AI.currentTarget.getY()) {
          e.AI.setGoal(AgentGoal.KILL_PLAYER);
          e.AI.setTarget(p);
        }
        if (e.AI.currentGoal == AgentGoal.FIND_PLAYER && e.canSee(p)) {
          locationFacts.put(new Point(p.getX(),p.getY()),1.0f);
          e.AI.currentTarget=p;
        }
        if (e.AI.currentGoal == AgentGoal.KILL_PLAYER && e.AI.currentTarget == null && locationFacts.size() > 0) {
          e.AI.currentTarget=getLastKnownLocation();
        }
      }
    }
    Iterator<Entry<Point,Float>> iter=locationFacts.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Point,Float> pairs=(Map.Entry<Point,Float>)iter.next();
      pairs.setValue((float)(pairs.getValue() - 0.005));
      if (pairs.getValue() < 0)       iter.remove();
    }
    for (    Player p : tmpPlayers) {
      for (      Chest c : chests) {
        if (!c.isOpened() && p.getX() == c.x && p.getY() == c.y) {
          c.open();
          for (          GameItem item : c.getItems())           p.getInventory().addItem(item);
          p.getInventory().setChanged();
          p.incMoney(c.money);
        }
      }
    }
    Player[] toSend=new Player[tmpPlayers.size()];
    for (int i=0; i < tmpPlayers.size(); i++)     toSend[i]=tmpPlayers.get(i);
    for (Iterator<Chest> it=chests.iterator(); it.hasNext(); ) {
      if (it.next().isOpened()) {
        it.remove();
      }
    }
    Chest[] chestsToSend=new Chest[chests.size()];
    for (int i=0; i < chests.size(); i++)     chestsToSend[i]=chests.get(i);
    Enemy[] eneToSend=new Enemy[enemies.size()];
    for (int i=0; i < enemies.size(); i++)     eneToSend[i]=enemies.get(i);
    Animation[] animsToSend=new Animation[animations.size()];
    for (int i=0; i < animations.size(); i++)     animsToSend[i]=animations.get(i);
    try {
      server.send(new DataPacket(toSend));
      server.send(new DataPacket(chestsToSend));
      server.send(new DataPacket(eneToSend));
      server.send(new DataPacket(animsToSend));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    try {
      Thread.sleep(20);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  List<Player> tmpPlayers=new ArrayList<Player>();
  while (true) {
    tmpPlayers=new ArrayList<Player>(players);
    for (Iterator<Animation> itA=animations.iterator(); itA.hasNext(); ) {
      Animation a=itA.next();
      a.duration-=20.0f / 1000.0f;
      if (a.duration <= 0)       itA.remove();
    }
    for (    Enemy e : enemies) {
      AgentBehaviour ai=e.AI;
      for (      AgentRule rule : aiRules) {
        if (rule.matches(ai.type,ai.currentGoal)) {
        }
      }
    }
    for (    Player p : tmpPlayers) {
      if (locationFacts.size() == 0) {
        locationFacts.put(new Point(p.getX(),p.getY()),0.1f);
      }
      p.move();
      p.xSpeed=0;
      p.ySpeed=0;
      for (      Enemy e : enemies) {
        if (e.AI.currentGoal == AgentGoal.GUARD_CHEST && p.getX() == e.AI.currentTarget.getX() && p.getY() == e.AI.currentTarget.getY()) {
          e.AI.setGoal(AgentGoal.KILL_PLAYER);
          e.AI.setTarget(p);
        }
        if (e.AI.currentGoal == AgentGoal.FIND_PLAYER && e.canSee(p)) {
          locationFacts.put(new Point(p.getX(),p.getY()),1.0f);
          e.AI.currentTarget=p;
        }
        if (e.AI.currentGoal == AgentGoal.KILL_PLAYER && e.AI.currentTarget == null && locationFacts.size() > 0) {
          e.AI.currentTarget=getLastKnownLocation();
        }
      }
    }
    Iterator<Entry<Point,Float>> iter=locationFacts.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Point,Float> pairs=(Map.Entry<Point,Float>)iter.next();
      pairs.setValue((float)(pairs.getValue() - 0.005));
      if (pairs.getValue() < 0)       iter.remove();
    }
    for (    Player p : tmpPlayers) {
      for (      Chest c : chests) {
        if (!c.isOpened() && p.getX() == c.x && p.getY() == c.y) {
          c.open();
          for (          GameItem item : c.getItems())           p.getInventory().addItem(item);
          p.getInventory().setChanged();
          p.incMoney(c.money);
        }
      }
    }
    Player[] toSend=new Player[tmpPlayers.size()];
    for (int i=0; i < tmpPlayers.size(); i++)     toSend[i]=tmpPlayers.get(i);
    for (Iterator<Chest> it=chests.iterator(); it.hasNext(); ) {
      if (it.next().isOpened()) {
        it.remove();
      }
    }
    for (Iterator<Enemy> it=enemies.iterator(); it.hasNext(); ) {
      if (!it.next().isAlive()) {
        it.remove();
      }
    }
    Chest[] chestsToSend=new Chest[chests.size()];
    for (int i=0; i < chests.size(); i++)     chestsToSend[i]=chests.get(i);
    Enemy[] eneToSend=new Enemy[enemies.size()];
    for (int i=0; i < enemies.size(); i++)     eneToSend[i]=enemies.get(i);
    Animation[] animsToSend=new Animation[animations.size()];
    for (int i=0; i < animations.size(); i++)     animsToSend[i]=animations.get(i);
    try {
      server.send(new DataPacket(toSend));
      server.send(new DataPacket(chestsToSend));
      server.send(new DataPacket(eneToSend));
      server.send(new DataPacket(animsToSend));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    try {
      Thread.sleep(20);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9782152654510248
24640,"private void parseActions(String[] actions) throws BadActionRequestException {
  for (  String action : actions) {
    String[] tokens=action.split(""String_Node_Str"");
    String cmd=tokens[0];
    Player player=getPlayerByName(tokens[1]);
    if (player == null)     throw new BadActionRequestException(""String_Node_Str"" + tokens[1]);
    int value=0;
    try {
      value=Integer.parseInt(tokens[2]);
    }
 catch (    NumberFormatException e) {
      throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
    }
    int value2=0;
    if (tokens.length == 4) {
      try {
        value2=Integer.parseInt(tokens[3]);
      }
 catch (      NumberFormatException e) {
        throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
      }
    }
switch (cmd) {
case ATTR_UP:
      player.increaseAttr(value);
    break;
case EQUIP:
  GameItem item=player.getInventory().getItem(value);
if (item != null) {
  if (item instanceof Weapon) {
    player.equipWeapon((Weapon)item);
  }
 else   if (item instanceof Armor) {
    player.equipArmor((Armor)item);
  }
 else   throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case UNEQUIP:
player.unEquipItem(value);
break;
case REFINE:
GameItem itemToRefine=player.getInventory().getItem(value);
if (itemToRefine != null) {
if (itemToRefine instanceof EquippableItem) {
((EquippableItem)itemToRefine).refine();
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case ATTACK:
Enemy target=(Enemy)getGameCharacterByRuntimeID(value);
if (++player.atkTime >= ATK_INTERVAL / (1 + player.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=player.dealDamage(target);
animations.add(new Animation(player.getX(),player.getY(),0.5f,0,25,dmg + ""String_Node_Str""));
player.atkTime=0;
if (target.getHP() <= 0) {
player.gainBaseExperience(target.experience);
player.gainJobExperience(target.experience);
player.gainStatExperience(target.experience);
chests.add(target.onDeath());
}
}
if (++target.atkTime >= ATK_INTERVAL / (1 + target.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=target.dealDamage(player);
animations.add(new Animation(player.getX(),player.getY() + 80,0.5f,0,25,dmg + ""String_Node_Str""));
target.atkTime=0;
if (player.getHP() <= 0) {
}
}
break;
case SKILL_USE:
GameCharacter skTarget=getGameCharacterByRuntimeID(value2);
if (skTarget != null) player.useSkill(value,skTarget);
break;
case CHAT:
animations.add(new Animation(player.getX(),player.getY(),2.0f,0,0,player.name + ""String_Node_Str"" + tokens[4]));
break;
default :
throw new BadActionRequestException(""String_Node_Str"" + tokens[0]);
}
}
}","private void parseActions(String[] actions) throws BadActionRequestException {
  for (  String action : actions) {
    String[] tokens=action.split(""String_Node_Str"");
    String cmd=tokens[0];
    Player player=getPlayerByName(tokens[1]);
    if (player == null)     throw new BadActionRequestException(""String_Node_Str"" + tokens[1]);
    int value=0;
    try {
      value=Integer.parseInt(tokens[2]);
    }
 catch (    NumberFormatException e) {
      throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
    }
    int value2=0;
    if (tokens.length == 4) {
      try {
        value2=Integer.parseInt(tokens[3]);
      }
 catch (      NumberFormatException e) {
        throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
      }
    }
switch (cmd) {
case ATTR_UP:
      player.increaseAttr(value);
    break;
case EQUIP:
  GameItem item=player.getInventory().getItem(value);
if (item != null) {
  if (item instanceof Weapon) {
    player.equipWeapon((Weapon)item);
  }
 else   if (item instanceof Armor) {
    player.equipArmor((Armor)item);
  }
 else   throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case UNEQUIP:
player.unEquipItem(value);
break;
case REFINE:
GameItem itemToRefine=player.getInventory().getItem(value);
if (itemToRefine != null) {
if (itemToRefine instanceof EquippableItem) {
((EquippableItem)itemToRefine).refine();
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case ATTACK:
Enemy target=(Enemy)getGameCharacterByRuntimeID(value);
if (target != null && target.isAlive()) {
if (++player.atkTime >= ATK_INTERVAL / (1 + player.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=player.dealDamage(target);
animations.add(new Animation(player.getX(),player.getY(),0.5f,0,25,dmg + ""String_Node_Str""));
player.atkTime=0;
if (target.getHP() <= 0) {
player.gainBaseExperience(target.experience);
player.gainJobExperience(target.experience);
player.gainStatExperience(target.experience);
chests.add(target.onDeath());
}
}
if (++target.atkTime >= ATK_INTERVAL / (1 + target.getTotalStat(GameCharacter.ASPD) / 100.0)) {
int dmg=target.dealDamage(player);
animations.add(new Animation(player.getX(),player.getY() + 80,0.5f,0,25,dmg + ""String_Node_Str""));
target.atkTime=0;
if (player.getHP() <= 0) {
}
}
}
break;
case SKILL_USE:
Enemy skTarget=(Enemy)getGameCharacterByRuntimeID(value2);
if (skTarget != null) {
player.useSkill(value,skTarget);
if (skTarget.getHP() <= 0) {
player.gainBaseExperience(skTarget.experience);
player.gainJobExperience(skTarget.experience);
player.gainStatExperience(skTarget.experience);
chests.add(skTarget.onDeath());
}
}
break;
case CHAT:
animations.add(new Animation(player.getX(),player.getY(),2.0f,0,0,player.name + ""String_Node_Str"" + tokens[4]));
break;
default :
throw new BadActionRequestException(""String_Node_Str"" + tokens[0]);
}
}
}",0.9321360732170608
24641,"public void updateGameClient(){
  if (move) {
    n=getNext();
    parent=playerParent;
  }
  if (n != parent) {
    move=false;
    if (player.getX() > n.getX() * 40)     player.xSpeed=-10;
    if (player.getX() < n.getX() * 40)     player.xSpeed=10;
    if (player.getY() > n.getY() * 40)     player.ySpeed=-10;
    if (player.getY() < n.getY() * 40)     player.ySpeed=10;
    if (player.getX() == n.getX() * 40 && player.getY() == n.getY() * 40) {
      playerParent=n;
      move=true;
      if (target != null && target == playerParent) {
        target=null;
      }
    }
    renderX=player.getX() - 640;
    renderY=player.getY() - 360;
  }
  if (!stop) {
    try {
      String[] actions=new String[st.actions.size()];
      ArrayList<String> tmp=new ArrayList<String>(st.actions);
      tmp.toArray(actions);
      st.actions.clear();
      String[] actions2=new String[inv.actions.size()];
      ArrayList<String> tmp2=new ArrayList<String>(inv.actions);
      tmp2.toArray(actions2);
      inv.actions.clear();
      client.send(new DataPacket(player));
      client.send(new DataPacket(actions));
      client.send(new DataPacket(actions2));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  repaint();
}","public void updateGameClient(){
  if (move) {
    n=getNext();
    parent=playerParent;
  }
  if (n != parent) {
    move=false;
    if (player.getX() > n.getX() * 40)     player.xSpeed=-10;
    if (player.getX() < n.getX() * 40)     player.xSpeed=10;
    if (player.getY() > n.getY() * 40)     player.ySpeed=-10;
    if (player.getY() < n.getY() * 40)     player.ySpeed=10;
    if (player.getX() == n.getX() * 40 && player.getY() == n.getY() * 40) {
      playerParent=n;
      move=true;
      if (target != null && target == playerParent) {
        target=null;
      }
    }
    renderX=player.getX() - 640;
    renderY=player.getY() - 360;
  }
  if (!stop) {
    try {
      String[] actions=new String[st.actions.size()];
      ArrayList<String> tmp=new ArrayList<String>(st.actions);
      tmp.toArray(actions);
      st.actions.clear();
      String[] actions2=new String[inv.actions.size()];
      ArrayList<String> tmp2=new ArrayList<String>(inv.actions);
      tmp2.toArray(actions2);
      inv.actions.clear();
      String[] actions3=new String[actionsUI.size()];
      ArrayList<String> tmp3=new ArrayList<String>(actionsUI);
      tmp3.toArray(actions3);
      actionsUI.clear();
      client.send(new DataPacket(player));
      client.send(new DataPacket(actions));
      client.send(new DataPacket(actions2));
      client.send(new DataPacket(actions3));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  repaint();
}",0.9195998517969618
24642,"@Override public void mousePressed(MouseEvent e){
  mouseX=e.getX();
  mouseY=e.getY();
  movePlayer(mouseX,mouseY);
  isPressed=true;
}","@Override public void mousePressed(MouseEvent e){
  mouseX=e.getX();
  mouseY=e.getY();
  if (!choosingTarget) {
    movePlayer(mouseX,mouseY);
    isPressed=true;
  }
 else {
    choosingTarget=false;
    for (    Enemy enemy : tmpEnemies) {
      Rectangle r=new Rectangle(enemy.getX(),enemy.getY(),40,40);
      if (r.contains(new Point(mouseX + renderX,mouseY + renderY))) {
        actionsUI.add(""String_Node_Str"" + player.name + ""String_Node_Str""+ input+ ""String_Node_Str""+ enemy.getRuntimeID());
        return;
      }
    }
  }
}",0.4035608308605341
24643,"public GUI(String ip,String playerName){
  super(1280,720,""String_Node_Str"",true);
  name=playerName;
  this.setLocation(0,0);
  this.addMouseListener(mouse);
  List<String> lines=Resources.getText(""String_Node_Str"");
  mapHeight=lines.size();
  mapWidth=lines.get(0).length();
  map=new AStarNode[mapWidth][mapHeight];
  for (int i=0; i < lines.size(); i++) {
    String line=lines.get(i);
    for (int j=0; j < line.length(); j++) {
      map[j][i]=new AStarNode(j,i,0,line.charAt(j) == '1' ? 1 : 0);
    }
  }
  player=new Player(""String_Node_Str"",name,GameCharacterClass.NOVICE,0 * 40,0 * 40);
  st=new StatsGUI(player);
  inv=new InventoryGUI(player);
  playerParent=map[0][0];
  renderX=player.getX() - 640;
  renderY=player.getY() - 360;
  try {
    client=new UDPClient(ip,55555,new ServerResponseParser());
    client.send(new DataPacket(System.getProperty(""String_Node_Str"")));
    client.send(new DataPacket(player));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  walkCursor=Toolkit.getDefaultToolkit().createCustomCursor(Resources.getImage(""String_Node_Str""),new Point(16,16),""String_Node_Str"");
  setCursor(walkCursor);
  setVisible(true);
}","public GUI(String ip,String playerName){
  super(1280,720,""String_Node_Str"",true);
  name=playerName;
  this.setLocation(0,0);
  this.addKeyListener(new Keyboard());
  this.addMouseListener(mouse);
  List<String> lines=Resources.getText(""String_Node_Str"");
  mapHeight=lines.size();
  mapWidth=lines.get(0).length();
  map=new AStarNode[mapWidth][mapHeight];
  for (int i=0; i < lines.size(); i++) {
    String line=lines.get(i);
    for (int j=0; j < line.length(); j++) {
      map[j][i]=new AStarNode(j,i,0,line.charAt(j) == '1' ? 1 : 0);
    }
  }
  player=new Player(""String_Node_Str"",name,GameCharacterClass.NOVICE,0 * 40,0 * 40);
  st=new StatsGUI(player);
  inv=new InventoryGUI(player);
  playerParent=map[0][0];
  renderX=player.getX() - 640;
  renderY=player.getY() - 360;
  try {
    client=new UDPClient(ip,55555,new ServerResponseParser());
    client.send(new DataPacket(System.getProperty(""String_Node_Str"")));
    client.send(new DataPacket(player));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  walkCursor=Toolkit.getDefaultToolkit().createCustomCursor(Resources.getImage(""String_Node_Str""),new Point(16,16),""String_Node_Str"");
  setCursor(walkCursor);
  setVisible(true);
}",0.9836065573770492
24644,"@Override protected void createPicture(Graphics2D g){
}","@Override protected void createPicture(Graphics2D g){
  attributes.repaint();
  stats.repaint();
}",0.7189542483660131
24645,"public void useSkill(GameCharacter target){
}","public void useSkill(int skillCode,GameCharacter target){
  ActiveSkill sk=new ActiveSkill(""String_Node_Str"",""String_Node_Str""){
    /** 
 */
    private static final long serialVersionUID=299880583047861121L;
    @Override public void use(    GameCharacter caster,    GameCharacter target){
      caster.hp+=10;
    }
    @Override public int getManaCost(){
      return 0;
    }
  }
;
  if (skillCode < 5) {
    sk.use(this,target);
  }
}",0.1855670103092783
24646,"/** 
 * Character stats are directly affected by his attributes Therefore any change in attributes must be followed by call to this method
 */
public final void calculateStats(){
  int strength=attributes[STR] + bAttributes[STR];
  int vitality=attributes[VIT] + bAttributes[VIT];
  int dexterity=attributes[DEX] + bAttributes[DEX];
  int agility=attributes[AGI] + bAttributes[AGI];
  int intellect=attributes[INT] + bAttributes[INT];
  int wisdom=attributes[WIS] + bAttributes[WIS];
  int willpower=attributes[WIL] + bAttributes[WIL];
  int perception=attributes[PER] + bAttributes[PER];
  int luck=attributes[LUC] + bAttributes[LUC];
  stats[MAX_HP]=(int)((vitality * MODIFIER_VERY_HIGH + strength * MODIFIER_MEDIUM) * charClass.hp + MODIFIER_LEVEL * baseLevel * charClass.hp + (int)(vitality / 10) * charClass.hp);
  stats[MAX_SP]=(int)((wisdom * MODIFIER_VERY_HIGH + intellect * MODIFIER_MEDIUM + willpower * MODIFIER_VERY_LOW) * charClass.sp + MODIFIER_LEVEL * baseLevel * charClass.sp + (int)(wisdom / 10) * charClass.sp);
  stats[ATK]=(int)((strength * MODIFIER_VERY_HIGH + dexterity * MODIFIER_MEDIUM + perception * MODIFIER_LOW + luck * MODIFIER_VERY_LOW) + baseLevel + (int)(strength / 10) * ((int)(strength / 10) + 1));
  stats[MATK]=(int)((intellect * MODIFIER_VERY_HIGH + wisdom * MODIFIER_HIGH + willpower * MODIFIER_HIGH + dexterity * MODIFIER_MEDIUM + perception * MODIFIER_LOW + luck * MODIFIER_VERY_LOW) + baseLevel + (int)(intellect / 10) * ((int)(intellect / 10) + 1));
  stats[DEF]=(int)((vitality * MODIFIER_MEDIUM + perception * MODIFIER_LOW + strength * MODIFIER_VERY_LOW) + MODIFIER_LEVEL * baseLevel + (int)(vitality / 20) * (charClass.hp / 10));
  stats[MDEF]=(int)((willpower * MODIFIER_HIGH + wisdom * MODIFIER_MEDIUM + perception * MODIFIER_LOW + intellect * MODIFIER_VERY_LOW) + MODIFIER_LEVEL * baseLevel + (int)(willpower / 20) * (intellect / 10));
  stats[ASPD]=agility * MODIFIER_VERY_HIGH + dexterity * MODIFIER_LOW;
  stats[MSPD]=(int)((dexterity * MODIFIER_MEDIUM + willpower * MODIFIER_VERY_LOW + wisdom * MODIFIER_VERY_LOW + intellect * MODIFIER_VERY_LOW + perception * MODIFIER_VERY_LOW + luck * MODIFIER_VERY_LOW));
  stats[CRIT]=(int)((luck * MODIFIER_VERY_HIGH + dexterity * MODIFIER_VERY_LOW + perception * MODIFIER_VERY_LOW + wisdom * MODIFIER_VERY_LOW));
  stats[MCRIT]=(int)((luck * MODIFIER_HIGH + willpower * MODIFIER_LOW + perception * MODIFIER_VERY_LOW));
  atkCritDmg=2 + luck * 0.01;
  matkCritDmg=2 + luck * 0.01;
}","/** 
 * Character stats are directly affected by his attributes Therefore any change in attributes must be followed by call to this method
 */
public final void calculateStats(){
  int strength=attributes[STR] + bAttributes[STR];
  int vitality=attributes[VIT] + bAttributes[VIT];
  int dexterity=attributes[DEX] + bAttributes[DEX];
  int agility=attributes[AGI] + bAttributes[AGI];
  int intellect=attributes[INT] + bAttributes[INT];
  int wisdom=attributes[WIS] + bAttributes[WIS];
  int willpower=attributes[WIL] + bAttributes[WIL];
  int perception=attributes[PER] + bAttributes[PER];
  int luck=attributes[LUC] + bAttributes[LUC];
  stats[MAX_HP]=(int)((vitality * MODIFIER_VERY_HIGH + strength * MODIFIER_MEDIUM) * charClass.hp + MODIFIER_LEVEL * baseLevel * charClass.hp + (int)(vitality / 10) * charClass.hp);
  stats[MAX_SP]=(int)((wisdom * MODIFIER_VERY_HIGH + intellect * MODIFIER_MEDIUM + willpower * MODIFIER_VERY_LOW) * charClass.sp + MODIFIER_LEVEL * baseLevel * charClass.sp + (int)(wisdom / 10) * charClass.sp);
  stats[ATK]=(int)((strength * MODIFIER_VERY_HIGH + dexterity * MODIFIER_MEDIUM + perception * MODIFIER_LOW + luck * MODIFIER_VERY_LOW) + baseLevel + (int)(strength / 10) * ((int)(strength / 10) + 1));
  stats[MATK]=(int)((intellect * MODIFIER_VERY_HIGH + wisdom * MODIFIER_HIGH + willpower * MODIFIER_HIGH + dexterity * MODIFIER_MEDIUM + perception * MODIFIER_LOW + luck * MODIFIER_VERY_LOW) + baseLevel + (int)(intellect / 10) * ((int)(intellect / 10) + 1));
  stats[DEF]=(int)((vitality * MODIFIER_MEDIUM + perception * MODIFIER_LOW + strength * MODIFIER_VERY_LOW) + MODIFIER_LEVEL * baseLevel + (int)(vitality / 20) * (charClass.hp / 10));
  stats[MDEF]=(int)((willpower * MODIFIER_HIGH + wisdom * MODIFIER_MEDIUM + perception * MODIFIER_LOW + intellect * MODIFIER_VERY_LOW) + MODIFIER_LEVEL * baseLevel + (int)(willpower / 20) * (intellect / 10));
  stats[ASPD]=agility * MODIFIER_VERY_HIGH + dexterity * MODIFIER_LOW;
  stats[MSPD]=(int)((dexterity * MODIFIER_MEDIUM + willpower * MODIFIER_VERY_LOW + wisdom * MODIFIER_VERY_LOW + intellect * MODIFIER_VERY_LOW + perception * MODIFIER_VERY_LOW + luck * MODIFIER_VERY_LOW));
  stats[CRIT]=(int)((luck * MODIFIER_VERY_HIGH + dexterity * MODIFIER_VERY_LOW + perception * MODIFIER_VERY_LOW + wisdom * MODIFIER_VERY_LOW));
  stats[MCRIT]=(int)((luck * MODIFIER_HIGH + willpower * MODIFIER_LOW + perception * MODIFIER_VERY_LOW));
  atkCritDmg=2 + luck * 0.01f;
  matkCritDmg=2 + luck * 0.01f;
}",0.999595305544314
24647,"public String statsToPseudoHTML(){
  return HTML_START + B + this.name+ B_END+ BR+ ""String_Node_Str""+ BLUE+ charClass.toString()+ FBR+ ""String_Node_Str""+ BLUE+ baseLevel+ FONT_END+ ""String_Node_Str""+ PURPLE+ statLevel+ FONT_END+ ""String_Node_Str""+ MAGENTA+ jobLevel+ ""String_Node_Str""+ FBR+ ""String_Node_Str""+ RED+ hp+ ""String_Node_Str""+ getTotalStat(MAX_HP)+ FONT_END+ ""String_Node_Str""+ DARK_BLUE+ sp+ ""String_Node_Str""+ getTotalStat(MAX_SP)+ ""String_Node_Str""+ FBR+ ""String_Node_Str""+ BLUE+ stats[ATK]+ ""String_Node_Str""+ bStats[ATK]+ FONT_END+ ""String_Node_Str""+ BLUE+ stats[MATK]+ ""String_Node_Str""+ bStats[MATK]+ FBR+ ""String_Node_Str""+ BLUE+ stats[DEF]+ ""String_Node_Str""+ bStats[DEF]+ FONT_END+ ""String_Node_Str""+ BLUE+ stats[MDEF]+ ""String_Node_Str""+ bStats[MDEF]+ FBR+ ""String_Node_Str""+ BLUE+ (stats[ARM] + bStats[ARM])+ ""String_Node_Str""+ FONT_END+ ""String_Node_Str""+ BLUE+ (stats[MARM] + bStats[MARM])+ ""String_Node_Str""+ FBR+ ""String_Node_Str""+ BLUE+ getTotalStat(ASPD)+ ""String_Node_Str""+ FONT_END+ ""String_Node_Str""+ BLUE+ getTotalStat(MSPD)+ ""String_Node_Str""+ FBR+ ""String_Node_Str""+ BLUE+ getTotalStat(CRIT)+ ""String_Node_Str""+ FONT_END+ ""String_Node_Str""+ BLUE+ getTotalStat(MCRIT)+ ""String_Node_Str""+ FONT_END;
}","public String statsToPseudoHTML(){
  return HTML_START + B + this.name+ B_END+ BR+ ""String_Node_Str""+ BLUE+ charClass.toString()+ FBR+ ""String_Node_Str""+ BLUE+ baseLevel+ FONT_END+ ""String_Node_Str""+ PURPLE+ statLevel+ FONT_END+ ""String_Node_Str""+ MAGENTA+ jobLevel+ ""String_Node_Str""+ FBR+ ""String_Node_Str""+ RED+ hp+ ""String_Node_Str""+ (int)getTotalStat(MAX_HP)+ FONT_END+ ""String_Node_Str""+ DARK_BLUE+ sp+ ""String_Node_Str""+ (int)getTotalStat(MAX_SP)+ ""String_Node_Str""+ FBR+ ""String_Node_Str""+ BLUE+ stats[ATK]+ ""String_Node_Str""+ bStats[ATK]+ FONT_END+ ""String_Node_Str""+ BLUE+ stats[MATK]+ ""String_Node_Str""+ bStats[MATK]+ FBR+ ""String_Node_Str""+ BLUE+ stats[DEF]+ ""String_Node_Str""+ bStats[DEF]+ FONT_END+ ""String_Node_Str""+ BLUE+ stats[MDEF]+ ""String_Node_Str""+ bStats[MDEF]+ FBR+ ""String_Node_Str""+ BLUE+ (stats[ARM] + bStats[ARM])+ ""String_Node_Str""+ FONT_END+ ""String_Node_Str""+ BLUE+ (stats[MARM] + bStats[MARM])+ ""String_Node_Str""+ FBR+ ""String_Node_Str""+ BLUE+ getTotalStat(ASPD)+ ""String_Node_Str""+ FONT_END+ ""String_Node_Str""+ BLUE+ getTotalStat(MSPD)+ ""String_Node_Str""+ FBR+ ""String_Node_Str""+ BLUE+ getTotalStat(CRIT)+ ""String_Node_Str""+ FONT_END+ ""String_Node_Str""+ BLUE+ getTotalStat(MCRIT)+ ""String_Node_Str""+ FONT_END;
}",0.9959612277867528
24648,"private void parseActions(String[] actions) throws BadActionRequestException {
  for (  String action : actions) {
    String[] tokens=action.split(""String_Node_Str"");
    String cmd=tokens[0];
    Player player=getPlayerByName(tokens[1]);
    if (player == null)     throw new BadActionRequestException(""String_Node_Str"" + tokens[1]);
    int value=0;
    try {
      value=Integer.parseInt(tokens[2]);
    }
 catch (    NumberFormatException e) {
      throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
    }
switch (cmd) {
case ATTR_UP:
      player.increaseAttr(value);
    break;
case EQUIP:
  GameItem item=player.getInventory().getItem(value);
if (item != null) {
  if (item instanceof Weapon) {
    player.equipWeapon((Weapon)item);
  }
 else   if (item instanceof Armor) {
    player.equipArmor((Armor)item);
  }
 else   throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case UNEQUIP:
player.unEquipItem(value);
break;
case REFINE:
GameItem itemToRefine=player.getInventory().getItem(value);
if (itemToRefine != null) {
if (itemToRefine instanceof EquippableItem) {
((EquippableItem)itemToRefine).refine();
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
default :
throw new BadActionRequestException(""String_Node_Str"" + tokens[0]);
}
}
}","private void parseActions(String[] actions) throws BadActionRequestException {
  for (  String action : actions) {
    String[] tokens=action.split(""String_Node_Str"");
    String cmd=tokens[0];
    Player player=getPlayerByName(tokens[1]);
    if (player == null)     throw new BadActionRequestException(""String_Node_Str"" + tokens[1]);
    int value=0;
    try {
      value=Integer.parseInt(tokens[2]);
    }
 catch (    NumberFormatException e) {
      throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
    }
    int value2=0;
    if (tokens.length == 4) {
      try {
        value2=Integer.parseInt(tokens[3]);
      }
 catch (      NumberFormatException e) {
        throw new BadActionRequestException(""String_Node_Str"" + tokens[2]);
      }
    }
switch (cmd) {
case ATTR_UP:
      player.increaseAttr(value);
    break;
case EQUIP:
  GameItem item=player.getInventory().getItem(value);
if (item != null) {
  if (item instanceof Weapon) {
    player.equipWeapon((Weapon)item);
  }
 else   if (item instanceof Armor) {
    player.equipArmor((Armor)item);
  }
 else   throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case UNEQUIP:
player.unEquipItem(value);
break;
case REFINE:
GameItem itemToRefine=player.getInventory().getItem(value);
if (itemToRefine != null) {
if (itemToRefine instanceof EquippableItem) {
((EquippableItem)itemToRefine).refine();
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
}
 else throw new BadActionRequestException(""String_Node_Str"" + value);
break;
case SKILL_USE:
GameCharacter target=getGameCharacterByRuntimeID(value2);
if (target != null) player.useSkill(value,target);
break;
default :
throw new BadActionRequestException(""String_Node_Str"" + tokens[0]);
}
}
}",0.8862602365787079
24649,"public GameServer(){
  try {
    server=new UDPServer(55555,new ClientQueryParser());
  }
 catch (  SocketException e) {
    e.printStackTrace();
  }
  chests.add(new Chest(80,80,1000,WeaponFactory.getWeaponById(""String_Node_Str""),WeaponFactory.getWeaponById(""String_Node_Str"")));
  chests.add(new Chest(0,80,2033,ArmorFactory.getArmorById(""String_Node_Str""),ArmorFactory.getArmorById(""String_Node_Str"")));
  enemies.add(new Enemy(""String_Node_Str"",""String_Node_Str"",EnemyType.NORMAL,new AgentBehaviour(AgentType.GUARD,chests.get(0)),Element.NEUTRAL,5,640,160));
  enemies.add(new Enemy(""String_Node_Str"",""String_Node_Str"",EnemyType.NORMAL,new AgentBehaviour(AgentType.SCOUT,null),Element.NEUTRAL,5,640,640));
  enemies.add(new Enemy(""String_Node_Str"",""String_Node_Str"",EnemyType.NORMAL,new AgentBehaviour(AgentType.SCOUT,null),Element.NEUTRAL,5,1280,1200));
  enemies.add(new Enemy(""String_Node_Str"",""String_Node_Str"",EnemyType.NORMAL,new AgentBehaviour(AgentType.ASSASSIN,null),Element.NEUTRAL,5,720,720));
  AgentRule rule=new AgentRule(AgentType.GUARD,AgentGoal.GUARD_CHEST){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      if (target != null)       agent.patrol(target);
    }
  }
;
  AgentRule rule2=new AgentRule(AgentType.GUARD,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      List<Player> tmpPlayers=new ArrayList<Player>(players);
      for (      Player p : tmpPlayers) {
        if (agent.canSee(p)) {
          target=p;
          break;
        }
      }
      if (target != null)       agent.attack(target);
    }
  }
;
  AgentRule rule3=new AgentRule(AgentType.SCOUT,AgentGoal.FIND_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      agent.search(getLastKnownLocation());
    }
  }
;
  AgentRule rule4=new AgentRule(AgentType.SCOUT,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      if (target != null)       agent.attack(target);
    }
  }
;
  AgentRule rule5=new AgentRule(AgentType.ASSASSIN,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      List<Player> tmpPlayers=new ArrayList<Player>(players);
      for (      Player p : tmpPlayers) {
        if (agent.canSee(p)) {
          target=p;
          break;
        }
      }
      if (target != null)       agent.attack(target);
    }
  }
;
  aiRules.add(rule);
  aiRules.add(rule2);
  aiRules.add(rule3);
  aiRules.add(rule4);
  aiRules.add(rule5);
  new Thread(new ServerLoop()).start();
}","public GameServer(){
  try {
    server=new UDPServer(55555,new ClientQueryParser());
  }
 catch (  SocketException e) {
    e.printStackTrace();
  }
  chests.add(new Chest(80,80,1000,WeaponFactory.getWeaponById(""String_Node_Str""),WeaponFactory.getWeaponById(""String_Node_Str"")));
  chests.add(new Chest(0,80,2033,ArmorFactory.getArmorById(""String_Node_Str""),ArmorFactory.getArmorById(""String_Node_Str"")));
  spawnEnemy(new Enemy(""String_Node_Str"",""String_Node_Str"",EnemyType.NORMAL,new AgentBehaviour(AgentType.GUARD,chests.get(0)),Element.NEUTRAL,5,640,160));
  spawnEnemy(new Enemy(""String_Node_Str"",""String_Node_Str"",EnemyType.NORMAL,new AgentBehaviour(AgentType.SCOUT,null),Element.NEUTRAL,5,640,640));
  spawnEnemy(new Enemy(""String_Node_Str"",""String_Node_Str"",EnemyType.NORMAL,new AgentBehaviour(AgentType.SCOUT,null),Element.NEUTRAL,5,1280,1200));
  spawnEnemy(new Enemy(""String_Node_Str"",""String_Node_Str"",EnemyType.NORMAL,new AgentBehaviour(AgentType.ASSASSIN,null),Element.NEUTRAL,5,720,720));
  AgentRule rule=new AgentRule(AgentType.GUARD,AgentGoal.GUARD_CHEST){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      if (target != null)       agent.patrol(target);
    }
  }
;
  AgentRule rule2=new AgentRule(AgentType.GUARD,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      List<Player> tmpPlayers=new ArrayList<Player>(players);
      for (      Player p : tmpPlayers) {
        if (agent.canSee(p)) {
          target=p;
          break;
        }
      }
      if (target != null)       agent.attack(target);
    }
  }
;
  AgentRule rule3=new AgentRule(AgentType.SCOUT,AgentGoal.FIND_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      agent.search(getLastKnownLocation());
    }
  }
;
  AgentRule rule4=new AgentRule(AgentType.SCOUT,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      if (target != null)       agent.attack(target);
    }
  }
;
  AgentRule rule5=new AgentRule(AgentType.ASSASSIN,AgentGoal.KILL_PLAYER){
    @Override public void execute(    EnemyAgent agent,    AgentGoalTarget target){
      List<Player> tmpPlayers=new ArrayList<Player>(players);
      for (      Player p : tmpPlayers) {
        if (agent.canSee(p)) {
          target=p;
          break;
        }
      }
      if (target != null)       agent.attack(target);
    }
  }
;
  aiRules.add(rule);
  aiRules.add(rule2);
  aiRules.add(rule3);
  aiRules.add(rule4);
  aiRules.add(rule5);
  new Thread(new ServerLoop()).start();
}",0.9840848806366048
24650,"/** 
 * Runs on UI thread Invoked when button is pressed
 * @param event
 */
public void processLogin(ActionEvent event){
  login.setDisable(true);
  showProgressBar(true);
  new Thread(new LoginTask()).start();
}","/** 
 * Runs on UI thread Invoked when button is pressed
 * @param event
 */
public void processLogin(ActionEvent event){
  enableButton(false);
  showProgressBar(true);
  new Thread(new LoginTask()).start();
}",0.9314420803782506
24651,"/** 
 * Translates any HTML-special characters (like quote, ampersand, etc.) into the corresponding code (like &amp;quot;)
 * @param s The string to transform
 */
public static String makeHtmlString(String s,boolean keepTags){
  if (s == null)   return ""String_Node_Str"";
  StringBuffer buf=new StringBuffer();
  boolean inTag=false;
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (keepTags && !inTag && c == '<') {
      inTag=true;
      buf.append(c);
      continue;
    }
    if (keepTags && inTag && c == '>') {
      inTag=false;
      buf.append(c);
      continue;
    }
    if (inTag) {
      buf.append(c);
      continue;
    }
    if (c == '&') {
      int j;
      for (j=i + 1; j < s.length(); j++) {
        if (!Character.isLetterOrDigit(s.charAt(j)))         break;
      }
      if (j < s.length() && s.charAt(j) == ';') {
        while (i <= j)         buf.append(s.charAt(i++));
        i--;
        continue;
      }
    }
    if (c >= 0 && c <= 31 && c != 9 && c != 11 && c != 13)     continue;
switch (c) {
case '<':
      buf.append(""String_Node_Str"");
    break;
case '>':
  buf.append(""String_Node_Str"");
break;
case '&':
buf.append(""String_Node_Str"");
break;
case '\'':
buf.append(""String_Node_Str"");
break;
case '\""':
buf.append(""String_Node_Str"");
break;
case '\n':
buf.append(""String_Node_Str"");
break;
case 128:
buf.append(""String_Node_Str"");
break;
case 129:
buf.append(""String_Node_Str"");
break;
case 130:
buf.append(""String_Node_Str"");
break;
case 131:
buf.append(""String_Node_Str"");
break;
case 132:
buf.append(""String_Node_Str"");
break;
case 133:
buf.append(""String_Node_Str"");
break;
case 134:
buf.append(""String_Node_Str"");
break;
case 135:
buf.append(""String_Node_Str"");
break;
case 136:
buf.append(""String_Node_Str"");
break;
case 137:
buf.append(""String_Node_Str"");
break;
case 138:
buf.append(""String_Node_Str"");
break;
case 139:
buf.append(""String_Node_Str"");
break;
case 140:
buf.append(""String_Node_Str"");
break;
case 141:
buf.append(""String_Node_Str"");
break;
case 142:
buf.append(""String_Node_Str"");
break;
case 143:
buf.append(""String_Node_Str"");
break;
case 144:
buf.append(""String_Node_Str"");
break;
case 145:
buf.append(""String_Node_Str"");
break;
case 146:
buf.append(""String_Node_Str"");
break;
case 147:
buf.append(""String_Node_Str"");
break;
case 148:
buf.append(""String_Node_Str"");
break;
case 149:
buf.append(""String_Node_Str"");
break;
case 150:
buf.append(""String_Node_Str"");
break;
case 151:
buf.append(""String_Node_Str"");
break;
case 152:
buf.append(""String_Node_Str"");
break;
case 153:
buf.append(""String_Node_Str"");
break;
case 154:
buf.append(""String_Node_Str"");
break;
case 155:
buf.append(""String_Node_Str"");
break;
case 156:
buf.append(""String_Node_Str"");
break;
case 157:
buf.append(""String_Node_Str"");
break;
case 158:
buf.append(""String_Node_Str"");
break;
case 159:
buf.append(""String_Node_Str"");
break;
default :
buf.append(c);
break;
}
}
return buf.toString();
}","/** 
 * Translates any HTML-special characters (like quote, ampersand, etc.) into the corresponding code (like &amp;quot;)
 * @param s The string to transform
 */
public static String makeHtmlString(String s,boolean keepTags){
  if (s == null)   return ""String_Node_Str"";
  StringBuffer buf=new StringBuffer();
  boolean inTag=false;
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (keepTags && !inTag && c == '<') {
      inTag=true;
      buf.append(c);
      continue;
    }
    if (keepTags && inTag && c == '>') {
      inTag=false;
      buf.append(c);
      continue;
    }
    if (inTag) {
      buf.append(c);
      continue;
    }
    if (keepTags && c == '&') {
      int j;
      for (j=i + 1; j < s.length(); j++) {
        if (!Character.isLetterOrDigit(s.charAt(j)))         break;
      }
      if (j < s.length() && s.charAt(j) == ';') {
        while (i <= j)         buf.append(s.charAt(i++));
        i--;
        continue;
      }
    }
    if (c >= 0 && c <= 31 && c != 9 && c != 11 && c != 13)     continue;
switch (c) {
case '<':
      buf.append(""String_Node_Str"");
    break;
case '>':
  buf.append(""String_Node_Str"");
break;
case '&':
buf.append(""String_Node_Str"");
break;
case '\'':
buf.append(""String_Node_Str"");
break;
case '\""':
buf.append(""String_Node_Str"");
break;
case '\n':
buf.append(""String_Node_Str"");
break;
case 128:
buf.append(""String_Node_Str"");
break;
case 129:
buf.append(""String_Node_Str"");
break;
case 130:
buf.append(""String_Node_Str"");
break;
case 131:
buf.append(""String_Node_Str"");
break;
case 132:
buf.append(""String_Node_Str"");
break;
case 133:
buf.append(""String_Node_Str"");
break;
case 134:
buf.append(""String_Node_Str"");
break;
case 135:
buf.append(""String_Node_Str"");
break;
case 136:
buf.append(""String_Node_Str"");
break;
case 137:
buf.append(""String_Node_Str"");
break;
case 138:
buf.append(""String_Node_Str"");
break;
case 139:
buf.append(""String_Node_Str"");
break;
case 140:
buf.append(""String_Node_Str"");
break;
case 141:
buf.append(""String_Node_Str"");
break;
case 142:
buf.append(""String_Node_Str"");
break;
case 143:
buf.append(""String_Node_Str"");
break;
case 144:
buf.append(""String_Node_Str"");
break;
case 145:
buf.append(""String_Node_Str"");
break;
case 146:
buf.append(""String_Node_Str"");
break;
case 147:
buf.append(""String_Node_Str"");
break;
case 148:
buf.append(""String_Node_Str"");
break;
case 149:
buf.append(""String_Node_Str"");
break;
case 150:
buf.append(""String_Node_Str"");
break;
case 151:
buf.append(""String_Node_Str"");
break;
case 152:
buf.append(""String_Node_Str"");
break;
case 153:
buf.append(""String_Node_Str"");
break;
case 154:
buf.append(""String_Node_Str"");
break;
case 155:
buf.append(""String_Node_Str"");
break;
case 156:
buf.append(""String_Node_Str"");
break;
case 157:
buf.append(""String_Node_Str"");
break;
case 158:
buf.append(""String_Node_Str"");
break;
case 159:
buf.append(""String_Node_Str"");
break;
default :
buf.append(c);
break;
}
}
return buf.toString();
}",0.9979722879351132
24652,"public void close() throws IOException {
  if (realStore != null)   realStore.close();
  if (tmpPath != null) {
    if (!tmpPath.renameTo(finalPath)) {
      finalPath.delete();
      if (!tmpPath.renameTo(finalPath))       throw new IOException(""String_Node_Str"" + finalPath);
    }
  }
  realStore=null;
  finalPath=tmpPath=null;
}","public void close() throws IOException {
  if (realStore != null)   realStore.close();
  if (tmpPath != null && tmpPath.canRead()) {
    if (!tmpPath.renameTo(finalPath))     throw new IOException(""String_Node_Str"" + finalPath);
  }
  realStore=null;
  finalPath=tmpPath=null;
}",0.7037643207855974
24653,"/** 
 * Do the work of joining the FOP output and a PDF together. This involves several steps: 1. Based on parameters specified in the PipeFOP command, determine how the pages will overlap. 2. Merge bookmarks and metadata 3. Output the pages  
 */
private void mergePdf(XPathContext context,File origPdfData,File fileToAppend,MergeMode mergeMode,MergeAt mergeAt,OutputStream outStream) throws IOException, DocumentException, BadPdfFormatException, XPathException {
  RandomAccessFileOrArray[] randFiles=new RandomAccessFileOrArray[2];
  PdfReader[] readers=new PdfReader[2];
  HashMap<String,String>[] infos=new HashMap[2];
  int[] nInPages=new int[2];
  int[] pageOffsets=new int[2];
  int nOutPages=0;
  randFiles[0]=(origPdfData.length() > 1024 * 1024) ? new BufferedRandomAccessFile(origPdfData.toString()) : new RandomAccessFileOrArray(origPdfData.toString());
  randFiles[1]=(fileToAppend.length() > 1024 * 1024) ? new BufferedRandomAccessFile(fileToAppend.toString()) : new RandomAccessFileOrArray(fileToAppend.toString());
  readers[0]=new PdfReader(randFiles[0],null);
  readers[1]=new PdfReader(randFiles[1],null);
  for (int i=0; i < 2; i++) {
    readers[i].consolidateNamedDestinations();
    infos[i]=readers[i].getInfo();
    nInPages[i]=readers[i].getNumberOfPages();
  }
switch (mergeMode) {
case SEQUENTIAL:
    nOutPages=nInPages[0] + nInPages[1];
switch (mergeAt) {
case START:
    pageOffsets[0]=nInPages[1];
  pageOffsets[1]=0;
break;
case END:
pageOffsets[0]=0;
pageOffsets[1]=nInPages[0];
break;
}
break;
case OVERLAY:
case UNDERLAY:
nOutPages=Math.max(nInPages[0],nInPages[1]);
pageOffsets[0]=0;
if (mergeAt == MergeAt.END) pageOffsets[1]=Math.max(0,nInPages[0] - nInPages[1]);
 else pageOffsets[1]=0;
break;
}
Document pdfDocument=new Document(readers[0].getPageSizeWithRotation(1));
PdfCopy pdfWriter=new PdfCopy(pdfDocument,outStream);
pdfDocument.open();
mergeMetadata(infos,pdfWriter,context);
ArrayList allBookmarks=new ArrayList();
for (int i=0; i < 2; i++) {
List bookmarks=SimpleBookmark.getBookmark(readers[i]);
if (bookmarks != null) {
if (pageOffsets[i] != 0) SimpleBookmark.shiftPageNumbers(bookmarks,pageOffsets[i],null);
allBookmarks.addAll(bookmarks);
}
}
PageInfo[] basePages=new PageInfo[nOutPages];
PageInfo[] mergePages=new PageInfo[nOutPages];
for (int i=0; i < nOutPages; i++) {
for (int j=0; j < 2; j++) {
int inPageNum=i - pageOffsets[j];
if (inPageNum < 0 || inPageNum >= nInPages[j]) continue;
PageInfo info=new PageInfo();
info.reader=readers[j];
info.pageNum=inPageNum + 1;
if (basePages[i] == null) basePages[i]=info;
 else {
info.impPage=pdfWriter.getImportedPage(info.reader,info.pageNum);
info.image=Image.getInstance(info.impPage);
mergePages[i]=info;
}
}
}
for (int i=0; i < nOutPages; i++) {
PageInfo basePage=basePages[i];
PageInfo mergePage=mergePages[i];
boolean over=mergeMode == MergeMode.OVERLAY;
basePage.impPage=pdfWriter.getImportedPage(basePage.reader,basePage.pageNum);
if (mergePage != null) {
PageStamp ps=pdfWriter.createPageStamp(basePage.impPage);
PdfContentByte contentBuf=null;
if (over) contentBuf=ps.getOverContent();
 else contentBuf=ps.getUnderContent();
Image img=Image.getInstance(mergePage.image);
int rotation=mergePage.reader.getPageRotation(mergePage.pageNum);
float w=basePage.impPage.getWidth();
float h=basePage.impPage.getHeight();
switch (rotation) {
case 0:
contentBuf.addImage(img,w,0,0,h,0,0);
break;
case 90:
contentBuf.addImage(img,0,-h,w,0,0,h);
break;
case 180:
contentBuf.addImage(img,-w,0,0,-h,w,h);
break;
case 270:
contentBuf.addImage(img,0,h,-w,0,w,0);
break;
}
ps.alterContents();
}
pdfWriter.addPage(basePage.impPage);
}
if (!allBookmarks.isEmpty()) pdfWriter.setOutlines(allBookmarks);
pdfDocument.close();
}","/** 
 * Do the work of joining the FOP output and a PDF together. This involves several steps: 1. Based on parameters specified in the PipeFOP command, determine how the pages will overlap. 2. Merge bookmarks and metadata 3. Output the pages  
 */
private void mergePdf(XPathContext context,File origPdfData,File fileToAppend,MergeMode mergeMode,MergeAt mergeAt,OutputStream outStream) throws IOException, DocumentException, BadPdfFormatException, XPathException {
  RandomAccessFileOrArray[] randFiles=new RandomAccessFileOrArray[2];
  PdfReader[] readers=new PdfReader[2];
  HashMap<String,String>[] infos=new HashMap[2];
  int[] nInPages=new int[2];
  int[] pageOffsets=new int[2];
  int nOutPages=0;
  try {
    randFiles[0]=(origPdfData.length() > 1024 * 1024) ? new BufferedRandomAccessFile(origPdfData.toString()) : new RandomAccessFileOrArray(origPdfData.toString());
    randFiles[1]=(fileToAppend.length() > 1024 * 1024) ? new BufferedRandomAccessFile(fileToAppend.toString()) : new RandomAccessFileOrArray(fileToAppend.toString());
    readers[0]=new PdfReader(randFiles[0],null);
    readers[1]=new PdfReader(randFiles[1],null);
    for (int i=0; i < 2; i++) {
      readers[i].consolidateNamedDestinations();
      infos[i]=readers[i].getInfo();
      nInPages[i]=readers[i].getNumberOfPages();
    }
switch (mergeMode) {
case SEQUENTIAL:
      nOutPages=nInPages[0] + nInPages[1];
switch (mergeAt) {
case START:
      pageOffsets[0]=nInPages[1];
    pageOffsets[1]=0;
  break;
case END:
pageOffsets[0]=0;
pageOffsets[1]=nInPages[0];
break;
}
break;
case OVERLAY:
case UNDERLAY:
nOutPages=Math.max(nInPages[0],nInPages[1]);
pageOffsets[0]=0;
if (mergeAt == MergeAt.END) pageOffsets[1]=Math.max(0,nInPages[0] - nInPages[1]);
 else pageOffsets[1]=0;
break;
}
Document pdfDocument=new Document(readers[0].getPageSizeWithRotation(1));
PdfCopy pdfWriter=new PdfCopy(pdfDocument,outStream);
pdfDocument.open();
mergeMetadata(infos,pdfWriter,context);
ArrayList allBookmarks=new ArrayList();
for (int i=0; i < 2; i++) {
List bookmarks=SimpleBookmark.getBookmark(readers[i]);
if (bookmarks != null) {
if (pageOffsets[i] != 0) SimpleBookmark.shiftPageNumbers(bookmarks,pageOffsets[i],null);
allBookmarks.addAll(bookmarks);
}
}
PageInfo[] basePages=new PageInfo[nOutPages];
PageInfo[] mergePages=new PageInfo[nOutPages];
for (int i=0; i < nOutPages; i++) {
for (int j=0; j < 2; j++) {
int inPageNum=i - pageOffsets[j];
if (inPageNum < 0 || inPageNum >= nInPages[j]) continue;
PageInfo info=new PageInfo();
info.reader=readers[j];
info.pageNum=inPageNum + 1;
if (basePages[i] == null) basePages[i]=info;
 else {
info.impPage=pdfWriter.getImportedPage(info.reader,info.pageNum);
info.image=Image.getInstance(info.impPage);
mergePages[i]=info;
}
}
}
for (int i=0; i < nOutPages; i++) {
PageInfo basePage=basePages[i];
PageInfo mergePage=mergePages[i];
boolean over=mergeMode == MergeMode.OVERLAY;
basePage.impPage=pdfWriter.getImportedPage(basePage.reader,basePage.pageNum);
if (mergePage != null) {
PageStamp ps=pdfWriter.createPageStamp(basePage.impPage);
PdfContentByte contentBuf=null;
if (over) contentBuf=ps.getOverContent();
 else contentBuf=ps.getUnderContent();
Image img=Image.getInstance(mergePage.image);
int rotation=mergePage.reader.getPageRotation(mergePage.pageNum);
float w=basePage.impPage.getWidth();
float h=basePage.impPage.getHeight();
switch (rotation) {
case 0:
contentBuf.addImage(img,w,0,0,h,0,0);
break;
case 90:
contentBuf.addImage(img,0,-h,w,0,0,h);
break;
case 180:
contentBuf.addImage(img,-w,0,0,-h,w,h);
break;
case 270:
contentBuf.addImage(img,0,h,-w,0,w,0);
break;
}
ps.alterContents();
}
pdfWriter.addPage(basePage.impPage);
}
if (!allBookmarks.isEmpty()) pdfWriter.setOutlines(allBookmarks);
pdfDocument.close();
}
  finally {
if (randFiles[0] != null) try {
randFiles[0].close();
}
 catch (Exception e) {
}
if (randFiles[1] != null) try {
randFiles[1].close();
}
 catch (Exception e) {
}
}
}",0.9722658294086866
24654,"/** 
 * Build a string representing any non-XTF attributes in the given attribute list. This will be a series of name=""value"" pairs, separated by spaces. If there are no non-XTF attributes, empty string is returned. <br><br>
 */
private String processMetaAttribs(Attributes atts){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < atts.getLength(); i++) {
    String attrUri=atts.getURI(i);
    if (attrUri.equals(xtfUri))     continue;
    if (buf.length() > 0)     buf.append(' ');
    String name=atts.getLocalName(i);
    String value=atts.getValue(i);
    buf.append(name + ""String_Node_Str"" + value+ ""String_Node_Str"");
  }
  return buf.toString();
}","/** 
 * Build a string representing any non-XTF attributes in the given attribute list. This will be a series of name=""value"" pairs, separated by spaces. If there are no non-XTF attributes, empty string is returned. <br><br>
 */
private String processMetaAttribs(Attributes atts){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < atts.getLength(); i++) {
    String attrUri=atts.getURI(i);
    if (attrUri.equals(xtfUri))     continue;
    if (buf.length() > 0)     buf.append(' ');
    String name=atts.getLocalName(i);
    String value=atts.getValue(i);
    buf.append(name + ""String_Node_Str"" + mapXMLChars(value)+ ""String_Node_Str"");
  }
  return buf.toString();
}",0.9903201787043932
24655,"/** 
 * Process any accumulated source text, writing indexing completed chunks to the Lucene database as necessary. <br><br>
 * @throws SAXException  Any exceptions encountered during the processing ofthe accumulated chunks, or writing them to the Lucene index. <br><br>
 * @.notes This method processes any accumulated text as follows: <blockquote dir=ltr style=""MARGIN-RIGHT: 0px""> 1. First the accumulated text is ""blurbified."" See the {@link XMLTextProcessor#blurbify(StringBuffer,boolean) blurbify()}method for more information about what this entails. <br><br> 2. Next, a chunk is assembled a word at a time from the accumulated text until the required chunk size (in words) is reached. The completed chunk is then added to the Lucene database. <br><br> 3. Step two is repeated until no more complete chunks can be assembled from the accumulated text. (Any partial chunk text is saved until the next call to this method.) </blockquote>
 */
public void flushCharacters() throws SAXException {
  char[] ch=charBuf;
  int length=charBufPos;
  int start=0;
  charBufPos=0;
  int i=0;
  if (indexInfo.stripWhitespace) {
    for (i=0; i < length; i++)     if (!Character.isWhitespace(charBuf[i]))     break;
  }
  if (i == length)   return;
  if (lazyHandler != null)   lazyHandler.characters(ch,start,length);
  incrementNode();
  if (inMeta > 0) {
    String tmp=new String(ch,start,length);
    if (tmp.indexOf('&') >= 0)     tmp=tmp.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (tmp.indexOf('<') >= 0)     tmp=tmp.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (tmp.indexOf('>') >= 0)     tmp=tmp.replaceAll(""String_Node_Str"",""String_Node_Str"");
    metaBuf.append(tmp);
    return;
  }
  if (section.indexFlag() == SectionInfo.noIndex)   return;
  blurbedText.setLength(0);
  blurbedText.append(ch,start,length);
  blurbify(blurbedText,true);
  insertVirtualWords(blurbedText);
  if (blurbedText.length() <= 0)   return;
  String blurbedTextStr=blurbedText.toString();
  FastStringReader reader=new FastStringReader(blurbedTextStr);
  TokenStream result=new FastTokenizer(reader);
  int punctStart=0;
  int accumTextLen=trimAccumText(true);
  boolean mustGetNextWord=true;
  Token word=null;
  for (; ; ) {
    try {
      if (mustGetNextWord)       word=result.next();
      if (word == null)       break;
      mustGetNextWord=true;
      if (chunkStartNode < 0) {
        chunkStartNode=curNode;
        chunkWordOffset=nodeWordCount;
      }
      int wordStart=word.startOffset();
      int wordEnd=word.endOffset();
      int punctLen=wordStart - punctStart;
      if (chunkWordCount == chunkWordOvlpStart) {
        nextChunkStartIdx=accumTextLen + punctLen;
        nextChunkStartNode=curNode;
        nextChunkWordOffset=nodeWordCount;
        nextChunkWordCount=0;
      }
      accumText.append(blurbedTextStr.substring(punctStart,wordEnd));
      punctStart=wordEnd;
      chunkWordCount++;
      nextChunkWordCount++;
      if (!word.termText().equals(Constants.VIRTUAL_WORD)) {
        nodeWordCount++;
        docWordCount++;
      }
      if (chunkWordCount == chunkWordSize) {
        word=result.next();
        mustGetNextWord=false;
        int punctEnd;
        if (word == null)         punctEnd=blurbedText.length();
 else         punctEnd=word.startOffset();
        accumText.append(blurbedTextStr.substring(punctStart,punctEnd));
        trimAccumText(false);
        indexText(section.peek());
        punctStart=punctEnd;
        chunkStartNode=nextChunkStartNode;
        chunkWordOffset=nextChunkWordOffset;
        chunkWordCount=nextChunkWordCount;
        accumText.delete(0,nextChunkStartIdx);
        accumTextLen=trimAccumText(true);
        nextChunkStartIdx=0;
        nextChunkWordCount=0;
      }
 else       accumTextLen=trimAccumText(false);
    }
 catch (    Exception e) {
      Trace.tab();
      Trace.error(""String_Node_Str"" + e);
      Trace.untab();
      throw new SAXException(e);
    }
catch (    Throwable t) {
      Trace.tab();
      Trace.error(""String_Node_Str"" + t);
      Trace.untab();
      throw new RuntimeException(t);
    }
  }
  accumText.append(blurbedTextStr.substring(punctStart,blurbedTextStr.length()));
  trimAccumText(false);
}","/** 
 * Process any accumulated source text, writing indexing completed chunks to the Lucene database as necessary. <br><br>
 * @throws SAXException  Any exceptions encountered during the processing ofthe accumulated chunks, or writing them to the Lucene index. <br><br>
 * @.notes This method processes any accumulated text as follows: <blockquote dir=ltr style=""MARGIN-RIGHT: 0px""> 1. First the accumulated text is ""blurbified."" See the {@link XMLTextProcessor#blurbify(StringBuffer,boolean) blurbify()}method for more information about what this entails. <br><br> 2. Next, a chunk is assembled a word at a time from the accumulated text until the required chunk size (in words) is reached. The completed chunk is then added to the Lucene database. <br><br> 3. Step two is repeated until no more complete chunks can be assembled from the accumulated text. (Any partial chunk text is saved until the next call to this method.) </blockquote>
 */
public void flushCharacters() throws SAXException {
  char[] ch=charBuf;
  int length=charBufPos;
  int start=0;
  charBufPos=0;
  int i=0;
  if (indexInfo.stripWhitespace) {
    for (i=0; i < length; i++)     if (!Character.isWhitespace(charBuf[i]))     break;
  }
  if (i == length)   return;
  if (lazyHandler != null)   lazyHandler.characters(ch,start,length);
  incrementNode();
  if (inMeta > 0) {
    String tmp=new String(ch,start,length);
    tmp=mapXMLChars(tmp);
    metaBuf.append(tmp);
    return;
  }
  if (section.indexFlag() == SectionInfo.noIndex)   return;
  blurbedText.setLength(0);
  blurbedText.append(ch,start,length);
  blurbify(blurbedText,true);
  insertVirtualWords(blurbedText);
  if (blurbedText.length() <= 0)   return;
  String blurbedTextStr=blurbedText.toString();
  FastStringReader reader=new FastStringReader(blurbedTextStr);
  TokenStream result=new FastTokenizer(reader);
  int punctStart=0;
  int accumTextLen=trimAccumText(true);
  boolean mustGetNextWord=true;
  Token word=null;
  for (; ; ) {
    try {
      if (mustGetNextWord)       word=result.next();
      if (word == null)       break;
      mustGetNextWord=true;
      if (chunkStartNode < 0) {
        chunkStartNode=curNode;
        chunkWordOffset=nodeWordCount;
      }
      int wordStart=word.startOffset();
      int wordEnd=word.endOffset();
      int punctLen=wordStart - punctStart;
      if (chunkWordCount == chunkWordOvlpStart) {
        nextChunkStartIdx=accumTextLen + punctLen;
        nextChunkStartNode=curNode;
        nextChunkWordOffset=nodeWordCount;
        nextChunkWordCount=0;
      }
      accumText.append(blurbedTextStr.substring(punctStart,wordEnd));
      punctStart=wordEnd;
      chunkWordCount++;
      nextChunkWordCount++;
      if (!word.termText().equals(Constants.VIRTUAL_WORD)) {
        nodeWordCount++;
        docWordCount++;
      }
      if (chunkWordCount == chunkWordSize) {
        word=result.next();
        mustGetNextWord=false;
        int punctEnd;
        if (word == null)         punctEnd=blurbedText.length();
 else         punctEnd=word.startOffset();
        accumText.append(blurbedTextStr.substring(punctStart,punctEnd));
        trimAccumText(false);
        indexText(section.peek());
        punctStart=punctEnd;
        chunkStartNode=nextChunkStartNode;
        chunkWordOffset=nextChunkWordOffset;
        chunkWordCount=nextChunkWordCount;
        accumText.delete(0,nextChunkStartIdx);
        accumTextLen=trimAccumText(true);
        nextChunkStartIdx=0;
        nextChunkWordCount=0;
      }
 else       accumTextLen=trimAccumText(false);
    }
 catch (    Exception e) {
      Trace.tab();
      Trace.error(""String_Node_Str"" + e);
      Trace.untab();
      throw new SAXException(e);
    }
catch (    Throwable t) {
      Trace.tab();
      Trace.error(""String_Node_Str"" + t);
      Trace.untab();
      throw new RuntimeException(t);
    }
  }
  accumText.append(blurbedTextStr.substring(punctStart,blurbedTextStr.length()));
  trimAccumText(false);
}",0.9648780487804878
24656,"@Override public int read(byte[] b,int off,int len) throws IOException {
  int origLen=len;
  if (havePrevByte && len > 0) {
    havePrevByte=false;
    b[0]=prevByte;
    ++off;
    --len;
  }
  int toCopy=Math.min(bufferLength - bufferPos,len);
  if (toCopy > 0) {
    System.arraycopy(buffer,bufferPos,b,off,toCopy);
    bufferPos+=toCopy;
    off+=toCopy;
    len-=toCopy;
  }
  if (len > 0) {
    int nRead=baseFile.read(b,off,len);
    off+=nRead;
    len-=nRead;
  }
  return origLen - len;
}","@Override public int read(byte[] b,int off,int len) throws IOException {
  int origLen=len;
  if (havePrevByte && len > 0) {
    havePrevByte=false;
    b[off]=prevByte;
    ++off;
    --len;
  }
  int toCopy=Math.min(bufferLength - bufferPos,len);
  if (toCopy > 0) {
    System.arraycopy(buffer,bufferPos,b,off,toCopy);
    bufferPos+=toCopy;
    off+=toCopy;
    len-=toCopy;
  }
  if (len > 0) {
    int nRead=baseFile.read(b,off,len);
    off+=nRead;
    len-=nRead;
  }
  return origLen - len;
}",0.996
24657,"/** 
 * Adds a field to the on-disk list of tokenized fields for an index. Exceptions are handled internally and thrown as RuntimeException.
 */
private void addToTokenizedFieldsFile(String field){
  try {
    File tokFieldsFile=new File(Path.normalizePath(indexPath + ""String_Node_Str""));
    FileWriter writer=new FileWriter(tokFieldsFile,true);
    writer.append(field + ""String_Node_Str"");
    writer.close();
  }
 catch (  Throwable t) {
    Trace.tab();
    Trace.error(""String_Node_Str"" + t);
    Trace.untab();
    if (t instanceof RuntimeException)     throw (RuntimeException)t;
 else     throw new RuntimeException(t);
  }
}","/** 
 * Adds a field to the on-disk list of tokenized fields for an index. Exceptions are handled internally and thrown as RuntimeException.
 */
private void addToTokenizedFieldsFile(String field){
  try {
    String path=Path.normalizePath(indexPath) + ""String_Node_Str"";
    File oldFile=new File(path);
    File tmpFile=new File(path + ""String_Node_Str"");
    BufferedWriter writer=new BufferedWriter(new FileWriter(tmpFile));
    try {
      if (oldFile.canRead()) {
        BufferedReader reader=new BufferedReader(new FileReader(oldFile));
        try {
          while (true) {
            String line=reader.readLine();
            if (line == null)             break;
            writer.write(line + ""String_Node_Str"");
          }
        }
  finally {
          reader.close();
        }
      }
      writer.write(field + ""String_Node_Str"");
    }
  finally {
      writer.close();
    }
    tmpFile.renameTo(oldFile);
  }
 catch (  Throwable t) {
    Trace.tab();
    Trace.error(""String_Node_Str"" + t);
    Trace.untab();
    if (t instanceof RuntimeException)     throw (RuntimeException)t;
 else     throw new RuntimeException(t);
  }
}",0.5114717403469502
24658,"/** 
 * Do the work of joining the FOP output and a PDF together. This involves several steps: 1. Based on parameters specified in the PipeFOP command, determine how the pages will overlap. 2. Merge bookmarks and metadata 3. Output the pages  
 */
private void mergePdf(XPathContext context,byte[] origPdfData,File fileToAppend,MergeMode mergeMode,MergeAt mergeAt,OutputStream outStream) throws IOException, DocumentException, BadPdfFormatException, XPathException {
}","/** 
 * Do the work of joining the FOP output and a PDF together. This involves several steps: 1. Based on parameters specified in the PipeFOP command, determine how the pages will overlap. 2. Merge bookmarks and metadata 3. Output the pages  
 */
private void mergePdf(XPathContext context,byte[] origPdfData,File fileToAppend,MergeMode mergeMode,MergeAt mergeAt,OutputStream outStream) throws IOException, DocumentException, BadPdfFormatException, XPathException {
  PdfReader[] readers=new PdfReader[2];
  HashMap<String,String>[] infos=new HashMap[2];
  int[] nInPages=new int[2];
  int[] pageOffsets=new int[2];
  int nOutPages=0;
  readers[0]=new PdfReader(origPdfData);
  readers[1]=new PdfReader(new BufferedInputStream(new FileInputStream(fileToAppend)));
  for (int i=0; i < 2; i++) {
    readers[i].consolidateNamedDestinations();
    infos[i]=readers[i].getInfo();
    nInPages[i]=readers[i].getNumberOfPages();
  }
switch (mergeMode) {
case SEQUENTIAL:
    nOutPages=nInPages[0] + nInPages[1];
switch (mergeAt) {
case START:
    pageOffsets[0]=nInPages[1];
  pageOffsets[1]=0;
break;
case END:
pageOffsets[0]=0;
pageOffsets[1]=nInPages[0];
break;
}
break;
case OVERLAY:
case UNDERLAY:
nOutPages=Math.max(nInPages[0],nInPages[1]);
pageOffsets[0]=0;
if (mergeAt == MergeAt.END) pageOffsets[1]=Math.max(0,nInPages[0] - nInPages[1]);
 else pageOffsets[1]=0;
break;
}
Document pdfDocument=new Document(readers[0].getPageSizeWithRotation(1));
PdfCopy pdfWriter=new PdfCopy(pdfDocument,outStream);
pdfDocument.open();
mergeMetadata(infos,pdfWriter,context);
ArrayList allBookmarks=new ArrayList();
for (int i=0; i < 2; i++) {
List bookmarks=SimpleBookmark.getBookmark(readers[i]);
if (bookmarks != null) {
if (pageOffsets[i] != 0) SimpleBookmark.shiftPageNumbers(bookmarks,pageOffsets[i],null);
allBookmarks.addAll(bookmarks);
}
}
PageInfo[] basePages=new PageInfo[nOutPages];
PageInfo[] mergePages=new PageInfo[nOutPages];
for (int i=0; i < nOutPages; i++) {
for (int j=0; j < 2; j++) {
int inPageNum=i - pageOffsets[j];
if (inPageNum < 0 || inPageNum >= nInPages[j]) continue;
PageInfo info=new PageInfo();
info.reader=readers[j];
info.pageNum=inPageNum + 1;
if (basePages[i] == null) basePages[i]=info;
 else {
info.impPage=pdfWriter.getImportedPage(info.reader,info.pageNum);
info.image=Image.getInstance(info.impPage);
mergePages[i]=info;
}
}
}
for (int i=0; i < nOutPages; i++) {
PageInfo basePage=basePages[i];
PageInfo mergePage=mergePages[i];
boolean over=mergeMode == MergeMode.OVERLAY;
basePage.impPage=pdfWriter.getImportedPage(basePage.reader,basePage.pageNum);
if (mergePage != null) {
PageStamp ps=pdfWriter.createPageStamp(basePage.impPage);
PdfContentByte contentBuf=null;
if (over) contentBuf=ps.getOverContent();
 else contentBuf=ps.getUnderContent();
Image img=Image.getInstance(mergePage.image);
int rotation=mergePage.reader.getPageRotation(mergePage.pageNum);
float w=basePage.impPage.getWidth();
float h=basePage.impPage.getHeight();
switch (rotation) {
case 0:
contentBuf.addImage(img,w,0,0,h,0,0);
break;
case 90:
contentBuf.addImage(img,0,-h,w,0,0,h);
break;
case 180:
contentBuf.addImage(img,-w,0,0,-h,w,h);
break;
case 270:
contentBuf.addImage(img,0,h,-w,0,w,0);
break;
}
ps.alterContents();
}
pdfWriter.addPage(basePage.impPage);
}
if (!allBookmarks.isEmpty()) pdfWriter.setOutlines(allBookmarks);
pdfDocument.close();
}",0.2447698744769874
24659,"/** 
 * Retrieve the next token in the stream. 
 */
public Token next() throws IOException {
  Token t=input.next();
  if (t == null)   return t;
  String term=t.termText();
  String mapped=accentMap.mapWord(term);
  if (mapped == null)   return t;
  Token newToken=new Token(mapped,t.startOffset(),t.endOffset(),t.type());
  newToken.setPositionIncrement(t.getPositionIncrement());
  return newToken;
}","/** 
 * Retrieve the next token in the stream. 
 */
public Token next() throws IOException {
  while (true) {
    Token t=input.next();
    if (t == null)     return t;
    String term=t.termText();
    String mapped=accentMap.mapWord(term);
    if (mapped == null)     return t;
    if (mapped.length() == 0)     continue;
    Token newToken=new Token(mapped,t.startOffset(),t.endOffset(),t.type());
    newToken.setPositionIncrement(t.getPositionIncrement());
    return newToken;
  }
}",0.734006734006734
24660,"/** 
 * Retrieve the next token in the stream. 
 */
public Token next() throws IOException {
  while (true) {
    Token t=input.next();
    if (t == null)     return t;
    String term=t.termText();
    String mapped=accentMap.mapWord(term);
    if (mapped == null)     return t;
    if (mapped.length() == 0)     continue;
    Token newToken=new Token(mapped,t.startOffset(),t.endOffset(),t.type());
    newToken.setPositionIncrement(t.getPositionIncrement());
    return newToken;
  }
}","/** 
 * Retrieve the next token in the stream. 
 */
public Token next() throws IOException {
  int bumpAccum=0;
  while (true) {
    Token t=input.next();
    if (t == null)     return t;
    String term=t.termText();
    String mapped=accentMap.mapWord(term);
    if (mapped == null) {
      if (bumpAccum == 0)       return t;
      mapped=term;
    }
    if (mapped.length() == 0) {
      bumpAccum+=t.getPositionIncrement() - 1;
      continue;
    }
    Token newToken=new Token(mapped,t.startOffset(),t.endOffset(),t.type());
    newToken.setPositionIncrement(t.getPositionIncrement() + bumpAccum);
    return newToken;
  }
}",0.8096514745308311
24661,"/** 
 * Run an rsync command with the standard arguments plus the specified subdirectories and optional extra args.
 * @param src          Directory (or file) to match
 * @param dst          Directory (or file) to modify
 * @param subDirs      Sub-directories to rsync (null for all)
 * @throws IOException If anything goes wrong
 */
public void runRsync(File src,File dst,List<String> subDirs,String[] extraArgs) throws IOException {
  try {
    ArrayList<String> args=new ArrayList(6);
    args.add(""String_Node_Str"");
    args.add(""String_Node_Str"");
    args.add(""String_Node_Str"");
    if (extraArgs != null) {
      for (      String extra : extraArgs)       args.add(extra);
    }
    if (src.isDirectory())     args.add(""String_Node_Str"" + src.getAbsolutePath() + ""String_Node_Str"");
    if (subDirs != null) {
      args.add(""String_Node_Str"");
      for (      String subDir : subDirs)       args.add(src.getAbsolutePath() + ""String_Node_Str"" + subDir);
    }
 else     args.add(src.getAbsolutePath() + (src.isDirectory() ? ""String_Node_Str"" : ""String_Node_Str""));
    args.add(dst.getAbsolutePath() + (dst.isDirectory() ? ""String_Node_Str"" : ""String_Node_Str""));
    String[] argArray=args.toArray(new String[args.size()]);
    ProcessRunner.runAndGrab(argArray,""String_Node_Str"",0);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  CommandFailedException e) {
    throw new IOException(e.getMessage());
  }
}","/** 
 * Run an rsync command with the standard arguments plus the specified subdirectories and optional extra args.
 * @param src          Directory (or file) to match
 * @param dst          Directory (or file) to modify
 * @param subDirs      Sub-directories to rsync (null for all)
 * @throws IOException If anything goes wrong
 */
public void runRsync(File src,File dst,List<String> subDirs,String[] extraArgs) throws IOException {
  try {
    ArrayList<String> args=new ArrayList(6);
    args.add(""String_Node_Str"");
    args.add(""String_Node_Str"");
    args.add(""String_Node_Str"");
    if (extraArgs != null) {
      for (      String extra : extraArgs)       args.add(extra);
    }
    if (src.isDirectory())     args.add(""String_Node_Str"" + src.getAbsolutePath() + ""String_Node_Str"");
    if (subDirs != null) {
      args.add(""String_Node_Str"");
      for (      String subDir : subDirs) {
        if (new File(src.getAbsolutePath(),subDir).canRead())         args.add(src.getAbsolutePath() + ""String_Node_Str"" + subDir);
      }
    }
 else     args.add(src.getAbsolutePath() + (src.isDirectory() ? ""String_Node_Str"" : ""String_Node_Str""));
    args.add(dst.getAbsolutePath() + (dst.isDirectory() ? ""String_Node_Str"" : ""String_Node_Str""));
    String[] argArray=args.toArray(new String[args.size()]);
    ProcessRunner.runAndGrab(argArray,""String_Node_Str"",0);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  CommandFailedException e) {
    throw new IOException(e.getMessage());
  }
}",0.9505347593582888
24662,"private static void dumpFields(IndexReader indexReader,String[] fieldNames,boolean xmlMode,boolean allFieldsMode,Writer out) throws IOException {
  if (xmlMode) {
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
  }
  int maxDoc=indexReader.maxDoc();
  for (int i=0; i < maxDoc; i++) {
    if (indexReader.isDeleted(i))     continue;
    Document doc=indexReader.document(i);
    if (doc.getField(""String_Node_Str"") == null)     continue;
    ArrayList<Field> toPrint=new ArrayList();
    if (allFieldsMode) {
      for (      Field f : (List<Field>)doc.getFields()) {
        if (!f.name().matches(""String_Node_Str""))         toPrint.add(f);
      }
    }
 else {
      for (int j=0; j < fieldNames.length; j++) {
        Field[] got=doc.getFields(fieldNames[j]);
        if (got != null)         toPrint.addAll(Arrays.asList(got));
      }
    }
    if (!toPrint.isEmpty()) {
      if (xmlMode)       dumpXmlRecord(toPrint,out);
 else       dumpDelimitedRecord(toPrint,out);
    }
  }
  if (xmlMode)   out.write(""String_Node_Str"");
}","private static void dumpFields(IndexReader indexReader,String[] fieldNames,boolean xmlMode,boolean allFieldsMode,Writer out) throws IOException {
  if (xmlMode) {
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
  }
  Field[] emptyFields=new Field[fieldNames.length];
  for (int j=0; j < fieldNames.length; j++)   emptyFields[j]=new Field(fieldNames[j],""String_Node_Str"",Field.Store.YES,Field.Index.NO);
  int maxDoc=indexReader.maxDoc();
  for (int i=0; i < maxDoc; i++) {
    if (indexReader.isDeleted(i))     continue;
    Document doc=indexReader.document(i);
    if (doc.getField(""String_Node_Str"") == null)     continue;
    ArrayList<Field> toPrint=new ArrayList();
    if (allFieldsMode) {
      for (      Field f : (List<Field>)doc.getFields()) {
        if (!f.name().matches(""String_Node_Str""))         toPrint.add(f);
      }
    }
 else {
      for (int j=0; j < fieldNames.length; j++) {
        Field[] got=doc.getFields(fieldNames[j]);
        if (got != null)         toPrint.addAll(Arrays.asList(got));
 else         toPrint.add(emptyFields[j]);
      }
    }
    if (!toPrint.isEmpty()) {
      if (xmlMode)       dumpXmlRecord(toPrint,out);
 else       dumpDelimitedRecord(toPrint,out);
    }
  }
  if (xmlMode)   out.write(""String_Node_Str"");
}",0.4796921761436511
24663,"private Entry scanForUpdates(){
synchronized (warmer) {
    for (    Entry ent : warmer.entries.values()) {
      if (ent.exception != null) {
        if (System.currentTimeMillis() - ent.exceptionTime < 5000)         continue;
        ent.exception=null;
      }
      if (ent.newPath.exists() && (ent.pendingPath.exists() || ent.sparePath.exists())) {
        if (ent.pendingPath.exists())         return ent;
      }
 else       if (ent.curSearcher != null) {
        try {
          if (!ent.curSearcher.isUpToDate())           return ent;
        }
 catch (        IOException e) {
          ent.exception=e;
          Trace.error(String.format(""String_Node_Str"",ent.indexPath,e.toString()));
        }
      }
    }
    return null;
  }
}","private Entry scanForUpdates(){
synchronized (warmer) {
    for (    Entry ent : warmer.entries.values()) {
      if (ent.exception != null) {
        if (System.currentTimeMillis() - ent.exceptionTime < 60000)         continue;
        ent.exception=null;
      }
      if (ent.newPath.exists() && (ent.pendingPath.exists() || ent.sparePath.exists())) {
        if (ent.pendingPath.exists())         return ent;
      }
 else       if (ent.curSearcher != null) {
        try {
          if (!ent.curSearcher.isUpToDate())           return ent;
        }
 catch (        IOException e) {
          ent.exception=e;
          ent.exceptionTime=System.currentTimeMillis();
          Trace.error(String.format(""String_Node_Str"",ent.indexPath,e.toString()));
        }
      }
    }
    return null;
  }
}",0.9618122977346278
24664,"private String filter(String in){
  String out=(String)recent.get(in);
  if (out == null) {
    out=stdTermFilter.filter(in);
    String tmp;
    if (accentMap != null) {
      tmp=accentMap.mapWord(out);
      if (tmp != null)       out=tmp;
    }
    tmp=pluralMap.lookup(out);
    if (pluralMap != null) {
      if (tmp != null)       out=tmp;
      recent.put(in,out);
    }
  }
  return out;
}","private String filter(String in){
  String out=(String)recent.get(in);
  if (out == null) {
    out=stdTermFilter.filter(in);
    String tmp;
    if (accentMap != null) {
      tmp=accentMap.mapWord(out);
      if (tmp != null)       out=tmp;
    }
    if (pluralMap != null) {
      tmp=pluralMap.lookup(out);
      if (tmp != null)       out=tmp;
      recent.put(in,out);
    }
  }
  return out;
}",0.8947368421052632
24665,"/** 
 * Construct a word map by reading from an InputStream. If a non-null character map is specified, all entries are filtered through it.
 */
public WordMap(InputStream s,CharMap charMap) throws IOException {
  readFile(new BufferedReader(new InputStreamReader(s)),charMap);
}","/** 
 * Construct a word map by reading from an InputStream. If a non-null character map is specified, all entries are filtered through it.
 */
public WordMap(InputStream s,CharMap charMap) throws IOException {
  readFile(new BufferedReader(new InputStreamReader(s,""String_Node_Str"")),charMap);
}",0.9686411149825784
24666,"/** 
 * Read in the list of fields that are tokenized in this index.
 */
public static LinkedHashSet readTokenizedFields(String indexPath,IndexReader indexReader) throws IOException {
  LinkedHashSet tokenizedFields=new LinkedHashSet();
  File tokFieldsFile=new File(Path.normalizePath(indexPath + ""String_Node_Str""));
  if (tokFieldsFile.canRead()) {
    BufferedReader reader=new BufferedReader(new FileReader(tokFieldsFile));
    String line;
    while ((line=reader.readLine()) != null)     tokenizedFields.add(line);
    reader.close();
  }
  TermEnum tokTerms=indexReader.terms(new Term(""String_Node_Str"",""String_Node_Str""));
  do {
    Term t=tokTerms.term();
    if (t == null)     break;
    if (!t.field().equals(""String_Node_Str""))     break;
    tokenizedFields.add(t.text());
  }
 while (tokTerms.next());
  tokenizedFields.add(""String_Node_Str"");
  return tokenizedFields;
}","/** 
 * Read in the list of fields that are tokenized in this index.
 */
public static LinkedHashSet readTokenizedFields(String indexPath,IndexReader indexReader) throws IOException {
  LinkedHashSet tokenizedFields=new LinkedHashSet();
  File tokFieldsFile=new File(Path.normalizePath(indexPath + ""String_Node_Str""));
  if (tokFieldsFile.canRead()) {
    BufferedReader reader=new BufferedReader(new FileReader(tokFieldsFile));
    String line;
    while ((line=reader.readLine()) != null)     tokenizedFields.add(line);
    reader.close();
  }
  TermEnum tokTerms=indexReader.terms(new Term(""String_Node_Str"",""String_Node_Str""));
  do {
    Term t=tokTerms.term();
    if (t == null)     break;
    if (!t.field().equals(""String_Node_Str""))     break;
    tokenizedFields.add(t.text());
  }
 while (tokTerms.next());
  tokenizedFields.add(""String_Node_Str"");
  tokenizedFields.add(""String_Node_Str"");
  return tokenizedFields;
}",0.976897689768977
24667,"/** 
 * Parse the XML source text file specified. <br><br> This method instantiates a SAX XML file parser and passes this class as the token handler. Doing so causes the  {@link XMLTextProcessor#startDocument() startDocument()},  {@link XMLTextProcessor#startElement(String,String,String,Attributes) startElement()},  {@link XMLTextProcessor#endElement(String,String,String) endElement()},  {@link XMLTextProcessor#endDocument() endDocument()}, and  {@link XMLTextProcessor#characters(char[],int,int) characters()}methods in this class to be called. These methods in turn process the actual text in the XML source document, ""blurbifying"" the text, breaking it up into overlapping chunks, and adding it to the Lucene index. <br><br>
 * @return  <code>0</code> - XML source file successfully parsed and indexed.<br> <code>-1</code> - One or more errors encountered processing XML source file.
 * @.notes For more about ""blurbifying"" text, see the  {@link XMLTextProcessor#blurbify(StringBuffer,boolean) blurbify()}method. <br><br> This function enables namespaces for XML tag attributes. Consquently, attributes such as <code>sectiontype</code> and <code>proximitybreak</code> are assumed to be prefixed by the namespace <code>xtf</code>. <br><br> If present in the   {@link XMLTextProcessor#indexInfo indexInfo} member,the XML file will be prefiltered with the specified XSL filter before XML parsing begins. This allows node attributes to be inserted that modify the proximity of various text sections as well as boost or deemphasize the relevance sections of text. For a description of attributes handled by this XML parser, see the  {@link XMLTextProcessor}class description. <br><br>
 */
private int parseText(){
  try {
    SAXParser xmlParser=IndexUtil.createSAXParser();
    InputSource xmlSource=curIdxRecord.xmlSource();
    Templates[] prefilters=curIdxSrc.preFilters();
    if (prefilters == null || prefilters.length == 0) {
      xmlParser.parse(xmlSource,this);
      return 0;
    }
    IndexUtil.applyPreFilters(prefilters,xmlParser.getXMLReader(),xmlSource,new SAXResult(this));
  }
 catch (  Throwable t) {
    if (lazyReceiver != null) {
      lazyBuilder.abort(lazyReceiver);
      lazyBuilder=null;
      lazyReceiver=null;
      lazyHandler=null;
    }
    Trace.more(Trace.info,""String_Node_Str"");
    String message=""String_Node_Str"" + t.getClass() + ""String_Node_Str""+ ""String_Node_Str""+ t.getMessage()+ ""String_Node_Str""+ ""String_Node_Str""+ curPrettyKey;
    if (curIdxRecord.recordNum() > 0)     message+=(""String_Node_Str"" + curIdxRecord.recordNum());
    Trace.info(message);
    return -1;
  }
  return 0;
}","/** 
 * Parse the XML source text file specified. <br><br> This method instantiates a SAX XML file parser and passes this class as the token handler. Doing so causes the  {@link XMLTextProcessor#startDocument() startDocument()},  {@link XMLTextProcessor#startElement(String,String,String,Attributes) startElement()},  {@link XMLTextProcessor#endElement(String,String,String) endElement()},  {@link XMLTextProcessor#endDocument() endDocument()}, and  {@link XMLTextProcessor#characters(char[],int,int) characters()}methods in this class to be called. These methods in turn process the actual text in the XML source document, ""blurbifying"" the text, breaking it up into overlapping chunks, and adding it to the Lucene index. <br><br>
 * @return  <code>0</code> - XML source file successfully parsed and indexed.<br> <code>-1</code> - One or more errors encountered processing XML source file.
 * @.notes For more about ""blurbifying"" text, see the  {@link XMLTextProcessor#blurbify(StringBuffer,boolean) blurbify()}method. <br><br> This function enables namespaces for XML tag attributes. Consquently, attributes such as <code>sectiontype</code> and <code>proximitybreak</code> are assumed to be prefixed by the namespace <code>xtf</code>. <br><br> If present in the   {@link XMLTextProcessor#indexInfo indexInfo} member,the XML file will be prefiltered with the specified XSL filter before XML parsing begins. This allows node attributes to be inserted that modify the proximity of various text sections as well as boost or deemphasize the relevance sections of text. For a description of attributes handled by this XML parser, see the  {@link XMLTextProcessor}class description. <br><br>
 */
private int parseText(){
  try {
    SAXParser xmlParser=IndexUtil.createSAXParser();
    InputSource xmlSource=curIdxRecord.xmlSource();
    Templates[] prefilters=curIdxSrc.preFilters();
    if (prefilters == null || prefilters.length == 0) {
      xmlParser.parse(xmlSource,this);
      return 0;
    }
    IndexUtil.applyPreFilters(prefilters,xmlParser.getXMLReader(),xmlSource,new SAXResult(this));
  }
 catch (  Throwable t) {
    if (lazyReceiver != null) {
      lazyBuilder.abort(lazyReceiver);
      lazyBuilder=null;
      lazyReceiver=null;
      lazyHandler=null;
    }
    Trace.more(Trace.info,""String_Node_Str"");
    String message=""String_Node_Str"" + t.getClass() + ""String_Node_Str""+ ""String_Node_Str""+ t.getMessage()+ ""String_Node_Str""+ ""String_Node_Str""+ curPrettyKey;
    if (curIdxRecord.recordNum() > 0)     message+=(""String_Node_Str"" + curIdxRecord.recordNum());
    Trace.info(message);
    if (docWordCount > 0 || subDocumentCount > 0) {
      try {
        openIdxForReading();
        indexReader.deleteDocuments(new Term(""String_Node_Str"",curIdxSrc.key()));
      }
 catch (      Throwable t2) {
        Trace.warning(""String_Node_Str"" + t2.getClass() + ""String_Node_Str""+ t2.getMessage());
      }
    }
    return -1;
  }
  return 0;
}",0.9424383267786914
24668,"/** 
 * Open a TextIndexer (Lucene) index for reading or writing. <br><br> The primary purpose of this method is to open the index identified by the <code>cfgInfo</code> for reading and searching. Index reading and searching operations are used to clean, cull, or optimize an index. Opening an index for writing is performed by the method  {@link XMLTextProcessor#openIdxForWriting() openIdxForWriting()}only when the index is being updated with new document information. <br><br>
 * @param homePath Path from which to resolve relative path names.<br>
 * @param idxInfo  A config structure containing information about the indexto open. <br>
 * @param clean    true to truncate any existing index; false to add to it.<br><br>
 * @param ignoreFileTimes true to ignore file time checks (only appliesduring incremental indexing).
 * @.notes This method will create an index if it doesn't exist, or truncate an index that does exist if the <code>clean</code> flag is set in the <code>cfgInfo</code> structure. <br><br> This method makes a private internal reference {@link XMLTextProcessor#indexInfo indexInfo}to the passed configuration structure for use by other methods in this class. <br><br>
 * @throws IOException  Any I/O exceptions that occurred during the opening,creation, or truncation of the Lucene index. <br><br>
 */
public void open(String homePath,IndexInfo idxInfo,boolean clean,boolean ignoreFileTimes) throws IOException {
  fileQueue=new LinkedList();
  try {
    this.indexInfo=idxInfo;
    this.xtfHomePath=homePath;
    this.ignoreFileTimes=ignoreFileTimes;
    indexPath=getIndexPath();
    if (indexInfo.stopWords != null)     stopSet=BigramStopFilter.makeStopSet(indexInfo.stopWords);
    if (clean) {
      Path.createPath(indexPath);
      createIndex(indexInfo);
    }
 else {
      Path.createPath(indexPath);
      FSDirectory idxDir=NativeFSDirectory.getDirectory(indexPath);
      if (!IndexReader.indexExists(idxDir))       createIndex(indexInfo);
    }
    openIdxForReading();
    Hits match=indexSearcher.search(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")));
    if (match.length() == 0)     throw new RuntimeException(""String_Node_Str"");
    Document doc=match.doc(0);
    String indexVersion=doc.get(""String_Node_Str"");
    if (indexVersion == null)     indexVersion=""String_Node_Str"";
    if (indexVersion.compareTo(TextIndexer.REQUIRED_VERSION) < 0) {
      throw new RuntimeException(""String_Node_Str"" + indexVersion + ""String_Node_Str""+ TextIndexer.REQUIRED_VERSION+ ""String_Node_Str"");
    }
    if (Integer.parseInt(doc.get(""String_Node_Str"")) != indexInfo.getChunkSize()) {
      throw new RuntimeException(""String_Node_Str"" + doc.get(""String_Node_Str"") + ""String_Node_Str""+ indexInfo.getChunkSize()+ ""String_Node_Str"");
    }
    if (Integer.parseInt(doc.get(""String_Node_Str"")) != indexInfo.getChunkOvlp()) {
      throw new RuntimeException(""String_Node_Str"" + doc.get(""String_Node_Str"") + ""String_Node_Str""+ indexInfo.getChunkOvlp()+ ""String_Node_Str"");
    }
    String stopWords=indexInfo.stopWords;
    if (stopWords == null)     stopWords=""String_Node_Str"";
    if (!doc.get(""String_Node_Str"").equals(stopWords)) {
      throw new RuntimeException(""String_Node_Str"" + doc.get(""String_Node_Str"") + ""String_Node_Str""+ indexInfo.stopWords+ ""String_Node_Str"");
    }
    String pluralMapName=doc.get(""String_Node_Str"");
    if (pluralMapName != null && pluralMapName.length() > 0) {
      File pluralMapFile=new File(Path.normalizePath(indexPath + pluralMapName));
      InputStream stream=new FileInputStream(pluralMapFile);
      if (pluralMapName.endsWith(""String_Node_Str""))       stream=new GZIPInputStream(stream);
      pluralMap=new WordMap(stream);
    }
    String accentMapName=doc.get(""String_Node_Str"");
    if (accentMapName != null && accentMapName.length() > 0) {
      File accentMapFile=new File(Path.normalizePath(indexPath + accentMapName));
      InputStream stream=new FileInputStream(accentMapFile);
      if (accentMapName.endsWith(""String_Node_Str""))       stream=new GZIPInputStream(stream);
      accentMap=new CharMap(stream);
    }
    tokenizedFields=XtfSearcher.readTokenizedFields(indexPath,indexReader);
  }
 catch (  IOException e) {
    Trace.tab();
    Trace.error(""String_Node_Str"" + e);
    Trace.untab();
    close();
    throw e;
  }
}","/** 
 * Open a TextIndexer (Lucene) index for reading or writing. <br><br> The primary purpose of this method is to open the index identified by the <code>cfgInfo</code> for reading and searching. Index reading and searching operations are used to clean, cull, or optimize an index. Opening an index for writing is performed by the method  {@link XMLTextProcessor#openIdxForWriting() openIdxForWriting()}only when the index is being updated with new document information. <br><br>
 * @param homePath Path from which to resolve relative path names.<br>
 * @param idxInfo  A config structure containing information about the indexto open. <br>
 * @param clean    true to truncate any existing index; false to add to it.<br><br>
 * @param ignoreFileTimes true to ignore file time checks (only appliesduring incremental indexing).
 * @.notes This method will create an index if it doesn't exist, or truncate an index that does exist if the <code>clean</code> flag is set in the <code>cfgInfo</code> structure. <br><br> This method makes a private internal reference {@link XMLTextProcessor#indexInfo indexInfo}to the passed configuration structure for use by other methods in this class. <br><br>
 * @throws IOException  Any I/O exceptions that occurred during the opening,creation, or truncation of the Lucene index. <br><br>
 */
public void open(String homePath,IndexInfo idxInfo,boolean clean,boolean ignoreFileTimes) throws IOException {
  fileQueue=new LinkedList();
  try {
    this.indexInfo=idxInfo;
    this.xtfHomePath=homePath;
    this.ignoreFileTimes=ignoreFileTimes;
    indexPath=getIndexPath();
    if (indexInfo.stopWords != null)     stopSet=BigramStopFilter.makeStopSet(indexInfo.stopWords);
    if (clean) {
      Path.createPath(indexPath);
      createIndex(indexInfo);
    }
 else {
      Path.createPath(indexPath);
      FSDirectory idxDir=NativeFSDirectory.getDirectory(indexPath);
      if (!IndexReader.indexExists(idxDir))       createIndex(indexInfo);
    }
    openIdxForReading();
    Hits match=indexSearcher.search(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")));
    if (match.length() == 0)     throw new RuntimeException(""String_Node_Str"");
    Document doc=match.doc(0);
    String indexVersion=doc.get(""String_Node_Str"");
    if (indexVersion == null)     indexVersion=""String_Node_Str"";
    if (indexVersion.compareTo(TextIndexer.REQUIRED_VERSION) < 0) {
      throw new RuntimeException(""String_Node_Str"" + indexVersion + ""String_Node_Str""+ TextIndexer.REQUIRED_VERSION+ ""String_Node_Str"");
    }
    if (Integer.parseInt(doc.get(""String_Node_Str"")) != indexInfo.getChunkSize()) {
      throw new RuntimeException(""String_Node_Str"" + doc.get(""String_Node_Str"") + ""String_Node_Str""+ indexInfo.getChunkSize()+ ""String_Node_Str"");
    }
    if (Integer.parseInt(doc.get(""String_Node_Str"")) != indexInfo.getChunkOvlp()) {
      throw new RuntimeException(""String_Node_Str"" + doc.get(""String_Node_Str"") + ""String_Node_Str""+ indexInfo.getChunkOvlp()+ ""String_Node_Str"");
    }
    String stopWords=indexInfo.stopWords;
    if (stopWords == null)     stopWords=""String_Node_Str"";
    if (!doc.get(""String_Node_Str"").equals(stopWords)) {
      throw new RuntimeException(""String_Node_Str"" + doc.get(""String_Node_Str"") + ""String_Node_Str""+ indexInfo.stopWords+ ""String_Node_Str"");
    }
    String accentMapName=doc.get(""String_Node_Str"");
    if (accentMapName != null && accentMapName.length() > 0) {
      File accentMapFile=new File(Path.normalizePath(indexPath + accentMapName));
      InputStream stream=new FileInputStream(accentMapFile);
      if (accentMapName.endsWith(""String_Node_Str""))       stream=new GZIPInputStream(stream);
      accentMap=new CharMap(stream);
    }
    String pluralMapName=doc.get(""String_Node_Str"");
    if (pluralMapName != null && pluralMapName.length() > 0) {
      File pluralMapFile=new File(Path.normalizePath(indexPath + pluralMapName));
      InputStream stream=new FileInputStream(pluralMapFile);
      if (pluralMapName.endsWith(""String_Node_Str""))       stream=new GZIPInputStream(stream);
      pluralMap=new WordMap(stream,accentMap);
    }
    tokenizedFields=XtfSearcher.readTokenizedFields(indexPath,indexReader);
  }
 catch (  IOException e) {
    Trace.tab();
    Trace.error(""String_Node_Str"" + e);
    Trace.untab();
    close();
    throw e;
  }
}",0.974896361123906
24669,"/** 
 * Convert a chunk of contiguous text to a list of tokens, ready for indexing.
 * @param fieldName  The name of the Lucene database field that theresulting tokens will be place in. Used to decide which filters need to be applied to the text.
 * @param reader     A <code>Reader</code> object from which the sourcetext
 * @return A filtered <code>TokenStream</code> containing the tokens that should be indexed by the Lucene database. <br><br>
 */
public TokenStream tokenStream(String fieldName,Reader reader){
  FastStringReader fastReader;
  if (reader instanceof FastStringReader)   fastReader=(FastStringReader)reader;
 else   fastReader=new FastStringReader(reader);
  srcText=fastReader.getString();
  if (facetFields.contains(fieldName))   return new FacetTokenizer(srcText);
  TokenStream result=new FastTokenizer(fastReader);
  result=new StandardFilter(result);
  if (!fieldName.equals(""String_Node_Str""))   result=new TagFilter(result,srcText);
  result=new XtfSpecialTokensFilter(result,srcText);
  result=new LowerCaseFilter(result);
  if (spellWriter != null && !misspelledFields.contains(fieldName))   result=new SpellWritingFilter(result,spellWriter);
  if (pluralMap != null)   result=new PluralFoldingFilter(result,pluralMap);
  if (accentMap != null)   result=new AccentFoldingFilter(result,accentMap);
  if (stopSet != null) {
    if (fieldName.equals(""String_Node_Str""))     result=new BigramStopFilter(result,stopSet);
 else {
      result=new BigramStopFilter(result,stopSet){
        protected boolean isStopWord(        String word){
          if (word.length() > 0 && word.charAt(0) == Constants.FIELD_START_MARKER)           word=word.substring(1);
          if (word.length() > 0 && word.charAt(word.length() - 1) == Constants.FIELD_END_MARKER)           word=word.substring(0,word.length() - 1);
          return super.isStopWord(word);
        }
      }
;
    }
  }
  if (!fieldName.equals(""String_Node_Str""))   result=new StartEndFilter(result);
  return result;
}","/** 
 * Convert a chunk of contiguous text to a list of tokens, ready for indexing.
 * @param fieldName  The name of the Lucene database field that theresulting tokens will be place in. Used to decide which filters need to be applied to the text.
 * @param reader     A <code>Reader</code> object from which the sourcetext
 * @return A filtered <code>TokenStream</code> containing the tokens that should be indexed by the Lucene database. <br><br>
 */
public TokenStream tokenStream(String fieldName,Reader reader){
  FastStringReader fastReader;
  if (reader instanceof FastStringReader)   fastReader=(FastStringReader)reader;
 else   fastReader=new FastStringReader(reader);
  srcText=fastReader.getString();
  if (facetFields.contains(fieldName))   return new FacetTokenizer(srcText);
  TokenStream result=new FastTokenizer(fastReader);
  result=new StandardFilter(result);
  if (!fieldName.equals(""String_Node_Str""))   result=new TagFilter(result,srcText);
  result=new XtfSpecialTokensFilter(result,srcText);
  result=new LowerCaseFilter(result);
  if (spellWriter != null && !misspelledFields.contains(fieldName))   result=new SpellWritingFilter(result,spellWriter);
  if (accentMap != null)   result=new AccentFoldingFilter(result,accentMap);
  if (pluralMap != null)   result=new PluralFoldingFilter(result,pluralMap);
  if (stopSet != null) {
    if (fieldName.equals(""String_Node_Str""))     result=new BigramStopFilter(result,stopSet);
 else {
      result=new BigramStopFilter(result,stopSet){
        protected boolean isStopWord(        String word){
          if (word.length() > 0 && word.charAt(0) == Constants.FIELD_START_MARKER)           word=word.substring(1);
          if (word.length() > 0 && word.charAt(word.length() - 1) == Constants.FIELD_END_MARKER)           word=word.substring(0,word.length() - 1);
          return super.isStopWord(word);
        }
      }
;
    }
  }
  if (!fieldName.equals(""String_Node_Str""))   result=new StartEndFilter(result);
  return result;
}",0.9585
24670,"/** 
 * Read in the contents of a word file, forming blocks of 128 entries per block. The file need not be in sorted order.
 * @param reader  Reader to get the data from
 * @throws IOException
 */
private void readFile(BufferedReader reader) throws IOException {
}","/** 
 * Read in the contents of a word file, forming blocks of 128 entries per block. The file need not be in sorted order.
 * @param reader  Reader to get the data from
 * @param charMap Accent map to filter entries with, or null for none.
 * @throws IOException
 */
private void readFile(BufferedReader reader,CharMap charMap) throws IOException {
}",0.8585365853658536
24671,"/** 
 * Construct a word map by reading from an InputStream. 
 */
public WordMap(InputStream s) throws IOException {
  readFile(new BufferedReader(new InputStreamReader(s)));
}","/** 
 * Construct a word map by reading from an InputStream. If a non-null character map is specified, all entries are filtered through it.
 */
public WordMap(InputStream s,CharMap charMap) throws IOException {
  readFile(new BufferedReader(new InputStreamReader(s)),charMap);
}",0.775330396475771
24672,"/** 
 * Generate an error page based on the given exception. Utilizes the system error stylesheet to produce a nicely formatted HTML page.
 * @param req  The HTTP request we're responding to
 * @param res  The HTTP result to write to
 * @param exc  The exception producing the error. If it's aDynaXMLException, the attributes will be passed to the error stylesheet.
 */
protected void genErrorPage(HttpServletRequest req,HttpServletResponse res,Exception exc){
  String strStackTrace;
  String[] saxonErrors=XTFSaxonErrorListener.getThreadErrors();
  if (saxonErrors != null) {
    StringBuffer buf=new StringBuffer();
    for (    String s : saxonErrors)     buf.append(s + ""String_Node_Str"");
    buf.append(""String_Node_Str"");
    strStackTrace=buf.toString();
  }
 else {
    ByteArrayOutputStream traceStream=new ByteArrayOutputStream();
    exc.printStackTrace(new PrintStream(traceStream));
    strStackTrace=traceStream.toString();
  }
  String htmlStackTrace=makeHtmlString(strStackTrace);
  try {
    ServletOutputStream out=res.getOutputStream();
    Transformer trans;
    String raw=req.getParameter(""String_Node_Str"");
    if (raw == null)     raw=(String)req.getAttribute(""String_Node_Str"");
    if (""String_Node_Str"".equals(raw) || ""String_Node_Str"".equals(raw) || ""String_Node_Str"".equals(raw)) {
      res.setContentType(""String_Node_Str"");
      trans=IndexUtil.createTransformer();
      Properties props=trans.getOutputProperties();
      props.put(""String_Node_Str"",""String_Node_Str"");
      props.put(""String_Node_Str"",""String_Node_Str"");
      trans.setOutputProperties(props);
    }
 else {
      TextConfig config=getConfig();
      Templates pss=stylesheetCache.find(errorGenSheet.get());
      res.setContentType(calcMimeType(pss));
      trans=pss.newTransformer();
      stuffAttribs(trans,req);
      stuffAttribs(trans,config.attribs);
    }
    String className=exc.getClass().getName().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    StringBuffer doc=new StringBuffer(2048);
    doc.append(""String_Node_Str"" + className + ""String_Node_Str"");
    trans.setParameter(""String_Node_Str"",new StringValue(className));
    String msg=makeHtmlString(exc.getMessage());
    if (!isEmpty(msg)) {
      doc.append(""String_Node_Str"" + msg + ""String_Node_Str"");
      trans.setParameter(""String_Node_Str"",new StringValue(msg));
    }
    if (exc instanceof GeneralException) {
      GeneralException bve=(GeneralException)exc;
      for (Iterator i=bve.attribs.iterator(); i.hasNext(); ) {
        Attrib a=(Attrib)i.next();
        doc.append(""String_Node_Str"" + a.key + ""String_Node_Str"");
        doc.append(a.value);
        doc.append(""String_Node_Str"" + a.key + ""String_Node_Str"");
        trans.setParameter(a.key,new StringValue(a.value));
      }
    }
    boolean isSocketExc=false;
    HashSet<Object> alreadyTraversed=new HashSet();
    for (Throwable t=exc; !isSocketExc && t != null && !alreadyTraversed.contains(t); ) {
      alreadyTraversed.add(t);
      if (t instanceof SocketException)       isSocketExc=true;
 else       if (t.getClass().getName().contains(""String_Node_Str""))       isSocketExc=true;
 else       if (t instanceof TransformerException && ((TransformerException)t).getException() != null)       t=((TransformerException)t).getException();
 else       if (t.getCause() != null)       t=t.getCause();
    }
    boolean isSevere=true;
    if (!(exc instanceof ExcessiveWorkException) && !(exc instanceof TermLimitException) && !(exc instanceof SocketException)&& !isSocketExc&& (!(exc instanceof GeneralException) || ((GeneralException)exc).isSevere())) {
      isSevere=false;
    }
    if (isSevere) {
      doc.append(""String_Node_Str"" + htmlStackTrace + ""String_Node_Str"");
      trans.setParameter(""String_Node_Str"",new StringValue(htmlStackTrace));
    }
    doc.append(""String_Node_Str"" + className + ""String_Node_Str"");
    if (isSocketExc)     Trace.warning(""String_Node_Str"" + msg.toString());
 else     if (isSevere)     Trace.error(""String_Node_Str"" + doc.toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (!res.isCommitted()) {
      StreamSource src=new StreamSource(new StringReader(doc.toString()));
      StreamResult dst=new StreamResult(out);
      trans.transform(src,dst);
    }
  }
 catch (  Exception e) {
    try {
      Trace.error(""String_Node_Str"" + e.toString() + ""String_Node_Str""+ ""String_Node_Str""+ exc.toString()+ ""String_Node_Str""+ strStackTrace);
      if (!res.isCommitted()) {
        ServletOutputStream out=res.getOutputStream();
        out.println(""String_Node_Str"");
        out.println(""String_Node_Str"");
        out.println(""String_Node_Str"" + e.toString() + ""String_Node_Str"");
        out.println(""String_Node_Str"" + exc.toString() + ""String_Node_Str""+ htmlStackTrace);
        out.println(""String_Node_Str"");
      }
    }
 catch (    IOException e2) {
    }
  }
}","/** 
 * Generate an error page based on the given exception. Utilizes the system error stylesheet to produce a nicely formatted HTML page.
 * @param req  The HTTP request we're responding to
 * @param res  The HTTP result to write to
 * @param exc  The exception producing the error. If it's aDynaXMLException, the attributes will be passed to the error stylesheet.
 */
protected void genErrorPage(HttpServletRequest req,HttpServletResponse res,Exception exc){
  String strStackTrace;
  String[] saxonErrors=XTFSaxonErrorListener.getThreadErrors();
  if (saxonErrors != null) {
    StringBuffer buf=new StringBuffer();
    for (    String s : saxonErrors)     buf.append(s + ""String_Node_Str"");
    buf.append(""String_Node_Str"");
    strStackTrace=buf.toString();
  }
 else {
    ByteArrayOutputStream traceStream=new ByteArrayOutputStream();
    exc.printStackTrace(new PrintStream(traceStream));
    strStackTrace=traceStream.toString();
  }
  String htmlStackTrace=makeHtmlString(strStackTrace);
  try {
    ServletOutputStream out=res.getOutputStream();
    Transformer trans;
    String raw=req.getParameter(""String_Node_Str"");
    if (raw == null)     raw=(String)req.getAttribute(""String_Node_Str"");
    if (""String_Node_Str"".equals(raw) || ""String_Node_Str"".equals(raw) || ""String_Node_Str"".equals(raw)) {
      res.setContentType(""String_Node_Str"");
      trans=IndexUtil.createTransformer();
      Properties props=trans.getOutputProperties();
      props.put(""String_Node_Str"",""String_Node_Str"");
      props.put(""String_Node_Str"",""String_Node_Str"");
      trans.setOutputProperties(props);
    }
 else {
      TextConfig config=getConfig();
      Templates pss=stylesheetCache.find(errorGenSheet.get());
      res.setContentType(calcMimeType(pss));
      trans=pss.newTransformer();
      stuffAttribs(trans,req);
      stuffAttribs(trans,config.attribs);
    }
    String className=exc.getClass().getName().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    StringBuffer doc=new StringBuffer(2048);
    doc.append(""String_Node_Str"" + className + ""String_Node_Str"");
    trans.setParameter(""String_Node_Str"",new StringValue(className));
    String msg=makeHtmlString(exc.getMessage());
    if (!isEmpty(msg)) {
      doc.append(""String_Node_Str"" + msg + ""String_Node_Str"");
      trans.setParameter(""String_Node_Str"",new StringValue(msg));
    }
    if (exc instanceof GeneralException) {
      GeneralException bve=(GeneralException)exc;
      for (Iterator i=bve.attribs.iterator(); i.hasNext(); ) {
        Attrib a=(Attrib)i.next();
        doc.append(""String_Node_Str"" + a.key + ""String_Node_Str"");
        doc.append(a.value);
        doc.append(""String_Node_Str"" + a.key + ""String_Node_Str"");
        trans.setParameter(a.key,new StringValue(a.value));
      }
    }
    boolean isSocketExc=false;
    HashSet<Object> alreadyTraversed=new HashSet();
    for (Throwable t=exc; !isSocketExc && t != null && !alreadyTraversed.contains(t); ) {
      alreadyTraversed.add(t);
      if (t instanceof SocketException)       isSocketExc=true;
 else       if (t.getClass().getName().contains(""String_Node_Str""))       isSocketExc=true;
 else       if (t instanceof TransformerException && ((TransformerException)t).getException() != null)       t=((TransformerException)t).getException();
 else       if (t.getCause() != null)       t=t.getCause();
    }
    boolean isNormalException=isSocketExc || exc instanceof ExcessiveWorkException || exc instanceof TermLimitException|| exc instanceof SocketException|| (exc instanceof GeneralException && !((GeneralException)exc).isSevere());
    if (!isNormalException) {
      doc.append(""String_Node_Str"" + htmlStackTrace + ""String_Node_Str"");
      trans.setParameter(""String_Node_Str"",new StringValue(htmlStackTrace));
    }
    doc.append(""String_Node_Str"" + className + ""String_Node_Str"");
    if (isSocketExc)     Trace.warning(""String_Node_Str"" + msg.toString());
 else     if (!isNormalException)     Trace.error(""String_Node_Str"" + doc.toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (!res.isCommitted()) {
      StreamSource src=new StreamSource(new StringReader(doc.toString()));
      StreamResult dst=new StreamResult(out);
      trans.transform(src,dst);
    }
  }
 catch (  Exception e) {
    try {
      Trace.error(""String_Node_Str"" + e.toString() + ""String_Node_Str""+ ""String_Node_Str""+ exc.toString()+ ""String_Node_Str""+ strStackTrace);
      if (!res.isCommitted()) {
        ServletOutputStream out=res.getOutputStream();
        out.println(""String_Node_Str"");
        out.println(""String_Node_Str"");
        out.println(""String_Node_Str"" + e.toString() + ""String_Node_Str"");
        out.println(""String_Node_Str"" + exc.toString() + ""String_Node_Str""+ htmlStackTrace);
        out.println(""String_Node_Str"");
      }
    }
 catch (    IOException e2) {
    }
  }
}",0.9584537212314436
24673,"/** 
 * Save document information associated with a collection of chunks. <br><br> This method saves a special document summary information chunk to the Lucene database that binds all the indexed text chunks for a document back to the original XML source text.
 * @.notes The document summary chunk is the last chunk written to a Lucene database for a given XML source document. Its presence or absence then can be used to identify whether or a document was completely indexed or not. The absence of a document summary for any given text chunk implies that indexing was aborted before the document was completely indexed. This property of document summary chunks is used by the   {@link IdxTreeCleaner} class to stript out anypartially indexed documents.<br><br> The document summary includes the relative path to the original XML source text, the number of chunks indexed for the document, a unique key that associates this summary with all the indexed text chunks, the date the document was added to the index, and any meta-data associated with the document. <br><br>
 */
private void saveDocInfo(SectionInfo secInfo){
  Document doc=new Document();
  doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Field.Index.UN_TOKENIZED));
  doc.add(new Field(""String_Node_Str"",Integer.toString(chunkCount),Field.Store.YES,Field.Index.NO));
  chunkCount=0;
  doc.add(new Field(""String_Node_Str"",curIdxSrc.key(),Field.Store.YES,Field.Index.UN_TOKENIZED));
  int recordNum=curIdxRecord.recordNum();
  if (recordNum > 0) {
    doc.add(new Field(""String_Node_Str"",Integer.toString(recordNum),Field.Store.YES,Field.Index.NO));
  }
  if (secInfo.subDocument != null) {
    doc.add(new Field(""String_Node_Str"",secInfo.subDocument,Field.Store.YES,Field.Index.NO));
  }
  File srcPath=curIdxSrc.path();
  if (srcPath != null) {
    String fileDateStr=DateTools.timeToString(srcPath.lastModified(),DateTools.Resolution.MILLISECOND);
    doc.add(new Field(""String_Node_Str"",fileDateStr,Field.Store.YES,Field.Index.NO));
  }
  XTFTextAnalyzer analyzer=(XTFTextAnalyzer)indexWriter.getAnalyzer();
  analyzer.clearFacetFields();
  if (secInfo.metaInfo.isEmpty()) {
    Trace.tab();
    Trace.warning(""String_Node_Str"");
    Trace.untab();
  }
 else {
    Iterator metaIter=secInfo.metaInfo.iterator();
    while (metaIter.hasNext()) {
      MetaField metaField=(MetaField)metaIter.next();
      if (metaField.isFacet && metaField.index) {
        metaField.tokenize=true;
        analyzer.addFacetField(metaField.name);
      }
      if (!metaField.spell && metaField.index)       analyzer.addMisspelledField(metaField.name);
      Field docField=new Field(metaField.name,metaField.value,metaField.store ? Field.Store.YES : Field.Store.NO,metaField.index ? (metaField.tokenize ? Field.Index.TOKENIZED : Field.Index.UN_TOKENIZED) : Field.Index.NO);
      docField.setBoost(metaField.wordBoost);
      doc.add(docField);
      if (metaField.tokenize && !metaField.isFacet) {
        if (!tokenizedFields.contains(metaField.name)) {
          addToTokenizedFieldsFile(metaField.name);
          tokenizedFields.add(metaField.name);
        }
      }
    }
  }
  try {
    indexWriter.addDocument(doc);
  }
 catch (  Throwable t) {
    Trace.tab();
    Trace.error(""String_Node_Str"" + t);
    Trace.untab();
    if (t instanceof RuntimeException)     throw (RuntimeException)t;
 else     throw new RuntimeException(t);
  }
}","/** 
 * Save document information associated with a collection of chunks. <br><br> This method saves a special document summary information chunk to the Lucene database that binds all the indexed text chunks for a document back to the original XML source text.
 * @.notes The document summary chunk is the last chunk written to a Lucene database for a given XML source document. Its presence or absence then can be used to identify whether or a document was completely indexed or not. The absence of a document summary for any given text chunk implies that indexing was aborted before the document was completely indexed. This property of document summary chunks is used by the   {@link IdxTreeCleaner} class to stript out anypartially indexed documents.<br><br> The document summary includes the relative path to the original XML source text, the number of chunks indexed for the document, a unique key that associates this summary with all the indexed text chunks, the date the document was added to the index, and any meta-data associated with the document. <br><br>
 */
private void saveDocInfo(SectionInfo secInfo){
  Document doc=new Document();
  doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Field.Index.UN_TOKENIZED));
  doc.add(new Field(""String_Node_Str"",Integer.toString(chunkCount),Field.Store.YES,Field.Index.NO));
  chunkCount=0;
  docWordCount=0;
  doc.add(new Field(""String_Node_Str"",curIdxSrc.key(),Field.Store.YES,Field.Index.UN_TOKENIZED));
  int recordNum=curIdxRecord.recordNum();
  if (recordNum > 0) {
    doc.add(new Field(""String_Node_Str"",Integer.toString(recordNum),Field.Store.YES,Field.Index.NO));
  }
  if (secInfo.subDocument != null) {
    doc.add(new Field(""String_Node_Str"",secInfo.subDocument,Field.Store.YES,Field.Index.NO));
  }
  File srcPath=curIdxSrc.path();
  if (srcPath != null) {
    String fileDateStr=DateTools.timeToString(srcPath.lastModified(),DateTools.Resolution.MILLISECOND);
    doc.add(new Field(""String_Node_Str"",fileDateStr,Field.Store.YES,Field.Index.NO));
  }
  XTFTextAnalyzer analyzer=(XTFTextAnalyzer)indexWriter.getAnalyzer();
  analyzer.clearFacetFields();
  if (secInfo.metaInfo.isEmpty()) {
    Trace.tab();
    Trace.warning(""String_Node_Str"");
    Trace.untab();
  }
 else {
    Iterator metaIter=secInfo.metaInfo.iterator();
    while (metaIter.hasNext()) {
      MetaField metaField=(MetaField)metaIter.next();
      if (metaField.isFacet && metaField.index) {
        metaField.tokenize=true;
        analyzer.addFacetField(metaField.name);
      }
      if (!metaField.spell && metaField.index)       analyzer.addMisspelledField(metaField.name);
      Field docField=new Field(metaField.name,metaField.value,metaField.store ? Field.Store.YES : Field.Store.NO,metaField.index ? (metaField.tokenize ? Field.Index.TOKENIZED : Field.Index.UN_TOKENIZED) : Field.Index.NO);
      docField.setBoost(metaField.wordBoost);
      doc.add(docField);
      if (metaField.tokenize && !metaField.isFacet) {
        if (!tokenizedFields.contains(metaField.name)) {
          addToTokenizedFieldsFile(metaField.name);
          tokenizedFields.add(metaField.name);
        }
      }
    }
  }
  try {
    indexWriter.addDocument(doc);
  }
 catch (  Throwable t) {
    Trace.tab();
    Trace.error(""String_Node_Str"" + t);
    Trace.untab();
    if (t instanceof RuntimeException)     throw (RuntimeException)t;
 else     throw new RuntimeException(t);
  }
}",0.9973737963233148
24674,"/** 
 * Process any accumulated source text, writing indexing completed chunks to the Lucene database as necessary. <br><br>
 * @throws SAXException  Any exceptions encountered during the processing ofthe accumulated chunks, or writing them to the Lucene index. <br><br>
 * @.notes This method processes any accumulated text as follows: <blockquote dir=ltr style=""MARGIN-RIGHT: 0px""> 1. First the accumulated text is ""blurbified."" See the {@link XMLTextProcessor#blurbify(StringBuffer,boolean) blurbify()}method for more information about what this entails. <br><br> 2. Next, a chunk is assembled a word at a time from the accumulated text until the required chunk size (in words) is reached. The completed chunk is then added to the Lucene database. <br><br> 3. Step two is repeated until no more complete chunks can be assembled from the accumulated text. (Any partial chunk text is saved until the next call to this method.) </blockquote>
 */
public void flushCharacters() throws SAXException {
  char[] ch=charBuf;
  int length=charBufPos;
  int start=0;
  charBufPos=0;
  int i=0;
  if (indexInfo.stripWhitespace) {
    for (i=0; i < length; i++)     if (!Character.isWhitespace(charBuf[i]))     break;
  }
  if (i == length)   return;
  if (lazyHandler != null)   lazyHandler.characters(ch,start,length);
  incrementNode();
  if (inMeta > 0) {
    String tmp=new String(ch,start,length);
    if (tmp.indexOf('&') >= 0)     tmp=tmp.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (tmp.indexOf('<') >= 0)     tmp=tmp.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (tmp.indexOf('>') >= 0)     tmp=tmp.replaceAll(""String_Node_Str"",""String_Node_Str"");
    metaBuf.append(tmp);
    return;
  }
  if (section.indexFlag() == SectionInfo.noIndex)   return;
  blurbedText.setLength(0);
  blurbedText.append(ch,start,length);
  blurbify(blurbedText,true);
  insertVirtualWords(blurbedText);
  if (blurbedText.length() <= 0)   return;
  String blurbedTextStr=blurbedText.toString();
  FastStringReader reader=new FastStringReader(blurbedTextStr);
  TokenStream result=new FastTokenizer(reader);
  int punctStart=0;
  int accumTextLen=trimAccumText(true);
  boolean mustGetNextWord=true;
  Token word=null;
  for (; ; ) {
    try {
      if (mustGetNextWord)       word=result.next();
      if (word == null)       break;
      mustGetNextWord=true;
      if (chunkStartNode < 0) {
        chunkStartNode=curNode;
        chunkWordOffset=nodeWordCount;
      }
      int wordStart=word.startOffset();
      int wordEnd=word.endOffset();
      int punctLen=wordStart - punctStart;
      if (chunkWordCount == chunkWordOvlpStart) {
        nextChunkStartIdx=accumTextLen + punctLen;
        nextChunkStartNode=curNode;
        nextChunkWordOffset=nodeWordCount;
        nextChunkWordCount=0;
      }
      accumText.append(blurbedTextStr.substring(punctStart,wordEnd));
      punctStart=wordEnd;
      chunkWordCount++;
      nextChunkWordCount++;
      if (!word.termText().equals(Constants.VIRTUAL_WORD))       nodeWordCount++;
      if (chunkWordCount == chunkWordSize) {
        word=result.next();
        mustGetNextWord=false;
        int punctEnd;
        if (word == null)         punctEnd=blurbedText.length();
 else         punctEnd=word.startOffset();
        accumText.append(blurbedTextStr.substring(punctStart,punctEnd));
        trimAccumText(false);
        indexText(section.peek());
        punctStart=punctEnd;
        chunkStartNode=nextChunkStartNode;
        chunkWordOffset=nextChunkWordOffset;
        chunkWordCount=nextChunkWordCount;
        accumText.delete(0,nextChunkStartIdx);
        accumTextLen=trimAccumText(true);
        nextChunkStartIdx=0;
        nextChunkWordCount=0;
      }
 else       accumTextLen=trimAccumText(false);
    }
 catch (    Exception e) {
      Trace.tab();
      Trace.error(""String_Node_Str"" + e);
      Trace.untab();
      throw new SAXException(e);
    }
catch (    Throwable t) {
      Trace.tab();
      Trace.error(""String_Node_Str"" + t);
      Trace.untab();
      throw new RuntimeException(t);
    }
  }
  accumText.append(blurbedTextStr.substring(punctStart,blurbedTextStr.length()));
  trimAccumText(false);
}","/** 
 * Process any accumulated source text, writing indexing completed chunks to the Lucene database as necessary. <br><br>
 * @throws SAXException  Any exceptions encountered during the processing ofthe accumulated chunks, or writing them to the Lucene index. <br><br>
 * @.notes This method processes any accumulated text as follows: <blockquote dir=ltr style=""MARGIN-RIGHT: 0px""> 1. First the accumulated text is ""blurbified."" See the {@link XMLTextProcessor#blurbify(StringBuffer,boolean) blurbify()}method for more information about what this entails. <br><br> 2. Next, a chunk is assembled a word at a time from the accumulated text until the required chunk size (in words) is reached. The completed chunk is then added to the Lucene database. <br><br> 3. Step two is repeated until no more complete chunks can be assembled from the accumulated text. (Any partial chunk text is saved until the next call to this method.) </blockquote>
 */
public void flushCharacters() throws SAXException {
  char[] ch=charBuf;
  int length=charBufPos;
  int start=0;
  charBufPos=0;
  int i=0;
  if (indexInfo.stripWhitespace) {
    for (i=0; i < length; i++)     if (!Character.isWhitespace(charBuf[i]))     break;
  }
  if (i == length)   return;
  if (lazyHandler != null)   lazyHandler.characters(ch,start,length);
  incrementNode();
  if (inMeta > 0) {
    String tmp=new String(ch,start,length);
    if (tmp.indexOf('&') >= 0)     tmp=tmp.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (tmp.indexOf('<') >= 0)     tmp=tmp.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (tmp.indexOf('>') >= 0)     tmp=tmp.replaceAll(""String_Node_Str"",""String_Node_Str"");
    metaBuf.append(tmp);
    return;
  }
  if (section.indexFlag() == SectionInfo.noIndex)   return;
  blurbedText.setLength(0);
  blurbedText.append(ch,start,length);
  blurbify(blurbedText,true);
  insertVirtualWords(blurbedText);
  if (blurbedText.length() <= 0)   return;
  String blurbedTextStr=blurbedText.toString();
  FastStringReader reader=new FastStringReader(blurbedTextStr);
  TokenStream result=new FastTokenizer(reader);
  int punctStart=0;
  int accumTextLen=trimAccumText(true);
  boolean mustGetNextWord=true;
  Token word=null;
  for (; ; ) {
    try {
      if (mustGetNextWord)       word=result.next();
      if (word == null)       break;
      mustGetNextWord=true;
      if (chunkStartNode < 0) {
        chunkStartNode=curNode;
        chunkWordOffset=nodeWordCount;
      }
      int wordStart=word.startOffset();
      int wordEnd=word.endOffset();
      int punctLen=wordStart - punctStart;
      if (chunkWordCount == chunkWordOvlpStart) {
        nextChunkStartIdx=accumTextLen + punctLen;
        nextChunkStartNode=curNode;
        nextChunkWordOffset=nodeWordCount;
        nextChunkWordCount=0;
      }
      accumText.append(blurbedTextStr.substring(punctStart,wordEnd));
      punctStart=wordEnd;
      chunkWordCount++;
      nextChunkWordCount++;
      if (!word.termText().equals(Constants.VIRTUAL_WORD)) {
        nodeWordCount++;
        docWordCount++;
      }
      if (chunkWordCount == chunkWordSize) {
        word=result.next();
        mustGetNextWord=false;
        int punctEnd;
        if (word == null)         punctEnd=blurbedText.length();
 else         punctEnd=word.startOffset();
        accumText.append(blurbedTextStr.substring(punctStart,punctEnd));
        trimAccumText(false);
        indexText(section.peek());
        punctStart=punctEnd;
        chunkStartNode=nextChunkStartNode;
        chunkWordOffset=nextChunkWordOffset;
        chunkWordCount=nextChunkWordCount;
        accumText.delete(0,nextChunkStartIdx);
        accumTextLen=trimAccumText(true);
        nextChunkStartIdx=0;
        nextChunkWordCount=0;
      }
 else       accumTextLen=trimAccumText(false);
    }
 catch (    Exception e) {
      Trace.tab();
      Trace.error(""String_Node_Str"" + e);
      Trace.untab();
      throw new SAXException(e);
    }
catch (    Throwable t) {
      Trace.tab();
      Trace.error(""String_Node_Str"" + t);
      Trace.untab();
      throw new RuntimeException(t);
    }
  }
  accumText.append(blurbedTextStr.substring(punctStart,blurbedTextStr.length()));
  trimAccumText(false);
}",0.995721416686475
24675,"/** 
 * Process the attributes associated with an XML source text node. <br><br> Sets internal flags and variables used during text processing based on any special attributes encountered in the given attribute list. <br><br>
 * @param atts  The attribute list to process. <br><br>
 * @.notes This method is called to process a list of attributes associated with a node. These attributes are typically inserted into the XML source text by an XSL prefilter. <br><br> Since many of these attributes nest (i.e., values for child nodes temporarily override parent attributes), the current state of the attributes is maintained on a ""section info"" stack. See the {@link XMLTextProcessor#section section} member for moredetails. <br><br> For a description of node attributes handled by this method, see the {@link XMLTextProcessor} class description. <br><br>
 */
private void processNodeAttributes(Attributes atts){
  String valueStr;
  String sectionTypeStr=section.sectionType();
  float wordBoost=section.wordBoost();
  int sentenceBump=section.sentenceBump();
  int indexFlag=SectionInfo.parentIndex;
  int spellFlag=SectionInfo.parentSpell;
  int sectionBump=0;
  String subDocumentStr=""String_Node_Str"";
  LinkedList metaInfo=null;
  for (int i=0; i < atts.getLength(); i++) {
    if (!xtfUri.equals(atts.getURI(i)))     continue;
    String attName=atts.getLocalName(i);
    if (attName.equalsIgnoreCase(""String_Node_Str""))     sectionTypeStr=atts.getValue(i);
 else     if (attName.equalsIgnoreCase(""String_Node_Str""))     sectionTypeStr+=""String_Node_Str"" + atts.getValue(i);
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      valueStr=atts.getValue(i);
      sectionBump=Integer.parseInt(valueStr);
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      valueStr=atts.getValue(i);
      wordBoost=Float.parseFloat(valueStr);
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      valueStr=atts.getValue(i);
      sentenceBump=Integer.parseInt(valueStr);
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      boolean defaultNoIndexFlag=(indexFlag == SectionInfo.index) ? false : true;
      valueStr=atts.getValue(i);
      indexFlag=trueOrFalse(valueStr,defaultNoIndexFlag) ? SectionInfo.noIndex : SectionInfo.index;
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      boolean defaultIndexFlag=(section.indexFlag() == SectionInfo.index) ? true : false;
      valueStr=atts.getValue(i);
      indexFlag=trueOrFalse(valueStr,defaultIndexFlag) ? SectionInfo.index : SectionInfo.noIndex;
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      valueStr=atts.getValue(i);
      if (trueOrFalse(valueStr,false)) {
        forceNewChunk(section.peek());
        chunkStartNode=-1;
        chunkWordOffset=-1;
      }
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      valueStr=atts.getValue(i);
      float newBoost=Float.parseFloat(valueStr);
      if (wordBoost != newBoost) {
        forceNewChunk(section.peek());
        chunkStartNode=-1;
        chunkWordOffset=-1;
        wordBoost=newBoost;
      }
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      boolean defaultSpellFlag=(section.spellFlag() == SectionInfo.spell) ? true : false;
      valueStr=atts.getValue(i);
      spellFlag=trueOrFalse(valueStr,defaultSpellFlag) ? SectionInfo.spell : SectionInfo.noSpell;
      if (spellFlag != section.spellFlag()) {
        forceNewChunk(section.peek());
        chunkStartNode=-1;
        chunkWordOffset=-1;
      }
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      subDocumentStr=atts.getValue(i);
      if (subDocumentStr != section.subDocument()) {
        forceNewChunk(section.peek());
        if (chunkCount > 0)         saveDocInfo(section.peek());
        chunkStartNode=-1;
        chunkWordOffset=-1;
        metaInfo=(LinkedList)section.metaInfo().clone();
      }
    }
 else {
      Trace.tab();
      Trace.warning(""String_Node_Str"" + atts.getQName(i) + ""String_Node_Str""+ atts.getValue(i)+ ""String_Node_Str"");
      Trace.untab();
    }
  }
  section.push(indexFlag,sectionTypeStr,sectionBump,wordBoost,sentenceBump,spellFlag,subDocumentStr,metaInfo);
}","/** 
 * Process the attributes associated with an XML source text node. <br><br> Sets internal flags and variables used during text processing based on any special attributes encountered in the given attribute list. <br><br>
 * @param atts  The attribute list to process. <br><br>
 * @.notes This method is called to process a list of attributes associated with a node. These attributes are typically inserted into the XML source text by an XSL prefilter. <br><br> Since many of these attributes nest (i.e., values for child nodes temporarily override parent attributes), the current state of the attributes is maintained on a ""section info"" stack. See the {@link XMLTextProcessor#section section} member for moredetails. <br><br> For a description of node attributes handled by this method, see the {@link XMLTextProcessor} class description. <br><br>
 */
private void processNodeAttributes(Attributes atts){
  String valueStr;
  String sectionTypeStr=section.sectionType();
  float wordBoost=section.wordBoost();
  int sentenceBump=section.sentenceBump();
  int indexFlag=SectionInfo.parentIndex;
  int spellFlag=SectionInfo.parentSpell;
  int sectionBump=0;
  String subDocumentStr=""String_Node_Str"";
  LinkedList metaInfo=null;
  for (int i=0; i < atts.getLength(); i++) {
    if (!xtfUri.equals(atts.getURI(i)))     continue;
    String attName=atts.getLocalName(i);
    if (attName.equalsIgnoreCase(""String_Node_Str""))     sectionTypeStr=atts.getValue(i);
 else     if (attName.equalsIgnoreCase(""String_Node_Str""))     sectionTypeStr+=""String_Node_Str"" + atts.getValue(i);
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      valueStr=atts.getValue(i);
      sectionBump=Integer.parseInt(valueStr);
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      valueStr=atts.getValue(i);
      wordBoost=Float.parseFloat(valueStr);
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      valueStr=atts.getValue(i);
      sentenceBump=Integer.parseInt(valueStr);
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      boolean defaultNoIndexFlag=(indexFlag == SectionInfo.index) ? false : true;
      valueStr=atts.getValue(i);
      indexFlag=trueOrFalse(valueStr,defaultNoIndexFlag) ? SectionInfo.noIndex : SectionInfo.index;
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      boolean defaultIndexFlag=(section.indexFlag() == SectionInfo.index) ? true : false;
      valueStr=atts.getValue(i);
      indexFlag=trueOrFalse(valueStr,defaultIndexFlag) ? SectionInfo.index : SectionInfo.noIndex;
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      valueStr=atts.getValue(i);
      if (trueOrFalse(valueStr,false)) {
        forceNewChunk(section.peek());
        chunkStartNode=-1;
        chunkWordOffset=-1;
      }
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      valueStr=atts.getValue(i);
      float newBoost=Float.parseFloat(valueStr);
      if (wordBoost != newBoost) {
        forceNewChunk(section.peek());
        chunkStartNode=-1;
        chunkWordOffset=-1;
        wordBoost=newBoost;
      }
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      boolean defaultSpellFlag=(section.spellFlag() == SectionInfo.spell) ? true : false;
      valueStr=atts.getValue(i);
      spellFlag=trueOrFalse(valueStr,defaultSpellFlag) ? SectionInfo.spell : SectionInfo.noSpell;
      if (spellFlag != section.spellFlag()) {
        forceNewChunk(section.peek());
        chunkStartNode=-1;
        chunkWordOffset=-1;
      }
    }
 else     if (attName.equalsIgnoreCase(""String_Node_Str"")) {
      subDocumentStr=atts.getValue(i);
      if (subDocumentStr != section.subDocument()) {
        forceNewChunk(section.peek());
        if (docWordCount > 0)         saveDocInfo(section.peek());
        chunkStartNode=-1;
        chunkWordOffset=-1;
        metaInfo=(LinkedList)section.metaInfo().clone();
      }
    }
 else {
      Trace.tab();
      Trace.warning(""String_Node_Str"" + atts.getQName(i) + ""String_Node_Str""+ atts.getValue(i)+ ""String_Node_Str"");
      Trace.untab();
    }
  }
  section.push(indexFlag,sectionTypeStr,sectionBump,wordBoost,sentenceBump,spellFlag,subDocumentStr,metaInfo);
}",0.9985879030360084
24676,"/** 
 * Add the specified XML source record to the active Lucene index. This method indexes the specified XML source text file, adding it to the Lucene database currently specified by the   {@link #indexPath} member.
 * @param file      The XML source text file to process.
 * @param record    Record within the XML file to process.
 * @param recordNum Zero-based index of this record in the XML file.
 * @throws IOException  Any I/O errors encountered opening or reading the XML sourcetext file or the Lucene database. <br><br>
 * @.notes To learn more about the actual mechanincs of how XML source files are indexed, see the  {@link XMLTextProcessor} class description.
 */
private int processText(IndexSource file,IndexRecord record,int recordNum) throws IOException {
  accumText.setLength(0);
  compactedAccumText.setLength(0);
  curIdxSrc=file;
  curIdxRecord=record;
  lazyStore=record.lazyStore();
  if (lazyStore != null) {
    Configuration config=new Configuration();
    config.setNamePool(NamePool.getDefaultNamePool());
    lazyBuilder=new LazyTreeBuilder(config);
    lazyReceiver=lazyBuilder.begin(lazyStore);
    lazyBuilder.setNamePool(config.getNamePool());
    lazyHandler=new ReceivingContentHandler();
    lazyHandler.setReceiver(lazyReceiver);
    lazyHandler.setPipelineConfiguration(lazyReceiver.getPipelineConfiguration());
  }
 else {
    lazyBuilder=null;
    lazyReceiver=null;
    lazyHandler=null;
  }
  chunkWordSize=indexInfo.getChunkSize();
  chunkWordOvlp=indexInfo.getChunkOvlp();
  chunkWordOvlpStart=chunkWordSize - chunkWordOvlp;
  curNode=0;
  chunkStartNode=-1;
  nextChunkStartNode=-1;
  nodeWordCount=0;
  chunkWordCount=0;
  chunkWordOffset=0;
  nextChunkStartIdx=0;
  nextChunkWordCount=0;
  nextChunkWordOffset=0;
  forcedChunk=false;
  inMeta=0;
  metaBuf.setLength(0);
  chunkCount=0;
  section=new SectionInfoStack();
  section.push();
  int result=parseText();
  if (lazyBuilder != null) {
    lazyBuilder.finish(lazyReceiver,false);
    if (result == 0) {
      Templates displayStyle=file.displayStyle();
      if (displayStyle != null) {
        try {
          precacheXSLKeys();
        }
 catch (        IOException e) {
          Trace.tab();
          Trace.error(""String_Node_Str"" + ""String_Node_Str"" + displayStyle + ""String_Node_Str""+ e);
          Trace.untab();
          throw e;
        }
catch (        Throwable t) {
          Trace.tab();
          Trace.error(""String_Node_Str"" + ""String_Node_Str"" + displayStyle + ""String_Node_Str""+ t);
          Trace.untab();
          if (t instanceof RuntimeException)           throw (RuntimeException)t;
 else           throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + displayStyle + ""String_Node_Str""+ t);
        }
      }
    }
    lazyStore.close();
  }
  return result;
}","/** 
 * Add the specified XML source record to the active Lucene index. This method indexes the specified XML source text file, adding it to the Lucene database currently specified by the   {@link #indexPath} member.
 * @param file      The XML source text file to process.
 * @param record    Record within the XML file to process.
 * @param recordNum Zero-based index of this record in the XML file.
 * @throws IOException  Any I/O errors encountered opening or reading the XML sourcetext file or the Lucene database. <br><br>
 * @.notes To learn more about the actual mechanincs of how XML source files are indexed, see the  {@link XMLTextProcessor} class description.
 */
private int processText(IndexSource file,IndexRecord record,int recordNum) throws IOException {
  accumText.setLength(0);
  compactedAccumText.setLength(0);
  curIdxSrc=file;
  curIdxRecord=record;
  lazyStore=record.lazyStore();
  if (lazyStore != null) {
    Configuration config=new Configuration();
    config.setNamePool(NamePool.getDefaultNamePool());
    lazyBuilder=new LazyTreeBuilder(config);
    lazyReceiver=lazyBuilder.begin(lazyStore);
    lazyBuilder.setNamePool(config.getNamePool());
    lazyHandler=new ReceivingContentHandler();
    lazyHandler.setReceiver(lazyReceiver);
    lazyHandler.setPipelineConfiguration(lazyReceiver.getPipelineConfiguration());
  }
 else {
    lazyBuilder=null;
    lazyReceiver=null;
    lazyHandler=null;
  }
  chunkWordSize=indexInfo.getChunkSize();
  chunkWordOvlp=indexInfo.getChunkOvlp();
  chunkWordOvlpStart=chunkWordSize - chunkWordOvlp;
  curNode=0;
  chunkStartNode=-1;
  nextChunkStartNode=-1;
  nodeWordCount=0;
  chunkWordCount=0;
  chunkWordOffset=0;
  nextChunkStartIdx=0;
  nextChunkWordCount=0;
  nextChunkWordOffset=0;
  forcedChunk=false;
  inMeta=0;
  metaBuf.setLength(0);
  chunkCount=0;
  docWordCount=0;
  section=new SectionInfoStack();
  section.push();
  int result=parseText();
  if (lazyBuilder != null) {
    lazyBuilder.finish(lazyReceiver,false);
    if (result == 0) {
      Templates displayStyle=file.displayStyle();
      if (displayStyle != null) {
        try {
          precacheXSLKeys();
        }
 catch (        IOException e) {
          Trace.tab();
          Trace.error(""String_Node_Str"" + ""String_Node_Str"" + displayStyle + ""String_Node_Str""+ e);
          Trace.untab();
          throw e;
        }
catch (        Throwable t) {
          Trace.tab();
          Trace.error(""String_Node_Str"" + ""String_Node_Str"" + displayStyle + ""String_Node_Str""+ t);
          Trace.untab();
          if (t instanceof RuntimeException)           throw (RuntimeException)t;
 else           throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + displayStyle + ""String_Node_Str""+ t);
        }
      }
    }
    lazyStore.close();
  }
  return result;
}",0.9967948717948718
24677,"/** 
 * Retrieve the next token in the stream. 
 */
public Token next() throws IOException {
  Token t;
  if (nextToken != null) {
    t=nextToken;
    nextToken=null;
  }
 else {
    if (pos > str.length())     return null;
    pos=str.indexOf(""String_Node_Str"",pos);
    if (pos < 0)     pos=str.length();
    String term=str.substring(0,pos);
    t=new Token(term,0,pos);
    pos+=2;
    String lcTerm=term.toLowerCase();
    if (!lcTerm.equals(term))     nextToken=new Token(lcTerm,0,pos);
  }
  return t;
}","/** 
 * Retrieve the next token in the stream. 
 */
public Token next() throws IOException {
  Token t;
  if (nextToken != null) {
    t=nextToken;
    nextToken=null;
  }
 else {
    if (pos > str.length())     return null;
    pos=str.indexOf(""String_Node_Str"",pos);
    if (pos < 0)     pos=str.length();
    String term=str.substring(0,pos);
    term=term.replace(""String_Node_Str"",""String_Node_Str"");
    term=term.replace(""String_Node_Str"",""String_Node_Str"");
    term=term.replace(""String_Node_Str"",""String_Node_Str"");
    t=new Token(term,0,pos);
    pos+=2;
    String lcTerm=term.toLowerCase();
    if (!lcTerm.equals(term))     nextToken=new Token(lcTerm,0,pos);
  }
  return t;
}",0.8502495840266223
24678,"/** 
 * Does the work of turning faceted groups into XML.
 * @param group   The group to work on
 * @param buf     Buffer to add XML to
 */
private void structureGroup(ResultGroup group,StringBuffer buf){
  buf.append(""String_Node_Str"" + group.value.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ (group.rank + 1)+ ""String_Node_Str""+ ""String_Node_Str""+ group.totalSubGroups+ ""String_Node_Str""+ ""String_Node_Str""+ group.totalDocs+ ""String_Node_Str""+ ""String_Node_Str""+ (group.endDoc > 0 ? group.startDoc + 1 : 0)+ ""String_Node_Str""+ ""String_Node_Str""+ (group.endDoc)+ ""String_Node_Str"");
  if (group.docHits != null)   structureDocHits(group.docHits,group.startDoc,buf);
  if (group.subGroups != null) {
    for (int i=0; i < group.subGroups.length; i++)     structureGroup(group.subGroups[i],buf);
  }
  buf.append(""String_Node_Str"");
}","/** 
 * Does the work of turning faceted groups into XML.
 * @param group   The group to work on
 * @param buf     Buffer to add XML to
 */
private void structureGroup(ResultGroup group,StringBuffer buf){
  buf.append(""String_Node_Str"" + TextServlet.makeHtmlString(group.value) + ""String_Node_Str""+ ""String_Node_Str""+ (group.rank + 1)+ ""String_Node_Str""+ ""String_Node_Str""+ group.totalSubGroups+ ""String_Node_Str""+ ""String_Node_Str""+ group.totalDocs+ ""String_Node_Str""+ ""String_Node_Str""+ (group.endDoc > 0 ? group.startDoc + 1 : 0)+ ""String_Node_Str""+ ""String_Node_Str""+ (group.endDoc)+ ""String_Node_Str"");
  if (group.docHits != null)   structureDocHits(group.docHits,group.startDoc,buf);
  if (group.subGroups != null) {
    for (int i=0; i < group.subGroups.length; i++)     structureGroup(group.subGroups[i],buf);
  }
  buf.append(""String_Node_Str"");
}",0.9457900807381776
24679,"/** 
 * Determines if the given string is an bi-gram of a real word with a stop-word.
 * @param stopWords   The set of stop-words
 * @param str         The string to check
 * @return            true if it's an bi-gram
 */
public static boolean isBigram(Set stopWords,String str){
}","/** 
 * Determines if the given string is an bi-gram of a real word with a stop-word.
 * @param stopWords   The set of stop-words
 * @param str         The string to check
 * @return            true if it's an bi-gram
 */
public static boolean isBigram(Set stopWords,String str){
  int pos=str.indexOf('~');
  if (pos < 0)   return false;
  if (!(pos > 0 && pos < str.length() - 1))   return false;
  String before=str.substring(0,pos);
  String after=str.substring(pos + 1);
  if (!stopWords.contains(before) || stopWords.contains(after))   return false;
  return true;
}",0.6588511137162955
24680,"/** 
 * Parse a 'keyword' query, known internally as a multi-field AND.
 */
private Query parseMultiFieldQuery(EasyNode parent,String field,int maxSnippets){
  String name=parent.name();
  if (!name.matches(""String_Node_Str""))   error(""String_Node_Str"");
  if (field != null)   error(""String_Node_Str"");
  String fieldsStr=parseStringAttrib(parent,""String_Node_Str"");
  ArrayList<String> fields=new ArrayList<String>();
  StringTokenizer st=new StringTokenizer(fieldsStr,""String_Node_Str"");
  while (st.hasMoreTokens())   fields.add(st.nextToken());
  int slop=parseIntAttrib(parent,""String_Node_Str"");
  int maxMetaSnippets=parseIntAttrib(parent,""String_Node_Str"",maxSnippets);
  int maxTextSnippets=parseIntAttrib(parent,""String_Node_Str"",maxSnippets);
  float[] boosts=null;
  if (parent.hasAttr(""String_Node_Str"")) {
    boosts=parseFieldBoosts(parent,""String_Node_Str"");
    if (boosts != null && boosts.length > fields.size())     error(""String_Node_Str"");
  }
  ArrayList queryList=new ArrayList();
  Vector<Query> notVec=new Vector<Query>();
  for (int i=0; i < parent.nChildren(); i++) {
    EasyNode el=parent.child(i);
    if (!el.isElement())     continue;
 else     if (el.name().equalsIgnoreCase(""String_Node_Str""))     continue;
 else     if (el.name().equalsIgnoreCase(""String_Node_Str""))     notVec.add(parseQuery2(el,""String_Node_Str"",fieldsStr,maxSnippets));
 else {
      Query q=parseQuery(el,fieldsStr,maxSnippets);
      if (q == null)       continue;
      if (!(q instanceof SpanQuery))       error(""String_Node_Str"");
      queryList.add(q);
    }
  }
  SpanQuery[] subQueries=(SpanQuery[])queryList.toArray(new SpanQuery[queryList.size()]);
  return createMultiFieldQuery(parent,fields.toArray(new String[fields.size()]),boosts,subQueries,notVec,slop,maxMetaSnippets,maxTextSnippets);
}","/** 
 * Parse a 'keyword' query, known internally as a multi-field AND.
 */
private Query parseMultiFieldQuery(EasyNode parent,String field,int maxSnippets){
  String name=parent.name();
  if (!name.matches(""String_Node_Str""))   error(""String_Node_Str"");
  if (field != null)   error(""String_Node_Str"");
  String fieldsStr=parseStringAttrib(parent,""String_Node_Str"");
  ArrayList<String> fields=new ArrayList<String>();
  StringTokenizer st=new StringTokenizer(fieldsStr,""String_Node_Str"");
  while (st.hasMoreTokens())   fields.add(st.nextToken());
  int slop=parseIntAttrib(parent,""String_Node_Str"");
  int maxMetaSnippets=parseIntAttrib(parent,""String_Node_Str"",maxSnippets);
  int maxTextSnippets=parseIntAttrib(parent,""String_Node_Str"",maxSnippets);
  float[] boosts=null;
  if (parent.hasAttr(""String_Node_Str"")) {
    boosts=parseFieldBoosts(parent,""String_Node_Str"");
    if (boosts != null && boosts.length > fields.size())     error(""String_Node_Str"");
  }
  ArrayList queryList=new ArrayList();
  Vector<Query> notVec=new Vector<Query>();
  for (int i=0; i < parent.nChildren(); i++) {
    EasyNode el=parent.child(i);
    if (!el.isElement())     continue;
 else     if (el.name().equalsIgnoreCase(""String_Node_Str""))     continue;
 else     if (el.name().equalsIgnoreCase(""String_Node_Str""))     notVec.add(parseQuery2(el,""String_Node_Str"",fieldsStr,maxSnippets));
 else {
      Query q=parseQuery(el,fieldsStr,maxSnippets);
      if (q == null)       continue;
      if (!(q instanceof SpanQuery))       error(""String_Node_Str"");
      queryList.add(q);
    }
  }
  if (queryList.isEmpty())   return null;
  SpanQuery[] subQueries=(SpanQuery[])queryList.toArray(new SpanQuery[queryList.size()]);
  return createMultiFieldQuery(parent,fields.toArray(new String[fields.size()]),boosts,subQueries,notVec,slop,maxMetaSnippets,maxTextSnippets);
}",0.9885496183206108
24681,"/** 
 * Determines if the given string is an bi-gram of a real word with a stop-word.
 * @param stopWords   The set of stop-words
 * @param str         The string to check
 * @return            true if it's an bi-gram
 */
public static boolean isBigram(Set stopWords,String str){
  int pos=str.indexOf('~');
  if (pos < 0)   return false;
  if (!(pos > 0 && pos < str.length() - 1))   return false;
  String before=str.substring(0,pos);
  String after=str.substring(pos + 1);
  if (!stopWords.contains(before) || stopWords.contains(after))   return false;
  return true;
}","/** 
 * Determines if the given string is an bi-gram of a real word with a stop-word.
 * @param stopWords   The set of stop-words
 * @param str         The string to check
 * @return            true if it's an bi-gram
 */
public static boolean isBigram(Set stopWords,String str){
  int pos=str.indexOf('~');
  if (pos < 0)   return false;
  if (pos < 0 || pos >= str.length() - 1)   return false;
  String before=str.substring(0,pos);
  String after=str.substring(pos + 1);
  if (!stopWords.contains(before) && !stopWords.contains(after))   return false;
  return true;
}",0.7174103237095363
24682,"private void addParam(String name,String val){
  ArrayList<String> vals=params.get(name);
  if (vals == null) {
    vals=new ArrayList<String>();
    params.put(name,vals);
  }
  vals.add(val);
}","private void addParam(String name,String val){
  ArrayList<String> vals=params.get(name);
  if (vals == null) {
    paramNames.add(name);
    vals=new ArrayList<String>();
    params.put(name,vals);
  }
  vals.add(val);
}",0.9375
24683,"/** 
 * Calculates and adds the ""servlet.path"" and ""root.path"" attributes to the given transformer. Also adds ""xtf.home"" based on the servlet root directory.
 */
public void stuffSpecialAttribs(HttpServletRequest req,Transformer trans){
  String uri=req.getRequestURL().toString();
  if (!uri.startsWith(""String_Node_Str""))   uri=req.getRequestURI();
  if (uri.indexOf('?') >= 0)   uri=uri.substring(0,uri.indexOf('?'));
  uri=decodeURL(uri);
  uri=convertUTF8inURL(uri);
  trans.setParameter(""String_Node_Str"",new StringValue(uri));
  trans.setParameter(""String_Node_Str"",new StringValue(uri));
  String rootPath=uri;
  if (rootPath.endsWith(""String_Node_Str""))   rootPath=rootPath.substring(0,rootPath.length() - 1);
  int slashPos=rootPath.lastIndexOf('/');
  if (slashPos >= 1)   rootPath=rootPath.substring(0,slashPos);
  String lookFor=""String_Node_Str"";
  if (rootPath.endsWith(lookFor))   rootPath=rootPath.substring(0,rootPath.length() - lookFor.length());
  rootPath=rootPath + ""String_Node_Str"";
  trans.setParameter(""String_Node_Str"",new StringValue(rootPath));
  trans.setParameter(""String_Node_Str"",new StringValue(rootPath));
  String xtfHome=Path.normalizePath(getRealPath(""String_Node_Str""));
  trans.setParameter(""String_Node_Str"",xtfHome);
  Enumeration i=req.getHeaderNames();
  trans.setParameter(""String_Node_Str"",getRequestURL(req));
  while (i.hasMoreElements()) {
    String name=(String)i.nextElement();
    String value=req.getHeader(name);
    trans.setParameter(""String_Node_Str"" + name,new StringValue(value));
    if (!(name.equals(name.toLowerCase())))     trans.setParameter(""String_Node_Str"" + (name.toLowerCase()),new StringValue(value));
  }
}","/** 
 * Calculates and adds the ""servlet.path"" and ""root.path"" attributes to the given transformer. Also adds ""xtf.home"" based on the servlet root directory.
 */
public void stuffSpecialAttribs(HttpServletRequest req,Transformer trans){
  String uri=req.getRequestURL().toString();
  if (!uri.startsWith(""String_Node_Str""))   uri=req.getRequestURI();
  if (uri.indexOf('?') >= 0)   uri=uri.substring(0,uri.indexOf('?'));
  uri=decodeURL(uri);
  uri=convertUTF8inURL(uri);
  trans.setParameter(""String_Node_Str"",new StringValue(uri));
  trans.setParameter(""String_Node_Str"",new StringValue(uri));
  String rootPath=uri;
  if (rootPath.endsWith(""String_Node_Str""))   rootPath=rootPath.substring(0,rootPath.length() - 1);
  int slashPos=rootPath.lastIndexOf('/');
  if (slashPos >= 1)   rootPath=rootPath.substring(0,slashPos);
  String lookFor=""String_Node_Str"";
  if (rootPath.endsWith(lookFor))   rootPath=rootPath.substring(0,rootPath.length() - lookFor.length());
  rootPath=rootPath + ""String_Node_Str"";
  trans.setParameter(""String_Node_Str"",new StringValue(rootPath));
  trans.setParameter(""String_Node_Str"",new StringValue(rootPath));
  String xtfHome=Path.normalizePath(getRealPath(""String_Node_Str""));
  trans.setParameter(""String_Node_Str"",xtfHome);
  Enumeration i=req.getHeaderNames();
  trans.setParameter(""String_Node_Str"",getRequestURL(req));
  trans.setParameter(""String_Node_Str"",getRequestURL(req,true));
  while (i.hasMoreElements()) {
    String name=(String)i.nextElement();
    String value=req.getHeader(name);
    trans.setParameter(""String_Node_Str"" + name,new StringValue(value));
    if (!(name.equals(name.toLowerCase())))     trans.setParameter(""String_Node_Str"" + (name.toLowerCase()),new StringValue(value));
  }
}",0.9810108092316682
24684,"/** 
 * Gets the full URL, including query parameters, from an HTTP request. This is a bit tricky since different servlet containers return slightly different info.
 */
public static String getRequestURL(HttpServletRequest req){
  String url=req.getRequestURL().toString();
  if (url.indexOf('?') < 0 && req.getQueryString() != null && req.getQueryString().length() > 0) {
    url=url + ""String_Node_Str"" + req.getQueryString();
  }
  if (url.indexOf(""String_Node_Str"") >= 0)   url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  url=decodeURL(url);
  url=convertUTF8inURL(url);
  return url;
}","/** 
 * Gets the full URL, including query parameters, from an HTTP request. This is a bit tricky since different servlet containers return slightly different info.
 * @param raw true to suppress un-escaping of % codes and probableutf-8 coding in the URL.
 */
public static String getRequestURL(HttpServletRequest req,boolean raw){
  String url=req.getRequestURL().toString();
  if (url.indexOf('?') < 0 && req.getQueryString() != null && req.getQueryString().length() > 0) {
    url=url + ""String_Node_Str"" + req.getQueryString();
  }
  if (url.indexOf(""String_Node_Str"") >= 0)   url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!raw) {
    url=decodeURL(url);
    url=convertUTF8inURL(url);
  }
  return url;
}",0.905802562170309
24685,"private void init(){
  if (params != null)   return;
  params=new HashMap<String,ArrayList<String>>();
  Enumeration paramNames=inReq.getParameterNames();
  while (paramNames.hasMoreElements()) {
    String paramName=(String)paramNames.nextElement();
    String[] vals=inReq.getParameterValues(paramName);
    for (    String val : vals) {
      if (val.indexOf(';') < 0) {
        if (!paramName.equals(""String_Node_Str""))         addParam(paramName,val);
        continue;
      }
      StringTokenizer tokenizer=new StringTokenizer(val,""String_Node_Str"");
      String name=paramName;
      StringBuffer valbuf=new StringBuffer();
      while (tokenizer.hasMoreTokens()) {
        String tok=tokenizer.nextToken();
        int equalPos=-1;
        boolean inQuote=false;
        for (int i=0; i < tok.length() && equalPos < 0; i++) {
          if (tok.charAt(i) == '""')           inQuote=!inQuote;
 else           if (!inQuote && tok.charAt(i) == '=')           equalPos=i;
        }
        equalPos=tok.indexOf('=');
        if (equalPos >= 0) {
          if (!name.equals(""String_Node_Str""))           addParam(name,valbuf.toString());
          valbuf.setLength(0);
          name=tok.substring(0,equalPos);
          valbuf.append(tok.substring(equalPos + 1));
        }
 else {
          if (valbuf.length() > 0)           valbuf.append(""String_Node_Str"");
          valbuf.append(tok);
        }
      }
      if (!name.equals(""String_Node_Str""))       addParam(name,valbuf.toString());
    }
  }
}","private void init(){
  if (params != null)   return;
  paramNames=new ArrayList();
  params=new HashMap();
  Enumeration paramNames=inReq.getParameterNames();
  while (paramNames.hasMoreElements()) {
    String paramName=(String)paramNames.nextElement();
    String[] vals=inReq.getParameterValues(paramName);
    for (    String val : vals) {
      if (val.indexOf(';') < 0) {
        if (!paramName.equals(""String_Node_Str""))         addParam(paramName,val);
        continue;
      }
      try {
        val=protectChars(paramName,val);
      }
 catch (      Throwable t) {
        Trace.warning(""String_Node_Str"" + t.toString());
      }
      StringTokenizer tokenizer=new StringTokenizer(val,""String_Node_Str"");
      String name=paramName;
      StringBuffer valbuf=new StringBuffer();
      while (tokenizer.hasMoreTokens()) {
        String tok=tokenizer.nextToken();
        int equalPos=-1;
        boolean inQuote=false;
        for (int i=0; i < tok.length() && equalPos < 0; i++) {
          if (tok.charAt(i) == '""')           inQuote=!inQuote;
 else           if (!inQuote && tok.charAt(i) == '=')           equalPos=i;
        }
        equalPos=tok.indexOf('=');
        if (equalPos >= 0) {
          if (!name.equals(""String_Node_Str""))           addParam(name,valbuf.toString());
          valbuf.setLength(0);
          name=unprotectChars(tok.substring(0,equalPos));
          valbuf.append(unprotectChars(tok.substring(equalPos + 1)));
        }
 else {
          if (valbuf.length() > 0)           valbuf.append(""String_Node_Str"");
          valbuf.append(unprotectChars(tok));
        }
      }
      if (!name.equals(""String_Node_Str""))       addParam(name,valbuf.toString());
    }
  }
}",0.9196400868755816
24686,"/** 
 * Create a QueryProcessor. Checks the system property ""org.cdlib.xtf.QueryProcessorClass"" to see if there is a user- supplied implementation. If not, a   {@link DefaultQueryProcessor} iscreated.
 */
public QueryProcessor createQueryProcessor(){
  final String propName=""String_Node_Str"";
  String className=System.getProperty(propName);
  Class theClass=DefaultQueryProcessor.class;
  try {
    if (className != null)     theClass=Class.forName(className);
    QueryProcessor processor=(QueryProcessor)theClass.newInstance();
    IndexWarmer warmer=null;
synchronized (indexWarmers) {
      String xtfHome=Path.normalizePath(TextServlet.getCurServlet().getRealPath(""String_Node_Str""));
      warmer=indexWarmers.get(xtfHome);
      if (warmer == null) {
        warmer=new IndexWarmer(xtfHome,5);
        indexWarmers.put(xtfHome,warmer);
      }
    }
    processor.setIndexWarmer(warmer);
    return processor;
  }
 catch (  ClassCastException e) {
    Trace.error(""String_Node_Str"" + className + ""String_Node_Str""+ ""String_Node_Str""+ propName+ ""String_Node_Str""+ QueryProcessor.class.getName());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    Trace.error(""String_Node_Str"" + className + ""String_Node_Str""+ propName+ ""String_Node_Str"");
    throw new RuntimeException(e);
  }
}","/** 
 * Create a QueryProcessor. Checks the system property ""org.cdlib.xtf.QueryProcessorClass"" to see if there is a user- supplied implementation. If not, a   {@link DefaultQueryProcessor} iscreated.
 */
public QueryProcessor createQueryProcessor(){
  final String propName=""String_Node_Str"";
  String className=System.getProperty(propName);
  Class theClass=DefaultQueryProcessor.class;
  try {
    if (className != null)     theClass=Class.forName(className);
    QueryProcessor processor=(QueryProcessor)theClass.newInstance();
    IndexWarmer warmer=null;
synchronized (indexWarmers) {
      String xtfHome=Path.normalizePath(TextServlet.getCurServlet().getRealPath(""String_Node_Str""));
      warmer=indexWarmers.get(xtfHome);
      if (warmer == null) {
        warmer=new IndexWarmer(xtfHome,60);
        indexWarmers.put(xtfHome,warmer);
      }
    }
    processor.setIndexWarmer(warmer);
    return processor;
  }
 catch (  ClassCastException e) {
    Trace.error(""String_Node_Str"" + className + ""String_Node_Str""+ ""String_Node_Str""+ propName+ ""String_Node_Str""+ QueryProcessor.class.getName());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    Trace.error(""String_Node_Str"" + className + ""String_Node_Str""+ propName+ ""String_Node_Str"");
    throw new RuntimeException(e);
  }
}",0.9988510149368058
24687,"@Override public Enumeration getParameterNames(){
  init();
  Set keys=params.keySet();
  ArrayList<String> keyColl=new ArrayList<String>(keys);
  Collections.sort(keyColl);
  final Iterator iter=keyColl.iterator();
  return new Enumeration(){
    public boolean hasMoreElements(){
      return iter.hasNext();
    }
    public Object nextElement(){
      return iter.next();
    }
  }
;
}","@Override public Enumeration getParameterNames(){
  init();
  final Iterator iter=paramNames.iterator();
  return new Enumeration(){
    public boolean hasMoreElements(){
      return iter.hasNext();
    }
    public Object nextElement(){
      return iter.next();
    }
  }
;
}",0.7616191904047976
24688,"/** 
 * Does the work of turning DocHits into XML.
 * @param docHits Array of DocHits to structure
 * @param buf     Buffer to add the XML to
 */
private void structureDocHits(DocHit[] docHits,int startDoc,StringBuffer buf){
  if (docHits == null)   return;
  for (int i=0; i < docHits.length; i++) {
    DocHit docHit=docHits[i];
    String scoreStr;
    if (scoresNormalized)     scoreStr=Integer.toString(Math.round(docHit.score * 100));
 else {
      if (decFormat == null)       decFormat=(DecimalFormat)DecimalFormat.getInstance();
      scoreStr=decFormat.format(docHit.score);
    }
    buf.append(""String_Node_Str"" + ""String_Node_Str"" + (i + startDoc + 1) + ""String_Node_Str""+ ""String_Node_Str""+ TextServlet.makeHtmlString(docHit.filePath())+ ""String_Node_Str""+ ""String_Node_Str""+ scoreStr+ ""String_Node_Str""+ ""String_Node_Str""+ docHit.totalSnippets()+ ""String_Node_Str"");
    if (docHit.recordNum() > 0)     buf.append(""String_Node_Str"" + docHit.recordNum() + ""String_Node_Str"");
    if (docHit.subDocument() != null)     buf.append(""String_Node_Str"" + docHit.subDocument() + ""String_Node_Str"");
    buf.append(""String_Node_Str"");
    Explanation explanation=docHit.explanation();
    if (explanation != null)     structureExplanation(explanation,buf);
    if (!docHit.metaData().isEmpty()) {
      buf.append(""String_Node_Str"");
      for (Iterator atts=docHit.metaData().iterator(); atts.hasNext(); ) {
        Attrib attrib=(Attrib)atts.next();
        buf.append(attrib.value);
      }
      buf.append(""String_Node_Str"");
    }
    for (int j=0; j < docHit.nSnippets(); j++) {
      Snippet snippet=docHit.snippet(j,true);
      buf.append(""String_Node_Str"" + (j + 1) + ""String_Node_Str""+ Math.round(snippet.score * 100)+ ""String_Node_Str"");
      if (snippet.sectionType != null)       buf.append(""String_Node_Str"" + snippet.sectionType + ""String_Node_Str"");
      buf.append(""String_Node_Str"" + TextServlet.makeHtmlString(snippet.text,true) + ""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
  }
}","/** 
 * Does the work of turning DocHits into XML.
 * @param docHits Array of DocHits to structure
 * @param buf     Buffer to add the XML to
 */
private void structureDocHits(DocHit[] docHits,int startDoc,StringBuffer buf){
  if (docHits == null)   return;
  for (int i=0; i < docHits.length; i++) {
    DocHit docHit=docHits[i];
    String scoreStr;
    if (scoresNormalized)     scoreStr=Integer.toString(Math.round(docHit.score * 100));
 else {
      if (decFormat == null)       decFormat=(DecimalFormat)DecimalFormat.getInstance();
      scoreStr=decFormat.format(docHit.score);
    }
    buf.append(""String_Node_Str"" + ""String_Node_Str"" + (i + startDoc + 1) + ""String_Node_Str""+ ""String_Node_Str""+ TextServlet.makeHtmlString(docHit.filePath())+ ""String_Node_Str""+ ""String_Node_Str""+ scoreStr+ ""String_Node_Str""+ ""String_Node_Str""+ docHit.totalSnippets()+ ""String_Node_Str"");
    if (docHit.recordNum() > 0)     buf.append(""String_Node_Str"" + docHit.recordNum() + ""String_Node_Str"");
    if (docHit.subDocument() != null)     buf.append(""String_Node_Str"" + TextServlet.makeHtmlString(docHit.subDocument()) + ""String_Node_Str"");
    buf.append(""String_Node_Str"");
    Explanation explanation=docHit.explanation();
    if (explanation != null)     structureExplanation(explanation,buf);
    if (!docHit.metaData().isEmpty()) {
      buf.append(""String_Node_Str"");
      for (Iterator atts=docHit.metaData().iterator(); atts.hasNext(); ) {
        Attrib attrib=(Attrib)atts.next();
        buf.append(attrib.value);
      }
      buf.append(""String_Node_Str"");
    }
    for (int j=0; j < docHit.nSnippets(); j++) {
      Snippet snippet=docHit.snippet(j,true);
      buf.append(""String_Node_Str"" + (j + 1) + ""String_Node_Str""+ Math.round(snippet.score * 100)+ ""String_Node_Str"");
      if (snippet.sectionType != null)       buf.append(""String_Node_Str"" + snippet.sectionType + ""String_Node_Str"");
      buf.append(""String_Node_Str"" + TextServlet.makeHtmlString(snippet.text,true) + ""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
  }
}",0.9931372549019608
24689,"/** 
 * Search for a StructuredStore containing the ""lazy"" or persistent representation of a given document. Index parameters are specified, since often the lazy file is stored along with the index. This method is called first, and if it returns null, then  {@link #getInputSource(String,boolean)} will be called as a fall-back.
 * @param indexConfigPath Path to the index configuration file
 * @param indexName       Name of the index being searched
 * @param sourcePath      Path to the source document
 * @param preFilter       Prefilter stylesheet to run (or null for none)
 * @param removeDoctypeDecl Set to true to remove DOCTYPE declaration fromthe XML document.
 * @return                Store containing the tree, or null if nonecould be found.
 */
public StructuredStore getLazyStore(String indexConfigPath,String indexName,String sourcePath,Templates preFilter,boolean removeDoctypeDecl) throws IOException {
  TextConfig config=servlet.getConfig();
  if (config instanceof DynaXMLConfig && !((DynaXMLConfig)config).useLazyFiles)   return null;
  if (indexConfigPath == null || indexName == null)   return null;
  if (sourcePath.startsWith(""String_Node_Str""))   return null;
  if (sourcePath.startsWith(""String_Node_Str""))   return null;
  File sourceFile=new File(sourcePath);
  if (!sourceFile.isFile())   return null;
  File lazyFile=IndexUtil.calcLazyPath(new File(servlet.getRealPath(""String_Node_Str"")),new File(indexConfigPath),indexName,new File(sourcePath),false);
  boolean buildLazyFilesAlone=false;
  if (config instanceof DynaXMLConfig)   buildLazyFilesAlone=((DynaXMLConfig)config).buildLazyFilesAlone;
  if (buildLazyFilesAlone && lazyFile.canRead() && sourceFile.lastModified() > lazyFile.lastModified() && isPostIndexLazyFile(lazyFile)) {
    lazyFile.delete();
  }
  if (!lazyFile.canRead()) {
    if (!buildLazyFilesAlone)     return null;
    boolean stripWhitespace=false;
    try {
      stripWhitespace=IndexUtil.getIndexInfo(new File(indexConfigPath),indexName).stripWhitespace;
    }
 catch (    Exception e) {
    }
    buildLazyStore(lazyFile,sourcePath,preFilter,removeDoctypeDecl,stripWhitespace);
  }
  return StructuredFile.open(lazyFile);
}","/** 
 * Search for a StructuredStore containing the ""lazy"" or persistent representation of a given document. Index parameters are specified, since often the lazy file is stored along with the index. This method is called first, and if it returns null, then  {@link #getInputSource(String,boolean)} will be called as a fall-back.
 * @param indexConfigPath Path to the index configuration file
 * @param indexName       Name of the index being searched
 * @param sourcePath      Path to the source document
 * @param preFilter       Prefilter stylesheet to run (or null for none)
 * @param removeDoctypeDecl Set to true to remove DOCTYPE declaration fromthe XML document.
 * @return                Store containing the tree, or null if nonecould be found.
 */
public StructuredStore getLazyStore(String indexConfigPath,String indexName,String sourcePath,Templates preFilter,boolean removeDoctypeDecl) throws IOException {
  TextConfig config=servlet.getConfig();
  if (config instanceof DynaXMLConfig && !((DynaXMLConfig)config).useLazyFiles)   return null;
  if (indexConfigPath == null || indexName == null)   return null;
  if (sourcePath.startsWith(""String_Node_Str""))   return null;
  if (sourcePath.startsWith(""String_Node_Str""))   return null;
  File sourceFile=new File(sourcePath);
  if (!sourceFile.isFile())   return null;
  File lazyFile=calcLazyPath(new File(servlet.getRealPath(""String_Node_Str"")),new File(indexConfigPath),indexName,new File(sourcePath),false);
  boolean buildLazyFilesAlone=false;
  if (config instanceof DynaXMLConfig)   buildLazyFilesAlone=((DynaXMLConfig)config).buildLazyFilesAlone;
  if (buildLazyFilesAlone && lazyFile.canRead() && sourceFile.lastModified() > lazyFile.lastModified() && isPostIndexLazyFile(lazyFile)) {
    lazyFile.delete();
  }
  if (!lazyFile.canRead()) {
    if (!buildLazyFilesAlone)     return null;
    boolean stripWhitespace=false;
    try {
      stripWhitespace=IndexUtil.getIndexInfo(new File(indexConfigPath),indexName).stripWhitespace;
    }
 catch (    Exception e) {
    }
    buildLazyStore(lazyFile,sourcePath,preFilter,removeDoctypeDecl,stripWhitespace);
  }
  return StructuredFile.open(lazyFile);
}",0.997704315886134
24690,"/** 
 * Does the work of locating and loading the source document. Handles fetching a file from a URL, lazy file, or a plain XML file on disk. Also fires up a text query if requested.
 * @param docReq        Tells which document to load, the query toapply, tec.
 * @param transformer   The XSLT transformer that will be used on thedocument.
 * @return              An XML Source object representing the loadeddocument.
 * @throws IOException  If a problem is encountered loading a file or URL
 * @throws SAXException If the document cannot be parsed as valid XML
 * @throws ParserConfigurationException Miscellaneous configurationproblems
 */
protected Source getSourceDoc(DocRequest docReq,Transformer transformer) throws IOException, SAXException, ParserConfigurationException, InvalidDocumentException {
  Templates preFilter=null;
  if (docReq.preFilter != null) {
    try {
      preFilter=stylesheetCache.find(docReq.preFilter);
    }
 catch (    IOException e) {
      throw e;
    }
catch (    SAXException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  StructuredStore lazyStore=docLocator.getLazyStore(docReq.indexConfig,docReq.indexName,docReq.source,preFilter,docReq.removeDoctypeDecl);
  if (lazyStore == null) {
    if (docReq.query != null)     throw new UnsupportedQueryException();
    if (!docReq.source.startsWith(""String_Node_Str"")) {
      File srcFile=new File(docReq.source);
      if (!srcFile.isFile() || !srcFile.canRead())       throw new InvalidDocumentException();
    }
    XMLReader xmlReader=IndexUtil.createXMLReader();
    InputSource inSrc=docLocator.getInputSource(docReq.source,docReq.removeDoctypeDecl);
    return new SAXSource(xmlReader,inSrc);
  }
  Source sourceDoc=null;
  Controller controller=(Controller)transformer;
  Configuration config=controller.getConfiguration();
  if (docReq.query != null && docReq.query.query != null) {
    String docKey=IndexUtil.calcDocKey(new File(getRealPath(""String_Node_Str"")),new File(docReq.indexConfig),docReq.indexName,new File(docReq.source));
    SearchTree tree=new SearchTree(config,docKey,lazyStore);
    tree.search(getQueryProcessor(),docReq.query);
    sourceDoc=tree;
  }
 else {
    LazyTreeBuilder builder=new LazyTreeBuilder(config);
    builder.setNamePool(NamePool.getDefaultNamePool());
    sourceDoc=builder.load(lazyStore);
  }
  ((LazyDocument)sourceDoc).setDebug(true);
  Executable e=controller.getExecutable();
  KeyManager k=e.getKeyManager();
  if (!(k instanceof LazyKeyManager))   e.setKeyManager(new LazyKeyManager(controller.getConfiguration(),k));
  return sourceDoc;
}","/** 
 * Does the work of locating and loading the source document. Handles fetching a file from a URL, lazy file, or a plain XML file on disk. Also fires up a text query if requested.
 * @param docReq        Tells which document to load, the query toapply, tec.
 * @param transformer   The XSLT transformer that will be used on thedocument.
 * @return              An XML Source object representing the loadeddocument.
 * @throws IOException  If a problem is encountered loading a file or URL
 * @throws SAXException If the document cannot be parsed as valid XML
 * @throws ParserConfigurationException Miscellaneous configurationproblems
 */
protected Source getSourceDoc(DocRequest docReq,Transformer transformer) throws IOException, SAXException, ParserConfigurationException, InvalidDocumentException {
  Templates preFilter=null;
  if (docReq.preFilter != null) {
    try {
      preFilter=stylesheetCache.find(docReq.preFilter);
    }
 catch (    IOException e) {
      throw e;
    }
catch (    SAXException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  StructuredStore lazyStore=docLocator.getLazyStore(docReq.indexConfig,docReq.indexName,docReq.source,preFilter,docReq.removeDoctypeDecl);
  if (lazyStore == null) {
    if (docReq.query != null)     throw new UnsupportedQueryException();
    if (!docReq.source.startsWith(""String_Node_Str"")) {
      File srcFile=new File(docReq.source);
      if (!srcFile.isFile() || !srcFile.canRead())       throw new InvalidDocumentException();
    }
    XMLReader xmlReader=IndexUtil.createXMLReader();
    InputSource inSrc=docLocator.getInputSource(docReq.source,docReq.removeDoctypeDecl);
    return new SAXSource(xmlReader,inSrc);
  }
  Source sourceDoc=null;
  Controller controller=(Controller)transformer;
  Configuration config=controller.getConfiguration();
  if (docReq.query != null && docReq.query.query != null) {
    String docKey=IndexUtil.calcDocKey(new File(getRealPath(""String_Node_Str"")),new File(docReq.indexConfig),docReq.indexName,new File(docReq.source));
    SearchTree tree=new SearchTree(config,docKey,lazyStore);
    tree.search(createQueryProcessor(),docReq.query);
    sourceDoc=tree;
  }
 else {
    LazyTreeBuilder builder=new LazyTreeBuilder(config);
    builder.setNamePool(NamePool.getDefaultNamePool());
    sourceDoc=builder.load(lazyStore);
  }
  ((LazyDocument)sourceDoc).setDebug(true);
  Executable e=controller.getExecutable();
  KeyManager k=e.getKeyManager();
  if (!(k instanceof LazyKeyManager))   e.setKeyManager(new LazyKeyManager(controller.getConfiguration(),k));
  return sourceDoc;
}",0.998293191731462
24691,"/** 
 * Create a QueryProcessor. Checks the system property ""org.cdlib.xtf.QueryProcessorClass"" to see if there is a user- supplied implementation. If not, a   {@link DefaultQueryProcessor} iscreated.
 */
public static QueryProcessor createQueryProcessor(){
  final String propName=""String_Node_Str"";
  String className=System.getProperty(propName);
  Class theClass=DefaultQueryProcessor.class;
  try {
    if (className != null)     theClass=Class.forName(className);
    QueryProcessor processor=(QueryProcessor)theClass.newInstance();
    if (indexWarmer == null) {
      indexWarmer=new IndexWarmer(Path.normalizePath(TextServlet.getCurServlet().getRealPath(""String_Node_Str"")),5);
      DefaultQueryProcessor.setIndexWarmer(indexWarmer);
    }
    return processor;
  }
 catch (  ClassCastException e) {
    Trace.error(""String_Node_Str"" + className + ""String_Node_Str""+ ""String_Node_Str""+ propName+ ""String_Node_Str""+ QueryProcessor.class.getName());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    Trace.error(""String_Node_Str"" + className + ""String_Node_Str""+ propName+ ""String_Node_Str"");
    throw new RuntimeException(e);
  }
}","/** 
 * Create a QueryProcessor. Checks the system property ""org.cdlib.xtf.QueryProcessorClass"" to see if there is a user- supplied implementation. If not, a   {@link DefaultQueryProcessor} iscreated.
 */
public QueryProcessor createQueryProcessor(){
  final String propName=""String_Node_Str"";
  String className=System.getProperty(propName);
  Class theClass=DefaultQueryProcessor.class;
  try {
    if (className != null)     theClass=Class.forName(className);
    QueryProcessor processor=(QueryProcessor)theClass.newInstance();
    IndexWarmer warmer=null;
synchronized (indexWarmers) {
      String xtfHome=Path.normalizePath(TextServlet.getCurServlet().getRealPath(""String_Node_Str""));
      warmer=indexWarmers.get(xtfHome);
      if (warmer == null) {
        warmer=new IndexWarmer(xtfHome,5);
        indexWarmers.put(xtfHome,warmer);
      }
    }
    processor.setIndexWarmer(warmer);
    return processor;
  }
 catch (  ClassCastException e) {
    Trace.error(""String_Node_Str"" + className + ""String_Node_Str""+ ""String_Node_Str""+ propName+ ""String_Node_Str""+ QueryProcessor.class.getName());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    Trace.error(""String_Node_Str"" + className + ""String_Node_Str""+ propName+ ""String_Node_Str"");
    throw new RuntimeException(e);
  }
}",0.4985789687373122
24692,"/** 
 * Constructs and loads an IP map from the specified file.
 * @param path          Path to the file to load the IP map from.
 * @exception IOException   If the IP map file couldn't be opened.
 */
public IpList(String path) throws IOException {
  map=new TreeMap(new IpRangeComparator());
  readMap(path);
}","/** 
 * Constructs and loads an IP map from the specified file.
 * @param path          Path to the file to load the IP map from.
 * @exception IOException   If the IP map file couldn't be opened.
 */
public IpList(String path) throws IOException {
  ranges=new ArrayList<IpRange>();
  readRanges(path);
}",0.8733766233766234
24693,"/** 
 * Parses the given IP address and checks whether it falls within one of the positive ranges of the map, and doesn't fall in one of the excluded ranges.
 * @param ipAddrStr     A string of the form ""a.b.c.d"" where each componentis a decimal number from 0-255.
 * @return              true if and only if the address matches.
 */
public boolean isApproved(String ipAddrStr){
  IpAddr parsedAddr=new IpAddr();
  if (parsedAddr.parse(ipAddrStr) == null)   return false;
  Iterator i=map.tailMap(parsedAddr).keySet().iterator();
  boolean positive=false;
  boolean negative=false;
  while (i.hasNext()) {
    IpRange mapRange=(IpRange)i.next();
    if (!mapRange.matches(parsedAddr) && !mapRange.startAddr.componentsEqual(parsedAddr,2)) {
      break;
    }
    if (!mapRange.matches(parsedAddr))     continue;
    if (mapRange.isPositive)     positive=true;
 else     negative=true;
  }
  if (negative)   return false;
  if (positive)   return true;
  return false;
}","/** 
 * Parses the given IP address and checks whether it falls within one of the positive ranges of the map, and doesn't fall in one of the excluded ranges.
 * @param ipAddrStr     A string of the form ""a.b.c.d"" where each componentis a decimal number from 0-255.
 * @return              true if and only if the address matches.
 */
public boolean isApproved(String ipAddrStr){
  IpAddr parsedAddr=new IpAddr();
  if (parsedAddr.parse(ipAddrStr) == null)   return false;
  boolean positive=false;
  boolean negative=false;
  for (  IpRange range : ranges) {
    if (!range.matches(parsedAddr))     continue;
    if (range.isPositive)     positive=true;
 else     negative=true;
  }
  if (negative)   return false;
  if (positive)   return true;
  return false;
}",0.5635103926096998
24694,"/** 
 * Used by readMap to parse a single entry in the IP map file.
 * @param line          The line of text to parse
 * @param isPositive    true if this is an ""exclude"" line
 */
private void processEntry(String line,boolean isPositive){
  IpAddr startIp=new IpAddr();
  IpAddr endIp=new IpAddr();
  String str=line;
  str=startIp.parse(str);
  if (str == null)   return;
  str=str.trim();
  if (str.startsWith(""String_Node_Str"")) {
    str=str.substring(1).trim();
    str=endIp.parse(str);
    if (str == null)     return;
  }
 else   endIp=startIp;
  IpRange range=new IpRange(startIp,endIp,isPositive);
  map.put(range,null);
}","/** 
 * Used by readMap to parse a single entry in the IP map file.
 * @param line          The line of text to parse
 * @param isPositive    true if this is an ""exclude"" line
 */
private void processEntry(String line,boolean isPositive){
  IpAddr startIp=new IpAddr();
  IpAddr endIp=new IpAddr();
  String str=line;
  str=startIp.parse(str);
  if (str == null)   return;
  str=str.trim();
  if (str.startsWith(""String_Node_Str"")) {
    str=str.substring(1).trim();
    str=endIp.parse(str);
    if (str == null)     return;
  }
 else   endIp=startIp;
  IpRange range=new IpRange(startIp,endIp,isPositive);
  ranges.add(range);
}",0.9730586370839936
24695,"/** 
 * Checks if a specified IP address falls within the range. 
 */
boolean matches(IpAddr addr){
  for (int i=0; i < 4; i++) {
    int min=startAddr.components[i];
    int max=endAddr.components[i];
    if (min > max) {
      int tmp=min;
      min=max;
      max=tmp;
    }
    if (min == 999)     continue;
    if (addr.components[i] < min)     return false;
    if (addr.components[i] > max)     return false;
  }
  return true;
}","/** 
 * Checks if a specified IP address falls within the range. 
 */
boolean matches(IpAddr addr){
  for (int i=0; i < 4; i++) {
    int ic=addr.components[i];
    int sc=startAddr.components[i];
    if (sc == 999)     sc=0;
    if (ic < sc)     return false;
    if (ic > sc)     break;
  }
  for (int i=0; i < 4; i++) {
    int ic=addr.components[i];
    int ec=endAddr.components[i];
    if (ec == 999)     ec=255;
    if (ic > ec)     return false;
    if (ic < ec)     break;
  }
  return true;
}",0.6076759061833689
24696,"/** 
 * Utility function to delete a specified directory and all its files and subdirectories. <br><br>
 * @return <code>true</code> - Directory and associated files and sub-directories successfully deleted. <br> <code>false</code> - Error deleting specified directory or one of its files or sub-directories. <br><br>
 */
public static boolean deleteDir(File dir){
  if (dir.isDirectory()) {
    String[] children=dir.list();
    for (int i=0; i < children.length; i++) {
      boolean success=deleteDir(new File(dir,children[i]));
      if (!success)       return false;
    }
  }
  return dir.delete();
}","/** 
 * Utility function to delete a specified directory and all its files and subdirectories. <br><br>
 * @return <code>true</code> - Directory and associated files and sub-directories successfully deleted. <br> <code>false</code> - Error deleting specified directory or one of its files or sub-directories. <br><br>
 */
public static void deleteDir(File dir) throws IOException {
  if (dir.isDirectory()) {
    String[] children=dir.list();
    for (int i=0; i < children.length; i++)     deleteDir(new File(dir,children[i]));
  }
  if (!dir.delete()) {
    throw new IOException(""String_Node_Str"" + dir.toString() + ""String_Node_Str"");
  }
}",0.7664
24697,"/** 
 * Makes a Saxon Receiver that will transparently add a session IDs to URLs if they match the servlet URL, or other patterns configured in the conf file.
 * @param trans   The transformer that will do the work
 * @param req     The servlet request being processed
 * @param res     The servlet response to output to
 * @return        A Receiver suitable for the target of the transform
 */
public Receiver createFilteredReceiver(Transformer trans,HttpServletRequest req,HttpServletResponse res) throws XPathException, IOException {
  StreamResult stream=new StreamResult(res.getOutputStream());
  Controller controller=(Controller)trans;
  SerializerFactory factory=controller.getConfiguration().getSerializerFactory();
  Receiver target=factory.getReceiver(stream,controller.makePipelineConfiguration(),trans.getOutputProperties());
  TextConfig config=getConfig();
  if (config.trackSessions && config.sessionEncodeURLPattern != null)   return new SessionURLRewriter(target,config.sessionEncodeURLPattern,req,res);
 else   return target;
}","/** 
 * Makes a Saxon Receiver that will transparently add a session IDs to URLs if they match the servlet URL, or other patterns configured in the conf file.
 * @param trans   The transformer that will do the work
 * @param req     The servlet request being processed
 * @param res     The servlet response to output to
 * @return        A Receiver suitable for the target of the transform
 */
public Result createFilteredReceiver(Transformer trans,HttpServletRequest req,HttpServletResponse res) throws XPathException, IOException {
  StreamResult stream=new StreamResult(res.getOutputStream());
  TextConfig config=getConfig();
  if (config.trackSessions && config.sessionEncodeURLPattern != null) {
    Controller controller=(Controller)trans;
    SerializerFactory factory=controller.getConfiguration().getSerializerFactory();
    Receiver target=factory.getReceiver(stream,controller.makePipelineConfiguration(),trans.getOutputProperties());
    return new SessionURLRewriter(target,config.sessionEncodeURLPattern,req,res);
  }
 else {
    return stream;
  }
}",0.8096590909090909
24698,"/** 
 * Performs user authentication for a request, given the authentication info for the document. In the case of testing, we never fail authentication.
 */
protected boolean authenticate(LinkedList docKey,DocRequest docInfo,HttpServletRequest req,HttpServletResponse res) throws Exception {
  return true;
}","/** 
 * Performs user authentication for a request, given the authentication info for the document. In the case of testing, we never fail authentication.
 */
@Override protected boolean authenticate(DocRequest docReq,HttpServletRequest req,HttpServletResponse res) throws Exception {
  return true;
}",0.8899835796387521
24699,"/** 
 * Does the work of locating and loading the source document. Handles fetching a file from a URL, lazy file, or a plain XML file on disk. Also fires up a text query if requested.
 * @param docInfo       Tells which document to load, the query toapply, tec.
 * @param transformer   The XSLT transformer that will be used on thedocument.
 * @return              An XML Source object representing the loadeddocument.
 * @throws IOException  If a problem is encountered loading a file or URL
 * @throws SAXException If the document cannot be parsed as valid XML
 * @throws ParserConfigurationException Miscellaneous configurationproblems
 */
protected Source getSourceDoc(DocRequest docInfo,Transformer transformer) throws IOException, SAXException, ParserConfigurationException {
  forceLazy=true;
  if (!useAnnotated) {
    Source realSrc=super.getSourceDoc(docInfo,transformer);
    if (dump)     dumpTree(""String_Node_Str"",realSrc);
    return realSrc;
  }
  Controller c=(Controller)transformer;
  Executable e=c.getExecutable();
  KeyManager k=e.getKeyManager();
  if (k instanceof LazyKeyManager)   e.setKeyManager(new KeyManager(c.getConfiguration()));
  e.setStripsWhitespace(false);
  try {
    Source src=getAnnotatedTree(docInfo.source);
    if (dump)     dumpTree(""String_Node_Str"",src);
    return src;
  }
 catch (  TransformerException ex) {
    throw new RuntimeException(ex);
  }
}","/** 
 * Does the work of locating and loading the source document. Handles fetching a file from a URL, lazy file, or a plain XML file on disk. Also fires up a text query if requested.
 * @param docReq       Tells which document to load, the query toapply, tec.
 * @param transformer   The XSLT transformer that will be used on thedocument.
 * @return              An XML Source object representing the loadeddocument.
 * @throws IOException  If a problem is encountered loading a file or URL
 * @throws SAXException If the document cannot be parsed as valid XML
 * @throws ParserConfigurationException Miscellaneous configurationproblems
 */
protected Source getSourceDoc(DocRequest docReq,Transformer transformer) throws IOException, SAXException, ParserConfigurationException {
  forceLazy=true;
  if (!useAnnotated) {
    Source realSrc=super.getSourceDoc(docReq,transformer);
    if (dump)     dumpTree(""String_Node_Str"",realSrc);
    return realSrc;
  }
  Controller c=(Controller)transformer;
  Executable e=c.getExecutable();
  KeyManager k=e.getKeyManager();
  if (k instanceof LazyKeyManager)   e.setKeyManager(new KeyManager(c.getConfiguration()));
  e.setStripsWhitespace(false);
  try {
    Source src=getAnnotatedTree(docReq.source);
    if (dump)     dumpTree(""String_Node_Str"",src);
    return src;
  }
 catch (  TransformerException ex) {
    throw new RuntimeException(ex);
  }
}",0.9899856938483548
24700,"/** 
 * Mark terms up to (but not including) 'wordPos' 
 */
private void markTerms(WordIter iter,int fromPos,int toPos,boolean markStopWords){
  if (terms == null)   return;
  iter.seekFirst(fromPos,true);
  while (true) {
    if (tmpPos == null)     tmpPos=iter.getPos(WordIter.TERM_START);
 else     iter.getPos(tmpPos,WordIter.TERM_START);
    if (tmpPos.wordPos() < fromPos)     break;
    if (tmpPos.wordPos() >= toPos)     break;
    String term=iter.term();
    if (terms.contains(term)) {
      if (markStopWords || stopSet == null || !stopSet.contains(term)) {
        collector.term((MarkPos)tmpPos.clone(),iter.getPos(WordIter.TERM_END),term);
      }
    }
    if (!iter.next(true))     break;
  }
  if (toPos < Integer.MAX_VALUE)   iter.seekLast(toPos - 1,true);
  termsMarkedPos=toPos;
}","/** 
 * Mark terms up to (but not including) 'wordPos' 
 */
private void markTerms(WordIter iter,int fromPos,int toPos,boolean markStopWords){
  if (terms == null)   return;
  if (fromPos == toPos)   return;
  iter.seekFirst(fromPos,true);
  while (true) {
    if (tmpPos == null)     tmpPos=iter.getPos(WordIter.TERM_START);
 else     iter.getPos(tmpPos,WordIter.TERM_START);
    if (tmpPos.wordPos() < fromPos)     break;
    if (tmpPos.wordPos() >= toPos)     break;
    String term=iter.term();
    if (terms.contains(term)) {
      if (markStopWords || stopSet == null || !stopSet.contains(term)) {
        collector.term((MarkPos)tmpPos.clone(),iter.getPos(WordIter.TERM_END),term);
      }
    }
    if (!iter.next(true))     break;
  }
  if (toPos < Integer.MAX_VALUE)   iter.seekLast(toPos - 1,true);
  termsMarkedPos=toPos;
}",0.9792176039119804
24701,"/** 
 * Performs all the manipulations and marking for a meta-data field.
 * @param name      Name of the field
 * @param value     Raw string value of the field
 * @param docContents   Where to get spans from
 * @param metaData  Where to put the resulting data
 * @param isTokenized true if the field was tokenized and should bemarked.
 */
private void loadMetaField(String name,String value,Document docContents,AttribList metaData,boolean isTokenized){
  String markedValue;
  if (isTokenized)   markedValue=snippetMaker.markField(docContents,fieldSpans,name,value);
 else   markedValue=value;
  StringBuffer buf=new StringBuffer(markedValue.length() * 2);
  int prevStart=0;
  boolean startFound=false;
  for (int i=0; i < markedValue.length(); i++) {
    char c=markedValue.charAt(i);
    if (c == Constants.FIELD_START_MARKER) {
      startFound=true;
      if (i > 0 && markedValue.charAt(i - 1) == '>') {
        int tagStart=buf.lastIndexOf(""String_Node_Str"");
        if (tagStart < prevStart)         throw new RuntimeException(""String_Node_Str"");
        buf.replace(tagStart + 1,tagStart + 2,name);
      }
 else {
        buf.append(""String_Node_Str"");
        buf.append(name);
        buf.append(""String_Node_Str"");
      }
    }
 else     if (c == Constants.FIELD_END_MARKER) {
      buf.append(""String_Node_Str"");
      buf.append(name);
      buf.append(""String_Node_Str"");
    }
 else     buf.append(c);
  }
  if (!startFound) {
    buf.insert(0,""String_Node_Str"" + name + ""String_Node_Str"");
    buf.append(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  markedValue=buf.toString();
  if (markedValue.indexOf(bumpMarker) < 0) {
    metaData.put(name,markedValue);
    return;
  }
  int startPos=0;
  while (startPos < markedValue.length()) {
    int bumpPos=markedValue.indexOf(bumpMarker,startPos);
    if (bumpPos < 0) {
      metaData.put(name,markedValue.substring(startPos));
      break;
    }
    String val=markedValue.substring(startPos,bumpPos);
    metaData.put(name,val);
    startPos=1 + markedValue.indexOf(bumpMarker,bumpPos + 1);
    if (Character.isWhitespace(markedValue.charAt(startPos)))     startPos++;
  }
}","/** 
 * Performs all the manipulations and marking for a meta-data field.
 * @param name      Name of the field
 * @param value     Raw string value of the field
 * @param docContents   Where to get spans from
 * @param metaData  Where to put the resulting data
 * @param isTokenized true if the field was tokenized and should bemarked.
 */
private void loadMetaField(String name,String value,Document docContents,AttribList metaData,boolean isTokenized){
  String markedValue;
  if (isTokenized)   markedValue=snippetMaker.markField(docContents,fieldSpans,name,value);
 else   markedValue=value;
  StringBuffer buf=new StringBuffer(markedValue.length() * 2);
  int prevStart=0;
  boolean startFound=false;
  for (int i=0; i < markedValue.length(); i++) {
    char c=markedValue.charAt(i);
    if (c == Constants.FIELD_START_MARKER) {
      startFound=true;
      if (i > 0 && markedValue.charAt(i - 1) == '>') {
        int tagStart=buf.lastIndexOf(""String_Node_Str"");
        if (tagStart < prevStart)         throw new RuntimeException(""String_Node_Str"");
        buf.replace(tagStart + 1,tagStart + 2,name);
      }
 else {
        buf.append(""String_Node_Str"");
        buf.append(name);
        buf.append(""String_Node_Str"");
      }
    }
 else     if (c == Constants.FIELD_END_MARKER) {
      buf.append(""String_Node_Str"");
      buf.append(name);
      buf.append(""String_Node_Str"");
    }
 else     buf.append(c);
  }
  if (!startFound) {
    if (buf.substring(0,3).equals(""String_Node_Str""))     buf.replace(1,2,name);
 else     buf.insert(0,""String_Node_Str"" + name + ""String_Node_Str"");
    buf.append(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  markedValue=buf.toString();
  if (markedValue.indexOf(bumpMarker) < 0) {
    metaData.put(name,markedValue);
    return;
  }
  int startPos=0;
  while (startPos < markedValue.length()) {
    int bumpPos=markedValue.indexOf(bumpMarker,startPos);
    if (bumpPos < 0) {
      metaData.put(name,markedValue.substring(startPos));
      break;
    }
    String val=markedValue.substring(startPos,bumpPos);
    metaData.put(name,val);
    startPos=1 + markedValue.indexOf(bumpMarker,bumpPos + 1);
    if (Character.isWhitespace(markedValue.charAt(startPos)))     startPos++;
  }
}",0.9802137821241756
24702,"/** 
 * Re-sort the hierarchy according to the facet spec, and store the new child/sibling relationships.
 */
private void sortGroups(){
  int sortKind;
  if (spec.sortGroupsBy.equals(""String_Node_Str""))   sortKind=SORT_BY_VALUE;
 else   if (spec.sortGroupsBy.equals(""String_Node_Str""))   sortKind=SORT_BY_TOTAL_DOCS;
 else   if (spec.sortGroupsBy.equals(""String_Node_Str""))   sortKind=SORT_BY_MAX_DOC_SCORE;
 else   throw new RuntimeException(""String_Node_Str"" + spec.sortGroupsBy);
  if (!data.isDynamic() && sortKind == SORT_BY_VALUE)   return;
  sortedChild=new int[data.nGroups()];
  sortedSibling=new int[data.nGroups()];
  Arrays.fill(sortedChild,-1);
  Arrays.fill(sortedSibling,-1);
  sortChildren(0,sortKind);
}","/** 
 * Re-sort the hierarchy according to the facet spec, and store the new child/sibling relationships.
 */
private void sortGroups(){
}",0.3213038416763679
24703,"/** 
 * Loads the source document, optionally performs a text search on it, and then runs the document formatter to produce the final HTML result page.
 * @param docInfo    Document information (stylesheet, source, etc.)
 * @param req        The original HTTP request
 * @param res        Where to send the HTML response
 * @exception TransformerException  If there's an error in the stylesheet.
 * @exception IOException           If stylesheet or source can't be read.
 */
private void apply(DocInfo docInfo,HttpServletRequest req,HttpServletResponse res) throws Exception {
  boolean dump=false;
  Templates pss=stylesheetCache.find(docInfo.style);
  res.setContentType(calcMimeType(pss));
  Transformer transformer=pss.newTransformer();
  stuffAttribs(transformer,req);
  stuffAttribs(transformer,config.attribs);
  readBranding(docInfo.brand,req,transformer);
  Source sourceDoc=getSourceDoc(docInfo,transformer);
  String raw=req.getParameter(""String_Node_Str"");
  if (""String_Node_Str"".equals(raw) || ""String_Node_Str"".equals(raw) || ""String_Node_Str"".equals(raw)) {
    res.setContentType(""String_Node_Str"");
    transformer=IndexUtil.createTransformer();
    Properties props=transformer.getOutputProperties();
    props.put(""String_Node_Str"",""String_Node_Str"");
    props.put(""String_Node_Str"",""String_Node_Str"");
    transformer.setOutputProperties(props);
  }
  if (dump && sourceDoc instanceof PersistentTree)   ((PersistentTree)sourceDoc).setAllPermanent(true);
  if (!(transformer.getErrorListener() instanceof XTFSaxonErrorListener))   transformer.setErrorListener(new XTFSaxonErrorListener());
  ((Controller)transformer).getExecutable().setStripsWhitespace(false);
  try {
    transformer.transform(sourceDoc,createFilteredReceiver(transformer,req,res));
  }
 catch (  Exception e) {
    if (config.stylesheetProfiling) {
      Trace.info(""String_Node_Str"" + getRequestURL(req));
      Trace.tab();
      ((PersistentTree)sourceDoc).printProfile();
      Trace.untab();
      Trace.info(""String_Node_Str"");
    }
    if (dump && sourceDoc instanceof SearchTree) {
      ((SearchTree)sourceDoc).pruneUnused();
      File file=new File(""String_Node_Str"");
      Trace.info(""String_Node_Str"" + file.getAbsolutePath());
      PrintWriter outWriter=new PrintWriter(new OutputStreamWriter(new FileOutputStream(file),""String_Node_Str""));
      outWriter.println(XMLWriter.toString(sourceDoc));
      outWriter.close();
    }
    throw e;
  }
  if (config.stylesheetProfiling) {
    Trace.info(""String_Node_Str"" + getRequestURL(req));
    Trace.tab();
    ((PersistentTree)sourceDoc).printProfile();
    Trace.untab();
    Trace.info(""String_Node_Str"");
  }
  if (dump && sourceDoc instanceof SearchTree) {
    ((SearchTree)sourceDoc).pruneUnused();
    File file=new File(""String_Node_Str"");
    Trace.info(""String_Node_Str"" + file.getAbsolutePath());
    PrintWriter outWriter=new PrintWriter(new OutputStreamWriter(new FileOutputStream(file),""String_Node_Str""));
    outWriter.println(XMLWriter.toString(sourceDoc));
    outWriter.close();
  }
  if (sourceDoc instanceof PersistentTree)   ((PersistentTree)sourceDoc).close();
}","/** 
 * Loads the source document, optionally performs a text search on it, and then runs the document formatter to produce the final HTML result page.
 * @param docInfo    Document information (stylesheet, source, etc.)
 * @param req        The original HTTP request
 * @param res        Where to send the HTML response
 * @exception TransformerException  If there's an error in the stylesheet.
 * @exception IOException           If stylesheet or source can't be read.
 */
private void apply(DocInfo docInfo,HttpServletRequest req,HttpServletResponse res) throws Exception {
  boolean dump=false;
  Templates pss=stylesheetCache.find(docInfo.style);
  res.setContentType(calcMimeType(pss));
  Transformer transformer=pss.newTransformer();
  stuffAttribs(transformer,req);
  stuffAttribs(transformer,config.attribs);
  readBranding(docInfo.brand,req,transformer);
  Source sourceDoc=getSourceDoc(docInfo,transformer);
  String raw=req.getParameter(""String_Node_Str"");
  if (""String_Node_Str"".equals(raw) || ""String_Node_Str"".equals(raw) || ""String_Node_Str"".equals(raw)) {
    res.setContentType(""String_Node_Str"");
    transformer=IndexUtil.createTransformer();
    Properties props=transformer.getOutputProperties();
    props.put(""String_Node_Str"",""String_Node_Str"");
    props.put(""String_Node_Str"",""String_Node_Str"");
    transformer.setOutputProperties(props);
  }
  if (dump && sourceDoc instanceof PersistentTree)   ((PersistentTree)sourceDoc).setAllPermanent(true);
  if (!(transformer.getErrorListener() instanceof XTFSaxonErrorListener))   transformer.setErrorListener(new XTFSaxonErrorListener());
  ((Controller)transformer).getExecutable().setStripsWhitespace(false);
  try {
    transformer.transform(sourceDoc,createFilteredReceiver(transformer,req,res));
  }
  finally {
    if (config.stylesheetProfiling) {
      Trace.info(""String_Node_Str"" + getRequestURL(req));
      Trace.tab();
      ((PersistentTree)sourceDoc).printProfile();
      Trace.untab();
      Trace.info(""String_Node_Str"");
    }
    if (dump && sourceDoc instanceof SearchTree) {
      ((SearchTree)sourceDoc).pruneUnused();
      File file=new File(""String_Node_Str"");
      Trace.info(""String_Node_Str"" + file.getAbsolutePath());
      PrintWriter outWriter=new PrintWriter(new OutputStreamWriter(new FileOutputStream(file),""String_Node_Str""));
      outWriter.println(XMLWriter.toString(sourceDoc));
      outWriter.close();
    }
    if (sourceDoc instanceof PersistentTree)     ((PersistentTree)sourceDoc).close();
  }
}",0.8581535196321188
24704,"/** 
 * Handles the HTTP 'get' method. Based on the HTTP request, produces an appropriate response.
 * @param req            The HTTP request
 * @param res            The HTTP response
 * @exception IOException    If unable to write the output stream.
 */
public void doGet(HttpServletRequest req,HttpServletResponse res) throws IOException {
  try {
    String source=req.getParameter(""String_Node_Str"");
    stylesheetCache.enableProfiling(config.stylesheetProfiling);
    res.setContentType(""String_Node_Str"");
    Trace.debug(""String_Node_Str"" + getRequestURL(req));
    StringTokenizer st=new StringTokenizer(config.docLookupParams,""String_Node_Str"");
    LinkedList docKey=new LinkedList();
    while (st.hasMoreTokens()) {
      String name=st.nextToken();
      String value=req.getParameter(name);
      if (value != null) {
        docKey.add(name);
        docKey.add(convertUTF8inURL(value));
      }
    }
    DocInfo docInfo=docLookupCache.find(docKey);
    if (!isEmpty(source) && source.startsWith(""String_Node_Str"")) {
      docInfo=new DocInfo(docInfo);
      docInfo.source=source;
    }
 else {
      File docFile=new File(docInfo.source);
      if (!docFile.canRead())       throw new InvalidDocumentException();
    }
    if (!authenticate(docKey,docInfo,req,res))     return;
    apply(docInfo,req,res);
  }
 catch (  Exception e) {
    if (!(e instanceof RedirectException)) {
      try {
        genErrorPage(req,res,e);
      }
 catch (      RedirectException re) {
      }
    }
    return;
  }
}","/** 
 * Handles the HTTP 'get' method. Based on the HTTP request, produces an appropriate response.
 * @param req            The HTTP request
 * @param res            The HTTP response
 * @exception IOException    If unable to write the output stream.
 */
public void doGet(HttpServletRequest req,HttpServletResponse res) throws IOException {
  try {
    String source=req.getParameter(""String_Node_Str"");
    stylesheetCache.enableProfiling(config.stylesheetProfiling);
    res.setContentType(""String_Node_Str"");
    Trace.debug(""String_Node_Str"" + getRequestURL(req));
    StringTokenizer st=new StringTokenizer(config.docLookupParams,""String_Node_Str"");
    LinkedList docKey=new LinkedList();
    while (st.hasMoreTokens()) {
      String name=st.nextToken();
      String value=req.getParameter(name);
      if (value != null) {
        docKey.add(name);
        docKey.add(convertUTF8inURL(value));
      }
    }
    DocInfo docInfo=docLookupCache.find(docKey);
    if (!isEmpty(source) && source.startsWith(""String_Node_Str"")) {
      docInfo=new DocInfo(docInfo);
      docInfo.source=source;
    }
 else {
      File docFile=new File(docInfo.source);
      if (!docFile.canRead())       throw new InvalidDocumentException();
    }
    if (!authenticate(docKey,docInfo,req,res))     return;
    apply(docInfo,req,res);
  }
 catch (  Exception e) {
    if (!(e instanceof RedirectException) && !(e instanceof SocketException)) {
      try {
        genErrorPage(req,res,e);
      }
 catch (      RedirectException re) {
      }
    }
    return;
  }
}",0.9886400519311912
24705,"/** 
 * Construct an Attribute node for the n'th attribute of a given element
 * @param element The element containing the relevant attribute
 * @param index The index position of the attribute starting at zero
 */
public AttributeImpl(ElementImpl element,int index){
  this.index=index;
  this.element=element;
  nameCode=element.attrNames[index];
}","/** 
 * Construct an Attribute node for the n'th attribute of a given element
 * @param element The element containing the relevant attribute
 * @param index The index position of the attribute starting at zero
 */
public AttributeImpl(ElementImpl element,int index){
  this.document=element.document;
  this.index=index;
  this.element=element;
  nameCode=element.attrNames[index];
}",0.9536784741144414
24706,"/** 
 * Adds the top-level &lt;xtf:snippets&gt; element. If its children are fetched later, they'll be created on the fly.
 */
private void addSnippets(){
  ElementImpl rootKid=(ElementImpl)getNode(1);
  topSnippetNode=addElement(rootKid,snippetsElementCode,2,true);
  topSnippetNode.setAttribute(0,totalHitCountAttrCode,(docHit != null) ? Integer.toString(docHit.totalSnippets()) : ""String_Node_Str"");
  topSnippetNode.setAttribute(1,hitCountAttrCode,Integer.toString(nHits));
  if (nHits > 0)   topSnippetNode.childNum=SNIPPET_MARKER + 0;
}","/** 
 * Adds the top-level &lt;xtf:snippets&gt; element. If its children are fetched later, they'll be created on the fly.
 */
private void addSnippets(){
  ElementImpl rootKid=getRootKid();
  topSnippetNode=addElement(rootKid,snippetsElementCode,2,true);
  topSnippetNode.setAttribute(0,totalHitCountAttrCode,(docHit != null) ? Integer.toString(docHit.totalSnippets()) : ""String_Node_Str"");
  topSnippetNode.setAttribute(1,hitCountAttrCode,Integer.toString(nHits));
  if (nHits > 0)   topSnippetNode.childNum=SNIPPET_MARKER + 0;
}",0.9692451071761417
24707,"/** 
 * Add a value to the end of the list, expanding the array if necessary 
 */
public final void add(long value){
  if (size == data.length)   resize(size * 3 / 2);
  data[size++]=value;
}","/** 
 * Add a value to the end of the list, expanding the array if necessary 
 */
public final void add(long value){
  if (size == data.length)   resize(Math.max(size + 5,size * 3 / 2));
  data[size++]=value;
}",0.9526184538653366
24708,"/** 
 * Callback interface for SAX: not for application use
 */
public void comment(CharSequence chars,int locationId,int properties) throws XPathException {
  if (tree.commentBuffer == null) {
    tree.commentBuffer=new FastStringBuffer(200);
  }
  int s=tree.commentBuffer.length();
  tree.commentBuffer.append(chars.toString());
  nodeNr=tree.addNode(Type.COMMENT,currentDepth,s,chars.length(),-1);
  int prev=prevAtDepth[currentDepth];
  if (prev > 0) {
    tree.next[prev]=nodeNr;
  }
  tree.next[nodeNr]=prevAtDepth[currentDepth - 1];
  prevAtDepth[currentDepth]=nodeNr;
  siblingsAtDepth[currentDepth]++;
}","/** 
 * Callback interface for SAX: not for application use
 */
public void comment(CharSequence chars,int locationId,int properties) throws XPathException {
}",0.4119170984455959
24709,"/** 
 * Callback interface for SAX: not for application use<BR>
 */
public void processingInstruction(String piname,CharSequence remainder,int locationId,int properties) throws XPathException {
  if (tree.commentBuffer == null) {
    tree.commentBuffer=new FastStringBuffer(200);
  }
  int s=tree.commentBuffer.length();
  tree.commentBuffer.append(remainder.toString());
  int nameCode=namePool.allocate(""String_Node_Str"",""String_Node_Str"",piname);
  nodeNr=tree.addNode(Type.PROCESSING_INSTRUCTION,currentDepth,s,remainder.length(),nameCode);
  int prev=prevAtDepth[currentDepth];
  if (prev > 0) {
    tree.next[prev]=nodeNr;
  }
  tree.next[nodeNr]=prevAtDepth[currentDepth - 1];
  prevAtDepth[currentDepth]=nodeNr;
  siblingsAtDepth[currentDepth]++;
  LocationProvider locator=pipe.getLocationProvider();
  if (locator instanceof SourceLocationProvider) {
    tree.setSystemId(nodeNr,locator.getSystemId(locationId));
    if (lineNumbering) {
      tree.setLineNumber(nodeNr,locator.getLineNumber(locationId));
    }
  }
}","/** 
 * Callback interface for SAX: not for application use<BR>
 */
public void processingInstruction(String piname,CharSequence remainder,int locationId,int properties) throws XPathException {
}",0.3191489361702128
24710,"/** 
 * Read an existing frequency file, and add it to a file sorter.
 */
private void readFreqs(File inFile,FileSorter out,ProgressTracker prog) throws IOException {
  if (!inFile.canRead())   return;
  CountedInputStream countedIn=new CountedInputStream(new FileInputStream(inFile));
  BufferedReader freqReader=new BufferedReader(new InputStreamReader(countedIn));
  int lineCt=0;
  while (true) {
    String line=freqReader.readLine();
    if (line == null)     break;
    out.addLine(line);
    if ((lineCt++ & 0xfff) == 0)     prog.progress(countedIn.nRead(),inFile.length(),""String_Node_Str"");
  }
  freqReader.close();
}","/** 
 * Read an existing frequency file, and add it to a file sorter.
 */
private void readFreqs(File inFile,FileSorter out,ProgressTracker prog) throws IOException {
  if (!inFile.canRead())   return;
  CountedInputStream countedIn=new CountedInputStream(new FileInputStream(inFile));
  BufferedReader freqReader=new BufferedReader(new InputStreamReader(countedIn,""String_Node_Str""));
  int lineCt=0;
  while (true) {
    String line=freqReader.readLine();
    if (line == null)     break;
    out.addLine(line);
    if ((lineCt++ & 0xfff) == 0)     prog.progress(countedIn.nRead(),inFile.length(),""String_Node_Str"");
  }
  freqReader.close();
}",0.9858712715855572
24711,"/** 
 * Utility function that takes care of rewriting a series of span query clauses.
 * @param oldQuery    Query being rewritten
 * @param oldClauses  Clauses to rewrite
 * @param promoteSingle true to allow single-clause result to be returned,false to force wrapping.
 * @param joiner      Handles joining new clauses into wrapper query
 * @return            New rewritten query, or 'oldQuery' if no changes.
 */
protected Query rewriteClauses(Query oldQuery,SpanQuery[] oldClauses,boolean promoteSingle,SpanClauseJoiner joiner){
  Vector newClauses=new Vector();
  boolean anyChanges=false;
  for (int i=0; i < oldClauses.length; i++) {
    SpanQuery clause=(SpanQuery)rewriteQuery(oldClauses[i]);
    if (clause != oldClauses[i])     anyChanges=true;
    if (clause == null)     continue;
    newClauses.add(clause);
  }
  boolean force=forceRewrite(oldQuery);
  if (!anyChanges && !force)   return oldQuery;
  if (newClauses.isEmpty())   return null;
  if (newClauses.size() == 1) {
    return combineBoost(oldQuery,(SpanQuery)newClauses.get(0));
  }
  SpanQuery[] newArray=(SpanQuery[])newClauses.toArray(new SpanQuery[newClauses.size()]);
  Query newQuery=joiner.join(newArray);
  return copyBoost(oldQuery,newQuery);
}","/** 
 * Utility function that takes care of rewriting a series of span query clauses.
 * @param oldQuery    Query being rewritten
 * @param oldClauses  Clauses to rewrite
 * @param promoteSingle true to allow single-clause result to be returned,false to force wrapping.
 * @param joiner      Handles joining new clauses into wrapper query
 * @return            New rewritten query, or 'oldQuery' if no changes.
 */
protected Query rewriteClauses(Query oldQuery,SpanQuery[] oldClauses,boolean promoteSingle,SpanClauseJoiner joiner){
  Vector newClauses=new Vector();
  boolean anyChanges=false;
  for (int i=0; i < oldClauses.length; i++) {
    SpanQuery clause=(SpanQuery)rewriteQuery(oldClauses[i]);
    if (clause != oldClauses[i])     anyChanges=true;
    if (clause == null)     continue;
    newClauses.add(clause);
  }
  boolean force=forceRewrite(oldQuery);
  if (!anyChanges && !force)   return oldQuery;
  if (newClauses.isEmpty())   return null;
  if (newClauses.size() == 1 && promoteSingle) {
    return combineBoost(oldQuery,(SpanQuery)newClauses.get(0));
  }
  SpanQuery[] newArray=(SpanQuery[])newClauses.toArray(new SpanQuery[newClauses.size()]);
  Query newQuery=joiner.join(newArray);
  return copyBoost(oldQuery,newQuery);
}",0.9931146213041716
24712,"public Spans getSpans(final IndexReader reader,final Searcher searcher) throws IOException {
  return new Spans(){
    private Spans includeSpans=include.getSpans(reader,searcher);
    private boolean moreInclude=true;
    private Spans excludeSpans=exclude.getSpans(reader,searcher);
    private boolean moreExclude=true;
    public boolean next() throws IOException {
      if (moreInclude)       moreInclude=includeSpans.next();
      return advance();
    }
    private boolean advance() throws IOException {
      while (moreInclude && moreExclude) {
        if (includeSpans.doc() > excludeSpans.doc())         moreExclude=excludeSpans.skipTo(includeSpans.doc());
        while (moreExclude && includeSpans.doc() == excludeSpans.doc() && excludeSpans.end() <= (includeSpans.start() - slop)) {
          moreExclude=excludeSpans.next();
        }
        if (!moreExclude || includeSpans.doc() != excludeSpans.doc() || excludeSpans.start() >= (includeSpans.end() + slop))         break;
        moreInclude=includeSpans.next();
      }
      return moreInclude;
    }
    public boolean skipTo(    int target) throws IOException {
      if (moreInclude)       moreInclude=includeSpans.skipTo(target);
      return advance();
    }
    public int doc(){
      return includeSpans.doc();
    }
    public int start(){
      return includeSpans.start();
    }
    public int end(){
      return includeSpans.end();
    }
    public float score(){
      return includeSpans.score() * getBoost();
    }
    public String toString(){
      return ""String_Node_Str"" + SpanNotNearQuery.this.toString() + ""String_Node_Str"";
    }
    public Explanation explain() throws IOException {
      if (getBoost() == 1.0f)       return includeSpans.explain();
      Explanation result=new Explanation(0,""String_Node_Str"" + toString() + ""String_Node_Str"");
      Explanation boostExpl=new Explanation(getBoost(),""String_Node_Str"");
      result.addDetail(boostExpl);
      Explanation inclExpl=includeSpans.explain();
      result.addDetail(inclExpl);
      result.setValue(boostExpl.getValue() * inclExpl.getValue());
      return result;
    }
  }
;
}","public Spans getSpans(final IndexReader reader,final Searcher searcher) throws IOException {
  return new Spans(){
    private Spans includeSpans=include.getSpans(reader,searcher);
    private boolean moreInclude=true;
    private Spans excludeSpans=exclude.getSpans(reader,searcher);
    private boolean moreExclude=excludeSpans.next();
    public boolean next() throws IOException {
      if (moreInclude)       moreInclude=includeSpans.next();
      return advance();
    }
    private boolean advance() throws IOException {
      while (moreInclude && moreExclude) {
        if (includeSpans.doc() > excludeSpans.doc())         moreExclude=excludeSpans.skipTo(includeSpans.doc());
        while (moreExclude && includeSpans.doc() == excludeSpans.doc() && excludeSpans.end() <= (includeSpans.start() - slop)) {
          moreExclude=excludeSpans.next();
        }
        if (!moreExclude || includeSpans.doc() != excludeSpans.doc() || excludeSpans.start() >= (includeSpans.end() + slop))         break;
        moreInclude=includeSpans.next();
      }
      return moreInclude;
    }
    public boolean skipTo(    int target) throws IOException {
      if (moreInclude)       moreInclude=includeSpans.skipTo(target);
      return advance();
    }
    public int doc(){
      return includeSpans.doc();
    }
    public int start(){
      return includeSpans.start();
    }
    public int end(){
      return includeSpans.end();
    }
    public float score(){
      return includeSpans.score() * getBoost();
    }
    public String toString(){
      return ""String_Node_Str"" + SpanNotNearQuery.this.toString() + ""String_Node_Str"";
    }
    public Explanation explain() throws IOException {
      if (getBoost() == 1.0f)       return includeSpans.explain();
      Explanation result=new Explanation(0,""String_Node_Str"" + toString() + ""String_Node_Str"");
      Explanation boostExpl=new Explanation(getBoost(),""String_Node_Str"");
      result.addDetail(boostExpl);
      Explanation inclExpl=includeSpans.explain();
      result.addDetail(inclExpl);
      result.setValue(boostExpl.getValue() * inclExpl.getValue());
      return result;
    }
  }
;
}",0.9946424411833216
24713,"public Spans getSpans(final IndexReader reader,final Searcher searcher) throws IOException {
  return new Spans(){
    private Spans includeSpans=include.getSpans(reader,searcher);
    private boolean moreInclude=true;
    private Spans excludeSpans=exclude.getSpans(reader,searcher);
    private boolean moreExclude=true;
    public boolean next() throws IOException {
      if (moreInclude)       moreInclude=includeSpans.next();
      while (moreInclude && moreExclude) {
        if (includeSpans.doc() > excludeSpans.doc())         moreExclude=excludeSpans.skipTo(includeSpans.doc());
        while (moreExclude && includeSpans.doc() == excludeSpans.doc() && excludeSpans.end() <= includeSpans.start()) {
          moreExclude=excludeSpans.next();
        }
        if (!moreExclude || includeSpans.doc() != excludeSpans.doc() || includeSpans.end() <= excludeSpans.start())         break;
        moreInclude=includeSpans.next();
      }
      return moreInclude;
    }
    public boolean skipTo(    int target) throws IOException {
      if (moreInclude)       moreInclude=includeSpans.skipTo(target);
      if (!moreInclude)       return false;
      if (moreExclude && includeSpans.doc() > excludeSpans.doc())       moreExclude=excludeSpans.skipTo(includeSpans.doc());
      while (moreExclude && includeSpans.doc() == excludeSpans.doc() && excludeSpans.end() <= includeSpans.start()) {
        moreExclude=excludeSpans.next();
      }
      if (!moreExclude || includeSpans.doc() != excludeSpans.doc() || includeSpans.end() <= excludeSpans.start())       return true;
      return next();
    }
    public int doc(){
      return includeSpans.doc();
    }
    public int start(){
      return includeSpans.start();
    }
    public int end(){
      return includeSpans.end();
    }
    public float score(){
      return includeSpans.score() * getBoost();
    }
    public String toString(){
      return ""String_Node_Str"" + SpanNotQuery.this.toString() + ""String_Node_Str"";
    }
    public Explanation explain() throws IOException {
      if (getBoost() == 1.0f)       return includeSpans.explain();
      Explanation result=new Explanation(0,""String_Node_Str"" + toString() + ""String_Node_Str"");
      Explanation boostExpl=new Explanation(getBoost(),""String_Node_Str"");
      result.addDetail(boostExpl);
      Explanation inclExpl=includeSpans.explain();
      result.addDetail(inclExpl);
      result.setValue(boostExpl.getValue() * inclExpl.getValue());
      return result;
    }
  }
;
}","public Spans getSpans(final IndexReader reader,final Searcher searcher) throws IOException {
  return new Spans(){
    private Spans includeSpans=include.getSpans(reader,searcher);
    private boolean moreInclude=true;
    private Spans excludeSpans=exclude.getSpans(reader,searcher);
    private boolean moreExclude=excludeSpans.next();
    public boolean next() throws IOException {
      if (moreInclude)       moreInclude=includeSpans.next();
      while (moreInclude && moreExclude) {
        if (includeSpans.doc() > excludeSpans.doc())         moreExclude=excludeSpans.skipTo(includeSpans.doc());
        while (moreExclude && includeSpans.doc() == excludeSpans.doc() && excludeSpans.end() <= includeSpans.start()) {
          moreExclude=excludeSpans.next();
        }
        if (!moreExclude || includeSpans.doc() != excludeSpans.doc() || includeSpans.end() <= excludeSpans.start())         break;
        moreInclude=includeSpans.next();
      }
      return moreInclude;
    }
    public boolean skipTo(    int target) throws IOException {
      if (moreInclude)       moreInclude=includeSpans.skipTo(target);
      if (!moreInclude)       return false;
      if (moreExclude && includeSpans.doc() > excludeSpans.doc())       moreExclude=excludeSpans.skipTo(includeSpans.doc());
      while (moreExclude && includeSpans.doc() == excludeSpans.doc() && excludeSpans.end() <= includeSpans.start()) {
        moreExclude=excludeSpans.next();
      }
      if (!moreExclude || includeSpans.doc() != excludeSpans.doc() || includeSpans.end() <= excludeSpans.start())       return true;
      return next();
    }
    public int doc(){
      return includeSpans.doc();
    }
    public int start(){
      return includeSpans.start();
    }
    public int end(){
      return includeSpans.end();
    }
    public float score(){
      return includeSpans.score() * getBoost();
    }
    public String toString(){
      return ""String_Node_Str"" + SpanNotQuery.this.toString() + ""String_Node_Str"";
    }
    public Explanation explain() throws IOException {
      if (getBoost() == 1.0f)       return includeSpans.explain();
      Explanation result=new Explanation(0,""String_Node_Str"" + toString() + ""String_Node_Str"");
      Explanation boostExpl=new Explanation(getBoost(),""String_Node_Str"");
      result.addDetail(boostExpl);
      Explanation inclExpl=includeSpans.explain();
      result.addDetail(inclExpl);
      result.setValue(boostExpl.getValue() * inclExpl.getValue());
      return result;
    }
  }
;
}",0.9954174138274556
24714,"/** 
 * Make a list of all the terms present in the given query, grouped by field set.
 * @param query          The query to traverse
 * @param desiredFields  The set of fields to limit to. If null, allfields are considered.
 * @return  An ordered map consisting of entries of a key and avalue. The key is an ordered set of field names. The value is an ordered set of words.
 */
private LinkedHashMap gatherKeywords(Query query,final Set desiredFields){
  final LinkedHashMap termMap=new LinkedHashMap();
  XtfQueryTraverser trav=new XtfQueryTraverser(){
    private void add(    Term t){
      final String field=t.field();
      final String word=t.text();
      if (desiredFields != null && !desiredFields.contains(field))       return;
      if (!termMap.containsKey(word))       termMap.put(word,new LinkedHashSet());
      ((LinkedHashSet)termMap.get(word)).add(field);
    }
    public void traverseQuery(    Query q){
      if (q.getBoost() > 0.001f)       super.traverseQuery(q);
    }
    protected void traverse(    TermQuery q){
      add(q.getTerm());
    }
    protected void traverse(    SpanTermQuery q){
      add(q.getTerm());
    }
    protected void traverse(    BooleanQuery bq){
      BooleanClause[] clauses=bq.getClauses();
      for (int i=0; i < clauses.length; i++) {
        if (clauses[i].getOccur() != BooleanClause.Occur.MUST_NOT)         traverseQuery(clauses[i].getQuery());
      }
    }
    protected void traverse(    SpanChunkedNotQuery nq){
      traverseQuery(nq.getInclude());
    }
    protected void traverse(    SpanNotQuery nq){
      traverseQuery(nq.getInclude());
    }
    protected void traverse(    SpanNotNearQuery nq){
      traverseQuery(nq.getInclude());
    }
  }
;
  trav.traverseQuery(query);
  LinkedHashMap fieldsMap=new LinkedHashMap();
  for (Iterator ti=termMap.keySet().iterator(); ti.hasNext(); ) {
    String word=(String)ti.next();
    LinkedHashSet fieldsSet=(LinkedHashSet)termMap.get(word);
    if (!fieldsMap.containsKey(fieldsSet))     fieldsMap.put(fieldsSet,new LinkedHashSet());
    ((LinkedHashSet)fieldsMap.get(fieldsSet)).add(word);
  }
  return fieldsMap;
}","/** 
 * Make a list of all the terms present in the given query, grouped by field set.
 * @param query          The query to traverse
 * @param desiredFields  The set of fields to limit to. If null, allfields are considered.
 * @return  An ordered map consisting of entries of a key and avalue. The key is an ordered set of field names. The value is an ordered set of words.
 */
private LinkedHashMap gatherKeywords(Query query,final Set desiredFields){
  final LinkedHashMap termMap=new LinkedHashMap();
  XtfQueryTraverser trav=new XtfQueryTraverser(){
    private void add(    Term t){
      final String field=t.field();
      final String word=t.text();
      if (desiredFields != null && !desiredFields.contains(field))       return;
      if (!termMap.containsKey(word))       termMap.put(word,new LinkedHashSet());
      ((LinkedHashSet)termMap.get(word)).add(field);
    }
    public void traverseQuery(    Query q){
      if (q.getBoost() > 0.001f)       super.traverseQuery(q);
    }
    protected void traverse(    TermQuery q){
      add(q.getTerm());
    }
    protected void traverse(    SpanTermQuery q){
      add(q.getTerm());
    }
    protected void traverse(    SpanExactQuery q){
    }
    protected void traverse(    BooleanQuery bq){
      BooleanClause[] clauses=bq.getClauses();
      for (int i=0; i < clauses.length; i++) {
        if (clauses[i].getOccur() != BooleanClause.Occur.MUST_NOT)         traverseQuery(clauses[i].getQuery());
      }
    }
    protected void traverse(    SpanChunkedNotQuery nq){
      traverseQuery(nq.getInclude());
    }
    protected void traverse(    SpanNotQuery nq){
      traverseQuery(nq.getInclude());
    }
    protected void traverse(    SpanNotNearQuery nq){
      traverseQuery(nq.getInclude());
    }
  }
;
  trav.traverseQuery(query);
  LinkedHashMap fieldsMap=new LinkedHashMap();
  for (Iterator ti=termMap.keySet().iterator(); ti.hasNext(); ) {
    String word=(String)ti.next();
    LinkedHashSet fieldsSet=(LinkedHashSet)termMap.get(word);
    if (!fieldsMap.containsKey(fieldsSet))     fieldsMap.put(fieldsSet,new LinkedHashSet());
    ((LinkedHashSet)fieldsMap.get(fieldsSet)).add(word);
  }
  return fieldsMap;
}",0.986826900855096
24715,"protected void formatHits(String mainTagName,HttpServletRequest req,HttpServletResponse res,AttribList attribs,QueryRequest queryRequest,QueryResult queryResult,long startTime) throws Exception {
  nHits=queryResult.totalDocs;
  super.formatHits(mainTagName,req,res,attribs,queryRequest,queryResult,startTime);
}","protected void formatHits(String mainTagName,HttpServletRequest req,HttpServletResponse res,AttribList attribs,QueryRequest queryRequest,QueryResult queryResult,long startTime) throws Exception {
  nHits.set(queryResult.totalDocs);
  super.formatHits(mainTagName,req,res,attribs,queryRequest,queryResult,startTime);
}",0.9538950715421304
24716,"protected void genErrorPage(HttpServletRequest req,HttpServletResponse res,Exception exc){
  nHits=-1;
  Trace.error(""String_Node_Str"" + exc);
  throw new RuntimeException(exc);
}","protected void genErrorPage(HttpServletRequest req,HttpServletResponse res,Exception exc){
  nHits.set(-1);
  Trace.error(""String_Node_Str"" + exc);
  throw new RuntimeException(exc);
}",0.9807162534435262
24717,"/** 
 * Check if the given string is all lower-case 
 */
public static boolean isLowerCase(String in){
  return in.equals(in.toLowerCase());
}","/** 
 * Check if the given string is all lower-case 
 */
public static boolean isLowerCase(String in){
  if (in == null || in.length() == 0)   return false;
  for (int i=0; i < in.length(); i++) {
    if (!Character.isLowerCase(in.charAt(i)))     return false;
  }
  return true;
}",0.5484633569739953
24718,"/** 
 * Break a string up into words, defined by whitespace boundaries.
 * @param in a string to break up
 * @return an array of the words in the string
 */
public static String[] splitWords(String in){
  if (in.trim().length() == 0)   return new String[0];
  return spacePat.split(in.trim());
}","/** 
 * Break a string up into words, defined by whitespace boundaries.
 * @param in a string to break up
 * @return an array of the words in the string
 */
public static String[] splitWords(String in){
  if (in == null)   return new String[0];
  String trimmed=in.trim();
  if (trimmed.length() == 0)   return new String[0];
  return spacePat.split(trimmed);
}",0.8079268292682927
24719,"/** 
 * Checks if the given string is ""title case"", i.e. the first letter is uppercase and the rest are lower case. If the string has multiple words, checks if *each* word is title case.
 */
public static boolean isTitleCase(String in){
  String[] words=splitWords(in);
  if (words.length == 1) {
    String word=words[0];
    if (word.length() <= 1)     return false;
    return Character.isUpperCase(word.charAt(0)) && isLowerCase(word.substring(1));
  }
  for (int i=0; i < words.length; i++) {
    if (!isTitleCase(words[i]))     return false;
  }
  return true;
}","/** 
 * Checks if the given string is ""title case"", i.e. the first letter is uppercase and the rest are lower case. If the string has multiple words, checks if *each* word is title case.
 */
public static boolean isTitleCase(String in){
  if (in == null || in.length() == 0)   return false;
  String[] words=splitWords(in);
  if (words.length == 1) {
    String word=words[0];
    if (word.length() <= 1)     return false;
    return Character.isUpperCase(word.charAt(0)) && isLowerCase(word.substring(1));
  }
  for (int i=0; i < words.length; i++) {
    if (!isTitleCase(words[i]))     return false;
  }
  return true;
}",0.9546218487394958
24720,"/** 
 * Check if the given string is all upper-case 
 */
public static boolean isUpperCase(String in){
  return in.equals(in.toUpperCase());
}","/** 
 * Check if the given string is all upper-case 
 */
public static boolean isUpperCase(String in){
  if (in == null || in.length() == 0)   return false;
  for (int i=0; i < in.length(); i++) {
    if (!Character.isUpperCase(in.charAt(i)))     return false;
  }
  return true;
}",0.5531914893617021
24721,"/** 
 * Convert a string to ""title case"", i.e. making the first letter of each word uppercase, and the rest of the letters lowercase.
 */
public static String toTitleCase(String in){
  String[] words=splitWords(in);
  if (words.length == 0)   return in;
  if (words.length == 1) {
    String word=words[0];
    if (word.length() < 1)     return word;
    return Character.toUpperCase(word.charAt(0)) + word.substring(1);
  }
  String[] converted=new String[words.length];
  for (int i=0; i < words.length; i++)   converted[i]=toTitleCase(words[i]);
  return join(converted);
}","/** 
 * Convert a string to ""title case"", i.e. making the first letter of each word uppercase, and the rest of the letters lowercase.
 */
public static String toTitleCase(String in){
  String[] words=splitWords(in);
  if (words.length == 0)   return in;
  if (words.length == 1) {
    String word=words[0];
    if (word.length() < 1)     return word;
    return Character.toUpperCase(word.charAt(0)) + word.substring(1).toLowerCase();
  }
  String[] converted=new String[words.length];
  for (int i=0; i < words.length; i++)   converted[i]=toTitleCase(words[i]);
  return join(converted);
}",0.9879931389365352
24722,"/** 
 * Copy this node to a given receiver
 * @param whichNamespaces indicates which namespaces should be copied: all, none,or local (i.e., those not declared on a parent element)
 */
public void copy(Receiver out,int whichNamespaces,boolean copyAnnotations,int locationId) throws XPathException {
  int typeCode=(copyAnnotations ? getTypeAnnotation() : StandardNames.XS_UNTYPED);
  if (locationId == 0 && out instanceof LocationCopier) {
    out.setSystemId(getSystemId());
    ((LocationCopier)out).setLineNumber(getLineNumber());
  }
  out.startElement(nameCode,typeCode,locationId,0);
  if (whichNamespaces != NO_NAMESPACES)   sendNamespaceDeclarations(out,whichNamespaces == ALL_NAMESPACES);
  if (attrNames != null) {
    for (int i=0; i < attrNames.length; i++) {
      new AttributeImpl(this,i).copy(out,NO_NAMESPACES,copyAnnotations,locationId);
    }
  }
  AxisIterator children=iterateAxis(Axis.CHILD);
  int childNamespaces=(whichNamespaces == NO_NAMESPACES ? NO_NAMESPACES : LOCAL_NAMESPACES);
  while (true) {
    NodeInfo next=(NodeInfo)children.next();
    if (next == null)     break;
    next.copy(out,childNamespaces,copyAnnotations,locationId);
  }
  out.endElement();
}","/** 
 * Copy this node to a given receiver
 * @param whichNamespaces indicates which namespaces should be copied: all, none,or local (i.e., those not declared on a parent element)
 */
public void copy(Receiver out,int whichNamespaces,boolean copyAnnotations,int locationId) throws XPathException {
  int typeCode=(copyAnnotations ? getTypeAnnotation() : StandardNames.XS_UNTYPED);
  if (locationId == 0 && out instanceof LocationCopier) {
    out.setSystemId(getSystemId());
    ((LocationCopier)out).setLineNumber(getLineNumber());
  }
  out.startElement(nameCode,typeCode,locationId,0);
  if (whichNamespaces != NO_NAMESPACES)   sendNamespaceDeclarations(out,whichNamespaces == ALL_NAMESPACES);
  out.startContent();
  if (attrNames != null) {
    for (int i=0; i < attrNames.length; i++) {
      new AttributeImpl(this,i).copy(out,NO_NAMESPACES,copyAnnotations,locationId);
    }
  }
  AxisIterator children=iterateAxis(Axis.CHILD);
  int childNamespaces=(whichNamespaces == NO_NAMESPACES ? NO_NAMESPACES : LOCAL_NAMESPACES);
  while (true) {
    NodeInfo next=(NodeInfo)children.next();
    if (next == null)     break;
    next.copy(out,childNamespaces,copyAnnotations,locationId);
  }
  out.endElement();
}",0.9908409658617818
24723,"/** 
 * Checks that the tree doesn't use features we don't support. If it does, we throw an exception.
 */
private void checkSupport() throws IOException {
  if (tree.getAttributeTypeCodeArray() != null)   throw new IOException(""String_Node_Str"");
}","/** 
 * Checks that the tree doesn't use features we don't support. If it does, we throw an exception.
 */
private void checkSupport() throws IOException {
  if (tree.getAttributeTypeCodeArray() != null || tree.getTypeCodeArray() != null) {
  }
}",0.8242424242424242
24724,"/** 
 * Completes writing out a disk-based file. Assumes that the receiver (which must come from begin()) has been sent all the SAX events for the input document.
 */
public void finish(Receiver inBuilder,boolean closeStore) throws IOException {
  HackedTinyBuilder builder=(HackedTinyBuilder)inBuilder;
  StructuredStore treeStore=builder.getTreeStore();
  tree=builder.getTree();
  builder.getTextStore().close();
  if (tree == null) {
    treeStore.delete();
    return;
  }
  checkSupport();
  writeNames(treeStore.createSubStore(""String_Node_Str""));
  writeAttrs(treeStore.createSubStore(""String_Node_Str""));
  writeNodes(treeStore.createSubStore(""String_Node_Str""));
  if (closeStore)   treeStore.close();
  tree=null;
  names=null;
}","/** 
 * Completes writing out a disk-based file. Assumes that the receiver (which must come from begin()) has been sent all the SAX events for the input document.
 */
public void finish(Receiver inBuilder,boolean closeStore) throws IOException {
  HackedTinyBuilder builder=(HackedTinyBuilder)inBuilder;
  StructuredStore treeStore=builder.getTreeStore();
  tree=builder.getTree();
  builder.getTextStore().close();
  builder.setTextStore(null);
  if (tree == null) {
    treeStore.delete();
    return;
  }
  checkSupport();
  writeNames(treeStore.createSubStore(""String_Node_Str""));
  writeAttrs(treeStore.createSubStore(""String_Node_Str""));
  writeNodes(treeStore.createSubStore(""String_Node_Str""));
  if (closeStore)   treeStore.close();
  tree=null;
  names=null;
}",0.9801324503311258
24725,"/** 
 * Get a list of all elements with a given name. This is implemented as a memo function: the first time it is called for a particular element type, it remembers the result for next time.
 */
protected AxisIterator getAllElements(int fingerprint){
  String subName=""String_Node_Str"" + namePool.getDisplayName(fingerprint);
  try {
    SubStoreReader indexFile=mainStore.openSubStore(subName);
    PackedByteBuf buf=new PackedByteBuf(indexFile,(int)indexFile.length());
    int nNodes=buf.readInt();
    ArrayList nodes=new ArrayList(nNodes);
    int curNodeNum=0;
    for (int i=0; i < nNodes; i++) {
      curNodeNum+=buf.readInt();
      nodes.add(getNode(curNodeNum));
    }
    indexFile.close();
    return new NodeListIterator(nodes);
  }
 catch (  IOException e) {
  }
  if (debug) {
    Trace.debug(""String_Node_Str"" + namePool.getDisplayName(fingerprint) + ""String_Node_Str"");
  }
  ArrayList nodes=new ArrayList(numberOfNodes / 8);
  Vector nodeNums=new Vector(numberOfNodes / 8);
  for (int i=0; i < numberOfNodes; i++) {
    NodeImpl node=getNode(i);
    if (node == null || (node.getNameCode() & 0xfffff) != fingerprint)     continue;
    nodes.add(node);
    nodeNums.add(Integer.valueOf(node.nodeNum));
  }
  PackedByteBuf buf=new PackedByteBuf(nodeNums.size() * 3);
  buf.writeInt(nodeNums.size());
  int curNum=0;
  for (int i=0; i < nodeNums.size(); i++) {
    int num=((Integer)nodeNums.get(i)).intValue();
    buf.writeInt(num - curNum);
    curNum=num;
  }
  try {
    SubStoreWriter indexFile=mainStore.createSubStore(subName);
    buf.output(indexFile);
    indexFile.close();
  }
 catch (  IOException e) {
  }
  if (debug)   Trace.debug(""String_Node_Str"");
  return new NodeListIterator(nodes);
}","/** 
 * Get a list of all elements with a given name. This is implemented as a memo function: the first time it is called for a particular element type, it remembers the result for next time.
 */
protected AxisIterator getAllElements(int fingerprint){
synchronized (mainStore) {
    String subName=""String_Node_Str"" + namePool.getDisplayName(fingerprint);
    try {
      SubStoreReader indexFile=mainStore.openSubStore(subName);
      PackedByteBuf buf=new PackedByteBuf(indexFile,(int)indexFile.length());
      int nNodes=buf.readInt();
      ArrayList nodes=new ArrayList(nNodes);
      int curNodeNum=0;
      for (int i=0; i < nNodes; i++) {
        curNodeNum+=buf.readInt();
        nodes.add(getNode(curNodeNum));
      }
      indexFile.close();
      return new NodeListIterator(nodes);
    }
 catch (    IOException e) {
    }
    if (debug) {
      Trace.debug(""String_Node_Str"" + namePool.getDisplayName(fingerprint) + ""String_Node_Str"");
    }
    ArrayList nodes=new ArrayList(numberOfNodes / 8);
    Vector nodeNums=new Vector(numberOfNodes / 8);
    for (int i=0; i < numberOfNodes; i++) {
      NodeImpl node=getNode(i);
      if (node == null || (node.getNameCode() & 0xfffff) != fingerprint)       continue;
      nodes.add(node);
      nodeNums.add(Integer.valueOf(node.nodeNum));
    }
    PackedByteBuf buf=new PackedByteBuf(nodeNums.size() * 3);
    buf.writeInt(nodeNums.size());
    int curNum=0;
    for (int i=0; i < nodeNums.size(); i++) {
      int num=((Integer)nodeNums.get(i)).intValue();
      buf.writeInt(num - curNum);
      curNum=num;
    }
    try {
      SubStoreWriter indexFile=mainStore.createSubStore(subName);
      buf.output(indexFile);
      indexFile.close();
    }
 catch (    IOException e) {
    }
    return new NodeListIterator(nodes);
  }
}",0.9114139693356048
24726,"/** 
 * Create a lazy document by loading the original, building the lazy tree, and writing it out.
 * @param lazyFile      Lazy file to create
 * @param sourcePath    Path to the source document
 * @param preFilter     A prefilter stylesheet (or null for no pre-filtering.)
 * @param removeDoctypeDecl true to remove DOCTYPE declarations from theXML document
 * @param stripWhitespace If set, whitespace will be removed between elementsin the lazy file.
 */
private void buildLazyStore(File lazyFile,String sourcePath,Templates preFilter,boolean removeDoctypeDecl,boolean stripWhitespace) throws IOException {
  Path.createPath(lazyFile.getParent());
  Configuration config=new Configuration();
  LazyTreeBuilder lazyBuilder=new LazyTreeBuilder(config);
  StructuredStore lazyStore=StructuredFile.create(lazyFile);
  Receiver lazyReceiver=lazyBuilder.begin(lazyStore);
  try {
    lazyBuilder.setNamePool(NamePool.getDefaultNamePool());
    ReceivingContentHandler lazyHandler=new ReceivingContentHandler();
    lazyHandler.setReceiver(lazyReceiver);
    lazyHandler.setPipelineConfiguration(lazyReceiver.getPipelineConfiguration());
    SAXParser xmlParser=IndexUtil.createSAXParser();
    InputStream inStream=new FileInputStream(sourcePath);
    InputSource inSrc=new InputSource(IndexUtil.filterXMLDocument(inStream,xmlParser,removeDoctypeDecl));
    inSrc.setSystemId(new File(sourcePath).toURL().toString());
    LazyPassthru passthru=new LazyPassthru(lazyHandler,stripWhitespace);
    if (preFilter == null) {
      try {
        xmlParser.parse(inSrc,passthru);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
 else {
      try {
        Templates[] array=new Templates[1];
        array[0]=preFilter;
        IndexUtil.applyPreFilters(array,xmlParser.getXMLReader(),inSrc,new SAXResult(passthru));
      }
 catch (      Exception e) {
        lazyBuilder.abort(lazyReceiver);
        throw new RuntimeException(e);
      }
    }
    lazyBuilder.finish(lazyReceiver,true);
  }
 catch (  IOException e) {
    lazyBuilder.abort(lazyReceiver);
    throw e;
  }
}","/** 
 * Create a lazy document by loading the original, building the lazy tree, and writing it out.
 * @param lazyFile      Lazy file to create
 * @param sourcePath    Path to the source document
 * @param preFilter     A prefilter stylesheet (or null for no pre-filtering.)
 * @param removeDoctypeDecl true to remove DOCTYPE declarations from theXML document
 * @param stripWhitespace If set, whitespace will be removed between elementsin the lazy file.
 */
private void buildLazyStore(File lazyFile,String sourcePath,Templates preFilter,boolean removeDoctypeDecl,boolean stripWhitespace) throws IOException {
  Path.createPath(lazyFile.getParent());
  File tmpFile=new File(lazyFile.getAbsolutePath() + ""String_Node_Str"");
  Configuration config=new Configuration();
  LazyTreeBuilder lazyBuilder=new LazyTreeBuilder(config);
  StructuredStore lazyStore=StructuredFile.create(tmpFile);
  SubStoreWriter sub=lazyStore.createSubStore(""String_Node_Str"");
  sub.writeByte(1);
  sub.close();
  Receiver lazyReceiver=lazyBuilder.begin(lazyStore);
  try {
    ReceivingContentHandler lazyHandler=new ReceivingContentHandler();
    lazyHandler.setReceiver(lazyReceiver);
    lazyHandler.setPipelineConfiguration(lazyReceiver.getPipelineConfiguration());
    SAXParser xmlParser=IndexUtil.createSAXParser();
    InputStream inStream=new FileInputStream(sourcePath);
    InputSource inSrc=new InputSource(IndexUtil.filterXMLDocument(inStream,xmlParser,removeDoctypeDecl));
    inSrc.setSystemId(new File(sourcePath).toURL().toString());
    LazyPassthru passthru=new LazyPassthru(lazyHandler,stripWhitespace);
    if (preFilter == null) {
      try {
        xmlParser.parse(inSrc,passthru);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
 else {
      try {
        Templates[] array=new Templates[1];
        array[0]=preFilter;
        IndexUtil.applyPreFilters(array,xmlParser.getXMLReader(),inSrc,new SAXResult(passthru));
      }
 catch (      Exception e) {
        lazyBuilder.abort(lazyReceiver);
        throw new RuntimeException(e);
      }
    }
    lazyBuilder.finish(lazyReceiver,true);
    tmpFile.renameTo(lazyFile);
  }
 catch (  IOException e) {
    lazyBuilder.abort(lazyReceiver);
    throw e;
  }
}",0.9374570446735396
24727,"/** 
 * Search for a StructuredStore containing the ""lazy"" or persistent representation of a given document. Index parameters are specified, since often the lazy file is stored along with the index. This method is called first, and if it returns null, then  {@link #getInputSource(String,boolean)} will be called as a fall-back.
 * @param indexConfigPath Path to the index configuration file
 * @param indexName       Name of the index being searched
 * @param sourcePath      Path to the source document
 * @param preFilter       Prefilter stylesheet to run (or null for none)
 * @param removeDoctypeDecl Set to true to remove DOCTYPE declaration fromthe XML document.
 * @return                Store containing the tree, or null if nonecould be found.
 */
public StructuredStore getLazyStore(String indexConfigPath,String indexName,String sourcePath,Templates preFilter,boolean removeDoctypeDecl) throws IOException {
  if (indexConfigPath == null || indexName == null)   return null;
  if (sourcePath.startsWith(""String_Node_Str""))   return null;
  if (sourcePath.startsWith(""String_Node_Str""))   return null;
  File sourceFile=new File(sourcePath);
  if (!sourceFile.isFile())   return null;
  File lazyFile=IndexUtil.calcLazyPath(new File(servlet.getRealPath(""String_Node_Str"")),new File(indexConfigPath),indexName,new File(sourcePath),false);
  if (!lazyFile.canRead()) {
    boolean stripWhitespace=false;
    try {
      stripWhitespace=IndexUtil.getIndexInfo(new File(indexConfigPath),indexName).stripWhitespace;
    }
 catch (    Exception e) {
    }
    buildLazyStore(lazyFile,sourcePath,preFilter,removeDoctypeDecl,stripWhitespace);
  }
  return StructuredFile.open(lazyFile);
}","/** 
 * Search for a StructuredStore containing the ""lazy"" or persistent representation of a given document. Index parameters are specified, since often the lazy file is stored along with the index. This method is called first, and if it returns null, then  {@link #getInputSource(String,boolean)} will be called as a fall-back.
 * @param indexConfigPath Path to the index configuration file
 * @param indexName       Name of the index being searched
 * @param sourcePath      Path to the source document
 * @param preFilter       Prefilter stylesheet to run (or null for none)
 * @param removeDoctypeDecl Set to true to remove DOCTYPE declaration fromthe XML document.
 * @return                Store containing the tree, or null if nonecould be found.
 */
public StructuredStore getLazyStore(String indexConfigPath,String indexName,String sourcePath,Templates preFilter,boolean removeDoctypeDecl) throws IOException {
  if (indexConfigPath == null || indexName == null)   return null;
  if (sourcePath.startsWith(""String_Node_Str""))   return null;
  if (sourcePath.startsWith(""String_Node_Str""))   return null;
  File sourceFile=new File(sourcePath);
  if (!sourceFile.isFile())   return null;
  File lazyFile=IndexUtil.calcLazyPath(new File(servlet.getRealPath(""String_Node_Str"")),new File(indexConfigPath),indexName,new File(sourcePath),false);
  if (lazyFile.canRead() && sourceFile.lastModified() > lazyFile.lastModified() && isPostIndexLazyFile(lazyFile)) {
    lazyFile.delete();
  }
  if (!lazyFile.canRead()) {
    boolean stripWhitespace=false;
    try {
      stripWhitespace=IndexUtil.getIndexInfo(new File(indexConfigPath),indexName).stripWhitespace;
    }
 catch (    Exception e) {
    }
    buildLazyStore(lazyFile,sourcePath,preFilter,removeDoctypeDecl,stripWhitespace);
  }
  return StructuredFile.open(lazyFile);
}",0.9588652482269504
24728,"/** 
 * Create a lazy document by loading the original, building the lazy tree, and writing it out.
 * @param lazyFile      Lazy file to create
 * @param sourcePath    Path to the source document
 * @param preFilter     A prefilter stylesheet (or null for no pre-filtering.)
 * @param removeDoctypeDecl true to remove DOCTYPE declarations from theXML document
 * @param stripWhitespace If set, whitespace will be removed between elementsin the lazy file.
 */
private void buildLazyStore(File lazyFile,String sourcePath,Templates preFilter,boolean removeDoctypeDecl,boolean stripWhitespace) throws IOException {
  Path.createPath(lazyFile.getParent());
  Configuration config=new Configuration();
  LazyTreeBuilder lazyBuilder=new LazyTreeBuilder(config);
  StructuredStore lazyStore=StructuredFile.create(lazyFile);
  Receiver lazyReceiver=lazyBuilder.begin(lazyStore);
  lazyBuilder.setNamePool(NamePool.getDefaultNamePool());
  ReceivingContentHandler lazyHandler=new ReceivingContentHandler();
  lazyHandler.setReceiver(lazyReceiver);
  lazyHandler.setPipelineConfiguration(lazyReceiver.getPipelineConfiguration());
  SAXParser xmlParser=IndexUtil.createSAXParser();
  InputStream inStream=new FileInputStream(sourcePath);
  InputSource inSrc=new InputSource(IndexUtil.filterXMLDocument(inStream,xmlParser,removeDoctypeDecl));
  inSrc.setSystemId(new File(sourcePath).toURL().toString());
  LazyPassthru passthru=new LazyPassthru(lazyHandler,stripWhitespace);
  if (preFilter == null) {
    try {
      xmlParser.parse(inSrc,passthru);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
 else {
    try {
      Templates[] array=new Templates[1];
      array[0]=preFilter;
      IndexUtil.applyPreFilters(array,xmlParser.getXMLReader(),inSrc,new SAXResult(passthru));
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  lazyBuilder.finish(lazyReceiver,true);
}","/** 
 * Create a lazy document by loading the original, building the lazy tree, and writing it out.
 * @param lazyFile      Lazy file to create
 * @param sourcePath    Path to the source document
 * @param preFilter     A prefilter stylesheet (or null for no pre-filtering.)
 * @param removeDoctypeDecl true to remove DOCTYPE declarations from theXML document
 * @param stripWhitespace If set, whitespace will be removed between elementsin the lazy file.
 */
private void buildLazyStore(File lazyFile,String sourcePath,Templates preFilter,boolean removeDoctypeDecl,boolean stripWhitespace) throws IOException {
  Path.createPath(lazyFile.getParent());
  Configuration config=new Configuration();
  LazyTreeBuilder lazyBuilder=new LazyTreeBuilder(config);
  StructuredStore lazyStore=StructuredFile.create(lazyFile);
  Receiver lazyReceiver=lazyBuilder.begin(lazyStore);
  try {
    lazyBuilder.setNamePool(NamePool.getDefaultNamePool());
    ReceivingContentHandler lazyHandler=new ReceivingContentHandler();
    lazyHandler.setReceiver(lazyReceiver);
    lazyHandler.setPipelineConfiguration(lazyReceiver.getPipelineConfiguration());
    SAXParser xmlParser=IndexUtil.createSAXParser();
    InputStream inStream=new FileInputStream(sourcePath);
    InputSource inSrc=new InputSource(IndexUtil.filterXMLDocument(inStream,xmlParser,removeDoctypeDecl));
    inSrc.setSystemId(new File(sourcePath).toURL().toString());
    LazyPassthru passthru=new LazyPassthru(lazyHandler,stripWhitespace);
    if (preFilter == null) {
      try {
        xmlParser.parse(inSrc,passthru);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
 else {
      try {
        Templates[] array=new Templates[1];
        array[0]=preFilter;
        IndexUtil.applyPreFilters(array,xmlParser.getXMLReader(),inSrc,new SAXResult(passthru));
      }
 catch (      Exception e) {
        lazyBuilder.abort(lazyReceiver);
        throw new RuntimeException(e);
      }
    }
    lazyBuilder.finish(lazyReceiver,true);
  }
 catch (  IOException e) {
    lazyBuilder.abort(lazyReceiver);
    throw e;
  }
}",0.953373015873016
24729,"/** 
 * Completes writing out a disk-based file. Assumes that the receiver (which must come from begin()) has been sent all the SAX events for the input document.
 */
public void finish(Receiver inBuilder,boolean closeStore) throws IOException {
  HackedTinyBuilder builder=(HackedTinyBuilder)inBuilder;
  StructuredStore treeStore=builder.getTreeStore();
  tree=builder.getTree();
  builder.getTextStore().close();
  if (tree == null) {
    treeStore.close();
    treeStore.delete();
    return;
  }
  checkSupport();
  writeNames(treeStore.createSubStore(""String_Node_Str""));
  writeAttrs(treeStore.createSubStore(""String_Node_Str""));
  writeNodes(treeStore.createSubStore(""String_Node_Str""));
  if (closeStore)   treeStore.close();
  tree=null;
  names=null;
}","/** 
 * Completes writing out a disk-based file. Assumes that the receiver (which must come from begin()) has been sent all the SAX events for the input document.
 */
public void finish(Receiver inBuilder,boolean closeStore) throws IOException {
  HackedTinyBuilder builder=(HackedTinyBuilder)inBuilder;
  StructuredStore treeStore=builder.getTreeStore();
  tree=builder.getTree();
  builder.getTextStore().close();
  if (tree == null) {
    treeStore.delete();
    return;
  }
  checkSupport();
  writeNames(treeStore.createSubStore(""String_Node_Str""));
  writeAttrs(treeStore.createSubStore(""String_Node_Str""));
  writeNodes(treeStore.createSubStore(""String_Node_Str""));
  if (closeStore)   treeStore.close();
  tree=null;
  names=null;
}",0.984697272122422
24730,"/** 
 * Instances should never be created by outside parties, so the constructor is strictly private.
 */
private StructuredFile(File file,boolean create) throws IOException {
  this.file=file;
  if (!create && !file.exists())   throw new FileNotFoundException(file.toString());
  realFile=new RandomAccessFile(file,""String_Node_Str"");
  if (create) {
    realFile.setLength(0);
    realFile.writeByte('s');
    realFile.writeByte('s');
    realFile.writeByte('f');
    realFile.writeByte(0);
    realFile.writeInt(0);
    dir=new Directory();
    writeDirectory();
  }
 else   readHeader();
}","/** 
 * Instances should never be created by outside parties, so the constructor is strictly private.
 */
private StructuredFile(File file,boolean create) throws IOException {
  this.file=file;
  if (!create && !file.exists())   throw new FileNotFoundException(file.toString());
  realFile=new RandomAccessFile(file,""String_Node_Str"");
  try {
    if (create) {
      realFile.setLength(0);
      realFile.writeByte('s');
      realFile.writeByte('s');
      realFile.writeByte('f');
      realFile.writeByte(0);
      realFile.writeInt(0);
      dir=new Directory();
      writeDirectory();
    }
 else     readHeader();
  }
 catch (  IOException e) {
    if (realFile != null)     realFile.close();
    file.delete();
    throw e;
  }
}",0.8745304282494365
24731,"/** 
 * Resize the array so it exactly fits the current elements 
 */
public final void compact(){
  if (size != data.length)   resize(size);
}","/** 
 * Resize the array so it exactly fits the current elements 
 */
public final void compact(){
  resize(size);
}",0.8957528957528957
24732,"/** 
 * Resize the array to the specified size. If smaller than the current number of elements, the ones at the end will be lost.
 */
public final void resize(int newSize){
  if (newSize != size) {
    int[] oldData=data;
    data=new int[newSize];
    System.arraycopy(oldData,0,data,0,Math.min(size,newSize));
    size=Math.min(size,newSize);
  }
}","/** 
 * Resize the array to the specified size. If smaller than the current number of elements, the ones at the end will be lost.
 */
public final void resize(int newSize){
  if (newSize != data.length) {
    int[] oldData=data;
    data=new int[newSize];
    System.arraycopy(oldData,0,data,0,Math.min(size,newSize));
    size=Math.min(size,newSize);
  }
}",0.9787835926449788
24733,"/** 
 * Resize the array so it exactly fits the current elements 
 */
public final void compact(){
  if (size != data.length)   resize(size);
}","/** 
 * Resize the array so it exactly fits the current elements 
 */
public final void compact(){
  resize(size);
}",0.8957528957528957
24734,"/** 
 * Resize the array to the specified size. If smaller than the current number of elements, the ones at the end will be lost.
 */
public final void resize(int newSize){
  if (newSize != size) {
    long[] oldData=data;
    data=new long[newSize];
    System.arraycopy(oldData,0,data,0,Math.min(size,newSize));
    size=Math.min(size,newSize);
  }
}","/** 
 * Resize the array to the specified size. If smaller than the current number of elements, the ones at the end will be lost.
 */
public final void resize(int newSize){
  if (newSize != data.length) {
    long[] oldData=data;
    data=new long[newSize];
    System.arraycopy(oldData,0,data,0,Math.min(size,newSize));
    size=Math.min(size,newSize);
  }
}",0.978902953586498
24735,"/** 
 * Apply the standard mapping to the given term. 
 * @return changed version, or original term if no change required.
 */
public String filter(String term){
  dribble.nextToken=term;
  try {
    Token mapped=filter.next();
    if (mapped.termText().equals(term))     return term;
    return mapped.termText();
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + e);
  }
}","/** 
 * Apply the standard mapping to the given term. 
 * @return changed version, or original term if no change required.
 */
public String filter(String term){
  dribble.nextToken=saveWildcards(term);
  try {
    Token mapped=filter.next();
    String restored=restoreWildcards(mapped.termText());
    if (restored.equals(term))     return term;
    return restored;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + e);
  }
}",0.8498845265588915
24736,"private String filter(String in){
  String out=(String)recent.get(in);
  if (out == null) {
    out=stdTermFilter.filter(in);
    String tmp;
    tmp=accentMap.mapWord(out);
    if (tmp != null)     out=tmp;
    tmp=pluralMap.lookup(out);
    if (tmp != null)     out=tmp;
    recent.put(in,out);
  }
  return out;
}","private String filter(String in){
  String out=(String)recent.get(in);
  if (out == null) {
    out=stdTermFilter.filter(in);
    String tmp;
    if (accentMap != null) {
      tmp=accentMap.mapWord(out);
      if (tmp != null)       out=tmp;
    }
    tmp=pluralMap.lookup(out);
    if (pluralMap != null) {
      if (tmp != null)       out=tmp;
      recent.put(in,out);
    }
  }
  return out;
}",0.7759103641456583
24737,"/** 
 * Construct a new rewriter to use the given map 
 */
public AccentFoldingRewriter(CharMap accentMap){
  this.accentMap=accentMap;
}","/** 
 * Construct a new rewriter to use the given map 
 * @param tokFields 
 */
public AccentFoldingRewriter(CharMap accentMap,Set tokFields){
  this.accentMap=accentMap;
  this.tokenizedFields=tokFields;
}",0.7988338192419825
24738,"/** 
 * Checks if step mode is active and in the setup phase. If so, outputs the frameset and information frames.
 * @param req            The HTTP request (in)
 * @param res            The HTTP response (out)
 * @return A string to output if in step setup phase, null to do normal processing
 */
protected String stepSetup(HttpServletRequest req,HttpServletResponse res) throws IOException {
  String baseUrl=res.encodeURL(getRequestURL(req));
  String step=req.getParameter(""String_Node_Str"");
  if (step == null || step.length() == 0)   return null;
  if (step.matches(""String_Node_Str"")) {
    String urlA=baseUrl.replaceAll(""String_Node_Str"" + step,""String_Node_Str"" + step + ""String_Node_Str"");
    String urlB=baseUrl.replaceAll(""String_Node_Str"" + step,""String_Node_Str"" + step + ""String_Node_Str"");
    return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + step + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ urlA+ ""String_Node_Str""+ ""String_Node_Str""+ urlB+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  if (step.matches(""String_Node_Str"")) {
    int stepNum=Integer.parseInt(step.substring(0,1));
    StringBuffer out=new StringBuffer();
    out.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + stepNum + ""String_Node_Str"");
    String prevUrl=(stepNum == 1) ? null : baseUrl.replaceAll(""String_Node_Str"" + step,""String_Node_Str"" + (stepNum - 1));
    String nextUrl=(stepNum == 5) ? null : baseUrl.replaceAll(""String_Node_Str"" + step,""String_Node_Str"" + (stepNum + 1));
    if (stepNum > 1)     out.append(""String_Node_Str"" + prevUrl + ""String_Node_Str"");
 else     out.append(""String_Node_Str"");
    if (stepNum < 5)     out.append(""String_Node_Str"" + nextUrl + ""String_Node_Str"");
 else     out.append(""String_Node_Str"");
    out.append(""String_Node_Str"" + ""String_Node_Str"");
    for (int i=1; i <= 5; i++) {
      if (i == stepNum)       out.append(""String_Node_Str"");
 else       out.append(""String_Node_Str"");
      if (i != stepNum) {
        String link=baseUrl.replaceAll(""String_Node_Str"" + step,""String_Node_Str"" + i);
        out.append(""String_Node_Str"" + link + ""String_Node_Str"");
      }
      out.append(""String_Node_Str"" + i + ""String_Node_Str"");
      if (i != stepNum)       out.append(""String_Node_Str"");
switch (i) {
case 1:
        out.append(""String_Node_Str"");
      break;
case 2:
    out.append(""String_Node_Str"");
  break;
case 3:
out.append(""String_Node_Str"");
break;
case 4:
out.append(""String_Node_Str"");
break;
case 5:
out.append(""String_Node_Str"");
break;
}
out.append(""String_Node_Str"");
if (i < 5) {
out.append(""String_Node_Str"");
switch (i) {
case 1:
out.append(""String_Node_Str"");
break;
case 2:
out.append(""String_Node_Str"");
break;
case 3:
out.append(""String_Node_Str"");
break;
case 4:
out.append(""String_Node_Str"");
break;
}
out.append(""String_Node_Str"");
}
if (i == stepNum) out.append(""String_Node_Str"");
out.append(""String_Node_Str"");
}
out.append(""String_Node_Str"" + ""String_Node_Str"");
switch (stepNum) {
case 1:
if (config.queryRouterSheet == null) {
out.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + config.queryParserSheet + ""String_Node_Str""+ ""String_Node_Str""+ nextUrl+ ""String_Node_Str"");
break;
}
out.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + config.queryRouterSheet + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nextUrl+ ""String_Node_Str"");
break;
case 2:
out.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + nextUrl + ""String_Node_Str"");
break;
case 3:
out.append(""String_Node_Str"" + ""String_Node_Str"" + prevUrl + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nextUrl+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
break;
case 4:
out.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + prevUrl + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nextUrl+ ""String_Node_Str"");
break;
case 5:
out.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + prevUrl + ""String_Node_Str""+ ""String_Node_Str"");
}
out.append(""String_Node_Str"" + ""String_Node_Str"");
return out.toString();
}
return null;
}","/** 
 * Checks if step mode is active and in the setup phase. If so, outputs the frameset and information frames.
 * @param req            The HTTP request (in)
 * @param res            The HTTP response (out)
 * @return A string to output if in step setup phase, null to do normal processing
 */
protected String stepSetup(HttpServletRequest req,HttpServletResponse res) throws IOException {
  String baseUrl=res.encodeURL(getRequestURL(req));
  baseUrl=baseUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String step=req.getParameter(""String_Node_Str"");
  if (step == null || step.length() == 0)   return null;
  if (step.matches(""String_Node_Str"")) {
    String urlA=baseUrl.replaceAll(""String_Node_Str"" + step,""String_Node_Str"" + step + ""String_Node_Str"");
    String urlB=baseUrl.replaceAll(""String_Node_Str"" + step,""String_Node_Str"" + step + ""String_Node_Str"");
    return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + step + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ urlA+ ""String_Node_Str""+ ""String_Node_Str""+ urlB+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  if (step.matches(""String_Node_Str"")) {
    int stepNum=Integer.parseInt(step.substring(0,1));
    StringBuffer out=new StringBuffer();
    out.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + stepNum + ""String_Node_Str"");
    String prevUrl=(stepNum == 1) ? null : baseUrl.replaceAll(""String_Node_Str"" + step,""String_Node_Str"" + (stepNum - 1));
    String nextUrl=(stepNum == 5) ? null : baseUrl.replaceAll(""String_Node_Str"" + step,""String_Node_Str"" + (stepNum + 1));
    if (stepNum > 1)     out.append(""String_Node_Str"" + prevUrl + ""String_Node_Str"");
 else     out.append(""String_Node_Str"");
    if (stepNum < 5)     out.append(""String_Node_Str"" + nextUrl + ""String_Node_Str"");
 else     out.append(""String_Node_Str"");
    out.append(""String_Node_Str"" + ""String_Node_Str"");
    for (int i=1; i <= 5; i++) {
      if (i == stepNum)       out.append(""String_Node_Str"");
 else       out.append(""String_Node_Str"");
      if (i != stepNum) {
        String link=baseUrl.replaceAll(""String_Node_Str"" + step,""String_Node_Str"" + i);
        out.append(""String_Node_Str"" + link + ""String_Node_Str"");
      }
      out.append(""String_Node_Str"" + i + ""String_Node_Str"");
      if (i != stepNum)       out.append(""String_Node_Str"");
switch (i) {
case 1:
        out.append(""String_Node_Str"");
      break;
case 2:
    out.append(""String_Node_Str"");
  break;
case 3:
out.append(""String_Node_Str"");
break;
case 4:
out.append(""String_Node_Str"");
break;
case 5:
out.append(""String_Node_Str"");
break;
}
out.append(""String_Node_Str"");
if (i < 5) {
out.append(""String_Node_Str"");
switch (i) {
case 1:
out.append(""String_Node_Str"");
break;
case 2:
out.append(""String_Node_Str"");
break;
case 3:
out.append(""String_Node_Str"");
break;
case 4:
out.append(""String_Node_Str"");
break;
}
out.append(""String_Node_Str"");
}
if (i == stepNum) out.append(""String_Node_Str"");
out.append(""String_Node_Str"");
}
out.append(""String_Node_Str"" + ""String_Node_Str"");
switch (stepNum) {
case 1:
if (config.queryRouterSheet == null) {
out.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + config.queryParserSheet + ""String_Node_Str""+ ""String_Node_Str""+ nextUrl+ ""String_Node_Str"");
break;
}
out.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + config.queryRouterSheet + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nextUrl+ ""String_Node_Str"");
break;
case 2:
out.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + nextUrl + ""String_Node_Str"");
break;
case 3:
out.append(""String_Node_Str"" + ""String_Node_Str"" + prevUrl + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nextUrl+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
break;
case 4:
out.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + prevUrl + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ nextUrl+ ""String_Node_Str"");
break;
case 5:
out.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + prevUrl + ""String_Node_Str""+ ""String_Node_Str"");
}
out.append(""String_Node_Str"" + ""String_Node_Str"");
return out.toString();
}
return null;
}",0.9924710641645128
24739,"/** 
 * Keyword-oriented spelling suggestion mechanism. For an ordered list of terms which can appear in any of the specified fields, come up with suggestions that have a good chance of improving  the precision and/or recall.
 * @param terms           Ordered list of query terms
 * @param fields          Unordered list of fields they can appear in
 * @param indexReader     Used to obtain term frequencies
 * @return                One suggestion per term. If unchanged, therewas no better suggestion. If null, it is suggested that the term be deleted.
 */
public synchronized String[] suggestKeywords(String[] terms,String[] fields) throws IOException {
  if (terms.length == 0)   return terms;
  Phrase bestPhrase=new Phrase();
  bestPhrase.descrip=""String_Node_Str"";
  bestPhrase.words=new Word[terms.length];
  for (int i=0; i < terms.length; i++)   bestPhrase.words[i]=new Word(terms[i]);
  bestPhrase.calcScore();
  if (terms.length == 1)   return subWord(bestPhrase,0).toStringArray();
  for (int i=0; i < terms.length - 1; i++)   bestPhrase=subPair(bestPhrase,i);
  return bestPhrase.toStringArray();
}","/** 
 * Keyword-oriented spelling suggestion mechanism. For an ordered list of terms, come up with suggestions that have a good chance of improving   the precision and/or recall.
 * @param terms           Ordered list of query terms
 * @param indexReader     Used to obtain term frequencies
 * @return                One suggestion per term. If unchanged, therewas no better suggestion. If null, it is suggested that the term be deleted.
 */
public synchronized String[] suggestKeywords(String[] terms) throws IOException {
  if (terms.length == 0)   return terms;
  Phrase bestPhrase=new Phrase();
  bestPhrase.descrip=""String_Node_Str"";
  bestPhrase.words=new Word[terms.length];
  for (int i=0; i < terms.length; i++)   bestPhrase.words[i]=new Word(terms[i]);
  bestPhrase.calcScore();
  if (terms.length == 1)   return subWord(bestPhrase,0).toStringArray();
  for (int i=0; i < terms.length - 1; i++)   bestPhrase=subPair(bestPhrase,i);
  return bestPhrase.toStringArray();
}",0.8790052606408417
24740,"/** 
 * Performs the pair-adding phase of the flush procedure.
 */
private void flushPhase2(ProgressTracker prog) throws IOException {
  if (!pairQueueFile.canRead())   return;
  PairFreqData pairData=new PairFreqData();
  if (pairFreqFile.canRead())   pairData.add(pairFreqFile);
  CountedInputStream queueCounted=new CountedInputStream(new FileInputStream(pairQueueFile));
  BufferedReader queueReader=new BufferedReader(new InputStreamReader(queueCounted,""String_Node_Str""));
  ProgressTracker[] subProgs=prog.split(90,10);
  long fileTotal=pairQueueFile.length();
  int prevPctDone=0;
  int totalAdded=0;
  try {
    boolean eof=false;
    while (!eof) {
      String line=queueReader.readLine();
      if (line == null) {
        eof=true;
        break;
      }
      String[] tokens=splitPat.split(line);
      if (tokens.length == 3) {
        String word1=tokens[0];
        String word2=tokens[1];
        String countTxt=tokens[2];
        try {
          pairData.add(word1,word2,Integer.parseInt(countTxt));
          ++totalAdded;
          if ((totalAdded & 0xFFF) == 0) {
            long filePos=queueCounted.nRead();
            int pctDone=(int)((filePos + 1) * 90 / (fileTotal + 1));
            subProgs[0].progress(filePos + 1,fileTotal + 1,""String_Node_Str"" + totalAdded + ""String_Node_Str"");
          }
        }
 catch (        NumberFormatException e) {
        }
      }
    }
  }
  finally {
    queueReader.close();
    queueCounted.close();
  }
  File newPairFreqFile=new File(spellIndexDir,""String_Node_Str"");
  newPairFreqFile.delete();
  subProgs[1].progress(50,100,""String_Node_Str"");
  pairData.save(newPairFreqFile);
  if (pairFreqFile.canRead() && !pairFreqFile.delete())   throw new IOException(""String_Node_Str"");
  if (!newPairFreqFile.renameTo(pairFreqFile))   throw new IOException(""String_Node_Str"");
  FileOutputStream tmp=new FileOutputStream(pairQueueFile);
  tmp.close();
  pairQueueFile.delete();
}","/** 
 * Performs the pair-adding phase of the flush procedure.
 */
private void flushPhase2(ProgressTracker prog) throws IOException {
  if (!pairQueueFile.canRead())   return;
  PairFreqData pairData=new PairFreqData();
  if (pairFreqFile.canRead())   pairData.add(pairFreqFile);
  CountedInputStream queueCounted=new CountedInputStream(new FileInputStream(pairQueueFile));
  BufferedReader queueReader=new BufferedReader(new InputStreamReader(queueCounted,""String_Node_Str""));
  ProgressTracker[] subProgs=prog.split(90,10);
  long fileTotal=pairQueueFile.length();
  int totalAdded=0;
  try {
    boolean eof=false;
    while (!eof) {
      String line=queueReader.readLine();
      if (line == null) {
        eof=true;
        break;
      }
      String[] tokens=splitPat.split(line);
      if (tokens.length == 3) {
        String word1=tokens[0];
        String word2=tokens[1];
        String countTxt=tokens[2];
        try {
          pairData.add(word1,word2,Integer.parseInt(countTxt));
          ++totalAdded;
          if ((totalAdded & 0xFFF) == 0) {
            long filePos=queueCounted.nRead();
            subProgs[0].progress(filePos + 1,fileTotal + 1,""String_Node_Str"" + totalAdded + ""String_Node_Str"");
          }
        }
 catch (        NumberFormatException e) {
        }
      }
    }
  }
  finally {
    queueReader.close();
    queueCounted.close();
  }
  File newPairFreqFile=new File(spellIndexDir,""String_Node_Str"");
  newPairFreqFile.delete();
  subProgs[1].progress(50,100,""String_Node_Str"");
  pairData.save(newPairFreqFile);
  if (pairFreqFile.canRead() && !pairFreqFile.delete())   throw new IOException(""String_Node_Str"");
  if (!newPairFreqFile.renameTo(pairFreqFile))   throw new IOException(""String_Node_Str"");
  FileOutputStream tmp=new FileOutputStream(pairQueueFile);
  tmp.close();
  pairQueueFile.delete();
}",0.9763406940063092
24741,"/** 
 * Flush any accumulated pairs, with their counts. For efficiency, skip any  pair that appeared only once.
 */
private void flushRecentPairs() throws IOException {
  if (recentPairs.isEmpty())   return;
  openPairQueueWriter();
  Set keySet=recentPairs.keySet();
  ArrayList list=new ArrayList(keySet);
  Collections.sort(list);
  for (int i=0; i < list.size(); i++) {
    String key=(String)list.get(i);
    int count=((Integer)recentPairs.get(key)).intValue();
    if (count > 1)     pairQueueWriter.println(key + ""String_Node_Str"" + count);
  }
  pairQueueWriter.flush();
  recentPairs.clear();
}","/** 
 * Flush any accumulated pairs, with their counts. For efficiency, skip any  pair that appeared only once.
 */
private void flushRecentPairs() throws IOException {
  if (recentPairs.isEmpty())   return;
  openPairQueueWriter();
  Set<String> keySet=recentPairs.keySet();
  ArrayList<String> list=new ArrayList<String>(keySet);
  Collections.sort(list);
  for (int i=0; i < list.size(); i++) {
    String key=list.get(i);
    int count=recentPairs.get(key).intValue();
    if (count > 1)     pairQueueWriter.println(key + ""String_Node_Str"" + count);
  }
  pairQueueWriter.flush();
  recentPairs.clear();
}",0.9035449299258038
24742,"/** 
 * Flush any accumulated words, with their counts.
 */
private void flushRecentWords() throws IOException {
  if (recentWords.isEmpty())   return;
  openWordQueueWriter();
  Set keySet=recentWords.keySet();
  ArrayList list=new ArrayList(keySet);
  Collections.sort(list);
  for (int i=0; i < list.size(); i++) {
    String key=(String)list.get(i);
    int count=((Integer)recentWords.get(key)).intValue();
    wordQueueWriter.println(key + ""String_Node_Str"" + count);
  }
  wordQueueWriter.flush();
  recentWords.clear();
}","/** 
 * Flush any accumulated words, with their counts.
 */
private void flushRecentWords() throws IOException {
  if (recentWords.isEmpty())   return;
  openWordQueueWriter();
  Set<String> keySet=recentWords.keySet();
  ArrayList<String> list=new ArrayList<String>(keySet);
  Collections.sort(list);
  for (int i=0; i < list.size(); i++) {
    String key=list.get(i);
    int count=recentWords.get(key).intValue();
    wordQueueWriter.println(key + ""String_Node_Str"" + count);
  }
  wordQueueWriter.flush();
  recentWords.clear();
}",0.9595484477892756
24743,"/** 
 * Closes the queue writers if either are open 
 */
private void closeQueueWriters() throws IOException {
  if (wordQueueWriter != null) {
    flushRecentWords();
    wordQueueWriter.close();
    wordQueueWriter=null;
  }
  if (pairQueueWriter != null) {
    flushRecentPairs();
    recentPairs=null;
    pairQueueWriter.close();
    pairQueueWriter=null;
  }
}","/** 
 * Closes the queue writers if either are open 
 */
private void closeQueueWriters() throws IOException {
  flushRecentWords();
  if (wordQueueWriter != null) {
    wordQueueWriter.close();
    wordQueueWriter=null;
  }
  flushRecentPairs();
  if (pairQueueWriter != null) {
    recentPairs=null;
    pairQueueWriter.close();
    pairQueueWriter=null;
  }
}",0.5686813186813187
24744,"/** 
 * Queue the given word if not recently checked. Caller should periodically call checkFlush() to see whether the queue is getting full. The queue will auto-expand if necessary, but it's better to flush it when near full.
 */
public synchronized void queueWord(String prevWord,String word) throws IOException {
  if (prevWord != null) {
    String key=prevWord + ""String_Node_Str"" + word;
    Integer val=(Integer)recentPairs.get(key);
    if (val == null)     val=IntegerValues.valueOf(1);
 else     val=IntegerValues.valueOf(val.intValue() + 1);
    recentPairs.put(key,val);
    if (recentPairs.size() >= MAX_RECENT_PAIRS)     flushRecentPairs();
  }
  Integer val=(Integer)recentWords.get(word);
  if (val == null)   val=IntegerValues.valueOf(1);
 else   val=IntegerValues.valueOf(val.intValue() + 1);
  recentWords.put(word,val);
  if (recentWords.size() >= MAX_RECENT_WORDS)   flushRecentWords();
}","/** 
 * Queue the given word if not recently checked. Caller should periodically call checkFlush() to see whether the queue is getting full. The queue will auto-expand if necessary, but it's better to flush it when near full.
 */
public synchronized void queueWord(String prevWord,String word) throws IOException {
  if (prevWord != null) {
    String key=prevWord + ""String_Node_Str"" + word;
    Integer val=recentPairs.get(key);
    if (val == null)     val=IntegerValues.valueOf(1);
 else     val=IntegerValues.valueOf(val.intValue() + 1);
    recentPairs.put(key,val);
    if (recentPairs.size() >= MAX_RECENT_PAIRS)     flushRecentPairs();
  }
  Integer val=recentWords.get(word);
  if (val == null)   val=IntegerValues.valueOf(1);
 else   val=IntegerValues.valueOf(val.intValue() + 1);
  recentWords.put(word,val);
  if (recentWords.size() >= MAX_RECENT_WORDS)   flushRecentWords();
}",0.9899888765294772
24745,"/** 
 */
private static int[][] form(int n,int m){
  int[][] d=new int[n + 1][m + 1];
  for (int i=0; i <= n; i++) {
    d[i][0]=i;
  }
  for (int j=0; j <= m; j++) {
    d[0][j]=j;
  }
  return d;
}","/** 
 */
private static int[][] form(int n,int m){
  int[][] d=new int[n + 1][m + 1];
  for (int i=0; i <= n; i++) {
    d[i][0]=i * 2;
  }
  for (int j=0; j <= m; j++) {
    d[0][j]=j;
  }
  return d;
}",0.9900497512437813
24746,"public final void resize(int newSize){
  if (newSize != size) {
    data=ArrayUtil.resize(data,newSize);
    if (newSize > size)     Arrays.fill(data,size,newSize,0.0f);
  }
}","public final void resize(int newSize){
  if (newSize != size) {
    data=ArrayUtil.resize(data,newSize);
    if (newSize > size)     Arrays.fill(data,size,newSize,0.0f);
    size=newSize;
  }
}",0.9510869565217392
24747,"public final void resize(int newSize){
  if (newSize != size) {
    data=ArrayUtil.resize(data,newSize);
    if (newSize > size)     Arrays.fill(data,size,newSize,0);
  }
}","public final void resize(int newSize){
  if (newSize != size) {
    data=ArrayUtil.resize(data,newSize);
    if (newSize > size)     Arrays.fill(data,size,newSize,0);
    size=newSize;
  }
}",0.9502762430939228
24748,"public final void resize(int newSize){
  if (newSize != size) {
    data=ArrayUtil.resize(data,newSize);
    if (newSize > size)     Arrays.fill(data,size,newSize,0L);
  }
}","public final void resize(int newSize){
  if (newSize != size) {
    data=ArrayUtil.resize(data,newSize);
    if (newSize > size)     Arrays.fill(data,size,newSize,0L);
    size=newSize;
  }
}",0.9505494505494504
24749,"public final void resize(int newSize){
  if (newSize != size) {
    data=ArrayUtil.resize(data,newSize);
    if (newSize > size)     Arrays.fill(data,size,newSize,null);
  }
}","public final void resize(int newSize){
  if (newSize != size) {
    data=ArrayUtil.resize(data,newSize);
    if (newSize > size)     Arrays.fill(data,size,newSize,null);
    size=newSize;
  }
}",0.9510869565217392
24750,"public SendInstruction(String url){
  this.url=url;
}","public SendInstruction(Expression urlExp){
  this.urlExp=urlExp;
}",0.8403361344537815
24751,"public Item evaluateItem(XPathContext context) throws XPathException {
  HttpServletResponse res=TextServlet.getCurResponse();
  String encodedUrl=res.encodeRedirectURL(url);
  try {
    res.sendRedirect(encodedUrl);
  }
 catch (  IOException e) {
    throw new DynamicError(e);
  }
  return null;
}","public Item evaluateItem(XPathContext context) throws XPathException {
  HttpServletResponse res=TextServlet.getCurResponse();
  String url=urlExp.evaluateAsString(context);
  String encodedUrl=res.encodeRedirectURL(url);
  try {
    res.sendRedirect(encodedUrl);
  }
 catch (  IOException e) {
    throw new DynamicError(e);
  }
  return null;
}",0.9271317829457364
24752,"public void prepareAttributes() throws TransformerConfigurationException {
  url=getAttributeList().getValue(""String_Node_Str"",""String_Node_Str"");
  if (url == null)   reportAbsence(""String_Node_Str"");
}","public void prepareAttributes() throws TransformerConfigurationException {
  String urlAtt=getAttributeList().getValue(""String_Node_Str"",""String_Node_Str"");
  if (urlAtt == null)   reportAbsence(""String_Node_Str"");
  urlExp=makeAttributeValueTemplate(urlAtt);
}",0.8620689655172413
24753,"public Expression compile(Executable exec) throws TransformerConfigurationException {
  return new SendInstruction(url);
}","public Expression compile(Executable exec) throws TransformerConfigurationException {
  return new SendInstruction(urlExp);
}",0.9878542510121456
24754,"/** 
 * Processes the main query node, turning it into a Lucene query.
 * @param main The 'query' element
 */
private void parseOutput(EasyNode main){
  if (main.name().equals(""String_Node_Str""))   throw new QueryFormatError(main.attrValue(""String_Node_Str""));
  for (int i=0; i < main.nAttrs(); i++) {
    String name=main.attrName(i);
    String val=main.attrValue(i);
    parseMainAttrib(main,name,val);
  }
  int nChildQueries=0;
  for (int i=0; i < main.nChildren(); i++) {
    EasyNode el=main.child(i);
    if (!el.isElement())     continue;
 else     if (""String_Node_Str"".equalsIgnoreCase(el.name()))     parseFacetSpec(el);
 else     if (""String_Node_Str"".equalsIgnoreCase(el.name()))     parseSpellcheck(el);
 else     if (""String_Node_Str"".equalsIgnoreCase(el.name()))     continue;
 else {
      req.query=deChunk(parseQuery(el,null,DEFAULT_MAX_SNIPPETS));
      nChildQueries++;
    }
  }
  if (nChildQueries > 1) {
    error(""String_Node_Str"" + main.name() + ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (main.name().equals(""String_Node_Str"") && Trace.getOutputLevel() >= Trace.debug) {
    Trace.debug(""String_Node_Str"" + req.query);
  }
  if (main.name().equals(""String_Node_Str"")) {
    if (req.indexPath == null)     error(""String_Node_Str"");
  }
}","/** 
 * Processes the main query node, turning it into a Lucene query.
 * @param main The 'query' element
 */
private void parseOutput(EasyNode main){
  if (main.name().equals(""String_Node_Str""))   throw new QueryFormatError(main.attrValue(""String_Node_Str""));
  int maxSnippets=DEFAULT_MAX_SNIPPETS;
  for (int i=0; i < main.nAttrs(); i++) {
    String name=main.attrName(i);
    String val=main.attrValue(i);
    if (name.equals(""String_Node_Str"")) {
      int oldVal=maxSnippets;
      maxSnippets=parseIntAttrib(main,name);
      if (maxSnippets < 0)       maxSnippets=999999999;
    }
 else     parseMainAttrib(main,name,val);
  }
  int nChildQueries=0;
  for (int i=0; i < main.nChildren(); i++) {
    EasyNode el=main.child(i);
    if (!el.isElement())     continue;
 else     if (""String_Node_Str"".equalsIgnoreCase(el.name()))     parseFacetSpec(el);
 else     if (""String_Node_Str"".equalsIgnoreCase(el.name()))     parseSpellcheck(el);
 else     if (""String_Node_Str"".equalsIgnoreCase(el.name()))     continue;
 else {
      req.query=deChunk(parseQuery(el,null,DEFAULT_MAX_SNIPPETS));
      nChildQueries++;
    }
  }
  if (nChildQueries > 1) {
    error(""String_Node_Str"" + main.name() + ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (main.name().equals(""String_Node_Str"") && Trace.getOutputLevel() >= Trace.debug) {
    Trace.debug(""String_Node_Str"" + req.query);
  }
  if (main.name().equals(""String_Node_Str"")) {
    if (req.indexPath == null)     error(""String_Node_Str"");
  }
}",0.918625678119349
24755,"/** 
 * Rewrite a wildcard term query. Removes diacritics from words.
 * @param q  The query to rewrite
 * @return   Rewritten version, or 'q' unchanged if no changed needed.
 */
protected Query rewrite(SpanWildcardQuery q){
  Term t=q.getTerm();
  String mapped=accentMap.mapWord(t.text());
  if (mapped == null)   return q;
  Term newTerm=new Term(t.field(),mapped);
  return copyBoost(q,new SpanWildcardQuery(newTerm,q.getTermLimit()));
}","/** 
 * Rewrite a wildcard term query. Removes diacritics from words.
 * @param q  The query to rewrite
 * @return   Rewritten version, or 'q' unchanged if no changed needed.
 */
protected Query rewrite(SpanWildcardQuery q){
}",0.6776611694152923
24756,"/** 
 * Checks spelling of query terms, if spelling suggestion is enabled and the result falls below the cutoff threshholds.
 * @param req   Original query request
 * @param res   Results of the query
 */
private void spellCheck(QueryRequest req,QueryResult res) throws IOException {
  ArrayList queryTerms=gatherTerms(req.query);
  SpellcheckParams params=req.spellcheckParams;
  if (params.docScoreCutoff > 0 && maxDocScore > params.docScoreCutoff)   return;
  if (params.totalDocsCutoff > 0 && res.totalDocs > params.totalDocsCutoff)   return;
  ArrayList out=new ArrayList();
  for (int i=0; i < queryTerms.size(); i++) {
    Term term=(Term)queryTerms.get(i);
    if (params.fields != null && !params.fields.contains(term.field()))     continue;
    SpellingSuggestion sugg=new SpellingSuggestion();
    sugg.origTerm=term;
    sugg.altWords=spellReader.suggestSimilar(term.text(),req.spellcheckParams.suggestionsPerTerm,indexReader,term.field(),params.termOccurrenceFactor,params.accuracy);
    if (sugg.altWords.length > 0)     out.add(sugg);
  }
  if (out.size() > 0) {
    res.suggestions=(SpellingSuggestion[])out.toArray(new SpellingSuggestion[out.size()]);
  }
}","/** 
 * Checks spelling of query terms, if spelling suggestion is enabled and the result falls below the cutoff threshholds.
 * @param req   Original query request
 * @param res   Results of the query
 */
private void spellCheck(QueryRequest req,QueryResult res) throws IOException {
  ArrayList queryTerms=gatherTerms(req.query);
  SpellcheckParams params=req.spellcheckParams;
  int totalDocs=res.totalDocs;
  if (res.facets != null) {
    for (int i=0; i < res.facets.length; i++) {
      if (res.facets[i].rootGroup != null)       totalDocs=Math.max(totalDocs,res.facets[i].rootGroup.totalDocs);
    }
  }
  if (params.docScoreCutoff > 0 && maxDocScore > params.docScoreCutoff)   return;
  if (params.totalDocsCutoff > 0 && totalDocs > params.totalDocsCutoff)   return;
  ArrayList out=new ArrayList();
  for (int i=0; i < queryTerms.size(); i++) {
    Term term=(Term)queryTerms.get(i);
    if (params.fields != null && !params.fields.contains(term.field()))     continue;
    SpellingSuggestion sugg=new SpellingSuggestion();
    sugg.origTerm=term;
    sugg.altWords=spellReader.suggestSimilar(term.text(),req.spellcheckParams.suggestionsPerTerm,indexReader,term.field(),params.termOccurrenceFactor,params.accuracy);
    if (sugg.altWords.length > 0)     out.add(sugg);
  }
  if (out.size() > 0) {
    res.suggestions=(SpellingSuggestion[])out.toArray(new SpellingSuggestion[out.size()]);
  }
}",0.90873786407767
24757,"/** 
 * Although not completely standardized yet, most modern browsers encode Unicode characters above U+007F to UTF8 in the URL. This method looks for probably UTF8 encodings and converts them back to normal Unicode characters.
 * @param value   value to convert
 * @return        equivalent value with UTF8 decoded to Unicode
 */
public static String convertUTF8inURL(String value){
  char[] chars=value.toCharArray();
  boolean foundUTF=false;
  for (int i=0; i < chars.length; i++) {
    char c=chars[i];
    if ((c & 0xFF00) != 0)     return value;
    if (c <= 0x7F)     continue;
    if (c >= 0xC0 && c <= 0xDF && i + 1 < chars.length && chars[i + 1] >= 0x80 && chars[i + 1] <= 0xBF) {
      foundUTF=true;
      i++;
    }
 else     if (c >= 0xE0 && c <= 0xEF && i + 2 < chars.length && chars[i + 1] >= 0x80 && chars[i + 1] <= 0xBF && chars[i + 2] >= 0x80 && chars[i + 2] <= 0xBF) {
      foundUTF=true;
      i+=2;
    }
 else     if (c >= 0xF0 && c <= 0xF7 && i + 3 < chars.length && chars[i + 1] >= 0x80 && chars[i + 1] <= 0xBF && chars[i + 2] >= 0x80 && chars[i + 2] <= 0xBF && chars[i + 3] >= 0x80 && chars[i + 3] <= 0xBF) {
      foundUTF=true;
      i+=3;
    }
 else     if (c >= 0x80 && c <= 0xBF)     return value;
 else     if (c >= 0xF8 && c <= 0xFF)     return value;
  }
  if (!foundUTF)   return value;
  try {
    byte[] bytes=value.getBytes(""String_Node_Str"");
    return new String(bytes,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    return value;
  }
}","/** 
 * Although not completely standardized yet, most modern browsers encode Unicode characters above U+007F to UTF8 in the URL. This method looks for probably UTF8 encodings and converts them back to normal Unicode characters. One might ask why this is necessary... doesn't URLDecoder handle it? Well, some servlet containers seem to partially decode URLs; they decode the escapes, but then they don't do the UTF-8 conversion.
 * @param value   value to convert
 * @return        equivalent value with UTF8 decoded to Unicode
 */
public static String convertUTF8inURL(String value){
  char[] chars=value.toCharArray();
  boolean foundUTF=false;
  for (int i=0; i < chars.length; i++) {
    char c=chars[i];
    if ((c & 0xFF00) != 0)     return value;
    if (c <= 0x7F)     continue;
    if (c >= 0xC0 && c <= 0xDF && i + 1 < chars.length && chars[i + 1] >= 0x80 && chars[i + 1] <= 0xBF) {
      foundUTF=true;
      i++;
    }
 else     if (c >= 0xE0 && c <= 0xEF && i + 2 < chars.length && chars[i + 1] >= 0x80 && chars[i + 1] <= 0xBF && chars[i + 2] >= 0x80 && chars[i + 2] <= 0xBF) {
      foundUTF=true;
      i+=2;
    }
 else     if (c >= 0xF0 && c <= 0xF7 && i + 3 < chars.length && chars[i + 1] >= 0x80 && chars[i + 1] <= 0xBF && chars[i + 2] >= 0x80 && chars[i + 2] <= 0xBF && chars[i + 3] >= 0x80 && chars[i + 3] <= 0xBF) {
      foundUTF=true;
      i+=3;
    }
 else     if (c >= 0x80 && c <= 0xBF)     return value;
 else     if (c >= 0xF8 && c <= 0xFF)     return value;
  }
  if (!foundUTF)   return value;
  try {
    byte[] bytes=value.getBytes(""String_Node_Str"");
    return new String(bytes,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    return value;
  }
}",0.9376947040498442
24758,"/** 
 * Calculates and adds the ""servlet.path"" and ""root.path"" attributes  to the given transformer. Also adds ""xtf.home"" based on the servlet root directory.
 */
public void stuffSpecialAttribs(HttpServletRequest req,Transformer trans){
  String uri=req.getRequestURL().toString();
  if (!uri.startsWith(""String_Node_Str""))   uri=req.getRequestURI();
  if (uri.indexOf('?') >= 0)   uri=uri.substring(0,uri.indexOf('?'));
  trans.setParameter(""String_Node_Str"",new StringValue(uri));
  trans.setParameter(""String_Node_Str"",new StringValue(uri));
  String rootPath=uri;
  if (rootPath.endsWith(""String_Node_Str""))   rootPath=rootPath.substring(0,rootPath.length() - 1);
  int slashPos=rootPath.lastIndexOf('/');
  if (slashPos >= 1)   rootPath=rootPath.substring(0,slashPos);
  String lookFor=""String_Node_Str"";
  if (rootPath.endsWith(lookFor))   rootPath=rootPath.substring(0,rootPath.length() - lookFor.length());
  rootPath=rootPath + ""String_Node_Str"";
  trans.setParameter(""String_Node_Str"",new StringValue(rootPath));
  trans.setParameter(""String_Node_Str"",new StringValue(rootPath));
  String xtfHome=Path.normalizePath(getRealPath(""String_Node_Str""));
  trans.setParameter(""String_Node_Str"",xtfHome);
  Enumeration i=req.getHeaderNames();
  trans.setParameter(""String_Node_Str"",getRequestURL(req));
  while (i.hasMoreElements()) {
    String name=(String)i.nextElement();
    String value=req.getHeader(name);
    trans.setParameter(""String_Node_Str"" + name,new StringValue(value));
  }
}","/** 
 * Calculates and adds the ""servlet.path"" and ""root.path"" attributes  to the given transformer. Also adds ""xtf.home"" based on the servlet root directory.
 */
public void stuffSpecialAttribs(HttpServletRequest req,Transformer trans){
  String uri=req.getRequestURL().toString();
  if (!uri.startsWith(""String_Node_Str""))   uri=req.getRequestURI();
  if (uri.indexOf('?') >= 0)   uri=uri.substring(0,uri.indexOf('?'));
  uri=decodeURL(uri);
  uri=convertUTF8inURL(uri);
  trans.setParameter(""String_Node_Str"",new StringValue(uri));
  trans.setParameter(""String_Node_Str"",new StringValue(uri));
  String rootPath=uri;
  if (rootPath.endsWith(""String_Node_Str""))   rootPath=rootPath.substring(0,rootPath.length() - 1);
  int slashPos=rootPath.lastIndexOf('/');
  if (slashPos >= 1)   rootPath=rootPath.substring(0,slashPos);
  String lookFor=""String_Node_Str"";
  if (rootPath.endsWith(lookFor))   rootPath=rootPath.substring(0,rootPath.length() - lookFor.length());
  rootPath=rootPath + ""String_Node_Str"";
  trans.setParameter(""String_Node_Str"",new StringValue(rootPath));
  trans.setParameter(""String_Node_Str"",new StringValue(rootPath));
  String xtfHome=Path.normalizePath(getRealPath(""String_Node_Str""));
  trans.setParameter(""String_Node_Str"",xtfHome);
  Enumeration i=req.getHeaderNames();
  trans.setParameter(""String_Node_Str"",getRequestURL(req));
  while (i.hasMoreElements()) {
    String name=(String)i.nextElement();
    String value=req.getHeader(name);
    trans.setParameter(""String_Node_Str"" + name,new StringValue(value));
  }
}",0.9832402234636872
24759,"/** 
 * Gets the full URL, including query parameters, from an HTTP request. This is a bit tricky since different servlet containers return slightly different info.
 */
public static String getRequestURL(HttpServletRequest req){
  String url=req.getRequestURL().toString();
  if (url.indexOf('?') < 0 && req.getQueryString() != null && req.getQueryString().length() > 0) {
    url=url + ""String_Node_Str"" + req.getQueryString();
  }
  if (url.indexOf(""String_Node_Str"") >= 0)   url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return url;
}","/** 
 * Gets the full URL, including query parameters, from an HTTP request. This is a bit tricky since different servlet containers return slightly different info.
 */
public static String getRequestURL(HttpServletRequest req){
  String url=req.getRequestURL().toString();
  if (url.indexOf('?') < 0 && req.getQueryString() != null && req.getQueryString().length() > 0) {
    url=url + ""String_Node_Str"" + req.getQueryString();
  }
  if (url.indexOf(""String_Node_Str"") >= 0)   url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  url=decodeURL(url);
  url=convertUTF8inURL(url);
  return url;
}",0.938314509122502
24760,"public boolean skipTo(int target) throws IOException {
  dataPos=Math.max(dataPos,data.nextIndexAfterDoc(target) - 1);
  return next();
}","public boolean skipTo(int target) throws IOException {
  dataPos=Math.max(dataPos,data.findDocIndex(target) - 1);
  return next();
}",0.9368029739776952
24761,"/** 
 * Traverse a ""more like this"" query 
 */
protected void traverse(MoreLikeThisQuery mlt){
  traverseQuery(mlt.getSubQuery());
}","/** 
 * Traverse a numeric range query query 
 */
protected void traverse(NumericRangeQuery nrq){
}",0.6233766233766234
24762,"/** 
 * Traverse a query of any supported type.
 * @param q   Query to traverse
 */
public void traverseQuery(Query q){
  if (q instanceof SpanSectionTypeQuery)   traverse((SpanSectionTypeQuery)q);
 else   if (q instanceof SpanExactQuery)   traverse((SpanExactQuery)q);
 else   if (q instanceof MoreLikeThisQuery)   traverse((MoreLikeThisQuery)q);
 else   super.traverseQuery(q);
}","/** 
 * Traverse a query of any supported type.
 * @param q   Query to traverse
 */
public void traverseQuery(Query q){
  if (q instanceof SpanSectionTypeQuery)   traverse((SpanSectionTypeQuery)q);
 else   if (q instanceof SpanExactQuery)   traverse((SpanExactQuery)q);
 else   if (q instanceof MoreLikeThisQuery)   traverse((MoreLikeThisQuery)q);
 else   if (q instanceof NumericRangeQuery)   traverse((NumericRangeQuery)q);
 else   super.traverseQuery(q);
}",0.9071428571428573
24763,"/** 
 * Iterate all the spans from the text query that match the sectionType query also.
 */
public Spans getSpans(final IndexReader reader,final Searcher searcher) throws IOException {
  ArrayList newClauses=new ArrayList(clauses.length);
  for (int i=0; i < clauses.length; i++) {
    if (!(clauses[i] instanceof SpanTermQuery))     throw new RuntimeException(""String_Node_Str"");
    boolean isFirst=(i == 0);
    boolean isLast=(i == clauses.length - 1);
    if (!isFirst && !isLast) {
      newClauses.add(clauses[i]);
      continue;
    }
    SpanTermQuery oldClause=(SpanTermQuery)clauses[i];
    String oldTerm=oldClause.getTerm().text();
    String field=oldClause.getTerm().field();
    SpanQuery detachedStartQuery=new SpanTermQuery(new Term(field,""String_Node_Str"" + Constants.FIELD_START_MARKER));
    SpanQuery detachedEndQuery=new SpanTermQuery(new Term(field,""String_Node_Str"" + Constants.FIELD_END_MARKER));
    ArrayList orClauses=new ArrayList();
    for (int startAtt=0; startAtt < 3; ++startAtt) {
      if ((startAtt == 0 && isFirst) || (startAtt != 0 && !isFirst))       continue;
      for (int endAtt=0; endAtt < 3; ++endAtt) {
        if ((endAtt == 0 && isLast) || (endAtt != 0 && !isLast))         continue;
        ArrayList phraseClauses=new ArrayList();
        if (startAtt == 1)         phraseClauses.add(detachedStartQuery);
        String newTerm=oldTerm;
        if (startAtt == 2)         newTerm=Constants.FIELD_START_MARKER + newTerm;
        if (endAtt == 2)         newTerm=newTerm + Constants.FIELD_END_MARKER;
        SpanQuery newClause=new SpanTermQuery(new Term(field,newTerm));
        newClause.setBoost(oldClause.getBoost());
        phraseClauses.add(newClause);
        if (endAtt == 1)         phraseClauses.add(detachedEndQuery);
        int nTerms=phraseClauses.size();
        if (nTerms == 1)         orClauses.add(phraseClauses.get(0));
 else {
          orClauses.add(new SpanNearQuery((SpanQuery[])phraseClauses.toArray(new SpanQuery[nTerms]),0,true));
        }
      }
    }
    if (orClauses.size() == 1) {
      newClauses.add(orClauses.get(0));
      continue;
    }
    SpanOrQuery orQuery=new SpanOrQuery((SpanQuery[])orClauses.toArray(new SpanQuery[orClauses.size()]));
    newClauses.add(orQuery);
  }
  SpanQuery q=new SpanNearQuery((SpanQuery[])newClauses.toArray(new SpanQuery[newClauses.size()]),0,true);
  q.setSpanRecording(getSpanRecording());
  return q.getSpans(reader,searcher);
}","/** 
 * Iterate all the spans from the text query that match the sectionType query also.
 */
public Spans getSpans(final IndexReader reader,final Searcher searcher) throws IOException {
  ArrayList newClauses=new ArrayList(clauses.length);
  for (int i=0; i < clauses.length; i++) {
    if (!(clauses[i] instanceof SpanTermQuery))     throw new RuntimeException(""String_Node_Str"");
    boolean isFirst=(i == 0);
    boolean isLast=(i == clauses.length - 1);
    if (!isFirst && !isLast) {
      newClauses.add(clauses[i]);
      continue;
    }
    SpanTermQuery oldClause=(SpanTermQuery)clauses[i];
    String oldTerm=oldClause.getTerm().text();
    String field=oldClause.getTerm().field();
    int length=oldClause.getTermLength();
    SpanQuery detachedStartQuery=new SpanTermQuery(new Term(field,""String_Node_Str"" + Constants.FIELD_START_MARKER));
    SpanQuery detachedEndQuery=new SpanTermQuery(new Term(field,""String_Node_Str"" + Constants.FIELD_END_MARKER));
    ArrayList orClauses=new ArrayList();
    for (int startAtt=0; startAtt < 3; ++startAtt) {
      if ((startAtt == 0 && isFirst) || (startAtt != 0 && !isFirst))       continue;
      for (int endAtt=0; endAtt < 3; ++endAtt) {
        if ((endAtt == 0 && isLast) || (endAtt != 0 && !isLast))         continue;
        ArrayList phraseClauses=new ArrayList();
        if (startAtt == 1)         phraseClauses.add(detachedStartQuery);
        String newTerm=oldTerm;
        if (startAtt == 2)         newTerm=Constants.FIELD_START_MARKER + newTerm;
        if (endAtt == 2)         newTerm=newTerm + Constants.FIELD_END_MARKER;
        SpanQuery newClause=new SpanTermQuery(new Term(field,newTerm),length);
        newClause.setBoost(oldClause.getBoost());
        phraseClauses.add(newClause);
        if (endAtt == 1)         phraseClauses.add(detachedEndQuery);
        int nTerms=phraseClauses.size();
        if (nTerms == 1)         orClauses.add(phraseClauses.get(0));
 else {
          orClauses.add(new SpanNearQuery((SpanQuery[])phraseClauses.toArray(new SpanQuery[nTerms]),0,true));
        }
      }
    }
    if (orClauses.size() == 1) {
      newClauses.add(orClauses.get(0));
      continue;
    }
    SpanOrQuery orQuery=new SpanOrQuery((SpanQuery[])orClauses.toArray(new SpanQuery[orClauses.size()]));
    newClauses.add(orQuery);
  }
  SpanQuery q=new SpanNearQuery((SpanQuery[])newClauses.toArray(new SpanQuery[newClauses.size()]),0,true);
  q.setSpanRecording(getSpanRecording());
  return q.getSpans(reader,searcher);
}",0.9901309164149044
24764,"/** 
 * Generate a proximity query on a field. This uses the de-duplicating span system.
 * @param parent The element containing the field name and terms.
 */
Query makeProxQuery(EasyNode parent,int slop,String field,int maxSnippets) throws QueryGenException {
  Vector terms=new Vector();
  Vector notVec=new Vector();
  for (int i=0; i < parent.nChildren(); i++) {
    EasyNode el=parent.child(i);
    if (!el.isElement())     continue;
    if (el.name().equals(""String_Node_Str"")) {
      if (parent.name().matches(""String_Node_Str""))       error(""String_Node_Str"");
      notVec.add(parseQuery2(el,""String_Node_Str"",field,maxSnippets));
    }
 else {
      SpanQuery q;
      if (slop == 0) {
        Term t=parseTerm(el,field,""String_Node_Str"");
        if (isWildcardTerm(t))         q=new XtfSpanWildcardQuery(t,req.termLimit);
 else         q=new SpanTermQuery(t);
        q.setSpanRecording(maxSnippets);
        terms.add(q);
      }
 else       terms.add(parseQuery(el,field,maxSnippets));
    }
  }
  if (terms.size() == 0)   error(""String_Node_Str"" + parent.name() + ""String_Node_Str""+ ""String_Node_Str"");
  SpanQuery q;
  SpanQuery[] termQueries=(SpanQuery[])terms.toArray(new SpanQuery[terms.size()]);
  if (slop < 0)   q=new SpanExactQuery(termQueries);
 else   if (terms.size() == 1)   q=(SpanQuery)terms.elementAt(0);
 else   if (parent.name().equals(""String_Node_Str""))   q=new SpanOrNearQuery(termQueries,slop,true);
 else   q=new SpanNearQuery(termQueries,slop,slop == 0);
  q.setSpanRecording(maxSnippets);
  return processSpanNots(q,notVec,maxSnippets);
}","/** 
 * Generate a proximity query on a field. This uses the de-duplicating span system.
 * @param parent The element containing the field name and terms.
 */
Query makeProxQuery(EasyNode parent,int slop,String field,int maxSnippets) throws QueryGenException {
  Vector terms=new Vector();
  Vector notVec=new Vector();
  for (int i=0; i < parent.nChildren(); i++) {
    EasyNode el=parent.child(i);
    if (!el.isElement())     continue;
    if (el.name().equals(""String_Node_Str"")) {
      if (parent.name().matches(""String_Node_Str""))       error(""String_Node_Str"");
      notVec.add(parseQuery2(el,""String_Node_Str"",field,maxSnippets));
    }
 else     if (el.name().equals(""String_Node_Str""))     continue;
 else {
      SpanQuery q;
      if (slop == 0) {
        Term t=parseTerm(el,field,""String_Node_Str"");
        if (isWildcardTerm(t))         q=new XtfSpanWildcardQuery(t,req.termLimit);
 else         q=new SpanTermQuery(t);
        q.setSpanRecording(maxSnippets);
        terms.add(q);
      }
 else       terms.add(parseQuery(el,field,maxSnippets));
    }
  }
  if (terms.size() == 0)   error(""String_Node_Str"" + parent.name() + ""String_Node_Str""+ ""String_Node_Str"");
  SpanQuery q;
  SpanQuery[] termQueries=(SpanQuery[])terms.toArray(new SpanQuery[terms.size()]);
  if (slop < 0)   q=new SpanExactQuery(termQueries);
 else   if (terms.size() == 1)   q=(SpanQuery)terms.elementAt(0);
 else   if (parent.name().equals(""String_Node_Str""))   q=new SpanOrNearQuery(termQueries,slop,true);
 else   q=new SpanNearQuery(termQueries,slop,slop == 0);
  q.setSpanRecording(maxSnippets);
  return processSpanNots(q,notVec,maxSnippets);
}",0.9798199316982305
24765,"/** 
 * Does the work of creating the guts of a keyword query.
 */
private Query createMultiFieldQuery(EasyNode parent,String[] fields,SpanQuery[] spanQueries,int slop,int maxMetaSnippets,int maxTextSnippets){
  BooleanQuery mainQuery=new BooleanQuery();
  RefieldingQueryRewriter refielder=new RefieldingQueryRewriter();
  if (parent.name().equals(""String_Node_Str"")) {
    for (int i=0; i < spanQueries.length; i++) {
      BooleanQuery termOrQuery=new BooleanQuery();
      for (int j=0; j < fields.length; j++) {
        Query tq=refielder.refield(spanQueries[i],fields[j]);
        termOrQuery.add(deChunk(tq),false,false);
      }
      termOrQuery.setBoost(0.0f);
      mainQuery.add(termOrQuery,true,false);
    }
  }
  for (int i=0; i < fields.length; i++) {
    SpanQuery[] termQueries=new SpanQuery[spanQueries.length];
    for (int j=0; j < spanQueries.length; j++)     termQueries[j]=(SpanQuery)refielder.refield(spanQueries[j],fields[i]);
    SpanQuery fieldOrQuery=(SpanQuery)deChunk(new SpanOrNearQuery(termQueries,slop,true));
    int maxSnippets=(fields[i].equals(""String_Node_Str"")) ? maxTextSnippets : maxMetaSnippets;
    fieldOrQuery.setSpanRecording(maxSnippets);
    mainQuery.add(fieldOrQuery,false,false);
  }
  return simplifyBooleanQuery(mainQuery);
}","/** 
 * Does the work of creating the guts of a keyword query.
 */
private Query createMultiFieldQuery(EasyNode parent,String[] fields,SpanQuery[] spanQueries,int slop,int maxMetaSnippets,int maxTextSnippets){
  BooleanQuery mainQuery=new BooleanQuery();
  RefieldingQueryRewriter refielder=new RefieldingQueryRewriter();
  if (parent.name().equals(""String_Node_Str"")) {
    for (int i=0; i < spanQueries.length; i++) {
      BooleanQuery termOrQuery=new BooleanQuery();
      for (int j=0; j < fields.length; j++) {
        Query tq=refielder.refield(spanQueries[i],fields[j]);
        tq=deChunk(tq);
        if (tq instanceof SpanQuery)         ((SpanQuery)tq).setSpanRecording(0);
        termOrQuery.add(tq,false,false);
      }
      termOrQuery.setBoost(0.0f);
      mainQuery.add(termOrQuery,true,false);
    }
  }
  for (int i=0; i < fields.length; i++) {
    SpanQuery[] termQueries=new SpanQuery[spanQueries.length];
    for (int j=0; j < spanQueries.length; j++)     termQueries[j]=(SpanQuery)refielder.refield(spanQueries[j],fields[i]);
    SpanQuery fieldOrQuery=(SpanQuery)deChunk(new SpanOrNearQuery(termQueries,slop,true));
    int maxSnippets=(fields[i].equals(""String_Node_Str"")) ? maxTextSnippets : maxMetaSnippets;
    fieldOrQuery.setSpanRecording(maxSnippets);
    mainQuery.add(fieldOrQuery,false,false);
  }
  return simplifyBooleanQuery(mainQuery);
}",0.952165725047081
24766,"/** 
 * Constructor - Reads and parses the global configuration file (XML) for  the servlet.
 * @param path                Filesystem path to the config file.
 * @throws DynaXMLException    If a read or parse error occurs.
 */
public void read(String expectedRootTag,String path) throws GeneralException {
  try {
    StreamSource src=new StreamSource(new File(path));
    NodeInfo doc=null;
    try {
      doc=TinyBuilder.build(src,new AllElementStripper(),config);
    }
 catch (    XPathException e) {
      throw new RuntimeException(e);
    }
    EasyNode root=new EasyNode(doc);
    String rootTag=root.name();
    if (rootTag.equals(""String_Node_Str"") && root.nChildren() == 1) {
      root=root.child(0);
      rootTag=root.name();
    }
    if (!rootTag.equals(expectedRootTag))     throw new GeneralException(""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ expectedRootTag+ ""String_Node_Str"");
    for (int i=0; i < root.nChildren(); i++) {
      EasyNode el=root.child(i);
      if (!el.isElement())       continue;
      String tagName=el.name();
      for (int j=0; j < el.nAttrs(); j++) {
        String attrName=el.attrName(j);
        String strVal=el.attrValue(j);
        if (!handleProperty(tagName + ""String_Node_Str"" + attrName,strVal)) {
          throw new GeneralException(""String_Node_Str"" + tagName + ""String_Node_Str""+ attrName+ ""String_Node_Str"");
        }
        attribs.put(tagName + ""String_Node_Str"" + attrName,strVal);
      }
    }
  }
 catch (  Exception e) {
    throw new GeneralException(""String_Node_Str"" + path + ""String_Node_Str""+ e);
  }
  requireOrElse(errorGenSheet,""String_Node_Str"");
}","/** 
 * Constructor - Reads and parses the global configuration file (XML) for  the servlet.
 * @param path                Filesystem path to the config file.
 * @throws DynaXMLException    If a read or parse error occurs.
 */
public void read(String expectedRootTag,String path) throws GeneralException {
  try {
    StreamSource src=new StreamSource(new File(path));
    NodeInfo doc=null;
    try {
      doc=TinyBuilder.build(src,new AllElementStripper(),config);
    }
 catch (    XPathException e) {
      throw new RuntimeException(e);
    }
    EasyNode root=new EasyNode(doc);
    String rootTag=root.name();
    if (rootTag.equals(""String_Node_Str"") && root.nChildren() == 1) {
      root=root.child(0);
      rootTag=root.name();
    }
    if (!rootTag.equals(expectedRootTag))     throw new GeneralException(""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ expectedRootTag+ ""String_Node_Str"");
    for (int i=0; i < root.nChildren(); i++) {
      EasyNode el=root.child(i);
      if (!el.isElement())       continue;
      String tagName=el.name();
      for (int j=0; j < el.nAttrs(); j++) {
        String attrName=el.attrName(j);
        String strVal=el.attrValue(j);
        if (!handleProperty(tagName + ""String_Node_Str"" + attrName,strVal)) {
          ;
        }
        attribs.put(tagName + ""String_Node_Str"" + attrName,strVal);
      }
    }
  }
 catch (  Exception e) {
    throw new GeneralException(""String_Node_Str"" + path + ""String_Node_Str""+ e);
  }
  requireOrElse(errorGenSheet,""String_Node_Str"");
}",0.8830519074421513
24767,"public Explanation explain() throws IOException {
  Explanation result=new Explanation(0,""String_Node_Str"" + toString() + ""String_Node_Str"");
  Explanation totalExpl;
  if (matchEndCell == 0)   totalExpl=((SpansCell)cells.get(0)).spans.explain();
 else {
    float totalScore=0.0f;
    totalExpl=new Explanation(0,""String_Node_Str"");
    for (int i=0; i <= matchEndCell; i++) {
      SpansCell cell=(SpansCell)cells.get(i);
      totalScore+=cell.score();
      totalExpl.addDetail(cell.spans.explain());
    }
    totalExpl.setValue(totalScore);
  }
  result.addDetail(totalExpl);
  Explanation boostExpl=new Explanation(query.getBoost(),""String_Node_Str"");
  if (boostExpl.getValue() != 1.0f)   result.addDetail(boostExpl);
  Explanation distExpl=new Explanation(0,""String_Node_Str"" + (nClauses + 1) + ""String_Node_Str"");
  Explanation slopExpl=new Explanation(similarity.sloppyFreq(matchDist),""String_Node_Str"" + matchDist + ""String_Node_Str"");
  distExpl.addDetail(slopExpl);
  distExpl.setValue(slopExpl.getValue() / (nClauses + 1));
  Explanation coordExpl=new Explanation((float)(matchEndCell + 1) / (nClauses + 1),""String_Node_Str"" + (matchEndCell + 1) + ""String_Node_Str""+ (nClauses + 1)+ ""String_Node_Str"");
  Explanation combinedFactorsExpl=new Explanation(distExpl.getValue() + coordExpl.getValue(),""String_Node_Str"");
  combinedFactorsExpl.addDetail(distExpl);
  combinedFactorsExpl.addDetail(coordExpl);
  result.addDetail(combinedFactorsExpl);
  result.setValue(totalExpl.getValue() * boostExpl.getValue() * combinedFactorsExpl.getValue());
  return result;
}","public Explanation explain() throws IOException {
  Explanation result=new Explanation(0,""String_Node_Str"" + toString() + ""String_Node_Str"");
  Explanation totalExpl;
  if (matchEndCell == 0)   totalExpl=((SpansCell)cells.get(0)).spans.explain();
 else {
    float totalScore=0.0f;
    totalExpl=new Explanation(0,""String_Node_Str"");
    SpansCell prevCell=null;
    for (int i=0; i <= matchEndCell; i++) {
      SpansCell cell=(SpansCell)cells.get(i);
      if (prevCell != null && cell.start() < prevCell.end())       continue;
      totalScore+=cell.score();
      totalExpl.addDetail(cell.spans.explain());
      prevCell=cell;
    }
    totalExpl.setValue(totalScore);
  }
  result.addDetail(totalExpl);
  Explanation boostExpl=new Explanation(query.getBoost(),""String_Node_Str"");
  if (boostExpl.getValue() != 1.0f)   result.addDetail(boostExpl);
  Explanation distExpl=new Explanation(0,""String_Node_Str"" + (nClauses + 1) + ""String_Node_Str"");
  Explanation slopExpl=new Explanation(similarity.sloppyFreq(matchDist),""String_Node_Str"" + matchDist + ""String_Node_Str"");
  distExpl.addDetail(slopExpl);
  distExpl.setValue(slopExpl.getValue() / (nClauses + 1));
  Explanation coordExpl=new Explanation((float)(matchNumCells + 1) / (nClauses + 1),""String_Node_Str"" + (matchNumCells + 1) + ""String_Node_Str""+ (nClauses + 1)+ ""String_Node_Str"");
  Explanation combinedFactorsExpl=new Explanation(distExpl.getValue() + coordExpl.getValue(),""String_Node_Str"");
  combinedFactorsExpl.addDetail(distExpl);
  combinedFactorsExpl.addDetail(coordExpl);
  result.addDetail(combinedFactorsExpl);
  result.setValue(totalExpl.getValue() * boostExpl.getValue() * combinedFactorsExpl.getValue());
  return result;
}",0.9569728410131216
24768,"private boolean nextCell(){
  if ((matchEndCell + 1) == cells.size())   return false;
  SpansCell prevCell=(SpansCell)cells.get(matchEndCell);
  SpansCell curCell=(SpansCell)cells.get(matchEndCell + 1);
  if (curCell.doc() != prevCell.doc())   return false;
  if (penalizeOutOfOrder && curCell.index < prevCell.index + 1)   matchDist+=curCell.end() - prevCell.start();
 else   matchDist+=curCell.start() - prevCell.end();
  if (matchDist > slop)   return false;
  matchTotalScore+=curCell.score();
  ++matchEndCell;
  return true;
}","private boolean nextCell(){
}",0.1033868092691622
24769,"private boolean advance(int skipTo) throws IOException {
  SpansCell cell=(SpansCell)cells.get(0);
  boolean cellMore=(skipTo >= 0) ? cell.skipTo(skipTo) : cell.next();
  if (cellMore) {
    int i;
    for (i=0; i < cells.size() - 1; i++) {
      SpansCell next=(SpansCell)cells.get(i + 1);
      if (cell.compareTo(next) < 0)       break;
      cells.set(i,next);
    }
    cells.set(i,cell);
  }
 else {
    cells.remove(0);
    if (cells.isEmpty())     return false;
  }
  matchEndCell=0;
  matchTotalScore=((SpansCell)cells.get(0)).score();
  matchDist=0;
  return true;
}","private boolean advance(int skipTo) throws IOException {
  SpansCell cell=(SpansCell)cells.get(0);
  boolean cellMore=(skipTo >= 0) ? cell.skipTo(skipTo) : cell.next();
  if (cellMore) {
    int i;
    for (i=0; i < cells.size() - 1; i++) {
      SpansCell next=(SpansCell)cells.get(i + 1);
      if (cell.compareTo(next) < 0)       break;
      cells.set(i,next);
    }
    cells.set(i,cell);
  }
 else {
    cells.remove(0);
    if (cells.isEmpty())     return false;
  }
  matchEndCell=0;
  matchNumCells=0;
  matchTotalScore=((SpansCell)cells.get(0)).score();
  matchDist=0;
  return true;
}",0.9837745516652434
24770,"public float score(){
  float coordFactor=(float)(matchEndCell + 1) / (nClauses + 1);
  float distFactor=similarity.sloppyFreq(matchDist) / (nClauses + 1);
  return matchTotalScore * (coordFactor + distFactor) * query.getBoost();
}","public float score(){
  float coordFactor=(float)(matchNumCells + 1) / (nClauses + 1);
  float distFactor=similarity.sloppyFreq(matchDist) / (nClauses + 1);
  return matchTotalScore * (coordFactor + distFactor) * query.getBoost();
}",0.9848812095032398
24771,"private boolean initCells(int skipTo) throws IOException {
  for (int i=0; i < cells.size(); i++) {
    SpansCell cell=(SpansCell)cells.get(i);
    boolean cellMore=(skipTo >= 0) ? cell.skipTo(skipTo) : cell.next();
    if (!cellMore) {
      cells.remove(i);
      --i;
    }
  }
  Collections.sort(cells,cellComparator);
  if (cells.isEmpty())   return false;
  matchEndCell=0;
  matchTotalScore=((SpansCell)cells.get(0)).score();
  matchDist=0;
  return true;
}","private boolean initCells(int skipTo) throws IOException {
  for (int i=0; i < cells.size(); i++) {
    SpansCell cell=(SpansCell)cells.get(i);
    boolean cellMore=(skipTo >= 0) ? cell.skipTo(skipTo) : cell.next();
    if (!cellMore) {
      cells.remove(i);
      --i;
    }
  }
  Collections.sort(cells,cellComparator);
  if (cells.isEmpty())   return false;
  matchEndCell=0;
  matchNumCells=0;
  matchTotalScore=((SpansCell)cells.get(0)).score();
  matchDist=0;
  return true;
}",0.9799366420274552
24772,"/** 
 * Ensures that there is space to insert 'n' items, expanding the queue if necessary.
 */
public final void ensureCapacity(int n){
  if (size + n <= maxSize)   return;
  int oldSize=size;
  Object[] oldHeap=heap;
  int newSize=Math.max(maxSize + 10,maxSize * 3 / 2);
  initialize(newSize);
  for (int i=0; i < oldSize; i++)   put(oldHeap[i]);
}","/** 
 * Ensures that there is space to insert 'n' items, expanding the queue if necessary.
 */
public final void ensureCapacity(int n){
  if (size + n <= maxSize)   return;
  int oldSize=size;
  Object[] oldHeap=heap;
  int newSize=Math.max(maxSize + 10,maxSize * 3 / 2);
  initialize(newSize);
  for (int i=0; i < oldSize; i++) {
    if (oldHeap[i] != null)     put(oldHeap[i]);
  }
}",0.9291553133514986
24773,"/** 
 * Search for a StructuredStore containing the ""lazy"" or persistent representation of a given document. Index parameters are specified, since often the lazy file is stored along with the index. This method is called first, and if it returns null, then   {@link #getInputSource(String,boolean)} will be called as a fall-back.
 * @param indexConfigPath Path to the index configuration file
 * @param indexName       Name of the index being searched
 * @param sourcePath      Path to the source document
 * @param preFilter       Prefilter stylesheet to run (or null for none)
 * @param removeDoctypeDecl Set to true to remove DOCTYPE declaration fromthe XML document.
 * @return                Store containing the tree, or null if nonecould be found.
 */
public StructuredStore getLazyStore(String indexConfigPath,String indexName,String sourcePath,Templates preFilter,boolean removeDoctypeDecl) throws IOException {
  boolean useLazy=true;
  if (indexConfigPath == null || indexName == null)   return null;
  if (sourcePath.startsWith(""String_Node_Str""))   return null;
  if (sourcePath.startsWith(""String_Node_Str""))   return null;
  File lazyFile=null;
  lazyFile=IndexUtil.calcLazyPath(new File(servlet.getRealPath(""String_Node_Str"")),new File(indexConfigPath),indexName,new File(sourcePath),false);
  if (!lazyFile.canRead())   buildLazyStore(lazyFile,sourcePath,preFilter,removeDoctypeDecl);
  return StructuredFile.open(lazyFile);
}","/** 
 * Search for a StructuredStore containing the ""lazy"" or persistent representation of a given document. Index parameters are specified, since often the lazy file is stored along with the index. This method is called first, and if it returns null, then   {@link #getInputSource(String,boolean)} will be called as a fall-back.
 * @param indexConfigPath Path to the index configuration file
 * @param indexName       Name of the index being searched
 * @param sourcePath      Path to the source document
 * @param preFilter       Prefilter stylesheet to run (or null for none)
 * @param removeDoctypeDecl Set to true to remove DOCTYPE declaration fromthe XML document.
 * @return                Store containing the tree, or null if nonecould be found.
 */
public StructuredStore getLazyStore(String indexConfigPath,String indexName,String sourcePath,Templates preFilter,boolean removeDoctypeDecl) throws IOException {
  boolean useLazy=true;
  if (indexConfigPath == null || indexName == null)   return null;
  if (sourcePath.startsWith(""String_Node_Str""))   return null;
  if (sourcePath.startsWith(""String_Node_Str""))   return null;
  File sourceFile=new File(sourcePath);
  if (!sourceFile.isFile())   return null;
  File lazyFile=IndexUtil.calcLazyPath(new File(servlet.getRealPath(""String_Node_Str"")),new File(indexConfigPath),indexName,new File(sourcePath),false);
  if (!lazyFile.canRead())   buildLazyStore(lazyFile,sourcePath,preFilter,removeDoctypeDecl);
  return StructuredFile.open(lazyFile);
}",0.80420054200542
24774,"/** 
 * Does the work of locating and loading the source document. Handles fetching a file from a URL, lazy file, or a plain XML file on disk. Also fires up a text query if requested.
 * @param docInfo       Tells which document to load, the query toapply, tec.
 * @param transformer   The XSLT transformer that will be used on thedocument.
 * @return              An XML Source object representing the loadeddocument.
 * @throws IOException  If a problem is encountered loading a file or URL
 * @throws SAXException If the document cannot be parsed as valid XML
 * @throws ParserConfigurationException Miscellaneous configuration problems
 */
protected Source getSourceDoc(DocInfo docInfo,Transformer transformer) throws IOException, SAXException, ParserConfigurationException, InvalidDocumentException {
  Templates preFilter=null;
  if (docInfo.preFilter != null) {
    try {
      preFilter=stylesheetCache.find(docInfo.preFilter);
    }
 catch (    IOException e) {
      throw e;
    }
catch (    SAXException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  StructuredStore lazyStore=docLocator.getLazyStore(docInfo.indexConfig,docInfo.indexName,docInfo.source,preFilter,docInfo.removeDoctypeDecl);
  if (lazyStore == null) {
    if (docInfo.query != null)     throw new UnsupportedQueryException();
    if (forceLazy)     throw new InvalidDocumentException();
    XMLReader xmlReader=IndexUtil.createXMLReader();
    InputSource inSrc=docLocator.getInputSource(docInfo.source,docInfo.removeDoctypeDecl);
    return new SAXSource(xmlReader,inSrc);
  }
  Source sourceDoc=null;
  if (docInfo.query != null && docInfo.query.query != null) {
    String docKey=IndexUtil.calcDocKey(new File(getRealPath(""String_Node_Str"")),new File(docInfo.indexConfig),docInfo.indexName,new File(docInfo.source));
    SearchTree tree=new SearchTree(docKey,lazyStore);
    tree.search(createQueryProcessor(),docInfo.query);
    sourceDoc=tree;
  }
 else {
    LazyTreeBuilder builder=new LazyTreeBuilder();
    builder.setNamePool(NamePool.getDefaultNamePool());
    sourceDoc=builder.load(lazyStore);
  }
  ((LazyDocument)sourceDoc).setDebug(true);
  Controller c=(Controller)transformer;
  Executable e=c.getExecutable();
  KeyManager k=e.getKeyManager();
  if (!(k instanceof LazyKeyManager))   e.setKeyManager(new LazyKeyManager(k,c.getConfiguration()));
  return sourceDoc;
}","/** 
 * Does the work of locating and loading the source document. Handles fetching a file from a URL, lazy file, or a plain XML file on disk. Also fires up a text query if requested.
 * @param docInfo       Tells which document to load, the query toapply, tec.
 * @param transformer   The XSLT transformer that will be used on thedocument.
 * @return              An XML Source object representing the loadeddocument.
 * @throws IOException  If a problem is encountered loading a file or URL
 * @throws SAXException If the document cannot be parsed as valid XML
 * @throws ParserConfigurationException Miscellaneous configuration problems
 */
protected Source getSourceDoc(DocInfo docInfo,Transformer transformer) throws IOException, SAXException, ParserConfigurationException, InvalidDocumentException {
  Templates preFilter=null;
  if (docInfo.preFilter != null) {
    try {
      preFilter=stylesheetCache.find(docInfo.preFilter);
    }
 catch (    IOException e) {
      throw e;
    }
catch (    SAXException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  StructuredStore lazyStore=docLocator.getLazyStore(docInfo.indexConfig,docInfo.indexName,docInfo.source,preFilter,docInfo.removeDoctypeDecl);
  if (lazyStore == null) {
    if (docInfo.query != null)     throw new UnsupportedQueryException();
    if (forceLazy)     throw new InvalidDocumentException();
    File srcFile=new File(docInfo.source);
    if (!srcFile.isFile() || !srcFile.canRead())     throw new InvalidDocumentException();
    XMLReader xmlReader=IndexUtil.createXMLReader();
    InputSource inSrc=docLocator.getInputSource(docInfo.source,docInfo.removeDoctypeDecl);
    return new SAXSource(xmlReader,inSrc);
  }
  Source sourceDoc=null;
  if (docInfo.query != null && docInfo.query.query != null) {
    String docKey=IndexUtil.calcDocKey(new File(getRealPath(""String_Node_Str"")),new File(docInfo.indexConfig),docInfo.indexName,new File(docInfo.source));
    SearchTree tree=new SearchTree(docKey,lazyStore);
    tree.search(createQueryProcessor(),docInfo.query);
    sourceDoc=tree;
  }
 else {
    LazyTreeBuilder builder=new LazyTreeBuilder();
    builder.setNamePool(NamePool.getDefaultNamePool());
    sourceDoc=builder.load(lazyStore);
  }
  ((LazyDocument)sourceDoc).setDebug(true);
  Controller c=(Controller)transformer;
  Executable e=c.getExecutable();
  KeyManager k=e.getKeyManager();
  if (!(k instanceof LazyKeyManager))   e.setKeyManager(new LazyKeyManager(k,c.getConfiguration()));
  return sourceDoc;
}",0.9730382293762576
24775,"/** 
 * Does the work of locating and loading the source document. Handles fetching a file from a URL, lazy file, or a plain XML file on disk. Also fires up a text query if requested.
 * @param docInfo       Tells which document to load, the query toapply, tec.
 * @param transformer   The XSLT transformer that will be used on thedocument.
 * @return              An XML Source object representing the loadeddocument.
 * @throws IOException  If a problem is encountered loading a file or URL
 * @throws SAXException If the document cannot be parsed as valid XML
 * @throws ParserConfigurationException Miscellaneous configuration problems
 */
protected Source getSourceDoc(DocInfo docInfo,Transformer transformer) throws IOException, SAXException, ParserConfigurationException, InvalidDocumentException {
  Templates preFilter=null;
  if (docInfo.preFilter != null) {
    try {
      preFilter=stylesheetCache.find(docInfo.preFilter);
    }
 catch (    IOException e) {
      throw e;
    }
catch (    SAXException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  StructuredStore lazyStore=docLocator.getLazyStore(docInfo.indexConfig,docInfo.indexName,docInfo.source,preFilter,docInfo.removeDoctypeDecl);
  if (lazyStore == null) {
    if (docInfo.query != null)     throw new UnsupportedQueryException();
    if (forceLazy)     throw new InvalidDocumentException();
    File srcFile=new File(docInfo.source);
    if (!srcFile.isFile() || !srcFile.canRead())     throw new InvalidDocumentException();
    XMLReader xmlReader=IndexUtil.createXMLReader();
    InputSource inSrc=docLocator.getInputSource(docInfo.source,docInfo.removeDoctypeDecl);
    return new SAXSource(xmlReader,inSrc);
  }
  Source sourceDoc=null;
  if (docInfo.query != null && docInfo.query.query != null) {
    String docKey=IndexUtil.calcDocKey(new File(getRealPath(""String_Node_Str"")),new File(docInfo.indexConfig),docInfo.indexName,new File(docInfo.source));
    SearchTree tree=new SearchTree(docKey,lazyStore);
    tree.search(createQueryProcessor(),docInfo.query);
    sourceDoc=tree;
  }
 else {
    LazyTreeBuilder builder=new LazyTreeBuilder();
    builder.setNamePool(NamePool.getDefaultNamePool());
    sourceDoc=builder.load(lazyStore);
  }
  ((LazyDocument)sourceDoc).setDebug(true);
  Controller c=(Controller)transformer;
  Executable e=c.getExecutable();
  KeyManager k=e.getKeyManager();
  if (!(k instanceof LazyKeyManager))   e.setKeyManager(new LazyKeyManager(k,c.getConfiguration()));
  return sourceDoc;
}","/** 
 * Does the work of locating and loading the source document. Handles fetching a file from a URL, lazy file, or a plain XML file on disk. Also fires up a text query if requested.
 * @param docInfo       Tells which document to load, the query toapply, tec.
 * @param transformer   The XSLT transformer that will be used on thedocument.
 * @return              An XML Source object representing the loadeddocument.
 * @throws IOException  If a problem is encountered loading a file or URL
 * @throws SAXException If the document cannot be parsed as valid XML
 * @throws ParserConfigurationException Miscellaneous configuration problems
 */
protected Source getSourceDoc(DocInfo docInfo,Transformer transformer) throws IOException, SAXException, ParserConfigurationException, InvalidDocumentException {
  Templates preFilter=null;
  if (docInfo.preFilter != null) {
    try {
      preFilter=stylesheetCache.find(docInfo.preFilter);
    }
 catch (    IOException e) {
      throw e;
    }
catch (    SAXException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  StructuredStore lazyStore=docLocator.getLazyStore(docInfo.indexConfig,docInfo.indexName,docInfo.source,preFilter,docInfo.removeDoctypeDecl);
  if (lazyStore == null) {
    if (docInfo.query != null)     throw new UnsupportedQueryException();
    if (forceLazy)     throw new InvalidDocumentException();
    if (!docInfo.source.startsWith(""String_Node_Str"")) {
      File srcFile=new File(docInfo.source);
      if (!srcFile.isFile() || !srcFile.canRead())       throw new InvalidDocumentException();
    }
    XMLReader xmlReader=IndexUtil.createXMLReader();
    InputSource inSrc=docLocator.getInputSource(docInfo.source,docInfo.removeDoctypeDecl);
    return new SAXSource(xmlReader,inSrc);
  }
  Source sourceDoc=null;
  if (docInfo.query != null && docInfo.query.query != null) {
    String docKey=IndexUtil.calcDocKey(new File(getRealPath(""String_Node_Str"")),new File(docInfo.indexConfig),docInfo.indexName,new File(docInfo.source));
    SearchTree tree=new SearchTree(docKey,lazyStore);
    tree.search(createQueryProcessor(),docInfo.query);
    sourceDoc=tree;
  }
 else {
    LazyTreeBuilder builder=new LazyTreeBuilder();
    builder.setNamePool(NamePool.getDefaultNamePool());
    sourceDoc=builder.load(lazyStore);
  }
  ((LazyDocument)sourceDoc).setDebug(true);
  Controller c=(Controller)transformer;
  Executable e=c.getExecutable();
  KeyManager k=e.getKeyManager();
  if (!(k instanceof LazyKeyManager))   e.setKeyManager(new LazyKeyManager(k,c.getConfiguration()));
  return sourceDoc;
}",0.9866615116953412
24776,"/** 
 * Construct the array of doc hits for the hit group. 
 */
private void buildDocHits(int group,ResultGroup resultGroup){
  PriorityQueue queue=hitQueue[group];
  int nFound=queue.size();
  DocHitImpl[] hitArray=new DocHitImpl[nFound];
  float maxDocScore=0.0f;
  for (int i=0; i < nFound; i++) {
    int index=nFound - i - 1;
    hitArray[index]=(DocHitImpl)queue.pop();
  }
  int start=startDoc[group];
  int max=maxDocs[group];
  int nHits=Math.min(nFound - start,max);
  resultGroup.docHits=new DocHit[nHits];
  resultGroup.totalDocs=count[group];
  resultGroup.startDoc=start;
  resultGroup.endDoc=start + nHits;
  for (int i=startDoc[group]; i < nFound; i++)   resultGroup.docHits[i - start]=hitArray[i];
}","/** 
 * Construct the array of doc hits for the hit group. 
 */
private void buildDocHits(int group,ResultGroup resultGroup){
  PriorityQueue queue=hitQueue[group];
  int nFound=queue.size();
  DocHitImpl[] hitArray=new DocHitImpl[nFound];
  float maxDocScore=0.0f;
  for (int i=0; i < nFound; i++) {
    int index=nFound - i - 1;
    hitArray[index]=(DocHitImpl)queue.pop();
  }
  int start=startDoc[group];
  int max=maxDocs[group];
  int nHits=Math.max(0,Math.min(nFound - start,max));
  resultGroup.docHits=new DocHit[nHits];
  resultGroup.totalDocs=count[group];
  resultGroup.startDoc=start;
  resultGroup.endDoc=start + nHits;
  for (int i=startDoc[group]; i < nFound; i++)   resultGroup.docHits[i - start]=hitArray[i];
}",0.9889196675900276
24777,"/** 
 * Generate a proximity query on a field. This uses the de-duplicating span system.
 * @param parent The element containing the field name and terms.
 */
Query makeProxQuery(EasyNode parent,int slop,String field,int maxSnippets) throws QueryGenException {
  Vector terms=new Vector();
  Vector notVec=new Vector();
  for (int i=0; i < parent.nChildren(); i++) {
    EasyNode el=parent.child(i);
    if (!el.isElement())     continue;
    if (el.name().equals(""String_Node_Str"")) {
      if (slop <= 0)       error(""String_Node_Str"");
      notVec.add(parseQuery(el,field,maxSnippets));
    }
 else {
      SpanQuery q;
      if (slop == 0) {
        Term t=parseTerm(el,field,""String_Node_Str"");
        if (isWildcardTerm(t))         q=new XtfSpanWildcardQuery(t,req.termLimit);
 else         q=new SpanTermQuery(t);
        q.setSpanRecording(maxSnippets);
        terms.add(q);
      }
 else       terms.add(parseQuery(el,field,maxSnippets));
    }
  }
  if (terms.size() == 0)   error(""String_Node_Str"" + parent.name() + ""String_Node_Str""+ ""String_Node_Str"");
  SpanQuery q;
  SpanQuery[] termQueries=(SpanQuery[])terms.toArray(new SpanQuery[terms.size()]);
  if (slop < 0)   q=new SpanExactQuery(termQueries);
 else   if (terms.size() == 1)   q=(SpanQuery)terms.elementAt(0);
 else   if (parent.name().equals(""String_Node_Str""))   q=new SpanOrNearQuery(termQueries,slop,true);
 else   q=new SpanNearQuery(termQueries,slop,slop == 0);
  q.setSpanRecording(maxSnippets);
  return q;
}","/** 
 * Generate a proximity query on a field. This uses the de-duplicating span system.
 * @param parent The element containing the field name and terms.
 */
Query makeProxQuery(EasyNode parent,int slop,String field,int maxSnippets) throws QueryGenException {
  Vector terms=new Vector();
  Vector notVec=new Vector();
  for (int i=0; i < parent.nChildren(); i++) {
    EasyNode el=parent.child(i);
    if (!el.isElement())     continue;
    if (el.name().equals(""String_Node_Str"")) {
      if (parent.name().matches(""String_Node_Str""))       error(""String_Node_Str"");
      notVec.add(parseQuery2(el,""String_Node_Str"",field,maxSnippets));
    }
 else {
      SpanQuery q;
      if (slop == 0) {
        Term t=parseTerm(el,field,""String_Node_Str"");
        if (isWildcardTerm(t))         q=new XtfSpanWildcardQuery(t,req.termLimit);
 else         q=new SpanTermQuery(t);
        q.setSpanRecording(maxSnippets);
        terms.add(q);
      }
 else       terms.add(parseQuery(el,field,maxSnippets));
    }
  }
  if (terms.size() == 0)   error(""String_Node_Str"" + parent.name() + ""String_Node_Str""+ ""String_Node_Str"");
  SpanQuery q;
  SpanQuery[] termQueries=(SpanQuery[])terms.toArray(new SpanQuery[terms.size()]);
  if (slop < 0)   q=new SpanExactQuery(termQueries);
 else   if (terms.size() == 1)   q=(SpanQuery)terms.elementAt(0);
 else   if (parent.name().equals(""String_Node_Str""))   q=new SpanOrNearQuery(termQueries,slop,true);
 else   q=new SpanNearQuery(termQueries,slop,slop == 0);
  q.setSpanRecording(maxSnippets);
  return processSpanNots(q,notVec,maxSnippets);
}",0.955700325732899
24778,"protected boolean lessThan(Object a,Object b){
  QueryWord aa=(QueryWord)a;
  QueryWord bb=(QueryWord)b;
  return aa.score > bb.score;
}","protected boolean lessThan(Object a,Object b){
  QueryWord aa=(QueryWord)a;
  QueryWord bb=(QueryWord)b;
  return aa.score < bb.score;
}",0.9926470588235294
24779,"/** 
 * Create the More like query from a PriorityQueue
 */
private Query createQuery(PriorityQueue q){
  BooleanQuery query=new BooleanQuery();
  QueryWord qw;
  int qterms=0;
  float bestScore=0;
  while (((qw=(QueryWord)q.pop()) != null)) {
    TermQuery tq=new TermQuery(qw.term);
    if (boost) {
      if (qterms == 0)       bestScore=qw.score;
      tq.setBoost(qw.score / bestScore);
    }
    try {
      query.add(tq,false,false);
    }
 catch (    BooleanQuery.TooManyClauses ignore) {
      break;
    }
    qterms++;
  }
  return query;
}","/** 
 * Create the More like query from a PriorityQueue
 */
private Query createQuery(PriorityQueue q){
  QueryWord[] queryWords=new QueryWord[q.size()];
  for (int i=q.size() - 1; i >= 0; i--)   queryWords[i]=(QueryWord)q.pop();
  BooleanQuery query=new BooleanQuery();
  QueryWord qw;
  for (int i=0; i < queryWords.length; i++) {
    qw=queryWords[i];
    TermQuery tq=new TermQuery(qw.term);
    if (boost)     tq.setBoost(qw.score);
    try {
      query.add(tq,false,false);
    }
 catch (    BooleanQuery.TooManyClauses ignore) {
      break;
    }
  }
  return query;
}",0.5531914893617021
24780,"public void processingInstruction(String target,String data) throws SAXException {
  incrementNode();
  if (lazyHandler != null)   lazyHandler.processingInstruction(target,data);
}","public void processingInstruction(String target,String data) throws SAXException {
}",0.6363636363636364
24781,"/** 
 * Main entry-point for the Text Indexer. <br><br> This function takes the command line arguments passed and uses them to create or update the specified indices with the specified source text. <br><br>
 * @param args    Command line arguments to process. The command line arguments required by the TextIndexer program are as follows: <blockquote dir=ltr style=""MARGIN-RIGHT: 0px""><code> <b>TextIndexer -config</b> <font color=#0000ff><i>CfgFilePath</i></font>  { {<b>-clean</b>|<b>-incremental</b>}?  {<b>-trace errors</b>|<b>warnings</b>|<b>info</b>|<b>debug</b>}?  <b>-index</b> <font color=#0000ff><i>IndexName</i></font> }+ </b></code></blockquote> For a complete description of each command line argument, see the  {@link TextIndexer} class description.<br><br>
 */
public static void main(String[] args){
  try {
    IndexerConfig cfgInfo=new IndexerConfig();
    XMLConfigParser cfgParser=new XMLConfigParser();
    SrcTreeProcessor srcTreeProcessor=new SrcTreeProcessor();
    IdxTreeCleaner indexCleaner=new IdxTreeCleaner();
    int startArg=0;
    boolean showUsage=false;
    boolean firstIndex=true;
    long startTime=System.currentTimeMillis();
    Trace.info(""String_Node_Str"" + 1.7);
    Trace.info(""String_Node_Str"");
    Trace.tab();
    cfgInfo.xtfHomePath=System.getProperty(""String_Node_Str"");
    if (cfgInfo.xtfHomePath == null || cfgInfo.xtfHomePath.length() == 0) {
      Trace.error(""String_Node_Str"");
      System.exit(1);
    }
    cfgInfo.xtfHomePath=Path.normalizePath(cfgInfo.xtfHomePath);
    if (!new File(cfgInfo.xtfHomePath).isDirectory()) {
      Trace.error(""String_Node_Str"" + cfgInfo.xtfHomePath + ""String_Node_Str"");
      System.exit(1);
    }
    for (; ; ) {
      if (args.length < 2)       showUsage=true;
 else {
        int ret=cfgInfo.readCmdLine(args,startArg);
        if (ret == -1) {
          if (startArg == 0)           showUsage=true;
 else           break;
        }
 else {
          if (!(new File(cfgInfo.cfgFilePath).isAbsolute())) {
            cfgInfo.cfgFilePath=Path.resolveRelOrAbs(cfgInfo.xtfHomePath,cfgInfo.cfgFilePath);
          }
          if (cfgParser.configure(cfgInfo) < 0) {
            Trace.error(""String_Node_Str"" + cfgInfo.indexInfo.indexName + ""String_Node_Str"");
            System.exit(1);
          }
          cfgInfo.mustClean=cfgInfo.clean;
          Trace.setOutputLevel(cfgInfo.traceLevel);
        }
        startArg=ret;
      }
      if (showUsage) {
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.tab();
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.untab();
        System.exit(1);
      }
      File xtfHomeFile=new File(cfgInfo.xtfHomePath);
      if (firstIndex) {
        if (!cfgInfo.mustClean) {
          File idxRootDir=new File(Path.resolveRelOrAbs(xtfHomeFile,cfgInfo.indexInfo.indexPath));
          Trace.info(""String_Node_Str"");
          Trace.info(""String_Node_Str"");
          Trace.tab();
          indexCleaner.processDir(idxRootDir);
          Trace.untab();
          Trace.info(""String_Node_Str"");
        }
        Trace.info(""String_Node_Str"");
        Trace.info(""String_Node_Str"");
        Trace.tab();
        firstIndex=false;
      }
      Trace.info(""String_Node_Str"" + cfgInfo.indexInfo.indexName + ""String_Node_Str"");
      if (Trace.getOutputLevel() == Trace.debug)       Trace.more(""String_Node_Str"" + cfgInfo.indexInfo.getChunkSize() + ""String_Node_Str""+ cfgInfo.indexInfo.getChunkOvlp()+ ""String_Node_Str"");
      Trace.tab();
      String srcRootDir=Path.resolveRelOrAbs(xtfHomeFile,cfgInfo.indexInfo.sourcePath);
      if (cfgInfo.indexInfo.subDir != null) {
        srcRootDir=Path.resolveRelOrAbs(srcRootDir,Path.normalizePath(cfgInfo.indexInfo.subDir));
      }
      srcTreeProcessor.open(cfgInfo);
      srcTreeProcessor.processDir(new File(srcRootDir),0);
      srcTreeProcessor.close();
      IdxTreeCuller culler=new IdxTreeCuller();
      Trace.info(""String_Node_Str"");
      Trace.tab();
      culler.cullIndex(new File(cfgInfo.xtfHomePath),cfgInfo.indexInfo);
      Trace.untab();
      Trace.info(""String_Node_Str"");
      Trace.untab();
      Trace.info(""String_Node_Str"");
    }
    Trace.untab();
    Trace.info(""String_Node_Str"");
    if (cfgInfo.optimize) {
      IdxTreeOptimizer optimizer=new IdxTreeOptimizer();
      Trace.info(""String_Node_Str"");
      Trace.info(""String_Node_Str"");
      Trace.tab();
      File idxRootDir=new File(cfgInfo.indexInfo.indexPath);
      optimizer.processDir(idxRootDir);
      Trace.untab();
      Trace.info(""String_Node_Str"");
    }
 else {
      Trace.info(""String_Node_Str"");
      Trace.info(""String_Node_Str"");
    }
    if (cfgInfo.updateSpellDict) {
      IdxTreeDictMaker dictMaker=new IdxTreeDictMaker();
      Trace.info(""String_Node_Str"");
      Trace.info(""String_Node_Str"");
      Trace.tab();
      File idxRootDir=new File(cfgInfo.indexInfo.indexPath);
      dictMaker.processDir(idxRootDir);
      Trace.untab();
      Trace.info(""String_Node_Str"");
    }
 else {
      Trace.info(""String_Node_Str"");
      Trace.info(""String_Node_Str"");
    }
    Trace.untab();
    Trace.info(""String_Node_Str"");
    long timeMsec=System.currentTimeMillis() - startTime;
    long timeSec=timeMsec / 1000;
    long timeMin=timeSec / 60;
    long timeHour=timeMin / 60;
    Trace.info(""String_Node_Str"");
    if (timeHour > 0) {
      String ending=(timeHour == 1) ? ""String_Node_Str"" : ""String_Node_Str"";
      Trace.more(Trace.info,timeHour + ""String_Node_Str"" + ending+ ""String_Node_Str"");
    }
    if (timeMin > 0) {
      String ending=((timeMin % 60) == 1) ? ""String_Node_Str"" : ""String_Node_Str"";
      Trace.more(Trace.info,(timeMin % 60) + ""String_Node_Str"" + ending+ ""String_Node_Str"");
    }
    String ending=((timeSec % 60) == 1) ? ""String_Node_Str"" : ""String_Node_Str"";
    Trace.more(Trace.info,(timeSec % 60) + ""String_Node_Str"" + ending+ ""String_Node_Str"");
    Trace.info(""String_Node_Str"");
    Trace.info(""String_Node_Str"");
  }
 catch (  Throwable t) {
    Trace.clearTabs();
    Trace.error(""String_Node_Str"" + t.getClass());
    Trace.error(""String_Node_Str"");
    t.printStackTrace(System.out);
    Trace.error(""String_Node_Str"");
    System.exit(1);
  }
  return;
}","/** 
 * Main entry-point for the Text Indexer. <br><br> This function takes the command line arguments passed and uses them to create or update the specified indices with the specified source text. <br><br>
 * @param args    Command line arguments to process. The command line arguments required by the TextIndexer program are as follows: <blockquote dir=ltr style=""MARGIN-RIGHT: 0px""><code> <b>TextIndexer -config</b> <font color=#0000ff><i>CfgFilePath</i></font>  { {<b>-clean</b>|<b>-incremental</b>}?  {<b>-trace errors</b>|<b>warnings</b>|<b>info</b>|<b>debug</b>}?  <b>-index</b> <font color=#0000ff><i>IndexName</i></font> }+ </b></code></blockquote> For a complete description of each command line argument, see the  {@link TextIndexer} class description.<br><br>
 */
public static void main(String[] args){
  try {
    IndexerConfig cfgInfo=new IndexerConfig();
    XMLConfigParser cfgParser=new XMLConfigParser();
    SrcTreeProcessor srcTreeProcessor=new SrcTreeProcessor();
    IdxTreeCleaner indexCleaner=new IdxTreeCleaner();
    int startArg=0;
    boolean showUsage=false;
    boolean firstIndex=true;
    long startTime=System.currentTimeMillis();
    Trace.info(""String_Node_Str"" + 1.7);
    Trace.info(""String_Node_Str"");
    Trace.tab();
    cfgInfo.xtfHomePath=System.getProperty(""String_Node_Str"");
    if (cfgInfo.xtfHomePath == null || cfgInfo.xtfHomePath.length() == 0) {
      Trace.error(""String_Node_Str"");
      System.exit(1);
    }
    cfgInfo.xtfHomePath=Path.normalizePath(cfgInfo.xtfHomePath);
    if (!new File(cfgInfo.xtfHomePath).isDirectory()) {
      Trace.error(""String_Node_Str"" + cfgInfo.xtfHomePath + ""String_Node_Str"");
      System.exit(1);
    }
    for (; ; ) {
      if (args.length < 2)       showUsage=true;
 else {
        int ret=cfgInfo.readCmdLine(args,startArg);
        if (ret == -1) {
          if (startArg == 0)           showUsage=true;
 else           break;
        }
 else {
          if (!(new File(cfgInfo.cfgFilePath).isAbsolute())) {
            cfgInfo.cfgFilePath=Path.resolveRelOrAbs(cfgInfo.xtfHomePath,cfgInfo.cfgFilePath);
          }
          if (cfgParser.configure(cfgInfo) < 0) {
            Trace.error(""String_Node_Str"" + cfgInfo.indexInfo.indexName + ""String_Node_Str"");
            System.exit(1);
          }
          cfgInfo.mustClean=cfgInfo.clean;
          Trace.setOutputLevel(cfgInfo.traceLevel);
        }
        startArg=ret;
      }
      if (showUsage) {
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.tab();
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.error(""String_Node_Str"");
        Trace.untab();
        System.exit(1);
      }
      File xtfHomeFile=new File(cfgInfo.xtfHomePath);
      if (firstIndex) {
        if (!cfgInfo.mustClean) {
          File idxRootDir=new File(Path.resolveRelOrAbs(xtfHomeFile,cfgInfo.indexInfo.indexPath));
          Trace.info(""String_Node_Str"");
          Trace.info(""String_Node_Str"");
          Trace.tab();
          indexCleaner.processDir(idxRootDir);
          Trace.untab();
          Trace.info(""String_Node_Str"");
        }
        Trace.info(""String_Node_Str"");
        Trace.info(""String_Node_Str"");
        Trace.tab();
        firstIndex=false;
      }
      Trace.info(""String_Node_Str"" + cfgInfo.indexInfo.indexName + ""String_Node_Str"");
      if (Trace.getOutputLevel() == Trace.debug)       Trace.more(""String_Node_Str"" + cfgInfo.indexInfo.getChunkSize() + ""String_Node_Str""+ cfgInfo.indexInfo.getChunkOvlp()+ ""String_Node_Str"");
      Trace.tab();
      String srcRootDir=Path.resolveRelOrAbs(xtfHomeFile,cfgInfo.indexInfo.sourcePath);
      if (cfgInfo.indexInfo.subDir != null) {
        srcRootDir=Path.resolveRelOrAbs(srcRootDir,Path.normalizePath(cfgInfo.indexInfo.subDir));
      }
      srcTreeProcessor.open(cfgInfo);
      srcTreeProcessor.processDir(new File(srcRootDir),0);
      srcTreeProcessor.close();
      IdxTreeCuller culler=new IdxTreeCuller();
      Trace.info(""String_Node_Str"");
      Trace.tab();
      culler.cullIndex(new File(cfgInfo.xtfHomePath),cfgInfo.indexInfo);
      Trace.untab();
      Trace.info(""String_Node_Str"");
      Trace.untab();
      Trace.info(""String_Node_Str"");
    }
    Trace.untab();
    Trace.info(""String_Node_Str"");
    if (cfgInfo.optimize) {
      IdxTreeOptimizer optimizer=new IdxTreeOptimizer();
      Trace.info(""String_Node_Str"");
      Trace.info(""String_Node_Str"");
      Trace.tab();
      File idxRootDir=new File(Path.resolveRelOrAbs(cfgInfo.xtfHomePath,cfgInfo.indexInfo.indexPath));
      optimizer.processDir(idxRootDir);
      Trace.untab();
      Trace.info(""String_Node_Str"");
    }
 else {
      Trace.info(""String_Node_Str"");
      Trace.info(""String_Node_Str"");
    }
    if (cfgInfo.updateSpellDict) {
      IdxTreeDictMaker dictMaker=new IdxTreeDictMaker();
      Trace.info(""String_Node_Str"");
      Trace.info(""String_Node_Str"");
      Trace.tab();
      File idxRootDir=new File(Path.resolveRelOrAbs(cfgInfo.xtfHomePath,cfgInfo.indexInfo.indexPath));
      dictMaker.processDir(idxRootDir);
      Trace.untab();
      Trace.info(""String_Node_Str"");
    }
 else {
      Trace.info(""String_Node_Str"");
      Trace.info(""String_Node_Str"");
    }
    Trace.untab();
    Trace.info(""String_Node_Str"");
    long timeMsec=System.currentTimeMillis() - startTime;
    long timeSec=timeMsec / 1000;
    long timeMin=timeSec / 60;
    long timeHour=timeMin / 60;
    Trace.info(""String_Node_Str"");
    if (timeHour > 0) {
      String ending=(timeHour == 1) ? ""String_Node_Str"" : ""String_Node_Str"";
      Trace.more(Trace.info,timeHour + ""String_Node_Str"" + ending+ ""String_Node_Str"");
    }
    if (timeMin > 0) {
      String ending=((timeMin % 60) == 1) ? ""String_Node_Str"" : ""String_Node_Str"";
      Trace.more(Trace.info,(timeMin % 60) + ""String_Node_Str"" + ending+ ""String_Node_Str"");
    }
    String ending=((timeSec % 60) == 1) ? ""String_Node_Str"" : ""String_Node_Str"";
    Trace.more(Trace.info,(timeSec % 60) + ""String_Node_Str"" + ending+ ""String_Node_Str"");
    Trace.info(""String_Node_Str"");
    Trace.info(""String_Node_Str"");
  }
 catch (  Throwable t) {
    Trace.clearTabs();
    Trace.error(""String_Node_Str"" + t.getClass());
    Trace.error(""String_Node_Str"");
    t.printStackTrace(System.out);
    Trace.error(""String_Node_Str"");
    System.exit(1);
  }
  return;
}",0.9865894544346236
24782,"/** 
 * Parse a range query.
 */
private Query parseRange(EasyNode parent,String field,int maxSnippets) throws QueryGenException {
  boolean inclusive=false;
  String yesno=parseStringAttrib(parent,""String_Node_Str"",""String_Node_Str"");
  if (yesno.equals(""String_Node_Str"") || yesno.equals(""String_Node_Str""))   inclusive=true;
 else   if (!yesno.equals(""String_Node_Str"") && !yesno.equals(""String_Node_Str""))   error(""String_Node_Str"" + ""String_Node_Str"");
  Term lower=null;
  Term upper=null;
  for (int i=0; i < parent.nChildren(); i++) {
    EasyNode child=parent.child(i);
    if (!child.isElement())     continue;
    String name=child.name();
    if (name.equals(""String_Node_Str"")) {
      if (lower != null)       error(""String_Node_Str"");
      if (child.child(""String_Node_Str"") != null)       lower=parseTerm(child.child(""String_Node_Str""),field,""String_Node_Str"");
 else       lower=parseTerm(child,field,""String_Node_Str"");
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (upper != null)       error(""String_Node_Str"");
      if (child.child(""String_Node_Str"") != null)       upper=parseTerm(child.child(""String_Node_Str""),field,""String_Node_Str"");
 else       upper=parseTerm(child,field,""String_Node_Str"");
    }
 else     error(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (lower == null && upper == null)   error(""String_Node_Str"");
  if (upper == null) {
    char[] tmp=new char[1];
    tmp[0]=Constants.MARKER_BASE;
    upper=new Term(lower.field(),new String(tmp));
  }
  SpanQuery q=new BigramSpanRangeQuery(lower,upper,inclusive,req.termLimit);
  q.setSpanRecording(maxSnippets);
  return q;
}","/** 
 * Parse a range query.
 */
private Query parseRange(EasyNode parent,String field,int maxSnippets) throws QueryGenException {
  boolean inclusive=false;
  String yesno=parseStringAttrib(parent,""String_Node_Str"",""String_Node_Str"");
  if (yesno.equals(""String_Node_Str"") || yesno.equals(""String_Node_Str""))   inclusive=true;
 else   if (!yesno.equals(""String_Node_Str"") && !yesno.equals(""String_Node_Str""))   error(""String_Node_Str"" + ""String_Node_Str"");
  Term lower=null;
  Term upper=null;
  for (int i=0; i < parent.nChildren(); i++) {
    EasyNode child=parent.child(i);
    if (!child.isElement())     continue;
    String name=child.name();
    if (name.equals(""String_Node_Str"")) {
      if (lower != null)       error(""String_Node_Str"");
      if (child.child(""String_Node_Str"") != null)       lower=parseTerm(child.child(""String_Node_Str""),field,""String_Node_Str"");
 else       lower=parseTerm(child,field,""String_Node_Str"");
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (upper != null)       error(""String_Node_Str"");
      if (child.child(""String_Node_Str"") != null)       upper=parseTerm(child.child(""String_Node_Str""),field,""String_Node_Str"");
 else       upper=parseTerm(child,field,""String_Node_Str"");
    }
 else     error(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (lower == null && upper == null)   error(""String_Node_Str"");
  if (upper == null) {
    char[] tmp=new char[1];
    tmp[0]=Constants.MARKER_BASE;
    upper=new Term(lower.field(),new String(tmp));
  }
  SpanQuery q=new XtfSpanRangeQuery(lower,upper,inclusive,req.termLimit);
  q.setSpanRecording(maxSnippets);
  return q;
}",0.9972468644845518
24783,"/** 
 * Main work of recursively parsing a query. 
 */
private Query parseQuery2(EasyNode parent,String name,String field,int maxSnippets) throws QueryGenException {
  if (name.equals(""String_Node_Str"")) {
    Term term=parseTerm(parent,field,""String_Node_Str"");
    SpanQuery q=isWildcardTerm(term) ? new BigramSpanWildcardQuery(term,req.termLimit) : new SpanTermQuery(term);
    q.setSpanRecording(maxSnippets);
    return q;
  }
  field=parseField(parent,field);
  if (name.equals(""String_Node_Str""))   return parseRange(parent,field,maxSnippets);
  if (name.equals(""String_Node_Str""))   return parseMoreLike(parent,field,maxSnippets);
  if (name.matches(""String_Node_Str"")) {
    int slop=name.equals(""String_Node_Str"") ? 999999999 : name.equals(""String_Node_Str"") ? 0 : name.equals(""String_Node_Str"") ? -1 : parseIntAttrib(parent,""String_Node_Str"");
    return makeProxQuery(parent,slop,field,maxSnippets);
  }
  HashMap subMap=new HashMap();
  Vector fields=new Vector();
  BooleanQuery bq=new BooleanQuery();
  boolean require=!name.equals(""String_Node_Str"");
  for (int i=0; i < parent.nChildren(); i++) {
    EasyNode el=parent.child(i);
    if (!el.isElement())     continue;
    if (el.name().equals(""String_Node_Str""))     continue;
 else     if (el.name().equalsIgnoreCase(""String_Node_Str""))     continue;
    Query q;
    boolean isNot=false;
    if (el.name().equals(""String_Node_Str"")) {
      q=parseQuery2(el,name,field,0);
      isNot=true;
    }
 else     q=parseQuery(el,field,maxSnippets);
    if (q == null)     continue;
    if (q instanceof SpanQuery) {
      String queryField=((SpanQuery)q).getField();
      QueryEntry ent=(QueryEntry)subMap.get(queryField);
      if (ent == null) {
        fields.add(queryField);
        ent=new QueryEntry(queryField);
        subMap.put(queryField,ent);
      }
      if (isNot)       ent.nots.add(q);
 else       ent.queries.add(q);
    }
 else {
      bq.add(q,isNot ? false : require,isNot);
    }
  }
  BooleanClause[] genericClauses=bq.getClauses();
  if (genericClauses.length == 0) {
    if (subMap.isEmpty())     return null;
    if (fields.size() == 1) {
      QueryEntry ent=(QueryEntry)subMap.get(fields.get(0));
      if (ent.nots.isEmpty()) {
        return processSpanJoin(name,ent.queries,ent.nots,maxSnippets);
      }
    }
  }
  for (int i=0; i < fields.size(); i++) {
    QueryEntry ent=(QueryEntry)subMap.get(fields.get(i));
    int nQueries=ent.queries.size();
    int nNots=ent.nots.size();
    if (nQueries > 1 || (nQueries == 1 && nNots > 0)) {
      SpanQuery sq=processSpanJoin(name,ent.queries,ent.nots,maxSnippets);
      bq.add(deChunk(sq),require,false);
      continue;
    }
    for (int j=0; j < ent.queries.size(); j++)     bq.add(deChunk((Query)ent.queries.get(j)),require,false);
    for (int j=0; j < ent.nots.size(); j++)     bq.add(deChunk((Query)ent.nots.get(j)),false,true);
  }
  BooleanClause[] clauses=bq.getClauses();
  if (clauses.length == 1) {
    if (clauses[0].required)     return clauses[0].query;
 else     if (clauses[0].prohibited) {
      Query allDocsQuery=new TermQuery(new Term(""String_Node_Str"",""String_Node_Str""));
      bq.add(allDocsQuery,true,false);
    }
  }
  return simplifyBooleanQuery(bq);
}","/** 
 * Main work of recursively parsing a query. 
 */
private Query parseQuery2(EasyNode parent,String name,String field,int maxSnippets) throws QueryGenException {
  if (name.equals(""String_Node_Str"")) {
    Term term=parseTerm(parent,field,""String_Node_Str"");
    SpanQuery q=isWildcardTerm(term) ? new XtfSpanWildcardQuery(term,req.termLimit) : new SpanTermQuery(term);
    q.setSpanRecording(maxSnippets);
    return q;
  }
  field=parseField(parent,field);
  if (name.equals(""String_Node_Str""))   return parseRange(parent,field,maxSnippets);
  if (name.equals(""String_Node_Str""))   return parseMoreLike(parent,field,maxSnippets);
  if (name.matches(""String_Node_Str"")) {
    int slop=name.equals(""String_Node_Str"") ? 999999999 : name.equals(""String_Node_Str"") ? 0 : name.equals(""String_Node_Str"") ? -1 : parseIntAttrib(parent,""String_Node_Str"");
    return makeProxQuery(parent,slop,field,maxSnippets);
  }
  HashMap subMap=new HashMap();
  Vector fields=new Vector();
  BooleanQuery bq=new BooleanQuery();
  boolean require=!name.equals(""String_Node_Str"");
  for (int i=0; i < parent.nChildren(); i++) {
    EasyNode el=parent.child(i);
    if (!el.isElement())     continue;
    if (el.name().equals(""String_Node_Str""))     continue;
 else     if (el.name().equalsIgnoreCase(""String_Node_Str""))     continue;
    Query q;
    boolean isNot=false;
    if (el.name().equals(""String_Node_Str"")) {
      q=parseQuery2(el,name,field,0);
      isNot=true;
    }
 else     q=parseQuery(el,field,maxSnippets);
    if (q == null)     continue;
    if (q instanceof SpanQuery) {
      String queryField=((SpanQuery)q).getField();
      QueryEntry ent=(QueryEntry)subMap.get(queryField);
      if (ent == null) {
        fields.add(queryField);
        ent=new QueryEntry(queryField);
        subMap.put(queryField,ent);
      }
      if (isNot)       ent.nots.add(q);
 else       ent.queries.add(q);
    }
 else {
      bq.add(q,isNot ? false : require,isNot);
    }
  }
  BooleanClause[] genericClauses=bq.getClauses();
  if (genericClauses.length == 0) {
    if (subMap.isEmpty())     return null;
    if (fields.size() == 1) {
      QueryEntry ent=(QueryEntry)subMap.get(fields.get(0));
      if (ent.nots.isEmpty()) {
        return processSpanJoin(name,ent.queries,ent.nots,maxSnippets);
      }
    }
  }
  for (int i=0; i < fields.size(); i++) {
    QueryEntry ent=(QueryEntry)subMap.get(fields.get(i));
    int nQueries=ent.queries.size();
    int nNots=ent.nots.size();
    if (nQueries > 1 || (nQueries == 1 && nNots > 0)) {
      SpanQuery sq=processSpanJoin(name,ent.queries,ent.nots,maxSnippets);
      bq.add(deChunk(sq),require,false);
      continue;
    }
    for (int j=0; j < ent.queries.size(); j++)     bq.add(deChunk((Query)ent.queries.get(j)),require,false);
    for (int j=0; j < ent.nots.size(); j++)     bq.add(deChunk((Query)ent.nots.get(j)),false,true);
  }
  BooleanClause[] clauses=bq.getClauses();
  if (clauses.length == 1) {
    if (clauses[0].required)     return clauses[0].query;
 else     if (clauses[0].prohibited) {
      Query allDocsQuery=new TermQuery(new Term(""String_Node_Str"",""String_Node_Str""));
      bq.add(allDocsQuery,true,false);
    }
  }
  return simplifyBooleanQuery(bq);
}",0.99860529986053
24784,"/** 
 * Generate a proximity query on a field. This uses the de-duplicating span system.
 * @param parent The element containing the field name and terms.
 */
Query makeProxQuery(EasyNode parent,int slop,String field,int maxSnippets) throws QueryGenException {
  Vector terms=new Vector();
  Vector notVec=new Vector();
  for (int i=0; i < parent.nChildren(); i++) {
    EasyNode el=parent.child(i);
    if (!el.isElement())     continue;
    if (el.name().equals(""String_Node_Str"")) {
      if (slop <= 0)       error(""String_Node_Str"");
      notVec.add(parseQuery(el,field,maxSnippets));
    }
 else {
      SpanQuery q;
      if (slop == 0) {
        Term t=parseTerm(el,field,""String_Node_Str"");
        if (isWildcardTerm(t))         q=new BigramSpanWildcardQuery(t,req.termLimit);
 else         q=new SpanTermQuery(t);
        q.setSpanRecording(maxSnippets);
        terms.add(q);
      }
 else       terms.add(parseQuery(el,field,maxSnippets));
    }
  }
  if (terms.size() == 0)   error(""String_Node_Str"" + parent.name() + ""String_Node_Str""+ ""String_Node_Str"");
  SpanQuery q;
  SpanQuery[] termQueries=(SpanQuery[])terms.toArray(new SpanQuery[terms.size()]);
  if (slop < 0)   q=new SpanExactQuery(termQueries);
 else   if (terms.size() == 1)   q=(SpanQuery)terms.elementAt(0);
 else   q=new SpanNearQuery(termQueries,slop,slop == 0);
  q.setSpanRecording(maxSnippets);
  return q;
}","/** 
 * Generate a proximity query on a field. This uses the de-duplicating span system.
 * @param parent The element containing the field name and terms.
 */
Query makeProxQuery(EasyNode parent,int slop,String field,int maxSnippets) throws QueryGenException {
  Vector terms=new Vector();
  Vector notVec=new Vector();
  for (int i=0; i < parent.nChildren(); i++) {
    EasyNode el=parent.child(i);
    if (!el.isElement())     continue;
    if (el.name().equals(""String_Node_Str"")) {
      if (slop <= 0)       error(""String_Node_Str"");
      notVec.add(parseQuery(el,field,maxSnippets));
    }
 else {
      SpanQuery q;
      if (slop == 0) {
        Term t=parseTerm(el,field,""String_Node_Str"");
        if (isWildcardTerm(t))         q=new XtfSpanWildcardQuery(t,req.termLimit);
 else         q=new SpanTermQuery(t);
        q.setSpanRecording(maxSnippets);
        terms.add(q);
      }
 else       terms.add(parseQuery(el,field,maxSnippets));
    }
  }
  if (terms.size() == 0)   error(""String_Node_Str"" + parent.name() + ""String_Node_Str""+ ""String_Node_Str"");
  SpanQuery q;
  SpanQuery[] termQueries=(SpanQuery[])terms.toArray(new SpanQuery[terms.size()]);
  if (slop < 0)   q=new SpanExactQuery(termQueries);
 else   if (terms.size() == 1)   q=(SpanQuery)terms.elementAt(0);
 else   q=new SpanNearQuery(termQueries,slop,slop == 0);
  q.setSpanRecording(maxSnippets);
  return q;
}",0.9967684021543984
24785,"public String encodeUrl(String url){
}","public String encodeUrl(String url){
  return url;
}",0.8444444444444444
24786,"public String encodeURL(String url){
}","public String encodeURL(String url){
  return url;
}",0.8444444444444444
24787,"public String encodeRedirectUrl(String url){
}","public String encodeRedirectUrl(String url){
  return url;
}",0.8679245283018868
24788,"public String encodeRedirectURL(String url){
}","public String encodeRedirectURL(String url){
  return url;
}",0.8679245283018868
24789,"/** 
 * Makes a Saxon Receiver that will transparently add a session IDs to URLs if they match the servlet URL, or other patterns configured  in the conf file.
 * @param trans   The transformer that will do the work
 * @param req     The servlet request being processed
 * @param res     The servlet response to output to
 * @return        A Receiver suitable for the target of the transform
 */
public Receiver createFilteredReceiver(Transformer trans,HttpServletRequest req,HttpServletResponse res) throws XPathException, IOException {
  StreamResult stream=new StreamResult(res.getOutputStream());
  Receiver target=ResultWrapper.getReceiver(stream,((Controller)trans).makePipelineConfiguration(),trans.getOutputProperties());
  return new SessionURLRewriter(target,req,res);
}","/** 
 * Makes a Saxon Receiver that will transparently add a session IDs to URLs if they match the servlet URL, or other patterns configured  in the conf file.
 * @param trans   The transformer that will do the work
 * @param req     The servlet request being processed
 * @param res     The servlet response to output to
 * @return        A Receiver suitable for the target of the transform
 */
public Receiver createFilteredReceiver(Transformer trans,HttpServletRequest req,HttpServletResponse res) throws XPathException, IOException {
  StreamResult stream=new StreamResult(res.getOutputStream());
  Receiver target=ResultWrapper.getReceiver(stream,((Controller)trans).makePipelineConfiguration(),trans.getOutputProperties());
  if (getConfig().trackSessions)   return new SessionURLRewriter(target,req,res);
 else   return target;
}",0.9653465346534652
24790,"public boolean isRequestedSessionIdFromUrl(){
}","public boolean isRequestedSessionIdFromUrl(){
  return false;
}",0.8545454545454545
24791,"public boolean isRequestedSessionIdFromURL(){
}","public boolean isRequestedSessionIdFromURL(){
  return false;
}",0.8545454545454545
24792,"public boolean isRequestedSessionIdValid(){
}","public boolean isRequestedSessionIdValid(){
  return false;
}",0.8490566037735849
24793,"public boolean isRequestedSessionIdFromCookie(){
}","public boolean isRequestedSessionIdFromCookie(){
  return false;
}",0.8620689655172413
24794,"public HttpSession getSession(boolean create){
}","public HttpSession getSession(boolean create){
  if (create)   throw new RuntimeException(""String_Node_Str"");
  return null;
}",0.5517241379310345
24795,"public ParseException generateParseException(){
  jj_expentries.removeAllElements();
  boolean[] la1tokens=new boolean[18];
  for (int i=0; i < 18; i++) {
    la1tokens[i]=false;
  }
  if (jj_kind >= 0) {
    la1tokens[jj_kind]=true;
    jj_kind=-1;
  }
  for (int i=0; i < 1; i++) {
    if (jj_la1[i] == jj_gen) {
      for (int j=0; j < 32; j++) {
        if ((jj_la1_0[i] & (1 << j)) != 0) {
          la1tokens[j]=true;
        }
      }
    }
  }
  for (int i=0; i < 18; i++) {
    if (la1tokens[i]) {
      jj_expentry=new int[1];
      jj_expentry[0]=i;
      jj_expentries.addElement(jj_expentry);
    }
  }
  int[][] exptokseq=new int[jj_expentries.size()][];
  for (int i=0; i < jj_expentries.size(); i++) {
    exptokseq[i]=(int[])jj_expentries.elementAt(i);
  }
  return new ParseException(token,exptokseq,tokenImage);
}","public ParseException generateParseException(){
  jj_expentries.removeAllElements();
  boolean[] la1tokens=new boolean[19];
  for (int i=0; i < 19; i++) {
    la1tokens[i]=false;
  }
  if (jj_kind >= 0) {
    la1tokens[jj_kind]=true;
    jj_kind=-1;
  }
  for (int i=0; i < 1; i++) {
    if (jj_la1[i] == jj_gen) {
      for (int j=0; j < 32; j++) {
        if ((jj_la1_0[i] & (1 << j)) != 0) {
          la1tokens[j]=true;
        }
      }
    }
  }
  for (int i=0; i < 19; i++) {
    if (la1tokens[i]) {
      jj_expentry=new int[1];
      jj_expentry[0]=i;
      jj_expentries.addElement(jj_expentry);
    }
  }
  int[][] exptokseq=new int[jj_expentries.size()][];
  for (int i=0; i < jj_expentries.size(); i++) {
    exptokseq[i]=(int[])jj_expentries.elementAt(i);
  }
  return new ParseException(token,exptokseq,tokenImage);
}",0.9963942307692308
24796,"/** 
 * Called when a lookup isn't (yet) in the cache. Passes the URL parameters to the docReqParser stylesheet, and gathers the result into a  {@link DocInfo} structure.
 * @param key           (LinkedList) URL parameters specifying the request
 * @return              (DocInfo) info about that document
 * @throws Exception    If anything goes wrong loading or runningthe docLookup stylesheet.
 */
protected Object generate(Object key) throws Exception {
  LinkedList params=(LinkedList)key;
  DocInfo info=new DocInfo();
  Templates pss=servlet.stylesheetCache.find(config.docLookupSheet);
  Iterator di=servlet.stylesheetCache.getDependencies(config.docLookupSheet);
  LinkedList oldStylesheetDeps=new LinkedList();
  while (di.hasNext())   oldStylesheetDeps.add(di.next());
  Transformer trans;
  if (prevStylesheet.get() == pss) {
    trans=(Transformer)prevTransformer.get();
    trans.clearParameters();
  }
 else {
    trans=pss.newTransformer();
  }
  AttribList attrList=new AttribList();
  for (Iterator iter=params.iterator(); iter.hasNext(); ) {
    String paramName=(String)iter.next();
    String paramVal=(String)iter.next();
    trans.setParameter(paramName,new StringValue(paramVal));
    attrList.put(paramName,paramVal);
  }
  if (!(trans.getErrorListener() instanceof XTFSaxonErrorListener))   trans.setErrorListener(new XTFSaxonErrorListener());
  XMLFormatter paramBlock=new XMLFormatter();
  servlet.buildParamBlock(attrList,paramBlock,null,null);
  NodeInfo paramDoc=paramBlock.toNode();
  if (Trace.getOutputLevel() >= Trace.debug) {
    Trace.debug(""String_Node_Str"");
    Trace.tab();
    Trace.debug(XMLWriter.toString(paramDoc));
    Trace.untab();
  }
  TreeBuilder result;
synchronized (servlet.stylesheetCache) {
    servlet.stylesheetCache.setDependencyReceiver(this);
    try {
      result=new TreeBuilder();
      trans.transform(paramDoc,result);
    }
  finally {
      servlet.stylesheetCache.setDependencyReceiver(null);
    }
  }
  if (Trace.getOutputLevel() >= Trace.debug) {
    Trace.debug(""String_Node_Str"");
    Trace.tab();
    Trace.debug(XMLWriter.toString(result.getCurrentRoot()));
    Trace.untab();
  }
  addDependency(new CacheDependency(servlet.stylesheetCache,config.docLookupSheet));
  EasyNode root=new EasyNode(result.getCurrentRoot());
  for (int i=0; i < root.nChildren(); i++) {
    EasyNode el=root.child(i);
    String tagName=el.name();
    if (tagName.equals(""String_Node_Str""))     info.style=servlet.getRealPath(el.attrValue(""String_Node_Str""));
 else     if (tagName.equals(""String_Node_Str""))     info.source=servlet.getRealPath(el.attrValue(""String_Node_Str""));
 else     if (tagName.equals(""String_Node_Str"")) {
      info.indexConfig=servlet.getRealPath(el.attrValue(""String_Node_Str""));
      info.indexName=el.attrValue(""String_Node_Str"");
    }
 else     if (tagName.equals(""String_Node_Str""))     info.brand=servlet.getRealPath(el.attrValue(""String_Node_Str""));
 else     if (tagName.equals(""String_Node_Str""))     info.authSpecs.add(servlet.authenticator.processAuthTag(el));
 else     if (tagName.equals(""String_Node_Str"")) {
      info.query=new QueryRequestParser().parseRequest(el.getWrappedNode(),new File(servlet.getRealPath(""String_Node_Str"")));
    }
 else     if (tagName.equalsIgnoreCase(""String_Node_Str""))     info.preFilter=servlet.getRealPath(el.attrValue(""String_Node_Str""));
 else     if (tagName.equalsIgnoreCase(""String_Node_Str"")) {
      String val=el.attrValue(""String_Node_Str"");
      if (val.matches(""String_Node_Str""))       info.removeDoctypeDecl=true;
 else       if (val.matches(""String_Node_Str""))       info.removeDoctypeDecl=false;
 else       throw new DynaXMLException(""String_Node_Str"" + ""String_Node_Str"" + tagName + ""String_Node_Str""+ val+ ""String_Node_Str"");
    }
 else     throw new DynaXMLException(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
  if (TextServlet.isEmpty(info.source))   throw new InvalidDocumentException();
  TextServlet.requireOrElse(info.style,""String_Node_Str"");
  if (TextServlet.isEmpty(info.indexConfig) && !TextServlet.isEmpty(info.indexName))   throw new GeneralException(""String_Node_Str"");
  if (!TextServlet.isEmpty(info.indexConfig) && TextServlet.isEmpty(info.indexName))   throw new GeneralException(""String_Node_Str"");
  return info;
}","/** 
 * Called when a lookup isn't (yet) in the cache. Passes the URL parameters to the docReqParser stylesheet, and gathers the result into a  {@link DocInfo} structure.
 * @param key           (LinkedList) URL parameters specifying the request
 * @return              (DocInfo) info about that document
 * @throws Exception    If anything goes wrong loading or runningthe docLookup stylesheet.
 */
protected Object generate(Object key) throws Exception {
  LinkedList params=(LinkedList)key;
  DocInfo info=new DocInfo();
  Templates pss=servlet.stylesheetCache.find(config.docLookupSheet);
  Iterator di=servlet.stylesheetCache.getDependencies(config.docLookupSheet);
  LinkedList oldStylesheetDeps=new LinkedList();
  while (di.hasNext())   oldStylesheetDeps.add(di.next());
  Transformer trans;
  if (prevStylesheet.get() == pss) {
    trans=(Transformer)prevTransformer.get();
    trans.clearParameters();
  }
 else {
    trans=pss.newTransformer();
  }
  AttribList attrList=new AttribList();
  for (Iterator iter=params.iterator(); iter.hasNext(); ) {
    String paramName=(String)iter.next();
    String paramVal=(String)iter.next();
    trans.setParameter(paramName,new StringValue(paramVal));
    attrList.put(paramName,paramVal);
  }
  if (!(trans.getErrorListener() instanceof XTFSaxonErrorListener))   trans.setErrorListener(new XTFSaxonErrorListener());
  XMLFormatter paramBlock=new XMLFormatter();
  servlet.buildParamBlock(attrList,paramBlock,new HashMap(),null);
  NodeInfo paramDoc=paramBlock.toNode();
  if (Trace.getOutputLevel() >= Trace.debug) {
    Trace.debug(""String_Node_Str"");
    Trace.tab();
    Trace.debug(XMLWriter.toString(paramDoc));
    Trace.untab();
  }
  TreeBuilder result;
synchronized (servlet.stylesheetCache) {
    servlet.stylesheetCache.setDependencyReceiver(this);
    try {
      result=new TreeBuilder();
      trans.transform(paramDoc,result);
    }
  finally {
      servlet.stylesheetCache.setDependencyReceiver(null);
    }
  }
  if (Trace.getOutputLevel() >= Trace.debug) {
    Trace.debug(""String_Node_Str"");
    Trace.tab();
    Trace.debug(XMLWriter.toString(result.getCurrentRoot()));
    Trace.untab();
  }
  addDependency(new CacheDependency(servlet.stylesheetCache,config.docLookupSheet));
  EasyNode root=new EasyNode(result.getCurrentRoot());
  for (int i=0; i < root.nChildren(); i++) {
    EasyNode el=root.child(i);
    String tagName=el.name();
    if (tagName.equals(""String_Node_Str""))     info.style=servlet.getRealPath(el.attrValue(""String_Node_Str""));
 else     if (tagName.equals(""String_Node_Str""))     info.source=servlet.getRealPath(el.attrValue(""String_Node_Str""));
 else     if (tagName.equals(""String_Node_Str"")) {
      info.indexConfig=servlet.getRealPath(el.attrValue(""String_Node_Str""));
      info.indexName=el.attrValue(""String_Node_Str"");
    }
 else     if (tagName.equals(""String_Node_Str""))     info.brand=servlet.getRealPath(el.attrValue(""String_Node_Str""));
 else     if (tagName.equals(""String_Node_Str""))     info.authSpecs.add(servlet.authenticator.processAuthTag(el));
 else     if (tagName.equals(""String_Node_Str"")) {
      info.query=new QueryRequestParser().parseRequest(el.getWrappedNode(),new File(servlet.getRealPath(""String_Node_Str"")));
    }
 else     if (tagName.equalsIgnoreCase(""String_Node_Str""))     info.preFilter=servlet.getRealPath(el.attrValue(""String_Node_Str""));
 else     if (tagName.equalsIgnoreCase(""String_Node_Str"")) {
      String val=el.attrValue(""String_Node_Str"");
      if (val.matches(""String_Node_Str""))       info.removeDoctypeDecl=true;
 else       if (val.matches(""String_Node_Str""))       info.removeDoctypeDecl=false;
 else       throw new DynaXMLException(""String_Node_Str"" + ""String_Node_Str"" + tagName + ""String_Node_Str""+ val+ ""String_Node_Str"");
    }
 else     throw new DynaXMLException(""String_Node_Str"" + tagName + ""String_Node_Str"");
  }
  if (TextServlet.isEmpty(info.source))   throw new InvalidDocumentException();
  TextServlet.requireOrElse(info.style,""String_Node_Str"");
  if (TextServlet.isEmpty(info.indexConfig) && !TextServlet.isEmpty(info.indexName))   throw new GeneralException(""String_Node_Str"");
  if (!TextServlet.isEmpty(info.indexConfig) && TextServlet.isEmpty(info.indexName))   throw new GeneralException(""String_Node_Str"");
  return info;
}",0.9982560167422392
24797,"final public GroupSelector rangeFilter() throws ParseException {
  Token t;
  int from;
  int to=999999999;
  t=jj_consume_token(NUMBER);
  from=Integer.parseInt(t.toString());
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DASH:
    jj_consume_token(DASH);
  t=jj_consume_token(NUMBER);
to=Integer.parseInt(t.toString());
break;
default :
jj_la1[8]=jj_gen;
;
}
{
if (true) return new RangeSelector(from - 1,to - from + 1);
}
throw new Error(""String_Node_Str"");
}","final public GroupSelector rangeFilter() throws ParseException {
  Token t;
  int from;
  int to;
  t=jj_consume_token(NUMBER);
  from=to=Integer.parseInt(t.toString());
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DASH:
    jj_consume_token(DASH);
  t=jj_consume_token(NUMBER);
to=Integer.parseInt(t.toString());
break;
default :
jj_la1[8]=jj_gen;
;
}
{
if (true) return new RangeSelector(from - 1,to - from + 1);
}
throw new Error(""String_Node_Str"");
}",0.9859762675296656
24798,"public boolean skipTo(int target) throws IOException {
  if (firstTime || target > spans.doc()) {
    more=spans.skipTo(target);
    firstTime=false;
  }
  return advance();
}","public boolean skipTo(int target) throws IOException {
  if (firstTime || (more && target > spans.doc())) {
    more=spans.skipTo(target);
    firstTime=false;
  }
  return advance();
}",0.9722222222222222
24799,"/** 
 * This is the worker function that runs in a separate thread and keeps an eye out for runaways.
 */
private static void watch(){
  try {
    while (true) {
      Thread.sleep(1000);
synchronized (beingWatched) {
        long curTime=System.currentTimeMillis();
        int nRunaways=0;
        Iterator iter=beingWatched.values().iterator();
        while (iter.hasNext()) {
          Entry e=(Entry)iter.next();
          if (curTime < e.nextCheckTime) {
            if (e.runaway)             ++nRunaways;
            continue;
          }
          e.runaway=true;
          ++nRunaways;
          long nextTime=Math.min(5000,e.maxTime);
          e.nextCheckTime=curTime + nextTime;
          e.needPrint=true;
        }
        int count=0;
        iter=beingWatched.values().iterator();
        while (iter.hasNext()) {
          Entry e=(Entry)iter.next();
          if (e.runaway)           ++count;
          if (!e.needPrint)           continue;
          String id=Trace.getThreadId(e.thread);
          if (id == null)           id=""String_Node_Str"";
          double secs=(curTime - e.startTime) / 1000.0;
          String secStr=DecimalFormat.getInstance().format(secs);
          Trace.warning(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ secStr+ ""String_Node_Str""+ count+ ""String_Node_Str""+ nRunaways+ ""String_Node_Str""+ ""String_Node_Str""+ e.descrip);
          try {
            Class c=e.thread.getClass();
            Method m=c.getMethod(""String_Node_Str"",new Class[0]);
            StackTraceElement[] stackTrace=(StackTraceElement[])m.invoke(e.thread,new Object[0]);
            StringBuffer buf=new StringBuffer();
            for (int i=0; i < stackTrace.length; i++) {
              buf.append(""String_Node_Str"");
              buf.append(stackTrace[i].toString());
              buf.append(""String_Node_Str"");
            }
            Trace.warning(""String_Node_Str"" + buf.toString());
          }
 catch (          Exception exc) {
          }
        }
      }
    }
  }
 catch (  InterruptedException e) {
  }
}","/** 
 * This is the worker function that runs in a separate thread and keeps an eye out for runaways.
 */
private static void watch(){
  try {
    while (true) {
      Thread.sleep(5100);
synchronized (beingWatched) {
        long curTime=System.currentTimeMillis();
        int nRunaways=0;
        Iterator iter=beingWatched.values().iterator();
        while (iter.hasNext()) {
          Entry e=(Entry)iter.next();
          if (curTime < e.nextCheckTime) {
            if (e.runaway)             ++nRunaways;
            continue;
          }
          e.runaway=true;
          ++nRunaways;
          e.needPrint=true;
        }
        int count=0;
        curTime=System.currentTimeMillis();
        iter=beingWatched.values().iterator();
        while (iter.hasNext()) {
          Entry e=(Entry)iter.next();
          if (e.runaway)           ++count;
          if (!e.needPrint)           continue;
          String id=Trace.getThreadId(e.thread);
          if (id == null)           id=""String_Node_Str"";
          double secs=(curTime - e.startTime) / 1000.0;
          String secStr=DecimalFormat.getInstance().format(secs);
          Trace.warning(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ secStr+ ""String_Node_Str""+ count+ ""String_Node_Str""+ nRunaways+ ""String_Node_Str""+ ""String_Node_Str""+ e.descrip);
          try {
            Class c=e.thread.getClass();
            Method m=c.getMethod(""String_Node_Str"",new Class[0]);
            StackTraceElement[] stackTrace=(StackTraceElement[])m.invoke(e.thread,new Object[0]);
            StringBuffer buf=new StringBuffer();
            for (int i=0; i < stackTrace.length; i++) {
              buf.append(""String_Node_Str"");
              buf.append(stackTrace[i].toString());
              buf.append(""String_Node_Str"");
            }
            Trace.warning(""String_Node_Str"" + buf.toString());
          }
 catch (          Exception exc) {
          }
        }
        curTime=System.currentTimeMillis();
        iter=beingWatched.values().iterator();
        while (iter.hasNext()) {
          Entry e=(Entry)iter.next();
          if (!e.needPrint)           continue;
          e.needPrint=false;
          e.nextCheckTime=curTime + e.maxTime;
        }
      }
    }
  }
 catch (  InterruptedException e) {
  }
}",0.5162322816643804
24800,"/** 
 * Create the appropriate node(s) for text within a snippet, including elements for any marked &lt;term&gt;s.
 * @param text Text to process, with "" &lt;term&gt;"" stuff inside it.
 * @param prev Node to add to
 * @param addAsChild true to add to prev as a child, else as sibling.
 * @return Last node added.
 */
private NodeImpl breakupText(String text,NodeImpl prev,boolean addAsChild){
  int startPos=0;
  while (true) {
    int markerPos=text.indexOf(""String_Node_Str"",startPos);
    if (markerPos < 0)     markerPos=text.length();
    String beforeText=text.substring(startPos,markerPos);
    prev=addText(prev,beforeText,addAsChild);
    addAsChild=false;
    if (markerPos == text.length())     break;
    int termStart=text.indexOf('>',markerPos) + 1;
    int markEnd=text.indexOf(""String_Node_Str"",markerPos);
    String termText=text.substring(termStart,markEnd);
    prev=addElement(prev,termElementCode,0,false);
    addText(prev,termText,true);
    startPos=text.indexOf('>',markEnd) + 1;
  }
  return prev;
}","/** 
 * Create the appropriate node(s) for text within a snippet, including elements for any marked &lt;term&gt;s.
 * @param text Text to process, with "" &lt;term&gt;"" stuff inside it.
 * @param prev Node to add to
 * @param addAsChild true to add to prev as a child, else as sibling.
 * @return Last node added.
 */
private NodeImpl breakupText(String text,NodeImpl prev,boolean addAsChild){
  int startPos=0;
  while (true) {
    int markerPos=text.indexOf(""String_Node_Str"",startPos);
    if (markerPos < 0)     markerPos=text.length();
    String beforeText=text.substring(startPos,markerPos);
    beforeText=undoEntities(beforeText);
    prev=addText(prev,beforeText,addAsChild);
    addAsChild=false;
    if (markerPos == text.length())     break;
    int termStart=text.indexOf('>',markerPos) + 1;
    int markEnd=text.indexOf(""String_Node_Str"",markerPos);
    String termText=text.substring(termStart,markEnd);
    termText=undoEntities(termText);
    prev=addElement(prev,termElementCode,0,false);
    addText(prev,termText,true);
    startPos=text.indexOf('>',markEnd) + 1;
  }
  return prev;
}",0.9633802816901408
24801,"/** 
 * Translates any HTML-special characters (like quote, ampersand, etc.) into the corresponding code (like &amp;quot;)
 * @param s The string to transform
 */
public static String makeHtmlString(String s,boolean keepTags){
  if (s == null)   return ""String_Node_Str"";
  StringBuffer buf=new StringBuffer();
  boolean inTag=false;
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (keepTags && !inTag && c == '<') {
      inTag=true;
      buf.append(c);
      continue;
    }
    if (keepTags && inTag && c == '>') {
      inTag=false;
      buf.append(c);
      continue;
    }
    if (inTag) {
      buf.append(c);
      continue;
    }
switch (c) {
case '<':
      buf.append(""String_Node_Str"");
    break;
case '>':
  buf.append(""String_Node_Str"");
break;
case '&':
buf.append(""String_Node_Str"");
break;
case '\'':
buf.append(""String_Node_Str"");
break;
case '\""':
buf.append(""String_Node_Str"");
break;
case '\n':
buf.append(""String_Node_Str"");
break;
default :
buf.append(c);
break;
}
}
return buf.toString();
}","/** 
 * Translates any HTML-special characters (like quote, ampersand, etc.) into the corresponding code (like &amp;quot;)
 * @param s The string to transform
 */
public static String makeHtmlString(String s,boolean keepTags){
  if (s == null)   return ""String_Node_Str"";
  StringBuffer buf=new StringBuffer();
  boolean inTag=false;
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (keepTags && !inTag && c == '<') {
      inTag=true;
      buf.append(c);
      continue;
    }
    if (keepTags && inTag && c == '>') {
      inTag=false;
      buf.append(c);
      continue;
    }
    if (inTag) {
      buf.append(c);
      continue;
    }
    if (c == '&') {
      int j;
      for (j=i + 1; j < s.length(); j++) {
        if (!Character.isLetterOrDigit(s.charAt(j)))         break;
      }
      if (j < s.length() && s.charAt(j) == ';') {
        while (i <= j)         buf.append(s.charAt(i++));
        i--;
        continue;
      }
    }
switch (c) {
case '<':
      buf.append(""String_Node_Str"");
    break;
case '>':
  buf.append(""String_Node_Str"");
break;
case '&':
buf.append(""String_Node_Str"");
break;
case '\'':
buf.append(""String_Node_Str"");
break;
case '\""':
buf.append(""String_Node_Str"");
break;
case '\n':
buf.append(""String_Node_Str"");
break;
default :
buf.append(c);
break;
}
}
return buf.toString();
}",0.8720100713386487
24802,"/** 
 * Given a chunk number, return the corresponding document number that it is part of. Note that like all Lucene indexes, this is ephemeral and only applies to the given reader. If not found, returns -1; this can basically only happen if the chunk number is greater than all document numbers.
 * @param chunkNumber Chunk number to translate
 * @return Document index, or -1 if no match.
 */
public final int getDocNum(int chunkNumber){
  scan(chunkNumber);
  if (high == nDocs)   return -1;
  return docNums[high];
}","/** 
 * Given a chunk number, return the corresponding document number that it is part of. Note that like all Lucene indexes, this is ephemeral and only applies to the given reader. If not found, returns -1; this can basically only happen if the chunk number is greater than all document numbers.
 * @param chunkNumber Chunk number to translate
 * @return Document index, or -1 if no match.
 */
public final synchronized int getDocNum(int chunkNumber){
  scan(chunkNumber);
  if (high == nDocs)   return -1;
  return docNums[high];
}",0.9876543209876544
24803,"private void load(){
  if (docNums != null)   return;
  try {
    Term term=new Term(""String_Node_Str"",""String_Node_Str"");
    nDocs=reader.docFreq(term);
    docNums=new int[nDocs];
    TermDocs docHeaders=reader.termDocs(term);
    int i=0;
    while (docHeaders.next())     docNums[i++]=docHeaders.doc();
    nDocs=i;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","private synchronized void load(){
  if (docNums != null)   return;
  try {
    Term term=new Term(""String_Node_Str"",""String_Node_Str"");
    nDocs=reader.docFreq(term);
    docNums=new int[nDocs];
    TermDocs docHeaders=reader.termDocs(term);
    int i=0;
    while (docHeaders.next())     docNums[i++]=docHeaders.doc();
    nDocs=i;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9836888331242158
24804,"/** 
 * Given a document number, this method returns the number of its first chunk.
 */
public final int getFirstChunk(int docNum){
  scan(docNum);
  if (low < 0 || docNums[low] != docNum)   return -1;
  if (low == 0)   return 1;
 else   return docNums[low - 1] + 1;
}","/** 
 * Given a document number, this method returns the number of its first chunk.
 */
public final synchronized int getFirstChunk(int docNum){
  scan(docNum);
  if (low < 0 || docNums[low] != docNum)   return -1;
  if (low == 0)   return 1;
 else   return docNums[low - 1] + 1;
}",0.97632058287796
24805,"/** 
 * This is main entry point. Takes a pre-parsed query request and handles  searching the index and forming the results.
 * @param req      The pre-parsed request to process
 * @return         Zero or more document hits
 */
public QueryResult processRequest(final QueryRequest req) throws IOException {
}","/** 
 * This is main entry point. Takes a pre-parsed query request and handles  searching the index and forming the results.<br> This method is synchronized because it uses two instance variables, so access by multiple threads would result in incorrect counting. For maximum efficiency, each thread should really use its own instance.
 * @param req      The pre-parsed request to process
 * @return         Zero or more document hits
 */
public synchronized QueryResult processRequest(final QueryRequest req) throws IOException {
}",0.734207389749702
24806,"/** 
 * The last child of this Node, or null if none. 
 */
public NodeInfo getLastChild(){
  NodeInfo last=getFirstChild();
  while (true) {
    NodeInfo next=((NodeImpl)last).getNextSibling();
    if (next == null)     break;
    last=next;
  }
  return last;
}","/** 
 * The last child of this Node, or null if none. 
 */
public NodeInfo getLastChild(){
  NodeInfo last=getFirstChild();
  if (last != null) {
    while (true) {
      NodeInfo next=((NodeImpl)last).getNextSibling();
      if (next == null)       break;
      last=next;
    }
  }
  return last;
}",0.8861209964412812
24807,"public void recordSpans(int targetDoc,FieldSpans fieldSpans){
}","public void recordSpans(int targetDoc,FieldSpans fieldSpans){
  if (scoredDoc == targetDoc && totalDeduped > 0)   fieldSpans.recordSpans(field,totalDeduped,scoredSpans,terms);
}",0.525
24808,"/** 
 * After index parameters are known, this method should be called to update the slop parameters of queries that need to know. Also informs wildcard and range queries of the stopword set.
 */
private void fixupSlop(Query query,DocNumMap docNumMap,Set stopSet){
  boolean isText=(query instanceof SpanQuery) ? ((SpanQuery)query).getField().equals(""String_Node_Str"") : false;
  if (query instanceof SpanNearQuery) {
    SpanNearQuery nq=(SpanNearQuery)query;
    int maxSlop=isText ? docNumMap.getChunkOverlap() : 1000000;
    nq.setSlop(Math.min(nq.getSlop(),maxSlop));
  }
 else   if (query instanceof SpanChunkedNotQuery) {
    SpanChunkedNotQuery nq=(SpanChunkedNotQuery)query;
    nq.setSlop(Math.min(nq.getSlop(),docNumMap.getChunkOverlap()),docNumMap.getChunkSize() - docNumMap.getChunkOverlap());
  }
 else   if (query instanceof SpanDechunkingQuery) {
    SpanDechunkingQuery dq=(SpanDechunkingQuery)query;
    dq.setDocNumMap(docNumMap);
  }
 else   if (query instanceof SpanWildcardQuery) {
    SpanWildcardQuery wq=(SpanWildcardQuery)query;
    wq.setStopWords(stopSet);
  }
 else   if (query instanceof SpanRangeQuery) {
    SpanRangeQuery rq=(SpanRangeQuery)query;
    rq.setStopWords(stopSet);
  }
  Query[] subQueries=query.getSubQueries();
  if (subQueries != null) {
    for (int i=0; i < subQueries.length; i++)     fixupSlop(subQueries[i],docNumMap,stopSet);
  }
}","/** 
 * After index parameters are known, this method should be called to update the slop parameters of queries that need to know. Also informs wildcard and range queries of the stopword set.
 */
private void fixupSlop(Query query,DocNumMap docNumMap,Set stopSet){
  boolean isText=(query instanceof SpanQuery) ? ((SpanQuery)query).getField().equals(""String_Node_Str"") : false;
  if (query instanceof SpanNearQuery) {
    SpanNearQuery nq=(SpanNearQuery)query;
    int maxSlop=isText ? docNumMap.getChunkOverlap() : (1000000 - 1);
    nq.setSlop(Math.min(nq.getSlop(),maxSlop));
  }
 else   if (query instanceof SpanChunkedNotQuery) {
    SpanChunkedNotQuery nq=(SpanChunkedNotQuery)query;
    nq.setSlop(Math.min(nq.getSlop(),docNumMap.getChunkOverlap()),docNumMap.getChunkSize() - docNumMap.getChunkOverlap());
  }
 else   if (query instanceof SpanDechunkingQuery) {
    SpanDechunkingQuery dq=(SpanDechunkingQuery)query;
    dq.setDocNumMap(docNumMap);
  }
 else   if (query instanceof SpanWildcardQuery) {
    SpanWildcardQuery wq=(SpanWildcardQuery)query;
    wq.setStopWords(stopSet);
  }
 else   if (query instanceof SpanRangeQuery) {
    SpanRangeQuery rq=(SpanRangeQuery)query;
    rq.setStopWords(stopSet);
  }
  Query[] subQueries=query.getSubQueries();
  if (subQueries != null) {
    for (int i=0; i < subQueries.length; i++)     fixupSlop(subQueries[i],docNumMap,stopSet);
  }
}",0.9978401727861772
24809,"/** 
 * Marks all the terms within the given text. Typically used to mark terms within a meta-data field.
 * @param doc        document to get matching spans from
 * @param fieldName  name of the field to mark.
 * @param value      value of the field to mark
 * @return           Marked up text value.
 */
public String markField(SpanDocument doc,final String fieldName,final String value){
  try {
    final StringBuffer buf=new StringBuffer(value.length() * 2);
    TokenStream stream=analyzer.tokenStream(fieldName,new StringReader(value));
    stream=new StartEndStripper(stream);
    final WordIter wordIter=new BoundedWordIter(value,stream,chunkOverlap);
    doc.markField(fieldName,wordIter,maxContext,termMode,stopSet,new MarkCollector(){
      private MarkPos prevPos=null;
      private boolean inContext=false;
      private boolean inSpan=false;
      private int contextSize;
      private MarkPos contextStart;
      private void copyUpTo(      MarkPos pos){
        if (prevPos != null) {
          String toAdd=((BoundedMarkPos)prevPos).getTextTo(pos,inContext || inSpan);
          buf.append(toAdd);
          if (inContext)           contextSize+=toAdd.length();
        }
        prevPos=pos;
      }
      public void beginField(      MarkPos pos){
        prevPos=pos;
      }
      public void beginContext(      MarkPos pos,      Span span){
        copyUpTo(pos);
        buf.append(""String_Node_Str"");
        buf.append(Integer.toString(span.rank + 1));
        buf.append(""String_Node_Str"");
        buf.append(Integer.toString((int)(span.score * 100)));
        buf.append(""String_Node_Str"");
        inContext=true;
        contextSize=0;
        contextStart=pos;
      }
      public void term(      MarkPos startPos,      MarkPos endPos,      String term){
        copyUpTo(startPos);
        String toAdd=startPos.getTextTo(endPos);
        buf.append(""String_Node_Str"");
        buf.append(toAdd);
        buf.append(""String_Node_Str"");
        if (inContext)         contextSize+=toAdd.length();
        prevPos=endPos;
      }
      public void beginSpan(      MarkPos pos,      Span span){
        copyUpTo(pos);
        buf.append(""String_Node_Str"");
        buf.append(Integer.toString(span.rank + 1));
        buf.append(""String_Node_Str"");
        buf.append(Integer.toString((int)(span.score * 100)));
        buf.append(""String_Node_Str"");
        inSpan=true;
      }
      public void endSpan(      MarkPos pos){
        copyUpTo(pos);
        buf.append(""String_Node_Str"");
        inSpan=false;
      }
      public void endContext(      MarkPos pos){
        copyUpTo(pos);
        buf.append(""String_Node_Str"");
        if (contextSize > maxContext) {
          int posDiff=contextStart.countTextTo(pos);
        }
        inContext=false;
      }
      public void endField(      MarkPos pos){
        copyUpTo(pos);
      }
    }
);
    String strVal=buf.toString();
    return strVal;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
catch (  BoundedMarkPos.UnmarkableException e) {
    return value;
  }
}","/** 
 * Marks all the terms within the given text. Typically used to mark terms within a meta-data field.
 * @param doc        document to get matching spans from
 * @param fieldName  name of the field to mark.
 * @param value      value of the field to mark
 * @return           Marked up text value.
 */
public String markField(SpanDocument doc,final String fieldName,final String value){
  try {
    final StringBuffer buf=new StringBuffer(value.length() * 2);
    TokenStream stream=analyzer.tokenStream(fieldName,new StringReader(value));
    stream=new StartEndStripper(stream);
    final WordIter wordIter=new BoundedWordIter(value,stream,chunkOverlap);
    doc.markField(fieldName,wordIter,maxContext,termMode,stopSet,new MarkCollector(){
      private MarkPos prevPos=null;
      private boolean inContext=false;
      private boolean inSpan=false;
      private int contextSize;
      private MarkPos contextStart;
      private void copyUpTo(      MarkPos pos){
        if (prevPos != null) {
          String toAdd=((BoundedMarkPos)prevPos).getTextTo(pos,inContext || inSpan);
          buf.append(toAdd);
          if (inContext)           contextSize+=toAdd.length();
        }
        prevPos=pos;
      }
      public void beginField(      MarkPos pos){
        prevPos=pos;
      }
      public void beginContext(      MarkPos pos,      Span span){
        copyUpTo(pos);
        buf.append(""String_Node_Str"");
        buf.append(Integer.toString(span.rank + 1));
        buf.append(""String_Node_Str"");
        buf.append(Integer.toString((int)(span.score * 100)));
        buf.append(""String_Node_Str"");
        inContext=true;
        contextSize=0;
        contextStart=pos;
      }
      public void term(      MarkPos startPos,      MarkPos endPos,      String term){
        copyUpTo(startPos);
        String toAdd=startPos.getTextTo(endPos);
        buf.append(""String_Node_Str"");
        buf.append(toAdd);
        buf.append(""String_Node_Str"");
        if (inContext)         contextSize+=toAdd.length();
        prevPos=endPos;
      }
      public void beginSpan(      MarkPos pos,      Span span){
        copyUpTo(pos);
        buf.append(""String_Node_Str"");
        if (!inContext) {
          buf.append(""String_Node_Str"");
          buf.append(Integer.toString(span.rank + 1));
          buf.append(""String_Node_Str"");
          buf.append(Integer.toString((int)(span.score * 100)));
          buf.append(""String_Node_Str"");
        }
        buf.append(""String_Node_Str"");
        inSpan=true;
      }
      public void endSpan(      MarkPos pos){
        copyUpTo(pos);
        buf.append(""String_Node_Str"");
        inSpan=false;
      }
      public void endContext(      MarkPos pos){
        copyUpTo(pos);
        buf.append(""String_Node_Str"");
        if (contextSize > maxContext) {
          int posDiff=contextStart.countTextTo(pos);
        }
        inContext=false;
      }
      public void endField(      MarkPos pos){
        copyUpTo(pos);
      }
    }
);
    String strVal=buf.toString();
    return strVal;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
catch (  BoundedMarkPos.UnmarkableException e) {
    return value;
  }
}",0.9661177960734644
24810,"public void beginSpan(MarkPos pos,Span span){
  copyUpTo(pos);
  buf.append(""String_Node_Str"");
  buf.append(Integer.toString(span.rank + 1));
  buf.append(""String_Node_Str"");
  buf.append(Integer.toString((int)(span.score * 100)));
  buf.append(""String_Node_Str"");
  inSpan=true;
}","public void beginSpan(MarkPos pos,Span span){
  copyUpTo(pos);
  buf.append(""String_Node_Str"");
  if (!inContext) {
    buf.append(""String_Node_Str"");
    buf.append(Integer.toString(span.rank + 1));
    buf.append(""String_Node_Str"");
    buf.append(Integer.toString((int)(span.score * 100)));
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
  inSpan=true;
}",0.7560240963855421
24811,"/** 
 * Retrieve the total number of spans which matched the field 
 */
public int getSpanTotal(String field){
  Entry ent=(Entry)entries.get(field);
  return (ent == null) ? -1 : ent.total;
}","/** 
 * Retrieve the total number of spans which matched the field 
 */
public int getSpanTotal(String field){
  Entry ent=(Entry)entries.get(field);
  return (ent == null) ? 0 : ent.total;
}",0.9921671018276762
24812,"/** 
 * Retrieve the number of spans stored for a given field 
 */
public int getSpanCount(String field){
  Entry ent=(Entry)entries.get(field);
  return (ent == null) ? -1 : ent.spans.size();
}","/** 
 * Retrieve the number of spans stored for a given field 
 */
public int getSpanCount(String field){
  Entry ent=(Entry)entries.get(field);
  return (ent == null) ? 0 : ent.spans.size();
}",0.992248062015504
24813,"/** 
 * Construct a term given its text and field name. This function is used instead of Term's constructor to add an extra check that the text is never a stop word.
 * @param text    Text for the new term
 * @param field   Field being queried
 * @return        A properly constructed Term, never a stop-word.
 */
protected Term newTerm(String text,String field){
}","/** 
 * Construct a term given its text and field name. This function is used instead of Term's constructor to add an extra check that the text is never a stop word.
 * @param text    Text for the new term
 * @param field   Field being queried
 * @return        A properly constructed Term, never a stop-word.
 */
protected Term newTerm(String field,String text){
}",0.9753424657534246
24814,"/** 
 * Creates either a standard score-sorting hit queue, or a field-sorting hit queue, depending on whether the query is to be sorted.
 * @param reader  will be used to read the field contents
 * @param req     contains the parameters (startDoc, maxDoc, sort fields)
 * @return        an appropriate hit queue
 */
private PriorityQueue createHitQueue(IndexReader reader,QueryRequest req) throws IOException {
  int nDocs=req.startDoc + req.maxDocs;
  if (req.sortMetaFields == null)   return new HitQueue(nDocs);
  Vector fieldNames=new Vector();
  StringTokenizer st=new StringTokenizer(req.sortMetaFields,""String_Node_Str"");
  while (st.hasMoreTokens())   fieldNames.add(st.nextToken());
  if (fieldNames.size() == 0)   return new HitQueue(nDocs);
  SortField[] fields=new SortField[fieldNames.size() + 1];
  for (int i=0; i < fieldNames.size(); i++) {
    String name=(String)fieldNames.elementAt(i);
    boolean reverse=false;
    if (name.startsWith(""String_Node_Str"")) {
      reverse=true;
      name=name.substring(1);
    }
 else     if (name.startsWith(""String_Node_Str"")) {
      reverse=false;
      name=name.substring(1);
    }
    fields[i]=new SortField(name,sparseStringComparator,reverse);
  }
  fields[fieldNames.size()]=SortField.FIELD_SCORE;
  return new FieldSortedHitQueue(reader,fields,nDocs);
}","/** 
 * Creates either a standard score-sorting hit queue, or a field-sorting hit queue, depending on whether the query is to be sorted.
 * @param reader  will be used to read the field contents
 * @param req     contains the parameters (startDoc, maxDoc, sort fields)
 * @return        an appropriate hit queue
 */
private PriorityQueue createHitQueue(IndexReader reader,int startDoc,int maxDocs,String sortFields) throws IOException {
  int nDocs=startDoc + maxDocs;
  if (sortFields == null)   return new HitQueue(nDocs);
  Vector fieldNames=new Vector();
  StringTokenizer st=new StringTokenizer(sortFields,""String_Node_Str"");
  while (st.hasMoreTokens())   fieldNames.add(st.nextToken());
  if (fieldNames.size() == 0)   return new HitQueue(nDocs);
  SortField[] fields=new SortField[fieldNames.size() + 1];
  for (int i=0; i < fieldNames.size(); i++) {
    String name=(String)fieldNames.elementAt(i);
    boolean reverse=false;
    if (name.startsWith(""String_Node_Str"")) {
      reverse=true;
      name=name.substring(1);
    }
 else     if (name.startsWith(""String_Node_Str"")) {
      reverse=false;
      name=name.substring(1);
    }
    fields[i]=new SortField(name,sparseStringComparator,reverse);
  }
  fields[fieldNames.size()]=SortField.FIELD_SCORE;
  return new FieldSortedHitQueue(reader,fields,nDocs);
}",0.9629349470499244
24815,"/** 
 * Add a document hit to the counts 
 */
public void addDoc(int doc,float score,FieldSpans spans){
  int link, group;
  for (link=data.firstLink(doc); link >= 0; link=data.nextLink(link)) {
    for (group=data.linkGroup(link); group >= 0; group=data.parent(group)) {
      counts[group]++;
      if (data.name(group) == hitGroupName) {
        hitQueue.insert(new DocHitImpl(doc,score,spans));
        hitTotalDocs++;
      }
    }
  }
}","/** 
 * Add a document hit to the counts 
 */
public void addDoc(int doc,float score,FieldSpans spans){
  int link, group;
  curMark++;
  for (link=data.firstLink(doc); link >= 0; link=data.nextLink(link)) {
    for (group=data.linkGroup(link); group >= 0; group=data.parent(group)) {
      if (marks[group] == curMark)       break;
      counts[group]++;
      marks[group]=curMark;
      if (data.name(group) == hitGroupName) {
        hitQueue.insert(new DocHitImpl(doc,score,spans));
        hitTotalDocs++;
      }
    }
  }
}",0.9085303186022612
24816,"/** 
 * Construct the array of doc hits for the hit group. 
 */
private void makeDocHits(ResultGroup group){
  int i;
  for (i=0; i < hitStartDoc; i++)   hitQueue.pop();
  int nHits=Math.min(hitQueue.size(),hitMaxDocs);
  group.docHits=new DocHit[nHits];
  group.totalDocs=hitTotalDocs;
  group.startDoc=hitStartDoc;
  group.endDoc=hitStartDoc + nHits;
  for (i=0; i < nHits; i++)   group.docHits[i]=(DocHit)hitQueue.pop();
}","/** 
 * Construct the array of doc hits for the hit group. 
 */
private void makeDocHits(ResultGroup group){
  int nFound=hitQueue.size();
  DocHitImpl[] hitArray=new DocHitImpl[nFound];
  float maxDocScore=0.0f;
  for (int i=0; i < nFound; i++) {
    int index=nFound - i - 1;
    hitArray[index]=(DocHitImpl)hitQueue.pop();
  }
  int nHits=Math.min(nFound,hitMaxDocs);
  group.docHits=new DocHit[nHits];
  group.totalDocs=hitTotalDocs;
  group.startDoc=hitStartDoc;
  group.endDoc=hitStartDoc + nHits;
  for (int i=hitStartDoc; i < nFound; i++)   group.docHits[i - hitStartDoc]=hitArray[i];
}",0.7124631992149166
24817,"/** 
 * Construct an object with all counts at zero 
 */
public GroupCounts(GroupData groupData){
  this.data=groupData;
  counts=new int[data.nGroups()];
}","/** 
 * Construct an object with all counts at zero 
 */
public GroupCounts(GroupData groupData){
  this.data=groupData;
  counts=new int[data.nGroups()];
  marks=new int[data.nGroups()];
}",0.9043478260869564
24818,"public void close() throws IOException {
  realStore().close();
  realStore=null;
}","public void close() throws IOException {
  if (realStore != null)   realStore.close();
  realStore=null;
}",0.8677248677248677
24819,"public void delete() throws IOException {
  realStore().delete();
  realStore=null;
}","public void delete() throws IOException {
  if (realStore != null)   realStore.delete();
  realStore=null;
}",0.8704663212435233
24820,"/** 
 * If the given element has a 'field' attribute, return its value; otherwise return 'parentField'. Also checks that field cannot be specified if parentField has already been.
 */
private String parseField(EasyNode el,String parentField) throws QueryGenException {
  if (!el.hasAttr(""String_Node_Str"") && !el.hasAttr(""String_Node_Str""))   return parentField;
  String attVal=el.attrValue(""String_Node_Str"");
  if (attVal == null || attVal.length() == 0)   attVal=el.attrValue(""String_Node_Str"");
  if (attVal.length() == 0)   error(""String_Node_Str"");
  if (attVal.equals(""String_Node_Str"") && !parentField.equals(""String_Node_Str""))   error(""String_Node_Str"");
  if (parentField != null && !parentField.equals(attVal))   error(""String_Node_Str"");
  return attVal;
}","/** 
 * If the given element has a 'field' attribute, return its value; otherwise return 'parentField'. Also checks that field cannot be specified if parentField has already been.
 */
private String parseField(EasyNode el,String parentField) throws QueryGenException {
  if (!el.hasAttr(""String_Node_Str"") && !el.hasAttr(""String_Node_Str""))   return parentField;
  String attVal=el.attrValue(""String_Node_Str"");
  if (attVal == null || attVal.length() == 0)   attVal=el.attrValue(""String_Node_Str"");
  if (attVal.length() == 0)   error(""String_Node_Str"");
  if (attVal.equals(""String_Node_Str"") && (parentField == null || !parentField.equals(""String_Node_Str"")))   error(""String_Node_Str"");
  if (parentField != null && !parentField.equals(attVal))   error(""String_Node_Str"");
  return attVal;
}",0.9840255591054312
24821,"/** 
 * Marks all the terms within the given text. Typically used to mark terms within a meta-data field.
 * @param doc        document to get matching spans from
 * @param fieldName  name of the field to mark.
 * @param value      value of the field to mark
 * @return           Marked up text value.
 */
public String markField(SpanDocument doc,String fieldName,final String value){
}","/** 
 * Marks all the terms within the given text. Typically used to mark terms within a meta-data field.
 * @param doc        document to get matching spans from
 * @param fieldName  name of the field to mark.
 * @param value      value of the field to mark
 * @return           Marked up text value.
 */
public String markField(SpanDocument doc,String fieldName,final String value){
  try {
    final StringBuffer buf=new StringBuffer(value.length() * 2);
    TokenStream stream=analyzer.tokenStream(fieldName,new StringReader(value));
    BasicWordIter wordIter=new BoundedWordIter(value,stream,chunkOverlap);
    doc.markField(fieldName,wordIter,maxContext,termMode,stopSet,new MarkCollector(){
      private MarkPos prevPos=null;
      private boolean inContext=false;
      private int contextSize;
      private MarkPos contextStart;
      private void copyUpTo(      MarkPos pos){
        if (prevPos != null) {
          String toAdd=prevPos.getTextTo(pos);
          buf.append(mapXMLChars(toAdd));
          if (inContext)           contextSize+=toAdd.length();
        }
        prevPos=pos;
      }
      public void beginField(      MarkPos pos){
        prevPos=pos;
      }
      public void beginContext(      MarkPos pos,      Span span){
        copyUpTo(pos);
        buf.append(""String_Node_Str"");
        buf.append(Integer.toString(span.rank + 1));
        buf.append(""String_Node_Str"");
        buf.append(Integer.toString((int)(span.score * 100)));
        buf.append(""String_Node_Str"");
        inContext=true;
        contextSize=0;
        contextStart=pos;
      }
      public void term(      MarkPos startPos,      MarkPos endPos,      String term){
        copyUpTo(startPos);
        buf.append(""String_Node_Str"");
        String toAdd=startPos.getTextTo(endPos);
        buf.append(toAdd);
        buf.append(""String_Node_Str"");
        prevPos=endPos;
        if (inContext)         contextSize+=toAdd.length();
      }
      public void beginSpan(      MarkPos pos,      Span span){
        copyUpTo(pos);
        buf.append(""String_Node_Str"");
        buf.append(Integer.toString(span.rank + 1));
        buf.append(""String_Node_Str"");
        buf.append(Integer.toString((int)(span.score * 100)));
        buf.append(""String_Node_Str"");
      }
      public void endSpan(      MarkPos pos){
        copyUpTo(pos);
        buf.append(""String_Node_Str"");
      }
      public void endContext(      MarkPos pos){
        copyUpTo(pos);
        buf.append(""String_Node_Str"");
        if (contextSize > maxContext) {
          int posDiff=contextStart.countTextTo(pos);
        }
        inContext=false;
      }
      public void endField(      MarkPos pos){
        copyUpTo(pos);
      }
    }
);
    String strVal=buf.toString();
    return strVal;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.2368824792881252
24822,"public boolean next(boolean force){
  if (tokens == null)   reseek(0);
 else   if (tokNum == tokens.length - 1) {
    if (chunk.chunkNum + 1 > chunkSource.lastChunk)     return false;
    Chunk next=chunkSource.loadChunk(chunk.chunkNum + 1);
    if (!force && next.tokens.length == 0)     return false;
    reseek(next);
    return true;
  }
  return super.next(force);
}","public boolean next(boolean force){
  if (tokens == null)   reseek(0);
 else   if (tokNum == tokens.length - 1) {
    while (true) {
      if (chunk.chunkNum + 1 > chunkSource.lastChunk)       return false;
      Chunk next=chunkSource.loadChunk(chunk.chunkNum + 1);
      if (next.tokens.length == 0) {
        if (!force)         return false;
        chunk=next;
        continue;
      }
      reseek(next);
      return true;
    }
  }
  return super.next(force);
}",0.6539833531510107
24823,"public boolean prev(boolean force){
  if (tokens == null)   return false;
 else   if (tokNum == 0) {
    if (chunk.chunkNum - 1 < chunkSource.firstChunk)     return false;
    Chunk prev=chunkSource.loadChunk(chunk.chunkNum - 1);
    if (!force && prev.tokens.length == 0)     return false;
    reseek(prev);
    while (wordPos < chunk.maxWordPos)     super.next(true);
    return true;
  }
  return super.prev(force);
}","public boolean prev(boolean force){
  if (tokens == null)   return false;
 else   if (tokNum == 0) {
    while (true) {
      if (chunk.chunkNum - 1 < chunkSource.firstChunk)       return false;
      Chunk prev=chunkSource.loadChunk(chunk.chunkNum - 1);
      if (prev.tokens.length == 0) {
        if (!force)         return false;
        chunk=prev;
        continue;
      }
      reseek(prev);
      while (wordPos < chunk.maxWordPos)       super.next(true);
      return true;
    }
  }
  return super.prev(force);
}",0.7423117709437964
24824,"/** 
 * This is the main entry point. Takes a query request and handles searching the index and forming the results.
 * @param queryReqDoc   The request to process, in XML format
 * @param baseDir       Directory to use for resolving relative paths(if any)
 * @return              Zero or more document hits
 */
public QueryResult processReq(QueryRequest req) throws IOException {
}","/** 
 * This is an alternate entry point. Takes a pre-parsed query request  and handles searching the index and forming the results.
 * @param queryReq      The pre-parsed request to process
 * @return              Zero or more document hits
 */
public QueryResult processReq(QueryRequest req) throws IOException {
}",0.4183381088825215
24825,"public boolean next() throws IOException {
  boolean more;
  do {
    while (bucketTable.first != null) {
      current=bucketTable.first;
      bucketTable.first=current.next;
      if ((current.bits & prohibitedMask) == 0 && (current.bits & requiredMask) == requiredMask) {
        return true;
      }
    }
    more=false;
    end+=BucketTable.SIZE;
    for (SubScorer sub=scorers; sub != null; sub=sub.next) {
      Scorer scorer=sub.scorer;
      while (!sub.done && scorer.doc() < end) {
        sub.collector.collect(scorer.doc(),scorer.score());
        sub.done=!scorer.next();
      }
      if (!sub.done) {
        more=true;
      }
    }
  }
 while (bucketTable.first != null | more);
  return false;
}","public boolean next() throws IOException {
  boolean more;
  do {
    while (bucketTable.first != null) {
      current=bucketTable.first;
      bucketTable.first=current.next;
      if ((current.bits & prohibitedMask) == 0 && (current.bits & requiredMask) == requiredMask) {
        return true;
      }
    }
    more=false;
    end+=BucketTable.SIZE;
    for (SubScorer sub=scorers; sub != null; sub=sub.next) {
      Scorer scorer=sub.scorer;
      while (!sub.done && scorer.doc() < end) {
        if (sub.skipRecording)         sub.collector.collect(scorer.doc(),scorer.score());
 else {
          FieldSpans fieldSpans=new FieldSpans();
          sub.scorer.recordSpans(fieldSpans);
          if (fieldSpans.isEmpty()) {
            sub.skipRecording=true;
            sub.collector.collect(scorer.doc(),scorer.score());
          }
 else           sub.collector.collect(scorer.doc(),scorer.score(),fieldSpans);
        }
        sub.done=!scorer.next();
      }
      if (!sub.done) {
        more=true;
      }
    }
  }
 while (bucketTable.first != null | more);
  return false;
}",0.7929125138427464
24826,"public HitCollector newCollector(int mask){
  return new Collector(mask,this);
}","public SpanHitCollector newCollector(int mask){
  return new Collector(mask,this);
}",0.975609756097561
24827,"public SubScorer(Scorer scorer,boolean required,boolean prohibited,HitCollector collector,SubScorer next) throws IOException {
  this.scorer=scorer;
  this.done=!scorer.next();
  this.required=required;
  this.prohibited=prohibited;
  this.collector=collector;
  this.next=next;
}","public SubScorer(Scorer scorer,boolean required,boolean prohibited,SpanHitCollector collector,SubScorer next) throws IOException {
  this.scorer=scorer;
  this.done=!scorer.next();
  this.required=required;
  this.prohibited=prohibited;
  this.collector=collector;
  this.next=next;
}",0.9929078014184396
24828,"public final void collect(final int doc,final float score){
  final BucketTable table=bucketTable;
  final int i=doc & BucketTable.MASK;
  Bucket bucket=table.buckets[i];
  if (bucket == null)   table.buckets[i]=bucket=new Bucket();
  if (bucket.doc != doc) {
    bucket.doc=doc;
    bucket.score=score;
    bucket.bits=mask;
    bucket.coord=1;
    bucket.next=table.first;
    table.first=bucket;
  }
 else {
    bucket.score+=score;
    bucket.bits|=mask;
    bucket.coord++;
  }
}","public final void collect(final int doc,final float score,final FieldSpans spans){
  final BucketTable table=bucketTable;
  final int i=doc & BucketTable.MASK;
  Bucket bucket=table.buckets[i];
  if (bucket == null)   table.buckets[i]=bucket=new Bucket();
  if (bucket.doc != doc) {
    bucket.doc=doc;
    bucket.score=score;
    bucket.spans=spans;
    bucket.bits=mask;
    bucket.coord=1;
    bucket.next=table.first;
    table.first=bucket;
  }
 else {
    bucket.score+=score;
    bucket.spans.addSpans(spans);
    bucket.bits|=mask;
    bucket.coord++;
  }
}",0.9227836034318398
24829,"/** 
 * Simplify a BooleanQuery that contains other BooleanQuery/ies with the same type of clauses. If there's any boosting involved, don't do the optimization.
 */
private Query simplifyBooleanQuery(BooleanQuery bq){
  boolean anyBoosting=false;
  boolean anyBoolSubs=false;
  boolean allSame=true;
  boolean first=true;
  boolean prevRequired=true;
  boolean prevProhibited=true;
  BooleanClause[] clauses=bq.getClauses();
  for (int i=0; i < clauses.length; i++) {
    if (!first && (prevRequired != clauses[i].required || prevProhibited != clauses[i].prohibited))     allSame=false;
    prevRequired=clauses[i].required;
    prevProhibited=clauses[i].prohibited;
    first=false;
    if (clauses[i].query.getBoost() != 1.0f)     anyBoosting=true;
    if (clauses[i].query instanceof BooleanQuery) {
      BooleanQuery subQuery=(BooleanQuery)clauses[i].query;
      BooleanClause[] subClauses=subQuery.getClauses();
      for (int j=0; j < subClauses.length; j++) {
        if (prevRequired != subClauses[j].required || prevProhibited != subClauses[j].prohibited)         allSame=false;
        prevRequired=subClauses[j].required;
        prevProhibited=subClauses[j].prohibited;
        if (clauses[j].query.getBoost() != 1.0f)         anyBoosting=true;
      }
      anyBoolSubs=true;
    }
  }
  if (!anyBoolSubs || !allSame || anyBoosting)   return bq;
  bq=new BooleanQuery();
  for (int i=0; i < clauses.length; i++) {
    if (clauses[i].query instanceof BooleanQuery) {
      BooleanQuery subQuery=(BooleanQuery)clauses[i].query;
      BooleanClause[] subClauses=subQuery.getClauses();
      for (int j=0; j < subClauses.length; j++)       bq.add(subClauses[j]);
    }
 else     bq.add(clauses[i]);
  }
  return bq;
}","/** 
 * Simplify a BooleanQuery that contains other BooleanQuery/ies with the same type of clauses. If there's any boosting involved, don't do the optimization.
 */
private Query simplifyBooleanQuery(BooleanQuery bq){
  boolean anyBoosting=false;
  boolean anyBoolSubs=false;
  boolean allSame=true;
  boolean first=true;
  boolean prevRequired=true;
  boolean prevProhibited=true;
  BooleanClause[] clauses=bq.getClauses();
  for (int i=0; i < clauses.length; i++) {
    if (!first && (prevRequired != clauses[i].required || prevProhibited != clauses[i].prohibited))     allSame=false;
    prevRequired=clauses[i].required;
    prevProhibited=clauses[i].prohibited;
    first=false;
    if (clauses[i].query.getBoost() != 1.0f)     anyBoosting=true;
    if (clauses[i].query instanceof BooleanQuery) {
      BooleanQuery subQuery=(BooleanQuery)clauses[i].query;
      BooleanClause[] subClauses=subQuery.getClauses();
      for (int j=0; j < subClauses.length; j++) {
        if (prevRequired != subClauses[j].required || prevProhibited != subClauses[j].prohibited)         allSame=false;
        prevRequired=subClauses[j].required;
        prevProhibited=subClauses[j].prohibited;
        if (subClauses[j].query.getBoost() != 1.0f)         anyBoosting=true;
      }
      anyBoolSubs=true;
    }
  }
  if (!anyBoolSubs || !allSame || anyBoosting)   return bq;
  bq=new BooleanQuery();
  for (int i=0; i < clauses.length; i++) {
    if (clauses[i].query instanceof BooleanQuery) {
      BooleanQuery subQuery=(BooleanQuery)clauses[i].query;
      BooleanClause[] subClauses=subQuery.getClauses();
      for (int j=0; j < subClauses.length; j++)       bq.add(subClauses[j]);
    }
 else     bq.add(clauses[i]);
  }
  return bq;
}",0.9985544955189362
24830,"/** 
 * Creates a document containing tokenized and untokenized versions of each parameter.
 */
public static NodeInfo tokenizeParams(AttribList atts) throws QueryGenException {
  XMLFormatter fmt=new XMLFormatter();
  fmt.beginTag(""String_Node_Str"");
  for (Iterator iter=atts.iterator(); iter.hasNext(); ) {
    Attrib att=(Attrib)iter.next();
    if (att.key.equals(""String_Node_Str""))     continue;
    addParam(fmt,att.key,att.value);
  }
  fmt.endTag();
  return fmt.toNode();
}","/** 
 * Creates a document containing tokenized and untokenized versions of each parameter.
 */
public static NodeInfo tokenizeParams(AttribList atts) throws QueryGenException {
  XMLFormatter fmt=new XMLFormatter();
  fmt.beginTag(""String_Node_Str"");
  for (Iterator iter=atts.iterator(); iter.hasNext(); ) {
    Attrib att=(Attrib)iter.next();
    if (att.key.equals(""String_Node_Str""))     continue;
    if (att.key.equals(""String_Node_Str""))     continue;
    if (att.key.startsWith(""String_Node_Str""))     continue;
    if (att.key.equals(""String_Node_Str""))     continue;
    addParam(fmt,att.key,att.value);
  }
  fmt.endTag();
  return fmt.toNode();
}",0.8468941382327209
24831,"public boolean skipTo(int target) throws IOException {
  if (doc == 0 || target > spans.doc())   more=spans.skipTo(target);
  return advance();
}","public boolean skipTo(int target) throws IOException {
  if (doc == 0 || (more && target > spans.doc()))   more=spans.skipTo(target);
  return advance();
}",0.9666666666666668
24832,"/** 
 * Run the search and save the results for annotating the tree.
 * @param processor     Processor used to run the query
 * @param req           Query to run
 * @throws IOException  If anything goes wrong reading from the Luceneindex or the lazy tree file.
 */
public void search(QueryProcessor processor,QueryRequest req) throws IOException {
}","/** 
 * Run the search and save the results for annotating the tree.
 * @param processor     Processor used to run the query
 * @param req           Query to run
 * @throws IOException  If anything goes wrong reading from the Luceneindex or the lazy tree file.
 */
public void search(QueryProcessor processor,QueryRequest origReq) throws IOException {
}",0.9914529914529916
24833,"/** 
 * Normalize a file name. <br><br> This function performs a number of ""cleanup"" operations to create  a standardized (or normalized) file name. <br><br>
 * @param path  The file name (optionally preceeded by a path)to normalize. <br><br>
 * @return A normalized version of the original file name string passed. 
 * @.notes This function does its work by calling the {@link Path#normalizePath(String) normalizePath() }function to normalize the filename and path (if any), and then  simply removes the trailing slash.
 */
public final static String normalizeFileName(String path){
  String filename=normalizePath(path);
  if (filename.charAt(filename.length() - 1) == '/')   filename=filename.substring(0,filename.length() - 1);
  return filename;
}","/** 
 * Normalize a file name. <br><br> This function performs a number of ""cleanup"" operations to create  a standardized (or normalized) file name. <br><br>
 * @param path  The file name (optionally preceeded by a path)to normalize. <br><br>
 * @return A normalized version of the original file name string passed. 
 * @.notes This function does its work by calling the {@link Path#normalizePath(String) normalizePath() }function to normalize the filename and path (if any), and then  simply removes the trailing slash.
 */
public final static String normalizeFileName(String path){
  String filename=normalizePath(path);
  if (filename.length() > 0 && filename.charAt(filename.length() - 1) == '/')   filename=filename.substring(0,filename.length() - 1);
  return filename;
}",0.9836494440810988
24834,"/** 
 * Construct an Attribute node for the n'th attribute of a given element
 * @param element The element containing the relevant attribute
 * @param index The index position of the attribute starting at zero
 */
public AttributeImpl(ElementImpl element,int index){
  super(element.document);
  this.index=index;
  parentNum=element.nodeNum;
  this.element=element;
}","/** 
 * Construct an Attribute node for the n'th attribute of a given element
 * @param element The element containing the relevant attribute
 * @param index The index position of the attribute starting at zero
 */
public AttributeImpl(ElementImpl element,int index){
  super(element.document);
  this.index=index;
  parentNum=element.nodeNum;
  this.element=element;
  nameCode=element.attrNames[index];
}",0.952258064516129
24835,"/** 
 * If the given element has a 'field' attribute, return its value; otherwise return 'parentField'. Also checks that field cannot be specified if parentField has already been.
 */
private String parseField(EasyNode el,String parentField) throws QueryGenException {
  if (!el.hasAttr(""String_Node_Str"") && !el.hasAttr(""String_Node_Str""))   return parentField;
  String attVal=el.attrValue(""String_Node_Str"");
  if (attVal == null || attVal.length() == 0)   attVal=el.attrValue(""String_Node_Str"");
  if (attVal.length() == 0)   error(""String_Node_Str"");
  if (attVal.equals(""String_Node_Str""))   error(""String_Node_Str"");
  if (parentField != null && !parentField.equals(attVal))   error(""String_Node_Str"");
  return attVal;
}","/** 
 * If the given element has a 'field' attribute, return its value; otherwise return 'parentField'. Also checks that field cannot be specified if parentField has already been.
 */
private String parseField(EasyNode el,String parentField) throws QueryGenException {
  if (!el.hasAttr(""String_Node_Str"") && !el.hasAttr(""String_Node_Str""))   return parentField;
  String attVal=el.attrValue(""String_Node_Str"");
  if (attVal == null || attVal.length() == 0)   attVal=el.attrValue(""String_Node_Str"");
  if (attVal.length() == 0)   error(""String_Node_Str"");
  if (attVal.equals(""String_Node_Str"") && !parentField.equals(""String_Node_Str""))   error(""String_Node_Str"");
  if (parentField != null && !parentField.equals(attVal))   error(""String_Node_Str"");
  return attVal;
}",0.8731642189586115
24836,"/** 
 * Forces subsequent text to start at the beginning of a new chunk. <br><br> This method is used to ensure that source text marked with proximity  breaks or new section types does not overlap with any previously  accumulated source text.
 * @param sectionType  The section type to apply to the previouslyaccumulated chunk.
 * @param wordBoost    The word boost to apply to the previously accumulated chunk. <br><br>
 * @.notes This method writes out any accumulated text and resets the chunk tracking information to the start of a new chunk.
 */
private void forceNewChunk(String sectionType,float wordBoost){
  indexText(sectionType,wordBoost);
  chunkStartNode=nextChunkStartNode;
  chunkWordOffset=nextChunkWordOffset;
  chunkWordCount=nextChunkWordCount;
  accumText.delete(0,nextChunkStartIdx);
  trimAccumText(true);
  nextChunkStartIdx=0;
  nextChunkWordCount=0;
  indexText(sectionType,wordBoost);
  chunkWordOffset+=chunkWordCount;
  chunkWordCount=0;
  nextChunkWordCount=0;
  nextChunkWordOffset=0;
  accumText.setLength(0);
  forcedChunk=true;
}","/** 
 * Forces subsequent text to start at the beginning of a new chunk. <br><br> This method is used to ensure that source text marked with proximity  breaks or new section types does not overlap with any previously  accumulated source text.
 * @param sectionType  The section type to apply to the previouslyaccumulated chunk.
 * @param wordBoost    The word boost to apply to the previously accumulated chunk. <br><br>
 * @.notes This method writes out any accumulated text and resets the chunk tracking information to the start of a new chunk.
 */
private void forceNewChunk(String sectionType,float wordBoost){
  if (nextChunkStartIdx > 0) {
    indexText(sectionType,wordBoost);
    chunkStartNode=nextChunkStartNode;
    chunkWordOffset=nextChunkWordOffset;
    chunkWordCount=nextChunkWordCount;
    accumText.delete(0,nextChunkStartIdx);
    trimAccumText(true);
    nextChunkStartIdx=0;
    nextChunkWordCount=0;
  }
  indexText(sectionType,wordBoost);
  chunkWordOffset+=chunkWordCount;
  chunkWordCount=0;
  nextChunkWordCount=0;
  nextChunkWordOffset=0;
  accumText.setLength(0);
  chunkStartNode=-1;
  forcedChunk=true;
}",0.9571948998178508
24837,"/** 
 * Obtain a hash code so that ProfileCounts can be stored in a map 
 */
public int hashCode(){
  return lineNum ^ systemId.hashCode();
}","/** 
 * Obtain a hash code so that ProfileCounts can be stored in a map 
 */
public int hashCode(){
  if (systemId != null)   return lineNum ^ systemId.hashCode();
  return lineNum;
}",0.8703703703703703
24838,"private int totalSlop(){
  if (totalSlop >= 0)   return totalSlop;
  int matchSlop=0;
  int lastStart=-1;
  int lastEnd=-1;
  for (int i=0; i < ordered.size(); i++) {
    SpansCell cell=(SpansCell)ordered.get(i);
    int start=cell.start();
    int end=cell.end();
    if (i > 0) {
      if (end <= lastStart)       matchSlop+=(lastStart - end);
 else       if (start >= lastEnd)       matchSlop+=(start - lastEnd);
 else       ;
    }
    lastStart=start;
    lastEnd=end;
  }
  return totalSlop=matchSlop;
}","private int totalSlop(){
  if (totalSlop >= 0)   return totalSlop;
  int matchSlop=0;
  int lastStart=-1;
  int lastEnd=-1;
  for (int i=0; i < ordered.size(); i++) {
    SpansCell cell=(SpansCell)ordered.get(i);
    int start=cell.start();
    int end=cell.end();
    if (i > 0) {
      if (end <= lastStart)       matchSlop+=(lastStart - end) + 1;
 else       if (start >= lastEnd)       matchSlop+=(start - lastEnd);
 else       ;
    }
    lastStart=start;
    lastEnd=end;
  }
  return totalSlop=matchSlop;
}",0.9960861056751468
24839,"public boolean next() throws IOException {
  while (true) {
    boolean more=super.next();
    if (!more) {
      curTerm=null;
      return false;
    }
    curTerm=super.term();
    if (stopWords == null)     break;
    if (stopWords.contains(curTerm.text()))     continue;
    if (NgramQueryRewriter.isNgram(stopWords,curTerm.text()))     continue;
  }
  nTerms++;
  if (nTerms > termLimit) {
    throw new TermLimitException(""String_Node_Str"" + getTerm().field() + ""String_Node_Str""+ termLimit+ ""String_Node_Str"");
  }
  termMap.put(curTerm);
  return true;
}","public boolean next() throws IOException {
  while (true) {
    if (first)     first=false;
 else {
      if (!super.next()) {
        curTerm=null;
        return false;
      }
    }
    curTerm=super.term();
    if (curTerm == null)     return false;
    if (stopWords == null)     break;
    if (stopWords.contains(curTerm.text()))     continue;
    if (NgramQueryRewriter.isNgram(stopWords,curTerm.text()))     continue;
  }
  nTerms++;
  if (nTerms > termLimit) {
    throw new TermLimitException(""String_Node_Str"" + getTerm().field() + ""String_Node_Str""+ termLimit+ ""String_Node_Str"");
  }
  termMap.put(curTerm);
  System.out.println(""String_Node_Str"" + curTerm);
  return true;
}",0.8201438848920863
24840,"/** 
 * Open the active Lucene index database for writing. <br><br>
 * @throws IOException  Any exceptions generated during the creation of the Lucene database writer object.
 * @.notes This method attempts to open the Lucene database specified by the  {@link XMLTextProcessor#indexPath indexPath} member for writing.<br><br>
 */
private void openIdxForWriting() throws IOException {
  indexWriter=new IndexWriter(indexPath,new XTFTextAnalyzer(stopSet,indexInfo.getChunkSize(),compactedAccumText),false);
  indexWriter.minMergeDocs=100;
  indexWriter.setUseCompoundFile(false);
}","/** 
 * Open the active Lucene index database for writing. <br><br>
 * @throws IOException  Any exceptions generated during the creation of the Lucene database writer object.
 * @.notes This method attempts to open the Lucene database specified by the  {@link XMLTextProcessor#indexPath indexPath} member for writing.<br><br>
 */
private void openIdxForWriting() throws IOException {
  if (indexSearcher != null)   indexSearcher.close();
  if (indexReader != null)   indexReader.close();
  indexSearcher=null;
  indexReader=null;
  if (indexWriter != null)   return;
  indexWriter=new IndexWriter(indexPath,new XTFTextAnalyzer(stopSet,indexInfo.getChunkSize(),compactedAccumText),false);
  indexWriter.minMergeDocs=100;
  indexWriter.setUseCompoundFile(false);
}",0.8635346756152126
24841,"/** 
 * Process the list of files queued for indexing or reindexing. <br><br> This method iterates through the list of queued source text files, calling the   {@link XMLTextProcessor#processText(XMLTextProcessor.SrcTextInfo,int) processText()}method to (re)index the file as needed. <br><br>
 * @throws IOException   Any I/O exceptions encountered when reading the sourcetext file or writing to the Lucene index. <br><br>
 * @.notes Originally, the <code>XMLTextProcessor</code> opened the Lucene  database, (re)indexed the source file, and then closed the database  for each XML file encountered in the source tree. Unfortunately,  opening and closing the Lucene database is a fairly time consuming operation, and doing so for each file made the time to index an entire  source tree much higher than it had to be. So to minimize the open/close overhead, the <code>XMLTextProcessor</code> was changed to traverse the source tree first and collect all the XML filenames it found into a  processing queue. Once the files were queued, the Lucene database could  be opened, all the files in the queue could be (re)indexed, and the  database could be closed. Doing so significantly reduced the time to  index the entire source tree. <br><br> It should be noted that each file in the queue is identified by a  ""relocatable"" path to the source tree directory where it was found, and that this relocatable path is stored in the Lucene database when the file is indexed. This relocatable path consists of the index name  followed by the source tree sub-path at which the file is located. Storing this relocatable file path in the index allows the indexer  and the search engine to correctly locate the source text, even if  the source tree base directory has been renamed or moved. Correctly locating the original source text for chunks in an index is necessary when displaying search results, or to determine if source text needs  to be reindexed due to changes, or removed from an index because it no longer exists. Ultimately, both the indexer and the query  engine use the  {@linkplain XMLConfigParser index configuration file} tomap the index name back into an absolute path when a source text needs to be accessed. <br><br>
 */
public void processQueuedTexts() throws IOException {
}","/** 
 * Process the list of files queued for indexing or reindexing. <br><br> This method iterates through the list of queued source text files, calling the   {@link XMLTextProcessor#processText(XMLTextProcessor.SrcTextInfo,int) processText()}method to (re)index the file as needed. <br><br>
 * @throws IOException   Any I/O exceptions encountered when reading the sourcetext file or writing to the Lucene index. <br><br>
 * @.notes Originally, the <code>XMLTextProcessor</code> opened the Lucene  database, (re)indexed the source file, and then closed the database  for each XML file encountered in the source tree. Unfortunately,  opening and closing the Lucene database is a fairly time consuming operation, and doing so for each file made the time to index an entire  source tree much higher than it had to be. So to minimize the open/close overhead, the <code>XMLTextProcessor</code> was changed to traverse the source tree first and collect all the XML filenames it found into a  processing queue. Once the files were queued, the Lucene database could  be opened, all the files in the queue could be (re)indexed, and the  database could be closed. Doing so significantly reduced the time to  index the entire source tree. <br><br> It should be noted that each file in the queue is identified by a  ""relocatable"" path to the source tree directory where it was found, and that this relocatable path is stored in the Lucene database when the file is indexed. This relocatable path consists of the index name  followed by the source tree sub-path at which the file is located. Storing this relocatable file path in the index allows the indexer  and the search engine to correctly locate the source text, even if  the source tree base directory has been renamed or moved. Correctly locating the original source text for chunks in an index is necessary when displaying search results, or to determine if source text needs  to be reindexed due to changes, or removed from an index because it no longer exists. Ultimately, both the indexer and the query  engine use the  {@linkplain XMLConfigParser index configuration file} tomap the index name back into an absolute path when a source text needs to be accessed. <br><br>
 */
public void processQueuedTexts() throws IOException {
  blurbedText=new StringBuffer(bufStartSize);
  accumText=new StringBuffer(bufStartSize);
  compactedAccumText=new StringBuffer(bufStartSize);
  try {
    openIdxForWriting();
    int nFiles=fileQueue.size();
    int fileNum=0;
    while (!fileQueue.isEmpty()) {
      SrcTextInfo idxFile=(SrcTextInfo)fileQueue.removeFirst();
      int percent=(nFiles <= 1) ? -1 : ((fileNum + 1) * 100 / nFiles);
      processText(idxFile,percent);
      fileNum++;
    }
  }
 catch (  IOException e) {
    Trace.tab();
    Trace.error(""String_Node_Str"" + e);
    Trace.untab();
  }
}",0.8892355694227769
24842,"/** 
 * Remove a single document from the index.<br><br>
 * @param srcFile    The original XML source file, used to calculate thelocation of the corresponding *.lazy file to delete. If null, this step is skipped.
 * @param key        The key associated with the document in the index.
 * @return           true if a document was found and removed, false ifno match was found.
 */
public boolean removeSingleDoc(File srcFile,String key) throws ParserConfigurationException, SAXException, IOException {
  int nDeleted=indexReader.delete(new Term(""String_Node_Str"",key));
  if (srcFile != null) {
    lazyFile=IdxConfigUtil.calcLazyPath(new File(xtfHomePath),indexInfo,srcFile,false);
    Path.deletePath(lazyFile.toString());
  }
  return nDeleted > 0;
}","/** 
 * Remove a single document from the index.<br><br>
 * @param srcFile    The original XML source file, used to calculate thelocation of the corresponding *.lazy file to delete. If null, this step is skipped.
 * @param key        The key associated with the document in the index.
 * @return           true if a document was found and removed, false ifno match was found.
 */
public boolean removeSingleDoc(File srcFile,String key) throws ParserConfigurationException, SAXException, IOException {
  openIdxForReading();
  int nDeleted=indexReader.delete(new Term(""String_Node_Str"",key));
  if (srcFile != null) {
    lazyFile=IdxConfigUtil.calcLazyPath(new File(xtfHomePath),indexInfo,srcFile,false);
    Path.deletePath(lazyFile.toString());
  }
  return nDeleted > 0;
}",0.9849377865094956
24843,"/** 
 * Open a TextIndexer (Lucene) index for reading or writing. <br><br> The primary purpose of this method is to open the index identified by the  <code>cfgInfo</code> for reading and searching. Index reading and searching operations are used to clean, cull, or optimize an index. Opening an index for writing is performed by the method   {@link XMLTextProcessor#openIdxForWriting() openIdxForWriting()}only when the index is being updated with new document information. <br><br> 
 * @param homePath Path from which to resolve relative path names.<br>
 * @param idxInfo  A config structure containing information about the indexto open. <br>
 * @param clean    true to truncate any existing index; false to add to it.<br><br>
 * @.notes This method will create an index if it doesn't exist, or truncate an index that does exist if the <code>clean</code> flag is set in the  <code>cfgInfo</code> structure. <br><br> This method makes a private internal reference  {@link XMLTextProcessor#configInfo configInfo}to the passed configuration structure for use by other methods in this  class. <br><br>
 * @throws IOException  Any I/O exceptions that occurred during the opening,creation, or truncation of the Lucene index. <br><br>
 */
public void open(String homePath,IndexInfo idxInfo,boolean clean) throws IOException {
  fileQueue=new LinkedList();
  try {
    this.indexInfo=idxInfo;
    this.xtfHomePath=homePath;
    indexPath=getIndexPath();
    if (indexInfo.stopWords != null)     stopSet=NgramStopFilter.makeStopSet(indexInfo.stopWords);
    if (clean) {
      Path.createPath(indexPath);
      createIndex(indexPath);
    }
 else {
      Path.createPath(indexPath);
      FSDirectory idxDir=FSDirectory.getDirectory(indexPath,false);
      if (!IndexReader.indexExists(idxDir))       createIndex(indexPath);
    }
    indexReader=IndexReader.open(indexPath);
    indexSearcher=new IndexSearcher(indexReader);
    Hits match=indexSearcher.search(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")));
    if (match.length() == 0)     throw new RuntimeException(""String_Node_Str"");
    Document doc=match.doc(0);
    if (Integer.parseInt(doc.get(""String_Node_Str"")) != indexInfo.getChunkSize()) {
      throw new RuntimeException(""String_Node_Str"" + doc.get(""String_Node_Str"") + ""String_Node_Str""+ indexInfo.getChunkSize()+ ""String_Node_Str"");
    }
    if (Integer.parseInt(doc.get(""String_Node_Str"")) != indexInfo.getChunkOvlp()) {
      throw new RuntimeException(""String_Node_Str"" + doc.get(""String_Node_Str"") + ""String_Node_Str""+ indexInfo.getChunkOvlp()+ ""String_Node_Str"");
    }
    String stopWords=indexInfo.stopWords;
    if (stopWords == null)     stopWords=""String_Node_Str"";
    if (!doc.get(""String_Node_Str"").equals(stopWords)) {
      throw new RuntimeException(""String_Node_Str"" + doc.get(""String_Node_Str"") + ""String_Node_Str""+ indexInfo.stopWords+ ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    Trace.tab();
    Trace.error(""String_Node_Str"" + e);
    Trace.untab();
    close();
    throw e;
  }
}","/** 
 * Open a TextIndexer (Lucene) index for reading or writing. <br><br> The primary purpose of this method is to open the index identified by the  <code>cfgInfo</code> for reading and searching. Index reading and searching operations are used to clean, cull, or optimize an index. Opening an index for writing is performed by the method   {@link XMLTextProcessor#openIdxForWriting() openIdxForWriting()}only when the index is being updated with new document information. <br><br> 
 * @param homePath Path from which to resolve relative path names.<br>
 * @param idxInfo  A config structure containing information about the indexto open. <br>
 * @param clean    true to truncate any existing index; false to add to it.<br><br>
 * @.notes This method will create an index if it doesn't exist, or truncate an index that does exist if the <code>clean</code> flag is set in the  <code>cfgInfo</code> structure. <br><br> This method makes a private internal reference  {@link XMLTextProcessor#configInfo configInfo}to the passed configuration structure for use by other methods in this  class. <br><br>
 * @throws IOException  Any I/O exceptions that occurred during the opening,creation, or truncation of the Lucene index. <br><br>
 */
public void open(String homePath,IndexInfo idxInfo,boolean clean) throws IOException {
  fileQueue=new LinkedList();
  try {
    this.indexInfo=idxInfo;
    this.xtfHomePath=homePath;
    indexPath=getIndexPath();
    if (indexInfo.stopWords != null)     stopSet=NgramStopFilter.makeStopSet(indexInfo.stopWords);
    if (clean) {
      Path.createPath(indexPath);
      createIndex(indexPath);
    }
 else {
      Path.createPath(indexPath);
      FSDirectory idxDir=FSDirectory.getDirectory(indexPath,false);
      if (!IndexReader.indexExists(idxDir))       createIndex(indexPath);
    }
    openIdxForReading();
    Hits match=indexSearcher.search(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")));
    if (match.length() == 0)     throw new RuntimeException(""String_Node_Str"");
    Document doc=match.doc(0);
    if (Integer.parseInt(doc.get(""String_Node_Str"")) != indexInfo.getChunkSize()) {
      throw new RuntimeException(""String_Node_Str"" + doc.get(""String_Node_Str"") + ""String_Node_Str""+ indexInfo.getChunkSize()+ ""String_Node_Str"");
    }
    if (Integer.parseInt(doc.get(""String_Node_Str"")) != indexInfo.getChunkOvlp()) {
      throw new RuntimeException(""String_Node_Str"" + doc.get(""String_Node_Str"") + ""String_Node_Str""+ indexInfo.getChunkOvlp()+ ""String_Node_Str"");
    }
    String stopWords=indexInfo.stopWords;
    if (stopWords == null)     stopWords=""String_Node_Str"";
    if (!doc.get(""String_Node_Str"").equals(stopWords)) {
      throw new RuntimeException(""String_Node_Str"" + doc.get(""String_Node_Str"") + ""String_Node_Str""+ indexInfo.stopWords+ ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    Trace.tab();
    Trace.error(""String_Node_Str"" + e);
    Trace.untab();
    close();
    throw e;
  }
}",0.9837371390640558
24844,"public boolean skipTo(int target) throws IOException {
  more=spans.skipTo(target);
  return advance();
}","public boolean skipTo(int target) throws IOException {
  if (doc == 0 || target > spans.doc())   more=spans.skipTo(target);
  return advance();
}",0.84
24845,"public boolean next() throws IOException {
  while (true) {
    if (first)     first=false;
 else {
      if (!super.next()) {
        curTerm=null;
        return false;
      }
    }
    curTerm=super.term();
    if (curTerm == null)     return false;
    if (stopWords == null)     break;
    if (stopWords.contains(curTerm.text()))     continue;
    if (NgramQueryRewriter.isNgram(stopWords,curTerm.text()))     continue;
  }
  nTerms++;
  if (nTerms > termLimit) {
    throw new TermLimitException(""String_Node_Str"" + getTerm().field() + ""String_Node_Str""+ termLimit+ ""String_Node_Str"");
  }
  termMap.put(curTerm);
  System.out.println(""String_Node_Str"" + curTerm);
  return true;
}","public boolean next() throws IOException {
  while (true) {
    if (first)     first=false;
 else {
      if (!super.next()) {
        curTerm=null;
        return false;
      }
    }
    curTerm=super.term();
    if (curTerm == null)     return false;
    if (stopWords == null)     break;
    if (stopWords.contains(curTerm.text()))     continue;
    if (NgramQueryRewriter.isNgram(stopWords,curTerm.text()))     continue;
    break;
  }
  nTerms++;
  if (nTerms > termLimit) {
    throw new TermLimitException(""String_Node_Str"" + getTerm().field() + ""String_Node_Str""+ termLimit+ ""String_Node_Str"");
  }
  termMap.put(curTerm);
  return true;
}",0.9535928143712576
24846,"/** 
 * Runs a full-text query (possibly constrained by a sectionType query), adding the results to one or more document hits.
 * @param textQuery             Text query to run
 * @param sectionTypeQuery      Optional sectionType query, or null
 * @param termMap               Map to add matched terms to
 * @param docHitMap             Map to add hits to
 * @param docHitQueue           Queue that maintains a ranked list of hits
 * @param maxSnippets           Max # snippets for any given document
 * @param maxContext            Target # characters for a snippet
 * @return                      A HashMap of all the text hits
 * @throws IOException          If something goes wrong reading the index
 */
private HashMap gatherTextHits(final Query textQuery,final Query sectionTypeQuery,final TermMap termMap,final HashMap docHitMap,final PriorityQueue docHitQueue,final int maxSnippets,final int maxContext) throws IOException {
}","/** 
 * Runs a full-text query (possibly constrained by a sectionType query), adding the results to one or more document hits.
 * @param textQuery             Text query to run
 * @param sectionTypeQuery      Optional sectionType query, or null
 * @param termMap               Map to add matched terms to
 * @param docHitMap             Map to add hits to
 * @param docHitQueue           Queue that maintains a ranked list of hits
 * @param maxSnippets           Max # snippets for any given document
 * @param maxContext            Target # characters for a snippet
 * @return                      A HashMap of all the text hits
 * @throws IOException          If something goes wrong reading the index
 */
private HashMap gatherTextHits(final Query textQuery,final SpanQuery sectionTypeQuery,final TermMap termMap,final HashMap docHitMap,final PriorityQueue docHitQueue,final int maxSnippets,final int maxContext) throws IOException {
}",0.997863247863248
24847,"/** 
 * Parse a 'sectionType' query element.
 */
private Query parseSectionType(Element parent) throws QueryGenException {
  Element sectionType=null;
  for (ElementIter iter=new ElementIter(parent); iter.hasNext(); ) {
    Element el=iter.next();
    if (el.getNodeName().equals(""String_Node_Str"")) {
      if (sectionType != null)       error(""String_Node_Str"");
      sectionType=el;
    }
  }
  if (sectionType == null)   return null;
  int count=0;
  Element child=null;
  for (ElementIter iter=new ElementIter(sectionType); iter.hasNext(); ) {
    child=iter.next();
    count++;
  }
  if (count != 1)   error(""String_Node_Str"" + ""String_Node_Str"");
  return parseBoolean(child,""String_Node_Str"",MODE_META,false);
}","/** 
 * Parse a 'sectionType' query element. Note that this query is parsed as a span query, because the query processing logic requires it to return documents in ascending ID order (something which the normal BooleanQuery does not do.)
 */
private SpanQuery parseSectionType(Element parent) throws QueryGenException {
  Element sectionType=null;
  for (ElementIter iter=new ElementIter(parent); iter.hasNext(); ) {
    Element el=iter.next();
    if (el.getNodeName().equals(""String_Node_Str"")) {
      if (sectionType != null)       error(""String_Node_Str"");
      sectionType=el;
    }
  }
  if (sectionType == null)   return null;
  int count=0;
  Element child=null;
  for (ElementIter iter=new ElementIter(sectionType); iter.hasNext(); ) {
    child=iter.next();
    count++;
  }
  if (count != 1)   error(""String_Node_Str"" + ""String_Node_Str"");
  return (SpanQuery)parseBoolean(child,""String_Node_Str"",MODE_TEXT,false);
}",0.8708308065494239
24848,"public boolean next() throws IOException {
  if (moreText)   moreText=textSpans.next();
  if (firstTime) {
    moreType=typeScorer.next();
    firstTime=false;
  }
  return advance();
}","public boolean next() throws IOException {
  if (moreText)   moreText=textSpans.next();
  if (firstTime) {
    moreType=typeSpans.next();
    firstTime=false;
  }
  return advance();
}",0.975609756097561
24849,"/** 
 * Construct a filtered query.
 * @param textQuery         Text query to filter
 * @param sectionTypeQuery  'sectionType' field query to filter with
 */
public SpanSectionTypeFilterQuery(SpanQuery textQuery,Query sectionTypeQuery){
  this.sectionTypeQuery=sectionTypeQuery;
  this.textQuery=textQuery;
}","/** 
 * Construct a filtered query.
 * @param textQuery         Text query to filter
 * @param sectionTypeQuery  'sectionType' field query to filter with
 */
public SpanSectionTypeFilterQuery(SpanQuery textQuery,SpanQuery sectionTypeQuery){
  this.typeQuery=sectionTypeQuery;
  this.textQuery=textQuery;
}",0.9787928221859706
24850,"public boolean skipTo(int target) throws IOException {
  moreText=textSpans.skipTo(target);
  skipType(target);
  return advance();
}","public boolean skipTo(int target) throws IOException {
  moreText=textSpans.skipTo(target);
  moreType=typeSpans.skipTo(target);
  return advance();
}",0.9187279151943464
24851,"private boolean advance() throws IOException {
  while (moreText && moreType) {
    final int textChunk=textSpans.doc();
    final int typeChunk=typeScorer.doc();
    if (textChunk < typeChunk)     moreText=textSpans.skipTo(typeChunk);
 else     if (textChunk > typeChunk)     skipType(textChunk);
 else     break;
  }
  return moreText && moreType;
}","private boolean advance() throws IOException {
  while (moreText && moreType) {
    final int textChunk=textSpans.doc();
    final int typeChunk=typeSpans.doc();
    if (textChunk < typeChunk)     moreText=textSpans.skipTo(typeChunk);
 else     if (textChunk > typeChunk)     moreType=typeSpans.skipTo(textChunk);
 else     break;
  }
  return moreText && moreType;
}",0.9415041782729804
24852,"/** 
 * Iterate all the spans from the text query that match the sectionType query also.
 */
public Spans getSpans(final IndexReader reader,final Searcher searcher) throws IOException {
  return new Spans(){
    private Weight typeWeight=sectionTypeQuery.weight(searcher);
    private Scorer typeScorer=typeWeight.scorer(reader);
    private boolean moreType=true;
    private boolean typeCanSkip=true;
    private Spans textSpans=textQuery.getSpans(reader,searcher);
    private boolean moreText=true;
    private boolean firstTime=true;
    public boolean next() throws IOException {
      if (moreText)       moreText=textSpans.next();
      if (firstTime) {
        moreType=typeScorer.next();
        firstTime=false;
      }
      return advance();
    }
    public boolean skipTo(    int target) throws IOException {
      moreText=textSpans.skipTo(target);
      skipType(target);
      return advance();
    }
    private void skipType(    int target) throws IOException {
      if (typeCanSkip) {
        try {
          moreType=typeScorer.skipTo(target);
        }
 catch (        UnsupportedOperationException e) {
          typeCanSkip=false;
        }
      }
      if (!typeCanSkip) {
        while (moreType && typeScorer.doc() < target)         moreType=typeScorer.next();
      }
    }
    private boolean advance() throws IOException {
      while (moreText && moreType) {
        final int textChunk=textSpans.doc();
        final int typeChunk=typeScorer.doc();
        if (textChunk < typeChunk)         moreText=textSpans.skipTo(typeChunk);
 else         if (textChunk > typeChunk)         skipType(textChunk);
 else         break;
      }
      return moreText && moreType;
    }
    public int doc(){
      return textSpans.doc();
    }
    public int start(){
      return textSpans.start();
    }
    public int end(){
      return textSpans.end();
    }
    public float score(){
      return textSpans.score();
    }
    public int coordBits(){
      return textSpans.coordBits();
    }
    public Collection allTerms(){
      return textSpans.allTerms();
    }
    public String toString(){
      return textSpans.toString();
    }
  }
;
}","/** 
 * Iterate all the spans from the text query that match the sectionType query also.
 */
public Spans getSpans(final IndexReader reader,final Searcher searcher) throws IOException {
  return new Spans(){
    private Spans typeSpans=typeQuery.getSpans(reader,searcher);
    private boolean moreType=true;
    private Spans textSpans=textQuery.getSpans(reader,searcher);
    private boolean moreText=true;
    private boolean firstTime=true;
    public boolean next() throws IOException {
      if (moreText)       moreText=textSpans.next();
      if (firstTime) {
        moreType=typeSpans.next();
        firstTime=false;
      }
      return advance();
    }
    public boolean skipTo(    int target) throws IOException {
      moreText=textSpans.skipTo(target);
      moreType=typeSpans.skipTo(target);
      return advance();
    }
    private boolean advance() throws IOException {
      while (moreText && moreType) {
        final int textChunk=textSpans.doc();
        final int typeChunk=typeSpans.doc();
        if (textChunk < typeChunk)         moreText=textSpans.skipTo(typeChunk);
 else         if (textChunk > typeChunk)         moreType=typeSpans.skipTo(textChunk);
 else         break;
      }
      return moreText && moreType;
    }
    public int doc(){
      return textSpans.doc();
    }
    public int start(){
      return textSpans.start();
    }
    public int end(){
      return textSpans.end();
    }
    public float score(){
      return textSpans.score();
    }
    public int coordBits(){
      return textSpans.coordBits();
    }
    public Collection allTerms(){
      return textSpans.allTerms();
    }
    public String toString(){
      return textSpans.toString();
    }
  }
;
}",0.6774608069904908
24853,"private String inverseEventProvenancesToString(final EntityInverseEventArgumentAssertion assertion){
  final List<String> parts=new ArrayList<>();
  parts.add(spansToString(assertion.predicateJustification()));
  parts.add(spanToString(assertion.baseFiller()));
  parts.add(spansToString(assertion.predicateJustification()));
  return Joiner.on(""String_Node_Str"").join(parts);
}","private String inverseEventProvenancesToString(final EntityInverseEventArgumentAssertion assertion){
  final List<String> parts=new ArrayList<>();
  parts.add(spansToString(assertion.predicateJustification()));
  parts.add(spanToString(assertion.baseFiller()));
  if (!assertion.additionalJustifications().isEmpty()) {
    parts.add(spansToString(assertion.additionalJustifications()));
  }
 else {
    parts.add(""String_Node_Str"");
  }
  return Joiner.on(""String_Node_Str"").join(parts);
}",0.7197231833910035
24854,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}",0.946236559139785
24855,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}","@Value.Derived @Override public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}",0.946236559139785
24856,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.of(subject(),argument().asNode());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.of(subject(),argument().asNode());
}",0.9532710280373832
24857,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}",0.946236559139785
24858,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}",0.946236559139785
24859,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}",0.946236559139785
24860,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}",0.946236559139785
24861,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}",0.946236559139785
24862,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}",0.946236559139785
24863,public abstract EntityNode subject();,@Override public abstract EntityNode subject();,0.8809523809523809
24864,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.of(subject(),object().asNode());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.of(subject(),object().asNode());
}",0.9523809523809524
24865,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.of(subject(),object().asNode());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.of(subject(),object().asNode());
}",0.9523809523809524
24866,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject(),object());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject(),object());
}",0.9509803921568628
24867,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}",0.946236559139785
24868,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.<Node>of(subject());
}",0.946236559139785
24869,"@Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.of(subject());
}","@Override @Value.Derived public Set<Node> allNodes(){
  return ImmutableSet.of(subject());
}",0.942528735632184
24870,public abstract Symbol docID();,@Override public abstract Symbol docID();,0.8611111111111112
24871,public abstract Symbol eventArgumentType();,@Override public abstract Symbol eventArgumentType();,0.8958333333333334
24872,public abstract Symbol eventType();,@Override public abstract Symbol eventType();,0.875
24873,"@Override public BootstrapInspector.ObservationSummarizer<EvalPair<DocLevelArgLinking,DocLevelArgLinking>,DocLevelLinkingScoring> createObservationSummarizer(){
  return new BootstrapInspector.ObservationSummarizer<EvalPair<DocLevelArgLinking,DocLevelArgLinking>,DocLevelLinkingScoring>(){
    @Override public DocLevelLinkingScoring summarizeObservation(    final EvalPair<DocLevelArgLinking,DocLevelArgLinking> item){
      final Symbol keyDocId=item.key().docID();
      final Symbol testDocId=item.test().docID();
      checkArgument(ImmutableSet.copyOf(concat(item.key())).containsAll(ImmutableSet.copyOf(concat(item.test()))),""String_Node_Str"");
      if (!keyDocId.equalTo(testDocId)) {
        log.warn(""String_Node_Str"",keyDocId,testDocId);
      }
      final LinkingScoreDocRecord.Builder linkingScoreDocRecordB=new LinkingScoreDocRecord.Builder();
      final ImmutableMap.Builder<Symbol,LinkingScoreDocRecord> recordsPerEventB=ImmutableMap.builder();
      final ExplicitFMeasureInfo counts=LinkF1.create().score(item.test(),item.key());
      final File docOutput=new File(outputDir,keyDocId.asString());
      docOutput.mkdirs();
      final PrintWriter outputWriter;
      try {
        outputWriter=new PrintWriter(new File(docOutput,""String_Node_Str""));
        outputWriter.println(counts.toString());
        outputWriter.close();
      }
 catch (      FileNotFoundException e) {
        throw new TACKBPEALException(e);
      }
      final ImmutableSet<DocLevelEventArg> args=ImmutableSet.copyOf(concat(transform(concat(item.test().eventFrames(),item.key().eventFrames()),ScoringEventFrameFunctions.arguments())));
      linkingScoreDocRecordB.fMeasureInfo(counts).predictedCounts(ImmutableSet.copyOf(concat(item.test().eventFrames())).size()).actualCounts(ImmutableSet.copyOf(concat(item.key().eventFrames())).size()).linkingArgCounts(args.size());
      final ImmutableSet<Symbol> eventTypes=FluentIterable.from(item.test().eventFrames()).append(item.key().eventFrames()).transform(ScoringEventFrameFunctions.eventType()).toSet();
      for (      final Symbol eventType : eventTypes) {
        final Predicate<DocLevelEventArg> argPred=Predicates.compose(Predicates.equalTo(eventType),DocLevelEventArgFunctions.eventType());
        DocLevelArgLinking filteredKey=item.key().filterArguments(argPred);
        DocLevelArgLinking filteredTest=item.test().filterArguments(argPred);
        final ExplicitFMeasureInfo countsForEventType=LinkF1.create().score(filteredTest,filteredKey);
        final ImmutableSet<DocLevelEventArg> argsForEventType=ImmutableSet.copyOf(concat(transform(concat(filteredTest.eventFrames(),filteredKey.eventFrames()),ScoringEventFrameFunctions.arguments())));
        final LinkingScoreDocRecord recordForEventType=new LinkingScoreDocRecord.Builder().fMeasureInfo(countsForEventType).predictedCounts(ImmutableSet.copyOf(concat(filteredTest.eventFrames())).size()).actualCounts(ImmutableSet.copyOf(concat(filteredKey.eventFrames())).size()).linkingArgCounts(argsForEventType.size()).build();
        recordsPerEventB.put(eventType,recordForEventType);
      }
      return new DocLevelLinkingScoring.Builder().linkingScoreDocRecord(linkingScoreDocRecordB.build()).docRecordsPerEventType(recordsPerEventB.build()).build();
    }
  }
;
}","@Override public BootstrapInspector.ObservationSummarizer<EvalPair<DocLevelArgLinking,DocLevelArgLinking>,DocLevelLinkingScoring> createObservationSummarizer(){
  return new BootstrapInspector.ObservationSummarizer<EvalPair<DocLevelArgLinking,DocLevelArgLinking>,DocLevelLinkingScoring>(){
    @Override public DocLevelLinkingScoring summarizeObservation(    final EvalPair<DocLevelArgLinking,DocLevelArgLinking> item){
      final Symbol keyDocId=item.key().docID();
      final Symbol testDocId=item.test().docID();
      checkArgument(ImmutableSet.copyOf(concat(item.key())).containsAll(ImmutableSet.copyOf(concat(item.test()))),""String_Node_Str"");
      if (!keyDocId.equalTo(testDocId)) {
        log.warn(""String_Node_Str"",keyDocId,testDocId);
      }
      final LinkingScoreDocRecord.Builder linkingScoreDocRecordB=new LinkingScoreDocRecord.Builder();
      final ImmutableMap.Builder<Symbol,LinkingScoreDocRecord> recordsPerEventB=ImmutableMap.builder();
      final ExplicitFMeasureInfo counts=LinkF1.create().score(item.test(),item.key());
      final File docOutput=new File(outputDir,keyDocId.asString());
      docOutput.mkdirs();
      final PrintWriter outputWriter;
      try {
        Files.asCharSink(new File(docOutput,""String_Node_Str""),Charsets.UTF_8).write(counts.toString());
      }
 catch (      IOException e) {
        throw new TACKBPEALException(e);
      }
      final ImmutableSet<DocLevelEventArg> args=ImmutableSet.copyOf(concat(transform(concat(item.test().eventFrames(),item.key().eventFrames()),ScoringEventFrameFunctions.arguments())));
      linkingScoreDocRecordB.fMeasureInfo(counts).predictedCounts(ImmutableSet.copyOf(concat(item.test().eventFrames())).size()).actualCounts(ImmutableSet.copyOf(concat(item.key().eventFrames())).size()).linkingArgCounts(args.size());
      final ImmutableSet<Symbol> eventTypes=FluentIterable.from(item.test().eventFrames()).append(item.key().eventFrames()).transform(ScoringEventFrameFunctions.eventType()).toSet();
      for (      final Symbol eventType : eventTypes) {
        final Predicate<DocLevelEventArg> argPred=Predicates.compose(Predicates.equalTo(eventType),DocLevelEventArgFunctions.eventType());
        DocLevelArgLinking filteredKey=item.key().filterArguments(argPred);
        DocLevelArgLinking filteredTest=item.test().filterArguments(argPred);
        final ExplicitFMeasureInfo countsForEventType=LinkF1.create().score(filteredTest,filteredKey);
        final ImmutableSet<DocLevelEventArg> argsForEventType=ImmutableSet.copyOf(concat(transform(concat(filteredTest.eventFrames(),filteredKey.eventFrames()),ScoringEventFrameFunctions.arguments())));
        final LinkingScoreDocRecord recordForEventType=new LinkingScoreDocRecord.Builder().fMeasureInfo(countsForEventType).predictedCounts(ImmutableSet.copyOf(concat(filteredTest.eventFrames())).size()).actualCounts(ImmutableSet.copyOf(concat(filteredKey.eventFrames())).size()).linkingArgCounts(argsForEventType.size()).build();
        recordsPerEventB.put(eventType,recordForEventType);
      }
      return new DocLevelLinkingScoring.Builder().linkingScoreDocRecord(linkingScoreDocRecordB.build()).docRecordsPerEventType(recordsPerEventB.build()).build();
    }
  }
;
}",0.9727901614142968
24874,"@Override public Collection<BootstrapInspector.SummaryAggregator<DocLevelLinkingScoring>> createSummaryAggregators(){
  return ImmutableList.<BootstrapInspector.SummaryAggregator<DocLevelLinkingScoring>>of(new BootstrapInspector.SummaryAggregator<DocLevelLinkingScoring>(){
    private final ImmutableList.Builder<AggregateLinkingScoreRecord> aggregateRecordsB=ImmutableList.builder();
    private final ImmutableListMultimap.Builder<Symbol,AggregateLinkingScoreRecord> aggregateRecordsPerEventTypeB=ImmutableListMultimap.builder();
    private static final String F1=""String_Node_Str"";
    private static final String PRECISION=""String_Node_Str"";
    private static final String RECALL=""String_Node_Str"";
    private final BootstrapWriter writer=new BootstrapWriter.Builder().measures(ImmutableList.of(F1,PRECISION,RECALL)).percentilesToPrint(ImmutableList.of(0.005,0.025,0.05,0.25,0.5,0.75,0.95,0.975,0.995)).percentileComputer(PercentileComputer.nistPercentileComputer()).build();
    @Override public void observeSample(    final Collection<DocLevelLinkingScoring> collection){
      final ImmutableList.Builder<LinkingScoreDocRecord> docRecordsB=ImmutableList.builder();
      for (      final DocLevelLinkingScoring linkingScoring : collection) {
        docRecordsB.add(linkingScoring.linkingScoreDocRecord());
      }
      aggregateRecordsB.add(aggregateScores(docRecordsB.build()));
      final ImmutableSet.Builder<Symbol> eventTypesB=ImmutableSet.builder();
      for (      final DocLevelLinkingScoring linkingScoring : collection) {
        eventTypesB.addAll(linkingScoring.docRecordsPerEventType().keySet());
      }
      final ImmutableSet<Symbol> eventTypes=eventTypesB.build();
      for (      final Symbol eventType : eventTypes) {
        final ImmutableList.Builder<LinkingScoreDocRecord> docRecordsForEventB=ImmutableList.builder();
        for (        final DocLevelLinkingScoring linkingScoring : collection) {
          if (linkingScoring.docRecordsPerEventType().containsKey(eventType)) {
            docRecordsForEventB.add(linkingScoring.docRecordsPerEventType().get(eventType));
          }
        }
        aggregateRecordsPerEventTypeB.put(eventType,aggregateScores(docRecordsForEventB.build()));
      }
    }
    public void finish() throws IOException {
      final ImmutableList<AggregateLinkingScoreRecord> aggregateRecords=aggregateRecordsB.build();
      writer.writeBootstrapData(""String_Node_Str"",mapScoresForWriter(aggregateRecords),new File(outputDir,""String_Node_Str""));
      final ImmutableListMultimap<Symbol,AggregateLinkingScoreRecord> aggregateRecordsPerEvent=aggregateRecordsPerEventTypeB.build();
      for (      Symbol eventType : aggregateRecordsPerEvent.keySet()) {
        final ImmutableList<AggregateLinkingScoreRecord> aggregateRecordsForEvent=aggregateRecordsPerEvent.get(eventType);
        writer.writeBootstrapData(""String_Node_Str"",mapScoresForWriter(aggregateRecordsForEvent),new File(new File(outputDir,""String_Node_Str""),eventType.asString()));
      }
    }
    private ImmutableMap<String,ImmutableListMultimap<String,Double>> mapScoresForWriter(    ImmutableList<AggregateLinkingScoreRecord> aggregateRecords){
      return ImmutableMap.of(F1,Multimaps.index(transform(aggregateRecords,AggregateLinkingScoreRecordFunctions.f1()),constant(""String_Node_Str"")),PRECISION,Multimaps.index(transform(aggregateRecords,AggregateLinkingScoreRecordFunctions.precision()),constant(""String_Node_Str"")),RECALL,Multimaps.index(transform(aggregateRecords,AggregateLinkingScoreRecordFunctions.recall()),constant(""String_Node_Str"")));
    }
    private AggregateLinkingScoreRecord aggregateScores(    ImmutableList<LinkingScoreDocRecord> docRecords){
      double precision=0.0;
      double recall=0.0;
      double f1=0.0;
      double linkNormalizerSum=0.0;
      for (      final LinkingScoreDocRecord docRecord : docRecords) {
        precision+=docRecord.fMeasureInfo().precision() * docRecord.predictedCounts();
        recall+=docRecord.fMeasureInfo().recall() * docRecord.actualCounts();
        f1+=docRecord.fMeasureInfo().f1() * docRecord.actualCounts();
        linkNormalizerSum+=docRecord.linkingArgCounts();
      }
      f1=(linkNormalizerSum > 0.0) ? f1 / linkNormalizerSum : 0.0;
      precision=(linkNormalizerSum > 0.0) ? precision / linkNormalizerSum : 0.0;
      recall=(linkNormalizerSum > 0.0) ? recall / linkNormalizerSum : 0.0;
      return new AggregateLinkingScoreRecord.Builder().f1(f1).precision(precision).recall(recall).build();
    }
  }
);
}","@Override public Collection<BootstrapInspector.SummaryAggregator<DocLevelLinkingScoring>> createSummaryAggregators(){
  return ImmutableList.<BootstrapInspector.SummaryAggregator<DocLevelLinkingScoring>>of(new BootstrapInspector.SummaryAggregator<DocLevelLinkingScoring>(){
    private final ImmutableList.Builder<AggregateLinkingScoreRecord> aggregateRecordsB=ImmutableList.builder();
    private final ImmutableListMultimap.Builder<Symbol,AggregateLinkingScoreRecord> aggregateRecordsPerEventTypeB=ImmutableListMultimap.builder();
    private static final String F1=""String_Node_Str"";
    private static final String PRECISION=""String_Node_Str"";
    private static final String RECALL=""String_Node_Str"";
    private final BootstrapWriter writer=new BootstrapWriter.Builder().measures(ImmutableList.of(F1,PRECISION,RECALL)).percentilesToPrint(ImmutableList.of(0.005,0.025,0.05,0.25,0.5,0.75,0.95,0.975,0.995)).percentileComputer(PercentileComputer.nistPercentileComputer()).build();
    @Override public void observeSample(    final Collection<DocLevelLinkingScoring> collection){
      final ImmutableList.Builder<LinkingScoreDocRecord> docRecordsB=ImmutableList.builder();
      for (      final DocLevelLinkingScoring linkingScoring : collection) {
        docRecordsB.add(linkingScoring.linkingScoreDocRecord());
      }
      aggregateRecordsB.add(aggregateScores(docRecordsB.build()));
      final ImmutableSet.Builder<Symbol> eventTypesB=ImmutableSet.builder();
      for (      final DocLevelLinkingScoring linkingScoring : collection) {
        eventTypesB.addAll(linkingScoring.docRecordsPerEventType().keySet());
      }
      final ImmutableSet<Symbol> eventTypes=eventTypesB.build();
      for (      final Symbol eventType : eventTypes) {
        final ImmutableList.Builder<LinkingScoreDocRecord> docRecordsForEventB=ImmutableList.builder();
        for (        final DocLevelLinkingScoring linkingScoring : collection) {
          if (linkingScoring.docRecordsPerEventType().containsKey(eventType)) {
            docRecordsForEventB.add(linkingScoring.docRecordsPerEventType().get(eventType));
          }
        }
        aggregateRecordsPerEventTypeB.put(eventType,aggregateScores(docRecordsForEventB.build()));
      }
    }
    @Override public void finish() throws IOException {
      final ImmutableList<AggregateLinkingScoreRecord> aggregateRecords=aggregateRecordsB.build();
      writer.writeBootstrapData(""String_Node_Str"",mapScoresForWriter(aggregateRecords),new File(outputDir,""String_Node_Str""));
      final ImmutableListMultimap<Symbol,AggregateLinkingScoreRecord> aggregateRecordsPerEvent=aggregateRecordsPerEventTypeB.build();
      for (      Symbol eventType : aggregateRecordsPerEvent.keySet()) {
        final ImmutableList<AggregateLinkingScoreRecord> aggregateRecordsForEvent=aggregateRecordsPerEvent.get(eventType);
        writer.writeBootstrapData(""String_Node_Str"",mapScoresForWriter(aggregateRecordsForEvent),new File(new File(outputDir,""String_Node_Str""),eventType.asString()));
      }
    }
    private ImmutableMap<String,ImmutableListMultimap<String,Double>> mapScoresForWriter(    ImmutableList<AggregateLinkingScoreRecord> aggregateRecords){
      return ImmutableMap.of(F1,Multimaps.index(transform(aggregateRecords,AggregateLinkingScoreRecordFunctions.f1()),constant(""String_Node_Str"")),PRECISION,Multimaps.index(transform(aggregateRecords,AggregateLinkingScoreRecordFunctions.precision()),constant(""String_Node_Str"")),RECALL,Multimaps.index(transform(aggregateRecords,AggregateLinkingScoreRecordFunctions.recall()),constant(""String_Node_Str"")));
    }
    private AggregateLinkingScoreRecord aggregateScores(    ImmutableList<LinkingScoreDocRecord> docRecords){
      double precision=0.0;
      double recall=0.0;
      double f1=0.0;
      double linkNormalizerSum=0.0;
      for (      final LinkingScoreDocRecord docRecord : docRecords) {
        precision+=docRecord.fMeasureInfo().precision() * docRecord.predictedCounts();
        recall+=docRecord.fMeasureInfo().recall() * docRecord.actualCounts();
        f1+=docRecord.fMeasureInfo().f1() * docRecord.actualCounts();
        linkNormalizerSum+=docRecord.linkingArgCounts();
      }
      f1=(linkNormalizerSum > 0.0) ? f1 / linkNormalizerSum : 0.0;
      precision=(linkNormalizerSum > 0.0) ? precision / linkNormalizerSum : 0.0;
      recall=(linkNormalizerSum > 0.0) ? recall / linkNormalizerSum : 0.0;
      return new AggregateLinkingScoreRecord.Builder().f1(f1).precision(precision).recall(recall).build();
    }
  }
);
}",0.998898435778806
24875,"public void finish() throws IOException {
  final ImmutableList<AggregateLinkingScoreRecord> aggregateRecords=aggregateRecordsB.build();
  writer.writeBootstrapData(""String_Node_Str"",mapScoresForWriter(aggregateRecords),new File(outputDir,""String_Node_Str""));
  final ImmutableListMultimap<Symbol,AggregateLinkingScoreRecord> aggregateRecordsPerEvent=aggregateRecordsPerEventTypeB.build();
  for (  Symbol eventType : aggregateRecordsPerEvent.keySet()) {
    final ImmutableList<AggregateLinkingScoreRecord> aggregateRecordsForEvent=aggregateRecordsPerEvent.get(eventType);
    writer.writeBootstrapData(""String_Node_Str"",mapScoresForWriter(aggregateRecordsForEvent),new File(new File(outputDir,""String_Node_Str""),eventType.asString()));
  }
}","@Override public void finish() throws IOException {
  final ImmutableList<AggregateLinkingScoreRecord> aggregateRecords=aggregateRecordsB.build();
  writer.writeBootstrapData(""String_Node_Str"",mapScoresForWriter(aggregateRecords),new File(outputDir,""String_Node_Str""));
  final ImmutableListMultimap<Symbol,AggregateLinkingScoreRecord> aggregateRecordsPerEvent=aggregateRecordsPerEventTypeB.build();
  for (  Symbol eventType : aggregateRecordsPerEvent.keySet()) {
    final ImmutableList<AggregateLinkingScoreRecord> aggregateRecordsForEvent=aggregateRecordsPerEvent.get(eventType);
    writer.writeBootstrapData(""String_Node_Str"",mapScoresForWriter(aggregateRecordsForEvent),new File(new File(outputDir,""String_Node_Str""),eventType.asString()));
  }
}",0.9933155080213903
24876,"@Override public DocLevelLinkingScoring summarizeObservation(final EvalPair<DocLevelArgLinking,DocLevelArgLinking> item){
  final Symbol keyDocId=item.key().docID();
  final Symbol testDocId=item.test().docID();
  checkArgument(ImmutableSet.copyOf(concat(item.key())).containsAll(ImmutableSet.copyOf(concat(item.test()))),""String_Node_Str"");
  if (!keyDocId.equalTo(testDocId)) {
    log.warn(""String_Node_Str"",keyDocId,testDocId);
  }
  final LinkingScoreDocRecord.Builder linkingScoreDocRecordB=new LinkingScoreDocRecord.Builder();
  final ImmutableMap.Builder<Symbol,LinkingScoreDocRecord> recordsPerEventB=ImmutableMap.builder();
  final ExplicitFMeasureInfo counts=LinkF1.create().score(item.test(),item.key());
  final File docOutput=new File(outputDir,keyDocId.asString());
  docOutput.mkdirs();
  final PrintWriter outputWriter;
  try {
    outputWriter=new PrintWriter(new File(docOutput,""String_Node_Str""));
    outputWriter.println(counts.toString());
    outputWriter.close();
  }
 catch (  FileNotFoundException e) {
    throw new TACKBPEALException(e);
  }
  final ImmutableSet<DocLevelEventArg> args=ImmutableSet.copyOf(concat(transform(concat(item.test().eventFrames(),item.key().eventFrames()),ScoringEventFrameFunctions.arguments())));
  linkingScoreDocRecordB.fMeasureInfo(counts).predictedCounts(ImmutableSet.copyOf(concat(item.test().eventFrames())).size()).actualCounts(ImmutableSet.copyOf(concat(item.key().eventFrames())).size()).linkingArgCounts(args.size());
  final ImmutableSet<Symbol> eventTypes=FluentIterable.from(item.test().eventFrames()).append(item.key().eventFrames()).transform(ScoringEventFrameFunctions.eventType()).toSet();
  for (  final Symbol eventType : eventTypes) {
    final Predicate<DocLevelEventArg> argPred=Predicates.compose(Predicates.equalTo(eventType),DocLevelEventArgFunctions.eventType());
    DocLevelArgLinking filteredKey=item.key().filterArguments(argPred);
    DocLevelArgLinking filteredTest=item.test().filterArguments(argPred);
    final ExplicitFMeasureInfo countsForEventType=LinkF1.create().score(filteredTest,filteredKey);
    final ImmutableSet<DocLevelEventArg> argsForEventType=ImmutableSet.copyOf(concat(transform(concat(filteredTest.eventFrames(),filteredKey.eventFrames()),ScoringEventFrameFunctions.arguments())));
    final LinkingScoreDocRecord recordForEventType=new LinkingScoreDocRecord.Builder().fMeasureInfo(countsForEventType).predictedCounts(ImmutableSet.copyOf(concat(filteredTest.eventFrames())).size()).actualCounts(ImmutableSet.copyOf(concat(filteredKey.eventFrames())).size()).linkingArgCounts(argsForEventType.size()).build();
    recordsPerEventB.put(eventType,recordForEventType);
  }
  return new DocLevelLinkingScoring.Builder().linkingScoreDocRecord(linkingScoreDocRecordB.build()).docRecordsPerEventType(recordsPerEventB.build()).build();
}","@Override public DocLevelLinkingScoring summarizeObservation(final EvalPair<DocLevelArgLinking,DocLevelArgLinking> item){
  final Symbol keyDocId=item.key().docID();
  final Symbol testDocId=item.test().docID();
  checkArgument(ImmutableSet.copyOf(concat(item.key())).containsAll(ImmutableSet.copyOf(concat(item.test()))),""String_Node_Str"");
  if (!keyDocId.equalTo(testDocId)) {
    log.warn(""String_Node_Str"",keyDocId,testDocId);
  }
  final LinkingScoreDocRecord.Builder linkingScoreDocRecordB=new LinkingScoreDocRecord.Builder();
  final ImmutableMap.Builder<Symbol,LinkingScoreDocRecord> recordsPerEventB=ImmutableMap.builder();
  final ExplicitFMeasureInfo counts=LinkF1.create().score(item.test(),item.key());
  final File docOutput=new File(outputDir,keyDocId.asString());
  docOutput.mkdirs();
  final PrintWriter outputWriter;
  try {
    Files.asCharSink(new File(docOutput,""String_Node_Str""),Charsets.UTF_8).write(counts.toString());
  }
 catch (  IOException e) {
    throw new TACKBPEALException(e);
  }
  final ImmutableSet<DocLevelEventArg> args=ImmutableSet.copyOf(concat(transform(concat(item.test().eventFrames(),item.key().eventFrames()),ScoringEventFrameFunctions.arguments())));
  linkingScoreDocRecordB.fMeasureInfo(counts).predictedCounts(ImmutableSet.copyOf(concat(item.test().eventFrames())).size()).actualCounts(ImmutableSet.copyOf(concat(item.key().eventFrames())).size()).linkingArgCounts(args.size());
  final ImmutableSet<Symbol> eventTypes=FluentIterable.from(item.test().eventFrames()).append(item.key().eventFrames()).transform(ScoringEventFrameFunctions.eventType()).toSet();
  for (  final Symbol eventType : eventTypes) {
    final Predicate<DocLevelEventArg> argPred=Predicates.compose(Predicates.equalTo(eventType),DocLevelEventArgFunctions.eventType());
    DocLevelArgLinking filteredKey=item.key().filterArguments(argPred);
    DocLevelArgLinking filteredTest=item.test().filterArguments(argPred);
    final ExplicitFMeasureInfo countsForEventType=LinkF1.create().score(filteredTest,filteredKey);
    final ImmutableSet<DocLevelEventArg> argsForEventType=ImmutableSet.copyOf(concat(transform(concat(filteredTest.eventFrames(),filteredKey.eventFrames()),ScoringEventFrameFunctions.arguments())));
    final LinkingScoreDocRecord recordForEventType=new LinkingScoreDocRecord.Builder().fMeasureInfo(countsForEventType).predictedCounts(ImmutableSet.copyOf(concat(filteredTest.eventFrames())).size()).actualCounts(ImmutableSet.copyOf(concat(filteredKey.eventFrames())).size()).linkingArgCounts(argsForEventType.size()).build();
    recordsPerEventB.put(eventType,recordForEventType);
  }
  return new DocLevelLinkingScoring.Builder().linkingScoreDocRecord(linkingScoreDocRecordB.build()).docRecordsPerEventType(recordsPerEventB.build()).build();
}",0.9699341754136276
24877,"private static void argScoringSetup(final InspectorTreeNode<EvalPair<ImmutableSet<DocLevelEventArg>,ImmutableSet<DocLevelEventArg>>> inputAsSetsOfScoringTuples,final Iterable<? extends ScoringEventObserver<DocLevelEventArg,DocLevelEventArg>> scoringEventObservers,final File outputDir){
  final InspectorTreeNode<ProvenancedAlignment<DocLevelEventArg,DocLevelEventArg,DocLevelEventArg,DocLevelEventArg>> alignmentNode=transformed(inputAsSetsOfScoringTuples,EXACT_MATCH_ALIGNER);
  final AggregateBinaryFScoresInspector<DocLevelEventArg,DocLevelEventArg> scoreAndWriteOverallFScore=AggregateBinaryFScoresInspector.createWithScoringObservers(""String_Node_Str"",outputDir,scoringEventObservers);
  inspect(alignmentNode).with(scoreAndWriteOverallFScore);
  final BinaryConfusionMatrixBootstrapStrategy<HasEventType> perEventBootstrapStrategy=BinaryConfusionMatrixBootstrapStrategy.create(HasEventType.ExtractFunction.INSTANCE,ImmutableSet.of(BrokenDownFMeasureAggregator.create(""String_Node_Str"",new File(outputDir,""String_Node_Str""))));
  final BootstrapInspector breakdownScoresByEventTypeWithBootstrapping=BootstrapInspector.forStrategy(perEventBootstrapStrategy,1000,new Random(0));
  inspect(alignmentNode).with(breakdownScoresByEventTypeWithBootstrapping);
  final BinaryConfusionMatrixBootstrapStrategy<DocLevelEventArg> typeRoleBootstrapStrategy=BinaryConfusionMatrixBootstrapStrategy.create(DocLevelEventArg.TypeRoleFunction.INSTANCE,ImmutableSet.of(BrokenDownFMeasureAggregator.create(""String_Node_Str"",new File(outputDir,""String_Node_Str""))));
  final BootstrapInspector breakdownScoresByEventTypeRoleWithBootstrapping=BootstrapInspector.forStrategy(typeRoleBootstrapStrategy,1000,new Random(0));
  inspect(alignmentNode).with(breakdownScoresByEventTypeRoleWithBootstrapping);
  final BinaryConfusionMatrixBootstrapStrategy<DocLevelEventArg> mentionTypeBootstrapStrategy=BinaryConfusionMatrixBootstrapStrategy.create(ExtractMentionType.INSTANCE,ImmutableSet.of(BrokenDownFMeasureAggregator.create(""String_Node_Str"",new File(outputDir,""String_Node_Str""))));
  final BootstrapInspector breakdownScoresByMentionTypeWithBootstrapping=BootstrapInspector.forStrategy(mentionTypeBootstrapStrategy,1000,new Random(0));
  inspect(alignmentNode).with(breakdownScoresByMentionTypeWithBootstrapping);
  final ArgumentScoringInspector argScorer=ArgumentScoringInspector.createOutputtingTo(outputDir);
  inspect(alignmentNode).with(argScorer);
  final BinaryConfusionMatrixBootstrapStrategy<HasEventType> argScoreBootstrapStrategy=BinaryConfusionMatrixBootstrapStrategy.create(Functions.constant(""String_Node_Str""),ImmutableSet.of(new BrokenDownLinearScoreAggregator.Builder().name(""String_Node_Str"").outputDir(new File(outputDir,""String_Node_Str"")).alpha(0.25).build()));
  final BootstrapInspector argScoreWithBootstrapping=BootstrapInspector.forStrategy(argScoreBootstrapStrategy,1000,new Random(0));
  inspect(alignmentNode).with(argScoreWithBootstrapping);
  final BinaryConfusionMatrixBootstrapStrategy<HasEventType> argScoreByTypeGroupBootstrapStrategy=BinaryConfusionMatrixBootstrapStrategy.create(By2016TypeGroup.INSTANCE,ImmutableSet.of(new BrokenDownLinearScoreAggregator.Builder().name(""String_Node_Str"").outputDir(new File(outputDir,""String_Node_Str"")).alpha(0.25).build()));
  final BootstrapInspector argScoreByTypeWithBootstrapping=BootstrapInspector.forStrategy(argScoreByTypeGroupBootstrapStrategy,1000,new Random(0));
  inspect(alignmentNode).with(argScoreByTypeWithBootstrapping);
  final BinaryErrorLogger<HasDocID,HasDocID> logWrongAnswers=BinaryErrorLogger.forStringifierAndOutputDir(Functions.<HasDocID>toStringFunction(),outputDir);
  inspect(alignmentNode).with(logWrongAnswers);
}","private static void argScoringSetup(final InspectorTreeNode<EvalPair<ImmutableSet<DocLevelEventArg>,ImmutableSet<DocLevelEventArg>>> inputAsSetsOfScoringTuples,final Iterable<? extends ScoringEventObserver<DocLevelEventArg,DocLevelEventArg>> scoringEventObservers,final File outputDir){
  final InspectorTreeNode<ProvenancedAlignment<DocLevelEventArg,DocLevelEventArg,DocLevelEventArg,DocLevelEventArg>> alignmentNode=transformed(inputAsSetsOfScoringTuples,EXACT_MATCH_ALIGNER);
  final AggregateBinaryFScoresInspector<DocLevelEventArg,DocLevelEventArg> scoreAndWriteOverallFScore=AggregateBinaryFScoresInspector.createWithScoringObservers(""String_Node_Str"",outputDir,scoringEventObservers);
  inspect(alignmentNode).with(scoreAndWriteOverallFScore);
  final BinaryConfusionMatrixBootstrapStrategy<HasEventType> perEventBootstrapStrategy=BinaryConfusionMatrixBootstrapStrategy.create(HasEventType.ExtractFunction.INSTANCE,ImmutableSet.of(BrokenDownFMeasureAggregator.create(""String_Node_Str"",new File(outputDir,""String_Node_Str""))));
  final BootstrapInspector breakdownScoresByEventTypeWithBootstrapping=BootstrapInspector.forStrategy(perEventBootstrapStrategy,1000,new Random(0));
  inspect(alignmentNode).with(breakdownScoresByEventTypeWithBootstrapping);
  final BinaryConfusionMatrixBootstrapStrategy<DocLevelEventArg> typeRoleBootstrapStrategy=BinaryConfusionMatrixBootstrapStrategy.create(DocLevelEventArg.TypeRoleFunction.INSTANCE,ImmutableSet.of(BrokenDownFMeasureAggregator.create(""String_Node_Str"",new File(outputDir,""String_Node_Str""))));
  final BootstrapInspector breakdownScoresByEventTypeRoleWithBootstrapping=BootstrapInspector.forStrategy(typeRoleBootstrapStrategy,1000,new Random(0));
  inspect(alignmentNode).with(breakdownScoresByEventTypeRoleWithBootstrapping);
  final BinaryConfusionMatrixBootstrapStrategy<DocLevelEventArg> mentionTypeBootstrapStrategy=BinaryConfusionMatrixBootstrapStrategy.create(ExtractMentionType.INSTANCE,ImmutableSet.of(BrokenDownFMeasureAggregator.create(""String_Node_Str"",new File(outputDir,""String_Node_Str""))));
  final BootstrapInspector breakdownScoresByMentionTypeWithBootstrapping=BootstrapInspector.forStrategy(mentionTypeBootstrapStrategy,1000,new Random(0));
  inspect(alignmentNode).with(breakdownScoresByMentionTypeWithBootstrapping);
  final ArgumentScoringInspector argScorer=ArgumentScoringInspector.createOutputtingTo(outputDir);
  inspect(alignmentNode).with(argScorer);
  final BinaryConfusionMatrixBootstrapStrategy<HasEventType> argScoreBootstrapStrategy=BinaryConfusionMatrixBootstrapStrategy.create(Functions.constant(""String_Node_Str""),ImmutableSet.of(new BrokenDownLinearScoreAggregator.Builder().name(""String_Node_Str"").outputDir(new File(outputDir,""String_Node_Str"")).alpha(0.25).build()));
  final BootstrapInspector argScoreWithBootstrapping=BootstrapInspector.forStrategy(argScoreBootstrapStrategy,1000,new Random(0));
  inspect(alignmentNode).with(argScoreWithBootstrapping);
  final BinaryConfusionMatrixBootstrapStrategy<HasEventType> argScoreByTypeGroupBootstrapStrategy=BinaryConfusionMatrixBootstrapStrategy.create(By2016TypeGroup.INSTANCE,ImmutableSet.of(new BrokenDownLinearScoreAggregator.Builder().name(""String_Node_Str"").outputDir(new File(outputDir,""String_Node_Str"")).alpha(0.25).build()));
  final BootstrapInspector argScoreByTypeWithBootstrapping=BootstrapInspector.forStrategy(argScoreByTypeGroupBootstrapStrategy,1000,new Random(0));
  inspect(alignmentNode).with(argScoreByTypeWithBootstrapping);
  final BinaryErrorLogger<HasDocID,HasDocID> logWrongAnswers=BinaryErrorLogger.forStringifierAndOutputDir(Functions.toStringFunction(),outputDir);
  inspect(alignmentNode).with(logWrongAnswers);
}",0.9986468200270636
24878,"public BootstrapInspector.ObservationSummarizer<Alignment<? extends T,? extends T>,SummaryConfusionMatrix> createObservationSummarizer(){
  return new BootstrapInspector.ObservationSummarizer<Alignment<? extends T,? extends T>,SummaryConfusionMatrix>(){
    public SummaryConfusionMatrix summarizeObservation(    Alignment<? extends T,? extends T> alignment){
      return LinearScoreBootstrapStrategy.this.confusionMatrixForAlignment(alignment);
    }
  }
;
}","@Override public BootstrapInspector.ObservationSummarizer<Alignment<? extends T,? extends T>,SummaryConfusionMatrix> createObservationSummarizer(){
  return new BootstrapInspector.ObservationSummarizer<Alignment<? extends T,? extends T>,SummaryConfusionMatrix>(){
    @Override public SummaryConfusionMatrix summarizeObservation(    Alignment<? extends T,? extends T> alignment){
      return LinearScoreBootstrapStrategy.this.confusionMatrixForAlignment(alignment);
    }
  }
;
}",0.9787234042553192
24879,"public Collection<BootstrapInspector.SummaryAggregator<SummaryConfusionMatrix>> createSummaryAggregators(){
  return ImmutableList.<BootstrapInspector.SummaryAggregator<SummaryConfusionMatrix>>of(new Aggregator());
}","@Override public Collection<BootstrapInspector.SummaryAggregator<SummaryConfusionMatrix>> createSummaryAggregators(){
  return ImmutableList.<BootstrapInspector.SummaryAggregator<SummaryConfusionMatrix>>of(new Aggregator());
}",0.9773755656108596
24880,"public SummaryConfusionMatrix summarizeObservation(Alignment<? extends T,? extends T> alignment){
  return LinearScoreBootstrapStrategy.this.confusionMatrixForAlignment(alignment);
}","@Override public SummaryConfusionMatrix summarizeObservation(Alignment<? extends T,? extends T> alignment){
  return LinearScoreBootstrapStrategy.this.confusionMatrixForAlignment(alignment);
}",0.9732620320855616
24881,"public final void finish(DiffLogger diffLogger,File outputDir) throws IOException {
  final ProvenancedConfusionMatrix<Response> confusionMatrix=confusionMatrixBuilder.build();
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (  final Symbol leftKey : confusionMatrix.leftLabels()) {
    for (    final Symbol rightKey : confusionMatrix.rightLabels()) {
      if (leftKey != rightKey) {
        for (        final Response response : confusionMatrix.cell(leftKey,rightKey)) {
          diffLogger.logDifference(response,leftKey,rightKey,sb);
        }
      }
    }
  }
  sb.append(""String_Node_Str"");
  Files.asCharSink(new File(outputDir,""String_Node_Str""),Charsets.UTF_8).write(sb.toString());
  final SummaryConfusionMatrix summaryConfusionMatrix=confusionMatrix.buildSummaryMatrix();
  final StringBuilder msg=new StringBuilder();
  msg.append(SummaryConfusionMatrices.prettyPrint(summaryConfusionMatrix)).append(""String_Node_Str"");
  final Map<String,FMeasureCounts> fMeasureCountsMap=Maps.newHashMap();
  for (  final Symbol key : summaryConfusionMatrix.leftLabels()) {
    fMeasureCountsMap.put(key.toString(),SummaryConfusionMatrices.FMeasureVsAllOthers(summaryConfusionMatrix,key));
  }
  final FMeasureTableRenderer tableRenderer=FMeasureTableRenderer.create().setNameFieldLength(4 + MapUtils.longestKeyLength(fMeasureCountsMap));
  msg.append(tableRenderer.render(fMeasureCountsMap));
  msg.append(String.format(""String_Node_Str"",100.0 * SummaryConfusionMatrices.accuracy(summaryConfusionMatrix)));
  Files.asCharSink(new File(outputDir,""String_Node_Str""),Charsets.UTF_8).write(msg.toString());
}","@Override public final void finish(DiffLogger diffLogger,File outputDir) throws IOException {
  final ProvenancedConfusionMatrix<Response> confusionMatrix=confusionMatrixBuilder.build();
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (  final Symbol leftKey : confusionMatrix.leftLabels()) {
    for (    final Symbol rightKey : confusionMatrix.rightLabels()) {
      if (leftKey != rightKey) {
        for (        final Response response : confusionMatrix.cell(leftKey,rightKey)) {
          diffLogger.logDifference(response,leftKey,rightKey,sb);
        }
      }
    }
  }
  sb.append(""String_Node_Str"");
  Files.asCharSink(new File(outputDir,""String_Node_Str""),Charsets.UTF_8).write(sb.toString());
  final SummaryConfusionMatrix summaryConfusionMatrix=confusionMatrix.buildSummaryMatrix();
  final StringBuilder msg=new StringBuilder();
  msg.append(SummaryConfusionMatrices.prettyPrint(summaryConfusionMatrix)).append(""String_Node_Str"");
  final Map<String,FMeasureCounts> fMeasureCountsMap=Maps.newHashMap();
  for (  final Symbol key : summaryConfusionMatrix.leftLabels()) {
    fMeasureCountsMap.put(key.toString(),SummaryConfusionMatrices.FMeasureVsAllOthers(summaryConfusionMatrix,key));
  }
  final FMeasureTableRenderer tableRenderer=FMeasureTableRenderer.create().setNameFieldLength(4 + MapUtils.longestKeyLength(fMeasureCountsMap));
  msg.append(tableRenderer.render(fMeasureCountsMap));
  msg.append(String.format(""String_Node_Str"",100.0 * SummaryConfusionMatrices.accuracy(summaryConfusionMatrix)));
  Files.asCharSink(new File(outputDir,""String_Node_Str""),Charsets.UTF_8).write(msg.toString());
}",0.9970238095238096
24882,"/** 
 * Copy current immutable object by setting value for   {@link Aggregate2015ScoringResult#argument() argument}. Shallow reference equality check is used to prevent copying of the same value by returning   {@code this}.
 * @param value new value for argument
 * @return modified copy of the {@code this} object
 */
public final ImmutableAggregate2015ScoringResult withArgument(ImmutableAggregate2015ArgScoringResult value){
  if (this.argument == value) {
    return this;
  }
  ImmutableAggregate2015ArgScoringResult newValue=Preconditions.checkNotNull(value);
  return validate(new ImmutableAggregate2015ScoringResult(newValue,this.linking,this.overall));
}","/** 
 * Copy current immutable object by setting value for   {@link Aggregate2015ScoringResult#argument() argument}. Shallow reference equality check is used to prevent copying of the same value by returning   {@code this}.
 * @param value new value for argument
 * @return modified copy of the {@code this} object
 */
@SuppressWarnings(""String_Node_Str"") public final ImmutableAggregate2015ScoringResult withArgument(ImmutableAggregate2015ArgScoringResult value){
  if (this.argument == value) {
    return this;
  }
  ImmutableAggregate2015ArgScoringResult newValue=Preconditions.checkNotNull(value);
  return validate(new ImmutableAggregate2015ScoringResult(newValue,this.linking,this.overall));
}",0.9728539985326484
24883,"/** 
 * Copy current immutable object by setting value for   {@link Aggregate2015ScoringResult#linking() linking}. Shallow reference equality check is used to prevent copying of the same value by returning   {@code this}.
 * @param value new value for linking
 * @return modified copy of the {@code this} object
 */
public final ImmutableAggregate2015ScoringResult withLinking(ImmutableAggregate2015LinkScoringResult value){
  if (this.linking == value) {
    return this;
  }
  ImmutableAggregate2015LinkScoringResult newValue=Preconditions.checkNotNull(value);
  return validate(new ImmutableAggregate2015ScoringResult(this.argument,newValue,this.overall));
}","/** 
 * Copy current immutable object by setting value for   {@link Aggregate2015ScoringResult#linking() linking}. Shallow reference equality check is used to prevent copying of the same value by returning   {@code this}.
 * @param value new value for linking
 * @return modified copy of the {@code this} object
 */
@SuppressWarnings(""String_Node_Str"") public final ImmutableAggregate2015ScoringResult withLinking(ImmutableAggregate2015LinkScoringResult value){
  if (this.linking == value) {
    return this;
  }
  ImmutableAggregate2015LinkScoringResult newValue=Preconditions.checkNotNull(value);
  return validate(new ImmutableAggregate2015ScoringResult(this.argument,newValue,this.overall));
}",0.9727740986019132
24884,"public ScoringData transform(final ScoringData input){
  checkArgument(input.answerKey().isPresent() && input.argumentOutput().isPresent(),""String_Node_Str"" + ""String_Node_Str"");
  assertRealisIsNeutralized(input);
  final AnswerKey answerKey=input.answerKey().get();
  final ArgumentOutput argumentOutput=input.argumentOutput().get();
  final ImmutableMultimap<String,AssessedResponse> answerKeyByTypeRoleBaseFiller=Multimaps.index(filter(answerKey.annotatedResponses(),AssessedResponse.IsCorrectUpToInexactJustifications),Functions.compose(TypeRoleBaseFiller,response()));
  final ImmutableMultimap<String,AssessedResponse> answerKeyByTypeRole=Multimaps.index(filter(answerKey.annotatedResponses(),AssessedResponse.IsCorrectUpToInexactJustifications),Functions.compose(TypeRole,response()));
  final ImmutableMap.Builder<Response,Response> responseReplacements=ImmutableMap.builder();
  final ImmutableSet.Builder<Response> toDelete=ImmutableSet.builder();
  for (  final Response response : argumentOutput.responses()) {
    final AssessedResponse assessedResponse=answerKey.assess(response).get();
    if (FieldAssessment.isAcceptable(assessedResponse.assessment().baseFillerCorrect()) && !FieldAssessment.isAcceptable(assessedResponse.assessment().entityCorrectFiller())) {
      final Collection<AssessedResponse> correctPoolResponsesSharingSameTypeRoleBF=answerKeyByTypeRoleBaseFiller.get(TypeRoleBaseFiller.apply(response));
      if (!correctPoolResponsesSharingSameTypeRoleBF.isEmpty()) {
        responseReplacements.put(response,Iterables.getFirst(correctPoolResponsesSharingSameTypeRoleBF,null).response());
        ++swappedCASForSameBF;
      }
 else {
        final Collection<AssessedResponse> correctPoolResponsesSharingSameTypeRole=answerKeyByTypeRole.get(TypeRole.apply(response));
        if (!correctPoolResponsesSharingSameTypeRole.isEmpty()) {
          responseReplacements.put(response,Iterables.getFirst(correctPoolResponsesSharingSameTypeRole,null).response());
          ++swappedCASDifferentBF;
        }
 else {
          toDelete.add(response);
          ++deleted;
        }
      }
    }
 else {
      ++passedThrough;
    }
  }
  final ResponseMapping responseMapping=ResponseMapping.create(responseReplacements.build(),toDelete.build());
  if (!responseMapping.isIdentity()) {
    log.info(""String_Node_Str"",responseMapping.summaryString());
  }
  final ScoringData.Builder ret=ScoringData.builder().from(input);
  ret.argumentOutput(responseMapping.apply(argumentOutput));
  if (input.systemLinking().isPresent()) {
    ret.systemLinking(responseMapping.apply(input.systemLinking().get()));
  }
  return ret.build();
}","@Override public ScoringData transform(final ScoringData input){
  checkArgument(input.answerKey().isPresent() && input.argumentOutput().isPresent(),""String_Node_Str"" + ""String_Node_Str"");
  assertRealisIsNeutralized(input);
  final AnswerKey answerKey=input.answerKey().get();
  final ArgumentOutput argumentOutput=input.argumentOutput().get();
  final ImmutableMultimap<String,AssessedResponse> answerKeyByTypeRoleBaseFiller=Multimaps.index(filter(answerKey.annotatedResponses(),AssessedResponse.IsCorrectUpToInexactJustifications),Functions.compose(TypeRoleBaseFiller,response()));
  final ImmutableMultimap<String,AssessedResponse> answerKeyByTypeRole=Multimaps.index(filter(answerKey.annotatedResponses(),AssessedResponse.IsCorrectUpToInexactJustifications),Functions.compose(TypeRole,response()));
  final ImmutableMap.Builder<Response,Response> responseReplacements=ImmutableMap.builder();
  final ImmutableSet.Builder<Response> toDelete=ImmutableSet.builder();
  for (  final Response response : argumentOutput.responses()) {
    final AssessedResponse assessedResponse=answerKey.assess(response).get();
    if (FieldAssessment.isAcceptable(assessedResponse.assessment().baseFillerCorrect()) && !FieldAssessment.isAcceptable(assessedResponse.assessment().entityCorrectFiller())) {
      final Collection<AssessedResponse> correctPoolResponsesSharingSameTypeRoleBF=answerKeyByTypeRoleBaseFiller.get(TypeRoleBaseFiller.apply(response));
      if (!correctPoolResponsesSharingSameTypeRoleBF.isEmpty()) {
        responseReplacements.put(response,Iterables.getFirst(correctPoolResponsesSharingSameTypeRoleBF,null).response());
        ++swappedCASForSameBF;
      }
 else {
        final Collection<AssessedResponse> correctPoolResponsesSharingSameTypeRole=answerKeyByTypeRole.get(TypeRole.apply(response));
        if (!correctPoolResponsesSharingSameTypeRole.isEmpty()) {
          responseReplacements.put(response,Iterables.getFirst(correctPoolResponsesSharingSameTypeRole,null).response());
          ++swappedCASDifferentBF;
        }
 else {
          toDelete.add(response);
          ++deleted;
        }
      }
    }
 else {
      ++passedThrough;
    }
  }
  final ResponseMapping responseMapping=ResponseMapping.create(responseReplacements.build(),toDelete.build());
  if (!responseMapping.isIdentity()) {
    log.info(""String_Node_Str"",responseMapping.summaryString());
  }
  final ScoringData.Builder ret=ScoringData.builder().from(input);
  ret.argumentOutput(responseMapping.apply(argumentOutput));
  if (input.systemLinking().isPresent()) {
    ret.systemLinking(responseMapping.apply(input.systemLinking().get()));
  }
  return ret.build();
}",0.9981203007518796
24885,"public void logStats(){
  log.info(""String_Node_Str"" + ""String_Node_Str"",passedThrough,swappedCASForSameBF,swappedCASDifferentBF,deleted);
}","@Override public void logStats(){
  log.info(""String_Node_Str"" + ""String_Node_Str"",passedThrough,swappedCASForSameBF,swappedCASDifferentBF,deleted);
}",0.9655172413793104
24886,"private static ResponseLinking linkAll(final ArgumentOutput bbnOutputDoc1){
  final ResponseSet responseSet=ResponseSet.of(bbnOutputDoc1.responses());
  return ResponseLinking.builder().docID(bbnOutputDoc1.docId()).addResponseSets(responseSet).responseSetIds(ImmutableBiMap.of(DUMMY_EVENT_FRAME_ID,responseSet)).build();
}","private static ResponseLinking linkAll(final ArgumentOutput bbnOutputDoc1){
  final ResponseSet responseSet=ResponseSet.from(bbnOutputDoc1.responses());
  return ResponseLinking.builder().docID(bbnOutputDoc1.docId()).addResponseSets(responseSet).responseSetIds(ImmutableBiMap.of(DUMMY_EVENT_FRAME_ID,responseSet)).build();
}",0.9938080495356038
24887,"public String toString(){
  return MoreObjects.toStringHelper(this).add(""String_Node_Str"",docid).add(""String_Node_Str"",""String_Node_Str"" + StringUtils.unixNewlineJoiner().join(annotatedResponses()) + ""String_Node_Str"").add(""String_Node_Str"",""String_Node_Str"" + StringUtils.unixNewlineJoiner().join(unannotatedResponses())).add(""String_Node_Str"",corefAnnotation()).toString();
}","@Override public String toString(){
  return MoreObjects.toStringHelper(this).add(""String_Node_Str"",docid).add(""String_Node_Str"",""String_Node_Str"" + StringUtils.unixNewlineJoiner().join(annotatedResponses()) + ""String_Node_Str"").add(""String_Node_Str"",""String_Node_Str"" + StringUtils.unixNewlineJoiner().join(unannotatedResponses())).add(""String_Node_Str"",corefAnnotation()).toString();
}",0.986910994764398
24888,"public String toString(){
  return MoreObjects.toStringHelper(this).add(""String_Node_Str"",docId).add(""String_Node_Str"",""String_Node_Str"" + StringUtils.unixNewlineJoiner().join(CASesToIDs.entrySet()) + ""String_Node_Str"").add(""String_Node_Str"",""String_Node_Str"" + StringUtils.unixNewlineJoiner().join(unannotatedCASes()) + ""String_Node_Str"").toString();
}","@Override public String toString(){
  return MoreObjects.toStringHelper(this).add(""String_Node_Str"",docId).add(""String_Node_Str"",""String_Node_Str"" + StringUtils.unixNewlineJoiner().join(CASesToIDs.entrySet()) + ""String_Node_Str"").add(""String_Node_Str"",""String_Node_Str"" + StringUtils.unixNewlineJoiner().join(unannotatedCASes()) + ""String_Node_Str"").toString();
}",0.9860335195530726
24889,"@Override public void observeSample(final Collection<DocLevelLinkingScoring> collection){
{
    final ImmutableList.Builder<LinkingScoreDocRecord> docRecordsB=ImmutableList.builder();
    for (    final DocLevelLinkingScoring linkingScoring : collection) {
      docRecordsB.add(linkingScoring.linkingScoreDocRecord());
    }
    aggregateRecordB.from(aggregateScores(docRecordsB.build()));
  }
{
    final ImmutableSet.Builder<Symbol> eventTypesB=ImmutableSet.builder();
    for (    final DocLevelLinkingScoring linkingScoring : collection) {
      eventTypesB.addAll(linkingScoring.docRecordsPerEventType().keySet());
    }
    final ImmutableSet<Symbol> eventTypes=eventTypesB.build();
    for (    final Symbol eventType : eventTypes) {
      final ImmutableList.Builder<LinkingScoreDocRecord> docRecordsB=ImmutableList.builder();
      for (      final DocLevelLinkingScoring linkingScoring : collection) {
        if (linkingScoring.docRecordsPerEventType().containsKey(eventType)) {
          docRecordsB.add(linkingScoring.docRecordsPerEventType().get(eventType));
        }
      }
      aggregateRecordsPerEventTypeB.put(eventType,aggregateScores(docRecordsB.build()));
    }
  }
}","@Override public void observeSample(final Collection<DocLevelLinkingScoring> collection){
{
    final ImmutableList.Builder<LinkingScoreDocRecord> docRecordsB=ImmutableList.builder();
    for (    final DocLevelLinkingScoring linkingScoring : collection) {
      docRecordsB.add(linkingScoring.linkingScoreDocRecord());
    }
    aggregateRecordsB.add(aggregateScores(docRecordsB.build()));
  }
{
    final ImmutableSet.Builder<Symbol> eventTypesB=ImmutableSet.builder();
    for (    final DocLevelLinkingScoring linkingScoring : collection) {
      eventTypesB.addAll(linkingScoring.docRecordsPerEventType().keySet());
    }
    final ImmutableSet<Symbol> eventTypes=eventTypesB.build();
    for (    final Symbol eventType : eventTypes) {
      final ImmutableList.Builder<LinkingScoreDocRecord> docRecordsB=ImmutableList.builder();
      for (      final DocLevelLinkingScoring linkingScoring : collection) {
        if (linkingScoring.docRecordsPerEventType().containsKey(eventType)) {
          docRecordsB.add(linkingScoring.docRecordsPerEventType().get(eventType));
        }
      }
      aggregateRecordsPerEventTypeB.put(eventType,aggregateScores(docRecordsB.build()));
    }
  }
}",0.9949664429530202
24890,"private AggregateLinkingScoreRecord aggregateScores(ImmutableList<LinkingScoreDocRecord> docRecords){
  double precision=0.0;
  double recall=0.0;
  double f1=0.0;
  double linkNormalizerSum=0.0;
  final ImmutableListMultimap.Builder<String,Double> f1sB=ImmutableListMultimap.builder();
  final ImmutableListMultimap.Builder<String,Double> precisionsB=ImmutableListMultimap.builder();
  final ImmutableListMultimap.Builder<String,Double> recallsB=ImmutableListMultimap.builder();
  for (  final LinkingScoreDocRecord docRecord : docRecords) {
    precision+=docRecord.fMeasureInfo().precision() * docRecord.predictedCounts();
    recall+=docRecord.fMeasureInfo().recall() * docRecord.actualCounts();
    f1+=docRecord.fMeasureInfo().f1() * docRecord.actualCounts();
    linkNormalizerSum+=docRecord.linkingArgCounts();
  }
  f1sB.put(""String_Node_Str"",(linkNormalizerSum > 0.0) ? f1 / linkNormalizerSum : 0.0);
  precisionsB.put(""String_Node_Str"",(linkNormalizerSum > 0.0) ? precision / linkNormalizerSum : 0.0);
  recallsB.put(""String_Node_Str"",(linkNormalizerSum > 0.0) ? recall / linkNormalizerSum : 0.0);
  return new AggregateLinkingScoreRecord.Builder().f1s(f1sB.build()).precisions(precisionsB.build()).recalls(recallsB.build()).build();
}","private AggregateLinkingScoreRecord aggregateScores(ImmutableList<LinkingScoreDocRecord> docRecords){
  double precision=0.0;
  double recall=0.0;
  double f1=0.0;
  double linkNormalizerSum=0.0;
  for (  final LinkingScoreDocRecord docRecord : docRecords) {
    precision+=docRecord.fMeasureInfo().precision() * docRecord.predictedCounts();
    recall+=docRecord.fMeasureInfo().recall() * docRecord.actualCounts();
    f1+=docRecord.fMeasureInfo().f1() * docRecord.actualCounts();
    linkNormalizerSum+=docRecord.linkingArgCounts();
  }
  f1=(linkNormalizerSum > 0.0) ? f1 / linkNormalizerSum : 0.0;
  precision=(linkNormalizerSum > 0.0) ? precision / linkNormalizerSum : 0.0;
  recall=(linkNormalizerSum > 0.0) ? recall / linkNormalizerSum : 0.0;
  return new AggregateLinkingScoreRecord.Builder().f1(f1).precision(precision).recall(recall).build();
}",0.539047619047619
24891,"@Override public Collection<BootstrapInspector.SummaryAggregator<DocLevelLinkingScoring>> createSummaryAggregators(){
  return ImmutableList.<BootstrapInspector.SummaryAggregator<DocLevelLinkingScoring>>of(new BootstrapInspector.SummaryAggregator<DocLevelLinkingScoring>(){
    private final AggregateLinkingScoreRecord.Builder aggregateRecordB=new AggregateLinkingScoreRecord.Builder();
    private final ImmutableMap.Builder<Symbol,AggregateLinkingScoreRecord> aggregateRecordsPerEventTypeB=ImmutableMap.builder();
    private static final String F1=""String_Node_Str"";
    private static final String PRECISION=""String_Node_Str"";
    private static final String RECALL=""String_Node_Str"";
    private final BootstrapWriter writer=new BootstrapWriter.Builder().measures(ImmutableList.of(F1,PRECISION,RECALL)).percentilesToPrint(ImmutableList.of(0.005,0.025,0.05,0.25,0.5,0.75,0.95,0.975,0.995)).percentileComputer(PercentileComputer.nistPercentileComputer()).build();
    @Override public void observeSample(    final Collection<DocLevelLinkingScoring> collection){
{
        final ImmutableList.Builder<LinkingScoreDocRecord> docRecordsB=ImmutableList.builder();
        for (        final DocLevelLinkingScoring linkingScoring : collection) {
          docRecordsB.add(linkingScoring.linkingScoreDocRecord());
        }
        aggregateRecordB.from(aggregateScores(docRecordsB.build()));
      }
{
        final ImmutableSet.Builder<Symbol> eventTypesB=ImmutableSet.builder();
        for (        final DocLevelLinkingScoring linkingScoring : collection) {
          eventTypesB.addAll(linkingScoring.docRecordsPerEventType().keySet());
        }
        final ImmutableSet<Symbol> eventTypes=eventTypesB.build();
        for (        final Symbol eventType : eventTypes) {
          final ImmutableList.Builder<LinkingScoreDocRecord> docRecordsB=ImmutableList.builder();
          for (          final DocLevelLinkingScoring linkingScoring : collection) {
            if (linkingScoring.docRecordsPerEventType().containsKey(eventType)) {
              docRecordsB.add(linkingScoring.docRecordsPerEventType().get(eventType));
            }
          }
          aggregateRecordsPerEventTypeB.put(eventType,aggregateScores(docRecordsB.build()));
        }
      }
    }
    public void finish() throws IOException {
      final AggregateLinkingScoreRecord aggregateRecord=aggregateRecordB.build();
      writer.writeBootstrapData(""String_Node_Str"",ImmutableMap.of(F1,aggregateRecord.f1s(),PRECISION,aggregateRecord.precisions(),RECALL,aggregateRecord.recalls()),new File(outputDir,""String_Node_Str""));
      final ImmutableMap<Symbol,AggregateLinkingScoreRecord> aggregateRecordsPerEvent=aggregateRecordsPerEventTypeB.build();
      for (      Symbol eventType : aggregateRecordsPerEvent.keySet()) {
        AggregateLinkingScoreRecord recordForEventType=aggregateRecordsPerEvent.get(eventType);
        writer.writeBootstrapData(""String_Node_Str"" + eventType.asString(),ImmutableMap.of(F1,recordForEventType.f1s(),PRECISION,recordForEventType.precisions(),RECALL,recordForEventType.recalls()),new File(outputDir,""String_Node_Str"" + eventType.asString()));
      }
    }
    private AggregateLinkingScoreRecord aggregateScores(    ImmutableList<LinkingScoreDocRecord> docRecords){
      double precision=0.0;
      double recall=0.0;
      double f1=0.0;
      double linkNormalizerSum=0.0;
      final ImmutableListMultimap.Builder<String,Double> f1sB=ImmutableListMultimap.builder();
      final ImmutableListMultimap.Builder<String,Double> precisionsB=ImmutableListMultimap.builder();
      final ImmutableListMultimap.Builder<String,Double> recallsB=ImmutableListMultimap.builder();
      for (      final LinkingScoreDocRecord docRecord : docRecords) {
        precision+=docRecord.fMeasureInfo().precision() * docRecord.predictedCounts();
        recall+=docRecord.fMeasureInfo().recall() * docRecord.actualCounts();
        f1+=docRecord.fMeasureInfo().f1() * docRecord.actualCounts();
        linkNormalizerSum+=docRecord.linkingArgCounts();
      }
      f1sB.put(""String_Node_Str"",(linkNormalizerSum > 0.0) ? f1 / linkNormalizerSum : 0.0);
      precisionsB.put(""String_Node_Str"",(linkNormalizerSum > 0.0) ? precision / linkNormalizerSum : 0.0);
      recallsB.put(""String_Node_Str"",(linkNormalizerSum > 0.0) ? recall / linkNormalizerSum : 0.0);
      return new AggregateLinkingScoreRecord.Builder().f1s(f1sB.build()).precisions(precisionsB.build()).recalls(recallsB.build()).build();
    }
  }
);
}","@Override public Collection<BootstrapInspector.SummaryAggregator<DocLevelLinkingScoring>> createSummaryAggregators(){
  return ImmutableList.<BootstrapInspector.SummaryAggregator<DocLevelLinkingScoring>>of(new BootstrapInspector.SummaryAggregator<DocLevelLinkingScoring>(){
    private final ImmutableList.Builder<AggregateLinkingScoreRecord> aggregateRecordsB=ImmutableList.builder();
    private final ImmutableListMultimap.Builder<Symbol,AggregateLinkingScoreRecord> aggregateRecordsPerEventTypeB=ImmutableListMultimap.builder();
    private static final String F1=""String_Node_Str"";
    private static final String PRECISION=""String_Node_Str"";
    private static final String RECALL=""String_Node_Str"";
    private final BootstrapWriter writer=new BootstrapWriter.Builder().measures(ImmutableList.of(F1,PRECISION,RECALL)).percentilesToPrint(ImmutableList.of(0.005,0.025,0.05,0.25,0.5,0.75,0.95,0.975,0.995)).percentileComputer(PercentileComputer.nistPercentileComputer()).build();
    @Override public void observeSample(    final Collection<DocLevelLinkingScoring> collection){
{
        final ImmutableList.Builder<LinkingScoreDocRecord> docRecordsB=ImmutableList.builder();
        for (        final DocLevelLinkingScoring linkingScoring : collection) {
          docRecordsB.add(linkingScoring.linkingScoreDocRecord());
        }
        aggregateRecordsB.add(aggregateScores(docRecordsB.build()));
      }
{
        final ImmutableSet.Builder<Symbol> eventTypesB=ImmutableSet.builder();
        for (        final DocLevelLinkingScoring linkingScoring : collection) {
          eventTypesB.addAll(linkingScoring.docRecordsPerEventType().keySet());
        }
        final ImmutableSet<Symbol> eventTypes=eventTypesB.build();
        for (        final Symbol eventType : eventTypes) {
          final ImmutableList.Builder<LinkingScoreDocRecord> docRecordsB=ImmutableList.builder();
          for (          final DocLevelLinkingScoring linkingScoring : collection) {
            if (linkingScoring.docRecordsPerEventType().containsKey(eventType)) {
              docRecordsB.add(linkingScoring.docRecordsPerEventType().get(eventType));
            }
          }
          aggregateRecordsPerEventTypeB.put(eventType,aggregateScores(docRecordsB.build()));
        }
      }
    }
    public void finish() throws IOException {
{
        final ImmutableList<AggregateLinkingScoreRecord> aggregateRecords=aggregateRecordsB.build();
        final ImmutableList<Double> f1s=ImmutableList.copyOf(transform(aggregateRecords,AggregateLinkingScoreRecordFunctions.f1()));
        final ImmutableList<Double> precisions=ImmutableList.copyOf(transform(aggregateRecords,AggregateLinkingScoreRecordFunctions.precision()));
        final ImmutableList<Double> recalls=ImmutableList.copyOf(transform(aggregateRecords,AggregateLinkingScoreRecordFunctions.recall()));
        writer.writeBootstrapData(""String_Node_Str"",ImmutableMap.of(F1,new ImmutableListMultimap.Builder<String,Double>().putAll(""String_Node_Str"",f1s).build(),PRECISION,new ImmutableListMultimap.Builder<String,Double>().putAll(""String_Node_Str"",precisions).build(),RECALL,new ImmutableListMultimap.Builder<String,Double>().putAll(""String_Node_Str"",recalls).build()),new File(outputDir,""String_Node_Str""));
      }
{
        final ImmutableListMultimap<Symbol,AggregateLinkingScoreRecord> aggregateRecordsPerEvent=aggregateRecordsPerEventTypeB.build();
        for (        Symbol eventType : aggregateRecordsPerEvent.keySet()) {
          final ImmutableList<AggregateLinkingScoreRecord> aggregateRecordsForEvent=aggregateRecordsPerEvent.get(eventType);
          final ImmutableList<Double> f1s=ImmutableList.copyOf(transform(aggregateRecordsForEvent,AggregateLinkingScoreRecordFunctions.f1()));
          final ImmutableList<Double> precisions=ImmutableList.copyOf(transform(aggregateRecordsForEvent,AggregateLinkingScoreRecordFunctions.precision()));
          final ImmutableList<Double> recalls=ImmutableList.copyOf(transform(aggregateRecordsForEvent,AggregateLinkingScoreRecordFunctions.recall()));
          writer.writeBootstrapData(""String_Node_Str"",ImmutableMap.of(F1,new ImmutableListMultimap.Builder<String,Double>().putAll(""String_Node_Str"",f1s).build(),PRECISION,new ImmutableListMultimap.Builder<String,Double>().putAll(""String_Node_Str"",precisions).build(),RECALL,new ImmutableListMultimap.Builder<String,Double>().putAll(""String_Node_Str"",recalls).build()),new File(new File(outputDir,""String_Node_Str""),eventType.asString()));
        }
      }
    }
    private AggregateLinkingScoreRecord aggregateScores(    ImmutableList<LinkingScoreDocRecord> docRecords){
      double precision=0.0;
      double recall=0.0;
      double f1=0.0;
      double linkNormalizerSum=0.0;
      for (      final LinkingScoreDocRecord docRecord : docRecords) {
        precision+=docRecord.fMeasureInfo().precision() * docRecord.predictedCounts();
        recall+=docRecord.fMeasureInfo().recall() * docRecord.actualCounts();
        f1+=docRecord.fMeasureInfo().f1() * docRecord.actualCounts();
        linkNormalizerSum+=docRecord.linkingArgCounts();
      }
      f1=(linkNormalizerSum > 0.0) ? f1 / linkNormalizerSum : 0.0;
      precision=(linkNormalizerSum > 0.0) ? precision / linkNormalizerSum : 0.0;
      recall=(linkNormalizerSum > 0.0) ? recall / linkNormalizerSum : 0.0;
      return new AggregateLinkingScoreRecord.Builder().f1(f1).precision(precision).recall(recall).build();
    }
  }
);
}",0.7296782599979954
24892,"public void finish() throws IOException {
  final AggregateLinkingScoreRecord aggregateRecord=aggregateRecordB.build();
  writer.writeBootstrapData(""String_Node_Str"",ImmutableMap.of(F1,aggregateRecord.f1s(),PRECISION,aggregateRecord.precisions(),RECALL,aggregateRecord.recalls()),new File(outputDir,""String_Node_Str""));
  final ImmutableMap<Symbol,AggregateLinkingScoreRecord> aggregateRecordsPerEvent=aggregateRecordsPerEventTypeB.build();
  for (  Symbol eventType : aggregateRecordsPerEvent.keySet()) {
    AggregateLinkingScoreRecord recordForEventType=aggregateRecordsPerEvent.get(eventType);
    writer.writeBootstrapData(""String_Node_Str"" + eventType.asString(),ImmutableMap.of(F1,recordForEventType.f1s(),PRECISION,recordForEventType.precisions(),RECALL,recordForEventType.recalls()),new File(outputDir,""String_Node_Str"" + eventType.asString()));
  }
}","public void finish() throws IOException {
{
    final ImmutableList<AggregateLinkingScoreRecord> aggregateRecords=aggregateRecordsB.build();
    final ImmutableList<Double> f1s=ImmutableList.copyOf(transform(aggregateRecords,AggregateLinkingScoreRecordFunctions.f1()));
    final ImmutableList<Double> precisions=ImmutableList.copyOf(transform(aggregateRecords,AggregateLinkingScoreRecordFunctions.precision()));
    final ImmutableList<Double> recalls=ImmutableList.copyOf(transform(aggregateRecords,AggregateLinkingScoreRecordFunctions.recall()));
    writer.writeBootstrapData(""String_Node_Str"",ImmutableMap.of(F1,new ImmutableListMultimap.Builder<String,Double>().putAll(""String_Node_Str"",f1s).build(),PRECISION,new ImmutableListMultimap.Builder<String,Double>().putAll(""String_Node_Str"",precisions).build(),RECALL,new ImmutableListMultimap.Builder<String,Double>().putAll(""String_Node_Str"",recalls).build()),new File(outputDir,""String_Node_Str""));
  }
{
    final ImmutableListMultimap<Symbol,AggregateLinkingScoreRecord> aggregateRecordsPerEvent=aggregateRecordsPerEventTypeB.build();
    for (    Symbol eventType : aggregateRecordsPerEvent.keySet()) {
      final ImmutableList<AggregateLinkingScoreRecord> aggregateRecordsForEvent=aggregateRecordsPerEvent.get(eventType);
      final ImmutableList<Double> f1s=ImmutableList.copyOf(transform(aggregateRecordsForEvent,AggregateLinkingScoreRecordFunctions.f1()));
      final ImmutableList<Double> precisions=ImmutableList.copyOf(transform(aggregateRecordsForEvent,AggregateLinkingScoreRecordFunctions.precision()));
      final ImmutableList<Double> recalls=ImmutableList.copyOf(transform(aggregateRecordsForEvent,AggregateLinkingScoreRecordFunctions.recall()));
      writer.writeBootstrapData(""String_Node_Str"",ImmutableMap.of(F1,new ImmutableListMultimap.Builder<String,Double>().putAll(""String_Node_Str"",f1s).build(),PRECISION,new ImmutableListMultimap.Builder<String,Double>().putAll(""String_Node_Str"",precisions).build(),RECALL,new ImmutableListMultimap.Builder<String,Double>().putAll(""String_Node_Str"",recalls).build()),new File(new File(outputDir,""String_Node_Str""),eventType.asString()));
    }
  }
}",0.3660389824909151
24893,"@Override public String apply(final DocLevelEventArg input){
  return input.eventArgumentType().asString() + ""String_Node_Str"" + input.eventArgumentType().asString();
}","@Override public String apply(final DocLevelEventArg input){
  return input.eventType().asString() + ""String_Node_Str"" + input.eventArgumentType().asString();
}",0.975609756097561
24894,"@javax.inject.Inject public ResponsesAndLinkingFromKBPExtractor(final Optional<ImmutableMap<Symbol,File>> coreNLPDocs,final CoreNLPXMLLoader coreNLPXMLLoader,final EREToKBPEventOntologyMapper ontologyMapper,@Assisted File outputDir){
  this.coreNLPDocs=coreNLPDocs;
  this.coreNLPXMLLoader=coreNLPXMLLoader;
  this.ontologyMapper=ontologyMapper;
  this.outputDir=outputDir;
}","@javax.inject.Inject public ResponsesAndLinkingFromKBPExtractor(@CoreNLPProcessedRawDocsP final Optional<ImmutableMap<Symbol,File>> coreNLPDocs,final CoreNLPXMLLoader coreNLPXMLLoader,final EREToKBPEventOntologyMapper ontologyMapper,@Assisted File outputDir){
  this.coreNLPDocs=coreNLPDocs;
  this.coreNLPXMLLoader=coreNLPXMLLoader;
  this.ontologyMapper=ontologyMapper;
  this.outputDir=outputDir;
}",0.9664948453608248
24895,"SimpleEventOntologyMapper getOntologyMapper(Parameters params) throws IOException {
  return EREToKBPEventOntologyMapper.create2016Mapping();
}","@Provides SimpleEventOntologyMapper getOntologyMapper(Parameters params) throws IOException {
  return EREToKBPEventOntologyMapper.create2016Mapping();
}",0.9662162162162162
24896,"@Override protected void configure(){
  bind(Parameters.class).toInstance(params);
  MapBinder.newMapBinder(binder(),TypeLiteral.get(String.class),new TypeLiteral<ScoringEventObserver<DocLevelEventArg,DocLevelEventArg>>(){
  }
);
  try {
    bind(EREToKBPEventOntologyMapper.class).toInstance(EREToKBPEventOntologyMapper.create2016Mapping());
  }
 catch (  IOException ioe) {
    throw new TACKBPEALException(ioe);
  }
  install(new ResponsesAndLinkingFromEREExtractor.Module());
}","@Override protected void configure(){
  bind(Parameters.class).toInstance(params);
  MapBinder.newMapBinder(binder(),TypeLiteral.get(String.class),new TypeLiteral<ScoringEventObserver<DocLevelEventArg,DocLevelEventArg>>(){
  }
);
  try {
    bind(EREToKBPEventOntologyMapper.class).toInstance(EREToKBPEventOntologyMapper.create2016Mapping());
  }
 catch (  IOException ioe) {
    throw new TACKBPEALException(ioe);
  }
  install(new ResponsesAndLinkingFromEREExtractor.Module());
  install(new FactoryModuleBuilder().build(ResponsesAndLinkingFromKBPExtractorFactory.class));
}",0.9101229895931884
24897,"private static void trueMain(String[] argv) throws IOException {
  final Parameters params=Parameters.loadSerifStyle(new File(argv[0]));
  final File queryFile=params.getExistingFile(""String_Node_Str"");
  final ImmutableMap<Symbol,File> ereMap=FileUtils.loadSymbolToFileMap(params.getExistingFile(""String_Node_Str""));
  final CorpusQuerySet2016 queries=ERECorpusQueryLoader.create(ERELoader.builder().prefixDocIDToAllIDs(false).build(),ereMap).loadQueries(Files.asCharSource(queryFile,Charsets.UTF_8));
  final ImmutableMap<String,SystemOutputStore2016> outputStores=loadStores(params.getExistingDirectory(""String_Node_Str""),params.getStringList(""String_Node_Str""));
  final File outputFile=params.getCreatableFile(""String_Node_Str"");
  final CorpusQueryAssessments.Builder corpusQueryAssessmentsB=CorpusQueryAssessments.builder();
  final SingleFileQueryStoreWriter queryStoreWriter=SingleFileQueryStoreWriter.builder().build();
  final CorpusQueryExecutor2016 queryExecutor=DefaultCorpusQueryExecutor.createDefaultFor2016();
  for (  final Map.Entry<String,SystemOutputStore2016> store : outputStores.entrySet()) {
    for (    final CorpusQuery2016 query : queries.queries()) {
      final ImmutableSet<DocEventFrameReference> docEventFrameReferences=queryExecutor.queryEventFrames(store.getValue(),query);
      for (      final DocEventFrameReference docEventFrameReference : docEventFrameReferences) {
        final Optional<ImmutableBiMap<String,ResponseSet>> responseSetMap=store.getValue().read(docEventFrameReference.docID()).linking().responseSetIds();
        checkState(responseSetMap.isPresent());
        final ImmutableSet<Response> responses=responseSetMap.get().get(docEventFrameReference.eventFrameID()).asSet();
        final ImmutableSet<CharOffsetSpan> spans=FluentIterable.from(responses).transform(ResponseFunctions.baseFiller()).toSet();
        final QueryResponse2016 queryResponse2016=QueryResponse2016.builder().docID(docEventFrameReference.docID()).queryID(query.id()).addAllPredicateJustifications(spans).build();
        corpusQueryAssessmentsB.putAllQueryResponsesToSystemIDs(queryResponse2016,ImmutableList.of(Symbol.from(store.getKey())));
        corpusQueryAssessmentsB.addQueryReponses(queryResponse2016);
        corpusQueryAssessmentsB.putAssessments(queryResponse2016,QueryAssessment2016.UNASSASSED);
      }
    }
  }
  queryStoreWriter.saveTo(corpusQueryAssessmentsB.build(),Files.asCharSink(outputFile,Charsets.UTF_8));
}","private static void trueMain(String[] argv) throws IOException {
  final Parameters params=Parameters.loadSerifStyle(new File(argv[0]));
  final File queryFile=params.getExistingFile(""String_Node_Str"");
  final ImmutableMap<Symbol,File> ereMap=FileUtils.loadSymbolToFileMap(params.getExistingFile(""String_Node_Str""));
  final CorpusQuerySet2016 queries=ERECorpusQueryLoader.create(ERELoader.builder().prefixDocIDToAllIDs(false).build(),ereMap).loadQueries(Files.asCharSource(queryFile,Charsets.UTF_8));
  final ImmutableMap<String,SystemOutputStore2016> outputStores=loadStores(params.getExistingDirectory(""String_Node_Str""),params.getStringList(""String_Node_Str""));
  final File outputFile=params.getCreatableFile(""String_Node_Str"");
  final CorpusQueryAssessments.Builder corpusQueryAssessmentsB=CorpusQueryAssessments.builder();
  final SingleFileQueryStoreWriter queryStoreWriter=SingleFileQueryStoreWriter.builder().build();
  final CorpusQueryExecutor2016 queryExecutor=DefaultCorpusQueryExecutor.createDefaultFor2016();
  final LaxImmutableMapBuilder<QueryResponse2016,QueryAssessment2016> assessmentsB=MapUtils.immutableMapBuilderAllowingSameEntryTwice();
  for (  final Map.Entry<String,SystemOutputStore2016> store : outputStores.entrySet()) {
    for (    final CorpusQuery2016 query : queries.queries()) {
      final ImmutableSet<DocEventFrameReference> docEventFrameReferences=queryExecutor.queryEventFrames(store.getValue(),query);
      for (      final DocEventFrameReference docEventFrameReference : docEventFrameReferences) {
        final Optional<ImmutableBiMap<String,ResponseSet>> responseSetMap=store.getValue().read(docEventFrameReference.docID()).linking().responseSetIds();
        checkState(responseSetMap.isPresent());
        final ImmutableSet<Response> responses=responseSetMap.get().get(docEventFrameReference.eventFrameID()).asSet();
        final ImmutableSet<CharOffsetSpan> spans=FluentIterable.from(responses).transform(ResponseFunctions.baseFiller()).toSet();
        final QueryResponse2016 queryResponse2016=QueryResponse2016.builder().docID(docEventFrameReference.docID()).queryID(query.id()).addAllPredicateJustifications(spans).build();
        corpusQueryAssessmentsB.putAllQueryResponsesToSystemIDs(queryResponse2016,ImmutableList.of(Symbol.from(store.getKey())));
        corpusQueryAssessmentsB.addQueryReponses(queryResponse2016);
        assessmentsB.put(queryResponse2016,QueryAssessment2016.UNASSASSED);
      }
    }
  }
  corpusQueryAssessmentsB.assessments(assessmentsB.build());
  queryStoreWriter.saveTo(corpusQueryAssessmentsB.build(),Files.asCharSink(outputFile,Charsets.UTF_8));
}",0.9565217391304348
24898,"private ImmutableAggregate2015ScoringResult computeAggregateScore(final List<EALScorer2015Style.Result> perDocResults){
  final ImmutableAggregate2015ArgScoringResult argScores=computeArgScores(perDocResults);
  final ImmutableAggregate2015LinkScoringResult linkScores=computeLinkScores(perDocResults);
  final double aggregateScore=(1.0 - lambda) * argScores.overall() + lambda * linkScores.overall();
  return ImmutableAggregate2015ScoringResult.builder().argument(argScores).linking(linkScores).overall(100.0 * aggregateScore).build();
}","private ImmutableAggregate2015ScoringResult computeAggregateScore(final List<EALScorer2015Style.Result> perDocResults){
  final ImmutableAggregate2015ArgScoringResult argScores=computeArgScores(perDocResults);
  final ImmutableAggregate2015LinkScoringResult linkScores=computeLinkScores(perDocResults);
  final double aggregateScore=(1.0 - lambda) * argScores.overall() + lambda * linkScores.overall();
  return ImmutableAggregate2015ScoringResult.builder().argument(argScores).linking(linkScores).overall(aggregateScore).build();
}",0.9925373134328358
24899,"public static KBP2015Scorer fromParameters(Parameters params,Map<String,SimpleResultWriter> additionalResultWriters,Map<String,BootstrappedResultWriterSource> additionalBootstrapWriters){
  final EALScorer2015Style documentScorer=EALScorer2015Style.create(params);
  final ImmutableMap.Builder<String,SimpleResultWriter> resultWriters=ImmutableMap.builder();
  final AggregateResultWriter aggregateWriter=new AggregateResultWriter(documentScorer.lambda());
  resultWriters.put(""String_Node_Str"",aggregateWriter);
  resultWriters.put(""String_Node_Str"",new PerDocResultWriter(documentScorer.lambda()));
  resultWriters.put(""String_Node_Str"",new ByEventTypeResultWriter());
  resultWriters.putAll(additionalResultWriters);
  final ImmutableMap.Builder<String,BootstrappedResultWriterSource> bootstrapWriters=ImmutableMap.builder();
  bootstrapWriters.put(""String_Node_Str"",aggregateWriter.asBootstrappedResultWriterSource());
  bootstrapWriters.put(""String_Node_Str"",BootstrappedPerEventResultWriter.source());
  bootstrapWriters.putAll(additionalBootstrapWriters);
  return new KBP2015Scorer(documentScorer,resultWriters.build(),additionalBootstrapWriters,params.getOptionalInteger(""String_Node_Str""),params.getOptionalInteger(""String_Node_Str""));
}","public static KBP2015Scorer fromParameters(Parameters params,Map<String,SimpleResultWriter> additionalResultWriters,Map<String,BootstrappedResultWriterSource> additionalBootstrapWriters){
  final EALScorer2015Style documentScorer=EALScorer2015Style.create(params);
  final ImmutableMap.Builder<String,SimpleResultWriter> resultWriters=ImmutableMap.builder();
  final AggregateResultWriter aggregateWriter=new AggregateResultWriter(documentScorer.lambda());
  resultWriters.put(""String_Node_Str"",aggregateWriter);
  resultWriters.put(""String_Node_Str"",new PerDocResultWriter(documentScorer.lambda()));
  resultWriters.put(""String_Node_Str"",new ByEventTypeResultWriter());
  resultWriters.putAll(additionalResultWriters);
  final ImmutableMap.Builder<String,BootstrappedResultWriterSource> bootstrapWriters=ImmutableMap.builder();
  bootstrapWriters.put(""String_Node_Str"",aggregateWriter.asBootstrappedResultWriterSource());
  bootstrapWriters.put(""String_Node_Str"",BootstrappedPerEventResultWriter.source());
  bootstrapWriters.putAll(additionalBootstrapWriters);
  final Optional<Integer> bootstrapSeed=params.getOptionalInteger(""String_Node_Str"");
  if (bootstrapSeed.isPresent()) {
    log.info(""String_Node_Str"");
  }
  return new KBP2015Scorer(documentScorer,resultWriters.build(),bootstrapWriters.build(),bootstrapSeed,params.getOptionalInteger(""String_Node_Str""));
}",0.8980526918671249
24900,abstract double truePositives();,public abstract double truePositives();,0.9014084507042254
24901,abstract double falseNegatives();,public abstract double falseNegatives();,0.9041095890410958
24902,abstract double precision();,public abstract double precision();,0.8888888888888888
24903,abstract double recall();,public abstract double recall();,0.8771929824561403
24904,abstract double overall();,public abstract double overall();,0.8813559322033898
24905,abstract double falsePositives();,public abstract double falsePositives();,0.9041095890410958
24906,abstract ImmutableAggregate2015ArgScoringResult argument();,public abstract ImmutableAggregate2015ArgScoringResult argument();,0.944
24907,abstract ImmutableAggregate2015LinkScoringResult linking();,public abstract ImmutableAggregate2015LinkScoringResult linking();,0.944
24908,abstract double overall();,public abstract double overall();,0.8813559322033898
24909,"private void writeOutput(final List<EALScorer2015Style.Result> perDocResults,final File baseOutputDir) throws IOException {
  writeBothScore(perDocResults,baseOutputDir);
  final Multiset<Symbol> eventTypesSeen=HashMultiset.create();
  for (  final EALScorer2015Style.Result perDocResult : perDocResults) {
    for (    final TypeRoleFillerRealis trfr : perDocResult.argResult().argumentScoringAlignment().allEquivalenceClassess()) {
      eventTypesSeen.add(trfr.type());
    }
  }
  final File eventTypesDir=new File(baseOutputDir,""String_Node_Str"");
  for (  final Multiset.Entry<Symbol> typeEntry : Multisets.copyHighestCountFirst(eventTypesSeen).entrySet()) {
    final Symbol type=typeEntry.getElement();
    final Function<EALScorer2015Style.ArgResult,EALScorer2015Style.ArgResult> filterFunction=new Function<EALScorer2015Style.ArgResult,EALScorer2015Style.ArgResult>(){
      @Override public EALScorer2015Style.ArgResult apply(      final EALScorer2015Style.ArgResult input){
        return input.copyFiltered(compose(equalTo(type),TypeRoleFillerRealis.Type));
      }
    }
;
    writeArgumentScoresForTransformedResults(perDocResults,filterFunction,new File(eventTypesDir,type.asString()));
  }
}","private void writeOutput(final List<EALScorer2015Style.Result> perDocResults,final File baseOutputDir) throws IOException {
  writeBothScore(perDocResults,baseOutputDir);
  final Multiset<Symbol> eventTypesSeen=HashMultiset.create();
  for (  final EALScorer2015Style.Result perDocResult : perDocResults) {
    for (    final TypeRoleFillerRealis trfr : perDocResult.argResult().argumentScoringAlignment().allEquivalenceClassess()) {
      eventTypesSeen.add(trfr.type());
    }
  }
  final File eventTypesDir=new File(baseOutputDir,""String_Node_Str"");
  for (  final Multiset.Entry<Symbol> typeEntry : Multisets.copyHighestCountFirst(eventTypesSeen).entrySet()) {
    final Symbol type=typeEntry.getElement();
    final Function<EALScorer2015Style.ArgResult,EALScorer2015Style.ArgResult> filterFunction=new Function<EALScorer2015Style.ArgResult,EALScorer2015Style.ArgResult>(){
      @Override public EALScorer2015Style.ArgResult apply(      final EALScorer2015Style.ArgResult input){
        return input.copyFiltered(compose(equalTo(type),TypeRoleFillerRealis.Type));
      }
    }
;
    final File eventTypeDir=new File(eventTypesDir,type.asString());
    eventTypeDir.mkdirs();
    writeArgumentScoresForTransformedResults(perDocResults,filterFunction,eventTypeDir);
  }
}",0.9416498993963782
24910,"private static Response transformResponsePerson(Response r){
  if (r.role().equalTo(VEHICLE_ROLE)) {
    r=r.copyWithSwappedRole(INSTRUMENT_ROLE);
  }
  if (r.role().equalTo(ARTIFACT_ROLE)) {
    r=r.copyWithSwappedRole(PERSON_ROLE);
  }
  if (r.type().equalTo(MOVEMENT_TRANSPORT)) {
    return r.copyWithSwappedRole(MOVEMENT_TRANSPORT_PERSON);
  }
 else {
    return r;
  }
}","private static Response transformResponsePerson(Response r){
  if (r.role().equalTo(VEHICLE_ROLE)) {
    r=r.copyWithSwappedRole(INSTRUMENT_ROLE);
  }
  if (r.role().equalTo(ARTIFACT_ROLE)) {
    r=r.copyWithSwappedRole(PERSON_ROLE);
  }
  if (r.type().equalTo(MOVEMENT_TRANSPORT)) {
    return r.copyWithSwappedType(MOVEMENT_TRANSPORT_PERSON);
  }
 else {
    return r;
  }
}",0.9920212765957448
24911,"public EventArgScoringAlignment<EquivClassType> copyFiltered(final Predicate<EquivClassType> filter){
  return new EventArgScoringAlignment<EquivClassType>(docID(),argumentOutput,answerKey,Iterables.filter(truePositiveECs,filter),Iterables.filter(falseNegativeECs,filter),Iterables.filter(falseNegativeECs,filter),Iterables.filter(unassessed,filter),Multimaps.filterKeys(ecsToAnswerKey,filter),Multimaps.filterKeys(ecsToSystem,filter));
}","public EventArgScoringAlignment<EquivClassType> copyFiltered(final Predicate<EquivClassType> filter){
  return new EventArgScoringAlignment<EquivClassType>(docID(),argumentOutput,answerKey,Iterables.filter(truePositiveECs,filter),Iterables.filter(falsePositiveECs,filter),Iterables.filter(falseNegativeECs,filter),Iterables.filter(unassessed,filter),Multimaps.filterKeys(ecsToAnswerKey,filter),Multimaps.filterKeys(ecsToSystem,filter));
}",0.9908675799086758
24912,"@Override public boolean apply(final Response input){
  return input.type().equalTo(TRANSPORT_SYMBOL) && !input.role().equalTo(PRICE);
}","@Override public boolean apply(final Response input){
  return input.type().equalTo(MOVEMENT_TRANSPORT) && !input.role().equalTo(PRICE_ROLE);
}",0.9247311827956988
24913,"private static Response transformResponsePerson(Response r){
  if (r.role().equalTo(ARTIFACT)) {
    r=r.copyWithSwappedRole(INSTRUMENT);
  }
  if (r.type().equalTo(TRANSPORT_SYMBOL)) {
    return r.copyWithSwappedRole(PERSON_SYMBOL);
  }
 else {
    return r;
  }
}","private static Response transformResponsePerson(Response r){
  if (r.role().equalTo(VEHICLE_ROLE)) {
    r=r.copyWithSwappedRole(INSTRUMENT_ROLE);
  }
  if (r.role().equalTo(ARTIFACT_ROLE)) {
    r=r.copyWithSwappedRole(PERSON_ROLE);
  }
  if (r.type().equalTo(MOVEMENT_TRANSPORT)) {
    return r.copyWithSwappedRole(MOVEMENT_TRANSPORT_PERSON);
  }
 else {
    return r;
  }
}",0.735202492211838
24914,"@Override public Predicate<AssessedResponse> assessedFilter(){
  return Predicates.alwaysTrue();
}","@Override public Predicate<AssessedResponse> assessedFilter(){
  return new Predicate<AssessedResponse>(){
    @Override public boolean apply(    final AssessedResponse input){
      return input.response().type() == MOVEMENT_TRANSPORT && input.isCorrectUpToInexactJustifications() && !input.response().role().equalTo(PRICE_ROLE);
    }
  }
;
}",0.3891402714932127
24915,"private static Response transformResponseArtifact(Response r){
  if (r.role().equalTo(VEHICLE)) {
    r=r.copyWithSwappedRole(INSTRUMENT);
  }
  if (r.type().equalTo(TRANSPORT_SYMBOL)) {
    return r.copyWithSwappedType(ARTIFACT_SYMBOL);
  }
 else {
    return r;
  }
}","private static Response transformResponseArtifact(Response r){
  if (r.role().equalTo(VEHICLE_ROLE)) {
    r=r.copyWithSwappedRole(INSTRUMENT_ROLE);
  }
  if (r.type().equalTo(MOVEMENT_TRANSPORT)) {
    return r.copyWithSwappedType(MOVEMENT_TRANSPORT_ARTIFACT);
  }
 else {
    return r;
  }
}",0.9074733096085408
24916,"@Override public Predicate<Response> unassessedFilter(){
  return Predicates.not(CorrectTransportFilter.unassessedFilter());
}","@Override public Predicate<Response> unassessedFilter(){
  return new Predicate<Response>(){
    @Override public boolean apply(    final Response input){
      return input.type().equalTo(MOVEMENT_TRANSPORT) && !input.role().equalTo(PRICE_ROLE);
    }
  }
;
}",0.3678756476683937
24917,"private static void trueMain(final String[] args) throws IOException {
  final AnnotationStore input=AssessmentSpecFormats.openAnnotationStore(new File(args[0]),AssessmentSpecFormats.Format.KBP2014);
  final AnnotationStore output=AssessmentSpecFormats.createAnnotationStore(new File(args[1]),AssessmentSpecFormats.Format.KBP2015);
  int transformedAssessments=0;
  int transformedUnassessed=0;
  for (  final Symbol docid : input.docIDs()) {
    final AnswerKey old=input.readOrEmpty(docid);
    final AnswerKey restrictedToRelevantTypes=old.filter(CorrectTransportFilter);
    final AnswerKey restrictedToNotRelevantTypes=old.filter(notCorrectTransportFilter);
    final ImmutableSet.Builder<Response> nuResponses=ImmutableSet.builder();
    final ImmutableSet<Response> assessed=ImmutableSet.copyOf(Iterables.transform(restrictedToNotRelevantTypes.annotatedResponses(),AssessedResponse.Response));
    nuResponses.addAll(restrictedToNotRelevantTypes.unannotatedResponses());
    for (    final AssessedResponse assessedResponse : restrictedToRelevantTypes.annotatedResponses()) {
      transformedAssessments+=1;
      final Response person=transformResponsePerson(assessedResponse.response());
      if (!assessed.contains(person)) {
        nuResponses.add();
      }
      final Response artifact=transformResponseArtifact(assessedResponse.response());
      if (!assessed.contains(artifact)) {
        nuResponses.add(artifact);
      }
    }
    for (    final Response response : restrictedToRelevantTypes.unannotatedResponses()) {
      transformedUnassessed+=1;
      final Response person=transformResponsePerson(response);
      if (!assessed.contains(person)) {
        nuResponses.add();
      }
      final Response artifact=transformResponseArtifact(response);
      if (!assessed.contains(artifact)) {
        nuResponses.add(artifact);
      }
    }
    final AnswerKey nu=AnswerKey.from(docid,restrictedToNotRelevantTypes.annotatedResponses(),nuResponses.build(),old.corefAnnotation());
    output.write(nu);
  }
  input.close();
  output.close();
  log.info(""String_Node_Str"",transformedAssessments,transformedUnassessed);
}","private static void trueMain(final String[] args) throws IOException {
  final AnnotationStore input=AssessmentSpecFormats.openAnnotationStore(new File(args[0]),AssessmentSpecFormats.Format.KBP2014);
  final AnnotationStore output=AssessmentSpecFormats.createAnnotationStore(new File(args[1]),AssessmentSpecFormats.Format.KBP2015);
  int transformedAssessments=0;
  int transformedUnassessed=0;
  for (  final Symbol docid : input.docIDs()) {
    final AnswerKey old=input.readOrEmpty(docid);
    final AnswerKey restrictedToRelevantTypes=old.filter(CorrectTransportFilter);
    final AnswerKey.Builder augmentedKey=old.modifiedCopyBuilder();
    final ImmutableSet<Response> movementTransportResponses=FluentIterable.from(restrictedToRelevantTypes.annotatedResponses()).transform(AssessedResponse.Response).append(restrictedToRelevantTypes.unannotatedResponses()).toSet();
    for (    final Response movementTransportResponse : movementTransportResponses) {
      ++transformedAssessments;
      augmentedKey.addUnannotated(transformResponsePerson(movementTransportResponse));
      augmentedKey.addUnannotated(transformResponseArtifact(movementTransportResponse));
    }
    output.write(augmentedKey.build());
  }
  input.close();
  output.close();
  log.info(""String_Node_Str"",transformedAssessments,transformedUnassessed);
}",0.4385611510791367
24918,"public LinkingScore scoreLinking(AnswerKey answerKey,Set<TypeRoleFillerRealis> linkableEquivalenceClasses,ResponseLinking referenceLinking,ResponseLinking systemLinking){
  log.info(""String_Node_Str"",answerKey.docId());
  checkArgument(answerKey.docId() == systemLinking.docID(),""String_Node_Str"" + ""String_Node_Str"",systemLinking.docID(),answerKey.docId());
  checkArgument(answerKey.docId() == referenceLinking.docID(),""String_Node_Str"" + ""String_Node_Str"",answerKey.docId(),referenceLinking.docID());
  checkArgument(systemLinking.docID() == systemLinking.docID(),""String_Node_Str"" + ""String_Node_Str"",systemLinking.docID(),systemLinking.docID());
  checkArgument(referenceLinking.incompleteResponses().isEmpty(),""String_Node_Str"",referenceLinking.docID(),referenceLinking.incompleteResponses().size());
  checkArgument(systemLinking.incompleteResponses().isEmpty(),""String_Node_Str"",systemLinking.docID());
  final EventArgumentLinking referenceArgumentLinking=aligner.align(referenceLinking,answerKey);
  final EventArgumentLinking systemArgumentLinking=aligner.align(systemLinking,answerKey);
  final EventArgumentLinking filteredReferenceArgumentLinking=referenceArgumentLinking.filteredCopy(in(linkableEquivalenceClasses));
  final EventArgumentLinking filteredSystemArgumentLinking=systemArgumentLinking.filteredCopy(in(linkableEquivalenceClasses));
  return LinkingScore.from(referenceLinking,referenceArgumentLinking,systemLinking,systemArgumentLinking,linkF1.score(filteredSystemArgumentLinking.linkedAsSetOfSets(),filteredReferenceArgumentLinking.linkedAsSetOfSets()));
}","public LinkingScore scoreLinking(ScoringData scoringData){
  log.info(""String_Node_Str"",scoringData.answerKey().get().docId());
  checkArgument(scoringData.systemLinking().isPresent());
  checkArgument(scoringData.referenceLinking().isPresent());
  checkArgument(scoringData.answerKey().isPresent());
  final ResponseLinking referenceLinking=scoringData.referenceLinking().get();
  final AnswerKey answerKey=scoringData.answerKey().get();
  final ResponseLinking systemLinking=deleteIncorrectResponses(scoringData.systemOutput().get(),answerKey).apply(scoringData.systemLinking().get());
  checkArgument(referenceLinking.incompleteResponses().isEmpty(),""String_Node_Str"",referenceLinking.docID(),referenceLinking.incompleteResponses().size());
  checkArgument(systemLinking.incompleteResponses().isEmpty(),""String_Node_Str"",systemLinking.docID());
  final EventArgumentLinking referenceArgumentLinking=aligner.align(referenceLinking,answerKey);
  final EventArgumentLinking systemArgumentLinking=aligner.align(systemLinking,answerKey);
  final EventArgumentLinking filteredReferenceArgumentLinking=referenceArgumentLinking.filteredCopy(REALIS_IS_NOT_GENERIC);
  final EventArgumentLinking filteredSystemArgumentLinking=systemArgumentLinking.filteredCopy(REALIS_IS_NOT_GENERIC);
  return LinkingScore.from(referenceLinking,referenceArgumentLinking,systemLinking,systemArgumentLinking,linkF1.score(filteredSystemArgumentLinking.linkedAsSetOfSets(),filteredReferenceArgumentLinking.linkedAsSetOfSets()));
}",0.2539682539682539
24919,"private static void trueMain(String[] argv) throws IOException {
  if (argv.length != 1) {
    System.err.println(USAGE);
    System.exit(1);
  }
  final Parameters params=Parameters.loadSerifStyle(new File(argv[0]));
  final AnnotationStore argumentAnnotationStore=AssessmentSpecFormats.openAnnotationStore(params.getExistingDirectory(""String_Node_Str""),AssessmentSpecFormats.Format.KBP2015);
  final Optional<LinkingStore> optLinkingAnnotationStore=getOptionalLinkingStore(""String_Node_Str"",params);
  final Optional<LinkingStore> optLinkingOut=getOptionalLinkingStore(""String_Node_Str"",params);
  checkArgument(optLinkingAnnotationStore.isPresent() == optLinkingOut.isPresent(),""String_Node_Str"");
  final Multimap<Symbol,Symbol> typesToValidRoles=FileUtils.loadSymbolMultimap(Files.asCharSource(params.getExistingFile(""String_Node_Str""),Charsets.UTF_8));
  if (optLinkingAnnotationStore.isPresent() && !argumentAnnotationStore.docIDs().containsAll(optLinkingAnnotationStore.get().docIDs())) {
    throw new RuntimeException(""String_Node_Str"");
  }
  final AnnotationStore outputArgumentStore=AssessmentSpecFormats.createAnnotationStore(params.getCreatableDirectory(""String_Node_Str""),AssessmentSpecFormats.Format.KBP2015);
  int numDeletedTotal=0;
  for (  final Symbol docID : argumentAnnotationStore.docIDs()) {
    final AnswerKey original=argumentAnnotationStore.read(docID);
    final ResponseMapping toDelete=selectWhichToDelete(original,typesToValidRoles);
    outputArgumentStore.write(toDelete.apply(original));
    if (optLinkingAnnotationStore.isPresent()) {
      final Optional<ResponseLinking> originalLinking=optLinkingAnnotationStore.get().read(original);
      if (originalLinking.isPresent()) {
        optLinkingOut.get().write(toDelete.apply(originalLinking.get()));
      }
    }
  }
  argumentAnnotationStore.close();
  outputArgumentStore.close();
  if (optLinkingAnnotationStore.isPresent()) {
    optLinkingAnnotationStore.get().close();
    optLinkingOut.get().close();
  }
}","private static void trueMain(String[] argv) throws IOException {
  if (argv.length != 1) {
    System.err.println(USAGE);
    System.exit(1);
  }
  final Parameters params=Parameters.loadSerifStyle(new File(argv[0]));
  final AnnotationStore argumentAnnotationStore=AssessmentSpecFormats.openAnnotationStore(params.getExistingDirectory(""String_Node_Str""),AssessmentSpecFormats.Format.KBP2015);
  final Optional<LinkingStore> optLinkingAnnotationStore=getOptionalLinkingStore(""String_Node_Str"",params);
  final Optional<LinkingStore> optLinkingOut=getOptionalLinkingStore(""String_Node_Str"",params);
  checkArgument(optLinkingAnnotationStore.isPresent() == optLinkingOut.isPresent(),""String_Node_Str"");
  final Multimap<Symbol,Symbol> typesToValidRoles=loadTypesToValidRolesMap(params);
  if (optLinkingAnnotationStore.isPresent() && !argumentAnnotationStore.docIDs().containsAll(optLinkingAnnotationStore.get().docIDs())) {
    throw new RuntimeException(""String_Node_Str"");
  }
  final AnnotationStore outputArgumentStore=AssessmentSpecFormats.createAnnotationStore(params.getCreatableDirectory(""String_Node_Str""),AssessmentSpecFormats.Format.KBP2015);
  int numDeletedTotal=0;
  for (  final Symbol docID : argumentAnnotationStore.docIDs()) {
    final AnswerKey original=argumentAnnotationStore.read(docID);
    final ResponseMapping toDelete=selectWhichToDelete(original,typesToValidRoles);
    outputArgumentStore.write(toDelete.apply(original));
    if (optLinkingAnnotationStore.isPresent()) {
      final Optional<ResponseLinking> originalLinking=optLinkingAnnotationStore.get().read(original);
      if (originalLinking.isPresent()) {
        optLinkingOut.get().write(toDelete.apply(originalLinking.get()));
      }
    }
  }
  argumentAnnotationStore.close();
  outputArgumentStore.close();
  if (optLinkingAnnotationStore.isPresent()) {
    optLinkingAnnotationStore.get().close();
    optLinkingOut.get().close();
  }
}",0.9684959349593496
24920,"private static ResponseMapping computeResponseMapping(SystemOutput input,Function<KBPString,KBPString> CASNormalizer){
  checkNotNull(input);
  final Function<Response,TypeRoleFillerRealis> trfrFunction=TypeRoleFillerRealis.extractFromSystemResponse(CASNormalizer);
  final ResponseLinking responseLinking=getResponseLinking(input);
  final Set<Response> toKeep=Sets.newHashSet();
  for (  final ResponseSet eventFrame : responseLinking.responseSets()) {
    final Multimap<TypeRoleFillerRealis,Response> groupedResponses=Multimaps.index(input.arguments().responses(),trfrFunction);
    for (    final Map.Entry<TypeRoleFillerRealis,Collection<Response>> group : groupedResponses.asMap().entrySet()) {
      final Collection<Response> competitors=group.getValue();
      final Scored<Response> selected=input.arguments().score(input.arguments().selectFromMultipleSystemResponses(competitors).get());
      toKeep.add(selected.item());
    }
  }
  final ImmutableSet<Response> toDelete=Sets.difference(input.arguments().responses(),toKeep).immutableCopy();
  log.info(""String_Node_Str"",input.docID(),toDelete.size(),input.arguments().size());
  return ResponseMapping.create(ImmutableMap.<Response,Response>of(),toDelete);
}","private static ResponseMapping computeResponseMapping(SystemOutput input,Function<KBPString,KBPString> CASNormalizer){
  checkNotNull(input);
  final Function<Response,TypeRoleFillerRealis> trfrFunction=TypeRoleFillerRealis.extractFromSystemResponse(CASNormalizer);
  final ResponseLinking responseLinking=getResponseLinking(input);
  final Set<Response> toKeep=Sets.newHashSet();
  for (  final ResponseSet eventFrame : responseLinking.responseSets()) {
    final Multimap<TypeRoleFillerRealis,Response> groupedResponses=Multimaps.index(eventFrame.asSet(),trfrFunction);
    for (    final Map.Entry<TypeRoleFillerRealis,Collection<Response>> group : groupedResponses.asMap().entrySet()) {
      final Collection<Response> competitors=group.getValue();
      final Scored<Response> selected=input.arguments().score(input.arguments().selectFromMultipleSystemResponses(competitors).get());
      toKeep.add(selected.item());
    }
  }
  final ImmutableSet<Response> toDelete=Sets.difference(input.arguments().responses(),toKeep).immutableCopy();
  log.info(""String_Node_Str"",input.docID(),toDelete.size(),input.arguments().size());
  return ResponseMapping.create(ImmutableMap.<Response,Response>of(),toDelete);
}",0.982340862422998
24921,"@Override public Result computeResponseTransformation(final AnswerKey answerKey){
  final Function<Response,TypeRoleFillerRealis> normalizedFingerprintExtractor=TypeRoleFillerRealis.extractFromSystemResponse(answerKey.corefAnnotation().strictCASNormalizerFunction());
  final ImmutableSet<TypeRoleFillerRealis> trfrsToDelete=responsesToDelete(answerKey);
  final Predicate<Response> isInDeletedTRFR=compose(in(trfrsToDelete),normalizedFingerprintExtractor);
  final ImmutableSet<Response> responsesToDelete=FluentIterable.from(answerKey.allResponses()).filter(isInDeletedTRFR).toSet();
  return Result.create(ImmutableMap.<Response,Response>of(),responsesToDelete);
}","@Override public ResponseMapping computeResponseTransformation(final AnswerKey answerKey){
  final Function<Response,TypeRoleFillerRealis> normalizedFingerprintExtractor=TypeRoleFillerRealis.extractFromSystemResponse(answerKey.corefAnnotation().strictCASNormalizerFunction());
  final ImmutableSet<TypeRoleFillerRealis> trfrsToDelete=responsesToDelete(answerKey);
  final Predicate<Response> isInDeletedTRFR=compose(in(trfrsToDelete),normalizedFingerprintExtractor);
  final ImmutableSet<Response> responsesToDelete=FluentIterable.from(answerKey.allResponses()).filter(isInDeletedTRFR).toSet();
  return ResponseMapping.create(ImmutableMap.<Response,Response>of(),responsesToDelete);
}",0.977810650887574
24922,"@Override public Result computeResponseTransformation(final AnswerKey answerKey){
  final ImmutableMap.Builder<Response,Response> replacements=ImmutableMap.builder();
  for (  final Response response : answerKey.allResponses()) {
    final Optional<Response> fixedResponse=fixLowercaseXInTime(response);
    if (fixedResponse.isPresent()) {
      log.info(""String_Node_Str"",response.canonicalArgument().string(),fixedResponse.get().canonicalArgument().string());
      replacements.put(response,fixedResponse.get());
    }
  }
  return Result.create(replacements.build(),ImmutableSet.<Response>of());
}","@Override public ResponseMapping computeResponseTransformation(final AnswerKey answerKey){
  final ImmutableMap.Builder<Response,Response> replacements=ImmutableMap.builder();
  for (  final Response response : answerKey.allResponses()) {
    final Optional<Response> fixedResponse=fixLowercaseXInTime(response);
    if (fixedResponse.isPresent()) {
      log.info(""String_Node_Str"",response.canonicalArgument().string(),fixedResponse.get().canonicalArgument().string());
      replacements.put(response,fixedResponse.get());
    }
  }
  return ResponseMapping.create(replacements.build(),ImmutableSet.<Response>of());
}",0.9754500818330606
24923,"public static Function<SystemOutput,SystemOutput> forSystemOutput(){
  return new Function<SystemOutput,SystemOutput>(){
    @Override public SystemOutput apply(    SystemOutput input){
      final ImmutableSet.Builder<Scored<Response>> newResponses=ImmutableSet.builder();
      for (      final Scored<Response> assessedResponse : input.scoredResponses()) {
        newResponses.add(Scored.from(assessedResponse.item().copyWithSwappedRealis(KBPRealis.Actual),assessedResponse.score()));
      }
      return SystemOutput.from(input.docId(),newResponses.build());
    }
  }
;
}","@Deprecated public static Function<SystemOutput,SystemOutput> forSystemOutput(){
  return new Function<SystemOutput,SystemOutput>(){
    @Override public SystemOutput apply(    SystemOutput input){
      final ImmutableSet.Builder<Scored<Response>> newResponses=ImmutableSet.builder();
      for (      final Scored<Response> assessedResponse : input.scoredResponses()) {
        newResponses.add(Scored.from(assessedResponse.item().copyWithSwappedRealis(KBPRealis.Actual),assessedResponse.score()));
      }
      return SystemOutput.from(input.docId(),newResponses.build());
    }
  }
;
}",0.9897260273972602
24924,"@Override public Result computeResponseTransformation(final AnswerKey answerKey){
  final Function<Response,TypeRoleFillerRealis> normalizedFingerprintExtractor=TypeRoleFillerRealis.extractFromSystemResponse(answerKey.corefAnnotation().strictCASNormalizerFunction());
  final ImmutableSet<TypeRoleFillerRealis> trfrsToDelete=computeBannedResponseSignatures(answerKey);
  final Predicate<Response> isInDeletedTRFR=compose(in(trfrsToDelete),normalizedFingerprintExtractor);
  final ImmutableSet<Response> responsesToDelete=FluentIterable.from(answerKey.allResponses()).filter(isInDeletedTRFR).toSet();
  return Result.create(ImmutableMap.<Response,Response>of(),responsesToDelete);
}","@Override public ResponseMapping computeResponseTransformation(final AnswerKey answerKey){
  final ImmutableSet<TypeRoleFillerRealis> bannedResponseSignatures=computeBannedResponseSignatures(answerKey);
  final ImmutableSet.Builder<Response> toDelete=ImmutableSet.builder();
  for (  final Response response : answerKey.allResponses()) {
    if (bannedResponseSignatures.contains(responseSignature(response))) {
      toDelete.add(response);
    }
  }
  return ResponseMapping.create(ImmutableMap.<Response,Response>of(),toDelete.build());
}",0.320785597381342
24925,Result computeResponseTransformation(AnswerKey answerKey);,ResponseMapping computeResponseTransformation(AnswerKey answerKey);,0.88
24926,"public EventArgScoringAlignment<TypeRoleFillerRealis> score(ScoringData scoringData){
  final ScoringData preprocessorResult=preprocessor.transform(scoringData);
  final Function<Response,TypeRoleFillerRealis> equivalenceClassFunction=TypeRoleFillerRealis.extractFromSystemResponse(scoringData.answerKey().get().corefAnnotation().strictCASNormalizerFunction());
  final StandardScoringAligner<TypeRoleFillerRealis> scoringAligner=StandardScoringAligner.forEquivalenceClassFunction(equivalenceClassFunction);
  return scoringAligner.align(scoringData.answerKey().get(),scoringData.systemOutput().get());
}","public EventArgScoringAlignment<TypeRoleFillerRealis> score(ScoringData scoringData){
  final ScoringData preprocessorResult=preprocessor.transform(scoringData);
  final Function<Response,TypeRoleFillerRealis> equivalenceClassFunction=TypeRoleFillerRealis.extractFromSystemResponse(preprocessorResult.answerKey().get().corefAnnotation().strictCASNormalizerFunction());
  final StandardScoringAligner<TypeRoleFillerRealis> scoringAligner=StandardScoringAligner.forEquivalenceClassFunction(equivalenceClassFunction);
  return scoringAligner.align(preprocessorResult.answerKey().get(),preprocessorResult.systemOutput().get());
}",0.9292107404393816
24927,"public ScoringData transform(final ScoringData input){
  checkArgument(input.answerKey().isPresent() && input.systemOutput().isPresent(),""String_Node_Str"" + ""String_Node_Str"");
  assertRealisIsNeutralized(input);
  final AnswerKey answerKey=input.answerKey().get();
  final SystemOutput systemOutput=input.systemOutput().get();
  final ImmutableMultimap<String,AssessedResponse> answerKeyByTypeRoleBaseFiller=Multimaps.index(filter(answerKey.annotatedResponses(),AssessedResponse.IsCorrectUpToInexactJustifications),Functions.compose(TypeRoleBaseFiller,AssessedResponse.Response));
  final ImmutableMultimap<String,AssessedResponse> answerKeyByTypeRole=Multimaps.index(filter(answerKey.annotatedResponses(),AssessedResponse.IsCorrectUpToInexactJustifications),Functions.compose(TypeRole,AssessedResponse.Response));
  final ImmutableMap.Builder<Response,Response> responseReplacements=ImmutableMap.builder();
  final ImmutableSet.Builder<Response> toDelete=ImmutableSet.builder();
  for (  final Response response : systemOutput.responses()) {
    final AssessedResponse assessedResponse=answerKey.assess(response).get();
    if (FieldAssessment.isAcceptable(assessedResponse.assessment().baseFillerCorrect()) && !FieldAssessment.isAcceptable(assessedResponse.assessment().entityCorrectFiller())) {
      final Collection<AssessedResponse> correctPoolResponsesSharingSameTypeRoleBF=answerKeyByTypeRoleBaseFiller.get(TypeRoleBaseFiller.apply(response));
      if (!correctPoolResponsesSharingSameTypeRoleBF.isEmpty()) {
        responseReplacements.put(response,Iterables.getFirst(correctPoolResponsesSharingSameTypeRoleBF,null).response());
        ++swappedCASForSameBF;
      }
 else {
        final Collection<AssessedResponse> correctPoolResponsesSharingSameTypeRole=answerKeyByTypeRole.get(TypeRole.apply(response));
        if (!correctPoolResponsesSharingSameTypeRole.isEmpty()) {
          responseReplacements.put(response,Iterables.getFirst(correctPoolResponsesSharingSameTypeRole,null).response());
          ++swappedCASDifferentBF;
        }
 else {
          toDelete.add(response);
          ++deleted;
        }
      }
    }
 else {
      ++passedThrough;
    }
  }
  final ResponseMapping responseMapping=ResponseMapping.create(responseReplacements.build(),toDelete.build());
  final ScoringData.Builder ret=input.modifiedCopy();
  ret.withSystemOutput(responseMapping.apply(systemOutput));
  if (input.systemLinking().isPresent()) {
    ret.withSystemLinking(responseMapping.apply(input.systemLinking().get()));
  }
  return ret.build();
}","public ScoringData transform(final ScoringData input){
  checkArgument(input.answerKey().isPresent() && input.systemOutput().isPresent(),""String_Node_Str"" + ""String_Node_Str"");
  assertRealisIsNeutralized(input);
  final AnswerKey answerKey=input.answerKey().get();
  final SystemOutput systemOutput=input.systemOutput().get();
  final ImmutableMultimap<String,AssessedResponse> answerKeyByTypeRoleBaseFiller=Multimaps.index(filter(answerKey.annotatedResponses(),AssessedResponse.IsCorrectUpToInexactJustifications),Functions.compose(TypeRoleBaseFiller,AssessedResponse.Response));
  final ImmutableMultimap<String,AssessedResponse> answerKeyByTypeRole=Multimaps.index(filter(answerKey.annotatedResponses(),AssessedResponse.IsCorrectUpToInexactJustifications),Functions.compose(TypeRole,AssessedResponse.Response));
  final ImmutableMap.Builder<Response,Response> responseReplacements=ImmutableMap.builder();
  final ImmutableSet.Builder<Response> toDelete=ImmutableSet.builder();
  for (  final Response response : systemOutput.responses()) {
    final AssessedResponse assessedResponse=answerKey.assess(response).get();
    if (FieldAssessment.isAcceptable(assessedResponse.assessment().baseFillerCorrect()) && !FieldAssessment.isAcceptable(assessedResponse.assessment().entityCorrectFiller())) {
      final Collection<AssessedResponse> correctPoolResponsesSharingSameTypeRoleBF=answerKeyByTypeRoleBaseFiller.get(TypeRoleBaseFiller.apply(response));
      if (!correctPoolResponsesSharingSameTypeRoleBF.isEmpty()) {
        responseReplacements.put(response,Iterables.getFirst(correctPoolResponsesSharingSameTypeRoleBF,null).response());
        ++swappedCASForSameBF;
      }
 else {
        final Collection<AssessedResponse> correctPoolResponsesSharingSameTypeRole=answerKeyByTypeRole.get(TypeRole.apply(response));
        if (!correctPoolResponsesSharingSameTypeRole.isEmpty()) {
          responseReplacements.put(response,Iterables.getFirst(correctPoolResponsesSharingSameTypeRole,null).response());
          ++swappedCASDifferentBF;
        }
 else {
          toDelete.add(response);
          ++deleted;
        }
      }
    }
 else {
      ++passedThrough;
    }
  }
  final ResponseMapping responseMapping=ResponseMapping.create(responseReplacements.build(),toDelete.build());
  if (!responseMapping.isIdentity()) {
    log.info(""String_Node_Str"",responseMapping.summaryString());
  }
  final ScoringData.Builder ret=input.modifiedCopy();
  ret.withSystemOutput(responseMapping.apply(systemOutput));
  if (input.systemLinking().isPresent()) {
    ret.withSystemLinking(responseMapping.apply(input.systemLinking().get()));
  }
  return ret.build();
}",0.9793261868300152
24928,"/** 
 * Replaces one response with another, maintaining the original assessment, if any. The random number generator is used when creating a new coref cluster, if necessary,
 */
public Builder replaceAssessedResponseMaintainingAssessment(final Response original,final Response replacement,final Random rng){
  if (original.equals(replacement)) {
    return this;
  }
  if (annotatedArgs.keySet().contains(original)) {
    final ResponseAssessment assessment=annotatedArgs.get(original).assessment();
    annotatedArgs.remove(original);
    annotatedArgs.put(replacement,AssessedResponse.from(replacement,assessment));
    corefAnnotation.registerCAS(replacement.canonicalArgument(),rng);
  }
 else   if (unannotatedResponses.contains(original)) {
    unannotatedResponses.remove(original);
    if (!annotatedArgs.containsKey(replacement)) {
      unannotatedResponses.add(replacement);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + original + ""String_Node_Str""+ replacement+ ""String_Node_Str""+ original+ ""String_Node_Str"");
  }
  return this;
}","/** 
 * Replaces one response with another, maintaining the original assessment, if any. The random number generator is used when creating a new coref cluster, if necessary,
 */
public Builder replaceAssessedResponseMaintainingAssessment(final Response original,final Response replacement,final Random rng){
  if (original.equals(replacement)) {
    return this;
  }
  if (annotatedArgs.keySet().contains(original)) {
    final ResponseAssessment assessment=annotatedArgs.get(original).assessment();
    if (annotatedArgs.containsKey(replacement)) {
      final ResponseAssessment assessmentOfReplacement=annotatedArgs.get(replacement).assessment();
      if (!assessmentOfReplacement.equals(assessment)) {
        log.warn(""String_Node_Str"" + ""String_Node_Str"",assessmentOfReplacement,assessment);
      }
    }
    annotatedArgs.remove(original);
    annotatedArgs.put(replacement,AssessedResponse.from(replacement,assessment));
    corefAnnotation.registerCAS(replacement.canonicalArgument(),rng);
  }
 else   if (unannotatedResponses.contains(original)) {
    unannotatedResponses.remove(original);
    if (!annotatedArgs.containsKey(replacement)) {
      unannotatedResponses.add(replacement);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + original + ""String_Node_Str""+ replacement+ ""String_Node_Str""+ original+ ""String_Node_Str"");
  }
  return this;
}",0.8720882713526767
24929,"@Override public ScoringData transform(ScoringData input){
  checkArgument(input.answerKey().isPresent(),""String_Node_Str"" + ""String_Node_Str"");
  input.answerKey().get().checkCompletelyAssesses(input.systemOutput().get());
  final ResponseMapping responseMapping=rule.computeResponseTransformation(input.answerKey().get());
  ScoringData.Builder ret=input.modifiedCopy().withAnswerKey(responseMapping.apply(input.answerKey().get()));
  if (input.systemOutput().isPresent()) {
    ret.withSystemOutput(responseMapping.apply(input.systemOutput().get()));
  }
  if (input.systemLinking().isPresent()) {
    ret.withSystemLinking(responseMapping.apply(input.systemLinking().get()));
  }
  if (input.referenceLinking().isPresent()) {
    ret.withReferenceLinking(responseMapping.apply(input.referenceLinking().get()));
  }
  return ret.build();
}","@Override public ScoringData transform(ScoringData input){
  checkArgument(input.answerKey().isPresent(),""String_Node_Str"" + ""String_Node_Str"");
  input.answerKey().get().checkCompletelyAssesses(input.systemOutput().get());
  final ResponseMapping responseMapping=rule.computeResponseTransformation(input.answerKey().get());
  if (!responseMapping.isIdentity()) {
    log.info(""String_Node_Str"",rule,responseMapping.summaryString());
    ScoringData.Builder ret=input.modifiedCopy().withAnswerKey(responseMapping.apply(input.answerKey().get()));
    if (input.systemOutput().isPresent()) {
      ret.withSystemOutput(responseMapping.apply(input.systemOutput().get()));
    }
    if (input.systemLinking().isPresent()) {
      ret.withSystemLinking(responseMapping.apply(input.systemLinking().get()));
    }
    if (input.referenceLinking().isPresent()) {
      ret.withReferenceLinking(responseMapping.apply(input.referenceLinking().get()));
    }
    return ret.build();
  }
 else {
    return input;
  }
}",0.9107625743645212
24930,"private FixLowercaseXInTemporals(){
  throw new UnsupportedOperationException();
}","private FixLowercaseXInTemporals(){
}",0.6218487394957983
24931,"@Override public ScoringData transform(final ScoringData scoringData){
  checkArgument(!scoringData.referenceLinking().isPresent() && !scoringData.systemLinking().isPresent(),""String_Node_Str"" + ""String_Node_Str"");
  checkArgument(scoringData.answerKey().isPresent(),""String_Node_Str"");
  final ScoringData.Builder ret=scoringData.modifiedCopy();
  final ResponseMapping responseMapping=responseMapping(scoringData.answerKey().get());
  AnswerKey newAnswerKey=neutralizeAssessments(responseMapping.apply(scoringData.answerKey().get()));
  ret.withAnswerKey(newAnswerKey);
  if (scoringData.systemOutput().isPresent()) {
    ret.withSystemOutput(responseMapping.apply(scoringData.systemOutput().get()));
  }
  return ret.build();
}","@Override public ScoringData transform(final ScoringData scoringData){
  checkArgument(!scoringData.referenceLinking().isPresent() && !scoringData.systemLinking().isPresent(),""String_Node_Str"" + ""String_Node_Str"");
  checkArgument(scoringData.answerKey().isPresent(),""String_Node_Str"");
  final ScoringData.Builder ret=scoringData.modifiedCopy();
  final ResponseMapping responseMapping=responseMapping(scoringData.answerKey().get());
  if (!responseMapping.isIdentity()) {
    log.info(""String_Node_Str"",responseMapping.summaryString());
  }
  AnswerKey newAnswerKey=neutralizeAssessments(responseMapping.apply(scoringData.answerKey().get()));
  ret.withAnswerKey(newAnswerKey);
  if (scoringData.systemOutput().isPresent()) {
    ret.withSystemOutput(responseMapping.apply(scoringData.systemOutput().get()));
  }
  return ret.build();
}",0.9311224489795918
24932,"private MakeAllRealisActual(){
  throw new UnsupportedOperationException();
}","private MakeAllRealisActual(){
}",0.5871559633027523
24933,"private MakeBrokenTimesWrong(){
  throw new UnsupportedOperationException();
}","private MakeBrokenTimesWrong(){
}",0.5945945945945946
24934,"public ResponseLinking apply(ResponseLinking responseLinking){
  final Function<Response,Response> responseMapping=MapUtils.asFunction(replacedResponses,Functions.<Response>identity());
  final Predicate<Response> notDeleted=not(in(deletedResponses));
  final ImmutableSet.Builder<ResponseSet> newResponseSetsB=ImmutableSet.builder();
  for (  final ResponseSet responseSet : responseLinking.responseSets()) {
    newResponseSetsB.add(ResponseSet.from(FluentIterable.from(responseSet).filter(notDeleted).transform(responseMapping).toSet()));
  }
  final ImmutableSet<ResponseSet> newResponseSets=newResponseSetsB.build();
  final Predicate<Response> notLinked=not(in(ImmutableSet.copyOf(Iterables.concat(newResponseSets))));
  final ImmutableSet<Response> newIncompletes=FluentIterable.from(responseLinking.incompleteResponses()).filter(notDeleted).filter(notLinked).toSet();
  return ResponseLinking.from(responseLinking.docID(),newResponseSets,newIncompletes);
}","public ResponseLinking apply(ResponseLinking responseLinking){
  final Function<Response,Response> responseMapping=MapUtils.asFunction(replacedResponses,Functions.<Response>identity());
  final Predicate<Response> notDeleted=not(in(deletedResponses));
  final ImmutableSet.Builder<ResponseSet> newResponseSetsB=ImmutableSet.builder();
  for (  final ResponseSet responseSet : responseLinking.responseSets()) {
    final ImmutableSet<Response> filteredResponses=FluentIterable.from(responseSet).filter(notDeleted).transform(responseMapping).toSet();
    if (!filteredResponses.isEmpty()) {
      newResponseSetsB.add(ResponseSet.from(filteredResponses));
    }
  }
  final ImmutableSet<ResponseSet> newResponseSets=newResponseSetsB.build();
  final Predicate<Response> notLinked=not(in(ImmutableSet.copyOf(Iterables.concat(newResponseSets))));
  final ImmutableSet<Response> newIncompletes=FluentIterable.from(responseLinking.incompleteResponses()).filter(notDeleted).filter(notLinked).toSet();
  return ResponseLinking.from(responseLinking.docID(),newResponseSets,newIncompletes);
}",0.8582600195503421
24935,"public static Function<AnswerKey,AnswerKey> forAnswerKey(){
  return new Function<AnswerKey,AnswerKey>(){
    final Random rng=new Random();
    @Override public AnswerKey apply(    final AnswerKey input){
      final AnswerKey.Builder ret=input.modifiedCopyBuilder();
      for (      final Response r : input.allResponses()) {
        final Optional<Response> fixedResponse=fixLowercaseXInTime(r);
        log.info(""String_Node_Str"",r.canonicalArgument().string(),fixedResponse.get().canonicalArgument().string());
        ret.replaceAsssessedResponseMaintainingAssessment(r,fixedResponse.get(),rng);
      }
      return ret.build();
    }
  }
;
}","public static Function<AnswerKey,AnswerKey> forAnswerKey(){
  return new Function<AnswerKey,AnswerKey>(){
    final Random rng=new Random();
    @Override public AnswerKey apply(    final AnswerKey input){
      log.info(""String_Node_Str"",input.docId());
      final AnswerKey.Builder ret=input.modifiedCopyBuilder();
      for (      final Response r : input.allResponses()) {
        final Optional<Response> fixedResponse=fixLowercaseXInTime(r);
        if (fixedResponse.isPresent()) {
          log.info(""String_Node_Str"",r.canonicalArgument().string(),fixedResponse.get().canonicalArgument().string());
          ret.replaceAsssessedResponseMaintainingAssessment(r,fixedResponse.get(),rng);
        }
      }
      return ret.build();
    }
  }
;
}",0.925925925925926
24936,"@Override public AnswerKey apply(final AnswerKey input){
  final AnswerKey.Builder ret=input.modifiedCopyBuilder();
  for (  final Response r : input.allResponses()) {
    final Optional<Response> fixedResponse=fixLowercaseXInTime(r);
    log.info(""String_Node_Str"",r.canonicalArgument().string(),fixedResponse.get().canonicalArgument().string());
    ret.replaceAsssessedResponseMaintainingAssessment(r,fixedResponse.get(),rng);
  }
  return ret.build();
}","@Override public AnswerKey apply(final AnswerKey input){
  log.info(""String_Node_Str"",input.docId());
  final AnswerKey.Builder ret=input.modifiedCopyBuilder();
  for (  final Response r : input.allResponses()) {
    final Optional<Response> fixedResponse=fixLowercaseXInTime(r);
    if (fixedResponse.isPresent()) {
      log.info(""String_Node_Str"",r.canonicalArgument().string(),fixedResponse.get().canonicalArgument().string());
      ret.replaceAsssessedResponseMaintainingAssessment(r,fixedResponse.get(),rng);
    }
  }
  return ret.build();
}",0.9085487077534792
24937,"public static Function<SystemOutput,SystemOutput> forSystemOutput(){
  return new Function<SystemOutput,SystemOutput>(){
    @Override public SystemOutput apply(    final SystemOutput input){
      final SystemOutput.Builder ret=input.modifiedCopyBuilder();
      for (      final Response response : input.responses()) {
        final Optional<Response> fixedResponse=fixLowercaseXInTime(response);
        if (fixedResponse.isPresent()) {
          log.info(""String_Node_Str"",response.canonicalArgument().string(),fixedResponse.get().canonicalArgument().string());
          ret.replaceResponseKeepingScoreAndMetadata(response,fixedResponse.get());
        }
      }
      return ret.build();
    }
  }
;
}","public static Function<SystemOutput,SystemOutput> forSystemOutput(){
  return new Function<SystemOutput,SystemOutput>(){
    @Override public SystemOutput apply(    final SystemOutput input){
      log.info(""String_Node_Str"",input.docId());
      final SystemOutput.Builder ret=input.modifiedCopyBuilder();
      for (      final Response response : input.responses()) {
        final Optional<Response> fixedResponse=fixLowercaseXInTime(response);
        if (fixedResponse.isPresent()) {
          log.info(""String_Node_Str"",response.canonicalArgument().string(),fixedResponse.get().canonicalArgument().string());
          ret.replaceResponseKeepingScoreAndMetadata(response,fixedResponse.get());
        }
      }
      return ret.build();
    }
  }
;
}",0.9665529010238908
24938,"private static String htmlHeader(){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}","private static String htmlHeader(){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
}",0.9288389513108616
24939,"public void renderTo(final CharSink sink,final AnswerKey answerKey,final ImmutableMultimap<Response,Warning> warnings) throws IOException {
  final StringBuilder sb=new StringBuilder();
  sb.append(htmlHeader());
  sb.append(javascript());
  sb.append(CSS());
  sb.append(bodyHeader());
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(docID);
  sb.append(""String_Node_Str"");
  final ImmutableMultimap<TypeRoleFillerRealis,Response> trfrToAllResponses=Multimaps.index(Iterables.transform(answerKey.annotatedResponses(),AssessedResponse.Response),TypeRoleFillerRealis.extractFromSystemResponse(answerKey.corefAnnotation().laxCASNormalizerFunction()));
  final ImmutableMultimap<TypeRoleFillerRealis,Response> trfrToErrorfulReponses=Multimaps.index(warnings.keySet(),TypeRoleFillerRealis.extractFromSystemResponse(answerKey.corefAnnotation().laxCASNormalizerFunction()));
  final ImmutableMultimap<TypeRoleFillerRealis,Warning> trfrToWarning=MultimapUtils.composeToSetMultimap(trfrToErrorfulReponses,warnings);
  final Multimap<String,TypeRoleFillerRealis> typeToTRFR=Multimaps.index(trfrToAllResponses.keySet(),Functions.compose(Functions.toStringFunction(),TypeRoleFillerRealis.Type));
  for (  final String type : Ordering.natural().sortedCopy(typeToTRFR.keySet())) {
    final ImmutableSet<Warning> typeWarnings=MultimapUtils.composeToSetMultimap(typeToTRFR,trfrToWarning).get(type);
    int typeWarningsCount=warningsDiv(sb,typeWarnings);
    sb.append(href(type));
    sb.append(""String_Node_Str"");
    sb.append(type);
    sb.append(""String_Node_Str"");
    sb.append(closehref());
    sb.append(Strings.repeat(""String_Node_Str"",typeWarningsCount));
    sb.append(""String_Node_Str"");
    sb.append(type);
    sb.append(""String_Node_Str"");
    for (    final TypeRoleFillerRealis trfr : trfrOrdering.sortedCopy(typeToTRFR.get(type))) {
      log.info(""String_Node_Str"",trfr);
      final String trfrID=String.format(""String_Node_Str"",trfr.type().asString(),trfr.role().asString());
      int totalWarnings=warningsDiv(sb,trfrToWarning.get(trfr));
      sb.append(href(trfr.uniqueIdentifier()));
      sb.append(String.format(""String_Node_Str"",trfrID));
      sb.append(closehref());
      sb.append(Strings.repeat(""String_Node_Str"",totalWarnings));
      sb.append(String.format(""String_Node_Str"",trfr.uniqueIdentifier()));
      totalWarnings=warningsDiv(sb,trfrToWarning.get(trfr));
      sb.append(""String_Node_Str"");
      sb.append(String.format(""String_Node_Str"",trfr.type().asString(),trfr.role().asString(),trfr.realis().name(),trfr.argumentCanonicalString().string()));
      sb.append(""String_Node_Str"");
      sb.append(Strings.repeat(""String_Node_Str"",totalWarnings));
      addSection(sb,overallOrdering.sortedCopy(trfrToAllResponses.get(trfr)),warnings);
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
  sb.append(bodyFooter());
  sb.append(htmlFooter());
  sink.write(sb.toString());
}","public void renderTo(final CharSink sink,final AnswerKey answerKey,final ImmutableMultimap<Response,Warning> warnings) throws IOException {
  final StringBuilder sb=new StringBuilder();
  sb.append(htmlHeader());
  sb.append(String.format(""String_Node_Str"",answerKey.docId().asString()));
  sb.append(javascript());
  sb.append(CSS());
  sb.append(bodyHeader());
  sb.append(""String_Node_Str"");
  sb.append(docID);
  sb.append(""String_Node_Str"");
  final ImmutableMultimap<TypeRoleFillerRealis,Response> trfrToAllResponses=Multimaps.index(Iterables.transform(answerKey.annotatedResponses(),AssessedResponse.Response),TypeRoleFillerRealis.extractFromSystemResponse(answerKey.corefAnnotation().laxCASNormalizerFunction()));
  final ImmutableMultimap<TypeRoleFillerRealis,Response> trfrToErrorfulReponses=Multimaps.index(warnings.keySet(),TypeRoleFillerRealis.extractFromSystemResponse(answerKey.corefAnnotation().laxCASNormalizerFunction()));
  final ImmutableMultimap<TypeRoleFillerRealis,Warning> trfrToWarning=MultimapUtils.composeToSetMultimap(trfrToErrorfulReponses,warnings);
  final Multimap<String,TypeRoleFillerRealis> typeToTRFR=Multimaps.index(trfrToAllResponses.keySet(),Functions.compose(Functions.toStringFunction(),TypeRoleFillerRealis.Type));
  for (  final String type : Ordering.natural().sortedCopy(typeToTRFR.keySet())) {
    final ImmutableSet<Warning> typeWarnings=MultimapUtils.composeToSetMultimap(typeToTRFR,trfrToWarning).get(type);
    int typeWarningsCount=warningsDiv(sb,typeWarnings);
    sb.append(href(type));
    sb.append(""String_Node_Str"");
    sb.append(type);
    sb.append(""String_Node_Str"");
    sb.append(closehref());
    sb.append(Strings.repeat(""String_Node_Str"",typeWarningsCount));
    sb.append(""String_Node_Str"");
    sb.append(type);
    sb.append(""String_Node_Str"");
    for (    final TypeRoleFillerRealis trfr : trfrOrdering.sortedCopy(typeToTRFR.get(type))) {
      log.info(""String_Node_Str"",trfr);
      final String trfrID=String.format(""String_Node_Str"",trfr.type().asString(),trfr.role().asString());
      int totalWarnings=warningsDiv(sb,trfrToWarning.get(trfr));
      sb.append(href(trfr.uniqueIdentifier()));
      sb.append(String.format(""String_Node_Str"",trfrID));
      sb.append(closehref());
      sb.append(Strings.repeat(""String_Node_Str"",totalWarnings));
      sb.append(String.format(""String_Node_Str"",trfr.uniqueIdentifier()));
      totalWarnings=warningsDiv(sb,trfrToWarning.get(trfr));
      sb.append(""String_Node_Str"");
      sb.append(String.format(""String_Node_Str"",trfr.type().asString(),trfr.role().asString(),trfr.realis().name(),trfr.argumentCanonicalString().string()));
      sb.append(""String_Node_Str"");
      sb.append(Strings.repeat(""String_Node_Str"",totalWarnings));
      addSection(sb,overallOrdering.sortedCopy(trfrToAllResponses.get(trfr)),warnings);
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(bodyFooter());
  sb.append(htmlFooter());
  sink.write(sb.toString());
}",0.9711729622266402
24940,"public static Function<AnswerKey,AnswerKey> forAnswerKey(){
  return new Function<AnswerKey,AnswerKey>(){
    @Override public AnswerKey apply(    final AnswerKey input){
      final AnswerKey.Builder ret=input.modifiedCopyBuilder();
      for (      final AssessedResponse assessedResponse : input.annotatedResponses()) {
        if (assessedResponse.response().isTemporal() && FieldAssessment.isAcceptable(assessedResponse.assessment().entityCorrectFiller())) {
          final String cas=assessedResponse.response().canonicalArgument().string();
          try {
            KBPTIMEXExpression.parseTIMEX(cas);
          }
 catch (          IllegalArgumentException iae) {
            log.info(""String_Node_Str"",cas);
            ret.replaceAssessment(assessedResponse.response(),assessedResponse.assessment().copyWithModifiedCASAssessment(FieldAssessment.INCORRECT));
          }
        }
      }
      return ret.build();
    }
  }
;
}","public static Function<AnswerKey,AnswerKey> forAnswerKey(){
  return new Function<AnswerKey,AnswerKey>(){
    @Override public AnswerKey apply(    final AnswerKey input){
      final AnswerKey.Builder ret=input.modifiedCopyBuilder();
      for (      final AssessedResponse assessedResponse : input.annotatedResponses()) {
        if (assessedResponse.response().isTemporal() && FieldAssessment.isAcceptable(assessedResponse.assessment().entityCorrectFiller())) {
          final String cas=assessedResponse.response().canonicalArgument().string();
          try {
            KBPTIMEXExpression.parseTIMEX(cas);
          }
 catch (          KBPTIMEXExpression.KBPTIMEXException te) {
            log.info(""String_Node_Str"",cas);
            ret.replaceAssessment(assessedResponse.response(),assessedResponse.assessment().copyWithModifiedCASAssessment(FieldAssessment.INCORRECT));
          }
        }
      }
      return ret.build();
    }
  }
;
}",0.9687995769434162
24941,"@Override public AnswerKey apply(final AnswerKey input){
  final AnswerKey.Builder ret=input.modifiedCopyBuilder();
  for (  final AssessedResponse assessedResponse : input.annotatedResponses()) {
    if (assessedResponse.response().isTemporal() && FieldAssessment.isAcceptable(assessedResponse.assessment().entityCorrectFiller())) {
      final String cas=assessedResponse.response().canonicalArgument().string();
      try {
        KBPTIMEXExpression.parseTIMEX(cas);
      }
 catch (      IllegalArgumentException iae) {
        log.info(""String_Node_Str"",cas);
        ret.replaceAssessment(assessedResponse.response(),assessedResponse.assessment().copyWithModifiedCASAssessment(FieldAssessment.INCORRECT));
      }
    }
  }
  return ret.build();
}","@Override public AnswerKey apply(final AnswerKey input){
  final AnswerKey.Builder ret=input.modifiedCopyBuilder();
  for (  final AssessedResponse assessedResponse : input.annotatedResponses()) {
    if (assessedResponse.response().isTemporal() && FieldAssessment.isAcceptable(assessedResponse.assessment().entityCorrectFiller())) {
      final String cas=assessedResponse.response().canonicalArgument().string();
      try {
        KBPTIMEXExpression.parseTIMEX(cas);
      }
 catch (      KBPTIMEXExpression.KBPTIMEXException te) {
        log.info(""String_Node_Str"",cas);
        ret.replaceAssessment(assessedResponse.response(),assessedResponse.assessment().copyWithModifiedCASAssessment(FieldAssessment.INCORRECT));
      }
    }
  }
  return ret.build();
}",0.9611586570111916
24942,"private AnswerKey(final Symbol docId,final Iterable<AssessedResponse> annotatedArgs,final Iterable<Response> unannotatedResponses,CorefAnnotation corefAnnotation){
  this.docid=checkNotNull(docId);
  try {
    this.annotatedArgs=Maps.uniqueIndex(annotatedArgs,AssessedResponse.Response);
  }
 catch (  IllegalArgumentException iae) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.unannotatedResponses=ImmutableSet.copyOf(unannotatedResponses);
  this.corefAnnotation=checkNotNull(corefAnnotation);
  assertConsistency();
}","private AnswerKey(final Symbol docId,final Iterable<AssessedResponse> annotatedArgs,final Iterable<Response> unannotatedResponses,CorefAnnotation corefAnnotation){
  this.docid=checkNotNull(docId);
  try {
    this.annotatedArgs=DuplicateTolerantImmutableMapBuilder.uniqueIndex(annotatedArgs,AssessedResponse.Response);
  }
 catch (  IllegalArgumentException iae) {
    throw new IllegalStateException(""String_Node_Str"",iae);
  }
  this.unannotatedResponses=ImmutableSet.copyOf(unannotatedResponses);
  this.corefAnnotation=checkNotNull(corefAnnotation);
  assertConsistency();
}",0.966131907308378
24943,"public AnswerKey build(){
  return new AnswerKey(docId,annotatedArgs.values(),unannotatedResponses,corefAnnotation.build());
}","public ImmutableMap<K,V> build(){
  return innerBuilder.build();
}",0.4479166666666667
24944,"private void assertRealisIsNeutralized(final Result wrappedResult){
  for (  final Response response : wrappedResult.systemOutput().responses()) {
    if (response.realis() != KBPRealis.Actual) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  for (  final AssessedResponse annResponse : wrappedResult.answerKey().annotatedResponses()) {
    if (annResponse.response().realis() != KBPRealis.Actual || annResponse.assessment().realis() != Optional.of(KBPRealis.Actual)) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
}","private void assertRealisIsNeutralized(final Result wrappedResult){
  for (  final Response response : wrappedResult.systemOutput().responses()) {
    if (response.realis() != KBPRealis.Actual) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  for (  final AssessedResponse annResponse : wrappedResult.answerKey().annotatedResponses()) {
    if (annResponse.response().realis() != KBPRealis.Actual || annResponse.assessment().realis().get() != KBPRealis.Actual) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
}",0.9826800364630812
24945,"public static Preprocessor fromParameters(Parameters params){
  final List<Function<AnswerKey,AnswerKey>> answerKeyTransformations=Lists.newArrayList();
  final List<Function<SystemOutput,SystemOutput>> systemOutputTransformations=Lists.newArrayList();
  if (params.getBoolean(""String_Node_Str"")) {
    answerKeyTransformations.add(MakeAllRealisActual.forAnswerKey());
    systemOutputTransformations.add(MakeAllRealisActual.forSystemOutput());
  }
  final Preprocessor basePreprocessor=new PreprocessorKBP2014(answerKeyTransformations,systemOutputTransformations);
  if (params.getBoolean(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
    return CorefNeutralizingPreprocessor.createWrappingPreprocessor(basePreprocessor);
  }
 else {
    return basePreprocessor;
  }
}","public static Preprocessor fromParameters(Parameters params){
  final List<Function<AnswerKey,AnswerKey>> answerKeyTransformations=Lists.newArrayList();
  final List<Function<SystemOutput,SystemOutput>> systemOutputTransformations=Lists.newArrayList();
  if (params.getBoolean(""String_Node_Str"")) {
    answerKeyTransformations.add(MakeAllRealisActual.forAnswerKey());
    systemOutputTransformations.add(MakeAllRealisActual.forSystemOutput());
  }
  answerKeyTransformations.add(FixLowerCaseXInTemporals.forAnswerKey());
  systemOutputTransformations.add(FixLowerCaseXInTemporals.forSystemOutput());
  final Preprocessor basePreprocessor=new PreprocessorKBP2014(answerKeyTransformations,systemOutputTransformations);
  if (params.getBoolean(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
    return CorefNeutralizingPreprocessor.createWrappingPreprocessor(basePreprocessor);
  }
 else {
    return basePreprocessor;
  }
}",0.911007025761124
24946,"public void addUnannotatedCASes(Iterable<KBPString> unannotatedCASes){
  for (  final KBPString cas : unannotatedCASes) {
    addUnannotatedCAS(cas);
  }
}","public Builder addUnannotatedCASes(Iterable<KBPString> unannotatedCASes){
  for (  final KBPString cas : unannotatedCASes) {
    addUnannotatedCAS(cas);
  }
  return this;
}",0.9329268292682928
24947,"@Override public Result preprocess(final SystemOutput systemOutput,final AnswerKey answerKey){
  final Preprocessor.Result wrappedResult=wrappedPreprocessor.preprocess(systemOutput,answerKey);
  assertRealisIsNeutralized(wrappedResult);
  final ImmutableMultimap<String,AssessedResponse> answerKeyByTypeRoleBaseFiller=Multimaps.index(filter(answerKey.annotatedResponses(),AssessedResponse.IsCorrectUpToInexactJustifications),Functions.compose(TypeRoleBaseFiller,AssessedResponse.Response));
  final ImmutableMultimap<String,AssessedResponse> answerKeyByTypeRole=Multimaps.index(filter(answerKey.annotatedResponses(),AssessedResponse.IsCorrectUpToInexactJustifications),Functions.compose(TypeRole,AssessedResponse.Response));
  final List<Response> newResponses=Lists.newArrayList();
  for (  final Response response : wrappedResult.systemOutput().responses()) {
    final AssessedResponse assessedResponse=wrappedResult.answerKey().assess(response).get();
    if (FieldAssessment.isAcceptable(assessedResponse.assessment().baseFillerCorrect()) && !FieldAssessment.isAcceptable(assessedResponse.assessment().entityCorrectFiller())) {
      final Collection<AssessedResponse> correctPoolResponsesSharingSameTypeRoleBF=answerKeyByTypeRoleBaseFiller.get(TypeRoleBaseFiller.apply(response));
      if (!correctPoolResponsesSharingSameTypeRoleBF.isEmpty()) {
        newResponses.add(Iterables.getFirst(correctPoolResponsesSharingSameTypeRoleBF,null).response());
        ++swappedCASForSameBF;
      }
 else {
        final Collection<AssessedResponse> correctPoolResponsesSharingSameTypeRole=answerKeyByTypeRole.get(TypeRole.apply(response));
        if (!correctPoolResponsesSharingSameTypeRole.isEmpty()) {
          newResponses.add(Iterables.getFirst(correctPoolResponsesSharingSameTypeRole,null).response());
          ++swappedCASDifferentBF;
        }
 else {
          ++deleted;
        }
      }
    }
 else {
      newResponses.add(response);
      ++passedThrough;
    }
  }
  final SystemOutput corefNeutralizedSystemOutput=SystemOutput.createWithConstantScore(systemOutput.docId(),newResponses,1.0);
  return new Preprocessor.Result(corefNeutralizedSystemOutput,wrappedResult.answerKey(),wrappedResult.normalizer());
}","@Override public Result preprocess(final SystemOutput systemOutput,final AnswerKey answerKey){
  final Preprocessor.Result wrappedResult=wrappedPreprocessor.preprocess(systemOutput,answerKey);
  return processWrappedResult(wrappedResult);
}",0.1726094003241491
24948,"private static void trueMain(String[] argv) throws IOException {
  if (argv.length != 1) {
    usage();
    System.exit(1);
  }
  final Parameters params=Parameters.loadSerifStyle(new File(argv[0]));
  final KBP2015Scorer scorer=new KBP2015Scorer();
  final AnnotationStore goldAnswerStore=AssessmentSpecFormats.openAnnotationStore(params.getExistingDirectory(""String_Node_Str""),AssessmentSpecFormats.Format.KBP2015);
  final Set<Symbol> docsToScore=loadDocumentsToScore(params);
  final LinkingStore referenceLinkingStore=LinkingSpecFormats.openOrCreateLinkingStore(params.getExistingDirectory(""String_Node_Str""));
  checkArgument(params.isPresent(SYSTEM_OUTPUT_PARAM) != params.isPresent(SYSTEM_OUTPUTS_DIR_PARAM),""String_Node_Str"");
  if (params.isPresent(SYSTEM_OUTPUT_PARAM)) {
    final File systemOutputDir=params.getExistingDirectory(SYSTEM_OUTPUT_PARAM);
    log.info(""String_Node_Str"",systemOutputDir);
    final SystemOutputStore systemOutputStore=AssessmentSpecFormats.openSystemOutputStore(new File(systemOutputDir,""String_Node_Str""),AssessmentSpecFormats.Format.KBP2015);
    final LinkingStore systemLinkingStore=LinkingSpecFormats.openOrCreateLinkingStore(new File(systemOutputDir,""String_Node_Str""));
    scorer.score(goldAnswerStore,referenceLinkingStore,systemOutputStore,systemLinkingStore,docsToScore,systemOutputDir);
  }
 else {
    final File systemOutputsDir=params.getExistingDirectory(""String_Node_Str"");
    final File scoringOutputRoot=params.getCreatableDirectory(""String_Node_Str"");
    log.info(""String_Node_Str"",systemOutputsDir);
    for (    File subDir : systemOutputsDir.listFiles()) {
      if (subDir.isDirectory()) {
        log.info(""String_Node_Str"",subDir);
        final File outputDir=new File(scoringOutputRoot,subDir.getName());
        outputDir.mkdirs();
        final SystemOutputStore systemOutputStore=AssessmentSpecFormats.openSystemOutputStore(new File(subDir,""String_Node_Str""),AssessmentSpecFormats.Format.KBP2015);
        final LinkingStore systemLinkingStore=LinkingSpecFormats.openOrCreateLinkingStore(new File(subDir,""String_Node_Str""));
        scorer.score(goldAnswerStore,referenceLinkingStore,systemOutputStore,systemLinkingStore,docsToScore,outputDir);
      }
    }
  }
}","private static void trueMain(String[] argv) throws IOException {
  if (argv.length != 1) {
    usage();
    System.exit(1);
  }
  final Parameters params=Parameters.loadSerifStyle(new File(argv[0]));
  final KBP2015Scorer scorer=new KBP2015Scorer();
  final AnnotationStore goldAnswerStore=AssessmentSpecFormats.openAnnotationStore(params.getExistingDirectory(""String_Node_Str""),AssessmentSpecFormats.Format.KBP2015);
  final Set<Symbol> docsToScore=loadDocumentsToScore(params);
  final LinkingStore referenceLinkingStore=LinkingSpecFormats.openOrCreateLinkingStore(params.getExistingDirectory(""String_Node_Str""));
  checkArgument(params.isPresent(SYSTEM_OUTPUT_PARAM) != params.isPresent(SYSTEM_OUTPUTS_DIR_PARAM),""String_Node_Str"");
  if (params.isPresent(SYSTEM_OUTPUT_PARAM)) {
    final File scoringOutputDir=params.getCreatableDirectory(""String_Node_Str"");
    final File systemOutputDir=params.getExistingDirectory(SYSTEM_OUTPUT_PARAM);
    log.info(""String_Node_Str"",systemOutputDir);
    final SystemOutputStore systemOutputStore=AssessmentSpecFormats.openSystemOutputStore(new File(systemOutputDir,""String_Node_Str""),AssessmentSpecFormats.Format.KBP2015);
    final LinkingStore systemLinkingStore=LinkingSpecFormats.openOrCreateLinkingStore(new File(systemOutputDir,""String_Node_Str""));
    scorer.score(goldAnswerStore,referenceLinkingStore,systemOutputStore,systemLinkingStore,docsToScore,scoringOutputDir);
  }
 else {
    final File systemOutputsDir=params.getExistingDirectory(""String_Node_Str"");
    final File scoringOutputRoot=params.getCreatableDirectory(""String_Node_Str"");
    log.info(""String_Node_Str"",systemOutputsDir);
    for (    File subDir : systemOutputsDir.listFiles()) {
      if (subDir.isDirectory()) {
        log.info(""String_Node_Str"",subDir);
        final File outputDir=new File(scoringOutputRoot,subDir.getName());
        outputDir.mkdirs();
        final SystemOutputStore systemOutputStore=AssessmentSpecFormats.openSystemOutputStore(new File(subDir,""String_Node_Str""),AssessmentSpecFormats.Format.KBP2015);
        final LinkingStore systemLinkingStore=LinkingSpecFormats.openOrCreateLinkingStore(new File(subDir,""String_Node_Str""));
        scorer.score(goldAnswerStore,referenceLinkingStore,systemOutputStore,systemLinkingStore,docsToScore,outputDir);
      }
    }
  }
}",0.979815708644142
24949,"public static AnswerKey convertAnswerKeyDocID(Symbol docID,AnswerKey input){
  CorefAnnotation corefAnnotation=input.corefAnnotation();
  CorefAnnotation fixedCorefAnnotation=CorefAnnotation.create(docID,corefAnnotation.CASesToIDs(),corefAnnotation.unannotatedCASes());
  Iterable<AssessedResponse> annotatedArgs=Iterables.transform(input.annotatedResponses(),fixAssessedResponseDocID(docID));
  Iterable<Response> unannotatedArgs=Iterables.transform(input.unannotatedResponses(),fixResponseDocID(docID));
  return AnswerKey.from(docID,annotatedArgs,unannotatedArgs,corefAnnotation);
}","public static AnswerKey convertAnswerKeyDocID(Symbol docID,AnswerKey input){
  CorefAnnotation corefAnnotation=input.corefAnnotation();
  CorefAnnotation fixedCorefAnnotation=CorefAnnotation.create(docID,corefAnnotation.CASesToIDs(),corefAnnotation.unannotatedCASes());
  Iterable<AssessedResponse> annotatedArgs=Iterables.transform(input.annotatedResponses(),fixAssessedResponseDocID(docID));
  Iterable<Response> unannotatedArgs=Iterables.transform(input.unannotatedResponses(),fixResponseDocID(docID));
  return AnswerKey.from(docID,annotatedArgs,unannotatedArgs,fixedCorefAnnotation);
}",0.9940425531914894
24950,"public <T>ExplicitFMeasureInfo score(final Iterable<Set<T>> predicted,final Iterable<Set<T>> gold){
  double linkF1Sum=0.0;
  double linkPrecisionSum=0.0;
  double linkRecallSum=0.0;
  final Multimap<T,Set<T>> predictedItemToGroup=CollectionUtils.makeSetElementsToContainersMultimap(predicted);
  final Multimap<T,Set<T>> goldItemToGroup=CollectionUtils.makeSetElementsToContainersMultimap(gold);
  final ImmutableSet<T> keyItems=ImmutableSet.copyOf(concat(gold));
  if (keyItems.isEmpty()) {
    if (predictedItemToGroup.isEmpty()) {
      return new ExplicitFMeasureInfo(1.0,1.0,1.0);
    }
 else {
      return new ExplicitFMeasureInfo(0.0,0.0,0.0);
    }
  }
  for (  final T keyItem : keyItems) {
    final Set<T> predictedNeighbors=ImmutableSet.copyOf(without(concat(predictedItemToGroup.get(keyItem)),keyItem));
    final Set<T> goldNeighbors=ImmutableSet.copyOf(without(concat(goldItemToGroup.get(keyItem)),keyItem));
    final boolean predictedAndGoldAreSingleton=predictedNeighbors.isEmpty() && goldNeighbors.isEmpty();
    if (!predictedAndGoldAreSingleton) {
      int truePositiveLinks=Sets.intersection(predictedNeighbors,goldNeighbors).size();
      int falsePositiveLinks=Sets.difference(predictedNeighbors,goldNeighbors).size();
      int falseNegativeLinks=Sets.difference(goldNeighbors,predictedNeighbors).size();
      final FMeasureCounts fMeasureCounts=FMeasureCounts.from(truePositiveLinks,falsePositiveLinks,falseNegativeLinks);
      linkF1Sum+=fMeasureCounts.F1();
      linkPrecisionSum+=fMeasureCounts.precision();
      linkRecallSum+=fMeasureCounts.recall();
    }
 else {
      linkF1Sum+=1.0;
      linkPrecisionSum+=1.0;
      linkRecallSum+=1.0;
    }
  }
  return new ExplicitFMeasureInfo(linkPrecisionSum / keyItems.size(),linkRecallSum / keyItems.size(),linkF1Sum / keyItems.size());
}","public <T>ExplicitFMeasureInfo score(final Iterable<Set<T>> predicted,final Iterable<Set<T>> gold){
  double linkF1Sum=0.0;
  double linkPrecisionSum=0.0;
  double linkRecallSum=0.0;
  final Multimap<T,Set<T>> predictedItemToGroup=CollectionUtils.makeSetElementsToContainersMultimap(predicted);
  final Multimap<T,Set<T>> goldItemToGroup=CollectionUtils.makeSetElementsToContainersMultimap(gold);
  final ImmutableSet<T> keyItems=ImmutableSet.copyOf(concat(gold));
  final ImmutableSet<T> predictedItems=ImmutableSet.copyOf(concat(predicted));
  checkArgument(keyItems.containsAll(predictedItems),""String_Node_Str"");
  if (keyItems.isEmpty()) {
    if (predictedItemToGroup.isEmpty()) {
      return new ExplicitFMeasureInfo(1.0,1.0,1.0);
    }
 else {
      return new ExplicitFMeasureInfo(0.0,0.0,0.0);
    }
  }
  for (  final T keyItem : keyItems) {
    final Set<T> predictedNeighbors=ImmutableSet.copyOf(without(concat(predictedItemToGroup.get(keyItem)),keyItem));
    final Set<T> goldNeighbors=ImmutableSet.copyOf(without(concat(goldItemToGroup.get(keyItem)),keyItem));
    final boolean predictedAndGoldAreSingleton=predictedNeighbors.isEmpty() && goldNeighbors.isEmpty();
    if (!predictedAndGoldAreSingleton) {
      int truePositiveLinks=Sets.intersection(predictedNeighbors,goldNeighbors).size();
      int falsePositiveLinks=Sets.difference(predictedNeighbors,goldNeighbors).size();
      int falseNegativeLinks=Sets.difference(goldNeighbors,predictedNeighbors).size();
      final FMeasureCounts fMeasureCounts=FMeasureCounts.from(truePositiveLinks,falsePositiveLinks,falseNegativeLinks);
      linkF1Sum+=fMeasureCounts.F1();
      linkPrecisionSum+=fMeasureCounts.precision();
      linkRecallSum+=fMeasureCounts.recall();
    }
 else {
      final boolean appearsInPredicted=predictedItems.contains(keyItem);
      if (appearsInPredicted) {
        linkF1Sum+=1.0;
        linkPrecisionSum+=1.0;
        linkRecallSum+=1.0;
      }
    }
  }
  return new ExplicitFMeasureInfo(linkPrecisionSum / predictedItems.size(),linkRecallSum / keyItems.size(),linkF1Sum / keyItems.size());
}",0.9278245345575108
24951,"@Test public void test3(){
  final CorefAnnotation coref=allSingletonsCoref(ImmutableSet.of(a,b,c,d,e,f,g,h,i));
  final AnswerKey answerKey=makeAnswerKeyFromCorrectAndIncorrect(ImmutableSet.of(a,b,c,d,e,f),ImmutableSet.<Response>of(g),coref);
  final ResponseLinking goldResponseLinking=ResponseLinking.from(answerKey.docId(),ImmutableSet.of(ResponseSet.from(a,b,c),ResponseSet.from(d,e),ResponseSet.from(f)),ImmutableSet.<Response>of());
  final EALScorer2015Style.Result score_ABD_G=scorer.score(answerKey,goldResponseLinking,this.output_ABDG,this.linking_ABD_G);
  assertEquals(2.75,score_ABD_G.unscaledArgumentScore(),.001);
  assertEquals(1.0,score_ABD_G.unscaledLinkingScore(),.001);
  assertEquals(0.3125,score_ABD_G.scaledScore(),.001);
  final EALScorer2015Style.Result score_AB_C_G=scorer.score(answerKey,goldResponseLinking,this.output_ABCG,this.linking_AB_C_G);
  assertEquals(2.75,score_AB_C_G.unscaledArgumentScore(),.001);
  assertEquals(4.0 / 3,score_AB_C_G.unscaledLinkingScore(),.001);
  assertEquals(0.3403,score_AB_C_G.scaledScore(),.001);
  final ResponseLinking l17=this.linking_G_H_I;
  final EALScorer2015Style.Result score_G_H_I=scorer.score(answerKey,goldResponseLinking,this.output_GHI,this.linking_G_H_I);
  assertEquals(-0.75,score_G_H_I.unscaledArgumentScore(),.001);
  assertEquals(0,score_G_H_I.unscaledLinkingScore(),.001);
  assertEquals(0,score_G_H_I.scaledScore(),.001);
  final ResponseLinking l18=this.linking_DE_DEA;
  final EALScorer2015Style.Result score_DE_DEA=scorer.score(answerKey,goldResponseLinking,this.output_DEA,this.linking_DE_DEA);
  assertEquals(3.0,score_DE_DEA.unscaledArgumentScore(),.001);
  assertEquals(4.0 / 3,score_DE_DEA.unscaledLinkingScore(),.001);
  assertEquals(13.0 / 36,score_DE_DEA.scaledScore(),.001);
}","@Test public void test3(){
  final CorefAnnotation coref=allSingletonsCoref(ImmutableSet.of(a,b,c,d,e,f,g,h,i));
  final AnswerKey answerKey=makeAnswerKeyFromCorrectAndIncorrect(ImmutableSet.of(a,b,c,d,e,f),ImmutableSet.<Response>of(g,h,i),coref);
  final ResponseLinking goldResponseLinking=ResponseLinking.from(answerKey.docId(),ImmutableSet.of(ResponseSet.from(a,b,c),ResponseSet.from(d,e),ResponseSet.from(f)),ImmutableSet.<Response>of());
  final EALScorer2015Style.Result score_ABD_G=scorer.score(answerKey,goldResponseLinking,this.output_ABDG,this.linking_ABD_G);
  assertEquals(2.75,score_ABD_G.unscaledArgumentScore(),.001);
  assertEquals(1.0,score_ABD_G.unscaledLinkingScore(),.001);
  assertEquals(0.3125,score_ABD_G.scaledScore(),.001);
  final EALScorer2015Style.Result score_AB_C_G=scorer.score(answerKey,goldResponseLinking,this.output_ABCG,this.linking_AB_C_G);
  assertEquals(2.75,score_AB_C_G.unscaledArgumentScore(),.001);
  assertEquals(4.0 / 3,score_AB_C_G.unscaledLinkingScore(),.001);
  assertEquals(0.3403,score_AB_C_G.scaledScore(),.001);
  final EALScorer2015Style.Result score_G_H_I=scorer.score(answerKey,goldResponseLinking,this.output_GHI,this.linking_G_H_I);
  assertEquals(-0.75,score_G_H_I.unscaledArgumentScore(),.001);
  assertEquals(0,score_G_H_I.unscaledLinkingScore(),.001);
  assertEquals(-.0625,score_G_H_I.scaledScore(),.001);
  final EALScorer2015Style.Result score_DE_DEA=scorer.score(answerKey,goldResponseLinking,this.output_DEA,this.linking_DE_DEA);
  assertEquals(3.0,score_DE_DEA.unscaledArgumentScore(),.001);
  assertEquals(4.0 / 3,score_DE_DEA.unscaledLinkingScore(),.001);
  assertEquals(13.0 / 36,score_DE_DEA.scaledScore(),.001);
}",0.96878612716763
24952,"public static void main(final String[] argv) throws IOException {
  if (argv.length != 1) {
    usage();
  }
  final Parameters params=Parameters.loadSerifStyle(new File(argv[0]));
  log.info(params.dump());
  final File argumentSystemStoreDir=params.getExistingDirectory(""String_Node_Str"");
  final SystemOutputStore argumentSystemStore=AssessmentSpecFormats.openSystemOutputStore(argumentSystemStoreDir,AssessmentSpecFormats.Format.KBP2015);
  final ImmutableSet<Symbol> docIDs=argumentSystemStore.docIDs();
  final File linkingSystemStoreDir=params.getExistingDirectory(""String_Node_Str"");
  final LinkingStore linkingSystemStore=LinkingSpecFormats.openOrCreateLinkingStore(linkingSystemStoreDir);
  final LinkingStrategy linkingStrategy=SameEventTypeLinker.create(ImmutableSet.of(KBPRealis.Actual,KBPRealis.Other));
  for (  final Symbol docID : docIDs) {
    final SystemOutput docOutput=argumentSystemStore.read(docID);
    log.info(""String_Node_Str"",docID,docOutput.size());
    final ResponseLinking responseLinking=linkingStrategy.linkResponses(docOutput);
    linkingSystemStore.write(responseLinking);
    log.info(""String_Node_Str"",docID,docOutput.size(),responseLinking.responseSets().size());
  }
  linkingSystemStore.close();
  argumentSystemStore.close();
}","public static void main(final String[] argv) throws IOException {
  if (argv.length != 1) {
    usage();
  }
  final Parameters params=Parameters.loadSerifStyle(new File(argv[0]));
  log.info(params.dump());
  final File argumentSystemStoreDir=params.getExistingDirectory(""String_Node_Str"");
  final SystemOutputStore argumentSystemStore=AssessmentSpecFormats.openSystemOutputStore(argumentSystemStoreDir,AssessmentSpecFormats.Format.KBP2015);
  final ImmutableSet<Symbol> docIDs=argumentSystemStore.docIDs();
  final File linkingSystemStoreDir=params.getEmptyDirectory(""String_Node_Str"");
  final LinkingStore linkingSystemStore=LinkingSpecFormats.openOrCreateLinkingStore(linkingSystemStoreDir);
  final LinkingStrategy linkingStrategy=SameEventTypeLinker.create(ImmutableSet.of(KBPRealis.Actual,KBPRealis.Other));
  for (  final Symbol docID : docIDs) {
    final SystemOutput docOutput=argumentSystemStore.read(docID);
    log.info(""String_Node_Str"",docID,docOutput.size());
    final ResponseLinking responseLinking=linkingStrategy.linkResponses(docOutput);
    linkingSystemStore.write(responseLinking);
    log.info(""String_Node_Str"",docID,docOutput.size(),responseLinking.responseSets().size());
  }
  linkingSystemStore.close();
  argumentSystemStore.close();
}",0.9956744003145892
24953,"@Override public EventArgScoringAlignment<EquivClassType> align(final AnswerKey answerKey,final SystemOutput systemOutput){
  checkArgument(answerKey.docId() == systemOutput.docId());
  final ImmutableMultimap<EquivClassType,Response> equivClassToSystemResponses=Multimaps.index(systemOutput.responses(),equivClassFunction);
  final ImmutableMultimap<EquivClassType,AssessedResponse> equivClassToAnswerKeyResponses=Multimaps.index(answerKey.annotatedResponses(),Functions.compose(equivClassFunction,AssessedResponse.Response));
  final ImmutableSet<EquivClassType> allEquivClasses=Sets.union(equivClassToSystemResponses.keySet(),equivClassToAnswerKeyResponses.keySet()).immutableCopy();
  final ImmutableSet.Builder<EquivClassType> truePositives=ImmutableSet.builder();
  final ImmutableSet.Builder<EquivClassType> falsePositives=ImmutableSet.builder();
  final ImmutableSet.Builder<EquivClassType> falseNegatives=ImmutableSet.builder();
  final ImmutableSet.Builder<EquivClassType> unassessed=ImmutableSet.builder();
  for (  final EquivClassType eqivClass : allEquivClasses) {
    final ImmutableCollection<AssessedResponse> answerKeyResponsesForEC=equivClassToAnswerKeyResponses.get(eqivClass);
    final boolean isCorrectEquivClass=!FluentIterable.from(answerKeyResponsesForEC).filter(AssessedResponse.IsCorrectUpToInexactJustifications).isEmpty();
    final ImmutableCollection<Response> systemResponsesForEC=equivClassToSystemResponses.get(eqivClass);
    if (isCorrectEquivClass) {
      final Optional<Response> selectedSystemResponse=systemOutput.selectFromMultipleSystemResponses(equivClassToSystemResponses.get(eqivClass));
      if (selectedSystemResponse.isPresent()) {
        final Optional<AssessedResponse> assessmentOfSelectedResponse=AssessedResponse.findAnnotationForArgument(selectedSystemResponse.get(),answerKeyResponsesForEC);
        if (assessmentOfSelectedResponse.isPresent()) {
          if (assessmentOfSelectedResponse.get().isCorrectUpToInexactJustifications()) {
            truePositives.add(eqivClass);
          }
 else {
            falseNegatives.add(eqivClass);
          }
        }
 else {
          unassessed.add(eqivClass);
        }
      }
 else {
        falseNegatives.add(eqivClass);
      }
    }
 else {
      if (!systemResponsesForEC.isEmpty()) {
        falsePositives.add(eqivClass);
      }
 else {
      }
    }
  }
  return EventArgScoringAlignment.create(systemOutput.docId(),truePositives.build(),falsePositives.build(),falseNegatives.build(),unassessed.build(),equivClassToAnswerKeyResponses,equivClassToSystemResponses);
}","@Override public EventArgScoringAlignment<EquivClassType> align(final AnswerKey answerKey,final SystemOutput systemOutput){
  checkArgument(answerKey.docId() == systemOutput.docId());
  final ImmutableMultimap<EquivClassType,Response> equivClassToSystemResponses=Multimaps.index(systemOutput.responses(),equivClassFunction);
  final ImmutableMultimap<EquivClassType,AssessedResponse> equivClassToAnswerKeyResponses=Multimaps.index(answerKey.annotatedResponses(),Functions.compose(equivClassFunction,AssessedResponse.Response));
  final ImmutableSet<EquivClassType> allEquivClasses=Sets.union(equivClassToSystemResponses.keySet(),equivClassToAnswerKeyResponses.keySet()).immutableCopy();
  final ImmutableSet.Builder<EquivClassType> truePositives=ImmutableSet.builder();
  final ImmutableSet.Builder<EquivClassType> falsePositives=ImmutableSet.builder();
  final ImmutableSet.Builder<EquivClassType> falseNegatives=ImmutableSet.builder();
  final ImmutableSet.Builder<EquivClassType> unassessed=ImmutableSet.builder();
  for (  final EquivClassType eqivClass : allEquivClasses) {
    final ImmutableCollection<AssessedResponse> answerKeyResponsesForEC=equivClassToAnswerKeyResponses.get(eqivClass);
    final boolean isCorrectEquivClass=!FluentIterable.from(answerKeyResponsesForEC).filter(AssessedResponse.IsCorrectUpToInexactJustifications).isEmpty();
    final ImmutableCollection<Response> systemResponsesForEC=equivClassToSystemResponses.get(eqivClass);
    if (isCorrectEquivClass) {
      final Optional<Response> selectedSystemResponse=systemOutput.selectFromMultipleSystemResponses(equivClassToSystemResponses.get(eqivClass));
      if (selectedSystemResponse.isPresent()) {
        final Optional<AssessedResponse> assessmentOfSelectedResponse=AssessedResponse.findAnnotationForArgument(selectedSystemResponse.get(),answerKeyResponsesForEC);
        if (assessmentOfSelectedResponse.isPresent()) {
          if (assessmentOfSelectedResponse.get().isCorrectUpToInexactJustifications()) {
            truePositives.add(eqivClass);
          }
 else {
            falseNegatives.add(eqivClass);
            falsePositives.add(eqivClass);
          }
        }
 else {
          unassessed.add(eqivClass);
        }
      }
 else {
        falseNegatives.add(eqivClass);
      }
    }
 else {
      if (!systemResponsesForEC.isEmpty()) {
        falsePositives.add(eqivClass);
      }
 else {
      }
    }
  }
  return EventArgScoringAlignment.create(systemOutput.docId(),truePositives.build(),falsePositives.build(),falseNegatives.build(),unassessed.build(),equivClassToAnswerKeyResponses,equivClassToSystemResponses);
}",0.9917482249088466
24954,"@Override public EventArgScoringAlignment<EquivClassType> align(final AnswerKey answerKey,final SystemOutput systemOutput){
  checkArgument(answerKey.docId() == systemOutput.docId());
  final ImmutableMultimap<EquivClassType,Response> equivClassToSystemResponses=Multimaps.index(systemOutput.responses(),equivClassFunction);
  final ImmutableMultimap<EquivClassType,AssessedResponse> equivClassToAnswerKeyResponses=Multimaps.index(answerKey.annotatedResponses(),Functions.compose(equivClassFunction,AssessedResponse.Response));
  final ImmutableSet<EquivClassType> allEquivClasses=Sets.union(equivClassToSystemResponses.keySet(),equivClassToAnswerKeyResponses.keySet()).immutableCopy();
  final ImmutableSet.Builder<EquivClassType> truePositives=ImmutableSet.builder();
  final ImmutableSet.Builder<EquivClassType> falsePositives=ImmutableSet.builder();
  final ImmutableSet.Builder<EquivClassType> falseNegatives=ImmutableSet.builder();
  final ImmutableSet.Builder<EquivClassType> unassessed=ImmutableSet.builder();
  for (  final EquivClassType eqivClass : allEquivClasses) {
    final ImmutableCollection<AssessedResponse> answerKeyResponsesForEC=equivClassToAnswerKeyResponses.get(eqivClass);
    final boolean isCorrectEquivClass=!FluentIterable.from(answerKeyResponsesForEC).filter(AssessedResponse.IsCorrectUpToInexactJustifications).isEmpty();
    final ImmutableCollection<Response> systemResponsesForEC=equivClassToSystemResponses.get(eqivClass);
    if (isCorrectEquivClass) {
      final Optional<Response> selectedSystemResponse=systemOutput.selectFromMultipleSystemResponses(equivClassToSystemResponses.get(eqivClass));
      if (selectedSystemResponse.isPresent()) {
        final Optional<AssessedResponse> assessmentOfSelectedResponse=AssessedResponse.findAnnotationForArgument(selectedSystemResponse.get(),answerKeyResponsesForEC);
        if (assessmentOfSelectedResponse.isPresent()) {
          if (assessmentOfSelectedResponse.get().isCorrectUpToInexactJustifications()) {
            truePositives.add(eqivClass);
          }
 else {
            falseNegatives.add(eqivClass);
          }
        }
 else {
          unassessed.add(eqivClass);
        }
      }
 else {
        falseNegatives.add(eqivClass);
      }
    }
 else {
      if (!systemResponsesForEC.isEmpty()) {
        falsePositives.add(eqivClass);
      }
 else {
      }
    }
  }
  return EventArgScoringAlignment.create(systemOutput.docId(),truePositives.build(),falsePositives.build(),falseNegatives.build(),unassessed.build(),equivClassToAnswerKeyResponses,equivClassToSystemResponses);
}","@Override public EventArgScoringAlignment<EquivClassType> align(final AnswerKey answerKey,final SystemOutput systemOutput){
  checkArgument(answerKey.docId() == systemOutput.docId());
  final ImmutableMultimap<EquivClassType,Response> equivClassToSystemResponses=Multimaps.index(systemOutput.responses(),equivClassFunction);
  final ImmutableMultimap<EquivClassType,AssessedResponse> equivClassToAnswerKeyResponses=Multimaps.index(answerKey.annotatedResponses(),Functions.compose(equivClassFunction,AssessedResponse.Response));
  final ImmutableSet<EquivClassType> allEquivClasses=Sets.union(equivClassToSystemResponses.keySet(),equivClassToAnswerKeyResponses.keySet()).immutableCopy();
  final ImmutableSet.Builder<EquivClassType> truePositives=ImmutableSet.builder();
  final ImmutableSet.Builder<EquivClassType> falsePositives=ImmutableSet.builder();
  final ImmutableSet.Builder<EquivClassType> falseNegatives=ImmutableSet.builder();
  final ImmutableSet.Builder<EquivClassType> unassessed=ImmutableSet.builder();
  for (  final EquivClassType eqivClass : allEquivClasses) {
    final ImmutableCollection<AssessedResponse> answerKeyResponsesForEC=equivClassToAnswerKeyResponses.get(eqivClass);
    final boolean isCorrectEquivClass=!FluentIterable.from(answerKeyResponsesForEC).filter(AssessedResponse.IsCorrectUpToInexactJustifications).isEmpty();
    final ImmutableCollection<Response> systemResponsesForEC=equivClassToSystemResponses.get(eqivClass);
    if (isCorrectEquivClass) {
      final Optional<Response> selectedSystemResponse=systemOutput.selectFromMultipleSystemResponses(equivClassToSystemResponses.get(eqivClass));
      if (selectedSystemResponse.isPresent()) {
        final Optional<AssessedResponse> assessmentOfSelectedResponse=AssessedResponse.findAnnotationForArgument(selectedSystemResponse.get(),answerKeyResponsesForEC);
        if (assessmentOfSelectedResponse.isPresent()) {
          if (assessmentOfSelectedResponse.get().isCorrectUpToInexactJustifications()) {
            truePositives.add(eqivClass);
          }
 else {
            falseNegatives.add(eqivClass);
            falsePositives.add(eqivClass);
          }
        }
 else {
          unassessed.add(eqivClass);
        }
      }
 else {
        falseNegatives.add(eqivClass);
      }
    }
 else {
      if (!systemResponsesForEC.isEmpty()) {
        falsePositives.add(eqivClass);
      }
 else {
      }
    }
  }
  return EventArgScoringAlignment.create(systemOutput.docId(),truePositives.build(),falsePositives.build(),falseNegatives.build(),unassessed.build(),equivClassToAnswerKeyResponses,equivClassToSystemResponses);
}",0.9917482249088466
24955,"public void observe(CorefAnnotation left,CorefAnnotation right){
  checkArgument(left.docId().equals(right.docId()));
  checkArgument(left.annotatedCASes().equals(right.annotatedCASes()));
  final Collection<Collection<KBPString>> leftAsClusters=asCollectionOfCollections(left);
  final Collection<Collection<KBPString>> rightAsClusters=asCollectionOfCollections(right);
  b3Scores.add(b3Scorer.score(rightAsClusters,leftAsClusters).F1());
  blancScores.add(blancScorer.score(rightAsClusters,leftAsClusters).blancF());
  final Optional<FMeasureInfo> mucScore=mucScorer.score(rightAsClusters,leftAsClusters);
  if (mucScore.isPresent()) {
    mucScores.add(mucScore.get().F1());
  }
 else {
    log.warn(""String_Node_Str"",left.docId());
  }
}","public void observe(CorefAnnotation left,CorefAnnotation right){
  checkArgument(left.docId().equals(right.docId()));
  checkArgument(left.annotatedCASes().equals(right.annotatedCASes()));
  final Collection<Collection<KBPString>> leftAsClusters=asCollectionOfCollections(left);
  final Collection<Collection<KBPString>> rightAsClusters=asCollectionOfCollections(right);
  b3Scores.add(b3Scorer.score(rightAsClusters,leftAsClusters).F1());
  blancScores.add(blancScorer.score(rightAsClusters,leftAsClusters).blancScore());
  final Optional<FMeasureInfo> mucScore=mucScorer.score(rightAsClusters,leftAsClusters);
  if (mucScore.isPresent()) {
    mucScores.add(mucScore.get().F1());
  }
 else {
    log.warn(""String_Node_Str"",left.docId());
  }
}",0.9959623149394348
24956,"private void checkNotClosed() throws IOException {
  throw new IOException(""String_Node_Str"");
}","private void checkNotClosed() throws IOException {
  if (closed) {
    throw new IOException(""String_Node_Str"");
  }
}",0.897196261682243
24957,"private HashCode computeSHA1Hash(){
  final Hasher hasher=SHA1_HASHER.newHasher().putString(docid.toString(),Charsets.UTF_8).putString(type.toString(),Charsets.UTF_8).putString(role.toString(),Charsets.UTF_8).putString(canonicalArgumentString.string(),Charsets.UTF_8).putInt(canonicalArgument().charOffsetSpan().startInclusive()).putInt(canonicalArgument().charOffsetSpan().endInclusive()).putInt(baseFiller.startInclusive()).putInt(baseFiller.endInclusive());
  for (  final CharOffsetSpan pj : Ordering.natural().sortedCopy(predicateJustifications)) {
    hasher.putInt(pj.startInclusive()).putInt(pj.endInclusive());
  }
  for (  final CharOffsetSpan aaj : Ordering.natural().sortedCopy(additionalArgumentJustifications())) {
    hasher.putInt(aaj.startInclusive()).putInt(aaj.endInclusive());
  }
  hasher.putInt(realis.ordinal());
  return hasher.hash();
}","private HashCode computeSHA1Hash(){
  final Hasher hasher=SHA1_HASHER.newHasher().putString(docid.toString(),Charsets.UTF_8).putString(type.toString(),Charsets.UTF_8).putString(role.toString(),Charsets.UTF_8).putString(canonicalArgumentString.string(),Charsets.UTF_8).putInt(canonicalArgument().charOffsetSpan().startInclusive()).putInt(canonicalArgument().charOffsetSpan().endInclusive()).putInt(baseFiller.startInclusive()).putInt(baseFiller.endInclusive());
  hasher.putInt(PJ_CODE);
  for (  final CharOffsetSpan pj : Ordering.natural().sortedCopy(predicateJustifications)) {
    hasher.putInt(pj.startInclusive()).putInt(pj.endInclusive());
  }
  hasher.putInt(AAJ_CODE);
  for (  final CharOffsetSpan aaj : Ordering.natural().sortedCopy(additionalArgumentJustifications())) {
    hasher.putInt(aaj.startInclusive()).putInt(aaj.endInclusive());
  }
  hasher.putInt(realis.ordinal());
  return hasher.hash();
}",0.931830985915493
24958,"private ImmutableSet<TypeRoleFillerRealis> responsesToDelete(AnswerKey answerKey){
  final ImmutableSet.Builder<TypeRoleFillerRealis> ret=ImmutableSet.builder();
  for (  final AssessedResponse assessedResponse : answerKey.annotatedResponses()) {
    if (assessedResponse.response().type() == LIFE_DIE && assessedResponse.isCorrectUpToInexactJustifications()) {
      ret.add(normalizedFingerprintExtractor.apply(assessedResponse.response()));
    }
  }
  return ret.build();
}","private ImmutableSet<TypeRoleFillerRealis> responsesToDelete(AnswerKey answerKey){
  final ImmutableSet.Builder<TypeRoleFillerRealis> ret=ImmutableSet.builder();
  for (  final AssessedResponse assessedResponse : answerKey.annotatedResponses()) {
    if (assessedResponse.response().type() == LIFE_DIE && assessedResponse.isCorrectUpToInexactJustifications()) {
      ret.add(normalizedFingerprintExtractor.apply(assessedResponse.response()).copyWithModifiedType(LIFE_INJURE));
    }
  }
  return ret.build();
}",0.9655870445344128
24959,"/** 
 * Allows generating ""breakdowns"" of a provenanced confusion matrix according to some criteria. For example, a confusion matrix for an event detection task could be further broken down into separate confusion matrices for each event type. To do this, you specify a signature function mapping from each provenance to some signature (e.g. to event types, to genres, etc.).  The output will be an   {@link com.google.common.collect.ImmutableMap}from all observed signatures to   {@link com.bbn.bue.common.diff.ProvenancedConfusionMatrix}es consisting of only those provenances with the corresponding signature under the provided function. The signature function may never return a signature of   {@code null}. No guarantee is made about the iteration order of the resulting map.
 */
public <SignatureType>ImmutableMap<SignatureType,ProvenancedConfusionMatrix<CellFiller>> breakdown(Function<? super CellFiller,SignatureType> signatureFunction){
  final Map<SignatureType,Builder<CellFiller>> ret=Maps.newHashMap();
  for (  final Symbol leftLabel : leftLabels()) {
    for (    final Symbol rightLabel : rightLabels()) {
      for (      final CellFiller provenance : cell(leftLabel,rightLabel)) {
        final SignatureType signature=signatureFunction.apply(provenance);
        checkNotNull(signature,""String_Node_Str"");
        if (!ret.containsKey(signature)) {
          ret.put(signature,ProvenancedConfusionMatrix.<CellFiller>builder());
        }
        ret.get(signature).record(leftLabel,rightLabel,provenance);
      }
    }
  }
  final ImmutableMap.Builder<SignatureType,ProvenancedConfusionMatrix<CellFiller>> trueRet=ImmutableMap.builder();
  for (  final Map.Entry<SignatureType,Builder<CellFiller>> entry : ret.entrySet()) {
    trueRet.put(entry.getKey(),entry.getValue().build());
  }
  return trueRet.build();
}","/** 
 * Allows generating ""breakdowns"" of a provenanced confusion matrix according to some criteria. For example, a confusion matrix for an event detection task could be further broken down into separate confusion matrices for each event type. To do this, you specify a signature function mapping from each provenance to some signature (e.g. to event types, to genres, etc.).  The output will be an   {@link com.google.common.collect.ImmutableMap}from all observed signatures to   {@link com.bbn.bue.common.diff.ProvenancedConfusionMatrix}es consisting of only those provenances with the corresponding signature under the provided function. The signature function may never return a signature of   {@code null}. No guarantee is made about the iteration order of the resulting map.  {@code keyOrder} is the order the keys should be in the iteration order of the resulting map.
 */
public <SignatureType>ImmutableMap<SignatureType,ProvenancedConfusionMatrix<CellFiller>> breakdown(Function<? super CellFiller,SignatureType> signatureFunction,Ordering<SignatureType> keyOrdering){
  final Map<SignatureType,Builder<CellFiller>> ret=Maps.newHashMap();
  for (  final Symbol leftLabel : leftLabels()) {
    for (    final Symbol rightLabel : rightLabels()) {
      for (      final CellFiller provenance : cell(leftLabel,rightLabel)) {
        final SignatureType signature=signatureFunction.apply(provenance);
        checkNotNull(signature,""String_Node_Str"");
        if (!ret.containsKey(signature)) {
          ret.put(signature,ProvenancedConfusionMatrix.<CellFiller>builder());
        }
        ret.get(signature).record(leftLabel,rightLabel,provenance);
      }
    }
  }
  final ImmutableMap.Builder<SignatureType,ProvenancedConfusionMatrix<CellFiller>> trueRet=ImmutableMap.builder();
  for (  final Map.Entry<SignatureType,Builder<CellFiller>> entry : MapUtils.<SignatureType,Builder<CellFiller>>byKeyOrdering(keyOrdering).sortedCopy(ret.entrySet())) {
    trueRet.put(entry.getKey(),entry.getValue().build());
  }
  return trueRet.build();
}",0.9386913961875322
24960,"/** 
 * Runs the scorer over the specified documents.
 * @throws IOException
 */
public void run(final SystemOutputStore systemAnswerStore,final AnnotationStore goldAnswerStore,final Set<Symbol> documentsToScore,final ScoringConfiguration scoringConfiguration,final File baseOutputDir) throws IOException {
  final Map<KBPScoringObserver<TypeRoleFillerRealis>,File> scorerToOutputDir=makeScorerToOutputDir(baseOutputDir,scoringConfiguration.scoringObservers());
  for (  final KBPScoringObserver<TypeRoleFillerRealis> observer : scoringConfiguration.scoringObservers()) {
    observer.startCorpus();
  }
  for (  final Symbol docid : documentsToScore) {
    log.info(""String_Node_Str"",docid);
    AnswerKey key=goldAnswerStore.readOrEmpty(docid);
    for (    Function<AnswerKey,AnswerKey> answerKeyTransformation : scoringConfiguration.answerKeyTransformations()) {
      key=answerKeyTransformation.apply(key);
    }
    final OnlyMostSpecificTemporal temporalFilter=OnlyMostSpecificTemporal.forAnswerKey(key);
    final EntityNormalizer entityNormalizer=EntityNormalizer.fromAnnotation(key);
    final AnswerKeyAnswerSource<TypeRoleFillerRealis> answerKey=AnswerKeyAnswerSource.forAnswerable(key,TypeRoleFillerRealis.extractFromSystemResponse(entityNormalizer));
    SystemOutput rawSystemOutput=systemAnswerStore.readOrEmpty(docid);
    for (    final Function<SystemOutput,SystemOutput> systemOutputTransformation : scoringConfiguration.systemOutputTransformations()) {
      rawSystemOutput=systemOutputTransformation.apply(rawSystemOutput);
    }
    final SystemOutputAnswerSource<TypeRoleFillerRealis> systemOutput=SystemOutputAnswerSource.forAnswerable(temporalFilter.apply(rawSystemOutput),TypeRoleFillerRealis.extractFromSystemResponse(entityNormalizer));
    final ImmutableMap<KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver,KBPScoringObserver<TypeRoleFillerRealis>> docObserversToCorpusObservers=documentObserversForCorpusObservers(scoringConfiguration.scoringObservers(),answerKey,systemOutput);
    final Set<KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver> docObservers=docObserversToCorpusObservers.keySet();
    for (    final KBPScoringObserver<?>.KBPAnswerSourceObserver observer : docObservers) {
      observer.start();
    }
    final Set<TypeRoleFillerRealis> allAnswerables=ImmutableSet.copyOf(concat(systemOutput.answerables(),answerKey.answerables()));
    final Ordering<TypeRoleFillerRealis> order=ByJustificationLocation.create(answerKey,systemOutput);
    for (    final TypeRoleFillerRealis answerable : order.sortedCopy(allAnswerables)) {
      log.info(""String_Node_Str"",answerable);
      for (      final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
        observer.startAnswerable(answerable);
      }
      final Set<Response> responses=systemOutput.answers(answerable);
      final Set<AssessedResponse> annotatedResponses=answerKey.answers(answerable);
      for (      final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
        observer.observe(answerable,responses,annotatedResponses);
      }
      if (!responses.isEmpty()) {
        final Response selectedSystemResponse=systemOutput.systemOutput().selectFromMultipleSystemResponses(responses).get();
        final Optional<AssessedResponse> annotationForArgument=AssessedResponse.findAnnotationForArgument(selectedSystemResponse,annotatedResponses);
        if (annotationForArgument.isPresent()) {
          for (          final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
            observer.annotatedSelectedResponse(answerable,selectedSystemResponse,annotationForArgument.get(),annotatedResponses);
          }
        }
 else {
          for (          final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
            observer.unannotatedSelectedResponse(answerable,selectedSystemResponse);
          }
        }
        if (annotatedResponses.isEmpty()) {
          for (          final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
            observer.responsesOnlyNonEmpty(answerable,responses);
          }
        }
      }
 else       if (!annotatedResponses.isEmpty()) {
        for (        final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
          observer.annotationsOnlyNonEmpty(answerable,annotatedResponses);
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
      for (      final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
        observer.endAnswerable(answerable);
      }
    }
    for (    final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
      observer.end();
    }
    for (    final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
      File outputDir=new File(scorerToOutputDir.get(docObserversToCorpusObservers.get(observer)),docid.toString());
      outputDir.mkdirs();
      observer.writeDocumentOutput(outputDir);
    }
  }
  log.info(""String_Node_Str"");
  for (  final KBPScoringObserver<?> observer : scoringConfiguration.scoringObservers) {
    observer.endCorpus();
  }
  for (  final Map.Entry<KBPScoringObserver<TypeRoleFillerRealis>,File> corpusOutput : scorerToOutputDir.entrySet()) {
    corpusOutput.getKey().writeCorpusOutput(corpusOutput.getValue());
  }
}","/** 
 * Runs the scorer over the specified documents.
 * @throws IOException
 */
public void run(final SystemOutputStore systemAnswerStore,final AnnotationStore goldAnswerStore,final Set<Symbol> documentsToScore,final ScoringConfiguration scoringConfiguration,final File baseOutputDir) throws IOException {
  final Map<KBPScoringObserver<TypeRoleFillerRealis>,File> scorerToOutputDir=makeScorerToOutputDir(baseOutputDir,scoringConfiguration.scoringObservers());
  for (  final KBPScoringObserver<TypeRoleFillerRealis> observer : scoringConfiguration.scoringObservers()) {
    observer.startCorpus();
  }
  for (  final Symbol docid : documentsToScore) {
    log.info(""String_Node_Str"",docid);
    AnswerKey key=goldAnswerStore.readOrEmpty(docid);
    for (    Function<AnswerKey,AnswerKey> answerKeyTransformation : scoringConfiguration.answerKeyTransformations()) {
      key=answerKeyTransformation.apply(key);
    }
    final OnlyMostSpecificTemporal temporalFilter=OnlyMostSpecificTemporal.forAnswerKey(key);
    final EntityNormalizer entityNormalizer=EntityNormalizer.fromAnnotation(key);
    final AnswerKeyAnswerSource<TypeRoleFillerRealis> answerKey=AnswerKeyAnswerSource.forAnswerable(key,TypeRoleFillerRealis.extractFromSystemResponse(entityNormalizer));
    SystemOutput rawSystemOutput=systemAnswerStore.readOrEmpty(docid);
    for (    final Function<SystemOutput,SystemOutput> systemOutputTransformation : scoringConfiguration.systemOutputTransformations()) {
      rawSystemOutput=systemOutputTransformation.apply(rawSystemOutput);
    }
    final SystemOutputAnswerSource<TypeRoleFillerRealis> systemOutput=SystemOutputAnswerSource.forAnswerable(temporalFilter.apply(rawSystemOutput),TypeRoleFillerRealis.extractFromSystemResponse(entityNormalizer));
    final ImmutableMap<KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver,KBPScoringObserver<TypeRoleFillerRealis>> docObserversToCorpusObservers=documentObserversForCorpusObservers(scoringConfiguration.scoringObservers(),answerKey,systemOutput);
    final Set<KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver> docObservers=docObserversToCorpusObservers.keySet();
    for (    final KBPScoringObserver<?>.KBPAnswerSourceObserver observer : docObservers) {
      observer.start();
    }
    final Set<TypeRoleFillerRealis> allAnswerables=ImmutableSet.copyOf(concat(systemOutput.answerables(),answerKey.answerables()));
    final Ordering<TypeRoleFillerRealis> order=ByJustificationLocation.create(answerKey,systemOutput);
    for (    final TypeRoleFillerRealis answerable : order.sortedCopy(allAnswerables)) {
      log.info(""String_Node_Str"",answerable);
      for (      final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
        observer.startAnswerable(answerable);
      }
      final Set<Response> responses=systemOutput.answers(answerable);
      final Set<AssessedResponse> annotatedResponses=answerKey.answers(answerable);
      for (      final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
        observer.observe(answerable,responses,annotatedResponses);
      }
      if (!responses.isEmpty()) {
        final Response selectedSystemResponse=systemOutput.systemOutput().selectFromMultipleSystemResponses(responses).get();
        final Optional<AssessedResponse> annotationForArgument=AssessedResponse.findAnnotationForArgument(selectedSystemResponse,annotatedResponses);
        if (annotationForArgument.isPresent()) {
          for (          final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
            observer.annotatedSelectedResponse(answerable,selectedSystemResponse,annotationForArgument.get(),annotatedResponses);
          }
        }
 else {
          for (          final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
            observer.unannotatedSelectedResponse(answerable,selectedSystemResponse,annotatedResponses);
          }
        }
        if (annotatedResponses.isEmpty()) {
          for (          final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
            observer.responsesOnlyNonEmpty(answerable,responses);
          }
        }
      }
 else       if (!annotatedResponses.isEmpty()) {
        for (        final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
          observer.annotationsOnlyNonEmpty(answerable,annotatedResponses);
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
      for (      final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
        observer.endAnswerable(answerable);
      }
    }
    for (    final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
      observer.end();
    }
    for (    final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
      File outputDir=new File(scorerToOutputDir.get(docObserversToCorpusObservers.get(observer)),docid.toString());
      outputDir.mkdirs();
      observer.writeDocumentOutput(outputDir);
    }
  }
  log.info(""String_Node_Str"");
  for (  final KBPScoringObserver<?> observer : scoringConfiguration.scoringObservers) {
    observer.endCorpus();
  }
  for (  final Map.Entry<KBPScoringObserver<TypeRoleFillerRealis>,File> corpusOutput : scorerToOutputDir.entrySet()) {
    corpusOutput.getKey().writeCorpusOutput(corpusOutput.getValue());
  }
}",0.9983064444246368
24961,"@Override public void unannotatedSelectedResponse(final Answerable answerable,final Response unannotated){
  throw IncompleteAnnotationException.forMissingResponse(unannotated);
}","@Override public void unannotatedSelectedResponse(final Answerable answerable,final Response unannotated,Set<AssessedResponse> assessedResponses){
  throw IncompleteAnnotationException.forMissingResponse(unannotated);
}",0.8994974874371859
24962,"@Override public KBPAnswerSourceObserver answerSourceObserver(final SystemOutputAnswerSource<Answerable> systemOutputSource,final AnswerKeyAnswerSource<Answerable> answerKeyAnswerSource){
  return new KBPAnswerSourceObserver(systemOutputSource,answerKeyAnswerSource){
    @Override public void unannotatedSelectedResponse(    final Answerable answerable,    final Response unannotated){
      throw IncompleteAnnotationException.forMissingResponse(unannotated);
    }
  }
;
}","@Override public KBPAnswerSourceObserver answerSourceObserver(final SystemOutputAnswerSource<Answerable> systemOutputSource,final AnswerKeyAnswerSource<Answerable> answerKeyAnswerSource){
  return new KBPAnswerSourceObserver(systemOutputSource,answerKeyAnswerSource){
    @Override public void unannotatedSelectedResponse(    final Answerable answerable,    final Response unannotated,    Set<AssessedResponse> assessedResponses){
      throw IncompleteAnnotationException.forMissingResponse(unannotated);
    }
  }
;
}",0.9557344064386318
24963,"/** 
 * Called when the selected system response for an annotator is unannotated.
 * @param answerable
 * @param response
 */
public void unannotatedSelectedResponse(final Answerable answerable,final Response response){
}","/** 
 * Called when the selected system response for an annotator is unannotated.
 * @param answerable
 * @param response
 */
public void unannotatedSelectedResponse(final Answerable answerable,final Response response,Set<AssessedResponse> assessedResponses){
}",0.91701244813278
24964,"@Override public void annotatedSelectedResponse(final TypeRoleFillerRealis answerable,final Response response,final AssessedResponse annotationForSelected,final Set<AssessedResponse> allAssessments){
  if (ResponseCorrect.apply(annotationForSelected)) {
    textOut.append(""String_Node_Str"");
    confusionMatrixBuilder.record(PRESENT,PRESENT,answerable);
  }
 else {
    textOut.append(""String_Node_Str"").append(annotationForSelected.assessment()).append(""String_Node_Str"");
    confusionMatrixBuilder.record(PRESENT,ABSENT,answerable);
    htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",response,systemOutputSource.systemOutput().score(response),annotationForSelected));
    if (any(allAssessments,ResponseCorrect)) {
      textOut.append(""String_Node_Str"").append(Iterables.find(allAssessments,ResponseCorrect)).append(""String_Node_Str"");
      confusionMatrixBuilder.record(ABSENT,PRESENT,answerable);
      htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",getFirst(allAssessments,null).response(),allAssessments));
    }
  }
}","@Override public void annotatedSelectedResponse(final TypeRoleFillerRealis answerable,final Response response,final AssessedResponse annotationForSelected,final Set<AssessedResponse> allAssessments){
  if (ResponseCorrect.apply(annotationForSelected)) {
    textOut.append(""String_Node_Str"");
    confusionMatrixBuilder.record(PRESENT,PRESENT,answerable);
  }
 else {
    textOut.append(""String_Node_Str"").append(annotationForSelected.assessment()).append(""String_Node_Str"");
    confusionMatrixBuilder.record(PRESENT,ABSENT,answerable);
    htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",response,systemOutputSource.systemOutput().score(response),annotationForSelected));
    checkForFalseNegative(answerable,allAssessments);
  }
}",0.7886710239651417
24965,"@Override public void unannotatedSelectedResponse(final TypeRoleFillerRealis answerable,final Response unannotated){
  textOut.append(""String_Node_Str"").append(unannotated).append(""String_Node_Str"");
  confusionMatrixBuilder.record(PRESENT,ABSENT,answerable);
  htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",unannotated,ImmutableList.of(systemOutputSource.systemOutput().score(unannotated)),answerKey().answers(answerable)));
}","@Override public void unannotatedSelectedResponse(final TypeRoleFillerRealis answerable,final Response unannotated,Set<AssessedResponse> annotatedResponses){
  textOut.append(""String_Node_Str"").append(unannotated).append(""String_Node_Str"");
  confusionMatrixBuilder.record(PRESENT,ABSENT,answerable);
  htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",unannotated,ImmutableList.of(systemOutputSource.systemOutput().score(unannotated)),answerKey().answers(answerable)));
  checkForFalseNegative(answerable,annotatedResponses);
}",0.9032901296111664
24966,"@Override public void annotationsOnlyNonEmpty(final TypeRoleFillerRealis answerable,final Set<AssessedResponse> annotatedResponses){
  if (any(annotatedResponses,ResponseCorrect)) {
    textOut.append(""String_Node_Str"").append(Iterables.find(annotatedResponses,ResponseCorrect)).append(""String_Node_Str"");
    confusionMatrixBuilder.record(ABSENT,PRESENT,answerable);
    htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",getFirst(annotatedResponses,null).response(),annotatedResponses));
  }
 else {
    textOut.append(""String_Node_Str"");
  }
}","@Override public void annotationsOnlyNonEmpty(final TypeRoleFillerRealis answerable,final Set<AssessedResponse> annotatedResponses){
  if (checkForFalseNegative(answerable,annotatedResponses)) {
  }
 else {
    textOut.append(""String_Node_Str"");
  }
}",0.4572127139364303
24967,"@Override public KBPAnswerSourceObserver answerSourceObserver(final SystemOutputAnswerSource<TypeRoleFillerRealis> systemOutputSource,final AnswerKeyAnswerSource<TypeRoleFillerRealis> answerKeyAnswerSource){
  return new KBPAnswerSourceObserver(systemOutputSource,answerKeyAnswerSource){
    private final ProvenancedConfusionMatrix.Builder<TypeRoleFillerRealis> confusionMatrixBuilder=ProvenancedConfusionMatrix.builder();
    private final StringBuilder htmlOut=new StringBuilder();
    private final StringBuilder textOut=new StringBuilder();
    @Override public void start(){
      htmlOut.append(renderer.preamble());
    }
    @Override public void annotatedSelectedResponse(    final TypeRoleFillerRealis answerable,    final Response response,    final AssessedResponse annotationForSelected,    final Set<AssessedResponse> allAssessments){
      if (ResponseCorrect.apply(annotationForSelected)) {
        textOut.append(""String_Node_Str"");
        confusionMatrixBuilder.record(PRESENT,PRESENT,answerable);
      }
 else {
        textOut.append(""String_Node_Str"").append(annotationForSelected.assessment()).append(""String_Node_Str"");
        confusionMatrixBuilder.record(PRESENT,ABSENT,answerable);
        htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",response,systemOutputSource.systemOutput().score(response),annotationForSelected));
        if (any(allAssessments,ResponseCorrect)) {
          textOut.append(""String_Node_Str"").append(Iterables.find(allAssessments,ResponseCorrect)).append(""String_Node_Str"");
          confusionMatrixBuilder.record(ABSENT,PRESENT,answerable);
          htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",getFirst(allAssessments,null).response(),allAssessments));
        }
      }
    }
    @Override public void unannotatedSelectedResponse(    final TypeRoleFillerRealis answerable,    final Response unannotated){
      textOut.append(""String_Node_Str"").append(unannotated).append(""String_Node_Str"");
      confusionMatrixBuilder.record(PRESENT,ABSENT,answerable);
      htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",unannotated,ImmutableList.of(systemOutputSource.systemOutput().score(unannotated)),answerKey().answers(answerable)));
    }
    @Override public void annotationsOnlyNonEmpty(    final TypeRoleFillerRealis answerable,    final Set<AssessedResponse> annotatedResponses){
      if (any(annotatedResponses,ResponseCorrect)) {
        textOut.append(""String_Node_Str"").append(Iterables.find(annotatedResponses,ResponseCorrect)).append(""String_Node_Str"");
        confusionMatrixBuilder.record(ABSENT,PRESENT,answerable);
        htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",getFirst(annotatedResponses,null).response(),annotatedResponses));
      }
 else {
        textOut.append(""String_Node_Str"");
      }
    }
    @Override public void end(){
      final ProvenancedConfusionMatrix<TypeRoleFillerRealis> confusionMatrix=confusionMatrixBuilder.build();
      observeDocumentConfusionMatrix(confusionMatrix);
    }
    @Override public void writeDocumentOutput(    File directory) throws IOException {
      final StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"").append(name()).append(""String_Node_Str"");
      final ProvenancedConfusionMatrix<TypeRoleFillerRealis> confusionMatrix=confusionMatrixBuilder.build();
      final SummaryConfusionMatrix summaryConfusionMatrix=confusionMatrix.buildSummaryMatrix();
      sb.append(summaryConfusionMatrix.prettyPrint()).append(""String_Node_Str"");
      sb.append(confusionMatrix.prettyPrint()).append(""String_Node_Str"");
      Files.asCharSink(new File(directory,""String_Node_Str""),Charsets.UTF_8).write(sb.toString());
      final String html=htmlOut.toString();
      if (!html.isEmpty()) {
        Files.asCharSink(new File(directory,""String_Node_Str""),Charsets.UTF_8).write(html);
      }
    }
  }
;
}","@Override public KBPAnswerSourceObserver answerSourceObserver(final SystemOutputAnswerSource<TypeRoleFillerRealis> systemOutputSource,final AnswerKeyAnswerSource<TypeRoleFillerRealis> answerKeyAnswerSource){
  return new KBPAnswerSourceObserver(systemOutputSource,answerKeyAnswerSource){
    private final ProvenancedConfusionMatrix.Builder<TypeRoleFillerRealis> confusionMatrixBuilder=ProvenancedConfusionMatrix.builder();
    private final StringBuilder htmlOut=new StringBuilder();
    private final StringBuilder textOut=new StringBuilder();
    @Override public void start(){
      htmlOut.append(renderer.preamble());
    }
    @Override public void annotatedSelectedResponse(    final TypeRoleFillerRealis answerable,    final Response response,    final AssessedResponse annotationForSelected,    final Set<AssessedResponse> allAssessments){
      if (ResponseCorrect.apply(annotationForSelected)) {
        textOut.append(""String_Node_Str"");
        confusionMatrixBuilder.record(PRESENT,PRESENT,answerable);
      }
 else {
        textOut.append(""String_Node_Str"").append(annotationForSelected.assessment()).append(""String_Node_Str"");
        confusionMatrixBuilder.record(PRESENT,ABSENT,answerable);
        htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",response,systemOutputSource.systemOutput().score(response),annotationForSelected));
        checkForFalseNegative(answerable,allAssessments);
      }
    }
    private boolean checkForFalseNegative(    final TypeRoleFillerRealis answerable,    final Set<AssessedResponse> assessedResponses){
      if (any(assessedResponses,ResponseCorrect)) {
        textOut.append(""String_Node_Str"").append(Iterables.find(assessedResponses,ResponseCorrect)).append(""String_Node_Str"");
        confusionMatrixBuilder.record(ABSENT,PRESENT,answerable);
        htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",getFirst(assessedResponses,null).response(),assessedResponses));
        return true;
      }
 else {
        return false;
      }
    }
    @Override public void unannotatedSelectedResponse(    final TypeRoleFillerRealis answerable,    final Response unannotated,    Set<AssessedResponse> annotatedResponses){
      textOut.append(""String_Node_Str"").append(unannotated).append(""String_Node_Str"");
      confusionMatrixBuilder.record(PRESENT,ABSENT,answerable);
      htmlOut.append(renderer.vsAnnotated(""String_Node_Str"",""String_Node_Str"",unannotated,ImmutableList.of(systemOutputSource.systemOutput().score(unannotated)),answerKey().answers(answerable)));
      checkForFalseNegative(answerable,annotatedResponses);
    }
    @Override public void annotationsOnlyNonEmpty(    final TypeRoleFillerRealis answerable,    final Set<AssessedResponse> annotatedResponses){
      if (checkForFalseNegative(answerable,annotatedResponses)) {
      }
 else {
        textOut.append(""String_Node_Str"");
      }
    }
    @Override public void end(){
      final ProvenancedConfusionMatrix<TypeRoleFillerRealis> confusionMatrix=confusionMatrixBuilder.build();
      observeDocumentConfusionMatrix(confusionMatrix);
    }
    @Override public void writeDocumentOutput(    File directory) throws IOException {
      final StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"").append(name()).append(""String_Node_Str"");
      final ProvenancedConfusionMatrix<TypeRoleFillerRealis> confusionMatrix=confusionMatrixBuilder.build();
      final SummaryConfusionMatrix summaryConfusionMatrix=confusionMatrix.buildSummaryMatrix();
      sb.append(summaryConfusionMatrix.prettyPrint()).append(""String_Node_Str"");
      sb.append(confusionMatrix.prettyPrint()).append(""String_Node_Str"");
      Files.asCharSink(new File(directory,""String_Node_Str""),Charsets.UTF_8).write(sb.toString());
      final String html=htmlOut.toString();
      if (!html.isEmpty()) {
        Files.asCharSink(new File(directory,""String_Node_Str""),Charsets.UTF_8).write(html);
      }
    }
  }
;
}",0.8856349406715476
24968,"public static <ProvenanceType>Map<String,Map<Symbol,ProvenancedConfusionMatrix<ProvenanceType>>> computeBreakdowns(ProvenancedConfusionMatrix<ProvenanceType> corpusConfusionMatrix,Map<String,Function<? super ProvenanceType,Symbol>> breakdowns){
  final Map<String,Map<Symbol,ProvenancedConfusionMatrix<ProvenanceType>>> printModes=Maps.newHashMap();
  printModes.put(""String_Node_Str"",ImmutableMap.of(Symbol.from(""String_Node_Str""),corpusConfusionMatrix));
  for (  final Map.Entry<String,Function<? super ProvenanceType,Symbol>> breakdownEntry : breakdowns.entrySet()) {
    printModes.put(breakdownEntry.getKey(),corpusConfusionMatrix.breakdown(breakdownEntry.getValue()));
  }
  return printModes;
}","public static <ProvenanceType>ImmutableMap<String,Map<Symbol,ProvenancedConfusionMatrix<ProvenanceType>>> computeBreakdowns(ProvenancedConfusionMatrix<ProvenanceType> corpusConfusionMatrix,Map<String,Function<? super ProvenanceType,Symbol>> breakdowns){
  final ImmutableMap.Builder<String,Map<Symbol,ProvenancedConfusionMatrix<ProvenanceType>>> printModes=ImmutableMap.builder();
  for (  final Map.Entry<String,Function<? super ProvenanceType,Symbol>> breakdownEntry : breakdowns.entrySet()) {
    printModes.put(breakdownEntry.getKey(),corpusConfusionMatrix.breakdown(breakdownEntry.getValue(),Ordering.from(new SymbolUtils.ByString())));
  }
  return printModes.build();
}",0.5616835994194485
24969,"@Override public int compareTo(final TypeRoleFillerRealis o){
  return ComparisonChain.start().compare(docid.toString(),o.docid.toString()).compare(type.toString(),o.type.toString()).compare(role.toString(),o.type.toString()).compare(realis,o.realis).compare(argumentCanonicalString.toString(),argumentCanonicalString.toString()).result();
}","@Override public int compareTo(final TypeRoleFillerRealis o){
  return ComparisonChain.start().compare(docid.toString(),o.docid.toString()).compare(type.toString(),o.type.toString()).compare(role.toString(),o.type.toString()).compare(realis,o.realis).compare(argumentCanonicalString,argumentCanonicalString).result();
}",0.9666666666666668
24970,"/** 
 * Runs the scorer over the specified documents.
 * @throws IOException
 */
public void run(final SystemOutputStore systemAnswerStore,final AnnotationStore goldAnswerStore,final Set<Symbol> documentsToScore,final ScoringConfiguration scoringConfiguration,final File baseOutputDir) throws IOException {
  final Map<KBPScoringObserver<TypeRoleFillerRealis>,File> scorerToOutputDir=makeScorerToOutputDir(baseOutputDir,scoringConfiguration.scoringObservers());
  for (  final KBPScoringObserver<TypeRoleFillerRealis> observer : scoringConfiguration.scoringObservers()) {
    observer.startCorpus();
  }
  for (  final Symbol docid : documentsToScore) {
    log.info(""String_Node_Str"",docid);
    AnswerKey key=goldAnswerStore.readOrEmpty(docid);
    for (    Function<AnswerKey,AnswerKey> answerKeyTransformation : scoringConfiguration.answerKeyTransformations()) {
      key=answerKeyTransformation.apply(key);
    }
    final EntityNormalizer entityNormalizer=EntityNormalizer.fromAnnotation(key);
    final OnlyMostSpecificTemporal temporalFilter=OnlyMostSpecificTemporal.forAnswerKey(key);
    final DeleteInjureForCorrectDie injureFilter=DeleteInjureForCorrectDie.fromEntityNormalizer(entityNormalizer);
    final Function<SystemOutput,SystemOutput> injureSystemOutputFilter=injureFilter.systemOutputTransformerForAnswerKey(key);
    key=injureFilter.answerKeyTransformer().apply(key);
    final AnswerKeyAnswerSource<TypeRoleFillerRealis> answerKey=AnswerKeyAnswerSource.forAnswerable(key,TypeRoleFillerRealis.extractFromSystemResponse(entityNormalizer));
    SystemOutput rawSystemOutput=systemAnswerStore.readOrEmpty(docid);
    for (    final Function<SystemOutput,SystemOutput> systemOutputTransformation : scoringConfiguration.systemOutputTransformations()) {
      rawSystemOutput=systemOutputTransformation.apply(rawSystemOutput);
    }
    rawSystemOutput=temporalFilter.apply(rawSystemOutput);
    rawSystemOutput=injureSystemOutputFilter.apply(rawSystemOutput);
    final SystemOutputAnswerSource<TypeRoleFillerRealis> systemOutput=SystemOutputAnswerSource.forAnswerable(rawSystemOutput,TypeRoleFillerRealis.extractFromSystemResponse(entityNormalizer));
    final ImmutableMap<KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver,KBPScoringObserver<TypeRoleFillerRealis>> docObserversToCorpusObservers=documentObserversForCorpusObservers(scoringConfiguration.scoringObservers(),answerKey,systemOutput);
    final Set<KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver> docObservers=docObserversToCorpusObservers.keySet();
    for (    final KBPScoringObserver<?>.KBPAnswerSourceObserver observer : docObservers) {
      observer.start();
    }
    final Set<TypeRoleFillerRealis> allAnswerables=ImmutableSet.copyOf(concat(systemOutput.answerables(),answerKey.answerables()));
    final Ordering<TypeRoleFillerRealis> order=ByJustificationLocation.create(answerKey,systemOutput);
    for (    final TypeRoleFillerRealis answerable : order.sortedCopy(allAnswerables)) {
      log.info(""String_Node_Str"",answerable);
      for (      final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
        observer.startAnswerable(answerable);
      }
      final Set<Response> responses=systemOutput.answers(answerable);
      final Set<AssessedResponse> annotatedResponses=answerKey.answers(answerable);
      for (      final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
        observer.observe(answerable,responses,annotatedResponses);
      }
      if (!responses.isEmpty()) {
        final Response selectedSystemResponse=systemOutput.systemOutput().selectFromMultipleSystemResponses(responses).get();
        final Optional<AssessedResponse> annotationForArgument=AssessedResponse.findAnnotationForArgument(selectedSystemResponse,annotatedResponses);
        if (annotationForArgument.isPresent()) {
          for (          final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
            observer.annotatedSelectedResponse(answerable,selectedSystemResponse,annotationForArgument.get(),annotatedResponses);
          }
        }
 else {
          for (          final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
            observer.unannotatedSelectedResponse(answerable,selectedSystemResponse,annotatedResponses);
          }
        }
        if (annotatedResponses.isEmpty()) {
          for (          final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
            observer.responsesOnlyNonEmpty(answerable,responses);
          }
        }
      }
 else       if (!annotatedResponses.isEmpty()) {
        for (        final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
          observer.annotationsOnlyNonEmpty(answerable,annotatedResponses);
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
      for (      final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
        observer.endAnswerable(answerable);
      }
    }
    for (    final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
      observer.end();
    }
    for (    final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
      File outputDir=new File(scorerToOutputDir.get(docObserversToCorpusObservers.get(observer)),docid.toString());
      outputDir.mkdirs();
      observer.writeDocumentOutput(outputDir);
    }
  }
  log.info(""String_Node_Str"");
  for (  final KBPScoringObserver<?> observer : scoringConfiguration.scoringObservers) {
    observer.endCorpus();
  }
  for (  final Map.Entry<KBPScoringObserver<TypeRoleFillerRealis>,File> corpusOutput : scorerToOutputDir.entrySet()) {
    corpusOutput.getKey().writeCorpusOutput(corpusOutput.getValue());
  }
}","/** 
 * Runs the scorer over the specified documents.
 * @throws IOException
 */
public void run(final SystemOutputStore systemAnswerStore,final AnnotationStore goldAnswerStore,final Set<Symbol> documentsToScore,final ScoringConfiguration scoringConfiguration,final File baseOutputDir) throws IOException {
  final Map<KBPScoringObserver<TypeRoleFillerRealis>,File> scorerToOutputDir=makeScorerToOutputDir(baseOutputDir,scoringConfiguration.scoringObservers());
  for (  final KBPScoringObserver<TypeRoleFillerRealis> observer : scoringConfiguration.scoringObservers()) {
    observer.startCorpus();
  }
  for (  final Symbol docid : documentsToScore) {
    log.info(""String_Node_Str"",docid);
    AnswerKey key=goldAnswerStore.readOrEmpty(docid);
    for (    Function<AnswerKey,AnswerKey> answerKeyTransformation : scoringConfiguration.answerKeyTransformations()) {
      key=answerKeyTransformation.apply(key);
    }
    final EntityNormalizer entityNormalizer=EntityNormalizer.fromAnnotation(key);
    final OnlyMostSpecificTemporal temporalFilter=OnlyMostSpecificTemporal.forAnswerKey(key);
    final DeleteInjureForCorrectDie injureFilter=DeleteInjureForCorrectDie.fromEntityNormalizer(entityNormalizer);
    final Function<SystemOutput,SystemOutput> injureSystemOutputFilter=injureFilter.systemOutputTransformerForAnswerKey(key);
    key=injureFilter.answerKeyTransformer().apply(key);
    final AnswerKeyAnswerSource<TypeRoleFillerRealis> answerKey=AnswerKeyAnswerSource.forAnswerable(key,TypeRoleFillerRealis.extractFromSystemResponse(entityNormalizer));
    SystemOutput rawSystemOutput=systemAnswerStore.readOrEmpty(docid);
    for (    final Function<SystemOutput,SystemOutput> systemOutputTransformation : scoringConfiguration.systemOutputTransformations()) {
      rawSystemOutput=systemOutputTransformation.apply(rawSystemOutput);
    }
    rawSystemOutput=temporalFilter.apply(rawSystemOutput);
    rawSystemOutput=injureSystemOutputFilter.apply(rawSystemOutput);
    final SystemOutputAnswerSource<TypeRoleFillerRealis> systemOutput=SystemOutputAnswerSource.forAnswerable(rawSystemOutput,TypeRoleFillerRealis.extractFromSystemResponse(entityNormalizer));
    final ImmutableMap<KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver,KBPScoringObserver<TypeRoleFillerRealis>> docObserversToCorpusObservers=documentObserversForCorpusObservers(scoringConfiguration.scoringObservers(),answerKey,systemOutput);
    final Set<KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver> docObservers=docObserversToCorpusObservers.keySet();
    for (    final KBPScoringObserver<?>.KBPAnswerSourceObserver observer : docObservers) {
      observer.start();
    }
    final Set<TypeRoleFillerRealis> allAnswerables=ImmutableSet.copyOf(concat(systemOutput.answerables(),answerKey.answerables()));
    for (    final TypeRoleFillerRealis answerable : allAnswerables) {
      log.info(""String_Node_Str"",answerable);
      for (      final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
        observer.startAnswerable(answerable);
      }
      final Set<Response> responses=systemOutput.answers(answerable);
      final Set<AssessedResponse> annotatedResponses=answerKey.answers(answerable);
      for (      final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
        observer.observe(answerable,responses,annotatedResponses);
      }
      if (!responses.isEmpty()) {
        final Response selectedSystemResponse=systemOutput.systemOutput().selectFromMultipleSystemResponses(responses).get();
        final Optional<AssessedResponse> annotationForArgument=AssessedResponse.findAnnotationForArgument(selectedSystemResponse,annotatedResponses);
        if (annotationForArgument.isPresent()) {
          for (          final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
            observer.annotatedSelectedResponse(answerable,selectedSystemResponse,annotationForArgument.get(),annotatedResponses);
          }
        }
 else {
          for (          final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
            observer.unannotatedSelectedResponse(answerable,selectedSystemResponse,annotatedResponses);
          }
        }
        if (annotatedResponses.isEmpty()) {
          for (          final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
            observer.responsesOnlyNonEmpty(answerable,responses);
          }
        }
      }
 else       if (!annotatedResponses.isEmpty()) {
        for (        final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
          observer.annotationsOnlyNonEmpty(answerable,annotatedResponses);
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
      for (      final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
        observer.endAnswerable(answerable);
      }
    }
    for (    final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
      observer.end();
    }
    for (    final KBPScoringObserver<TypeRoleFillerRealis>.KBPAnswerSourceObserver observer : docObservers) {
      File outputDir=new File(scorerToOutputDir.get(docObserversToCorpusObservers.get(observer)),docid.toString());
      outputDir.mkdirs();
      observer.writeDocumentOutput(outputDir);
    }
  }
  log.info(""String_Node_Str"");
  for (  final KBPScoringObserver<?> observer : scoringConfiguration.scoringObservers) {
    observer.endCorpus();
  }
  for (  final Map.Entry<KBPScoringObserver<TypeRoleFillerRealis>,File> corpusOutput : scorerToOutputDir.entrySet()) {
    corpusOutput.getKey().writeCorpusOutput(corpusOutput.getValue());
  }
}",0.9875031451815818
24971,"public static void main(final String[] argv) throws IOException {
  if (argv.length != 1) {
    usage();
  }
  final Parameters params=Parameters.loadSerifStyle(new File(argv[0]));
  log.info(params.dump());
  final SystemOutputStore systemOutputStore=AssessmentSpecFormats.openSystemOutputStore(params.getExistingDirectory(""String_Node_Str""));
  final AnnotationStore goldAnswerStore=AssessmentSpecFormats.openAnnotationStore(params.getExistingDirectory(""String_Node_Str""));
  final Set<Symbol> documentsToScore;
  if (params.isPresent(""String_Node_Str"")) {
    documentsToScore=ImmutableSet.copyOf(FileUtils.loadSymbolList(params.getExistingFile(""String_Node_Str"")));
  }
 else {
    documentsToScore=union(systemOutputStore.docIDs(),goldAnswerStore.docIDs());
  }
  final KBPScorer scorer=KBPScorer.create();
  scorer.run(systemOutputStore,goldAnswerStore,documentsToScore,getCorpusObservers(params),params.getCreatableDirectory(""String_Node_Str""));
}","public static void main(final String[] argv) throws IOException {
  if (argv.length != 1) {
    usage();
  }
  final Parameters params=Parameters.loadSerifStyle(new File(argv[0]));
  log.info(params.dump());
  final AnnotationStore goldAnswerStore=AssessmentSpecFormats.openAnnotationStore(params.getExistingDirectory(""String_Node_Str""));
  checkArgument(params.isPresent(""String_Node_Str"") != params.isPresent(""String_Node_Str""),""String_Node_Str"");
  if (params.isPresent(""String_Node_Str"")) {
  }
 else   if (params.isPresent(""String_Node_Str"")) {
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
  final SystemOutputStore systemOutputStore=AssessmentSpecFormats.openSystemOutputStore(params.getExistingDirectory(""String_Node_Str""));
  final Set<Symbol> documentsToScore;
  if (params.isPresent(""String_Node_Str"")) {
    documentsToScore=ImmutableSet.copyOf(FileUtils.loadSymbolList(params.getExistingFile(""String_Node_Str"")));
  }
 else {
    documentsToScore=union(systemOutputStore.docIDs(),goldAnswerStore.docIDs());
  }
  final KBPScorer scorer=KBPScorer.create();
  scorer.run(systemOutputStore,goldAnswerStore,documentsToScore,getCorpusObservers(params),params.getCreatableDirectory(""String_Node_Str""));
}",0.797804208600183
24972,"@Override public AnswerKey apply(AnswerKey input){
  final ImmutableSet.Builder<AssessedResponse> newAssessedResponses=ImmutableSet.builder();
  newAssessedResponses.addAll(input.annotatedResponses());
  for (  final AssessedResponse assessedResponse : input.annotatedResponses()) {
    if (assessedResponse.assessment().realis().isPresent()) {
      newAssessedResponses.add(AssessedResponse.from(assessedResponse.response().copyWithSwappedRealis(assessedResponse.assessment().realis().get()),assessedResponse.assessment()));
    }
  }
  return AnswerKey.from(input.docId(),newAssessedResponses.build(),input.unannotatedResponses());
}","@Override public AnswerKey apply(AnswerKey input){
  final ImmutableSet<Response> allExistingResponses=input.allResponses();
  final ImmutableSet.Builder<AssessedResponse> newAssessedResponses=ImmutableSet.builder();
  newAssessedResponses.addAll(input.annotatedResponses());
  for (  final AssessedResponse assessedResponse : input.annotatedResponses()) {
    if (assessedResponse.assessment().realis().isPresent()) {
      final Response responseWithAssessedRealis=assessedResponse.response().copyWithSwappedRealis(assessedResponse.assessment().realis().get());
      if (!allExistingResponses.contains(responseWithAssessedRealis)) {
        newAssessedResponses.add(AssessedResponse.from(responseWithAssessedRealis,assessedResponse.assessment()));
      }
    }
  }
  return AnswerKey.from(input.docId(),newAssessedResponses.build(),input.unannotatedResponses());
}",0.7845744680851063
24973,"private static void scoreSingleSystemOutputStore(AnnotationStore goldAnswerStore,List<KBPScoringObserver<TypeRoleFillerRealis>> corpusObservers,KBPScorer scorer,Parameters params) throws IOException {
  final File systemOutputDir=params.getExistingDirectory(""String_Node_Str"");
  log.info(""String_Node_Str"",systemOutputDir);
  final SystemOutputStore systemOutputStore=AssessmentSpecFormats.openSystemOutputStore(systemOutputDir);
  final Set<Symbol> documentsToScore;
  if (params.isPresent(""String_Node_Str"")) {
    documentsToScore=loadDocumentsToScore(params);
  }
 else {
    documentsToScore=union(systemOutputStore.docIDs(),goldAnswerStore.docIDs());
  }
  scorer.run(systemOutputStore,goldAnswerStore,documentsToScore,corpusObservers,params.getCreatableDirectory(""String_Node_Str""));
}","private static void scoreSingleSystemOutputStore(AnnotationStore goldAnswerStore,KBPScorer scorer,Parameters params) throws IOException {
  final File systemOutputDir=params.getExistingDirectory(""String_Node_Str"");
  log.info(""String_Node_Str"",systemOutputDir);
  final SystemOutputStore systemOutputStore=AssessmentSpecFormats.openSystemOutputStore(systemOutputDir);
  final Set<Symbol> documentsToScore;
  if (params.isPresent(""String_Node_Str"")) {
    documentsToScore=loadDocumentsToScore(params);
  }
 else {
    documentsToScore=union(systemOutputStore.docIDs(),goldAnswerStore.docIDs());
  }
  final List<KBPScoringObserver<TypeRoleFillerRealis>> corpusObservers=getCorpusObservers(params);
  scorer.run(systemOutputStore,goldAnswerStore,documentsToScore,corpusObservers,params.getCreatableDirectory(""String_Node_Str""));
}",0.2293464858199753
24974,"private static void scoreMultipleSystemOutputStores(AnnotationStore goldAnswerStore,KBPScorer scorer,List<KBPScoringObserver<TypeRoleFillerRealis>> corpusObservers,Parameters params) throws IOException {
  final File systemOutputsDir=params.getExistingDirectory(""String_Node_Str"");
  final File scoringOutputRoot=params.getCreatableDirectory(""String_Node_Str"");
  log.info(""String_Node_Str"",systemOutputsDir);
  final Set<Symbol> documentsToScore=loadDocumentsToScore(params);
  for (  File subDir : systemOutputsDir.listFiles()) {
    if (subDir.isDirectory()) {
      final SystemOutputStore systemOutputStore=AssessmentSpecFormats.openSystemOutputStore(subDir);
      final File outputDir=new File(scoringOutputRoot,subDir.getName());
      outputDir.mkdirs();
      scorer.run(systemOutputStore,goldAnswerStore,documentsToScore,corpusObservers,outputDir);
    }
  }
}","private static void scoreMultipleSystemOutputStores(AnnotationStore goldAnswerStore,KBPScorer scorer,Parameters params) throws IOException {
  final File systemOutputsDir=params.getExistingDirectory(""String_Node_Str"");
  final File scoringOutputRoot=params.getCreatableDirectory(""String_Node_Str"");
  log.info(""String_Node_Str"",systemOutputsDir);
  final Set<Symbol> documentsToScore=loadDocumentsToScore(params);
  for (  File subDir : systemOutputsDir.listFiles()) {
    if (subDir.isDirectory()) {
      final SystemOutputStore systemOutputStore=AssessmentSpecFormats.openSystemOutputStore(subDir);
      final File outputDir=new File(scoringOutputRoot,subDir.getName());
      final List<KBPScoringObserver<TypeRoleFillerRealis>> corpusObservers=getCorpusObservers(params);
      outputDir.mkdirs();
      scorer.run(systemOutputStore,goldAnswerStore,documentsToScore,corpusObservers,outputDir);
    }
  }
}",0.3423120089786756
24975,"public static void main(final String[] argv) throws IOException {
  if (argv.length != 1) {
    usage();
  }
  final Parameters params=Parameters.loadSerifStyle(new File(argv[0]));
  log.info(params.dump());
  final KBPScorer scorer=KBPScorer.create();
  final AnnotationStore goldAnswerStore=AssessmentSpecFormats.openAnnotationStore(params.getExistingDirectory(""String_Node_Str""));
  final List<KBPScoringObserver<TypeRoleFillerRealis>> corpusObservers=getCorpusObservers(params);
  checkArgument(params.isPresent(""String_Node_Str"") != params.isPresent(""String_Node_Str""),""String_Node_Str"");
  if (params.isPresent(""String_Node_Str"")) {
    scoreSingleSystemOutputStore(goldAnswerStore,corpusObservers,scorer,params);
  }
 else   if (params.isPresent(""String_Node_Str"")) {
    scoreMultipleSystemOutputStores(goldAnswerStore,scorer,corpusObservers,params);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public static void main(final String[] argv) throws IOException {
  if (argv.length != 1) {
    usage();
  }
  final Parameters params=Parameters.loadSerifStyle(new File(argv[0]));
  log.info(params.dump());
  final KBPScorer scorer=KBPScorer.create();
  final AnnotationStore goldAnswerStore=AssessmentSpecFormats.openAnnotationStore(params.getExistingDirectory(""String_Node_Str""));
  checkArgument(params.isPresent(""String_Node_Str"") != params.isPresent(""String_Node_Str""),""String_Node_Str"");
  if (params.isPresent(""String_Node_Str"")) {
    scoreSingleSystemOutputStore(goldAnswerStore,scorer,params);
  }
 else   if (params.isPresent(""String_Node_Str"")) {
    scoreMultipleSystemOutputStores(goldAnswerStore,scorer,params);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.783517121300058
24976,"public static Function<AnswerKey,AnswerKey> forAnswerKey(){
  return new Function<AnswerKey,AnswerKey>(){
    @Override public AnswerKey apply(    AnswerKey input){
      final ImmutableList.Builder<Response> newUnannotated=ImmutableList.builder();
      for (      final Response response : input.unannotatedResponses()) {
        newUnannotated.add(response.copyWithSwappedRealis(KBPRealis.Actual));
      }
      final ImmutableList.Builder<AssessedResponse> newAssessed=ImmutableList.builder();
      for (      final AssessedResponse response : input.annotatedResponses()) {
        newAssessed.add(AssessedResponse.from(response.response().copyWithSwappedRealis(KBPRealis.Actual),response.assessment().copyWithModifiedRealisAssessment(Optional.of(KBPRealis.Actual))));
      }
      return AnswerKey.from(input.docId(),newAssessed.build(),newUnannotated.build());
    }
  }
;
}","public static Function<AnswerKey,AnswerKey> forAnswerKey(){
  return new Function<AnswerKey,AnswerKey>(){
    @Override public AnswerKey apply(    AnswerKey input){
      final Set<Response> seenResponses=Sets.newHashSet();
      final ImmutableSet.Builder<AssessedResponse> newAssessed=ImmutableSet.builder();
      for (      final AssessedResponse response : input.annotatedResponses()) {
        final Response neutralizedResponse=response.response().copyWithSwappedRealis(KBPRealis.Actual);
        if (!seenResponses.contains(neutralizedResponse)) {
          newAssessed.add(AssessedResponse.from(neutralizedResponse,response.assessment().copyWithModifiedRealisAssessment(Optional.of(KBPRealis.Actual))));
        }
        seenResponses.add(neutralizedResponse);
      }
      final ImmutableSet.Builder<Response> newUnannotated=ImmutableSet.builder();
      for (      final Response response : input.unannotatedResponses()) {
        final Response neutralizedResponse=response.copyWithSwappedRealis(KBPRealis.Actual);
        if (!seenResponses.contains(neutralizedResponse)) {
          newUnannotated.add(neutralizedResponse);
        }
        seenResponses.add(neutralizedResponse);
      }
      return AnswerKey.from(input.docId(),newAssessed.build(),newUnannotated.build());
    }
  }
;
}",0.6121516674280494
24977,"@Override public SystemOutput apply(SystemOutput input){
  final ImmutableList.Builder<Scored<Response>> newResponses=ImmutableList.builder();
  for (  final Scored<Response> response : input.scoredResponses()) {
    newResponses.add(Scored.from(response.item().copyWithSwappedRealis(KBPRealis.Actual),response.score()));
  }
  return SystemOutput.from(input.docId(),newResponses.build());
}","@Override public SystemOutput apply(SystemOutput input){
  final ImmutableSet.Builder<Scored<Response>> newResponses=ImmutableSet.builder();
  for (  final Scored<Response> assessedResponse : input.scoredResponses()) {
    newResponses.add(Scored.from(assessedResponse.item().copyWithSwappedRealis(KBPRealis.Actual),assessedResponse.score()));
  }
  return SystemOutput.from(input.docId(),newResponses.build());
}",0.9502487562189056
24978,"public static Function<SystemOutput,SystemOutput> forSystemOutput(){
  return new Function<SystemOutput,SystemOutput>(){
    @Override public SystemOutput apply(    SystemOutput input){
      final ImmutableList.Builder<Scored<Response>> newResponses=ImmutableList.builder();
      for (      final Scored<Response> response : input.scoredResponses()) {
        newResponses.add(Scored.from(response.item().copyWithSwappedRealis(KBPRealis.Actual),response.score()));
      }
      return SystemOutput.from(input.docId(),newResponses.build());
    }
  }
;
}","public static Function<SystemOutput,SystemOutput> forSystemOutput(){
  return new Function<SystemOutput,SystemOutput>(){
    @Override public SystemOutput apply(    SystemOutput input){
      final ImmutableSet.Builder<Scored<Response>> newResponses=ImmutableSet.builder();
      for (      final Scored<Response> assessedResponse : input.scoredResponses()) {
        newResponses.add(Scored.from(assessedResponse.item().copyWithSwappedRealis(KBPRealis.Actual),assessedResponse.score()));
      }
      return SystemOutput.from(input.docId(),newResponses.build());
    }
  }
;
}",0.964726631393298
24979,"@Override protected Symbol toKey(ResponseAssessment assessment){
  return Symbol.from(assessment.realis().get().toString());
}","@Override protected Symbol toKey(ResponseAssessment assessment){
  return Symbol.from(assessment.mentionTypeOfCAS().get().toString());
}",0.931297709923664
24980,"private void assertConsistency(){
  final Multimap<Response,AsssessedResponse> responseToAnn=Multimaps.index(annotatedArgs,AsssessedResponse.Response);
  for (  final Map.Entry<Response,Collection<AsssessedResponse>> entry : responseToAnn.asMap().entrySet()) {
    if (!allEqual(transform(entry.getValue(),AsssessedResponse.Annotation))) {
      throw new RuntimeException(String.format(""String_Node_Str"",entry.getValue()));
    }
  }
  checkArgument(Sets.intersection(FluentIterable.from(annotatedArgs).transform(AsssessedResponse.Response).toSet(),unannotatedResponses).isEmpty(),""String_Node_Str"");
}","private void assertConsistency(){
  final Multimap<Response,AsssessedResponse> responseToAnn=Multimaps.index(annotatedArgs,AsssessedResponse.Response);
  for (  final Map.Entry<Response,Collection<AsssessedResponse>> entry : responseToAnn.asMap().entrySet()) {
    if (!allEqual(transform(entry.getValue(),AsssessedResponse.Annotation))) {
      throw new RuntimeException(String.format(""String_Node_Str"",entry.getValue()));
    }
  }
  checkArgument(Sets.intersection(FluentIterable.from(annotatedArgs).transform(AsssessedResponse.Response).toSet(),unannotatedResponses).isEmpty(),""String_Node_Str"");
  assertNoIncompatibleCorefAnnotations();
}",0.966346153846154
24981,"private Optional<ResponseAssessment> parseAnnotation(final List<String> parts){
  checkArgument(parts.size() == 7,""String_Node_Str"",parts);
  if (parts.contains(""String_Node_Str"")) {
    return Optional.absent();
  }
  final Optional<FieldAssessment> AET=FieldAssessment.parseOptional(parts.get(0));
  final Optional<FieldAssessment> AER=FieldAssessment.parseOptional(parts.get(1));
  final Optional<FieldAssessment> casAssessment=FieldAssessment.parseOptional(parts.get(2));
  final Optional<FieldAssessment> baseFillerAssessment=FieldAssessment.parseOptional(parts.get(3));
  final Optional<Integer> coreference=parts.get(4).equals(""String_Node_Str"") ? Optional.<Integer>absent() : Optional.of(Integer.parseInt(parts.get(4)));
  final Optional<KBPRealis> realis=KBPRealis.parseOptional(parts.get(5));
  final Optional<MentionType> mentionTypeOfCAS=MentionType.parseOptional(parts.get(6));
  return assessmentCreator.createAssessmentFromFields(AET,AER,casAssessment,realis,baseFillerAssessment,coreference,mentionTypeOfCAS);
}","private Optional<ResponseAssessment> parseAnnotation(final List<String> parts){
  checkArgument(parts.size() == 7,""String_Node_Str"",parts);
  if (parts.contains(""String_Node_Str"")) {
    return Optional.absent();
  }
  final Optional<FieldAssessment> AET=FieldAssessment.parseOptional(parts.get(0));
  final Optional<FieldAssessment> AER=FieldAssessment.parseOptional(parts.get(1));
  final Optional<FieldAssessment> casAssessment=FieldAssessment.parseOptional(parts.get(2));
  final Optional<FieldAssessment> baseFillerAssessment=FieldAssessment.parseOptional(parts.get(3));
  final Optional<Integer> coreference=emptyCorefEncodings.contains(parts.get(4)) ? Optional.<Integer>absent() : Optional.of(Integer.parseInt(parts.get(4)));
  final Optional<KBPRealis> realis=KBPRealis.parseOptional(parts.get(5));
  final Optional<MentionType> mentionTypeOfCAS=MentionType.parseOptional(parts.get(6));
  return assessmentCreator.createAssessmentFromFields(AET,AER,casAssessment,realis,baseFillerAssessment,coreference,mentionTypeOfCAS);
}",0.9737609329446064
24982,"private synchronized AnswerKey uncachedRead(final Symbol docid) throws IOException {
  final ImmutableList.Builder<AsssessedResponse> annotated=ImmutableList.builder();
  final ImmutableList.Builder<Response> unannotated=ImmutableList.builder();
  final CharSource source=Files.asCharSource(new File(directory,docid.toString()),UTF_8);
  for (  final String line : source.readLines()) {
    try {
      if (line.isEmpty() || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      final String[] parts=line.split(""String_Node_Str"");
      final List<String> argumentParts=Arrays.asList(parts).subList(1,11);
      final List<String> annotationParts=Arrays.asList(parts).subList(11,parts.length);
      if (annotationParts.isEmpty()) {
        throw new IOException(String.format(""String_Node_Str"" + ""String_Node_Str"",docid));
      }
      final Response response=parseArgumentFields(argumentParts);
      final Optional<ResponseAssessment> annotation=parseAnnotation(annotationParts);
      if (annotation.isPresent()) {
        annotated.add(AsssessedResponse.from(response,annotation.get()));
      }
 else {
        unannotated.add(response);
      }
    }
 catch (    Exception e) {
      throw new IOException(String.format(""String_Node_Str"",docid,line),e);
    }
  }
  return AnswerKey.from(docid,annotated.build(),unannotated.build());
}","private synchronized AnswerKey uncachedRead(final Symbol docid) throws IOException {
  final ImmutableList.Builder<AsssessedResponse> annotated=ImmutableList.builder();
  final ImmutableList.Builder<Response> unannotated=ImmutableList.builder();
  final CharSource source=Files.asCharSource(new File(directory,docid.toString()),UTF_8);
  for (  final String line : source.readLines()) {
    try {
      if (line.isEmpty() || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      final String[] parts=line.split(""String_Node_Str"");
      final List<String> argumentParts=Arrays.asList(parts).subList(1,11);
      final List<String> annotationParts=Arrays.asList(parts).subList(11,parts.length);
      if (annotationParts.isEmpty()) {
        throw new IOException(String.format(""String_Node_Str"" + ""String_Node_Str"",docid));
      }
      final Response response=parseArgumentFields(argumentParts);
      final Optional<ResponseAssessment> annotation=parseAnnotation(annotationParts);
      if (annotation.isPresent()) {
        annotated.add(AsssessedResponse.from(response,annotation.get()));
      }
 else {
        unannotated.add(response);
      }
    }
 catch (    Exception e) {
      throw new IOException(String.format(""String_Node_Str"",docid,line),e);
    }
  }
  return assessmentCreator.createAnswerKey(docid,annotated.build(),unannotated.build());
}",0.989404457435148
24983,"/** 
 * Produces a human-readable report on what was erroneously present and missing in the assessments created through this   {@link AssessmentCreator}.
 * @return
 */
public String report(){
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(responsesAttempted).append(""String_Node_Str"");
  sb.append(extras.size()).append(""String_Node_Str"").append(extras).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(makeMissingCorefSingleton).append(""String_Node_Str"").append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(missing.size()).append(""String_Node_Str"").append(""String_Node_Str"").append(missing).append(""String_Node_Str"");
  return sb.toString();
}","/** 
 * Produces a human-readable report on what was erroneously present and missing in the assessments created through this   {@link AssessmentCreator}.
 * @return
 */
public String report(){
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(responsesAttempted).append(""String_Node_Str"");
  sb.append(extras.size()).append(""String_Node_Str"").append(extras).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(makeMissingCorefSingleton).append(""String_Node_Str"").append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(numRemappedCoref).append(""String_Node_Str"").append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(missing.size()).append(""String_Node_Str"").append(""String_Node_Str"").append(missing).append(""String_Node_Str"");
  return sb.toString();
}",0.9288047028086218
24984,"private void logArgumentJustications(final String originalDocText,final Response response,StringBuilder out){
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"");
  final List<CharOffsetSpan> offsetSpans=Lists.newArrayList();
  offsetSpans.addAll(response.additionalArgumentJustifications());
  if (offsetSpans.isEmpty()) {
    out.append(""String_Node_Str"");
  }
 else {
    for (    CharOffsetSpan argSpan : offsetSpans) {
      out.append(originalDocText.substring(argSpan.startInclusive(),argSpan.endInclusive() + 1));
      out.append(""String_Node_Str"");
    }
    out.append(""String_Node_Str"");
  }
}","private void logArgumentJustications(final String originalDocText,final Response response,StringBuilder out){
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"");
  final List<CharOffsetSpan> offsetSpans=Lists.newArrayList();
  offsetSpans.addAll(response.additionalArgumentJustifications());
  if (offsetSpans.isEmpty()) {
    out.append(""String_Node_Str"");
  }
 else {
    for (    CharOffsetSpan argSpan : offsetSpans) {
      out.append(originalDocText.substring(argSpan.startInclusive(),argSpan.endInclusive() + 1));
      out.append(""String_Node_Str"");
    }
  }
  out.append(""String_Node_Str"");
}",0.9951377633711508
24985,"@Override public void logDifference(Response response,Symbol leftKey,Symbol rightKey,StringBuilder out){
  this.logLeftRightDecisions(out,leftKey,rightKey);
  this.logTypeRoleCAS(response,out);
  final String originalDocText;
  try {
    originalDocText=this.cache.getPlainDoc(response.docID());
    this.logBaseFiller(originalDocText,response,out);
    this.logPredicateJustifications(originalDocText,response,out);
    this.logArgumentJustications(originalDocText,response,out);
    this.logDocumentContext(originalDocText,response,out);
  }
 catch (  final IOException ioe) {
    out.append(""String_Node_Str"");
    out.append(""String_Node_Str"");
    return;
  }
  out.append(""String_Node_Str"");
}","@Override public void logDifference(Response response,Symbol leftKey,Symbol rightKey,StringBuilder out){
  this.logLeftRightDecisions(out,leftKey,rightKey);
  this.logIdTypeRoleCAS(response,out);
  final String originalDocText;
  try {
    originalDocText=this.cache.getPlainDoc(response.docID());
    this.logBaseFiller(originalDocText,response,out);
    this.logPredicateJustifications(originalDocText,response,out);
    this.logArgumentJustications(originalDocText,response,out);
    this.logDocumentContext(originalDocText,response,out);
  }
 catch (  final IOException ioe) {
    out.append(""String_Node_Str"");
    out.append(""String_Node_Str"");
    return;
  }
  out.append(""String_Node_Str"");
}",0.9985714285714286
24986,"private void writeImprovements(final String modeName,final FMeasureCounts corpusFMeasure,final Map<String,SummaryConfusionMatrix> data,final ImprovementMode improvementMode,final File outputFile) throws IOException {
  final List<Scored<String>> improvements=Lists.newArrayList();
  for (  Map.Entry<String,SummaryConfusionMatrix> entry : data.entrySet()) {
    final FMeasureCounts improvedCounts=improvementMode.improve(corpusFMeasure,entry.getValue().FMeasureVsAllOthers(PRESENT));
    final double F1Improvement=improvedCounts.F1() - corpusFMeasure.F1();
    improvements.add(Scored.from(entry.getKey(),F1Improvement));
  }
  Collections.sort(improvements,Scoreds.<String>ByScoreThenByItem().reverse());
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + modeName + ""String_Node_Str""+ improvementMode.toString()+ ""String_Node_Str"");
  final int nameFieldSize=4 + MapUtils.longestKeyLength(data);
  final String headerFormat=""String_Node_Str"" + nameFieldSize + ""String_Node_Str"";
  final String entryFormat=""String_Node_Str"" + nameFieldSize + ""String_Node_Str"";
  sb.append(String.format(headerFormat,modeName));
  sb.append(Strings.repeat(""String_Node_Str"",nameFieldSize + 18)).append(""String_Node_Str"");
  for (  Scored<String> improvement : improvements) {
    sb.append(String.format(entryFormat,improvement.item(),improvement.score()));
  }
  Files.asCharSink(outputFile,Charsets.UTF_8).write(sb.toString());
}","private void writeImprovements(final String modeName,final FMeasureCounts corpusFMeasure,final Map<String,SummaryConfusionMatrix> data,final ImprovementMode improvementMode,final File outputFile) throws IOException {
  final List<Scored<String>> improvements=Lists.newArrayList();
  for (  Map.Entry<String,SummaryConfusionMatrix> entry : data.entrySet()) {
    final FMeasureCounts improvedCounts=improvementMode.improve(corpusFMeasure,entry.getValue().FMeasureVsAllOthers(PRESENT));
    final double F1Improvement=improvedCounts.F1() - corpusFMeasure.F1();
    improvements.add(Scored.from(entry.getKey(),F1Improvement));
  }
  Collections.sort(improvements,Scoreds.<String>ByScoreThenByItem().reverse());
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + modeName + ""String_Node_Str""+ improvementMode.toString()+ ""String_Node_Str"");
  final int nameFieldSize=4 + MapUtils.longestKeyLength(data);
  final String headerFormat=""String_Node_Str"" + nameFieldSize + ""String_Node_Str"";
  final String entryFormat=""String_Node_Str"" + nameFieldSize + ""String_Node_Str"";
  sb.append(String.format(headerFormat,modeName));
  sb.append(Strings.repeat(""String_Node_Str"",nameFieldSize + 18)).append(""String_Node_Str"");
  for (  Scored<String> improvement : improvements) {
    sb.append(String.format(entryFormat,improvement.item(),100.0 * improvement.score()));
  }
  Files.asCharSink(outputFile,Charsets.UTF_8).write(sb.toString());
}",0.9972394755003452
24987,"@Override public KBPAnswerSourceObserver answerSourceObserver(final SystemOutputAnswerSource<Answerable> systemOutputSource,final AnswerKeyAnswerSource<Answerable> answerKeyAnswerSource){
  ++docs;
  if (answerKeyAnswerSource.answerKey().completelyAnnotated()) {
    ++skipped;
    return innerObserver.answerSourceObserver(systemOutputSource,answerKeyAnswerSource);
  }
 else {
    return new KBPAnswerSourceObserver(systemOutputSource,answerKeyAnswerSource){
    }
;
  }
}","@Override public KBPAnswerSourceObserver answerSourceObserver(final SystemOutputAnswerSource<Answerable> systemOutputSource,final AnswerKeyAnswerSource<Answerable> answerKeyAnswerSource){
  ++docs;
  if (answerKeyAnswerSource.answerKey().completelyAnnotated()) {
    return innerObserver.answerSourceObserver(systemOutputSource,answerKeyAnswerSource);
  }
 else {
    ++skipped;
    return new KBPAnswerSourceObserver(systemOutputSource,answerKeyAnswerSource){
    }
;
  }
}",0.7869198312236287
24988,"private void assertValidTypes(Response response){
  if (typeAndRoleValidator.isValidEventType(response)) {
    if (!typeAndRoleValidator.isValidArgumentRole(response)) {
      log.error(""String_Node_Str"",response.role(),response.type(),response.docID(),StringUtils.CommaSpaceJoiner.join(typeAndRoleValidator.validRolesFor(response.type())));
      System.exit(1);
    }
  }
 else {
    log.error(""String_Node_Str"",response.type(),response.docID(),StringUtils.CommaSpaceJoiner.join(typeAndRoleValidator.validEventTypes()));
    System.exit(1);
  }
}","private void assertValidTypes(Response response){
  if (typeAndRoleValidator.isValidEventType(response)) {
    if (!typeAndRoleValidator.isValidArgumentRole(response)) {
      throw new RuntimeException(String.format(""String_Node_Str"",response.role(),response.type(),response.docID(),StringUtils.CommaSpaceJoiner.join(typeAndRoleValidator.validRolesFor(response.type()))));
    }
  }
 else {
    throw new RuntimeException(String.format(""String_Node_Str"",response.type(),response.docID(),StringUtils.CommaSpaceJoiner.join(typeAndRoleValidator.validEventTypes())));
  }
}",0.8425760286225402
24989,"private SkipIncompleteAnnotations(final KBPScoringObserver<Answerable> innerObserver){
  super(innerObserver.name());
  this.innerObserver=checkNotNull(innerObserver);
}","private SkipIncompleteAnnotations(final KBPScoringObserver<Answerable> innerObserver){
  super(innerObserver.name() + ""String_Node_Str"");
  this.innerObserver=checkNotNull(innerObserver);
}",0.9441340782122905
24990,"/** 
 * Given the string contents of a document, will return the offset ranges of those portions within <quote> tags. This does not pay attention to the attributes of the quote tags.
 * @param s
 * @return
 */
public static ImmutableRangeSet<Integer> computeQuotedRegions(String s){
  checkNotNull(s);
  final ImmutableRangeSet.Builder<Integer> ret=ImmutableRangeSet.builder();
  int curPos=0;
  int regionStart=s.indexOf(BANNED_REGION_START,curPos);
  while (regionStart != -1) {
    curPos=regionStart;
    int nestingCount=1;
    while (nestingCount > 0) {
      final int nextStart=s.indexOf(BANNED_REGION_START,curPos + 1);
      final int nextEnd=s.indexOf(BANNED_REGION_END,curPos + 1);
      if (nextEnd == -1) {
        throw new RuntimeException(String.format(""String_Node_Str"",regionStart));
      }
 else       if (nextStart == -1 || nextEnd < nextStart) {
        --nestingCount;
        curPos=nextEnd;
      }
 else       if (nextEnd > nextStart) {
        ++nestingCount;
        curPos=nextStart;
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    ret.add(Range.closed(regionStart,curPos + BANNED_REGION_END.length() - 1));
    regionStart=s.indexOf(BANNED_REGION_START,curPos + 1);
  }
  return ret.build();
}","/** 
 * Given the string contents of a document, will return the offset ranges of those portions within <quote> tags. This does not pay attention to the attributes of the quote tags.
 * @param s
 * @return
 */
public static ImmutableRangeSet<Integer> computeQuotedRegions(String s){
  checkNotNull(s);
  final ImmutableRangeSet.Builder<Integer> ret=ImmutableRangeSet.builder();
  int curPos=0;
  int regionStart=StringUtils.earliestIndexOfAny(s,BANNED_REGION_STARTS,curPos);
  while (regionStart != -1) {
    curPos=regionStart;
    int nestingCount=1;
    while (nestingCount > 0) {
      final int nextStart=StringUtils.earliestIndexOfAny(s,BANNED_REGION_STARTS,curPos + 1);
      final int nextEnd=s.indexOf(BANNED_REGION_END,curPos + 1);
      if (nextEnd == -1) {
        throw new RuntimeException(String.format(""String_Node_Str"",regionStart));
      }
 else       if (nextStart == -1 || nextEnd < nextStart) {
        --nestingCount;
        curPos=nextEnd;
      }
 else       if (nextEnd > nextStart) {
        ++nestingCount;
        curPos=nextStart;
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    ret.add(Range.closed(regionStart,curPos + BANNED_REGION_END.length() - 1));
    regionStart=StringUtils.earliestIndexOfAny(s,BANNED_REGION_STARTS,curPos + 1);
  }
  return ret.build();
}",0.96771714066103
24991,"/** 
 * <p>Tell whether the specified table exists in the database. To do so, it is using the given   {@link DatabaseMetaData} object to query the database and list all existing tables.</p><p><i><b>Important note:</b> If schemas are not supported by this connection but a schema name is even though provided in parameter, the table name will be prefixed by the schema name. The research will then be done with NULL as schema name and this prefixed table name. </i></p> <p><i>Note: Test on the schema name is done considering the case sensitivity indicated by the translator (see  {@link JDBCTranslator#isCaseSensitive(IdentifierField)}). </i></p> <p><i>Note: This function is used by   {@link #addUploadedTable(TAPTable,TableIterator)} and {@link #dropUploadedTable(TAPTable)}. </i></p>
 * @param schemaName	DB name of the schema in which the table to search is. <i>If NULL, the table is expected in any schema but ONLY one MUST exist.</i>
 * @param tableName		DB name of the table to search.
 * @param dbMeta		Metadata about the database, and mainly the list of all existing tables.
 * @return	<i>true</i> if the specified table exists, <i>false</i> otherwise.
 * @throws SQLException	If any error occurs while interrogating the database about existing tables.
 */
protected boolean isTableExisting(String schemaName,String tableName,final DatabaseMetaData dbMeta) throws DBException, SQLException {
  if (tableName == null || tableName.length() == 0)   return true;
  boolean schemaCaseSensitive=translator.isCaseSensitive(IdentifierField.SCHEMA);
  boolean tableCaseSensitive=translator.isCaseSensitive(IdentifierField.TABLE);
  ResultSet rs=null;
  try {
    if (supportsSchema) {
      String schemaPattern=schemaCaseSensitive ? schemaName : null;
      String tablePattern=tableCaseSensitive ? tableName : null;
      rs=dbMeta.getTables(null,schemaPattern,tablePattern,null);
    }
 else {
      String tablePattern=tableCaseSensitive ? tableName : null;
      rs=dbMeta.getTables(null,null,tablePattern,null);
    }
    int cnt=0;
    while (rs.next()) {
      String rsSchema=nullifyIfNeeded(rs.getString(2));
      String rsTable=rs.getString(3);
      if (!supportsSchema || schemaName == null || equals(rsSchema,schemaName,schemaCaseSensitive)) {
        if (equals(rsTable,tableName,tableCaseSensitive))         cnt++;
      }
    }
    if (cnt > 1) {
      if (logger != null)       logger.logDB(LogLevel.ERROR,this,""String_Node_Str"",""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str"",null);
      throw new DBException(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str"");
    }
    return cnt == 1;
  }
  finally {
    close(rs);
  }
}","/** 
 * <p>Tell whether the specified table exists in the database. To do so, it is using the given   {@link DatabaseMetaData} object to query the database and list all existing tables.</p><p><i><b>Important note:</b> If schemas are not supported by this connection but a schema name is even though provided in parameter, the table name will be prefixed by the schema name. The research will then be done with NULL as schema name and this prefixed table name. </i></p> <p><i>Note: Test on the schema name is done considering the case sensitivity indicated by the translator (see  {@link JDBCTranslator#isCaseSensitive(IdentifierField)}). </i></p> <p><i>Note: This function is used by   {@link #addUploadedTable(TAPTable,TableIterator)} and {@link #dropUploadedTable(TAPTable)}. </i></p>
 * @param schemaName	DB name of the schema in which the table to search is. <i>If NULL, the table is expected in any schema but ONLY one MUST exist.</i>
 * @param tableName		DB name of the table to search.
 * @param dbMeta		Metadata about the database, and mainly the list of all existing tables.
 * @return	<i>true</i> if the specified table exists, <i>false</i> otherwise.
 * @throws SQLException	If any error occurs while interrogating the database about existing tables.
 */
protected boolean isTableExisting(String schemaName,String tableName,final DatabaseMetaData dbMeta) throws DBException, SQLException {
  if (tableName == null || tableName.length() == 0)   return true;
  boolean schemaCaseSensitive=translator.isCaseSensitive(IdentifierField.SCHEMA);
  boolean tableCaseSensitive=translator.isCaseSensitive(IdentifierField.TABLE);
  ResultSet rs=null;
  try {
    if (supportsSchema) {
      String schemaPattern=schemaCaseSensitive ? schemaName : null;
      String tablePattern=tableCaseSensitive ? tableName : null;
      rs=getDBMetaTables(dbMeta,schemaPattern,tablePattern);
    }
 else {
      String tablePattern=tableCaseSensitive ? tableName : null;
      rs=getDBMetaTables(dbMeta,null,tablePattern);
    }
    int cnt=0;
    while (rs.next()) {
      String rsSchema=nullifyIfNeeded(rs.getString(getTableSchemaIndexInMetadata()));
      String rsTable=rs.getString(3);
      if (!supportsSchema || schemaName == null || equals(rsSchema,schemaName,schemaCaseSensitive)) {
        if (equals(rsTable,tableName,tableCaseSensitive))         cnt++;
      }
    }
    if (cnt > 1) {
      if (logger != null)       logger.logDB(LogLevel.ERROR,this,""String_Node_Str"",""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str"",null);
      throw new DBException(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str"");
    }
    return cnt == 1;
  }
  finally {
    close(rs);
  }
}",0.985411601250434
24992,"/** 
 * <p>Tell whether the specified schema exists in the database. To do so, it is using the given   {@link DatabaseMetaData} object to query the database and list all existing schemas.</p><p><i>Note: This function is completely useless if the connection is not supporting schemas. </i></p> <p><i>Note: Test on the schema name is done considering the case sensitivity indicated by the translator (see  {@link JDBCTranslator#isCaseSensitive(IdentifierField)}). </i></p> <p><i>Note: This functions is used by   {@link #addUploadedTable(TAPTable,TableIterator)} and {@link #resetTAPSchema(Statement,TAPTable[])}. </i></p>
 * @param schemaName	DB name of the schema whose the existence must be checked.
 * @param dbMeta		Metadata about the database, and mainly the list of all existing schemas.
 * @return	<i>true</i> if the specified schema exists, <i>false</i> otherwise.
 * @throws SQLException	If any error occurs while interrogating the database about existing schema.
 */
protected boolean isSchemaExisting(String schemaName,final DatabaseMetaData dbMeta) throws SQLException {
  if (DBMS_MYSQL.equals(dbms) || !supportsSchema || schemaName == null || schemaName.length() == 0)   return true;
  boolean caseSensitive=translator.isCaseSensitive(IdentifierField.SCHEMA);
  ResultSet rs=null;
  try {
    rs=dbMeta.getSchemas();
    boolean hasSchema=false;
    while (!hasSchema && rs.next()) {
      hasSchema=equals(rs.getString(1),schemaName,caseSensitive);
    }
    return hasSchema;
  }
  finally {
    close(rs);
  }
}","/** 
 * <p>Tell whether the specified schema exists in the database. To do so, it is using the given   {@link DatabaseMetaData} object to query the database and list all existing schemas.</p><p><i>Note: This function is completely useless if the connection is not supporting schemas. </i></p> <p><i>Note: Test on the schema name is done considering the case sensitivity indicated by the translator (see  {@link JDBCTranslator#isCaseSensitive(IdentifierField)}). </i></p> <p><i>Note: This functions is used by   {@link #addUploadedTable(TAPTable,TableIterator)} and {@link #resetTAPSchema(Statement,TAPTable[])}. </i></p>
 * @param schemaName	DB name of the schema whose the existence must be checked.
 * @param dbMeta		Metadata about the database, and mainly the list of all existing schemas.
 * @return	<i>true</i> if the specified schema exists, <i>false</i> otherwise.
 * @throws SQLException	If any error occurs while interrogating the database about existing schema.
 */
protected boolean isSchemaExisting(String schemaName,final DatabaseMetaData dbMeta) throws SQLException {
  if (!supportsSchema || schemaName == null || schemaName.length() == 0)   return true;
  boolean caseSensitive=translator.isCaseSensitive(IdentifierField.SCHEMA);
  ResultSet rs=null;
  try {
    rs=getDBMetaSchemas(dbMeta);
    boolean hasSchema=false;
    while (!hasSchema && rs.next()) {
      hasSchema=equals(rs.getString(1),schemaName,caseSensitive);
    }
    return hasSchema;
  }
  finally {
    close(rs);
  }
}",0.9854881266490764
24993,"/** 
 * <p>Tell whether the specified column exists in the specified table of the database. To do so, it is using the given   {@link DatabaseMetaData} object to query the database and list all existing columns.</p><p><i><b>Important note:</b> If schemas are not supported by this connection but a schema name is even though provided in parameter, the table name will be prefixed by the schema name. The research will then be done with NULL as schema name and this prefixed table name. </i></p> <p><i>Note: Test on the schema name is done considering the case sensitivity indicated by the translator (see  {@link JDBCTranslator#isCaseSensitive(IdentifierField)}). </i></p> <p><i>Note: This function is used by   {@link #loadSchemas(TAPTable,TAPMetadata,Statement)},   {@link #loadTables(TAPTable,TAPMetadata,Statement)}and   {@link #loadColumns(TAPTable,List,Statement)}. </i></p>
 * @param schemaName	DB name of the table schema. <i>MAY BE NULL</i>
 * @param tableName		DB name of the table containing the column to search. <i>MAY BE NULL</i>
 * @param columnName	DB name of the column to search.
 * @param dbMeta		Metadata about the database, and mainly the list of all existing tables.
 * @return	<i>true</i> if the specified column exists, <i>false</i> otherwise.
 * @throws SQLException	If any error occurs while interrogating the database about existing columns.
 */
protected boolean isColumnExisting(String schemaName,String tableName,String columnName,final DatabaseMetaData dbMeta) throws DBException, SQLException {
  if (columnName == null || columnName.length() == 0)   return true;
  boolean schemaCaseSensitive=translator.isCaseSensitive(IdentifierField.SCHEMA);
  boolean tableCaseSensitive=translator.isCaseSensitive(IdentifierField.TABLE);
  boolean columnCaseSensitive=translator.isCaseSensitive(IdentifierField.COLUMN);
  ResultSet rsT=null, rsC=null;
  try {
    if (supportsSchema) {
      String schemaPattern=schemaCaseSensitive ? schemaName : null;
      String tablePattern=tableCaseSensitive ? tableName : null;
      rsT=dbMeta.getTables(null,schemaPattern,tablePattern,null);
    }
 else {
      String tablePattern=tableCaseSensitive ? tableName : null;
      rsT=dbMeta.getTables(null,null,tablePattern,null);
    }
    int cnt=0;
    String columnPattern=columnCaseSensitive ? columnName : null;
    while (rsT.next()) {
      int rsTSchemaIndex=dbms.equalsIgnoreCase(DBMS_MYSQL) ? 1 : 2;
      String rsSchema=nullifyIfNeeded(rsT.getString(rsTSchemaIndex));
      String rsTable=rsT.getString(3);
      if (!supportsSchema || schemaName == null || equals(rsSchema,schemaName,schemaCaseSensitive)) {
        if ((tableName == null || equals(rsTable,tableName,tableCaseSensitive))) {
          rsC=dbMeta.getColumns(null,rsSchema,rsTable,columnPattern);
          while (rsC.next()) {
            String rsColumn=rsC.getString(4);
            if (equals(rsColumn,columnName,columnCaseSensitive))             cnt++;
          }
          close(rsC);
        }
      }
    }
    if (cnt > 1) {
      if (logger != null)       logger.logDB(LogLevel.ERROR,this,""String_Node_Str"",""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str""+ columnName+ ""String_Node_Str""+ columnCaseSensitive+ ""String_Node_Str"",null);
      throw new DBException(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str""+ columnName+ ""String_Node_Str""+ columnCaseSensitive+ ""String_Node_Str"");
    }
    return cnt == 1;
  }
  finally {
    close(rsT);
    close(rsC);
  }
}","/** 
 * <p>Tell whether the specified column exists in the specified table of the database. To do so, it is using the given   {@link DatabaseMetaData} object to query the database and list all existing columns.</p><p><i><b>Important note:</b> If schemas are not supported by this connection but a schema name is even though provided in parameter, the table name will be prefixed by the schema name. The research will then be done with NULL as schema name and this prefixed table name. </i></p> <p><i>Note: Test on the schema name is done considering the case sensitivity indicated by the translator (see  {@link JDBCTranslator#isCaseSensitive(IdentifierField)}). </i></p> <p><i>Note: This function is used by   {@link #loadSchemas(TAPTable,TAPMetadata,Statement)},   {@link #loadTables(TAPTable,TAPMetadata,Statement)}and   {@link #loadColumns(TAPTable,List,Statement)}. </i></p>
 * @param schemaName	DB name of the table schema. <i>MAY BE NULL</i>
 * @param tableName		DB name of the table containing the column to search. <i>MAY BE NULL</i>
 * @param columnName	DB name of the column to search.
 * @param dbMeta		Metadata about the database, and mainly the list of all existing tables.
 * @return	<i>true</i> if the specified column exists, <i>false</i> otherwise.
 * @throws SQLException	If any error occurs while interrogating the database about existing columns.
 */
protected boolean isColumnExisting(String schemaName,String tableName,String columnName,final DatabaseMetaData dbMeta) throws DBException, SQLException {
  if (columnName == null || columnName.length() == 0)   return true;
  boolean schemaCaseSensitive=translator.isCaseSensitive(IdentifierField.SCHEMA);
  boolean tableCaseSensitive=translator.isCaseSensitive(IdentifierField.TABLE);
  boolean columnCaseSensitive=translator.isCaseSensitive(IdentifierField.COLUMN);
  ResultSet rsT=null, rsC=null;
  try {
    if (supportsSchema) {
      String schemaPattern=schemaCaseSensitive ? schemaName : null;
      String tablePattern=tableCaseSensitive ? tableName : null;
      rsT=getDBMetaTables(dbMeta,schemaPattern,tablePattern);
    }
 else {
      String tablePattern=tableCaseSensitive ? tableName : null;
      rsT=getDBMetaTables(dbMeta,null,tablePattern);
    }
    int cnt=0;
    String columnPattern=columnCaseSensitive ? columnName : null;
    while (rsT.next()) {
      String rsSchema=nullifyIfNeeded(rsT.getString(getTableSchemaIndexInMetadata()));
      String rsTable=rsT.getString(3);
      if (!supportsSchema || schemaName == null || equals(rsSchema,schemaName,schemaCaseSensitive)) {
        if ((tableName == null || equals(rsTable,tableName,tableCaseSensitive))) {
          rsC=getDBMetaColumns(dbMeta,rsSchema,rsTable,columnPattern);
          while (rsC.next()) {
            String rsColumn=rsC.getString(4);
            if (equals(rsColumn,columnName,columnCaseSensitive))             cnt++;
          }
          close(rsC);
        }
      }
    }
    if (cnt > 1) {
      if (logger != null)       logger.logDB(LogLevel.ERROR,this,""String_Node_Str"",""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str""+ columnName+ ""String_Node_Str""+ columnCaseSensitive+ ""String_Node_Str"",null);
      throw new DBException(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str""+ columnName+ ""String_Node_Str""+ columnCaseSensitive+ ""String_Node_Str"");
    }
    return cnt == 1;
  }
  finally {
    close(rsT);
    close(rsC);
  }
}",0.9778385772913816
24994,"/** 
 * <p>Tell whether the specified column exists in the specified table of the database. To do so, it is using the given   {@link DatabaseMetaData} object to query the database and list all existing columns.</p><p><i><b>Important note:</b> If schemas are not supported by this connection but a schema name is even though provided in parameter, the table name will be prefixed by the schema name. The research will then be done with NULL as schema name and this prefixed table name. </i></p> <p><i>Note: Test on the schema name is done considering the case sensitivity indicated by the translator (see  {@link JDBCTranslator#isCaseSensitive(IdentifierField)}). </i></p> <p><i>Note: This function is used by   {@link #loadSchemas(TAPTable,TAPMetadata,Statement)},   {@link #loadTables(TAPTable,TAPMetadata,Statement)}and   {@link #loadColumns(TAPTable,List,Statement)}. </i></p>
 * @param schemaName	DB name of the table schema. <i>MAY BE NULL</i>
 * @param tableName		DB name of the table containing the column to search. <i>MAY BE NULL</i>
 * @param columnName	DB name of the column to search.
 * @param dbMeta		Metadata about the database, and mainly the list of all existing tables.
 * @return	<i>true</i> if the specified column exists, <i>false</i> otherwise.
 * @throws SQLException	If any error occurs while interrogating the database about existing columns.
 */
protected boolean isColumnExisting(String schemaName,String tableName,String columnName,final DatabaseMetaData dbMeta) throws DBException, SQLException {
  if (columnName == null || columnName.length() == 0)   return true;
  boolean schemaCaseSensitive=translator.isCaseSensitive(IdentifierField.SCHEMA);
  boolean tableCaseSensitive=translator.isCaseSensitive(IdentifierField.TABLE);
  boolean columnCaseSensitive=translator.isCaseSensitive(IdentifierField.COLUMN);
  ResultSet rsT=null, rsC=null;
  try {
    if (supportsSchema) {
      String schemaPattern=schemaCaseSensitive ? schemaName : null;
      String tablePattern=tableCaseSensitive ? tableName : null;
      rsT=dbMeta.getTables(null,schemaPattern,tablePattern,null);
    }
 else {
      String tablePattern=tableCaseSensitive ? tableName : null;
      rsT=dbMeta.getTables(null,null,tablePattern,null);
    }
    int cnt=0;
    String columnPattern=columnCaseSensitive ? columnName : null;
    while (rsT.next()) {
      String rsSchema=nullifyIfNeeded(rsT.getString(2));
      String rsTable=rsT.getString(3);
      if (!supportsSchema || schemaName == null || equals(rsSchema,schemaName,schemaCaseSensitive)) {
        if ((tableName == null || equals(rsTable,tableName,tableCaseSensitive))) {
          rsC=dbMeta.getColumns(null,rsSchema,rsTable,columnPattern);
          while (rsC.next()) {
            String rsColumn=rsC.getString(4);
            if (equals(rsColumn,columnName,columnCaseSensitive))             cnt++;
          }
          close(rsC);
        }
      }
    }
    if (cnt > 1) {
      if (logger != null)       logger.logDB(LogLevel.ERROR,this,""String_Node_Str"",""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str""+ columnName+ ""String_Node_Str""+ columnCaseSensitive+ ""String_Node_Str"",null);
      throw new DBException(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str""+ columnName+ ""String_Node_Str""+ columnCaseSensitive+ ""String_Node_Str"");
    }
    return cnt == 1;
  }
  finally {
    close(rsT);
    close(rsC);
  }
}","/** 
 * <p>Tell whether the specified column exists in the specified table of the database. To do so, it is using the given   {@link DatabaseMetaData} object to query the database and list all existing columns.</p><p><i><b>Important note:</b> If schemas are not supported by this connection but a schema name is even though provided in parameter, the table name will be prefixed by the schema name. The research will then be done with NULL as schema name and this prefixed table name. </i></p> <p><i>Note: Test on the schema name is done considering the case sensitivity indicated by the translator (see  {@link JDBCTranslator#isCaseSensitive(IdentifierField)}). </i></p> <p><i>Note: This function is used by   {@link #loadSchemas(TAPTable,TAPMetadata,Statement)},   {@link #loadTables(TAPTable,TAPMetadata,Statement)}and   {@link #loadColumns(TAPTable,List,Statement)}. </i></p>
 * @param schemaName	DB name of the table schema. <i>MAY BE NULL</i>
 * @param tableName		DB name of the table containing the column to search. <i>MAY BE NULL</i>
 * @param columnName	DB name of the column to search.
 * @param dbMeta		Metadata about the database, and mainly the list of all existing tables.
 * @return	<i>true</i> if the specified column exists, <i>false</i> otherwise.
 * @throws SQLException	If any error occurs while interrogating the database about existing columns.
 */
protected boolean isColumnExisting(String schemaName,String tableName,String columnName,final DatabaseMetaData dbMeta) throws DBException, SQLException {
  if (columnName == null || columnName.length() == 0)   return true;
  boolean schemaCaseSensitive=translator.isCaseSensitive(IdentifierField.SCHEMA);
  boolean tableCaseSensitive=translator.isCaseSensitive(IdentifierField.TABLE);
  boolean columnCaseSensitive=translator.isCaseSensitive(IdentifierField.COLUMN);
  ResultSet rsT=null, rsC=null;
  try {
    if (supportsSchema) {
      String schemaPattern=schemaCaseSensitive ? schemaName : null;
      String tablePattern=tableCaseSensitive ? tableName : null;
      rsT=dbMeta.getTables(null,schemaPattern,tablePattern,null);
    }
 else {
      String tablePattern=tableCaseSensitive ? tableName : null;
      rsT=dbMeta.getTables(null,null,tablePattern,null);
    }
    int cnt=0;
    String columnPattern=columnCaseSensitive ? columnName : null;
    while (rsT.next()) {
      int rsTSchemaIndex=dbms.equalsIgnoreCase(DBMS_MYSQL) ? 1 : 2;
      String rsSchema=nullifyIfNeeded(rsT.getString(rsTSchemaIndex));
      String rsTable=rsT.getString(3);
      if (!supportsSchema || schemaName == null || equals(rsSchema,schemaName,schemaCaseSensitive)) {
        if ((tableName == null || equals(rsTable,tableName,tableCaseSensitive))) {
          rsC=dbMeta.getColumns(null,rsSchema,rsTable,columnPattern);
          while (rsC.next()) {
            String rsColumn=rsC.getString(4);
            if (equals(rsColumn,columnName,columnCaseSensitive))             cnt++;
          }
          close(rsC);
        }
      }
    }
    if (cnt > 1) {
      if (logger != null)       logger.logDB(LogLevel.ERROR,this,""String_Node_Str"",""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str""+ columnName+ ""String_Node_Str""+ columnCaseSensitive+ ""String_Node_Str"",null);
      throw new DBException(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str""+ columnName+ ""String_Node_Str""+ columnCaseSensitive+ ""String_Node_Str"");
    }
    return cnt == 1;
  }
  finally {
    close(rsT);
    close(rsC);
  }
}",0.9886098531631672
24995,"/** 
 * Build a   {@link VotType} object by converting the given {@link DBType}.
 * @param tapType	{@link DBType} to convert.
 */
public VotType(final DBType tapType){
switch (tapType.type) {
case SMALLINT:
    this.datatype=VotDatatype.SHORT;
  this.arraysize=null;
this.xtype=null;
break;
case INTEGER:
this.datatype=VotDatatype.INT;
this.arraysize=null;
this.xtype=null;
break;
case BIGINT:
this.datatype=VotDatatype.LONG;
this.arraysize=null;
this.xtype=null;
break;
case REAL:
this.datatype=VotDatatype.FLOAT;
this.arraysize=null;
this.xtype=null;
break;
case DOUBLE:
this.datatype=VotDatatype.DOUBLE;
this.arraysize=null;
this.xtype=null;
break;
case CHAR:
this.datatype=VotDatatype.CHAR;
this.arraysize=Integer.toString(tapType.length > 0 ? tapType.length : null);
this.xtype=null;
break;
case BINARY:
this.datatype=VotDatatype.UNSIGNEDBYTE;
this.arraysize=Integer.toString(tapType.length > 0 ? tapType.length : null);
this.xtype=null;
break;
case VARBINARY:
this.datatype=VotDatatype.UNSIGNEDBYTE;
this.arraysize=(tapType.length > 0 ? tapType.length + ""String_Node_Str"" : ""String_Node_Str"");
this.xtype=null;
break;
case BLOB:
this.datatype=VotDatatype.UNSIGNEDBYTE;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_BLOB;
break;
case CLOB:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_CLOB;
break;
case TIMESTAMP:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_TIMESTAMP;
break;
case POINT:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_POINT;
break;
case REGION:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_REGION;
break;
case VARCHAR:
default :
this.datatype=VotDatatype.CHAR;
this.arraysize=(tapType.length > 0 ? tapType.length + ""String_Node_Str"" : ""String_Node_Str"");
this.xtype=null;
break;
}
}","/** 
 * Build a   {@link VotType} object by converting the given {@link DBType}.
 * @param tapType	{@link DBType} to convert.
 */
public VotType(final DBType tapType){
switch (tapType.type) {
case SMALLINT:
    this.datatype=VotDatatype.SHORT;
  this.arraysize=null;
this.xtype=null;
break;
case INTEGER:
this.datatype=VotDatatype.INT;
this.arraysize=null;
this.xtype=null;
break;
case BIGINT:
this.datatype=VotDatatype.LONG;
this.arraysize=null;
this.xtype=null;
break;
case REAL:
this.datatype=VotDatatype.FLOAT;
this.arraysize=null;
this.xtype=null;
break;
case DOUBLE:
this.datatype=VotDatatype.DOUBLE;
this.arraysize=null;
this.xtype=null;
break;
case CHAR:
this.datatype=VotDatatype.CHAR;
this.arraysize=tapType.length > 0 ? Integer.toString(tapType.length) : null;
this.xtype=null;
break;
case BINARY:
this.datatype=VotDatatype.UNSIGNEDBYTE;
this.arraysize=tapType.length > 0 ? Integer.toString(tapType.length) : null;
this.xtype=null;
break;
case VARBINARY:
this.datatype=VotDatatype.UNSIGNEDBYTE;
this.arraysize=(tapType.length > 0 ? tapType.length + ""String_Node_Str"" : ""String_Node_Str"");
this.xtype=null;
break;
case BLOB:
this.datatype=VotDatatype.UNSIGNEDBYTE;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_BLOB;
break;
case CLOB:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_CLOB;
break;
case TIMESTAMP:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_TIMESTAMP;
break;
case POINT:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_POINT;
break;
case REGION:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_REGION;
break;
case VARCHAR:
default :
this.datatype=VotDatatype.CHAR;
this.arraysize=(tapType.length > 0 ? tapType.length + ""String_Node_Str"" : ""String_Node_Str"");
this.xtype=null;
break;
}
}",0.9768421052631578
24996,"/** 
 * <p>Lets configuring the destruction time default and maximum value.</p> <p><i><u>note:</u> A new controller is created if needed. Otherwise the current one (if it is an instance of   {@link ExecutionDurationController}) is updated.</i></p>
 * @param defaultTime		Default time since the job creation and its destruction.
 * @param defaultTimeUnit	Unit of the default time (i.e. minutes, days, ...).
 * @param maxTime			Maximum time since the job creation and its destruction that a user can set when creating/initializing a job.
 * @param maxTimeUnit		Unit of the maximum time (i.e. minutes, days, ...).
 * @param allowModif		<i>true</i> to allow the modification of this parameter after its initialization, <i>false</i> otherwise.
 * @see DestructionTimeController
 */
public final void configureDestruction(final int defaultTime,final DateField defaultTimeUnit,final int maxTime,final DateField maxTimeUnit,final boolean allowModif){
  InputParamController controller=inputParamControllers.get(UWSJob.PARAM_DESTRUCTION_TIME);
  DestructionTimeController destructionController;
  if (controller == null || !(controller instanceof DestructionTimeController)) {
    destructionController=new DestructionTimeController();
    inputParamControllers.put(UWSJob.PARAM_DESTRUCTION_TIME,controller);
  }
 else   destructionController=(DestructionTimeController)controller;
  destructionController.setMaxDestructionInterval(maxTime,maxTimeUnit);
  destructionController.setDefaultDestructionInterval(defaultTime,defaultTimeUnit);
  destructionController.allowModification(allowModif);
}","/** 
 * <p>Lets configuring the destruction time default and maximum value.</p> <p><i><u>note:</u> A new controller is created if needed. Otherwise the current one (if it is an instance of   {@link ExecutionDurationController}) is updated.</i></p>
 * @param defaultTime		Default time since the job creation and its destruction.
 * @param defaultTimeUnit	Unit of the default time (i.e. minutes, days, ...).
 * @param maxTime			Maximum time since the job creation and its destruction that a user can set when creating/initializing a job.
 * @param maxTimeUnit		Unit of the maximum time (i.e. minutes, days, ...).
 * @param allowModif		<i>true</i> to allow the modification of this parameter after its initialization, <i>false</i> otherwise.
 * @see DestructionTimeController
 */
public final void configureDestruction(final int defaultTime,final DateField defaultTimeUnit,final int maxTime,final DateField maxTimeUnit,final boolean allowModif){
  InputParamController controller=inputParamControllers.get(UWSJob.PARAM_DESTRUCTION_TIME);
  DestructionTimeController destructionController;
  if (controller == null || !(controller instanceof DestructionTimeController)) {
    destructionController=new DestructionTimeController();
    inputParamControllers.put(UWSJob.PARAM_DESTRUCTION_TIME,destructionController);
  }
 else   destructionController=(DestructionTimeController)controller;
  destructionController.setMaxDestructionInterval(maxTime,maxTimeUnit);
  destructionController.setDefaultDestructionInterval(defaultTime,defaultTimeUnit);
  destructionController.allowModification(allowModif);
}",0.995913234831814
24997,"/** 
 * <p>Tell whether the specified column exists in the specified table of the database. To do so, it is using the given   {@link DatabaseMetaData} object to query the database and list all existing columns.</p><p><i><b>Important note:</b> If schemas are not supported by this connection but a schema name is even though provided in parameter, the table name will be prefixed by the schema name. The research will then be done with NULL as schema name and this prefixed table name. </i></p> <p><i>Note: Test on the schema name is done considering the case sensitivity indicated by the translator (see  {@link JDBCTranslator#isCaseSensitive(IdentifierField)}). </i></p> <p><i>Note: This function is used by   {@link #loadSchemas(TAPTable,TAPMetadata,Statement)},   {@link #loadTables(TAPTable,TAPMetadata,Statement)}and   {@link #loadColumns(TAPTable,List,Statement)}. </i></p>
 * @param schemaName	DB name of the table schema. <i>MAY BE NULL</i>
 * @param tableName		DB name of the table containing the column to search. <i>MAY BE NULL</i>
 * @param columnName	DB name of the column to search.
 * @param dbMeta		Metadata about the database, and mainly the list of all existing tables.
 * @return	<i>true</i> if the specified column exists, <i>false</i> otherwise.
 * @throws SQLException	If any error occurs while interrogating the database about existing columns.
 */
protected boolean isColumnExisting(String schemaName,String tableName,String columnName,final DatabaseMetaData dbMeta) throws DBException, SQLException {
  if (columnName == null || columnName.length() == 0)   return true;
  boolean schemaCaseSensitive=translator.isCaseSensitive(IdentifierField.SCHEMA);
  boolean tableCaseSensitive=translator.isCaseSensitive(IdentifierField.TABLE);
  boolean columnCaseSensitive=translator.isCaseSensitive(IdentifierField.COLUMN);
  ResultSet rsT=null, rsC=null;
  try {
    if (supportsSchema) {
      String schemaPattern=schemaCaseSensitive ? schemaName : null;
      String tablePattern=tableCaseSensitive ? tableName : null;
      rsT=dbMeta.getTables(null,schemaPattern,tablePattern,null);
    }
 else {
      String tablePattern=tableCaseSensitive ? tableName : null;
      rsT=dbMeta.getTables(null,null,tablePattern,null);
    }
    int cnt=0;
    String columnPattern=columnCaseSensitive ? columnName : null;
    while (rsT.next()) {
      String rsSchema=nullifyIfNeeded(rsT.getString(2));
      String rsTable=rsT.getString(3);
      if (!supportsSchema || schemaName == null || equals(rsSchema,schemaName,schemaCaseSensitive)) {
        if ((tableName == null || equals(rsTable,tableName,tableCaseSensitive))) {
          rsC=dbMeta.getColumns(null,rsSchema,rsTable,columnPattern);
          while (rsC.next()) {
            String rsColumn=rsC.getString(4);
            if (equals(rsColumn,columnName,columnCaseSensitive))             cnt++;
          }
          close(rsC);
        }
      }
    }
    if (cnt > 1) {
      if (logger != null)       logger.logDB(LogLevel.ERROR,this,""String_Node_Str"",""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str""+ columnName+ ""String_Node_Str""+ columnCaseSensitive+ ""String_Node_Str"",null);
      throw new DBException(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str""+ columnName+ ""String_Node_Str""+ columnCaseSensitive+ ""String_Node_Str"");
    }
    return cnt == 1;
  }
  finally {
    close(rsT);
    close(rsC);
  }
}","/** 
 * <p>Tell whether the specified column exists in the specified table of the database. To do so, it is using the given   {@link DatabaseMetaData} object to query the database and list all existing columns.</p><p><i><b>Important note:</b> If schemas are not supported by this connection but a schema name is even though provided in parameter, the table name will be prefixed by the schema name. The research will then be done with NULL as schema name and this prefixed table name. </i></p> <p><i>Note: Test on the schema name is done considering the case sensitivity indicated by the translator (see  {@link JDBCTranslator#isCaseSensitive(IdentifierField)}). </i></p> <p><i>Note: This function is used by   {@link #loadSchemas(TAPTable,TAPMetadata,Statement)},   {@link #loadTables(TAPTable,TAPMetadata,Statement)}and   {@link #loadColumns(TAPTable,List,Statement)}. </i></p>
 * @param schemaName	DB name of the table schema. <i>MAY BE NULL</i>
 * @param tableName		DB name of the table containing the column to search. <i>MAY BE NULL</i>
 * @param columnName	DB name of the column to search.
 * @param dbMeta		Metadata about the database, and mainly the list of all existing tables.
 * @return	<i>true</i> if the specified column exists, <i>false</i> otherwise.
 * @throws SQLException	If any error occurs while interrogating the database about existing columns.
 */
protected boolean isColumnExisting(String schemaName,String tableName,String columnName,final DatabaseMetaData dbMeta) throws DBException, SQLException {
  if (columnName == null || columnName.length() == 0)   return true;
  boolean schemaCaseSensitive=translator.isCaseSensitive(IdentifierField.SCHEMA);
  boolean tableCaseSensitive=translator.isCaseSensitive(IdentifierField.TABLE);
  boolean columnCaseSensitive=translator.isCaseSensitive(IdentifierField.COLUMN);
  ResultSet rsT=null, rsC=null;
  try {
    if (supportsSchema) {
      String schemaPattern=schemaCaseSensitive ? schemaName : null;
      String tablePattern=tableCaseSensitive ? tableName : null;
      rsT=dbMeta.getTables(null,schemaPattern,tablePattern,null);
    }
 else {
      String tablePattern=tableCaseSensitive ? tableName : null;
      rsT=dbMeta.getTables(null,null,tablePattern,null);
    }
    int cnt=0;
    String columnPattern=columnCaseSensitive ? columnName : null;
    while (rsT.next()) {
      int rsTSchemaIndex=dbms.equalsIgnoreCase(DBMS_MYSQL) ? 1 : 2;
      String rsSchema=nullifyIfNeeded(rsT.getString(rsTSchemaIndex));
      String rsTable=rsT.getString(3);
      if (!supportsSchema || schemaName == null || equals(rsSchema,schemaName,schemaCaseSensitive)) {
        if ((tableName == null || equals(rsTable,tableName,tableCaseSensitive))) {
          rsC=dbMeta.getColumns(null,rsSchema,rsTable,columnPattern);
          while (rsC.next()) {
            String rsColumn=rsC.getString(4);
            if (equals(rsColumn,columnName,columnCaseSensitive))             cnt++;
          }
          close(rsC);
        }
      }
    }
    if (cnt > 1) {
      if (logger != null)       logger.logDB(LogLevel.ERROR,this,""String_Node_Str"",""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str""+ columnName+ ""String_Node_Str""+ columnCaseSensitive+ ""String_Node_Str"",null);
      throw new DBException(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaCaseSensitive+ ""String_Node_Str""+ tableName+ ""String_Node_Str""+ tableCaseSensitive+ ""String_Node_Str""+ columnName+ ""String_Node_Str""+ columnCaseSensitive+ ""String_Node_Str"");
    }
    return cnt == 1;
  }
  finally {
    close(rsT);
    close(rsC);
  }
}",0.9886098531631672
24998,"/** 
 * Build a   {@link VotType} object by converting the given {@link DBType}.
 * @param tapType	{@link DBType} to convert.
 */
public VotType(final DBType tapType){
switch (tapType.type) {
case SMALLINT:
    this.datatype=VotDatatype.SHORT;
  this.arraysize=null;
this.xtype=null;
break;
case INTEGER:
this.datatype=VotDatatype.INT;
this.arraysize=null;
this.xtype=null;
break;
case BIGINT:
this.datatype=VotDatatype.LONG;
this.arraysize=null;
this.xtype=null;
break;
case REAL:
this.datatype=VotDatatype.FLOAT;
this.arraysize=null;
this.xtype=null;
break;
case DOUBLE:
this.datatype=VotDatatype.DOUBLE;
this.arraysize=null;
this.xtype=null;
break;
case CHAR:
this.datatype=VotDatatype.CHAR;
this.arraysize=Integer.toString(tapType.length > 0 ? tapType.length : null);
this.xtype=null;
break;
case BINARY:
this.datatype=VotDatatype.UNSIGNEDBYTE;
this.arraysize=Integer.toString(tapType.length > 0 ? tapType.length : null);
this.xtype=null;
break;
case VARBINARY:
this.datatype=VotDatatype.UNSIGNEDBYTE;
this.arraysize=(tapType.length > 0 ? tapType.length + ""String_Node_Str"" : ""String_Node_Str"");
this.xtype=null;
break;
case BLOB:
this.datatype=VotDatatype.UNSIGNEDBYTE;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_BLOB;
break;
case CLOB:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_CLOB;
break;
case TIMESTAMP:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_TIMESTAMP;
break;
case POINT:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_POINT;
break;
case REGION:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_REGION;
break;
case VARCHAR:
default :
this.datatype=VotDatatype.CHAR;
this.arraysize=(tapType.length > 0 ? tapType.length + ""String_Node_Str"" : ""String_Node_Str"");
this.xtype=null;
break;
}
}","/** 
 * Build a   {@link VotType} object by converting the given {@link DBType}.
 * @param tapType	{@link DBType} to convert.
 */
public VotType(final DBType tapType){
switch (tapType.type) {
case SMALLINT:
    this.datatype=VotDatatype.SHORT;
  this.arraysize=null;
this.xtype=null;
break;
case INTEGER:
this.datatype=VotDatatype.INT;
this.arraysize=null;
this.xtype=null;
break;
case BIGINT:
this.datatype=VotDatatype.LONG;
this.arraysize=null;
this.xtype=null;
break;
case REAL:
this.datatype=VotDatatype.FLOAT;
this.arraysize=null;
this.xtype=null;
break;
case DOUBLE:
this.datatype=VotDatatype.DOUBLE;
this.arraysize=null;
this.xtype=null;
break;
case CHAR:
this.datatype=VotDatatype.CHAR;
this.arraysize=tapType.length > 0 ? Integer.toString(tapType.length) : null;
this.xtype=null;
break;
case BINARY:
this.datatype=VotDatatype.UNSIGNEDBYTE;
this.arraysize=tapType.length > 0 ? Integer.toString(tapType.length) : null;
this.xtype=null;
break;
case VARBINARY:
this.datatype=VotDatatype.UNSIGNEDBYTE;
this.arraysize=(tapType.length > 0 ? tapType.length + ""String_Node_Str"" : ""String_Node_Str"");
this.xtype=null;
break;
case BLOB:
this.datatype=VotDatatype.UNSIGNEDBYTE;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_BLOB;
break;
case CLOB:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_CLOB;
break;
case TIMESTAMP:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_TIMESTAMP;
break;
case POINT:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_POINT;
break;
case REGION:
this.datatype=VotDatatype.CHAR;
this.arraysize=""String_Node_Str"";
this.xtype=VotType.XTYPE_REGION;
break;
case VARCHAR:
default :
this.datatype=VotDatatype.CHAR;
this.arraysize=(tapType.length > 0 ? tapType.length + ""String_Node_Str"" : ""String_Node_Str"");
this.xtype=null;
break;
}
}",0.9768421052631578
24999,"private boolean jj_3R_128(){
  Token xsp;
  xsp=jj_scanpos;
  if (jj_scan_token(99)) {
    jj_scanpos=xsp;
    if (jj_scan_token(100)) {
      jj_scanpos=xsp;
      if (jj_scan_token(101))       return true;
    }
  }
  return false;
}","private boolean jj_3R_128(){
  Token xsp;
  xsp=jj_scanpos;
  if (jj_scan_token(97)) {
    jj_scanpos=xsp;
    if (jj_scan_token(98)) {
      jj_scanpos=xsp;
      if (jj_scan_token(99))       return true;
    }
  }
  return false;
}",0.9743589743589745
25000,"/** 
 * Generate ParseException. 
 */
public ParseException generateParseException(){
  jj_expentries.clear();
  boolean[] la1tokens=new boolean[103];
  if (jj_kind >= 0) {
    la1tokens[jj_kind]=true;
    jj_kind=-1;
  }
  for (int i=0; i < 98; i++) {
    if (jj_la1[i] == jj_gen) {
      for (int j=0; j < 32; j++) {
        if ((jj_la1_0[i] & (1 << j)) != 0) {
          la1tokens[j]=true;
        }
        if ((jj_la1_1[i] & (1 << j)) != 0) {
          la1tokens[32 + j]=true;
        }
        if ((jj_la1_2[i] & (1 << j)) != 0) {
          la1tokens[64 + j]=true;
        }
        if ((jj_la1_3[i] & (1 << j)) != 0) {
          la1tokens[96 + j]=true;
        }
      }
    }
  }
  for (int i=0; i < 103; i++) {
    if (la1tokens[i]) {
      jj_expentry=new int[1];
      jj_expentry[0]=i;
      jj_expentries.add(jj_expentry);
    }
  }
  jj_endpos=0;
  jj_rescan_token();
  jj_add_error_token(0,0);
  int[][] exptokseq=new int[jj_expentries.size()][];
  for (int i=0; i < jj_expentries.size(); i++) {
    exptokseq[i]=jj_expentries.get(i);
  }
  return new ParseException(token,exptokseq,tokenImage);
}","/** 
 * Generate ParseException. 
 */
public ParseException generateParseException(){
  jj_expentries.clear();
  boolean[] la1tokens=new boolean[101];
  if (jj_kind >= 0) {
    la1tokens[jj_kind]=true;
    jj_kind=-1;
  }
  for (int i=0; i < 98; i++) {
    if (jj_la1[i] == jj_gen) {
      for (int j=0; j < 32; j++) {
        if ((jj_la1_0[i] & (1 << j)) != 0) {
          la1tokens[j]=true;
        }
        if ((jj_la1_1[i] & (1 << j)) != 0) {
          la1tokens[32 + j]=true;
        }
        if ((jj_la1_2[i] & (1 << j)) != 0) {
          la1tokens[64 + j]=true;
        }
        if ((jj_la1_3[i] & (1 << j)) != 0) {
          la1tokens[96 + j]=true;
        }
      }
    }
  }
  for (int i=0; i < 101; i++) {
    if (la1tokens[i]) {
      jj_expentry=new int[1];
      jj_expentry[0]=i;
      jj_expentries.add(jj_expentry);
    }
  }
  jj_endpos=0;
  jj_rescan_token();
  jj_add_error_token(0,0);
  int[][] exptokseq=new int[jj_expentries.size()][];
  for (int i=0; i < jj_expentries.size(); i++) {
    exptokseq[i]=jj_expentries.get(i);
  }
  return new ParseException(token,exptokseq,tokenImage);
}",0.9982014388489208
