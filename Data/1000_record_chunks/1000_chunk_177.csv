record_number,buggy_code,fixed_code,code_similarity
176001,"@Override public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  Object connection=null;
  Pipeline pipeLine=null;
  try {
    connection=getConnection();
    if (resource == null) {
      pipeLine=((Jedis)connection).pipelined();
    }
    String valueAsStr=PropertyAccessorHelper.getString(columnValue);
    Double score=getDouble(valueAsStr);
    Set<String> results=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
      ((RedisTransaction)resource).onExecute(((Transaction)connection));
      results=(Set<String>)response.get();
    }
 else {
      results=((Jedis)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
    }
    if (results != null) {
      for (      String rowKey : results) {
        Map<byte[],byte[]> columns=null;
        columns=getColumns(connection,rowKey,columns);
        for (        byte[] column : columns.keySet()) {
          String colName=PropertyAccessorFactory.STRING.fromBytes(String.class,columns.get(column));
          if (resource != null && resource.isActive()) {
            ((Transaction)connection).hdel(getEncodedBytes(rowKey),column);
            ((Transaction)connection).zrem(getHashKey(tableName,colName),rowKey);
          }
 else {
            ((Jedis)connection).hdel(getEncodedBytes(rowKey),column);
            ((Jedis)connection).zrem(getHashKey(tableName,colName),rowKey);
          }
        }
      }
    }
  }
  finally {
    if (pipeLine != null) {
      pipeLine.sync();
    }
    onCleanup(connection);
  }
}","@Override public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  Object connection=null;
  Pipeline pipeLine=null;
  try {
    connection=getConnection();
    if (isBoundTransaction()) {
      pipeLine=((Jedis)connection).pipelined();
    }
    String valueAsStr=PropertyAccessorHelper.getString(columnValue);
    Double score=getDouble(valueAsStr);
    Set<String> results=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
      ((RedisTransaction)resource).onExecute(((Transaction)connection));
      results=(Set<String>)response.get();
    }
 else {
      results=((Jedis)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
    }
    if (results != null) {
      for (      String rowKey : results) {
        Map<byte[],byte[]> columns=null;
        columns=getColumns(connection,rowKey,columns);
        for (        byte[] column : columns.keySet()) {
          String colName=PropertyAccessorFactory.STRING.fromBytes(String.class,columns.get(column));
          if (resource != null && resource.isActive()) {
            ((Transaction)connection).hdel(getEncodedBytes(rowKey),column);
            ((Transaction)connection).zrem(getHashKey(tableName,colName),rowKey);
          }
 else {
            ((Jedis)connection).hdel(getEncodedBytes(rowKey),column);
            ((Jedis)connection).zrem(getHashKey(tableName,colName),rowKey);
          }
        }
      }
    }
  }
  finally {
    if (pipeLine != null) {
      pipeLine.sync();
    }
    onCleanup(connection);
  }
}",0.9891956782713084
176002,"@Override public int executeBatch(){
  Object connection=getConnection();
  Pipeline pipeLine=null;
  if (resource == null) {
    pipeLine=((Jedis)connection).pipelined();
  }
  try {
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        if (node.isInState(RemovedState.class)) {
          onDelete(node.getData(),node.getEntityId(),pipeLine != null ? pipeLine : connection);
        }
 else {
          List<RelationHolder> relationHolders=getRelationHolders(node);
          EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,node.getDataClass());
          onPersist(metadata,node.getData(),node.getEntityId(),relationHolders,pipeLine != null ? pipeLine : connection);
        }
        node.handlePostEvent();
      }
    }
  }
  finally {
    if (pipeLine != null) {
      pipeLine.sync();
    }
    onCleanup(connection);
  }
  return nodes.size();
}","@Override public int executeBatch(){
  Object connection=getConnection();
  Pipeline pipeLine=null;
  if (isBoundTransaction()) {
    pipeLine=((Jedis)connection).pipelined();
  }
  try {
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        if (node.isInState(RemovedState.class)) {
          onDelete(node.getData(),node.getEntityId(),pipeLine != null ? pipeLine : connection);
        }
 else {
          List<RelationHolder> relationHolders=getRelationHolders(node);
          EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,node.getDataClass());
          onPersist(metadata,node.getData(),node.getEntityId(),relationHolders,pipeLine != null ? pipeLine : connection);
        }
        node.handlePostEvent();
      }
    }
  }
  finally {
    if (pipeLine != null) {
      pipeLine.sync();
    }
    onCleanup(connection);
  }
  return nodes.size();
}",0.9807486631016042
176003,"@Override public void persistJoinTable(JoinTableData joinTableData){
  String tableName=joinTableData.getJoinTableName();
  String inverseJoinColumn=joinTableData.getInverseJoinColumnName();
  String joinColumn=joinTableData.getJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  Object connection=null;
  Pipeline pipeline=null;
  try {
    connection=getConnection();
    if (resource == null) {
      pipeline=((Jedis)connection).pipelined();
    }
    Set<Object> joinKeys=joinTableRecords.keySet();
    for (    Object joinKey : joinKeys) {
      String joinKeyAsStr=PropertyAccessorHelper.getString(joinKey);
      Set<Object> inverseKeys=joinTableRecords.get(joinKey);
      for (      Object inverseKey : inverseKeys) {
        Map<byte[],byte[]> redisFields=new HashMap<byte[],byte[]>(1);
        String inverseJoinKeyAsStr=PropertyAccessorHelper.getString(inverseKey);
        String redisKey=getHashKey(tableName,joinKeyAsStr + ""String_Node_Str"" + inverseJoinKeyAsStr);
        redisFields.put(getEncodedBytes(joinColumn),getEncodedBytes(joinKeyAsStr));
        redisFields.put(getEncodedBytes(inverseJoinColumn),getEncodedBytes(inverseJoinKeyAsStr));
        if (resource != null && resource.isActive()) {
          ((Transaction)connection).hmset(getEncodedBytes(redisKey),redisFields);
          ((Transaction)connection).zadd(getHashKey(tableName,inverseJoinKeyAsStr),getDouble(inverseJoinKeyAsStr),redisKey);
          ((Transaction)connection).zadd(getHashKey(tableName,joinKeyAsStr),getDouble(joinKeyAsStr),redisKey);
        }
 else {
          ((Jedis)connection).hmset(getEncodedBytes(redisKey),redisFields);
          ((Jedis)connection).zadd(getHashKey(tableName,inverseJoinKeyAsStr),getDouble(inverseJoinKeyAsStr),redisKey);
          ((Jedis)connection).zadd(getHashKey(tableName,joinKeyAsStr),getDouble(joinKeyAsStr),redisKey);
        }
        redisFields.clear();
      }
    }
  }
  finally {
    if (pipeline != null) {
      pipeline.sync();
    }
    onCleanup(connection);
  }
}","@Override public void persistJoinTable(JoinTableData joinTableData){
  String tableName=joinTableData.getJoinTableName();
  String inverseJoinColumn=joinTableData.getInverseJoinColumnName();
  String joinColumn=joinTableData.getJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  Object connection=null;
  Pipeline pipeline=null;
  try {
    connection=getConnection();
    if (isBoundTransaction()) {
      pipeline=((Jedis)connection).pipelined();
    }
    Set<Object> joinKeys=joinTableRecords.keySet();
    for (    Object joinKey : joinKeys) {
      String joinKeyAsStr=PropertyAccessorHelper.getString(joinKey);
      Set<Object> inverseKeys=joinTableRecords.get(joinKey);
      for (      Object inverseKey : inverseKeys) {
        Map<byte[],byte[]> redisFields=new HashMap<byte[],byte[]>(1);
        String inverseJoinKeyAsStr=PropertyAccessorHelper.getString(inverseKey);
        String redisKey=getHashKey(tableName,joinKeyAsStr + ""String_Node_Str"" + inverseJoinKeyAsStr);
        redisFields.put(getEncodedBytes(joinColumn),getEncodedBytes(joinKeyAsStr));
        redisFields.put(getEncodedBytes(inverseJoinColumn),getEncodedBytes(inverseJoinKeyAsStr));
        if (resource != null && resource.isActive()) {
          ((Transaction)connection).hmset(getEncodedBytes(redisKey),redisFields);
          ((Transaction)connection).zadd(getHashKey(tableName,inverseJoinKeyAsStr),getDouble(inverseJoinKeyAsStr),redisKey);
          ((Transaction)connection).zadd(getHashKey(tableName,joinKeyAsStr),getDouble(joinKeyAsStr),redisKey);
        }
 else {
          ((Jedis)connection).hmset(getEncodedBytes(redisKey),redisFields);
          ((Jedis)connection).zadd(getHashKey(tableName,inverseJoinKeyAsStr),getDouble(inverseJoinKeyAsStr),redisKey);
          ((Jedis)connection).zadd(getHashKey(tableName,joinKeyAsStr),getDouble(joinKeyAsStr),redisKey);
        }
        redisFields.clear();
      }
    }
  }
  finally {
    if (pipeline != null) {
      pipeline.sync();
    }
    onCleanup(connection);
  }
}",0.9922405431619786
176004,"/** 
 * On release connection.
 * @param connection redis connection instance.
 */
private void onCleanup(Object connection){
  if (resource == null && connection != null) {
    if (settings != null) {
      ((Jedis)connection).configResetStat();
    }
    factory.releaseConnection((Jedis)connection);
  }
}","/** 
 * On release connection.
 * @param connection redis connection instance.
 */
private void onCleanup(Object connection){
  if (this.connection != null) {
    if (settings != null) {
      ((Jedis)connection).configResetStat();
    }
    factory.releaseConnection((Jedis)this.connection);
  }
  this.connection=null;
}",0.9142857142857144
176005,"/** 
 * Retrieving connection from connection pool.
 * @return returns jedis instance.
 */
Jedis getConnection(){
  if (logger.isDebugEnabled())   logger.info(""String_Node_Str"");
  Object poolOrConnection=getConnectionPoolOrConnection();
  if (poolOrConnection != null && poolOrConnection instanceof JedisPool) {
    Jedis connection=((JedisPool)getConnectionPoolOrConnection()).getResource();
    Map props=RedisPropertyReader.rsmd.getProperties();
    if (props != null) {
      for (      Object key : props.keySet()) {
        connection.configSet(key.toString(),props.get(key).toString());
      }
    }
    return connection;
  }
 else {
    PersistenceUnitMetadata puMetadata=kunderaMetadata.getApplicationMetadata().getPersistenceUnitMetadata(getPersistenceUnit());
    Properties props=puMetadata.getProperties();
    String contactNode=RedisPropertyReader.rsmd.getHost() != null ? RedisPropertyReader.rsmd.getHost() : (String)props.get(PersistenceProperties.KUNDERA_NODES);
    String defaultPort=RedisPropertyReader.rsmd.getPort() != null ? RedisPropertyReader.rsmd.getPort() : (String)props.get(PersistenceProperties.KUNDERA_PORT);
    String password=RedisPropertyReader.rsmd.getPassword() != null ? RedisPropertyReader.rsmd.getPassword() : (String)props.get(PersistenceProperties.KUNDERA_PASSWORD);
    if (defaultPort == null || !StringUtils.isNumeric(defaultPort)) {
      throw new RuntimeException(""String_Node_Str"" + defaultPort);
    }
    Jedis connection=new Jedis(contactNode,Integer.parseInt(defaultPort));
    if (password != null) {
      connection.auth(password);
    }
    connection.connect();
    return connection;
  }
}","/** 
 * Retrieving connection from connection pool.
 * @return returns jedis instance.
 */
Jedis getConnection(){
  if (logger.isDebugEnabled())   logger.info(""String_Node_Str"");
  Object poolOrConnection=getConnectionPoolOrConnection();
  if (poolOrConnection != null && poolOrConnection instanceof JedisPool) {
    Jedis connection=((JedisPool)getConnectionPoolOrConnection()).getResource();
    connection.getClient().setTimeoutInfinite();
    Map props=RedisPropertyReader.rsmd.getProperties();
    if (props != null) {
      for (      Object key : props.keySet()) {
        connection.configSet(key.toString(),props.get(key).toString());
      }
    }
    return connection;
  }
 else {
    PersistenceUnitMetadata puMetadata=kunderaMetadata.getApplicationMetadata().getPersistenceUnitMetadata(getPersistenceUnit());
    Properties props=puMetadata.getProperties();
    String contactNode=RedisPropertyReader.rsmd.getHost() != null ? RedisPropertyReader.rsmd.getHost() : (String)props.get(PersistenceProperties.KUNDERA_NODES);
    String defaultPort=RedisPropertyReader.rsmd.getPort() != null ? RedisPropertyReader.rsmd.getPort() : (String)props.get(PersistenceProperties.KUNDERA_PORT);
    String password=RedisPropertyReader.rsmd.getPassword() != null ? RedisPropertyReader.rsmd.getPassword() : (String)props.get(PersistenceProperties.KUNDERA_PASSWORD);
    if (defaultPort == null || !StringUtils.isNumeric(defaultPort)) {
      throw new RuntimeException(""String_Node_Str"" + defaultPort);
    }
    Jedis connection=new Jedis(contactNode,Integer.parseInt(defaultPort));
    if (password != null) {
      connection.auth(password);
    }
    connection.connect();
    return connection;
  }
}",0.9853862212943632
176006,"/** 
 * Inits the filter.
 */
private void initFilter(){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,entityClass);
  Metamodel metaModel=kunderaMetadata.getApplicationMetadata().getMetamodel(getPersistenceUnit());
  EntityType entityType=metaModel.entity(entityClass);
  if (null == filter) {
    List<String> clauses=new ArrayList<String>();
    addDiscriminatorClause(clauses,entityType);
    return;
  }
  List<String> clauses=tokenize(filter,INTER_CLAUSE_PATTERN,true);
  clauses=parseFilterForBetweenClause(clauses);
  boolean newClause=true;
  for (  String clause : clauses) {
    if (Arrays.asList(INTER_CLAUSE_OPERATORS).contains(clause.toUpperCase().trim())) {
      filtersQueue.add(clause.toUpperCase().trim());
      newClause=true;
    }
 else     if (newClause) {
      List<String> tokens=tokenize(clause,INTRA_CLAUSE_PATTERN,false);
      if (tokens.size() != 3) {
        throw new PersistenceException(""String_Node_Str"" + clause);
      }
      String property=tokens.get(0);
      if (property.indexOf(""String_Node_Str"") > 0) {
        property=property.substring((entityAlias + ""String_Node_Str"").length());
      }
      String columnName=null;
      try {
        columnName=((AbstractAttribute)entityType.getAttribute(property)).getJPAColumnName();
      }
 catch (      IllegalArgumentException iaex) {
        logger.warn(""String_Node_Str"" + property + ""String_Node_Str"");
      }
      if (columnName == null && property.indexOf(""String_Node_Str"") > 0) {
        String enclosingEmbeddedField=MetadataUtils.getEnclosingEmbeddedFieldName(metadata,property,true,kunderaMetadata);
        if (enclosingEmbeddedField != null) {
          columnName=property;
        }
      }
      if (columnName == null) {
        logger.error(""String_Node_Str"" + property);
        throw new JPQLParseException(""String_Node_Str"" + property + ""String_Node_Str"");
      }
      String condition=tokens.get(1);
      if (!Arrays.asList(INTRA_CLAUSE_OPERATORS).contains(condition.toUpperCase().trim())) {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
      FilterClause filterClause=new FilterClause(columnName,condition,tokens.get(2));
      filtersQueue.add(filterClause);
      onTypedParameter(tokens,filterClause,property);
      newClause=false;
    }
 else {
      throw new JPQLParseException(""String_Node_Str"" + clause);
    }
  }
  addDiscriminatorClause(clauses,entityType);
}","/** 
 * Inits the filter.
 */
private void initFilter(){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,entityClass);
  Metamodel metaModel=kunderaMetadata.getApplicationMetadata().getMetamodel(getPersistenceUnit());
  EntityType entityType=metaModel.entity(entityClass);
  if (null == filter) {
    List<String> clauses=new ArrayList<String>();
    addDiscriminatorClause(clauses,entityType);
    return;
  }
  List<String> clauses=tokenize(filter,INTER_CLAUSE_PATTERN,true);
  clauses=parseFilterForBetweenClause(clauses);
  boolean newClause=true;
  for (  String clause : clauses) {
    if (Arrays.asList(INTER_CLAUSE_OPERATORS).contains(clause.toUpperCase().trim()) || (clause.startsWith(""String_Node_Str"") && clause.endsWith(""String_Node_Str""))) {
      filtersQueue.add(clause.toUpperCase().trim());
      newClause=true;
    }
 else     if (newClause) {
      List<String> tokens=tokenize(clause,INTRA_CLAUSE_PATTERN,false);
      if (tokens.size() != 3) {
        throw new PersistenceException(""String_Node_Str"" + clause);
      }
      String property=tokens.get(0);
      if (property.indexOf(""String_Node_Str"") > 0) {
        property=property.substring((entityAlias + ""String_Node_Str"").length());
      }
      String columnName=null;
      try {
        columnName=((AbstractAttribute)entityType.getAttribute(property)).getJPAColumnName();
      }
 catch (      IllegalArgumentException iaex) {
        logger.warn(""String_Node_Str"" + property + ""String_Node_Str"");
      }
      if (columnName == null && property.indexOf(""String_Node_Str"") > 0) {
        String enclosingEmbeddedField=MetadataUtils.getEnclosingEmbeddedFieldName(metadata,property,true,kunderaMetadata);
        if (enclosingEmbeddedField != null) {
          columnName=property;
        }
      }
      if (columnName == null) {
        logger.error(""String_Node_Str"" + property);
        throw new JPQLParseException(""String_Node_Str"" + property + ""String_Node_Str"");
      }
      String condition=tokens.get(1);
      if (!Arrays.asList(INTRA_CLAUSE_OPERATORS).contains(condition.toUpperCase().trim())) {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
      FilterClause filterClause=new FilterClause(columnName,condition,tokens.get(2));
      filtersQueue.add(filterClause);
      onTypedParameter(tokens,filterClause,property);
      newClause=false;
    }
 else {
      throw new JPQLParseException(""String_Node_Str"" + clause);
    }
  }
  addDiscriminatorClause(clauses,entityType);
}",0.984
176007,"/** 
 * Tokenize.
 * @param where the where
 * @param pattern the pattern
 * @return the list
 */
private static List<String> tokenize(String where,Pattern pattern,boolean isInterClause){
  List<String> split=new ArrayList<String>();
  Matcher matcher=pattern.matcher(where);
  int lastIndex=0;
  String s;
  while (matcher.find()) {
    s=where.substring(lastIndex,matcher.start()).trim();
    addSplit(isInterClause,split,s);
    s=matcher.group();
    split.add(s.toUpperCase());
    lastIndex=matcher.end();
  }
  s=where.substring(lastIndex).trim();
  addSplit(isInterClause,split,s);
  return split;
}","/** 
 * Tokenize.
 * @param where the where
 * @param pattern the pattern
 * @return the list
 */
private static List<String> tokenize(String where,Pattern pattern,boolean isInterClause){
  List<String> split=new ArrayList<String>();
  Matcher matcher=pattern.matcher(where);
  int lastIndex=0;
  String s;
  while (matcher.find()) {
    s=where.substring(lastIndex,matcher.start()).trim();
    addSplit(isInterClause,split,s);
    s=matcher.group();
    split.add(s.toUpperCase());
    lastIndex=matcher.end();
  }
  s=where.substring(lastIndex).trim();
  if (!s.equals(""String_Node_Str"")) {
    if (isInterClause) {
      if (s.startsWith(""String_Node_Str"") && s.endsWith(""String_Node_Str"")) {
        split.add(""String_Node_Str"");
        split.add(s.substring(s.indexOf(""String_Node_Str"") + 1,s.lastIndexOf(""String_Node_Str"")));
        split.add(""String_Node_Str"");
      }
 else {
        split.add(s);
      }
    }
 else {
      split.add(s);
    }
  }
  return split;
}",0.7457413249211357
176008,"/** 
 * Populates collection field(s) into entity
 * @param entity
 * @param thriftColumnValue
 * @param attribute
 */
private void setCollectionValue(Object entity,Object thriftColumnValue,Attribute attribute){
  try {
    if (Collection.class.isAssignableFrom(((Field)attribute.getJavaMember()).getType())) {
      Collection outputCollection=null;
      ByteBuffer valueByteBuffer=ByteBuffer.wrap((byte[])thriftColumnValue);
      Class<?> genericClass=PropertyAccessorHelper.getGenericClass((Field)attribute.getJavaMember());
      Class<?> valueValidationClass=CassandraValidationClassMapper.getValidationClassInstance(genericClass,true);
      Object valueClassInstance=valueValidationClass.getDeclaredField(""String_Node_Str"").get(null);
      if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(List.class)) {
        ListType listType=ListType.getInstance((AbstractType)valueClassInstance);
        outputCollection=new ArrayList();
        outputCollection.addAll(listType.compose(valueByteBuffer));
      }
 else       if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(Set.class)) {
        SetType setType=SetType.getInstance((AbstractType)valueClassInstance);
        outputCollection=new HashSet();
        outputCollection.addAll(setType.compose(valueByteBuffer));
      }
      PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),marshalCollection(valueValidationClass,outputCollection,genericClass));
    }
 else     if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(Map.class)) {
      ByteBuffer valueByteBuffer=ByteBuffer.wrap((byte[])thriftColumnValue);
      List<Class<?>> mapGenericClasses=PropertyAccessorHelper.getGenericClasses((Field)attribute.getJavaMember());
      Class keyClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(0),true);
      Class valueClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(1),true);
      Object keyClassInstance=keyClass.getDeclaredField(""String_Node_Str"").get(null);
      Object valueClassInstance=valueClass.getDeclaredField(""String_Node_Str"").get(null);
      MapType mapType=MapType.getInstance((AbstractType)keyClassInstance,(AbstractType)valueClassInstance);
      Map rawMap=new HashMap();
      rawMap.putAll(mapType.compose(valueByteBuffer));
      Map dataCollection=marshalMap(mapGenericClasses,keyClass,valueClass,rawMap);
      PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),dataCollection.isEmpty() ? rawMap : dataCollection);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",attribute.getName(),e);
    throw new PersistenceException(e);
  }
}","/** 
 * Populates collection field(s) into entity
 * @param entity
 * @param thriftColumnValue
 * @param attribute
 */
private void setCollectionValue(Object entity,Object thriftColumnValue,Attribute attribute){
  try {
    if (Collection.class.isAssignableFrom(((Field)attribute.getJavaMember()).getType())) {
      Collection outputCollection=null;
      ByteBuffer valueByteBuffer=ByteBuffer.wrap((byte[])thriftColumnValue);
      Class<?> genericClass=PropertyAccessorHelper.getGenericClass((Field)attribute.getJavaMember());
      Class<?> valueValidationClass=CassandraValidationClassMapper.getValidationClassInstance(genericClass,true);
      Object valueClassInstance=valueValidationClass.getDeclaredField(""String_Node_Str"").get(null);
      if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(List.class)) {
        ListType listType=ListType.getInstance((AbstractType)valueClassInstance);
        outputCollection=new ArrayList();
        outputCollection.addAll((Collection)listType.compose(valueByteBuffer));
      }
 else       if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(Set.class)) {
        SetType setType=SetType.getInstance((AbstractType)valueClassInstance);
        outputCollection=new HashSet();
        outputCollection.addAll((Collection)setType.compose(valueByteBuffer));
      }
      PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),marshalCollection(valueValidationClass,outputCollection,genericClass));
    }
 else     if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(Map.class)) {
      ByteBuffer valueByteBuffer=ByteBuffer.wrap((byte[])thriftColumnValue);
      List<Class<?>> mapGenericClasses=PropertyAccessorHelper.getGenericClasses((Field)attribute.getJavaMember());
      Class keyClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(0),true);
      Class valueClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(1),true);
      Object keyClassInstance=keyClass.getDeclaredField(""String_Node_Str"").get(null);
      Object valueClassInstance=valueClass.getDeclaredField(""String_Node_Str"").get(null);
      MapType mapType=MapType.getInstance((AbstractType)keyClassInstance,(AbstractType)valueClassInstance);
      Map rawMap=new HashMap();
      rawMap.putAll((Map)mapType.compose(valueByteBuffer));
      Map dataCollection=marshalMap(mapGenericClasses,keyClass,valueClass,rawMap);
      PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),dataCollection.isEmpty() ? rawMap : dataCollection);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",attribute.getName(),e);
    throw new PersistenceException(e);
  }
}",0.9946365822082486
176009,"/** 
 * Create secondary indexes on columns.
 * @param tableInfo
 */
private void createIndexUsingCql(TableInfo tableInfo) throws Exception {
  StringBuilder indexQueryBuilder=new StringBuilder(""String_Node_Str"");
  indexQueryBuilder.append(tableInfo.getTableName());
  indexQueryBuilder.append(""String_Node_Str"");
  for (  IndexInfo indexInfo : tableInfo.getColumnsToBeIndexed()) {
    ColumnInfo columnInfo=new ColumnInfo();
    columnInfo.setColumnName(indexInfo.getColumnName());
    if (!tableInfo.getEmbeddedColumnMetadatas().isEmpty()) {
      List<ColumnInfo> columnInfos=tableInfo.getEmbeddedColumnMetadatas().get(0).getColumns();
      if (columnInfos.contains(columnInfo)) {
        return;
      }
    }
    String replacedWithindexName=StringUtils.replace(indexQueryBuilder.toString(),""String_Node_Str"",indexInfo.getColumnName());
    try {
      cassandra_client.execute_cql3_query(ByteBuffer.wrap(replacedWithindexName.getBytes()),Compression.NONE,ConsistencyLevel.ONE);
    }
 catch (    InvalidRequestException ire) {
      if (ire.getWhy() != null && !ire.getWhy().equals(""String_Node_Str"") && operation.equalsIgnoreCase(SchemaOperationType.update.name())) {
        log.error(""String_Node_Str"",indexInfo.getColumnName(),tableInfo.getTableName(),ire);
        throw new SchemaGenerationException(""String_Node_Str"" + indexInfo.getColumnName() + ""String_Node_Str""+ tableInfo.getTableName(),ire,""String_Node_Str"",databaseName);
      }
    }
  }
}","/** 
 * Create secondary indexes on columns.
 * @param tableInfo
 */
private void createIndexUsingCql(TableInfo tableInfo) throws Exception {
  StringBuilder indexQueryBuilder=new StringBuilder(""String_Node_Str"");
  indexQueryBuilder.append(tableInfo.getTableName());
  indexQueryBuilder.append(""String_Node_Str"");
  for (  IndexInfo indexInfo : tableInfo.getColumnsToBeIndexed()) {
    ColumnInfo columnInfo=new ColumnInfo();
    columnInfo.setColumnName(indexInfo.getColumnName());
    if (!tableInfo.getEmbeddedColumnMetadatas().isEmpty()) {
      List<ColumnInfo> columnInfos=tableInfo.getEmbeddedColumnMetadatas().get(0).getColumns();
    }
    String replacedWithindexName=StringUtils.replace(indexQueryBuilder.toString(),""String_Node_Str"",indexInfo.getColumnName());
    try {
      cassandra_client.execute_cql3_query(ByteBuffer.wrap(replacedWithindexName.getBytes()),Compression.NONE,ConsistencyLevel.ONE);
    }
 catch (    InvalidRequestException ire) {
      if (ire.getWhy() != null && !ire.getWhy().equals(""String_Node_Str"") && operation.equalsIgnoreCase(SchemaOperationType.update.name())) {
        log.error(""String_Node_Str"",indexInfo.getColumnName(),tableInfo.getTableName(),ire);
        throw new SchemaGenerationException(""String_Node_Str"" + indexInfo.getColumnName() + ""String_Node_Str""+ tableInfo.getTableName(),ire,""String_Node_Str"",databaseName);
      }
    }
  }
}",0.9754730203223546
176010,"/** 
 * Creates keyspace.
 * @return
 * @throws InvalidRequestException
 * @throws SchemaDisagreementException
 * @throws TException
 */
private void createKeyspace() throws Exception {
  Map<String,String> strategy_options=new HashMap<String,String>();
  List<CfDef> cfDefs=new ArrayList<CfDef>();
  KsDef ksDef=new KsDef(databaseName,csmd.getPlacement_strategy(databaseName),cfDefs);
  setProperties(ksDef,strategy_options);
  ksDef.setStrategy_options(strategy_options);
  cassandra_client.system_add_keyspace(ksDef);
}","/** 
 * Creates keyspace.
 * @return
 * @throws InvalidRequestException
 * @throws SchemaDisagreementException
 * @throws TException
 */
private void createKeyspace() throws Exception {
  if (cql_version != null && cql_version.equals(CassandraConstants.CQL_VERSION_3_0)) {
    onCql3CreateKeyspace();
  }
 else {
    Map<String,String> strategy_options=new HashMap<String,String>();
    List<CfDef> cfDefs=new ArrayList<CfDef>();
    KsDef ksDef=new KsDef(databaseName,csmd.getPlacement_strategy(databaseName),cfDefs);
    setProperties(ksDef,strategy_options);
    ksDef.setStrategy_options(strategy_options);
    cassandra_client.system_add_keyspace(ksDef);
  }
}",0.8795282224094355
176011,"private static void resetMapperForThrift(boolean isCql3Enabled){
  if (isCql3Enabled) {
    validationClassMapper.put(Byte.class,BytesType.class);
    validationClassMapper.put(byte.class,BytesType.class);
    validationClassMapper.put(Short.class,IntegerType.class);
    validationClassMapper.put(short.class,IntegerType.class);
  }
}","private static void resetMapperForThrift(boolean isCql3Enabled){
  if (isCql3Enabled) {
    validationClassMapper.put(Byte.class,BytesType.class);
    validationClassMapper.put(byte.class,BytesType.class);
    validationClassMapper.put(Short.class,IntegerType.class);
    validationClassMapper.put(short.class,IntegerType.class);
    validationClassMapper.put(java.sql.Time.class,DateType.class);
    validationClassMapper.put(java.sql.Date.class,DateType.class);
    validationClassMapper.put(java.util.Date.class,DateType.class);
    validationClassMapper.put(java.sql.Timestamp.class,DateType.class);
  }
}",0.7097457627118644
176012,"private static void resetMapperForCQL3(boolean isCql3Enabled){
  if (isCql3Enabled) {
    validationClassMapper.put(Byte.class,Int32Type.class);
    validationClassMapper.put(byte.class,Int32Type.class);
    validationClassMapper.put(Short.class,Int32Type.class);
    validationClassMapper.put(short.class,Int32Type.class);
  }
}","private static void resetMapperForCQL3(boolean isCql3Enabled){
  if (isCql3Enabled) {
    validationClassMapper.put(Byte.class,Int32Type.class);
    validationClassMapper.put(byte.class,Int32Type.class);
    validationClassMapper.put(Short.class,Int32Type.class);
    validationClassMapper.put(short.class,Int32Type.class);
    validationClassMapper.put(java.sql.Time.class,TimestampType.class);
    validationClassMapper.put(java.sql.Date.class,TimestampType.class);
    validationClassMapper.put(java.util.Date.class,TimestampType.class);
    validationClassMapper.put(java.sql.Timestamp.class,TimestampType.class);
  }
}",0.6911764705882353
176013,"/** 
 * Persists a   {@link Node} to database
 */
@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders){
  Connection conn=getConnection();
  try {
    if (isCql3Enabled(entityMetadata)) {
      cqlClient.persist(entityMetadata,entity,conn.getClient(),rlHolders,getTtlValues().get(entityMetadata.getTableName()));
    }
 else {
      Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
      prepareMutation(entityMetadata,entity,id,rlHolders,mutationMap);
      conn.getClient().batch_mutate(mutationMap,getConsistencyLevel());
      mutationMap.clear();
      mutationMap=null;
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
 finally {
    releaseConnection(conn);
    if (isTtlPerRequest()) {
      getTtlValues().clear();
    }
  }
}","/** 
 * Persists a   {@link Node} to database
 */
@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders){
  Connection conn=getConnection();
  try {
    if (isCql3Enabled(entityMetadata)) {
      cqlClient.persist(entityMetadata,entity,conn.getClient(),rlHolders,getTtlValues().get(entityMetadata.getTableName()));
    }
 else {
      Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
      prepareMutation(entityMetadata,entity,id,rlHolders,mutationMap);
      conn.getClient().batch_mutate(mutationMap,getConsistencyLevel());
      mutationMap.clear();
      mutationMap=null;
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
 finally {
    releaseConnection(conn);
    if (isTtlPerRequest()) {
      getTtlValues().clear();
    }
  }
}",0.7921390778533636
176014,"@Override public void delete(Object entity,Object pKey){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,entity.getClass());
  Connection conn=null;
  try {
    conn=getConnection();
    MetamodelImpl metaModel=(MetamodelImpl)kunderaMetadata.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
    AbstractManagedType managedType=(AbstractManagedType)metaModel.entity(metadata.getEntityClazz());
    List<String> secondaryTables=((DefaultEntityAnnotationProcessor)managedType.getEntityAnnotation()).getSecondaryTablesName();
    secondaryTables.add(metadata.getTableName());
    for (    String tableName : secondaryTables) {
      if (isCql3Enabled(metadata)) {
        String deleteQuery=onDeleteQuery(metadata,tableName,metaModel,pKey);
        executeCQLQuery(deleteQuery,isCql3Enabled(metadata));
      }
 else {
        if (metadata.isCounterColumnType()) {
          deleteRecordFromCounterColumnFamily(pKey,tableName,metadata,getConsistencyLevel());
        }
 else {
          ColumnPath path=new ColumnPath(tableName);
          conn.getClient().remove(CassandraUtilities.toBytes(pKey,metadata.getIdAttribute().getJavaType()),path,System.currentTimeMillis(),getConsistencyLevel());
        }
      }
    }
    getIndexManager().remove(metadata,entity,pKey.toString());
    invertedIndexHandler.delete(entity,metadata,getConsistencyLevel(),kunderaMetadata);
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",metadata.getTableName(),pKey,e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",metadata.getTableName(),pKey,e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",metadata.getTableName(),pKey,e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",metadata.getTableName(),pKey,e);
    throw new KunderaException(e);
  }
 finally {
    releaseConnection(conn);
  }
}","@Override public void delete(Object entity,Object pKey){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,entity.getClass());
  Connection conn=null;
  try {
    conn=getConnection();
    MetamodelImpl metaModel=(MetamodelImpl)kunderaMetadata.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
    AbstractManagedType managedType=(AbstractManagedType)metaModel.entity(metadata.getEntityClazz());
    List<String> secondaryTables=((DefaultEntityAnnotationProcessor)managedType.getEntityAnnotation()).getSecondaryTablesName();
    secondaryTables.add(metadata.getTableName());
    for (    String tableName : secondaryTables) {
      if (isCql3Enabled(metadata)) {
        String deleteQuery=onDeleteQuery(metadata,tableName,metaModel,pKey);
        executeCQLQuery(deleteQuery,isCql3Enabled(metadata));
      }
 else {
        if (metadata.isCounterColumnType()) {
          deleteRecordFromCounterColumnFamily(pKey,tableName,metadata,getConsistencyLevel());
        }
 else {
          ColumnPath path=new ColumnPath(tableName);
          conn.getClient().remove(CassandraUtilities.toBytes(pKey,metadata.getIdAttribute().getJavaType()),path,System.currentTimeMillis(),getConsistencyLevel());
        }
      }
    }
    getIndexManager().remove(metadata,entity,pKey.toString());
    invertedIndexHandler.delete(entity,metadata,getConsistencyLevel(),kunderaMetadata);
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",metadata.getTableName(),pKey,e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",metadata.getTableName(),pKey,e);
    throw new KunderaException(e);
  }
 finally {
    releaseConnection(conn);
  }
}",0.9143879376437516
176015,"@Override public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  Connection conn=null;
  try {
    conn=getConnection();
    ColumnPath path=new ColumnPath(tableName);
    conn.getClient().remove(CassandraUtilities.toBytes(columnValue,columnValue.getClass()),path,System.currentTimeMillis(),getConsistencyLevel());
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",tableName,columnValue,e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",tableName,columnValue,e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",tableName,columnValue,e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",tableName,columnValue,e);
    throw new KunderaException(e);
  }
 finally {
    releaseConnection(conn);
  }
}","@Override public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  Connection conn=null;
  try {
    conn=getConnection();
    ColumnPath path=new ColumnPath(tableName);
    conn.getClient().remove(CassandraUtilities.toBytes(columnValue,columnValue.getClass()),path,System.currentTimeMillis(),getConsistencyLevel());
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",tableName,columnValue,e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",tableName,columnValue,e);
    throw new KunderaException(e);
  }
 finally {
    releaseConnection(conn);
  }
}",0.8173022196926579
176016,"/** 
 * Persists a Join table record set into database
 */
@Override public void persistJoinTable(JoinTableData joinTableData){
  String joinTableName=joinTableData.getJoinTableName();
  String invJoinColumnName=joinTableData.getInverseJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,joinTableData.getEntityClass());
  Connection conn=null;
  try {
    conn=getConnection();
    if (isCql3Enabled(entityMetadata)) {
      persistJoinTableByCql(joinTableData,conn.getClient());
    }
 else {
      for (      Object key : joinTableRecords.keySet()) {
        PropertyAccessor accessor=PropertyAccessorFactory.getPropertyAccessor((Field)entityMetadata.getIdAttribute().getJavaMember());
        byte[] rowKey=accessor.toBytes(key);
        Set<Object> values=joinTableRecords.get(key);
        List<Column> columns=new ArrayList<Column>();
        List<Mutation> insertionList=new ArrayList<Mutation>();
        Class columnType=null;
        for (        Object value : values) {
          Column column=new Column();
          column.setName(PropertyAccessorFactory.STRING.toBytes(invJoinColumnName + Constants.JOIN_COLUMN_NAME_SEPARATOR + value));
          column.setValue(PropertyAccessorHelper.getBytes(value));
          column.setTimestamp(System.currentTimeMillis());
          columnType=value.getClass();
          columns.add(column);
          Mutation mut=new Mutation();
          mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setColumn(column));
          insertionList.add(mut);
        }
        createIndexesOnColumns(entityMetadata,joinTableName,columns,columnType);
        Map<String,List<Mutation>> columnFamilyValues=new HashMap<String,List<Mutation>>();
        columnFamilyValues.put(joinTableName,insertionList);
        Map<ByteBuffer,Map<String,List<Mutation>>> mulationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
        mulationMap.put(ByteBuffer.wrap(rowKey),columnFamilyValues);
        conn.getClient().set_keyspace(entityMetadata.getSchema());
        conn.getClient().batch_mutate(mulationMap,getConsistencyLevel());
      }
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
 finally {
    releaseConnection(conn);
  }
}","/** 
 * Persists a Join table record set into database
 */
@Override public void persistJoinTable(JoinTableData joinTableData){
  String joinTableName=joinTableData.getJoinTableName();
  String invJoinColumnName=joinTableData.getInverseJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,joinTableData.getEntityClass());
  Connection conn=null;
  try {
    conn=getConnection();
    if (isCql3Enabled(entityMetadata)) {
      persistJoinTableByCql(joinTableData,conn.getClient());
    }
 else {
      for (      Object key : joinTableRecords.keySet()) {
        PropertyAccessor accessor=PropertyAccessorFactory.getPropertyAccessor((Field)entityMetadata.getIdAttribute().getJavaMember());
        byte[] rowKey=accessor.toBytes(key);
        Set<Object> values=joinTableRecords.get(key);
        List<Column> columns=new ArrayList<Column>();
        List<Mutation> insertionList=new ArrayList<Mutation>();
        Class columnType=null;
        for (        Object value : values) {
          Column column=new Column();
          column.setName(PropertyAccessorFactory.STRING.toBytes(invJoinColumnName + Constants.JOIN_COLUMN_NAME_SEPARATOR + value));
          column.setValue(PropertyAccessorHelper.getBytes(value));
          column.setTimestamp(System.currentTimeMillis());
          columnType=value.getClass();
          columns.add(column);
          Mutation mut=new Mutation();
          mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setColumn(column));
          insertionList.add(mut);
        }
        createIndexesOnColumns(entityMetadata,joinTableName,columns,columnType);
        Map<String,List<Mutation>> columnFamilyValues=new HashMap<String,List<Mutation>>();
        columnFamilyValues.put(joinTableName,insertionList);
        Map<ByteBuffer,Map<String,List<Mutation>>> mulationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
        mulationMap.put(ByteBuffer.wrap(rowKey),columnFamilyValues);
        conn.getClient().set_keyspace(entityMetadata.getSchema());
        conn.getClient().batch_mutate(mulationMap,getConsistencyLevel());
      }
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
 finally {
    releaseConnection(conn);
  }
}",0.9454127561769776
176017,"@Override public void write(Node node,EntityMetadata entityMetadata,String persistenceUnit,ConsistencyLevel consistencyLevel,CassandraDataHandler cdHandler){
  boolean invertedIndexingApplicable=CassandraIndexHelper.isInvertedIndexingApplicable(entityMetadata,useSecondryIndex);
  if (invertedIndexingApplicable) {
    String indexColumnFamily=CassandraIndexHelper.getInvertedIndexTableName(entityMetadata.getTableName());
    ThriftDataHandler thriftDataHandler=(ThriftDataHandler)cdHandler;
    List<ThriftRow> indexThriftyRows=thriftDataHandler.toIndexThriftRow(node.getData(),entityMetadata,indexColumnFamily);
    Connection conn=thriftClient.getConnection();
    try {
      for (      ThriftRow thriftRow : indexThriftyRows) {
        byte[] rowKey=PropertyAccessorHelper.toBytes(thriftRow.getId(),thriftRow.getId().getClass());
        List<Mutation> insertion_list=new ArrayList<Mutation>();
        List<Column> thriftColumns=thriftRow.getColumns();
        List<SuperColumn> thriftSuperColumns=thriftRow.getSuperColumns();
        if (thriftColumns != null && !thriftColumns.isEmpty()) {
          for (          Column column : thriftColumns) {
            Mutation mut=new Mutation();
            mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setColumn(column));
            insertion_list.add(mut);
          }
        }
        if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
          for (          SuperColumn superColumn : thriftSuperColumns) {
            Mutation mut=new Mutation();
            mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setSuper_column(superColumn));
            insertion_list.add(mut);
          }
        }
        Map<String,List<Mutation>> columnFamilyValues=new HashMap<String,List<Mutation>>();
        columnFamilyValues.put(indexColumnFamily,insertion_list);
        Map<ByteBuffer,Map<String,List<Mutation>>> mulationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
        mulationMap.put(ByteBuffer.wrap(rowKey),columnFamilyValues);
        conn.getClient().batch_mutate(mulationMap,consistencyLevel);
      }
    }
 catch (    IllegalStateException e) {
      log.error(""String_Node_Str"",e);
      throw new IndexingException(e);
    }
catch (    InvalidRequestException e) {
      log.error(""String_Node_Str"",e);
      throw new IndexingException(e);
    }
catch (    TException e) {
      log.error(""String_Node_Str"",e);
      throw new IndexingException(e);
    }
catch (    UnavailableException e) {
      log.error(""String_Node_Str"",e);
      throw new IndexingException(e);
    }
catch (    TimedOutException e) {
      log.error(""String_Node_Str"",e);
      throw new IndexingException(e);
    }
 finally {
      thriftClient.releaseConnection(conn);
    }
  }
}","@Override public void write(Node node,EntityMetadata entityMetadata,String persistenceUnit,ConsistencyLevel consistencyLevel,CassandraDataHandler cdHandler){
  boolean invertedIndexingApplicable=CassandraIndexHelper.isInvertedIndexingApplicable(entityMetadata,useSecondryIndex);
  if (invertedIndexingApplicable) {
    String indexColumnFamily=CassandraIndexHelper.getInvertedIndexTableName(entityMetadata.getTableName());
    ThriftDataHandler thriftDataHandler=(ThriftDataHandler)cdHandler;
    List<ThriftRow> indexThriftyRows=thriftDataHandler.toIndexThriftRow(node.getData(),entityMetadata,indexColumnFamily);
    Connection conn=thriftClient.getConnection();
    try {
      for (      ThriftRow thriftRow : indexThriftyRows) {
        byte[] rowKey=PropertyAccessorHelper.toBytes(thriftRow.getId(),thriftRow.getId().getClass());
        List<Mutation> insertion_list=new ArrayList<Mutation>();
        List<Column> thriftColumns=thriftRow.getColumns();
        List<SuperColumn> thriftSuperColumns=thriftRow.getSuperColumns();
        if (thriftColumns != null && !thriftColumns.isEmpty()) {
          for (          Column column : thriftColumns) {
            Mutation mut=new Mutation();
            mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setColumn(column));
            insertion_list.add(mut);
          }
        }
        if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
          for (          SuperColumn superColumn : thriftSuperColumns) {
            Mutation mut=new Mutation();
            mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setSuper_column(superColumn));
            insertion_list.add(mut);
          }
        }
        Map<String,List<Mutation>> columnFamilyValues=new HashMap<String,List<Mutation>>();
        columnFamilyValues.put(indexColumnFamily,insertion_list);
        Map<ByteBuffer,Map<String,List<Mutation>>> mulationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
        mulationMap.put(ByteBuffer.wrap(rowKey),columnFamilyValues);
        conn.getClient().batch_mutate(mulationMap,consistencyLevel);
      }
    }
 catch (    IllegalStateException e) {
      log.error(""String_Node_Str"",e);
      throw new IndexingException(e);
    }
catch (    InvalidRequestException e) {
      log.error(""String_Node_Str"",e);
      throw new IndexingException(e);
    }
catch (    TException e) {
      log.error(""String_Node_Str"",e);
      throw new IndexingException(e);
    }
 finally {
      thriftClient.releaseConnection(conn);
    }
  }
}",0.9394910461828464
176018,"/** 
 * Checks whether the defined class is a validone with an id field present either in class itself or its superclass
 * @param clazz
 * @param keys
 * @throws RuleValidationException
 */
private void onSuperClass(Class<?> clazz,List<Field> keys){
  Class<?> superClass=clazz.getSuperclass();
  if (superClass != null && (superClass.isAnnotationPresent(MappedSuperclass.class) || superClass.isAnnotationPresent(Entity.class))) {
    while (superClass != null && (superClass.isAnnotationPresent(MappedSuperclass.class) || superClass.isAnnotationPresent(Entity.class))) {
      keys=new ArrayList<Field>();
      for (      Field field : superClass.getDeclaredFields()) {
        onIdField(field,superClass);
        if (field.isAnnotationPresent(Id.class)) {
          keys.add(field);
          if (field.isAnnotationPresent(GeneratedValue.class)) {
            validateGeneratedValueAnnotation(superClass,field);
          }
        }
 else         if (field.isAnnotationPresent(EmbeddedId.class)) {
          keys.add(field);
        }
      }
      if (keys.size() > 0) {
        onEntityKey(keys,superClass);
        break;
      }
      superClass=superClass.getSuperclass();
    }
  }
  onEntityKey(keys,clazz);
}","/** 
 * Checks whether the defined class is a validone with an id field present either in class itself or its superclass
 * @param clazz
 * @param keys
 * @throws RuleValidationException
 */
private void onSuperClass(Class<?> clazz,List<Field> keys){
  Class<?> superClass=clazz.getSuperclass();
  if (superClass != null && (superClass.isAnnotationPresent(MappedSuperclass.class) || superClass.isAnnotationPresent(Entity.class))) {
    while (superClass != null && (superClass.isAnnotationPresent(MappedSuperclass.class) || superClass.isAnnotationPresent(Entity.class))) {
      for (      Field field : superClass.getDeclaredFields()) {
        onIdField(field,superClass);
        if (field.isAnnotationPresent(Id.class)) {
          keys.add(field);
          if (field.isAnnotationPresent(GeneratedValue.class)) {
            validateGeneratedValueAnnotation(superClass,field);
          }
        }
 else         if (field.isAnnotationPresent(EmbeddedId.class)) {
          keys.add(field);
        }
      }
      if (keys.size() > 0) {
        onEntityKey(keys,superClass);
        break;
      }
      superClass=superClass.getSuperclass();
    }
  }
  onEntityKey(keys,clazz);
}",0.9854711498547116
176019,"/** 
 * parse the relations of entites .
 * @param persistenceUnit
 * @param tableInfos
 * @param entityMetadata
 * @param tableInfo
 * @param relations
 */
private void parseRelations(String persistenceUnit,List<TableInfo> tableInfos,EntityMetadata entityMetadata,TableInfo tableInfo,List<Relation> relations){
  for (  Relation relation : relations) {
    Class entityClass=relation.getTargetEntity();
    EntityMetadata targetEntityMetadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,entityClass);
    if (targetEntityMetadata == null) {
      log.error(""String_Node_Str"" + entityClass + ""String_Node_Str"");
      throw new SchemaGenerationException(""String_Node_Str"" + entityClass + ""String_Node_Str"");
    }
    ForeignKey relationType=relation.getType();
    if (targetEntityMetadata != null && relationType.equals(ForeignKey.ONE_TO_MANY) && relation.getJoinColumnName(kunderaMetadata) != null) {
      if (targetEntityMetadata.equals(entityMetadata)) {
        tableInfo.addColumnInfo(getJoinColumn(tableInfo,relation.getJoinColumnName(kunderaMetadata),entityMetadata.getIdAttribute().getJavaType()));
      }
 else {
        String pu=targetEntityMetadata.getPersistenceUnit();
        Type targetEntityType=targetEntityMetadata.getType();
        Class idClass=targetEntityMetadata.getIdAttribute().getJavaType();
        String idName=((AbstractAttribute)targetEntityMetadata.getIdAttribute()).getJPAColumnName();
        TableInfo targetTableInfo=new TableInfo(targetEntityMetadata.getTableName(),targetEntityType.name(),idClass,idName);
        if (!pu.equals(persistenceUnit)) {
          List<TableInfo> targetTableInfos=getSchemaInfo(pu);
          addJoinColumnToInfo(relation.getJoinColumnName(kunderaMetadata),targetTableInfo,targetTableInfos,entityMetadata);
          puToSchemaMetadata.put(pu,targetTableInfos);
        }
 else {
          addJoinColumnToInfo(relation.getJoinColumnName(kunderaMetadata),targetTableInfo,tableInfos,entityMetadata);
        }
      }
    }
 else     if (relation.isUnary() && relation.getJoinColumnName(kunderaMetadata) != null) {
      if (!relation.isJoinedByPrimaryKey()) {
        tableInfo.addColumnInfo(getJoinColumn(tableInfo,relation.getJoinColumnName(kunderaMetadata),targetEntityMetadata.getIdAttribute().getJavaType()));
      }
    }
 else     if ((relationType.equals(ForeignKey.MANY_TO_MANY)) && (entityMetadata.isRelationViaJoinTable())) {
      JoinTableMetadata joinTableMetadata=relation.getJoinTableMetadata();
      String joinTableName=joinTableMetadata != null ? joinTableMetadata.getJoinTableName() : null;
      String joinColumnName=joinTableMetadata != null ? (String)joinTableMetadata.getJoinColumns().toArray()[0] : null;
      String inverseJoinColumnName=joinTableMetadata != null ? (String)joinTableMetadata.getInverseJoinColumns().toArray()[0] : null;
      if (joinTableName != null) {
        TableInfo joinTableInfo=new TableInfo(joinTableName,Type.COLUMN_FAMILY.name(),String.class,""String_Node_Str"");
        if (!tableInfos.isEmpty() && !tableInfos.contains(joinTableInfo) || tableInfos.isEmpty()) {
          joinTableInfo.addColumnInfo(getJoinColumn(joinTableInfo,joinColumnName,entityMetadata.getIdAttribute().getJavaType()));
          joinTableInfo.addColumnInfo(getJoinColumn(joinTableInfo,inverseJoinColumnName,entityMetadata.getIdAttribute().getJavaType()));
          tableInfos.add(joinTableInfo);
        }
      }
    }
  }
}","/** 
 * parse the relations of entites .
 * @param persistenceUnit
 * @param tableInfos
 * @param entityMetadata
 * @param tableInfo
 * @param relations
 */
private void parseRelations(String persistenceUnit,List<TableInfo> tableInfos,EntityMetadata entityMetadata,TableInfo tableInfo,List<Relation> relations){
  for (  Relation relation : relations) {
    Class entityClass=relation.getTargetEntity();
    EntityMetadata targetEntityMetadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,entityClass);
    if (targetEntityMetadata == null) {
      log.error(""String_Node_Str"" + entityClass + ""String_Node_Str"");
      throw new SchemaGenerationException(""String_Node_Str"" + entityClass + ""String_Node_Str"");
    }
    ForeignKey relationType=relation.getType();
    if (targetEntityMetadata != null && relationType.equals(ForeignKey.ONE_TO_MANY) && relation.getJoinColumnName(kunderaMetadata) != null) {
      if (targetEntityMetadata.equals(entityMetadata)) {
        tableInfo.addColumnInfo(getJoinColumn(tableInfo,relation.getJoinColumnName(kunderaMetadata),entityMetadata.getIdAttribute().getJavaType()));
      }
 else {
        String pu=targetEntityMetadata.getPersistenceUnit();
        Type targetEntityType=targetEntityMetadata.getType();
        Class idClass=targetEntityMetadata.getIdAttribute().getJavaType();
        String idName=((AbstractAttribute)targetEntityMetadata.getIdAttribute()).getJPAColumnName();
        TableInfo targetTableInfo=new TableInfo(targetEntityMetadata.getTableName(),targetEntityType.name(),idClass,idName);
        if (!pu.equals(persistenceUnit)) {
          List<TableInfo> targetTableInfos=getSchemaInfo(pu);
          addJoinColumnToInfo(relation.getJoinColumnName(kunderaMetadata),targetTableInfo,targetTableInfos,entityMetadata);
          puToSchemaMetadata.put(pu,targetTableInfos);
        }
 else {
          addJoinColumnToInfo(relation.getJoinColumnName(kunderaMetadata),targetTableInfo,tableInfos,entityMetadata);
        }
      }
    }
 else     if (relation.isUnary() && relation.getJoinColumnName(kunderaMetadata) != null) {
      if (!relation.isJoinedByPrimaryKey()) {
        tableInfo.addColumnInfo(getJoinColumn(tableInfo,relation.getJoinColumnName(kunderaMetadata),targetEntityMetadata.getIdAttribute().getJavaType()));
      }
    }
 else     if ((relationType.equals(ForeignKey.MANY_TO_MANY)) && (entityMetadata.isRelationViaJoinTable())) {
      JoinTableMetadata joinTableMetadata=relation.getJoinTableMetadata();
      String joinTableName=joinTableMetadata != null ? joinTableMetadata.getJoinTableName() : null;
      String joinColumnName=joinTableMetadata != null ? (String)joinTableMetadata.getJoinColumns().toArray()[0] : null;
      String inverseJoinColumnName=joinTableMetadata != null ? (String)joinTableMetadata.getInverseJoinColumns().toArray()[0] : null;
      if (joinTableName != null) {
        TableInfo joinTableInfo=new TableInfo(joinTableName,Type.COLUMN_FAMILY.name(),String.class,""String_Node_Str"");
        if (!tableInfos.isEmpty() && !tableInfos.contains(joinTableInfo) || tableInfos.isEmpty()) {
          joinTableInfo.addColumnInfo(getJoinColumn(joinTableInfo,joinColumnName,entityMetadata.getIdAttribute().getJavaType()));
          joinTableInfo.addColumnInfo(getJoinColumn(joinTableInfo,inverseJoinColumnName,targetEntityMetadata.getIdAttribute().getJavaType()));
          tableInfos.add(joinTableInfo);
        }
      }
    }
  }
}",0.9988388969521044
176020,"/** 
 * Find inverse join column values for join column.
 * @param schemaName
 * @param tableName
 * @param pKeyColumnName
 * @param columnName
 * @param pKeyColumnValue
 * @param columnJavaType
 * @return
 */
protected <E>List<E> getColumnsByIdUsingCql(String schemaName,String tableName,String pKeyColumnName,String columnName,Object pKeyColumnValue,Class columnJavaType){
  List results=new ArrayList();
  CQLTranslator translator=new CQLTranslator();
  String selectQuery=translator.SELECT_QUERY;
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableName,false).toString());
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMNS,translator.ensureCase(new StringBuilder(),columnName,false).toString());
  StringBuilder selectQueryBuilder=new StringBuilder(selectQuery);
  selectQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  translator.buildWhereClause(selectQueryBuilder,columnJavaType,pKeyColumnName,pKeyColumnValue,CQLTranslator.EQ_CLAUSE,false);
  selectQueryBuilder.delete(selectQueryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),selectQueryBuilder.length());
  CqlResult cqlResult=execute(selectQueryBuilder.toString(),null);
  Iterator<CqlRow> rowIter=cqlResult.getRows().iterator();
  while (rowIter.hasNext()) {
    CqlRow row=rowIter.next();
    if (!row.getColumns().isEmpty()) {
      Column column=row.getColumns().get(0);
      Object columnValue=PropertyAccessorHelper.getObject(columnJavaType,column.getValue());
      results.add(columnValue);
    }
  }
  return results;
}","/** 
 * Find inverse join column values for join column.
 * @param schemaName
 * @param tableName
 * @param pKeyColumnName
 * @param columnName
 * @param pKeyColumnValue
 * @param columnJavaType
 * @return
 */
protected <E>List<E> getColumnsByIdUsingCql(String schemaName,String tableName,String pKeyColumnName,String columnName,Object pKeyColumnValue,Class columnJavaType){
  List results=new ArrayList();
  CQLTranslator translator=new CQLTranslator();
  String selectQuery=translator.SELECT_QUERY;
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableName,false).toString());
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMNS,translator.ensureCase(new StringBuilder(),columnName,false).toString());
  StringBuilder selectQueryBuilder=new StringBuilder(selectQuery);
  selectQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  translator.buildWhereClause(selectQueryBuilder,columnJavaType,pKeyColumnName,pKeyColumnValue,CQLTranslator.EQ_CLAUSE,false);
  selectQueryBuilder.delete(selectQueryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),selectQueryBuilder.length());
  CqlResult cqlResult=execute(selectQueryBuilder.toString(),getRawClient(schemaName));
  Iterator<CqlRow> rowIter=cqlResult.getRows().iterator();
  while (rowIter.hasNext()) {
    CqlRow row=rowIter.next();
    if (!row.getColumns().isEmpty()) {
      Column column=row.getColumns().get(0);
      Object columnValue=PropertyAccessorHelper.getObject(columnJavaType,column.getValue());
      results.add(columnValue);
    }
  }
  return results;
}",0.9912115505335845
176021,"/** 
 * Find inverse join column values for join column.
 * @param schemaName
 * @param tableName
 * @param pKeyColumnName
 * @param columnName
 * @param pKeyColumnValue
 * @param columnJavaType
 * @return
 */
protected <E>List<E> getColumnsByIdUsingCql(String schemaName,String tableName,String pKeyColumnName,String columnName,Object pKeyColumnValue,Class columnJavaType){
  List results=new ArrayList();
  CQLTranslator translator=new CQLTranslator();
  String selectQuery=translator.SELECT_QUERY;
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableName,false).toString());
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMNS,translator.ensureCase(new StringBuilder(),columnName,false).toString());
  StringBuilder selectQueryBuilder=new StringBuilder(selectQuery);
  selectQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  translator.buildWhereClause(selectQueryBuilder,columnJavaType,pKeyColumnName,pKeyColumnValue,CQLTranslator.EQ_CLAUSE,false);
  selectQueryBuilder.delete(selectQueryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),selectQueryBuilder.length());
  CqlResult cqlResult=execute(selectQueryBuilder.toString(),getRawClient(schemaName));
  Iterator<CqlRow> rowIter=cqlResult.getRows().iterator();
  while (rowIter.hasNext()) {
    CqlRow row=rowIter.next();
    if (!row.getColumns().isEmpty()) {
      Column column=row.getColumns().get(0);
      Object columnValue=PropertyAccessorHelper.getObject(columnJavaType,column.getValue());
      results.add(columnValue);
    }
  }
  return results;
}","/** 
 * Find inverse join column values for join column.
 * @param schemaName
 * @param tableName
 * @param pKeyColumnName
 * @param columnName
 * @param pKeyColumnValue
 * @param columnJavaType
 * @return
 */
protected <E>List<E> getColumnsByIdUsingCql(String schemaName,String tableName,String pKeyColumnName,String columnName,Object pKeyColumnValue,Class columnJavaType){
  List results=new ArrayList();
  CQLTranslator translator=new CQLTranslator();
  String selectQuery=translator.SELECT_QUERY;
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableName,false).toString());
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMNS,translator.ensureCase(new StringBuilder(),columnName,false).toString());
  StringBuilder selectQueryBuilder=new StringBuilder(selectQuery);
  selectQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  translator.buildWhereClause(selectQueryBuilder,columnJavaType,pKeyColumnName,pKeyColumnValue,CQLTranslator.EQ_CLAUSE,false);
  selectQueryBuilder.delete(selectQueryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),selectQueryBuilder.length());
  CqlResult cqlResult=execute(selectQueryBuilder.toString(),getRawClient(schemaName));
  Iterator<CqlRow> rowIter=cqlResult.getRows().iterator();
  while (rowIter.hasNext()) {
    CqlRow row=rowIter.next();
    if (!row.getColumns().isEmpty()) {
      Column column=row.getColumns().get(0);
      Object columnValue=CassandraDataTranslator.decompose(columnJavaType,column.getValue(),true);
      results.add(columnValue);
    }
  }
  return results;
}",0.9782067247820672
176022,"/** 
 * adds join column name to the table Info of entity.
 * @param joinColumn
 * @param targetTableInfo
 * @param targetTableInfos
 */
private void addJoinColumnToInfo(String joinColumn,TableInfo targetTableInfo,List<TableInfo> targetTableInfos,EntityMetadata m){
  if (!targetTableInfos.isEmpty() && targetTableInfos.contains(targetTableInfo)) {
    int idx=targetTableInfos.indexOf(targetTableInfo);
    targetTableInfo=targetTableInfos.get(idx);
    ColumnInfo columnInfoOfJoinColumn=getJoinColumn(targetTableInfo,joinColumn,m.getIdAttribute().getBindableJavaType());
    if (!targetTableInfo.getColumnMetadatas().contains(columnInfoOfJoinColumn)) {
      targetTableInfo.addColumnInfo(columnInfoOfJoinColumn);
    }
  }
 else {
    ColumnInfo columnInfoOfJoinColumn=getJoinColumn(targetTableInfo,joinColumn,m.getIdAttribute().getBindableJavaType());
    if (!targetTableInfo.getColumnMetadatas().contains(columnInfoOfJoinColumn)) {
      targetTableInfo.addColumnInfo(columnInfoOfJoinColumn);
    }
    targetTableInfos.add(targetTableInfo);
  }
}","/** 
 * adds join column name to the table Info of entity.
 * @param joinColumn
 * @param targetTableInfo
 * @param targetTableInfos
 */
private void addJoinColumnToInfo(String joinColumn,TableInfo targetTableInfo,List<TableInfo> targetTableInfos,EntityMetadata m){
  if (!joinColumn.equals(targetTableInfo.getIdColumnName())) {
    if (!targetTableInfos.isEmpty() && targetTableInfos.contains(targetTableInfo)) {
      int idx=targetTableInfos.indexOf(targetTableInfo);
      targetTableInfo=targetTableInfos.get(idx);
      ColumnInfo columnInfoOfJoinColumn=getJoinColumn(targetTableInfo,joinColumn,m.getIdAttribute().getBindableJavaType());
      if (!targetTableInfo.getColumnMetadatas().contains(columnInfoOfJoinColumn)) {
        targetTableInfo.addColumnInfo(columnInfoOfJoinColumn);
      }
    }
 else {
      ColumnInfo columnInfoOfJoinColumn=getJoinColumn(targetTableInfo,joinColumn,m.getIdAttribute().getBindableJavaType());
      if (!targetTableInfo.getColumnMetadatas().contains(columnInfoOfJoinColumn)) {
        targetTableInfo.addColumnInfo(columnInfoOfJoinColumn);
      }
      targetTableInfos.add(targetTableInfo);
    }
  }
}",0.9568378009995456
176023,"/** 
 * Adds the column info.
 * @param columnInfo the column info
 */
public void addColumnInfo(ColumnInfo columnInfo){
  if (this.columnMetadatas == null) {
    this.columnMetadatas=new ArrayList<ColumnInfo>();
  }
  if (!columnMetadatas.contains(columnInfo)) {
    columnMetadatas.add(columnInfo);
  }
}","/** 
 * Adds the column info.
 * @param columnInfo the column info
 */
public void addColumnInfo(ColumnInfo columnInfo){
  if (this.columnMetadatas == null) {
    this.columnMetadatas=new ArrayList<ColumnInfo>();
  }
  if (!columnMetadatas.contains(columnInfo) && !this.getIdColumnName().equals(columnInfo.getColumnName())) {
    columnMetadatas.add(columnInfo);
  }
}",0.9080118694362018
176024,"private List iterateAndReturn(ResultSet rSet,Class entityClazz,EntityMetadata metadata){
  MetamodelImpl metaModel=(MetamodelImpl)kunderaMetadata.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
  EntityType entityType=metaModel.entity(metadata.getEntityClazz());
  Iterator<Row> rowIter=rSet.iterator();
  List results=new ArrayList();
  Map<String,Object> relationalValues=new HashMap<String,Object>();
  Map<String,Field> compositeColumns=new HashMap<String,Field>();
  Object compositeKeyInstance=null;
  if (metaModel.isEmbeddable(metadata.getIdAttribute().getBindableJavaType())) {
    compositeKeyInstance=getCompositeKeyInstance(metadata);
    EmbeddableType compositeKey=metaModel.embeddable(metadata.getIdAttribute().getBindableJavaType());
    Iterator<Attribute> attributes=compositeKey.getAttributes().iterator();
    while (attributes.hasNext()) {
      Attribute attribute=attributes.next();
      String columnName=((AbstractAttribute)attribute).getJPAColumnName();
      compositeColumns.put(columnName,(Field)attribute.getJavaMember());
    }
  }
  while (rowIter.hasNext()) {
    Object entity=null;
    Row row=rowIter.next();
    ColumnDefinitions columnDefs=row.getColumnDefinitions();
    Iterator<Definition> columnDefIter=columnDefs.iterator();
    entity=iteratorColumns(metadata,entityType,relationalValues,compositeColumns,compositeKeyInstance,entity,row,columnDefIter);
    if (compositeKeyInstance != null) {
      entity=CassandraUtilities.initialize(metadata,entity,compositeKeyInstance);
    }
    if (entity != null && entity.getClass().isAssignableFrom(metadata.getEntityClazz())) {
      Object rowKey=PropertyAccessorHelper.getId(entity,metadata);
      populateSecondaryTableData(rowKey,entity,metaModel,metadata);
      if (!relationalValues.isEmpty()) {
        results.add(new EnhanceEntity(entity,rowKey,relationalValues));
      }
 else {
        results.add(entity);
      }
    }
 else     if (entity != null) {
      results.add(entity);
    }
  }
  return results;
}","private List iterateAndReturn(ResultSet rSet,Class entityClazz,EntityMetadata metadata){
  MetamodelImpl metaModel=(MetamodelImpl)kunderaMetadata.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
  EntityType entityType=metaModel.entity(metadata.getEntityClazz());
  Iterator<Row> rowIter=rSet.iterator();
  List results=new ArrayList();
  Map<String,Object> relationalValues=new HashMap<String,Object>();
  Map<String,Field> compositeColumns=new HashMap<String,Field>();
  Object compositeKeyInstance=null;
  boolean isCompositeKey=false;
  if (metaModel.isEmbeddable(metadata.getIdAttribute().getBindableJavaType())) {
    isCompositeKey=true;
    EmbeddableType compositeKey=metaModel.embeddable(metadata.getIdAttribute().getBindableJavaType());
    Iterator<Attribute> attributes=compositeKey.getAttributes().iterator();
    while (attributes.hasNext()) {
      Attribute attribute=attributes.next();
      String columnName=((AbstractAttribute)attribute).getJPAColumnName();
      compositeColumns.put(columnName,(Field)attribute.getJavaMember());
    }
  }
  while (rowIter.hasNext()) {
    Object entity=null;
    Row row=rowIter.next();
    ColumnDefinitions columnDefs=row.getColumnDefinitions();
    Iterator<Definition> columnDefIter=columnDefs.iterator();
    if (isCompositeKey) {
      compositeKeyInstance=getCompositeKeyInstance(metadata);
    }
    entity=iteratorColumns(metadata,entityType,relationalValues,compositeColumns,compositeKeyInstance,entity,row,columnDefIter);
    if (compositeKeyInstance != null) {
      entity=CassandraUtilities.initialize(metadata,entity,compositeKeyInstance);
    }
    if (entity != null && entity.getClass().isAssignableFrom(metadata.getEntityClazz())) {
      Object rowKey=PropertyAccessorHelper.getId(entity,metadata);
      populateSecondaryTableData(rowKey,entity,metaModel,metadata);
      if (!relationalValues.isEmpty()) {
        results.add(new EnhanceEntity(entity,rowKey,relationalValues));
      }
 else {
        results.add(entity);
      }
    }
 else     if (entity != null) {
      results.add(entity);
    }
  }
  return results;
}",0.9569608078865112
176025,"/** 
 * CompositeUserDataType
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  emf.close();
  CassandraCli.client.execute_cql3_query(ByteBuffer.wrap(""String_Node_Str"".getBytes()),Compression.NONE,ConsistencyLevel.ONE);
  CassandraCli.client.execute_cql3_query(ByteBuffer.wrap(""String_Node_Str"".getBytes()),Compression.NONE,ConsistencyLevel.ONE);
  CassandraCli.dropKeySpace(""String_Node_Str"");
}","/** 
 * CompositeUserDataType
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  try {
    emf.close();
    CassandraCli.client.execute_cql3_query(ByteBuffer.wrap(""String_Node_Str"".getBytes()),Compression.NONE,ConsistencyLevel.ONE);
    CassandraCli.client.execute_cql3_query(ByteBuffer.wrap(""String_Node_Str"".getBytes()),Compression.NONE,ConsistencyLevel.ONE);
  }
  finally {
    CassandraCli.dropKeySpace(""String_Node_Str"");
  }
}",0.96
176026,"@Override protected Object createPoolOrConnection(){
  getConfigurationObject();
  Set<String> pus=kunderaMetadata.getApplicationMetadata().getMetamodelMap().keySet();
  Map<String,Collection<Class<?>>> classes=new HashMap<String,Collection<Class<?>>>();
  for (  String pu : pus) {
    classes.put(pu,((MetamodelImpl)kunderaMetadata.getApplicationMetadata().getMetamodel(pu)).getEntityNameToClassMap().values());
  }
  conf.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (externalProperties != null && !externalProperties.isEmpty()) {
    for (    String key : externalProperties.keySet()) {
      Object value=externalProperties.get(key);
      if (value instanceof String) {
        conf.setProperty(key,(String)value);
      }
    }
  }
  serviceRegistry=new ServiceRegistryBuilder().applySettings(conf.getProperties()).buildServiceRegistry();
  Iterator<Collection<Class<?>>> iter=classes.values().iterator();
  while (iter.hasNext()) {
    for (    Class<?> c : iter.next()) {
      conf.addAnnotatedClass(c);
    }
  }
  sf=conf.buildSessionFactory(serviceRegistry);
synchronized (sf) {
    for (    String pu : pus) {
      StatelessSession session=sf.openStatelessSession();
      if (!pu.equals(getPersistenceUnit())) {
        Collection<Class<?>> collection=classes.get(pu);
        for (        Class clazz : collection) {
          EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,clazz);
          try {
            session.createSQLQuery(""String_Node_Str"" + metadata.getTableName()).executeUpdate();
          }
 catch (          Exception e) {
          }
        }
      }
    }
  }
  return sf;
}","@Override protected Object createPoolOrConnection(){
  getConfigurationObject();
  Set<String> pus=kunderaMetadata.getApplicationMetadata().getMetamodelMap().keySet();
  Map<String,Collection<Class<?>>> classes=new HashMap<String,Collection<Class<?>>>();
  for (  String pu : pus) {
    classes.put(pu,((MetamodelImpl)kunderaMetadata.getApplicationMetadata().getMetamodel(pu)).getEntityNameToClassMap().values());
  }
  conf.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (externalProperties != null && !externalProperties.isEmpty()) {
    for (    String key : externalProperties.keySet()) {
      Object value=externalProperties.get(key);
      if (value instanceof String) {
        conf.setProperty(key,(String)value);
      }
    }
  }
  serviceRegistry=new ServiceRegistryBuilder().applySettings(conf.getProperties()).buildServiceRegistry();
  Iterator<Collection<Class<?>>> iter=classes.values().iterator();
  while (iter.hasNext()) {
    for (    Class<?> c : iter.next()) {
      conf.addAnnotatedClass(c);
    }
  }
  sf=conf.buildSessionFactory(serviceRegistry);
  String schemaProperty=conf.getProperty(""String_Node_Str"");
  if (schemaProperty != null && (schemaProperty.equals(""String_Node_Str"") || schemaProperty.equals(""String_Node_Str""))) {
synchronized (sf) {
      for (      String pu : pus) {
        StatelessSession session=sf.openStatelessSession();
        if (!pu.equals(getPersistenceUnit())) {
          Collection<Class<?>> collection=classes.get(pu);
          for (          Class clazz : collection) {
            EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,clazz);
            try {
              session.createSQLQuery(""String_Node_Str"" + metadata.getTableName()).executeUpdate();
            }
 catch (            Exception e) {
            }
          }
        }
      }
    }
  }
  return sf;
}",0.930048145001416
176027,"@Override public <E>List<E> getColumnsById(String schemaName,String tableName,String pKeyColumnName,String columnName,Object pKeyColumnValue,Class columnJavaType){
  return null;
}","@Override public <E>List<E> getColumnsById(String schemaName,String tableName,String pKeyColumnName,String columnName,Object pKeyColumnValue,Class columnJavaType){
  List results=new ArrayList();
  CQLTranslator translator=new CQLTranslator();
  String selectQuery=translator.SELECT_QUERY;
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableName,false).toString());
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMNS,translator.ensureCase(new StringBuilder(),columnName,false).toString());
  StringBuilder selectQueryBuilder=new StringBuilder(selectQuery);
  selectQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  translator.buildWhereClause(selectQueryBuilder,columnJavaType,pKeyColumnName,pKeyColumnValue,CQLTranslator.EQ_CLAUSE,false);
  selectQueryBuilder.delete(selectQueryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),selectQueryBuilder.length());
  ResultSet rSet=execute(selectQueryBuilder.toString(),null);
  Iterator<Row> rowIter=rSet.iterator();
  while (rowIter.hasNext()) {
    Row row=rowIter.next();
    DataType dataType=row.getColumnDefinitions().getType(columnName);
    Object columnValue=DSClientUtilities.assign(row,null,null,dataType.getName(),null,columnName,null);
    results.add(columnValue);
  }
  return results;
}",0.2204620462046204
176028,"@Override public Object[] findIdsByColumn(String schemaName,String tableName,String pKeyName,String columnName,Object columnValue,Class entityClazz){
  return null;
}","@Override public Object[] findIdsByColumn(String schemaName,String tableName,String pKeyName,String columnName,Object columnValue,Class entityClazz){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,entityClazz);
  return getColumnsById(schemaName,tableName,columnName,((AbstractAttribute)metadata.getIdAttribute()).getJPAColumnName(),columnValue,metadata.getIdAttribute().getBindableJavaType()).toArray();
}",0.5098684210526315
176029,"@Override public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  CQLTranslator translator=new CQLTranslator();
  String deleteQuery=CQLTranslator.DELETE_QUERY;
  deleteQuery=StringUtils.replace(deleteQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableName,false).toString());
  StringBuilder deleteQueryBuilder=new StringBuilder(deleteQuery);
  deleteQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  deleteQueryBuilder=translator.ensureCase(deleteQueryBuilder,columnName,false);
  deleteQueryBuilder.append(CQLTranslator.EQ_CLAUSE);
  translator.appendValue(deleteQueryBuilder,columnValue.getClass(),columnValue,false,false);
  this.execute(deleteQueryBuilder.toString(),null);
}","@Override public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  Session session=factory.getConnection();
  String rowKeyName=null;
  CQLTranslator translator=new CQLTranslator();
  try {
    List<ColumnMetadata> primaryKeys=session.getCluster().getMetadata().getKeyspace(schemaName).getTable(tableName).getPrimaryKey();
    rowKeyName=primaryKeys.get(0).getName();
  }
  finally {
    factory.releaseConnection(session);
  }
  List rowKeys=getColumnsById(schemaName,tableName,columnName,rowKeyName,columnValue,columnValue.getClass());
  for (  Object rowKey : rowKeys) {
    if (rowKey != null) {
      String deleteQuery=CQLTranslator.DELETE_QUERY;
      deleteQuery=StringUtils.replace(deleteQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableName,false).toString());
      StringBuilder deleteQueryBuilder=new StringBuilder(deleteQuery);
      deleteQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
      deleteQueryBuilder=translator.ensureCase(deleteQueryBuilder,rowKeyName,false);
      deleteQueryBuilder.append(CQLTranslator.EQ_CLAUSE);
      translator.appendValue(deleteQueryBuilder,rowKey.getClass(),rowKey,false,false);
      this.execute(deleteQueryBuilder.toString(),null);
    }
  }
}",0.7070904645476772
176030,"@Override public void persistJoinTable(JoinTableData joinTableData){
}","@Override public void persistJoinTable(JoinTableData joinTableData){
  String joinTableName=joinTableData.getJoinTableName();
  String invJoinColumnName=joinTableData.getInverseJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,joinTableData.getEntityClass());
  CQLTranslator translator=new CQLTranslator();
  String batch_Query=CQLTranslator.BATCH_QUERY;
  String insert_Query=translator.INSERT_QUERY;
  StringBuilder builder=new StringBuilder();
  builder.append(CQLTranslator.DEFAULT_KEY_NAME);
  builder.append(CQLTranslator.COMMA_STR);
  builder.append(translator.ensureCase(new StringBuilder(),joinTableData.getJoinColumnName(),false));
  builder.append(CQLTranslator.COMMA_STR);
  builder.append(translator.ensureCase(new StringBuilder(),joinTableData.getInverseJoinColumnName(),false));
  insert_Query=StringUtils.replace(insert_Query,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),joinTableName,false).toString());
  insert_Query=StringUtils.replace(insert_Query,CQLTranslator.COLUMNS,builder.toString());
  StringBuilder columnValueBuilder=new StringBuilder();
  StringBuilder statements=new StringBuilder();
  for (  Object key : joinTableRecords.keySet()) {
    PropertyAccessor accessor=PropertyAccessorFactory.getPropertyAccessor((Field)entityMetadata.getIdAttribute().getJavaMember());
    Set<Object> values=joinTableRecords.get(key);
    for (    Object value : values) {
      if (value != null) {
        String insertQuery=insert_Query;
        columnValueBuilder.append(CQLTranslator.QUOTE_STR);
        columnValueBuilder.append(PropertyAccessorHelper.getString(key) + ""String_Node_Str"" + PropertyAccessorHelper.getString(value));
        columnValueBuilder.append(CQLTranslator.QUOTE_STR);
        columnValueBuilder.append(CQLTranslator.COMMA_STR);
        translator.appendValue(columnValueBuilder,key.getClass(),key,true,false);
        columnValueBuilder.append(CQLTranslator.COMMA_STR);
        translator.appendValue(columnValueBuilder,value.getClass(),value,true,false);
        insertQuery=StringUtils.replace(insertQuery,CQLTranslator.COLUMN_VALUES,columnValueBuilder.toString());
        statements.append(insertQuery);
        statements.append(""String_Node_Str"");
      }
    }
  }
  if (!StringUtils.isBlank(statements.toString())) {
    batch_Query=StringUtils.replace(batch_Query,CQLTranslator.STATEMENT,statements.toString());
    StringBuilder batchBuilder=new StringBuilder();
    batchBuilder.append(batch_Query);
    batchBuilder.append(CQLTranslator.APPLY_BATCH);
    execute(batchBuilder.toString(),null);
  }
}",0.050251256281407
176031,"/** 
 * assign value to provided entity instance else return value of mapped java type.
 * @param row DS row
 * @param entity JPA entity
 * @param metadata entity's metadata
 * @param dataType data type
 * @param entityType entity type from metamodel
 * @param columnName jpa column name
 * @return modified entity instance with data type value. If entity is nullthen returns value of mapped java class.
 */
static Object assign(Row row,Object entity,EntityMetadata metadata,Name dataType,EntityType entityType,String columnName,Field member){
  String fieldName=null;
  if (metadata.getRelationNames() == null || !metadata.getRelationNames().contains(columnName)) {
    if (!columnName.equalsIgnoreCase(""String_Node_Str"")) {
      fieldName=metadata.getFieldName(columnName);
      if (fieldName != null) {
        entity=CassandraUtilities.initialize(metadata,entity,null);
        member=(Field)entityType.getAttribute(fieldName).getJavaMember();
      }
    }
 else {
      entity=CassandraUtilities.initialize(metadata,entity,null);
      fieldName=metadata.getIdAttribute().getName();
      member=(Field)metadata.getIdAttribute().getJavaMember();
    }
  }
  Object retVal=null;
switch (dataType) {
case BLOB:
case CUSTOM:
    retVal=row.getBytes(columnName);
  if (retVal != null) {
    PropertyAccessorHelper.set(entity,member,((ByteBuffer)retVal).array());
  }
break;
case BOOLEAN:
retVal=row.getBool(columnName);
setFieldValue(entity,member,retVal);
break;
case BIGINT:
case COUNTER:
retVal=row.getLong(columnName);
setFieldValue(entity,member,retVal);
break;
case DECIMAL:
retVal=row.getDecimal(columnName);
setFieldValue(entity,member,retVal);
break;
case DOUBLE:
retVal=row.getDouble(columnName);
setFieldValue(entity,member,retVal);
break;
case FLOAT:
retVal=row.getFloat(columnName);
setFieldValue(entity,member,retVal);
break;
case INET:
retVal=row.getInet(columnName);
setFieldValue(entity,member,retVal);
break;
case INT:
retVal=row.getInt(columnName);
retVal=setIntValue(member,retVal);
setFieldValue(entity,member,retVal);
break;
case ASCII:
case TEXT:
case VARCHAR:
retVal=row.getString(columnName);
retVal=setTextValue(entity,member,retVal);
setFieldValue(entity,member,retVal);
break;
case TIMESTAMP:
retVal=row.getDate(columnName);
if (retVal != null && member != null) retVal=CassandraDataTranslator.decompose(member.getType(),ByteBufferUtil.bytes(((Date)retVal).getTime()).array(),true);
setFieldValue(entity,member,retVal);
break;
case VARINT:
retVal=row.getVarint(columnName);
setFieldValue(entity,member,retVal);
break;
case UUID:
case TIMEUUID:
retVal=row.getUUID(columnName);
setFieldValue(entity,member,retVal);
break;
case LIST:
retVal=row.getList(columnName,PropertyAccessorHelper.getGenericClass(member));
PropertyAccessorHelper.set(entity,member,retVal);
break;
case SET:
retVal=row.getSet(columnName,PropertyAccessorHelper.getGenericClass(member));
PropertyAccessorHelper.set(entity,member,retVal);
break;
case MAP:
List<Class<?>> mapGenericClasses=PropertyAccessorHelper.getGenericClasses(member);
Class keyClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(0),true);
Class valueClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(1),true);
retVal=row.getMap(columnName,keyClass,valueClass);
PropertyAccessorHelper.set(entity,member,retVal);
break;
}
return entity != null ? entity : retVal;
}","/** 
 * assign value to provided entity instance else return value of mapped java type.
 * @param row DS row
 * @param entity JPA entity
 * @param metadata entity's metadata
 * @param dataType data type
 * @param entityType entity type from metamodel
 * @param columnName jpa column name
 * @return modified entity instance with data type value. If entity is nullthen returns value of mapped java class.
 */
static Object assign(Row row,Object entity,EntityMetadata metadata,Name dataType,EntityType entityType,String columnName,Field member){
  String fieldName=null;
  if (metadata != null && (metadata.getRelationNames() == null || !metadata.getRelationNames().contains(columnName))) {
    if (!columnName.equalsIgnoreCase(""String_Node_Str"")) {
      fieldName=metadata.getFieldName(columnName);
      if (fieldName != null && entityType != null) {
        entity=CassandraUtilities.initialize(metadata,entity,null);
        member=(Field)entityType.getAttribute(fieldName).getJavaMember();
      }
    }
 else {
      entity=CassandraUtilities.initialize(metadata,entity,null);
      fieldName=metadata.getIdAttribute().getName();
      member=(Field)metadata.getIdAttribute().getJavaMember();
    }
  }
  Object retVal=null;
switch (dataType) {
case BLOB:
case CUSTOM:
    retVal=row.getBytes(columnName);
  if (retVal != null) {
    PropertyAccessorHelper.set(entity,member,((ByteBuffer)retVal).array());
  }
break;
case BOOLEAN:
retVal=row.getBool(columnName);
setFieldValue(entity,member,retVal);
break;
case BIGINT:
case COUNTER:
retVal=row.getLong(columnName);
setFieldValue(entity,member,retVal);
break;
case DECIMAL:
retVal=row.getDecimal(columnName);
setFieldValue(entity,member,retVal);
break;
case DOUBLE:
retVal=row.getDouble(columnName);
setFieldValue(entity,member,retVal);
break;
case FLOAT:
retVal=row.getFloat(columnName);
setFieldValue(entity,member,retVal);
break;
case INET:
retVal=row.getInet(columnName);
setFieldValue(entity,member,retVal);
break;
case INT:
retVal=row.getInt(columnName);
retVal=setIntValue(member,retVal);
setFieldValue(entity,member,retVal);
break;
case ASCII:
case TEXT:
case VARCHAR:
retVal=row.getString(columnName);
retVal=setTextValue(entity,member,retVal);
setFieldValue(entity,member,retVal);
break;
case TIMESTAMP:
retVal=row.getDate(columnName);
if (retVal != null && member != null) retVal=CassandraDataTranslator.decompose(member.getType(),ByteBufferUtil.bytes(((Date)retVal).getTime()).array(),true);
setFieldValue(entity,member,retVal);
break;
case VARINT:
retVal=row.getVarint(columnName);
setFieldValue(entity,member,retVal);
break;
case UUID:
case TIMEUUID:
retVal=row.getUUID(columnName);
setFieldValue(entity,member,retVal);
break;
case LIST:
retVal=row.getList(columnName,PropertyAccessorHelper.getGenericClass(member));
PropertyAccessorHelper.set(entity,member,retVal);
break;
case SET:
retVal=row.getSet(columnName,PropertyAccessorHelper.getGenericClass(member));
PropertyAccessorHelper.set(entity,member,retVal);
break;
case MAP:
List<Class<?>> mapGenericClasses=PropertyAccessorHelper.getGenericClasses(member);
Class keyClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(0),true);
Class valueClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(1),true);
retVal=row.getMap(columnName,keyClass,valueClass);
PropertyAccessorHelper.set(entity,member,retVal);
break;
}
return entity != null ? entity : retVal;
}",0.9935728892784108
176032,"/** 
 * check for Tables method check the existence of schema and table.
 * @param tableInfos list of TableInfos and ksDef object of KsDef
 * @param ksDef the ks def
 * @throws TException
 * @throws InvalidRequestException
 */
private void onValidateTables(List<TableInfo> tableInfos,KsDef ksDef) throws Exception {
  cassandra_client.set_keyspace(ksDef.getName());
  for (  TableInfo tableInfo : tableInfos) {
    onValidateTable(ksDef,tableInfo);
  }
}","/** 
 * check for Tables method check the existence of schema and table.
 * @param tableInfos list of TableInfos and ksDef object of KsDef
 * @param ksDef the ks def
 * @throws TException
 * @throws InvalidRequestException
 */
private void onValidateTables(List<TableInfo> tableInfos,KsDef ksDef) throws Exception {
  cassandra_client.set_keyspace(ksDef.getName());
  for (  TableInfo tableInfo : tableInfos) {
    if (isCql3Enabled(tableInfo) && !tableInfo.getType().equals(Type.SUPER_COLUMN_FAMILY.name())) {
      CqlMetadata metadata=new CqlMetadata();
      Map<ByteBuffer,String> name_types=new HashMap<ByteBuffer,String>();
      Map<ByteBuffer,String> value_types=new HashMap<ByteBuffer,String>();
      List<ColumnInfo> columnInfos=tableInfo.getColumnMetadatas();
      name_types.put(ByteBufferUtil.bytes(tableInfo.getIdColumnName()),""String_Node_Str"");
      value_types.put(ByteBufferUtil.bytes(tableInfo.getIdColumnName()),CassandraValidationClassMapper.getValidationClassInstance(tableInfo.getTableIdType(),true).getName());
      for (      ColumnInfo info : columnInfos) {
        name_types.put(ByteBufferUtil.bytes(info.getColumnName()),""String_Node_Str"");
        value_types.put(ByteBufferUtil.bytes(info.getColumnName()),CassandraValidationClassMapper.getValidationClassInstance(info.getType(),true).getName());
      }
      metadata.setDefault_name_type(""String_Node_Str"");
      metadata.setDefault_value_type(""String_Node_Str"");
      metadata.setName_types(name_types);
      metadata.setValue_types(value_types);
      CQLTranslator translator=new CQLTranslator();
      final String describeTable=""String_Node_Str"";
      StringBuilder builder=new StringBuilder(describeTable);
      translator.ensureCase(builder,tableInfo.getTableName(),false);
      cassandra_client.set_cql_version(CassandraConstants.CQL_VERSION_3_0);
      CqlResult cqlResult=cassandra_client.execute_cql3_query(ByteBufferUtil.bytes(builder.toString()),Compression.NONE,ConsistencyLevel.ONE);
      CqlMetadata originalMetadata=cqlResult.getSchema();
      int compareResult=originalMetadata.compareTo(metadata);
      if (compareResult > 0) {
        onLog(tableInfo,metadata,value_types,originalMetadata);
        throw new SchemaGenerationException(""String_Node_Str"");
      }
    }
 else {
      onValidateTable(ksDef,tableInfo);
    }
  }
}",0.3221428571428571
176033,"private void onValidateTable(KsDef ksDef,TableInfo tableInfo) throws Exception {
  boolean tablefound=false;
  for (  CfDef cfDef : ksDef.getCf_defs()) {
    if (cfDef.getName().equals(tableInfo.getTableName()) && (cfDef.getColumn_type().equals(ColumnFamilyType.getInstanceOf(tableInfo.getType()).name()))) {
      if (cfDef.getColumn_type().equals(ColumnFamilyType.Standard.name())) {
        for (        ColumnInfo columnInfo : tableInfo.getColumnMetadatas()) {
          onValidateColumn(tableInfo,cfDef,columnInfo);
        }
        tablefound=true;
        break;
      }
 else       if (cfDef.getColumn_type().equals(ColumnFamilyType.Super.name())) {
        tablefound=true;
      }
    }
  }
  if (!tablefound) {
    throw new SchemaGenerationException(""String_Node_Str"" + tableInfo.getTableName() + ""String_Node_Str""+ databaseName+ ""String_Node_Str"",""String_Node_Str"",databaseName,tableInfo.getTableName());
  }
}","/** 
 * @param ksDef
 * @param tableInfo
 * @throws Exception
 */
private void onValidateTable(KsDef ksDef,TableInfo tableInfo) throws Exception {
  boolean tablefound=false;
  for (  CfDef cfDef : ksDef.getCf_defs()) {
    if (cfDef.getName().equals(tableInfo.getTableName()) && (cfDef.getColumn_type().equals(ColumnFamilyType.getInstanceOf(tableInfo.getType()).name()))) {
      if (cfDef.getColumn_type().equals(ColumnFamilyType.Standard.name())) {
        for (        ColumnInfo columnInfo : tableInfo.getColumnMetadatas()) {
          onValidateColumn(tableInfo,cfDef,columnInfo);
        }
        tablefound=true;
        break;
      }
 else       if (cfDef.getColumn_type().equals(ColumnFamilyType.Super.name())) {
        tablefound=true;
      }
    }
  }
  if (!tablefound) {
    throw new SchemaGenerationException(""String_Node_Str"" + tableInfo.getTableName() + ""String_Node_Str""+ databaseName+ ""String_Node_Str"",""String_Node_Str"",databaseName,tableInfo.getTableName());
  }
}",0.9655172413793104
176034,"/** 
 * Test schema operation.
 * @throws IOException Signals that an I/O exception has occurred.
 * @throws TException the t exception
 * @throws InvalidRequestException the invalid request exception
 * @throws UnavailableException the unavailable exception
 * @throws TimedOutException the timed out exception
 * @throws SchemaDisagreementException the schema disagreement exception
 */
@Test public void schemaOperation() throws IOException, TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  getEntityManagerFactory();
  Assert.assertTrue(CassandraCli.keyspaceExist(_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
}","/** 
 * Test schema operation.
 * @throws IOException Signals that an I/O exception has occurred.
 * @throws TException the t exception
 * @throws InvalidRequestException the invalid request exception
 * @throws UnavailableException the unavailable exception
 * @throws TimedOutException the timed out exception
 * @throws SchemaDisagreementException the schema disagreement exception
 */
@Test public void schemaOperation() throws IOException, TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  EntityManagerFactory emf=getEntityManagerFactory(null,_PU);
  Assert.assertTrue(CassandraCli.keyspaceExist(_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",_KEYSPACE));
  emf.close();
}",0.9869342043863742
176035,"/** 
 * Gets the entity manager factory.
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(){
  EntityManagerFactory emf=Persistence.createEntityManagerFactory(_PU);
  return (EntityManagerFactoryImpl)emf;
}","/** 
 * Gets the entity manager factory.
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(Map propertyMap,final String persistenceUnit){
  EntityManagerFactory emf=Persistence.createEntityManagerFactory(persistenceUnit,propertyMap);
  return (EntityManagerFactoryImpl)emf;
}",0.8758620689655172
176036,"/** 
 * Returns collection of column values for given join table. TODO: Method is very much tightly coupled with Join table implementation and does not serve purpose as it is meant for.
 */
@Override public <E>List<E> getColumnsById(String schemaName,String tableName,String pKeyColumnName,String columnName,Object pKeyColumnValue,Class columnJavaType){
  Object connection=null;
  List results=new ArrayList();
  try {
    connection=getConnection();
    String valueAsStr=PropertyAccessorHelper.getString(pKeyColumnValue);
    Double score=getDouble(valueAsStr);
    Set<String> resultKeys=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
      ((Transaction)connection).exec();
      resultKeys=(Set<String>)response.get();
    }
 else {
      resultKeys=((Jedis)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
    }
    results=fetchColumn(columnName,connection,results,resultKeys);
    return results;
  }
  finally {
    onCleanup(connection);
  }
}","/** 
 * Returns collection of column values for given join table. TODO: Method is very much tightly coupled with Join table implementation and does not serve purpose as it is meant for.
 */
@Override public <E>List<E> getColumnsById(String schemaName,String tableName,String pKeyColumnName,String columnName,Object pKeyColumnValue,Class columnJavaType){
  Object connection=null;
  List results=new ArrayList();
  try {
    connection=getConnection();
    String valueAsStr=PropertyAccessorHelper.getString(pKeyColumnValue);
    Double score=getDouble(valueAsStr);
    Set<String> resultKeys=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
      ((RedisTransaction)resource).onExecute(((Transaction)connection));
      resultKeys=(Set<String>)response.get();
    }
 else {
      resultKeys=((Jedis)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
    }
    results=fetchColumn(columnName,connection,results,resultKeys);
    return results;
  }
  finally {
    onCleanup(connection);
  }
}",0.9744509188704616
176037,"private Object[] findIdsByColumn(String tableName,String columnName,Object columnValue){
  Object connection=null;
  try {
    connection=getConnection();
    String valueAsStr=PropertyAccessorHelper.getString(columnValue);
    Set<String> results=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,columnName),getDouble(valueAsStr),getDouble(valueAsStr));
      ((Transaction)connection).exec();
      results=(Set<String>)response.get();
    }
 else {
      results=((Jedis)connection).zrangeByScore(getHashKey(tableName,columnName),getDouble(valueAsStr),getDouble(valueAsStr));
    }
    if (results != null) {
      return results.toArray(new Object[0]);
    }
  }
  finally {
    onCleanup(connection);
  }
  return null;
}","private Object[] findIdsByColumn(String tableName,String columnName,Object columnValue){
  Object connection=null;
  try {
    connection=getConnection();
    String valueAsStr=PropertyAccessorHelper.getString(columnValue);
    Set<String> results=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,columnName),getDouble(valueAsStr),getDouble(valueAsStr));
      ((RedisTransaction)resource).onExecute(((Transaction)connection));
      results=(Set<String>)response.get();
    }
 else {
      results=((Jedis)connection).zrangeByScore(getHashKey(tableName,columnName),getDouble(valueAsStr),getDouble(valueAsStr));
    }
    if (results != null) {
      return results.toArray(new Object[0]);
    }
  }
  finally {
    onCleanup(connection);
  }
  return null;
}",0.9658886894075404
176038,"@Override public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  Object connection=null;
  Pipeline pipeLine=null;
  try {
    connection=getConnection();
    if (resource == null) {
      pipeLine=((Jedis)connection).pipelined();
    }
    String valueAsStr=PropertyAccessorHelper.getString(columnValue);
    Double score=getDouble(valueAsStr);
    Set<String> results=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
      ((Transaction)connection).exec();
      results=(Set<String>)response.get();
    }
 else {
      results=((Jedis)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
    }
    if (results != null) {
      for (      String rowKey : results) {
        Map<byte[],byte[]> columns=null;
        columns=getColumns(connection,rowKey,columns);
        for (        byte[] column : columns.keySet()) {
          String colName=PropertyAccessorFactory.STRING.fromBytes(String.class,columns.get(column));
          if (resource != null && resource.isActive()) {
            ((Transaction)connection).hdel(getEncodedBytes(rowKey),column);
            ((Transaction)connection).zrem(getHashKey(tableName,colName),rowKey);
          }
 else {
            ((Jedis)connection).hdel(getEncodedBytes(rowKey),column);
            ((Jedis)connection).zrem(getHashKey(tableName,colName),rowKey);
          }
        }
      }
    }
  }
  finally {
    if (pipeLine != null) {
      pipeLine.sync();
    }
    onCleanup(connection);
  }
}","@Override public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  Object connection=null;
  Pipeline pipeLine=null;
  try {
    connection=getConnection();
    if (resource == null) {
      pipeLine=((Jedis)connection).pipelined();
    }
    String valueAsStr=PropertyAccessorHelper.getString(columnValue);
    Double score=getDouble(valueAsStr);
    Set<String> results=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
      ((RedisTransaction)resource).onExecute(((Transaction)connection));
      results=(Set<String>)response.get();
    }
 else {
      results=((Jedis)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
    }
    if (results != null) {
      for (      String rowKey : results) {
        Map<byte[],byte[]> columns=null;
        columns=getColumns(connection,rowKey,columns);
        for (        byte[] column : columns.keySet()) {
          String colName=PropertyAccessorFactory.STRING.fromBytes(String.class,columns.get(column));
          if (resource != null && resource.isActive()) {
            ((Transaction)connection).hdel(getEncodedBytes(rowKey),column);
            ((Transaction)connection).zrem(getHashKey(tableName,colName),rowKey);
          }
 else {
            ((Jedis)connection).hdel(getEncodedBytes(rowKey),column);
            ((Jedis)connection).zrem(getHashKey(tableName,colName),rowKey);
          }
        }
      }
    }
  }
  finally {
    if (pipeLine != null) {
      pipeLine.sync();
    }
    onCleanup(connection);
  }
}",0.9814871016691956
176039,"/** 
 * @param columnName
 * @param connection
 * @param results
 * @param resultKeys
 */
private List fetchColumn(String columnName,Object connection,List results,Set<String> resultKeys){
  for (  String hashKey : resultKeys) {
    List columnValues=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).hmget(hashKey,columnName);
      ((Transaction)connection).exec();
      columnValues=(List)response.get();
    }
 else {
      columnValues=((Jedis)connection).hmget(hashKey,columnName);
    }
    if (columnValues != null && !columnValues.isEmpty()) {
      results.addAll(columnValues);
    }
  }
  return results;
}","/** 
 * @param columnName
 * @param connection
 * @param results
 * @param resultKeys
 */
private List fetchColumn(String columnName,Object connection,List results,Set<String> resultKeys){
  for (  String hashKey : resultKeys) {
    List columnValues=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).hmget(hashKey,columnName);
      ((RedisTransaction)resource).onExecute(((Transaction)connection));
      columnValues=(List)response.get();
    }
 else {
      columnValues=((Jedis)connection).hmget(hashKey,columnName);
    }
    if (columnValues != null && !columnValues.isEmpty()) {
      results.addAll(columnValues);
    }
  }
  return results;
}",0.9588447653429604
176040,"List onExecuteQuery(RedisQueryInterpreter queryParameter,Class entityClazz){
  Object connection=null;
  List<Object> results=new ArrayList<Object>();
  try {
    connection=getConnection();
    Set<String> rowKeys=new HashSet<String>();
    EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,entityClazz);
    if (queryParameter.getClause() != null && !queryParameter.isByRange()) {
      String destStore=entityClazz.getSimpleName() + System.currentTimeMillis();
      Map<String,Object> fieldSets=queryParameter.getFields();
      Set<String> keySets=new HashSet<String>(fieldSets.size());
      for (      String column : fieldSets.keySet()) {
        String valueAsStr=PropertyAccessorHelper.getString(fieldSets.get(column));
        String key=getHashKey(entityMetadata.getTableName(),getHashKey(column,valueAsStr));
        keySets.add(key);
      }
      if (queryParameter.getClause().equals(Clause.INTERSECT)) {
        if (resource != null && resource.isActive()) {
          ((Transaction)connection).zinterstore(destStore,keySets.toArray(new String[]{}));
        }
 else {
          ((Jedis)connection).zinterstore(destStore,keySets.toArray(new String[]{}));
        }
      }
 else {
        if (resource != null && resource.isActive()) {
          ((Transaction)connection).zunionstore(destStore,keySets.toArray(new String[]{}));
        }
 else {
          ((Jedis)connection).zunionstore(destStore,keySets.toArray(new String[]{}));
        }
      }
      if (resource != null && resource.isActive()) {
        Response response=((Transaction)connection).zrange(destStore,0,-1);
        ((Transaction)connection).exec();
        rowKeys=(Set<String>)response.get();
      }
 else {
        rowKeys=((Jedis)connection).zrange(destStore,0,-1);
        ((Jedis)connection).del(destStore);
      }
    }
 else     if (queryParameter.isByRange()) {
      Map<String,Double> minimum=queryParameter.getMin();
      Map<String,Double> maximum=queryParameter.getMax();
      String column=minimum.keySet().iterator().next();
      if (resource != null && resource.isActive()) {
        Response response=((Transaction)connection).zrangeByScore(getHashKey(entityMetadata.getTableName(),column),minimum.get(column),maximum.get(column));
        ((Transaction)connection).exec();
        rowKeys=(Set<String>)response.get();
      }
 else {
        rowKeys=((Jedis)connection).zrangeByScore(getHashKey(entityMetadata.getTableName(),column),minimum.get(column),maximum.get(column));
      }
    }
 else     if (queryParameter.isById()) {
      Map<String,Object> fieldSets=queryParameter.getFields();
      results=findAllColumns(entityClazz,(byte[][])(queryParameter.getColumns() != null ? queryParameter.getColumns().toArray() : null),fieldSets.values().toArray());
      return results;
    }
 else     if (queryParameter.getFields() != null) {
      Set<String> columns=queryParameter.getFields().keySet();
      for (      String column : columns) {
        Double value=getDouble(PropertyAccessorHelper.getString(queryParameter.getFields().get(column)));
        if (resource != null && resource.isActive()) {
          Response response=((Transaction)connection).zrangeByScore(getHashKey(entityMetadata.getTableName(),column),value,value);
          ((Transaction)connection).exec();
          rowKeys=(Set<String>)response.get();
        }
 else {
          rowKeys=((Jedis)connection).zrangeByScore(getHashKey(entityMetadata.getTableName(),column),value,value);
        }
      }
    }
 else {
      if (resource != null && resource.isActive()) {
        Response response=((Transaction)connection).zrange(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()),0,-1);
        ((Transaction)connection).exec();
        rowKeys=new HashSet<String>((Collection<? extends String>)response.get());
      }
 else {
        rowKeys=new HashSet<String>(((Jedis)connection).zrange(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()),0,-1));
      }
    }
    for (    String k : rowKeys) {
      Object record=fetch(entityClazz,k,connection,(queryParameter.getColumns() != null ? queryParameter.getColumns().toArray(new byte[][]{}) : null));
      if (record != null) {
        results.add(record);
      }
    }
  }
 catch (  InstantiationException e) {
    logger.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  IllegalAccessException e) {
    logger.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
 finally {
    onCleanup(connection);
  }
  return results;
}","List onExecuteQuery(RedisQueryInterpreter queryParameter,Class entityClazz){
  Object connection=null;
  List<Object> results=new ArrayList<Object>();
  try {
    connection=getConnection();
    Set<String> rowKeys=new HashSet<String>();
    EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,entityClazz);
    if (queryParameter.getClause() != null && !queryParameter.isByRange()) {
      String destStore=entityClazz.getSimpleName() + System.currentTimeMillis();
      Map<String,Object> fieldSets=queryParameter.getFields();
      Set<String> keySets=new HashSet<String>(fieldSets.size());
      for (      String column : fieldSets.keySet()) {
        String valueAsStr=PropertyAccessorHelper.getString(fieldSets.get(column));
        String key=getHashKey(entityMetadata.getTableName(),getHashKey(column,valueAsStr));
        keySets.add(key);
      }
      if (queryParameter.getClause().equals(Clause.INTERSECT)) {
        if (resource != null && resource.isActive()) {
          ((Transaction)connection).zinterstore(destStore,keySets.toArray(new String[]{}));
        }
 else {
          ((Jedis)connection).zinterstore(destStore,keySets.toArray(new String[]{}));
        }
      }
 else {
        if (resource != null && resource.isActive()) {
          ((Transaction)connection).zunionstore(destStore,keySets.toArray(new String[]{}));
        }
 else {
          ((Jedis)connection).zunionstore(destStore,keySets.toArray(new String[]{}));
        }
      }
      if (resource != null && resource.isActive()) {
        Response response=((Transaction)connection).zrange(destStore,0,-1);
        ((RedisTransaction)resource).onExecute(((Transaction)connection));
        rowKeys=(Set<String>)response.get();
      }
 else {
        rowKeys=((Jedis)connection).zrange(destStore,0,-1);
        ((Jedis)connection).del(destStore);
      }
    }
 else     if (queryParameter.isByRange()) {
      Map<String,Double> minimum=queryParameter.getMin();
      Map<String,Double> maximum=queryParameter.getMax();
      String column=minimum.keySet().iterator().next();
      if (resource != null && resource.isActive()) {
        Response response=((Transaction)connection).zrangeByScore(getHashKey(entityMetadata.getTableName(),column),minimum.get(column),maximum.get(column));
        ((RedisTransaction)resource).onExecute(((Transaction)connection));
        rowKeys=(Set<String>)response.get();
      }
 else {
        rowKeys=((Jedis)connection).zrangeByScore(getHashKey(entityMetadata.getTableName(),column),minimum.get(column),maximum.get(column));
      }
    }
 else     if (queryParameter.isById()) {
      Map<String,Object> fieldSets=queryParameter.getFields();
      results=findAllColumns(entityClazz,(byte[][])(queryParameter.getColumns() != null ? queryParameter.getColumns().toArray() : null),fieldSets.values().toArray());
      return results;
    }
 else     if (queryParameter.getFields() != null) {
      Set<String> columns=queryParameter.getFields().keySet();
      for (      String column : columns) {
        Double value=getDouble(PropertyAccessorHelper.getString(queryParameter.getFields().get(column)));
        if (resource != null && resource.isActive()) {
          Response response=((Transaction)connection).zrangeByScore(getHashKey(entityMetadata.getTableName(),column),value,value);
          ((RedisTransaction)resource).onExecute(((Transaction)connection));
          rowKeys=(Set<String>)response.get();
        }
 else {
          rowKeys=((Jedis)connection).zrangeByScore(getHashKey(entityMetadata.getTableName(),column),value,value);
        }
      }
    }
 else {
      if (resource != null && resource.isActive()) {
        Response response=((Transaction)connection).zrange(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()),0,-1);
        ((RedisTransaction)resource).onExecute(((Transaction)connection));
        rowKeys=new HashSet<String>((Collection<? extends String>)response.get());
      }
 else {
        rowKeys=new HashSet<String>(((Jedis)connection).zrange(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()),0,-1));
      }
    }
    for (    String k : rowKeys) {
      connection=reInitialize(connection,rowKeys);
      Object record=fetch(entityClazz,k,connection,(queryParameter.getColumns() != null ? queryParameter.getColumns().toArray(new byte[][]{}) : null));
      if (record != null) {
        results.add(record);
      }
    }
  }
 catch (  InstantiationException e) {
    logger.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  IllegalAccessException e) {
    logger.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
 finally {
    onCleanup(connection);
  }
  return results;
}",0.9584326733699596
176041,"/** 
 * Retrieves entity instance of given class,row key and specific fields.
 * @param clazz entity class
 * @param key row key
 * @param connection connection instance.
 * @param fields fields.
 * @return entity instance.
 * @throws InstantiationException throws in case of runtime exception
 * @throws IllegalAccessException throws in case of runtime exception
 */
private Object fetch(Class clazz,Object key,Object connection,byte[][] fields) throws InstantiationException, IllegalAccessException {
  Object result=null;
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,clazz);
  MetamodelImpl metaModel=(MetamodelImpl)kunderaMetadata.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
  String rowKey=null;
  if (metaModel.isEmbeddable(entityMetadata.getIdAttribute().getBindableJavaType())) {
    rowKey=KunderaCoreUtils.prepareCompositeKey(entityMetadata,metaModel,key);
  }
 else {
    ObjectAccessor accessor=new ObjectAccessor();
    rowKey=accessor.toString(key);
  }
  String hashKey=getHashKey(entityMetadata.getTableName(),rowKey);
  try {
    Map<byte[],byte[]> columns=new HashMap<byte[],byte[]>();
    if (fields != null) {
      List<byte[]> fieldValues=null;
      if (resource != null && resource.isActive()) {
        Response response=((Transaction)connection).hmget(getEncodedBytes(hashKey),fields);
        ((Transaction)connection).exec();
        fieldValues=(List<byte[]>)response.get();
      }
 else {
        fieldValues=((Jedis)connection).hmget(getEncodedBytes(hashKey),fields);
      }
      if (fieldValues != null && !fieldValues.isEmpty()) {
        for (int i=0; i < fields.length; i++) {
          if (fieldValues.get(i) != null) {
            columns.put(fields[i],fieldValues.get(i));
          }
        }
      }
    }
 else {
      columns=getColumns(connection,hashKey,columns);
    }
    result=unwrap(entityMetadata,columns,key);
  }
 catch (  JedisConnectionException jedex) {
    return null;
  }
  return result;
}","/** 
 * Retrieves entity instance of given class,row key and specific fields.
 * @param clazz entity class
 * @param key row key
 * @param connection connection instance.
 * @param fields fields.
 * @return entity instance.
 * @throws InstantiationException throws in case of runtime exception
 * @throws IllegalAccessException throws in case of runtime exception
 */
private Object fetch(Class clazz,Object key,Object connection,byte[][] fields) throws InstantiationException, IllegalAccessException {
  Object result=null;
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,clazz);
  MetamodelImpl metaModel=(MetamodelImpl)kunderaMetadata.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
  String rowKey=null;
  if (metaModel.isEmbeddable(entityMetadata.getIdAttribute().getBindableJavaType())) {
    rowKey=KunderaCoreUtils.prepareCompositeKey(entityMetadata,metaModel,key);
  }
 else {
    ObjectAccessor accessor=new ObjectAccessor();
    rowKey=accessor.toString(key);
  }
  String hashKey=getHashKey(entityMetadata.getTableName(),rowKey);
  try {
    Map<byte[],byte[]> columns=new HashMap<byte[],byte[]>();
    if (fields != null) {
      List<byte[]> fieldValues=null;
      if (resource != null && resource.isActive()) {
        Response response=((Transaction)connection).hmget(getEncodedBytes(hashKey),fields);
        ((RedisTransaction)resource).onExecute(((Transaction)connection));
        fieldValues=(List<byte[]>)response.get();
        connection=getConnection();
      }
 else {
        fieldValues=((Jedis)connection).hmget(getEncodedBytes(hashKey),fields);
      }
      if (fieldValues != null && !fieldValues.isEmpty()) {
        for (int i=0; i < fields.length; i++) {
          if (fieldValues.get(i) != null) {
            columns.put(fields[i],fieldValues.get(i));
          }
        }
      }
    }
 else {
      columns=getColumns(connection,hashKey,columns);
    }
    result=unwrap(entityMetadata,columns,key);
  }
 catch (  JedisConnectionException jedex) {
    return null;
  }
  return result;
}",0.9764848484848484
176042,"Transaction bindResource(Jedis resource){
  Transaction tx=null;
  if (resources.isEmpty()) {
    tx=resource.multi();
    resources.add(tx);
  }
 else {
    tx=resources.get(0);
  }
  return tx;
}","Transaction bindResource(Jedis resource){
  Transaction tx=null;
  tx=resource.multi();
  resources.add(tx);
  return tx;
}",0.76875
176043,"@Override protected void onPersist(EntityMetadata metadata,Object entity,Object id,List<RelationHolder> relationHolders){
  boolean proxyRemoved=removeKunderaProxies(metadata,entity,relationHolders);
  Transaction tx=null;
  s=getStatelessSession();
  tx=s.beginTransaction();
  try {
    if (!isUpdate) {
      id=s.insert(entity);
      updateForeignKeys(metadata,id,relationHolders);
      tx.commit();
    }
 else {
      s.update(entity);
      if (proxyRemoved) {
        updateForeignKeys(metadata,id,relationHolders);
      }
      tx.commit();
    }
  }
 catch (  org.hibernate.exception.ConstraintViolationException e) {
    s.update(entity);
    log.info(e.getMessage());
    tx.commit();
  }
catch (  HibernateException e) {
    log.error(""String_Node_Str"",metadata.getEntityClazz(),e);
    throw new PersistenceException(e);
  }
}","@Override protected void onPersist(EntityMetadata metadata,Object entity,Object id,List<RelationHolder> relationHolders){
  boolean proxyRemoved=removeKunderaProxies(metadata,entity,relationHolders);
  Transaction tx=null;
  s=getStatelessSession();
  tx=s.beginTransaction();
  try {
    if (!isUpdate) {
      id=s.insert(entity);
      updateForeignKeys(metadata,id,relationHolders);
      tx.commit();
    }
 else {
      s.update(entity);
      if (proxyRemoved) {
        updateForeignKeys(metadata,id,relationHolders);
      }
      tx.commit();
    }
  }
 catch (  org.hibernate.exception.ConstraintViolationException e) {
    s.update(entity);
    log.info(e.getMessage());
    tx.commit();
  }
catch (  HibernateException e) {
    log.error(""String_Node_Str"",metadata.getEntityClazz(),e);
    e.printStackTrace();
    throw new PersistenceException(e);
  }
}",0.9853886616014028
176044,"/** 
 * Find.
 * @param query the native fquery
 * @param relations the relations
 * @param m the m
 * @return the list
 */
public int onExecuteUpdate(String query,Map<Parameter,Object> parameterMap){
  s=getStatelessSession();
  Query q=s.createQuery(query);
  setParameters(parameterMap,q);
  Transaction tx=s.beginTransaction();
  int i=q.executeUpdate();
  tx.commit();
  return i;
}","/** 
 * Find.
 * @param query the native fquery
 * @param relations the relations
 * @param m the m
 * @return the list
 */
public int onExecuteUpdate(String query,Map<Parameter,Object> parameterMap){
  s=getStatelessSession();
  Query q=s.createQuery(query);
  setParameters(parameterMap,q);
  System.out.println(query);
  Transaction tx=s.beginTransaction();
  int i=q.executeUpdate();
  tx.commit();
  return i;
}",0.9638854296388544
176045,"public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  StringBuffer query=new StringBuffer();
  query.append(""String_Node_Str"").append(getFromClause(schemaName,tableName)).append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(""String_Node_Str"").append(columnValue).append(""String_Node_Str"");
  onExecuteUpdate(query.toString(),null);
}","public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  StringBuffer query=new StringBuffer();
  query.append(""String_Node_Str"").append(getFromClause(schemaName,tableName)).append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(""String_Node_Str"").append(columnValue).append(""String_Node_Str"");
  StatelessSession s=getStatelessSession();
  Transaction tx=s.beginTransaction();
  onNativeUpdate(query.toString(),null);
  tx.commit();
}",0.8781558726673985
176046,"/** 
 * Updates foreign keys into master table
 * @param metadata
 * @param id
 * @param relationHolders
 */
private void updateForeignKeys(EntityMetadata metadata,Object id,List<RelationHolder> relationHolders){
  for (  RelationHolder rh : relationHolders) {
    String linkName=rh.getRelationName();
    Object linkValue=rh.getRelationValue();
    if (linkName != null && linkValue != null) {
      String clause=getFromClause(metadata.getSchema(),metadata.getTableName());
      String updateSql=""String_Node_Str"" + clause + ""String_Node_Str""+ linkName+ ""String_Node_Str""+ linkValue+ ""String_Node_Str""+ ((AbstractAttribute)metadata.getIdAttribute()).getJPAColumnName()+ ""String_Node_Str""+ id+ ""String_Node_Str"";
      onExecuteUpdate(updateSql,null);
    }
  }
}","/** 
 * Updates foreign keys into master table
 * @param metadata
 * @param id
 * @param relationHolders
 */
private void updateForeignKeys(EntityMetadata metadata,Object id,List<RelationHolder> relationHolders){
  for (  RelationHolder rh : relationHolders) {
    String linkName=rh.getRelationName();
    Object linkValue=rh.getRelationValue();
    if (linkName != null && linkValue != null) {
      String clause=getFromClause(metadata.getSchema(),metadata.getTableName());
      String updateSql=""String_Node_Str"" + clause + ""String_Node_Str""+ linkName+ ""String_Node_Str""+ linkValue+ ""String_Node_Str""+ ((AbstractAttribute)metadata.getIdAttribute()).getJPAColumnName()+ ""String_Node_Str""+ id+ ""String_Node_Str"";
      onNativeUpdate(updateSql,null);
    }
  }
}",0.992815153494448
176047,"/** 
 * Instantiates a new entity manager impl.
 * @param factory the factory
 */
EntityManagerImpl(EntityManagerFactory factory,PersistenceUnitTransactionType transactionType,PersistenceContextType persistenceContextType){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + getPersistenceUnit());
  }
  this.persistenceCache=new PersistenceCache((Cache)factory.getCache());
  this.persistenceCache.setPersistenceContextType(persistenceContextType);
  this.factory=factory;
  this.persistenceContextType=persistenceContextType;
  this.transactionType=transactionType;
  this.persistenceCache=new PersistenceCache();
  this.persistenceCache.setPersistenceContextType(persistenceContextType);
  this.persistenceDelegator=new PersistenceDelegator(((EntityManagerFactoryImpl)this.factory).getKunderaMetadataInstance(),this.persistenceCache);
  for (  String pu : ((EntityManagerFactoryImpl)this.factory).getPersistenceUnits()) {
    this.persistenceDelegator.loadClient(pu,discoverClient(pu));
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + getPersistenceUnit());
  }
}","/** 
 * Instantiates a new entity manager impl.
 * @param factory the factory
 */
EntityManagerImpl(EntityManagerFactory factory,PersistenceUnitTransactionType transactionType,PersistenceContextType persistenceContextType){
  this.factory=factory;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + getPersistenceUnit());
  }
  this.persistenceCache=new PersistenceCache((Cache)factory.getCache());
  this.persistenceCache.setPersistenceContextType(persistenceContextType);
  this.persistenceContextType=persistenceContextType;
  this.transactionType=transactionType;
  this.persistenceCache=new PersistenceCache();
  this.persistenceCache.setPersistenceContextType(persistenceContextType);
  this.persistenceDelegator=new PersistenceDelegator(((EntityManagerFactoryImpl)this.factory).getKunderaMetadataInstance(),this.persistenceCache);
  for (  String pu : ((EntityManagerFactoryImpl)this.factory).getPersistenceUnits()) {
    this.persistenceDelegator.loadClient(pu,discoverClient(pu));
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + getPersistenceUnit());
  }
}",0.9783978397839784
176048,"@Override public Enum fromString(Class targetClass,String string){
  if (targetClass != null && string != null) {
    try {
      return Enum.valueOf(targetClass,string.trim().toUpperCase());
    }
 catch (    IllegalArgumentException ex) {
      log.error(""String_Node_Str"",ex);
      throw new PropertyAccessException(ex);
    }
  }
  return null;
}","@Override public Enum fromString(Class targetClass,String string){
  if (targetClass != null && string != null) {
    try {
      return Enum.valueOf(targetClass,string.trim());
    }
 catch (    IllegalArgumentException ex) {
      log.error(""String_Node_Str"",ex);
      throw new PropertyAccessException(ex);
    }
  }
  return null;
}",0.9796511627906976
176049,"/** 
 * On insert cassandra.
 * @throws Exception the exception
 */
@Test public void onInsertCassandra() throws Exception {
  Object p1=prepareData(""String_Node_Str"",10);
  Object p2=prepareData(""String_Node_Str"",20);
  Object p3=prepareData(""String_Node_Str"",15);
  Query findQuery=entityManager.createQuery(""String_Node_Str"",PersonCassandra.class);
  List<PersonCassandra> allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=entityManager.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=entityManager.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  entityManager.persist(p1);
  entityManager.persist(p2);
  entityManager.persist(p3);
  PersonCassandra personWithKey=new PersonCassandra();
  personWithKey.setPersonId(""String_Node_Str"");
  entityManager.persist(personWithKey);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  entityManager.clear();
  PersonCassandra p=findById(PersonCassandra.class,""String_Node_Str"",entityManager);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  Assert.assertEquals(Day.THURSDAY,p.getDay());
  entityManager.clear();
  Query q;
  List<PersonCassandra> persons=queryOverRowkey();
  assertFindByName(entityManager,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAge(entityManager,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeGTAndLT(entityManager,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeBetween(entityManager,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByRange(entityManager,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindWithoutWhereClause(entityManager,""String_Node_Str"",PersonCassandra.class);
  for (  PersonCassandra person : persons) {
    person.setPersonName(""String_Node_Str"");
    entityManager.merge(person);
  }
  entityManager.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",entityManager);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String updateQuery=""String_Node_Str"";
  q=entityManager.createQuery(updateQuery);
  q.executeUpdate();
  entityManager.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",entityManager);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  testCountResult();
  String deleteQuery=""String_Node_Str"";
  q=entityManager.createQuery(deleteQuery);
  Assert.assertEquals(3,q.executeUpdate());
}","/** 
 * On insert cassandra.
 * @throws Exception the exception
 */
@Test public void onInsertCassandra() throws Exception {
  Object p1=prepareData(""String_Node_Str"",10);
  Object p2=prepareData(""String_Node_Str"",20);
  Object p3=prepareData(""String_Node_Str"",15);
  Query findQuery=entityManager.createQuery(""String_Node_Str"",PersonCassandra.class);
  List<PersonCassandra> allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=entityManager.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=entityManager.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  entityManager.persist(p1);
  entityManager.persist(p2);
  entityManager.persist(p3);
  PersonCassandra personWithKey=new PersonCassandra();
  personWithKey.setPersonId(""String_Node_Str"");
  entityManager.persist(personWithKey);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  entityManager.clear();
  PersonCassandra p=findById(PersonCassandra.class,""String_Node_Str"",entityManager);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  Assert.assertEquals(Day.thursday,p.getDay());
  entityManager.clear();
  Query q;
  List<PersonCassandra> persons=queryOverRowkey();
  assertFindByName(entityManager,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAge(entityManager,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeGTAndLT(entityManager,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeBetween(entityManager,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByRange(entityManager,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindWithoutWhereClause(entityManager,""String_Node_Str"",PersonCassandra.class);
  for (  PersonCassandra person : persons) {
    person.setPersonName(""String_Node_Str"");
    entityManager.merge(person);
  }
  entityManager.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",entityManager);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String updateQuery=""String_Node_Str"";
  q=entityManager.createQuery(updateQuery);
  q.executeUpdate();
  entityManager.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",entityManager);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  testCountResult();
  String deleteQuery=""String_Node_Str"";
  q=entityManager.createQuery(deleteQuery);
  Assert.assertEquals(3,q.executeUpdate());
}",0.9973640856672158
176050,"private void processGeneratedValueAnnotation(Class<?> clazz,String persistenceUnit,EntityMetadata m,Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap){
  GeneratedValueProcessor processer=new GeneratedValueProcessor();
  String pu=m.getPersistenceUnit();
  String clientFactoryName=KunderaMetadataManager.getPersistenceUnitMetadata(kunderaMetadata,m.getPersistenceUnit()).getClient();
  if (pu != null && pu.equals(persistenceUnit) || clientFactoryName.equalsIgnoreCase(""String_Node_Str"")) {
    Field f=(Field)m.getIdAttribute().getJavaMember();
    if (f.isAnnotationPresent(GeneratedValue.class)) {
      processer.process(clazz,f,m,entityNameToKeyDiscriptorMap);
    }
  }
}","private void processGeneratedValueAnnotation(Class<?> clazz,String persistenceUnit,EntityMetadata m,Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap){
  GeneratedValueProcessor processer=new GeneratedValueProcessor();
  String pu=m.getPersistenceUnit();
  String clientFactoryName=getClientFactoryName(persistenceUnit);
  if (pu != null && pu.equals(persistenceUnit) || clientFactoryName.equalsIgnoreCase(""String_Node_Str"")) {
    Field f=(Field)m.getIdAttribute().getJavaMember();
    if (f.isAnnotationPresent(GeneratedValue.class)) {
      processer.process(clazz,f,m,entityNameToKeyDiscriptorMap);
    }
  }
}",0.916923076923077
176051,"/** 
 * Load entity metadata.
 * @param persistenceUnit the persistence unit
 */
private void loadEntityMetadata(String persistenceUnit){
  if (persistenceUnit == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + persistenceUnit);
  }
  Map<String,PersistenceUnitMetadata> persistentUnitMetadataMap=kunderaMetadata.getApplicationMetadata().getPersistenceUnitMetadataMap();
  List<String> classesToScan;
  URL[] resources=null;
  String client=null;
  List<URL> managedURLs=null;
  if (persistentUnitMetadataMap == null || persistentUnitMetadataMap.isEmpty()) {
    log.error(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
    throw new MetamodelLoaderException(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
  }
 else {
    PersistenceUnitMetadata puMetadata=persistentUnitMetadataMap.get(persistenceUnit);
    classesToScan=puMetadata.getManagedClassNames();
    managedURLs=puMetadata.getManagedURLs();
    Map<String,Object> externalProperties=KunderaCoreUtils.getExternalProperties(persistenceUnit,externalPropertyMap,persistenceUnits);
    client=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_CLIENT_FACTORY) : null;
    if (client == null) {
      client=puMetadata.getClient();
    }
  }
  Reader reader;
  ApplicationMetadata appMetadata=kunderaMetadata.getApplicationMetadata();
  if (classesToScan == null || classesToScan.isEmpty()) {
    log.info(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
    if (appMetadata.getMetamodelMap().get(persistenceUnit) != null) {
      log.info(""String_Node_Str"");
      return;
    }
    reader=new ClasspathReader();
  }
 else {
    reader=new ClasspathReader(classesToScan);
  }
  InputStream[] iStreams=null;
  PersistenceUnitMetadata puMetadata=persistentUnitMetadataMap.get(persistenceUnit);
  if (this.getClass().getClassLoader() instanceof URLClassLoader && !puMetadata.getExcludeUnlistedClasses()) {
    URL[] managedClasses=reader.findResources();
    if (managedClasses != null) {
      List<URL> managedResources=Arrays.asList(managedClasses);
      managedURLs.addAll(managedResources);
    }
  }
 else {
    iStreams=reader.findResourcesAsStream();
  }
  if (managedURLs != null) {
    resources=managedURLs.toArray(new URL[]{});
  }
  reader.addValidAnnotations(Entity.class.getName());
  Metamodel metamodel=appMetadata.getMetamodel(persistenceUnit);
  if (metamodel == null) {
    metamodel=new MetamodelImpl();
  }
  Map<String,EntityMetadata> entityMetadataMap=((MetamodelImpl)metamodel).getEntityMetadataMap();
  Map<String,Class<?>> entityNameToClassMap=((MetamodelImpl)metamodel).getEntityNameToClassMap();
  Map<String,List<String>> puToClazzMap=new HashMap<String,List<String>>();
  Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap=new HashMap<String,IdDiscriptor>();
  List<Class<?>> classes=new ArrayList<Class<?>>();
  if (resources != null && resources.length > 0) {
    for (    URL resource : resources) {
      try {
        ResourceIterator itr=reader.getResourceIterator(resource,reader.getFilter());
        InputStream is=null;
        while ((is=itr.next()) != null) {
          classes.addAll(scanClassAndPutMetadata(is,reader,entityMetadataMap,entityNameToClassMap,persistenceUnit,client,puToClazzMap,entityNameToKeyDiscriptorMap));
        }
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"",e);
        throw new MetamodelLoaderException(""String_Node_Str"");
      }
    }
  }
 else   if (iStreams != null) {
    try {
      for (      InputStream is : iStreams) {
        try {
          classes.addAll(scanClassAndPutMetadata(is,reader,entityMetadataMap,entityNameToClassMap,persistenceUnit,client,puToClazzMap,entityNameToKeyDiscriptorMap));
        }
  finally {
          if (is != null) {
            is.close();
          }
        }
      }
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"",e);
      throw new MetamodelLoaderException(""String_Node_Str"",e);
    }
  }
  ((MetamodelImpl)metamodel).setEntityMetadataMap(entityMetadataMap);
  appMetadata.getMetamodelMap().put(persistenceUnit,metamodel);
  appMetadata.setClazzToPuMap(puToClazzMap);
  ((MetamodelImpl)metamodel).addKeyValues(entityNameToKeyDiscriptorMap);
  ((MetamodelImpl)metamodel).assignEmbeddables(kunderaMetadata.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getEmbeddables());
  ((MetamodelImpl)metamodel).assignManagedTypes(kunderaMetadata.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getManagedTypes());
  ((MetamodelImpl)metamodel).assignMappedSuperClass(kunderaMetadata.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
}","/** 
 * Load entity metadata.
 * @param persistenceUnit the persistence unit
 */
private void loadEntityMetadata(String persistenceUnit){
  if (persistenceUnit == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + persistenceUnit);
  }
  Map<String,PersistenceUnitMetadata> persistentUnitMetadataMap=kunderaMetadata.getApplicationMetadata().getPersistenceUnitMetadataMap();
  List<String> classesToScan;
  URL[] resources=null;
  String client=null;
  List<URL> managedURLs=null;
  if (persistentUnitMetadataMap == null || persistentUnitMetadataMap.isEmpty()) {
    log.error(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
    throw new MetamodelLoaderException(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
  }
 else {
    PersistenceUnitMetadata puMetadata=persistentUnitMetadataMap.get(persistenceUnit);
    classesToScan=puMetadata.getManagedClassNames();
    managedURLs=puMetadata.getManagedURLs();
    client=getClientFactoryName(persistenceUnit);
  }
  Reader reader;
  ApplicationMetadata appMetadata=kunderaMetadata.getApplicationMetadata();
  if (classesToScan == null || classesToScan.isEmpty()) {
    log.info(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
    if (appMetadata.getMetamodelMap().get(persistenceUnit) != null) {
      log.info(""String_Node_Str"");
      return;
    }
    reader=new ClasspathReader();
  }
 else {
    reader=new ClasspathReader(classesToScan);
  }
  InputStream[] iStreams=null;
  PersistenceUnitMetadata puMetadata=persistentUnitMetadataMap.get(persistenceUnit);
  if (this.getClass().getClassLoader() instanceof URLClassLoader && !puMetadata.getExcludeUnlistedClasses()) {
    URL[] managedClasses=reader.findResources();
    if (managedClasses != null) {
      List<URL> managedResources=Arrays.asList(managedClasses);
      managedURLs.addAll(managedResources);
    }
  }
 else {
    iStreams=reader.findResourcesAsStream();
  }
  if (managedURLs != null) {
    resources=managedURLs.toArray(new URL[]{});
  }
  reader.addValidAnnotations(Entity.class.getName());
  Metamodel metamodel=appMetadata.getMetamodel(persistenceUnit);
  if (metamodel == null) {
    metamodel=new MetamodelImpl();
  }
  Map<String,EntityMetadata> entityMetadataMap=((MetamodelImpl)metamodel).getEntityMetadataMap();
  Map<String,Class<?>> entityNameToClassMap=((MetamodelImpl)metamodel).getEntityNameToClassMap();
  Map<String,List<String>> puToClazzMap=new HashMap<String,List<String>>();
  Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap=new HashMap<String,IdDiscriptor>();
  List<Class<?>> classes=new ArrayList<Class<?>>();
  if (resources != null && resources.length > 0) {
    for (    URL resource : resources) {
      try {
        ResourceIterator itr=reader.getResourceIterator(resource,reader.getFilter());
        InputStream is=null;
        while ((is=itr.next()) != null) {
          classes.addAll(scanClassAndPutMetadata(is,reader,entityMetadataMap,entityNameToClassMap,persistenceUnit,client,puToClazzMap,entityNameToKeyDiscriptorMap));
        }
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"",e);
        throw new MetamodelLoaderException(""String_Node_Str"");
      }
    }
  }
 else   if (iStreams != null) {
    try {
      for (      InputStream is : iStreams) {
        try {
          classes.addAll(scanClassAndPutMetadata(is,reader,entityMetadataMap,entityNameToClassMap,persistenceUnit,client,puToClazzMap,entityNameToKeyDiscriptorMap));
        }
  finally {
          if (is != null) {
            is.close();
          }
        }
      }
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"",e);
      throw new MetamodelLoaderException(""String_Node_Str"",e);
    }
  }
  ((MetamodelImpl)metamodel).setEntityMetadataMap(entityMetadataMap);
  appMetadata.getMetamodelMap().put(persistenceUnit,metamodel);
  appMetadata.setClazzToPuMap(puToClazzMap);
  ((MetamodelImpl)metamodel).addKeyValues(entityNameToKeyDiscriptorMap);
  ((MetamodelImpl)metamodel).assignEmbeddables(kunderaMetadata.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getEmbeddables());
  ((MetamodelImpl)metamodel).assignManagedTypes(kunderaMetadata.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getManagedTypes());
  ((MetamodelImpl)metamodel).assignMappedSuperClass(kunderaMetadata.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
}",0.96035917652212
176052,"private Object generateId(Object e,EntityMetadata m,Client<?> client,final KunderaMetadata kunderaMetadata){
  Metamodel metamodel=KunderaMetadataManager.getMetamodel(kunderaMetadata,m.getPersistenceUnit());
  IdDiscriptor keyValue=((MetamodelImpl)metamodel).getKeyValue(e.getClass().getName());
  if (keyValue != null) {
    String clientFactoryName=KunderaMetadataManager.getPersistenceUnitMetadata(kunderaMetadata,m.getPersistenceUnit()).getClient();
    if (clientFactoryName != null && !clientFactoryName.equalsIgnoreCase(""String_Node_Str"")) {
      if (client != null) {
        GenerationType type=keyValue.getStrategy();
switch (type) {
case TABLE:
          return onTableGenerator(m,client,keyValue,e);
case SEQUENCE:
        return onSequenceGenerator(m,client,keyValue,e);
case AUTO:
      return onAutoGenerator(m,client,e);
case IDENTITY:
    throw new UnsupportedOperationException(GenerationType.class.getSimpleName() + ""String_Node_Str"" + type+ ""String_Node_Str""+ client.getClass().getName());
}
}
}
 else {
int hashCode=e.hashCode();
Object generatedId=PropertyAccessorHelper.fromSourceToTargetClass(m.getIdAttribute().getJavaType(),Integer.class,new Integer(hashCode));
PropertyAccessorHelper.setId(e,m,generatedId);
return generatedId;
}
}
return null;
}","private Object generateId(Object e,EntityMetadata m,Client<?> client,final KunderaMetadata kunderaMetadata){
  Metamodel metamodel=KunderaMetadataManager.getMetamodel(kunderaMetadata,m.getPersistenceUnit());
  IdDiscriptor keyValue=((MetamodelImpl)metamodel).getKeyValue(e.getClass().getName());
  if (keyValue != null) {
    if (!client.getQueryImplementor().getSimpleName().equalsIgnoreCase(""String_Node_Str"")) {
      if (client != null) {
        GenerationType type=keyValue.getStrategy();
switch (type) {
case TABLE:
          return onTableGenerator(m,client,keyValue,e);
case SEQUENCE:
        return onSequenceGenerator(m,client,keyValue,e);
case AUTO:
      return onAutoGenerator(m,client,e);
case IDENTITY:
    throw new UnsupportedOperationException(GenerationType.class.getSimpleName() + ""String_Node_Str"" + type+ ""String_Node_Str""+ client.getClass().getName());
}
}
}
 else {
int hashCode=e.hashCode();
Object generatedId=PropertyAccessorHelper.fromSourceToTargetClass(m.getIdAttribute().getJavaType(),Integer.class,new Integer(hashCode));
PropertyAccessorHelper.setId(e,m,generatedId);
return generatedId;
}
}
return null;
}",0.908036454018227
176053,"/** 
 * parse and process non unary relations {e.g. 1-M and M-M}
 * @return  true, if is a non unary relation and processed.
 */
private boolean onNonUnaryRelation(){
  if (!relation.isUnary()) {
    if (Collection.class.isAssignableFrom(target.getClass())) {
      Collection childrenObjects=(Collection)target;
      for (      Object childObj : childrenObjects) {
        if (childObj != null) {
          this.generator.onBuildChildNode(childObj,metadata,this.pd,pc,source,relation);
        }
      }
    }
 else     if (Map.class.isAssignableFrom(target.getClass())) {
      Map childrenObjects=(Map)target;
      if (childrenObjects != null && !ProxyHelper.isProxyCollection(childrenObjects)) {
        for (        Map.Entry entry : (Set<Map.Entry>)childrenObjects.entrySet()) {
          Object relObject=entry.getKey();
          Object entityObject=entry.getValue();
          Node childNode=this.generator.generate(entityObject,pd,pc);
          if (childNode != null) {
            if (StringUtils.isEmpty(relation.getMappedBy()) && relation.getProperty().getAnnotation(MapKeyJoinColumn.class) != null) {
              NodeLink nodeLink=new NodeLink(source.getNodeId(),childNode.getNodeId());
              this.generator.setLink(source,relation,childNode,nodeLink);
              nodeLink.addLinkProperty(LinkProperty.LINK_VALUE,relObject);
            }
          }
        }
      }
    }
    return true;
  }
  return false;
}","/** 
 * parse and process non unary relations {e.g. 1-M and M-M}
 * @return  true, if is a non unary relation and processed.
 */
private boolean onNonUnaryRelation(){
  if (!relation.isUnary()) {
    if (Collection.class.isAssignableFrom(target.getClass())) {
      Collection childrenObjects=(Collection)target;
      for (      Object childObj : childrenObjects) {
        if (childObj != null) {
          this.generator.onBuildChildNode(childObj,metadata,this.pd,pc,source,relation);
        }
      }
    }
 else     if (Map.class.isAssignableFrom(target.getClass())) {
      Map childrenObjects=(Map)target;
      if (childrenObjects != null && !ProxyHelper.isProxyCollection(childrenObjects)) {
        for (        Map.Entry entry : (Set<Map.Entry>)childrenObjects.entrySet()) {
          Object relObject=entry.getKey();
          Object entityObject=entry.getValue();
          Node childNode=this.generator.generate(entityObject,pd,pc,null);
          if (childNode != null) {
            if (StringUtils.isEmpty(relation.getMappedBy()) && relation.getProperty().getAnnotation(MapKeyJoinColumn.class) != null) {
              NodeLink nodeLink=new NodeLink(source.getNodeId(),childNode.getNodeId());
              this.generator.setLink(source,relation,childNode,nodeLink);
              nodeLink.addLinkProperty(LinkProperty.LINK_VALUE,relObject);
            }
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.9982704946385332
176054,"/** 
 * Build node. Check for: 1. Node state, whether in pc or not 2. Node dirty check
 * @param entity      originating entity
 * @param pc          persistence cache.
 * @param entityId    entity id
 * @param nodeId      node id.
 * @return            node builder instance.
 */
private NodeBuilder buildNode(Object entity,PersistenceCache pc,Object entityId,String nodeId){
  Node nodeInPersistenceCache=pc.getMainCache().getNodeFromCache(nodeId);
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,entity,((Field)entityMetadata.getIdAttribute().getJavaMember()).isAnnotationPresent(EmbeddedId.class) ? new ManagedState() : new TransientState(),pc,entityId);
  }
 else {
    node=nodeInPersistenceCache;
    node.setPersistenceCache(pc);
    node.setTraversed(false);
  }
  onDirtyCheck(entity,node);
  node.setData(entity);
  return this;
}","/** 
 * Build node. Check for: 1. Node state, whether in pc or not 2. Node dirty check
 * @param entity      originating entity
 * @param pc          persistence cache.
 * @param entityId    entity id
 * @param nodeId      node id.
 * @return            node builder instance.
 */
private NodeBuilder buildNode(Object entity,PersistenceCache pc,Object entityId,String nodeId){
  Node nodeInPersistenceCache=pc.getMainCache().getNodeFromCache(nodeId);
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (nodeInPersistenceCache == null) {
    this.state=state != null ? this.state : new TransientState();
    node=new Node(nodeId,entity,((Field)entityMetadata.getIdAttribute().getJavaMember()).isAnnotationPresent(EmbeddedId.class) ? new ManagedState() : this.state,pc,entityId);
  }
 else {
    node=nodeInPersistenceCache;
    node.setPersistenceCache(pc);
    node.setTraversed(false);
  }
  onDirtyCheck(entity,node);
  node.setData(entity);
  return this;
}",0.7599591419816139
176055,"/** 
 * Set link property
 * @param node       node
 * @param relation   relation
 * @param childNode  target node
 * @param nodeLink   node link(bridge)
 */
void setLink(Node node,Relation relation,Node childNode,NodeLink nodeLink){
  nodeLink.setMultiplicity(relation.getType());
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
  nodeLink.setLinkProperties(getLinkProperties(metadata,relation));
  childNode.addParentNode(nodeLink,node);
  node.addChildNode(nodeLink,childNode);
}","/** 
 * Set link property
 * @param node node
 * @param relation relation
 * @param childNode target node
 * @param nodeLink node link(bridge)
 */
void setLink(Node node,Relation relation,Node childNode,NodeLink nodeLink){
  nodeLink.setMultiplicity(relation.getType());
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
  nodeLink.setLinkProperties(getLinkProperties(metadata,relation));
  childNode.addParentNode(nodeLink,node);
  node.addChildNode(nodeLink,childNode);
}",0.9893719806763284
176056,"/** 
 * Generate entity graph and returns after assigning headnode. n
 * @param entity    entity.
 * @param delegator delegator
 * @param pc        persistence cache
 * @return          object graph.
 */
public <E>ObjectGraph generateGraph(E entity,PersistenceDelegator delegator){
  this.builder.assign(this);
  Node node=generate(entity,delegator,delegator.getPersistenceCache());
  this.builder.assignHeadNode(node);
  return this.builder.getGraph();
}","/** 
 * Generate entity graph and returns after assigning headnode. n
 * @param entity entity.
 * @param delegator delegator
 * @param pc persistence cache
 * @return object graph.
 */
public <E>ObjectGraph generateGraph(E entity,PersistenceDelegator delegator,NodeState state){
  this.builder.assign(this);
  Node node=generate(entity,delegator,delegator.getPersistenceCache(),state);
  this.builder.assignHeadNode(node);
  return this.builder.getGraph();
}",0.9550930996714128
176057,"/** 
 * On assigning node link properties
 * @param node       node
 * @param relation   relation
 * @param childNode  child node
 */
private void assignNodeLinkProperty(Node node,Relation relation,Node childNode){
  NodeLink nodeLink=new NodeLink(node.getNodeId(),childNode.getNodeId());
  setLink(node,relation,childNode,nodeLink);
}","/** 
 * On assigning node link properties
 * @param node node
 * @param relation relation
 * @param childNode child node
 */
private void assignNodeLinkProperty(Node node,Relation relation,Node childNode){
  NodeLink nodeLink=new NodeLink(node.getNodeId(),childNode.getNodeId());
  setLink(node,relation,childNode,nodeLink);
}",0.9863842662632376
176058,"/** 
 * On pre checks before generating graph. performed checks: <li> Check if entity is valid. </li> <li> generated and set id in case   {@link GeneratedValue} is present and not set.</li><li> Check if primary key is not null.</li>
 * @param entity  entity
 * @param client  client
 * @return        entity id
 */
private <E>Object onPreChecks(E entity,Client client){
  Object id=null;
  if (!new NullOrInvalidEntityRule<E>().validate(entity)) {
    EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
    id=PropertyAccessorHelper.getId(entity,entityMetadata);
    if (ObjectGraphUtils.onAutoGenerateId((Field)entityMetadata.getIdAttribute().getJavaMember(),id)) {
      id=new IdGenerator().generateAndSetId(entity,entityMetadata,client);
    }
    new PrimaryKeyNullCheck<Object>().validate(id);
  }
  return id;
}","/** 
 * On pre checks before generating graph. performed checks: <li>Check if entity is valid.</li> <li>generated and set id in case  {@link GeneratedValue} is present and not set.</li> <li>Check if primarykey is not null.</li>
 * @param entity entity
 * @param client client
 * @return entity id
 */
private <E>Object onPreChecks(E entity,PersistenceDelegator delegator){
  Object id=null;
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  id=PropertyAccessorHelper.getId(entity,entityMetadata);
  if (ObjectGraphUtils.onAutoGenerateId((Field)entityMetadata.getIdAttribute().getJavaMember(),id)) {
    id=new IdGenerator().generateAndSetId(entity,entityMetadata,delegator.getClient(entityMetadata));
  }
  new PrimaryKeyNullCheck<Object>().validate(id);
  return id;
}",0.8480861244019139
176059,"/** 
 * Generate graph for head node.  <li> traverse through it's relational entities recursively
 * @param entity     entity object
 * @param delegator  delegator object
 * @param pc         persistence cache
 * @return           head node
 */
<E>Node generate(E entity,PersistenceDelegator delegator,PersistenceCache pc){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  Object entityId=onPreChecks(entity,delegator.getClient(entityMetadata));
  Node node=builder.buildNode(entity,pc,entityId);
  if (node != null && !traversedNodes.contains(node)) {
    for (    Relation relation : entityMetadata.getRelations()) {
      Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
      if (childObject != null && !ProxyHelper.isProxyOrCollection(childObject)) {
        EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(PropertyAccessorHelper.getGenericClass(relation.getProperty()));
        childObject=onIfSharedByPK(relation,childObject,childMetadata,entityId);
        node=builder.getRelationBuilder(childObject,relation,node).assignResources(delegator,pc,childMetadata).build().getNode();
      }
    }
    traversedNodes.add(node);
  }
  return node;
}","/** 
 * Generate graph for head node. <li>traverse through it's relational entities recursively
 * @param entity entity object
 * @param delegator delegator object
 * @param pc persistence cache
 * @return head node
 */
<E>Node generate(E entity,PersistenceDelegator delegator,PersistenceCache pc,NodeState state){
  if (!new NullOrInvalidEntityRule<E>().validate(entity)) {
    Object entityId=onPreChecks(entity,delegator);
    Node node=builder.buildNode(entity,pc,entityId,state);
    node=traverseNode(entity,delegator,pc,entityId,node);
    return node;
  }
  return null;
}",0.4762942779291553
176060,"/** 
 * Check and set if relation is set via primary key.
 * @param relation        relation
 * @param childObject     target entity
 * @param childMetadata   target entity metadata
 * @param entityId        entity id
 * @return                target entity.  
 */
private Object onIfSharedByPK(Relation relation,Object childObject,EntityMetadata childMetadata,Object entityId){
  if (relation.isJoinedByPrimaryKey()) {
    PropertyAccessorHelper.setId(childObject,childMetadata,entityId);
  }
  return childObject;
}","/** 
 * Check and set if relation is set via primary key.
 * @param relation relation
 * @param childObject target entity
 * @param childMetadata target entity metadata
 * @param entityId entity id
 * @return target entity.
 */
private Object onIfSharedByPK(Relation relation,Object childObject,EntityMetadata childMetadata,Object entityId){
  if (relation.isJoinedByPrimaryKey()) {
    PropertyAccessorHelper.setId(childObject,childMetadata,entityId);
  }
  return childObject;
}",0.962888665997994
176061,"/** 
 * On building child node
 * @param childObject    child object
 * @param childMetadata  child metadata
 * @param delegator      persistence delegator
 * @param pc             persistence cache
 * @param node           node
 * @param relation       entity relation
 */
void onBuildChildNode(Object childObject,EntityMetadata childMetadata,PersistenceDelegator delegator,PersistenceCache pc,Node node,Relation relation){
  Node childNode=generate(childObject,delegator,pc);
  if (childNode != null) {
    assignNodeLinkProperty(node,relation,childNode);
  }
}","/** 
 * On building child node
 * @param childObject child object
 * @param childMetadata child metadata
 * @param delegator persistence delegator
 * @param pc persistence cache
 * @param node node
 * @param relation entity relation
 */
void onBuildChildNode(Object childObject,EntityMetadata childMetadata,PersistenceDelegator delegator,PersistenceCache pc,Node node,Relation relation){
  Node childNode=generate(childObject,delegator,pc,null);
  if (childNode != null) {
    assignNodeLinkProperty(node,relation,childNode);
  }
}",0.9616087751371116
176062,"/** 
 * Parse relations of provided relationEntity.
 * @param originalEntity
 * @param relationEntity
 * @param relationsMap
 * @param pd
 * @param metadata
 * @param lazilyloaded
 */
private void parseRelations(final Object originalEntity,final Object relationEntity,final Map<String,Object> relationsMap,final PersistenceDelegator pd,final EntityMetadata metadata,boolean lazilyloaded){
  for (  Relation relation : metadata.getRelations()) {
    FetchType fetchType=relation.getFetchType();
    if (!lazilyloaded && fetchType.equals(FetchType.LAZY)) {
      final Object entityId=PropertyAccessorHelper.getId(relationEntity,metadata);
      getAssociationBuilder().setProxyRelationObject(relationEntity,relationsMap,metadata,pd,entityId,relation);
    }
 else {
      if (relation.isUnary() && relation.getTargetEntity().isAssignableFrom(originalEntity.getClass())) {
        Object associationObject=PropertyAccessorHelper.getObject(relationEntity,relation.getProperty());
        if (relation.getType().equals(ForeignKey.ONE_TO_ONE)) {
          if ((associationObject == null || ProxyHelper.isProxyOrCollection(associationObject))) {
            PropertyAccessorHelper.set(relationEntity,relation.getProperty(),originalEntity);
          }
        }
 else         if (relationsMap != null && relationsMap.containsKey(relation.getJoinColumnName())) {
          PropertyAccessorHelper.set(relationEntity,relation.getProperty(),originalEntity);
        }
      }
 else {
        final Object entityId=PropertyAccessorHelper.getId(relationEntity,metadata);
        Object relationValue=relationsMap != null ? relationsMap.get(relation.getJoinColumnName()) : null;
        final EntityMetadata targetEntityMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
        List immediateRelations=fetchRelations(relation,metadata,pd,entityId,relationValue,targetEntityMetadata);
        if (immediateRelations != null && !immediateRelations.isEmpty()) {
          for (          Object immediateRelation : immediateRelations) {
            if (!compareTo(getEntity(immediateRelation),originalEntity)) {
              onParseRelation(relationEntity,pd,targetEntityMetadata,immediateRelation,relation,lazilyloaded);
            }
          }
          setRelationToEntity(relationEntity,originalEntity,relation);
          PersistenceCacheManager.addEntityToPersistenceCache(getEntity(relationEntity),pd,PropertyAccessorHelper.getId(relationEntity,metadata));
        }
      }
    }
  }
}","/** 
 * Parse relations of provided relationEntity.
 * @param originalEntity
 * @param relationEntity
 * @param relationsMap
 * @param pd
 * @param metadata
 * @param lazilyloaded
 */
private void parseRelations(final Object originalEntity,final Object relationEntity,final Map<String,Object> relationsMap,final PersistenceDelegator pd,final EntityMetadata metadata,boolean lazilyloaded){
  for (  Relation relation : metadata.getRelations()) {
    FetchType fetchType=relation.getFetchType();
    if (!lazilyloaded && fetchType.equals(FetchType.LAZY)) {
      final Object entityId=PropertyAccessorHelper.getId(relationEntity,metadata);
      getAssociationBuilder().setProxyRelationObject(relationEntity,relationsMap,metadata,pd,entityId,relation);
    }
 else {
      if (relation.isUnary() && relation.getTargetEntity().isAssignableFrom(originalEntity.getClass())) {
        Object associationObject=PropertyAccessorHelper.getObject(relationEntity,relation.getProperty());
        if (relation.getType().equals(ForeignKey.ONE_TO_ONE)) {
          if ((associationObject == null || ProxyHelper.isProxyOrCollection(associationObject))) {
            PropertyAccessorHelper.set(relationEntity,relation.getProperty(),originalEntity);
          }
        }
 else         if (relationsMap != null && relationsMap.containsKey(relation.getJoinColumnName())) {
          PropertyAccessorHelper.set(relationEntity,relation.getProperty(),originalEntity);
        }
      }
 else {
        final Object entityId=PropertyAccessorHelper.getId(relationEntity,metadata);
        Object relationValue=relationsMap != null ? relationsMap.get(relation.getJoinColumnName()) : null;
        final EntityMetadata targetEntityMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
        List immediateRelations=fetchRelations(relation,metadata,pd,entityId,relationValue,targetEntityMetadata);
        if (immediateRelations != null && !immediateRelations.isEmpty()) {
          for (          Object immediateRelation : immediateRelations) {
            if (immediateRelation != null && !compareTo(getEntity(immediateRelation),originalEntity)) {
              onParseRelation(relationEntity,pd,targetEntityMetadata,immediateRelation,relation,lazilyloaded);
            }
          }
          setRelationToEntity(relationEntity,originalEntity,relation);
          PersistenceCacheManager.addEntityToPersistenceCache(getEntity(relationEntity),pd,PropertyAccessorHelper.getId(relationEntity,metadata));
        }
      }
    }
  }
}",0.9942517343904856
176063,"/** 
 * Removes an entity object from persistence cache.
 */
public void remove(Object e){
  if (e == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  EntityMetadata metadata=getMetadata(e.getClass());
  ObjectGraph graph=new GraphGenerator().generateGraph(e,this);
  Node node=graph.getHeadNode();
  try {
    lock.writeLock().lock();
    node.setPersistenceDelegator(this);
    node.remove();
    flushManager.buildFlushStack(node,EventType.DELETE);
    flush();
  }
  finally {
    lock.writeLock().unlock();
  }
  graph.clear();
  graph=null;
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + e.getClass());
}","/** 
 * Removes an entity object from persistence cache.
 */
public void remove(Object e){
  if (e == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  EntityMetadata metadata=getMetadata(e.getClass());
  ObjectGraph graph=new GraphGenerator().generateGraph(e,this,new ManagedState());
  Node node=graph.getHeadNode();
  try {
    lock.writeLock().lock();
    node.setPersistenceDelegator(this);
    node.remove();
    flushManager.buildFlushStack(node,EventType.DELETE);
    flush();
  }
  finally {
    lock.writeLock().unlock();
  }
  graph.clear();
  graph=null;
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + e.getClass());
}",0.9855293221629856
176064,"@Test public void testRelation(){
  List<SocialProfile> profiles=new ArrayList<SocialProfile>();
  FacebookProfile fbprofile=new FacebookProfile();
  fbprofile.setId(103l);
  fbprofile.setFacebookId(""String_Node_Str"");
  fbprofile.setFacebookUser(""String_Node_Str"");
  fbprofile.setuserType(""String_Node_Str"");
  profiles.add(fbprofile);
  TwitterProfile twprofile1=new TwitterProfile();
  twprofile1.setTwitterId(""String_Node_Str"");
  twprofile1.setTwitterName(""String_Node_Str"");
  twprofile1.setId(102l);
  profiles.add(twprofile1);
  twprofile1.setuserType(""String_Node_Str"");
  UserAccount uacc=new UserAccount();
  uacc.setId(101l);
  uacc.setDispName(""String_Node_Str"");
  uacc.setSocialProfiles(profiles);
  twprofile1.setuserAccount(uacc);
  fbprofile.setuserAccount(uacc);
  em.getTransaction().begin();
  em.persist(uacc);
  em.getTransaction().commit();
  objCache.add(uacc);
  objCache.add(twprofile1);
  objCache.add(fbprofile);
  em.clear();
  String uaQuery=""String_Node_Str"";
  Query q=em.createQuery(uaQuery);
  List<UserAccount> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getDispName());
  Assert.assertEquals(2,results.get(0).getSocialProfiles().size());
  em.clear();
  em.remove(results.get(0));
}","@Test public void testRelation(){
  List<SocialProfile> profiles=new ArrayList<SocialProfile>();
  FacebookProfile fbprofile=new FacebookProfile();
  fbprofile.setId(103l);
  fbprofile.setFacebookId(""String_Node_Str"");
  fbprofile.setFacebookUser(""String_Node_Str"");
  fbprofile.setuserType(""String_Node_Str"");
  profiles.add(fbprofile);
  TwitterProfile twprofile1=new TwitterProfile();
  twprofile1.setTwitterId(""String_Node_Str"");
  twprofile1.setTwitterName(""String_Node_Str"");
  twprofile1.setId(102l);
  profiles.add(twprofile1);
  twprofile1.setuserType(""String_Node_Str"");
  UserAccount uacc=new UserAccount();
  uacc.setId(101l);
  uacc.setDispName(""String_Node_Str"");
  uacc.setSocialProfiles(profiles);
  twprofile1.setuserAccount(uacc);
  fbprofile.setuserAccount(uacc);
  em.getTransaction().begin();
  em.persist(uacc);
  em.getTransaction().commit();
  objCache.add(uacc);
  objCache.add(twprofile1);
  objCache.add(fbprofile);
  em.clear();
  String uaQuery=""String_Node_Str"";
  Query q=em.createQuery(uaQuery);
  List<UserAccount> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getDispName());
  Assert.assertEquals(2,results.get(0).getSocialProfiles().size());
  em.remove(results.get(0));
  em.clear();
}",0.9761354888375674
176065,"/** 
 * Creates the query.
 * @param jpaQuery the jpa query
 * @return the query
 */
Query createQuery(String jpaQuery){
  return getQueryInstance(jpaQuery,false,null);
}","/** 
 * Creates the query.
 * @param jpaQuery the jpa query
 * @return the query
 */
Query createQuery(String jpaQuery,final String persistenceUnit){
  Query query=new QueryResolver().getQueryImplementation(jpaQuery,getClient(persistenceUnit).getQueryImplementor(),this);
  return query;
}",0.5446623093681917
176066,"/** 
 * Gets the client.
 * @param m the m
 * @return the client
 */
public Client getClient(EntityMetadata m){
  if (m == null) {
    throw new KunderaException(""String_Node_Str"");
  }
  String persistenceUnit=m.getPersistenceUnit();
  Client client=clientMap.get(persistenceUnit);
  if (client == null) {
    throw new ClientResolverException(""String_Node_Str"" + persistenceUnit);
  }
  return client;
}","private Client getClient(final String persistenceUnit){
  Client client=clientMap.get(persistenceUnit);
  if (client == null) {
    throw new ClientResolverException(""String_Node_Str"" + persistenceUnit);
  }
  return client;
}",0.2313787638668779
176067,"/** 
 * Gets the query implementation.
 * @param jpaQuery the jpa query
 * @param persistenceDelegator the persistence delegator
 * @param persistenceUnits the persistence units
 * @return the query implementation
 */
public Query getQueryImplementation(String jpaQuery,PersistenceDelegator persistenceDelegator,Class mappedClass,boolean isNative){
  if (jpaQuery == null) {
    throw new QueryHandlerException(""String_Node_Str"");
  }
  KunderaQuery kunderaQuery=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  String mappedQuery=appMetadata.getQuery(jpaQuery);
  isNative=mappedQuery != null ? appMetadata.isNative(jpaQuery) : isNative;
  EntityMetadata m=null;
  if (!isNative) {
    kunderaQuery=new KunderaQuery(mappedQuery != null ? mappedQuery : jpaQuery);
    KunderaQueryParser parser=new KunderaQueryParser(kunderaQuery);
    parser.parse();
    kunderaQuery.postParsingInit();
    m=kunderaQuery.getEntityMetadata();
  }
 else {
    if (appMetadata.isNative(jpaQuery)) {
      mappedClass=appMetadata.getMappedClass(jpaQuery);
    }
    kunderaQuery=new KunderaQuery(jpaQuery);
    kunderaQuery.isNativeQuery=true;
    m=KunderaMetadataManager.getEntityMetadata(mappedClass);
    Field entityClazzField=null;
    try {
      entityClazzField=kunderaQuery.getClass().getDeclaredField(""String_Node_Str"");
      if (entityClazzField != null && !entityClazzField.isAccessible()) {
        entityClazzField.setAccessible(true);
      }
      entityClazzField.set(kunderaQuery,mappedClass);
    }
 catch (    Exception e) {
      log.error(e.getMessage());
      throw new QueryHandlerException(e);
    }
  }
  Query query=null;
  try {
    query=getQuery(jpaQuery,persistenceDelegator,m,kunderaQuery);
  }
 catch (  Exception e) {
    log.error(e.getMessage());
    throw new QueryHandlerException(e);
  }
  return query;
}","public Query getQueryImplementation(String jpaQuery,Class queryClazz,final PersistenceDelegator persistenceDelegator){
  KunderaQuery kunderaQuery=new KunderaQuery(jpaQuery);
  kunderaQuery.isNativeQuery=true;
  Query query=null;
  try {
    Constructor constructor=queryClazz.getConstructor(KunderaQuery.class,PersistenceDelegator.class);
    query=(Query)constructor.newInstance(kunderaQuery,persistenceDelegator);
  }
 catch (  Exception e) {
    log.error(e.getMessage());
    throw new QueryHandlerException(e);
  }
  return query;
}",0.1070095396101202
176068,"private void testCountResult(){
  Map<String,Client> clientMap=(Map<String,Client>)entityManager.getDelegate();
  ThriftClient tc=(ThriftClient)clientMap.get(SEC_IDX_CASSANDRA_TEST);
  tc.setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  CQLTranslator translator=new CQLTranslator();
  String query=""String_Node_Str"" + translator.ensureCase(new StringBuilder(),""String_Node_Str"",false).toString();
  Query q=entityManager.createNativeQuery(query,PersonCassandra.class);
  List noOfRows=q.getResultList();
  Assert.assertEquals(new Long(3),PropertyAccessorHelper.getObject(Long.class,((Column)noOfRows.get(0)).getValue()));
  Assert.assertEquals(""String_Node_Str"",PropertyAccessorHelper.getObject(String.class,((Column)noOfRows.get(0)).getName()));
  tc.setCqlVersion(CassandraConstants.CQL_VERSION_2_0);
}","private void testCountResult(){
  Map<String,Client> clientMap=(Map<String,Client>)entityManager.getDelegate();
  ThriftClient tc=(ThriftClient)clientMap.get(SEC_IDX_CASSANDRA_TEST);
  tc.setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  CQLTranslator translator=new CQLTranslator();
  String query=""String_Node_Str"" + translator.ensureCase(new StringBuilder(),""String_Node_Str"",false).toString();
  Query q=entityManager.createNativeQuery(query,PersonCassandra.class);
  List noOfRows=q.getResultList();
  Assert.assertEquals(new Long(3),PropertyAccessorHelper.getObject(Long.class,((Column)noOfRows.get(0)).getValue()));
  Assert.assertEquals(""String_Node_Str"",PropertyAccessorHelper.getObject(String.class,((Column)noOfRows.get(0)).getName()));
  entityManager.clear();
  q=entityManager.createNamedQuery(""String_Node_Str"");
  noOfRows=q.getResultList();
  Assert.assertEquals(3,noOfRows.size());
  tc.setCqlVersion(CassandraConstants.CQL_VERSION_2_0);
}",0.9140271493212668
176069,"@Test public void testCQLBatch(){
  String useNativeSql=""String_Node_Str"" + schema;
  EntityManagerFactory emf=getEntityManagerFactory();
  String createColumnFamily=""String_Node_Str"";
  String batchOps=""String_Node_Str"";
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clientMap=(Map<String,Client>)em.getDelegate();
  PelopsClient pc=(PelopsClient)clientMap.get(""String_Node_Str"");
  pc.setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  Query q=em.createNativeQuery(useNativeSql,CassandraBatchEntity.class);
  q.executeUpdate();
  pc.setConsistencyLevel(ConsistencyLevel.QUORUM);
  q=em.createNativeQuery(createColumnFamily,CassandraBatchEntity.class);
  q.executeUpdate();
  pc.setConsistencyLevel(ConsistencyLevel.QUORUM);
  q=em.createNativeQuery(batchOps,CassandraBatchEntity.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",CassandraBatchEntity.class);
  List<CassandraBatchEntity> results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(3,results.size());
  createColumnFamily=""String_Node_Str"";
  em.createNativeQuery(createColumnFamily,CassandraBatchEntity.class).executeUpdate();
  createColumnFamily=""String_Node_Str"";
  em.createNativeQuery(createColumnFamily,CassandraBatchEntity.class).executeUpdate();
  batchOps=""String_Node_Str"";
  em.createNativeQuery(batchOps,CassandraBatchEntity.class).executeUpdate();
  emf.close();
}","@Test public void testCQLBatch(){
  String useNativeSql=""String_Node_Str"" + schema;
  EntityManagerFactory emf=getEntityManagerFactory();
  String createColumnFamily=""String_Node_Str"";
  String batchOps=""String_Node_Str"";
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clientMap=(Map<String,Client>)em.getDelegate();
  PelopsClient pc=(PelopsClient)clientMap.get(""String_Node_Str"");
  pc.setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  Query q=em.createNativeQuery(useNativeSql);
  q.executeUpdate();
  pc.setConsistencyLevel(ConsistencyLevel.QUORUM);
  q=em.createNativeQuery(createColumnFamily,CassandraBatchEntity.class);
  q.executeUpdate();
  pc.setConsistencyLevel(ConsistencyLevel.QUORUM);
  q=em.createNativeQuery(batchOps,CassandraBatchEntity.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",CassandraBatchEntity.class);
  List<CassandraBatchEntity> results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(3,results.size());
  createColumnFamily=""String_Node_Str"";
  em.createNativeQuery(createColumnFamily,CassandraBatchEntity.class).executeUpdate();
  createColumnFamily=""String_Node_Str"";
  em.createNativeQuery(createColumnFamily,CassandraBatchEntity.class).executeUpdate();
  batchOps=""String_Node_Str"";
  em.createNativeQuery(batchOps,CassandraBatchEntity.class).executeUpdate();
  emf.close();
}",0.9903468001430104
176070,"/** 
 * Instantiates a new kundera persistence.
 */
public KunderaPersistence(){
  logger.info(""String_Node_Str"");
  new CoreLoader().load();
  this.providerUtil=new KunderaPersistenceProviderUtil(this);
  this.cache=new PersistenceUtilHelper.MetadataCache();
}","/** 
 * Instantiates a new kundera persistence.
 */
public KunderaPersistence(){
  this.providerUtil=new KunderaPersistenceProviderUtil(this);
  this.cache=new PersistenceUtilHelper.MetadataCache();
}",0.4381778741865509
176071,"@Override public synchronized final EntityManagerFactory createEntityManagerFactory(String persistenceUnit,Map map){
  if (persistenceUnit == null) {
    throw new KunderaException(""String_Node_Str"");
  }
synchronized (this) {
    try {
      initializeKundera(persistenceUnit,map);
      EntityManagerFactory emf=new EntityManagerFactoryImpl(persistenceUnit,map);
      return emf;
    }
 catch (    PersistenceUnitConfigurationException pcex) {
      logger.error(""String_Node_Str"");
      return null;
    }
  }
}","@Override public synchronized final EntityManagerFactory createEntityManagerFactory(String persistenceUnit,Map map){
synchronized (this) {
    try {
      EntityManagerFactory emf=new EntityManagerFactoryImpl(persistenceUnit,map);
      return emf;
    }
 catch (    PersistenceUnitConfigurationException pcex) {
      logger.error(""String_Node_Str"");
      return null;
    }
  }
}",0.3830734966592428
176072,"@Override public final EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo info,Map map){
  return createEntityManagerFactory(info.getPersistenceUnitName(),map);
}","@Override public final EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo info,Map map){
synchronized (this) {
    try {
      EntityManagerFactory emf=new EntityManagerFactoryImpl(info,map);
      return emf;
    }
 catch (    PersistenceUnitConfigurationException pcex) {
      logger.error(""String_Node_Str"");
      return null;
    }
  }
}",0.5062836624775583
176073,"@Override public Object getIdentifier(Object entity){
  Class<?> entityClass=entity.getClass();
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  if (entityMetadata == null) {
    throw new IllegalArgumentException(entityClass + ""String_Node_Str"");
  }
  return PropertyAccessorHelper.getId(entity,entityMetadata);
}","@Override public Object getIdentifier(Object entity){
  Class<?> entityClass=entity.getClass();
  return PropertyAccessorHelper.getId(entity,null);
}",0.5793650793650794
176074,"/** 
 * Method to handle
 * @param node
 */
public void persist(Node node){
  Object entity=node.getData();
  Object id=node.getEntityId();
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
  isUpdate=node.isUpdate();
  List<RelationHolder> relationHolders=getRelationHolders(node);
  onPersist(metadata,entity,id,relationHolders);
  id=PropertyAccessorHelper.getId(entity,metadata);
  node.setEntityId(id);
  indexNode(node,metadata);
}","/** 
 * Method to handle
 * @param node
 */
public void persist(Node node){
  Object entity=node.getData();
  Object id=node.getEntityId();
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,node.getDataClass());
  isUpdate=node.isUpdate();
  List<RelationHolder> relationHolders=getRelationHolders(node);
  onPersist(metadata,entity,id,relationHolders);
  id=PropertyAccessorHelper.getId(entity,metadata);
  node.setEntityId(id);
  indexNode(node,metadata);
}",0.9834710743801652
176075,"/** 
 * Creates new instance of client factory for given persistence unit.
 * @param persistenceUnit
 * @param puProperties
 * @param clientFactory
 * @return new instance of clientFactory
 */
private static ClientFactory instantiateClientFactory(String persistenceUnit,Map<String,Object> puProperties){
  ClientFactory clientFactory=null;
  logger.info(""String_Node_Str"" + persistenceUnit);
  PersistenceUnitMetadata persistenceUnitMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String kunderaClientFactory=puProperties != null ? (String)puProperties.get(PersistenceProperties.KUNDERA_CLIENT_FACTORY) : null;
  if (kunderaClientFactory == null) {
    kunderaClientFactory=persistenceUnitMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_CLIENT_FACTORY);
  }
  if (kunderaClientFactory == null) {
    throw new ClientResolverException(""String_Node_Str"");
  }
  try {
    clientFactory=(ClientFactory)Class.forName(kunderaClientFactory).newInstance();
    Method m=GenericClientFactory.class.getDeclaredMethod(""String_Node_Str"",String.class);
    if (!m.isAccessible()) {
      m.setAccessible(true);
    }
    m.invoke(clientFactory,persistenceUnit);
    m=GenericClientFactory.class.getDeclaredMethod(""String_Node_Str"",Map.class);
    if (!m.isAccessible()) {
      m.setAccessible(true);
    }
    m.invoke(clientFactory,puProperties);
  }
 catch (  InstantiationException e) {
    onError(e);
  }
catch (  IllegalAccessException e) {
    onError(e);
  }
catch (  ClassNotFoundException e) {
    onError(e);
  }
catch (  SecurityException e) {
    onError(e);
  }
catch (  NoSuchMethodException e) {
    onError(e);
  }
catch (  IllegalArgumentException e) {
    onError(e);
  }
catch (  InvocationTargetException e) {
    onError(e);
  }
  if (clientFactory == null) {
    logger.error(""String_Node_Str"");
    throw new ClientResolverException(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"");
  return clientFactory;
}","/** 
 * Creates new instance of client factory for given persistence unit.
 * @param persistenceUnit
 * @param puProperties
 * @param clientFactory
 * @return new instance of clientFactory
 */
private static ClientFactory instantiateClientFactory(String persistenceUnit,Map<String,Object> puProperties,final KunderaMetadata kunderaMetadata){
  ClientFactory clientFactory=null;
  logger.info(""String_Node_Str"" + persistenceUnit);
  PersistenceUnitMetadata persistenceUnitMetadata=kunderaMetadata.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String kunderaClientFactory=puProperties != null ? (String)puProperties.get(PersistenceProperties.KUNDERA_CLIENT_FACTORY) : null;
  if (kunderaClientFactory == null) {
    kunderaClientFactory=persistenceUnitMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_CLIENT_FACTORY);
  }
  if (kunderaClientFactory == null) {
    throw new ClientResolverException(""String_Node_Str"");
  }
  try {
    clientFactory=(ClientFactory)Class.forName(kunderaClientFactory).newInstance();
    Method m=GenericClientFactory.class.getDeclaredMethod(""String_Node_Str"",String.class);
    if (!m.isAccessible()) {
      m.setAccessible(true);
    }
    m.invoke(clientFactory,persistenceUnit);
    m=GenericClientFactory.class.getDeclaredMethod(""String_Node_Str"",Map.class);
    if (!m.isAccessible()) {
      m.setAccessible(true);
    }
    m.invoke(clientFactory,puProperties);
    m=GenericClientFactory.class.getDeclaredMethod(""String_Node_Str"",KunderaMetadata.class);
    if (!m.isAccessible()) {
      m.setAccessible(true);
    }
    m.invoke(clientFactory,kunderaMetadata);
  }
 catch (  InstantiationException e) {
    onError(e);
  }
catch (  IllegalAccessException e) {
    onError(e);
  }
catch (  ClassNotFoundException e) {
    onError(e);
  }
catch (  SecurityException e) {
    onError(e);
  }
catch (  NoSuchMethodException e) {
    onError(e);
  }
catch (  IllegalArgumentException e) {
    onError(e);
  }
catch (  InvocationTargetException e) {
    onError(e);
  }
  if (clientFactory == null) {
    logger.error(""String_Node_Str"");
    throw new ClientResolverException(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"");
  return clientFactory;
}",0.940843742634928
176076,"/** 
 * Reads property file which is given in persistence unit
 * @param pu
 */
public void read(String pu){
  String propertyFileName=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_CLIENT_PROPERTY) : null;
  puMetadata=KunderaMetadataManager.getPersistenceUnitMetadata(pu);
  if (propertyFileName == null) {
    propertyFileName=puMetadata != null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_CLIENT_PROPERTY) : null;
  }
  if (propertyFileName != null && PropertyType.value(propertyFileName) != null && PropertyType.value(propertyFileName).equals(PropertyType.xml)) {
    onXml(onParseXML(propertyFileName,puMetadata));
  }
}","/** 
 * Reads property file which is given in persistence unit
 * @param pu
 */
public void read(String pu){
  String propertyFileName=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_CLIENT_PROPERTY) : null;
  if (propertyFileName == null) {
    propertyFileName=puMetadata != null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_CLIENT_PROPERTY) : null;
  }
  if (propertyFileName != null && PropertyType.value(propertyFileName) != null && PropertyType.value(propertyFileName).equals(PropertyType.xml)) {
    onXml(onParseXML(propertyFileName,puMetadata));
  }
}",0.9473684210526316
176077,"public AbstractPropertyReader(Map externalProperties){
  this.externalProperties=externalProperties;
}","public AbstractPropertyReader(Map externalProperties,final PersistenceUnitMetadata puMetadata){
  this.externalProperties=externalProperties;
  this.puMetadata=puMetadata;
}",0.7418181818181818
176078,"public AbstractSchemaConfiguration(final String[] persistenceUnits,final Map externalPropertyMap){
  this.persistenceUnits=persistenceUnits;
  this.externalPropertyMap=externalPropertyMap;
}","public AbstractSchemaConfiguration(final String[] persistenceUnits,final Map externalPropertyMap,final KunderaMetadata kunderaMetadata){
  this.persistenceUnits=persistenceUnits;
  this.externalPropertyMap=externalPropertyMap;
  this.kunderaMetadata=kunderaMetadata;
}",0.8296943231441049
176079,"/** 
 * Constructor parameterised with persistence units.
 * @param persistenceUnits persistence units.
 */
public ClientFactoryConfiguraton(Map externalProperties,String... persistenceUnits){
  super(persistenceUnits,externalProperties);
}","/** 
 * Constructor parameterised with persistence units.
 * @param persistenceUnits persistence units.
 */
public ClientFactoryConfiguraton(Map externalProperties,final KunderaMetadata kunderaMetadata,String... persistenceUnits){
  super(persistenceUnits,externalProperties,kunderaMetadata);
}",0.898876404494382
176080,"@Override public void configure(){
  for (  String pu : persistenceUnits) {
    log.info(""String_Node_Str"" + pu);
    Map<String,Object> puProperty=KunderaCoreUtils.getExternalProperties(pu,externalPropertyMap,persistenceUnits);
    ClientResolver.getClientFactory(pu,puProperty).load(pu,puProperty);
  }
}","@Override public void configure(){
  for (  String pu : persistenceUnits) {
    log.info(""String_Node_Str"" + pu);
    Map<String,Object> puProperty=KunderaCoreUtils.getExternalProperties(pu,externalPropertyMap,persistenceUnits);
    ClientResolver.getClientFactory(pu,puProperty,kunderaMetadata).load(pu,puProperty);
  }
}",0.9745222929936306
176081,"public void buildClientFactoryMetadata(Map<String,ClientFactory> clientFactories){
  for (  String pu : persistenceUnits) {
    log.info(""String_Node_Str"" + pu);
    Map<String,Object> puProperty=KunderaCoreUtils.getExternalProperties(pu,mapExternalProperties,persistenceUnits);
    ClientFactory clientFactory=ClientResolver.getClientFactory(pu,puProperty);
    clientFactories.put(pu,clientFactory);
  }
  schemaConfiguration.configure();
  for (  String pu : persistenceUnits) {
    Map<String,Object> puProperty=KunderaCoreUtils.getExternalProperties(pu,mapExternalProperties,persistenceUnits);
    clientFactories.get(pu).load(pu,puProperty);
  }
}","public void buildClientFactoryMetadata(Map<String,ClientFactory> clientFactories,final KunderaMetadata kunderaMetadata){
  for (  String pu : persistenceUnits) {
    log.info(""String_Node_Str"" + pu);
    Map<String,Object> puProperty=KunderaCoreUtils.getExternalProperties(pu,mapExternalProperties,persistenceUnits);
    ClientFactory clientFactory=ClientResolver.getClientFactory(pu,puProperty,kunderaMetadata);
    clientFactories.put(pu,clientFactory);
  }
  schemaConfiguration.configure();
  for (  String pu : persistenceUnits) {
    Map<String,Object> puProperty=KunderaCoreUtils.getExternalProperties(pu,mapExternalProperties,persistenceUnits);
    clientFactories.get(pu).load(pu,puProperty);
  }
}",0.9602941176470589
176082,"public ClientMetadataBuilder(Map mapOfPuProperties,String... persistenceUnits){
  this.persistenceUnits=persistenceUnits;
  this.mapExternalProperties=mapOfPuProperties;
  this.schemaConfiguration=new SchemaConfiguration(mapOfPuProperties,persistenceUnits);
}","public ClientMetadataBuilder(Map mapOfPuProperties,final KunderaMetadata kunderaMetadata,String... persistenceUnits){
  this.persistenceUnits=persistenceUnits;
  this.mapExternalProperties=mapOfPuProperties;
  this.schemaConfiguration=new SchemaConfiguration(mapOfPuProperties,kunderaMetadata,persistenceUnits);
}",0.9055944055944056
176083,"/** 
 * Insert a record in the database. Any field/value pairs in the specified values HashMap will be written into the record with the specified record key.
 * @param table The name of the table
 * @param key The record key of the record to insert.
 * @param values A HashMap of field/value pairs to insert in the record
 * @return Zero on success, a non-zero error code on error
 */
public int insert(String table,String key,HashMap<String,ByteIterator> values){
  Mutator mutator=pool.createMutator();
  try {
    List<Column> columns=new ArrayList<Column>();
    for (    Map.Entry<String,ByteIterator> entry : values.entrySet()) {
      Column col=new Column();
      col.setName(ByteBuffer.wrap(entry.getKey().getBytes(""String_Node_Str"")));
      col.setValue(ByteBuffer.wrap(entry.getValue().toArray()));
      col.setTimestamp(System.currentTimeMillis());
      columns.add(col);
    }
    mutator.writeColumns(column_family,Bytes.fromUTF8(key),columns);
    mutator.execute(writeConsistencyLevel);
    return Ok;
  }
 catch (  Exception e) {
    logger.error(e);
    return Error;
  }
}","/** 
 * Insert a record in the database. Any field/value pairs in the specified values HashMap will be written into the record with the specified record key.
 * @param table The name of the table
 * @param key The record key of the record to insert.
 * @param values A HashMap of field/value pairs to insert in the record
 * @return Zero on success, a non-zero error code on error
 */
public int insert(String table,String key,HashMap<String,ByteIterator> values){
  Mutator mutator=Pelops.createMutator(_host + ""String_Node_Str"" + _port+ ""String_Node_Str""+ _keyspace);
  try {
    List<Column> columns=new ArrayList<Column>();
    for (    Map.Entry<String,ByteIterator> entry : values.entrySet()) {
      Column col=new Column();
      col.setName(ByteBuffer.wrap(entry.getKey().getBytes(""String_Node_Str"")));
      col.setValue(ByteBuffer.wrap(entry.getValue().toArray()));
      col.setTimestamp(System.currentTimeMillis());
      columns.add(col);
    }
    mutator.writeColumns(column_family,Bytes.fromUTF8(key),columns);
    mutator.execute(writeConsistencyLevel);
    return Ok;
  }
 catch (  Exception e) {
    logger.error(e);
    return Error;
  }
}",0.9676274944567628
176084,"/** 
 * @param entityType
 * @param column
 * @param m
 * @param entity
 * @param embeddable
 * @param valueMap
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private static void onViaEmbeddable(Attribute column,Object entity,Metamodel metamodel,Map<String,Object> valueMap) throws InstantiationException, IllegalAccessException {
  EmbeddableType embeddable=metamodel.embeddable(((AbstractAttribute)column).getBindableJavaType());
  Field embeddedField=(Field)column.getJavaMember();
  Object embeddedDocumentObject=null;
  if (column.isCollection()) {
    Class embeddedObjectClass=PropertyAccessorHelper.getGenericClass(embeddedField);
    embeddedDocumentObject=valueMap.get(((AbstractAttribute)column).getJPAColumnName());
    if (embeddedDocumentObject != null) {
      Collection embeddedCollection=getCollectionFromDocumentList(metamodel,(List<Map<String,Object>>)embeddedDocumentObject,embeddedField.getType(),embeddedObjectClass,embeddable.getAttributes());
      PropertyAccessorHelper.set(entity,embeddedField,embeddedCollection);
    }
  }
 else {
    Object obj=PropertyAccessorHelper.getObject(entity,(Field)column.getJavaMember());
    if (obj == null) {
      obj=((AbstractAttribute)column).getBindableJavaType().newInstance();
    }
    embeddedDocumentObject=valueMap.get(((AbstractAttribute)column).getJPAColumnName());
    PropertyAccessorHelper.set(entity,embeddedField,getObjectFromDocument(metamodel,(Map<String,Object>)embeddedDocumentObject,embeddable.getAttributes(),obj));
  }
}","/** 
 * @param entityType
 * @param column
 * @param m
 * @param entity
 * @param embeddable
 * @param valueMap
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private static void onViaEmbeddable(Attribute column,Object entity,Metamodel metamodel,Map<String,Object> valueMap) throws InstantiationException, IllegalAccessException {
  EmbeddableType embeddable=metamodel.embeddable(((AbstractAttribute)column).getBindableJavaType());
  Field embeddedField=(Field)column.getJavaMember();
  Object embeddedDocumentObject=null;
  if (column.isCollection()) {
    Class embeddedObjectClass=PropertyAccessorHelper.getGenericClass(embeddedField);
    embeddedDocumentObject=valueMap.get(((AbstractAttribute)column).getJPAColumnName());
    if (embeddedDocumentObject != null) {
      Collection embeddedCollection=getCollectionFromDocumentList(metamodel,(List<Map<String,Object>>)embeddedDocumentObject,embeddedField.getType(),embeddedObjectClass,embeddable.getAttributes());
      PropertyAccessorHelper.set(entity,embeddedField,embeddedCollection);
    }
  }
 else {
    Object obj=PropertyAccessorHelper.getObject(entity,(Field)column.getJavaMember());
    if (obj == null) {
      obj=((AbstractAttribute)column).getBindableJavaType().newInstance();
    }
    embeddedDocumentObject=valueMap.get(((AbstractAttribute)column).getJPAColumnName());
    if (embeddedDocumentObject != null)     PropertyAccessorHelper.set(entity,embeddedField,getObjectFromDocument(metamodel,(Map<String,Object>)embeddedDocumentObject,embeddable.getAttributes(),obj));
  }
}",0.9871134020618556
176085,"@Override protected Object createPoolOrConnection(){
  getConfigurationObject();
  Set<String> pus=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodelMap().keySet();
  Map<String,Collection<Class<?>>> classes=new HashMap<String,Collection<Class<?>>>();
  for (  String pu : pus) {
    classes.put(pu,((MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(pu)).getEntityNameToClassMap().values());
  }
  conf.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (externalProperties != null && !externalProperties.isEmpty()) {
    for (    String key : externalProperties.keySet()) {
      Object value=externalProperties.get(key);
      if (value instanceof String) {
        conf.setProperty(key,(String)value);
      }
    }
  }
  serviceRegistry=new ServiceRegistryBuilder().applySettings(conf.getProperties()).buildServiceRegistry();
  Iterator<Collection<Class<?>>> iter=classes.values().iterator();
  while (iter.hasNext()) {
    for (    Class<?> c : iter.next()) {
      conf.addAnnotatedClass(c);
    }
  }
  sf=conf.buildSessionFactory(serviceRegistry);
  for (  String pu : pus) {
    StatelessSession session=sf.openStatelessSession();
    if (!pu.equals(getPersistenceUnit())) {
      Collection<Class<?>> collection=classes.get(pu);
      for (      Class clazz : collection) {
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(clazz);
        try {
          session.createSQLQuery(""String_Node_Str"" + metadata.getTableName()).executeUpdate();
        }
 catch (        Exception e) {
        }
      }
    }
  }
  return sf;
}","@Override protected Object createPoolOrConnection(){
  getConfigurationObject();
  Set<String> pus=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodelMap().keySet();
  Map<String,Collection<Class<?>>> classes=new HashMap<String,Collection<Class<?>>>();
  for (  String pu : pus) {
    classes.put(pu,((MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(pu)).getEntityNameToClassMap().values());
  }
  conf.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (externalProperties != null && !externalProperties.isEmpty()) {
    for (    String key : externalProperties.keySet()) {
      Object value=externalProperties.get(key);
      if (value instanceof String) {
        conf.setProperty(key,(String)value);
      }
    }
  }
  serviceRegistry=new ServiceRegistryBuilder().applySettings(conf.getProperties()).buildServiceRegistry();
  Iterator<Collection<Class<?>>> iter=classes.values().iterator();
  while (iter.hasNext()) {
    for (    Class<?> c : iter.next()) {
      conf.addAnnotatedClass(c);
    }
  }
  sf=conf.buildSessionFactory(serviceRegistry);
synchronized (sf) {
    for (    String pu : pus) {
      StatelessSession session=sf.openStatelessSession();
      if (!pu.equals(getPersistenceUnit())) {
        Collection<Class<?>> collection=classes.get(pu);
        for (        Class clazz : collection) {
          EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(clazz);
          try {
            session.createSQLQuery(""String_Node_Str"" + metadata.getTableName()).executeUpdate();
          }
 catch (          Exception e) {
          }
        }
      }
    }
  }
  return sf;
}",0.9754450583179864
176086,"/** 
 * Creates the query.
 * @param jpaQuery the jpa query
 * @return the query
 */
Query createQuery(String jpaQuery,final String persistenceUnit){
  Query query=new QueryResolver().getQueryImplementation(jpaQuery,getClient(persistenceUnit).getQueryImplementor(),this);
  return query;
}","/** 
 * Creates the query.
 * @param jpaQuery the jpa query
 * @return the query
 */
Query createQuery(String jpaQuery,final String persistenceUnit){
  Client client=getClient(persistenceUnit);
  EntityMetadata metadata=KunderaMetadataManager.getMetamodel(client.getPersistenceUnit()).getEntityMetadataMap().values().iterator().next();
  Query query=new QueryResolver().getQueryImplementation(jpaQuery,getClient(persistenceUnit).getQueryImplementor(),this,metadata);
  return query;
}",0.7477360931435963
176087,"public Query getQueryImplementation(String jpaQuery,Class queryClazz,final PersistenceDelegator persistenceDelegator){
  KunderaQuery kunderaQuery=new KunderaQuery(jpaQuery);
  kunderaQuery.isNativeQuery=true;
  Query query=null;
  try {
    Constructor constructor=queryClazz.getConstructor(KunderaQuery.class,PersistenceDelegator.class);
    query=(Query)constructor.newInstance(kunderaQuery,persistenceDelegator);
  }
 catch (  Exception e) {
    log.error(e.getMessage());
    throw new QueryHandlerException(e);
  }
  return query;
}","public Query getQueryImplementation(String jpaQuery,Class queryClazz,final PersistenceDelegator persistenceDelegator,EntityMetadata metadata){
  KunderaQuery kunderaQuery=new KunderaQuery(jpaQuery);
  kunderaQuery.isNativeQuery=true;
  try {
    Field entityClazzField=kunderaQuery.getClass().getDeclaredField(""String_Node_Str"");
    if (entityClazzField != null && !entityClazzField.isAccessible()) {
      entityClazzField.setAccessible(true);
    }
    entityClazzField.set(kunderaQuery,metadata.getEntityClazz());
  }
 catch (  Exception e) {
    log.error(e.getMessage());
    throw new QueryHandlerException(e);
  }
  Query query=null;
  try {
    Constructor constructor=queryClazz.getConstructor(KunderaQuery.class,PersistenceDelegator.class);
    query=(Query)constructor.newInstance(kunderaQuery,persistenceDelegator);
  }
 catch (  Exception e) {
    log.error(e.getMessage());
    throw new QueryHandlerException(e);
  }
  return query;
}",0.7231182795698925
176088,"Mutator getMutator(IThriftPool pool){
  IThriftPool iThriftPool=pool;
  boolean success=false;
  while (!success) {
    success=true;
    if (iThriftPool != null) {
      Node[] nodes=((CommonsBackedPool)iThriftPool).getCluster().getNodes();
      String host=nodes[0].getAddress();
      int thriftPort=((CommonsBackedPool)iThriftPool).getCluster().getConnectionConfig().getThriftPort();
      CassandraHost cassandraHost=((CassandraHostConfiguration)configuration).getCassandraHost(nodes[0].getAddress(),((CommonsBackedPool)pool).getCluster().getConnectionConfig().getThriftPort());
      if (cassandraHost.isTestOnBorrow()) {
        if (cassandraHost.isTestOnBorrow() && PelopsUtils.verifyConnection(host,thriftPort)) {
          return Pelops.createMutator(PelopsUtils.getPoolName(iThriftPool));
        }
        removePool(iThriftPool);
      }
 else {
        return Pelops.createMutator(PelopsUtils.getPoolName(iThriftPool));
      }
    }
    success=false;
    iThriftPool=getPoolUsingPolicy();
  }
  throw new KunderaException(""String_Node_Str"");
}","Mutator getMutator(IThriftPool pool){
  IThriftPool iThriftPool=pool;
  boolean success=false;
  while (!success) {
    success=true;
    if (iThriftPool != null) {
      Node[] nodes=((CommonsBackedPool)iThriftPool).getCluster().getNodes();
      String host=nodes[0].getAddress();
      int thriftPort=((CommonsBackedPool)iThriftPool).getCluster().getConnectionConfig().getThriftPort();
      CassandraHost cassandraHost=((CassandraHostConfiguration)configuration).getCassandraHost(nodes[0].getAddress(),((CommonsBackedPool)pool).getCluster().getConnectionConfig().getThriftPort());
      if (cassandraHost.isTestOnBorrow()) {
        if (cassandraHost.isTestOnBorrow() && PelopsUtils.verifyConnection(host,thriftPort)) {
          return Pelops.createMutator(PelopsUtils.getPoolName(iThriftPool));
        }
        removePool(iThriftPool);
      }
 else {
        return iThriftPool.createMutator();
      }
    }
    success=false;
    iThriftPool=getPoolUsingPolicy();
  }
  throw new KunderaException(""String_Node_Str"");
}",0.9746290090952608
176089,"@Override public void handleMerge(NodeStateContext nodeStateContext){
  Object copiedNodeData=ObjectUtils.deepCopy(nodeStateContext.getData());
  nodeStateContext.setData(copiedNodeData);
}","@Override public void handleMerge(NodeStateContext nodeStateContext){
  Object copiedNodeData=ObjectUtils.deepCopy(nodeStateContext.getData());
  nodeStateContext.setData(copiedNodeData);
  moveNodeToNextState(nodeStateContext,new ManagedState());
  nodeStateContext.getPersistenceCache().getMainCache().addNodeToCache((Node)nodeStateContext);
}",0.7078651685393258
176090,"/** 
 * Recursively fetches associated entities for a given <code>entity</code>
 * @param entity
 * @param relationsMap
 * @param client
 * @param m
 * @param pd
 * @return
 */
private Object handleAssociation(final Object entity,final Map<String,Object> relationsMap,final EntityMetadata m,final PersistenceDelegator pd,boolean lazilyloaded){
  for (  Relation relation : m.getRelations()) {
    ForeignKey relationType=relation.getType();
    Object relationalObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (KunderaCoreUtils.isEmptyOrNull(relationalObject) || ProxyHelper.isProxyOrCollection(relationalObject)) {
      onRelation(entity,relationsMap,m,pd,relation,relationType,lazilyloaded);
    }
  }
  return entity;
}","/** 
 * Recursively fetches associated entities for a given <code>entity</code>
 * @param entity
 * @param relationsMap
 * @param client
 * @param m
 * @param pd
 * @return
 */
private Object handleAssociation(final Object entity,final Map<String,Object> relationsMap,final EntityMetadata m,final PersistenceDelegator pd,boolean lazilyloaded){
  for (  Relation relation : m.getRelations()) {
    ForeignKey relationType=relation.getType();
    Object relationalObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (KunderaCoreUtils.isEmptyOrNull(relationalObject) || ProxyHelper.isProxyOrCollection(relationalObject)) {
      onRelation(entity,relationsMap,m,pd,relation,relationType,lazilyloaded);
    }
 else     if (!ProxyHelper.isProxyOrCollection(relationalObject) && Map.class.isAssignableFrom(relationalObject.getClass())) {
      Map relationalMap=(Map)relationalObject;
      for (      Map.Entry entry : (Set<Map.Entry>)relationalMap.entrySet()) {
        Object entityObject=entry.getValue();
        if (entityObject != null) {
          EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entityObject.getClass());
          PersistenceCacheManager.addEntityToPersistenceCache(entityObject,pd,PropertyAccessorHelper.getId(entityObject,metadata));
        }
      }
    }
  }
  return entity;
}",0.7180952380952381
176091,"/** 
 * Populates a relationship of type   {@link Collection} (i.e. those of type{@link Set} or {@link List})
 */
private void populateCollectionFromJoinTable(Object entity,EntityMetadata entityMetadata,PersistenceDelegator delegator,Relation relation){
  JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
  Client pClient=delegator.getClient(entityMetadata);
  String schema=entityMetadata.getSchema();
  EntityMetadata owningEntityMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
  Class columnJavaType=owningEntityMetadata.getIdAttribute().getJavaType();
  if (jtMetadata == null) {
    columnJavaType=entityMetadata.getIdAttribute().getJavaType();
    jtMetadata=owningEntityMetadata.getRelation(relation.getMappedBy()).getJoinTableMetadata();
    pClient=delegator.getClient(owningEntityMetadata);
    schema=owningEntityMetadata.getSchema();
  }
  String joinTableName=jtMetadata.getJoinTableName();
  Set<String> joinColumns=jtMetadata.getJoinColumns();
  Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
  String joinColumnName=(String)joinColumns.toArray()[0];
  String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
  Object entityId=PropertyAccessorHelper.getId(entity,entityMetadata);
  List<?> foreignKeys=pClient.getColumnsById(schema,joinTableName,joinColumnName,inverseJoinColumnName,entityId,columnJavaType);
  List childrenEntities=new ArrayList();
  if (foreignKeys != null) {
    for (    Object foreignKey : foreignKeys) {
      EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
      Object child=delegator.find(relation.getTargetEntity(),foreignKey);
      Object obj=child instanceof EnhanceEntity && child != null ? ((EnhanceEntity)child).getEntity() : child;
      Field biDirectionalField=relation.getBiDirectionalField();
      boolean isBidirectionalRelation=(biDirectionalField != null);
      if (isBidirectionalRelation && obj != null) {
        Object columnValue=PropertyAccessorHelper.getId(obj,childMetadata);
        Object[] pKeys=pClient.findIdsByColumn(entityMetadata.getSchema(),joinTableName,joinColumnName,inverseJoinColumnName,columnValue,entityMetadata.getEntityClazz());
        List parents=delegator.find(entity.getClass(),pKeys);
        PropertyAccessorHelper.set(obj,biDirectionalField,ObjectUtils.getFieldInstance(parents,biDirectionalField));
      }
      childrenEntities.add(obj);
    }
  }
  Field childField=relation.getProperty();
  try {
    PropertyAccessorHelper.set(entity,childField,PropertyAccessorHelper.isCollection(childField.getType()) ? ObjectUtils.getFieldInstance(childrenEntities,childField) : childrenEntities.get(0));
    PersistenceCacheManager.addEntityToPersistenceCache(entity,delegator,entityId);
  }
 catch (  PropertyAccessException ex) {
    throw new EntityReaderException(ex);
  }
}","/** 
 * Populates a relationship of type   {@link Collection} (i.e. those of type{@link Set} or {@link List})
 */
private void populateCollectionFromJoinTable(Object entity,EntityMetadata entityMetadata,PersistenceDelegator delegator,Relation relation){
  JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
  Client pClient=delegator.getClient(entityMetadata);
  String schema=entityMetadata.getSchema();
  EntityMetadata owningEntityMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
  Class columnJavaType=owningEntityMetadata.getIdAttribute().getJavaType();
  if (jtMetadata == null) {
    columnJavaType=entityMetadata.getIdAttribute().getJavaType();
    jtMetadata=owningEntityMetadata.getRelation(relation.getMappedBy()).getJoinTableMetadata();
    pClient=delegator.getClient(owningEntityMetadata);
    schema=owningEntityMetadata.getSchema();
  }
  String joinTableName=jtMetadata.getJoinTableName();
  Set<String> joinColumns=jtMetadata.getJoinColumns();
  Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
  String joinColumnName=(String)joinColumns.toArray()[0];
  String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
  Object entityId=PropertyAccessorHelper.getId(entity,entityMetadata);
  List<?> foreignKeys=pClient.getColumnsById(schema,joinTableName,joinColumnName,inverseJoinColumnName,entityId,columnJavaType);
  List childrenEntities=new ArrayList();
  if (foreignKeys != null) {
    for (    Object foreignKey : foreignKeys) {
      EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
      Object child=delegator.find(relation.getTargetEntity(),foreignKey);
      Object obj=child instanceof EnhanceEntity && child != null ? ((EnhanceEntity)child).getEntity() : child;
      Field biDirectionalField=relation.getBiDirectionalField();
      boolean isBidirectionalRelation=(biDirectionalField != null);
      if (isBidirectionalRelation && obj != null) {
        Object columnValue=PropertyAccessorHelper.getId(obj,childMetadata);
        Object[] pKeys=pClient.findIdsByColumn(entityMetadata.getSchema(),joinTableName,joinColumnName,inverseJoinColumnName,columnValue,entityMetadata.getEntityClazz());
        List parents=delegator.find(entity.getClass(),pKeys);
        PropertyAccessorHelper.set(obj,biDirectionalField,ObjectUtils.getFieldInstance(parents,biDirectionalField));
        PersistenceCacheManager.addEntityToPersistenceCache(obj,delegator,columnValue);
      }
      childrenEntities.add(obj);
    }
  }
  Field childField=relation.getProperty();
  try {
    PropertyAccessorHelper.set(entity,childField,PropertyAccessorHelper.isCollection(childField.getType()) ? ObjectUtils.getFieldInstance(childrenEntities,childField) : childrenEntities.get(0));
    PersistenceCacheManager.addEntityToPersistenceCache(entity,delegator,entityId);
  }
 catch (  PropertyAccessException ex) {
    throw new EntityReaderException(ex);
  }
}",0.9850136239782016
176092,"/** 
 * parse and process non unary relations {e.g. 1-M and M-M}
 * @return true, if is a non unary relation and processed.
 */
private boolean onNonUnaryRelation(){
  if (!relation.isUnary()) {
    if (Collection.class.isAssignableFrom(target.getClass())) {
      Collection childrenObjects=(Collection)target;
      for (      Object childObj : childrenObjects) {
        if (childObj != null) {
          this.generator.onBuildChildNode(childObj,metadata,this.pd,pc,source,relation);
        }
      }
    }
 else     if (Map.class.isAssignableFrom(target.getClass())) {
      Map childrenObjects=(Map)target;
      if (childrenObjects != null && !ProxyHelper.isProxyCollection(childrenObjects)) {
        for (        Map.Entry entry : (Set<Map.Entry>)childrenObjects.entrySet()) {
          Object relObject=entry.getKey();
          Object entityObject=entry.getValue();
          Node childNode=this.generator.generate(entityObject,pd,pc,null);
          if (childNode != null) {
            if (StringUtils.isEmpty(relation.getMappedBy()) && relation.getProperty().getAnnotation(MapKeyJoinColumn.class) != null) {
              NodeLink nodeLink=new NodeLink(source.getNodeId(),childNode.getNodeId());
              this.generator.setLink(source,relation,childNode,nodeLink);
              nodeLink.addLinkProperty(LinkProperty.LINK_VALUE,relObject);
            }
          }
        }
      }
    }
    return true;
  }
  return false;
}","/** 
 * parse and process non unary relations {e.g. 1-M and M-M}
 * @return true, if is a non unary relation and processed.
 */
private boolean onNonUnaryRelation(){
  if (!relation.isUnary()) {
    if (Collection.class.isAssignableFrom(target.getClass())) {
      Collection childrenObjects=(Collection)target;
      for (      Object childObj : childrenObjects) {
        if (childObj != null) {
          this.generator.onBuildChildNode(childObj,metadata,this.pd,pc,source,relation);
        }
      }
    }
 else     if (Map.class.isAssignableFrom(target.getClass())) {
      Map childrenObjects=(Map)target;
      if (childrenObjects != null && !ProxyHelper.isProxyCollection(childrenObjects)) {
        for (        Map.Entry entry : (Set<Map.Entry>)childrenObjects.entrySet()) {
          Object relObject=entry.getKey();
          Object entityObject=entry.getValue();
          if (entityObject != null) {
            Node childNode=this.generator.generate(entityObject,pd,pc,null);
            if (childNode != null) {
              if (StringUtils.isEmpty(relation.getMappedBy()) && relation.getProperty().getAnnotation(MapKeyJoinColumn.class) != null) {
                NodeLink nodeLink=new NodeLink(source.getNodeId(),childNode.getNodeId());
                this.generator.setLink(source,relation,childNode,nodeLink);
                nodeLink.addLinkProperty(LinkProperty.LINK_VALUE,relObject);
              }
            }
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.920945945945946
176093,"private void createKeyspace(){
  try {
    CassandraCli.executeCqlQuery(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}","private void createKeyspace(){
  try {
    CassandraCli.getClient().execute_cql3_query(ByteBuffer.wrap(""String_Node_Str"".getBytes(""String_Node_Str"")),Compression.NONE,ConsistencyLevel.ONE);
  }
 catch (  Exception e) {
  }
}",0.5869565217391305
176094,"/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  CassandraCli.cassandraSetUp();
  String nativeSql=""String_Node_Str"" + schema + ""String_Node_Str"";
  CassandraCli.executeCqlQuery(nativeSql,schema);
  emf=getEntityManagerFactory();
}","/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  CassandraCli.cassandraSetUp();
  String nativeSql=""String_Node_Str"" + schema + ""String_Node_Str"";
  CassandraCli.getClient().execute_cql3_query(ByteBuffer.wrap(nativeSql.getBytes(""String_Node_Str"")),Compression.NONE,ConsistencyLevel.ONE);
  emf=getEntityManagerFactory();
}",0.8320950965824666
176095,"/** 
 * Sets the up internal.
 * @param colFamilies the new up internal
 */
protected void setUpInternal(String... colFamilies){
  dao=new IMDBDaoImpl(persistenceUnits);
  em=null;
  dao.closeEntityManager();
  dao.closeEntityManagerFactory();
  em=dao.getEntityManager(persistenceUnits);
  kunderaMetadata=((EntityManagerFactoryImpl)em.getEntityManagerFactory()).getKunderaMetadataInstance();
  this.colFamilies=colFamilies;
}","/** 
 * Sets the up internal.
 * @param colFamilies the new up internal
 */
protected void setUpInternal(String... colFamilies){
  dao=new IMDBDaoImpl(persistenceUnits);
  dao.closeEntityManager();
  dao.closeEntityManagerFactory();
  em=dao.getEntityManager(persistenceUnits);
  kunderaMetadata=((EntityManagerFactoryImpl)em.getEntityManagerFactory()).getKunderaMetadataInstance();
  this.colFamilies=colFamilies;
}",0.9869513641755636
176096,"@Override public synchronized void init(Map<?,?> properties){
  if (manager != null) {
    log.warn(""String_Node_Str"");
    return;
  }
  initializing=true;
  try {
    String configurationResourceName=null;
    if (properties != null) {
      configurationResourceName=(String)properties.get(NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME);
    }
    if (configurationResourceName == null || configurationResourceName.length() == 0) {
      manager=new CacheManager();
    }
 else {
      if (!configurationResourceName.startsWith(""String_Node_Str"")) {
        configurationResourceName=""String_Node_Str"" + configurationResourceName;
        log.info(""String_Node_Str"" + configurationResourceName + ""String_Node_Str""+ ""String_Node_Str"");
      }
      URL url=loadResource(configurationResourceName);
      manager=new CacheManager(url);
    }
  }
 catch (  net.sf.ehcache.CacheException e) {
    if (e.getMessage().startsWith(""String_Node_Str"" + ""String_Node_Str"")) {
      throw new CacheException(""String_Node_Str"",e);
    }
 else {
      throw new CacheException(e);
    }
  }
 finally {
    initializing=false;
  }
}","@Override public synchronized void init(Map<?,?> properties){
  if (manager != null) {
    log.warn(""String_Node_Str"");
    return;
  }
  initializing=true;
  try {
    String configurationResourceName=null;
    if (properties != null) {
      configurationResourceName=(String)properties.get(NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME);
    }
    if (configurationResourceName == null || configurationResourceName.length() == 0) {
      manager=CacheManager.create();
    }
 else {
      if (!configurationResourceName.startsWith(""String_Node_Str"")) {
        configurationResourceName=""String_Node_Str"" + configurationResourceName;
        log.info(""String_Node_Str"" + configurationResourceName + ""String_Node_Str""+ ""String_Node_Str"");
      }
      URL url=loadResource(configurationResourceName);
      manager=CacheManager.create(url);
    }
  }
 catch (  net.sf.ehcache.CacheException e) {
    if (e.getMessage().startsWith(""String_Node_Str"" + ""String_Node_Str"")) {
      throw new CacheException(""String_Node_Str"",e);
    }
 else {
      throw new CacheException(e);
    }
  }
 finally {
    initializing=false;
  }
}",0.9901873327386262
176097,"@Override public void shutdown(){
  if (manager != null) {
    manager.shutdown();
    manager=null;
  }
  cache=null;
}","@Override public void shutdown(){
  if (manager != null) {
    manager.removalAll();
    manager=null;
  }
  cache=null;
}",0.9338842975206612
176098,"@Override public void evictAll(){
  ehcache.removeAll();
}","@Override public void evictAll(){
  if (ehcache.getStatus().equals(Status.STATUS_ALIVE)) {
    ehcache.removeAll();
  }
}",0.6480446927374302
176099,"/** 
 * Populate using lucene.
 * @param m the m
 * @param client the client
 * @param result the result
 * @param columnsToSelect List of column names to be selected (rest should be ignored)
 * @return the list
 */
protected List<Object> populateUsingLucene(EntityMetadata m,Client client,List<Object> result,String[] columnsToSelect){
  String luceneQ=getLuceneQueryFromJPAQuery();
  Map<String,Object> searchFilter=client.getIndexManager().search(m.getEntityClazz(),luceneQ,Constants.INVALID,Constants.INVALID);
  String[] primaryKeys=searchFilter.values().toArray(new String[]{});
  Set<String> uniquePKs=new HashSet<String>(Arrays.asList(primaryKeys));
  if (kunderaQuery.isAliasOnly() || !m.getType().isSuperColumnFamilyMetadata()) {
    result=(List<Object>)client.findAll(m.getEntityClazz(),columnsToSelect,uniquePKs.toArray());
  }
 else {
    return (List<Object>)persistenceDelegeator.find(m.getEntityClazz(),uniquePKs.toArray());
  }
  return result;
}","/** 
 * Populate using lucene.
 * @param m the m
 * @param client the client
 * @param result the result
 * @param columnsToSelect List of column names to be selected (rest should be ignored)
 * @return the list
 */
protected List<Object> populateUsingLucene(EntityMetadata m,Client client,List<Object> result,String[] columnsToSelect){
  String luceneQ=getLuceneQueryFromJPAQuery();
  Map<String,Object> searchFilter=client.getIndexManager().search(m.getEntityClazz(),luceneQ,Constants.INVALID,getMaxResults());
  String[] primaryKeys=searchFilter.values().toArray(new String[]{});
  Set<String> uniquePKs=new HashSet<String>(Arrays.asList(primaryKeys));
  if (kunderaQuery.isAliasOnly() || !m.getType().isSuperColumnFamilyMetadata()) {
    result=(List<Object>)client.findAll(m.getEntityClazz(),columnsToSelect,uniquePKs.toArray());
  }
 else {
    return (List<Object>)persistenceDelegeator.find(m.getEntityClazz(),uniquePKs.toArray());
  }
  return result;
}",0.9833852544132918
176100,"/** 
 * Creates MongoDB Query object from filterClauseQueue.
 * @param m the m
 * @param filterClauseQueue the filter clause queue
 * @param columns
 * @return the basic db object
 */
private BasicDBObject createMongoQuery(EntityMetadata m,Queue filterClauseQueue){
  BasicDBObject query=new BasicDBObject();
  BasicDBObject compositeColumns=new BasicDBObject();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  for (  Object object : filterClauseQueue) {
    boolean isCompositeColumn=false;
    if (object instanceof FilterClause) {
      FilterClause filter=(FilterClause)object;
      String property=filter.getProperty();
      String condition=filter.getCondition();
      Object value=filter.getValue();
      Field f=null;
      if (((AbstractAttribute)m.getIdAttribute()).getJPAColumnName().equalsIgnoreCase(property)) {
        property=""String_Node_Str"";
        f=(Field)m.getIdAttribute().getJavaMember();
        if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType()) && value.getClass().isAssignableFrom(f.getType())) {
          EmbeddableType compoundKey=metaModel.embeddable(m.getIdAttribute().getBindableJavaType());
          compositeColumns=MongoDBUtils.getCompoundKeyColumns(m,value,compoundKey);
          isCompositeColumn=true;
          continue;
        }
      }
 else       if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType()) && StringUtils.contains(property,'.')) {
        property=property.substring(property.indexOf(""String_Node_Str"") + 1);
        isCompositeColumn=true;
      }
 else {
        EntityType entity=metaModel.entity(m.getEntityClazz());
        String discriminatorColumn=((AbstractManagedType)entity).getDiscriminatorColumn();
        if (!property.equals(discriminatorColumn)) {
          String fieldName=m.getFieldName(property);
          f=(Field)entity.getAttribute(fieldName).getJavaMember();
        }
      }
      if (value.getClass().isAssignableFrom(String.class) && f != null && !f.getType().equals(value.getClass())) {
        value=PropertyAccessorFactory.getPropertyAccessor(f).fromString(f.getType().getClass(),value.toString());
      }
      value=MongoDBUtils.populateValue(value,value.getClass());
      if (f != null && f.getType().equals(Point.class)) {
        GeospatialQuery geospatialQueryimpl=GeospatialQueryFactory.getGeospatialQueryImplementor(condition,value);
        query=(BasicDBObject)geospatialQueryimpl.createGeospatialQuery(property,value,query);
      }
 else {
        if (condition.equals(""String_Node_Str"")) {
          if (isCompositeColumn) {
            compositeColumns.put(property,value);
          }
 else {
            query.append(property,value);
          }
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          if (isCompositeColumn) {
            compositeColumns.put(property,value);
          }
 else {
            query.append(property,value);
          }
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          if (isCompositeColumn) {
            compositeColumns.put(property,new BasicDBObject(""String_Node_Str"",value));
          }
 else {
            if (query.containsField(property)) {
              query.get(property);
              query.put(property,((BasicDBObject)query.get(property)).append(""String_Node_Str"",value));
            }
 else {
              query.append(property,new BasicDBObject(""String_Node_Str"",value));
            }
          }
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          if (isCompositeColumn) {
            compositeColumns.put(property,new BasicDBObject(""String_Node_Str"",value));
          }
 else {
            if (query.containsField(property)) {
              query.get(property);
              query.put(property,((BasicDBObject)query.get(property)).append(""String_Node_Str"",value));
            }
 else {
              query.append(property,new BasicDBObject(""String_Node_Str"",value));
            }
          }
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          if (isCompositeColumn) {
            compositeColumns.put(property,new BasicDBObject(""String_Node_Str"",value));
          }
 else {
            if (query.containsField(property)) {
              query.get(property);
              query.put(property,((BasicDBObject)query.get(property)).append(""String_Node_Str"",value));
            }
 else {
              query.append(property,new BasicDBObject(""String_Node_Str"",value));
            }
          }
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          if (isCompositeColumn) {
            compositeColumns.put(property,new BasicDBObject(""String_Node_Str"",value));
          }
 else {
            if (query.containsField(property)) {
              query.get(property);
              query.put(property,((BasicDBObject)query.get(property)).append(""String_Node_Str"",value));
            }
 else {
              query.append(property,new BasicDBObject(""String_Node_Str"",value));
            }
          }
        }
      }
    }
  }
  if (!compositeColumns.isEmpty()) {
    query.append(""String_Node_Str"",compositeColumns);
  }
  return query;
}","/** 
 * Creates MongoDB Query object from filterClauseQueue.
 * @param m the m
 * @param filterClauseQueue the filter clause queue
 * @param columns
 * @return the basic db object
 */
private BasicDBObject createMongoQuery(EntityMetadata m,Queue filterClauseQueue){
  BasicDBObject query=new BasicDBObject();
  BasicDBObject compositeColumns=new BasicDBObject();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  for (  Object object : filterClauseQueue) {
    boolean isCompositeColumn=false;
    if (object instanceof FilterClause) {
      FilterClause filter=(FilterClause)object;
      String property=filter.getProperty();
      String condition=filter.getCondition();
      Object value=filter.getValue();
      Field f=null;
      if (((AbstractAttribute)m.getIdAttribute()).getJPAColumnName().equalsIgnoreCase(property)) {
        property=""String_Node_Str"";
        f=(Field)m.getIdAttribute().getJavaMember();
        if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType()) && value.getClass().isAssignableFrom(f.getType())) {
          EmbeddableType compoundKey=metaModel.embeddable(m.getIdAttribute().getBindableJavaType());
          compositeColumns=MongoDBUtils.getCompoundKeyColumns(m,value,compoundKey);
          isCompositeColumn=true;
          continue;
        }
      }
 else       if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType()) && StringUtils.contains(property,'.')) {
        property=property.substring(property.indexOf(""String_Node_Str"") + 1);
        isCompositeColumn=true;
      }
 else       if (StringUtils.contains(property,'.')) {
        EntityType entity=metaModel.entity(m.getEntityClazz());
        StringTokenizer tokenizer=new StringTokenizer(property,""String_Node_Str"");
        String embeddedAttributeAsStr=tokenizer.nextToken();
        String embeddableAttributeAsStr=tokenizer.nextToken();
        Attribute embeddedAttribute=entity.getAttribute(embeddedAttributeAsStr);
        EmbeddableType embeddableEntity=metaModel.embeddable(((AbstractAttribute)embeddedAttribute).getBindableJavaType());
        f=(Field)embeddableEntity.getAttribute(embeddableAttributeAsStr).getJavaMember();
      }
 else {
        EntityType entity=metaModel.entity(m.getEntityClazz());
        String discriminatorColumn=((AbstractManagedType)entity).getDiscriminatorColumn();
        if (!property.equals(discriminatorColumn)) {
          String fieldName=m.getFieldName(property);
          f=(Field)entity.getAttribute(fieldName).getJavaMember();
        }
      }
      if (value.getClass().isAssignableFrom(String.class) && f != null && !f.getType().equals(value.getClass())) {
        value=PropertyAccessorFactory.getPropertyAccessor(f).fromString(f.getType().getClass(),value.toString());
      }
      value=MongoDBUtils.populateValue(value,value.getClass());
      if (f != null && f.getType().equals(Point.class)) {
        GeospatialQuery geospatialQueryimpl=GeospatialQueryFactory.getGeospatialQueryImplementor(condition,value);
        query=(BasicDBObject)geospatialQueryimpl.createGeospatialQuery(property,value,query);
      }
 else {
        if (condition.equals(""String_Node_Str"")) {
          if (isCompositeColumn) {
            compositeColumns.put(property,value);
          }
 else {
            query.append(property,value);
          }
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          if (isCompositeColumn) {
            compositeColumns.put(property,value);
          }
 else {
            query.append(property,value);
          }
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          if (isCompositeColumn) {
            compositeColumns.put(property,new BasicDBObject(""String_Node_Str"",value));
          }
 else {
            if (query.containsField(property)) {
              query.get(property);
              query.put(property,((BasicDBObject)query.get(property)).append(""String_Node_Str"",value));
            }
 else {
              query.append(property,new BasicDBObject(""String_Node_Str"",value));
            }
          }
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          if (isCompositeColumn) {
            compositeColumns.put(property,new BasicDBObject(""String_Node_Str"",value));
          }
 else {
            if (query.containsField(property)) {
              query.get(property);
              query.put(property,((BasicDBObject)query.get(property)).append(""String_Node_Str"",value));
            }
 else {
              query.append(property,new BasicDBObject(""String_Node_Str"",value));
            }
          }
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          if (isCompositeColumn) {
            compositeColumns.put(property,new BasicDBObject(""String_Node_Str"",value));
          }
 else {
            if (query.containsField(property)) {
              query.get(property);
              query.put(property,((BasicDBObject)query.get(property)).append(""String_Node_Str"",value));
            }
 else {
              query.append(property,new BasicDBObject(""String_Node_Str"",value));
            }
          }
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          if (isCompositeColumn) {
            compositeColumns.put(property,new BasicDBObject(""String_Node_Str"",value));
          }
 else {
            if (query.containsField(property)) {
              query.get(property);
              query.put(property,((BasicDBObject)query.get(property)).append(""String_Node_Str"",value));
            }
 else {
              query.append(property,new BasicDBObject(""String_Node_Str"",value));
            }
          }
        }
      }
    }
  }
  if (!compositeColumns.isEmpty()) {
    query.append(""String_Node_Str"",compositeColumns);
  }
  return query;
}",0.9440285204991088
176101,"@Test public void test(){
  PhoneDirectory phone=new PhoneDirectory();
  PersonalDetailEmbedded detail=new PersonalDetailEmbedded();
  detail.setPhoneNo(12456);
  detail.setEmailId(""String_Node_Str"");
  detail.setAddress(""String_Node_Str"");
  detail.setPhone(phone);
  PersonnelEmbedded personnel=new PersonnelEmbedded();
  personnel.setId(1);
  personnel.setAge(24);
  personnel.setName(""String_Node_Str"");
  personnel.setPersonalDetail(detail);
  em.persist(personnel);
  em.clear();
  PersonnelEmbedded foundPersonnel=em.find(PersonnelEmbedded.class,1);
  Assert.assertNotNull(foundPersonnel);
  Assert.assertNotNull(foundPersonnel.getPersonalDetail());
  Assert.assertNotNull(foundPersonnel.getPersonalDetail().getPhone());
  Assert.assertEquals(""String_Node_Str"",foundPersonnel.getPersonalDetail().getPhone().getContactName().get(0));
  Set<String> hashSet=new HashSet<String>();
  hashSet.add(""String_Node_Str"");
  Assert.assertEquals(hashSet,foundPersonnel.getPersonalDetail().getPhone().getContactNumber());
  List<PersonnelEmbedded> personnels=em.createQuery(""String_Node_Str"").getResultList();
  Assert.assertNotNull(personnels);
  Assert.assertFalse(personnels.isEmpty());
  Assert.assertNotNull(personnels.get(0));
  Assert.assertNotNull(personnels.get(0).getPersonalDetail());
  Assert.assertNotNull(personnels.get(0).getPersonalDetail().getPhone());
  Assert.assertEquals(""String_Node_Str"",personnels.get(0).getPersonalDetail().getPhone().getContactName().get(0));
  Assert.assertEquals(hashSet,personnels.get(0).getPersonalDetail().getPhone().getContactNumber());
  personnels=em.createQuery(""String_Node_Str"").getResultList();
  Assert.assertNotNull(personnels);
  Assert.assertFalse(personnels.isEmpty());
  Assert.assertNotNull(personnels.get(0));
  Assert.assertNotNull(personnels.get(0).getPersonalDetail());
  Assert.assertNotNull(personnels.get(0).getPersonalDetail().getPhone());
  Assert.assertEquals(""String_Node_Str"",personnels.get(0).getPersonalDetail().getPhone().getContactName().get(0));
  Assert.assertEquals(hashSet,personnels.get(0).getPersonalDetail().getPhone().getContactNumber());
}","@Test public void test(){
  PhoneDirectory phone=new PhoneDirectory();
  PersonalDetailEmbedded detail=new PersonalDetailEmbedded();
  detail.setPhoneNo(12456);
  detail.setEmailId(""String_Node_Str"");
  detail.setAddress(""String_Node_Str"");
  detail.setPhone(phone);
  PersonnelEmbedded personnel=new PersonnelEmbedded();
  personnel.setId(1);
  personnel.setAge(24);
  personnel.setName(""String_Node_Str"");
  personnel.setPersonalDetail(detail);
  em.persist(personnel);
  em.clear();
  PersonnelEmbedded foundPersonnel=em.find(PersonnelEmbedded.class,1);
  Assert.assertNotNull(foundPersonnel);
  Assert.assertNotNull(foundPersonnel.getPersonalDetail());
  Assert.assertNotNull(foundPersonnel.getPersonalDetail().getPhone());
  Assert.assertEquals(""String_Node_Str"",foundPersonnel.getPersonalDetail().getPhone().getContactName().get(0));
  Set<String> hashSet=new HashSet<String>();
  hashSet.add(""String_Node_Str"");
  Assert.assertEquals(hashSet,foundPersonnel.getPersonalDetail().getPhone().getContactNumber());
  List<PersonnelEmbedded> personnels=em.createQuery(""String_Node_Str"").getResultList();
  Assert.assertNotNull(personnels);
  Assert.assertFalse(personnels.isEmpty());
  Assert.assertNotNull(personnels.get(0));
  Assert.assertNotNull(personnels.get(0).getPersonalDetail());
  Assert.assertNotNull(personnels.get(0).getPersonalDetail().getPhone());
  Assert.assertEquals(""String_Node_Str"",personnels.get(0).getPersonalDetail().getPhone().getContactName().get(0));
  Assert.assertEquals(hashSet,personnels.get(0).getPersonalDetail().getPhone().getContactNumber());
  personnels=em.createQuery(""String_Node_Str"").getResultList();
  Assert.assertNotNull(personnels);
  Assert.assertFalse(personnels.isEmpty());
  Assert.assertNotNull(personnels.get(0));
  Assert.assertNotNull(personnels.get(0).getPersonalDetail());
  Assert.assertNotNull(personnels.get(0).getPersonalDetail().getPhone());
  Assert.assertEquals(""String_Node_Str"",personnels.get(0).getPersonalDetail().getPhone().getContactName().get(0));
  Assert.assertEquals(hashSet,personnels.get(0).getPersonalDetail().getPhone().getContactNumber());
  personnels=em.createQuery(""String_Node_Str"").getResultList();
  Assert.assertNotNull(personnels);
  Assert.assertFalse(personnels.isEmpty());
  Assert.assertNotNull(personnels.get(0));
  Assert.assertNotNull(personnels.get(0).getPersonalDetail());
  Assert.assertNotNull(personnels.get(0).getPersonalDetail().getPhone());
  Assert.assertEquals(""String_Node_Str"",personnels.get(0).getPersonalDetail().getPhone().getContactName().get(0));
  Assert.assertEquals(hashSet,personnels.get(0).getPersonalDetail().getPhone().getContactNumber());
  personnels=em.createQuery(""String_Node_Str"").getResultList();
  Assert.assertTrue(personnels.isEmpty());
  personnels=em.createQuery(""String_Node_Str"").getResultList();
  Assert.assertNotNull(personnels);
  Assert.assertFalse(personnels.isEmpty());
  Assert.assertNotNull(personnels.get(0));
  Assert.assertNotNull(personnels.get(0).getPersonalDetail());
  Assert.assertNotNull(personnels.get(0).getPersonalDetail().getPhone());
  Assert.assertEquals(""String_Node_Str"",personnels.get(0).getPersonalDetail().getPhone().getContactName().get(0));
  Assert.assertEquals(hashSet,personnels.get(0).getPersonalDetail().getPhone().getContactNumber());
}",0.7814862622164853
176102,"@Override public boolean contains(Class arg0,Object arg1){
  return (ehcache.get(arg1) != null);
}","@Override public boolean contains(Class arg0,Object arg1){
  if (isAlive()) {
    return (ehcache.get(arg1) != null);
  }
  return false;
}",0.8270042194092827
176103,"@Override public void evictAll(){
  if (ehcache.getStatus().equals(Status.STATUS_ALIVE)) {
    ehcache.removeAll();
  }
}","@Override public void evictAll(){
  if (isAlive()) {
    ehcache.removeAll();
  }
}",0.7549019607843137
176104,"@Override public int size(){
  return ehcache.getSize();
}","@Override public int size(){
  if (isAlive()) {
    return ehcache.getSize();
  }
  return 0;
}",0.7581699346405228
176105,"@Override public Object get(Object key){
  Element element=ehcache.get(key);
  return element == null ? null : element.getObjectValue();
}","@Override public Object get(Object key){
  Element element=null;
  if (isAlive()) {
    element=ehcache.get(key);
  }
  return element == null ? null : element.getObjectValue();
}",0.8706624605678234
176106,"@Override public void put(Object key,Object value){
  ehcache.put(new Element(key,value));
}","@Override public void put(Object key,Object value){
  if (isAlive())   ehcache.put(new Element(key,value));
}",0.9154228855721394
176107,"@Override public void evict(Class arg0,Object arg1){
  ehcache.remove(arg1);
}","@Override public void evict(Class arg0,Object arg1){
  if (isAlive())   ehcache.remove(arg1);
}",0.9017341040462428
176108,"/** 
 * Translates kundera query into collection of to be applied HBase filter/s.
 * @param query kundera query.
 * @param m entity's metadata.
 */
void translate(KunderaQuery query,EntityMetadata m,ClientMetadata clientMetadata){
  String idColumn=((AbstractAttribute)m.getIdAttribute()).getJPAColumnName();
  for (  Object obj : query.getFilterClauseQueue()) {
    boolean isIdColumn=false;
    if (obj instanceof FilterClause) {
      String condition=((FilterClause)obj).getCondition();
      String name=((FilterClause)obj).getProperty();
      Object value=((FilterClause)obj).getValue();
      if (idColumn.equalsIgnoreCase(name)) {
        isIdColumn=true;
      }
      onParseFilter(condition,name,value,isIdColumn,m);
    }
 else {
      String opr=obj.toString();
      if (MetadataUtils.useSecondryIndex(clientMetadata)) {
        if (opr.trim().equalsIgnoreCase(""String_Node_Str"")) {
          log.error(""String_Node_Str"");
          throw new QueryHandlerException(""String_Node_Str"" + opr + ""String_Node_Str"");
        }
      }
    }
  }
}","/** 
 * Translates kundera query into collection of to be applied HBase filter/s.
 * @param query kundera query.
 * @param m entity's metadata.
 */
void translate(KunderaQuery query,EntityMetadata m,ClientMetadata clientMetadata){
  String idColumn=((AbstractAttribute)m.getIdAttribute()).getJPAColumnName();
  boolean useFilter=MetadataUtils.useSecondryIndex(clientMetadata);
  for (  Object obj : query.getFilterClauseQueue()) {
    boolean isIdColumn=false;
    if (obj instanceof FilterClause) {
      String condition=((FilterClause)obj).getCondition();
      String name=((FilterClause)obj).getProperty();
      Object value=((FilterClause)obj).getValue();
      if (idColumn.equalsIgnoreCase(name)) {
        isIdColumn=true;
      }
      onParseFilter(condition,name,value,isIdColumn,m,useFilter);
    }
 else {
      String opr=obj.toString();
      if (MetadataUtils.useSecondryIndex(clientMetadata)) {
        if (opr.trim().equalsIgnoreCase(""String_Node_Str"")) {
          log.error(""String_Node_Str"");
          throw new QueryHandlerException(""String_Node_Str"" + opr + ""String_Node_Str"");
        }
      }
    }
  }
}",0.9643510054844608
176109,"/** 
 * On parsing filter clause(e.g. WHERE clause).
 * @param condition condition
 * @param name column name.
 * @param value column value.
 * @param isIdColumn if it is an id column.
 * @param m entity metadata.
 */
private void onParseFilter(String condition,String name,Object value,boolean isIdColumn,EntityMetadata m){
  CompareOp operator=HBaseUtils.getOperator(condition,isIdColumn);
  byte[] valueInBytes=getBytes(name,m,value);
  if (!isIdColumn) {
    List<String> columns=null;
    if (new StringTokenizer(name,""String_Node_Str"").countTokens() > 1) {
      columns=getTranslatedColumns(m,new String[]{name},0);
    }
    if (columns != null && !columns.isEmpty()) {
      name=columns.get(0);
    }
    Filter f=new SingleColumnValueFilter(Bytes.toBytes(m.getTableName()),Bytes.toBytes(name),operator,valueInBytes);
    addToFilter(f);
  }
 else {
    if (operator.equals(CompareOp.GREATER_OR_EQUAL) || operator.equals(CompareOp.GREATER)) {
      startRow=valueInBytes;
    }
 else     if (operator.equals(CompareOp.LESS_OR_EQUAL) || operator.equals(CompareOp.LESS)) {
      endRow=valueInBytes;
    }
 else     if (operator.equals(CompareOp.EQUAL)) {
      rowKey=getBytes(m.getIdAttribute().getName(),m,value);
      endRow=null;
      isFindById=true;
    }
  }
  this.isIdColumn=isIdColumn;
}","/** 
 * On parsing filter clause(e.g. WHERE clause).
 * @param condition condition
 * @param name column name.
 * @param value column value.
 * @param isIdColumn if it is an id column.
 * @param m entity metadata.
 */
private void onParseFilter(String condition,String name,Object value,boolean isIdColumn,EntityMetadata m,boolean useFilter){
  CompareOp operator=HBaseUtils.getOperator(condition,isIdColumn,useFilter);
  byte[] valueInBytes=getBytes(name,m,value);
  if (!isIdColumn) {
    List<String> columns=null;
    if (new StringTokenizer(name,""String_Node_Str"").countTokens() > 1) {
      columns=getTranslatedColumns(m,new String[]{name},0);
    }
    if (columns != null && !columns.isEmpty()) {
      name=columns.get(0);
    }
    Filter f=new SingleColumnValueFilter(Bytes.toBytes(m.getTableName()),Bytes.toBytes(name),operator,valueInBytes);
    addToFilter(f);
  }
 else {
    if (operator.equals(CompareOp.GREATER_OR_EQUAL) || operator.equals(CompareOp.GREATER)) {
      startRow=valueInBytes;
    }
 else     if (operator.equals(CompareOp.LESS_OR_EQUAL) || operator.equals(CompareOp.LESS)) {
      endRow=valueInBytes;
    }
 else     if (operator.equals(CompareOp.EQUAL)) {
      rowKey=getBytes(m.getIdAttribute().getName(),m,value);
      endRow=null;
      isFindById=true;
    }
  }
  this.isIdColumn=isIdColumn;
}",0.989409984871407
176110,"/** 
 * Gets the operator.
 * @param condition the condition
 * @param idPresent the id present
 * @return the operator
 */
public static CompareOp getOperator(String condition,boolean idPresent){
  if (condition.equals(""String_Node_Str"")) {
    return CompareOp.EQUAL;
  }
 else   if (condition.equals(""String_Node_Str"")) {
    return CompareOp.GREATER;
  }
 else   if (condition.equals(""String_Node_Str"")) {
    return CompareOp.LESS;
  }
 else   if (condition.equals(""String_Node_Str"")) {
    return CompareOp.GREATER_OR_EQUAL;
  }
 else   if (condition.equals(""String_Node_Str"")) {
    return CompareOp.LESS_OR_EQUAL;
  }
 else {
    if (!idPresent) {
      throw new UnsupportedOperationException(""String_Node_Str"" + condition + ""String_Node_Str"");
    }
 else {
      throw new UnsupportedOperationException(""String_Node_Str"" + condition + ""String_Node_Str"");
    }
  }
}","/** 
 * Gets the operator.
 * @param condition the condition
 * @param idPresent the id present
 * @return the operator
 */
public static CompareOp getOperator(String condition,boolean idPresent,boolean useFilter){
  if (condition.equals(""String_Node_Str"")) {
    return CompareOp.EQUAL;
  }
 else   if (condition.equals(""String_Node_Str"")) {
    return CompareOp.GREATER;
  }
 else   if (condition.equals(""String_Node_Str"")) {
    return CompareOp.LESS;
  }
 else   if (condition.equals(""String_Node_Str"")) {
    return CompareOp.GREATER_OR_EQUAL;
  }
 else   if (condition.equals(""String_Node_Str"")) {
    return CompareOp.LESS_OR_EQUAL;
  }
 else   if (useFilter) {
    if (!idPresent) {
      throw new UnsupportedOperationException(""String_Node_Str"" + condition + ""String_Node_Str"");
    }
 else {
      throw new UnsupportedOperationException(""String_Node_Str"" + condition + ""String_Node_Str"");
    }
  }
  return null;
}",0.9722838137472284
176111,"@Test public void testOneToMany() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
  AddressU1M address1=new AddressU1M();
  address1.setAddressId(""String_Node_Str"");
  address1.setStreet(""String_Node_Str"");
  AddressU1M address2=new AddressU1M();
  address2.setAddressId(""String_Node_Str"");
  address2.setStreet(""String_Node_Str"");
  Set<AddressU1M> addressess=new HashSet<AddressU1M>();
  addressess.add(address1);
  addressess.add(address2);
  PersonU1M p1=new PersonU1M();
  p1.setPersonName(""String_Node_Str"");
  p1.setPersonId(""String_Node_Str"");
  p1.setAddresses(addressess);
  em.persist(p1);
  PersistenceDelegator delegator=CoreTestUtilities.getDelegator(em);
  Map<String,Object> relationMap=null;
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(PersonU1M.class);
  CoreTestEntityReader reader=new CoreTestEntityReader();
  p1.setAddresses(null);
  reader.recursivelyFindEntities(p1,relationMap,metadata,delegator,false);
  Assert.assertNotNull(p1.getAddresses());
  Assert.assertTrue(ProxyHelper.isKunderaProxyCollection(p1.getAddresses()));
  p1.setAddresses(null);
  reader.recursivelyFindEntities(p1,relationMap,metadata,delegator,true);
  Assert.assertNotNull(p1.getAddresses());
  Assert.assertFalse(ProxyHelper.isKunderaProxyCollection(p1.getAddresses()));
}","@Test public void testOneToMany() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
  AddressU1M address1=new AddressU1M();
  address1.setAddressId(""String_Node_Str"");
  address1.setStreet(""String_Node_Str"");
  AddressU1M address2=new AddressU1M();
  address2.setAddressId(""String_Node_Str"");
  address2.setStreet(""String_Node_Str"");
  Set<AddressU1M> addressess=new HashSet<AddressU1M>();
  addressess.add(address1);
  addressess.add(address2);
  PersonU1M p1=new PersonU1M();
  p1.setPersonName(""String_Node_Str"");
  p1.setPersonId(""String_Node_Str"");
  p1.setAddresses(addressess);
  em.persist(p1);
  PersistenceDelegator delegator=CoreTestUtilities.getDelegator(em);
  Map<String,Object> relationMap=null;
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(PersonU1M.class);
  CoreTestEntityReader reader=new CoreTestEntityReader();
  p1.setAddresses(null);
  reader.recursivelyFindEntities(p1,relationMap,metadata,delegator,false);
  Assert.assertNotNull(p1.getAddresses());
  Assert.assertTrue(ProxyHelper.isKunderaProxyCollection(p1.getAddresses()));
  reader.recursivelyFindEntities(p1,relationMap,metadata,delegator,true);
  Assert.assertNotNull(p1.getAddresses());
  Assert.assertFalse(ProxyHelper.isKunderaProxyCollection(p1.getAddresses()));
}",0.990626171728534
176112,"@Override public final void process(final Class<?> entityClass,EntityMetadata metadata){
  EntityListeners entityListeners=(EntityListeners)entityClass.getAnnotation(EntityListeners.class);
  if (entityListeners != null) {
    Class<?>[] entityListenerClasses=entityListeners.value();
    if (entityListenerClasses != null) {
      for (      Class<?> entityListener : entityListenerClasses) {
        try {
          entityListener.getConstructor();
        }
 catch (        NoSuchMethodException nsme) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityListener.getName() + ""String_Node_Str"");
        }
        for (        Method method : entityListener.getDeclaredMethods()) {
          List<Class<?>> jpaAnnotations=getValidJPAAnnotationsFromMethod(entityListener,method,1,entityClass);
          for (          Class<?> jpaAnnotation : jpaAnnotations) {
            CallbackMethod callBackMethod=new ExternalCallbackMethod(entityListener,method);
            addCallBackMethod(metadata,jpaAnnotation,callBackMethod);
          }
        }
      }
    }
  }
  for (  Method method : entityClass.getDeclaredMethods()) {
    List<Class<?>> jpaAnnotations=getValidJPAAnnotationsFromMethod(entityClass,method,0,entityClass);
    for (    Class<?> jpaAnnotation : jpaAnnotations) {
      CallbackMethod callbackMethod=new InternalCallbackMethod(metadata,method);
      addCallBackMethod(metadata,jpaAnnotation,callbackMethod);
    }
  }
}","@Override public final void process(final Class<?> entityClass,EntityMetadata metadata){
  EntityListeners entityListeners=(EntityListeners)entityClass.getAnnotation(EntityListeners.class);
  if (entityListeners != null) {
    Class<?>[] entityListenerClasses=entityListeners.value();
    if (entityListenerClasses != null) {
      for (      Class<?> entityListener : entityListenerClasses) {
        try {
          entityListener.getConstructor();
        }
 catch (        NoSuchMethodException nsme) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityListener.getName() + ""String_Node_Str"");
        }
        for (        Method method : entityListener.getDeclaredMethods()) {
          List<Class<?>> jpaAnnotations=getValidJPAAnnotationsFromMethod(entityListener,method,1,entityClass);
          for (          Class<?> jpaAnnotation : jpaAnnotations) {
            CallbackMethod callBackMethod=new ExternalCallbackMethod(entityListener,method);
            addCallBackMethod(metadata,jpaAnnotation,callBackMethod);
          }
        }
      }
    }
  }
  for (  Method method : entityClass.getMethods()) {
    List<Class<?>> jpaAnnotations=getValidJPAAnnotationsFromMethod(entityClass,method,0,entityClass);
    for (    Class<?> jpaAnnotation : jpaAnnotations) {
      CallbackMethod callbackMethod=new InternalCallbackMethod(metadata,method);
      addCallBackMethod(metadata,jpaAnnotation,callbackMethod);
    }
  }
}",0.9972565157750344
176113,"/** 
 * On column or super column thrift row.
 * @param tr the tr
 * @param m the m
 * @param e the e
 * @param id the id
 * @param timestamp the timestamp2
 * @param columnTTLs TODO
 */
private Collection<ThriftRow> onColumnOrSuperColumnThriftRow(EntityMetadata m,Object e,Object id,long timestamp,Object columnTTLs){
  Map<String,ThriftRow> thriftRows=new HashMap<String,ThriftRow>();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entityType=metaModel.entity(m.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  for (  Attribute attribute : attributes) {
    String tableName=((AbstractAttribute)attribute).getTableName() != null ? ((AbstractAttribute)attribute).getTableName() : m.getTableName();
    ThriftRow tr=getThriftRow(id,tableName,thriftRows);
    if (!attribute.getName().equals(m.getIdAttribute().getName()) && !attribute.isAssociation()) {
      Field field=(Field)((Attribute)attribute).getJavaMember();
      byte[] name=PropertyAccessorFactory.STRING.toBytes(((AbstractAttribute)attribute).getJPAColumnName());
      if (metaModel.isEmbeddable(attribute.isCollection() ? ((PluralAttribute)attribute).getBindableJavaType() : attribute.getJavaType())) {
        Map<String,Object> thriftSuperColumns=onEmbeddable(timestamp,tr,m,e,id,attribute);
        if (thriftSuperColumns != null) {
          for (          String columnFamilyName : thriftSuperColumns.keySet()) {
            ThriftRow thriftRow=getThriftRow(id,columnFamilyName,thriftRows);
            if (m.isCounterColumnType()) {
              thriftRow.addCounterSuperColumn((CounterSuperColumn)thriftSuperColumns.get(columnFamilyName));
            }
 else {
              thriftRow.addSuperColumn((SuperColumn)thriftSuperColumns.get(columnFamilyName));
            }
          }
        }
      }
 else {
        Object value=getColumnValue(m,e,attribute);
        if (m.getType().equals(Type.SUPER_COLUMN_FAMILY)) {
          prepareSuperColumn(tr,m,value,name,timestamp);
        }
 else {
          int ttl=getTTLForColumn(columnTTLs,attribute);
          prepareColumn(tr,m,value,name,timestamp,ttl);
        }
      }
    }
  }
  onDiscriminatorColumn(thriftRows.get(m.getTableName()),timestamp,entityType);
  return thriftRows.values();
}","/** 
 * On column or super column thrift row.
 * @param tr the tr
 * @param m the m
 * @param e the e
 * @param id the id
 * @param timestamp the timestamp2
 * @param columnTTLs TODO
 */
private Collection<ThriftRow> onColumnOrSuperColumnThriftRow(EntityMetadata m,Object e,Object id,long timestamp,Object columnTTLs){
  Map<String,ThriftRow> thriftRows=new HashMap<String,ThriftRow>();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entityType=metaModel.entity(m.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  for (  Attribute attribute : attributes) {
    String tableName=((AbstractAttribute)attribute).getTableName() != null ? ((AbstractAttribute)attribute).getTableName() : m.getTableName();
    ThriftRow tr=getThriftRow(id,tableName,thriftRows);
    if (!attribute.getName().equals(m.getIdAttribute().getName()) && !attribute.isAssociation()) {
      Field field=(Field)((Attribute)attribute).getJavaMember();
      byte[] name=ByteBufferUtil.bytes(((AbstractAttribute)attribute).getJPAColumnName()).array();
      if (metaModel.isEmbeddable(attribute.isCollection() ? ((PluralAttribute)attribute).getBindableJavaType() : attribute.getJavaType())) {
        Map<String,Object> thriftSuperColumns=onEmbeddable(timestamp,tr,m,e,id,attribute);
        if (thriftSuperColumns != null) {
          for (          String columnFamilyName : thriftSuperColumns.keySet()) {
            ThriftRow thriftRow=getThriftRow(id,columnFamilyName,thriftRows);
            if (m.isCounterColumnType()) {
              thriftRow.addCounterSuperColumn((CounterSuperColumn)thriftSuperColumns.get(columnFamilyName));
            }
 else {
              thriftRow.addSuperColumn((SuperColumn)thriftSuperColumns.get(columnFamilyName));
            }
          }
        }
      }
 else {
        Object value=getColumnValue(m,e,attribute);
        if (m.getType().equals(Type.SUPER_COLUMN_FAMILY)) {
          prepareSuperColumn(tr,m,value,name,timestamp);
        }
 else {
          int ttl=getTTLForColumn(columnTTLs,attribute);
          prepareColumn(tr,m,value,name,timestamp,ttl);
        }
      }
    }
  }
  onDiscriminatorColumn(thriftRows.get(m.getTableName()),timestamp,entityType);
  return thriftRows.values();
}",0.988034188034188
176114,"/** 
 * Creates the inverted index table.
 * @param tableInfo the table info
 * @throws InvalidRequestException the invalid request exception
 * @throws SchemaDisagreementException the schema disagreement exception
 * @throws TException the t exception
 */
private void createInvertedIndexTable(TableInfo tableInfo) throws InvalidRequestException, SchemaDisagreementException, TException {
  CfDef cfDef=getInvertedIndexCF(tableInfo);
  if (cfDef != null) {
    cassandra_client.system_add_column_family(cfDef);
  }
}","/** 
 * Creates the inverted index table.
 * @param tableInfo the table info
 * @throws Exception 
 */
private void createInvertedIndexTable(TableInfo tableInfo,KsDef ksDef) throws Exception {
  CfDef cfDef=getInvertedIndexCF(tableInfo);
  if (cfDef != null) {
    try {
      cassandra_client.system_add_column_family(cfDef);
    }
 catch (    InvalidRequestException irex) {
      updateExistingColumnFamily(tableInfo,ksDef,irex);
    }
  }
}",0.2643080124869927
176115,"/** 
 * @param tableInfos
 * @throws InvalidRequestException
 * @throws SchemaDisagreementException
 * @throws TException
 * @throws UnsupportedEncodingException
 * @throws NotFoundException
 * @throws UnavailableException
 * @throws TimedOutException
 */
private void createColumnFamilies(List<TableInfo> tableInfos,KsDef ksDef) throws Exception {
  for (  TableInfo tableInfo : tableInfos) {
    createOrUpdateColumnFamily(tableInfo,ksDef);
    createInvertedIndexTable(tableInfo);
  }
}","/** 
 * @param tableInfos
 * @throws InvalidRequestException
 * @throws SchemaDisagreementException
 * @throws TException
 * @throws UnsupportedEncodingException
 * @throws NotFoundException
 * @throws UnavailableException
 * @throws TimedOutException
 */
private void createColumnFamilies(List<TableInfo> tableInfos,KsDef ksDef) throws Exception {
  for (  TableInfo tableInfo : tableInfos) {
    createOrUpdateColumnFamily(tableInfo,ksDef);
    createInvertedIndexTable(tableInfo,ksDef);
  }
}",0.9939024390243902
176116,"/** 
 * Append range.
 * @param value the value
 * @param inclusive the inclusive
 * @param isGreaterThan the is greater than
 * @return the string
 */
private String appendRange(final String value,final boolean inclusive,final boolean isGreaterThan,final Class clazz){
  String appender=""String_Node_Str"";
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(inclusive ? ""String_Node_Str"" : ""String_Node_Str"");
  sb.append(isGreaterThan ? value : ""String_Node_Str"");
  sb.append(appender);
  sb.append(""String_Node_Str"");
  sb.append(appender);
  if (clazz != null && clazz.isAssignableFrom(int.class) || clazz.isAssignableFrom(Integer.class) || clazz.isAssignableFrom(short.class) || clazz.isAssignableFrom(long.class) || clazz.isAssignableFrom(Long.class) || clazz.isAssignableFrom(float.class) || clazz.isAssignableFrom(Float.class) || clazz.isAssignableFrom(BigDecimal.class) || clazz.isAssignableFrom(Double.class) || clazz.isAssignableFrom(double.class)) {
    sb.append(isGreaterThan ? ""String_Node_Str"" : value);
  }
 else {
    sb.append(isGreaterThan ? ""String_Node_Str"" : value);
  }
  sb.append(inclusive ? ""String_Node_Str"" : ""String_Node_Str"");
  return sb.toString();
}","/** 
 * Append range.
 * @param value the value
 * @param inclusive the inclusive
 * @param isGreaterThan the is greater than
 * @return the string
 */
private String appendRange(final String value,final boolean inclusive,final boolean isGreaterThan,final Class clazz){
  String appender=""String_Node_Str"";
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(inclusive ? ""String_Node_Str"" : ""String_Node_Str"");
  sb.append(isGreaterThan ? value : ""String_Node_Str"");
  sb.append(appender);
  sb.append(""String_Node_Str"");
  sb.append(appender);
  if (clazz != null && (clazz.isAssignableFrom(int.class) || clazz.isAssignableFrom(Integer.class) || clazz.isAssignableFrom(short.class)|| clazz.isAssignableFrom(long.class)|| clazz.isAssignableFrom(Long.class)|| clazz.isAssignableFrom(float.class)|| clazz.isAssignableFrom(Float.class)|| clazz.isAssignableFrom(BigDecimal.class)|| clazz.isAssignableFrom(Double.class)|| clazz.isAssignableFrom(double.class))) {
    sb.append(isGreaterThan ? ""String_Node_Str"" : value);
  }
 else {
    sb.append(isGreaterThan ? ""String_Node_Str"" : value);
  }
  sb.append(inclusive ? ""String_Node_Str"" : ""String_Node_Str"");
  return sb.toString();
}",0.9962917181705808
176117,"/** 
 * Executes query string using cql3.
 * @param cqlQuery
 * @return
 * @throws InvalidRequestException
 * @throws UnavailableException
 * @throws TimedOutException
 * @throws SchemaDisagreementException
 * @throws TException
 */
protected CqlResult executeCQLQuery(String cqlQuery,boolean isCql3Enabled){
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  pooledConnection=getConection();
  conn=getConnection(pooledConnection);
  try {
    if (isCql3Enabled || isCql3Enabled()) {
      return conn.execute_cql3_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE,consistencyLevel);
    }
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",cqlQuery);
    }
    return conn.execute_cql_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE);
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"",cqlQuery,ex);
    throw new PersistenceException(ex);
  }
 finally {
    releaseConnection(pooledConnection);
  }
}","/** 
 * Executes query string using cql3.
 * @param cqlQuery
 * @return
 * @throws InvalidRequestException
 * @throws UnavailableException
 * @throws TimedOutException
 * @throws SchemaDisagreementException
 * @throws TException
 */
protected CqlResult executeCQLQuery(String cqlQuery,boolean isCql3Enabled){
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  pooledConnection=getConection();
  conn=getConnection(pooledConnection);
  try {
    if (isCql3Enabled || isCql3Enabled()) {
      return conn.execute_cql3_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE,consistencyLevel);
    }
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",cqlQuery);
    }
    return conn.execute_cql_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE);
  }
 catch (  Exception ex) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",cqlQuery,ex);
    }
    throw new PersistenceException(ex);
  }
 finally {
    releaseConnection(pooledConnection);
  }
}",0.9805068226120858
176118,"@Test public void onInClause(){
  emf=Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  CassandraPrimeUser user1=new CassandraPrimeUser(key);
  user1.setTweetBody(""String_Node_Str"");
  user1.setTweetDate(currentDate);
  em.persist(user1);
  key=new CassandraCompoundKey(""String_Node_Str"",2,timeLineId);
  CassandraPrimeUser user2=new CassandraPrimeUser(key);
  user2.setTweetBody(""String_Node_Str"");
  user2.setTweetDate(currentDate);
  em.persist(user2);
  key=new CassandraCompoundKey(""String_Node_Str"",3,timeLineId);
  CassandraPrimeUser user3=new CassandraPrimeUser(key);
  user3.setTweetBody(""String_Node_Str"");
  user3.setTweetDate(currentDate);
  em.persist(user3);
  em.flush();
  em.clear();
  String inClause=""String_Node_Str"";
  Query q=em.createQuery(inClause);
  List<CassandraPrimeUser> results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertEquals(""String_Node_Str"",results.get(1).getTweetBody());
  Assert.assertEquals(""String_Node_Str"",results.get(2).getTweetBody());
  Assert.assertEquals(3,results.size());
  inClause=""String_Node_Str"";
  q=em.createQuery(inClause);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertEquals(""String_Node_Str"",results.get(1).getTweetBody());
  Assert.assertEquals(""String_Node_Str"",results.get(2).getTweetBody());
  Assert.assertEquals(3,results.size());
  inClause=""String_Node_Str"";
  q=em.createQuery(inClause);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertEquals(""String_Node_Str"",results.get(1).getTweetBody());
  Assert.assertEquals(2,results.size());
  try {
    inClause=""String_Node_Str"";
    q=em.createQuery(inClause);
    results=q.getResultList();
    Assert.fail();
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
}","@Test public void onInClause(){
  emf=Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  CassandraPrimeUser user1=new CassandraPrimeUser(key);
  user1.setTweetBody(""String_Node_Str"");
  user1.setTweetDate(currentDate);
  em.persist(user1);
  key=new CassandraCompoundKey(""String_Node_Str"",2,timeLineId);
  CassandraPrimeUser user2=new CassandraPrimeUser(key);
  user2.setTweetBody(""String_Node_Str"");
  user2.setTweetDate(currentDate);
  em.persist(user2);
  key=new CassandraCompoundKey(""String_Node_Str"",3,timeLineId);
  CassandraPrimeUser user3=new CassandraPrimeUser(key);
  user3.setTweetBody(""String_Node_Str"");
  user3.setTweetDate(currentDate);
  em.persist(user3);
  em.flush();
  em.clear();
  String inClause=""String_Node_Str"";
  Query q=em.createQuery(inClause);
  List<CassandraPrimeUser> results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertEquals(""String_Node_Str"",results.get(1).getTweetBody());
  Assert.assertEquals(""String_Node_Str"",results.get(2).getTweetBody());
  Assert.assertEquals(3,results.size());
  inClause=""String_Node_Str"";
  q=em.createQuery(inClause);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertEquals(""String_Node_Str"",results.get(1).getTweetBody());
  Assert.assertEquals(""String_Node_Str"",results.get(2).getTweetBody());
  Assert.assertEquals(3,results.size());
  inClause=""String_Node_Str"";
  q=em.createQuery(inClause);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertEquals(""String_Node_Str"",results.get(1).getTweetBody());
  Assert.assertEquals(2,results.size());
  try {
    inClause=""String_Node_Str"";
    q=em.createQuery(inClause);
    results=q.getResultList();
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
}",0.991714995857498
176119,"/** 
 * Insert a record in the database. Any field/value pairs in the specified values HashMap will be written into the record with the specified record key.
 * @param table The name of the table
 * @param key The record key of the record to insert.
 * @param values A HashMap of field/value pairs to insert in the record
 * @return Zero on success, a non-zero error code on error
 */
public int insert(String table,String key,HashMap<String,ByteIterator> values){
  if (em == null || !em.isOpen()) {
    em=emf.createEntityManager();
  }
  try {
    HBaseUser u=new HBaseUser(key,getString(key,""String_Node_Str""),getString(key,""String_Node_Str""),getString(key,""String_Node_Str""));
    em.persist(u);
    j++;
    if (j % 5000 == 0) {
      em.clear();
    }
    return Ok;
  }
 catch (  Exception e) {
    logger.error(e);
    return Error;
  }
}","/** 
 * Insert a record in the database. Any field/value pairs in the specified values HashMap will be written into the record with the specified record key.
 * @param table The name of the table
 * @param key The record key of the record to insert.
 * @param values A HashMap of field/value pairs to insert in the record
 * @return Zero on success, a non-zero error code on error
 */
public int insert(String table,String key,HashMap<String,ByteIterator> values){
  try {
    HBaseUser u=new HBaseUser(key,getString(key,""String_Node_Str""),getString(key,""String_Node_Str""),getString(key,""String_Node_Str""));
    em.persist(u);
    j++;
    if (j % 5000 == 0) {
      em.clear();
    }
    return Ok;
  }
 catch (  Exception e) {
    logger.error(e);
    return Error;
  }
}",0.9543209876543208
176120,"/** 
 * @param tableName
 * @param entity
 * @param rowId
 * @param metaModel
 * @param attributes
 * @param columnWrapper
 * @param persistentData
 * @return
 * @throws IOException
 */
public Map<String,HBaseDataWrapper> preparePersistentData(String tableName,String columnFamily,Object entity,Object rowId,MetamodelImpl metaModel,Set<Attribute> attributes,HBaseDataWrapper columnWrapper,List<HBaseDataWrapper> persistentData) throws IOException {
  Map<String,HBaseDataWrapper> persistentDataWrappers=new HashMap<String,HBaseDataWrapper>();
  persistentDataWrappers.put(columnFamily,columnWrapper);
  for (  Attribute column : attributes) {
    String fieldName=((AbstractAttribute)column).getJPAColumnName();
    String columFamilyTableName=((AbstractAttribute)column).getTableName() != null ? ((AbstractAttribute)column).getTableName() : columnFamily;
    addColumnFamilyToTable(tableName,columFamilyTableName);
    persistentDataWrappers=getHBaseWrapperObj(rowId,entity,columFamilyTableName,persistentDataWrappers,persistentData);
    columnWrapper=persistentDataWrappers.get(columFamilyTableName);
    columnWrapper.setColumnFamily(columFamilyTableName);
    Class javaType=((AbstractAttribute)column).getBindableJavaType();
    if (metaModel.isEmbeddable(javaType)) {
      String columnFamilyName=((AbstractAttribute)column).getJPAColumnName();
      Field columnFamilyField=(Field)column.getJavaMember();
      Object columnFamilyObject=null;
      try {
        columnFamilyObject=PropertyAccessorHelper.getObject(entity,columnFamilyField);
      }
 catch (      PropertyAccessException paex) {
        log.error(""String_Node_Str"",columnFamilyName,entity);
        throw new KunderaException(paex);
      }
      if (columnFamilyObject != null) {
        Set<Attribute> columns=metaModel.embeddable(javaType).getAttributes();
        Map<String,Attribute> columnNameToAttribute=new HashMap<String,Attribute>();
        Map<String,Object> columnNameToValue=new HashMap<String,Object>();
        if (column.isCollection()) {
          String dynamicCFName=null;
          ElementCollectionCacheManager ecCacheHandler=ElementCollectionCacheManager.getInstance();
          if (ecCacheHandler.isCacheEmpty()) {
            int count=0;
            for (            Object obj : (Collection)columnFamilyObject) {
              String embeddableColumFamilyName=columFamilyTableName;
              Map<Map<String,Class<?>>,HBaseDataWrapper> embeDaableDataWrappers=new HashMap<Map<String,Class<?>>,HBaseDataWrapper>();
              for (              Attribute attribute : columns) {
                embeddableColumFamilyName=((AbstractAttribute)attribute).getTableName() != null ? ((AbstractAttribute)attribute).getTableName() : columFamilyTableName;
                String columnName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + ((AbstractAttribute)attribute).getJPAColumnName()+ Constants.EMBEDDED_COLUMN_NAME_DELIMITER+ count;
                Map<String,Class<?>> embeddableMap=new HashMap<String,Class<?>>();
                embeddableMap.put(embeddableColumFamilyName,obj.getClass());
                embeDaableDataWrappers=getEmbeddableHBaseWrapperObj(rowId,obj,embeddableColumFamilyName,embeDaableDataWrappers,persistentData,embeddableMap);
                HBaseDataWrapper embeddableColumnWrapper=embeDaableDataWrappers.get(embeddableMap);
                embeddableColumnWrapper.setColumnFamily(embeddableColumFamilyName);
                embeddableColumnWrapper.addColumn(columnName,attribute);
                embeddableColumnWrapper.addValue(columnName,PropertyAccessorHelper.getObject(obj,(Field)attribute.getJavaMember()));
              }
              count++;
            }
          }
 else {
            int lastEmbeddedObjectCount=ecCacheHandler.getLastElementCollectionObjectCount(rowId);
            for (            Object obj : (Collection)columnFamilyObject) {
              String embeddableColumFamilyName=columFamilyTableName;
              dynamicCFName=ecCacheHandler.getElementCollectionObjectName(rowId,obj);
              if (dynamicCFName == null) {
                ++lastEmbeddedObjectCount;
                Map<Map<String,Class<?>>,HBaseDataWrapper> embeDaableDataWrappers=new HashMap<Map<String,Class<?>>,HBaseDataWrapper>();
                for (                Attribute attribute : columns) {
                  embeddableColumFamilyName=((AbstractAttribute)attribute).getTableName() != null ? ((AbstractAttribute)attribute).getTableName() : columFamilyTableName;
                  String columnName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + ((AbstractAttribute)attribute).getJPAColumnName()+ Constants.EMBEDDED_COLUMN_NAME_DELIMITER+ (lastEmbeddedObjectCount);
                  Map<String,Class<?>> embeddableMap=new HashMap<String,Class<?>>();
                  embeddableMap.put(embeddableColumFamilyName,obj.getClass());
                  embeDaableDataWrappers=getEmbeddableHBaseWrapperObj(rowId,obj,embeddableColumFamilyName,embeDaableDataWrappers,persistentData,embeddableMap);
                  HBaseDataWrapper embeddableColumnWrapper=embeDaableDataWrappers.get(embeddableMap);
                  embeddableColumnWrapper.setColumnFamily(embeddableColumFamilyName);
                  embeddableColumnWrapper.addColumn(columnName,attribute);
                  embeddableColumnWrapper.addValue(columnName,PropertyAccessorHelper.getObject(obj,(Field)attribute.getJavaMember()));
                }
              }
            }
            ecCacheHandler.clearCache();
          }
        }
 else {
          Map<Map<String,Class<?>>,HBaseDataWrapper> embeDaableDataWrappers=new HashMap<Map<String,Class<?>>,HBaseDataWrapper>();
          String embeddableColumFamilyName=columFamilyTableName;
          for (          Attribute attribute : columns) {
            embeddableColumFamilyName=((AbstractAttribute)attribute).getTableName() != null ? ((AbstractAttribute)attribute).getTableName() : columFamilyTableName;
            Map<String,Class<?>> embeddableMap=new HashMap<String,Class<?>>();
            embeddableMap.put(embeddableColumFamilyName,columnFamilyObject.getClass());
            embeDaableDataWrappers=getEmbeddableHBaseWrapperObj(rowId,columnFamilyObject,embeddableColumFamilyName,embeDaableDataWrappers,persistentData,embeddableMap);
            HBaseDataWrapper embeddableColumnWrapper=embeDaableDataWrappers.get(embeddableMap);
            embeddableColumnWrapper.setColumnFamily(embeddableColumFamilyName);
            embeddableColumnWrapper.addColumn(((AbstractAttribute)attribute).getJPAColumnName(),attribute);
            embeddableColumnWrapper.addValue(((AbstractAttribute)attribute).getJPAColumnName(),PropertyAccessorHelper.getObject(columnFamilyObject,(Field)attribute.getJavaMember()));
          }
        }
      }
    }
 else     if (!column.isAssociation()) {
      columnWrapper.addColumn(((AbstractAttribute)column).getJPAColumnName(),column);
      columnWrapper.addValue(((AbstractAttribute)column).getJPAColumnName(),PropertyAccessorHelper.getObject(entity,(Field)column.getJavaMember()));
    }
  }
  return persistentDataWrappers;
}","/** 
 * @param tableName
 * @param entity
 * @param rowId
 * @param metaModel
 * @param attributes
 * @param columnWrapper
 * @param persistentData
 * @return
 * @throws IOException
 */
public Map<String,HBaseDataWrapper> preparePersistentData(String tableName,String columnFamily,Object entity,Object rowId,MetamodelImpl metaModel,Set<Attribute> attributes,HBaseDataWrapper columnWrapper,List<HBaseDataWrapper> persistentData) throws IOException {
  Map<String,HBaseDataWrapper> persistentDataWrappers=new HashMap<String,HBaseDataWrapper>();
  persistentDataWrappers.put(columnFamily,columnWrapper);
  for (  Attribute column : attributes) {
    String fieldName=((AbstractAttribute)column).getJPAColumnName();
    String columFamilyTableName=((AbstractAttribute)column).getTableName() != null ? ((AbstractAttribute)column).getTableName() : columnFamily;
    persistentDataWrappers=getHBaseWrapperObj(rowId,entity,columFamilyTableName,persistentDataWrappers,persistentData);
    columnWrapper=persistentDataWrappers.get(columFamilyTableName);
    columnWrapper.setColumnFamily(columFamilyTableName);
    Class javaType=((AbstractAttribute)column).getBindableJavaType();
    if (metaModel.isEmbeddable(javaType)) {
      String columnFamilyName=((AbstractAttribute)column).getJPAColumnName();
      Field columnFamilyField=(Field)column.getJavaMember();
      Object columnFamilyObject=null;
      try {
        columnFamilyObject=PropertyAccessorHelper.getObject(entity,columnFamilyField);
      }
 catch (      PropertyAccessException paex) {
        log.error(""String_Node_Str"",columnFamilyName,entity);
        throw new KunderaException(paex);
      }
      if (columnFamilyObject != null) {
        Set<Attribute> columns=metaModel.embeddable(javaType).getAttributes();
        Map<String,Attribute> columnNameToAttribute=new HashMap<String,Attribute>();
        Map<String,Object> columnNameToValue=new HashMap<String,Object>();
        if (column.isCollection()) {
          String dynamicCFName=null;
          ElementCollectionCacheManager ecCacheHandler=ElementCollectionCacheManager.getInstance();
          if (ecCacheHandler.isCacheEmpty()) {
            int count=0;
            for (            Object obj : (Collection)columnFamilyObject) {
              String embeddableColumFamilyName=columFamilyTableName;
              Map<Map<String,Class<?>>,HBaseDataWrapper> embeDaableDataWrappers=new HashMap<Map<String,Class<?>>,HBaseDataWrapper>();
              for (              Attribute attribute : columns) {
                embeddableColumFamilyName=((AbstractAttribute)attribute).getTableName() != null ? ((AbstractAttribute)attribute).getTableName() : columFamilyTableName;
                String columnName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + ((AbstractAttribute)attribute).getJPAColumnName()+ Constants.EMBEDDED_COLUMN_NAME_DELIMITER+ count;
                Map<String,Class<?>> embeddableMap=new HashMap<String,Class<?>>();
                embeddableMap.put(embeddableColumFamilyName,obj.getClass());
                embeDaableDataWrappers=getEmbeddableHBaseWrapperObj(rowId,obj,embeddableColumFamilyName,embeDaableDataWrappers,persistentData,embeddableMap);
                HBaseDataWrapper embeddableColumnWrapper=embeDaableDataWrappers.get(embeddableMap);
                embeddableColumnWrapper.setColumnFamily(embeddableColumFamilyName);
                embeddableColumnWrapper.addColumn(columnName,attribute);
                embeddableColumnWrapper.addValue(columnName,PropertyAccessorHelper.getObject(obj,(Field)attribute.getJavaMember()));
              }
              count++;
            }
          }
 else {
            int lastEmbeddedObjectCount=ecCacheHandler.getLastElementCollectionObjectCount(rowId);
            for (            Object obj : (Collection)columnFamilyObject) {
              String embeddableColumFamilyName=columFamilyTableName;
              dynamicCFName=ecCacheHandler.getElementCollectionObjectName(rowId,obj);
              if (dynamicCFName == null) {
                ++lastEmbeddedObjectCount;
                Map<Map<String,Class<?>>,HBaseDataWrapper> embeDaableDataWrappers=new HashMap<Map<String,Class<?>>,HBaseDataWrapper>();
                for (                Attribute attribute : columns) {
                  embeddableColumFamilyName=((AbstractAttribute)attribute).getTableName() != null ? ((AbstractAttribute)attribute).getTableName() : columFamilyTableName;
                  String columnName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + ((AbstractAttribute)attribute).getJPAColumnName()+ Constants.EMBEDDED_COLUMN_NAME_DELIMITER+ (lastEmbeddedObjectCount);
                  Map<String,Class<?>> embeddableMap=new HashMap<String,Class<?>>();
                  embeddableMap.put(embeddableColumFamilyName,obj.getClass());
                  embeDaableDataWrappers=getEmbeddableHBaseWrapperObj(rowId,obj,embeddableColumFamilyName,embeDaableDataWrappers,persistentData,embeddableMap);
                  HBaseDataWrapper embeddableColumnWrapper=embeDaableDataWrappers.get(embeddableMap);
                  embeddableColumnWrapper.setColumnFamily(embeddableColumFamilyName);
                  embeddableColumnWrapper.addColumn(columnName,attribute);
                  embeddableColumnWrapper.addValue(columnName,PropertyAccessorHelper.getObject(obj,(Field)attribute.getJavaMember()));
                }
              }
            }
            ecCacheHandler.clearCache();
          }
        }
 else {
          Map<Map<String,Class<?>>,HBaseDataWrapper> embeDaableDataWrappers=new HashMap<Map<String,Class<?>>,HBaseDataWrapper>();
          String embeddableColumFamilyName=columFamilyTableName;
          for (          Attribute attribute : columns) {
            embeddableColumFamilyName=((AbstractAttribute)attribute).getTableName() != null ? ((AbstractAttribute)attribute).getTableName() : columFamilyTableName;
            Map<String,Class<?>> embeddableMap=new HashMap<String,Class<?>>();
            embeddableMap.put(embeddableColumFamilyName,columnFamilyObject.getClass());
            embeDaableDataWrappers=getEmbeddableHBaseWrapperObj(rowId,columnFamilyObject,embeddableColumFamilyName,embeDaableDataWrappers,persistentData,embeddableMap);
            HBaseDataWrapper embeddableColumnWrapper=embeDaableDataWrappers.get(embeddableMap);
            embeddableColumnWrapper.setColumnFamily(embeddableColumFamilyName);
            embeddableColumnWrapper.addColumn(((AbstractAttribute)attribute).getJPAColumnName(),attribute);
            embeddableColumnWrapper.addValue(((AbstractAttribute)attribute).getJPAColumnName(),PropertyAccessorHelper.getObject(columnFamilyObject,(Field)attribute.getJavaMember()));
          }
        }
      }
    }
 else     if (!column.isAssociation()) {
      columnWrapper.addColumn(((AbstractAttribute)column).getJPAColumnName(),column);
      columnWrapper.addValue(((AbstractAttribute)column).getJPAColumnName(),PropertyAccessorHelper.getObject(entity,(Field)column.getJavaMember()));
    }
  }
  return persistentDataWrappers;
}",0.9957918361621546
176121,"@Test public void test(){
  EntityManager em=emf.createEntityManager();
  EmbeddedEntity embeddedEntity=new EmbeddedEntity();
  embeddedEntity.setEmailId(""String_Node_Str"");
  embeddedEntity.setPhoneNo(9512345346l);
  List<EmbeddedCollectionEntity> embeddedEntities=new ArrayList<EmbeddedCollectionEntity>();
  EmbeddedCollectionEntity collectionEntity1=new EmbeddedCollectionEntity();
  collectionEntity1.setCollectionId(""String_Node_Str"");
  collectionEntity1.setCollectionName(""String_Node_Str"");
  embeddedEntities.add(collectionEntity1);
  EmbeddedCollectionEntity collectionEntity2=new EmbeddedCollectionEntity();
  collectionEntity2.setCollectionId(""String_Node_Str"");
  collectionEntity2.setCollectionName(""String_Node_Str"");
  embeddedEntities.add(collectionEntity2);
  HbaseSecondaryTableEntity entity=new HbaseSecondaryTableEntity();
  entity.setAge(24);
  entity.setObjectId(""String_Node_Str"");
  entity.setName(""String_Node_Str"");
  entity.setEmbeddedEntity(embeddedEntity);
  entity.setCountry(""String_Node_Str"");
  entity.setEmbeddedEntities(embeddedEntities);
  PersonSecondaryTableAddress address=new PersonSecondaryTableAddress(12.23);
  address.setAddress(""String_Node_Str"");
  entity.setAddress(address);
  em.persist(entity);
  em.clear();
  HbaseSecondaryTableEntity foundEntity=em.find(HbaseSecondaryTableEntity.class,""String_Node_Str"");
  Assert.assertNotNull(foundEntity);
  Assert.assertEquals(""String_Node_Str"",foundEntity.getName());
  Assert.assertEquals(24,foundEntity.getAge());
  Assert.assertEquals(""String_Node_Str"",foundEntity.getCountry());
  Assert.assertNotNull(foundEntity.getEmbeddedEntity());
  Assert.assertEquals(""String_Node_Str"",foundEntity.getEmbeddedEntity().getEmailId());
  Assert.assertEquals(9512345346l,foundEntity.getEmbeddedEntity().getPhoneNo());
  Assert.assertNotNull(foundEntity.getAddress());
  Assert.assertEquals(""String_Node_Str"",foundEntity.getAddress().getAddress());
  Assert.assertEquals(2,foundEntity.getEmbeddedEntities().size());
  Assert.assertEquals(""String_Node_Str"",foundEntity.getEmbeddedEntities().get(0).getCollectionName());
  Assert.assertEquals(""String_Node_Str"",foundEntity.getEmbeddedEntities().get(1).getCollectionName());
  foundEntity.setAge(25);
  foundEntity.setName(""String_Node_Str"");
  foundEntity.getEmbeddedEntity().setEmailId(""String_Node_Str"");
  em.merge(foundEntity);
  em.clear();
  foundEntity=em.find(HbaseSecondaryTableEntity.class,""String_Node_Str"");
  Assert.assertNotNull(foundEntity);
  Assert.assertEquals(""String_Node_Str"",foundEntity.getName());
  Assert.assertEquals(25,foundEntity.getAge());
  Assert.assertNotNull(foundEntity.getEmbeddedEntity());
  Assert.assertEquals(""String_Node_Str"",foundEntity.getEmbeddedEntity().getEmailId());
  Assert.assertEquals(9512345346l,foundEntity.getEmbeddedEntity().getPhoneNo());
  em.remove(foundEntity);
  foundEntity=em.find(HbaseSecondaryTableEntity.class,""String_Node_Str"");
  Assert.assertNull(foundEntity);
}","@Test public void test(){
  EntityManager em=emf.createEntityManager();
  cli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
  cli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
  EmbeddedEntity embeddedEntity=new EmbeddedEntity();
  embeddedEntity.setEmailId(""String_Node_Str"");
  embeddedEntity.setPhoneNo(9512345346l);
  List<EmbeddedCollectionEntity> embeddedEntities=new ArrayList<EmbeddedCollectionEntity>();
  EmbeddedCollectionEntity collectionEntity1=new EmbeddedCollectionEntity();
  collectionEntity1.setCollectionId(""String_Node_Str"");
  collectionEntity1.setCollectionName(""String_Node_Str"");
  embeddedEntities.add(collectionEntity1);
  EmbeddedCollectionEntity collectionEntity2=new EmbeddedCollectionEntity();
  collectionEntity2.setCollectionId(""String_Node_Str"");
  collectionEntity2.setCollectionName(""String_Node_Str"");
  embeddedEntities.add(collectionEntity2);
  HbaseSecondaryTableEntity entity=new HbaseSecondaryTableEntity();
  entity.setAge(24);
  entity.setObjectId(""String_Node_Str"");
  entity.setName(""String_Node_Str"");
  entity.setEmbeddedEntity(embeddedEntity);
  entity.setCountry(""String_Node_Str"");
  entity.setEmbeddedEntities(embeddedEntities);
  PersonSecondaryTableAddress address=new PersonSecondaryTableAddress(12.23);
  address.setAddress(""String_Node_Str"");
  entity.setAddress(address);
  em.persist(entity);
  em.clear();
  HbaseSecondaryTableEntity foundEntity=em.find(HbaseSecondaryTableEntity.class,""String_Node_Str"");
  Assert.assertNotNull(foundEntity);
  Assert.assertEquals(""String_Node_Str"",foundEntity.getName());
  Assert.assertEquals(24,foundEntity.getAge());
  Assert.assertEquals(""String_Node_Str"",foundEntity.getCountry());
  Assert.assertNotNull(foundEntity.getEmbeddedEntity());
  Assert.assertEquals(""String_Node_Str"",foundEntity.getEmbeddedEntity().getEmailId());
  Assert.assertEquals(9512345346l,foundEntity.getEmbeddedEntity().getPhoneNo());
  Assert.assertNotNull(foundEntity.getAddress());
  Assert.assertEquals(""String_Node_Str"",foundEntity.getAddress().getAddress());
  Assert.assertEquals(2,foundEntity.getEmbeddedEntities().size());
  Assert.assertEquals(""String_Node_Str"",foundEntity.getEmbeddedEntities().get(0).getCollectionName());
  Assert.assertEquals(""String_Node_Str"",foundEntity.getEmbeddedEntities().get(1).getCollectionName());
  foundEntity.setAge(25);
  foundEntity.setName(""String_Node_Str"");
  foundEntity.getEmbeddedEntity().setEmailId(""String_Node_Str"");
  em.merge(foundEntity);
  em.clear();
  foundEntity=em.find(HbaseSecondaryTableEntity.class,""String_Node_Str"");
  Assert.assertNotNull(foundEntity);
  Assert.assertEquals(""String_Node_Str"",foundEntity.getName());
  Assert.assertEquals(25,foundEntity.getAge());
  Assert.assertNotNull(foundEntity.getEmbeddedEntity());
  Assert.assertEquals(""String_Node_Str"",foundEntity.getEmbeddedEntity().getEmailId());
  Assert.assertEquals(9512345346l,foundEntity.getEmbeddedEntity().getPhoneNo());
  em.remove(foundEntity);
  foundEntity=em.find(HbaseSecondaryTableEntity.class,""String_Node_Str"");
  Assert.assertNull(foundEntity);
}",0.9801324503311258
176122,"/** 
 * Initialize any state for this DB. Called once per DB instance; there is one DB instance per client thread.
 */
public void init() throws DBException {
  if ((getProperties().getProperty(""String_Node_Str"") != null) && (getProperties().getProperty(""String_Node_Str"").compareTo(""String_Node_Str"") == 0)) {
    _debug=true;
  }
  _columnFamily=getProperties().getProperty(""String_Node_Str"");
  _table=getProperties().getProperty(""String_Node_Str"");
  if (_columnFamily == null) {
    System.err.println(""String_Node_Str"");
    throw new DBException(""String_Node_Str"");
  }
  _columnFamilyBytes=Bytes.toBytes(_columnFamily);
}","/** 
 * Initialize any state for this DB. Called once per DB instance; there is one DB instance per client thread.
 */
public void init() throws DBException {
}",0.4055766793409379
176123,"/** 
 * Read a record from the database. Each field/value pair from the result will be stored in a HashMap.
 * @param table The name of the table
 * @param key The record key of the record to read.
 * @param fields The list of fields to read, or null for all of them
 * @param result A HashMap of field/value pairs for the result
 * @return Zero on success, a non-zero error code on error
 */
public int read(String table,String key,Set<String> fields,HashMap<String,ByteIterator> result){
  try {
    client.set_keyspace(_table);
  }
 catch (  Exception e) {
    logger.error(e);
    return Error;
  }
  try {
    SlicePredicate predicate;
    if (fields == null) {
      predicate=new SlicePredicate().setSlice_range(new SliceRange(emptyByteBuffer,emptyByteBuffer,false,1000000));
    }
 else {
      ArrayList<ByteBuffer> fieldlist=new ArrayList<ByteBuffer>(fields.size());
      for (      String s : fields) {
        fieldlist.add(ByteBuffer.wrap(s.getBytes(""String_Node_Str"")));
      }
      predicate=new SlicePredicate().setColumn_names(fieldlist);
    }
    List<ColumnOrSuperColumn> results=client.get_slice(ByteBuffer.wrap(key.getBytes(""String_Node_Str"")),parent,predicate,readConsistencyLevel);
    if (_debug) {
      System.out.print(""String_Node_Str"" + key);
    }
    Column column;
    String name;
    ByteIterator value;
    for (    ColumnOrSuperColumn oneresult : results) {
      column=oneresult.column;
      name=new String(column.name.array(),column.name.position() + column.name.arrayOffset(),column.name.remaining());
      value=new ByteArrayByteIterator(column.value.array(),column.value.position() + column.value.arrayOffset(),column.value.remaining());
      result.put(name,value);
      if (_debug) {
        logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ value+ ""String_Node_Str"");
      }
    }
    if (_debug) {
      logger.info(""String_Node_Str"" + readConsistencyLevel.toString());
    }
    return Ok;
  }
 catch (  Exception e) {
    logger.error(e);
    return Error;
  }
}","/** 
 * Read a record from the database. Each field/value pair from the result will be stored in a HashMap.
 * @param table The name of the table
 * @param key The record key of the record to read.
 * @param fields The list of fields to read, or null for all of them
 * @param result A HashMap of field/value pairs for the result
 * @return Zero on success, a non-zero error code on error
 */
public int read(String table,String key,Set<String> fields,HashMap<String,ByteIterator> result){
}",0.389837236998809
176124,"/** 
 * On delete.
 * @param log the log
 */
private void onDelete(EventLog log){
  if (deleteEvents == null) {
    deleteEvents=new HashMap<Object,EventLog>();
    ;
  }
  deleteEvents.put(log.getEntityId(),log);
}","/** 
 * On delete.
 * @param log the log
 */
private void onDelete(EventLog log){
  if (deleteEvents == null) {
    deleteEvents=new ConcurrentHashMap<Object,EventLog>();
  }
  deleteEvents.put(log.getEntityId(),log);
}",0.9631336405529954
176125,"/** 
 * On update.
 * @param log the log
 */
private void onUpdate(EventLog log){
  if (updateEvents == null) {
    updateEvents=new HashMap<Object,EventLog>();
  }
  updateEvents.put(log.getEntityId(),log);
}","/** 
 * On update.
 * @param log the log
 */
private void onUpdate(EventLog log){
  if (updateEvents == null) {
    updateEvents=new ConcurrentHashMap<Object,EventLog>();
  }
  updateEvents.put(log.getEntityId(),log);
}",0.9766355140186916
176126,"/** 
 * On insert.
 * @param log the log
 */
private void onInsert(EventLog log){
  if (insertEvents == null) {
    insertEvents=new HashMap<Object,EventLog>();
  }
  insertEvents.put(log.getEntityId(),log);
}","/** 
 * On insert.
 * @param log the log
 */
private void onInsert(EventLog log){
  if (insertEvents == null) {
    insertEvents=new ConcurrentHashMap<Object,EventLog>();
  }
  insertEvents.put(log.getEntityId(),log);
}",0.9766355140186916
176127,"/** 
 * Instantiates a new flush manager.
 */
public FlushManager(){
  stackQueue=new ArrayDeque<Node>();
}","/** 
 * Instantiates a new flush manager.
 */
public FlushManager(){
  stackQueue=new LinkedBlockingDeque<Node>();
}",0.9147982062780268
176128,"/** 
 * Insert a record in the database. Any field/value pairs in the specified values HashMap will be written into the record with the specified record key.
 * @param table The name of the table
 * @param key The record key of the record to insert.
 * @param values A HashMap of field/value pairs to insert in the record
 * @return Zero on success, a non-zero error code on error
 */
public int insert(String table,String key,HashMap<String,ByteIterator> values){
  try {
    PelopsUser u=new PelopsUser(key,getString(key,""String_Node_Str""),getString(key,""String_Node_Str""),getString(key,""String_Node_Str""));
    em.persist(u);
    j++;
    if (j % 5000 == 0) {
      em.clear();
    }
    return Ok;
  }
 catch (  Exception e) {
    logger.error(e);
    return Error;
  }
}","/** 
 * Insert a record in the database. Any field/value pairs in the specified values HashMap will be written into the record with the specified record key.
 * @param table The name of the table
 * @param key The record key of the record to insert.
 * @param values A HashMap of field/value pairs to insert in the record
 * @return Zero on success, a non-zero error code on error
 */
public int insert(String table,String key,HashMap<String,ByteIterator> values){
  try {
    PelopsUser u=new PelopsUser(key,getString(key,""String_Node_Str""),getString(key,""String_Node_Str""),getString(key,""String_Node_Str""));
    em.persist(u);
    em.clear();
    return Ok;
  }
 catch (  Exception e) {
    logger.error(e);
    return Error;
  }
}",0.9721485411140584
176129,"/** 
 * Insert a record in the database. Any field/value pairs in the specified values HashMap will be written into the record with the specified record key.
 * @param table The name of the table
 * @param key The record key of the record to insert.
 * @param values A HashMap of field/value pairs to insert in the record
 * @return Zero on success, a non-zero error code on error
 */
public int insert(String table,String key,HashMap<String,ByteIterator> values){
  if (em == null || !em.isOpen()) {
    em=emf.createEntityManager();
  }
  try {
    ThriftUser u=new ThriftUser(key,getString(key,""String_Node_Str""),getString(key,""String_Node_Str""),getString(key,""String_Node_Str""));
    em.persist(u);
    j++;
    if (j % 5000 == 0) {
      em.clear();
    }
    return Ok;
  }
 catch (  Exception e) {
    logger.error(e);
    return Error;
  }
}","/** 
 * Insert a record in the database. Any field/value pairs in the specified values HashMap will be written into the record with the specified record key.
 * @param table The name of the table
 * @param key The record key of the record to insert.
 * @param values A HashMap of field/value pairs to insert in the record
 * @return Zero on success, a non-zero error code on error
 */
public int insert(String table,String key,HashMap<String,ByteIterator> values){
  if (em == null || !em.isOpen()) {
    em=emf.createEntityManager();
  }
  try {
    ThriftUser u=new ThriftUser(key,getString(key,""String_Node_Str""),getString(key,""String_Node_Str""),getString(key,""String_Node_Str""));
    em.persist(u);
    em.clear();
    return Ok;
  }
 catch (  Exception e) {
    logger.error(e);
    return Error;
  }
}",0.96256038647343
176130,"/** 
 * Populate data.
 * @param m the m
 * @param qResults the q results
 * @param entities the entities
 * @param isRelational the is relational
 * @param relationNames the relation names
 * @param dataHandler the data handler
 */
protected void populateData(EntityMetadata m,Map<Bytes,List<Column>> qResults,List<Object> entities,boolean isRelational,List<String> relationNames,CassandraDataHandler dataHandler){
  if (m.getType().isSuperColumnFamilyMetadata()) {
    Set<Bytes> primaryKeys=qResults.keySet();
    if (primaryKeys != null && !primaryKeys.isEmpty()) {
      Object[] rowIds=new Object[primaryKeys.size()];
      int i=0;
      for (      Bytes b : primaryKeys) {
        rowIds[i]=PropertyAccessorHelper.getObject(b,(Field)m.getIdAttribute().getJavaMember());
        i++;
      }
      entities.addAll(findAll(m.getEntityClazz(),null,rowIds));
    }
  }
 else {
    Iterator<Bytes> rowIter=qResults.keySet().iterator();
    while (rowIter.hasNext()) {
      Bytes rowKey=rowIter.next();
      List<Column> columns=qResults.get(rowKey);
      try {
        Object id=PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),rowKey.toByteArray());
        Object e=dataHandler.populateEntity(new ThriftRow(id,m.getTableName(),columns,new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0)),m,relationNames,isRelational);
        if (e != null) {
          entities.add(e);
        }
      }
 catch (      IllegalStateException e) {
        log.error(""String_Node_Str"",m.getEntityClazz(),e);
        throw new KunderaException(e);
      }
catch (      Exception e) {
        log.error(""String_Node_Str"",m.getEntityClazz(),e);
        throw new KunderaException(e);
      }
    }
  }
}","/** 
 * Populate data.
 * @param m the m
 * @param qResults the q results
 * @param entities the entities
 * @param isRelational the is relational
 * @param relationNames the relation names
 * @param dataHandler the data handler
 */
protected List populateData(EntityMetadata m,Map<Bytes,List<Column>> qResults,List<Object> entities,boolean isRelational,List<String> relationNames,CassandraDataHandler dataHandler){
  if (m.getType().isSuperColumnFamilyMetadata()) {
    Set<Bytes> primaryKeys=qResults.keySet();
    if (primaryKeys != null && !primaryKeys.isEmpty()) {
      Object[] rowIds=new Object[primaryKeys.size()];
      int i=0;
      for (      Bytes b : primaryKeys) {
        rowIds[i]=PropertyAccessorHelper.getObject(b,(Field)m.getIdAttribute().getJavaMember());
        i++;
      }
      entities.addAll(findAll(m.getEntityClazz(),null,rowIds));
    }
  }
 else {
    Iterator<Bytes> rowIter=qResults.keySet().iterator();
    while (rowIter.hasNext()) {
      Bytes rowKey=rowIter.next();
      List<Column> columns=qResults.get(rowKey);
      try {
        Object id=PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),rowKey.toByteArray());
        Object e=dataHandler.populateEntity(new ThriftRow(id,m.getTableName(),columns,new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0)),m,relationNames,isRelational);
        if (e != null) {
          entities.add(e);
        }
      }
 catch (      IllegalStateException e) {
        log.error(""String_Node_Str"",m.getEntityClazz(),e);
        throw new KunderaException(e);
      }
catch (      Exception e) {
        log.error(""String_Node_Str"",m.getEntityClazz(),e);
        throw new KunderaException(e);
      }
    }
  }
  return entities;
}",0.9923404255319148
176131,"/** 
 * Executes Select CQL Query.
 * @param cqlQuery the cql query
 * @param clazz the clazz
 * @param relationalField the relational field
 * @param dataHandler the data handler
 * @return the list
 */
public List executeSelectQuery(String cqlQuery,Class clazz,List<String> relationalField,CassandraDataHandler dataHandler){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"",cqlQuery);
  }
  return cqlClient.executeQuery(cqlQuery,clazz,relationalField,dataHandler,true);
}","/** 
 * Executes Select CQL Query.
 * @param cqlQuery the cql query
 * @param clazz the clazz
 * @param relationalField the relational field
 * @param dataHandler the data handler
 * @return the list
 */
public List executeSelectQuery(String cqlQuery,Class clazz,List<String> relationalField,CassandraDataHandler dataHandler,boolean isNative){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"",cqlQuery);
  }
  List entities=new ArrayList<Object>();
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(clazz);
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  List<AbstractManagedType> subManagedType=((AbstractManagedType)entityType).getSubManagedType();
  if (subManagedType.isEmpty()) {
    entities.addAll(cqlClient.executeQuery(cqlQuery,clazz,relationalField,dataHandler,true,isNative));
  }
 else {
    for (    AbstractManagedType subEntity : subManagedType) {
      EntityMetadata subEntityMetadata=KunderaMetadataManager.getEntityMetadata(subEntity.getJavaType());
      entities.addAll(cqlClient.executeQuery(cqlQuery,subEntityMetadata.getEntityClazz(),relationalField,dataHandler,true,isNative));
    }
  }
  return entities;
}",0.4893033461327482
176132,"/** 
 * Finds entity on the basis of rowid and return list of objects.
 * @param metaModel
 * @param metadata
 * @param rowId
 * @param relationNames
 * @return
 */
public List<Object> find(MetamodelImpl metaModel,EntityMetadata metadata,Object rowId,List<String> relationNames){
  CQLTranslator translator=new CQLTranslator();
  String select_Query=translator.SELECTALL_QUERY;
  select_Query=StringUtils.replace(select_Query,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),metadata.getTableName(),false).toString());
  StringBuilder builder=new StringBuilder(select_Query);
  onWhereClause(metadata,rowId,translator,builder,metaModel);
  return CassandraClientBase.this.executeQuery(builder.toString(),metadata.getEntityClazz(),relationNames);
}","/** 
 * Finds entity on the basis of rowid and return list of objects.
 * @param metaModel
 * @param metadata
 * @param rowId
 * @param relationNames
 * @return
 */
public List<Object> find(MetamodelImpl metaModel,EntityMetadata metadata,Object rowId,List<String> relationNames){
  CQLTranslator translator=new CQLTranslator();
  String select_Query=translator.SELECTALL_QUERY;
  select_Query=StringUtils.replace(select_Query,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),metadata.getTableName(),false).toString());
  StringBuilder builder=new StringBuilder(select_Query);
  onWhereClause(metadata,rowId,translator,builder,metaModel);
  return CassandraClientBase.this.executeQuery(builder.toString(),metadata.getEntityClazz(),relationNames,false);
}",0.9961089494163424
176133,"/** 
 * Find List of objects based on value   {@columnValue} of column{@columnName}
 * @param m
 * @param columnName
 * @param columnValue
 * @param clazz
 * @param dataHandler
 * @return
 */
protected List<Object> findByRelationQuery(EntityMetadata m,String columnName,Object columnValue,Class clazz,CassandraDataHandler dataHandler){
  CQLTranslator translator=new CQLTranslator();
  String selectQuery=translator.SELECTALL_QUERY;
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),m.getTableName(),false).toString());
  StringBuilder selectQueryBuilder=new StringBuilder(selectQuery);
  selectQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  translator.buildWhereClause(selectQueryBuilder,columnValue.getClass(),columnName,columnValue,CQLTranslator.EQ_CLAUSE,false);
  selectQueryBuilder.delete(selectQueryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),selectQueryBuilder.length());
  return executeQuery(selectQueryBuilder.toString(),clazz,m.getRelationNames(),dataHandler,true);
}","/** 
 * Find List of objects based on value   {@columnValue} of column{@columnName}
 * @param m
 * @param columnName
 * @param columnValue
 * @param clazz
 * @param dataHandler
 * @return
 */
protected List<Object> findByRelationQuery(EntityMetadata m,String columnName,Object columnValue,Class clazz,CassandraDataHandler dataHandler){
  CQLTranslator translator=new CQLTranslator();
  String selectQuery=translator.SELECTALL_QUERY;
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),m.getTableName(),false).toString());
  StringBuilder selectQueryBuilder=new StringBuilder(selectQuery);
  selectQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  translator.buildWhereClause(selectQueryBuilder,columnValue.getClass(),columnName,columnValue,CQLTranslator.EQ_CLAUSE,false);
  selectQueryBuilder.delete(selectQueryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),selectQueryBuilder.length());
  return executeQuery(selectQueryBuilder.toString(),clazz,m.getRelationNames(),dataHandler,true,false);
}",0.997164461247637
176134,"/** 
 * Execute query and Return list of Objects.
 * @param cqlQuery
 * @param clazz
 * @param relationalField
 * @param dataHandler
 * @return
 */
public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField,CassandraDataHandler dataHandler,boolean isCql3Enabled){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(clazz);
  CqlResult result=null;
  List returnedEntities=new ArrayList();
  try {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",cqlQuery);
    }
    result=executeCQLQuery(cqlQuery,isCql3Enabled);
    if (result != null && (result.getRows() != null || result.getRowsSize() > 0)) {
      returnedEntities=new ArrayList<Object>(result.getRowsSize());
      Iterator<CqlRow> iter=result.getRowsIterator();
      while (iter.hasNext()) {
        CqlRow row=iter.next();
        Object rowKey=null;
        ThriftRow thriftRow=null;
        thriftRow=new ThriftRow(rowKey,entityMetadata.getTableName(),row.getColumns(),new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
        Object entity=dataHandler.populateEntity(thriftRow,entityMetadata,relationalField,relationalField != null && !relationalField.isEmpty());
        if (entity != null) {
          returnedEntities.add(entity);
        }
 else {
          returnedEntities.add(row.getColumns().get(0));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  return returnedEntities;
}","/** 
 * Execute query and Return list of Objects.
 * @param cqlQuery
 * @param clazz
 * @param relationalField
 * @param dataHandler
 * @return
 */
public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField,CassandraDataHandler dataHandler,boolean isCql3Enabled,boolean isNative){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(clazz);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  String query=appMetadata.getQuery(cqlQuery);
  CqlResult result=null;
  List returnedEntities=new ArrayList();
  try {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",cqlQuery);
    }
    result=executeCQLQuery(cqlQuery,isCql3Enabled);
    if (result != null && (result.getRows() != null || result.getRowsSize() > 0)) {
      returnedEntities=new ArrayList<Object>(result.getRowsSize());
      Iterator<CqlRow> iter=result.getRowsIterator();
      while (iter.hasNext()) {
        CqlRow row=iter.next();
        Object rowKey=null;
        ThriftRow thriftRow=null;
        thriftRow=new ThriftRow(rowKey,entityMetadata.getTableName(),row.getColumns(),new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
        Object entity=dataHandler.populateEntity(thriftRow,entityMetadata,relationalField,relationalField != null && !relationalField.isEmpty());
        if (entity != null) {
          returnedEntities.add(entity);
        }
 else         if (isNative) {
          returnedEntities.add(row.getColumns().get(0));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  return returnedEntities;
}",0.9475299171525008
176135,"@Override public void delete(Object entity,Object pKey){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
  if (isCql3Enabled(metadata)) {
    String deleteQuery=onDeleteQuery(metadata,metaModel,pKey);
    executeQuery(deleteQuery,metadata.getEntityClazz(),null);
  }
 else {
    if (metadata.isCounterColumnType()) {
      deleteRecordFromCounterColumnFamily(pKey,metadata,getConsistencyLevel());
    }
 else {
      RowDeletor rowDeletor=clientFactory.getRowDeletor(pool);
      rowDeletor.deleteRow(metadata.getTableName(),CassandraUtilities.toBytes(pKey,metadata.getIdAttribute().getJavaType()),getConsistencyLevel());
    }
  }
  getIndexManager().remove(metadata,entity,pKey.toString());
  Object conn=getConection();
  try {
    invertedIndexHandler.delete(entity,metadata,getConsistencyLevel());
  }
  finally {
    if (conn != null) {
      releaseConnection(conn);
    }
  }
}","@Override public void delete(Object entity,Object pKey){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
  if (isCql3Enabled(metadata)) {
    String deleteQuery=onDeleteQuery(metadata,metaModel,pKey);
    executeQuery(deleteQuery,metadata.getEntityClazz(),null,false);
  }
 else {
    if (metadata.isCounterColumnType()) {
      deleteRecordFromCounterColumnFamily(pKey,metadata,getConsistencyLevel());
    }
 else {
      RowDeletor rowDeletor=clientFactory.getRowDeletor(pool);
      rowDeletor.deleteRow(metadata.getTableName(),CassandraUtilities.toBytes(pKey,metadata.getIdAttribute().getJavaType()),getConsistencyLevel());
    }
  }
  getIndexManager().remove(metadata,entity,pKey.toString());
  Object conn=getConection();
  try {
    invertedIndexHandler.delete(entity,metadata,getConsistencyLevel());
  }
  finally {
    if (conn != null) {
      releaseConnection(conn);
    }
  }
}",0.9973707274320772
176136,"@Override public List<Object> findByRelation(String colName,Object colValue,Class clazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(clazz);
  List<Object> entities=null;
  if (isCql3Enabled(m)) {
    entities=findByRelationQuery(m,colName,colValue,clazz,dataHandler);
  }
 else {
    Selector selector=clientFactory.getSelector(pool);
    SlicePredicate slicePredicate=Selector.newColumnsPredicateAll(false,10000);
    IndexClause ix=Selector.newIndexClause(Bytes.EMPTY,10000,Selector.newIndexExpression(colName,IndexOperator.EQ,Bytes.fromByteArray(PropertyAccessorHelper.getBytes(colValue))));
    Map<Bytes,List<Column>> qResults;
    try {
      qResults=selector.getIndexedColumns(m.getTableName(),ix,slicePredicate,getConsistencyLevel());
    }
 catch (    PelopsException e) {
      log.warn(""String_Node_Str"",colName,clazz);
      return entities;
    }
    entities=new ArrayList<Object>(qResults.size());
    populateData(m,qResults,entities,false,m.getRelationNames(),dataHandler);
  }
  return entities;
}","@Override public List<Object> findByRelation(String colName,Object colValue,Class clazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(clazz);
  List<Object> entities=null;
  if (isCql3Enabled(m)) {
    entities=findByRelationQuery(m,colName,colValue,clazz,dataHandler);
  }
 else {
    Selector selector=clientFactory.getSelector(pool);
    SlicePredicate slicePredicate=Selector.newColumnsPredicateAll(false,10000);
    IndexClause ix=Selector.newIndexClause(Bytes.EMPTY,10000,Selector.newIndexExpression(colName,IndexOperator.EQ,Bytes.fromByteArray(PropertyAccessorHelper.getBytes(colValue))));
    Map<Bytes,List<Column>> qResults;
    try {
      qResults=selector.getIndexedColumns(m.getTableName(),ix,slicePredicate,getConsistencyLevel());
    }
 catch (    PelopsException e) {
      log.warn(""String_Node_Str"",colName,clazz);
      return entities;
    }
    entities=new ArrayList<Object>(qResults.size());
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    List<AbstractManagedType> subManagedType=((AbstractManagedType)entityType).getSubManagedType();
    if (subManagedType.isEmpty()) {
      entities=populateData(m,qResults,entities,false,m.getRelationNames(),dataHandler);
    }
 else {
      for (      AbstractManagedType subEntity : subManagedType) {
        EntityMetadata subEntityMetadata=KunderaMetadataManager.getEntityMetadata(subEntity.getJavaType());
        entities=populateData(subEntityMetadata,qResults,entities,false,subEntityMetadata.getRelationNames(),dataHandler);
      }
    }
  }
  return entities;
}",0.7441520467836257
176137,"/** 
 * Method to execute cql query and return back entity/enhance entities.
 * @param cqlQuery cql query to be executed.
 * @param clazz entity class.
 * @param relationalField collection for relational fields.
 * @return list of objects.
 */
@Override public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField){
  return super.executeSelectQuery(cqlQuery,clazz,relationalField,dataHandler);
}","/** 
 * Method to execute cql query and return back entity/enhance entities.
 * @param cqlQuery cql query to be executed.
 * @param clazz entity class.
 * @param relationalField collection for relational fields.
 * @return list of objects.
 */
@Override public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField,boolean isNative){
  return super.executeSelectQuery(cqlQuery,clazz,relationalField,dataHandler,isNative);
}",0.9698375870069604
176138,"@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",getJPAQuery());
  }
  List<Object> result=new ArrayList<Object>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  externalProperties=((CassandraClientBase)client).getExternalProperties();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  String query=appMetadata.getQuery(getJPAQuery());
  boolean isNative=kunderaQuery.isNative();
  if (!isNative && ((CassandraClientBase)client).isCql3Enabled(m) && MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata())) {
    result=((CassandraClientBase)client).executeQuery(onQueryOverCQL3(m,client,metaModel,null),m.getEntityClazz(),null);
  }
 else {
    if (isNative) {
      result=((CassandraClientBase)client).executeQuery(query != null ? query : getJPAQuery(),m.getEntityClazz(),null);
    }
 else {
      if (MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata())) {
        boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m,MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()));
        Map<Boolean,List<IndexClause>> ixClause=prepareIndexClause(m,useInvertedIndex);
        if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
          result=(List)((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
        }
 else {
          boolean isRowKeyQuery=ixClause.keySet().iterator().next();
          if (!isRowKeyQuery) {
            result=((CassandraClientBase)client).find(ixClause.get(isRowKeyQuery),m,false,null,isSingleResult ? 1 : this.maxResult,getColumnList(m,getKunderaQuery().getResult(),null));
          }
 else {
            result=((CassandraEntityReader)getReader()).handleFindByRange(m,client,result,ixClause,isRowKeyQuery,getColumnList(m,getKunderaQuery().getResult(),null),isSingleResult ? 1 : this.maxResult);
          }
        }
      }
 else {
        result=populateUsingLucene(m,client,result,null);
      }
    }
  }
  return result;
}","@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",getJPAQuery());
  }
  List<Object> result=new ArrayList<Object>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  externalProperties=((CassandraClientBase)client).getExternalProperties();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  String query=appMetadata.getQuery(getJPAQuery());
  boolean isNative=kunderaQuery.isNative();
  if (!isNative && ((CassandraClientBase)client).isCql3Enabled(m) && MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata())) {
    result=((CassandraClientBase)client).executeQuery(onQueryOverCQL3(m,client,metaModel,null),m.getEntityClazz(),null,isNative);
  }
 else {
    if (isNative) {
      result=((CassandraClientBase)client).executeQuery(query != null ? query : getJPAQuery(),m.getEntityClazz(),null,isNative);
    }
 else {
      if (MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata())) {
        boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m,MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()));
        Map<Boolean,List<IndexClause>> ixClause=prepareIndexClause(m,useInvertedIndex);
        if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
          result=(List)((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
        }
 else {
          boolean isRowKeyQuery=ixClause.keySet().iterator().next();
          if (!isRowKeyQuery) {
            result=((CassandraClientBase)client).find(ixClause.get(isRowKeyQuery),m,false,null,isSingleResult ? 1 : this.maxResult,getColumnList(m,getKunderaQuery().getResult(),null));
          }
 else {
            result=((CassandraEntityReader)getReader()).handleFindByRange(m,client,result,ixClause,isRowKeyQuery,getColumnList(m,getKunderaQuery().getResult(),null),isSingleResult ? 1 : this.maxResult);
          }
        }
      }
 else {
        result=populateUsingLucene(m,client,result,null);
      }
    }
  }
  return result;
}",0.995942290351668
176139,"/** 
 * On executeUpdate.
 * @return zero
 */
@Override protected int onExecuteUpdate(){
  EntityMetadata m=getEntityMetadata();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  String query=appMetadata.getQuery(getJPAQuery());
  boolean isNative=kunderaQuery.isNative();
  if (isNative) {
    ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeQuery(query != null ? query : getJPAQuery(),m.getEntityClazz(),null);
  }
 else   if (kunderaQuery.isDeleteUpdate()) {
    if (!isQueryConvertibleToCQL(kunderaQuery)) {
      List result=getResultList();
      return result != null ? result.size() : 0;
    }
 else {
      query=null;
      if (kunderaQuery.isUpdateClause()) {
        query=createUpdateQuery(kunderaQuery);
      }
 else {
        query=createDeleteQuery(kunderaQuery);
      }
      return ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeUpdateDeleteQuery(query);
    }
  }
  return 0;
}","/** 
 * On executeUpdate.
 * @return zero
 */
@Override protected int onExecuteUpdate(){
  EntityMetadata m=getEntityMetadata();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  String query=appMetadata.getQuery(getJPAQuery());
  boolean isNative=kunderaQuery.isNative();
  if (isNative) {
    ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeQuery(query != null ? query : getJPAQuery(),m.getEntityClazz(),null,isNative);
  }
 else   if (kunderaQuery.isDeleteUpdate()) {
    if (!isQueryConvertibleToCQL(kunderaQuery)) {
      List result=getResultList();
      return result != null ? result.size() : 0;
    }
 else {
      query=null;
      if (kunderaQuery.isUpdateClause()) {
        query=createUpdateQuery(kunderaQuery);
      }
 else {
        query=createDeleteQuery(kunderaQuery);
      }
      return ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeUpdateDeleteQuery(query);
    }
  }
  return 0;
}",0.995382247306311
176140,"@SuppressWarnings(""String_Node_Str"") @Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<EnhanceEntity> ls=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  String query=appMetadata.getQuery(getJPAQuery());
  boolean isNative=kunderaQuery.isNative();
  if (isNative) {
    ls=(List<EnhanceEntity>)((CassandraClientBase)client).executeQuery(query != null ? query : getJPAQuery(),m.getEntityClazz(),null);
  }
 else   if (!isNative && ((CassandraClientBase)client).isCql3Enabled(m)) {
    ls=((CassandraClientBase)client).executeQuery(onQueryOverCQL3(m,client,metaModel,m.getRelationNames()),m.getEntityClazz(),m.getRelationNames());
  }
 else {
    boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m,MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()));
    Map<Boolean,List<IndexClause>> ixClause=MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()) ? prepareIndexClause(m,useInvertedIndex) : null;
    if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
      ls=((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
    }
 else {
      ((CassandraEntityReader)getReader()).setConditions(ixClause);
      ls=reader.populateRelation(m,client,isSingleResult ? 1 : this.maxResult);
    }
  }
  return setRelationEntities(ls,client,m);
}","@SuppressWarnings(""String_Node_Str"") @Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<EnhanceEntity> ls=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  String query=appMetadata.getQuery(getJPAQuery());
  boolean isNative=kunderaQuery.isNative();
  if (isNative) {
    ls=(List<EnhanceEntity>)((CassandraClientBase)client).executeQuery(query != null ? query : getJPAQuery(),m.getEntityClazz(),null,isNative);
  }
 else   if (!isNative && ((CassandraClientBase)client).isCql3Enabled(m)) {
    ls=((CassandraClientBase)client).executeQuery(onQueryOverCQL3(m,client,metaModel,m.getRelationNames()),m.getEntityClazz(),m.getRelationNames(),isNative);
  }
 else {
    boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m,MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()));
    Map<Boolean,List<IndexClause>> ixClause=MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()) ? prepareIndexClause(m,useInvertedIndex) : null;
    if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
      ls=((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
    }
 else {
      ((CassandraEntityReader)getReader()).setConditions(ixClause);
      ls=reader.populateRelation(m,client,isSingleResult ? 1 : this.maxResult);
    }
  }
  return setRelationEntities(ls,client,m);
}",0.9943037974683544
176141,"/** 
 * Method parse provided JPQL query into: 1. CQL3 query, in case cql3 is enabled or is a native query. 2. list of index clause, if cql2 is enabled. Then executes query for given min & max values for scrolling over results.
 * @param m entity metadata
 * @param client client
 * @return list of database values wrapped into entities.
 * @throws Exception throws exception, in case of run time error.
 */
private List<E> populateEntities(EntityMetadata m,Client client) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",((QueryImpl)query).getJPAQuery());
  }
  List<E> result=new ArrayList<E>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  externalProperties=((CassandraClientBase)client).getExternalProperties();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  String queryString=appMetadata.getQuery(((QueryImpl)query).getJPAQuery());
  boolean isNative=((CassQuery)query).isNative();
  if (!isNative && ((CassandraClientBase)client).isCql3Enabled(m)) {
    String parsedQuery=query.onQueryOverCQL3(m,client,metaModel,null);
    parsedQuery=appendWhereClauseWithScroll(parsedQuery);
    results=parsedQuery != null ? ((CassandraClientBase)client).executeQuery(parsedQuery,m.getEntityClazz(),m.getRelationNames()) : null;
  }
 else {
    if (isNative) {
      final String nativeQuery=appendWhereClauseWithScroll(queryString != null ? queryString : ((QueryImpl)query).getJPAQuery());
      results=nativeQuery != null ? ((CassandraClientBase)client).executeQuery(nativeQuery,m.getEntityClazz(),null) : null;
    }
 else {
      boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m,MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()));
      Map<Boolean,List<IndexClause>> ixClause=query.prepareIndexClause(m,useInvertedIndex);
      if (useInvertedIndex && !((QueryImpl)query).getKunderaQuery().getFilterClauseQueue().isEmpty()) {
        result=(List)((CassandraEntityReader)this.reader).readFromIndexTable(m,client,ixClause);
      }
 else {
        boolean isRowKeyQuery=ixClause.keySet().iterator().next();
        List<IndexExpression> expressions=!ixClause.get(isRowKeyQuery).isEmpty() ? ixClause.get(isRowKeyQuery).get(0).getExpressions() : null;
        Map<String,byte[]> rowKeys=((CassandraEntityReader)this.reader).getRowKeyValue(expressions,((AbstractAttribute)m.getIdAttribute()).getJPAColumnName());
        byte[] minValue=start == null ? rowKeys.get(MIN_) : start;
        byte[] maxVal=rowKeys.get(MAX_);
        results=((CassandraClientBase)client).findByRange(minValue,maxVal,m,m.getRelationNames() != null && !m.getRelationNames().isEmpty(),m.getRelationNames(),query.getColumnList(m,((QueryImpl)query).getKunderaQuery().getResult(),null),expressions,maxResult);
        if (maxResult == 1) {
          maxResult++;
        }
 else         if (maxResult > 1 && checkOnEmptyResult() && maxResult != results.size()) {
          results=null;
        }
      }
    }
  }
  return results;
}","/** 
 * Method parse provided JPQL query into: 1. CQL3 query, in case cql3 is enabled or is a native query. 2. list of index clause, if cql2 is enabled. Then executes query for given min & max values for scrolling over results.
 * @param m entity metadata
 * @param client client
 * @return list of database values wrapped into entities.
 * @throws Exception throws exception, in case of run time error.
 */
private List<E> populateEntities(EntityMetadata m,Client client) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",((QueryImpl)query).getJPAQuery());
  }
  List<E> result=new ArrayList<E>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  externalProperties=((CassandraClientBase)client).getExternalProperties();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  String queryString=appMetadata.getQuery(((QueryImpl)query).getJPAQuery());
  boolean isNative=((CassQuery)query).isNative();
  if (!isNative && ((CassandraClientBase)client).isCql3Enabled(m)) {
    String parsedQuery=query.onQueryOverCQL3(m,client,metaModel,null);
    parsedQuery=appendWhereClauseWithScroll(parsedQuery);
    results=parsedQuery != null ? ((CassandraClientBase)client).executeQuery(parsedQuery,m.getEntityClazz(),m.getRelationNames(),isNative) : null;
  }
 else {
    if (isNative) {
      final String nativeQuery=appendWhereClauseWithScroll(queryString != null ? queryString : ((QueryImpl)query).getJPAQuery());
      results=nativeQuery != null ? ((CassandraClientBase)client).executeQuery(nativeQuery,m.getEntityClazz(),null,isNative) : null;
    }
 else {
      boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m,MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()));
      Map<Boolean,List<IndexClause>> ixClause=query.prepareIndexClause(m,useInvertedIndex);
      if (useInvertedIndex && !((QueryImpl)query).getKunderaQuery().getFilterClauseQueue().isEmpty()) {
        result=(List)((CassandraEntityReader)this.reader).readFromIndexTable(m,client,ixClause);
      }
 else {
        boolean isRowKeyQuery=ixClause.keySet().iterator().next();
        List<IndexExpression> expressions=!ixClause.get(isRowKeyQuery).isEmpty() ? ixClause.get(isRowKeyQuery).get(0).getExpressions() : null;
        Map<String,byte[]> rowKeys=((CassandraEntityReader)this.reader).getRowKeyValue(expressions,((AbstractAttribute)m.getIdAttribute()).getJPAColumnName());
        byte[] minValue=start == null ? rowKeys.get(MIN_) : start;
        byte[] maxVal=rowKeys.get(MAX_);
        results=((CassandraClientBase)client).findByRange(minValue,maxVal,m,m.getRelationNames() != null && !m.getRelationNames().isEmpty(),m.getRelationNames(),query.getColumnList(m,((QueryImpl)query).getKunderaQuery().getResult(),null),expressions,maxResult);
        if (maxResult == 1) {
          maxResult++;
        }
 else         if (maxResult > 1 && checkOnEmptyResult() && maxResult != results.size()) {
          results=null;
        }
      }
    }
  }
  return results;
}",0.9971181556195964
176142,"@Override public boolean hasSingleIdAttribute(){
  return !isIdClass && idAttribute != null;
}","@Override public boolean hasSingleIdAttribute(){
  return !isIdClass && getIdAttribute() != null;
}",0.9637305699481864
176143,"public SingularAttribute<? super X,?> getIdAttribute(){
  return idAttribute == null ? getSuperClazzType() != null ? ((AbstractIdentifiableType)getSuperClazzType()).getIdAttribute() : null : idAttribute;
}","public SingularAttribute<? super X,?> getIdAttribute(){
  idAttribute=idAttribute == null ? getSuperClazzType() != null ? ((AbstractIdentifiableType)getSuperClazzType()).getIdAttribute() : null : idAttribute;
  return idAttribute;
}",0.9061784897025172
176144,"@Override public Set<SingularAttribute<? super X,?>> getIdClassAttributes(){
  if (isIdClass) {
    return idClassAttributes;
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","@Override public Set<SingularAttribute<? super X,?>> getIdClassAttributes(){
  if (isIdClass) {
    return idClassAttributes;
  }
 else   if (getSuperClazzType() != null) {
    idClassAttributes=((AbstractIdentifiableType)getSuperClazzType()).getIdClassAttributes();
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}",0.7272727272727273
176145,"/** 
 * Compute entity via columns.
 * @param m the m
 * @param isRelation the is relation
 * @param relations the relations
 * @param entities the entities
 * @param qResults the q results
 */
protected void computeEntityViaColumns(EntityMetadata m,boolean isRelation,List<String> relations,List<Object> entities,Map<Bytes,List<Column>> qResults){
  for (  Bytes key : qResults.keySet()) {
    List<Column> columns=qResults.get(key);
    ThriftRow tr=new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key.toByteArray()),m.getTableName(),columns,new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
    Object o=getDataHandler().populateEntity(tr,m,relations,isRelation);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",m.getEntityClazz(),tr.getId());
    }
    if (o != null) {
      entities.add(o);
    }
  }
}","/** 
 * Compute entity via columns.
 * @param m the m
 * @param isRelation the is relation
 * @param relations the relations
 * @param entities the entities
 * @param qResults the q results
 */
protected void computeEntityViaColumns(EntityMetadata m,boolean isRelation,List<String> relations,List<Object> entities,Map<Bytes,List<Column>> qResults){
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entityType=metaModel.entity(m.getEntityClazz());
  List<AbstractManagedType> subManagedType=((AbstractManagedType)entityType).getSubManagedType();
  for (  Bytes key : qResults.keySet()) {
    List<Column> columns=qResults.get(key);
    ThriftRow tr=new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key.toByteArray()),m.getTableName(),columns,new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
    Object o=null;
    if (!subManagedType.isEmpty()) {
      for (      AbstractManagedType subEntity : subManagedType) {
        EntityMetadata subEntityMetadata=KunderaMetadataManager.getEntityMetadata(subEntity.getJavaType());
        o=getDataHandler().populateEntity(tr,subEntityMetadata,subEntityMetadata.getRelationNames(),isRelation);
        if (o != null) {
          break;
        }
      }
    }
 else {
      o=getDataHandler().populateEntity(tr,m,relations,isRelation);
    }
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",m.getEntityClazz(),tr.getId());
    }
    if (o != null) {
      entities.add(o);
    }
  }
}",0.7081681205392546
176146,"/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    boolean isCql3Enabled=clientBase.isCql3Enabled(m);
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        if (CassandraConstants.CQL_KEY.equalsIgnoreCase(thriftColumnName) && tr.getId() == null) {
          entity=initialize(m,entity,null);
          setId(m,entity,column.getValue(),isCql3Enabled);
        }
 else {
          entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations,isCql3Enabled);
        }
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity,isCql3Enabled);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations,isCql3Enabled);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity,isCql3Enabled);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relations) : entity;
}","/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    boolean isCql3Enabled=clientBase.isCql3Enabled(m);
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        if (CassandraConstants.CQL_KEY.equalsIgnoreCase(thriftColumnName) && tr.getId() == null) {
          entity=initialize(m,entity,null);
          setId(m,entity,column.getValue(),isCql3Enabled);
        }
 else {
          entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations,isCql3Enabled);
          if (entity == null) {
            break;
          }
        }
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity,isCql3Enabled);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations,isCql3Enabled);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity,isCql3Enabled);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relations) : entity;
}",0.9950715794414456
176147,"/** 
 * On column.
 * @param column the column
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @param relations the relations
 * @param isCql3Enabled
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private Object onColumn(Column column,EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,boolean isWrapReq,Map<String,Object> relations,boolean isCql3Enabled) throws InstantiationException, IllegalAccessException {
  String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
  byte[] thriftColumnValue=column.getValue();
  String discriminatorColumn=((AbstractManagedType)entityType).getDiscriminatorColumn();
  if (!thriftColumnName.equals(discriminatorColumn)) {
    if (m.isCounterColumnType()) {
      LongAccessor accessor=new LongAccessor();
      Long value=accessor.fromBytes(Long.class,column.getValue());
      return populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,value.toString(),isCql3Enabled);
    }
    return populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,thriftColumnValue,isCql3Enabled);
  }
  return entity;
}","/** 
 * On column.
 * @param column the column
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @param relations the relations
 * @param isCql3Enabled
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private Object onColumn(Column column,EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,boolean isWrapReq,Map<String,Object> relations,boolean isCql3Enabled) throws InstantiationException, IllegalAccessException {
  String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
  byte[] thriftColumnValue=column.getValue();
  String discriminatorColumn=((AbstractManagedType)entityType).getDiscriminatorColumn();
  String discriminatorValue=((AbstractManagedType)entityType).getDiscriminatorValue();
  if (!thriftColumnName.equals(discriminatorColumn)) {
    if (m.isCounterColumnType()) {
      LongAccessor accessor=new LongAccessor();
      Long value=accessor.fromBytes(Long.class,column.getValue());
      return populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,value.toString(),isCql3Enabled);
    }
    return populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,thriftColumnValue,isCql3Enabled);
  }
 else   if (thriftColumnName.contains(discriminatorColumn) && !PropertyAccessorFactory.STRING.fromBytes(String.class,thriftColumnValue).equals(discriminatorValue)) {
    entity=null;
  }
  return entity;
}",0.8948467966573816
176148,"@Override public List<Object> findByRelation(String colName,Object colValue,Class entityClazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  List<Object> entities=null;
  if (isCql3Enabled(m)) {
    entities=findByRelationQuery(m,colName,colValue,entityClazz,dataHandler);
  }
 else {
    SlicePredicate slicePredicate=new SlicePredicate();
    slicePredicate.setSlice_range(new SliceRange(Bytes.EMPTY.getBytes(),Bytes.EMPTY.getBytes(),false,Integer.MAX_VALUE));
    IndexExpression ie=new IndexExpression(Bytes.fromUTF8(colName).getBytes(),IndexOperator.EQ,ByteBuffer.wrap(PropertyAccessorHelper.getBytes(colValue)));
    List<IndexExpression> expressions=new ArrayList<IndexExpression>();
    expressions.add(ie);
    IndexClause ix=new IndexClause();
    ix.setStart_key(Bytes.EMPTY.toByteArray());
    ix.setCount(Integer.MAX_VALUE);
    ix.setExpressions(expressions);
    ColumnParent columnParent=new ColumnParent(m.getTableName());
    List<KeySlice> keySlices;
    Connection conn=null;
    try {
      conn=getConection();
      keySlices=conn.getClient().get_indexed_slices(columnParent,ix,slicePredicate,getConsistencyLevel());
    }
 catch (    InvalidRequestException e) {
      if (e.why != null && e.why.contains(""String_Node_Str"")) {
        return entities;
      }
 else {
        log.error(""String_Node_Str"",m.getTableName(),e);
        throw new KunderaException(e);
      }
    }
catch (    UnavailableException e) {
      log.error(""String_Node_Str"",m.getTableName(),e);
      throw new KunderaException(e);
    }
catch (    TimedOutException e) {
      log.error(""String_Node_Str"",m.getTableName(),e);
      throw new KunderaException(e);
    }
catch (    TException e) {
      log.error(""String_Node_Str"",m.getTableName(),e);
      throw new KunderaException(e);
    }
 finally {
      releaseConnection(conn);
    }
    if (keySlices != null) {
      entities=new ArrayList<Object>(keySlices.size());
      populateData(m,keySlices,entities,m.getRelationNames() != null,m.getRelationNames());
    }
  }
  return entities;
}","@Override public List<Object> findByRelation(String colName,Object colValue,Class entityClazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  List<Object> entities=null;
  if (isCql3Enabled(m)) {
    entities=findByRelationQuery(m,colName,colValue,entityClazz,dataHandler);
  }
 else {
    SlicePredicate slicePredicate=new SlicePredicate();
    slicePredicate.setSlice_range(new SliceRange(Bytes.EMPTY.getBytes(),Bytes.EMPTY.getBytes(),false,Integer.MAX_VALUE));
    IndexExpression ie=new IndexExpression(Bytes.fromUTF8(colName).getBytes(),IndexOperator.EQ,ByteBuffer.wrap(PropertyAccessorHelper.getBytes(colValue)));
    List<IndexExpression> expressions=new ArrayList<IndexExpression>();
    expressions.add(ie);
    IndexClause ix=new IndexClause();
    ix.setStart_key(Bytes.EMPTY.toByteArray());
    ix.setCount(Integer.MAX_VALUE);
    ix.setExpressions(expressions);
    ColumnParent columnParent=new ColumnParent(m.getTableName());
    List<KeySlice> keySlices;
    Connection conn=null;
    try {
      conn=getConection();
      keySlices=conn.getClient().get_indexed_slices(columnParent,ix,slicePredicate,getConsistencyLevel());
    }
 catch (    InvalidRequestException e) {
      if (e.why != null && e.why.contains(""String_Node_Str"")) {
        return entities;
      }
 else {
        log.error(""String_Node_Str"",m.getTableName(),e);
        throw new KunderaException(e);
      }
    }
catch (    UnavailableException e) {
      log.error(""String_Node_Str"",m.getTableName(),e);
      throw new KunderaException(e);
    }
catch (    TimedOutException e) {
      log.error(""String_Node_Str"",m.getTableName(),e);
      throw new KunderaException(e);
    }
catch (    TException e) {
      log.error(""String_Node_Str"",m.getTableName(),e);
      throw new KunderaException(e);
    }
 finally {
      releaseConnection(conn);
    }
    if (keySlices != null) {
      entities=new ArrayList<Object>(keySlices.size());
      MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
      EntityType entityType=metaModel.entity(m.getEntityClazz());
      List<AbstractManagedType> subManagedType=((AbstractManagedType)entityType).getSubManagedType();
      if (subManagedType.isEmpty()) {
        populateData(m,keySlices,entities,m.getRelationNames() != null,m.getRelationNames());
      }
 else {
        for (        AbstractManagedType subEntity : subManagedType) {
          EntityMetadata subEntityMetadata=KunderaMetadataManager.getEntityMetadata(subEntity.getJavaType());
          populateData(subEntityMetadata,keySlices,entities,subEntityMetadata.getRelationNames() != null,subEntityMetadata.getRelationNames());
        }
      }
    }
  }
  return entities;
}",0.8489711934156379
176149,"private void populateData(EntityMetadata m,List<KeySlice> keySlices,List<Object> entities,boolean isRelational,List<String> relationNames){
  try {
    if (m.getType().isSuperColumnFamilyMetadata()) {
      List<Object> rowKeys=ThriftDataResultHelper.getRowKeys(keySlices,m);
      Object[] rowIds=rowKeys.toArray();
      entities.addAll(findAll(m.getEntityClazz(),null,rowIds));
    }
 else {
      for (      KeySlice keySlice : keySlices) {
        byte[] key=keySlice.getKey();
        List<ColumnOrSuperColumn> coscList=keySlice.getColumns();
        List<Column> columns=ThriftDataResultHelper.transformThriftResult(coscList,ColumnFamilyType.COLUMN,null);
        Object e=dataHandler.populateEntity(new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key),m.getTableName(),columns,new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0)),m,relationNames,isRelational);
        if (e != null) {
          entities.add(e);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",m.getTableName(),e);
    throw new KunderaException(e);
  }
}","private void populateData(EntityMetadata m,List<KeySlice> keySlices,List<Object> entities,boolean isRelational,List<String> relationNames){
  try {
    if (m.getType().isSuperColumnFamilyMetadata()) {
      List<Object> rowKeys=ThriftDataResultHelper.getRowKeys(keySlices,m);
      Object[] rowIds=rowKeys.toArray();
      entities.addAll(findAll(m.getEntityClazz(),null,rowIds));
    }
 else {
      for (      KeySlice keySlice : keySlices) {
        byte[] key=keySlice.getKey();
        List<ColumnOrSuperColumn> coscList=keySlice.getColumns();
        List<Column> columns=ThriftDataResultHelper.transformThriftResult(coscList,ColumnFamilyType.COLUMN,null);
        Object e=dataHandler.populateEntity(new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key),m.getTableName(),columns,new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0)),m,relationNames,isRelational);
        if (e != null) {
          entities.add(e);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(""String_Node_Str"",m.getTableName(),e);
    throw new KunderaException(e);
  }
}",0.989210185584808
176150,"/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    boolean isCql3Enabled=clientBase.isCql3Enabled(m);
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        if (CassandraConstants.CQL_KEY.equalsIgnoreCase(thriftColumnName) && tr.getId() == null) {
          entity=initialize(m,entity,null);
          setId(m,entity,column.getValue(),isCql3Enabled);
        }
 else {
          entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations,isCql3Enabled);
          if (entity == null) {
            break;
          }
        }
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity,isCql3Enabled);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations,isCql3Enabled);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity,isCql3Enabled);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relations) : entity;
}","/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    boolean isCql3Enabled=clientBase.isCql3Enabled(m);
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        if (CassandraConstants.CQL_KEY.equalsIgnoreCase(thriftColumnName) && tr.getId() == null) {
          entity=initialize(m,entity,null);
          setId(m,entity,column.getValue(),isCql3Enabled);
        }
 else {
          entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations,isCql3Enabled);
          String discriminatorColumn=((AbstractManagedType)entityType).getDiscriminatorColumn();
          String discriminatorValue=((AbstractManagedType)entityType).getDiscriminatorValue();
          if (thriftColumnName != null && thriftColumnName.equals(discriminatorColumn) && column.getValue() != null && !PropertyAccessorFactory.STRING.fromBytes(String.class,column.getValue()).equals(discriminatorValue)) {
            entity=null;
            break;
          }
        }
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity,isCql3Enabled);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations,isCql3Enabled);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity,isCql3Enabled);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relations) : entity;
}",0.9681605553040592
176151,"/** 
 * On column.
 * @param column the column
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @param relations the relations
 * @param isCql3Enabled
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private Object onColumn(Column column,EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,boolean isWrapReq,Map<String,Object> relations,boolean isCql3Enabled) throws InstantiationException, IllegalAccessException {
  String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
  byte[] thriftColumnValue=column.getValue();
  String discriminatorColumn=((AbstractManagedType)entityType).getDiscriminatorColumn();
  String discriminatorValue=((AbstractManagedType)entityType).getDiscriminatorValue();
  if (!thriftColumnName.equals(discriminatorColumn)) {
    if (m.isCounterColumnType()) {
      LongAccessor accessor=new LongAccessor();
      Long value=accessor.fromBytes(Long.class,column.getValue());
      return populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,value.toString(),isCql3Enabled);
    }
    return populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,thriftColumnValue,isCql3Enabled);
  }
 else   if (thriftColumnName.contains(discriminatorColumn) && !PropertyAccessorFactory.STRING.fromBytes(String.class,thriftColumnValue).equals(discriminatorValue)) {
    entity=null;
  }
  return entity;
}","/** 
 * On column.
 * @param column the column
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @param relations the relations
 * @param isCql3Enabled
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private Object onColumn(Column column,EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,boolean isWrapReq,Map<String,Object> relations,boolean isCql3Enabled) throws InstantiationException, IllegalAccessException {
  String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
  byte[] thriftColumnValue=column.getValue();
  String discriminatorColumn=((AbstractManagedType)entityType).getDiscriminatorColumn();
  String discriminatorValue=((AbstractManagedType)entityType).getDiscriminatorValue();
  if (!thriftColumnName.equals(discriminatorColumn)) {
    if (m.isCounterColumnType()) {
      LongAccessor accessor=new LongAccessor();
      Long value=accessor.fromBytes(Long.class,column.getValue());
      return populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,value.toString(),isCql3Enabled);
    }
    return populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,thriftColumnValue,isCql3Enabled);
  }
  return entity;
}",0.92734031767489
176152,"@Override public List<Object> findByRelation(String colName,Object colValue,Class entityClazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  List<Object> entities=null;
  if (isCql3Enabled(m)) {
    entities=findByRelationQuery(m,colName,colValue,entityClazz,dataHandler);
  }
 else {
    SlicePredicate slicePredicate=new SlicePredicate();
    slicePredicate.setSlice_range(new SliceRange(Bytes.EMPTY.getBytes(),Bytes.EMPTY.getBytes(),false,Integer.MAX_VALUE));
    IndexExpression ie=new IndexExpression(Bytes.fromUTF8(colName).getBytes(),IndexOperator.EQ,ByteBuffer.wrap(PropertyAccessorHelper.getBytes(colValue)));
    List<IndexExpression> expressions=new ArrayList<IndexExpression>();
    expressions.add(ie);
    IndexClause ix=new IndexClause();
    ix.setStart_key(Bytes.EMPTY.toByteArray());
    ix.setCount(Integer.MAX_VALUE);
    ix.setExpressions(expressions);
    ColumnParent columnParent=new ColumnParent(m.getTableName());
    List<KeySlice> keySlices;
    Connection conn=null;
    try {
      conn=getConection();
      keySlices=conn.getClient().get_indexed_slices(columnParent,ix,slicePredicate,getConsistencyLevel());
    }
 catch (    InvalidRequestException e) {
      if (e.why != null && e.why.contains(""String_Node_Str"")) {
        return entities;
      }
 else {
        log.error(""String_Node_Str"",m.getTableName(),e);
        throw new KunderaException(e);
      }
    }
catch (    UnavailableException e) {
      log.error(""String_Node_Str"",m.getTableName(),e);
      throw new KunderaException(e);
    }
catch (    TimedOutException e) {
      log.error(""String_Node_Str"",m.getTableName(),e);
      throw new KunderaException(e);
    }
catch (    TException e) {
      log.error(""String_Node_Str"",m.getTableName(),e);
      throw new KunderaException(e);
    }
 finally {
      releaseConnection(conn);
    }
    if (keySlices != null) {
      entities=new ArrayList<Object>(keySlices.size());
      MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
      EntityType entityType=metaModel.entity(m.getEntityClazz());
      List<AbstractManagedType> subManagedType=((AbstractManagedType)entityType).getSubManagedType();
      if (subManagedType.isEmpty()) {
        populateData(m,keySlices,entities,m.getRelationNames() != null,m.getRelationNames());
      }
 else {
        for (        AbstractManagedType subEntity : subManagedType) {
          EntityMetadata subEntityMetadata=KunderaMetadataManager.getEntityMetadata(subEntity.getJavaType());
          populateData(subEntityMetadata,keySlices,entities,subEntityMetadata.getRelationNames() != null,subEntityMetadata.getRelationNames());
        }
      }
    }
  }
  return entities;
}","@Override public List<Object> findByRelation(String colName,Object colValue,Class entityClazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  List<Object> entities=null;
  if (isCql3Enabled(m)) {
    entities=findByRelationQuery(m,colName,colValue,entityClazz,dataHandler);
  }
 else {
    SlicePredicate slicePredicate=new SlicePredicate();
    slicePredicate.setSlice_range(new SliceRange(Bytes.EMPTY.getBytes(),Bytes.EMPTY.getBytes(),false,Integer.MAX_VALUE));
    IndexExpression ie=new IndexExpression(Bytes.fromUTF8(colName).getBytes(),IndexOperator.EQ,ByteBuffer.wrap(PropertyAccessorHelper.getBytes(colValue)));
    List<IndexExpression> expressions=new ArrayList<IndexExpression>();
    expressions.add(ie);
    IndexClause ix=new IndexClause();
    ix.setStart_key(Bytes.EMPTY.toByteArray());
    ix.setCount(Integer.MAX_VALUE);
    ix.setExpressions(expressions);
    ColumnParent columnParent=new ColumnParent(m.getTableName());
    List<KeySlice> keySlices;
    Connection conn=null;
    try {
      conn=getConection();
      keySlices=conn.getClient().get_indexed_slices(columnParent,ix,slicePredicate,getConsistencyLevel());
    }
 catch (    InvalidRequestException e) {
      if (e.why != null && e.why.contains(""String_Node_Str"")) {
        return entities;
      }
 else {
        log.error(""String_Node_Str"",m.getTableName(),e);
        throw new KunderaException(e);
      }
    }
catch (    UnavailableException e) {
      log.error(""String_Node_Str"",m.getTableName(),e);
      throw new KunderaException(e);
    }
catch (    TimedOutException e) {
      log.error(""String_Node_Str"",m.getTableName(),e);
      throw new KunderaException(e);
    }
catch (    TException e) {
      log.error(""String_Node_Str"",m.getTableName(),e);
      throw new KunderaException(e);
    }
 finally {
      releaseConnection(conn);
    }
    if (keySlices != null) {
      entities=new ArrayList<Object>(keySlices.size());
      MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
      EntityType entityType=metaModel.entity(m.getEntityClazz());
      List<AbstractManagedType> subManagedType=((AbstractManagedType)entityType).getSubManagedType();
      if (subManagedType.isEmpty()) {
        entities=populateData(m,keySlices,entities,m.getRelationNames() != null,m.getRelationNames());
      }
 else {
        for (        AbstractManagedType subEntity : subManagedType) {
          EntityMetadata subEntityMetadata=KunderaMetadataManager.getEntityMetadata(subEntity.getJavaType());
          entities=populateData(subEntityMetadata,keySlices,entities,subEntityMetadata.getRelationNames() != null,subEntityMetadata.getRelationNames());
        }
      }
    }
  }
  return entities;
}",0.9967730369307995
176153,"private void populateData(EntityMetadata m,List<KeySlice> keySlices,List<Object> entities,boolean isRelational,List<String> relationNames){
  try {
    if (m.getType().isSuperColumnFamilyMetadata()) {
      List<Object> rowKeys=ThriftDataResultHelper.getRowKeys(keySlices,m);
      Object[] rowIds=rowKeys.toArray();
      entities.addAll(findAll(m.getEntityClazz(),null,rowIds));
    }
 else {
      for (      KeySlice keySlice : keySlices) {
        byte[] key=keySlice.getKey();
        List<ColumnOrSuperColumn> coscList=keySlice.getColumns();
        List<Column> columns=ThriftDataResultHelper.transformThriftResult(coscList,ColumnFamilyType.COLUMN,null);
        Object e=dataHandler.populateEntity(new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key),m.getTableName(),columns,new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0)),m,relationNames,isRelational);
        if (e != null) {
          entities.add(e);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(""String_Node_Str"",m.getTableName(),e);
    throw new KunderaException(e);
  }
}","private List populateData(EntityMetadata m,List<KeySlice> keySlices,List<Object> entities,boolean isRelational,List<String> relationNames){
  try {
    if (m.getType().isSuperColumnFamilyMetadata()) {
      List<Object> rowKeys=ThriftDataResultHelper.getRowKeys(keySlices,m);
      Object[] rowIds=rowKeys.toArray();
      entities.addAll(findAll(m.getEntityClazz(),null,rowIds));
    }
 else {
      for (      KeySlice keySlice : keySlices) {
        byte[] key=keySlice.getKey();
        List<ColumnOrSuperColumn> coscList=keySlice.getColumns();
        List<Column> columns=ThriftDataResultHelper.transformThriftResult(coscList,ColumnFamilyType.COLUMN,null);
        Object e=dataHandler.populateEntity(new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key),m.getTableName(),columns,new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0)),m,relationNames,isRelational);
        if (e != null) {
          entities.add(e);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(""String_Node_Str"",m.getTableName(),e);
    throw new KunderaException(e);
  }
  return entities;
}",0.98856416772554
176154,"@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(keyspaceName);
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(keyspaceName,ksDef.getName());
    Assert.assertEquals(SimpleStrategy.class.getName(),ksDef.getStrategy_class());
    Assert.assertEquals(""String_Node_Str"",ksDef.getStrategy_options().get(""String_Node_Str""));
    Assert.assertTrue(ksDef.isDurable_writes());
    Assert.assertNotNull(ksDef.getCf_defs());
    Assert.assertNotNull(ksDef.getStrategy_options());
    Assert.assertEquals(8,ksDef.getCf_defsSize());
    for (    CfDef cfDef : ksDef.getCf_defs()) {
      Assert.assertNotNull(cfDef);
      if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(""String_Node_Str"",cfDef.getName());
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertFalse(cfDef.getComment().isEmpty());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getComparator_type());
        Assert.assertNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(2,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
        Assert.assertTrue(cfDef.isReplicate_on_write());
        Assert.assertEquals(16,cfDef.getMin_compaction_threshold());
        Assert.assertEquals(64,cfDef.getMax_compaction_threshold());
      }
 else       if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertTrue(cfDef.getComment().isEmpty());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getComparator_type());
        Assert.assertNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(2,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
        Assert.assertTrue(cfDef.isReplicate_on_write());
        Assert.assertEquals(4,cfDef.getMin_compaction_threshold());
        Assert.assertEquals(32,cfDef.getMax_compaction_threshold());
      }
 else       if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertTrue(cfDef.getComment().isEmpty());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getComparator_type());
        Assert.assertNotNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getSubcomparator_type());
        Assert.assertEquals(0,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
      }
 else       if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(""String_Node_Str"",cfDef.getName());
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertFalse(cfDef.getComment().isEmpty());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getComparator_type());
        Assert.assertNotNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getSubcomparator_type());
        Assert.assertEquals(0,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
      }
 else {
      }
    }
  }
 catch (  NotFoundException nfe) {
    Assert.fail();
    logger.error(""String_Node_Str"",nfe.getMessage());
  }
catch (  InvalidRequestException ire) {
    Assert.fail();
    logger.error(""String_Node_Str"",ire.getMessage());
  }
catch (  TException te) {
    Assert.fail();
    logger.error(""String_Node_Str"",te.getMessage());
  }
}","@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(keyspaceName);
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(keyspaceName,ksDef.getName());
    Assert.assertEquals(SimpleStrategy.class.getName(),ksDef.getStrategy_class());
    Assert.assertEquals(""String_Node_Str"",ksDef.getStrategy_options().get(""String_Node_Str""));
    Assert.assertTrue(ksDef.isDurable_writes());
    Assert.assertNotNull(ksDef.getCf_defs());
    Assert.assertNotNull(ksDef.getStrategy_options());
    Assert.assertEquals(10,ksDef.getCf_defsSize());
    for (    CfDef cfDef : ksDef.getCf_defs()) {
      Assert.assertNotNull(cfDef);
      if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(""String_Node_Str"",cfDef.getName());
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertFalse(cfDef.getComment().isEmpty());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getComparator_type());
        Assert.assertNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(2,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
        Assert.assertTrue(cfDef.isReplicate_on_write());
        Assert.assertEquals(16,cfDef.getMin_compaction_threshold());
        Assert.assertEquals(64,cfDef.getMax_compaction_threshold());
      }
 else       if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertTrue(cfDef.getComment().isEmpty());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getComparator_type());
        Assert.assertNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(2,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
        Assert.assertTrue(cfDef.isReplicate_on_write());
        Assert.assertEquals(4,cfDef.getMin_compaction_threshold());
        Assert.assertEquals(32,cfDef.getMax_compaction_threshold());
      }
 else       if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertTrue(cfDef.getComment().isEmpty());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getComparator_type());
        Assert.assertNotNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getSubcomparator_type());
        Assert.assertEquals(0,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
      }
 else       if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(""String_Node_Str"",cfDef.getName());
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertFalse(cfDef.getComment().isEmpty());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getComparator_type());
        Assert.assertNotNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getSubcomparator_type());
        Assert.assertEquals(0,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
      }
 else {
      }
    }
  }
 catch (  NotFoundException nfe) {
    Assert.fail();
    logger.error(""String_Node_Str"",nfe.getMessage());
  }
catch (  InvalidRequestException ire) {
    Assert.fail();
    logger.error(""String_Node_Str"",ire.getMessage());
  }
catch (  TException te) {
    Assert.fail();
    logger.error(""String_Node_Str"",te.getMessage());
  }
}",0.999617688288518
176155,"@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(16,ksDef.getCf_defsSize());
    int count=0;
    for (    CfDef cfDef : ksDef.cf_defs) {
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
        continue;
      }
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
      }
 else       if (!cfDef.getName().equals(""String_Node_Str"") && !cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        List<ColumnDef> columnDefs=cfDef.getColumn_metadata();
        Assert.assertEquals(1,columnDefs.size());
        count++;
      }
    }
    Assert.assertEquals(14,count);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
}","@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(18,ksDef.getCf_defsSize());
    int count=0;
    for (    CfDef cfDef : ksDef.cf_defs) {
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
        continue;
      }
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
      }
 else       if (!cfDef.getName().equals(""String_Node_Str"") && !cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        List<ColumnDef> columnDefs=cfDef.getColumn_metadata();
        Assert.assertEquals(1,columnDefs.size());
        count++;
      }
    }
    Assert.assertEquals(14,count);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
}",0.9992592592592592
176156,"@Override public <E>List<E> findAll(Class<E> entityClass,String[] columnsToSelect,Object... rowIds){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  if (rowIds == null) {
    return null;
  }
  List results;
  try {
    results=handler.readAll(entityMetadata.getSchema(),entityMetadata.getEntityClazz(),entityMetadata,Arrays.asList(rowIds),entityMetadata.getRelationNames());
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results;
}","@Override public <E>List<E> findAll(Class<E> entityClass,String[] columnsToSelect,Object... rowIds){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  if (rowIds == null) {
    return null;
  }
  List results=new ArrayList<E>();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
  EntityType entityType=metaModel.entity(entityClass);
  List<AbstractManagedType> subManagedType=((AbstractManagedType)entityType).getSubManagedType();
  try {
    if (!subManagedType.isEmpty()) {
      for (      AbstractManagedType subEntity : subManagedType) {
        EntityMetadata subEntityMetadata=KunderaMetadataManager.getEntityMetadata(subEntity.getJavaType());
        results=handler.readAll(subEntityMetadata.getSchema(),subEntityMetadata.getEntityClazz(),subEntityMetadata,Arrays.asList(rowIds),subEntityMetadata.getRelationNames());
        if (!results.isEmpty()) {
          break;
        }
      }
    }
 else {
      results=handler.readAll(entityMetadata.getSchema(),entityMetadata.getEntityClazz(),entityMetadata,Arrays.asList(rowIds),entityMetadata.getRelationNames());
    }
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results;
}",0.5773087071240105
176157,"/** 
 * Handles find by range query for given start and end row key range values.
 * @param < E > parameterized entity class.
 * @param entityClass entity class.
 * @param metadata entity metadata
 * @param startRow start row.
 * @param endRow end row.
 * @return collection holding results.
 */
public <E>List<E> findByRange(Class<E> entityClass,EntityMetadata metadata,byte[] startRow,byte[] endRow,String[] columns,Filter f){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String tableName=entityMetadata.getSchema();
  List results=new ArrayList();
  FilterList filter=new FilterList();
  if (f != null) {
    filter.addFilter(f);
  }
  if (isFindKeyOnly(metadata,columns)) {
    columns=null;
    filter.addFilter(new KeyOnlyFilter());
  }
  try {
    results=handler.readDataByRange(tableName,entityClass,metadata,startRow,endRow,columns,filter);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results;
}","/** 
 * Handles find by range query for given start and end row key range values.
 * @param < E > parameterized entity class.
 * @param entityClass entity class.
 * @param metadata entity metadata
 * @param startRow start row.
 * @param endRow end row.
 * @return collection holding results.
 */
public <E>List<E> findByRange(Class<E> entityClass,EntityMetadata metadata,byte[] startRow,byte[] endRow,String[] columns,Filter f){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String tableName=entityMetadata.getSchema();
  List results=new ArrayList();
  FilterList filter=new FilterList();
  if (f != null) {
    filter.addFilter(f);
  }
  if (isFindKeyOnly(metadata,columns)) {
    columns=null;
    filter.addFilter(new KeyOnlyFilter());
  }
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
    EntityType entityType=metaModel.entity(entityClass);
    List<AbstractManagedType> subManagedType=((AbstractManagedType)entityType).getSubManagedType();
    if (!subManagedType.isEmpty()) {
      for (      AbstractManagedType subEntity : subManagedType) {
        EntityMetadata subEntityMetadata=KunderaMetadataManager.getEntityMetadata(subEntity.getJavaType());
        List found=handler.readDataByRange(tableName,subEntityMetadata.getEntityClazz(),subEntityMetadata,startRow,endRow,columns,filter);
        results.addAll(found);
      }
    }
 else {
      results=handler.readDataByRange(tableName,entityClass,metadata,startRow,endRow,columns,filter);
    }
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results;
}",0.7340310357271743
176158,"@Override public List<Object> findByRelation(String colName,Object colValue,Class entityClazz){
  CompareOp operator=HBaseUtils.getOperator(""String_Node_Str"",false);
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  String columnFamilyName=m.getTableName();
  byte[] valueInBytes=HBaseUtils.getBytes(colValue);
  SingleColumnValueFilter f=null;
  f=new SingleColumnValueFilter(Bytes.toBytes(columnFamilyName),Bytes.toBytes(colName),operator,valueInBytes);
  try {
    return ((HBaseDataHandler)handler).scanData(f,m.getSchema(),entityClazz,m,columnFamilyName,colName);
  }
 catch (  IOException ioe) {
    log.error(""String_Node_Str"",ioe);
    throw new KunderaException(ioe);
  }
catch (  InstantiationException ie) {
    log.error(""String_Node_Str"",ie);
    throw new KunderaException(ie);
  }
catch (  IllegalAccessException iae) {
    log.error(""String_Node_Str"",iae);
    throw new KunderaException(iae);
  }
}","@Override public List<Object> findByRelation(String colName,Object colValue,Class entityClazz){
  CompareOp operator=HBaseUtils.getOperator(""String_Node_Str"",false);
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  String columnFamilyName=m.getTableName();
  byte[] valueInBytes=HBaseUtils.getBytes(colValue);
  SingleColumnValueFilter f=null;
  f=new SingleColumnValueFilter(Bytes.toBytes(columnFamilyName),Bytes.toBytes(colName),operator,valueInBytes);
  List output=new ArrayList();
  try {
    List<AbstractManagedType> subManagedType=getSubManagedType(entityClazz,m);
    if (!subManagedType.isEmpty()) {
      for (      AbstractManagedType subEntity : subManagedType) {
        EntityMetadata subEntityMetadata=KunderaMetadataManager.getEntityMetadata(subEntity.getJavaType());
        List results=((HBaseDataHandler)handler).scanData(f,subEntityMetadata.getSchema(),subEntityMetadata.getEntityClazz(),subEntityMetadata,columnFamilyName,colName);
        if (!results.isEmpty()) {
          output.addAll(results);
        }
      }
    }
 else {
      return ((HBaseDataHandler)handler).scanData(f,m.getSchema(),entityClazz,m,columnFamilyName,colName);
    }
  }
 catch (  IOException ioe) {
    log.error(""String_Node_Str"",ioe);
    throw new KunderaException(ioe);
  }
catch (  InstantiationException ie) {
    log.error(""String_Node_Str"",ie);
    throw new KunderaException(ie);
  }
catch (  IllegalAccessException iae) {
    log.error(""String_Node_Str"",iae);
    throw new KunderaException(iae);
  }
  return output;
}",0.7442977190876351
176159,"/** 
 * (non-Javadoc)
 * @see com.impetus.kundera.client.Client#find(java.lang.Class,java.util.Map)
 */
@Override public <E>List<E> find(Class<E> entityClass,Map<String,String> col){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(getPersistenceUnit(),entityClass);
  List<E> entities=new ArrayList<E>();
  Map<String,Field> columnFamilyNameToFieldMap=MetadataUtils.createSuperColumnsFieldMap(entityMetadata);
  for (  String columnFamilyName : col.keySet()) {
    String entityId=col.get(columnFamilyName);
    if (entityId != null) {
      E e=null;
      try {
        List results=handler.readData(entityMetadata.getSchema(),entityMetadata.getEntityClazz(),entityMetadata,entityId,null,null);
        if (results != null) {
          e=(E)results.get(0);
        }
      }
 catch (      IOException ioex) {
        log.error(""String_Node_Str"",ioex);
        throw new KunderaException(ioex);
      }
      Field columnFamilyField=columnFamilyNameToFieldMap.get(columnFamilyName.substring(0,columnFamilyName.indexOf(""String_Node_Str"")));
      Object columnFamilyValue=PropertyAccessorHelper.getObject(e,columnFamilyField);
      if (Collection.class.isAssignableFrom(columnFamilyField.getType())) {
        entities.addAll((Collection)columnFamilyValue);
      }
 else {
        entities.add((E)columnFamilyValue);
      }
    }
  }
  return entities;
}","/** 
 * (non-Javadoc)
 * @see com.impetus.kundera.client.Client#find(java.lang.Class,java.util.Map)
 */
@Override public <E>List<E> find(Class<E> entityClass,Map<String,String> col){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(getPersistenceUnit(),entityClass);
  List<E> entities=new ArrayList<E>();
  Map<String,Field> columnFamilyNameToFieldMap=MetadataUtils.createSuperColumnsFieldMap(entityMetadata);
  for (  String columnFamilyName : col.keySet()) {
    String entityId=col.get(columnFamilyName);
    if (entityId != null) {
      E e=null;
      try {
        List results=new ArrayList();
        fetchEntity(entityClass,entityId,entityMetadata,entityMetadata.getRelationNames(),entityMetadata.getSchema(),results,null,null);
        if (results != null) {
          e=(E)results.get(0);
        }
      }
 catch (      IOException ioex) {
        log.error(""String_Node_Str"",ioex);
        throw new KunderaException(ioex);
      }
      Field columnFamilyField=columnFamilyNameToFieldMap.get(columnFamilyName.substring(0,columnFamilyName.indexOf(""String_Node_Str"")));
      Object columnFamilyValue=PropertyAccessorHelper.getObject(e,columnFamilyField);
      if (Collection.class.isAssignableFrom(columnFamilyField.getType())) {
        entities.addAll((Collection)columnFamilyValue);
      }
 else {
        entities.add((E)columnFamilyValue);
      }
    }
  }
  return entities;
}",0.9344262295081968
176160,"/** 
 * Method to find entities using JPQL(converted into FilterList.)
 * @param < E > parameterized entity class.
 * @param entityClass entity class.
 * @param metadata entity metadata.
 * @return list of entities.
 */
public <E>List<E> findByQuery(Class<E> entityClass,EntityMetadata metadata,Filter f,String... columns){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  List<String> relationNames=entityMetadata.getRelationNames();
  String tableName=entityMetadata.getSchema();
  List results=null;
  FilterList filter=new FilterList();
  if (f != null) {
    filter.addFilter(f);
  }
  if (isFindKeyOnly(metadata,columns)) {
    columns=null;
    filter.addFilter(new KeyOnlyFilter());
  }
  try {
    results=handler.readData(tableName,entityMetadata.getEntityClazz(),entityMetadata,null,relationNames,filter,columns);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results != null ? results : new ArrayList();
}","/** 
 * Method to find entities using JPQL(converted into FilterList.)
 * @param < E > parameterized entity class.
 * @param entityClass entity class.
 * @param metadata entity metadata.
 * @return list of entities.
 */
public <E>List<E> findByQuery(Class<E> entityClass,EntityMetadata metadata,Filter f,String... columns){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  List<String> relationNames=entityMetadata.getRelationNames();
  String tableName=entityMetadata.getSchema();
  List results=null;
  FilterList filter=new FilterList();
  if (f != null) {
    filter.addFilter(f);
  }
  if (isFindKeyOnly(metadata,columns)) {
    columns=null;
    filter.addFilter(new KeyOnlyFilter());
  }
  try {
    results=fetchEntity(entityClass,null,entityMetadata,relationNames,tableName,results,filter,columns);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results != null ? results : new ArrayList();
}",0.9303458353628836
176161,"/** 
 * Sets the columns.
 * @param columns the new columns
 */
public void setColumns(List<KeyValue> columns){
  this.columns=columns;
}","public void setColumns(List<KeyValue> columns){
  for (  KeyValue column : columns) {
    putColumn(column.getQualifier(),column.getValue());
  }
}",0.4647887323943662
176162,"/** 
 * Getter for list of columns.
 * @return list of columns
 */
public List<KeyValue> getColumns(){
  return columns != null ? Collections.unmodifiableList(columns) : null;
}","public Map<String,byte[]> getColumns(){
  return columns;
}",0.3813559322033898
176163,"private void assertRelation(EntityManager em){
  List<SocialProfile> profiles=new ArrayList<SocialProfile>();
  FacebookProfile fbprofile=new FacebookProfile();
  fbprofile.setId(103l);
  fbprofile.setFacebookId(""String_Node_Str"");
  fbprofile.setFacebookUser(""String_Node_Str"");
  fbprofile.setuserType(""String_Node_Str"");
  profiles.add(fbprofile);
  TwitterProfile twprofile1=new TwitterProfile();
  twprofile1.setTwitterId(""String_Node_Str"");
  twprofile1.setTwitterName(""String_Node_Str"");
  twprofile1.setId(102l);
  profiles.add(twprofile1);
  twprofile1.setuserType(""String_Node_Str"");
  UserAccount uacc=new UserAccount();
  uacc.setId(101l);
  uacc.setDispName(""String_Node_Str"");
  uacc.setSocialProfiles(profiles);
  twprofile1.setuserAccount(uacc);
  fbprofile.setuserAccount(uacc);
  em.getTransaction().begin();
  em.persist(uacc);
  em.getTransaction().commit();
  em.clear();
  String uaQuery=""String_Node_Str"";
  Query q=em.createQuery(uaQuery);
  List<UserAccount> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getDispName());
  Assert.assertEquals(2,results.get(0).getSocialProfiles().size());
  Assert.assertFalse(results.get(0).getSocialProfiles().get(0).getId().equals(results.get(0).getId()));
  em.clear();
}","private void assertRelation(EntityManager em){
  List<SocialProfile> profiles=new ArrayList<SocialProfile>();
  FacebookProfile fbprofile=new FacebookProfile();
  fbprofile.setId(103l);
  fbprofile.setFacebookId(""String_Node_Str"");
  fbprofile.setFacebookUser(""String_Node_Str"");
  fbprofile.setuserType(""String_Node_Str"");
  profiles.add(fbprofile);
  TwitterProfile twprofile1=new TwitterProfile();
  twprofile1.setTwitterId(""String_Node_Str"");
  twprofile1.setTwitterName(""String_Node_Str"");
  twprofile1.setId(102l);
  profiles.add(twprofile1);
  twprofile1.setuserType(""String_Node_Str"");
  UserAccount uacc=new UserAccount();
  uacc.setId(101l);
  uacc.setDispName(""String_Node_Str"");
  uacc.setSocialProfiles(profiles);
  twprofile1.setuserAccount(uacc);
  fbprofile.setuserAccount(uacc);
  em.getTransaction().begin();
  em.persist(uacc);
  em.getTransaction().commit();
  em.persist(fbprofile);
  em.persist(twprofile1);
  em.clear();
  String uaQuery=""String_Node_Str"";
  Query q=em.createQuery(uaQuery);
  List<UserAccount> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getDispName());
  Assert.assertEquals(2,results.get(0).getSocialProfiles().size());
  Assert.assertFalse(results.get(0).getSocialProfiles().get(0).getId().equals(results.get(0).getId()));
  em.clear();
}",0.9809060277049794
176164,"@Override public void handlePersist(NodeStateContext nodeStateContext){
  recursivelyPerformOperation(nodeStateContext,OPERATION.PERSIST);
}","@Override public void handlePersist(NodeStateContext nodeStateContext){
  if (((Node)nodeStateContext).isDirty()) {
    recursivelyPerformOperation(nodeStateContext,OPERATION.PERSIST);
  }
}",0.8484848484848485
176165,"/** 
 * Writes an entity into Persistence cache. (Actual database write is done while flushing)
 */
public void persist(Object e){
  if (e == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  EntityMetadata metadata=getMetadata(e.getClass());
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new TransientState());
  Node node=graph.getHeadNode();
  try {
    lock.writeLock().lock();
    node.persist();
    flushManager.buildFlushStack(node,com.impetus.kundera.persistence.context.EventLog.EventType.INSERT);
    flush();
    getPersistenceCache().getMainCache().addHeadNode(node);
  }
  finally {
    lock.writeLock().unlock();
  }
  graph.clear();
  graph=null;
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + e.getClass());
  }
}","/** 
 * Writes an entity into Persistence cache. (Actual database write is done while flushing)
 */
public void persist(Object e){
  if (e == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new TransientState());
  Node node=graph.getHeadNode();
  try {
    lock.writeLock().lock();
    node.persist();
    flushManager.buildFlushStack(node,com.impetus.kundera.persistence.context.EventLog.EventType.INSERT);
    flush();
    getPersistenceCache().getMainCache().addHeadNode(node);
  }
  finally {
    lock.writeLock().unlock();
  }
  graph.clear();
  graph=null;
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + e.getClass());
  }
}",0.9645484949832775
176166,"/** 
 * Method to handle
 * @param node
 */
public void persist(Node node){
  Object entity=node.getData();
  Object id=node.getEntityId();
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
  isUpdate=node.isUpdate();
  List<RelationHolder> relationHolders=getRelationHolders(node);
  onPersist(metadata,entity,id,relationHolders);
  indexNode(node,metadata);
}","/** 
 * Method to handle
 * @param node
 */
public void persist(Node node){
  Object entity=node.getData();
  Object id=node.getEntityId();
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
  isUpdate=node.isUpdate();
  List<RelationHolder> relationHolders=getRelationHolders(node);
  onPersist(metadata,entity,id,relationHolders);
  id=PropertyAccessorHelper.getId(entity,metadata);
  node.setEntityId(id);
  indexNode(node,metadata);
}",0.91324200913242
176167,"@Override protected void setConfig(Host host,Properties props,Map puProperties){
  CassandraHost cassandraHost=(CassandraHost)host;
  String maxActivePerNode=null;
  String maxIdlePerNode=null;
  String minIdlePerNode=null;
  String maxTotal=null;
  String testOnBorrow=null;
  String testWhileIdle=null;
  String testOnConnect=null;
  String testOnReturn=null;
  String socketTimeOut=null;
  String userName=null;
  String password=null;
  String maxWaitInMilli=null;
  String failOverPolicy=null;
  boolean hostRetry=false;
  if (puProperties != null) {
    maxActivePerNode=(String)puProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_ACTIVE);
    maxIdlePerNode=(String)puProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_IDLE);
    minIdlePerNode=(String)puProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MIN_IDLE);
    maxTotal=(String)puProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_TOTAL);
    testOnBorrow=(String)puProperties.get(CassandraConstants.TEST_ON_BORROW);
    testOnConnect=(String)puProperties.get(CassandraConstants.TEST_ON_CONNECT);
    testOnReturn=(String)puProperties.get(CassandraConstants.TEST_ON_RETURN);
    testWhileIdle=(String)puProperties.get(CassandraConstants.TEST_WHILE_IDLE);
    socketTimeOut=(String)puProperties.get(CassandraConstants.SOCKET_TIMEOUT);
    userName=(String)puProperties.get(PersistenceProperties.KUNDERA_USERNAME);
    password=(String)puProperties.get(PersistenceProperties.KUNDERA_PASSWORD);
    maxWaitInMilli=(String)puProperties.get(CassandraConstants.MAX_WAIT);
  }
  if (props != null) {
    if (maxActivePerNode == null) {
      maxActivePerNode=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_ACTIVE) != null ? props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_ACTIVE).trim() : null;
    }
    if (maxIdlePerNode == null) {
      maxIdlePerNode=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_IDLE) != null ? props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_IDLE).trim() : null;
    }
    if (minIdlePerNode == null) {
      minIdlePerNode=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MIN_IDLE) != null ? props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MIN_IDLE).trim() : null;
    }
    if (maxTotal == null) {
      maxTotal=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_TOTAL) != null ? props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_TOTAL).trim() : null;
    }
    if (maxWaitInMilli == null) {
      maxWaitInMilli=props.getProperty(CassandraConstants.MAX_WAIT) != null ? props.getProperty(CassandraConstants.MAX_WAIT).trim() : null;
    }
    if (userName == null) {
      userName=props.getProperty(PersistenceProperties.KUNDERA_USERNAME);
      password=props.getProperty(PersistenceProperties.KUNDERA_PASSWORD);
    }
    if (testOnBorrow == null) {
      testOnBorrow=props.getProperty(CassandraConstants.TEST_ON_BORROW) != null ? props.getProperty(CassandraConstants.TEST_ON_BORROW).trim() : null;
    }
    if (testOnConnect == null) {
      testOnConnect=props.getProperty(CassandraConstants.TEST_ON_CONNECT) != null ? props.getProperty(CassandraConstants.TEST_ON_CONNECT).trim() : null;
    }
    if (testOnReturn == null) {
      testOnReturn=props.getProperty(CassandraConstants.TEST_ON_RETURN) != null ? props.getProperty(CassandraConstants.TEST_ON_RETURN).trim() : null;
    }
    if (testWhileIdle == null) {
      testWhileIdle=props.getProperty(CassandraConstants.TEST_WHILE_IDLE) != null ? props.getProperty(CassandraConstants.TEST_WHILE_IDLE).trim() : null;
    }
    if (socketTimeOut == null) {
      socketTimeOut=props.getProperty(CassandraConstants.SOCKET_TIMEOUT) != null ? props.getProperty(CassandraConstants.SOCKET_TIMEOUT).trim() : null;
    }
    failOverPolicy=props.getProperty(Constants.FAILOVER_POLICY) != null ? props.getProperty(Constants.FAILOVER_POLICY).trim() : null;
    hostRetry=Boolean.parseBoolean(props.getProperty(Constants.RETRY) != null ? props.getProperty(Constants.RETRY).trim() : null);
  }
  try {
    if (!StringUtils.isEmpty(maxActivePerNode)) {
      cassandraHost.setInitialSize(Integer.parseInt(maxActivePerNode));
      cassandraHost.setMaxActive(Integer.parseInt(maxActivePerNode));
    }
    if (!StringUtils.isEmpty(maxIdlePerNode)) {
      cassandraHost.setMaxIdle(Integer.parseInt(maxIdlePerNode));
    }
    if (!StringUtils.isEmpty(minIdlePerNode)) {
      cassandraHost.setMinIdle(Integer.parseInt(minIdlePerNode));
    }
    if (!StringUtils.isEmpty(maxTotal)) {
      cassandraHost.setMaxActive(Integer.parseInt(maxTotal));
    }
    if (!StringUtils.isEmpty(maxWaitInMilli)) {
      cassandraHost.setMaxWait(Integer.parseInt(maxWaitInMilli));
    }
    cassandraHost.setTestOnBorrow(Boolean.parseBoolean(testOnBorrow));
    cassandraHost.setTestOnConnect(Boolean.parseBoolean(testOnConnect));
    cassandraHost.setTestOnReturn(Boolean.parseBoolean(testOnReturn));
    cassandraHost.setTestWhileIdle(Boolean.parseBoolean(testWhileIdle));
    cassandraHost.setHostFailoverPolicy(getFailoverPolicy(failOverPolicy));
    cassandraHost.setRetryHost(hostRetry);
    cassandraHost.setUserName(userName);
    cassandraHost.setPassword(password);
    if (!StringUtils.isEmpty(socketTimeOut)) {
      cassandraHost.setSocketTimeout(Integer.parseInt(socketTimeOut));
    }
 else {
      cassandraHost.setSocketTimeout(CassandraHost.DEFAULT_SHOCKET_TIMEOUT);
    }
  }
 catch (  NumberFormatException e) {
    logger.warn(""String_Node_Str"");
  }
}","@Override protected void setConfig(Host host,Properties props,Map externalProperties){
  CassandraHost cassandraHost=(CassandraHost)host;
  String maxActivePerNode=null;
  String maxIdlePerNode=null;
  String minIdlePerNode=null;
  String maxTotal=null;
  String testOnBorrow=null;
  String testWhileIdle=null;
  String testOnConnect=null;
  String testOnReturn=null;
  String socketTimeOut=null;
  String userName=null;
  String password=null;
  String maxWaitInMilli=null;
  String failOverPolicy=null;
  boolean hostRetry=false;
  if (externalProperties != null) {
    maxActivePerNode=(String)externalProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_ACTIVE);
    maxIdlePerNode=(String)externalProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_IDLE);
    minIdlePerNode=(String)externalProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MIN_IDLE);
    maxTotal=(String)externalProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_TOTAL);
    testOnBorrow=(String)externalProperties.get(CassandraConstants.TEST_ON_BORROW);
    testOnConnect=(String)externalProperties.get(CassandraConstants.TEST_ON_CONNECT);
    testOnReturn=(String)externalProperties.get(CassandraConstants.TEST_ON_RETURN);
    testWhileIdle=(String)externalProperties.get(CassandraConstants.TEST_WHILE_IDLE);
    socketTimeOut=(String)externalProperties.get(CassandraConstants.SOCKET_TIMEOUT);
    userName=(String)externalProperties.get(PersistenceProperties.KUNDERA_USERNAME);
    password=(String)externalProperties.get(PersistenceProperties.KUNDERA_PASSWORD);
    maxWaitInMilli=(String)externalProperties.get(CassandraConstants.MAX_WAIT);
  }
  if (props != null) {
    if (maxActivePerNode == null) {
      maxActivePerNode=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_ACTIVE) != null ? props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_ACTIVE).trim() : null;
    }
    if (maxIdlePerNode == null) {
      maxIdlePerNode=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_IDLE) != null ? props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_IDLE).trim() : null;
    }
    if (minIdlePerNode == null) {
      minIdlePerNode=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MIN_IDLE) != null ? props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MIN_IDLE).trim() : null;
    }
    if (maxTotal == null) {
      maxTotal=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_TOTAL) != null ? props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_TOTAL).trim() : null;
    }
    if (maxWaitInMilli == null) {
      maxWaitInMilli=props.getProperty(CassandraConstants.MAX_WAIT) != null ? props.getProperty(CassandraConstants.MAX_WAIT).trim() : null;
    }
    if (userName == null) {
      userName=props.getProperty(PersistenceProperties.KUNDERA_USERNAME);
      password=props.getProperty(PersistenceProperties.KUNDERA_PASSWORD);
    }
  }
  try {
    if (!StringUtils.isEmpty(maxActivePerNode)) {
      cassandraHost.setInitialSize(Integer.parseInt(maxActivePerNode));
      cassandraHost.setMaxActive(Integer.parseInt(maxActivePerNode));
    }
    if (!StringUtils.isEmpty(maxIdlePerNode)) {
      cassandraHost.setMaxIdle(Integer.parseInt(maxIdlePerNode));
    }
    if (!StringUtils.isEmpty(minIdlePerNode)) {
      cassandraHost.setMinIdle(Integer.parseInt(minIdlePerNode));
    }
    if (!StringUtils.isEmpty(maxTotal)) {
      cassandraHost.setMaxActive(Integer.parseInt(maxTotal));
    }
    if (!StringUtils.isEmpty(maxWaitInMilli)) {
      cassandraHost.setMaxWait(Integer.parseInt(maxWaitInMilli));
    }
    cassandraHost.setTestOnBorrow(Boolean.parseBoolean(testOnBorrow));
    cassandraHost.setTestOnConnect(Boolean.parseBoolean(testOnConnect));
    cassandraHost.setTestOnReturn(Boolean.parseBoolean(testOnReturn));
    cassandraHost.setTestWhileIdle(Boolean.parseBoolean(testWhileIdle));
    cassandraHost.setHostFailoverPolicy(getFailoverPolicy(failOverPolicy));
    cassandraHost.setRetryHost(hostRetry);
    cassandraHost.setUserName(userName);
    cassandraHost.setPassword(password);
    if (!StringUtils.isEmpty(socketTimeOut)) {
      cassandraHost.setSocketTimeout(Integer.parseInt(socketTimeOut));
    }
 else {
      cassandraHost.setSocketTimeout(CassandraHost.DEFAULT_SHOCKET_TIMEOUT);
    }
  }
 catch (  NumberFormatException e) {
    logger.warn(""String_Node_Str"");
  }
}",0.5879858657243816
176168,"@Test public void testRelationViaPelops(){
  EntityManagerFactory emfPelops=Persistence.createEntityManagerFactory(""String_Node_Str"");
  EntityManager emPelops=emfPelops.createEntityManager();
  assertRelation(emPelops);
  emPelops.clear();
  emPelops.close();
  emfPelops.close();
}","public void testRelationViaPelops(){
  EntityManagerFactory emfPelops=Persistence.createEntityManagerFactory(""String_Node_Str"");
  EntityManager emPelops=emfPelops.createEntityManager();
  assertRelation(emPelops);
  emPelops.clear();
  emPelops.close();
  emfPelops.close();
}",0.9892857142857144
176169,"@Test public void testAbstractEntityViaPelops(){
  EntityManagerFactory emfPelops=Persistence.createEntityManagerFactory(""String_Node_Str"");
  EntityManager emPelops=emfPelops.createEntityManager();
  assertAbstractEntity(emPelops);
  emPelops.clear();
  emPelops.close();
  emfPelops.close();
}","public void testAbstractEntityViaPelops(){
  EntityManagerFactory emfPelops=Persistence.createEntityManagerFactory(""String_Node_Str"");
  EntityManager emPelops=emfPelops.createEntityManager();
  assertAbstractEntity(emPelops);
  emPelops.clear();
  emPelops.close();
  emfPelops.close();
}",0.9897260273972602
176170,"@Before public void setUp() throws Exception {
  ImmutableSettings.Builder builder=ImmutableSettings.settingsBuilder();
  builder.put(""String_Node_Str"",""String_Node_Str"");
  node=new NodeBuilder().settings(builder).node();
  _PU=""String_Node_Str"";
  setUpInternal();
}","@Before public void setUp() throws Exception {
  if (!checkIfServerRunning()) {
    ImmutableSettings.Builder builder=ImmutableSettings.settingsBuilder();
    builder.put(""String_Node_Str"",""String_Node_Str"");
    node=new NodeBuilder().settings(builder).node();
  }
  _PU=""String_Node_Str"";
  setUpInternal();
}",0.92573402417962
176171,"@After public void tearDown() throws Exception {
  node.close();
  tearDownInternal();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}","@After public void tearDown() throws Exception {
  if (checkIfServerRunning()) {
    node.close();
  }
  tearDownInternal();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.8841463414634146
176172,"@Test public void onQuery(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  MongoCompoundKey key=new MongoCompoundKey(""String_Node_Str"",1,timeLineId);
  MongoPrimeUser timeLine=new MongoPrimeUser(key);
  timeLine.setTweetBody(""String_Node_Str"");
  timeLine.setTweetDate(new Date());
  UserInfo userInfo=new UserInfo(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",31,timeLine);
  em.persist(userInfo);
  em.clear();
  final String noClause=""String_Node_Str"";
  final String withClauseOnNoncomposite=""String_Node_Str"";
  final String withAllCompositeColClause=""String_Node_Str"";
  Query q=em.createQuery(noClause);
  List<UserInfo> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(31,results.get(0).getAge());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getFirstName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getLastName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getUserInfoId());
  Assert.assertEquals(currentDate,results.get(0).getTimeLine().get(0).getTweetDate());
  Assert.assertEquals(timeLineId,results.get(0).getTimeLine().get(0).getKey().getTimeLineId());
  q=em.createQuery(withClauseOnNoncomposite);
  q.setParameter(1,31);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(31,results.get(0).getAge());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getFirstName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getLastName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getUserInfoId());
  Assert.assertEquals(currentDate,results.get(0).getTimeLine().get(0).getTweetDate());
  Assert.assertEquals(timeLineId,results.get(0).getTimeLine().get(0).getKey().getTimeLineId());
  q=em.createQuery(withAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(31,results.get(0).getAge());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getFirstName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getLastName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getUserInfoId());
  Assert.assertEquals(currentDate,results.get(0).getTimeLine().get(0).getTweetDate());
  Assert.assertEquals(timeLineId,results.get(0).getTimeLine().get(0).getKey().getTimeLineId());
  final String selectiveColumnTweetBodyWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetBodyWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(0,results.get(0).getAge());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getFirstName());
  Assert.assertEquals(null,results.get(0).getLastName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getUserInfoId());
  final String selectiveColumnTweetDateWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetDateWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(0,results.get(0).getAge());
  Assert.assertEquals(null,results.get(0).getFirstName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getLastName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getUserInfoId());
  em.remove(userInfo);
  em.clear();
}","@Test public void onQuery(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  MongoCompoundKey key=new MongoCompoundKey(""String_Node_Str"",1,timeLineId);
  MongoPrimeUser timeLine=new MongoPrimeUser(key);
  timeLine.setTweetBody(""String_Node_Str"");
  timeLine.setTweetDate(new Date());
  UserInfo userInfo=new UserInfo(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",31,timeLine);
  em.persist(userInfo);
  em.clear();
  final String noClause=""String_Node_Str"";
  final String withClauseOnNoncomposite=""String_Node_Str"";
  final String withAllCompositeColClause=""String_Node_Str"";
  Query q=em.createQuery(noClause);
  List<UserInfo> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(31,results.get(0).getAge());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getFirstName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getLastName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getUserInfoId());
  Assert.assertEquals(currentDate.getTime(),results.get(0).getTimeLine().get(0).getTweetDate().getTime());
  Assert.assertEquals(timeLineId,results.get(0).getTimeLine().get(0).getKey().getTimeLineId());
  q=em.createQuery(withClauseOnNoncomposite);
  q.setParameter(1,31);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(31,results.get(0).getAge());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getFirstName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getLastName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getUserInfoId());
  Assert.assertEquals(currentDate,results.get(0).getTimeLine().get(0).getTweetDate());
  Assert.assertEquals(timeLineId,results.get(0).getTimeLine().get(0).getKey().getTimeLineId());
  q=em.createQuery(withAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(31,results.get(0).getAge());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getFirstName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getLastName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getUserInfoId());
  Assert.assertEquals(currentDate,results.get(0).getTimeLine().get(0).getTweetDate());
  Assert.assertEquals(timeLineId,results.get(0).getTimeLine().get(0).getKey().getTimeLineId());
  final String selectiveColumnTweetBodyWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetBodyWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(0,results.get(0).getAge());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getFirstName());
  Assert.assertEquals(null,results.get(0).getLastName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getUserInfoId());
  final String selectiveColumnTweetDateWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetDateWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(0,results.get(0).getAge());
  Assert.assertEquals(null,results.get(0).getFirstName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getLastName());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getUserInfoId());
  em.remove(userInfo);
  em.clear();
}",0.9971830985915492
176173,"@BeforeClass public static void setUpBeforeClass() throws Exception {
  ImmutableSettings.Builder builder=ImmutableSettings.settingsBuilder();
  builder.put(""String_Node_Str"",""String_Node_Str"");
  node=new NodeBuilder().settings(builder).node();
}","@BeforeClass public static void setUpBeforeClass() throws Exception {
  if (!checkIfServerRunning()) {
    ImmutableSettings.Builder builder=ImmutableSettings.settingsBuilder();
    builder.put(""String_Node_Str"",""String_Node_Str"");
    node=new NodeBuilder().settings(builder).node();
  }
}",0.9199255121042832
176174,"@AfterClass public static void tearDownAfterClass() throws Exception {
  node.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}","@AfterClass public static void tearDownAfterClass() throws Exception {
  if (checkIfServerRunning()) {
    node.close();
  }
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.8841463414634146
176175,"/** 
 * If parameterised metadata is not for intended persistence unit, assign it to null.
 * @param metadata entity metadata
 * @return metadata.
 */
private EntityMetadata belongsToPersistenceUnit(EntityMetadata metadata){
  PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String keyspace=puProperties != null ? (String)puProperties.get(PersistenceProperties.KUNDERA_KEYSPACE) : null;
  keyspace=keyspace == null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE) : keyspace;
  if (metadata.getPersistenceUnit() != null && !metadata.getPersistenceUnit().equals(persistenceUnit) || (metadata.getSchema() != null && !metadata.getSchema().equals(keyspace))) {
    metadata=null;
  }
 else {
    applyMetadataChanges(metadata);
  }
  return metadata;
}","/** 
 * If parameterised metadata is not for intended persistence unit, assign it to null.
 * @param metadata entity metadata
 * @return metadata.
 */
private EntityMetadata belongsToPersistenceUnit(EntityMetadata metadata){
  PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String keyspace=puProperties != null ? (String)puProperties.get(PersistenceProperties.KUNDERA_KEYSPACE) : null;
  keyspace=keyspace == null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE) : keyspace;
  if (metadata.getPersistenceUnit() != null && !metadata.getPersistenceUnit().equals(persistenceUnit) || (keyspace != null && metadata.getSchema() != null && !metadata.getSchema().equals(keyspace))) {
    metadata=null;
  }
 else {
    applyMetadataChanges(metadata);
  }
  return metadata;
}",0.965034965034965
176176,"@Override protected Object createPoolOrConnection(){
  getConfigurationObject();
  Collection<Class<?>> classes=((MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(getPersistenceUnit())).getEntityNameToClassMap().values();
  conf.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (externalProperties != null && !externalProperties.isEmpty()) {
    for (    String key : externalProperties.keySet()) {
      Object value=externalProperties.get(key);
      if (value instanceof String) {
        conf.setProperty(key,(String)value);
      }
    }
  }
  serviceRegistry=new ServiceRegistryBuilder().applySettings(conf.getProperties()).buildServiceRegistry();
  for (  Class<?> c : classes) {
    conf.addAnnotatedClass(c);
  }
  sf=conf.buildSessionFactory(serviceRegistry);
  return sf;
}","@Override protected Object createPoolOrConnection(){
  getConfigurationObject();
  Set<String> pus=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodelMap().keySet();
  Collection<Class<?>> classes=new ArrayList<Class<?>>();
  for (  String pu : pus) {
    classes.addAll(((MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(pu)).getEntityNameToClassMap().values());
  }
  conf.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (externalProperties != null && !externalProperties.isEmpty()) {
    for (    String key : externalProperties.keySet()) {
      Object value=externalProperties.get(key);
      if (value instanceof String) {
        conf.setProperty(key,(String)value);
      }
    }
  }
  serviceRegistry=new ServiceRegistryBuilder().applySettings(conf.getProperties()).buildServiceRegistry();
  for (  Class<?> c : classes) {
    conf.addAnnotatedClass(c);
  }
  sf=conf.buildSessionFactory(serviceRegistry);
  return sf;
}",0.8354712771890686
176177,"/** 
 * Returns default index reader.
 * @return index reader.
 */
private IndexReader getIndexReader(){
  flushInternal();
  if (reader == null) {
    try {
      if (!isInitialized) {
        Directory sourceDir=FSDirectory.open(getIndexDirectory());
        copy(sourceDir,index);
        isInitialized=true;
      }
      reader=IndexReader.open(index);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      throw new LuceneIndexingException(e);
    }
  }
  return reader;
}","/** 
 * Returns default index reader.
 * @return index reader.
 */
private IndexReader getIndexReader(){
  flushInternal();
  if (reader == null) {
    try {
      if (!isInitialized) {
        Directory sourceDir=FSDirectory.open(getIndexDirectory());
        copy(sourceDir,index);
        isInitialized=true;
      }
      reader=IndexReader.open(index);
    }
 catch (    IndexNotFoundException infex) {
      log.warn(""String_Node_Str"",infex.getMessage());
    }
catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      throw new LuceneIndexingException(e);
    }
  }
  return reader;
}",0.8760180995475113
176178,"public static boolean indexSearchEnabled(final String persistenceUnit){
  PersistenceUnitMetadata puMetadata=KunderaMetadataManager.getPersistenceUnitMetadata(persistenceUnit);
  String clientFactoryName=puMetadata != null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_CLIENT_FACTORY) : null;
  return !(Constants.REDIS_CLIENT_FACTORY.equalsIgnoreCase(clientFactoryName));
}","/** 
 * Index based search has to be optional, ideally need to register a callback in case index persistence/search etc is optional.
 * @param persistenceUnit persistence unit
 * @return true, if index based search is enabled.
 */
public static boolean indexSearchEnabled(final String persistenceUnit){
  PersistenceUnitMetadata puMetadata=KunderaMetadataManager.getPersistenceUnitMetadata(persistenceUnit);
  String clientFactoryName=puMetadata != null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_CLIENT_FACTORY) : null;
  return !(Constants.REDIS_CLIENT_FACTORY.equalsIgnoreCase(clientFactoryName));
}",0.7683049147442327
176179,"private void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders,Object connection){
  AttributeWrapper wrapper=wrap(entityMetadata,entity);
  if (rlHolders != null) {
    for (    RelationHolder relation : rlHolders) {
      String name=relation.getRelationName();
      Object value=relation.getRelationValue();
      byte[] valueInBytes=PropertyAccessorHelper.getBytes(value);
      byte[] nameInBytes=getEncodedBytes(name);
      String valueAsStr=PropertyAccessorHelper.getString(value);
      wrapper.addColumn(nameInBytes,valueInBytes);
      wrapper.addIndex(getHashKey(entityMetadata.getTableName(),name),getDouble(valueAsStr));
      wrapper.addIndex(getHashKey(entityMetadata.getTableName(),getHashKey(name,valueAsStr)),getDouble(valueAsStr));
    }
  }
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  String discrColumn=((AbstractManagedType)entityType).getDiscriminatorColumn();
  String discrValue=((AbstractManagedType)entityType).getDiscriminatorValue();
  if (discrColumn != null && discrValue != null) {
    byte[] valueInBytes=PropertyAccessorHelper.getBytes(discrValue);
    byte[] nameInBytes=getEncodedBytes(discrColumn);
    wrapper.addColumn(nameInBytes,valueInBytes);
    wrapper.addIndex(getHashKey(entityMetadata.getTableName(),discrColumn),getDouble(discrValue));
    wrapper.addIndex(getHashKey(entityMetadata.getTableName(),getHashKey(discrColumn,discrValue)),getDouble(discrValue));
  }
  String rowKey=null;
  if (metaModel.isEmbeddable(entityMetadata.getIdAttribute().getBindableJavaType())) {
    rowKey=KunderaCoreUtils.prepareCompositeKey(entityMetadata,metaModel,id);
  }
 else {
    ObjectAccessor accessor=new ObjectAccessor();
    rowKey=accessor.toString(id);
  }
  String hashKey=getHashKey(entityMetadata.getTableName(),rowKey);
  if (resource != null && resource.isActive()) {
    ((Transaction)connection).hmset(getEncodedBytes(hashKey),wrapper.getColumns());
    ((Transaction)connection).zadd(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()),getDouble(rowKey),rowKey);
    ((Transaction)connection).zadd(getHashKey(entityMetadata.getTableName(),getHashKey(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName(),rowKey)),getDouble(rowKey),rowKey);
  }
 else {
    ((Pipeline)connection).hmset(getEncodedBytes(hashKey),wrapper.getColumns());
    ((Pipeline)connection).zadd(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()),getDouble(rowKey),rowKey);
    ((Pipeline)connection).zadd(getHashKey(entityMetadata.getTableName(),getHashKey(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName(),rowKey)),getDouble(rowKey),rowKey);
  }
  addIndex(connection,wrapper,rowKey,entityMetadata);
}","private void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders,Object connection){
  AttributeWrapper wrapper=wrap(entityMetadata,entity);
  if (rlHolders != null) {
    for (    RelationHolder relation : rlHolders) {
      String name=relation.getRelationName();
      Object value=relation.getRelationValue();
      byte[] valueInBytes=PropertyAccessorHelper.getBytes(value);
      byte[] nameInBytes=getEncodedBytes(name);
      String valueAsStr=PropertyAccessorHelper.getString(value);
      wrapper.addColumn(nameInBytes,valueInBytes);
      wrapper.addIndex(getHashKey(entityMetadata.getTableName(),name),getDouble(valueAsStr));
      wrapper.addIndex(getHashKey(entityMetadata.getTableName(),getHashKey(name,valueAsStr)),getDouble(valueAsStr));
    }
  }
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  String discrColumn=((AbstractManagedType)entityType).getDiscriminatorColumn();
  String discrValue=((AbstractManagedType)entityType).getDiscriminatorValue();
  if (discrColumn != null && discrValue != null) {
    byte[] valueInBytes=PropertyAccessorHelper.getBytes(discrValue);
    byte[] nameInBytes=getEncodedBytes(discrColumn);
    wrapper.addColumn(nameInBytes,valueInBytes);
    wrapper.addIndex(getHashKey(entityMetadata.getTableName(),discrColumn),getDouble(discrValue));
    wrapper.addIndex(getHashKey(entityMetadata.getTableName(),getHashKey(discrColumn,discrValue)),getDouble(discrValue));
  }
  String rowKey=null;
  if (metaModel.isEmbeddable(entityMetadata.getIdAttribute().getBindableJavaType())) {
    rowKey=KunderaCoreUtils.prepareCompositeKey(entityMetadata,metaModel,id);
  }
 else {
    ObjectAccessor accessor=new ObjectAccessor();
    rowKey=accessor.toString(id);
  }
  String hashKey=getHashKey(entityMetadata.getTableName(),rowKey);
  if (resource != null && resource.isActive()) {
    ((Transaction)connection).hmset(getEncodedBytes(hashKey),wrapper.getColumns());
  }
 else {
    ((Pipeline)connection).hmset(getEncodedBytes(hashKey),wrapper.getColumns());
  }
  wrapper.addIndex(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()),getDouble(rowKey));
  wrapper.addIndex(getHashKey(entityMetadata.getTableName(),getHashKey(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName(),rowKey)),getDouble(rowKey));
  addIndex(connection,wrapper,rowKey,entityMetadata);
}",0.8613242905586294
176180,"/** 
 * Retrieves entity instance of given class,row key and specific fields.
 * @param clazz entity class
 * @param key row key
 * @param connection connection instance.
 * @param fields fields.
 * @return entity instance.
 * @throws InstantiationException throws in case of runtime exception
 * @throws IllegalAccessException throws in case of runtime exception
 */
private Object fetch(Class clazz,Object key,Object connection,byte[][] fields) throws InstantiationException, IllegalAccessException {
  Object result=null;
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(clazz);
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
  String rowKey=null;
  if (metaModel.isEmbeddable(entityMetadata.getIdAttribute().getBindableJavaType())) {
    rowKey=KunderaCoreUtils.prepareCompositeKey(entityMetadata,metaModel,key);
  }
 else {
    ObjectAccessor accessor=new ObjectAccessor();
    rowKey=accessor.toString(key);
  }
  String hashKey=getHashKey(entityMetadata.getTableName(),rowKey);
  try {
    Map<byte[],byte[]> columns=new HashMap<byte[],byte[]>();
    if (fields != null) {
      List<byte[]> fieldValues=null;
      if (resource != null && resource.isActive()) {
        Response response=((Transaction)connection).hmget(getEncodedBytes(hashKey),fields);
        ((Transaction)connection).exec();
        fieldValues=(List<byte[]>)response.get();
      }
 else {
        fieldValues=((Jedis)connection).hmget(getEncodedBytes(hashKey),fields);
      }
      if (fieldValues != null && !fieldValues.isEmpty()) {
        for (int i=0; i < fields.length; i++) {
          columns.put(fields[i],fieldValues.get(i));
        }
      }
    }
 else {
      columns=getColumns(connection,hashKey,columns);
    }
    result=unwrap(entityMetadata,columns,key);
  }
 catch (  JedisConnectionException jedex) {
    return null;
  }
  return result;
}","/** 
 * Retrieves entity instance of given class,row key and specific fields.
 * @param clazz entity class
 * @param key row key
 * @param connection connection instance.
 * @param fields fields.
 * @return entity instance.
 * @throws InstantiationException throws in case of runtime exception
 * @throws IllegalAccessException throws in case of runtime exception
 */
private Object fetch(Class clazz,Object key,Object connection,byte[][] fields) throws InstantiationException, IllegalAccessException {
  Object result=null;
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(clazz);
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
  String rowKey=null;
  if (metaModel.isEmbeddable(entityMetadata.getIdAttribute().getBindableJavaType())) {
    rowKey=KunderaCoreUtils.prepareCompositeKey(entityMetadata,metaModel,key);
  }
 else {
    ObjectAccessor accessor=new ObjectAccessor();
    rowKey=accessor.toString(key);
  }
  String hashKey=getHashKey(entityMetadata.getTableName(),rowKey);
  try {
    Map<byte[],byte[]> columns=new HashMap<byte[],byte[]>();
    if (fields != null) {
      List<byte[]> fieldValues=null;
      if (resource != null && resource.isActive()) {
        Response response=((Transaction)connection).hmget(getEncodedBytes(hashKey),fields);
        ((Transaction)connection).exec();
        fieldValues=(List<byte[]>)response.get();
      }
 else {
        fieldValues=((Jedis)connection).hmget(getEncodedBytes(hashKey),fields);
      }
      if (fieldValues != null && !fieldValues.isEmpty()) {
        for (int i=0; i < fields.length; i++) {
          if (fieldValues.get(i) != null) {
            columns.put(fields[i],fieldValues.get(i));
          }
        }
      }
    }
 else {
      columns=getColumns(connection,hashKey,columns);
    }
    result=unwrap(entityMetadata,columns,key);
  }
 catch (  JedisConnectionException jedex) {
    return null;
  }
  return result;
}",0.9854417670682732
176181,"/** 
 * Wraps entity attributes into byte[] and return instance of attribute wrapper.
 * @param entityMetadata
 * @param entity
 * @return
 */
private AttributeWrapper wrap(EntityMetadata entityMetadata,Object entity){
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  AttributeWrapper wrapper=new AttributeWrapper(attributes.size());
  List<String> relationNames=entityMetadata.getRelationNames();
  for (  Attribute attr : attributes) {
    if (!entityMetadata.getIdAttribute().equals(attr) && !attr.isAssociation()) {
      if (metaModel.isEmbeddable(((AbstractAttribute)attr).getBindableJavaType())) {
        EmbeddableType embeddableAttribute=metaModel.embeddable(((AbstractAttribute)attr).getBindableJavaType());
        Object embeddedObject=PropertyAccessorHelper.getObject(entity,(Field)attr.getJavaMember());
        Set<Attribute> embeddedAttributes=embeddableAttribute.getAttributes();
        for (        Attribute attrib : embeddedAttributes) {
          addToWrapper(entityMetadata,wrapper,embeddedObject,attrib,attr);
        }
      }
 else {
        addToWrapper(entityMetadata,wrapper,entity,attr);
      }
    }
 else     if (attributes.size() == 1) {
      byte[] value=PropertyAccessorHelper.get(entity,(Field)attr.getJavaMember());
      byte[] name;
      name=getEncodedBytes(((AbstractAttribute)attr).getJPAColumnName());
      wrapper.addColumn(name,value);
    }
  }
  return wrapper;
}","/** 
 * Wraps entity attributes into byte[] and return instance of attribute wrapper.
 * @param entityMetadata
 * @param entity
 * @return
 */
private AttributeWrapper wrap(EntityMetadata entityMetadata,Object entity){
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  AttributeWrapper wrapper=new AttributeWrapper(attributes.size());
  List<String> relationNames=entityMetadata.getRelationNames();
  for (  Attribute attr : attributes) {
    if (!attr.isAssociation()) {
      if (metaModel.isEmbeddable(((AbstractAttribute)attr).getBindableJavaType())) {
        EmbeddableType embeddableAttribute=metaModel.embeddable(((AbstractAttribute)attr).getBindableJavaType());
        Object embeddedObject=PropertyAccessorHelper.getObject(entity,(Field)attr.getJavaMember());
        Set<Attribute> embeddedAttributes=embeddableAttribute.getAttributes();
        for (        Attribute attrib : embeddedAttributes) {
          addToWrapper(entityMetadata,wrapper,embeddedObject,attrib,attr);
        }
      }
 else {
        addToWrapper(entityMetadata,wrapper,entity,attr);
      }
    }
 else     if (attributes.size() == 1) {
      byte[] value=PropertyAccessorHelper.get(entity,(Field)attr.getJavaMember());
      byte[] name;
      name=getEncodedBytes(((AbstractAttribute)attr).getJPAColumnName());
      wrapper.addColumn(name,value);
    }
  }
  return wrapper;
}",0.9848437983297248
176182,"@Test public void testPopulateEntites(){
  logger.info(""String_Node_Str"");
  EntityManager em=emf.createEntityManager();
  final String originalName=""String_Node_Str"";
  PersonRedis object=new PersonRedis();
  object.setAge(32);
  object.setPersonId(ROW_KEY);
  object.setPersonName(originalName);
  em.persist(object);
  object.setAge(34);
  object.setPersonId(ROW_KEY + 1);
  object.setPersonName(originalName);
  em.persist(object);
  object.setAge(29);
  object.setPersonId(ROW_KEY + 3);
  object.setPersonName(originalName);
  em.persist(object);
  String findWithOutWhereClause=""String_Node_Str"";
  Query query=em.createQuery(findWithOutWhereClause);
  List<PersonRedis> results=query.getResultList();
  Assert.assertEquals(3,results.size());
  String findById=""String_Node_Str"";
  query=em.createQuery(findById);
  query.setParameter(""String_Node_Str"",ROW_KEY);
  results=query.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  String findByAge=""String_Node_Str"";
  query=em.createQuery(findByAge);
  query.setParameter(""String_Node_Str"",32);
  results=query.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  Assert.assertEquals(ROW_KEY,results.get(0).getPersonId());
  String findByIdAndAge=""String_Node_Str"";
  query=em.createQuery(findByIdAndAge);
  query.setParameter(""String_Node_Str"",ROW_KEY);
  query.setParameter(""String_Node_Str"",32);
  results=query.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  String findAgeByBetween=""String_Node_Str"";
  query=em.createQuery(findAgeByBetween);
  query.setParameter(""String_Node_Str"",32);
  query.setParameter(""String_Node_Str"",35);
  results=query.getResultList();
  Assert.assertEquals(2,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  String findIdByBetween=""String_Node_Str"";
  query=em.createQuery(findIdByBetween);
  query.setParameter(""String_Node_Str"",ROW_KEY);
  query.setParameter(""String_Node_Str"",ROW_KEY + 1);
  results=query.getResultList();
  Assert.assertEquals(2,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  String findAgeByGTELTEClause=""String_Node_Str"";
  query=em.createQuery(findAgeByGTELTEClause);
  query.setParameter(""String_Node_Str"",32);
  query.setParameter(""String_Node_Str"",35);
  results=query.getResultList();
  Assert.assertEquals(2,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  String q=""String_Node_Str"";
  query=em.createQuery(q);
  results=query.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(3,results.size());
  Assert.assertNotNull(results.get(0).getPersonId());
  Assert.assertNull(results.get(0).getPersonName());
  Assert.assertNull(results.get(0).getAge());
  String findIdByGTELTEClause=""String_Node_Str"";
  query=em.createQuery(findIdByGTELTEClause);
  query.setParameter(""String_Node_Str"",32);
  query.setParameter(""String_Node_Str"",35);
  results=query.getResultList();
  Assert.assertEquals(2,results.size());
  Assert.assertNotNull(results.get(0).getPersonId());
  Assert.assertNotNull(results.get(0).getPersonName());
  Assert.assertNotNull(results.get(0).getAge());
  try {
    String invalidDifferentClause=""String_Node_Str"";
    query=em.createQuery(invalidDifferentClause);
    query.setParameter(""String_Node_Str"",ROW_KEY);
    query.setParameter(""String_Node_Str"",32);
    query.getResultList();
    Assert.fail(""String_Node_Str"");
  }
 catch (  QueryHandlerException qhex) {
    Assert.assertNotNull(qhex);
  }
  String findSelective=""String_Node_Str"";
  query=em.createQuery(findSelective);
  results=query.getResultList();
  Assert.assertEquals(3,results.size());
  Assert.assertNull(results.get(0).getPersonName());
  Assert.assertNotNull(results.get(0).getAge());
  String findByIdOrAge=""String_Node_Str"";
  query=em.createQuery(findByIdOrAge);
  query.setParameter(""String_Node_Str"",ROW_KEY);
  query.setParameter(""String_Node_Str"",29);
  results=query.getResultList();
  Assert.assertEquals(2,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  boolean isPresent=false;
  for (  PersonRedis r : results) {
    if (r.getAge().equals(29) && !r.getPersonId().equals(ROW_KEY)) {
      isPresent=true;
      break;
    }
  }
  Assert.assertTrue(isPresent);
  String findByIdMoreOrAge=""String_Node_Str"";
  query=em.createQuery(findByIdMoreOrAge);
  query.setParameter(""String_Node_Str"",ROW_KEY);
  query.setParameter(""String_Node_Str"",29);
  query.setParameter(""String_Node_Str"",originalName);
  results=query.getResultList();
  Assert.assertEquals(3,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  String deleteQuery=""String_Node_Str"";
  query=em.createQuery(deleteQuery);
  int updateCount=query.executeUpdate();
  Assert.assertEquals(3,updateCount);
  findWithOutWhereClause=""String_Node_Str"";
  query=em.createQuery(findWithOutWhereClause);
  results=query.getResultList();
  Assert.assertNotNull(results);
  Assert.assertTrue(results.isEmpty());
}","@Test public void testPopulateEntites(){
  logger.info(""String_Node_Str"");
  EntityManager em=emf.createEntityManager();
  purge(em);
  final String originalName=""String_Node_Str"";
  PersonRedis object=new PersonRedis();
  object.setAge(32);
  object.setPersonId(ROW_KEY);
  object.setPersonName(originalName);
  em.persist(object);
  object.setAge(34);
  object.setPersonId(ROW_KEY + 1);
  object.setPersonName(originalName);
  em.persist(object);
  object.setAge(29);
  object.setPersonId(ROW_KEY + 3);
  object.setPersonName(originalName);
  em.persist(object);
  String findWithOutWhereClause=""String_Node_Str"";
  Query query=em.createQuery(findWithOutWhereClause);
  List<PersonRedis> results=query.getResultList();
  Assert.assertEquals(3,results.size());
  String findById=""String_Node_Str"";
  query=em.createQuery(findById);
  query.setParameter(""String_Node_Str"",ROW_KEY);
  results=query.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  String findByAge=""String_Node_Str"";
  query=em.createQuery(findByAge);
  query.setParameter(""String_Node_Str"",32);
  results=query.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  Assert.assertEquals(ROW_KEY,results.get(0).getPersonId());
  String findByIdAndAge=""String_Node_Str"";
  query=em.createQuery(findByIdAndAge);
  query.setParameter(""String_Node_Str"",ROW_KEY);
  query.setParameter(""String_Node_Str"",32);
  results=query.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  String findAgeByBetween=""String_Node_Str"";
  query=em.createQuery(findAgeByBetween);
  query.setParameter(""String_Node_Str"",32);
  query.setParameter(""String_Node_Str"",35);
  results=query.getResultList();
  Assert.assertEquals(2,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  String findIdByBetween=""String_Node_Str"";
  query=em.createQuery(findIdByBetween);
  query.setParameter(""String_Node_Str"",ROW_KEY);
  query.setParameter(""String_Node_Str"",ROW_KEY + 1);
  results=query.getResultList();
  Assert.assertEquals(2,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  String findAgeByGTELTEClause=""String_Node_Str"";
  query=em.createQuery(findAgeByGTELTEClause);
  query.setParameter(""String_Node_Str"",32);
  query.setParameter(""String_Node_Str"",35);
  results=query.getResultList();
  Assert.assertEquals(2,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  String q=""String_Node_Str"";
  query=em.createQuery(q);
  results=query.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(3,results.size());
  Assert.assertNotNull(results.get(0).getPersonId());
  Assert.assertNull(results.get(0).getPersonName());
  Assert.assertNull(results.get(0).getAge());
  String findIdByGTELTEClause=""String_Node_Str"";
  query=em.createQuery(findIdByGTELTEClause);
  query.setParameter(""String_Node_Str"",32);
  query.setParameter(""String_Node_Str"",35);
  results=query.getResultList();
  Assert.assertEquals(2,results.size());
  Assert.assertNotNull(results.get(0).getPersonId());
  Assert.assertNotNull(results.get(0).getPersonName());
  Assert.assertNotNull(results.get(0).getAge());
  try {
    String invalidDifferentClause=""String_Node_Str"";
    query=em.createQuery(invalidDifferentClause);
    query.setParameter(""String_Node_Str"",ROW_KEY);
    query.setParameter(""String_Node_Str"",32);
    query.getResultList();
    Assert.fail(""String_Node_Str"");
  }
 catch (  QueryHandlerException qhex) {
    Assert.assertNotNull(qhex);
  }
  String findSelective=""String_Node_Str"";
  query=em.createQuery(findSelective);
  results=query.getResultList();
  Assert.assertEquals(3,results.size());
  Assert.assertNull(results.get(0).getPersonName());
  Assert.assertNotNull(results.get(0).getAge());
  String findByIdOrAge=""String_Node_Str"";
  query=em.createQuery(findByIdOrAge);
  query.setParameter(""String_Node_Str"",ROW_KEY);
  query.setParameter(""String_Node_Str"",29);
  results=query.getResultList();
  Assert.assertEquals(2,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  boolean isPresent=false;
  for (  PersonRedis r : results) {
    if (r.getAge().equals(29) && !r.getPersonId().equals(ROW_KEY)) {
      isPresent=true;
      break;
    }
  }
  Assert.assertTrue(isPresent);
  String findByIdMoreOrAge=""String_Node_Str"";
  query=em.createQuery(findByIdMoreOrAge);
  query.setParameter(""String_Node_Str"",ROW_KEY);
  query.setParameter(""String_Node_Str"",29);
  query.setParameter(""String_Node_Str"",originalName);
  results=query.getResultList();
  Assert.assertEquals(3,results.size());
  Assert.assertEquals(originalName,results.get(0).getPersonName());
  String deleteQuery=""String_Node_Str"";
  query=em.createQuery(deleteQuery);
  int updateCount=query.executeUpdate();
  Assert.assertEquals(3,updateCount);
  findWithOutWhereClause=""String_Node_Str"";
  query=em.createQuery(findWithOutWhereClause);
  results=query.getResultList();
  Assert.assertNotNull(results);
  Assert.assertTrue(results.isEmpty());
}",0.998756575801052
176183,"/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  EntityManager em=emf.createEntityManager();
  String deleteQuery=""String_Node_Str"";
  Query query=em.createQuery(deleteQuery);
  int updateCount=query.executeUpdate();
  em.close();
  emf.close();
  emf=null;
}","/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  EntityManager em=emf.createEntityManager();
  purge(em);
  em.close();
  emf.close();
  emf=null;
}",0.7617107942973523
176184,"public static void main(String[] args){
  Runnable t=new Runnable(){
    @Override public void run(){
      KunderaRedisClient cli=new KunderaRedisClient();
      Properties props=new Properties();
      props.setProperty(""String_Node_Str"",""String_Node_Str"");
      cli.setProperties(props);
      try {
        cli.init();
      }
 catch (      Exception e) {
        logger.error(e);
        System.exit(0);
      }
      HashMap<String,ByteIterator> vals=new HashMap<String,ByteIterator>();
      vals.put(""String_Node_Str"",new StringByteIterator(""String_Node_Str""));
      vals.put(""String_Node_Str"",new StringByteIterator(""String_Node_Str""));
      vals.put(""String_Node_Str"",new StringByteIterator(""String_Node_Str""));
      cli.read(""String_Node_Str"",""String_Node_Str"",null,null);
      try {
        cli.cleanup();
      }
 catch (      DBException e) {
        e.printStackTrace();
      }
    }
  }
;
  for (int i=0; i < 100; i++) {
    t.run();
  }
}","public static void main(String[] args){
  Runnable t=new Runnable(){
    @Override public void run(){
      KunderaRedisClient cli=new KunderaRedisClient();
      Properties props=new Properties();
      props.setProperty(""String_Node_Str"",""String_Node_Str"");
      cli.setProperties(props);
      try {
        cli.init();
      }
 catch (      Exception e) {
        logger.error(e);
        System.exit(0);
      }
      HashMap<String,ByteIterator> vals=new HashMap<String,ByteIterator>();
      vals.put(""String_Node_Str"",new StringByteIterator(""String_Node_Str""));
      vals.put(""String_Node_Str"",new StringByteIterator(""String_Node_Str""));
      vals.put(""String_Node_Str"",new StringByteIterator(""String_Node_Str""));
      int res=cli.insert(""String_Node_Str"",""String_Node_Str"",vals);
      cli.read(""String_Node_Str"",""String_Node_Str"",null,null);
      System.out.println(""String_Node_Str"" + res);
      try {
        cli.cleanup();
      }
 catch (      DBException e) {
        e.printStackTrace();
      }
    }
  }
;
  for (int i=0; i < 100; i++) {
    t.run();
  }
}",0.9260166585007348
176185,"@Override public void run(){
  KunderaRedisClient cli=new KunderaRedisClient();
  Properties props=new Properties();
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  cli.setProperties(props);
  try {
    cli.init();
  }
 catch (  Exception e) {
    logger.error(e);
    System.exit(0);
  }
  HashMap<String,ByteIterator> vals=new HashMap<String,ByteIterator>();
  vals.put(""String_Node_Str"",new StringByteIterator(""String_Node_Str""));
  vals.put(""String_Node_Str"",new StringByteIterator(""String_Node_Str""));
  vals.put(""String_Node_Str"",new StringByteIterator(""String_Node_Str""));
  cli.read(""String_Node_Str"",""String_Node_Str"",null,null);
  try {
    cli.cleanup();
  }
 catch (  DBException e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  KunderaRedisClient cli=new KunderaRedisClient();
  Properties props=new Properties();
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  cli.setProperties(props);
  try {
    cli.init();
  }
 catch (  Exception e) {
    logger.error(e);
    System.exit(0);
  }
  HashMap<String,ByteIterator> vals=new HashMap<String,ByteIterator>();
  vals.put(""String_Node_Str"",new StringByteIterator(""String_Node_Str""));
  vals.put(""String_Node_Str"",new StringByteIterator(""String_Node_Str""));
  vals.put(""String_Node_Str"",new StringByteIterator(""String_Node_Str""));
  int res=cli.insert(""String_Node_Str"",""String_Node_Str"",vals);
  cli.read(""String_Node_Str"",""String_Node_Str"",null,null);
  System.out.println(""String_Node_Str"" + res);
  try {
    cli.cleanup();
  }
 catch (  DBException e) {
    e.printStackTrace();
  }
}",0.8621774701069855
176186,"/** 
 * Insert a record in the database. Any field/value pairs in the specified values HashMap will be written into the record with the specified record key.
 * @param table The name of the table
 * @param key The record key of the record to insert.
 * @param values A HashMap of field/value pairs to insert in the record
 * @return Zero on success, a non-zero error code on error
 */
public int insert(String table,String key,HashMap<String,ByteIterator> values){
  try {
    if (_hTable == null) {
      getHTable(_table);
    }
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
    return ServerError;
  }
  if (_debug) {
    System.out.println(""String_Node_Str"" + key);
  }
  Put p=new Put(Bytes.toBytes(key));
  for (  Map.Entry<String,ByteIterator> entry : values.entrySet()) {
    if (_debug) {
      System.out.println(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
    }
    p.add(_columnFamilyBytes,Bytes.toBytes(entry.getKey()),entry.getValue().toArray());
  }
  try {
    _hTable.put(p);
  }
 catch (  IOException e) {
    if (_debug) {
      System.err.println(""String_Node_Str"" + e);
    }
    return ServerError;
  }
catch (  ConcurrentModificationException e) {
    return ServerError;
  }
  return Ok;
}","/** 
 * Insert a record in the database. Any field/value pairs in the specified values HashMap will be written into the record with the specified record key.
 * @param table The name of the table
 * @param key The record key of the record to insert.
 * @param values A HashMap of field/value pairs to insert in the record
 * @return Zero on success, a non-zero error code on error
 */
public int insert(String table,String key,HashMap<String,ByteIterator> values){
  try {
    getHTable(_table);
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
    return ServerError;
  }
  if (_debug) {
    System.out.println(""String_Node_Str"" + key);
  }
  Put p=new Put(Bytes.toBytes(key));
  for (  Map.Entry<String,ByteIterator> entry : values.entrySet()) {
    if (_debug) {
      System.out.println(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
    }
    p.add(_columnFamilyBytes,Bytes.toBytes(entry.getKey()),entry.getValue().toArray());
  }
  try {
    _hTable.put(p);
  }
 catch (  IOException e) {
    if (_debug) {
      System.err.println(""String_Node_Str"" + e);
    }
    return ServerError;
  }
catch (  ConcurrentModificationException e) {
    return ServerError;
  }
  return Ok;
}",0.9863013698630136
176187,"/** 
 * Based on relation type, method invokes database to fetch relation entities.
 * @param relation relation
 * @param metadata entity metadata
 * @param pd persistence delegator
 * @param entityId entity id
 * @param relationValue relational value
 * @param targetEntityMetadata relational entity's metadata.
 * @return list of fetched relations.
 */
private List fetchRelations(final Relation relation,final EntityMetadata metadata,final PersistenceDelegator pd,final Object entityId,Object relationValue,EntityMetadata targetEntityMetadata){
  List relationalEntities=new ArrayList();
  if ((relationValue != null && relation.isUnary()) || (relation.isJoinedByPrimaryKey())) {
    Object relationEntity=pd.getClient(targetEntityMetadata).find(relation.getTargetEntity(),relationValue != null ? relationValue : entityId);
    if (relationEntity != null) {
      relationalEntities.add(relationEntity);
    }
  }
 else   if (!relation.isUnary()) {
    Client associatedClient=pd.getClient(targetEntityMetadata);
    if (!MetadataUtils.useSecondryIndex(((ClientBase)associatedClient).getClientMetadata())) {
      relationalEntities=getAssociationBuilder().getAssociatedEntitiesFromIndex(relation.getProperty().getDeclaringClass(),entityId,targetEntityMetadata.getEntityClazz(),associatedClient);
    }
 else {
      relationalEntities=associatedClient.findByRelation(relation.getJoinColumnName(),entityId,relation.getTargetEntity());
    }
  }
  return relationalEntities;
}","/** 
 * Based on relation type, method invokes database to fetch relation entities.
 * @param relation relation
 * @param metadata entity metadata
 * @param pd persistence delegator
 * @param entityId entity id
 * @param relationValue relational value
 * @param targetEntityMetadata relational entity's metadata.
 * @return list of fetched relations.
 */
private List fetchRelations(final Relation relation,final EntityMetadata metadata,final PersistenceDelegator pd,final Object entityId,Object relationValue,EntityMetadata targetEntityMetadata){
  List relationalEntities=new ArrayList();
  if ((relationValue != null && relation.isUnary()) || (relation.isJoinedByPrimaryKey())) {
    Object relationEntity=pd.getClient(targetEntityMetadata).find(relation.getTargetEntity(),relationValue != null ? relationValue : entityId);
    if (relationEntity != null) {
      relationalEntities.add(relationEntity);
    }
  }
 else   if (!relation.isUnary()) {
    Client associatedClient=pd.getClient(targetEntityMetadata);
    if (!MetadataUtils.useSecondryIndex(((ClientBase)associatedClient).getClientMetadata()) && MetadataUtils.indexSearchEnabled(targetEntityMetadata.getPersistenceUnit())) {
      relationalEntities=getAssociationBuilder().getAssociatedEntitiesFromIndex(relation.getProperty().getDeclaringClass(),entityId,targetEntityMetadata.getEntityClazz(),associatedClient);
    }
 else {
      relationalEntities=associatedClient.findByRelation(relation.getJoinColumnName(),entityId,relation.getTargetEntity());
    }
  }
  return relationalEntities;
}",0.9739703459637562
176188,"private void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders,Object connection){
  AttributeWrapper wrapper=wrap(entityMetadata,entity);
  if (rlHolders != null) {
    for (    RelationHolder relation : rlHolders) {
      String name=relation.getRelationName();
      Object value=relation.getRelationValue();
      byte[] valueInBytes=PropertyAccessorHelper.getBytes(value);
      byte[] nameInBytes=getEncodedBytes(name);
      String valueAsStr=PropertyAccessorHelper.getString(value);
      wrapper.addColumn(nameInBytes,valueInBytes);
      wrapper.addIndex(getHashKey(entityMetadata.getTableName(),name),getDouble(valueAsStr));
      wrapper.addIndex(getHashKey(entityMetadata.getTableName(),getHashKey(name,valueAsStr)),getDouble(valueAsStr));
    }
  }
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  String discrColumn=((AbstractManagedType)entityType).getDiscriminatorColumn();
  String discrValue=((AbstractManagedType)entityType).getDiscriminatorValue();
  if (discrColumn != null && discrValue != null) {
    byte[] valueInBytes=PropertyAccessorHelper.getBytes(discrValue);
    byte[] nameInBytes=getEncodedBytes(discrColumn);
    wrapper.addColumn(nameInBytes,valueInBytes);
    wrapper.addIndex(getHashKey(entityMetadata.getTableName(),discrColumn),getDouble(discrValue));
    wrapper.addIndex(getHashKey(entityMetadata.getTableName(),getHashKey(discrColumn,discrValue)),getDouble(discrValue));
  }
  String rowKey=null;
  if (metaModel.isEmbeddable(entityMetadata.getIdAttribute().getBindableJavaType())) {
    rowKey=KunderaCoreUtils.prepareCompositeKey(entityMetadata,metaModel,id);
  }
 else {
    ObjectAccessor accessor=new ObjectAccessor();
    rowKey=accessor.toString(id);
  }
  String hashKey=getHashKey(entityMetadata.getTableName(),rowKey);
  if (resource != null && resource.isActive()) {
    ((Transaction)connection).hmset(getEncodedBytes(hashKey),wrapper.getColumns());
    ((Transaction)connection).zadd(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()),getDouble(rowKey),rowKey);
    ((Transaction)connection).zadd(getHashKey(entityMetadata.getTableName(),getHashKey(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName(),rowKey)),getDouble(rowKey),rowKey);
  }
 else {
    ((Pipeline)connection).hmset(getEncodedBytes(hashKey),wrapper.getColumns());
    ((Pipeline)connection).zadd(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()),getDouble(rowKey),rowKey);
    ((Pipeline)connection).zadd(getHashKey(entityMetadata.getTableName(),getHashKey(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName(),rowKey)),getDouble(rowKey),rowKey);
  }
  addIndex(connection,wrapper,rowKey);
}","private void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders,Object connection){
  AttributeWrapper wrapper=wrap(entityMetadata,entity);
  if (rlHolders != null) {
    for (    RelationHolder relation : rlHolders) {
      String name=relation.getRelationName();
      Object value=relation.getRelationValue();
      byte[] valueInBytes=PropertyAccessorHelper.getBytes(value);
      byte[] nameInBytes=getEncodedBytes(name);
      String valueAsStr=PropertyAccessorHelper.getString(value);
      wrapper.addColumn(nameInBytes,valueInBytes);
      wrapper.addIndex(getHashKey(entityMetadata.getTableName(),name),getDouble(valueAsStr));
      wrapper.addIndex(getHashKey(entityMetadata.getTableName(),getHashKey(name,valueAsStr)),getDouble(valueAsStr));
    }
  }
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  String discrColumn=((AbstractManagedType)entityType).getDiscriminatorColumn();
  String discrValue=((AbstractManagedType)entityType).getDiscriminatorValue();
  if (discrColumn != null && discrValue != null) {
    byte[] valueInBytes=PropertyAccessorHelper.getBytes(discrValue);
    byte[] nameInBytes=getEncodedBytes(discrColumn);
    wrapper.addColumn(nameInBytes,valueInBytes);
    wrapper.addIndex(getHashKey(entityMetadata.getTableName(),discrColumn),getDouble(discrValue));
    wrapper.addIndex(getHashKey(entityMetadata.getTableName(),getHashKey(discrColumn,discrValue)),getDouble(discrValue));
  }
  String rowKey=null;
  if (metaModel.isEmbeddable(entityMetadata.getIdAttribute().getBindableJavaType())) {
    rowKey=KunderaCoreUtils.prepareCompositeKey(entityMetadata,metaModel,id);
  }
 else {
    ObjectAccessor accessor=new ObjectAccessor();
    rowKey=accessor.toString(id);
  }
  String hashKey=getHashKey(entityMetadata.getTableName(),rowKey);
  if (resource != null && resource.isActive()) {
    ((Transaction)connection).hmset(getEncodedBytes(hashKey),wrapper.getColumns());
    ((Transaction)connection).zadd(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()),getDouble(rowKey),rowKey);
    ((Transaction)connection).zadd(getHashKey(entityMetadata.getTableName(),getHashKey(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName(),rowKey)),getDouble(rowKey),rowKey);
  }
 else {
    ((Pipeline)connection).hmset(getEncodedBytes(hashKey),wrapper.getColumns());
    ((Pipeline)connection).zadd(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()),getDouble(rowKey),rowKey);
    ((Pipeline)connection).zadd(getHashKey(entityMetadata.getTableName(),getHashKey(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName(),rowKey)),getDouble(rowKey),rowKey);
  }
  addIndex(connection,wrapper,rowKey,entityMetadata);
}",0.9974995832638772
176189,"/** 
 * Wraps entity attributes into redis format byte[]
 * @param entityMetadata
 * @param wrapper
 * @param embeddedObject
 * @param attrib
 * @param embeddedAttrib
 */
private void addToWrapper(EntityMetadata entityMetadata,AttributeWrapper wrapper,Object embeddedObject,Attribute attrib,Attribute embeddedAttrib){
  byte[] value=PropertyAccessorHelper.get(embeddedObject,(Field)attrib.getJavaMember());
  String valueAsStr=PropertyAccessorHelper.getString(embeddedObject,(Field)attrib.getJavaMember());
  byte[] name;
  if (value != null) {
    if (embeddedAttrib == null) {
      name=getEncodedBytes(((AbstractAttribute)attrib).getJPAColumnName());
    }
 else {
      name=getEncodedBytes(getHashKey(embeddedAttrib.getName(),((AbstractAttribute)attrib).getJPAColumnName()));
    }
    wrapper.addColumn(name,value);
    wrapper.addIndex(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)attrib).getJPAColumnName()),getDouble(valueAsStr));
    wrapper.addIndex(getHashKey(entityMetadata.getTableName(),getHashKey(((AbstractAttribute)attrib).getJPAColumnName(),valueAsStr)),getDouble(valueAsStr));
  }
}","/** 
 * Wraps entity attributes into redis format byte[]
 * @param entityMetadata
 * @param wrapper
 * @param embeddedObject
 * @param attrib
 * @param embeddedAttrib
 */
private void addToWrapper(EntityMetadata entityMetadata,AttributeWrapper wrapper,Object embeddedObject,Attribute attrib,Attribute embeddedAttrib){
  byte[] value=PropertyAccessorHelper.get(embeddedObject,(Field)attrib.getJavaMember());
  String valueAsStr=PropertyAccessorHelper.getString(embeddedObject,(Field)attrib.getJavaMember());
  byte[] name;
  if (value != null) {
    if (embeddedAttrib == null) {
      name=getEncodedBytes(((AbstractAttribute)attrib).getJPAColumnName());
    }
 else {
      name=getEncodedBytes(getHashKey(embeddedAttrib.getName(),((AbstractAttribute)attrib).getJPAColumnName()));
    }
    wrapper.addColumn(name,value);
    if (entityMetadata.getIndexProperties().containsKey(((AbstractAttribute)attrib).getJPAColumnName())) {
      wrapper.addIndex(getHashKey(entityMetadata.getTableName(),((AbstractAttribute)attrib).getJPAColumnName()),getDouble(valueAsStr));
      wrapper.addIndex(getHashKey(entityMetadata.getTableName(),getHashKey(((AbstractAttribute)attrib).getJPAColumnName(),valueAsStr)),getDouble(valueAsStr));
    }
  }
}",0.9503184713375796
176190,"Map<String,Double> getIndexes(){
  return indexes;
}","Map getIndexes(){
  return indexes;
}",0.8314606741573034
176191,"/** 
 * Add inverted index in sorted set.
 * @param connection redis connection instance
 * @param wrapper attribute wrapper.
 * @param rowKey row key to be stor
 */
private void addIndex(final Object connection,final AttributeWrapper wrapper,final String rowKey){
  Set<String> indexKeys=wrapper.getIndexes().keySet();
  for (  String idx_Name : indexKeys) {
    if (resource != null && resource.isActive()) {
      ((Transaction)connection).zadd(idx_Name,wrapper.getIndexes().get(idx_Name),rowKey);
    }
 else {
      ((Pipeline)connection).zadd(idx_Name,wrapper.getIndexes().get(idx_Name),rowKey);
    }
  }
}","/** 
 * Add inverted index in sorted set.
 * @param connection redis connection instance
 * @param wrapper attribute wrapper.
 * @param rowKey row key to be stor
 */
private void addIndex(final Object connection,final AttributeWrapper wrapper,final String rowKey,final EntityMetadata metadata){
  Indexer indexer=indexManager.getIndexer();
  if (indexer != null) {
    indexer.index(metadata.getEntityClazz(),wrapper.getIndexes(),rowKey,null);
  }
}",0.5725047080979284
176192,"RedisClient(final RedisClientFactory factory,final String persistenceUnit){
  this.factory=factory;
  reader=new RedisEntityReader();
  this.indexManager=factory.getIndexManager();
  this.persistenceUnit=persistenceUnit;
  this.clientMetadata=factory.getClientMetadata();
  setBatchSize(persistenceUnit,factory.getOverridenProperties());
}","RedisClient(final RedisClientFactory factory,final String persistenceUnit){
  this.factory=factory;
  reader=new RedisEntityReader();
  this.indexManager=factory.getIndexManager();
  initializeIndexer();
  this.persistenceUnit=persistenceUnit;
  this.clientMetadata=factory.getClientMetadata();
  setBatchSize(persistenceUnit,factory.getOverridenProperties());
}",0.9671897289586304
176193,"/** 
 * Builds the type.
 * @param < T > the generic type
 * @param attribType the attrib type
 * @return the type
 */
<T>Type<T> buildType(Class<T> attribType){
  PersistentAttributeType attributeType=attribute != null ? MetaModelBuilder.getPersistentAttributeType(attribute) : persistentAttribType;
switch (attributeType) {
case BASIC:
    return new DefaultBasicType<T>(attribType);
case EMBEDDED:
  return processOnEmbeddables(attribType);
case ELEMENT_COLLECTION:
if (attribute != null && Collection.class.isAssignableFrom(attribType)) {
  java.lang.reflect.Type[] argument=((ParameterizedType)attribute.getGenericType()).getActualTypeArguments();
  return processOnEmbeddables(getTypedClass(argument[0]));
}
 else if (attribute != null && Map.class.isAssignableFrom(attribType)) {
  java.lang.reflect.Type[] argument=((ParameterizedType)attribute.getGenericType()).getActualTypeArguments();
  processOnEmbeddables(getTypedClass(argument[0]));
  return processOnEmbeddables(getTypedClass(argument[1]));
}
 else {
  LOG.warn(""String_Node_Str"" + attribute + ""String_Node_Str"");
}
default :
if (!(managedTypes.get(attribType) != null)) {
if (attribute != null && isPluralAttribute(attribute)) {
  java.lang.reflect.Type[] arguments=((ParameterizedType)attribute.getGenericType()).getActualTypeArguments();
  if (arguments != null && arguments.length == 1) {
    attribType=(Class<T>)getTypedClass(arguments[0]);
  }
 else   if (arguments != null && arguments.length > 1) {
    attribType=(Class<T>)getTypedClass(arguments[1]);
  }
}
if (managedTypes.get(attribType) == null) {
  if (attribType.isAnnotationPresent(Entity.class)) {
    EntityType<T> entityType=new DefaultEntityType<T>((Class<T>)attribType,PersistenceType.ENTITY,null);
    managedTypes.put(attribType,entityType);
  }
 else {
    return new DefaultBasicType<T>(attribType);
  }
}
}
return (Type<T>)managedTypes.get(attribType);
}
}","/** 
 * Builds the type.
 * @param < T > the generic type
 * @param attribType the attrib type
 * @return the type
 */
<T>Type<T> buildType(Class<T> attribType){
  PersistentAttributeType attributeType=attribute != null ? MetaModelBuilder.getPersistentAttributeType(attribute) : persistentAttribType;
switch (attributeType) {
case BASIC:
    return new DefaultBasicType<T>(attribType);
case EMBEDDED:
  return processOnEmbeddables(attribType);
case ELEMENT_COLLECTION:
if (attribute != null && Collection.class.isAssignableFrom(attribType)) {
  java.lang.reflect.Type[] argument=((ParameterizedType)attribute.getGenericType()).getActualTypeArguments();
  return processOnEmbeddables(getTypedClass(argument[0]));
}
 else if (attribute != null && Map.class.isAssignableFrom(attribType)) {
  java.lang.reflect.Type[] argument=((ParameterizedType)attribute.getGenericType()).getActualTypeArguments();
  processOnEmbeddables(getTypedClass(argument[0]));
  return processOnEmbeddables(getTypedClass(argument[1]));
}
 else {
  LOG.warn(""String_Node_Str"" + attribute + ""String_Node_Str"");
}
default :
if (!(managedTypes.get(attribType) != null)) {
if (attribute != null && isPluralAttribute(attribute)) {
  java.lang.reflect.Type[] arguments=((ParameterizedType)attribute.getGenericType()).getActualTypeArguments();
  if (arguments != null && arguments.length == 1) {
    attribType=(Class<T>)getTypedClass(arguments[0]);
  }
 else   if (arguments != null && arguments.length > 1) {
    attribType=(Class<T>)getTypedClass(arguments[1]);
  }
}
if (managedTypes.get(attribType) == null) {
  if (attribType.isAnnotationPresent(Entity.class)) {
    EntityType<T> entityType=new DefaultEntityType<T>((Class<T>)attribType,PersistenceType.ENTITY,(AbstractIdentifiableType)getType(attribType.getSuperclass(),false));
    managedTypes.put(attribType,entityType);
  }
 else {
    return new DefaultBasicType<T>(attribType);
  }
}
}
return (Type<T>)managedTypes.get(attribType);
}
}",0.9816205022003625
176194,"/** 
 */
public void clear(){
  this.nodeMappings.clear();
  this.headNodes.clear();
  this.nodeMappings=null;
  this.headNodes=null;
  nodeMappings=new HashMap<String,Node>();
  headNodes=new HashSet<Node>();
}","/** 
 */
public void clear(){
  if (this.nodeMappings != null) {
    this.nodeMappings.clear();
  }
  if (this.headNodes != null) {
    this.headNodes.clear();
  }
}",0.4734042553191489
176195,"/** 
 * Empties Flush stack present in a PersistenceCache.
 */
public void clearFlushStack(){
  if (stackQueue != null && !stackQueue.isEmpty()) {
    stackQueue.clear();
  }
  if (joinTableDataCollection != null && !joinTableDataCollection.isEmpty()) {
    joinTableDataCollection.clear();
    joinTableDataCollection=null;
    joinTableDataCollection=new ArrayList<JoinTableData>();
  }
  if (eventLogQueue != null) {
    eventLogQueue.clear();
  }
}","/** 
 * Empties Flush stack present in a PersistenceCache.
 */
public void clearFlushStack(){
  if (stackQueue != null && !stackQueue.isEmpty()) {
    stackQueue.clear();
  }
  if (joinTableDataCollection != null && !joinTableDataCollection.isEmpty()) {
    joinTableDataCollection.clear();
  }
  if (eventLogQueue != null) {
    eventLogQueue.clear();
  }
}",0.7432098765432099
176196,"/** 
 * Cleaned out the data.
 */
public void clean(){
  if (mainCache != null) {
    mainCache.clear();
    mainCache=null;
  }
  if (embeddedCache != null) {
    embeddedCache.clear();
    embeddedCache=null;
  }
  if (elementCollectionCache != null) {
    elementCollectionCache.clear();
    elementCollectionCache=null;
  }
  if (transactionalCache != null) {
    transactionalCache.clear();
    transactionalCache=null;
  }
  initialize();
}","/** 
 * Cleaned out the data.
 */
public void clean(){
  if (mainCache != null) {
    mainCache.clear();
  }
  if (embeddedCache != null) {
    embeddedCache.clear();
  }
  if (elementCollectionCache != null) {
    elementCollectionCache.clear();
  }
  if (transactionalCache != null) {
    transactionalCache.clear();
  }
}",0.8337662337662337
176197,"/** 
 * Populate via thrift.
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param relations the relations
 * @param thriftColumnName the thrift column name
 * @param thriftColumnValue the thrift column value
 * @param isCql3Enabled
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private Object populateViaThrift(EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,Map<String,Object> relations,String thriftColumnName,Object thriftColumnValue,boolean isCql3Enabled) throws InstantiationException, IllegalAccessException {
  if (relationNames == null || !relationNames.contains(thriftColumnName)) {
    if (thriftColumnValue != null) {
      MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
      String fieldName=m.getFieldName(thriftColumnName);
      Attribute attribute=fieldName != null ? entityType.getAttribute(fieldName) : null;
      if (attribute != null) {
        entity=initialize(m,entity,null);
        if (!attribute.isAssociation()) {
          String idColumnName=((AbstractAttribute)m.getIdAttribute()).getJPAColumnName();
          if (!metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType()) && thriftColumnName.equals(idColumnName)) {
            setId(m,entity,thriftColumnValue,isCql3Enabled);
            PropertyAccessorHelper.setId(entity,m,(byte[])thriftColumnValue);
          }
          if (isCql3Enabled && !m.getType().equals(Type.SUPER_COLUMN_FAMILY) && !m.isCounterColumnType()) {
            setFieldValueViaCQL(entity,thriftColumnValue,attribute);
          }
 else {
            setFieldValue(entity,thriftColumnValue,attribute);
          }
        }
      }
 else {
        entity=populateCompositeId(m,entity,thriftColumnName,thriftColumnValue,metaModel);
      }
    }
  }
 else {
    if (relationNames != null && relationNames.contains(thriftColumnName) && thriftColumnValue != null) {
      String fieldName=m.getFieldName(thriftColumnName);
      Attribute attribute=fieldName != null ? entityType.getAttribute(fieldName) : null;
      EntityMetadata relationMetadata=KunderaMetadataManager.getEntityMetadata(attribute.getJavaType());
      Object value;
      if (isCql3Enabled && !m.getType().equals(Type.SUPER_COLUMN_FAMILY)) {
        value=getFieldValueViaCQL(thriftColumnValue,relationMetadata.getIdAttribute());
      }
 else {
        value=PropertyAccessorHelper.getObject(relationMetadata.getIdAttribute().getJavaType(),(byte[])thriftColumnValue);
      }
      relations.put(thriftColumnName,value);
      if (entity == null) {
        entity=initialize(m,entity,null);
      }
    }
  }
  return entity;
}","/** 
 * Populate via thrift.
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param relations the relations
 * @param thriftColumnName the thrift column name
 * @param thriftColumnValue the thrift column value
 * @param isCql3Enabled
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private Object populateViaThrift(EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,Map<String,Object> relations,String thriftColumnName,Object thriftColumnValue,boolean isCql3Enabled) throws InstantiationException, IllegalAccessException {
  if (relationNames == null || !relationNames.contains(thriftColumnName)) {
    if (thriftColumnValue != null) {
      MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
      String fieldName=m.getFieldName(thriftColumnName);
      Attribute attribute=fieldName != null ? entityType.getAttribute(fieldName) : null;
      if (attribute != null) {
        entity=initialize(m,entity,null);
        if (!attribute.isAssociation()) {
          String idColumnName=((AbstractAttribute)m.getIdAttribute()).getJPAColumnName();
          if (!metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType()) && thriftColumnName.equals(idColumnName)) {
            setId(m,entity,thriftColumnValue,isCql3Enabled);
            PropertyAccessorHelper.setId(entity,m,(byte[])thriftColumnValue);
          }
          if (isCql3Enabled && !m.getType().equals(Type.SUPER_COLUMN_FAMILY) && !m.isCounterColumnType()) {
            setFieldValueViaCQL(entity,thriftColumnValue,attribute);
          }
 else {
            setFieldValue(entity,thriftColumnValue,attribute);
          }
        }
      }
 else {
        entity=populateCompositeId(m,entity,thriftColumnName,thriftColumnValue,metaModel);
      }
    }
  }
 else {
    if (relationNames != null && relationNames.contains(thriftColumnName) && thriftColumnValue != null) {
      String fieldName=m.getFieldName(thriftColumnName);
      Attribute attribute=fieldName != null ? entityType.getAttribute(fieldName) : null;
      EntityMetadata relationMetadata=KunderaMetadataManager.getEntityMetadata(((AbstractAttribute)attribute).getBindableJavaType());
      Object value;
      if (isCql3Enabled && !m.getType().equals(Type.SUPER_COLUMN_FAMILY)) {
        value=getFieldValueViaCQL(thriftColumnValue,relationMetadata.getIdAttribute());
      }
 else {
        value=PropertyAccessorHelper.getObject(relationMetadata.getIdAttribute().getJavaType(),(byte[])thriftColumnValue);
      }
      relations.put(thriftColumnName,value);
      if (entity == null) {
        entity=initialize(m,entity,null);
      }
    }
  }
  return entity;
}",0.9915996425379804
176198,"/** 
 * Export schema handles the handleOperation method.
 * @param hbase
 */
protected void exportSchema(final String persistenceUnit,List<TableInfo> tables){
  PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String paramString=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_CLIENT_FACTORY) : null;
  if (clientFactory != null && ((clientFactory.equalsIgnoreCase(puMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_CLIENT_FACTORY))) || (paramString != null && clientFactory.equalsIgnoreCase(paramString)))) {
    readConfigProperties(puMetadata);
    if (operation != null && initiateClient()) {
      tableInfos=tables;
      handleOperations(tables);
    }
  }
}","/** 
 * Export schema handles the handleOperation method.
 * @param hbase
 */
protected void exportSchema(final String persistenceUnit,List<TableInfo> tables){
  this.puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String paramString=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_CLIENT_FACTORY) : null;
  if (clientFactory != null && ((clientFactory.equalsIgnoreCase(puMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_CLIENT_FACTORY))) || (paramString != null && clientFactory.equalsIgnoreCase(paramString)))) {
    readConfigProperties(puMetadata);
    if (operation != null && initiateClient()) {
      tableInfos=tables;
      handleOperations(tables);
    }
  }
}",0.981863664790494
176199,"/** 
 * No authentication test.
 */
@Test public void noAuthenticationTest(){
  try {
    pu=""String_Node_Str"";
    emf=Persistence.createEntityManagerFactory(pu);
    Assert.assertNotNull(emf);
    EntityManager em=emf.createEntityManager();
    Assert.assertNotNull(em);
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
}","/** 
 * No authentication test.
 */
@Test public void noAuthenticationTest(){
  try {
    pu=""String_Node_Str"";
    emf=Persistence.createEntityManagerFactory(pu);
    Assert.assertNotNull(emf);
    EntityManager em=emf.createEntityManager();
    Assert.assertNotNull(em);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9645390070921984
176200,"private static Class<?> toClass(Type o){
  if (o instanceof GenericArrayType) {
    return Array.newInstance(toClass(((GenericArrayType)o).getGenericComponentType()),0).getClass();
  }
  return (Class<?>)o;
}","/** 
 * Borrowed from java.lang.class
 * @param o
 * @return
 */
private static Class<?> toClass(Type o){
  if (o instanceof GenericArrayType) {
    Class clazz=Array.newInstance(toClass(((GenericArrayType)o).getGenericComponentType()),0).getClass();
    return clazz;
  }
  return (Class<?>)o;
}",0.7976190476190477
176201,"/** 
 * Retrieves Generic class from a collection field that has only one argument.
 * @param collectionField the collection field
 * @return the generic class
 */
public static Class<?> getGenericClass(Field collectionField){
  Class<?> genericClass=null;
  if (collectionField == null) {
    return genericClass;
  }
  if (isCollection(collectionField.getType())) {
    Type[] parameters=ReflectUtils.getTypeArguments(collectionField);
    if (parameters != null) {
      if (parameters.length == 1) {
        genericClass=(Class<?>)parameters[0];
      }
 else {
        throw new PropertyAccessException(""String_Node_Str"");
      }
    }
  }
  return genericClass != null ? genericClass : collectionField.getType();
}","/** 
 * Retrieves Generic class from a collection field that has only one argument.
 * @param collectionField the collection field
 * @return the generic class
 */
public static Class<?> getGenericClass(Field collectionField){
  Class<?> genericClass=null;
  if (collectionField == null) {
    return genericClass;
  }
  if (isCollection(collectionField.getType())) {
    Type[] parameters=ReflectUtils.getTypeArguments(collectionField);
    if (parameters != null) {
      if (parameters.length == 1) {
        genericClass=toClass(parameters[0]);
      }
 else {
        throw new PropertyAccessException(""String_Node_Str"");
      }
    }
  }
  return genericClass != null ? genericClass : collectionField.getType();
}",0.9868147120055516
176202,"/** 
 * Retrieves Generic class from a collection field that has only one argument.
 * @param collectionField the collection field
 * @return the generic class
 */
public static List<Class<?>> getGenericClasses(Field collectionField){
  List<Class<?>> genericClasses=new ArrayList<Class<?>>();
  if (collectionField == null) {
    return genericClasses;
  }
  Type[] parameters=ReflectUtils.getTypeArguments(collectionField);
  if (parameters != null) {
    for (    Type parameter : parameters) {
      genericClasses.add((Class<?>)toClass(parameter));
    }
  }
  return genericClasses;
}","/** 
 * Retrieves Generic class from a collection field that has only one argument.
 * @param collectionField the collection field
 * @return the generic class
 */
public static List<Class<?>> getGenericClasses(Field collectionField){
  List<Class<?>> genericClasses=new ArrayList<Class<?>>();
  if (collectionField == null) {
    return genericClasses;
  }
  Type[] parameters=ReflectUtils.getTypeArguments(collectionField);
  if (parameters != null) {
    for (    Type parameter : parameters) {
      genericClasses.add(toClass(parameter));
    }
  }
  return genericClasses;
}",0.9914529914529916
176203,"@Test public void onDeleteThenInsertCassandra() throws Exception {
  Object p1=prepare(""String_Node_Str"",10);
  Object p2=prepare(""String_Node_Str"",20);
  Object p3=prepare(""String_Node_Str"",15);
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  waitThread();
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  PersonESIndexerCassandra p=findById(PersonESIndexerCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  em.remove(p);
  em.clear();
  TypedQuery<PersonESIndexerCassandra> query=em.createQuery(""String_Node_Str"",PersonESIndexerCassandra.class);
  List<PersonESIndexerCassandra> results=query.getResultList();
  Assert.assertNotNull(query);
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  p1=prepare(""String_Node_Str"",10);
  em.persist(p1);
  query=em.createQuery(""String_Node_Str"",PersonESIndexerCassandra.class);
  results=query.getResultList();
  Assert.assertNotNull(query);
  Assert.assertNotNull(results);
  Assert.assertEquals(3,results.size());
}","@Test public void onDeleteThenInsertCassandra() throws Exception {
  Object p1=prepare(""String_Node_Str"",10);
  Object p2=prepare(""String_Node_Str"",20);
  Object p3=prepare(""String_Node_Str"",15);
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  waitThread();
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  PersonESIndexerCassandra p=findById(PersonESIndexerCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  em.remove(p);
  em.clear();
  TypedQuery<PersonESIndexerCassandra> query=em.createQuery(""String_Node_Str"",PersonESIndexerCassandra.class);
  List<PersonESIndexerCassandra> results=query.getResultList();
  Assert.assertNotNull(query);
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  p1=prepare(""String_Node_Str"",10);
  em.persist(p1);
  waitThread();
  query=em.createQuery(""String_Node_Str"",PersonESIndexerCassandra.class);
  results=query.getResultList();
  Assert.assertNotNull(query);
  Assert.assertNotNull(results);
  Assert.assertEquals(3,results.size());
}",0.9929140832595216
176204,"public String getFieldName(String jpaColumnName){
  String fieldName=jpaColumnMapping.get(jpaColumnName);
  if (fieldName == null) {
    getEntityType();
    MetadataUtils.onJPAColumnMapping(this.entityType,this);
    fieldName=jpaColumnMapping.get(jpaColumnName);
  }
  return fieldName;
}","public String getFieldName(String jpaColumnName){
  if (jpaColumnName.equals(((AbstractAttribute)this.getIdAttribute()).getJPAColumnName())) {
    return this.getIdAttribute().getName();
  }
  String fieldName=jpaColumnMapping.get(jpaColumnName);
  if (fieldName == null) {
    getEntityType();
    MetadataUtils.onJPAColumnMapping(this.entityType,this);
    fieldName=jpaColumnMapping.get(jpaColumnName);
  }
  return fieldName;
}",0.8044382801664355
176205,"/** 
 * Populate metadata.
 * @param < X > the generic type
 * @param < T > the generic type
 * @param metadata the metadata
 * @param clazz the clazz
 */
private <X extends Class,T extends Object>void populateMetadata(EntityMetadata metadata,Class<X> clazz,Map puProperties){
  if (metadata.getPersistenceUnit() != null) {
    MetaModelBuilder<X,T> metaModelBuilder=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(metadata.getPersistenceUnit());
    metaModelBuilder.process(clazz);
    for (    Field f : clazz.getDeclaredFields()) {
      if (f != null && !Modifier.isStatic(f.getModifiers()) && !Modifier.isTransient(f.getModifiers()) && !f.isAnnotationPresent(Transient.class)) {
        metaModelBuilder.construct(clazz,f);
        onIdAttribute(metaModelBuilder,metadata,clazz,f);
        onFamilyType(metadata,clazz,f);
        addRelationIntoMetadata(clazz,f,metadata);
      }
    }
    EntityType entityType=(EntityType)metaModelBuilder.getManagedTypes().get(metadata.getEntityClazz());
    MetadataUtils.onJPAColumnMapping(entityType,metadata);
    validateAndSetId(metadata,clazz,metaModelBuilder);
  }
}","/** 
 * Populate metadata.
 * @param < X > the generic type
 * @param < T > the generic type
 * @param metadata the metadata
 * @param clazz the clazz
 */
private <X extends Class,T extends Object>void populateMetadata(EntityMetadata metadata,Class<X> clazz,Map puProperties){
  if (metadata.getPersistenceUnit() != null) {
    MetaModelBuilder<X,T> metaModelBuilder=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(metadata.getPersistenceUnit());
    metaModelBuilder.process(clazz);
    for (    Field f : clazz.getDeclaredFields()) {
      if (f != null && !Modifier.isStatic(f.getModifiers()) && !Modifier.isTransient(f.getModifiers()) && !f.isAnnotationPresent(Transient.class)) {
        metaModelBuilder.construct(clazz,f);
        onIdAttribute(metaModelBuilder,metadata,clazz,f);
        onFamilyType(metadata,clazz,f);
        addRelationIntoMetadata(clazz,f,metadata);
      }
    }
    EntityType entityType=(EntityType)metaModelBuilder.getManagedTypes().get(metadata.getEntityClazz());
    validateAndSetId(metadata,clazz,metaModelBuilder);
    MetadataUtils.onJPAColumnMapping(entityType,metadata);
  }
}",0.95171202809482
176206,"@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(15,ksDef.getCf_defsSize());
    int count=0;
    for (    CfDef cfDef : ksDef.cf_defs) {
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
        continue;
      }
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
      }
 else {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        List<ColumnDef> columnDefs=cfDef.getColumn_metadata();
        Assert.assertEquals(1,columnDefs.size());
        count++;
      }
    }
    Assert.assertEquals(15,count);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
}","@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(15,ksDef.getCf_defsSize());
    int count=0;
    for (    CfDef cfDef : ksDef.cf_defs) {
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
        continue;
      }
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
      }
 else {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        List<ColumnDef> columnDefs=cfDef.getColumn_metadata();
        Assert.assertEquals(4,columnDefs.size());
        count++;
      }
    }
    Assert.assertEquals(15,count);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
}",0.9992
176207,"/** 
 * Retrieves Generic class from a collection field that has only one argument.
 * @param collectionField the collection field
 * @return the generic class
 */
public static List<Class<?>> getGenericClasses(Field collectionField){
  List<Class<?>> genericClasses=new ArrayList<Class<?>>();
  if (collectionField == null) {
    return genericClasses;
  }
  Type[] parameters=ReflectUtils.getTypeArguments(collectionField);
  if (parameters != null) {
    for (    Type parameter : parameters) {
      genericClasses.add((Class<?>)parameter);
    }
  }
  return genericClasses;
}","/** 
 * Retrieves Generic class from a collection field that has only one argument.
 * @param collectionField the collection field
 * @return the generic class
 */
public static List<Class<?>> getGenericClasses(Field collectionField){
  List<Class<?>> genericClasses=new ArrayList<Class<?>>();
  if (collectionField == null) {
    return genericClasses;
  }
  Type[] parameters=ReflectUtils.getTypeArguments(collectionField);
  if (parameters != null) {
    for (    Type parameter : parameters) {
      if (parameter.getClass().isAssignableFrom(GenericArrayTypeImpl.class)) {
        genericClasses.add((Class<?>)((GenericArrayTypeImpl)parameter).getGenericComponentType());
      }
 else {
        genericClasses.add((Class<?>)parameter);
      }
    }
  }
  return genericClasses;
}",0.8374816983894583
176208,"public void getHTable(String table) throws IOException {
synchronized (tableLock) {
    _hTable=new HTable(config,table);
  }
}","public void getHTable(String table) throws IOException {
  _hTable=hTablePool.getTable(table);
}",0.7443946188340808
176209,"/** 
 * Read a record from the database. Each field/value pair from the result will be stored in a HashMap.
 * @param table The name of the table
 * @param key The record key of the record to read.
 * @param fields The list of fields to read, or null for all of them
 * @param result A HashMap of field/value pairs for the result
 * @return Zero on success, a non-zero error code on error
 */
public int read(String table,String key,Set<String> fields,HashMap<String,ByteIterator> result){
  try {
    if (_hTable == null) {
      getHTable(_table);
    }
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
    return ServerError;
  }
  Result r=null;
  try {
    if (_debug) {
      System.out.println(""String_Node_Str"" + _columnFamily);
      System.out.println(""String_Node_Str"" + key);
    }
    Get g=new Get(Bytes.toBytes(key));
    if (fields == null) {
      g.addFamily(_columnFamilyBytes);
    }
 else {
      for (      String field : fields) {
        g.addColumn(_columnFamilyBytes,Bytes.toBytes(field));
      }
    }
    r=_hTable.get(g);
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
    return ServerError;
  }
catch (  ConcurrentModificationException e) {
    return ServerError;
  }
  for (  KeyValue kv : r.list()) {
    result.put(Bytes.toString(kv.getQualifier()),new ByteArrayByteIterator(kv.getValue()));
    if (_debug) {
      System.out.println(""String_Node_Str"" + Bytes.toString(kv.getQualifier()) + ""String_Node_Str""+ Bytes.toString(kv.getValue()));
    }
  }
  return Ok;
}","/** 
 * Read a record from the database. Each field/value pair from the result will be stored in a HashMap.
 * @param table The name of the table
 * @param key The record key of the record to read.
 * @param fields The list of fields to read, or null for all of them
 * @param result A HashMap of field/value pairs for the result
 * @return Zero on success, a non-zero error code on error
 */
public int read(String table,String key,Set<String> fields,HashMap<String,ByteIterator> result){
  try {
    if (_hTable == null) {
      getHTable(_table);
    }
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
    return ServerError;
  }
  Result r=null;
  try {
    if (_debug) {
      System.out.println(""String_Node_Str"" + _columnFamily);
      System.out.println(""String_Node_Str"" + key);
    }
    Get g=new Get(Bytes.toBytes(key));
    if (fields == null) {
      g.addFamily(_columnFamilyBytes);
    }
 else {
      for (      String field : fields) {
        g.addColumn(_columnFamilyBytes,Bytes.toBytes(field));
      }
    }
    r=_hTable.get(g);
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
    return ServerError;
  }
catch (  ConcurrentModificationException e) {
    return ServerError;
  }
  for (  KeyValue kv : r.raw()) {
    result.put(Bytes.toString(kv.getQualifier()),new ByteArrayByteIterator(kv.getValue()));
    if (_debug) {
      System.out.println(""String_Node_Str"" + Bytes.toString(kv.getQualifier()) + ""String_Node_Str""+ Bytes.toString(kv.getValue()));
    }
  }
  return Ok;
}",0.9977585654819084
176210,"/** 
 * If parameterised metadata is not for intended persistence unit, assign it to null.
 * @param metadata entity metadata
 * @return metadata.
 */
private EntityMetadata belongsToPersistenceUnit(EntityMetadata metadata){
  PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String keyspace=(String)puProperties.get(PersistenceProperties.KUNDERA_KEYSPACE);
  keyspace=keyspace == null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE) : keyspace;
  if (metadata.getPersistenceUnit() != null && !metadata.getPersistenceUnit().equals(persistenceUnit) || (metadata.getSchema() != null && !metadata.getSchema().equals(keyspace))) {
    metadata=null;
  }
 else {
    applyMetadataChanges(metadata);
  }
  return metadata;
}","/** 
 * If parameterised metadata is not for intended persistence unit, assign it to null.
 * @param metadata entity metadata
 * @return metadata.
 */
private EntityMetadata belongsToPersistenceUnit(EntityMetadata metadata){
  PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String keyspace=puProperties != null ? (String)puProperties.get(PersistenceProperties.KUNDERA_KEYSPACE) : null;
  keyspace=keyspace == null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE) : keyspace;
  if (metadata.getPersistenceUnit() != null && !metadata.getPersistenceUnit().equals(persistenceUnit) || (metadata.getSchema() != null && !metadata.getSchema().equals(keyspace))) {
    metadata=null;
  }
 else {
    applyMetadataChanges(metadata);
  }
  return metadata;
}",0.9819927971188476
176211,"private void applyMetadataChanges(EntityMetadata metadata){
  metadata.setPersistenceUnit(persistenceUnit);
  PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String keyspace=(String)puProperties.get(PersistenceProperties.KUNDERA_KEYSPACE);
  keyspace=keyspace == null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE) : keyspace;
  if (metadata.getSchema() == null) {
    metadata.setSchema(keyspace);
  }
  if (metadata.getTableName() == null) {
    metadata.setTableName(metadata.getEntityClazz().getSimpleName());
  }
}","private void applyMetadataChanges(EntityMetadata metadata){
  metadata.setPersistenceUnit(persistenceUnit);
  PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String keyspace=puProperties != null ? (String)puProperties.get(PersistenceProperties.KUNDERA_KEYSPACE) : null;
  keyspace=keyspace == null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE) : keyspace;
  if (metadata.getSchema() == null) {
    metadata.setSchema(keyspace);
  }
  if (metadata.getTableName() == null) {
    metadata.setTableName(metadata.getEntityClazz().getSimpleName());
  }
}",0.9764150943396226
176212,"/** 
 * Retrieves Generic class from a collection field that has only one argument.
 * @param collectionField the collection field
 * @return the generic class
 */
public static List<Class<?>> getGenericClasses(Field collectionField){
  List<Class<?>> genericClasses=new ArrayList<Class<?>>();
  if (collectionField == null) {
    return genericClasses;
  }
  Type[] parameters=ReflectUtils.getTypeArguments(collectionField);
  if (parameters != null) {
    for (    Type parameter : parameters) {
      if (parameter.getClass().isAssignableFrom(GenericArrayTypeImpl.class)) {
        genericClasses.add((Class<?>)((GenericArrayTypeImpl)parameter).getGenericComponentType());
      }
 else {
        genericClasses.add((Class<?>)parameter);
      }
    }
  }
  return genericClasses;
}","/** 
 * Retrieves Generic class from a collection field that has only one argument.
 * @param collectionField the collection field
 * @return the generic class
 */
public static List<Class<?>> getGenericClasses(Field collectionField){
  List<Class<?>> genericClasses=new ArrayList<Class<?>>();
  if (collectionField == null) {
    return genericClasses;
  }
  Type[] parameters=ReflectUtils.getTypeArguments(collectionField);
  if (parameters != null) {
    for (    Type parameter : parameters) {
      genericClasses.add((Class<?>)toClass(parameter));
    }
  }
  return genericClasses;
}",0.7752727272727272
176213,"@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(13,ksDef.getCf_defsSize());
    int count=0;
    for (    CfDef cfDef : ksDef.cf_defs) {
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
        continue;
      }
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
      }
 else {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        List<ColumnDef> columnDefs=cfDef.getColumn_metadata();
        Assert.assertEquals(1,columnDefs.size());
        count++;
      }
    }
    Assert.assertEquals(15,count);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
}","@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(15,ksDef.getCf_defsSize());
    int count=0;
    for (    CfDef cfDef : ksDef.cf_defs) {
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
        continue;
      }
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
      }
 else {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        List<ColumnDef> columnDefs=cfDef.getColumn_metadata();
        Assert.assertEquals(1,columnDefs.size());
        count++;
      }
    }
    Assert.assertEquals(15,count);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
}",0.9992
176214,"public void createSchema(final String schemaName) throws SQLException {
  String sql=""String_Node_Str"" + schemaName + ""String_Node_Str"";
  update(sql);
}","public void createSchema(final String schemaName) throws SQLException {
  try {
    String sql=""String_Node_Str"" + schemaName + ""String_Node_Str"";
    update(sql);
  }
 catch (  Exception e) {
  }
}",0.8717948717948718
176215,"@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(keyspaceName);
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(keyspaceName,ksDef.getName());
    Assert.assertEquals(SimpleStrategy.class.getName(),ksDef.getStrategy_class());
    Assert.assertEquals(""String_Node_Str"",ksDef.getStrategy_options().get(""String_Node_Str""));
    Assert.assertTrue(ksDef.isDurable_writes());
    Assert.assertNotNull(ksDef.getCf_defs());
    Assert.assertNotNull(ksDef.getStrategy_options());
    Assert.assertEquals(5,ksDef.getCf_defsSize());
    for (    CfDef cfDef : ksDef.getCf_defs()) {
      Assert.assertNotNull(cfDef);
      if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(""String_Node_Str"",cfDef.getName());
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertFalse(cfDef.getComment().isEmpty());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getComparator_type());
        Assert.assertNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(2,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
        Assert.assertTrue(cfDef.isReplicate_on_write());
        Assert.assertEquals(16,cfDef.getMin_compaction_threshold());
        Assert.assertEquals(64,cfDef.getMax_compaction_threshold());
      }
 else       if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertTrue(cfDef.getComment().isEmpty());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getComparator_type());
        Assert.assertNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(2,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
        Assert.assertTrue(cfDef.isReplicate_on_write());
        Assert.assertEquals(4,cfDef.getMin_compaction_threshold());
        Assert.assertEquals(32,cfDef.getMax_compaction_threshold());
      }
 else       if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertTrue(cfDef.getComment().isEmpty());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getComparator_type());
        Assert.assertNotNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getSubcomparator_type());
        Assert.assertEquals(0,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
      }
 else       if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(""String_Node_Str"",cfDef.getName());
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertFalse(cfDef.getComment().isEmpty());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getComparator_type());
        Assert.assertNotNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getSubcomparator_type());
        Assert.assertEquals(0,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
      }
 else {
      }
    }
  }
 catch (  NotFoundException nfe) {
    Assert.fail();
    logger.error(""String_Node_Str"",nfe.getMessage());
  }
catch (  InvalidRequestException ire) {
    Assert.fail();
    logger.error(""String_Node_Str"",ire.getMessage());
  }
catch (  TException te) {
    Assert.fail();
    logger.error(""String_Node_Str"",te.getMessage());
  }
}","@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(keyspaceName);
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(keyspaceName,ksDef.getName());
    Assert.assertEquals(SimpleStrategy.class.getName(),ksDef.getStrategy_class());
    Assert.assertEquals(""String_Node_Str"",ksDef.getStrategy_options().get(""String_Node_Str""));
    Assert.assertTrue(ksDef.isDurable_writes());
    Assert.assertNotNull(ksDef.getCf_defs());
    Assert.assertNotNull(ksDef.getStrategy_options());
    Assert.assertEquals(7,ksDef.getCf_defsSize());
    for (    CfDef cfDef : ksDef.getCf_defs()) {
      Assert.assertNotNull(cfDef);
      if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(""String_Node_Str"",cfDef.getName());
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertFalse(cfDef.getComment().isEmpty());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getComparator_type());
        Assert.assertNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(2,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
        Assert.assertTrue(cfDef.isReplicate_on_write());
        Assert.assertEquals(16,cfDef.getMin_compaction_threshold());
        Assert.assertEquals(64,cfDef.getMax_compaction_threshold());
      }
 else       if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertTrue(cfDef.getComment().isEmpty());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getComparator_type());
        Assert.assertNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(2,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
        Assert.assertTrue(cfDef.isReplicate_on_write());
        Assert.assertEquals(4,cfDef.getMin_compaction_threshold());
        Assert.assertEquals(32,cfDef.getMax_compaction_threshold());
      }
 else       if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertTrue(cfDef.getComment().isEmpty());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getComparator_type());
        Assert.assertNotNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(UTF8Type.class.getName(),cfDef.getSubcomparator_type());
        Assert.assertEquals(0,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
      }
 else       if (""String_Node_Str"".equals(cfDef.getName())) {
        Assert.assertEquals(""String_Node_Str"",cfDef.getName());
        Assert.assertEquals(keyspaceName,cfDef.getKeyspace());
        Assert.assertEquals(""String_Node_Str"",cfDef.getColumn_type());
        Assert.assertFalse(cfDef.getComment().isEmpty());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getComparator_type());
        Assert.assertNotNull(cfDef.getSubcomparator_type());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getSubcomparator_type());
        Assert.assertEquals(0,cfDef.getColumn_metadataSize());
        Assert.assertEquals(BytesType.class.getName(),cfDef.getDefault_validation_class());
      }
 else {
      }
    }
  }
 catch (  NotFoundException nfe) {
    Assert.fail();
    logger.error(""String_Node_Str"",nfe.getMessage());
  }
catch (  InvalidRequestException ire) {
    Assert.fail();
    logger.error(""String_Node_Str"",ire.getMessage());
  }
catch (  TException te) {
    Assert.fail();
    logger.error(""String_Node_Str"",te.getMessage());
  }
}",0.99974509304104
176216,"@Test public void testPrepareColumns(){
  logger.info(""String_Node_Str"");
  CQLTranslator translator=new CQLTranslator();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  CassandraPrimeUser user=new CassandraPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(CassandraPrimeUser.class);
  String translatedSql=translator.prepareColumnOrColumnValues(user,entityMetadata,TranslationType.VALUE,null).get(TranslationType.VALUE);
  String columnAsCsv=""String_Node_Str"" + timeLineId + ""String_Node_Str""+ currentDate.getTime()+ ""String_Node_Str"";
  Assert.assertEquals(columnAsCsv,translatedSql);
}","@Test public void testPrepareColumns(){
  logger.info(""String_Node_Str"");
  CQLTranslator translator=new CQLTranslator();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  CassandraPrimeUser user=new CassandraPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(CassandraPrimeUser.class);
  String translatedSql=translator.prepareColumnOrColumnValues(user,entityMetadata,TranslationType.VALUE,null).get(TranslationType.VALUE);
  String columnAsCsv=""String_Node_Str"" + timeLineId;
  Assert.assertTrue(StringUtils.contains(translatedSql,columnAsCsv));
}",0.8932655654383735
176217,"@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(13,ksDef.getCf_defsSize());
    int count=0;
    for (    CfDef cfDef : ksDef.cf_defs) {
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
        continue;
      }
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
      }
 else {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        List<ColumnDef> columnDefs=cfDef.getColumn_metadata();
        Assert.assertEquals(1,columnDefs.size());
        count++;
      }
    }
    Assert.assertEquals(13,count);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
}","@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(13,ksDef.getCf_defsSize());
    int count=0;
    for (    CfDef cfDef : ksDef.cf_defs) {
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
        continue;
      }
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
      }
 else {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        List<ColumnDef> columnDefs=cfDef.getColumn_metadata();
        Assert.assertEquals(1,columnDefs.size());
        count++;
      }
    }
    Assert.assertEquals(15,count);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
}",0.9992
176218,"@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(15,ksDef.getCf_defsSize());
    int count=0;
    for (    CfDef cfDef : ksDef.cf_defs) {
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
        continue;
      }
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
      }
 else {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        List<ColumnDef> columnDefs=cfDef.getColumn_metadata();
        Assert.assertEquals(4,columnDefs.size());
        count++;
      }
    }
    Assert.assertEquals(15,count);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
}","@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(15,ksDef.getCf_defsSize());
    int count=0;
    for (    CfDef cfDef : ksDef.cf_defs) {
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
        continue;
      }
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
      }
 else       if (!cfDef.getName().equals(""String_Node_Str"") && !cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        List<ColumnDef> columnDefs=cfDef.getColumn_metadata();
        Assert.assertEquals(1,columnDefs.size());
        count++;
      }
    }
    Assert.assertEquals(13,count);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
}",0.96
176219,"public String getFieldName(String jpaColumnName){
  String fieldName=jpaColumnMapping.get(jpaColumnName);
  if (fieldName == null) {
    getEntityType();
    MetadataUtils.onJPAColumnMapping(this.entityType,this);
    fieldName=jpaColumnMapping.get(jpaColumnName);
  }
  return fieldName != null ? fieldName : jpaColumnName;
}","public String getFieldName(String jpaColumnName){
  String fieldName=jpaColumnMapping.get(jpaColumnName);
  if (fieldName == null) {
    getEntityType();
    MetadataUtils.onJPAColumnMapping(this.entityType,this);
    fieldName=jpaColumnMapping.get(jpaColumnName);
  }
  return fieldName;
}",0.9415584415584416
176220,"/** 
 * Tear down.
 * @throws Exception the exception
 */
@After public void tearDown() throws Exception {
  String deleteQuery=""String_Node_Str"";
  Query query=em.createQuery(deleteQuery);
  int updateCount=query.executeUpdate();
  em.close();
  emf.close();
}","/** 
 * Tear down.
 * @throws Exception the exception
 */
@After public void tearDown() throws Exception {
  String deleteQuery=""String_Node_Str"";
  Query query=em.createQuery(deleteQuery);
  int updateCount=query.executeUpdate();
  em.close();
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.9015544041450776
176221,"@After public void tearDown(){
  em.close();
  emf.close();
}","@After public void tearDown(){
  em.close();
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.6815642458100558
176222,"/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  emf.close();
}","/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.7865168539325843
176223,"/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  emf.close();
}","/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.7865168539325843
176224,"@After public void tearDown(){
  super.tearDown();
}","@After public void tearDown(){
  super.tearDown();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.6459627329192547
176225,"@After public void tearDown(){
  super.tearDown();
}","@After public void tearDown(){
  super.tearDown();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.6459627329192547
176226,"@After public void tearDown(){
  em.close();
  emf.close();
}","@After public void tearDown(){
  em.close();
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.6815642458100558
176227,"/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  emf.close();
}","/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  em.close();
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.7473309608540926
176228,"@After public void tearDown(){
  super.tearDown();
}","@After public void tearDown(){
  super.tearDown();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.6459627329192547
176229,"/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  for (  PersonBatchOracleNosql entity : allPersons) {
    em.remove(entity);
  }
  for (  AddressBatchOracleNosql entity : allAddresses) {
    em.remove(entity);
  }
  em.close();
  emf.close();
}","/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  for (  PersonBatchOracleNosql entity : allPersons) {
    em.remove(entity);
  }
  for (  AddressBatchOracleNosql entity : allAddresses) {
    em.remove(entity);
  }
  em.close();
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.9093799682034976
176230,"/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  for (  PersonBatchOracleNosqlEntity entity : results) {
    em.remove(entity);
  }
  em.close();
  emf.close();
}","/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  for (  PersonBatchOracleNosqlEntity entity : results) {
    em.remove(entity);
  }
  em.close();
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.8774193548387097
176231,"@After public void tearDown() throws Exception {
  emf.close();
}","@After public void tearDown() throws Exception {
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.6951871657754011
176232,"@After public void tearDown() throws Exception {
  emf.close();
}","@After public void tearDown() throws Exception {
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.6951871657754011
176233,"@After public void tearDown() throws Exception {
  emf.close();
}","@After public void tearDown() throws Exception {
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.6951871657754011
176234,"@After public void tearDown() throws Exception {
  emf.close();
}","@After public void tearDown() throws Exception {
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.6951871657754011
176235,"@After public void tearDown() throws Exception {
  emf.close();
}","@After public void tearDown() throws Exception {
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.6951871657754011
176236,"@After public void tearDown() throws Exception {
  emf.close();
}","@After public void tearDown() throws Exception {
  emf.close();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.6951871657754011
176237,"/** 
 * If parameterised metadata is not for intended persistence unit, assign it to null.
 * @param metadata entity metadata
 * @return metadata.
 */
private EntityMetadata belongsToPersistenceUnit(EntityMetadata metadata){
  PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String keyspace=puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE);
  if (metadata.getPersistenceUnit() != null && !metadata.getPersistenceUnit().equals(persistenceUnit) || (metadata.getSchema() != null && !metadata.getSchema().equals(keyspace))) {
    metadata=null;
  }
 else {
    applyMetadataChanges(metadata);
  }
  return metadata;
}","/** 
 * If parameterised metadata is not for intended persistence unit, assign it to null.
 * @param metadata entity metadata
 * @return metadata.
 */
private EntityMetadata belongsToPersistenceUnit(EntityMetadata metadata){
  PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String keyspace=(String)puProperties.get(PersistenceProperties.KUNDERA_KEYSPACE);
  keyspace=keyspace == null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE) : keyspace;
  if (metadata.getPersistenceUnit() != null && !metadata.getPersistenceUnit().equals(persistenceUnit) || (metadata.getSchema() != null && !metadata.getSchema().equals(keyspace))) {
    metadata=null;
  }
 else {
    applyMetadataChanges(metadata);
  }
  return metadata;
}",0.9012426422498364
176238,"private void applyMetadataChanges(EntityMetadata metadata){
  metadata.setPersistenceUnit(persistenceUnit);
  PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String keyspace=puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE);
  if (metadata.getSchema() == null) {
    metadata.setSchema(keyspace);
  }
  if (metadata.getTableName() == null) {
    metadata.setTableName(metadata.getEntityClazz().getSimpleName());
  }
}","private void applyMetadataChanges(EntityMetadata metadata){
  metadata.setPersistenceUnit(persistenceUnit);
  PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String keyspace=(String)puProperties.get(PersistenceProperties.KUNDERA_KEYSPACE);
  keyspace=keyspace == null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE) : keyspace;
  if (metadata.getSchema() == null) {
    metadata.setSchema(keyspace);
  }
  if (metadata.getTableName() == null) {
    metadata.setTableName(metadata.getEntityClazz().getSimpleName());
  }
}",0.8828193832599119
176239,"/** 
 * Populates collection field(s) into entity
 * @param entity
 * @param thriftColumnValue
 * @param attribute
 */
private void setCollectionValue(Object entity,Object thriftColumnValue,Attribute attribute){
  try {
    if (Collection.class.isAssignableFrom(((Field)attribute.getJavaMember()).getType())) {
      Collection outputCollection=null;
      ByteBuffer valueByteBuffer=ByteBuffer.wrap((byte[])thriftColumnValue);
      Class<?> genericClass=PropertyAccessorHelper.getGenericClass((Field)attribute.getJavaMember());
      Class<?> valueValidationClass=CassandraValidationClassMapper.getValidationClassInstance(genericClass,true);
      Object valueClassInstance=valueValidationClass.getDeclaredField(""String_Node_Str"").get(null);
      if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(List.class)) {
        ListType listType=ListType.getInstance((AbstractType)valueClassInstance);
        outputCollection=new ArrayList();
        outputCollection.addAll(listType.compose(valueByteBuffer));
      }
 else       if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(Set.class)) {
        SetType setType=SetType.getInstance((AbstractType)valueClassInstance);
        outputCollection=new HashSet();
        outputCollection.addAll(setType.compose(valueByteBuffer));
      }
      PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),outputCollection);
    }
 else     if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(Map.class)) {
      ByteBuffer valueByteBuffer=ByteBuffer.wrap((byte[])thriftColumnValue);
      List<Class<?>> mapGenericClasses=PropertyAccessorHelper.getGenericClasses((Field)attribute.getJavaMember());
      Class keyClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(0),true);
      Class valueClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(1),true);
      Object keyClassInstance=keyClass.getDeclaredField(""String_Node_Str"").get(null);
      Object valueClassInstance=valueClass.getDeclaredField(""String_Node_Str"").get(null);
      MapType mapType=MapType.getInstance((AbstractType)keyClassInstance,(AbstractType)valueClassInstance);
      Map outputMap=new HashMap();
      outputMap.putAll(mapType.compose(valueByteBuffer));
      PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),outputMap);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",attribute.getName(),e);
    throw new PersistenceException(e);
  }
}","/** 
 * Populates collection field(s) into entity
 * @param entity
 * @param thriftColumnValue
 * @param attribute
 */
private void setCollectionValue(Object entity,Object thriftColumnValue,Attribute attribute){
  try {
    if (Collection.class.isAssignableFrom(((Field)attribute.getJavaMember()).getType())) {
      Collection outputCollection=null;
      ByteBuffer valueByteBuffer=ByteBuffer.wrap((byte[])thriftColumnValue);
      Class<?> genericClass=PropertyAccessorHelper.getGenericClass((Field)attribute.getJavaMember());
      Class<?> valueValidationClass=CassandraValidationClassMapper.getValidationClassInstance(genericClass,true);
      Object valueClassInstance=valueValidationClass.getDeclaredField(""String_Node_Str"").get(null);
      if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(List.class)) {
        ListType listType=ListType.getInstance((AbstractType)valueClassInstance);
        outputCollection=new ArrayList();
        outputCollection.addAll(listType.compose(valueByteBuffer));
      }
 else       if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(Set.class)) {
        SetType setType=SetType.getInstance((AbstractType)valueClassInstance);
        outputCollection=new HashSet();
        outputCollection.addAll(setType.compose(valueByteBuffer));
      }
      PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),marshalCollection(valueValidationClass,outputCollection,genericClass));
    }
 else     if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(Map.class)) {
      ByteBuffer valueByteBuffer=ByteBuffer.wrap((byte[])thriftColumnValue);
      List<Class<?>> mapGenericClasses=PropertyAccessorHelper.getGenericClasses((Field)attribute.getJavaMember());
      Class keyClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(0),true);
      Class valueClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(1),true);
      Object keyClassInstance=keyClass.getDeclaredField(""String_Node_Str"").get(null);
      Object valueClassInstance=valueClass.getDeclaredField(""String_Node_Str"").get(null);
      MapType mapType=MapType.getInstance((AbstractType)keyClassInstance,(AbstractType)valueClassInstance);
      Map rawMap=new HashMap();
      rawMap.putAll(mapType.compose(valueByteBuffer));
      Map dataCollection=marshalMap(mapGenericClasses,keyClass,valueClass,rawMap);
      PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),dataCollection.isEmpty() ? rawMap : dataCollection);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",attribute.getName(),e);
    throw new PersistenceException(e);
  }
}",0.954100249663914
176240,"/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  String batchQuery=CQLTranslator.BATCH_QUERY;
  batchQuery=StringUtils.replace(batchQuery,CQLTranslator.STATEMENT,""String_Node_Str"");
  StringBuilder batchQueryBuilder=new StringBuilder(batchQuery);
  try {
    boolean isCql3Enabled=false;
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (isCql3Enabled(metadata)) {
          isCql3Enabled=true;
          List<RelationHolder> relationHolders=getRelationHolders(node);
          String query;
          if (node.isInState(RemovedState.class)) {
            query=onDeleteQuery(metadata,metaModel,id);
          }
 else {
            query=createInsertQuery(metadata,entity,conn,relationHolders,getTtlValues().get(metadata.getTableName()));
          }
          batchQueryBuilder.append(query);
        }
 else {
          if (node.isInState(RemovedState.class)) {
            delete(entity,id);
          }
 else {
            List<RelationHolder> relationHolders=getRelationHolders(node);
            Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
            mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
            recordsExecuted+=mutationMap.size();
            if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
              batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
            }
 else {
              batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
            }
            indexNode(node,metadata);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getConection();
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
        batchMutationMap=null;
      }
    }
    if (!nodes.isEmpty() && isCql3Enabled) {
      batchQueryBuilder.append(CQLTranslator.APPLY_BATCH);
      executeCQLQuery(batchQueryBuilder.toString(),isCql3Enabled);
      batchQueryBuilder=null;
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    if (pooledConnection != null) {
      releaseConnection(pooledConnection);
    }
  }
  return recordsExecuted;
}","/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  String batchQuery=CQLTranslator.BATCH_QUERY;
  batchQuery=StringUtils.replace(batchQuery,CQLTranslator.STATEMENT,""String_Node_Str"");
  StringBuilder batchQueryBuilder=new StringBuilder(batchQuery);
  try {
    boolean isCql3Enabled=false;
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (isCql3Enabled(metadata)) {
          isCql3Enabled=true;
          List<RelationHolder> relationHolders=getRelationHolders(node);
          String query;
          if (node.isInState(RemovedState.class)) {
            query=onDeleteQuery(metadata,metaModel,id);
          }
 else {
            query=createInsertQuery(metadata,entity,conn,relationHolders,getTtlValues().get(metadata.getTableName()));
          }
          batchQueryBuilder.append(query);
        }
 else {
          if (node.isInState(RemovedState.class)) {
            delete(entity,id);
          }
 else {
            List<RelationHolder> relationHolders=getRelationHolders(node);
            Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
            mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
            recordsExecuted+=mutationMap.size();
            if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
              batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
            }
 else {
              batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
            }
            indexNode(node,metadata);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getConection();
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
      }
    }
    if (!nodes.isEmpty() && isCql3Enabled) {
      batchQueryBuilder.append(CQLTranslator.APPLY_BATCH);
      executeCQLQuery(batchQueryBuilder.toString(),isCql3Enabled);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    if (pooledConnection != null) {
      releaseConnection(pooledConnection);
    }
  }
  return recordsExecuted;
}",0.9900796877541064
176241,"/** 
 * initiate client method initiates the client.
 * @return boolean value ie client started or not.
 */
protected boolean initiateClient(){
  String message=null;
  for (  String host : hosts) {
    if (host == null || !StringUtils.isNumeric(port) || port.isEmpty()) {
      logger.error(""String_Node_Str"");
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    try {
      mongo=new Mongo(host,Integer.parseInt(port));
      db=mongo.getDB(databaseName);
      return true;
    }
 catch (    UnknownHostException e) {
      message=e.getMessage();
      logger.error(""String_Node_Str"",e);
    }
  }
  throw new SchemaGenerationException(""String_Node_Str"" + message);
}","/** 
 * initiate client method initiates the client.
 * @return boolean value ie client started or not.
 */
protected boolean initiateClient(){
  String message=null;
  for (  String host : hosts) {
    if (host == null || !StringUtils.isNumeric(port) || port.isEmpty()) {
      logger.error(""String_Node_Str"");
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    try {
      mongo=new Mongo(host,Integer.parseInt(port));
      db=mongo.getDB(databaseName);
      db.authenticate(userName,password.toCharArray());
      return true;
    }
 catch (    UnknownHostException e) {
      message=e.getMessage();
      logger.error(""String_Node_Str"",e);
    }
  }
  throw new SchemaGenerationException(""String_Node_Str"" + message);
}",0.9610027855153204
176242,"@Override protected void onPersist(EntityMetadata metadata,Object entity,Object id,List<RelationHolder> rlHolders){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  if (isUpdate && metadata.isCounterColumnType()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  String insert_Query=null;
  if (isCql3Enabled(metadata)) {
    Cassandra.Client client=getRawClient(metadata.getPersistenceUnit(),metadata.getSchema());
    try {
      client.set_keyspace(metadata.getSchema());
      insert_Query=createInsertQuery(metadata,entity,client,rlHolders,getTtlValues().get(metadata.getTableName()));
      executeCQLQuery(insert_Query,true);
    }
 catch (    InvalidRequestException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    TException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    UnavailableException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    TimedOutException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    SchemaDisagreementException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
  }
 else {
    ThriftRow tf=null;
    try {
      String columnFamily=metadata.getTableName();
      tf=dataHandler.toThriftRow(entity,id,metadata,columnFamily,getTtlValues().get(columnFamily));
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      throw new KunderaException(e);
    }
    addRelationsToThriftRow(metadata,tf,rlHolders);
    Mutator mutator=clientFactory.getMutator(pool);
    if (metadata.isCounterColumnType()) {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"",tf.getId());
      }
      List<CounterColumn> thriftCounterColumns=tf.getCounterColumns();
      List<CounterSuperColumn> thriftCounterSuperColumns=tf.getCounterSuperColumns();
      if (thriftCounterColumns != null && !thriftCounterColumns.isEmpty()) {
        mutator.writeCounterColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Arrays.asList(tf.getCounterColumns().toArray(new CounterColumn[0])));
      }
      if (thriftCounterSuperColumns != null && !thriftCounterSuperColumns.isEmpty()) {
        for (        CounterSuperColumn sc : thriftCounterSuperColumns) {
          mutator.writeSubCounterColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Bytes.fromByteArray(sc.getName()),sc.getColumns());
        }
      }
    }
 else {
      List<Column> thriftColumns=tf.getColumns();
      List<SuperColumn> thriftSuperColumns=tf.getSuperColumns();
      if (thriftColumns != null && !thriftColumns.isEmpty()) {
        if (log.isInfoEnabled()) {
        }
        mutator.writeColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Arrays.asList(tf.getColumns().toArray(new Column[0])));
      }
      if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
        for (        SuperColumn sc : thriftSuperColumns) {
          if (log.isInfoEnabled()) {
            log.info(""String_Node_Str"",tf.getId());
          }
          mutator.writeSubColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Bytes.fromByteArray(sc.getName()),sc.getColumns());
        }
      }
    }
    mutator.execute(getConsistencyLevel());
    tf=null;
    if (isTtlPerRequest()) {
      getTtlValues().clear();
    }
  }
}","@Override protected void onPersist(EntityMetadata metadata,Object entity,Object id,List<RelationHolder> rlHolders){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  if (isUpdate && metadata.isCounterColumnType()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  String insert_Query=null;
  if (isCql3Enabled(metadata)) {
    Cassandra.Client client=getRawClient(metadata.getPersistenceUnit(),metadata.getSchema());
    try {
      cqlClient.persist(metadata,entity,client,rlHolders,getTtlValues().get(metadata.getTableName()));
    }
 catch (    InvalidRequestException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    TException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    UnavailableException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    TimedOutException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    SchemaDisagreementException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    UnsupportedEncodingException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
  }
 else {
    ThriftRow tf=null;
    try {
      String columnFamily=metadata.getTableName();
      tf=dataHandler.toThriftRow(entity,id,metadata,columnFamily,getTtlValues().get(columnFamily));
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      throw new KunderaException(e);
    }
    addRelationsToThriftRow(metadata,tf,rlHolders);
    Mutator mutator=clientFactory.getMutator(pool);
    if (metadata.isCounterColumnType()) {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"",tf.getId());
      }
      List<CounterColumn> thriftCounterColumns=tf.getCounterColumns();
      List<CounterSuperColumn> thriftCounterSuperColumns=tf.getCounterSuperColumns();
      if (thriftCounterColumns != null && !thriftCounterColumns.isEmpty()) {
        mutator.writeCounterColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Arrays.asList(tf.getCounterColumns().toArray(new CounterColumn[0])));
      }
      if (thriftCounterSuperColumns != null && !thriftCounterSuperColumns.isEmpty()) {
        for (        CounterSuperColumn sc : thriftCounterSuperColumns) {
          mutator.writeSubCounterColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Bytes.fromByteArray(sc.getName()),sc.getColumns());
        }
      }
    }
 else {
      List<Column> thriftColumns=tf.getColumns();
      List<SuperColumn> thriftSuperColumns=tf.getSuperColumns();
      if (thriftColumns != null && !thriftColumns.isEmpty()) {
        if (log.isInfoEnabled()) {
        }
        mutator.writeColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Arrays.asList(tf.getColumns().toArray(new Column[0])));
      }
      if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
        for (        SuperColumn sc : thriftSuperColumns) {
          if (log.isInfoEnabled()) {
            log.info(""String_Node_Str"",tf.getId());
          }
          mutator.writeSubColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Bytes.fromByteArray(sc.getName()),sc.getColumns());
        }
      }
    }
    mutator.execute(getConsistencyLevel());
    tf=null;
    if (isTtlPerRequest()) {
      getTtlValues().clear();
    }
  }
}",0.9625187406296852
176243,"/** 
 * Gets the entity manager factory.
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(){
  Map<String,Object> props=new HashMap<String,Object>();
  String persistenceUnit=""String_Node_Str"";
  props.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,schema);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(persistenceUnit);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(""String_Node_Str"",puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(persistenceUnit);
  clazzToPu.put(CassandraEntity.class.getName(),pus);
  clazzToPu.put(CassandraBatchEntity.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(CassandraEntity.class);
  EntityMetadata m1=new EntityMetadata(CassandraBatchEntity.class);
  TableProcessor processor=new TableProcessor(null);
  processor.process(CassandraEntity.class,m);
  processor.process(CassandraBatchEntity.class,m1);
  m.setPersistenceUnit(persistenceUnit);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(CassandraEntity.class,m);
  metaModel.addEntityMetadata(CassandraBatchEntity.class,m1);
  appMetadata.getMetamodelMap().put(persistenceUnit,metaModel);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  CoreMetadata coreMetadata=new CoreMetadata();
  coreMetadata.setLazyInitializerFactory(new CglibLazyInitializerFactory());
  KunderaMetadata.INSTANCE.setCoreMetadata(coreMetadata);
  EntityManagerFactoryImpl emf=new EntityManagerFactoryImpl(persistenceUnit,props);
  String[] persistenceUnits=new String[]{persistenceUnit};
  new ClientFactoryConfiguraton(null,persistenceUnits).configure();
  return emf;
}","/** 
 * Gets the entity manager factory.
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(){
  Map<String,Object> props=new HashMap<String,Object>();
  String persistenceUnit=""String_Node_Str"";
  props.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,schema);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(persistenceUnit);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(""String_Node_Str"",puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(persistenceUnit);
  clazzToPu.put(CassandraEntity.class.getName(),pus);
  clazzToPu.put(CassandraBatchEntity.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,ThriftClientFactory.class.getSimpleName(),null);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(CassandraEntity.class,metadataBuilder.buildEntityMetadata(CassandraEntity.class));
  metaModel.addEntityMetadata(CassandraBatchEntity.class,metadataBuilder.buildEntityMetadata(CassandraBatchEntity.class));
  appMetadata.getMetamodelMap().put(persistenceUnit,metaModel);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  CoreMetadata coreMetadata=new CoreMetadata();
  coreMetadata.setLazyInitializerFactory(new CglibLazyInitializerFactory());
  KunderaMetadata.INSTANCE.setCoreMetadata(coreMetadata);
  EntityManagerFactoryImpl emf=new EntityManagerFactoryImpl(persistenceUnit,props);
  String[] persistenceUnits=new String[]{persistenceUnit};
  new ClientFactoryConfiguraton(null,persistenceUnits).configure();
  return emf;
}",0.8611164767239714
176244,"/** 
 * Gets the entity manager factory.
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(){
  Map<String,Object> props=new HashMap<String,Object>();
  String persistenceUnit=""String_Node_Str"";
  props.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,""String_Node_Str"");
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(persistenceUnit);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(""String_Node_Str"",puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(persistenceUnit);
  clazzToPu.put(CassandraEntitySample.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(CassandraEntitySample.class);
  TableProcessor processor=new TableProcessor(null);
  processor.process(CassandraEntitySample.class,m);
  m.setPersistenceUnit(persistenceUnit);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(CassandraEntitySample.class,m);
  appMetadata.getMetamodelMap().put(persistenceUnit,metaModel);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  EntityManagerFactoryImpl emf=new EntityManagerFactoryImpl(persistenceUnit,props);
  String[] persistenceUnits=new String[]{persistenceUnit};
  new ClientFactoryConfiguraton(null,persistenceUnits).configure();
  CoreMetadata coreMetadata=new CoreMetadata();
  coreMetadata.setLazyInitializerFactory(new CglibLazyInitializerFactory());
  KunderaMetadata.INSTANCE.setCoreMetadata(coreMetadata);
  return emf;
}","/** 
 * Gets the entity manager factory.
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(){
  Map<String,Object> props=new HashMap<String,Object>();
  String persistenceUnit=""String_Node_Str"";
  props.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,""String_Node_Str"");
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(persistenceUnit);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(""String_Node_Str"",puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(persistenceUnit);
  clazzToPu.put(CassandraEntitySample.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,ThriftClientFactory.class.getSimpleName(),null);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(CassandraEntitySample.class,metadataBuilder.buildEntityMetadata(CassandraEntitySample.class));
  appMetadata.getMetamodelMap().put(persistenceUnit,metaModel);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  EntityManagerFactoryImpl emf=new EntityManagerFactoryImpl(persistenceUnit,props);
  String[] persistenceUnits=new String[]{persistenceUnit};
  new ClientFactoryConfiguraton(null,persistenceUnits).configure();
  CoreMetadata coreMetadata=new CoreMetadata();
  coreMetadata.setLazyInitializerFactory(new CglibLazyInitializerFactory());
  KunderaMetadata.INSTANCE.setCoreMetadata(coreMetadata);
  return emf;
}",0.8891656288916563
176245,"/** 
 * Gets the entity manager factory.
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(){
  Map<String,Object> props=new HashMap<String,Object>();
  String persistenceUnit=""String_Node_Str"";
  props.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,""String_Node_Str"");
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(persistenceUnit);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(""String_Node_Str"",puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(persistenceUnit);
  clazzToPu.put(CassandraEntitySample.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(CassandraEntitySample.class);
  TableProcessor processor=new TableProcessor(null);
  processor.process(CassandraEntitySample.class,m);
  m.setPersistenceUnit(persistenceUnit);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(CassandraEntitySample.class,m);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  appMetadata.getMetamodelMap().put(persistenceUnit,metaModel);
  new ClientFactoryConfiguraton(null,persistenceUnit).configure();
  CoreMetadata coreMetadata=new CoreMetadata();
  coreMetadata.setLazyInitializerFactory(new CglibLazyInitializerFactory());
  KunderaMetadata.INSTANCE.setCoreMetadata(coreMetadata);
  EntityManagerFactoryImpl emf=new EntityManagerFactoryImpl(persistenceUnit,props);
  return emf;
}","/** 
 * Gets the entity manager factory.
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(){
  Map<String,Object> props=new HashMap<String,Object>();
  String persistenceUnit=""String_Node_Str"";
  props.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,""String_Node_Str"");
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(persistenceUnit);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(""String_Node_Str"",puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(persistenceUnit);
  clazzToPu.put(CassandraEntitySample.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,ThriftClientFactory.class.getSimpleName(),null);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(CassandraEntitySample.class,metadataBuilder.buildEntityMetadata(CassandraEntitySample.class));
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  appMetadata.getMetamodelMap().put(persistenceUnit,metaModel);
  new ClientFactoryConfiguraton(null,persistenceUnit).configure();
  CoreMetadata coreMetadata=new CoreMetadata();
  coreMetadata.setLazyInitializerFactory(new CglibLazyInitializerFactory());
  KunderaMetadata.INSTANCE.setCoreMetadata(coreMetadata);
  EntityManagerFactoryImpl emf=new EntityManagerFactoryImpl(persistenceUnit,props);
  return emf;
}",0.8863346104725415
176246,"/** 
 * Gets the entity manager factory.
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(){
  Map<String,Object> props=new HashMap<String,Object>();
  String persistenceUnit=""String_Node_Str"";
  props.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,""String_Node_Str"");
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(persistenceUnit);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(""String_Node_Str"",puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(persistenceUnit);
  clazzToPu.put(CassandraEntitySample.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(CassandraEntitySample.class);
  TableProcessor processor=new TableProcessor(null);
  processor.process(CassandraEntitySample.class,m);
  m.setPersistenceUnit(persistenceUnit);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(CassandraEntitySample.class,m);
  metaModel.addEntityNameToClassMapping(""String_Node_Str"",CassandraEntitySample.class);
  appMetadata.getMetamodelMap().put(persistenceUnit,metaModel);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  CassandraPropertyReader reader=new CassandraPropertyReader(null);
  reader.read(persistenceUnit);
  String[] persistenceUnits=new String[]{persistenceUnit};
  new ClientFactoryConfiguraton(null,persistenceUnits).configure();
  CoreMetadata coreMetadata=new CoreMetadata();
  coreMetadata.setLazyInitializerFactory(new CglibLazyInitializerFactory());
  KunderaMetadata.INSTANCE.setCoreMetadata(coreMetadata);
  EntityManagerFactoryImpl emf=new EntityManagerFactoryImpl(persistenceUnit,props);
  return emf;
}","/** 
 * Gets the entity manager factory.
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(){
  Map<String,Object> props=new HashMap<String,Object>();
  String persistenceUnit=""String_Node_Str"";
  props.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,""String_Node_Str"");
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(persistenceUnit);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(""String_Node_Str"",puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(persistenceUnit);
  clazzToPu.put(CassandraEntitySample.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,ThriftClientFactory.class.getSimpleName(),null);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(CassandraEntitySample.class,metadataBuilder.buildEntityMetadata(CassandraEntitySample.class));
  metaModel.addEntityNameToClassMapping(""String_Node_Str"",CassandraEntitySample.class);
  appMetadata.getMetamodelMap().put(persistenceUnit,metaModel);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  CassandraPropertyReader reader=new CassandraPropertyReader(null);
  reader.read(persistenceUnit);
  String[] persistenceUnits=new String[]{persistenceUnit};
  new ClientFactoryConfiguraton(null,persistenceUnits).configure();
  CoreMetadata coreMetadata=new CoreMetadata();
  coreMetadata.setLazyInitializerFactory(new CglibLazyInitializerFactory());
  KunderaMetadata.INSTANCE.setCoreMetadata(coreMetadata);
  EntityManagerFactoryImpl emf=new EntityManagerFactoryImpl(persistenceUnit,props);
  return emf;
}",0.8971890643049673
176247,"/** 
 * Gets the entity manager factory.
 * @param useLucene
 * @param property
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(String property){
  ClientMetadata clientMetadata=new ClientMetadata();
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(Constants.PERSISTENCE_UNIT_NAME,pu);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,PelopsClientFactory.class.getName());
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,keyspace);
  props.put(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE,property);
  props.put(PersistenceProperties.KUNDERA_CLIENT_PROPERTY,KUNDERA_CASSANDRA_PROPERTIES);
  if (useLucene) {
    props.put(PersistenceProperties.KUNDERA_INDEX_HOME_DIR,HOME_IMPADMIN_LUCENE);
    clientMetadata.setLuceneIndexDir(HOME_IMPADMIN_LUCENE);
  }
 else {
    clientMetadata.setLuceneIndexDir(null);
  }
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(pu);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(pu,puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(pu);
  clazzToPu.put(Doctor.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(Doctor.class);
  TableProcessor processor=new TableProcessor(null);
  processor.process(Doctor.class,m);
  m.setPersistenceUnit(pu);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(Doctor.class,m);
  appMetadata.getMetamodelMap().put(pu,metaModel);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(pu).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(pu).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(pu).getMappedSuperClassTypes());
  try {
    configuration.configure();
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"");
  }
  return null;
}","/** 
 * Gets the entity manager factory.
 * @param useLucene
 * @param property
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(String property){
  ClientMetadata clientMetadata=new ClientMetadata();
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(Constants.PERSISTENCE_UNIT_NAME,pu);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,PelopsClientFactory.class.getName());
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,keyspace);
  props.put(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE,property);
  props.put(PersistenceProperties.KUNDERA_CLIENT_PROPERTY,KUNDERA_CASSANDRA_PROPERTIES);
  if (useLucene) {
    props.put(PersistenceProperties.KUNDERA_INDEX_HOME_DIR,HOME_IMPADMIN_LUCENE);
    clientMetadata.setLuceneIndexDir(HOME_IMPADMIN_LUCENE);
  }
 else {
    clientMetadata.setLuceneIndexDir(null);
  }
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(pu);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(pu,puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(pu);
  clazzToPu.put(Doctor.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  MetamodelImpl metaModel=new MetamodelImpl();
  MetadataBuilder metadataBuilder=new MetadataBuilder(pu,ThriftClientFactory.class.getSimpleName(),null);
  metaModel.addEntityMetadata(Doctor.class,metadataBuilder.buildEntityMetadata(Doctor.class));
  appMetadata.getMetamodelMap().put(pu,metaModel);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(pu).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(pu).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(pu).getMappedSuperClassTypes());
  try {
    configuration.configure();
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"");
  }
  return null;
}",0.914820085383208
176248,"/** 
 * Gets the entity manager factory.
 * @param useLucene
 * @param property
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(String property){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(Constants.PERSISTENCE_UNIT_NAME,pu);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,keyspace);
  props.put(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE,property);
  if (useLucene) {
    props.put(PersistenceProperties.KUNDERA_INDEX_HOME_DIR,""String_Node_Str"");
  }
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(pu);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(pu,puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(pu);
  clazzToPu.put(CassandraEntityPersonnelUniMToM.class.getName(),pus);
  clazzToPu.put(CassandraEntityHabitatUniMToM.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(CassandraEntityPersonnelUniMToM.class);
  EntityMetadata m1=new EntityMetadata(CassandraEntityHabitatUniMToM.class);
  TableProcessor processor=new TableProcessor(null);
  processor.process(CassandraEntityPersonnelUniMToM.class,m);
  processor.process(CassandraEntityHabitatUniMToM.class,m1);
  m.setPersistenceUnit(pu);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(CassandraEntityPersonnelUniMToM.class,m);
  metaModel.addEntityMetadata(CassandraEntityHabitatUniMToM.class,m1);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(pu).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(pu).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(pu).getMappedSuperClassTypes());
  appMetadata.getMetamodelMap().put(pu,metaModel);
  new ClientFactoryConfiguraton(null,pu).configure();
  new SchemaConfiguration(null,pu).configure();
  return null;
}","/** 
 * Gets the entity manager factory.
 * @param useLucene
 * @param property
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(String property){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(Constants.PERSISTENCE_UNIT_NAME,pu);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,keyspace);
  props.put(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE,property);
  if (useLucene) {
    props.put(PersistenceProperties.KUNDERA_INDEX_HOME_DIR,""String_Node_Str"");
  }
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(pu);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(pu,puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(pu);
  clazzToPu.put(CassandraEntityPersonnelUniMToM.class.getName(),pus);
  clazzToPu.put(CassandraEntityHabitatUniMToM.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(CassandraEntityPersonnelUniMToM.class);
  EntityMetadata m1=new EntityMetadata(CassandraEntityHabitatUniMToM.class);
  TableProcessor processor=new TableProcessor(null);
  processor.process(CassandraEntityPersonnelUniMToM.class,m);
  processor.process(CassandraEntityHabitatUniMToM.class,m1);
  m.setPersistenceUnit(pu);
  MetadataBuilder metadataBuilder=new MetadataBuilder(pu,ThriftClientFactory.class.getSimpleName(),null);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(CassandraEntityPersonnelUniMToM.class,metadataBuilder.buildEntityMetadata(CassandraEntityPersonnelUniMToM.class));
  metaModel.addEntityMetadata(CassandraEntityHabitatUniMToM.class,metadataBuilder.buildEntityMetadata(CassandraEntityHabitatUniMToM.class));
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(pu).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(pu).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(pu).getMappedSuperClassTypes());
  appMetadata.getMetamodelMap().put(pu,metaModel);
  new ClientFactoryConfiguraton(null,pu).configure();
  new SchemaConfiguration(null,pu).configure();
  return null;
}",0.9365345244742228
176249,"/** 
 * Gets the entity manager factory.
 * @param useLucene
 * @param property
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(String property){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(Constants.PERSISTENCE_UNIT_NAME,_persistenceUnit);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,PelopsClientFactory.class.getName());
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,_keyspace);
  props.put(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE,property);
  if (useLucene) {
    props.put(PersistenceProperties.KUNDERA_INDEX_HOME_DIR,""String_Node_Str"");
  }
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(_persistenceUnit);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(_persistenceUnit,puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(_persistenceUnit);
  clazzToPu.put(CassandraEntityPersonnelUniMToM.class.getName(),pus);
  clazzToPu.put(CassandraEntityHabitatUniMToM.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(CassandraEntityPersonnelUniMToM.class);
  EntityMetadata m1=new EntityMetadata(CassandraEntityHabitatUniMToM.class);
  TableProcessor processor=new TableProcessor(null);
  processor.process(CassandraEntityPersonnelUniMToM.class,m);
  processor.process(CassandraEntityHabitatUniMToM.class,m1);
  m.setPersistenceUnit(_persistenceUnit);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(CassandraEntityPersonnelUniMToM.class,m);
  metaModel.addEntityMetadata(CassandraEntityHabitatUniMToM.class,m1);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(_persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(_persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(_persistenceUnit).getMappedSuperClassTypes());
  appMetadata.getMetamodelMap().put(_persistenceUnit,metaModel);
  new ClientFactoryConfiguraton(null,_persistenceUnit).configure();
  configuration.configure();
  return null;
}","/** 
 * Gets the entity manager factory.
 * @param useLucene
 * @param property
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(String property){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(Constants.PERSISTENCE_UNIT_NAME,_persistenceUnit);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,ThriftClientFactory.class.getName());
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,_keyspace);
  props.put(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE,property);
  if (useLucene) {
    props.put(PersistenceProperties.KUNDERA_INDEX_HOME_DIR,""String_Node_Str"");
  }
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(_persistenceUnit);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(_persistenceUnit,puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(_persistenceUnit);
  clazzToPu.put(CassandraEntityPersonnelUniMToM.class.getName(),pus);
  clazzToPu.put(CassandraEntityHabitatUniMToM.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  MetadataBuilder metadataBuilder=new MetadataBuilder(_persistenceUnit,ThriftClientFactory.class.getSimpleName(),null);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(CassandraEntityPersonnelUniMToM.class,metadataBuilder.buildEntityMetadata(CassandraEntityPersonnelUniMToM.class));
  metaModel.addEntityMetadata(CassandraEntityHabitatUniMToM.class,metadataBuilder.buildEntityMetadata(CassandraEntityHabitatUniMToM.class));
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(_persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(_persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(_persistenceUnit).getMappedSuperClassTypes());
  appMetadata.getMetamodelMap().put(_persistenceUnit,metaModel);
  new ClientFactoryConfiguraton(null,_persistenceUnit).configure();
  configuration.configure();
  return null;
}",0.6558367963732528
176250,"private void processGeneratedValueAnnotation(Class<?> clazz,String persistenceUnit,EntityMetadata m,Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap){
  GeneratedValueProcessor processer=new GeneratedValueProcessor();
  String pu=getPersistenceUnitOfEntity(clazz);
  String clientFactoryName=KunderaMetadataManager.getPersistenceUnitMetadata(m.getPersistenceUnit()).getClient();
  if (pu != null && pu.equals(persistenceUnit) || clientFactoryName.equalsIgnoreCase(""String_Node_Str"")) {
    Field f=(Field)m.getIdAttribute().getJavaMember();
    if (f.isAnnotationPresent(GeneratedValue.class)) {
      processer.process(clazz,f,m,entityNameToKeyDiscriptorMap);
    }
  }
}","private void processGeneratedValueAnnotation(Class<?> clazz,String persistenceUnit,EntityMetadata m,Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap){
  GeneratedValueProcessor processer=new GeneratedValueProcessor();
  String pu=m.getPersistenceUnit();
  String clientFactoryName=KunderaMetadataManager.getPersistenceUnitMetadata(m.getPersistenceUnit()).getClient();
  if (pu != null && pu.equals(persistenceUnit) || clientFactoryName.equalsIgnoreCase(""String_Node_Str"")) {
    Field f=(Field)m.getIdAttribute().getJavaMember();
    if (f.isAnnotationPresent(GeneratedValue.class)) {
      processer.process(clazz,f,m,entityNameToKeyDiscriptorMap);
    }
  }
}",0.9873417721518988
176251,"/** 
 * If parameterised metadata is not for intended persistence unit, assign it to null.
 * @param metadata entity metadata
 * @return metadata.
 */
private EntityMetadata belongsToPersistenceUnit(EntityMetadata metadata){
  if ((metadata.getPersistenceUnit() == null && !(Constants.RDBMS_CLIENT_FACTORY.equalsIgnoreCase(client) || Constants.NEO4J_CLIENT_FACTORY.equalsIgnoreCase(client))) || metadata.getPersistenceUnit() != null && !metadata.getPersistenceUnit().equals(persistenceUnit)) {
    metadata=null;
  }
  return metadata;
}","/** 
 * If parameterised metadata is not for intended persistence unit, assign it to null.
 * @param metadata entity metadata
 * @return metadata.
 */
private EntityMetadata belongsToPersistenceUnit(EntityMetadata metadata){
  if (metadata.getPersistenceUnit() != null && !metadata.getPersistenceUnit().equals(persistenceUnit)) {
    metadata=null;
  }
 else {
    applyMetadataChanges(metadata);
  }
  return metadata;
}",0.6889352818371608
176252,"/** 
 * Instantiates a new metadata manager.
 */
public MetadataBuilder(String puName,String client,Map puProperties){
  this.persistenceUnit=puName;
  this.client=client;
  validator=new EntityValidatorImpl(puProperties);
  metadataProcessors=new ArrayList<MetadataProcessor>();
  metadataProcessors.add(new TableProcessor(puProperties));
  metadataProcessors.add(new CacheableAnnotationProcessor());
  metadataProcessors.add(new IndexProcessor());
  metadataProcessors.add(new EntityListenersProcessor());
}","/** 
 * Instantiates a new metadata manager.
 */
public MetadataBuilder(String puName,String client,Map puProperties){
  this.persistenceUnit=puName;
  this.client=client;
  this.puProperties=puProperties;
  validator=new EntityValidatorImpl(puProperties);
  metadataProcessors=new ArrayList<MetadataProcessor>();
  metadataProcessors.add(new TableProcessor(puProperties));
  metadataProcessors.add(new CacheableAnnotationProcessor());
  metadataProcessors.add(new IndexProcessor());
  metadataProcessors.add(new EntityListenersProcessor());
}",0.967680608365019
176253,"/** 
 * Process.
 * @param clazz the clazz
 * @param externalProperties
 * @return the entity metadata
 */
public EntityMetadata buildEntityMetadata(Class<?> clazz){
  EntityMetadata metadata=new EntityMetadata(clazz);
  validate(clazz);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + clazz);
  for (  MetadataProcessor processor : metadataProcessors) {
    checkForRDBMS(metadata);
    checkForNeo4J(metadata);
    processor.process(clazz,metadata);
    metadata=belongsToPersistenceUnit(metadata);
    if (metadata == null) {
      break;
    }
    if (MetadataUtils.isSchemaAttributeRequired(metadata.getPersistenceUnit()) && StringUtils.isBlank(metadata.getSchema())) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"" + metadata.getTableName() + ""String_Node_Str"");
      }
      throw new InvalidEntityDefinitionException(""String_Node_Str"" + metadata.getTableName() + ""String_Node_Str"");
    }
  }
  return metadata;
}","/** 
 * Process.
 * @param clazz the clazz
 * @param externalProperties
 * @return the entity metadata
 */
public EntityMetadata buildEntityMetadata(Class<?> clazz){
  EntityMetadata metadata=new EntityMetadata(clazz);
  validate(clazz);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + clazz);
  for (  MetadataProcessor processor : metadataProcessors) {
    setSchemaAndPU(clazz,metadata);
    processor.process(clazz,metadata);
    metadata=belongsToPersistenceUnit(metadata);
    if (metadata == null) {
      break;
    }
    if (MetadataUtils.isSchemaAttributeRequired(metadata.getPersistenceUnit()) && StringUtils.isBlank(metadata.getSchema())) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"" + metadata.getTableName() + ""String_Node_Str"");
      }
      throw new InvalidEntityDefinitionException(""String_Node_Str"" + metadata.getTableName() + ""String_Node_Str"");
    }
  }
  return metadata;
}",0.969376979936642
176254,"/** 
 * Sets the schema and persistence unit.
 * @param m the m
 * @param schemaStr the schema str
 * @param puProperties
 */
public static void setSchemaAndPersistenceUnit(EntityMetadata m,String schemaStr,Map puProperties){
  if (schemaStr.indexOf(Constants.SCHEMA_PERSISTENCE_UNIT_SEPARATOR) > 0) {
    String schemaName=null;
    if (puProperties != null) {
      schemaName=(String)puProperties.get(PersistenceProperties.KUNDERA_KEYSPACE);
    }
    if (schemaName == null) {
      schemaName=schemaStr.substring(0,schemaStr.indexOf(Constants.SCHEMA_PERSISTENCE_UNIT_SEPARATOR));
    }
    m.setSchema(schemaName);
    m.setPersistenceUnit(schemaStr.substring(schemaStr.indexOf(Constants.SCHEMA_PERSISTENCE_UNIT_SEPARATOR) + 1,schemaStr.length()));
  }
 else {
    m.setSchema(schemaStr);
  }
}","/** 
 * Sets the schema and persistence unit.
 * @param m the m
 * @param schemaStr the schema str
 * @param puProperties
 */
public static void setSchemaAndPersistenceUnit(EntityMetadata m,String schemaStr,Map puProperties){
  if (schemaStr.indexOf(Constants.SCHEMA_PERSISTENCE_UNIT_SEPARATOR) > 0) {
    String schemaName=null;
    if (puProperties != null) {
      schemaName=(String)puProperties.get(PersistenceProperties.KUNDERA_KEYSPACE);
    }
    if (schemaName == null) {
      schemaName=schemaStr.substring(0,schemaStr.indexOf(Constants.SCHEMA_PERSISTENCE_UNIT_SEPARATOR));
    }
    m.setSchema(schemaName);
    m.setPersistenceUnit(schemaStr.substring(schemaStr.indexOf(Constants.SCHEMA_PERSISTENCE_UNIT_SEPARATOR) + 1,schemaStr.length()));
  }
 else {
    m.setSchema(StringUtils.isBlank(schemaStr) ? null : schemaStr);
  }
}",0.9755799755799756
176255,"public final void process(final Class<?> clazz,EntityMetadata metadata){
  if (clazz != null) {
    metadata.setIndexName(clazz.getSimpleName());
  }
  Index idx=clazz.getAnnotation(Index.class);
  IndexCollection indexes=clazz.getAnnotation(IndexCollection.class);
  List<String> columnsNameToBeIndexed=new ArrayList<String>();
  Map<String,com.impetus.kundera.index.Index> indexedColumnsMap=new HashMap<String,com.impetus.kundera.index.Index>();
  if (null != indexes) {
    if (indexes.columns() != null && indexes.columns().length != 0) {
      metadata.setIndexable(true);
      for (      com.impetus.kundera.index.Index indexedColumn : indexes.columns()) {
        indexedColumnsMap.put(indexedColumn.name(),indexedColumn);
      }
    }
  }
 else   if (null != idx) {
    boolean isIndexable=idx.index();
    if (isIndexable) {
      metadata.setIndexable(isIndexable);
      String indexName=idx.name();
      if (indexName != null && !indexName.isEmpty()) {
        metadata.setIndexName(indexName);
      }
      if (idx.columns() != null && idx.columns().length != 0) {
        for (        String indexedColumn : idx.columns()) {
          columnsNameToBeIndexed.add(indexedColumn);
        }
      }
    }
  }
 else {
    log.debug(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ (indexedColumnsMap.isEmpty() ? ""String_Node_Str"" : indexedColumnsMap));
    return;
  }
  log.debug(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  EntityType entityType=(EntityType)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(metadata.getPersistenceUnit()).getManagedTypes().get(clazz);
  Set<Attribute> attributes=entityType.getAttributes();
  for (  Attribute attrib : attributes) {
    if (!attrib.isAssociation()) {
      String colName=attrib.getName();
      if (indexedColumnsMap != null && !indexedColumnsMap.isEmpty() && indexedColumnsMap.containsKey(colName)) {
        com.impetus.kundera.index.Index indexedColumn=indexedColumnsMap.get(colName);
        metadata.addIndexProperty(populatePropertyIndex(((AbstractAttribute)attrib).getJPAColumnName(),indexedColumn.type(),indexedColumn.max(),indexedColumn.min(),(Field)attrib.getJavaMember()));
      }
 else       if (columnsNameToBeIndexed != null && !columnsNameToBeIndexed.isEmpty() && columnsNameToBeIndexed.contains(colName)) {
        metadata.addIndexProperty(populatePropertyIndex(((AbstractAttribute)attrib).getJPAColumnName(),null,null,null,(Field)attrib.getJavaMember()));
      }
    }
  }
}","public final void process(final Class<?> clazz,EntityMetadata metadata){
  if (clazz != null) {
    metadata.setIndexName(clazz.getSimpleName());
  }
  Index idx=clazz.getAnnotation(Index.class);
  IndexCollection indexes=clazz.getAnnotation(IndexCollection.class);
  List<String> columnsNameToBeIndexed=new ArrayList<String>();
  Map<String,com.impetus.kundera.index.Index> indexedColumnsMap=new HashMap<String,com.impetus.kundera.index.Index>();
  if (null != indexes) {
    if (indexes.columns() != null && indexes.columns().length != 0) {
      metadata.setIndexable(true);
      for (      com.impetus.kundera.index.Index indexedColumn : indexes.columns()) {
        indexedColumnsMap.put(indexedColumn.name(),indexedColumn);
      }
    }
  }
 else   if (null != idx) {
    boolean isIndexable=idx.index();
    if (isIndexable) {
      metadata.setIndexable(isIndexable);
      String indexName=idx.name();
      if (indexName != null && !indexName.isEmpty()) {
        metadata.setIndexName(indexName);
      }
      if (idx.columns() != null && idx.columns().length != 0) {
        for (        String indexedColumn : idx.columns()) {
          columnsNameToBeIndexed.add(indexedColumn);
        }
      }
    }
  }
 else {
    log.debug(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ (indexedColumnsMap.isEmpty() ? ""String_Node_Str"" : indexedColumnsMap));
    return;
  }
  log.debug(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  EntityType entityType=(EntityType)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(metadata.getPersistenceUnit()).getManagedTypes().get(clazz);
  if (entityType == null) {
    System.out.println(""String_Node_Str"");
  }
  Set<Attribute> attributes=entityType.getAttributes();
  for (  Attribute attrib : attributes) {
    if (!attrib.isAssociation()) {
      String colName=attrib.getName();
      if (indexedColumnsMap != null && !indexedColumnsMap.isEmpty() && indexedColumnsMap.containsKey(colName)) {
        com.impetus.kundera.index.Index indexedColumn=indexedColumnsMap.get(colName);
        metadata.addIndexProperty(populatePropertyIndex(((AbstractAttribute)attrib).getJPAColumnName(),indexedColumn.type(),indexedColumn.max(),indexedColumn.min(),(Field)attrib.getJavaMember()));
      }
 else       if (columnsNameToBeIndexed != null && !columnsNameToBeIndexed.isEmpty() && columnsNameToBeIndexed.contains(colName)) {
        metadata.addIndexProperty(populatePropertyIndex(((AbstractAttribute)attrib).getJPAColumnName(),null,null,null,(Field)attrib.getJavaMember()));
      }
    }
  }
}",0.9852507374631267
176256,"/** 
 * Populate metadata.
 * @param < X > the generic type
 * @param < T > the generic type
 * @param metadata the metadata
 * @param clazz the clazz
 */
private <X extends Class,T extends Object>void populateMetadata(EntityMetadata metadata,Class<X> clazz,Map puProperties){
  Table table=clazz.getAnnotation(Table.class);
  metadata.setTableName(table.name());
  addNamedNativeQueryMetadata(clazz);
  String schemaStr=table.schema();
  MetadataUtils.setSchemaAndPersistenceUnit(metadata,schemaStr,puProperties);
  if (metadata.getPersistenceUnit() != null) {
    MetaModelBuilder<X,T> metaModelBuilder=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(metadata.getPersistenceUnit());
    metaModelBuilder.process(clazz);
    for (    Field f : clazz.getDeclaredFields()) {
      if (f != null && !Modifier.isStatic(f.getModifiers()) && !Modifier.isTransient(f.getModifiers()) && !f.isAnnotationPresent(Transient.class)) {
        metaModelBuilder.construct(clazz,f);
        onIdAttribute(metaModelBuilder,metadata,clazz,f);
        onFamilyType(metadata,clazz,f);
        onJPAColumnMapping(metaModelBuilder,metadata,f);
        addRelationIntoMetadata(clazz,f,metadata);
      }
    }
  }
}","/** 
 * Populate metadata.
 * @param < X > the generic type
 * @param < T > the generic type
 * @param metadata the metadata
 * @param clazz the clazz
 */
private <X extends Class,T extends Object>void populateMetadata(EntityMetadata metadata,Class<X> clazz,Map puProperties){
  if (metadata.getPersistenceUnit() != null) {
    MetaModelBuilder<X,T> metaModelBuilder=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(metadata.getPersistenceUnit());
    metaModelBuilder.process(clazz);
    for (    Field f : clazz.getDeclaredFields()) {
      if (f != null && !Modifier.isStatic(f.getModifiers()) && !Modifier.isTransient(f.getModifiers()) && !f.isAnnotationPresent(Transient.class)) {
        metaModelBuilder.construct(clazz,f);
        onIdAttribute(metaModelBuilder,metadata,clazz,f);
        onFamilyType(metadata,clazz,f);
        onJPAColumnMapping(metaModelBuilder,metadata,f);
        addRelationIntoMetadata(clazz,f,metadata);
      }
    }
  }
}",0.8914233576642335
176257,"/** 
 * Checks the validity of a class for Cassandra entity.
 * @param clazz validates this class
 * @return returns 'true' if valid
 */
@Override public final void validate(final Class<?> clazz){
  if (classes.contains(clazz)) {
    return;
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + clazz.getName());
  if (!clazz.isAnnotationPresent(Entity.class)) {
    throw new InvalidEntityDefinitionException(clazz.getName() + ""String_Node_Str"");
  }
  if (!clazz.isAnnotationPresent(Table.class)) {
    throw new InvalidEntityDefinitionException(clazz.getName() + ""String_Node_Str"");
  }
  try {
    clazz.getConstructor();
  }
 catch (  NoSuchMethodException nsme) {
    throw new InvalidEntityDefinitionException(clazz.getName() + ""String_Node_Str"");
  }
  List<Field> keys=new ArrayList<Field>();
  for (  Field field : clazz.getDeclaredFields()) {
    if (field.isAnnotationPresent(Id.class) && field.isAnnotationPresent(EmbeddedId.class)) {
      throw new InvalidEntityDefinitionException(clazz.getName() + ""String_Node_Str"");
    }
    if (field.isAnnotationPresent(Id.class)) {
      keys.add(field);
      if (field.isAnnotationPresent(GeneratedValue.class)) {
        validateGeneratedValueAnnotation(clazz,field);
      }
    }
 else     if (field.isAnnotationPresent(EmbeddedId.class)) {
      keys.add(field);
    }
  }
  if (keys.size() < 0) {
    throw new InvalidEntityDefinitionException(clazz.getName() + ""String_Node_Str"");
  }
 else   if (keys.size() > 1) {
    throw new InvalidEntityDefinitionException(clazz.getName() + ""String_Node_Str"");
  }
  classes.add(clazz);
}","/** 
 * Checks the validity of a class for Cassandra entity.
 * @param clazz validates this class
 * @return returns 'true' if valid
 */
@Override public final void validate(final Class<?> clazz){
  if (classes.contains(clazz)) {
    return;
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + clazz.getName());
  if (!clazz.isAnnotationPresent(Entity.class)) {
    throw new InvalidEntityDefinitionException(clazz.getName() + ""String_Node_Str"");
  }
  try {
    clazz.getConstructor();
  }
 catch (  NoSuchMethodException nsme) {
    throw new InvalidEntityDefinitionException(clazz.getName() + ""String_Node_Str"");
  }
  List<Field> keys=new ArrayList<Field>();
  for (  Field field : clazz.getDeclaredFields()) {
    if (field.isAnnotationPresent(Id.class) && field.isAnnotationPresent(EmbeddedId.class)) {
      throw new InvalidEntityDefinitionException(clazz.getName() + ""String_Node_Str"");
    }
    if (field.isAnnotationPresent(Id.class)) {
      keys.add(field);
      if (field.isAnnotationPresent(GeneratedValue.class)) {
        validateGeneratedValueAnnotation(clazz,field);
      }
    }
 else     if (field.isAnnotationPresent(EmbeddedId.class)) {
      keys.add(field);
    }
  }
  if (keys.size() < 0) {
    throw new InvalidEntityDefinitionException(clazz.getName() + ""String_Node_Str"");
  }
 else   if (keys.size() > 1) {
    throw new InvalidEntityDefinitionException(clazz.getName() + ""String_Node_Str"");
  }
  classes.add(clazz);
}",0.955019556714472
176258,"@Override public void configure(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  EntityValidator validator=new EntityValidatorImpl(externalPropertyMap);
  for (  String persistenceUnit : persistenceUnits) {
    log.info(""String_Node_Str"" + persistenceUnit);
    List<TableInfo> tableInfos=getSchemaInfo(persistenceUnit);
    Map<String,EntityMetadata> entityMetadataMap=getEntityMetadataCol(appMetadata,persistenceUnit);
    PersistenceUnitMetadata puMetadata=appMetadata.getPersistenceUnitMetadata(persistenceUnit);
    for (    EntityMetadata entityMetadata : entityMetadataMap.values()) {
      boolean found=false;
      Type type=entityMetadata.getType();
      Class idClassName=entityMetadata.getIdAttribute() != null ? entityMetadata.getIdAttribute().getJavaType() : null;
      String idName=entityMetadata.getIdAttribute() != null ? ((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName() : null;
      TableInfo tableInfo=new TableInfo(entityMetadata.getTableName(),type.name(),idClassName,idName);
      if (!tableInfos.isEmpty() && tableInfos.contains(tableInfo)) {
        found=true;
        int idx=tableInfos.indexOf(tableInfo);
        tableInfo=tableInfos.get(idx);
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
 else {
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
      List<Relation> relations=entityMetadata.getRelations();
      parseRelations(persistenceUnit,tableInfos,entityMetadata,tableInfo,relations);
      if (!found) {
        tableInfos.add(tableInfo);
      }
      addTableGenerator(appMetadata,persistenceUnit,tableInfos,entityMetadata,idClassName,idName);
      validator.validateEntity(entityMetadata.getEntityClazz());
    }
    puToSchemaMetadata.put(persistenceUnit,tableInfos);
  }
  for (  String persistenceUnit : persistenceUnits) {
    PersistenceUnitMetadata puMetadata=appMetadata.getPersistenceUnitMetadata(persistenceUnit);
    if (externalPropertyMap != null && externalPropertyMap.get(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE) != null || puMetadata.getProperty(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE) != null) {
      SchemaManager schemaManager=getSchemaManagerForPu(persistenceUnit);
      if (schemaManager != null) {
        schemaManager.exportSchema(persistenceUnit,puToSchemaMetadata.get(persistenceUnit));
      }
    }
  }
}","@Override public void configure(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  EntityValidator validator=new EntityValidatorImpl(externalPropertyMap);
  for (  String persistenceUnit : persistenceUnits) {
    log.info(""String_Node_Str"" + persistenceUnit);
    List<TableInfo> tableInfos=getSchemaInfo(persistenceUnit);
    Map<String,EntityMetadata> entityMetadataMap=getEntityMetadataCol(appMetadata,persistenceUnit);
    PersistenceUnitMetadata puMetadata=appMetadata.getPersistenceUnitMetadata(persistenceUnit);
    for (    EntityMetadata entityMetadata : entityMetadataMap.values()) {
      boolean found=false;
      Type type=entityMetadata.getType();
      Class idClassName=entityMetadata.getIdAttribute() != null ? entityMetadata.getIdAttribute().getJavaType() : null;
      String idName=entityMetadata.getIdAttribute() != null ? ((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName() : null;
      TableInfo tableInfo=new TableInfo(entityMetadata.getTableName(),type.name(),idClassName,idName);
      if (!tableInfos.isEmpty() && tableInfos.contains(tableInfo)) {
        found=true;
        int idx=tableInfos.indexOf(tableInfo);
        tableInfo=tableInfos.get(idx);
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
 else {
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
      List<Relation> relations=entityMetadata.getRelations();
      parseRelations(persistenceUnit,tableInfos,entityMetadata,tableInfo,relations);
      if (!found) {
        tableInfos.add(tableInfo);
      }
      addTableGenerator(appMetadata,persistenceUnit,tableInfos,entityMetadata,idClassName,idName);
      validator.validateEntity(entityMetadata.getEntityClazz());
    }
    puToSchemaMetadata.put(persistenceUnit,tableInfos);
  }
  for (  String persistenceUnit : persistenceUnits) {
    PersistenceUnitMetadata puMetadata=appMetadata.getPersistenceUnitMetadata(persistenceUnit);
    Map<String,Object> externalPuMap=externalPropertyMap;
    if (persistenceUnits.length > 1) {
      externalPuMap=(Map<String,Object>)externalPropertyMap.get(persistenceUnit);
    }
    if (externalPuMap != null && externalPuMap.get(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE) != null || puMetadata.getProperty(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE) != null) {
      SchemaManager schemaManager=getSchemaManagerForPu(persistenceUnit);
      if (schemaManager != null) {
        schemaManager.exportSchema(persistenceUnit,puToSchemaMetadata.get(persistenceUnit));
      }
    }
  }
}",0.95802369953806
176259,"/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  CassandraCli.cassandraSetUp();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  mongoProperties.put(""String_Node_Str"",""String_Node_Str"");
  cassandraProperties.put(""String_Node_Str"",""String_Node_Str"");
  puPropertiesMap.put(""String_Node_Str"",mongoProperties);
  puPropertiesMap.put(""String_Node_Str"",cassandraProperties);
  emf=Persistence.createEntityManagerFactory(_PU,puPropertiesMap);
  em=emf.createEntityManager();
}","/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  CassandraCli.cassandraSetUp();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  mongoProperties.put(""String_Node_Str"",""String_Node_Str"");
  cassandraProperties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(""String_Node_Str"",""String_Node_Str"");
  puPropertiesMap.put(""String_Node_Str"",mongoProperties);
  puPropertiesMap.put(""String_Node_Str"",cassandraProperties);
  puPropertiesMap.put(""String_Node_Str"",properties);
  puPropertiesMap.put(""String_Node_Str"",properties);
  emf=Persistence.createEntityManagerFactory(_PU,puPropertiesMap);
  em=emf.createEntityManager();
}",0.8661679135494597
176260,"/** 
 * The Constructor.
 * @param property the property
 * @param condition the condition
 * @param value the value
 */
public FilterClause(String property,String condition,Object value){
  super();
  this.property=property;
  this.condition=condition;
  this.value=KunderaQuery.getValue(value);
}","/** 
 * The Constructor.
 * @param property the property
 * @param condition the condition
 * @param value the value
 */
public FilterClause(String property,String condition,Object value){
  super();
  this.property=property;
  this.condition=condition.trim();
  this.value=KunderaQuery.getValue(value);
}",0.988391376451078
176261,"@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entity=metaModel.entity(m.getEntityClazz());
  FilterBuilder preIntraFilter=null;
  FilterBuilder preInterFilter=null;
  String interFilter=null;
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      FilterBuilder currentFilter=getFilter(clause,m,entity);
      if (interFilter != null) {
        if (interFilter.equalsIgnoreCase(""String_Node_Str"")) {
          preInterFilter=new AndFilterBuilder(preIntraFilter,currentFilter);
        }
 else         if (interFilter.equalsIgnoreCase(""String_Node_Str"")) {
          preInterFilter=new OrFilterBuilder(preIntraFilter,currentFilter);
        }
      }
      preIntraFilter=currentFilter;
    }
 else {
      String opr=o.toString();
      interFilter=opr;
    }
  }
  return ((ESClient)client).executeQuery(preInterFilter != null ? preInterFilter : preIntraFilter,m);
}","@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entity=metaModel.entity(m.getEntityClazz());
  FilterBuilder preIntraFilter=null;
  FilterBuilder preInterFilter=null;
  String interFilter=null;
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      FilterBuilder currentFilter=getFilter(clause,m,entity);
      if (interFilter != null) {
        if (interFilter.equalsIgnoreCase(""String_Node_Str"")) {
          preInterFilter=new AndFilterBuilder(preIntraFilter,currentFilter);
        }
 else         if (interFilter.equalsIgnoreCase(""String_Node_Str"")) {
          preInterFilter=new OrFilterBuilder(preIntraFilter,currentFilter);
        }
      }
      preIntraFilter=currentFilter;
    }
 else {
      String opr=o.toString();
      interFilter=opr.trim();
    }
  }
  return ((ESClient)client).executeQuery(preInterFilter != null ? preInterFilter : preIntraFilter,m);
}",0.9969445656918376
176262,"private String getLuceneQuery(KunderaQuery kunderaQuery){
  StringBuffer sb=new StringBuffer();
  if (kunderaQuery.getFilterClauseQueue().isEmpty()) {
    String idColumnName=((AbstractAttribute)kunderaQuery.getEntityMetadata().getIdAttribute()).getJPAColumnName();
    sb.append(idColumnName).append(""String_Node_Str"").append(""String_Node_Str"");
  }
 else {
    for (    Object object : kunderaQuery.getFilterClauseQueue()) {
      if (object instanceof FilterClause) {
        boolean appended=false;
        FilterClause filter=(FilterClause)object;
        sb.append(filter.getProperty());
        String appender=""String_Node_Str"";
        if (filter.getCondition().equals(""String_Node_Str"")) {
          sb.append(""String_Node_Str"");
        }
 else         if (filter.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          sb.append(""String_Node_Str"");
          appender=""String_Node_Str"";
        }
 else         if (filter.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          sb.append(appendRange(filter.getValue().toString(),false,true,String.class));
          appended=true;
        }
 else         if (filter.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          sb.append(appendRange(filter.getValue().toString(),true,true,String.class));
          appended=true;
        }
 else         if (filter.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          sb.append(appendRange(filter.getValue().toString(),false,false,String.class));
          appended=true;
        }
 else         if (filter.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          sb.append(appendRange(filter.getValue().toString(),true,false,String.class));
          appended=true;
        }
        if (!appended) {
          if (appender.equals(""String_Node_Str"") && filter.getValue() != null && filter.getValue().toString().contains(""String_Node_Str"")) {
            sb.append(""String_Node_Str"");
            sb.append(filter.getValue().toString());
            sb.append(""String_Node_Str"");
          }
 else {
            sb.append(filter.getValue());
            sb.append(appender);
          }
        }
      }
 else {
        sb.append(""String_Node_Str"" + object + ""String_Node_Str"");
      }
    }
  }
  return sb.toString();
}","private String getLuceneQuery(KunderaQuery kunderaQuery){
  StringBuffer sb=new StringBuffer();
  if (kunderaQuery.getFilterClauseQueue().isEmpty()) {
    String idColumnName=((AbstractAttribute)kunderaQuery.getEntityMetadata().getIdAttribute()).getJPAColumnName();
    sb.append(idColumnName).append(""String_Node_Str"").append(""String_Node_Str"");
  }
 else {
    for (    Object object : kunderaQuery.getFilterClauseQueue()) {
      if (object instanceof FilterClause) {
        boolean appended=false;
        FilterClause filter=(FilterClause)object;
        sb.append(filter.getProperty());
        String appender=""String_Node_Str"";
        String condition=filter.getCondition().trim();
        if (condition.equals(""String_Node_Str"")) {
          sb.append(""String_Node_Str"");
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          sb.append(""String_Node_Str"");
          appender=""String_Node_Str"";
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          sb.append(appendRange(filter.getValue().toString(),false,true,String.class));
          appended=true;
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          sb.append(appendRange(filter.getValue().toString(),true,true,String.class));
          appended=true;
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          sb.append(appendRange(filter.getValue().toString(),false,false,String.class));
          appended=true;
        }
 else         if (condition.equalsIgnoreCase(""String_Node_Str"")) {
          sb.append(appendRange(filter.getValue().toString(),true,false,String.class));
          appended=true;
        }
        if (!appended) {
          if (appender.equals(""String_Node_Str"") && filter.getValue() != null && filter.getValue().toString().contains(""String_Node_Str"")) {
            sb.append(""String_Node_Str"");
            sb.append(filter.getValue().toString());
            sb.append(""String_Node_Str"");
          }
 else {
            sb.append(filter.getValue());
            sb.append(appender);
          }
        }
      }
 else {
        sb.append(""String_Node_Str"" + object + ""String_Node_Str"");
      }
    }
  }
  return sb.toString();
}",0.7076243093922652
176263,"public <E>Set<E> executeQuery(OracleNoSQLQueryInterpreter interpreter,Class<?> entityClass){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String idColumnName=((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName();
  String secIndexName=getIndexTableName(entityMetadata);
  Set<Object> results=new HashSet<Object>();
  Set<Object> foundKeys=new HashSet<Object>();
  String interClauseOperator=null;
  Queue filterClauseQueue=interpreter.getClauseQueue();
  for (  Object clause : filterClauseQueue) {
    if (clause instanceof FilterClause) {
      foundKeys=new HashSet<Object>();
      String columnName=((FilterClause)clause).getProperty();
      String condition=((FilterClause)clause).getCondition();
      Object value=((FilterClause)clause).getValue();
      if (columnName.equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()) && condition.equals(""String_Node_Str"")) {
        Object idValue=PropertyAccessorHelper.fromSourceToTargetClass(entityMetadata.getIdAttribute().getJavaType(),String.class,value);
        foundKeys.add(idValue);
      }
 else {
        List<String> majorComponents=new ArrayList<String>();
        majorComponents.add(secIndexName);
        majorComponents.add(columnName);
        KeyRange range=null;
        Iterator<KeyValueVersion> iterator=null;
        if (condition.equals(""String_Node_Str"")) {
          majorComponents.add(PropertyAccessorHelper.getString(value));
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.multiGetIterator(Direction.FORWARD,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(value.toString(),false,null,true);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(null,true,value.toString(),false);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(value.toString(),true,null,true);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(null,true,value.toString(),true);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
        while (iterator.hasNext()) {
          KeyValueVersion keyValueVersion=iterator.next();
          String minorKey=keyValueVersion.getKey().getMinorPath().get(0);
          PropertyAccessor accessor=PropertyAccessorFactory.getPropertyAccessor(entityMetadata.getIdAttribute().getBindableJavaType());
          byte[] idByteArr=keyValueVersion.getValue().getValue();
          Object keyObj=accessor.fromBytes(entityMetadata.getIdAttribute().getBindableJavaType(),idByteArr);
          foundKeys.add(keyObj);
        }
      }
    }
 else     if (clause instanceof String) {
      interClauseOperator=clause.toString();
    }
    addToResults(results,foundKeys,interClauseOperator);
  }
  return (Set<E>)results;
}","public <E>Set<E> executeQuery(OracleNoSQLQueryInterpreter interpreter,Class<?> entityClass){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String idColumnName=((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName();
  String secIndexName=getIndexTableName(entityMetadata);
  Set<Object> results=new HashSet<Object>();
  Set<Object> foundKeys=new HashSet<Object>();
  String interClauseOperator=null;
  Queue filterClauseQueue=interpreter.getClauseQueue();
  for (  Object clause : filterClauseQueue) {
    if (clause instanceof FilterClause) {
      foundKeys=new HashSet<Object>();
      String columnName=((FilterClause)clause).getProperty();
      String condition=((FilterClause)clause).getCondition();
      Object value=((FilterClause)clause).getValue();
      if (columnName.equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()) && condition.equals(""String_Node_Str"")) {
        Object idValue=PropertyAccessorHelper.fromSourceToTargetClass(entityMetadata.getIdAttribute().getJavaType(),String.class,value);
        foundKeys.add(idValue);
      }
 else {
        List<String> majorComponents=new ArrayList<String>();
        majorComponents.add(secIndexName);
        majorComponents.add(columnName);
        KeyRange range=null;
        Iterator<KeyValueVersion> iterator=null;
        if (condition.equals(""String_Node_Str"")) {
          majorComponents.add(PropertyAccessorHelper.getString(value));
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.multiGetIterator(Direction.FORWARD,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(value.toString(),false,null,true);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(null,true,value.toString(),false);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(value.toString(),true,null,true);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(null,true,value.toString(),true);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
        while (iterator.hasNext()) {
          KeyValueVersion keyValueVersion=iterator.next();
          String minorKey=keyValueVersion.getKey().getMinorPath().get(0);
          PropertyAccessor accessor=PropertyAccessorFactory.getPropertyAccessor(entityMetadata.getIdAttribute().getBindableJavaType());
          byte[] idByteArr=keyValueVersion.getValue().getValue();
          Object keyObj=accessor.fromBytes(entityMetadata.getIdAttribute().getBindableJavaType(),idByteArr);
          foundKeys.add(keyObj);
        }
      }
    }
 else     if (clause instanceof String) {
      interClauseOperator=clause.toString().trim();
    }
    addToResults(results,foundKeys,interClauseOperator);
  }
  return (Set<E>)results;
}",0.9990029910269193
176264,"private OracleNoSQLQueryInterpreter translateQuery(Queue clauseQueue,EntityMetadata entityMetadata){
  OracleNoSQLQueryInterpreter interpreter=new OracleNoSQLQueryInterpreter(getColumns(getKunderaQuery().getResult(),entityMetadata));
  interpreter.setClauseQueue(clauseQueue);
  String operatorWithIdClause=null;
  boolean idClauseFound=false;
  for (  Object clause : clauseQueue) {
    if (clause.getClass().isAssignableFrom(FilterClause.class) && !idClauseFound) {
      String columnName=((FilterClause)clause).getProperty();
      SingularAttribute idAttribute=entityMetadata.getIdAttribute();
      if (columnName.equals(((AbstractAttribute)idAttribute).getJPAColumnName())) {
        interpreter.setFindById(true);
        Object keyObj=PropertyAccessorHelper.fromSourceToTargetClass(((AbstractAttribute)idAttribute).getBindableJavaType(),String.class,((FilterClause)clause).getValue());
        interpreter.setRowKey(keyObj);
        idClauseFound=true;
      }
    }
 else     if (clause instanceof String) {
      operatorWithIdClause=clause.toString();
    }
    if (idClauseFound && operatorWithIdClause != null) {
      break;
    }
  }
  interpreter.setOperatorWithRowKey(operatorWithIdClause);
  return interpreter;
}","private OracleNoSQLQueryInterpreter translateQuery(Queue clauseQueue,EntityMetadata entityMetadata){
  OracleNoSQLQueryInterpreter interpreter=new OracleNoSQLQueryInterpreter(getColumns(getKunderaQuery().getResult(),entityMetadata));
  interpreter.setClauseQueue(clauseQueue);
  String operatorWithIdClause=null;
  boolean idClauseFound=false;
  for (  Object clause : clauseQueue) {
    if (clause.getClass().isAssignableFrom(FilterClause.class) && !idClauseFound) {
      String columnName=((FilterClause)clause).getProperty();
      SingularAttribute idAttribute=entityMetadata.getIdAttribute();
      if (columnName.equals(((AbstractAttribute)idAttribute).getJPAColumnName())) {
        interpreter.setFindById(true);
        Object keyObj=PropertyAccessorHelper.fromSourceToTargetClass(((AbstractAttribute)idAttribute).getBindableJavaType(),String.class,((FilterClause)clause).getValue());
        interpreter.setRowKey(keyObj);
        idClauseFound=true;
      }
    }
 else     if (clause instanceof String) {
      operatorWithIdClause=clause.toString().trim();
    }
    if (idClauseFound && operatorWithIdClause != null) {
      break;
    }
  }
  interpreter.setOperatorWithRowKey(operatorWithIdClause);
  return interpreter;
}",0.9971671388101984
176265,"private RedisQueryInterpreter onTranslation(Queue clauseQueue,EntityMetadata entityMetadata){
  RedisQueryInterpreter interpreter=new RedisQueryInterpreter(getColumns(getKunderaQuery().getResult(),entityMetadata));
  for (  Object clause : clauseQueue) {
    if (clause.getClass().isAssignableFrom(FilterClause.class)) {
      Object value=((FilterClause)clause).getValue();
      String condition=((FilterClause)clause).getCondition();
      String columnName=((FilterClause)clause).getProperty();
      if (columnName.equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName())) {
        interpreter.setById(true);
      }
      if (condition.equals(""String_Node_Str"")) {
        interpreter.setFieldName(columnName);
        interpreter.setValue(value);
      }
 else       if (condition.equals(""String_Node_Str"")) {
        validateClause(interpreter,condition,columnName);
        interpreter.setMin(columnName,value);
        if (interpreter.getMax() == null) {
          interpreter.setMax(columnName,-1D);
        }
      }
 else       if (condition.equals(""String_Node_Str"")) {
        validateClause(interpreter,condition,columnName);
        interpreter.setMax(columnName,value);
        if (interpreter.getMin() == null) {
          interpreter.setMin(columnName,0D);
        }
      }
 else       if (interpreter.getClause() != null) {
        throw new QueryHandlerException(""String_Node_Str"" + condition + ""String_Node_Str"");
      }
 else {
        throw new QueryHandlerException(""String_Node_Str"" + condition + ""String_Node_Str"");
      }
    }
 else {
      String opr=clause.toString();
      if (interpreter.getClause() == null) {
        if (opr.equalsIgnoreCase(""String_Node_Str"")) {
          interpreter.setClause(Clause.INTERSECT);
        }
 else         if (opr.equalsIgnoreCase(""String_Node_Str"")) {
          interpreter.setClause(Clause.UNION);
        }
 else {
          throw new QueryHandlerException(""String_Node_Str"" + opr + ""String_Node_Str"");
        }
      }
 else       if (RedisQueryInterpreter.getMappedClause(opr) == null) {
        throw new QueryHandlerException(""String_Node_Str"" + opr + ""String_Node_Str"");
      }
 else       if (interpreter.getClause() != null && !interpreter.getClause().equals(RedisQueryInterpreter.getMappedClause(opr))) {
        throw new QueryHandlerException(""String_Node_Str"");
      }
    }
  }
  return interpreter;
}","private RedisQueryInterpreter onTranslation(Queue clauseQueue,EntityMetadata entityMetadata){
  RedisQueryInterpreter interpreter=new RedisQueryInterpreter(getColumns(getKunderaQuery().getResult(),entityMetadata));
  for (  Object clause : clauseQueue) {
    if (clause.getClass().isAssignableFrom(FilterClause.class)) {
      Object value=((FilterClause)clause).getValue();
      String condition=((FilterClause)clause).getCondition();
      String columnName=((FilterClause)clause).getProperty();
      if (columnName.equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName())) {
        interpreter.setById(true);
      }
      if (condition.equals(""String_Node_Str"")) {
        interpreter.setFieldName(columnName);
        interpreter.setValue(value);
      }
 else       if (condition.equals(""String_Node_Str"")) {
        validateClause(interpreter,condition,columnName);
        interpreter.setMin(columnName,value);
        if (interpreter.getMax() == null) {
          interpreter.setMax(columnName,-1D);
        }
      }
 else       if (condition.equals(""String_Node_Str"")) {
        validateClause(interpreter,condition,columnName);
        interpreter.setMax(columnName,value);
        if (interpreter.getMin() == null) {
          interpreter.setMin(columnName,0D);
        }
      }
 else       if (interpreter.getClause() != null) {
        throw new QueryHandlerException(""String_Node_Str"" + condition + ""String_Node_Str"");
      }
 else {
        throw new QueryHandlerException(""String_Node_Str"" + condition + ""String_Node_Str"");
      }
    }
 else {
      String opr=clause.toString().trim();
      if (interpreter.getClause() == null) {
        if (opr.equalsIgnoreCase(""String_Node_Str"")) {
          interpreter.setClause(Clause.INTERSECT);
        }
 else         if (opr.equalsIgnoreCase(""String_Node_Str"")) {
          interpreter.setClause(Clause.UNION);
        }
 else {
          throw new QueryHandlerException(""String_Node_Str"" + opr + ""String_Node_Str"");
        }
      }
 else       if (RedisQueryInterpreter.getMappedClause(opr) == null) {
        throw new QueryHandlerException(""String_Node_Str"" + opr + ""String_Node_Str"");
      }
 else       if (interpreter.getClause() != null && !interpreter.getClause().equals(RedisQueryInterpreter.getMappedClause(opr))) {
        throw new QueryHandlerException(""String_Node_Str"");
      }
    }
  }
  return interpreter;
}",0.9985534201281256
176266,"/** 
 * update method update schema and table for the list of tableInfos
 * @param tableInfos list of TableInfos.
 */
protected void update(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    DBObject options=setCollectionProperties(tableInfo);
    getDBName();
    DB db=mongo.getDB(databaseName);
    DBCollection collection=null;
    if (!db.collectionExists(tableInfo.getTableName())) {
      collection=db.createCollection(tableInfo.getTableName(),options);
    }
    collection=collection != null ? collection : db.getCollection(tableInfo.getTableName());
    boolean isCappedCollection=isCappedCollection(tableInfo);
    if (!isCappedCollection) {
      createIndexes(tableInfo,collection);
    }
  }
}","/** 
 * update method update schema and table for the list of tableInfos
 * @param tableInfos list of TableInfos.
 */
protected void update(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    DBObject options=setCollectionProperties(tableInfo);
    DB db=mongo.getDB(databaseName);
    DBCollection collection=null;
    if (!db.collectionExists(tableInfo.getTableName())) {
      collection=db.createCollection(tableInfo.getTableName(),options);
    }
    collection=collection != null ? collection : db.getCollection(tableInfo.getTableName());
    boolean isCappedCollection=isCappedCollection(tableInfo);
    if (!isCappedCollection) {
      createIndexes(tableInfo,collection);
    }
  }
}",0.7102546455609084
176267,"/** 
 * create method creates schema and table for the list of tableInfos.
 * @param tableInfos list of TableInfos.
 */
protected void create(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    DBObject options=setCollectionProperties(tableInfo);
    getDBName();
    DB db=mongo.getDB(databaseName);
    if (db.collectionExists(tableInfo.getTableName())) {
      db.getCollection(tableInfo.getTableName()).drop();
    }
    DBCollection collection=db.createCollection(tableInfo.getTableName(),options);
    boolean isCappedCollection=isCappedCollection(tableInfo);
    if (!isCappedCollection) {
      createIndexes(tableInfo,collection);
    }
  }
}","/** 
 * create method creates schema and table for the list of tableInfos.
 * @param tableInfos list of TableInfos.
 */
protected void create(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    DBObject options=setCollectionProperties(tableInfo);
    DB db=mongo.getDB(databaseName);
    if (db.collectionExists(tableInfo.getTableName())) {
      db.getCollection(tableInfo.getTableName()).drop();
    }
    DBCollection collection=db.createCollection(tableInfo.getTableName(),options);
    boolean isCappedCollection=isCappedCollection(tableInfo);
    if (!isCappedCollection) {
      createIndexes(tableInfo,collection);
    }
  }
}",0.4712041884816754
176268,"@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",getJPAQuery());
  }
  List<Object> result=new ArrayList<Object>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  externalProperties=((CassandraClientBase)client).getExternalProperties();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  if (!appMetadata.isNative(getJPAQuery()) && ((CassandraClientBase)client).isCql3Enabled(m)) {
    result=((CassandraClientBase)client).executeQuery(onQueryOverCQL3(m,client,metaModel,null),m.getEntityClazz(),null);
  }
 else {
    if (appMetadata.isNative(getJPAQuery())) {
      result=((CassandraClientBase)client).executeQuery(appMetadata.getQuery(getJPAQuery()),m.getEntityClazz(),null);
    }
 else {
      if (MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata())) {
        boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m,MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()));
        Map<Boolean,List<IndexClause>> ixClause=prepareIndexClause(m,useInvertedIndex);
        if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
          result=(List)((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
        }
 else {
          boolean isRowKeyQuery=ixClause.keySet().iterator().next();
          if (!isRowKeyQuery) {
            result=((CassandraClientBase)client).find(ixClause.get(isRowKeyQuery),m,false,null,isSingleResult ? 1 : this.maxResult,getColumnList(m,getKunderaQuery().getResult(),null));
          }
 else {
            result=((CassandraEntityReader)getReader()).handleFindByRange(m,client,result,ixClause,isRowKeyQuery,getColumnList(m,getKunderaQuery().getResult(),null),isSingleResult ? 1 : this.maxResult);
          }
        }
      }
 else {
        result=populateUsingLucene(m,client,result,null);
      }
    }
  }
  return result;
}","@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",getJPAQuery());
  }
  List<Object> result=new ArrayList<Object>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  externalProperties=((CassandraClientBase)client).getExternalProperties();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  String query=appMetadata.getQuery(getJPAQuery());
  boolean isNative=kunderaQuery.isNative();
  if (!isNative && ((CassandraClientBase)client).isCql3Enabled(m)) {
    result=((CassandraClientBase)client).executeQuery(onQueryOverCQL3(m,client,metaModel,null),m.getEntityClazz(),null);
  }
 else {
    if (isNative) {
      result=((CassandraClientBase)client).executeQuery(query != null ? query : getJPAQuery(),m.getEntityClazz(),null);
    }
 else {
      if (MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata())) {
        boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m,MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()));
        Map<Boolean,List<IndexClause>> ixClause=prepareIndexClause(m,useInvertedIndex);
        if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
          result=(List)((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
        }
 else {
          boolean isRowKeyQuery=ixClause.keySet().iterator().next();
          if (!isRowKeyQuery) {
            result=((CassandraClientBase)client).find(ixClause.get(isRowKeyQuery),m,false,null,isSingleResult ? 1 : this.maxResult,getColumnList(m,getKunderaQuery().getResult(),null));
          }
 else {
            result=((CassandraEntityReader)getReader()).handleFindByRange(m,client,result,ixClause,isRowKeyQuery,getColumnList(m,getKunderaQuery().getResult(),null),isSingleResult ? 1 : this.maxResult);
          }
        }
      }
 else {
        result=populateUsingLucene(m,client,result,null);
      }
    }
  }
  return result;
}",0.9317858834675508
176269,"/** 
 * On executeUpdate.
 * @return zero
 */
@Override protected int onExecuteUpdate(){
  EntityMetadata m=getEntityMetadata();
  if (KunderaMetadata.INSTANCE.getApplicationMetadata().isNative(getJPAQuery())) {
    ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeQuery(KunderaMetadata.INSTANCE.getApplicationMetadata().getQuery(getJPAQuery()),m.getEntityClazz(),null);
  }
 else   if (kunderaQuery.isDeleteUpdate()) {
    if (!isQueryConvertibleToCQL(kunderaQuery)) {
      List result=getResultList();
      return result != null ? result.size() : 0;
    }
 else {
      String query=null;
      if (kunderaQuery.isUpdateClause()) {
        query=createUpdateQuery(kunderaQuery);
      }
 else {
        query=createDeleteQuery(kunderaQuery);
      }
      return ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeUpdateDeleteQuery(query);
    }
  }
  return 0;
}","/** 
 * On executeUpdate.
 * @return zero
 */
@Override protected int onExecuteUpdate(){
  EntityMetadata m=getEntityMetadata();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  String query=appMetadata.getQuery(getJPAQuery());
  boolean isNative=kunderaQuery.isNative();
  if (isNative) {
    ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeQuery(query != null ? query : getJPAQuery(),m.getEntityClazz(),null);
  }
 else   if (kunderaQuery.isDeleteUpdate()) {
    if (!isQueryConvertibleToCQL(kunderaQuery)) {
      List result=getResultList();
      return result != null ? result.size() : 0;
    }
 else {
      query=null;
      if (kunderaQuery.isUpdateClause()) {
        query=createUpdateQuery(kunderaQuery);
      }
 else {
        query=createDeleteQuery(kunderaQuery);
      }
      return ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeUpdateDeleteQuery(query);
    }
  }
  return 0;
}",0.8752008569898232
176270,"@SuppressWarnings(""String_Node_Str"") @Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<EnhanceEntity> ls=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  if (appMetadata.isNative(getJPAQuery())) {
    ls=(List<EnhanceEntity>)((CassandraClientBase)client).executeQuery(appMetadata.getQuery(getJPAQuery()),m.getEntityClazz(),null);
  }
 else   if (!appMetadata.isNative(getJPAQuery()) && ((CassandraClientBase)client).isCql3Enabled(m)) {
    ls=((CassandraClientBase)client).executeQuery(onQueryOverCQL3(m,client,metaModel,m.getRelationNames()),m.getEntityClazz(),m.getRelationNames());
  }
 else {
    boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m,MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()));
    Map<Boolean,List<IndexClause>> ixClause=MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()) ? prepareIndexClause(m,useInvertedIndex) : null;
    if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
      ls=((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
    }
 else {
      ((CassandraEntityReader)getReader()).setConditions(ixClause);
      ls=reader.populateRelation(m,client,isSingleResult ? 1 : this.maxResult);
    }
  }
  return setRelationEntities(ls,client,m);
}","@SuppressWarnings(""String_Node_Str"") @Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<EnhanceEntity> ls=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  String query=appMetadata.getQuery(getJPAQuery());
  boolean isNative=kunderaQuery.isNative();
  if (isNative) {
    ls=(List<EnhanceEntity>)((CassandraClientBase)client).executeQuery(query != null ? query : getJPAQuery(),m.getEntityClazz(),null);
  }
 else   if (!isNative && ((CassandraClientBase)client).isCql3Enabled(m)) {
    ls=((CassandraClientBase)client).executeQuery(onQueryOverCQL3(m,client,metaModel,m.getRelationNames()),m.getEntityClazz(),m.getRelationNames());
  }
 else {
    boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m,MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()));
    Map<Boolean,List<IndexClause>> ixClause=MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()) ? prepareIndexClause(m,useInvertedIndex) : null;
    if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
      ls=((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
    }
 else {
      ((CassandraEntityReader)getReader()).setConditions(ixClause);
      ls=reader.populateRelation(m,client,isSingleResult ? 1 : this.maxResult);
    }
  }
  return setRelationEntities(ls,client,m);
}",0.9386701097482246
176271,"/** 
 * Method parse provided JPQL query into: 1. CQL3 query, in case cql3 is enabled or is a native query. 2. list of index clause, if cql2 is enabled. Then executes query for given min & max values for scrolling over results.
 * @param m entity metadata
 * @param client client
 * @return list of database values wrapped into entities.
 * @throws Exception throws exception, in case of run time error.
 */
private List<E> populateEntities(EntityMetadata m,Client client) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",((QueryImpl)query).getJPAQuery());
  }
  List<E> result=new ArrayList<E>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  externalProperties=((CassandraClientBase)client).getExternalProperties();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  if (!appMetadata.isNative(((QueryImpl)query).getJPAQuery()) && ((CassandraClientBase)client).isCql3Enabled(m)) {
    String parsedQuery=query.onQueryOverCQL3(m,client,metaModel,null);
    parsedQuery=appendWhereClauseWithScroll(parsedQuery);
    results=parsedQuery != null ? ((CassandraClientBase)client).executeQuery(parsedQuery,m.getEntityClazz(),m.getRelationNames()) : null;
  }
 else {
    if (appMetadata.isNative(((QueryImpl)query).getJPAQuery())) {
      final String nativeQuery=appendWhereClauseWithScroll(((QueryImpl)query).getJPAQuery());
      results=nativeQuery != null ? ((CassandraClientBase)client).executeQuery(nativeQuery,m.getEntityClazz(),null) : null;
    }
 else {
      boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m,MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()));
      Map<Boolean,List<IndexClause>> ixClause=query.prepareIndexClause(m,useInvertedIndex);
      if (useInvertedIndex && !((QueryImpl)query).getKunderaQuery().getFilterClauseQueue().isEmpty()) {
        result=(List)((CassandraEntityReader)this.reader).readFromIndexTable(m,client,ixClause);
      }
 else {
        boolean isRowKeyQuery=ixClause.keySet().iterator().next();
        List<IndexExpression> expressions=!ixClause.get(isRowKeyQuery).isEmpty() ? ixClause.get(isRowKeyQuery).get(0).getExpressions() : null;
        Map<String,byte[]> rowKeys=((CassandraEntityReader)this.reader).getRowKeyValue(expressions,((AbstractAttribute)m.getIdAttribute()).getJPAColumnName());
        byte[] minValue=start == null ? rowKeys.get(MIN_) : start;
        byte[] maxVal=rowKeys.get(MAX_);
        results=((CassandraClientBase)client).findByRange(minValue,maxVal,m,m.getRelationNames() != null && !m.getRelationNames().isEmpty(),m.getRelationNames(),query.getColumnList(m,((QueryImpl)query).getKunderaQuery().getResult(),null),expressions,maxResult);
        if (maxResult == 1) {
          maxResult++;
        }
 else         if (maxResult > 1 && checkOnEmptyResult() && maxResult != results.size()) {
          results=null;
        }
      }
    }
  }
  return results;
}","/** 
 * Method parse provided JPQL query into: 1. CQL3 query, in case cql3 is enabled or is a native query. 2. list of index clause, if cql2 is enabled. Then executes query for given min & max values for scrolling over results.
 * @param m entity metadata
 * @param client client
 * @return list of database values wrapped into entities.
 * @throws Exception throws exception, in case of run time error.
 */
private List<E> populateEntities(EntityMetadata m,Client client) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",((QueryImpl)query).getJPAQuery());
  }
  List<E> result=new ArrayList<E>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  externalProperties=((CassandraClientBase)client).getExternalProperties();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  String queryString=appMetadata.getQuery(((QueryImpl)query).getJPAQuery());
  boolean isNative=((CassQuery)query).isNative();
  if (!isNative && ((CassandraClientBase)client).isCql3Enabled(m)) {
    String parsedQuery=query.onQueryOverCQL3(m,client,metaModel,null);
    parsedQuery=appendWhereClauseWithScroll(parsedQuery);
    results=parsedQuery != null ? ((CassandraClientBase)client).executeQuery(parsedQuery,m.getEntityClazz(),m.getRelationNames()) : null;
  }
 else {
    if (isNative) {
      final String nativeQuery=appendWhereClauseWithScroll(queryString != null ? queryString : ((QueryImpl)query).getJPAQuery());
      results=nativeQuery != null ? ((CassandraClientBase)client).executeQuery(nativeQuery,m.getEntityClazz(),null) : null;
    }
 else {
      boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m,MetadataUtils.useSecondryIndex(((ClientBase)client).getClientMetadata()));
      Map<Boolean,List<IndexClause>> ixClause=query.prepareIndexClause(m,useInvertedIndex);
      if (useInvertedIndex && !((QueryImpl)query).getKunderaQuery().getFilterClauseQueue().isEmpty()) {
        result=(List)((CassandraEntityReader)this.reader).readFromIndexTable(m,client,ixClause);
      }
 else {
        boolean isRowKeyQuery=ixClause.keySet().iterator().next();
        List<IndexExpression> expressions=!ixClause.get(isRowKeyQuery).isEmpty() ? ixClause.get(isRowKeyQuery).get(0).getExpressions() : null;
        Map<String,byte[]> rowKeys=((CassandraEntityReader)this.reader).getRowKeyValue(expressions,((AbstractAttribute)m.getIdAttribute()).getJPAColumnName());
        byte[] minValue=start == null ? rowKeys.get(MIN_) : start;
        byte[] maxVal=rowKeys.get(MAX_);
        results=((CassandraClientBase)client).findByRange(minValue,maxVal,m,m.getRelationNames() != null && !m.getRelationNames().isEmpty(),m.getRelationNames(),query.getColumnList(m,((QueryImpl)query).getKunderaQuery().getResult(),null),expressions,maxResult);
        if (maxResult == 1) {
          maxResult++;
        }
 else         if (maxResult > 1 && checkOnEmptyResult() && maxResult != results.size()) {
          results=null;
        }
      }
    }
  }
  return results;
}",0.94883872015592
176272,"/** 
 * Test create native query.
 */
@Test public void testCreateNativeQuery(){
  EntityManagerFactoryImpl emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  String nativeSql=""String_Node_Str"";
  QueryImpl q=(QueryImpl)em.createNativeQuery(nativeSql,CassandraEntitySample.class);
  Assert.assertEquals(nativeSql,q.getJPAQuery());
  Assert.assertEquals(true,KunderaMetadata.INSTANCE.getApplicationMetadata().isNative(nativeSql));
}","/** 
 * Test create native query.
 */
@Test public void testCreateNativeQuery(){
  EntityManagerFactoryImpl emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  String nativeSql=""String_Node_Str"";
  QueryImpl q=(QueryImpl)em.createNativeQuery(nativeSql,CassandraEntitySample.class);
  Assert.assertEquals(nativeSql,q.getJPAQuery());
}",0.8791208791208791
176273,"/** 
 * Creates the query.
 * @param jpaQuery the jpa query
 * @return the query
 */
Query createQuery(String jpaQuery){
  Query query=new QueryResolver().getQueryImplementation(jpaQuery,this);
  return query;
}","/** 
 * Creates the query.
 * @param jpaQuery the jpa query
 * @return the query
 */
Query createQuery(String jpaQuery){
  return getQueryInstance(jpaQuery,false,null);
}",0.8083989501312336
176274,"/** 
 * Returns entity metadata, in case of native query mapped class is present within application metadata.
 * @return entityMetadata entity metadata.
 */
protected EntityMetadata getEntityMetadata(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  EntityMetadata m=null;
  if (appMetadata.isNative(getJPAQuery())) {
    Class clazz=appMetadata.getMappedClass(getJPAQuery());
    m=KunderaMetadataManager.getEntityMetadata(clazz);
  }
 else {
    m=kunderaQuery.getEntityMetadata();
  }
  return m;
}","/** 
 * Returns entity metadata, in case of native query mapped class is present within application metadata.
 * @return entityMetadata entity metadata.
 */
protected EntityMetadata getEntityMetadata(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  EntityMetadata m=null;
  String query=appMetadata.getQuery(getJPAQuery());
  boolean isNative=kunderaQuery.isNative();
  if (isNative) {
    Class clazz=kunderaQuery.getEntityClass();
    m=KunderaMetadataManager.getEntityMetadata(clazz);
  }
 else {
    m=kunderaQuery.getEntityMetadata();
  }
  return m;
}",0.8481123792800702
176275,"/** 
 * Gets the query implementation.
 * @param jpaQuery the jpa query
 * @param persistenceDelegator the persistence delegator
 * @param persistenceUnits the persistence units
 * @return the query implementation
 */
public Query getQueryImplementation(String jpaQuery,PersistenceDelegator persistenceDelegator){
  if (jpaQuery == null) {
    throw new QueryHandlerException(""String_Node_Str"");
  }
  kunderaQuery=new KunderaQuery();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  String mappedQuery=appMetadata.getQuery(jpaQuery);
  boolean isNative=appMetadata.isNative(jpaQuery);
  EntityMetadata m=null;
  if (!isNative) {
    KunderaQueryParser parser=new KunderaQueryParser(kunderaQuery,mappedQuery != null ? mappedQuery : jpaQuery);
    parser.parse();
    kunderaQuery.postParsingInit();
    m=kunderaQuery.getEntityMetadata();
  }
 else {
    Class mappedClass=appMetadata.getMappedClass(jpaQuery);
    m=KunderaMetadataManager.getEntityMetadata(mappedClass);
  }
  Query query=null;
  try {
    query=getQuery(jpaQuery,persistenceDelegator,m);
  }
 catch (  Exception e) {
    log.error(e.getMessage());
    throw new QueryHandlerException(e);
  }
  return query;
}","/** 
 * Gets the query implementation.
 * @param jpaQuery the jpa query
 * @param persistenceDelegator the persistence delegator
 * @param persistenceUnits the persistence units
 * @return the query implementation
 */
public Query getQueryImplementation(String jpaQuery,PersistenceDelegator persistenceDelegator,Class mappedClass,boolean isNative){
  if (jpaQuery == null) {
    throw new QueryHandlerException(""String_Node_Str"");
  }
  KunderaQuery kunderaQuery=new KunderaQuery();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  String mappedQuery=appMetadata.getQuery(jpaQuery);
  isNative=mappedQuery != null ? appMetadata.isNative(jpaQuery) : isNative;
  EntityMetadata m=null;
  if (!isNative) {
    KunderaQueryParser parser=new KunderaQueryParser(kunderaQuery,mappedQuery != null ? mappedQuery : jpaQuery);
    parser.parse();
    kunderaQuery.postParsingInit();
    m=kunderaQuery.getEntityMetadata();
  }
 else {
    kunderaQuery.isNativeQuery=true;
    m=KunderaMetadataManager.getEntityMetadata(mappedClass);
    Field entityClazzField=null;
    try {
      entityClazzField=kunderaQuery.getClass().getDeclaredField(""String_Node_Str"");
      if (entityClazzField != null && !entityClazzField.isAccessible()) {
        entityClazzField.setAccessible(true);
      }
      entityClazzField.set(kunderaQuery,mappedClass);
    }
 catch (    Exception e) {
      log.error(e.getMessage());
      throw new QueryHandlerException(e);
    }
  }
  Query query=null;
  try {
    query=getQuery(jpaQuery,persistenceDelegator,m,kunderaQuery);
  }
 catch (  Exception e) {
    log.error(e.getMessage());
    throw new QueryHandlerException(e);
  }
  return query;
}",0.6394790952707334
176276,"/** 
 * Gets the query instance.
 * @param jpaQuery the jpa query
 * @param persistenceDelegator the persistence delegator
 * @param persistenceUnits the persistence units
 * @return the query
 * @throws ClassNotFoundException the class not found exception
 * @throws SecurityException the security exception
 * @throws NoSuchMethodException the no such method exception
 * @throws IllegalArgumentException the illegal argument exception
 * @throws InstantiationException the instantiation exception
 * @throws IllegalAccessException the illegal access exception
 * @throws InvocationTargetException the invocation target exception
 */
private Query getQuery(String jpaQuery,PersistenceDelegator persistenceDelegator,EntityMetadata m) throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException {
  Query query;
  Class clazz=persistenceDelegator.getClient(m).getQueryImplementor();
  @SuppressWarnings(""String_Node_Str"") Constructor constructor=clazz.getConstructor(String.class,KunderaQuery.class,PersistenceDelegator.class);
  query=(Query)constructor.newInstance(jpaQuery,kunderaQuery,persistenceDelegator);
  return query;
}","/** 
 * Gets the query instance.
 * @param jpaQuery the jpa query
 * @param persistenceDelegator the persistence delegator
 * @param persistenceUnits the persistence units
 * @return the query
 * @throws ClassNotFoundException the class not found exception
 * @throws SecurityException the security exception
 * @throws NoSuchMethodException the no such method exception
 * @throws IllegalArgumentException the illegal argument exception
 * @throws InstantiationException the instantiation exception
 * @throws IllegalAccessException the illegal access exception
 * @throws InvocationTargetException the invocation target exception
 */
private Query getQuery(String jpaQuery,PersistenceDelegator persistenceDelegator,EntityMetadata m,KunderaQuery kunderaQuery) throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException {
  Query query;
  Class clazz=persistenceDelegator.getClient(m).getQueryImplementor();
  @SuppressWarnings(""String_Node_Str"") Constructor constructor=clazz.getConstructor(String.class,KunderaQuery.class,PersistenceDelegator.class);
  query=(Query)constructor.newInstance(jpaQuery,kunderaQuery,persistenceDelegator);
  return query;
}",0.9896414342629484
176277,"@Test public void testNativeQuery(){
  final String nativeQuery=""String_Node_Str"";
  Query query=em.createNativeQuery(nativeQuery,SampleEntity.class);
  Assert.assertNotNull(query);
  Assert.assertTrue(KunderaMetadata.INSTANCE.getApplicationMetadata().isNative(nativeQuery));
}","@Test public void testNativeQuery(){
  final String nativeQuery=""String_Node_Str"";
  Query query=em.createNativeQuery(nativeQuery,SampleEntity.class);
  Assert.assertNotNull(query);
}",0.7956521739130434
176278,"@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  try {
    if (appMetadata.isNative(getJPAQuery())) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    BasicDBObject orderByClause=getOrderByClause();
    return ((MongoDBClient)client).loadData(m,createMongoQuery(m,getKunderaQuery().getFilterClauseQueue()),null,orderByClause,isSingleResult ? 1 : maxResult,getKeys(m,getKunderaQuery().getResult()),getKunderaQuery().getResult());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new QueryHandlerException(e);
  }
}","@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  try {
    String query=appMetadata.getQuery(getJPAQuery());
    boolean isNative=kunderaQuery.isNative();
    if (isNative) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    BasicDBObject orderByClause=getOrderByClause();
    return ((MongoDBClient)client).loadData(m,createMongoQuery(m,getKunderaQuery().getFilterClauseQueue()),null,orderByClause,isSingleResult ? 1 : maxResult,getKeys(m,getKunderaQuery().getResult()),getKunderaQuery().getResult());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new QueryHandlerException(e);
  }
}",0.9329647546648238
176279,"@Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<EnhanceEntity> ls=new ArrayList<EnhanceEntity>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  try {
    if (appMetadata.isNative(getJPAQuery())) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    BasicDBObject orderByClause=getOrderByClause();
    ls=((MongoDBClient)client).loadData(m,createMongoQuery(m,getKunderaQuery().getFilterClauseQueue()),m.getRelationNames(),orderByClause,isSingleResult ? 1 : maxResult,getKeys(m,getKunderaQuery().getResult()),getKunderaQuery().getResult());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new QueryHandlerException(e);
  }
  return setRelationEntities(ls,client,m);
}","@Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<EnhanceEntity> ls=new ArrayList<EnhanceEntity>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  try {
    String query=appMetadata.getQuery(getJPAQuery());
    boolean isNative=kunderaQuery.isNative();
    if (isNative) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    BasicDBObject orderByClause=getOrderByClause();
    ls=((MongoDBClient)client).loadData(m,createMongoQuery(m,getKunderaQuery().getFilterClauseQueue()),m.getRelationNames(),orderByClause,isSingleResult ? 1 : maxResult,getKeys(m,getKunderaQuery().getResult()),getKunderaQuery().getResult());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new QueryHandlerException(e);
  }
  return setRelationEntities(ls,client,m);
}",0.9427052569403426
176280,"@Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<Object> entities=new ArrayList<Object>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  if (appMetadata.isNative(getJPAQuery())) {
    String nativeQuery=appMetadata.getQuery(getJPAQuery());
    Neo4JNativeQuery nativeQueryImpl=Neo4JNativeQueryFactory.getNativeQueryImplementation(queryType);
    entities=nativeQueryImpl.executeNativeQuery(nativeQuery,(Neo4JClient)client,m);
  }
 else {
    String luceneQuery=getLuceneQuery(kunderaQuery);
    entities=((Neo4JClient)client).executeLuceneQuery(m,luceneQuery);
  }
  return setRelationEntities(entities,client,m);
}","@Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<Object> entities=new ArrayList<Object>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  String query=appMetadata.getQuery(getJPAQuery());
  boolean isNative=kunderaQuery.isNative();
  if (isNative) {
    String nativeQuery=query != null ? query : getJPAQuery();
    Neo4JNativeQuery nativeQueryImpl=Neo4JNativeQueryFactory.getNativeQueryImplementation(queryType);
    entities=nativeQueryImpl.executeNativeQuery(nativeQuery,(Neo4JClient)client,m);
  }
 else {
    String luceneQuery=getLuceneQuery(kunderaQuery);
    entities=((Neo4JClient)client).executeLuceneQuery(m,luceneQuery);
  }
  return setRelationEntities(entities,client,m);
}",0.906523201075992
176281,"/** 
 * Checks whether a given JPA DML query is convertible to CQL
 * @param m
 * @return
 */
private boolean isQueryConvertibleToCQL(KunderaQuery kunderaQuery){
  EntityMetadata m=kunderaQuery.getEntityMetadata();
  if (kunderaQuery.isUpdateClause() && m.isCounterColumnType())   return false;
  List<String> opsNotAllowed=Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  boolean result=false;
  if (!kunderaQuery.getFilterClauseQueue().isEmpty()) {
    String idColumn=((AbstractAttribute)m.getIdAttribute()).getJPAColumnName();
    for (    Object o : kunderaQuery.getFilterClauseQueue()) {
      FilterClause filterClause=(FilterClause)o;
      if (!idColumn.equals(filterClause.getProperty()) || opsNotAllowed.contains(filterClause.getCondition())) {
        result=false;
        break;
      }
      result=true;
    }
  }
  return result;
}","/** 
 * Checks whether a given JPA DML query is convertible to CQL
 * @param m
 * @return
 */
private boolean isQueryConvertibleToCQL(KunderaQuery kunderaQuery){
  EntityMetadata m=kunderaQuery.getEntityMetadata();
  if (kunderaQuery.isUpdateClause() && m.isCounterColumnType())   return false;
  List<String> opsNotAllowed=Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  boolean result=false;
  if (!kunderaQuery.getFilterClauseQueue().isEmpty()) {
    String idColumn=((AbstractAttribute)m.getIdAttribute()).getJPAColumnName();
    for (    Object o : kunderaQuery.getFilterClauseQueue()) {
      if (o instanceof FilterClause) {
        FilterClause filterClause=(FilterClause)o;
        if (!idColumn.equals(filterClause.getProperty()) || opsNotAllowed.contains(filterClause.getCondition())) {
          result=false;
          break;
        }
        result=true;
      }
    }
  }
  return result;
}",0.9683646112600536
176282,"@Test public void testCallbackMethods(){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",""String_Node_Str"");
  EntityManagerFactory emf=Persistence.createEntityManagerFactory(""String_Node_Str"",props);
  EntityManager em=emf.createEntityManager();
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(PersonEventDispatch.class);
  Assert.assertNotNull(m.toString());
  PersonEventDispatch person=new PersonEventDispatch();
  person.setFirstName(""String_Node_Str"");
  person.setLastName(""String_Node_Str"");
  person.setPersonId(""String_Node_Str"");
  em.persist(person);
  em.clear();
  PersonEventDispatch result=em.find(PersonEventDispatch.class,""String_Node_Str"");
  Assert.assertEquals(result.getLastName(),""String_Node_Str"");
  onFindCallBack(em);
  em.close();
  emf.close();
}","@Test public void testCallbackMethods(){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",""String_Node_Str"");
  EntityManagerFactory emf=Persistence.createEntityManagerFactory(""String_Node_Str"",props);
  EntityManager em=emf.createEntityManager();
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(PersonEventDispatch.class);
  Assert.assertNotNull(m.toString());
  PersonEventDispatch person=new PersonEventDispatch();
  person.setFirstName(""String_Node_Str"");
  person.setLastName(""String_Node_Str"");
  person.setPersonId(""String_Node_Str"");
  em.persist(person);
  em.clear();
  PersonEventDispatch result=em.find(PersonEventDispatch.class,""String_Node_Str"");
  Assert.assertEquals(result.getLastName(),""String_Node_Str"");
  onFindCallBack(em);
  em.refresh(result);
  Assert.assertEquals(result.getLastName(),""String_Node_Str"");
  em.close();
  emf.close();
}",0.9360967184801382
176283,"/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  Metamodel metaModel=appMetadata.getMetamodel(entityMetadata.getPersistenceUnit());
  String query=appMetadata.getQuery(jpaQuery);
  boolean isNative=kunderaQuery.isNative();
  if (isNative) {
    return query != null ? query : jpaQuery;
  }
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  for (  Attribute field : attributes) {
    if (!field.isAssociation() && !field.isCollection() && !((Field)field.getJavaMember()).isAnnotationPresent(ManyToMany.class)&& !((AbstractAttribute)field).getJPAColumnName().equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName())&& !((MetamodelImpl)metaModel).isEmbeddable(((AbstractAttribute)field).getBindableJavaType())) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(((AbstractAttribute)field).getJPAColumnName());
    }
  }
  Map<String,EmbeddableType> embeddedColumns=((MetamodelImpl)metaModel).getEmbeddables(entityMetadata.getEntityClazz());
  for (  EmbeddableType embeddedCol : embeddedColumns.values()) {
    Set<Attribute> embeddedAttributes=embeddedCol.getAttributes();
    for (    Attribute column : embeddedAttributes) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(((AbstractAttribute)column).getJPAColumnName());
    }
  }
  if (relations != null) {
    for (    String relation : relations) {
      Relation rel=entityMetadata.getRelation(entityMetadata.getFieldName(relation));
      String r=MetadataUtils.getMappedName(entityMetadata,rel);
      if (!((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName().equalsIgnoreCase(r != null ? r : relation) && rel != null && !rel.getProperty().isAnnotationPresent(ManyToMany.class) && !rel.getProperty().isAnnotationPresent(OneToMany.class) && (rel.getProperty().isAnnotationPresent(OneToOne.class) && StringUtils.isBlank(rel.getMappedBy()) || rel.getProperty().isAnnotationPresent(ManyToOne.class))) {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(aliasName);
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(r != null ? r : relation);
      }
    }
  }
  for (  Relation r : entityMetadata.getRelations()) {
    if (!r.getType().equals(ForeignKey.MANY_TO_MANY) && (r.getProperty().isAnnotationPresent(OneToOne.class) && StringUtils.isBlank(r.getMappedBy()) || r.getProperty().isAnnotationPresent(ManyToOne.class))) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(r.getJoinColumnName());
    }
  }
  queryBuilder.append(""String_Node_Str"");
  if (entityMetadata.getSchema() != null && !entityMetadata.getSchema().isEmpty()) {
    queryBuilder.append(entityMetadata.getSchema() + ""String_Node_Str"");
  }
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        String fieldName=clause.getProperty();
        boolean isString=isStringProperty(entityType,fieldName,entityMetadata);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),aliasName,aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          buildINClause(queryBuilder,clause,isString);
        }
 else {
          appendStringPrefix(queryBuilder,isString);
          queryBuilder.append(clause.getValue());
          appendStringPrefix(queryBuilder,isString);
        }
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    Attribute col=entityMetadata.getIdAttribute();
    boolean isString=col.getJavaType().isAssignableFrom(String.class);
    for (    String key : primaryKeys) {
      appendStringPrefix(queryBuilder,isString);
      queryBuilder.append(key);
      appendStringPrefix(queryBuilder,isString);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}","/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  Metamodel metaModel=appMetadata.getMetamodel(entityMetadata.getPersistenceUnit());
  String query=appMetadata.getQuery(jpaQuery);
  boolean isNative=kunderaQuery != null ? kunderaQuery.isNative() : false;
  if (isNative) {
    return query != null ? query : jpaQuery;
  }
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  for (  Attribute field : attributes) {
    if (!field.isAssociation() && !field.isCollection() && !((Field)field.getJavaMember()).isAnnotationPresent(ManyToMany.class)&& !((AbstractAttribute)field).getJPAColumnName().equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName())&& !((MetamodelImpl)metaModel).isEmbeddable(((AbstractAttribute)field).getBindableJavaType())) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(((AbstractAttribute)field).getJPAColumnName());
    }
  }
  Map<String,EmbeddableType> embeddedColumns=((MetamodelImpl)metaModel).getEmbeddables(entityMetadata.getEntityClazz());
  for (  EmbeddableType embeddedCol : embeddedColumns.values()) {
    Set<Attribute> embeddedAttributes=embeddedCol.getAttributes();
    for (    Attribute column : embeddedAttributes) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(((AbstractAttribute)column).getJPAColumnName());
    }
  }
  if (relations != null) {
    for (    String relation : relations) {
      Relation rel=entityMetadata.getRelation(entityMetadata.getFieldName(relation));
      String r=MetadataUtils.getMappedName(entityMetadata,rel);
      if (!((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName().equalsIgnoreCase(r != null ? r : relation) && rel != null && !rel.getProperty().isAnnotationPresent(ManyToMany.class) && !rel.getProperty().isAnnotationPresent(OneToMany.class) && (rel.getProperty().isAnnotationPresent(OneToOne.class) && StringUtils.isBlank(rel.getMappedBy()) || rel.getProperty().isAnnotationPresent(ManyToOne.class))) {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(aliasName);
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(r != null ? r : relation);
      }
    }
  }
  for (  Relation r : entityMetadata.getRelations()) {
    if (!r.getType().equals(ForeignKey.MANY_TO_MANY) && (r.getProperty().isAnnotationPresent(OneToOne.class) && StringUtils.isBlank(r.getMappedBy()) || r.getProperty().isAnnotationPresent(ManyToOne.class))) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(r.getJoinColumnName());
    }
  }
  queryBuilder.append(""String_Node_Str"");
  if (entityMetadata.getSchema() != null && !entityMetadata.getSchema().isEmpty()) {
    queryBuilder.append(entityMetadata.getSchema() + ""String_Node_Str"");
  }
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        String fieldName=clause.getProperty();
        boolean isString=isStringProperty(entityType,fieldName,entityMetadata);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),aliasName,aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          buildINClause(queryBuilder,clause,isString);
        }
 else {
          appendStringPrefix(queryBuilder,isString);
          queryBuilder.append(clause.getValue());
          appendStringPrefix(queryBuilder,isString);
        }
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    Attribute col=entityMetadata.getIdAttribute();
    boolean isString=col.getJavaType().isAssignableFrom(String.class);
    for (    String key : primaryKeys) {
      appendStringPrefix(queryBuilder,isString);
      queryBuilder.append(key);
      appendStringPrefix(queryBuilder,isString);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}",0.997351106553875
176284,"@Override public void find(){
  getCurrentNodeState().handleFind(this);
}","@Override public void find(){
  getCurrentNodeState().handleFind(this);
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(this.getDataClass());
  onPostEvent(metadata,EntityEvent.FIND);
}",0.5270758122743683
176285,"private final static Class getPostEvent(EntityEvent event){
  Class clazz=null;
switch (event) {
case PERSIST:
    clazz=PostPersist.class;
  break;
case UPDATE:
clazz=PostUpdate.class;
break;
case REMOVE:
clazz=PostRemove.class;
break;
default :
}
return clazz;
}","private final static Class getPostEvent(EntityEvent event){
  Class clazz=null;
switch (event) {
case PERSIST:
    clazz=PostPersist.class;
  break;
case UPDATE:
clazz=PostUpdate.class;
break;
case REMOVE:
clazz=PostRemove.class;
break;
case FIND:
clazz=PostLoad.class;
break;
default :
}
return clazz;
}",0.9295774647887324
176286,"@Override public void refresh(){
  getCurrentNodeState().handleRefresh(this);
}","@Override public void refresh(){
  getCurrentNodeState().handleRefresh(this);
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(this.getDataClass());
  onPostEvent(metadata,EntityEvent.FIND);
}",0.5467128027681661
176287,"@Override public List<?> getResultList(){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + query);
  String q=luceneQuery;
  if (null == q) {
    q=getLuceneQueryFromJPAQuery();
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + q);
  EntityMetadata m=kunderaQuery.getEntityMetadata();
  Client client=persistenceDelegeator.getClient(m);
  Map<String,Object> searchFilter=client.getIndexManager().search(m.getEntityClazz(),q,-1,maxResult);
  if (kunderaQuery.isAliasOnly()) {
    String[] primaryKeys=searchFilter.values().toArray(new String[]{});
    return persistenceDelegeator.find(m.getEntityClazz(),primaryKeys);
  }
 else {
    return persistenceDelegeator.find(m.getEntityClazz(),searchFilter);
  }
}","@Override public List<?> getResultList(){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + query);
  String q=luceneQuery;
  if (null == q) {
    q=getLuceneQueryFromJPAQuery();
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + q);
  EntityMetadata m=kunderaQuery.getEntityMetadata();
  Client client=persistenceDelegeator.getClient(m);
  handlePostEvent(m);
  Map<String,Object> searchFilter=client.getIndexManager().search(m.getEntityClazz(),q,-1,maxResult);
  if (kunderaQuery.isAliasOnly()) {
    String[] primaryKeys=searchFilter.values().toArray(new String[]{});
    return persistenceDelegeator.find(m.getEntityClazz(),primaryKeys);
  }
 else {
    return persistenceDelegeator.find(m.getEntityClazz(),searchFilter);
  }
}",0.9851951547779272
176288,"@Override public List<?> getResultList(){
  if (log.isDebugEnabled())   log.info(""String_Node_Str"" + query);
  List results=new ArrayList();
  EntityMetadata m=getEntityMetadata();
  Client client=persistenceDelegeator.getClient(m);
  if (!m.isRelationViaJoinTable() && (m.getRelationNames() == null || (m.getRelationNames().isEmpty()))) {
    results=populateEntities(m,client);
  }
 else {
    results=recursivelyPopulateEntities(m,client);
  }
  if (kunderaQuery.isDeleteUpdate()) {
    onDeleteOrUpdate(results);
  }
  if (results != null) {
    for (    Object obj : results) {
      KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().setProxyOwners(m,obj);
    }
  }
  return results != null ? results : new ArrayList();
}","@Override public List<?> getResultList(){
  if (log.isDebugEnabled())   log.info(""String_Node_Str"" + query);
  List results=new ArrayList();
  EntityMetadata m=getEntityMetadata();
  Client client=persistenceDelegeator.getClient(m);
  handlePostEvent(m);
  if (!m.isRelationViaJoinTable() && (m.getRelationNames() == null || (m.getRelationNames().isEmpty()))) {
    results=populateEntities(m,client);
  }
 else {
    results=recursivelyPopulateEntities(m,client);
  }
  if (kunderaQuery.isDeleteUpdate()) {
    onDeleteOrUpdate(results);
  }
  if (results != null) {
    for (    Object obj : results) {
      KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().setProxyOwners(m,obj);
    }
  }
  return results != null ? results : new ArrayList();
}",0.9855072463768116
176289,"@Test public void testCallbackMethods(){
  EntityManagerFactory emf=Persistence.createEntityManagerFactory(""String_Node_Str"");
  EntityManager em=emf.createEntityManager();
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(PersonEventDispatch.class);
  Assert.assertNotNull(m.toString());
  em.close();
  emf.close();
}","@Test public void testCallbackMethods(){
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(""String_Node_Str"",""String_Node_Str"");
  EntityManagerFactory emf=Persistence.createEntityManagerFactory(""String_Node_Str"",props);
  EntityManager em=emf.createEntityManager();
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(PersonEventDispatch.class);
  Assert.assertNotNull(m.toString());
  PersonEventDispatch person=new PersonEventDispatch();
  person.setFirstName(""String_Node_Str"");
  person.setLastName(""String_Node_Str"");
  person.setPersonId(""String_Node_Str"");
  em.persist(person);
  em.clear();
  PersonEventDispatch result=em.find(PersonEventDispatch.class,""String_Node_Str"");
  Assert.assertEquals(result.getLastName(),""String_Node_Str"");
  onFindCallBack(em);
  em.close();
  emf.close();
}",0.541991341991342
176290,"@PostLoad public void handledPostLoad(PersonEventDispatch user){
  user.setLastName(""String_Node_Str"");
}","@PostLoad public void handledPostLoad(PersonEventDispatch user){
  if (user != null) {
    user.setLastName(""String_Node_Str"");
  }
}",0.8823529411764706
176291,"/** 
 * Gets the query implementation.
 * @param jpaQuery the jpa query
 * @param persistenceDelegator the persistence delegator
 * @param persistenceUnits the persistence units
 * @return the query implementation
 */
public Query getQueryImplementation(String jpaQuery,PersistenceDelegator persistenceDelegator,Class mappedClass,boolean isNative){
  if (jpaQuery == null) {
    throw new QueryHandlerException(""String_Node_Str"");
  }
  KunderaQuery kunderaQuery=new KunderaQuery();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  String mappedQuery=appMetadata.getQuery(jpaQuery);
  isNative=mappedQuery != null ? appMetadata.isNative(jpaQuery) : isNative;
  EntityMetadata m=null;
  if (!isNative) {
    KunderaQueryParser parser=new KunderaQueryParser(kunderaQuery,mappedQuery != null ? mappedQuery : jpaQuery);
    parser.parse();
    kunderaQuery.postParsingInit();
    m=kunderaQuery.getEntityMetadata();
  }
 else {
    kunderaQuery.isNativeQuery=true;
    m=KunderaMetadataManager.getEntityMetadata(mappedClass);
    Field entityClazzField=null;
    try {
      entityClazzField=kunderaQuery.getClass().getDeclaredField(""String_Node_Str"");
      if (entityClazzField != null && !entityClazzField.isAccessible()) {
        entityClazzField.setAccessible(true);
      }
      entityClazzField.set(kunderaQuery,mappedClass);
    }
 catch (    Exception e) {
      log.error(e.getMessage());
      throw new QueryHandlerException(e);
    }
  }
  Query query=null;
  try {
    query=getQuery(jpaQuery,persistenceDelegator,m,kunderaQuery);
  }
 catch (  Exception e) {
    log.error(e.getMessage());
    throw new QueryHandlerException(e);
  }
  return query;
}","/** 
 * Gets the query implementation.
 * @param jpaQuery the jpa query
 * @param persistenceDelegator the persistence delegator
 * @param persistenceUnits the persistence units
 * @return the query implementation
 */
public Query getQueryImplementation(String jpaQuery,PersistenceDelegator persistenceDelegator,Class mappedClass,boolean isNative){
  if (jpaQuery == null) {
    throw new QueryHandlerException(""String_Node_Str"");
  }
  KunderaQuery kunderaQuery=new KunderaQuery();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  String mappedQuery=appMetadata.getQuery(jpaQuery);
  isNative=mappedQuery != null ? appMetadata.isNative(jpaQuery) : isNative;
  EntityMetadata m=null;
  if (!isNative) {
    KunderaQueryParser parser=new KunderaQueryParser(kunderaQuery,mappedQuery != null ? mappedQuery : jpaQuery);
    parser.parse();
    kunderaQuery.postParsingInit();
    m=kunderaQuery.getEntityMetadata();
  }
 else {
    if (appMetadata.isNative(jpaQuery)) {
      mappedClass=appMetadata.getMappedClass(jpaQuery);
    }
    kunderaQuery.isNativeQuery=true;
    m=KunderaMetadataManager.getEntityMetadata(mappedClass);
    Field entityClazzField=null;
    try {
      entityClazzField=kunderaQuery.getClass().getDeclaredField(""String_Node_Str"");
      if (entityClazzField != null && !entityClazzField.isAccessible()) {
        entityClazzField.setAccessible(true);
      }
      entityClazzField.set(kunderaQuery,mappedClass);
    }
 catch (    Exception e) {
      log.error(e.getMessage());
      throw new QueryHandlerException(e);
    }
  }
  Query query=null;
  try {
    query=getQuery(jpaQuery,persistenceDelegator,m,kunderaQuery);
  }
 catch (  Exception e) {
    log.error(e.getMessage());
    throw new QueryHandlerException(e);
  }
  return query;
}",0.9703534777651084
176292,"/** 
 * Executes named native queries and returns response
 * @param headers
 * @param info
 * @return
 */
private Response executeNamedNativeQuery(HttpHeaders headers,UriInfo info){
  String entityClassName=info.getPathParameters().getFirst(""String_Node_Str"");
  String namedNativeQueryName=info.getPathParameters().getFirst(""String_Node_Str"");
  String sessionToken=headers.getRequestHeader(Constants.SESSION_TOKEN_HEADER_NAME).get(0);
  String mediaType=headers.getRequestHeader(""String_Node_Str"").get(0);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + sessionToken + ""String_Node_Str""+ entityClassName+ ""String_Node_Str""+ namedNativeQueryName+ ""String_Node_Str""+ mediaType);
  Class<?> entityClass=null;
  List result=null;
  try {
    EntityManager em=EMRepository.INSTANCE.getEM(sessionToken);
    entityClass=EntityUtils.getEntityClass(entityClassName,em);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + entityClass);
    if (entityClass == null) {
      return Response.serverError().build();
    }
    Query q=em.createNamedQuery(namedNativeQueryName);
    result=q.getResultList();
  }
 catch (  Exception e) {
    log.error(e.getMessage());
    return Response.serverError().build();
  }
  if (result == null) {
    return Response.noContent().build();
  }
  String output=CollectionConverter.toString(result,entityClass,mediaType);
  return Response.ok(output).build();
}","/** 
 * Executes named native queries and returns response
 * @param headers
 * @param info
 * @return
 */
private Response executeNamedNativeQuery(HttpHeaders headers,UriInfo info){
  String entityClassName=info.getPathParameters().getFirst(""String_Node_Str"");
  String namedNativeQueryName=info.getPathParameters().getFirst(""String_Node_Str"");
  String sessionToken=headers.getRequestHeader(Constants.SESSION_TOKEN_HEADER_NAME).get(0);
  String mediaType=headers.getRequestHeader(""String_Node_Str"").get(0);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + sessionToken + ""String_Node_Str""+ entityClassName+ ""String_Node_Str""+ namedNativeQueryName+ ""String_Node_Str""+ mediaType);
  Class<?> entityClass=null;
  List result=null;
  try {
    EntityManager em=EMRepository.INSTANCE.getEM(sessionToken);
    entityClass=EntityUtils.getEntityClass(entityClassName,em);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + entityClass);
    if (entityClass == null) {
      return Response.serverError().build();
    }
    Query q=em.createNamedQuery(namedNativeQueryName);
    result=q.getResultList();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    return Response.serverError().build();
  }
  if (result == null) {
    return Response.noContent().build();
  }
  String output=CollectionConverter.toString(result,entityClass,mediaType);
  return Response.ok(output).build();
}",0.9992927864214992
176293,"/** 
 * Recursively fetches associated entities for a given <code>entity</code>
 * @param entity
 * @param relationsMap
 * @param client
 * @param m
 * @param pd
 * @return
 */
private Object handleAssociation(final Object entity,final Map<String,Object> relationsMap,final EntityMetadata m,final PersistenceDelegator pd,boolean lazilyloaded){
  for (  Relation relation : m.getRelations()) {
    ForeignKey relationType=relation.getType();
    Object relationalObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (relationalObject == null || ProxyHelper.isProxyOrCollection(relationalObject)) {
      onRelation(entity,relationsMap,m,pd,relation,relationType,lazilyloaded);
    }
  }
  return entity;
}","/** 
 * Recursively fetches associated entities for a given <code>entity</code>
 * @param entity
 * @param relationsMap
 * @param client
 * @param m
 * @param pd
 * @return
 */
private Object handleAssociation(final Object entity,final Map<String,Object> relationsMap,final EntityMetadata m,final PersistenceDelegator pd,boolean lazilyloaded){
  for (  Relation relation : m.getRelations()) {
    ForeignKey relationType=relation.getType();
    Object relationalObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (KunderaCoreUtils.isEmptyOrNull(relationalObject) || ProxyHelper.isProxyOrCollection(relationalObject)) {
      onRelation(entity,relationsMap,m,pd,relation,relationType,lazilyloaded);
    }
  }
  return entity;
}",0.973045822102426
176294,"public static boolean isEmptyOrNull(Object o){
  if (o == null) {
    return true;
  }
  if (PropertyAccessorHelper.isCollection(o.getClass())) {
    Collection c=(Collection)o;
    if (c.isEmpty()) {
      return true;
    }
  }
 else   if (Map.class.isAssignableFrom(o.getClass())) {
    Map m=(Map)o;
    if (m.isEmpty()) {
      return true;
    }
  }
  return false;
}","public static boolean isEmptyOrNull(Object o){
  if (o == null) {
    return true;
  }
  if (!ProxyHelper.isProxyOrCollection(o)) {
    if (PropertyAccessorHelper.isCollection(o.getClass())) {
      Collection c=(Collection)o;
      if (c.isEmpty()) {
        return true;
      }
    }
 else     if (Map.class.isAssignableFrom(o.getClass())) {
      Map m=(Map)o;
      if (m.isEmpty()) {
        return true;
      }
    }
  }
  return false;
}",0.7448107448107448
176295,"/** 
 * Constructs and returns   {@link Node} representation for a given entityobject. Output is fully constructed graph with relationships embedded. Each node is put into <code>graph</code> once it is constructed.
 * @param entity
 * @return
 */
private Node getNode(Object entity,ObjectGraph graph,NodeState initialNodeState){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (entityMetadata == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (initialNodeState != null && initialNodeState.getClass().equals(TransientState.class)) {
    Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
    Node nodeInPersistenceCache=null;
    if (id != null) {
      String nodeId=ObjectGraphUtils.getNodeId(id,entity.getClass());
      nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
    }
    if (nodeInPersistenceCache == null) {
      idGenerator.generateAndSetId(entity,entityMetadata,pd);
    }
  }
  if (!validator.isValidEntityObject(entity)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
  String nodeId=ObjectGraphUtils.getNodeId(id,entity.getClass());
  Node node=graph.getNode(nodeId);
  if (node != null) {
    if (node.isGraphCompleted()) {
      return node;
    }
    return null;
  }
  Node nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,entity,initialNodeState,persistenceCache,id);
  }
 else {
    node=nodeInPersistenceCache;
    if (!DeepEquals.deepEquals(node.getData(),entity)) {
      node.setData(entity);
      node.setDirty(true);
    }
 else     if (node.isProcessed()) {
      node.setDirty(false);
    }
  }
  graph.addNode(nodeId,node);
  for (  Relation relation : entityMetadata.getRelations()) {
    Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (childObject != null && !ProxyHelper.isProxy(childObject)) {
      EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(childObject.getClass());
      if (metadata != null && relation.isJoinedByPrimaryKey()) {
        PropertyAccessorHelper.setId(childObject,metadata,PropertyAccessorHelper.getId(entity,entityMetadata));
      }
      if (Collection.class.isAssignableFrom(childObject.getClass())) {
        Collection childrenObjects=(Collection)childObject;
        if (childrenObjects != null && !ProxyHelper.isProxyCollection(childrenObjects))         for (        Object childObj : childrenObjects) {
          if (childObj != null) {
            addChildNodesToGraph(graph,node,relation,childObj,initialNodeState);
          }
        }
      }
 else       if (Map.class.isAssignableFrom(childObject.getClass())) {
        Map childrenObjects=(Map)childObject;
        if (childrenObjects != null && !ProxyHelper.isProxyCollection(childrenObjects)) {
          for (          Map.Entry entry : (Set<Map.Entry>)childrenObjects.entrySet()) {
            addChildNodesToGraph(graph,node,relation,entry,initialNodeState);
          }
        }
      }
 else {
        addChildNodesToGraph(graph,node,relation,childObject,initialNodeState);
      }
    }
  }
  node.setGraphCompleted(true);
  return node;
}","/** 
 * Constructs and returns   {@link Node} representation for a given entityobject. Output is fully constructed graph with relationships embedded. Each node is put into <code>graph</code> once it is constructed.
 * @param entity
 * @return
 */
private Node getNode(Object entity,ObjectGraph graph,NodeState initialNodeState){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (entityMetadata == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (((Field)entityMetadata.getIdAttribute().getJavaMember()).isAnnotationPresent(GeneratedValue.class)) {
    Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
    Node nodeInPersistenceCache=null;
    if (id != null) {
      String nodeId=ObjectGraphUtils.getNodeId(id,entity.getClass());
      nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
    }
    if (nodeInPersistenceCache == null || !nodeInPersistenceCache.getCurrentNodeState().equals(ManagedState.class)) {
      idGenerator.generateAndSetId(entity,entityMetadata,pd);
    }
  }
  if (!validator.isValidEntityObject(entity)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
  String nodeId=ObjectGraphUtils.getNodeId(id,entity.getClass());
  Node node=graph.getNode(nodeId);
  if (node != null) {
    if (node.isGraphCompleted()) {
      return node;
    }
    return null;
  }
  Node nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,entity,initialNodeState,persistenceCache,id);
  }
 else {
    node=nodeInPersistenceCache;
    if (!DeepEquals.deepEquals(node.getData(),entity)) {
      node.setData(entity);
      node.setDirty(true);
    }
 else     if (node.isProcessed()) {
      node.setDirty(false);
    }
  }
  graph.addNode(nodeId,node);
  for (  Relation relation : entityMetadata.getRelations()) {
    Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (childObject != null && !ProxyHelper.isProxy(childObject)) {
      EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(childObject.getClass());
      if (metadata != null && relation.isJoinedByPrimaryKey()) {
        PropertyAccessorHelper.setId(childObject,metadata,PropertyAccessorHelper.getId(entity,entityMetadata));
      }
      if (Collection.class.isAssignableFrom(childObject.getClass())) {
        Collection childrenObjects=(Collection)childObject;
        if (childrenObjects != null && !ProxyHelper.isProxyCollection(childrenObjects))         for (        Object childObj : childrenObjects) {
          if (childObj != null) {
            addChildNodesToGraph(graph,node,relation,childObj,initialNodeState);
          }
        }
      }
 else       if (Map.class.isAssignableFrom(childObject.getClass())) {
        Map childrenObjects=(Map)childObject;
        if (childrenObjects != null && !ProxyHelper.isProxyCollection(childrenObjects)) {
          for (          Map.Entry entry : (Set<Map.Entry>)childrenObjects.entrySet()) {
            addChildNodesToGraph(graph,node,relation,entry,initialNodeState);
          }
        }
      }
 else {
        addChildNodesToGraph(graph,node,relation,childObject,initialNodeState);
      }
    }
  }
  node.setGraphCompleted(true);
  return node;
}",0.3093971631205673
176296,"/** 
 * Executes on list of entities to be persisted.
 * @param collections collection containing list of db objects.
 * @param entity entity in question.
 * @param id entity id.
 * @param metadata entity metadata
 * @param relationHolders relation holders.
 * @param isUpdate if it is an update
 * @return collection of DB objects.
 */
private Map<String,List<DBObject>> onPersist(Map<String,List<DBObject>> collections,Object entity,Object id,EntityMetadata metadata,List<RelationHolder> relationHolders,boolean isUpdate){
  persistenceUnit=metadata.getPersistenceUnit();
  String documentName=metadata.getTableName();
  DBObject document=null;
  document=new BasicDBObject();
  document=handler.getDocumentFromEntity(document,metadata,entity,relationHolders);
  if (isUpdate) {
    BasicDBObject query=new BasicDBObject();
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
    if (metaModel.isEmbeddable(metadata.getIdAttribute().getBindableJavaType())) {
      MongoDBUtils.populateCompoundKey(query,metadata,metaModel,id);
    }
 else {
      query.put(""String_Node_Str"",MongoDBUtils.populateValue(id,id.getClass()));
    }
    DBCollection dbCollection=mongoDb.getCollection(documentName);
    DBObject obj=dbCollection.findOne(query);
    obj.putAll(document);
    dbCollection.save(obj);
  }
 else {
    List<DBObject> dbStatements=null;
    if (collections.containsKey(documentName)) {
      dbStatements=collections.get(documentName);
      dbStatements.add(document);
    }
 else {
      dbStatements=new ArrayList<DBObject>();
      dbStatements.add(document);
      collections.put(documentName,dbStatements);
    }
  }
  return collections;
}","/** 
 * Executes on list of entities to be persisted.
 * @param collections collection containing list of db objects.
 * @param entity entity in question.
 * @param id entity id.
 * @param metadata entity metadata
 * @param relationHolders relation holders.
 * @param isUpdate if it is an update
 * @return collection of DB objects.
 */
private Map<String,List<DBObject>> onPersist(Map<String,List<DBObject>> collections,Object entity,Object id,EntityMetadata metadata,List<RelationHolder> relationHolders,boolean isUpdate){
  persistenceUnit=metadata.getPersistenceUnit();
  String documentName=metadata.getTableName();
  DBObject document=null;
  document=new BasicDBObject();
  document=handler.getDocumentFromEntity(document,metadata,entity,relationHolders);
  if (isUpdate) {
    BasicDBObject query=new BasicDBObject();
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
    if (metaModel.isEmbeddable(metadata.getIdAttribute().getBindableJavaType())) {
      MongoDBUtils.populateCompoundKey(query,metadata,metaModel,id);
    }
 else {
      query.put(""String_Node_Str"",MongoDBUtils.populateValue(id,id.getClass()));
    }
    DBCollection dbCollection=mongoDb.getCollection(documentName);
    DBObject obj=dbCollection.findOne(query);
    if (obj != null) {
      obj.putAll(document);
      dbCollection.save(obj);
    }
 else {
      dbCollection.save(document);
    }
  }
 else {
    List<DBObject> dbStatements=null;
    if (collections.containsKey(documentName)) {
      dbStatements=collections.get(documentName);
      dbStatements.add(document);
    }
 else {
      dbStatements=new ArrayList<DBObject>();
      dbStatements.add(document);
      collections.put(documentName,dbStatements);
    }
  }
  return collections;
}",0.97703081232493
176297,"/** 
 * Appends a object of type   {@link java.util.List}
 * @param builder
 * @param value
 * @return
 */
private boolean appendMap(StringBuilder builder,Object value){
  boolean isPresent=false;
  Map map=((Map)value);
  if (!map.isEmpty()) {
    isPresent=true;
    builder.append(""String_Node_Str"");
    for (    Object mapKey : map.keySet()) {
      Object mapValue=map.get(mapKey);
      if (mapKey != null && mapValue != null) {
        appendValue(builder,mapKey.getClass(),mapKey);
        builder.append(""String_Node_Str"");
        appendValue(builder,mapValue.getClass(),mapValue);
      }
      builder.append(""String_Node_Str"");
    }
    builder.deleteCharAt(builder.length() - 1);
    builder.append(""String_Node_Str"");
  }
  return isPresent;
}","/** 
 * Appends a object of type   {@link java.util.List}
 * @param builder
 * @param value
 * @return
 */
private boolean appendMap(StringBuilder builder,Object value){
  boolean isPresent=false;
  Map map=((Map)value);
  isPresent=true;
  builder.append(""String_Node_Str"");
  for (  Object mapKey : map.keySet()) {
    Object mapValue=map.get(mapKey);
    if (mapKey != null && mapValue != null) {
      appendValue(builder,mapKey.getClass(),mapKey);
      builder.append(""String_Node_Str"");
      appendValue(builder,mapValue.getClass(),mapValue);
    }
    builder.append(""String_Node_Str"");
  }
  if (!map.isEmpty()) {
    builder.deleteCharAt(builder.length() - 1);
  }
  builder.append(""String_Node_Str"");
  return isPresent;
}",0.923694779116466
176298,"/** 
 * Appends a object of type   {@link java.util.Map}
 * @param builder
 * @param value
 * @return
 */
private boolean appendSet(StringBuilder builder,Object value){
  boolean isPresent=false;
  Collection collection=((Collection)value);
  if (!collection.isEmpty()) {
    isPresent=true;
    builder.append(""String_Node_Str"");
    for (    Object o : collection) {
      if (o != null) {
        appendValue(builder,o.getClass(),o);
      }
      builder.append(""String_Node_Str"");
    }
    builder.deleteCharAt(builder.length() - 1);
    builder.append(""String_Node_Str"");
  }
  return isPresent;
}","/** 
 * Appends a object of type   {@link java.util.Map}
 * @param builder
 * @param value
 * @return
 */
private boolean appendSet(StringBuilder builder,Object value){
  boolean isPresent=false;
  Collection collection=((Collection)value);
  isPresent=true;
  builder.append(""String_Node_Str"");
  for (  Object o : collection) {
    if (o != null) {
      appendValue(builder,o.getClass(),o);
    }
    builder.append(""String_Node_Str"");
  }
  if (!collection.isEmpty()) {
    builder.deleteCharAt(builder.length() - 1);
  }
  builder.append(""String_Node_Str"");
  return isPresent;
}",0.8973063973063973
176299,"/** 
 * Appends a object of type   {@link java.util.List}
 * @param builder
 * @param value
 * @return
 */
private boolean appendList(StringBuilder builder,Object value){
  boolean isPresent=false;
  Collection collection=((Collection)value);
  if (!collection.isEmpty()) {
    isPresent=true;
    builder.append(""String_Node_Str"");
    for (    Object o : collection) {
      if (o != null) {
        appendValue(builder,o.getClass(),o);
      }
      builder.append(""String_Node_Str"");
    }
    builder.deleteCharAt(builder.length() - 1);
    builder.append(""String_Node_Str"");
  }
  return isPresent;
}","/** 
 * Appends a object of type   {@link java.util.List}
 * @param builder
 * @param value
 * @return
 */
private boolean appendList(StringBuilder builder,Object value){
  boolean isPresent=false;
  Collection collection=((Collection)value);
  isPresent=true;
  builder.append(""String_Node_Str"");
  for (  Object o : collection) {
    if (o != null) {
      appendValue(builder,o.getClass(),o);
    }
    builder.append(""String_Node_Str"");
  }
  if (!collection.isEmpty()) {
    builder.deleteCharAt(builder.length() - 1);
  }
  builder.append(""String_Node_Str"");
  return isPresent;
}",0.8976510067114094
176300,"/** 
 * Removes an object from Index.
 * @param metadata the metadata
 * @param entity the entity
 * @param key the key
 */
public final void remove(EntityMetadata metadata,Object entity,String key){
  if (indexer != null) {
    if (indexer.getClass().isAssignableFrom(LuceneIndexer.class)) {
      ((com.impetus.kundera.index.lucene.Indexer)indexer).unindex(metadata,key);
    }
 else {
      indexer.unIndex(metadata.getEntityClazz(),key);
    }
  }
}","/** 
 * Removes an object from Index.
 * @param metadata the metadata
 * @param entity the entity
 * @param key the key
 */
public final void remove(EntityMetadata metadata,Object entity,String key){
  if (indexer != null) {
    if (indexer.getClass().isAssignableFrom(LuceneIndexer.class)) {
      ((com.impetus.kundera.index.lucene.Indexer)indexer).unindex(metadata,key);
    }
 else {
      indexer.unIndex(metadata.getEntityClazz(),entity);
    }
  }
}",0.9922992299229924
176301,"@Override public void unIndex(Class entityClazz,Object key){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entityClazz);
  DeleteResponse response=client.prepareDelete(metadata.getSchema().toLowerCase(),entityClazz.getSimpleName(),key.toString()).execute().actionGet();
}","@Override public void unIndex(Class entityClazz,Object entity){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entityClazz);
  Object id=PropertyAccessorHelper.getId(entity,metadata);
  DeleteResponse response=client.prepareDelete(metadata.getSchema().toLowerCase(),entityClazz.getSimpleName(),id.toString()).execute().actionGet();
}",0.889922480620155
176302,"/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  Metamodel metaModel=appMetadata.getMetamodel(entityMetadata.getPersistenceUnit());
  if (appMetadata.isNative(jpaQuery)) {
    return appMetadata.getQuery(jpaQuery);
  }
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  for (  Attribute field : attributes) {
    if (!field.isAssociation() && !field.isCollection() && !((Field)field.getJavaMember()).isAnnotationPresent(ManyToMany.class)&& !((AbstractAttribute)field).getJPAColumnName().equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName())&& !((MetamodelImpl)metaModel).isEmbeddable(((AbstractAttribute)field).getBindableJavaType())) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(((AbstractAttribute)field).getJPAColumnName());
    }
  }
  Map<String,EmbeddableType> embeddedColumns=((MetamodelImpl)metaModel).getEmbeddables(entityMetadata.getEntityClazz());
  for (  EmbeddableType embeddedCol : embeddedColumns.values()) {
    Set<Attribute> embeddedAttributes=embeddedCol.getAttributes();
    for (    Attribute column : embeddedAttributes) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(((AbstractAttribute)column).getJPAColumnName());
    }
  }
  if (relations != null) {
    for (    String relation : relations) {
      Relation rel=entityMetadata.getRelation(entityMetadata.getFieldName(relation));
      String r=MetadataUtils.getMappedName(entityMetadata,rel);
      if (!((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName().equalsIgnoreCase(r != null ? r : relation) && rel != null && !rel.getProperty().isAnnotationPresent(ManyToMany.class) && !rel.getProperty().isAnnotationPresent(OneToMany.class) && (rel.getProperty().isAnnotationPresent(OneToOne.class) && StringUtils.isBlank(rel.getMappedBy()) || rel.getProperty().isAnnotationPresent(ManyToOne.class))) {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(aliasName);
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(r != null ? r : relation);
      }
    }
  }
  for (  Relation r : entityMetadata.getRelations()) {
    if (!r.getType().equals(ForeignKey.MANY_TO_MANY) && (r.getProperty().isAnnotationPresent(OneToOne.class) && StringUtils.isBlank(r.getMappedBy()) || r.getProperty().isAnnotationPresent(ManyToOne.class))) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(r.getJoinColumnName());
    }
  }
  queryBuilder.append(""String_Node_Str"");
  if (entityMetadata.getSchema() != null && !entityMetadata.getSchema().isEmpty()) {
    queryBuilder.append(entityMetadata.getSchema() + ""String_Node_Str"");
  }
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        String fieldName=clause.getProperty();
        boolean isString=isStringProperty(entityType,fieldName,entityMetadata);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),aliasName,aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        appendStringPrefix(queryBuilder,isString);
        queryBuilder.append(clause.getValue());
        appendStringPrefix(queryBuilder,isString);
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    Attribute col=entityMetadata.getIdAttribute();
    boolean isString=col.getJavaType().isAssignableFrom(String.class);
    for (    String key : primaryKeys) {
      appendStringPrefix(queryBuilder,isString);
      queryBuilder.append(key);
      appendStringPrefix(queryBuilder,isString);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}","/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  Metamodel metaModel=appMetadata.getMetamodel(entityMetadata.getPersistenceUnit());
  if (appMetadata.isNative(jpaQuery)) {
    return appMetadata.getQuery(jpaQuery);
  }
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  for (  Attribute field : attributes) {
    if (!field.isAssociation() && !field.isCollection() && !((Field)field.getJavaMember()).isAnnotationPresent(ManyToMany.class)&& !((AbstractAttribute)field).getJPAColumnName().equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName())&& !((MetamodelImpl)metaModel).isEmbeddable(((AbstractAttribute)field).getBindableJavaType())) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(((AbstractAttribute)field).getJPAColumnName());
    }
  }
  Map<String,EmbeddableType> embeddedColumns=((MetamodelImpl)metaModel).getEmbeddables(entityMetadata.getEntityClazz());
  for (  EmbeddableType embeddedCol : embeddedColumns.values()) {
    Set<Attribute> embeddedAttributes=embeddedCol.getAttributes();
    for (    Attribute column : embeddedAttributes) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(((AbstractAttribute)column).getJPAColumnName());
    }
  }
  if (relations != null) {
    for (    String relation : relations) {
      Relation rel=entityMetadata.getRelation(entityMetadata.getFieldName(relation));
      String r=MetadataUtils.getMappedName(entityMetadata,rel);
      if (!((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName().equalsIgnoreCase(r != null ? r : relation) && rel != null && !rel.getProperty().isAnnotationPresent(ManyToMany.class) && !rel.getProperty().isAnnotationPresent(OneToMany.class) && (rel.getProperty().isAnnotationPresent(OneToOne.class) && StringUtils.isBlank(rel.getMappedBy()) || rel.getProperty().isAnnotationPresent(ManyToOne.class))) {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(aliasName);
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(r != null ? r : relation);
      }
    }
  }
  for (  Relation r : entityMetadata.getRelations()) {
    if (!r.getType().equals(ForeignKey.MANY_TO_MANY) && (r.getProperty().isAnnotationPresent(OneToOne.class) && StringUtils.isBlank(r.getMappedBy()) || r.getProperty().isAnnotationPresent(ManyToOne.class))) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(r.getJoinColumnName());
    }
  }
  queryBuilder.append(""String_Node_Str"");
  if (entityMetadata.getSchema() != null && !entityMetadata.getSchema().isEmpty()) {
    queryBuilder.append(entityMetadata.getSchema() + ""String_Node_Str"");
  }
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        String fieldName=clause.getProperty();
        boolean isString=isStringProperty(entityType,fieldName,entityMetadata);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),aliasName,aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          buildINClause(queryBuilder,clause,isString);
        }
 else {
          appendStringPrefix(queryBuilder,isString);
          queryBuilder.append(clause.getValue());
          appendStringPrefix(queryBuilder,isString);
        }
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    Attribute col=entityMetadata.getIdAttribute();
    boolean isString=col.getJavaType().isAssignableFrom(String.class);
    for (    String key : primaryKeys) {
      appendStringPrefix(queryBuilder,isString);
      queryBuilder.append(key);
      appendStringPrefix(queryBuilder,isString);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}",0.9857494722026742
176303,"private void addColumnFamilies(List<TableInfo> tableInfos,HTableDescriptor hTableDescriptor,boolean isUpdate) throws IOException {
  if (admin.isTableEnabled(databaseName)) {
    admin.disableTable(databaseName);
  }
  for (  TableInfo tableInfo : tableInfos) {
    HColumnDescriptor columnDescriptor=hTableDescriptor.getFamily(tableInfo.getTableName().getBytes());
    if (columnDescriptor != null && !isUpdate) {
      admin.deleteColumn(databaseName,tableInfo.getTableName());
      addColumn(tableInfo);
    }
 else     if (columnDescriptor == null) {
      addColumn(tableInfo);
    }
  }
}","private void addColumnFamilies(List<TableInfo> tableInfos,HTableDescriptor hTableDescriptor,boolean isUpdate) throws IOException {
  if (admin.isTableEnabled(databaseName)) {
    admin.disableTable(databaseName);
  }
  for (  TableInfo tableInfo : tableInfos) {
    HColumnDescriptor columnDescriptor=hTableDescriptor.getFamily(tableInfo.getTableName().getBytes());
    if (columnDescriptor != null && !isUpdate) {
      admin.deleteColumn(databaseName,tableInfo.getTableName());
      addColumn(tableInfo);
    }
 else     if (columnDescriptor == null) {
      addColumn(tableInfo);
    }
  }
  if (admin.isTableDisabled(databaseName)) {
    admin.enableTable(databaseName);
  }
}",0.932601880877743
176304,"/** 
 * Setter for column value, by default converted from string value, in case of map it is automatically converted into map using BasicDBObject.
 * @param document mongo document
 * @param entityObject searched entity.
 * @param column column field.
 */
static void setFieldValue(DBObject document,Object entityObject,Attribute column){
  Object value=document.get(((AbstractAttribute)column).getJPAColumnName());
  if (value != null) {
    Class javaType=column.getJavaType();
    try {
switch (AttributeType.getType(javaType)) {
case MAP:
        PropertyAccessorHelper.set(entityObject,(Field)column.getJavaMember(),((BasicDBObject)value).toMap());
      break;
case SET:
    List collectionValues=Arrays.asList(((BasicDBList)value).toArray());
  PropertyAccessorHelper.set(entityObject,(Field)column.getJavaMember(),new HashSet(collectionValues));
break;
case LIST:
PropertyAccessorHelper.set(entityObject,(Field)column.getJavaMember(),Arrays.asList(((BasicDBList)value).toArray()));
break;
case POINT:
BasicDBList list=(BasicDBList)value;
Object xObj=list.get(0);
Object yObj=list.get(1);
if (xObj != null && yObj != null) {
try {
double x=Double.parseDouble(xObj.toString());
double y=Double.parseDouble(yObj.toString());
Point point=new Point(x,y);
PropertyAccessorHelper.set(entityObject,(Field)column.getJavaMember(),point);
}
 catch (NumberFormatException e) {
log.error(""String_Node_Str"",column,e);
throw new EntityReaderException(""String_Node_Str"" + column + ""String_Node_Str"",e);
}
}
break;
case ENUM:
EnumAccessor accessor=new EnumAccessor();
value=accessor.fromString(javaType,value.toString());
PropertyAccessorHelper.set(entityObject,(Field)column.getJavaMember(),value);
break;
case PRIMITIVE:
value=MongoDBUtils.populateValue(value,value.getClass());
value=MongoDBUtils.getTranslatedObject(value,value.getClass(),javaType);
PropertyAccessorHelper.set(entityObject,(Field)column.getJavaMember(),value);
break;
}
}
 catch (PropertyAccessException paex) {
log.error(""String_Node_Str"",((AbstractAttribute)column).getJPAColumnName(),paex);
throw new PersistenceException(paex);
}
}
}","/** 
 * Setter for column value, by default converted from string value, in case of map it is automatically converted into map using BasicDBObject.
 * @param document mongo document
 * @param entityObject searched entity.
 * @param column column field.
 */
static void setFieldValue(DBObject document,Object entityObject,Attribute column){
  Object value=null;
  if (document != null) {
    value=document.get(((AbstractAttribute)column).getJPAColumnName());
  }
  if (value != null) {
    Class javaType=column.getJavaType();
    try {
switch (AttributeType.getType(javaType)) {
case MAP:
        PropertyAccessorHelper.set(entityObject,(Field)column.getJavaMember(),((BasicDBObject)value).toMap());
      break;
case SET:
    List collectionValues=Arrays.asList(((BasicDBList)value).toArray());
  PropertyAccessorHelper.set(entityObject,(Field)column.getJavaMember(),new HashSet(collectionValues));
break;
case LIST:
PropertyAccessorHelper.set(entityObject,(Field)column.getJavaMember(),Arrays.asList(((BasicDBList)value).toArray()));
break;
case POINT:
BasicDBList list=(BasicDBList)value;
Object xObj=list.get(0);
Object yObj=list.get(1);
if (xObj != null && yObj != null) {
try {
double x=Double.parseDouble(xObj.toString());
double y=Double.parseDouble(yObj.toString());
Point point=new Point(x,y);
PropertyAccessorHelper.set(entityObject,(Field)column.getJavaMember(),point);
}
 catch (NumberFormatException e) {
log.error(""String_Node_Str"",column,e);
throw new EntityReaderException(""String_Node_Str"" + column + ""String_Node_Str"",e);
}
}
break;
case ENUM:
EnumAccessor accessor=new EnumAccessor();
value=accessor.fromString(javaType,value.toString());
PropertyAccessorHelper.set(entityObject,(Field)column.getJavaMember(),value);
break;
case PRIMITIVE:
value=MongoDBUtils.populateValue(value,value.getClass());
value=MongoDBUtils.getTranslatedObject(value,value.getClass(),javaType);
PropertyAccessorHelper.set(entityObject,(Field)column.getJavaMember(),value);
break;
}
}
 catch (PropertyAccessException paex) {
log.error(""String_Node_Str"",((AbstractAttribute)column).getJPAColumnName(),paex);
throw new PersistenceException(paex);
}
}
}",0.9891662741403674
176305,"/** 
 * @param tableInfo
 * @throws InvalidRequestException
 * @throws SchemaDisagreementException
 * @throws TException
 * @throws NotFoundException
 * @throws UnsupportedEncodingException
 * @throws UnavailableException
 * @throws TimedOutException
 */
private void createOrUpdateColumnFamily(TableInfo tableInfo,KsDef ksDef) throws Exception {
  MetaDataHandler handler=new MetaDataHandler();
  if (containsCompositeKey(tableInfo)) {
    validateCompoundKey(tableInfo);
    onCompoundKey(tableInfo,ksDef);
    createIndexUsingCql(tableInfo);
  }
 else   if (containsCollectionColumns(tableInfo)) {
    createOrUpdateUsingCQL3(tableInfo,ksDef);
    createIndexUsingCql(tableInfo);
  }
 else {
    CfDef cf_def=handler.getTableMetadata(tableInfo);
    try {
      cassandra_client.system_add_column_family(cf_def);
    }
 catch (    InvalidRequestException irex) {
      updateExistingColumnFamily(tableInfo,ksDef,irex);
    }
  }
}","/** 
 * @param tableInfo
 * @throws InvalidRequestException
 * @throws SchemaDisagreementException
 * @throws TException
 * @throws NotFoundException
 * @throws UnsupportedEncodingException
 * @throws UnavailableException
 * @throws TimedOutException
 */
private void createOrUpdateColumnFamily(TableInfo tableInfo,KsDef ksDef) throws Exception {
  MetaDataHandler handler=new MetaDataHandler();
  if (containsCompositeKey(tableInfo)) {
    validateCompoundKey(tableInfo);
    createOrUpdateUsingCQL3(tableInfo,ksDef);
    createIndexUsingCql(tableInfo);
  }
 else   if (containsCollectionColumns(tableInfo)) {
    createOrUpdateUsingCQL3(tableInfo,ksDef);
    createIndexUsingCql(tableInfo);
  }
 else {
    CfDef cf_def=handler.getTableMetadata(tableInfo);
    try {
      cassandra_client.system_add_column_family(cf_def);
    }
 catch (    InvalidRequestException irex) {
      updateExistingColumnFamily(tableInfo,ksDef,irex);
    }
  }
}",0.8582089552238806
176306,"@Test public void testJPAQuery(){
  BlogPost p1=prepareBlogPost1();
  BlogPost p2=prepareBlogPost2();
  em.persist(p1);
  em.persist(p2);
  Query q=em.createQuery(""String_Node_Str"");
  List<BlogPost> allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(2,allPosts.size());
  assertPost1(allPosts.get(0));
  assertPost2(allPosts.get(1));
  q=em.createQuery(""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertPost1(allPosts.get(0));
  q=em.createQuery(""String_Node_Str"");
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertPost2(allPosts.get(0));
  q=em.createQuery(""String_Node_Str"");
  modifyBlogPost1(p1);
  q.setParameter(""String_Node_Str"",p1.getBody());
  q.setParameter(""String_Node_Str"",p1.getTags());
  q.setParameter(""String_Node_Str"",p1.getLikedBy());
  q.setParameter(""String_Node_Str"",p1.getComments());
  int updatedRecords=q.executeUpdate();
  em.clear();
  q=em.createQuery(""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertUpdatedPost1(allPosts.get(0));
  q=em.createQuery(""String_Node_Str"");
  int deleteCount=q.executeUpdate();
  Assert.assertEquals(2,deleteCount);
  em.clear();
  q=em.createQuery(""String_Node_Str"");
  allPosts=q.getResultList();
  Assert.assertTrue(allPosts == null || allPosts.isEmpty());
}","@Test public void testJPAQuery(){
  BlogPost p1=prepareBlogPost1();
  BlogPost p2=prepareBlogPost2();
  em.persist(p1);
  em.persist(p2);
  Query q=em.createQuery(""String_Node_Str"");
  List<BlogPost> allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(2,allPosts.size());
  assertPost1(allPosts.get(0));
  assertPost2(allPosts.get(1));
  q=em.createQuery(""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertPost1(allPosts.get(0));
  q=em.createQuery(""String_Node_Str"");
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertPost2(allPosts.get(0));
  q=em.createQuery(""String_Node_Str"");
  modifyBlogPost1(p1);
  q.setParameter(""String_Node_Str"",p1.getBody());
  q.setParameter(""String_Node_Str"",p1.getTags());
  q.setParameter(""String_Node_Str"",p1.getLikedBy());
  q.setParameter(""String_Node_Str"",p1.getComments());
  int updatedRecords=q.executeUpdate();
  em.clear();
  q=em.createQuery(""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertUpdatedPost1(allPosts.get(0));
  em.clear();
  q=em.createNamedQuery(""String_Node_Str"");
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertPost2(allPosts.get(0));
  q=em.createQuery(""String_Node_Str"");
  int deleteCount=q.executeUpdate();
  Assert.assertEquals(2,deleteCount);
  em.clear();
  q=em.createQuery(""String_Node_Str"");
  allPosts=q.getResultList();
  Assert.assertTrue(allPosts == null || allPosts.isEmpty());
}",0.9376310272536688
176307,"@Test public void testNativeQuery(){
  BlogPost p1=prepareBlogPost1();
  BlogPost p2=prepareBlogPost2();
  em.persist(p1);
  em.persist(p2);
  Query q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  List<BlogPost> allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(2,allPosts.size());
  assertPost1(allPosts.get(0));
  assertPost2(allPosts.get(1));
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertPost1(allPosts.get(0));
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertUpdatedPost1(allPosts.get(0));
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertUpdatedPost2(allPosts.get(0));
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  allPosts=q.getResultList();
  Assert.assertTrue(allPosts == null || allPosts.isEmpty());
}","@Test public void testNativeQuery(){
  BlogPost p1=prepareBlogPost1();
  BlogPost p2=prepareBlogPost2();
  em.persist(p1);
  em.persist(p2);
  Query q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  List<BlogPost> allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(2,allPosts.size());
  assertPost1(allPosts.get(0));
  assertPost2(allPosts.get(1));
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertPost1(allPosts.get(0));
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertUpdatedPost1(allPosts.get(0));
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertUpdatedPost2(allPosts.get(0));
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  allPosts=q.getResultList();
  Assert.assertNotNull(allPosts);
  Assert.assertFalse(allPosts.isEmpty());
  Assert.assertEquals(1,allPosts.size());
  assertUpdatedPost1(allPosts.get(0));
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",BlogPost.class);
  allPosts=q.getResultList();
  Assert.assertTrue(allPosts == null || allPosts.isEmpty());
}",0.940758819613934
176308,"/** 
 * Method to execute cql query and return back entity/enhance entities.
 * @param cqlQuery cql query to be executed.
 * @param clazz entity class.
 * @param relationalField collection for relational fields.
 * @return list of objects.
 */
@Override public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField){
  return super.executeQuery(cqlQuery,clazz,relationalField,dataHandler);
}","/** 
 * Method to execute cql query and return back entity/enhance entities.
 * @param cqlQuery cql query to be executed.
 * @param clazz entity class.
 * @param relationalField collection for relational fields.
 * @return list of objects.
 */
@Override public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField){
  return super.executeSelectQuery(cqlQuery,clazz,relationalField,dataHandler);
}",0.9927710843373494
176309,"/** 
 * On executeUpdate.
 * @return zero
 */
@Override protected int onExecuteUpdate(){
  EntityMetadata m=getEntityMetadata();
  if (KunderaMetadata.INSTANCE.getApplicationMetadata().isNative(getJPAQuery())) {
    ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeQuery(KunderaMetadata.INSTANCE.getApplicationMetadata().getQuery(getJPAQuery()),m.getEntityClazz(),null);
  }
 else   if (kunderaQuery.isDeleteUpdate()) {
    List result=getResultList();
    return result != null ? result.size() : 0;
  }
  return 0;
}","/** 
 * On executeUpdate.
 * @return zero
 */
@Override protected int onExecuteUpdate(){
  EntityMetadata m=getEntityMetadata();
  if (KunderaMetadata.INSTANCE.getApplicationMetadata().isNative(getJPAQuery())) {
    ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeQuery(KunderaMetadata.INSTANCE.getApplicationMetadata().getQuery(getJPAQuery()),m.getEntityClazz(),null);
  }
 else   if (kunderaQuery.isDeleteUpdate()) {
    if (!isQueryConvertibleToCQL(kunderaQuery)) {
      List result=getResultList();
      return result != null ? result.size() : 0;
    }
 else {
      String query=null;
      if (kunderaQuery.isUpdateClause()) {
        query=createUpdateQuery(kunderaQuery);
      }
 else {
        query=createDeleteQuery(kunderaQuery);
      }
      return ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeUpdateDeleteQuery(query);
    }
  }
  return 0;
}",0.7454545454545455
176310,"/** 
 * Query related methods 
 */
@Override public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField){
  return super.executeQuery(cqlQuery,clazz,relationalField,dataHandler);
}","/** 
 * Query related methods 
 */
@Override public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField){
  return super.executeSelectQuery(cqlQuery,clazz,relationalField,dataHandler);
}",0.9854368932038836
176311,"@Override public void persistJoinTable(JoinTableData joinTableData){
  String joinTableName=joinTableData.getJoinTableName();
  String invJoinColumnName=joinTableData.getInverseJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  for (  Object key : joinTableRecords.keySet()) {
    Set<Object> values=joinTableRecords.get(key);
    Object joinColumnValue=key;
    Map<String,Object> columns=new HashMap<String,Object>();
    for (    Object childValue : values) {
      Object invJoinColumnValue=childValue;
      columns.put(invJoinColumnName + ""String_Node_Str"" + invJoinColumnValue,invJoinColumnValue);
    }
    if (columns != null && !columns.isEmpty()) {
      try {
        handler.createTableIfDoesNotExist(joinTableName,joinTableName);
        handler.writeJoinTableData(joinTableName,joinColumnValue,columns,joinTableName);
      }
 catch (      IOException e) {
        throw new PersistenceException(e);
      }
    }
  }
}","@Override public void persistJoinTable(JoinTableData joinTableData){
  String joinTableName=joinTableData.getJoinTableName();
  String invJoinColumnName=joinTableData.getInverseJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  for (  Object key : joinTableRecords.keySet()) {
    Set<Object> values=joinTableRecords.get(key);
    Object joinColumnValue=key;
    Map<String,Object> columns=new HashMap<String,Object>();
    for (    Object childValue : values) {
      Object invJoinColumnValue=childValue;
      columns.put(invJoinColumnName + ""String_Node_Str"" + invJoinColumnValue,invJoinColumnValue);
    }
    if (columns != null && !columns.isEmpty()) {
      try {
        handler.createTableIfDoesNotExist(joinTableData.getSchemaName(),joinTableName);
        handler.writeJoinTableData(joinTableData.getSchemaName(),joinColumnValue,columns,joinTableName);
      }
 catch (      IOException e) {
        throw new PersistenceException(e);
      }
    }
  }
}",0.983983983983984
176312,"/** 
 * Writes data into Join Table.
 * @param tableName the table name
 * @param rowId the row id
 * @param columns the columns
 * @throws IOException Signals that an I/O exception has occurred.
 */
void writeJoinTableData(String tableName,Object rowId,Map<String,Object> columns,String joinTableName) throws IOException ;","/** 
 * Writes data into Join Table.
 * @param tableName the table name
 * @param rowId the row id
 * @param columns the columns
 * @throws IOException Signals that an I/O exception has occurred.
 */
void writeJoinTableData(String tableName,Object rowId,Map<String,Object> columns,String columnFamilyName) throws IOException ;",0.9676425269645608
176313,"@Override public void writeData(String tableName,EntityMetadata m,Object entity,Object rowId,List<RelationHolder> relations) throws IOException {
  HTableInterface hTable=gethTable(tableName);
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entityType=metaModel.entity(m.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  HBaseDataWrapper columnWrapper=new HBaseDataWrapper(rowId,new java.util.HashMap<String,Attribute>(),entity,null);
  List<HBaseDataWrapper> persistentData=new ArrayList<HBaseDataHandler.HBaseDataWrapper>(attributes.size());
  preparePersistentData(tableName,m.getTableName(),entity,rowId,metaModel,attributes,columnWrapper,persistentData);
  hbaseWriter.writeColumns(hTable,columnWrapper.getRowKey(),columnWrapper.getColumns(),entity,m.getTableName());
  for (  HBaseDataWrapper wrapper : persistentData) {
    hbaseWriter.writeColumns(hTable,wrapper.getColumnFamily(),wrapper.getRowKey(),wrapper.getColumns(),wrapper.getEntity());
  }
  boolean containsEmbeddedObjectsOnly=columnWrapper.getColumns().isEmpty() && persistentData.isEmpty();
  if (relations != null && !relations.isEmpty()) {
    hbaseWriter.writeRelations(hTable,rowId,containsEmbeddedObjectsOnly,relations,m.getTableName());
  }
  puthTable(hTable);
}","@Override public void writeData(String tableName,EntityMetadata m,Object entity,Object rowId,List<RelationHolder> relations) throws IOException {
  HTableInterface hTable=gethTable(tableName);
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entityType=metaModel.entity(m.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  HBaseDataWrapper columnWrapper=new HBaseDataWrapper(rowId,new java.util.HashMap<String,Attribute>(),entity,null);
  List<HBaseDataWrapper> persistentData=new ArrayList<HBaseDataHandler.HBaseDataWrapper>(attributes.size());
  preparePersistentData(tableName,m.getTableName(),entity,rowId,metaModel,attributes,columnWrapper,persistentData);
  hbaseWriter.writeColumns(hTable,columnWrapper.getRowKey(),columnWrapper.getColumns(),entity,m.getTableName());
  for (  HBaseDataWrapper wrapper : persistentData) {
    hbaseWriter.writeColumns(hTable,wrapper.getColumnFamily(),wrapper.getRowKey(),wrapper.getColumns(),wrapper.getValues(),wrapper.getEntity());
  }
  boolean containsEmbeddedObjectsOnly=columnWrapper.getColumns().isEmpty() && persistentData.isEmpty();
  if (relations != null && !relations.isEmpty()) {
    hbaseWriter.writeRelations(hTable,rowId,containsEmbeddedObjectsOnly,relations,m.getTableName());
  }
  puthTable(hTable);
}",0.9926953981008036
176314,"/** 
 * @param rowKey
 * @param columns
 * @param entity
 * @param columnFamily
 */
public HBaseDataWrapper(Object rowKey,Map<String,Attribute> columns,Object entity,String columnFamily){
  super();
  this.rowKey=rowKey;
  this.columns=columns;
  this.entity=entity;
  this.columnFamily=columnFamily;
}","public HBaseDataWrapper(Object rowKey,Map<String,Attribute> columns,Map<String,Object> values,Object entity,String columnFamily){
  super();
  this.rowKey=rowKey;
  this.columns=columns;
  this.values=values;
  this.entity=entity;
  this.columnFamily=columnFamily;
}",0.3380281690140845
176315,"@Override public void writeJoinTableData(String tableName,Object rowId,Map<String,Object> columns,String joinTableName) throws IOException {
  HTableInterface hTable=gethTable(tableName);
  hbaseWriter.writeColumns(hTable,rowId,columns,joinTableName);
  puthTable(hTable);
}","@Override public void writeJoinTableData(String tableName,Object rowId,Map<String,Object> columns,String columnFamilyName) throws IOException {
  HTableInterface hTable=gethTable(tableName);
  hbaseWriter.writeColumns(hTable,rowId,columns,columnFamilyName);
  puthTable(hTable);
}",0.924187725631769
176316,"/** 
 * @param tableName
 * @param entity
 * @param rowId
 * @param metaModel
 * @param attributes
 * @param columnWrapper
 * @param persistentData
 * @return
 * @throws IOException
 */
public void preparePersistentData(String tableName,String columnFamily,Object entity,Object rowId,MetamodelImpl metaModel,Set<Attribute> attributes,HBaseDataWrapper columnWrapper,List<HBaseDataWrapper> persistentData) throws IOException {
  for (  Attribute column : attributes) {
    String fieldName=((AbstractAttribute)column).getJPAColumnName();
    Class javaType=((AbstractAttribute)column).getBindableJavaType();
    if (metaModel.isEmbeddable(javaType)) {
      String columnFamilyName=((AbstractAttribute)column).getJPAColumnName();
      Field columnFamilyField=(Field)column.getJavaMember();
      Object columnFamilyObject=null;
      try {
        columnFamilyObject=PropertyAccessorHelper.getObject(entity,columnFamilyField);
      }
 catch (      PropertyAccessException paex) {
        log.error(""String_Node_Str"",columnFamilyName,entity);
        throw new KunderaException(paex);
      }
      if (columnFamilyObject != null) {
        Set<Attribute> columns=metaModel.embeddable(javaType).getAttributes();
        Map<String,Attribute> columnNameToAttribute=new HashMap<String,Attribute>();
        if (column.isCollection()) {
          String dynamicCFName=null;
          ElementCollectionCacheManager ecCacheHandler=ElementCollectionCacheManager.getInstance();
          if (ecCacheHandler.isCacheEmpty()) {
            int count=0;
            for (            Object obj : (Collection)columnFamilyObject) {
              for (              Attribute attribute : columns) {
                columnNameToAttribute.put(columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + ((AbstractAttribute)attribute).getJPAColumnName()+ Constants.EMBEDDED_COLUMN_NAME_DELIMITER+ count,attribute);
              }
              persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,obj,columnFamily));
              count++;
            }
          }
 else {
            int lastEmbeddedObjectCount=ecCacheHandler.getLastElementCollectionObjectCount(rowId);
            for (            Object obj : (Collection)columnFamilyObject) {
              dynamicCFName=ecCacheHandler.getElementCollectionObjectName(rowId,obj);
              if (dynamicCFName == null) {
                for (                Attribute attribute : columns) {
                  columnNameToAttribute.put(columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + ((AbstractAttribute)attribute).getJPAColumnName()+ Constants.EMBEDDED_COLUMN_NAME_DELIMITER+ (++lastEmbeddedObjectCount),attribute);
                }
              }
              persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,obj,columnFamily));
            }
            ecCacheHandler.clearCache();
          }
        }
 else {
          for (          Attribute attribute : columns) {
            columnNameToAttribute.put(((AbstractAttribute)attribute).getJPAColumnName(),attribute);
          }
          if (columnFamilyField.isAnnotationPresent(Embedded.class)) {
            persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,columnFamilyObject,columnFamily));
          }
 else {
            persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,columnFamilyObject,columnFamily));
          }
        }
      }
    }
 else     if (!column.isAssociation()) {
      columnWrapper.addColumn(((AbstractAttribute)column).getJPAColumnName(),column);
    }
  }
}","/** 
 * @param tableName
 * @param entity
 * @param rowId
 * @param metaModel
 * @param attributes
 * @param columnWrapper
 * @param persistentData
 * @return
 * @throws IOException
 */
public void preparePersistentData(String tableName,String columnFamily,Object entity,Object rowId,MetamodelImpl metaModel,Set<Attribute> attributes,HBaseDataWrapper columnWrapper,List<HBaseDataWrapper> persistentData) throws IOException {
  for (  Attribute column : attributes) {
    String fieldName=((AbstractAttribute)column).getJPAColumnName();
    Class javaType=((AbstractAttribute)column).getBindableJavaType();
    if (metaModel.isEmbeddable(javaType)) {
      String columnFamilyName=((AbstractAttribute)column).getJPAColumnName();
      Field columnFamilyField=(Field)column.getJavaMember();
      Object columnFamilyObject=null;
      try {
        columnFamilyObject=PropertyAccessorHelper.getObject(entity,columnFamilyField);
      }
 catch (      PropertyAccessException paex) {
        log.error(""String_Node_Str"",columnFamilyName,entity);
        throw new KunderaException(paex);
      }
      if (columnFamilyObject != null) {
        Set<Attribute> columns=metaModel.embeddable(javaType).getAttributes();
        Map<String,Attribute> columnNameToAttribute=new HashMap<String,Attribute>();
        Map<String,Object> columnNameToValue=new HashMap<String,Object>();
        if (column.isCollection()) {
          String dynamicCFName=null;
          ElementCollectionCacheManager ecCacheHandler=ElementCollectionCacheManager.getInstance();
          if (ecCacheHandler.isCacheEmpty()) {
            int count=0;
            for (            Object obj : (Collection)columnFamilyObject) {
              for (              Attribute attribute : columns) {
                String columnName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + ((AbstractAttribute)attribute).getJPAColumnName()+ Constants.EMBEDDED_COLUMN_NAME_DELIMITER+ count;
                columnNameToAttribute.put(columnName,attribute);
                columnNameToValue.put(columnName,PropertyAccessorHelper.getObject(obj,(Field)attribute.getJavaMember()));
              }
              persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,columnNameToValue,obj,columnFamily));
              count++;
            }
          }
 else {
            int lastEmbeddedObjectCount=ecCacheHandler.getLastElementCollectionObjectCount(rowId);
            for (            Object obj : (Collection)columnFamilyObject) {
              dynamicCFName=ecCacheHandler.getElementCollectionObjectName(rowId,obj);
              if (dynamicCFName == null) {
                ++lastEmbeddedObjectCount;
                for (                Attribute attribute : columns) {
                  String columnName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + ((AbstractAttribute)attribute).getJPAColumnName()+ Constants.EMBEDDED_COLUMN_NAME_DELIMITER+ (lastEmbeddedObjectCount);
                  columnNameToAttribute.put(columnName,attribute);
                  columnNameToValue.put(columnName,PropertyAccessorHelper.getObject(obj,(Field)attribute.getJavaMember()));
                }
              }
              persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,columnNameToValue,obj,columnFamily));
            }
            ecCacheHandler.clearCache();
          }
        }
 else {
          for (          Attribute attribute : columns) {
            columnNameToAttribute.put(((AbstractAttribute)attribute).getJPAColumnName(),attribute);
            columnNameToValue.put(((AbstractAttribute)attribute).getJPAColumnName(),PropertyAccessorHelper.getObject(columnFamilyObject,(Field)attribute.getJavaMember()));
          }
          if (columnFamilyField.isAnnotationPresent(Embedded.class)) {
            persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,columnNameToValue,columnFamilyObject,columnFamily));
          }
 else {
            persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,columnNameToValue,columnFamilyObject,columnFamily));
          }
        }
      }
    }
 else     if (!column.isAssociation()) {
      columnWrapper.addColumn(((AbstractAttribute)column).getJPAColumnName(),column);
      columnWrapper.addValue(((AbstractAttribute)column).getJPAColumnName(),PropertyAccessorHelper.getObject(entity,(Field)column.getJavaMember()));
    }
  }
}",0.8803001876172608
176317,"@Override public void persistRows(Map<HTableInterface,List<HBaseDataWrapper>> rows) throws IOException {
  List<Put> dataSet=new ArrayList<Put>(rows.size());
  for (  HTableInterface hTable : rows.keySet()) {
    List<HBaseDataWrapper> row=rows.get(hTable);
    for (    HBaseDataWrapper data : row) {
      dataSet.add(preparePut(data.getColumnFamily(),data.getRowKey(),data.getColumns(),data.getEntity()));
    }
    hTable.put(dataSet);
    dataSet.clear();
  }
}","@Override public void persistRows(Map<HTableInterface,List<HBaseDataWrapper>> rows) throws IOException {
  List<Put> dataSet=new ArrayList<Put>(rows.size());
  for (  HTableInterface hTable : rows.keySet()) {
    List<HBaseDataWrapper> row=rows.get(hTable);
    for (    HBaseDataWrapper data : row) {
      dataSet.add(preparePut(data.getColumnFamily(),data.getRowKey(),data.getColumns(),data.getValues()));
    }
    hTable.put(dataSet);
    dataSet.clear();
  }
}",0.9871244635193132
176318,"/** 
 * Prepare put.
 * @param columnFamily the column family
 * @param rowKey the row key
 * @param columns the columns
 * @param columnFamilyObj the column family obj
 * @return the put
 * @throws IOException Signals that an I/O exception has occurred.
 */
private Put preparePut(String columnFamily,Object rowKey,Map<String,Attribute> columns,Object columnFamilyObj) throws IOException {
  Put p=new Put(HBaseUtils.getBytes(rowKey));
  for (  String columnName : columns.keySet()) {
    Attribute column=columns.get(columnName);
    if (!column.isCollection() && !((SingularAttribute)column).isId()) {
      String qualifier=columnName;
      try {
        Object o=PropertyAccessorHelper.getObject(columnFamilyObj,(Field)column.getJavaMember());
        byte[] value=HBaseUtils.getBytes(o);
        if (value != null && columnFamily != null) {
          p.add(Bytes.toBytes(columnFamily),Bytes.toBytes(qualifier),value);
        }
      }
 catch (      PropertyAccessException e1) {
        throw new IOException(e1);
      }
    }
  }
  return p;
}","/** 
 * Prepare put.
 * @param columnFamily the column family
 * @param rowKey the row key
 * @param columns the columns
 * @param values TODO
 * @param columnFamilyObj the column family obj
 * @return the put
 * @throws IOException Signals that an I/O exception has occurred.
 */
private Put preparePut(String columnFamily,Object rowKey,Map<String,Attribute> columns,Map<String,Object> values) throws IOException {
  Put p=new Put(HBaseUtils.getBytes(rowKey));
  for (  String columnName : columns.keySet()) {
    Attribute column=columns.get(columnName);
    if (!column.isCollection() && !((SingularAttribute)column).isId()) {
      String qualifier=columnName;
      try {
        Object o=values.get(columnName);
        byte[] value=HBaseUtils.getBytes(o);
        if (value != null && columnFamily != null) {
          p.add(Bytes.toBytes(columnFamily),Bytes.toBytes(qualifier),value);
        }
      }
 catch (      PropertyAccessException e1) {
        throw new IOException(e1);
      }
    }
  }
  return p;
}",0.9286403085824494
176319,"/** 
 * Method to execute cql query and return back entity/enhance entities.
 * @param cqlQuery cql query to be executed.
 * @param clazz entity class.
 * @param relationalField collection for relational fields.
 * @return list of objects.
 */
@Override public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField){
  return super.executeQuery(cqlQuery,clazz,relationalField,dataHandler);
}","/** 
 * Method to execute cql query and return back entity/enhance entities.
 * @param cqlQuery cql query to be executed.
 * @param clazz entity class.
 * @param relationalField collection for relational fields.
 * @return list of objects.
 */
@Override public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField){
  return super.executeSelectQuery(cqlQuery,clazz,relationalField,dataHandler);
}",0.9927710843373494
176320,"/** 
 * On executeUpdate.
 * @return zero
 */
@Override protected int onExecuteUpdate(){
  EntityMetadata m=getEntityMetadata();
  if (KunderaMetadata.INSTANCE.getApplicationMetadata().isNative(getJPAQuery())) {
    ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeQuery(KunderaMetadata.INSTANCE.getApplicationMetadata().getQuery(getJPAQuery()),m.getEntityClazz(),null);
  }
 else   if (kunderaQuery.isDeleteUpdate()) {
    List result=getResultList();
    return result != null ? result.size() : 0;
  }
  return 0;
}","/** 
 * On executeUpdate.
 * @return zero
 */
@Override protected int onExecuteUpdate(){
  EntityMetadata m=getEntityMetadata();
  if (KunderaMetadata.INSTANCE.getApplicationMetadata().isNative(getJPAQuery())) {
    ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeQuery(KunderaMetadata.INSTANCE.getApplicationMetadata().getQuery(getJPAQuery()),m.getEntityClazz(),null);
  }
 else   if (kunderaQuery.isDeleteUpdate()) {
    if (!isQueryConvertibleToCQL(kunderaQuery)) {
      List result=getResultList();
      return result != null ? result.size() : 0;
    }
 else {
      String query=null;
      if (kunderaQuery.isUpdateClause()) {
        query=((CassandraClientBase)persistenceDelegeator.getClient(m)).createUpdateQuery(kunderaQuery);
      }
 else {
        query=((CassandraClientBase)persistenceDelegeator.getClient(m)).createDeleteQuery(kunderaQuery);
      }
      return ((CassandraClientBase)persistenceDelegeator.getClient(m)).executeUpdateDeleteQuery(query);
    }
  }
  return 0;
}",0.6895213454075032
176321,"/** 
 * Query related methods 
 */
@Override public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField){
  return super.executeQuery(cqlQuery,clazz,relationalField,dataHandler);
}","/** 
 * Query related methods 
 */
@Override public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField){
  return super.executeSelectQuery(cqlQuery,clazz,relationalField,dataHandler);
}",0.9854368932038836
176322,"/** 
 * Tests whether TTL provided while inserting records are correctly getting applied using CQL 3 Common TTL value for entire row is used
 * @throws Exception
 */
@Test public void testTTLonCQL3_0() throws Exception {
  if (propertyMap == null) {
    propertyMap=new HashMap();
    propertyMap.put(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE,""String_Node_Str"");
    propertyMap.put(CassandraConstants.CQL_VERSION,CassandraConstants.CQL_VERSION_3_0);
  }
  emf=Persistence.createEntityManagerFactory(SEC_IDX_CASSANDRA_TEST,propertyMap);
  em=emf.createEntityManager();
  Map<String,Integer> ttlValues=new HashMap<String,Integer>();
  ttlValues.put(""String_Node_Str"",new Integer(5));
  em.setProperty(""String_Node_Str"",true);
  em.setProperty(""String_Node_Str"",ttlValues);
  Object p1=prepareData(""String_Node_Str"",10);
  em.persist(p1);
  em.clear();
  PersonCassandra p=findById(PersonCassandra.class,""String_Node_Str"",em);
  SlicePredicate predicate=new SlicePredicate();
  predicate.setSlice_range(new SliceRange(Bytes.EMPTY.getBytes(),Bytes.EMPTY.getBytes(),true,10000));
  ByteBuffer key=ByteBuffer.wrap(""String_Node_Str"".getBytes());
  CassandraCli.client.set_keyspace(""String_Node_Str"");
  List<ColumnOrSuperColumn> columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  boolean personNameFound=false;
  boolean ageFound=false;
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(5,column.getTtl());
      personNameFound=true;
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(5,column.getTtl());
      ageFound=true;
    }
  }
  Assert.assertTrue(personNameFound && ageFound);
  Thread.sleep(5000);
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
  }
  Object p2=prepareData(""String_Node_Str"",10);
  em.persist(p2);
  em.clear();
  ttlValues=new HashMap<String,Integer>();
  ttlValues.put(""String_Node_Str"",new Integer(10));
  em.setProperty(""String_Node_Str"",true);
  em.setProperty(""String_Node_Str"",ttlValues);
  Query q=em.createQuery(""String_Node_Str"");
  q.executeUpdate();
  predicate=new SlicePredicate();
  predicate.setSlice_range(new SliceRange(Bytes.EMPTY.getBytes(),Bytes.EMPTY.getBytes(),true,10000));
  key=ByteBuffer.wrap(""String_Node_Str"".getBytes());
  CassandraCli.client.set_keyspace(""String_Node_Str"");
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  personNameFound=false;
  ageFound=false;
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(10,column.getTtl());
      personNameFound=true;
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(10,column.getTtl());
      ageFound=true;
    }
  }
  Assert.assertTrue(personNameFound && ageFound);
  Thread.sleep(10000);
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
  }
  ttlValues=new HashMap<String,Integer>();
  ttlValues.put(""String_Node_Str"",new Integer(10));
  em.setProperty(""String_Node_Str"",true);
  em.setProperty(""String_Node_Str"",ttlValues);
  Object p3=prepareData(""String_Node_Str"",10);
  em.persist(p3);
  em.clear();
  predicate=new SlicePredicate();
  predicate.setSlice_range(new SliceRange(Bytes.EMPTY.getBytes(),Bytes.EMPTY.getBytes(),true,10000));
  key=ByteBuffer.wrap(""String_Node_Str"".getBytes());
  CassandraCli.client.set_keyspace(""String_Node_Str"");
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  personNameFound=false;
  ageFound=false;
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(10,column.getTtl());
      personNameFound=true;
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(10,column.getTtl());
      ageFound=true;
    }
  }
  Assert.assertTrue(personNameFound && ageFound);
  Thread.sleep(10000);
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
  }
  Object p4=prepareData(""String_Node_Str"",10);
  em.persist(p4);
  em.clear();
  predicate=new SlicePredicate();
  predicate.setSlice_range(new SliceRange(Bytes.EMPTY.getBytes(),Bytes.EMPTY.getBytes(),true,10000));
  key=ByteBuffer.wrap(""String_Node_Str"".getBytes());
  CassandraCli.client.set_keyspace(""String_Node_Str"");
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  personNameFound=false;
  ageFound=false;
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(10,column.getTtl());
      personNameFound=true;
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(10,column.getTtl());
      ageFound=true;
    }
  }
  Assert.assertTrue(personNameFound && ageFound);
  Thread.sleep(10000);
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
  }
  String deleteQuery=""String_Node_Str"";
  q=em.createQuery(deleteQuery);
  Assert.assertEquals(0,q.executeUpdate());
}","/** 
 * Tests whether TTL provided while inserting records are correctly getting applied using CQL 3 Common TTL value for entire row is used
 * @throws Exception
 */
@Test public void testTTLonCQL3_0() throws Exception {
  if (propertyMap == null) {
    propertyMap=new HashMap();
    propertyMap.put(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE,""String_Node_Str"");
    propertyMap.put(CassandraConstants.CQL_VERSION,CassandraConstants.CQL_VERSION_3_0);
  }
  emf=Persistence.createEntityManagerFactory(SEC_IDX_CASSANDRA_TEST,propertyMap);
  em=emf.createEntityManager();
  Map<String,Integer> ttlValues=new HashMap<String,Integer>();
  ttlValues.put(""String_Node_Str"",new Integer(5));
  em.setProperty(""String_Node_Str"",true);
  em.setProperty(""String_Node_Str"",ttlValues);
  Object p1=prepareData(""String_Node_Str"",10);
  em.persist(p1);
  em.clear();
  PersonCassandra p=findById(PersonCassandra.class,""String_Node_Str"",em);
  SlicePredicate predicate=new SlicePredicate();
  predicate.setSlice_range(new SliceRange(Bytes.EMPTY.getBytes(),Bytes.EMPTY.getBytes(),true,10000));
  ByteBuffer key=ByteBuffer.wrap(""String_Node_Str"".getBytes());
  CassandraCli.client.set_keyspace(""String_Node_Str"");
  List<ColumnOrSuperColumn> columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  boolean personNameFound=false;
  boolean ageFound=false;
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(5,column.getTtl());
      personNameFound=true;
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(5,column.getTtl());
      ageFound=true;
    }
  }
  Assert.assertTrue(personNameFound && ageFound);
  Thread.sleep(5000);
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
  }
  Object p2=prepareData(""String_Node_Str"",10);
  em.persist(p2);
  em.clear();
  ttlValues=new HashMap<String,Integer>();
  ttlValues.put(""String_Node_Str"",new Integer(10));
  em.setProperty(""String_Node_Str"",true);
  em.setProperty(""String_Node_Str"",ttlValues);
  Query q=em.createQuery(""String_Node_Str"");
  q.executeUpdate();
  predicate=new SlicePredicate();
  predicate.setSlice_range(new SliceRange(Bytes.EMPTY.getBytes(),Bytes.EMPTY.getBytes(),true,10000));
  key=ByteBuffer.wrap(""String_Node_Str"".getBytes());
  CassandraCli.client.set_keyspace(""String_Node_Str"");
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  personNameFound=false;
  ageFound=false;
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(10,column.getTtl());
      personNameFound=true;
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(0,column.getTtl());
      ageFound=true;
    }
  }
  Assert.assertTrue(personNameFound && ageFound);
  Thread.sleep(10000);
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
  }
  ttlValues=new HashMap<String,Integer>();
  ttlValues.put(""String_Node_Str"",new Integer(10));
  em.setProperty(""String_Node_Str"",true);
  em.setProperty(""String_Node_Str"",ttlValues);
  Object p3=prepareData(""String_Node_Str"",10);
  em.persist(p3);
  em.clear();
  predicate=new SlicePredicate();
  predicate.setSlice_range(new SliceRange(Bytes.EMPTY.getBytes(),Bytes.EMPTY.getBytes(),true,10000));
  key=ByteBuffer.wrap(""String_Node_Str"".getBytes());
  CassandraCli.client.set_keyspace(""String_Node_Str"");
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  personNameFound=false;
  ageFound=false;
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(10,column.getTtl());
      personNameFound=true;
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(10,column.getTtl());
      ageFound=true;
    }
  }
  Assert.assertTrue(personNameFound && ageFound);
  Thread.sleep(10000);
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
  }
  Object p4=prepareData(""String_Node_Str"",10);
  em.persist(p4);
  em.clear();
  predicate=new SlicePredicate();
  predicate.setSlice_range(new SliceRange(Bytes.EMPTY.getBytes(),Bytes.EMPTY.getBytes(),true,10000));
  key=ByteBuffer.wrap(""String_Node_Str"".getBytes());
  CassandraCli.client.set_keyspace(""String_Node_Str"");
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  personNameFound=false;
  ageFound=false;
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(10,column.getTtl());
      personNameFound=true;
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.assertEquals(10,column.getTtl());
      ageFound=true;
    }
  }
  Assert.assertTrue(personNameFound && ageFound);
  Thread.sleep(10000);
  columnOrSuperColumns=CassandraCli.client.get_slice(key,new ColumnParent(""String_Node_Str""),predicate,ConsistencyLevel.ONE);
  for (  ColumnOrSuperColumn cosc : columnOrSuperColumns) {
    Column column=cosc.column;
    String columnName=new String(column.getName(),Constants.ENCODING);
    if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
 else     if (columnName.equals(""String_Node_Str"")) {
      Assert.fail(""String_Node_Str"");
    }
  }
  String deleteQuery=""String_Node_Str"";
  q=em.createQuery(deleteQuery);
  Assert.assertEquals(1,q.executeUpdate());
}",0.9930807700212372
176323,"/** 
 * On insert cassandra.
 * @throws Exception the exception
 */
@Test public void onInsertCassandra() throws Exception {
  Object p1=prepareData(""String_Node_Str"",10);
  Object p2=prepareData(""String_Node_Str"",20);
  Object p3=prepareData(""String_Node_Str"",15);
  Query findQuery=em.createQuery(""String_Node_Str"",PersonCassandra.class);
  List<PersonCassandra> allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  PersonCassandra personWithKey=new PersonCassandra();
  personWithKey.setPersonId(""String_Node_Str"");
  em.persist(personWithKey);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  em.clear();
  PersonCassandra p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  Assert.assertEquals(Day.THURSDAY,p.getDay());
  em.clear();
  String qry=""String_Node_Str"";
  Query q=em.createQuery(qry);
  List<PersonCassandra> persons=q.getResultList();
  assertFindByName(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAge(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeGTAndLT(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeBetween(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByRange(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindWithoutWhereClause(em,""String_Node_Str"",PersonCassandra.class);
  for (  PersonCassandra person : persons) {
    person.setPersonName(""String_Node_Str"");
    em.merge(person);
  }
  em.clear();
  selectIdQuery();
  em.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String updateQuery=""String_Node_Str"";
  q=em.createQuery(updateQuery);
  q.executeUpdate();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  testCountResult();
  String deleteQuery=""String_Node_Str"";
  q=em.createQuery(deleteQuery);
  Assert.assertEquals(3,q.executeUpdate());
}","/** 
 * On insert cassandra.
 * @throws Exception the exception
 */
@Test public void onInsertCassandra() throws Exception {
  Object p1=prepareData(""String_Node_Str"",10);
  Object p2=prepareData(""String_Node_Str"",20);
  Object p3=prepareData(""String_Node_Str"",15);
  Query findQuery=em.createQuery(""String_Node_Str"",PersonCassandra.class);
  List<PersonCassandra> allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  PersonCassandra personWithKey=new PersonCassandra();
  personWithKey.setPersonId(""String_Node_Str"");
  em.persist(personWithKey);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  em.clear();
  PersonCassandra p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  Assert.assertEquals(Day.THURSDAY,p.getDay());
  em.clear();
  String qry=""String_Node_Str"";
  Query q=em.createQuery(qry);
  List<PersonCassandra> persons=q.getResultList();
  assertFindByName(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAge(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeGTAndLT(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeBetween(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByRange(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindWithoutWhereClause(em,""String_Node_Str"",PersonCassandra.class);
  for (  PersonCassandra person : persons) {
    person.setPersonName(""String_Node_Str"");
    em.merge(person);
  }
  em.clear();
  selectIdQuery();
  em.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String updateQuery=""String_Node_Str"";
  q=em.createQuery(updateQuery);
  q.executeUpdate();
  em.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  testCountResult();
  String deleteQuery=""String_Node_Str"";
  q=em.createQuery(deleteQuery);
  Assert.assertEquals(3,q.executeUpdate());
}",0.9975524475524477
176324,"/** 
 * Appends a object of type   {@link java.util.List}
 * @param builder
 * @param value
 * @return
 */
private boolean appendMap(StringBuilder builder,Object value){
  boolean isPresent;
  isPresent=true;
  Map map=((Map)value);
  if (!map.isEmpty()) {
    builder.append(""String_Node_Str"");
    for (    Object mapKey : map.keySet()) {
      Object mapValue=map.get(mapKey);
      if (mapKey != null && mapValue != null) {
        appendValue(builder,mapKey.getClass(),mapKey);
        builder.append(""String_Node_Str"");
        appendValue(builder,mapValue.getClass(),mapValue);
      }
      builder.append(""String_Node_Str"");
    }
    builder.deleteCharAt(builder.length() - 1);
    builder.append(""String_Node_Str"");
  }
  return isPresent;
}","/** 
 * Appends a object of type   {@link java.util.List}
 * @param builder
 * @param value
 * @return
 */
private boolean appendMap(StringBuilder builder,Object value){
  boolean isPresent=false;
  Map map=((Map)value);
  if (!map.isEmpty()) {
    isPresent=true;
    builder.append(""String_Node_Str"");
    for (    Object mapKey : map.keySet()) {
      Object mapValue=map.get(mapKey);
      if (mapKey != null && mapValue != null) {
        appendValue(builder,mapKey.getClass(),mapKey);
        builder.append(""String_Node_Str"");
        appendValue(builder,mapValue.getClass(),mapValue);
      }
      builder.append(""String_Node_Str"");
    }
    builder.deleteCharAt(builder.length() - 1);
    builder.append(""String_Node_Str"");
  }
  return isPresent;
}",0.9285714285714286
176325,"/** 
 * Appends a object of type   {@link java.util.Map}
 * @param builder
 * @param value
 * @return
 */
private boolean appendSet(StringBuilder builder,Object value){
  boolean isPresent;
  isPresent=true;
  Collection collection=((Collection)value);
  if (!collection.isEmpty()) {
    builder.append(""String_Node_Str"");
    for (    Object o : collection) {
      if (o != null) {
        appendValue(builder,o.getClass(),o);
      }
      builder.append(""String_Node_Str"");
    }
    builder.deleteCharAt(builder.length() - 1);
    builder.append(""String_Node_Str"");
  }
  return isPresent;
}","/** 
 * Appends a object of type   {@link java.util.Map}
 * @param builder
 * @param value
 * @return
 */
private boolean appendSet(StringBuilder builder,Object value){
  boolean isPresent=false;
  Collection collection=((Collection)value);
  if (!collection.isEmpty()) {
    isPresent=true;
    builder.append(""String_Node_Str"");
    for (    Object o : collection) {
      if (o != null) {
        appendValue(builder,o.getClass(),o);
      }
      builder.append(""String_Node_Str"");
    }
    builder.deleteCharAt(builder.length() - 1);
    builder.append(""String_Node_Str"");
  }
  return isPresent;
}",0.9666666666666668
176326,"/** 
 * Appends a object of type   {@link java.util.List}
 * @param builder
 * @param value
 * @return
 */
private boolean appendList(StringBuilder builder,Object value){
  boolean isPresent;
  isPresent=true;
  Collection collection=((Collection)value);
  if (!collection.isEmpty()) {
    builder.append(""String_Node_Str"");
    for (    Object o : collection) {
      if (o != null) {
        appendValue(builder,o.getClass(),o);
      }
      builder.append(""String_Node_Str"");
    }
    builder.deleteCharAt(builder.length() - 1);
    builder.append(""String_Node_Str"");
  }
  return isPresent;
}","/** 
 * Appends a object of type   {@link java.util.List}
 * @param builder
 * @param value
 * @return
 */
private boolean appendList(StringBuilder builder,Object value){
  boolean isPresent=false;
  Collection collection=((Collection)value);
  if (!collection.isEmpty()) {
    isPresent=true;
    builder.append(""String_Node_Str"");
    for (    Object o : collection) {
      if (o != null) {
        appendValue(builder,o.getClass(),o);
      }
      builder.append(""String_Node_Str"");
    }
    builder.deleteCharAt(builder.length() - 1);
    builder.append(""String_Node_Str"");
  }
  return isPresent;
}",0.9667774086378738
176327,"/** 
 * Gets the pool config policy.
 * @param persistenceUnitMetadata the persistence unit metadata
 * @param puProperties
 * @return the pool config policy
 */
public static PoolConfiguration setPoolConfigPolicy(CassandraHost cassandraHost,PoolConfiguration prop){
  int maxActivePerNode=cassandraHost.getMaxActive();
  int maxIdlePerNode=cassandraHost.getMaxIdle();
  int minIdlePerNode=cassandraHost.getMinIdle();
  int maxTotal=cassandraHost.getMaxTotal();
  boolean testOnBorrow=cassandraHost.isTestOnBorrow();
  boolean testWhileIdle=cassandraHost.isTestWhileIdle();
  boolean testOnConnect=cassandraHost.isTestOnConnect();
  boolean testOnReturn=cassandraHost.isTestOnReturn();
  int socketTimeOut=cassandraHost.getSocketTimeOut();
  int maxWaitInMilli=cassandraHost.getMaxWait();
  HostFailoverPolicy paramHostFailoverPolicy=cassandraHost.getHostFailoverPolicy();
  if (maxActivePerNode > 0) {
    prop.setInitialSize(maxActivePerNode);
    prop.setMaxActive(maxActivePerNode);
  }
  if (maxIdlePerNode > 0) {
    prop.setMaxIdle(maxIdlePerNode);
  }
  if (minIdlePerNode > 0) {
    prop.setMinIdle(minIdlePerNode);
  }
  if (maxTotal > 0) {
    prop.setMaxActive(maxTotal);
  }
  prop.setSocketTimeout(socketTimeOut);
  prop.setTestOnBorrow(testOnBorrow);
  prop.setTestOnConnect(testOnConnect);
  prop.setTestOnReturn(testOnReturn);
  prop.setTestWhileIdle(testWhileIdle);
  prop.setFailoverPolicy(paramHostFailoverPolicy);
  prop.setMaxWait(maxWaitInMilli);
  return prop;
}","/** 
 * Gets the pool config policy.
 * @param persistenceUnitMetadata the persistence unit metadata
 * @param puProperties
 * @return the pool config policy
 */
public static PoolConfiguration setPoolConfigPolicy(CassandraHost cassandraHost,PoolConfiguration prop){
  int maxActivePerNode=cassandraHost.getMaxActive();
  int maxIdlePerNode=cassandraHost.getMaxIdle();
  int minIdlePerNode=cassandraHost.getMinIdle();
  int maxTotal=cassandraHost.getMaxTotal();
  boolean testOnBorrow=cassandraHost.isTestOnBorrow();
  boolean testWhileIdle=cassandraHost.isTestWhileIdle();
  boolean testOnConnect=cassandraHost.isTestOnConnect();
  boolean testOnReturn=cassandraHost.isTestOnReturn();
  int socketTimeOut=cassandraHost.getSocketTimeOut();
  int maxWaitInMilli=cassandraHost.getMaxWait();
  HostFailoverPolicy paramHostFailoverPolicy=cassandraHost.getHostFailoverPolicy();
  if (maxActivePerNode > 0) {
    prop.setInitialSize(maxActivePerNode);
    prop.setMaxActive(maxActivePerNode);
  }
  if (maxIdlePerNode > 0) {
    prop.setMaxIdle(maxIdlePerNode);
  }
  if (minIdlePerNode > 0) {
    prop.setMinIdle(minIdlePerNode);
  }
  if (maxTotal > 0) {
    prop.setMaxActive(maxTotal);
  }
  if (cassandraHost.getUser() != null) {
    prop.setUsername(cassandraHost.getUser());
    prop.setPassword(cassandraHost.getPassword());
  }
  prop.setSocketTimeout(socketTimeOut);
  prop.setTestOnBorrow(testOnBorrow);
  prop.setTestOnConnect(testOnConnect);
  prop.setTestOnReturn(testOnReturn);
  prop.setTestWhileIdle(testWhileIdle);
  prop.setFailoverPolicy(paramHostFailoverPolicy);
  prop.setMaxWait(maxWaitInMilli);
  return prop;
}",0.9540930979133226
176328,"/** 
 * Generates schema for Collection columns 
 * @param translator
 * @param collectionColumnInfos
 * @param queryBuilder
 */
private void onCollectionColumns(CQLTranslator translator,List<CollectionColumnInfo> collectionColumnInfos,StringBuilder queryBuilder){
  for (  CollectionColumnInfo cci : collectionColumnInfos) {
    String dataType=CassandraValidationClassMapper.getValidationClass(cci.getType(),true);
    String collectionCqlType=translator.getCQLType(dataType);
    String collectionColumnName=new String(cci.getCollectionColumnName());
    StringBuilder genericTypesBuilder=null;
    List<Class<?>> genericClasses=cci.getGenericClasses();
    if (!genericClasses.isEmpty()) {
      genericTypesBuilder=new StringBuilder();
      if (MapType.class.getSimpleName().equals(dataType) && genericClasses.size() == 2) {
        genericTypesBuilder.append(""String_Node_Str"");
        String keyDataType=CassandraValidationClassMapper.getValidationClass(genericClasses.get(0),true);
        genericTypesBuilder.append(translator.getCQLType(keyDataType));
        genericTypesBuilder.append(""String_Node_Str"");
        String valueDataType=CassandraValidationClassMapper.getValidationClass(genericClasses.get(1),true);
        genericTypesBuilder.append(translator.getCQLType(valueDataType));
        genericTypesBuilder.append(""String_Node_Str"");
      }
 else       if ((ListType.class.getSimpleName().equals(dataType) || SetType.class.getSimpleName().equals(dataType)) && genericClasses.size() == 1) {
        genericTypesBuilder.append(""String_Node_Str"");
        String valueDataType=CassandraValidationClassMapper.getValidationClass(genericClasses.get(0),true);
        genericTypesBuilder.append(translator.getCQLType(valueDataType));
        genericTypesBuilder.append(""String_Node_Str"");
      }
 else {
        throw new SchemaGenerationException(""String_Node_Str"" + cci.getCollectionColumnName() + ""String_Node_Str"");
      }
    }
    if (genericTypesBuilder != null) {
      collectionCqlType+=genericTypesBuilder.toString();
    }
    translator.appendColumnName(queryBuilder,collectionColumnName,collectionCqlType);
    queryBuilder.append(""String_Node_Str"");
  }
}","/** 
 * Generates schema for Collection columns
 * @param translator
 * @param collectionColumnInfos
 * @param queryBuilder
 */
private void onCollectionColumns(CQLTranslator translator,List<CollectionColumnInfo> collectionColumnInfos,StringBuilder queryBuilder){
  for (  CollectionColumnInfo cci : collectionColumnInfos) {
    String dataType=CassandraValidationClassMapper.getValidationClass(cci.getType(),true);
    String collectionCqlType=translator.getCQLType(dataType);
    String collectionColumnName=new String(cci.getCollectionColumnName());
    StringBuilder genericTypesBuilder=null;
    List<Class<?>> genericClasses=cci.getGenericClasses();
    if (!genericClasses.isEmpty()) {
      genericTypesBuilder=new StringBuilder();
      if (MapType.class.getSimpleName().equals(dataType) && genericClasses.size() == 2) {
        genericTypesBuilder.append(""String_Node_Str"");
        String keyDataType=CassandraValidationClassMapper.getValidationClass(genericClasses.get(0),true);
        genericTypesBuilder.append(translator.getCQLType(keyDataType));
        genericTypesBuilder.append(""String_Node_Str"");
        String valueDataType=CassandraValidationClassMapper.getValidationClass(genericClasses.get(1),true);
        genericTypesBuilder.append(translator.getCQLType(valueDataType));
        genericTypesBuilder.append(""String_Node_Str"");
      }
 else       if ((ListType.class.getSimpleName().equals(dataType) || SetType.class.getSimpleName().equals(dataType)) && genericClasses.size() == 1) {
        genericTypesBuilder.append(""String_Node_Str"");
        String valueDataType=CassandraValidationClassMapper.getValidationClass(genericClasses.get(0),true);
        genericTypesBuilder.append(translator.getCQLType(valueDataType));
        genericTypesBuilder.append(""String_Node_Str"");
      }
 else {
        throw new SchemaGenerationException(""String_Node_Str"" + cci.getCollectionColumnName() + ""String_Node_Str"");
      }
    }
    if (genericTypesBuilder != null) {
      collectionCqlType+=genericTypesBuilder.toString();
    }
    translator.appendColumnName(queryBuilder,collectionColumnName,collectionCqlType);
    queryBuilder.append(""String_Node_Str"");
  }
}",0.9997714285714284
176329,"/** 
 * initiate client method initiates the client.
 * @return boolean value ie client started or not.
 */
protected boolean initiateClient(){
  Throwable message=null;
  for (  String host : hosts) {
    if (host == null || !StringUtils.isNumeric(port) || port.isEmpty()) {
      log.error(""String_Node_Str"");
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    TSocket socket=new TSocket(host,Integer.parseInt(port));
    TTransport transport=new TFramedTransport(socket);
    TProtocol protocol=new TBinaryProtocol(transport);
    cassandra_client=new Cassandra.Client(protocol);
    try {
      if (!socket.isOpen()) {
        socket.open();
      }
      return true;
    }
 catch (    TTransportException e) {
      message=e;
      log.warn(""String_Node_Str"",host);
    }
catch (    NumberFormatException e) {
      log.error(""String_Node_Str"",e);
      throw new SchemaGenerationException(e,""String_Node_Str"");
    }
  }
  throw new SchemaGenerationException(""String_Node_Str"",message,""String_Node_Str"");
}","/** 
 * initiate client method initiates the client.
 * @return boolean value ie client started or not.
 */
protected boolean initiateClient(){
  Throwable message=null;
  for (  String host : hosts) {
    if (host == null || !StringUtils.isNumeric(port) || port.isEmpty()) {
      log.error(""String_Node_Str"");
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    TSocket socket=new TSocket(host,Integer.parseInt(port));
    TTransport transport=new TFramedTransport(socket);
    TProtocol protocol=new TBinaryProtocol(transport);
    cassandra_client=new Cassandra.Client(protocol);
    try {
      if (!socket.isOpen()) {
        socket.open();
        if (userName != null) {
          Map<String,String> credentials=new HashMap<String,String>();
          credentials.put(""String_Node_Str"",userName);
          credentials.put(""String_Node_Str"",password);
          AuthenticationRequest auth_request=new AuthenticationRequest(credentials);
          cassandra_client.login(auth_request);
        }
      }
      return true;
    }
 catch (    TTransportException e) {
      message=e;
      log.warn(""String_Node_Str"",host);
    }
catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      throw new SchemaGenerationException(e,""String_Node_Str"");
    }
  }
  throw new SchemaGenerationException(""String_Node_Str"",message,""String_Node_Str"");
}",0.8474295190713101
176330,"/** 
 * @param pu
 */
private void readConfigProperties(final PersistenceUnitMetadata puMetadata){
  String hostName=null;
  String portName=null;
  String operationType=null;
  String schemaName=null;
  if (externalProperties != null) {
    portName=(String)externalProperties.get(PersistenceProperties.KUNDERA_PORT);
    hostName=(String)externalProperties.get(PersistenceProperties.KUNDERA_NODES);
    schemaName=(String)externalProperties.get(PersistenceProperties.KUNDERA_KEYSPACE);
    operationType=(String)externalProperties.get(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE);
  }
  if (portName == null)   portName=puMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_PORT);
  if (hostName == null)   hostName=puMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_NODES);
  if (schemaName == null)   schemaName=puMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_KEYSPACE);
  if (operationType == null)   operationType=puMetadata.getProperty(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE);
  String[] hostArray=hostName.split(""String_Node_Str"");
  hosts=new String[hostArray.length];
  for (int i=0; i < hostArray.length; i++) {
    hosts[i]=hostArray[i].trim();
  }
  this.port=portName;
  this.databaseName=schemaName;
  this.operation=operationType;
}","/** 
 * @param pu
 */
private void readConfigProperties(final PersistenceUnitMetadata puMetadata){
  String hostName=null;
  String portName=null;
  String operationType=null;
  String schemaName=null;
  if (externalProperties != null) {
    portName=(String)externalProperties.get(PersistenceProperties.KUNDERA_PORT);
    hostName=(String)externalProperties.get(PersistenceProperties.KUNDERA_NODES);
    userName=(String)externalProperties.get(PersistenceProperties.KUNDERA_USERNAME);
    password=(String)externalProperties.get(PersistenceProperties.KUNDERA_PASSWORD);
    schemaName=(String)externalProperties.get(PersistenceProperties.KUNDERA_KEYSPACE);
    operationType=(String)externalProperties.get(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE);
  }
  if (portName == null)   portName=puMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_PORT);
  if (hostName == null)   hostName=puMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_NODES);
  if (schemaName == null)   schemaName=puMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_KEYSPACE);
  if (operationType == null)   operationType=puMetadata.getProperty(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE);
  if (userName == null) {
    userName=puMetadata.getProperty(PersistenceProperties.KUNDERA_USERNAME);
    password=puMetadata.getProperty(PersistenceProperties.KUNDERA_PASSWORD);
  }
  String[] hostArray=hostName.split(""String_Node_Str"");
  hosts=new String[hostArray.length];
  for (int i=0; i < hostArray.length; i++) {
    hosts[i]=hostArray[i].trim();
  }
  this.port=portName;
  this.databaseName=schemaName;
  this.operation=operationType;
}",0.8812080536912752
176331,"/** 
 * @param source
 * @param mainCache TODO
 * @return
 */
private static Object deepCopyUsingMetadata(Object source,Map<Object,Object> copiedObjectMap){
  Object target=null;
  try {
    if (source == null)     return null;
    Class<?> sourceObjectClass=source.getClass();
    EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(sourceObjectClass);
    if (metadata == null) {
      return source;
    }
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
    EntityType entityType=metaModel.entity(sourceObjectClass);
    Object id=null;
    if (metadata.getRelations() != null && !metadata.getRelations().isEmpty()) {
      id=PropertyAccessorHelper.getId(source,metadata);
      StringBuilder keyBuilder=new StringBuilder(sourceObjectClass.getName());
      keyBuilder.append(""String_Node_Str"");
      keyBuilder.append(id);
      Object copiedObjectInMap=copiedObjectMap.get(keyBuilder.toString());
      if (copiedObjectInMap != null) {
        return copiedObjectInMap;
      }
    }
    target=sourceObjectClass.newInstance();
    Iterator<Attribute> iter=entityType.getAttributes().iterator();
    while (iter.hasNext()) {
      Attribute attrib=iter.next();
      Field columnField=(Field)attrib.getJavaMember();
      if (attrib.getPersistentAttributeType().equals(PersistentAttributeType.EMBEDDED) || attrib.getPersistentAttributeType().equals(PersistentAttributeType.ELEMENT_COLLECTION)) {
        EmbeddableType embeddedColumn=metaModel.embeddable(((AbstractAttribute)attrib).getBindableJavaType());
        Object sourceEmbeddedObj=PropertyAccessorHelper.getObject(source,columnField);
        if (sourceEmbeddedObj != null) {
          if (columnField.getAnnotation(Embedded.class) != null) {
            Class<?> embeddedColumnClass=columnField.getType();
            Object targetEmbeddedObj=embeddedColumnClass.newInstance();
            Set<Attribute> columns=embeddedColumn.getAttributes();
            for (            Attribute column : columns) {
              PropertyAccessorHelper.set(targetEmbeddedObj,(Field)column.getJavaMember(),PropertyAccessorHelper.getObjectCopy(sourceEmbeddedObj,(Field)column.getJavaMember()));
            }
            PropertyAccessorHelper.set(target,columnField,targetEmbeddedObj);
          }
 else           if (columnField.getAnnotation(ElementCollection.class) != null) {
            Class<?> ecDeclaredClass=columnField.getType();
            Class<?> actualEcObjectClass=sourceEmbeddedObj.getClass();
            Object targetCollectionObject;
            targetCollectionObject=actualEcObjectClass.newInstance();
            if (sourceEmbeddedObj instanceof Collection) {
              Class<?> genericClass=PropertyAccessorHelper.getGenericClass(columnField);
              for (              Object sourceEcObj : (Collection)sourceEmbeddedObj) {
                Object targetEcObj=null;
                if (PersistenceType.BASIC.equals(embeddedColumn.getPersistenceType())) {
                  PropertyAccessor accessor=PropertyAccessorFactory.getPropertyAccessor(sourceEcObj.getClass());
                  if (accessor != null) {
                    targetEcObj=accessor.getCopy(sourceEcObj);
                  }
                }
 else                 if (PersistenceType.EMBEDDABLE.equals(embeddedColumn.getPersistenceType())) {
                  targetEcObj=genericClass.newInstance();
                  for (                  Field f : genericClass.getDeclaredFields()) {
                    if (f != null && !Modifier.isStatic(f.getModifiers())) {
                      PropertyAccessorHelper.set(targetEcObj,f,PropertyAccessorHelper.getObjectCopy(sourceEcObj,f));
                    }
                  }
                }
                if (List.class.isAssignableFrom(ecDeclaredClass)) {
                  Method m=actualEcObjectClass.getMethod(""String_Node_Str"",Object.class);
                  m.invoke(targetCollectionObject,targetEcObj);
                }
 else                 if (Set.class.isAssignableFrom(ecDeclaredClass)) {
                  Method m=actualEcObjectClass.getMethod(""String_Node_Str"",Object.class);
                  m.invoke(targetCollectionObject,targetEcObj);
                }
              }
            }
 else             if (sourceEmbeddedObj instanceof Map) {
              for (              Object sourceKey : ((Map)sourceEmbeddedObj).keySet()) {
                Object targetKey=null;
                Object targetValue=null;
                if (PersistenceType.BASIC.equals(embeddedColumn.getPersistenceType())) {
                  PropertyAccessor keyAccessor=PropertyAccessorFactory.getPropertyAccessor(sourceKey.getClass());
                  if (keyAccessor != null) {
                    targetKey=keyAccessor.getCopy(sourceKey);
                  }
                  Object sourceValue=((Map)sourceEmbeddedObj).get(sourceKey);
                  PropertyAccessor valueAccessor=PropertyAccessorFactory.getPropertyAccessor(sourceValue.getClass());
                  if (valueAccessor != null) {
                    targetValue=valueAccessor.getCopy(sourceValue);
                  }
                  if (Map.class.isAssignableFrom(ecDeclaredClass)) {
                    Method m=actualEcObjectClass.getMethod(""String_Node_Str"",new Class[]{Object.class,Object.class});
                    m.invoke(targetCollectionObject,new Object[]{targetKey,targetValue});
                  }
                }
              }
            }
            PropertyAccessorHelper.set(target,columnField,targetCollectionObject);
          }
 else           if (columnField.getAnnotation(javax.persistence.Column.class) != null) {
            PropertyAccessorHelper.set(target,columnField,sourceEmbeddedObj);
          }
        }
      }
 else       if (attrib.getPersistentAttributeType().equals(PersistentAttributeType.BASIC)) {
        PropertyAccessorHelper.set(target,columnField,PropertyAccessorHelper.getObjectCopy(source,columnField));
      }
    }
    if (id != null) {
      StringBuilder keyBuilder=new StringBuilder(sourceObjectClass.getName());
      keyBuilder.append(""String_Node_Str"");
      keyBuilder.append(id);
      copiedObjectMap.put(keyBuilder.toString(),target);
    }
    for (    Relation relation : metadata.getRelations()) {
      Field relationField=relation.getProperty();
      Object sourceRelationObject=PropertyAccessorHelper.getObject(source,relationField);
      if (sourceRelationObject != null) {
        if (sourceRelationObject instanceof KunderaProxy) {
          PropertyAccessorHelper.set(target,relationField,sourceRelationObject);
          continue;
        }
 else         if (ProxyHelper.isPersistentCollection(sourceRelationObject)) {
          PropertyAccessorHelper.set(target,relationField,sourceRelationObject);
          continue;
        }
 else         if (ProxyHelper.isKunderaProxyCollection(sourceRelationObject)) {
          ProxyCollection pc=((ProxyCollection)sourceRelationObject).getCopy();
          pc.setOwner(target);
          PropertyAccessorHelper.set(target,relationField,pc);
          continue;
        }
        Object targetRelationObject=null;
        Class<?> relationObjectClass=relation.getProperty().getType();
        Class<?> actualRelationObjectClass=sourceRelationObject.getClass();
        if (Collection.class.isAssignableFrom(relationObjectClass)) {
          targetRelationObject=actualRelationObjectClass.newInstance();
          Method m=actualRelationObjectClass.getMethod(""String_Node_Str"",Object.class);
          for (          Object obj : (Collection)sourceRelationObject) {
            Object copyTargetRelObj=searchInCacheThenCopy(copiedObjectMap,obj);
            m.invoke(targetRelationObject,copyTargetRelObj);
          }
        }
 else         if (Map.class.isAssignableFrom(relationObjectClass)) {
          targetRelationObject=actualRelationObjectClass.newInstance();
          Method m=actualRelationObjectClass.getMethod(""String_Node_Str"",new Class<?>[]{Object.class,Object.class});
          for (          Object keyObj : ((Map)sourceRelationObject).keySet()) {
            Object valObj=((Map)sourceRelationObject).get(keyObj);
            Object copyTargetKeyObj=searchInCacheThenCopy(copiedObjectMap,keyObj);
            Object copyTargetValueObj=searchInCacheThenCopy(copiedObjectMap,valObj);
            m.invoke(targetRelationObject,new Object[]{copyTargetKeyObj,copyTargetValueObj});
          }
        }
 else {
          targetRelationObject=searchInCacheThenCopy(copiedObjectMap,sourceRelationObject);
        }
        PropertyAccessorHelper.set(target,relationField,targetRelationObject);
      }
    }
  }
 catch (  InstantiationException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
catch (  IllegalAccessException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
catch (  InvocationTargetException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
catch (  NoSuchMethodException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
  return target;
}","/** 
 * @param source
 * @param mainCache TODO
 * @return
 */
private static Object deepCopyUsingMetadata(Object source,Map<Object,Object> copiedObjectMap){
  Object target=null;
  try {
    if (source == null)     return null;
    Class<?> sourceObjectClass=source.getClass();
    EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(sourceObjectClass);
    if (metadata == null) {
      return source;
    }
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
    EntityType entityType=metaModel.entity(sourceObjectClass);
    Object id=null;
    if (metadata.getRelations() != null && !metadata.getRelations().isEmpty()) {
      id=PropertyAccessorHelper.getId(source,metadata);
      StringBuilder keyBuilder=new StringBuilder(sourceObjectClass.getName());
      keyBuilder.append(""String_Node_Str"");
      keyBuilder.append(id);
      Object copiedObjectInMap=copiedObjectMap.get(keyBuilder.toString());
      if (copiedObjectInMap != null) {
        return copiedObjectInMap;
      }
    }
    target=sourceObjectClass.newInstance();
    Iterator<Attribute> iter=entityType.getAttributes().iterator();
    while (iter.hasNext()) {
      Attribute attrib=iter.next();
      Field columnField=(Field)attrib.getJavaMember();
      if (attrib.getPersistentAttributeType().equals(PersistentAttributeType.EMBEDDED) || attrib.getPersistentAttributeType().equals(PersistentAttributeType.ELEMENT_COLLECTION)) {
        EmbeddableType embeddedColumn=metaModel.embeddable(((AbstractAttribute)attrib).getBindableJavaType());
        Object sourceEmbeddedObj=PropertyAccessorHelper.getObject(source,columnField);
        if (sourceEmbeddedObj != null) {
          if (columnField.getAnnotation(Embedded.class) != null) {
            Class<?> embeddedColumnClass=columnField.getType();
            Object targetEmbeddedObj=embeddedColumnClass.newInstance();
            Set<Attribute> columns=embeddedColumn.getAttributes();
            for (            Attribute column : columns) {
              PropertyAccessorHelper.set(targetEmbeddedObj,(Field)column.getJavaMember(),PropertyAccessorHelper.getObjectCopy(sourceEmbeddedObj,(Field)column.getJavaMember()));
            }
            PropertyAccessorHelper.set(target,columnField,targetEmbeddedObj);
          }
 else           if (columnField.getAnnotation(ElementCollection.class) != null) {
            Class<?> ecDeclaredClass=columnField.getType();
            Class<?> actualEcObjectClass=sourceEmbeddedObj.getClass();
            Object targetCollectionObject;
            targetCollectionObject=actualEcObjectClass.newInstance();
            if (sourceEmbeddedObj instanceof Collection) {
              Class<?> genericClass=PropertyAccessorHelper.getGenericClass(columnField);
              for (              Object sourceEcObj : (Collection)sourceEmbeddedObj) {
                Object targetEcObj=null;
                if (PersistenceType.BASIC.equals(embeddedColumn.getPersistenceType())) {
                  PropertyAccessor accessor=PropertyAccessorFactory.getPropertyAccessor(sourceEcObj.getClass());
                  if (accessor != null) {
                    targetEcObj=accessor.getCopy(sourceEcObj);
                  }
                }
 else                 if (PersistenceType.EMBEDDABLE.equals(embeddedColumn.getPersistenceType())) {
                  targetEcObj=genericClass.newInstance();
                  for (                  Field f : genericClass.getDeclaredFields()) {
                    if (f != null && !Modifier.isStatic(f.getModifiers())) {
                      PropertyAccessorHelper.set(targetEcObj,f,PropertyAccessorHelper.getObjectCopy(sourceEcObj,f));
                    }
                  }
                }
                if (List.class.isAssignableFrom(ecDeclaredClass)) {
                  Method m=actualEcObjectClass.getMethod(""String_Node_Str"",Object.class);
                  m.invoke(targetCollectionObject,targetEcObj);
                }
 else                 if (Set.class.isAssignableFrom(ecDeclaredClass)) {
                  Method m=actualEcObjectClass.getMethod(""String_Node_Str"",Object.class);
                  m.invoke(targetCollectionObject,targetEcObj);
                }
              }
            }
 else             if (sourceEmbeddedObj instanceof Map) {
              for (              Object sourceKey : ((Map)sourceEmbeddedObj).keySet()) {
                Object targetKey=null;
                Object targetValue=null;
                if (PersistenceType.BASIC.equals(embeddedColumn.getPersistenceType())) {
                  PropertyAccessor keyAccessor=PropertyAccessorFactory.getPropertyAccessor(sourceKey.getClass());
                  if (keyAccessor != null) {
                    targetKey=keyAccessor.getCopy(sourceKey);
                  }
                  Object sourceValue=((Map)sourceEmbeddedObj).get(sourceKey);
                  PropertyAccessor valueAccessor=PropertyAccessorFactory.getPropertyAccessor(sourceValue.getClass());
                  if (valueAccessor != null) {
                    targetValue=valueAccessor.getCopy(sourceValue);
                  }
                  if (Map.class.isAssignableFrom(ecDeclaredClass)) {
                    Method m=actualEcObjectClass.getMethod(""String_Node_Str"",new Class[]{Object.class,Object.class});
                    m.invoke(targetCollectionObject,new Object[]{targetKey,targetValue});
                  }
                }
              }
            }
            PropertyAccessorHelper.set(target,columnField,targetCollectionObject);
          }
 else           if (columnField.getAnnotation(javax.persistence.Column.class) != null) {
            PropertyAccessorHelper.set(target,columnField,sourceEmbeddedObj);
          }
        }
      }
 else       if (attrib.getPersistentAttributeType().equals(PersistentAttributeType.BASIC)) {
        PropertyAccessorHelper.set(target,columnField,PropertyAccessorHelper.getObjectCopy(source,columnField));
      }
    }
    if (id != null) {
      StringBuilder keyBuilder=new StringBuilder(sourceObjectClass.getName());
      keyBuilder.append(""String_Node_Str"");
      keyBuilder.append(id);
      copiedObjectMap.put(keyBuilder.toString(),target);
    }
    for (    Relation relation : metadata.getRelations()) {
      Field relationField=relation.getProperty();
      Object sourceRelationObject=PropertyAccessorHelper.getObject(source,relationField);
      if (sourceRelationObject != null) {
        if (sourceRelationObject instanceof KunderaProxy) {
          PropertyAccessorHelper.set(target,relationField,sourceRelationObject);
          continue;
        }
 else         if (ProxyHelper.isPersistentCollection(sourceRelationObject)) {
          PropertyAccessorHelper.set(target,relationField,sourceRelationObject);
          continue;
        }
 else         if (ProxyHelper.isKunderaProxyCollection(sourceRelationObject)) {
          ProxyCollection pc=((ProxyCollection)sourceRelationObject).getCopy();
          pc.setOwner(target);
          PropertyAccessorHelper.set(target,relationField,pc);
          continue;
        }
        Object targetRelationObject=null;
        Class<?> relationObjectClass=relation.getProperty().getType();
        Class<?> actualRelationObjectClass=sourceRelationObject.getClass();
        if (Collection.class.isAssignableFrom(relationObjectClass)) {
          targetRelationObject=actualRelationObjectClass.newInstance();
          Method m=actualRelationObjectClass.getMethod(""String_Node_Str"",Object.class);
          for (          Object obj : (Collection)sourceRelationObject) {
            Object copyTargetRelObj=searchInCacheThenCopy(copiedObjectMap,obj);
            m.invoke(targetRelationObject,copyTargetRelObj);
          }
        }
 else         if (Map.class.isAssignableFrom(relationObjectClass)) {
          targetRelationObject=actualRelationObjectClass.newInstance();
          Method m=actualRelationObjectClass.getMethod(""String_Node_Str"",new Class<?>[]{Object.class,Object.class});
          for (          Object keyObj : ((Map)sourceRelationObject).keySet()) {
            Object valObj=((Map)sourceRelationObject).get(keyObj);
            Object copyTargetKeyObj=searchInCacheThenCopy(copiedObjectMap,keyObj);
            Object copyTargetValueObj=searchInCacheThenCopy(copiedObjectMap,valObj);
            m.invoke(targetRelationObject,new Object[]{copyTargetKeyObj,copyTargetValueObj});
          }
        }
 else {
          targetRelationObject=searchInCacheThenCopy(copiedObjectMap,sourceRelationObject);
        }
        PropertyAccessorHelper.set(target,relationField,targetRelationObject);
      }
    }
  }
 catch (  InstantiationException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
catch (  Exception e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
  return target;
}",0.9856190423714806
176332,"private void assertOriginalObjectValues(PhotographerUni_1_M_1_M p){
  Assert.assertTrue(p.getPhotographerId() == 1);
  Assert.assertTrue(p.getPhotographerName().equals(""String_Node_Str""));
  PersonalDetail pd=p.getPersonalDetail();
  Assert.assertFalse(pd.getPersonalDetailId().equals(""String_Node_Str""));
  Assert.assertTrue(pd.getName().equals(""String_Node_Str""));
  Assert.assertTrue(pd.getPassword().equals(""String_Node_Str""));
  Assert.assertTrue(pd.getRelationshipStatus().equals(""String_Node_Str""));
  List<Tweet> tweets=p.getTweets();
  Tweet t1=tweets.get(0);
  Tweet t2=tweets.get(1);
  Tweet t3=tweets.get(2);
  Assert.assertFalse(t1.getTweetId().equals(""String_Node_Str""));
  Assert.assertTrue(t1.getBody().equals(""String_Node_Str""));
  Assert.assertTrue(t1.getDevice().equals(""String_Node_Str""));
  Assert.assertFalse(t2.getTweetId().equals(""String_Node_Str""));
  Assert.assertTrue(t2.getBody().equals(""String_Node_Str""));
  Assert.assertTrue(t2.getDevice().equals(""String_Node_Str""));
  Assert.assertFalse(t3.getTweetId().equals(""String_Node_Str""));
  Assert.assertTrue(t3.getBody().equals(""String_Node_Str""));
  Assert.assertTrue(t3.getDevice().equals(""String_Node_Str""));
  for (  AlbumUni_1_M_1_M album : p.getAlbums()) {
    Assert.assertFalse(album.getAlbumId().startsWith(""String_Node_Str""));
    Assert.assertFalse(album.getAlbumName().startsWith(""String_Node_Str""));
    Assert.assertFalse(album.getAlbumDescription().startsWith(""String_Node_Str""));
    for (    PhotoUni_1_M_1_M photo : album.getPhotos()) {
      Assert.assertFalse(photo.getPhotoId().startsWith(""String_Node_Str""));
      Assert.assertFalse(photo.getPhotoCaption().startsWith(""String_Node_Str""));
      Assert.assertFalse(photo.getPhotoDescription().startsWith(""String_Node_Str""));
    }
  }
}","private void assertOriginalObjectValues(PhotographerUni_1_M_1_M p){
  Assert.assertTrue(p.getPhotographerId() == 1);
  Assert.assertTrue(p.getPhotographerName().equals(""String_Node_Str""));
  PersonalDetail pd=p.getPersonalDetail();
  Assert.assertFalse(pd.getPersonalDetailId().equals(""String_Node_Str""));
  Assert.assertTrue(pd.getName().equals(""String_Node_Str""));
  Assert.assertTrue(pd.getPassword().equals(""String_Node_Str""));
  Assert.assertTrue(pd.getRelationshipStatus().equals(""String_Node_Str""));
  List<Tweet> tweets=p.getTweets();
  Tweet t1=tweets.get(0);
  Tweet t2=tweets.get(1);
  Tweet t3=tweets.get(2);
  Assert.assertFalse(t1.getTweetId().equals(""String_Node_Str""));
  Assert.assertTrue(t1.getBody().equals(""String_Node_Str""));
  Assert.assertTrue(t1.getDevice().equals(""String_Node_Str""));
  Assert.assertFalse(t2.getTweetId().equals(""String_Node_Str""));
  Assert.assertTrue(t2.getBody().equals(""String_Node_Str""));
  Assert.assertTrue(t2.getDevice().equals(""String_Node_Str""));
  Assert.assertFalse(t3.getTweetId().equals(""String_Node_Str""));
  Assert.assertTrue(t3.getBody().equals(""String_Node_Str""));
  Assert.assertTrue(t3.getDevice().equals(""String_Node_Str""));
  Assert.assertNotNull(p.getTags());
  Assert.assertFalse(p.getTags().isEmpty());
  Assert.assertEquals(3,p.getTags().size());
  for (  String tag : p.getTags()) {
    Assert.assertTrue(tag.equals(""String_Node_Str"") || tag.equals(""String_Node_Str"") || tag.equals(""String_Node_Str""));
  }
  Assert.assertNotNull(p.getLikedBy());
  Assert.assertFalse(p.getLikedBy().isEmpty());
  Assert.assertEquals(2,p.getLikedBy().size());
  for (  int likedUserId : p.getLikedBy()) {
    Assert.assertTrue(likedUserId == 111 || likedUserId == 222);
  }
  Assert.assertNotNull(p.getComments());
  Assert.assertFalse(p.getComments().isEmpty());
  Assert.assertEquals(3,p.getComments().size());
  for (  int commentedBy : p.getComments().keySet()) {
    String commentText=p.getComments().get(commentedBy);
    Assert.assertTrue(commentedBy == 111 || commentedBy == 222 || commentedBy == 333);
    Assert.assertTrue(commentText.equals(""String_Node_Str"") || commentText.equals(""String_Node_Str"") || commentText.equals(""String_Node_Str""));
  }
  for (  AlbumUni_1_M_1_M album : p.getAlbums()) {
    Assert.assertFalse(album.getAlbumId().startsWith(""String_Node_Str""));
    Assert.assertFalse(album.getAlbumName().startsWith(""String_Node_Str""));
    Assert.assertFalse(album.getAlbumDescription().startsWith(""String_Node_Str""));
    for (    PhotoUni_1_M_1_M photo : album.getPhotos()) {
      Assert.assertFalse(photo.getPhotoId().startsWith(""String_Node_Str""));
      Assert.assertFalse(photo.getPhotoCaption().startsWith(""String_Node_Str""));
      Assert.assertFalse(photo.getPhotoDescription().startsWith(""String_Node_Str""));
    }
  }
}",0.7770034843205574
176333,"/** 
 * @return
 */
private PhotographerUni_1_M_1_M constructPhotographer(int photographerId){
  PhotographerUni_1_M_1_M a1=new PhotographerUni_1_M_1_M();
  a1.setPhotographerId(photographerId);
  a1.setPhotographerName(""String_Node_Str"");
  a1.setPersonalDetail(new PersonalDetail(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  a1.addTweet(new Tweet(""String_Node_Str"",""String_Node_Str""));
  a1.addTweet(new Tweet(""String_Node_Str"",""String_Node_Str""));
  a1.addTweet(new Tweet(""String_Node_Str"",""String_Node_Str""));
  AlbumUni_1_M_1_M b11=new AlbumUni_1_M_1_M(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AlbumUni_1_M_1_M b12=new AlbumUni_1_M_1_M(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  PhotoUni_1_M_1_M c11=new PhotoUni_1_M_1_M(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  PhotoUni_1_M_1_M c12=new PhotoUni_1_M_1_M(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  PhotoUni_1_M_1_M c13=new PhotoUni_1_M_1_M(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  PhotoUni_1_M_1_M c14=new PhotoUni_1_M_1_M(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  b11.addPhoto(c11);
  b11.addPhoto(c12);
  b12.addPhoto(c13);
  b12.addPhoto(c14);
  a1.addAlbum(b11);
  a1.addAlbum(b12);
  return a1;
}","/** 
 * @return
 */
private PhotographerUni_1_M_1_M constructPhotographer(int photographerId){
  PhotographerUni_1_M_1_M a1=new PhotographerUni_1_M_1_M();
  a1.setPhotographerId(photographerId);
  a1.setPhotographerName(""String_Node_Str"");
  a1.setPersonalDetail(new PersonalDetail(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  a1.addTweet(new Tweet(""String_Node_Str"",""String_Node_Str""));
  a1.addTweet(new Tweet(""String_Node_Str"",""String_Node_Str""));
  a1.addTweet(new Tweet(""String_Node_Str"",""String_Node_Str""));
  a1.addTag(""String_Node_Str"");
  a1.addTag(""String_Node_Str"");
  a1.addTag(""String_Node_Str"");
  a1.addLikedBy(111);
  a1.addLikedBy(222);
  a1.addComment(111,""String_Node_Str"");
  a1.addComment(222,""String_Node_Str"");
  a1.addComment(333,""String_Node_Str"");
  AlbumUni_1_M_1_M b11=new AlbumUni_1_M_1_M(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AlbumUni_1_M_1_M b12=new AlbumUni_1_M_1_M(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  PhotoUni_1_M_1_M c11=new PhotoUni_1_M_1_M(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  PhotoUni_1_M_1_M c12=new PhotoUni_1_M_1_M(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  PhotoUni_1_M_1_M c13=new PhotoUni_1_M_1_M(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  PhotoUni_1_M_1_M c14=new PhotoUni_1_M_1_M(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  b11.addPhoto(c11);
  b11.addPhoto(c12);
  b12.addPhoto(c13);
  b12.addPhoto(c14);
  a1.addAlbum(b11);
  a1.addAlbum(b12);
  return a1;
}",0.9068767908309456
176334,"/** 
 * Fetch data from lucene.
 * @param client the client
 * @return the sets the
 */
protected Set<String> fetchDataFromLucene(Client client){
  Map<String,Object> results=client.getIndexManager().search(luceneQueryFromJPAQuery);
  Set rSet=new HashSet(results.values());
  return rSet;
}","/** 
 * Fetch data from lucene.
 * @param client the client
 * @return the sets the
 */
protected Set<String> fetchDataFromLucene(Class<?> clazz,Client client){
  Map<String,Object> results=client.getIndexManager().search(clazz,luceneQueryFromJPAQuery);
  Set rSet=new HashSet(results.values());
  return rSet;
}",0.965174129353234
176335,"/** 
 * On association using lucene.
 * @param m the m
 * @param client the client
 * @param ls the ls
 * @return the list
 */
protected List<EnhanceEntity> onAssociationUsingLucene(EntityMetadata m,Client client,List<EnhanceEntity> ls){
  Set<String> rSet=fetchDataFromLucene(client);
  List resultList=client.findAll(m.getEntityClazz(),null,rSet.toArray(new String[]{}));
  return m.getRelationNames() != null && !m.getRelationNames().isEmpty() ? resultList : transform(m,ls,resultList);
}","/** 
 * On association using lucene.
 * @param m the m
 * @param client the client
 * @param ls the ls
 * @return the list
 */
protected List<EnhanceEntity> onAssociationUsingLucene(EntityMetadata m,Client client,List<EnhanceEntity> ls){
  Set<String> rSet=fetchDataFromLucene(m.getEntityClazz(),client);
  List resultList=client.findAll(m.getEntityClazz(),null,rSet.toArray(new String[]{}));
  return m.getRelationNames() != null && !m.getRelationNames().isEmpty() ? resultList : transform(m,ls,resultList);
}",0.981018981018981
176336,"/** 
 * Recursively fetches associated entities for a given <code>entity</code>
 * @param entity
 * @param relationsMap
 * @param client
 * @param m
 * @param pd
 * @return
 */
private Object handleAssociation(final Object entity,final Map<String,Object> relationsMap,final EntityMetadata m,final PersistenceDelegator pd,boolean lazilyloaded){
  for (  Relation relation : m.getRelations()) {
    ForeignKey relationType=relation.getType();
    Object relationalObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (relationalObject == null || ProxyHelper.isProxyOrCollection(relationalObject)) {
      onRelation(entity,relationsMap,m,pd,relation,relationType,lazilyloaded);
    }
  }
  return entity;
}","/** 
 * Recursively fetches associated entities for a given <code>entity</code>
 * @param entity
 * @param relationsMap
 * @param client
 * @param m
 * @param pd
 * @return
 */
private Object handleAssociation(final Object entity,final Map<String,Object> relationsMap,final EntityMetadata m,final PersistenceDelegator pd,boolean lazilyloaded){
  for (  Relation relation : m.getRelations()) {
    ForeignKey relationType=relation.getType();
    Object relationalObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (KunderaCoreUtils.isEmptyOrNull(relationalObject) || ProxyHelper.isProxyOrCollection(relationalObject)) {
      onRelation(entity,relationsMap,m,pd,relation,relationType,lazilyloaded);
    }
  }
  return entity;
}",0.973045822102426
176337,"@Test public void test(){
  String query=""String_Node_Str"";
  KunderaQuery kunderaQuery=new KunderaQuery();
  KunderaQueryParser queryParser=new KunderaQueryParser(kunderaQuery,query);
  queryParser.parse();
  kunderaQuery.postParsingInit();
  Assert.assertNotNull(kunderaQuery.getEntityClass());
  Assert.assertEquals(Person.class,kunderaQuery.getEntityClass());
  Assert.assertNotNull(kunderaQuery.getEntityMetadata());
  Assert.assertTrue(KunderaMetadataManager.getEntityMetadata(Person.class).equals(kunderaQuery.getEntityMetadata()));
  Assert.assertNull(kunderaQuery.getFilter());
  Assert.assertTrue(kunderaQuery.getFilterClauseQueue().isEmpty());
  Assert.assertNotNull(kunderaQuery.getFrom());
  Assert.assertTrue(kunderaQuery.getUpdateClauseQueue().isEmpty());
  Assert.assertNotNull(kunderaQuery.getResult());
  Assert.assertEquals(PU,kunderaQuery.getPersistenceUnit());
  Assert.assertNull(kunderaQuery.getOrdering());
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.assertNotNull(kunderaQuery.getEntityClass());
    Assert.assertEquals(Person.class,kunderaQuery.getEntityClass());
    Assert.assertNotNull(kunderaQuery.getEntityMetadata());
    Assert.assertTrue(KunderaMetadataManager.getEntityMetadata(Person.class).equals(kunderaQuery.getEntityMetadata()));
    Assert.assertNull(kunderaQuery.getFilter());
    Assert.assertTrue(kunderaQuery.getFilterClauseQueue().isEmpty());
    Assert.assertNotNull(kunderaQuery.getFrom());
    Assert.assertTrue(kunderaQuery.getUpdateClauseQueue().isEmpty());
    Assert.assertNotNull(kunderaQuery.getResult());
    Assert.assertEquals(PU,kunderaQuery.getPersistenceUnit());
    Assert.assertNull(kunderaQuery.getOrdering());
  }
 catch (  JPQLParseException e) {
    Assert.fail();
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  PersistenceException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
  }
 catch (  QueryHandlerException qhex) {
    Assert.assertEquals(""String_Node_Str"",qhex.getMessage());
  }
}","@Test public void test(){
  String query=""String_Node_Str"";
  KunderaQuery kunderaQuery=new KunderaQuery();
  KunderaQueryParser queryParser=new KunderaQueryParser(kunderaQuery,query);
  queryParser.parse();
  kunderaQuery.postParsingInit();
  Assert.assertNotNull(kunderaQuery.getEntityClass());
  Assert.assertEquals(Person.class,kunderaQuery.getEntityClass());
  Assert.assertNotNull(kunderaQuery.getEntityMetadata());
  Assert.assertTrue(KunderaMetadataManager.getEntityMetadata(Person.class).equals(kunderaQuery.getEntityMetadata()));
  Assert.assertNull(kunderaQuery.getFilter());
  Assert.assertTrue(kunderaQuery.getFilterClauseQueue().isEmpty());
  Assert.assertNotNull(kunderaQuery.getFrom());
  Assert.assertTrue(kunderaQuery.getUpdateClauseQueue().isEmpty());
  Assert.assertNotNull(kunderaQuery.getResult());
  Assert.assertEquals(PU,kunderaQuery.getPersistenceUnit());
  Assert.assertNull(kunderaQuery.getOrdering());
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.assertNotNull(kunderaQuery.getEntityClass());
    Assert.assertEquals(Person.class,kunderaQuery.getEntityClass());
    Assert.assertNotNull(kunderaQuery.getEntityMetadata());
    Assert.assertTrue(KunderaMetadataManager.getEntityMetadata(Person.class).equals(kunderaQuery.getEntityMetadata()));
    Assert.assertNull(kunderaQuery.getFilter());
    Assert.assertTrue(kunderaQuery.getFilterClauseQueue().isEmpty());
    Assert.assertNotNull(kunderaQuery.getFrom());
    Assert.assertTrue(kunderaQuery.getUpdateClauseQueue().isEmpty());
    Assert.assertNotNull(kunderaQuery.getResult());
    Assert.assertEquals(PU,kunderaQuery.getPersistenceUnit());
    Assert.assertNull(kunderaQuery.getOrdering());
  }
 catch (  JPQLParseException e) {
    Assert.fail();
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  PersistenceException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
  }
 catch (  QueryHandlerException qhex) {
    Assert.assertEquals(""String_Node_Str"",qhex.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
  }
 catch (  JPQLParseException e) {
    Assert.assertTrue(e.getMessage().startsWith(""String_Node_Str""));
  }
}",0.9200955667640032
176338,"@Test public void testUpdateClause(){
  String query=""String_Node_Str"";
  KunderaQuery kunderaQuery=new KunderaQuery();
  KunderaQueryParser queryParser=new KunderaQueryParser(kunderaQuery,query);
  queryParser.parse();
  kunderaQuery.postParsingInit();
  kunderaQuery.setParameter(1,33);
  kunderaQuery.setParameter(2,""String_Node_Str"");
  kunderaQuery.setParameter(3,32);
  Assert.assertEquals(3,kunderaQuery.getParameters().size());
  Iterator<Parameter<?>> parameters=kunderaQuery.getParameters().iterator();
  Assert.assertNotNull(kunderaQuery.getUpdateClauseQueue());
  for (  UpdateClause clause : kunderaQuery.getUpdateClauseQueue()) {
    Assert.assertNotNull(clause);
    Assert.assertNotNull(clause.getProperty());
    Assert.assertNotNull(clause.getValue());
    Assert.assertNotNull(clause.getClass());
    Assert.assertNotNull(clause.toString());
  }
  while (parameters.hasNext()) {
    Parameter parameter=parameters.next();
    Assert.assertTrue(kunderaQuery.isBound(parameter));
    Assert.assertNull(parameter.getName());
    Assert.assertNotNull(parameter.getPosition());
  }
  try {
    kunderaQuery.getClauseValue(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(kunderaQuery.toString());
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  try {
    kunderaQuery.getClauseValue(new JPAParameter());
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(kunderaQuery.toString());
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
}","@Test public void testUpdateClause(){
  String query=""String_Node_Str"";
  KunderaQuery kunderaQuery=new KunderaQuery();
  KunderaQueryParser queryParser=new KunderaQueryParser(kunderaQuery,query);
  queryParser.parse();
  kunderaQuery.postParsingInit();
  kunderaQuery.setParameter(1,33);
  kunderaQuery.setParameter(2,""String_Node_Str"");
  kunderaQuery.setParameter(3,32);
  Assert.assertEquals(3,kunderaQuery.getParameters().size());
  Iterator<Parameter<?>> parameters=kunderaQuery.getParameters().iterator();
  Assert.assertNotNull(kunderaQuery.getUpdateClauseQueue());
  for (  UpdateClause clause : kunderaQuery.getUpdateClauseQueue()) {
    Assert.assertNotNull(clause);
    Assert.assertNotNull(clause.getProperty());
    Assert.assertNotNull(clause.getValue());
    Assert.assertNotNull(clause.getClass());
    Assert.assertNotNull(clause.toString());
  }
  while (parameters.hasNext()) {
    Parameter parameter=parameters.next();
    Assert.assertTrue(kunderaQuery.isBound(parameter));
    Assert.assertNull(parameter.getName());
    Assert.assertNotNull(parameter.getPosition());
    Assert.assertNotNull(parameter.toString());
  }
  try {
    kunderaQuery.getClauseValue(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(kunderaQuery.toString());
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  try {
    kunderaQuery.getClauseValue(new JPAParameter());
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(kunderaQuery.toString());
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
}",0.9853836784409256
176339,"@Test public void test() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
  Person p1=new Person();
  p1.setAge(98);
  p1.setPersonId(""String_Node_Str"");
  p1.setDay(Day.SATURDAY);
  em.persist(p1);
  em.clear();
  Person p2=new Person();
  p2.setAge(100);
  p2.setPersonId(""String_Node_Str"");
  p2.setDay(Day.SATURDAY);
  em.persist(p2);
  String query=""String_Node_Str"";
  PersistenceDelegator delegator=CoreTestUtilities.getDelegator(em);
  KunderaQueryParser queryParser;
  KunderaQuery kunderaQuery=parseQuery(query);
  CoreQuery queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<Person> results=queryObj.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  final String deleteQuery=""String_Node_Str"";
  kunderaQuery=parseQuery(deleteQuery);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    Assert.assertNull(queryObj.getParameter(""String_Node_Str"",String.class));
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  Assert.assertNotNull(queryObj.getParameter(1,String.class));
  Assert.assertNotNull(queryObj.getParameterValue(1));
  try {
    queryObj.getParameterValue(1);
  }
 catch (  IllegalStateException usex) {
    Assert.assertEquals(""String_Node_Str"" + 1,usex.getMessage());
  }
  queryObj.setParameter(1,""String_Node_Str"");
  queryObj.executeUpdate();
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  queryObj.setHint(""String_Node_Str"",""String_Node_Str"");
  queryObj.setMaxResults(100);
  Assert.assertEquals(100,queryObj.getMaxResults());
  Assert.assertNotNull(queryObj.getHints());
  queryObj.setFetchSize(100);
  Assert.assertEquals(new Integer(100),queryObj.getFetchSize());
  query=""String_Node_Str"";
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  Set luceneResults=queryObj.fetchByLuceneQuery();
  Assert.assertNotNull(luceneResults);
  Assert.assertEquals(1,luceneResults.size());
  Assert.assertNotNull(queryObj.getParameter(""String_Node_Str"",String.class));
  Assert.assertTrue(queryObj.isBound(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(""String_Node_Str""));
  try {
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.getParameter(1);
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
    appMetadata.addQueryToCollection(query,query,true,null);
    queryObj=new CoreQuery(query,kunderaQuery,delegator);
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalStateException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  try {
    queryObj.getParameterValue(""String_Node_Str"");
  }
 catch (  IllegalArgumentException usex) {
    Assert.assertEquals(""String_Node_Str"",usex.getMessage());
  }
  onassertBi1MAssociation(delegator);
  onassertBiM1Association(delegator);
}","@Test public void test() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
  Person p1=new Person();
  p1.setAge(98);
  p1.setPersonId(""String_Node_Str"");
  p1.setDay(Day.SATURDAY);
  em.persist(p1);
  em.clear();
  Person p2=new Person();
  p2.setAge(100);
  p2.setPersonId(""String_Node_Str"");
  p2.setDay(Day.SATURDAY);
  em.persist(p2);
  String query=""String_Node_Str"";
  PersistenceDelegator delegator=CoreTestUtilities.getDelegator(em);
  KunderaQueryParser queryParser;
  KunderaQuery kunderaQuery=parseQuery(query);
  CoreQuery queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<Person> results=queryObj.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  final String deleteQuery=""String_Node_Str"";
  kunderaQuery=parseQuery(deleteQuery);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    Assert.assertNull(queryObj.getParameter(""String_Node_Str"",String.class));
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  Assert.assertNotNull(queryObj.getParameter(1,String.class));
  Assert.assertNotNull(queryObj.getParameterValue(1));
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  try {
    queryObj.getParameterValue(1);
  }
 catch (  IllegalStateException usex) {
    Assert.assertEquals(""String_Node_Str"" + 1,usex.getMessage());
  }
  queryObj.setParameter(1,""String_Node_Str"");
  queryObj.executeUpdate();
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  queryObj.setHint(""String_Node_Str"",""String_Node_Str"");
  queryObj.setMaxResults(100);
  Assert.assertEquals(100,queryObj.getMaxResults());
  Assert.assertNotNull(queryObj.getHints());
  queryObj.setFetchSize(100);
  Assert.assertEquals(new Integer(100),queryObj.getFetchSize());
  query=""String_Node_Str"";
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  Set luceneResults=queryObj.fetchByLuceneQuery();
  Assert.assertNotNull(luceneResults);
  Assert.assertEquals(1,luceneResults.size());
  Assert.assertNotNull(queryObj.getParameter(""String_Node_Str"",String.class));
  Assert.assertTrue(queryObj.isBound(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(""String_Node_Str""));
  try {
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.getParameter(1);
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
    appMetadata.addQueryToCollection(query,query,true,null);
    queryObj=new CoreQuery(query,kunderaQuery,delegator);
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalStateException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  try {
    final String updateQuery=""String_Node_Str"";
    kunderaQuery=parseQuery(updateQuery);
    queryObj=new CoreQuery(updateQuery,kunderaQuery,delegator);
    queryObj.executeUpdate();
    Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
    Assert.assertNotNull(queryObj.populateUsingLucene());
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
  try {
    queryObj.unwrap(Client.class);
  }
 catch (  ClassCastException usex) {
    Assert.assertEquals(""String_Node_Str"" + Integer.class + ""String_Node_Str"",usex.getMessage());
  }
  try {
    queryObj.getParameterValue(""String_Node_Str"");
  }
 catch (  IllegalArgumentException usex) {
    Assert.assertEquals(""String_Node_Str"",usex.getMessage());
  }
  onassertBi1MAssociation(delegator);
  onassertBiM1Association(delegator);
}",0.9024889559314728
176340,"private void onassertBi1MAssociation(PersistenceDelegator delegator){
  KunderaQuery kunderaQuery;
  CoreQuery queryObj;
  PersonB1M personBi1M=new PersonB1M();
  personBi1M.setPersonId(""String_Node_Str"");
  personBi1M.setPersonName(""String_Node_Str"");
  AddressB1M addressBi1M=new AddressB1M();
  addressBi1M.setAddressId(""String_Node_Str"");
  addressBi1M.setStreet(""String_Node_Str"");
  Set<AddressB1M> addresses=new HashSet<AddressB1M>();
  addresses.add(addressBi1M);
  AddressB1M addressBi1M_copy=new AddressB1M();
  addressBi1M_copy.setAddressId(""String_Node_Str"");
  addressBi1M_copy.setStreet(""String_Node_Str"");
  addresses.add(addressBi1M_copy);
  personBi1M.setAddresses(addresses);
  em.persist(personBi1M);
  em.clear();
  String selectAssociationQuery=""String_Node_Str"";
  kunderaQuery=parseQuery(selectAssociationQuery);
  queryObj=new CoreQuery(selectAssociationQuery,kunderaQuery,delegator);
  List<PersonB1M> associationResults=queryObj.getResultList();
  Assert.assertTrue(!associationResults.isEmpty());
  Assert.assertNotNull(associationResults.get(0).getAddresses());
  Assert.assertEquals(2,associationResults.get(0).getAddresses().size());
  selectAssociationQuery=""String_Node_Str"";
  kunderaQuery=parseQuery(selectAssociationQuery);
  queryObj=new CoreQuery(selectAssociationQuery,kunderaQuery,delegator);
  associationResults=queryObj.getResultList();
  Assert.assertTrue(associationResults.isEmpty());
}","private void onassertBi1MAssociation(PersistenceDelegator delegator){
  KunderaQuery kunderaQuery;
  CoreQuery queryObj;
  PersonB1M personBi1M=new PersonB1M();
  personBi1M.setPersonId(""String_Node_Str"");
  personBi1M.setPersonName(""String_Node_Str"");
  AddressB1M addressBi1M=new AddressB1M();
  addressBi1M.setAddressId(""String_Node_Str"");
  addressBi1M.setStreet(""String_Node_Str"");
  Set<AddressB1M> addresses=new HashSet<AddressB1M>();
  addresses.add(addressBi1M);
  AddressB1M addressBi1M_copy=new AddressB1M();
  addressBi1M_copy.setAddressId(""String_Node_Str"");
  addressBi1M_copy.setStreet(""String_Node_Str"");
  addresses.add(addressBi1M_copy);
  personBi1M.setAddresses(addresses);
  em.persist(personBi1M);
  em.clear();
  String query=""String_Node_Str"";
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  List<PersonB1M> associationResults=queryObj.getResultList();
  Assert.assertTrue(!associationResults.isEmpty());
  Assert.assertNotNull(associationResults.get(0).getAddresses());
  Assert.assertEquals(2,associationResults.get(0).getAddresses().size());
  query=""String_Node_Str"";
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  associationResults=queryObj.getResultList();
  Assert.assertTrue(associationResults.isEmpty());
}",0.9021739130434784
176341,"@Test public void test() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
  Person p1=new Person();
  p1.setAge(98);
  p1.setPersonId(""String_Node_Str"");
  p1.setDay(Day.SATURDAY);
  em.persist(p1);
  em.clear();
  Person p2=new Person();
  p2.setAge(100);
  p2.setPersonId(""String_Node_Str"");
  p2.setDay(Day.SATURDAY);
  em.persist(p2);
  String query=""String_Node_Str"";
  PersistenceDelegator delegator=CoreTestUtilities.getDelegator(em);
  KunderaQueryParser queryParser;
  KunderaQuery kunderaQuery=parseQuery(query);
  CoreQuery queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<Person> results=queryObj.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  final String deleteQuery=""String_Node_Str"";
  kunderaQuery=parseQuery(deleteQuery);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    Assert.assertNull(queryObj.getParameter(""String_Node_Str"",String.class));
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  Assert.assertNotNull(queryObj.getParameter(1,String.class));
  Assert.assertNotNull(queryObj.getParameterValue(1));
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  try {
    queryObj.getParameterValue(1);
  }
 catch (  IllegalStateException usex) {
    Assert.assertEquals(""String_Node_Str"" + 1,usex.getMessage());
  }
  queryObj.setParameter(1,""String_Node_Str"");
  queryObj.executeUpdate();
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  queryObj.setHint(""String_Node_Str"",""String_Node_Str"");
  queryObj.setMaxResults(100);
  Assert.assertEquals(100,queryObj.getMaxResults());
  Assert.assertNotNull(queryObj.getHints());
  queryObj.setFetchSize(100);
  Assert.assertEquals(new Integer(100),queryObj.getFetchSize());
  query=""String_Node_Str"";
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  Set luceneResults=queryObj.fetchByLuceneQuery();
  Assert.assertNotNull(luceneResults);
  Assert.assertEquals(1,luceneResults.size());
  Assert.assertNotNull(queryObj.getParameter(""String_Node_Str"",String.class));
  Assert.assertTrue(queryObj.isBound(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(""String_Node_Str""));
  try {
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.getParameter(1);
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
    appMetadata.addQueryToCollection(query,query,true,null);
    queryObj=new CoreQuery(query,kunderaQuery,delegator);
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalStateException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  try {
    final String updateQuery=""String_Node_Str"";
    kunderaQuery=parseQuery(updateQuery);
    queryObj=new CoreQuery(updateQuery,kunderaQuery,delegator);
    queryObj.executeUpdate();
    Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
    Assert.assertNotNull(queryObj.populateUsingLucene());
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
  try {
    queryObj.unwrap(Client.class);
  }
 catch (  ClassCastException usex) {
    Assert.assertEquals(""String_Node_Str"" + Integer.class + ""String_Node_Str"",usex.getMessage());
  }
  try {
    queryObj.getParameterValue(""String_Node_Str"");
  }
 catch (  IllegalArgumentException usex) {
    Assert.assertEquals(""String_Node_Str"",usex.getMessage());
  }
  onassertBi1MAssociation(delegator);
  onassertBiM1Association(delegator);
}","@Test public void test() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
  Person p1=new Person();
  p1.setAge(98);
  p1.setPersonId(""String_Node_Str"");
  p1.setDay(Day.SATURDAY);
  em.persist(p1);
  em.clear();
  Person p2=new Person();
  p2.setAge(100);
  p2.setPersonId(""String_Node_Str"");
  p2.setDay(Day.SATURDAY);
  em.persist(p2);
  String query=""String_Node_Str"";
  PersistenceDelegator delegator=CoreTestUtilities.getDelegator(em);
  KunderaQueryParser queryParser;
  KunderaQuery kunderaQuery=parseQuery(query);
  CoreQuery queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<Person> results=queryObj.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  final String deleteQuery=""String_Node_Str"";
  kunderaQuery=parseQuery(deleteQuery);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    Assert.assertNull(queryObj.getParameter(""String_Node_Str"",String.class));
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  Assert.assertNotNull(queryObj.getParameter(1,String.class));
  Assert.assertNotNull(queryObj.getParameterValue(1));
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  try {
    queryObj.getParameterValue(1);
  }
 catch (  IllegalStateException usex) {
    Assert.assertEquals(""String_Node_Str"" + 1,usex.getMessage());
  }
  queryObj.setParameter(1,""String_Node_Str"");
  queryObj.executeUpdate();
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  queryObj.setHint(""String_Node_Str"",""String_Node_Str"");
  queryObj.setMaxResults(100);
  Assert.assertEquals(100,queryObj.getMaxResults());
  Assert.assertNotNull(queryObj.getHints());
  queryObj.setFetchSize(100);
  Assert.assertEquals(new Integer(100),queryObj.getFetchSize());
  query=""String_Node_Str"";
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  Set luceneResults=queryObj.fetchByLuceneQuery();
  Assert.assertNotNull(luceneResults);
  Assert.assertEquals(1,luceneResults.size());
  Assert.assertNotNull(queryObj.getParameter(""String_Node_Str"",String.class));
  Assert.assertTrue(queryObj.isBound(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(""String_Node_Str""));
  try {
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.getParameter(1);
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
    appMetadata.addQueryToCollection(query,query,true,null);
    queryObj=new CoreQuery(query,kunderaQuery,delegator);
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalStateException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  try {
    final String updateQuery=""String_Node_Str"";
    kunderaQuery=parseQuery(updateQuery);
    queryObj=new CoreQuery(updateQuery,kunderaQuery,delegator);
    queryObj.executeUpdate();
    Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
    Assert.assertNotNull(queryObj.populateUsingLucene());
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
  try {
    queryObj.unwrap(Client.class);
  }
 catch (  ClassCastException usex) {
    Assert.assertEquals(""String_Node_Str"" + Integer.class + ""String_Node_Str"",usex.getMessage());
  }
  try {
    queryObj.getParameterValue(""String_Node_Str"");
  }
 catch (  IllegalArgumentException usex) {
    Assert.assertEquals(""String_Node_Str"",usex.getMessage());
  }
  query=""String_Node_Str"";
  delegator=CoreTestUtilities.getDelegator(em);
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",new Integer(32));
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  query=""String_Node_Str"";
  delegator=CoreTestUtilities.getDelegator(em);
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",new Integer(32));
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  query=""String_Node_Str"";
  delegator=CoreTestUtilities.getDelegator(em);
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",new Integer(32));
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  query=""String_Node_Str"";
  delegator=CoreTestUtilities.getDelegator(em);
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",new Integer(32));
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  query=""String_Node_Str"";
  delegator=CoreTestUtilities.getDelegator(em);
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",""String_Node_Str"");
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  onassertBi1MAssociation(delegator);
  onassertBiM1Association(delegator);
}",0.8541666666666666
176342,"/** 
 * @param tableInfo
 * @param collection
 */
private void createIndexes(TableInfo tableInfo,DBCollection collection){
  for (  IndexInfo indexInfo : tableInfo.getColumnsToBeIndexed()) {
    DBObject keys=new BasicDBObject();
    getIndexType(indexInfo.getIndexType(),keys,indexInfo.getColumnName());
    DBObject options=new BasicDBObject();
    if (indexInfo.getMinValue() != null) {
      options.put(MongoDBConstants.MIN,indexInfo.getMinValue());
    }
    if (indexInfo.getMaxValue() != null) {
      options.put(MongoDBConstants.MAX,indexInfo.getMaxValue());
    }
    collection.ensureIndex(keys,options);
  }
}","/** 
 * @param tableInfo
 * @param collection
 */
private void createIndexes(TableInfo tableInfo,DBCollection collection){
  for (  ColumnInfo columnInfo : tableInfo.getColumnMetadatas()) {
    if (columnInfo.isIndexable()) {
      IndexInfo indexInfo=tableInfo.getColumnToBeIndexed(columnInfo.getColumnName());
      indexColumn(indexInfo,collection);
    }
  }
  for (  EmbeddedColumnInfo info : tableInfo.getEmbeddedColumnMetadatas()) {
    for (    ColumnInfo columnInfo : info.getColumns()) {
      if (columnInfo.isIndexable()) {
        IndexInfo indexInfo=tableInfo.getColumnToBeIndexed(columnInfo.getColumnName());
        indexEmbeddedColumn(indexInfo,info.getEmbeddedColumnName(),collection);
      }
    }
  }
}",0.3226765799256506
176343,"/** 
 * On persist.
 * @param entityMetadata the entity metadata
 * @param entity the entity
 * @param id the id
 * @param relations the relations
 */
@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> relations){
  String tableName=entityMetadata.getTableName();
  try {
    handler.writeData(tableName,entityMetadata,entity,id,relations);
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
}","/** 
 * On persist.
 * @param entityMetadata the entity metadata
 * @param entity the entity
 * @param id the id
 * @param relations the relations
 */
@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> relations){
  String tableName=entityMetadata.getSchema();
  try {
    handler.writeData(tableName,entityMetadata,entity,id,relations);
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
}",0.9841605068637804
176344,"@Override public <E>List<E> findAll(Class<E> entityClass,String[] columnsToSelect,Object... rowIds){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  if (rowIds == null) {
    return null;
  }
  List results;
  try {
    results=handler.readAll(entityMetadata.getTableName(),entityMetadata.getEntityClazz(),entityMetadata,Arrays.asList(rowIds),entityMetadata.getRelationNames());
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results;
}","@Override public <E>List<E> findAll(Class<E> entityClass,String[] columnsToSelect,Object... rowIds){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  if (rowIds == null) {
    return null;
  }
  List results;
  try {
    results=handler.readAll(entityMetadata.getSchema(),entityMetadata.getEntityClazz(),entityMetadata,Arrays.asList(rowIds),entityMetadata.getRelationNames());
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results;
}",0.9882352941176472
176345,"/** 
 * Handles find by range query for given start and end row key range values.
 * @param < E > parameterized entity class.
 * @param entityClass entity class.
 * @param metadata entity metadata
 * @param startRow start row.
 * @param endRow end row.
 * @return collection holding results.
 */
public <E>List<E> findByRange(Class<E> entityClass,EntityMetadata metadata,byte[] startRow,byte[] endRow,String[] columns,Filter f){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String tableName=entityMetadata.getTableName();
  List results=new ArrayList();
  FilterList filter=new FilterList();
  if (f != null) {
    filter.addFilter(f);
  }
  if (isFindKeyOnly(metadata,columns)) {
    columns=null;
    filter.addFilter(new KeyOnlyFilter());
  }
  try {
    results=handler.readDataByRange(tableName,entityClass,metadata,startRow,endRow,columns,filter);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results;
}","/** 
 * Handles find by range query for given start and end row key range values.
 * @param < E > parameterized entity class.
 * @param entityClass entity class.
 * @param metadata entity metadata
 * @param startRow start row.
 * @param endRow end row.
 * @return collection holding results.
 */
public <E>List<E> findByRange(Class<E> entityClass,EntityMetadata metadata,byte[] startRow,byte[] endRow,String[] columns,Filter f){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String tableName=entityMetadata.getSchema();
  List results=new ArrayList();
  FilterList filter=new FilterList();
  if (f != null) {
    filter.addFilter(f);
  }
  if (isFindKeyOnly(metadata,columns)) {
    columns=null;
    filter.addFilter(new KeyOnlyFilter());
  }
  try {
    results=handler.readDataByRange(tableName,entityClass,metadata,startRow,endRow,columns,filter);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results;
}",0.992721979621543
176346,"@Override public List<Object> findByRelation(String colName,Object colValue,Class entityClazz){
  CompareOp operator=HBaseUtils.getOperator(""String_Node_Str"",false);
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  String columnFamilyName=m.getTableName();
  byte[] valueInBytes=HBaseUtils.getBytes(colValue);
  SingleColumnValueFilter f=null;
  f=new SingleColumnValueFilter(Bytes.toBytes(columnFamilyName),Bytes.toBytes(colName),operator,valueInBytes);
  try {
    return ((HBaseDataHandler)handler).scanData(f,m.getTableName(),entityClazz,m,columnFamilyName,colName);
  }
 catch (  IOException ioe) {
    log.error(""String_Node_Str"",ioe);
    throw new KunderaException(ioe);
  }
catch (  InstantiationException ie) {
    log.error(""String_Node_Str"",ie);
    throw new KunderaException(ie);
  }
catch (  IllegalAccessException iae) {
    log.error(""String_Node_Str"",iae);
    throw new KunderaException(iae);
  }
}","@Override public List<Object> findByRelation(String colName,Object colValue,Class entityClazz){
  CompareOp operator=HBaseUtils.getOperator(""String_Node_Str"",false);
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  String columnFamilyName=m.getTableName();
  byte[] valueInBytes=HBaseUtils.getBytes(colValue);
  SingleColumnValueFilter f=null;
  f=new SingleColumnValueFilter(Bytes.toBytes(columnFamilyName),Bytes.toBytes(colName),operator,valueInBytes);
  try {
    return ((HBaseDataHandler)handler).scanData(f,m.getSchema(),entityClazz,m,columnFamilyName,colName);
  }
 catch (  IOException ioe) {
    log.error(""String_Node_Str"",ioe);
    throw new KunderaException(ioe);
  }
catch (  InstantiationException ie) {
    log.error(""String_Node_Str"",ie);
    throw new KunderaException(ie);
  }
catch (  IllegalAccessException iae) {
    log.error(""String_Node_Str"",iae);
    throw new KunderaException(iae);
  }
}",0.9920424403183024
176347,"@Override public Object[] findIdsByColumn(String schemaName,String tableName,String pKeyName,String columnName,Object columnValue,Class entityClazz){
  CompareOp operator=HBaseUtils.getOperator(""String_Node_Str"",false);
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  byte[] valueInBytes=HBaseUtils.getBytes(columnValue);
  Filter f=new SingleColumnValueFilter(Bytes.toBytes(tableName),Bytes.toBytes(columnName),operator,valueInBytes);
  KeyOnlyFilter keyFilter=new KeyOnlyFilter();
  FilterList filterList=new FilterList(f,keyFilter);
  try {
    return handler.scanRowyKeys(filterList,tableName,tableName,columnName + ""String_Node_Str"" + columnValue,m.getIdAttribute().getBindableJavaType());
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
}","@Override public Object[] findIdsByColumn(String schemaName,String tableName,String pKeyName,String columnName,Object columnValue,Class entityClazz){
  CompareOp operator=HBaseUtils.getOperator(""String_Node_Str"",false);
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  byte[] valueInBytes=HBaseUtils.getBytes(columnValue);
  Filter f=new SingleColumnValueFilter(Bytes.toBytes(tableName),Bytes.toBytes(columnName),operator,valueInBytes);
  KeyOnlyFilter keyFilter=new KeyOnlyFilter();
  FilterList filterList=new FilterList(f,keyFilter);
  try {
    return handler.scanRowyKeys(filterList,schemaName,tableName,columnName + ""String_Node_Str"" + columnValue,m.getIdAttribute().getBindableJavaType());
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
}",0.9933774834437086
176348,"public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  try {
    handler.deleteRow(columnValue,tableName);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new PersistenceException(ioex);
  }
}","public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  try {
    handler.deleteRow(columnValue,schemaName,tableName);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new PersistenceException(ioex);
  }
}",0.9803921568627452
176349,"@Override public <E>List<E> find(Class<E> entityClass,Map<String,String> col){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(getPersistenceUnit(),entityClass);
  List<E> entities=new ArrayList<E>();
  Map<String,Field> columnFamilyNameToFieldMap=MetadataUtils.createSuperColumnsFieldMap(entityMetadata);
  for (  String columnFamilyName : col.keySet()) {
    String entityId=col.get(columnFamilyName);
    if (entityId != null) {
      E e=null;
      try {
        List results=handler.readData(entityMetadata.getTableName(),entityMetadata.getEntityClazz(),entityMetadata,entityId,null,null);
        if (results != null) {
          e=(E)results.get(0);
        }
      }
 catch (      IOException ioex) {
        log.error(""String_Node_Str"",ioex);
        throw new KunderaException(ioex);
      }
      Field columnFamilyField=columnFamilyNameToFieldMap.get(columnFamilyName.substring(0,columnFamilyName.indexOf(""String_Node_Str"")));
      Object columnFamilyValue=PropertyAccessorHelper.getObject(e,columnFamilyField);
      if (Collection.class.isAssignableFrom(columnFamilyField.getType())) {
        entities.addAll((Collection)columnFamilyValue);
      }
 else {
        entities.add((E)columnFamilyValue);
      }
    }
  }
  return entities;
}","/** 
 * (non-Javadoc)
 * @see com.impetus.kundera.client.Client#find(java.lang.Class,java.util.Map)
 */
@Override public <E>List<E> find(Class<E> entityClass,Map<String,String> col){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(getPersistenceUnit(),entityClass);
  List<E> entities=new ArrayList<E>();
  Map<String,Field> columnFamilyNameToFieldMap=MetadataUtils.createSuperColumnsFieldMap(entityMetadata);
  for (  String columnFamilyName : col.keySet()) {
    String entityId=col.get(columnFamilyName);
    if (entityId != null) {
      E e=null;
      try {
        List results=handler.readData(entityMetadata.getSchema(),entityMetadata.getEntityClazz(),entityMetadata,entityId,null,null);
        if (results != null) {
          e=(E)results.get(0);
        }
      }
 catch (      IOException ioex) {
        log.error(""String_Node_Str"",ioex);
        throw new KunderaException(ioex);
      }
      Field columnFamilyField=columnFamilyNameToFieldMap.get(columnFamilyName.substring(0,columnFamilyName.indexOf(""String_Node_Str"")));
      Object columnFamilyValue=PropertyAccessorHelper.getObject(e,columnFamilyField);
      if (Collection.class.isAssignableFrom(columnFamilyField.getType())) {
        entities.addAll((Collection)columnFamilyValue);
      }
 else {
        entities.add((E)columnFamilyValue);
      }
    }
  }
  return entities;
}",0.955313556139692
176350,"@Override public Long generate(TableGeneratorDiscriptor discriptor){
  try {
    HTableInterface hTable=((HBaseDataHandler)handler).gethTable(discriptor.getTable());
    Long latestCount=hTable.incrementColumnValue(discriptor.getPkColumnValue().getBytes(),discriptor.getTable().getBytes(),discriptor.getValueColumnName().getBytes(),1);
    if (latestCount == 1) {
      return (long)discriptor.getInitialValue();
    }
 else {
      return (latestCount - 1) * discriptor.getAllocationSize();
    }
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
}","@Override public Long generate(TableGeneratorDiscriptor discriptor){
  try {
    HTableInterface hTable=((HBaseDataHandler)handler).gethTable(discriptor.getSchema());
    Long latestCount=hTable.incrementColumnValue(discriptor.getPkColumnValue().getBytes(),discriptor.getTable().getBytes(),discriptor.getValueColumnName().getBytes(),1);
    if (latestCount == 1) {
      return (long)discriptor.getInitialValue();
    }
 else {
      return (latestCount - 1) * discriptor.getAllocationSize();
    }
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
}",0.9910496338486574
176351,"/** 
 * Method to find entities using JPQL(converted into FilterList.)
 * @param < E > parameterized entity class.
 * @param entityClass entity class.
 * @param metadata entity metadata.
 * @return list of entities.
 */
public <E>List<E> findByQuery(Class<E> entityClass,EntityMetadata metadata,Filter f,String... columns){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  List<String> relationNames=entityMetadata.getRelationNames();
  String tableName=entityMetadata.getTableName();
  List results=null;
  FilterList filter=new FilterList();
  if (f != null) {
    filter.addFilter(f);
  }
  if (isFindKeyOnly(metadata,columns)) {
    columns=null;
    filter.addFilter(new KeyOnlyFilter());
  }
  try {
    results=handler.readData(tableName,entityMetadata.getEntityClazz(),entityMetadata,null,relationNames,filter,columns);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results != null ? results : new ArrayList();
}","/** 
 * Method to find entities using JPQL(converted into FilterList.)
 * @param < E > parameterized entity class.
 * @param entityClass entity class.
 * @param metadata entity metadata.
 * @return list of entities.
 */
public <E>List<E> findByQuery(Class<E> entityClass,EntityMetadata metadata,Filter f,String... columns){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  List<String> relationNames=entityMetadata.getRelationNames();
  String tableName=entityMetadata.getSchema();
  List results=null;
  FilterList filter=new FilterList();
  if (f != null) {
    filter.addFilter(f);
  }
  if (isFindKeyOnly(metadata,columns)) {
    columns=null;
    filter.addFilter(new KeyOnlyFilter());
  }
  try {
    results=handler.readData(tableName,entityMetadata.getEntityClazz(),entityMetadata,null,relationNames,filter,columns);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results != null ? results : new ArrayList();
}",0.9927641099855282
176352,"@Override public int executeBatch(){
  Map<HTableInterface,List<HBaseDataWrapper>> data=new HashMap<HTableInterface,List<HBaseDataWrapper>>();
  try {
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        HTableInterface hTable=null;
        Object rowKey=node.getEntityId();
        Object entity=node.getData();
        if (node.isInState(RemovedState.class)) {
          delete(entity,rowKey);
        }
 else {
          EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
          HBaseDataWrapper columnWrapper=new HBaseDataHandler.HBaseDataWrapper(rowKey,new java.util.HashSet<Attribute>(),entity,metadata.getTableName());
          MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
          EntityType entityType=metaModel.entity(node.getDataClass());
          List<HBaseDataWrapper> embeddableData=new ArrayList<HBaseDataHandler.HBaseDataWrapper>();
          hTable=((HBaseDataHandler)handler).gethTable(metadata.getTableName());
          ((HBaseDataHandler)handler).preparePersistentData(metadata.getTableName(),entity,rowKey,metaModel,entityType.getAttributes(),columnWrapper,embeddableData);
          List<HBaseDataWrapper> dataSet=null;
          if (data.containsKey(hTable)) {
            dataSet=data.get(metadata.getTableName());
            addRecords(columnWrapper,embeddableData,dataSet);
          }
 else {
            dataSet=new ArrayList<HBaseDataHandler.HBaseDataWrapper>();
            addRecords(columnWrapper,embeddableData,dataSet);
            data.put(hTable,dataSet);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!data.isEmpty()) {
      ((HBaseDataHandler)handler).batch_insert(data);
    }
    return data.size();
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
}","@Override public int executeBatch(){
  Map<HTableInterface,List<HBaseDataWrapper>> data=new HashMap<HTableInterface,List<HBaseDataWrapper>>();
  try {
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        HTableInterface hTable=null;
        Object rowKey=node.getEntityId();
        Object entity=node.getData();
        if (node.isInState(RemovedState.class)) {
          delete(entity,rowKey);
        }
 else {
          EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
          HBaseDataWrapper columnWrapper=new HBaseDataHandler.HBaseDataWrapper(rowKey,new java.util.HashSet<Attribute>(),entity,metadata.getTableName());
          MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
          EntityType entityType=metaModel.entity(node.getDataClass());
          List<HBaseDataWrapper> embeddableData=new ArrayList<HBaseDataHandler.HBaseDataWrapper>();
          hTable=((HBaseDataHandler)handler).gethTable(metadata.getSchema());
          ((HBaseDataHandler)handler).preparePersistentData(metadata.getSchema(),metadata.getTableName(),entity,rowKey,metaModel,entityType.getAttributes(),columnWrapper,embeddableData);
          List<HBaseDataWrapper> dataSet=null;
          if (data.containsKey(hTable)) {
            dataSet=data.get(metadata.getTableName());
            addRecords(columnWrapper,embeddableData,dataSet);
          }
 else {
            dataSet=new ArrayList<HBaseDataHandler.HBaseDataWrapper>();
            addRecords(columnWrapper,embeddableData,dataSet);
            data.put(hTable,dataSet);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!data.isEmpty()) {
      ((HBaseDataHandler)handler).batch_insert(data);
    }
    return data.size();
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
}",0.9908952959028832
176353,"@Override public void persistJoinTable(JoinTableData joinTableData){
  String joinTableName=joinTableData.getJoinTableName();
  String invJoinColumnName=joinTableData.getInverseJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  for (  Object key : joinTableRecords.keySet()) {
    Set<Object> values=joinTableRecords.get(key);
    Object joinColumnValue=key;
    Map<String,Object> columns=new HashMap<String,Object>();
    for (    Object childValue : values) {
      Object invJoinColumnValue=childValue;
      columns.put(invJoinColumnName + ""String_Node_Str"" + invJoinColumnValue,invJoinColumnValue);
    }
    if (columns != null && !columns.isEmpty()) {
      try {
        handler.createTableIfDoesNotExist(joinTableName,joinTableName);
        handler.writeJoinTableData(joinTableName,joinColumnValue,columns);
      }
 catch (      IOException e) {
        throw new PersistenceException(e);
      }
    }
  }
}","@Override public void persistJoinTable(JoinTableData joinTableData){
  String joinTableName=joinTableData.getJoinTableName();
  String invJoinColumnName=joinTableData.getInverseJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  for (  Object key : joinTableRecords.keySet()) {
    Set<Object> values=joinTableRecords.get(key);
    Object joinColumnValue=key;
    Map<String,Object> columns=new HashMap<String,Object>();
    for (    Object childValue : values) {
      Object invJoinColumnValue=childValue;
      columns.put(invJoinColumnName + ""String_Node_Str"" + invJoinColumnValue,invJoinColumnValue);
    }
    if (columns != null && !columns.isEmpty()) {
      try {
        handler.createTableIfDoesNotExist(joinTableName,joinTableName);
        handler.writeJoinTableData(joinTableName,joinColumnValue,columns,joinTableName);
      }
 catch (      IOException e) {
        throw new PersistenceException(e);
      }
    }
  }
}",0.992827868852459
176354,"/** 
 * Writes columns data to HBase table, supplied as a map in Key/ value pair; key and value representing column name and value respectively.
 * @param htable the htable
 * @param rowKey the row key
 * @param columns the columns
 * @throws IOException Signals that an I/O exception has occurred.
 */
void writeColumns(HTableInterface htable,Object rowKey,Map<String,Object> columns) throws IOException ;","/** 
 * Writes columns data to HBase table, supplied as a map in Key/ value pair; key and value representing column name and value respectively.
 * @param htable the htable
 * @param rowKey the row key
 * @param columns the columns
 * @throws IOException Signals that an I/O exception has occurred.
 */
void writeColumns(HTableInterface htable,Object rowKey,Map<String,Object> columns,String columnFamilyName) throws IOException ;",0.971291866028708
176355,"/** 
 * Write relations.
 * @param htable the htable
 * @param rowKey the row key
 * @param containsEmbeddedObjectsOnly the contains embedded objects only
 * @param relations the relations
 * @throws IOException Signals that an I/O exception has occurred.
 */
void writeRelations(HTableInterface htable,Object rowKey,boolean containsEmbeddedObjectsOnly,List<RelationHolder> relations) throws IOException ;","/** 
 * Write relations.
 * @param htable the htable
 * @param rowKey the row key
 * @param containsEmbeddedObjectsOnly the contains embedded objects only
 * @param relations the relations
 * @throws IOException Signals that an I/O exception has occurred.
 */
void writeRelations(HTableInterface htable,Object rowKey,boolean containsEmbeddedObjectsOnly,List<RelationHolder> relations,String columnFamilyName) throws IOException ;",0.9712230215827338
176356,"/** 
 * Delete specific row.
 * @param rowKey the row key
 * @param tableName the table name
 * @throws IOException Signals that an I/O exception has occurred.
 */
void deleteRow(Object rowKey,String tableName) throws IOException ;","/** 
 * Delete specific row.
 * @param rowKey the row key
 * @param tableName the table name
 * @throws IOException Signals that an I/O exception has occurred.
 */
void deleteRow(Object rowKey,String tableName,String columnFamilyName) throws IOException ;",0.9506172839506172
176357,"/** 
 * Populates data for give column family, column name, and HBase table name.
 * @param tableName the table name
 * @param clazz the clazz
 * @param m the m
 * @param rowKey the row key
 * @param f 
 * @param relationNames the relation names
 * @return the object
 * @throws IOException Signals that an I/O exception has occurred.
 */
List readData(String tableName,Class clazz,EntityMetadata m,Object rowKey,List<String> relatationNames,FilterList f,String... columns) throws IOException ;","/** 
 * Populates data for give column family, column name, and HBase table name.
 * @param tableName the table name
 * @param clazz the clazz
 * @param m the m
 * @param rowKey the row key
 * @param f
 * @param relationNames the relation names
 * @return the object
 * @throws IOException Signals that an I/O exception has occurred.
 */
List readData(String tableName,Class clazz,EntityMetadata m,Object rowKey,List<String> relatationNames,FilterList f,String... columns) throws IOException ;",0.9989868287740628
176358,"/** 
 * Writes data into Join Table.
 * @param tableName the table name
 * @param rowId the row id
 * @param columns the columns
 * @throws IOException Signals that an I/O exception has occurred.
 */
void writeJoinTableData(String tableName,Object rowId,Map<String,Object> columns) throws IOException ;","/** 
 * Writes data into Join Table.
 * @param tableName the table name
 * @param rowId the row id
 * @param columns the columns
 * @throws IOException Signals that an I/O exception has occurred.
 */
void writeJoinTableData(String tableName,Object rowId,Map<String,Object> columns,String joinTableName) throws IOException ;",0.9664
176359,"/** 
 * @param tableName
 * @param clazz
 * @param m
 * @param relationNames
 * @param startRow
 * @param endRow
 * @param columns
 * @param f 
 * @return
 */
List readDataByRange(String tableName,Class clazz,EntityMetadata m,byte[] startRow,byte[] endRow,String[] columns,FilterList f) throws IOException ;","/** 
 * @param tableName
 * @param clazz
 * @param m
 * @param relationNames
 * @param startRow
 * @param endRow
 * @param columns
 * @param f
 * @return
 */
List readDataByRange(String tableName,Class clazz,EntityMetadata m,byte[] startRow,byte[] endRow,String[] columns,FilterList f) throws IOException ;",0.99836867862969
176360,"/** 
 * Inits the filter.
 */
private void initFilter(){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  if (null == filter) {
    return;
  }
  List<String> clauses=tokenize(filter,INTER_CLAUSE_PATTERN);
  clauses=parseFilterForBetweenClause(clauses);
  boolean newClause=true;
  for (  String clause : clauses) {
    if (newClause) {
      List<String> tokens=tokenize(clause,INTRA_CLAUSE_PATTERN);
      if (tokens.size() != 3) {
        throw new PersistenceException(""String_Node_Str"" + clause);
      }
      String property=tokens.get(0);
      property=property.substring((entityAlias + ""String_Node_Str"").length());
      String columnName=null;
      try {
        Metamodel metaModel=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(getPersistenceUnit());
        columnName=((AbstractAttribute)metaModel.entity(entityClass).getAttribute(property)).getJPAColumnName();
      }
 catch (      IllegalArgumentException iaex) {
        logger.info(""String_Node_Str"" + property + ""String_Node_Str"");
      }
      if (columnName == null && property.indexOf(""String_Node_Str"") > 0) {
        String enclosingEmbeddedField=MetadataUtils.getEnclosingEmbeddedFieldName(metadata,property,true);
        if (enclosingEmbeddedField != null) {
          columnName=property;
        }
      }
      String condition=tokens.get(1);
      if (!Arrays.asList(INTRA_CLAUSE_OPERATORS).contains(condition.toUpperCase())) {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
      FilterClause filterClause=new FilterClause(columnName,condition,tokens.get(2));
      filtersQueue.add(filterClause);
      onTypedParameter(tokens,filterClause,property);
      newClause=false;
    }
 else {
      if (Arrays.asList(INTER_CLAUSE_OPERATORS).contains(clause.toUpperCase())) {
        filtersQueue.add(clause.toUpperCase());
        newClause=true;
      }
 else {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
    }
  }
}","/** 
 * Inits the filter.
 */
private void initFilter(){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  if (null == filter) {
    return;
  }
  List<String> clauses=tokenize(filter,INTER_CLAUSE_PATTERN);
  clauses=parseFilterForBetweenClause(clauses);
  boolean newClause=true;
  for (  String clause : clauses) {
    if (newClause) {
      List<String> tokens=tokenize(clause,INTRA_CLAUSE_PATTERN);
      if (tokens.size() != 3) {
        throw new PersistenceException(""String_Node_Str"" + clause);
      }
      String property=tokens.get(0);
      if (property.indexOf(""String_Node_Str"") > 0) {
        property=property.substring((entityAlias + ""String_Node_Str"").length());
      }
      String columnName=null;
      try {
        Metamodel metaModel=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(getPersistenceUnit());
        columnName=((AbstractAttribute)metaModel.entity(entityClass).getAttribute(property)).getJPAColumnName();
      }
 catch (      IllegalArgumentException iaex) {
        logger.info(""String_Node_Str"" + property + ""String_Node_Str"");
      }
      if (columnName == null && property.indexOf(""String_Node_Str"") > 0) {
        String enclosingEmbeddedField=MetadataUtils.getEnclosingEmbeddedFieldName(metadata,property,true);
        if (enclosingEmbeddedField != null) {
          columnName=property;
        }
      }
      String condition=tokens.get(1);
      if (!Arrays.asList(INTRA_CLAUSE_OPERATORS).contains(condition.toUpperCase())) {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
      FilterClause filterClause=new FilterClause(columnName,condition,tokens.get(2));
      filtersQueue.add(filterClause);
      onTypedParameter(tokens,filterClause,property);
      newClause=false;
    }
 else {
      if (Arrays.asList(INTER_CLAUSE_OPERATORS).contains(clause.toUpperCase())) {
        filtersQueue.add(clause.toUpperCase());
        newClause=true;
      }
 else {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
    }
  }
}",0.9845550379995096
176361,"@Override public void persistJoinTable(JoinTableData joinTableData){
  String joinTableName=joinTableData.getJoinTableName();
  String invJoinColumnName=joinTableData.getInverseJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  for (  Object key : joinTableRecords.keySet()) {
    Set<Object> values=joinTableRecords.get(key);
    Object joinColumnValue=key;
    Map<String,Object> columns=new HashMap<String,Object>();
    for (    Object childValue : values) {
      Object invJoinColumnValue=childValue;
      columns.put(invJoinColumnName + ""String_Node_Str"" + invJoinColumnValue,invJoinColumnValue);
    }
    if (columns != null && !columns.isEmpty()) {
      try {
        handler.createTableIfDoesNotExist(joinTableName,joinTableName);
        handler.writeJoinTableData(joinTableName,joinColumnValue,columns,joinTableName);
      }
 catch (      IOException e) {
        throw new PersistenceException(e);
      }
    }
  }
}","@Override public void persistJoinTable(JoinTableData joinTableData){
  String joinTableName=joinTableData.getJoinTableName();
  String invJoinColumnName=joinTableData.getInverseJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  for (  Object key : joinTableRecords.keySet()) {
    Set<Object> values=joinTableRecords.get(key);
    Object joinColumnValue=key;
    Map<String,Object> columns=new HashMap<String,Object>();
    for (    Object childValue : values) {
      Object invJoinColumnValue=childValue;
      columns.put(invJoinColumnName + ""String_Node_Str"" + invJoinColumnValue,invJoinColumnValue);
    }
    if (columns != null && !columns.isEmpty()) {
      try {
        handler.createTableIfDoesNotExist(joinTableData.getSchemaName(),joinTableName);
        handler.writeJoinTableData(joinTableData.getSchemaName(),joinColumnValue,columns,joinTableName);
      }
 catch (      IOException e) {
        throw new PersistenceException(e);
      }
    }
  }
}",0.983983983983984
176362,"/** 
 * Writes data into Join Table.
 * @param tableName the table name
 * @param rowId the row id
 * @param columns the columns
 * @throws IOException Signals that an I/O exception has occurred.
 */
void writeJoinTableData(String tableName,Object rowId,Map<String,Object> columns,String joinTableName) throws IOException ;","/** 
 * Writes data into Join Table.
 * @param tableName the table name
 * @param rowId the row id
 * @param columns the columns
 * @throws IOException Signals that an I/O exception has occurred.
 */
void writeJoinTableData(String tableName,Object rowId,Map<String,Object> columns,String columnFamilyName) throws IOException ;",0.9676425269645608
176363,"@Override public void writeData(String tableName,EntityMetadata m,Object entity,Object rowId,List<RelationHolder> relations) throws IOException {
  HTableInterface hTable=gethTable(tableName);
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entityType=metaModel.entity(m.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  HBaseDataWrapper columnWrapper=new HBaseDataWrapper(rowId,new java.util.HashMap<String,Attribute>(),entity,null);
  List<HBaseDataWrapper> persistentData=new ArrayList<HBaseDataHandler.HBaseDataWrapper>(attributes.size());
  preparePersistentData(tableName,m.getTableName(),entity,rowId,metaModel,attributes,columnWrapper,persistentData);
  hbaseWriter.writeColumns(hTable,columnWrapper.getRowKey(),columnWrapper.getColumns(),entity,m.getTableName());
  for (  HBaseDataWrapper wrapper : persistentData) {
    hbaseWriter.writeColumns(hTable,wrapper.getColumnFamily(),wrapper.getRowKey(),wrapper.getColumns(),wrapper.getEntity());
  }
  boolean containsEmbeddedObjectsOnly=columnWrapper.getColumns().isEmpty() && persistentData.isEmpty();
  if (relations != null && !relations.isEmpty()) {
    hbaseWriter.writeRelations(hTable,rowId,containsEmbeddedObjectsOnly,relations,m.getTableName());
  }
  puthTable(hTable);
}","@Override public void writeData(String tableName,EntityMetadata m,Object entity,Object rowId,List<RelationHolder> relations) throws IOException {
  HTableInterface hTable=gethTable(tableName);
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entityType=metaModel.entity(m.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  HBaseDataWrapper columnWrapper=new HBaseDataWrapper(rowId,new java.util.HashMap<String,Attribute>(),entity,null);
  List<HBaseDataWrapper> persistentData=new ArrayList<HBaseDataHandler.HBaseDataWrapper>(attributes.size());
  preparePersistentData(tableName,m.getTableName(),entity,rowId,metaModel,attributes,columnWrapper,persistentData);
  hbaseWriter.writeColumns(hTable,columnWrapper.getRowKey(),columnWrapper.getColumns(),entity,m.getTableName());
  for (  HBaseDataWrapper wrapper : persistentData) {
    hbaseWriter.writeColumns(hTable,wrapper.getColumnFamily(),wrapper.getRowKey(),wrapper.getColumns(),wrapper.getValues(),wrapper.getEntity());
  }
  boolean containsEmbeddedObjectsOnly=columnWrapper.getColumns().isEmpty() && persistentData.isEmpty();
  if (relations != null && !relations.isEmpty()) {
    hbaseWriter.writeRelations(hTable,rowId,containsEmbeddedObjectsOnly,relations,m.getTableName());
  }
  puthTable(hTable);
}",0.9926953981008036
176364,"/** 
 * @param rowKey
 * @param columns
 * @param entity
 * @param columnFamily
 */
public HBaseDataWrapper(Object rowKey,Map<String,Attribute> columns,Object entity,String columnFamily){
  super();
  this.rowKey=rowKey;
  this.columns=columns;
  this.entity=entity;
  this.columnFamily=columnFamily;
}","public HBaseDataWrapper(Object rowKey,Map<String,Attribute> columns,Map<String,Object> values,Object entity,String columnFamily){
  super();
  this.rowKey=rowKey;
  this.columns=columns;
  this.values=values;
  this.entity=entity;
  this.columnFamily=columnFamily;
}",0.3380281690140845
176365,"@Override public void writeJoinTableData(String tableName,Object rowId,Map<String,Object> columns,String joinTableName) throws IOException {
  HTableInterface hTable=gethTable(tableName);
  hbaseWriter.writeColumns(hTable,rowId,columns,joinTableName);
  puthTable(hTable);
}","@Override public void writeJoinTableData(String tableName,Object rowId,Map<String,Object> columns,String columnFamilyName) throws IOException {
  HTableInterface hTable=gethTable(tableName);
  hbaseWriter.writeColumns(hTable,rowId,columns,columnFamilyName);
  puthTable(hTable);
}",0.924187725631769
176366,"/** 
 * @param tableName
 * @param entity
 * @param rowId
 * @param metaModel
 * @param attributes
 * @param columnWrapper
 * @param persistentData
 * @return
 * @throws IOException
 */
public void preparePersistentData(String tableName,String columnFamily,Object entity,Object rowId,MetamodelImpl metaModel,Set<Attribute> attributes,HBaseDataWrapper columnWrapper,List<HBaseDataWrapper> persistentData) throws IOException {
  for (  Attribute column : attributes) {
    String fieldName=((AbstractAttribute)column).getJPAColumnName();
    Class javaType=((AbstractAttribute)column).getBindableJavaType();
    if (metaModel.isEmbeddable(javaType)) {
      String columnFamilyName=((AbstractAttribute)column).getJPAColumnName();
      Field columnFamilyField=(Field)column.getJavaMember();
      Object columnFamilyObject=null;
      try {
        columnFamilyObject=PropertyAccessorHelper.getObject(entity,columnFamilyField);
      }
 catch (      PropertyAccessException paex) {
        log.error(""String_Node_Str"",columnFamilyName,entity);
        throw new KunderaException(paex);
      }
      if (columnFamilyObject != null) {
        Set<Attribute> columns=metaModel.embeddable(javaType).getAttributes();
        Map<String,Attribute> columnNameToAttribute=new HashMap<String,Attribute>();
        if (column.isCollection()) {
          String dynamicCFName=null;
          ElementCollectionCacheManager ecCacheHandler=ElementCollectionCacheManager.getInstance();
          if (ecCacheHandler.isCacheEmpty()) {
            int count=0;
            for (            Object obj : (Collection)columnFamilyObject) {
              for (              Attribute attribute : columns) {
                columnNameToAttribute.put(columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + ((AbstractAttribute)attribute).getJPAColumnName()+ Constants.EMBEDDED_COLUMN_NAME_DELIMITER+ count,attribute);
              }
              persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,obj,columnFamily));
              count++;
            }
          }
 else {
            int lastEmbeddedObjectCount=ecCacheHandler.getLastElementCollectionObjectCount(rowId);
            for (            Object obj : (Collection)columnFamilyObject) {
              dynamicCFName=ecCacheHandler.getElementCollectionObjectName(rowId,obj);
              if (dynamicCFName == null) {
                for (                Attribute attribute : columns) {
                  columnNameToAttribute.put(columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + ((AbstractAttribute)attribute).getJPAColumnName()+ Constants.EMBEDDED_COLUMN_NAME_DELIMITER+ (++lastEmbeddedObjectCount),attribute);
                }
              }
              persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,obj,columnFamily));
            }
            ecCacheHandler.clearCache();
          }
        }
 else {
          for (          Attribute attribute : columns) {
            columnNameToAttribute.put(((AbstractAttribute)attribute).getJPAColumnName(),attribute);
          }
          if (columnFamilyField.isAnnotationPresent(Embedded.class)) {
            persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,columnFamilyObject,columnFamily));
          }
 else {
            persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,columnFamilyObject,columnFamily));
          }
        }
      }
    }
 else     if (!column.isAssociation()) {
      columnWrapper.addColumn(((AbstractAttribute)column).getJPAColumnName(),column);
    }
  }
}","/** 
 * @param tableName
 * @param entity
 * @param rowId
 * @param metaModel
 * @param attributes
 * @param columnWrapper
 * @param persistentData
 * @return
 * @throws IOException
 */
public void preparePersistentData(String tableName,String columnFamily,Object entity,Object rowId,MetamodelImpl metaModel,Set<Attribute> attributes,HBaseDataWrapper columnWrapper,List<HBaseDataWrapper> persistentData) throws IOException {
  for (  Attribute column : attributes) {
    String fieldName=((AbstractAttribute)column).getJPAColumnName();
    Class javaType=((AbstractAttribute)column).getBindableJavaType();
    if (metaModel.isEmbeddable(javaType)) {
      String columnFamilyName=((AbstractAttribute)column).getJPAColumnName();
      Field columnFamilyField=(Field)column.getJavaMember();
      Object columnFamilyObject=null;
      try {
        columnFamilyObject=PropertyAccessorHelper.getObject(entity,columnFamilyField);
      }
 catch (      PropertyAccessException paex) {
        log.error(""String_Node_Str"",columnFamilyName,entity);
        throw new KunderaException(paex);
      }
      if (columnFamilyObject != null) {
        Set<Attribute> columns=metaModel.embeddable(javaType).getAttributes();
        Map<String,Attribute> columnNameToAttribute=new HashMap<String,Attribute>();
        Map<String,Object> columnNameToValue=new HashMap<String,Object>();
        if (column.isCollection()) {
          String dynamicCFName=null;
          ElementCollectionCacheManager ecCacheHandler=ElementCollectionCacheManager.getInstance();
          if (ecCacheHandler.isCacheEmpty()) {
            int count=0;
            for (            Object obj : (Collection)columnFamilyObject) {
              for (              Attribute attribute : columns) {
                String columnName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + ((AbstractAttribute)attribute).getJPAColumnName()+ Constants.EMBEDDED_COLUMN_NAME_DELIMITER+ count;
                columnNameToAttribute.put(columnName,attribute);
                columnNameToValue.put(columnName,PropertyAccessorHelper.getObject(obj,(Field)attribute.getJavaMember()));
              }
              persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,columnNameToValue,obj,columnFamily));
              count++;
            }
          }
 else {
            int lastEmbeddedObjectCount=ecCacheHandler.getLastElementCollectionObjectCount(rowId);
            for (            Object obj : (Collection)columnFamilyObject) {
              dynamicCFName=ecCacheHandler.getElementCollectionObjectName(rowId,obj);
              if (dynamicCFName == null) {
                ++lastEmbeddedObjectCount;
                for (                Attribute attribute : columns) {
                  String columnName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + ((AbstractAttribute)attribute).getJPAColumnName()+ Constants.EMBEDDED_COLUMN_NAME_DELIMITER+ (lastEmbeddedObjectCount);
                  columnNameToAttribute.put(columnName,attribute);
                  columnNameToValue.put(columnName,PropertyAccessorHelper.getObject(obj,(Field)attribute.getJavaMember()));
                }
              }
              persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,columnNameToValue,obj,columnFamily));
            }
            ecCacheHandler.clearCache();
          }
        }
 else {
          for (          Attribute attribute : columns) {
            columnNameToAttribute.put(((AbstractAttribute)attribute).getJPAColumnName(),attribute);
            columnNameToValue.put(((AbstractAttribute)attribute).getJPAColumnName(),PropertyAccessorHelper.getObject(columnFamilyObject,(Field)attribute.getJavaMember()));
          }
          if (columnFamilyField.isAnnotationPresent(Embedded.class)) {
            persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,columnNameToValue,columnFamilyObject,columnFamily));
          }
 else {
            persistentData.add(new HBaseDataWrapper(rowId,columnNameToAttribute,columnNameToValue,columnFamilyObject,columnFamily));
          }
        }
      }
    }
 else     if (!column.isAssociation()) {
      columnWrapper.addColumn(((AbstractAttribute)column).getJPAColumnName(),column);
      columnWrapper.addValue(((AbstractAttribute)column).getJPAColumnName(),PropertyAccessorHelper.getObject(entity,(Field)column.getJavaMember()));
    }
  }
}",0.8803001876172608
176367,"@Override public void persistRows(Map<HTableInterface,List<HBaseDataWrapper>> rows) throws IOException {
  List<Put> dataSet=new ArrayList<Put>(rows.size());
  for (  HTableInterface hTable : rows.keySet()) {
    List<HBaseDataWrapper> row=rows.get(hTable);
    for (    HBaseDataWrapper data : row) {
      dataSet.add(preparePut(data.getColumnFamily(),data.getRowKey(),data.getColumns(),data.getEntity()));
    }
    hTable.put(dataSet);
    dataSet.clear();
  }
}","@Override public void persistRows(Map<HTableInterface,List<HBaseDataWrapper>> rows) throws IOException {
  List<Put> dataSet=new ArrayList<Put>(rows.size());
  for (  HTableInterface hTable : rows.keySet()) {
    List<HBaseDataWrapper> row=rows.get(hTable);
    for (    HBaseDataWrapper data : row) {
      dataSet.add(preparePut(data.getColumnFamily(),data.getRowKey(),data.getColumns(),data.getValues()));
    }
    hTable.put(dataSet);
    dataSet.clear();
  }
}",0.9871244635193132
176368,"/** 
 * Prepare put.
 * @param columnFamily the column family
 * @param rowKey the row key
 * @param columns the columns
 * @param columnFamilyObj the column family obj
 * @return the put
 * @throws IOException Signals that an I/O exception has occurred.
 */
private Put preparePut(String columnFamily,Object rowKey,Map<String,Attribute> columns,Object columnFamilyObj) throws IOException {
  Put p=new Put(HBaseUtils.getBytes(rowKey));
  for (  String columnName : columns.keySet()) {
    Attribute column=columns.get(columnName);
    if (!column.isCollection() && !((SingularAttribute)column).isId()) {
      String qualifier=columnName;
      try {
        Object o=PropertyAccessorHelper.getObject(columnFamilyObj,(Field)column.getJavaMember());
        byte[] value=HBaseUtils.getBytes(o);
        if (value != null && columnFamily != null) {
          p.add(Bytes.toBytes(columnFamily),Bytes.toBytes(qualifier),value);
        }
      }
 catch (      PropertyAccessException e1) {
        throw new IOException(e1);
      }
    }
  }
  return p;
}","/** 
 * Prepare put.
 * @param columnFamily the column family
 * @param rowKey the row key
 * @param columns the columns
 * @param values TODO
 * @param columnFamilyObj the column family obj
 * @return the put
 * @throws IOException Signals that an I/O exception has occurred.
 */
private Put preparePut(String columnFamily,Object rowKey,Map<String,Attribute> columns,Map<String,Object> values) throws IOException {
  Put p=new Put(HBaseUtils.getBytes(rowKey));
  for (  String columnName : columns.keySet()) {
    Attribute column=columns.get(columnName);
    if (!column.isCollection() && !((SingularAttribute)column).isId()) {
      String qualifier=columnName;
      try {
        Object o=values.get(columnName);
        byte[] value=HBaseUtils.getBytes(o);
        if (value != null && columnFamily != null) {
          p.add(Bytes.toBytes(columnFamily),Bytes.toBytes(qualifier),value);
        }
      }
 catch (      PropertyAccessException e1) {
        throw new IOException(e1);
      }
    }
  }
  return p;
}",0.9286403085824494
176369,"/** 
 */
private void getDB(){
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  MongoDBClient client=(MongoDBClient)clients.get(persistenceUnit);
  if (client != null) {
    try {
      Field mongodb=client.getClass().getDeclaredField(""String_Node_Str"");
      if (!mongodb.isAccessible()) {
        mongodb.setAccessible(true);
      }
      db=(DB)mongodb.get(client);
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    NoSuchFieldException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
}","/** 
 */
private void getDB(){
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  MongoDBClient client=(MongoDBClient)clients.get(persistenceUnit);
  if (client != null) {
    try {
      Field mongodb=client.getClass().getDeclaredField(""String_Node_Str"");
      if (!mongodb.isAccessible()) {
        mongodb.setAccessible(true);
      }
      db=(DB)mongodb.get(client);
    }
 catch (    SecurityException e) {
      Assert.fail(e.getMessage());
    }
catch (    NoSuchFieldException e) {
      Assert.fail(e.getMessage());
    }
catch (    IllegalArgumentException e) {
      Assert.fail(e.getMessage());
    }
catch (    IllegalAccessException e) {
      Assert.fail(e.getMessage());
    }
  }
}",0.8746438746438746
176370,"/** 
 * Execute query and Return list of Objects.
 * @param cqlQuery
 * @param clazz
 * @param relationalField
 * @param dataHandler
 * @return
 */
public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField,CassandraDataHandler dataHandler,boolean isCql3Enabled){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(clazz);
  CqlResult result=null;
  List returnedEntities=new ArrayList();
  try {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",cqlQuery);
    }
    result=executeCQLQuery(cqlQuery,isCql3Enabled);
    if (result != null && (result.getRows() != null || result.getRowsSize() > 0)) {
      returnedEntities=new ArrayList<Object>(result.getRowsSize());
      Iterator<CqlRow> iter=result.getRowsIterator();
      while (iter.hasNext()) {
        CqlRow row=iter.next();
        Object rowKey=null;
        ThriftRow thriftRow=null;
        thriftRow=new ThriftRow(rowKey,entityMetadata.getTableName(),row.getColumns(),new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
        Object entity=dataHandler.populateEntity(thriftRow,entityMetadata,relationalField,relationalField != null && !relationalField.isEmpty());
        if (entity != null) {
          returnedEntities.add(entity);
        }
 else {
          returnedEntities.add(row.getColumns().get(0));
        }
      }
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  return returnedEntities;
}","/** 
 * Execute query and Return list of Objects.
 * @param cqlQuery
 * @param clazz
 * @param relationalField
 * @param dataHandler
 * @return
 */
public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField,CassandraDataHandler dataHandler,boolean isCql3Enabled){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(clazz);
  CqlResult result=null;
  List returnedEntities=new ArrayList();
  try {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",cqlQuery);
    }
    result=executeCQLQuery(cqlQuery,isCql3Enabled);
    if (result != null && (result.getRows() != null || result.getRowsSize() > 0)) {
      returnedEntities=new ArrayList<Object>(result.getRowsSize());
      Iterator<CqlRow> iter=result.getRowsIterator();
      while (iter.hasNext()) {
        CqlRow row=iter.next();
        Object rowKey=null;
        ThriftRow thriftRow=null;
        thriftRow=new ThriftRow(rowKey,entityMetadata.getTableName(),row.getColumns(),new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
        Object entity=dataHandler.populateEntity(thriftRow,entityMetadata,relationalField,relationalField != null && !relationalField.isEmpty());
        if (entity != null) {
          returnedEntities.add(entity);
        }
 else {
          returnedEntities.add(row.getColumns().get(0));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  return returnedEntities;
}",0.8306429548563612
176371,"/** 
 * Creates secondary indexes on columns if not already created.
 * @param tableName Column family name
 * @param poolName Pool Name
 * @param columns List of columns
 * @param columnType
 */
protected void createIndexesOnColumns(EntityMetadata m,String tableName,List<Column> columns,Class columnType){
  Object pooledConnection=null;
  try {
    Cassandra.Client api=null;
    pooledConnection=getConection();
    api=getConnection(pooledConnection);
    KsDef ksDef=api.describe_keyspace(m.getSchema());
    List<CfDef> cfDefs=ksDef.getCf_defs();
    CfDef columnFamilyDefToUpdate=null;
    boolean isUpdatable=false;
    for (    CfDef cfDef : cfDefs) {
      if (cfDef.getName().equals(tableName)) {
        columnFamilyDefToUpdate=cfDef;
        break;
      }
    }
    if (columnFamilyDefToUpdate == null) {
      log.error(""String_Node_Str"",tableName);
      throw new PersistenceException(""String_Node_Str"" + tableName + ""String_Node_Str"");
    }
    List<ColumnDef> columnMetadataList=columnFamilyDefToUpdate.getColumn_metadata();
    List<String> indexList=new ArrayList<String>();
    if (columnMetadataList != null) {
      for (      ColumnDef columnDef : columnMetadataList) {
        indexList.add(Bytes.toUTF8(columnDef.getName()));
      }
    }
    for (    Column column : columns) {
      ColumnDef columnDef=new ColumnDef();
      columnDef.setName(column.getName());
      columnDef.setValidation_class(CassandraValidationClassMapper.getValidationClass(columnType,false));
      columnDef.setIndex_type(IndexType.KEYS);
      if (!indexList.contains(Bytes.toUTF8(column.getName()))) {
        isUpdatable=true;
        columnFamilyDefToUpdate.addToColumn_metadata(columnDef);
      }
    }
    if (isUpdatable) {
      columnFamilyDefToUpdate.setKey_validation_class(CassandraValidationClassMapper.getValidationClass(m.getIdAttribute().getJavaType(),isCql3Enabled(m)));
      api.system_update_column_family(columnFamilyDefToUpdate);
    }
  }
 catch (  InvalidRequestException e) {
    log.warn(""String_Node_Str"",tableName,e);
  }
catch (  SchemaDisagreementException e) {
    log.warn(""String_Node_Str"",tableName,e);
  }
catch (  TException e) {
    log.warn(""String_Node_Str"",tableName,e);
  }
catch (  NotFoundException e) {
    log.warn(""String_Node_Str"",tableName,e);
  }
catch (  PropertyAccessException e) {
    log.warn(""String_Node_Str"",tableName,e);
  }
 finally {
    releaseConnection(pooledConnection);
  }
}","/** 
 * Creates secondary indexes on columns if not already created.
 * @param tableName Column family name
 * @param poolName Pool Name
 * @param columns List of columns
 * @param columnType
 */
protected void createIndexesOnColumns(EntityMetadata m,String tableName,List<Column> columns,Class columnType){
  Object pooledConnection=null;
  try {
    Cassandra.Client api=null;
    pooledConnection=getConection();
    api=getConnection(pooledConnection);
    KsDef ksDef=api.describe_keyspace(m.getSchema());
    List<CfDef> cfDefs=ksDef.getCf_defs();
    CfDef columnFamilyDefToUpdate=null;
    boolean isUpdatable=false;
    for (    CfDef cfDef : cfDefs) {
      if (cfDef.getName().equals(tableName)) {
        columnFamilyDefToUpdate=cfDef;
        break;
      }
    }
    if (columnFamilyDefToUpdate == null) {
      log.error(""String_Node_Str"",tableName);
      throw new PersistenceException(""String_Node_Str"" + tableName + ""String_Node_Str"");
    }
    List<ColumnDef> columnMetadataList=columnFamilyDefToUpdate.getColumn_metadata();
    List<String> indexList=new ArrayList<String>();
    if (columnMetadataList != null) {
      for (      ColumnDef columnDef : columnMetadataList) {
        indexList.add(Bytes.toUTF8(columnDef.getName()));
      }
    }
    for (    Column column : columns) {
      ColumnDef columnDef=new ColumnDef();
      columnDef.setName(column.getName());
      columnDef.setValidation_class(CassandraValidationClassMapper.getValidationClass(columnType,false));
      columnDef.setIndex_type(IndexType.KEYS);
      if (!indexList.contains(Bytes.toUTF8(column.getName()))) {
        isUpdatable=true;
        columnFamilyDefToUpdate.addToColumn_metadata(columnDef);
      }
    }
    if (isUpdatable) {
      columnFamilyDefToUpdate.setKey_validation_class(CassandraValidationClassMapper.getValidationClass(m.getIdAttribute().getJavaType(),isCql3Enabled(m)));
      api.system_update_column_family(columnFamilyDefToUpdate);
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",tableName,e);
  }
 finally {
    releaseConnection(pooledConnection);
  }
}",0.905337140347024
176372,"/** 
 * Return the generated value of id.
 * @param descriptor
 * @param pu
 * @return
 */
public Long getGeneratedValue(TableGeneratorDiscriptor descriptor,String pu){
  Cassandra.Client conn=getRawClient(pu,descriptor.getSchema());
  try {
    conn.set_keyspace(descriptor.getSchema());
    ColumnPath columnPath=new ColumnPath(descriptor.getTable());
    columnPath.setColumn(descriptor.getValueColumnName().getBytes());
    long latestCount=0l;
    try {
      latestCount=conn.get(ByteBuffer.wrap(descriptor.getPkColumnValue().getBytes()),columnPath,getConsistencyLevel()).counter_column.value;
    }
 catch (    NotFoundException e) {
      log.warn(""String_Node_Str"",descriptor.getPkColumnName());
      latestCount=0;
    }
    ColumnParent columnParent=new ColumnParent(descriptor.getTable());
    CounterColumn counterColumn=new CounterColumn(ByteBuffer.wrap(descriptor.getValueColumnName().getBytes()),1);
    conn.add(ByteBuffer.wrap(descriptor.getPkColumnValue().getBytes()),columnParent,counterColumn,getConsistencyLevel());
    if (latestCount == 0) {
      return (long)descriptor.getInitialValue();
    }
 else {
      return (latestCount + 1) * descriptor.getAllocationSize();
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",descriptor.getTable(),e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",descriptor.getTable(),e);
    throw new KunderaException(e);
  }
}","/** 
 * Return the generated value of id.
 * @param descriptor
 * @param pu
 * @return
 */
public Long getGeneratedValue(TableGeneratorDiscriptor descriptor,String pu){
  Cassandra.Client conn=getRawClient(pu,descriptor.getSchema());
  try {
    conn.set_keyspace(descriptor.getSchema());
    ColumnPath columnPath=new ColumnPath(descriptor.getTable());
    columnPath.setColumn(descriptor.getValueColumnName().getBytes());
    long latestCount=0l;
    try {
      latestCount=conn.get(ByteBuffer.wrap(descriptor.getPkColumnValue().getBytes()),columnPath,getConsistencyLevel()).counter_column.value;
    }
 catch (    NotFoundException e) {
      log.warn(""String_Node_Str"",descriptor.getPkColumnName());
      latestCount=0;
    }
    ColumnParent columnParent=new ColumnParent(descriptor.getTable());
    CounterColumn counterColumn=new CounterColumn(ByteBuffer.wrap(descriptor.getValueColumnName().getBytes()),1);
    conn.add(ByteBuffer.wrap(descriptor.getPkColumnValue().getBytes()),columnParent,counterColumn,getConsistencyLevel());
    if (latestCount == 0) {
      return (long)descriptor.getInitialValue();
    }
 else {
      return (latestCount + 1) * descriptor.getAllocationSize();
    }
  }
 catch (  UnavailableException e) {
    log.error(""String_Node_Str"",descriptor.getTable(),e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",descriptor.getTable(),e);
    throw new KunderaException(e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
}",0.9279556650246306
176373,"/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  String batchQuery=CQLTranslator.BATCH_QUERY;
  batchQuery=StringUtils.replace(batchQuery,CQLTranslator.STATEMENT,""String_Node_Str"");
  StringBuilder batchQueryBuilder=new StringBuilder(batchQuery);
  try {
    boolean isCql3Enabled=false;
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (isCql3Enabled(metadata)) {
          isCql3Enabled=true;
          List<RelationHolder> relationHolders=getRelationHolders(node);
          String query;
          if (node.isInState(RemovedState.class)) {
            query=onDeleteQuery(metadata,metaModel,id);
          }
 else {
            query=createInsertQuery(metadata,entity,conn,relationHolders,getTtlValues().get(metadata.getTableName()));
          }
          batchQueryBuilder.append(query);
        }
 else {
          if (node.isInState(RemovedState.class)) {
            delete(entity,id);
          }
 else {
            List<RelationHolder> relationHolders=getRelationHolders(node);
            Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
            mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
            recordsExecuted+=mutationMap.size();
            if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
              batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
            }
 else {
              batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
            }
            indexNode(node,metadata);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getConection();
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
      }
    }
    if (!nodes.isEmpty() && isCql3Enabled) {
      batchQueryBuilder.append(CQLTranslator.APPLY_BATCH);
      executeCQLQuery(batchQueryBuilder.toString(),false);
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    if (pooledConnection != null) {
      releaseConnection(pooledConnection);
    }
  }
  return recordsExecuted;
}","/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  String batchQuery=CQLTranslator.BATCH_QUERY;
  batchQuery=StringUtils.replace(batchQuery,CQLTranslator.STATEMENT,""String_Node_Str"");
  StringBuilder batchQueryBuilder=new StringBuilder(batchQuery);
  try {
    boolean isCql3Enabled=false;
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (isCql3Enabled(metadata)) {
          isCql3Enabled=true;
          List<RelationHolder> relationHolders=getRelationHolders(node);
          String query;
          if (node.isInState(RemovedState.class)) {
            query=onDeleteQuery(metadata,metaModel,id);
          }
 else {
            query=createInsertQuery(metadata,entity,conn,relationHolders,getTtlValues().get(metadata.getTableName()));
          }
          batchQueryBuilder.append(query);
        }
 else {
          if (node.isInState(RemovedState.class)) {
            delete(entity,id);
          }
 else {
            List<RelationHolder> relationHolders=getRelationHolders(node);
            Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
            mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
            recordsExecuted+=mutationMap.size();
            if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
              batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
            }
 else {
              batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
            }
            indexNode(node,metadata);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getConection();
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
      }
    }
    if (!nodes.isEmpty() && isCql3Enabled) {
      batchQueryBuilder.append(CQLTranslator.APPLY_BATCH);
      executeCQLQuery(batchQueryBuilder.toString(),false);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    if (pooledConnection != null) {
      releaseConnection(pooledConnection);
    }
  }
  return recordsExecuted;
}",0.8889911070223858
176374,"/** 
 * Deletes record for given primary key from counter column family.
 * @param pKey the key
 * @param metadata the metadata
 * @param consistencyLevel the consistency level
 */
protected void deleteRecordFromCounterColumnFamily(Object pKey,EntityMetadata metadata,ConsistencyLevel consistencyLevel){
  ColumnPath path=new ColumnPath(metadata.getTableName());
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  try {
    pooledConnection=getConection();
    conn=getConnection(pooledConnection);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",metadata.getTableName());
    }
    conn.remove_counter((CassandraUtilities.toBytes(pKey,metadata.getIdAttribute().getJavaType())).getBytes(),path,consistencyLevel);
  }
 catch (  InvalidRequestException ire) {
    log.error(""String_Node_Str"",ire);
    throw new PersistenceException(ire);
  }
catch (  UnavailableException ue) {
    log.error(""String_Node_Str"",ue);
    throw new PersistenceException(ue);
  }
catch (  TimedOutException toe) {
    log.error(""String_Node_Str"",toe);
    throw new PersistenceException(toe);
  }
catch (  TException te) {
    log.error(""String_Node_Str"",te);
    throw new PersistenceException(te);
  }
 finally {
    releaseConnection(pooledConnection);
  }
}","/** 
 * Deletes record for given primary key from counter column family.
 * @param pKey the key
 * @param metadata the metadata
 * @param consistencyLevel the consistency level
 */
protected void deleteRecordFromCounterColumnFamily(Object pKey,EntityMetadata metadata,ConsistencyLevel consistencyLevel){
  ColumnPath path=new ColumnPath(metadata.getTableName());
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  try {
    pooledConnection=getConection();
    conn=getConnection(pooledConnection);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",metadata.getTableName());
    }
    conn.remove_counter((CassandraUtilities.toBytes(pKey,metadata.getIdAttribute().getJavaType())).getBytes(),path,consistencyLevel);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
 finally {
    releaseConnection(pooledConnection);
  }
}",0.7954022988505747
176375,"/** 
 * Returns raw cassandra client from thrift connection pool.
 * @param persistenceUnit persistence unit.
 * @param schema schema or keyspace.
 * @return raw cassandra client.
 */
protected Cassandra.Client getRawClient(final String persistenceUnit,final String schema){
  Cassandra.Client client=null;
  Object pooledConnection;
  pooledConnection=getConection();
  client=getConnection(pooledConnection);
  try {
    client.set_cql_version(getCqlVersion());
  }
 catch (  InvalidRequestException irex) {
    log.error(""String_Node_Str"",irex);
    throw new KunderaException(irex);
  }
catch (  TException tex) {
    log.error(""String_Node_Str"",persistenceUnit,tex);
    throw new KunderaException(tex);
  }
 finally {
    releaseConnection(pooledConnection);
  }
  return client;
}","/** 
 * Returns raw cassandra client from thrift connection pool.
 * @param persistenceUnit persistence unit.
 * @param schema schema or keyspace.
 * @return raw cassandra client.
 */
protected Cassandra.Client getRawClient(final String persistenceUnit,final String schema){
  Cassandra.Client client=null;
  Object pooledConnection;
  pooledConnection=getConection();
  client=getConnection(pooledConnection);
  try {
    client.set_cql_version(getCqlVersion());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",persistenceUnit,e);
    throw new KunderaException(e);
  }
 finally {
    releaseConnection(pooledConnection);
  }
  return client;
}",0.7944636678200692
176376,"private Object populateCompositeId(EntityMetadata m,Object entity,String thriftColumnName,Object thriftColumnValue,MetamodelImpl metaModel) throws InstantiationException, IllegalAccessException {
  if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
    EmbeddableType compoundKey=metaModel.embeddable(m.getIdAttribute().getBindableJavaType());
    Object compoundKeyObject=null;
    try {
      Set<Attribute> attributes=compoundKey.getAttributes();
      for (      Attribute compoundAttribute : attributes) {
        if (((AbstractAttribute)compoundAttribute).getJPAColumnName().equals(thriftColumnName)) {
          entity=initialize(m,entity,null);
          compoundKeyObject=compoundKeyObject == null ? getCompoundKey(m,entity) : compoundKeyObject;
          setFieldValueViaCQL(compoundKeyObject,thriftColumnValue,compoundAttribute);
          PropertyAccessorHelper.set(entity,(Field)m.getIdAttribute().getJavaMember(),compoundKeyObject);
          break;
        }
      }
    }
 catch (    IllegalArgumentException iaex) {
    }
catch (    InstantiationException iex) {
      log.error(""String_Node_Str"",iex);
      throw new PersistenceException(iex);
    }
catch (    IllegalAccessException iaex) {
      log.error(""String_Node_Str"",iaex);
      throw new PersistenceException(iaex);
    }
  }
  return entity;
}","private Object populateCompositeId(EntityMetadata m,Object entity,String thriftColumnName,Object thriftColumnValue,MetamodelImpl metaModel) throws InstantiationException, IllegalAccessException {
  if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
    EmbeddableType compoundKey=metaModel.embeddable(m.getIdAttribute().getBindableJavaType());
    Object compoundKeyObject=null;
    try {
      Set<Attribute> attributes=compoundKey.getAttributes();
      for (      Attribute compoundAttribute : attributes) {
        if (((AbstractAttribute)compoundAttribute).getJPAColumnName().equals(thriftColumnName)) {
          entity=initialize(m,entity,null);
          compoundKeyObject=compoundKeyObject == null ? getCompoundKey(m,entity) : compoundKeyObject;
          setFieldValueViaCQL(compoundKeyObject,thriftColumnValue,compoundAttribute);
          PropertyAccessorHelper.set(entity,(Field)m.getIdAttribute().getJavaMember(),compoundKeyObject);
          break;
        }
      }
    }
 catch (    IllegalArgumentException iaex) {
    }
catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      throw new PersistenceException(e);
    }
  }
  return entity;
}",0.9227738376674548
176377,"/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    boolean isCql3Enabled=clientBase.isCql3Enabled(m);
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        if (CassandraConstants.CQL_KEY.equalsIgnoreCase(thriftColumnName) && tr.getId() == null) {
          entity=initialize(m,entity,null);
          setId(m,entity,column.getValue(),isCql3Enabled);
        }
 else {
          entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations,isCql3Enabled);
        }
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity,isCql3Enabled);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations,isCql3Enabled);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity,isCql3Enabled);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  InstantiationException iex) {
    log.error(""String_Node_Str"",iex);
    throw new PersistenceException(iex);
  }
catch (  IllegalAccessException iaex) {
    log.error(""String_Node_Str"",iaex);
    throw new PersistenceException(iaex);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relations) : entity;
}","/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    boolean isCql3Enabled=clientBase.isCql3Enabled(m);
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        if (CassandraConstants.CQL_KEY.equalsIgnoreCase(thriftColumnName) && tr.getId() == null) {
          entity=initialize(m,entity,null);
          setId(m,entity,column.getValue(),isCql3Enabled);
        }
 else {
          entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations,isCql3Enabled);
        }
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity,isCql3Enabled);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations,isCql3Enabled);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity,isCql3Enabled);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relations) : entity;
}",0.988339552238806
176378,"/** 
 * Populates collection field(s) into entity
 * @param entity
 * @param thriftColumnValue
 * @param attribute
 */
private void setCollectionValue(Object entity,Object thriftColumnValue,Attribute attribute){
  try {
    if (Collection.class.isAssignableFrom(((Field)attribute.getJavaMember()).getType())) {
      Collection outputCollection=null;
      ByteBuffer valueByteBuffer=ByteBuffer.wrap((byte[])thriftColumnValue);
      Class<?> genericClass=PropertyAccessorHelper.getGenericClass((Field)attribute.getJavaMember());
      Class<?> valueValidationClass=CassandraValidationClassMapper.getValidationClassInstance(genericClass,true);
      Object valueClassInstance=valueValidationClass.getDeclaredField(""String_Node_Str"").get(null);
      if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(List.class)) {
        ListType listType=ListType.getInstance((AbstractType)valueClassInstance);
        outputCollection=new ArrayList();
        outputCollection.addAll(listType.compose(valueByteBuffer));
      }
 else       if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(Set.class)) {
        SetType setType=SetType.getInstance((AbstractType)valueClassInstance);
        outputCollection=new HashSet();
        outputCollection.addAll(setType.compose(valueByteBuffer));
      }
      PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),outputCollection);
    }
 else     if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(Map.class)) {
      ByteBuffer valueByteBuffer=ByteBuffer.wrap((byte[])thriftColumnValue);
      List<Class<?>> mapGenericClasses=PropertyAccessorHelper.getGenericClasses((Field)attribute.getJavaMember());
      Class keyClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(0),true);
      Class valueClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(1),true);
      Object keyClassInstance=keyClass.getDeclaredField(""String_Node_Str"").get(null);
      Object valueClassInstance=valueClass.getDeclaredField(""String_Node_Str"").get(null);
      MapType mapType=MapType.getInstance((AbstractType)keyClassInstance,(AbstractType)valueClassInstance);
      Map outputMap=new HashMap();
      outputMap.putAll(mapType.compose(valueByteBuffer));
      PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),outputMap);
    }
  }
 catch (  IllegalArgumentException e) {
    log.error(""String_Node_Str"",attribute.getName(),e);
  }
catch (  SecurityException e) {
    log.error(""String_Node_Str"",attribute.getName(),e);
  }
catch (  IllegalAccessException e) {
    log.error(""String_Node_Str"",attribute.getName(),e);
  }
catch (  NoSuchFieldException e) {
    log.error(""String_Node_Str"",attribute.getName(),e);
  }
}","/** 
 * Populates collection field(s) into entity
 * @param entity
 * @param thriftColumnValue
 * @param attribute
 */
private void setCollectionValue(Object entity,Object thriftColumnValue,Attribute attribute){
  try {
    if (Collection.class.isAssignableFrom(((Field)attribute.getJavaMember()).getType())) {
      Collection outputCollection=null;
      ByteBuffer valueByteBuffer=ByteBuffer.wrap((byte[])thriftColumnValue);
      Class<?> genericClass=PropertyAccessorHelper.getGenericClass((Field)attribute.getJavaMember());
      Class<?> valueValidationClass=CassandraValidationClassMapper.getValidationClassInstance(genericClass,true);
      Object valueClassInstance=valueValidationClass.getDeclaredField(""String_Node_Str"").get(null);
      if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(List.class)) {
        ListType listType=ListType.getInstance((AbstractType)valueClassInstance);
        outputCollection=new ArrayList();
        outputCollection.addAll(listType.compose(valueByteBuffer));
      }
 else       if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(Set.class)) {
        SetType setType=SetType.getInstance((AbstractType)valueClassInstance);
        outputCollection=new HashSet();
        outputCollection.addAll(setType.compose(valueByteBuffer));
      }
      PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),outputCollection);
    }
 else     if (((Field)attribute.getJavaMember()).getType().isAssignableFrom(Map.class)) {
      ByteBuffer valueByteBuffer=ByteBuffer.wrap((byte[])thriftColumnValue);
      List<Class<?>> mapGenericClasses=PropertyAccessorHelper.getGenericClasses((Field)attribute.getJavaMember());
      Class keyClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(0),true);
      Class valueClass=CassandraValidationClassMapper.getValidationClassInstance(mapGenericClasses.get(1),true);
      Object keyClassInstance=keyClass.getDeclaredField(""String_Node_Str"").get(null);
      Object valueClassInstance=valueClass.getDeclaredField(""String_Node_Str"").get(null);
      MapType mapType=MapType.getInstance((AbstractType)keyClassInstance,(AbstractType)valueClassInstance);
      Map outputMap=new HashMap();
      outputMap.putAll(mapType.compose(valueByteBuffer));
      PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),outputMap);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",attribute.getName(),e);
    throw new PersistenceException(e);
  }
}",0.9422205438066464
176379,"/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  CassandraCli.cassandraSetUp();
  CassandraCli.initClient();
}","/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  CassandraCli.cassandraSetUp();
  CassandraCli.initClient();
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.8403361344537815
176380,"@Test public void test(){
  String query=""String_Node_Str"";
  KunderaQuery kunderaQuery=new KunderaQuery();
  KunderaQueryParser queryParser=new KunderaQueryParser(kunderaQuery,query);
  queryParser.parse();
  kunderaQuery.postParsingInit();
  Assert.assertNotNull(kunderaQuery.getEntityClass());
  Assert.assertEquals(Person.class,kunderaQuery.getEntityClass());
  Assert.assertNotNull(kunderaQuery.getEntityMetadata());
  Assert.assertTrue(KunderaMetadataManager.getEntityMetadata(Person.class).equals(kunderaQuery.getEntityMetadata()));
  Assert.assertNull(kunderaQuery.getFilter());
  Assert.assertTrue(kunderaQuery.getFilterClauseQueue().isEmpty());
  Assert.assertNotNull(kunderaQuery.getFrom());
  Assert.assertTrue(kunderaQuery.getUpdateClauseQueue().isEmpty());
  Assert.assertNotNull(kunderaQuery.getResult());
  Assert.assertEquals(PU,kunderaQuery.getPersistenceUnit());
  Assert.assertNull(kunderaQuery.getOrdering());
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.assertNotNull(kunderaQuery.getEntityClass());
    Assert.assertEquals(Person.class,kunderaQuery.getEntityClass());
    Assert.assertNotNull(kunderaQuery.getEntityMetadata());
    Assert.assertTrue(KunderaMetadataManager.getEntityMetadata(Person.class).equals(kunderaQuery.getEntityMetadata()));
    Assert.assertNull(kunderaQuery.getFilter());
    Assert.assertTrue(kunderaQuery.getFilterClauseQueue().isEmpty());
    Assert.assertNotNull(kunderaQuery.getFrom());
    Assert.assertTrue(kunderaQuery.getUpdateClauseQueue().isEmpty());
    Assert.assertNotNull(kunderaQuery.getResult());
    Assert.assertEquals(PU,kunderaQuery.getPersistenceUnit());
    Assert.assertNull(kunderaQuery.getOrdering());
  }
 catch (  JPQLParseException e) {
    Assert.fail();
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  PersistenceException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
  }
 catch (  QueryHandlerException qhex) {
    Assert.assertEquals(""String_Node_Str"",qhex.getMessage());
  }
}","@Test public void test(){
  String query=""String_Node_Str"";
  KunderaQuery kunderaQuery=new KunderaQuery();
  KunderaQueryParser queryParser=new KunderaQueryParser(kunderaQuery,query);
  queryParser.parse();
  kunderaQuery.postParsingInit();
  Assert.assertNotNull(kunderaQuery.getEntityClass());
  Assert.assertEquals(Person.class,kunderaQuery.getEntityClass());
  Assert.assertNotNull(kunderaQuery.getEntityMetadata());
  Assert.assertTrue(KunderaMetadataManager.getEntityMetadata(Person.class).equals(kunderaQuery.getEntityMetadata()));
  Assert.assertNull(kunderaQuery.getFilter());
  Assert.assertTrue(kunderaQuery.getFilterClauseQueue().isEmpty());
  Assert.assertNotNull(kunderaQuery.getFrom());
  Assert.assertTrue(kunderaQuery.getUpdateClauseQueue().isEmpty());
  Assert.assertNotNull(kunderaQuery.getResult());
  Assert.assertEquals(PU,kunderaQuery.getPersistenceUnit());
  Assert.assertNull(kunderaQuery.getOrdering());
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.assertNotNull(kunderaQuery.getEntityClass());
    Assert.assertEquals(Person.class,kunderaQuery.getEntityClass());
    Assert.assertNotNull(kunderaQuery.getEntityMetadata());
    Assert.assertTrue(KunderaMetadataManager.getEntityMetadata(Person.class).equals(kunderaQuery.getEntityMetadata()));
    Assert.assertNull(kunderaQuery.getFilter());
    Assert.assertTrue(kunderaQuery.getFilterClauseQueue().isEmpty());
    Assert.assertNotNull(kunderaQuery.getFrom());
    Assert.assertTrue(kunderaQuery.getUpdateClauseQueue().isEmpty());
    Assert.assertNotNull(kunderaQuery.getResult());
    Assert.assertEquals(PU,kunderaQuery.getPersistenceUnit());
    Assert.assertNull(kunderaQuery.getOrdering());
  }
 catch (  JPQLParseException e) {
    Assert.fail();
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
    Assert.fail();
  }
 catch (  PersistenceException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
  }
 catch (  QueryHandlerException qhex) {
    Assert.assertEquals(""String_Node_Str"",qhex.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
  }
 catch (  JPQLParseException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
  }
  try {
    query=""String_Node_Str"";
    kunderaQuery=new KunderaQuery();
    queryParser=new KunderaQueryParser(kunderaQuery,query);
    queryParser.parse();
    kunderaQuery.postParsingInit();
  }
 catch (  JPQLParseException e) {
    Assert.assertTrue(e.getMessage().startsWith(""String_Node_Str""));
  }
}",0.9200955667640032
176381,"@Test public void testUpdateClause(){
  String query=""String_Node_Str"";
  KunderaQuery kunderaQuery=new KunderaQuery();
  KunderaQueryParser queryParser=new KunderaQueryParser(kunderaQuery,query);
  queryParser.parse();
  kunderaQuery.postParsingInit();
  kunderaQuery.setParameter(1,33);
  kunderaQuery.setParameter(2,""String_Node_Str"");
  kunderaQuery.setParameter(3,32);
  Assert.assertEquals(3,kunderaQuery.getParameters().size());
  Iterator<Parameter<?>> parameters=kunderaQuery.getParameters().iterator();
  Assert.assertNotNull(kunderaQuery.getUpdateClauseQueue());
  for (  UpdateClause clause : kunderaQuery.getUpdateClauseQueue()) {
    Assert.assertNotNull(clause);
    Assert.assertNotNull(clause.getProperty());
    Assert.assertNotNull(clause.getValue());
    Assert.assertNotNull(clause.getClass());
    Assert.assertNotNull(clause.toString());
  }
  while (parameters.hasNext()) {
    Parameter parameter=parameters.next();
    Assert.assertTrue(kunderaQuery.isBound(parameter));
    Assert.assertNull(parameter.getName());
    Assert.assertNotNull(parameter.getPosition());
  }
  try {
    kunderaQuery.getClauseValue(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(kunderaQuery.toString());
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  try {
    kunderaQuery.getClauseValue(new JPAParameter());
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(kunderaQuery.toString());
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
}","@Test public void testUpdateClause(){
  String query=""String_Node_Str"";
  KunderaQuery kunderaQuery=new KunderaQuery();
  KunderaQueryParser queryParser=new KunderaQueryParser(kunderaQuery,query);
  queryParser.parse();
  kunderaQuery.postParsingInit();
  kunderaQuery.setParameter(1,33);
  kunderaQuery.setParameter(2,""String_Node_Str"");
  kunderaQuery.setParameter(3,32);
  Assert.assertEquals(3,kunderaQuery.getParameters().size());
  Iterator<Parameter<?>> parameters=kunderaQuery.getParameters().iterator();
  Assert.assertNotNull(kunderaQuery.getUpdateClauseQueue());
  for (  UpdateClause clause : kunderaQuery.getUpdateClauseQueue()) {
    Assert.assertNotNull(clause);
    Assert.assertNotNull(clause.getProperty());
    Assert.assertNotNull(clause.getValue());
    Assert.assertNotNull(clause.getClass());
    Assert.assertNotNull(clause.toString());
  }
  while (parameters.hasNext()) {
    Parameter parameter=parameters.next();
    Assert.assertTrue(kunderaQuery.isBound(parameter));
    Assert.assertNull(parameter.getName());
    Assert.assertNotNull(parameter.getPosition());
    Assert.assertNotNull(parameter.toString());
  }
  try {
    kunderaQuery.getClauseValue(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(kunderaQuery.toString());
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  try {
    kunderaQuery.getClauseValue(new JPAParameter());
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(kunderaQuery.toString());
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
}",0.9853836784409256
176382,"@Test public void test() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
  Person p1=new Person();
  p1.setAge(98);
  p1.setPersonId(""String_Node_Str"");
  p1.setDay(Day.SATURDAY);
  em.persist(p1);
  em.clear();
  Person p2=new Person();
  p2.setAge(100);
  p2.setPersonId(""String_Node_Str"");
  p2.setDay(Day.SATURDAY);
  em.persist(p2);
  String query=""String_Node_Str"";
  PersistenceDelegator delegator=CoreTestUtilities.getDelegator(em);
  KunderaQueryParser queryParser;
  KunderaQuery kunderaQuery=parseQuery(query);
  CoreQuery queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<Person> results=queryObj.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  final String deleteQuery=""String_Node_Str"";
  kunderaQuery=parseQuery(deleteQuery);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    Assert.assertNull(queryObj.getParameter(""String_Node_Str"",String.class));
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  Assert.assertNotNull(queryObj.getParameter(1,String.class));
  Assert.assertNotNull(queryObj.getParameterValue(1));
  try {
    queryObj.getParameterValue(1);
  }
 catch (  IllegalStateException usex) {
    Assert.assertEquals(""String_Node_Str"" + 1,usex.getMessage());
  }
  queryObj.setParameter(1,""String_Node_Str"");
  queryObj.executeUpdate();
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  queryObj.setHint(""String_Node_Str"",""String_Node_Str"");
  queryObj.setMaxResults(100);
  Assert.assertEquals(100,queryObj.getMaxResults());
  Assert.assertNotNull(queryObj.getHints());
  queryObj.setFetchSize(100);
  Assert.assertEquals(new Integer(100),queryObj.getFetchSize());
  query=""String_Node_Str"";
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  Set luceneResults=queryObj.fetchByLuceneQuery();
  Assert.assertNotNull(luceneResults);
  Assert.assertEquals(1,luceneResults.size());
  Assert.assertNotNull(queryObj.getParameter(""String_Node_Str"",String.class));
  Assert.assertTrue(queryObj.isBound(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(""String_Node_Str""));
  try {
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.getParameter(1);
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
    appMetadata.addQueryToCollection(query,query,true,null);
    queryObj=new CoreQuery(query,kunderaQuery,delegator);
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalStateException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  try {
    queryObj.getParameterValue(""String_Node_Str"");
  }
 catch (  IllegalArgumentException usex) {
    Assert.assertEquals(""String_Node_Str"",usex.getMessage());
  }
  onassertBi1MAssociation(delegator);
  onassertBiM1Association(delegator);
}","@Test public void test() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
  Person p1=new Person();
  p1.setAge(98);
  p1.setPersonId(""String_Node_Str"");
  p1.setDay(Day.SATURDAY);
  em.persist(p1);
  em.clear();
  Person p2=new Person();
  p2.setAge(100);
  p2.setPersonId(""String_Node_Str"");
  p2.setDay(Day.SATURDAY);
  em.persist(p2);
  String query=""String_Node_Str"";
  PersistenceDelegator delegator=CoreTestUtilities.getDelegator(em);
  KunderaQueryParser queryParser;
  KunderaQuery kunderaQuery=parseQuery(query);
  CoreQuery queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<Person> results=queryObj.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  final String deleteQuery=""String_Node_Str"";
  kunderaQuery=parseQuery(deleteQuery);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    Assert.assertNull(queryObj.getParameter(""String_Node_Str"",String.class));
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  Assert.assertNotNull(queryObj.getParameter(1,String.class));
  Assert.assertNotNull(queryObj.getParameterValue(1));
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  try {
    queryObj.getParameterValue(1);
  }
 catch (  IllegalStateException usex) {
    Assert.assertEquals(""String_Node_Str"" + 1,usex.getMessage());
  }
  queryObj.setParameter(1,""String_Node_Str"");
  queryObj.executeUpdate();
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  queryObj.setHint(""String_Node_Str"",""String_Node_Str"");
  queryObj.setMaxResults(100);
  Assert.assertEquals(100,queryObj.getMaxResults());
  Assert.assertNotNull(queryObj.getHints());
  queryObj.setFetchSize(100);
  Assert.assertEquals(new Integer(100),queryObj.getFetchSize());
  query=""String_Node_Str"";
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  Set luceneResults=queryObj.fetchByLuceneQuery();
  Assert.assertNotNull(luceneResults);
  Assert.assertEquals(1,luceneResults.size());
  Assert.assertNotNull(queryObj.getParameter(""String_Node_Str"",String.class));
  Assert.assertTrue(queryObj.isBound(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(""String_Node_Str""));
  try {
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.getParameter(1);
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
    appMetadata.addQueryToCollection(query,query,true,null);
    queryObj=new CoreQuery(query,kunderaQuery,delegator);
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalStateException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  try {
    final String updateQuery=""String_Node_Str"";
    kunderaQuery=parseQuery(updateQuery);
    queryObj=new CoreQuery(updateQuery,kunderaQuery,delegator);
    queryObj.executeUpdate();
    Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
    Assert.assertNotNull(queryObj.populateUsingLucene());
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
  try {
    queryObj.unwrap(Client.class);
  }
 catch (  ClassCastException usex) {
    Assert.assertEquals(""String_Node_Str"" + Integer.class + ""String_Node_Str"",usex.getMessage());
  }
  try {
    queryObj.getParameterValue(""String_Node_Str"");
  }
 catch (  IllegalArgumentException usex) {
    Assert.assertEquals(""String_Node_Str"",usex.getMessage());
  }
  query=""String_Node_Str"";
  delegator=CoreTestUtilities.getDelegator(em);
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",new Integer(32));
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  query=""String_Node_Str"";
  delegator=CoreTestUtilities.getDelegator(em);
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",new Integer(32));
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  query=""String_Node_Str"";
  delegator=CoreTestUtilities.getDelegator(em);
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",new Integer(32));
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  query=""String_Node_Str"";
  delegator=CoreTestUtilities.getDelegator(em);
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",new Integer(32));
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  query=""String_Node_Str"";
  delegator=CoreTestUtilities.getDelegator(em);
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",""String_Node_Str"");
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  onassertBi1MAssociation(delegator);
  onassertBiM1Association(delegator);
}",0.7607016268290466
176383,"private void onassertBi1MAssociation(PersistenceDelegator delegator){
  KunderaQuery kunderaQuery;
  CoreQuery queryObj;
  PersonB1M personBi1M=new PersonB1M();
  personBi1M.setPersonId(""String_Node_Str"");
  personBi1M.setPersonName(""String_Node_Str"");
  AddressB1M addressBi1M=new AddressB1M();
  addressBi1M.setAddressId(""String_Node_Str"");
  addressBi1M.setStreet(""String_Node_Str"");
  Set<AddressB1M> addresses=new HashSet<AddressB1M>();
  addresses.add(addressBi1M);
  AddressB1M addressBi1M_copy=new AddressB1M();
  addressBi1M_copy.setAddressId(""String_Node_Str"");
  addressBi1M_copy.setStreet(""String_Node_Str"");
  addresses.add(addressBi1M_copy);
  personBi1M.setAddresses(addresses);
  em.persist(personBi1M);
  em.clear();
  String selectAssociationQuery=""String_Node_Str"";
  kunderaQuery=parseQuery(selectAssociationQuery);
  queryObj=new CoreQuery(selectAssociationQuery,kunderaQuery,delegator);
  List<PersonB1M> associationResults=queryObj.getResultList();
  Assert.assertTrue(!associationResults.isEmpty());
  Assert.assertNotNull(associationResults.get(0).getAddresses());
  Assert.assertEquals(2,associationResults.get(0).getAddresses().size());
  selectAssociationQuery=""String_Node_Str"";
  kunderaQuery=parseQuery(selectAssociationQuery);
  queryObj=new CoreQuery(selectAssociationQuery,kunderaQuery,delegator);
  associationResults=queryObj.getResultList();
  Assert.assertTrue(associationResults.isEmpty());
}","private void onassertBi1MAssociation(PersistenceDelegator delegator){
  KunderaQuery kunderaQuery;
  CoreQuery queryObj;
  PersonB1M personBi1M=new PersonB1M();
  personBi1M.setPersonId(""String_Node_Str"");
  personBi1M.setPersonName(""String_Node_Str"");
  AddressB1M addressBi1M=new AddressB1M();
  addressBi1M.setAddressId(""String_Node_Str"");
  addressBi1M.setStreet(""String_Node_Str"");
  Set<AddressB1M> addresses=new HashSet<AddressB1M>();
  addresses.add(addressBi1M);
  AddressB1M addressBi1M_copy=new AddressB1M();
  addressBi1M_copy.setAddressId(""String_Node_Str"");
  addressBi1M_copy.setStreet(""String_Node_Str"");
  addresses.add(addressBi1M_copy);
  personBi1M.setAddresses(addresses);
  em.persist(personBi1M);
  em.clear();
  String query=""String_Node_Str"";
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  List<PersonB1M> associationResults=queryObj.getResultList();
  Assert.assertTrue(!associationResults.isEmpty());
  Assert.assertNotNull(associationResults.get(0).getAddresses());
  Assert.assertEquals(2,associationResults.get(0).getAddresses().size());
  query=""String_Node_Str"";
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  associationResults=queryObj.getResultList();
  Assert.assertTrue(associationResults.isEmpty());
}",0.9021739130434784
176384,"@Test public void testContainsBasicElementCollectionField(){
  EntityMetadata m1=KunderaMetadataManager.getEntityMetadata(Article.class);
  Assert.assertNotNull(m1);
  Assert.assertTrue(MetadataUtils.containsBasicElementCollectionField(m1));
  EntityMetadata m2=KunderaMetadataManager.getEntityMetadata(SingularEntityEmbeddable.class);
  Assert.assertNotNull(m2);
  Assert.assertFalse(MetadataUtils.containsBasicElementCollectionField(m2));
}","@Test public void testContainsBasicElementCollectionField(){
  EntityMetadata m1=KunderaMetadataManager.getEntityMetadata(Article.class);
  Assert.assertNotNull(m1);
  Assert.assertTrue(MetadataUtils.containsBasicElementCollectionField(m1));
  Assert.assertNotNull(m1.toString());
  EntityMetadata m2=KunderaMetadataManager.getEntityMetadata(SingularEntityEmbeddable.class);
  Assert.assertNotNull(m2);
  Assert.assertFalse(MetadataUtils.containsBasicElementCollectionField(m2));
  Assert.assertNotNull(m2.toString());
}",0.918918918918919
176385,"@Test public void testIsBasicElementCollectionField(){
  try {
    EntityMetadata m=KunderaMetadataManager.getEntityMetadata(Article.class);
    Field f=Article.class.getDeclaredField(""String_Node_Str"");
    Assert.assertFalse(MetadataUtils.isBasicElementCollectionField(f));
    Field f1=Article.class.getDeclaredField(""String_Node_Str"");
    Assert.assertTrue(MetadataUtils.isBasicElementCollectionField(f1));
    Field f2=Article.class.getDeclaredField(""String_Node_Str"");
    Assert.assertTrue(MetadataUtils.isBasicElementCollectionField(f2));
    Field f3=Article.class.getDeclaredField(""String_Node_Str"");
    Assert.assertTrue(MetadataUtils.isBasicElementCollectionField(f3));
  }
 catch (  SecurityException e) {
    Assert.fail(e.getMessage());
  }
catch (  NoSuchFieldException e) {
    Assert.fail(e.getMessage());
  }
}","@Test public void testIsBasicElementCollectionField(){
  try {
    EntityMetadata m=KunderaMetadataManager.getEntityMetadata(Article.class);
    Assert.assertNotNull(m.toString());
    Field f=Article.class.getDeclaredField(""String_Node_Str"");
    Assert.assertFalse(MetadataUtils.isBasicElementCollectionField(f));
    Field f1=Article.class.getDeclaredField(""String_Node_Str"");
    Assert.assertTrue(MetadataUtils.isBasicElementCollectionField(f1));
    Field f2=Article.class.getDeclaredField(""String_Node_Str"");
    Assert.assertTrue(MetadataUtils.isBasicElementCollectionField(f2));
    Field f3=Article.class.getDeclaredField(""String_Node_Str"");
    Assert.assertTrue(MetadataUtils.isBasicElementCollectionField(f3));
  }
 catch (  SecurityException e) {
    Assert.fail(e.getMessage());
  }
catch (  NoSuchFieldException e) {
    Assert.fail(e.getMessage());
  }
}",0.9764982373678026
176386,"@Test public void testEmbeddedCollection(){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(KunderaUser.class);
  Assert.assertNotNull(entityMetadata);
  Assert.assertTrue(entityMetadata.getIndexProperties().isEmpty());
  Assert.assertEquals(EntityMetadata.Type.SUPER_COLUMN_FAMILY,entityMetadata.getType());
}","@Test public void testEmbeddedCollection(){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(KunderaUser.class);
  Assert.assertNotNull(entityMetadata);
  Assert.assertTrue(entityMetadata.getIndexProperties().isEmpty());
  Assert.assertEquals(EntityMetadata.Type.SUPER_COLUMN_FAMILY,entityMetadata.getType());
  Assert.assertNotNull(entityMetadata.toString());
  entityMetadata.setCounterColumnType(false);
  Assert.assertFalse(entityMetadata.isCounterColumnType());
}",0.8101571946795647
176387,"@Test public void test(){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(Employe.class);
  Assert.assertNotNull(entityMetadata);
  Assert.assertNotNull(entityMetadata.getIndexProperties());
  Assert.assertFalse(entityMetadata.getIndexProperties().isEmpty());
  Assert.assertEquals(2,entityMetadata.getIndexProperties().size());
  Assert.assertNotNull(entityMetadata.getIndexProperties().get(""String_Node_Str""));
  Assert.assertNotNull(entityMetadata.getIndexProperties().get(""String_Node_Str""));
  Assert.assertNull(entityMetadata.getIndexProperties().get(""String_Node_Str""));
  Map<String,PropertyIndex> indexes=IndexProcessor.getIndexesOnEmbeddable(Department.class);
  Assert.assertNotNull(indexes);
  Assert.assertFalse(indexes.isEmpty());
  Assert.assertEquals(2,indexes.size());
  Assert.assertNotNull(indexes.get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",indexes.get(""String_Node_Str"").getIndexType());
  Assert.assertEquals(new Integer(Integer.MAX_VALUE),indexes.get(""String_Node_Str"").getMax());
  Assert.assertEquals(new Integer(Integer.MIN_VALUE),indexes.get(""String_Node_Str"").getMin());
  Assert.assertNotNull(indexes.get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",indexes.get(""String_Node_Str"").getIndexType());
  Assert.assertEquals(new Integer(200),indexes.get(""String_Node_Str"").getMax());
  Assert.assertEquals(new Integer(-200),indexes.get(""String_Node_Str"").getMin());
}","@Test public void test(){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(Employe.class);
  Assert.assertNotNull(entityMetadata);
  Assert.assertNotNull(entityMetadata.getIndexProperties());
  Assert.assertFalse(entityMetadata.getIndexProperties().isEmpty());
  Assert.assertEquals(2,entityMetadata.getIndexProperties().size());
  Assert.assertNotNull(entityMetadata.getIndexProperties().get(""String_Node_Str""));
  Assert.assertNotNull(entityMetadata.getIndexProperties().get(""String_Node_Str""));
  Assert.assertNull(entityMetadata.getIndexProperties().get(""String_Node_Str""));
  Assert.assertNotNull(entityMetadata.toString());
  Map<String,PropertyIndex> indexes=IndexProcessor.getIndexesOnEmbeddable(Department.class);
  Assert.assertNotNull(indexes);
  Assert.assertFalse(indexes.isEmpty());
  Assert.assertEquals(2,indexes.size());
  Assert.assertNotNull(indexes.get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",indexes.get(""String_Node_Str"").getIndexType());
  Assert.assertEquals(new Integer(Integer.MAX_VALUE),indexes.get(""String_Node_Str"").getMax());
  Assert.assertEquals(new Integer(Integer.MIN_VALUE),indexes.get(""String_Node_Str"").getMin());
  Assert.assertNotNull(indexes.get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",indexes.get(""String_Node_Str"").getIndexType());
  Assert.assertEquals(new Integer(200),indexes.get(""String_Node_Str"").getMax());
  Assert.assertEquals(new Integer(-200),indexes.get(""String_Node_Str"").getMin());
}",0.9827527899898546
176388,"/** 
 * Gets the entity manager factory.
 * @param useLucene
 * @param property
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(String property){
  ClientMetadata clientMetadata=new ClientMetadata();
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,CoreTestClientFactory.class.getName());
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,""String_Node_Str"");
  clientMetadata.setLuceneIndexDir(null);
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(persistenceUnit);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(persistenceUnit,puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(persistenceUnit);
  clazzToPu.put(Employe.class.getName(),pus);
  clazzToPu.put(KunderaUser.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(Employe.class);
  EntityMetadata m1=new EntityMetadata(KunderaUser.class);
  TableProcessor processor=new TableProcessor(null);
  processor.process(Employe.class,m);
  processor.process(KunderaUser.class,m1);
  IndexProcessor indexProcessor=new IndexProcessor();
  indexProcessor.process(Employe.class,m);
  indexProcessor.process(KunderaUser.class,m1);
  m.setPersistenceUnit(persistenceUnit);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(Employe.class,m);
  metaModel.addEntityMetadata(KunderaUser.class,m1);
  appMetadata.getMetamodelMap().put(persistenceUnit,metaModel);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  String[] persistenceUnits=new String[]{persistenceUnit};
  new ClientFactoryConfiguraton(null,persistenceUnits).configure();
  new SchemaConfiguration(null,persistenceUnits).configure();
  return null;
}","/** 
 * Gets the entity manager factory.
 * @param useLucene
 * @param property
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(String property){
  ClientMetadata clientMetadata=new ClientMetadata();
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,CoreTestClientFactory.class.getName());
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,""String_Node_Str"");
  clientMetadata.setLuceneIndexDir(null);
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(persistenceUnit);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(persistenceUnit,puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(persistenceUnit);
  clazzToPu.put(Employe.class.getName(),pus);
  clazzToPu.put(KunderaUser.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(Employe.class);
  EntityMetadata m1=new EntityMetadata(KunderaUser.class);
  TableProcessor processor=new TableProcessor(null);
  processor.process(Employe.class,m);
  processor.process(KunderaUser.class,m1);
  IndexProcessor indexProcessor=new IndexProcessor();
  indexProcessor.process(Employe.class,m);
  indexProcessor.process(KunderaUser.class,m1);
  Assert.assertNotNull(m1.toString());
  m.setPersistenceUnit(persistenceUnit);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(Employe.class,m);
  metaModel.addEntityMetadata(KunderaUser.class,m1);
  appMetadata.getMetamodelMap().put(persistenceUnit,metaModel);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  String[] persistenceUnits=new String[]{persistenceUnit};
  new ClientFactoryConfiguraton(null,persistenceUnits).configure();
  new SchemaConfiguration(null,persistenceUnits).configure();
  return null;
}",0.9928190020254096
176389,"/** 
 * Load client metadata.
 * @param puProperties
 */
protected void loadClientMetadata(Map<String,Object> puProperties){
  ClientMetadata clientMetadata=new ClientMetadata();
  String luceneDirectoryPath=puProperties != null ? (String)puProperties.get(PersistenceProperties.KUNDERA_INDEX_HOME_DIR) : null;
  String indexerClass=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit).getProperties().getProperty(PersistenceProperties.KUNDERA_INDEXER_CLASS);
  if (luceneDirectoryPath == null) {
    luceneDirectoryPath=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit).getProperty(PersistenceProperties.KUNDERA_INDEX_HOME_DIR);
  }
  if (luceneDirectoryPath != null) {
    clientMetadata.setLuceneIndexDir(luceneDirectoryPath);
    indexManager=new IndexManager(LuceneIndexer.getInstance(new StandardAnalyzer(Version.LUCENE_34),luceneDirectoryPath));
  }
 else   if (indexerClass != null) {
    try {
      Class<?> indexerClazz=Class.forName(indexerClass);
      Indexer indexer=(Indexer)indexerClazz.newInstance();
      indexManager=new IndexManager(indexer);
      clientMetadata.setIndexImplementor(indexerClass);
    }
 catch (    Exception cnfex) {
      logger.error(""String_Node_Str"" + indexerClass,cnfex);
      throw new KunderaException(cnfex);
    }
  }
 else {
    indexManager=new IndexManager(null);
  }
  if (KunderaMetadata.INSTANCE.getClientMetadata(persistenceUnit) == null) {
    KunderaMetadata.INSTANCE.addClientMetadata(persistenceUnit,clientMetadata);
  }
}","/** 
 * Load client metadata.
 * @param puProperties
 */
protected void loadClientMetadata(Map<String,Object> puProperties){
  ClientMetadata clientMetadata=new ClientMetadata();
  String luceneDirectoryPath=puProperties != null ? (String)puProperties.get(PersistenceProperties.KUNDERA_INDEX_HOME_DIR) : null;
  String indexerClass=puProperties != null ? (String)puProperties.get(PersistenceProperties.KUNDERA_INDEXER_CLASS) : null;
  if (indexerClass == null) {
    indexerClass=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit).getProperties().getProperty(PersistenceProperties.KUNDERA_INDEXER_CLASS);
  }
  if (luceneDirectoryPath == null) {
    luceneDirectoryPath=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit).getProperty(PersistenceProperties.KUNDERA_INDEX_HOME_DIR);
  }
  if (luceneDirectoryPath != null && !StringUtils.isEmpty(luceneDirectoryPath)) {
    clientMetadata.setLuceneIndexDir(luceneDirectoryPath);
    indexManager=new IndexManager(LuceneIndexer.getInstance(new StandardAnalyzer(Version.LUCENE_34),luceneDirectoryPath));
  }
 else   if (indexerClass != null) {
    try {
      Class<?> indexerClazz=Class.forName(indexerClass);
      Indexer indexer=(Indexer)indexerClazz.newInstance();
      indexManager=new IndexManager(indexer);
      clientMetadata.setIndexImplementor(indexerClass);
    }
 catch (    Exception cnfex) {
      logger.error(""String_Node_Str"" + indexerClass,cnfex);
      throw new KunderaException(cnfex);
    }
  }
 else {
    indexManager=new IndexManager(null);
  }
  if (KunderaMetadata.INSTANCE.getClientMetadata(persistenceUnit) == null) {
    KunderaMetadata.INSTANCE.addClientMetadata(persistenceUnit,clientMetadata);
  }
}",0.8688868886888689
176390,"@Test public void testEmbeddable(){
  LuceneIndexer indexer=LuceneIndexer.getInstance(new StandardAnalyzer(Version.LUCENE_34),LUCENE_DIR_PATH);
  IndexManager ixManager=new IndexManager(indexer);
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(SingularEntityEmbeddable.class);
  SingularEntityEmbeddable entity=new SingularEntityEmbeddable();
  entity.setKey(1);
  entity.setName(""String_Node_Str"");
  entity.setField(""String_Node_Str"");
  EmbeddableEntity embed1=new EmbeddableEntity();
  embed1.setField(""String_Node_Str"");
  EmbeddableEntityTwo embed2=new EmbeddableEntityTwo();
  embed1.setField(""String_Node_Str"");
  entity.setEmbeddableEntity(embed1);
  entity.setEmbeddableEntityTwo(embed2);
  em.persist(entity);
  String luceneQuery=""String_Node_Str"";
  Map<String,Object> results=ixManager.search(luceneQuery,0,10,false);
  Assert.assertFalse(results.isEmpty());
}","@Test public void testEmbeddable(){
  LuceneIndexer indexer=LuceneIndexer.getInstance(new StandardAnalyzer(Version.LUCENE_34),LUCENE_DIR_PATH);
  IndexManager ixManager=new IndexManager(indexer);
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(SingularEntityEmbeddable.class);
  SingularEntityEmbeddable entity=new SingularEntityEmbeddable();
  entity.setKey(1);
  entity.setName(""String_Node_Str"");
  entity.setField(""String_Node_Str"");
  EmbeddableEntity embed1=new EmbeddableEntity();
  embed1.setField(""String_Node_Str"");
  EmbeddableEntityTwo embed2=new EmbeddableEntityTwo();
  embed2.setField(1f);
  embed2.setName(""String_Node_Str"");
  entity.setEmbeddableEntity(embed1);
  entity.setEmbeddableEntityTwo(embed2);
  em.persist(entity);
  String luceneQuery=""String_Node_Str"";
  Map<String,Object> results=ixManager.search(luceneQuery,0,10,false);
  Assert.assertFalse(results.isEmpty());
}",0.9778761061946902
176391,"@Test public void test(){
  CoreTestClientFactory clientFactory=new CoreTestClientFactory();
  clientFactory.load(PU,null);
  clientFactory.setExternalProperties(new HashMap<String,Object>());
  Assert.assertEquals(PU,clientFactory.getPersistenceUnit());
  Assert.assertNotNull(clientFactory.getClientInstance());
  Assert.assertNotNull(clientFactory.getSchemaManager(null));
  Assert.assertNull(clientFactory.getConnectionPoolOrConnection());
  Assert.assertNotNull(clientFactory.getLoadBalancePolicy(""String_Node_Str""));
  Assert.assertNotNull(clientFactory.getLoadBalancePolicy(""String_Node_Str""));
  Assert.assertNotNull(clientFactory.getLoadBalancePolicy(""String_Node_Str""));
  try {
    clientFactory.onValidation(null,null);
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex.getMessage());
  }
  clientFactory.destroy();
}","@Test public void test(){
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  Map<String,PersistenceUnitMetadata> puMetadataMap=new HashMap<String,PersistenceUnitMetadata>();
  puMetadataMap.put(PU,puMetadata);
  KunderaMetadata.INSTANCE.getApplicationMetadata().addPersistenceUnitMetadata(puMetadataMap);
  CoreTestClientFactory clientFactory=new CoreTestClientFactory();
  clientFactory.load(PU,null);
  clientFactory.setExternalProperties(new HashMap<String,Object>());
  Assert.assertEquals(PU,clientFactory.getPersistenceUnit());
  Assert.assertNotNull(clientFactory.getClientInstance());
  Assert.assertNotNull(clientFactory.getSchemaManager(null));
  Assert.assertNull(clientFactory.getConnectionPoolOrConnection());
  Assert.assertNotNull(clientFactory.getLoadBalancePolicy(""String_Node_Str""));
  Assert.assertNotNull(clientFactory.getLoadBalancePolicy(""String_Node_Str""));
  Assert.assertNotNull(clientFactory.getLoadBalancePolicy(""String_Node_Str""));
  try {
    clientFactory.onValidation(null,null);
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex.getMessage());
  }
  clientFactory.destroy();
}",0.8568683957732949
176392,"/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  emf=Persistence.createEntityManagerFactory(PU);
  emf.createEntityManager();
}","/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
}",0.7859078590785907
176393,"@Test public void test() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
  Person p1=new Person();
  p1.setAge(98);
  p1.setPersonId(""String_Node_Str"");
  p1.setDay(Day.SATURDAY);
  em.persist(p1);
  em.clear();
  Person p2=new Person();
  p2.setAge(100);
  p2.setPersonId(""String_Node_Str"");
  p2.setDay(Day.SATURDAY);
  em.persist(p2);
  String query=""String_Node_Str"";
  PersistenceDelegator delegator=CoreTestUtilities.getDelegator(em);
  KunderaQueryParser queryParser;
  KunderaQuery kunderaQuery=parseQuery(query);
  CoreQuery queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<Person> results=queryObj.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  final String deleteQuery=""String_Node_Str"";
  kunderaQuery=parseQuery(deleteQuery);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    Assert.assertNull(queryObj.getParameter(""String_Node_Str"",String.class));
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  Assert.assertNotNull(queryObj.getParameter(1,String.class));
  Assert.assertNotNull(queryObj.getParameterValue(1));
  try {
    queryObj.getParameterValue(1);
  }
 catch (  IllegalStateException usex) {
    Assert.assertEquals(""String_Node_Str"" + 1,usex.getMessage());
  }
  queryObj.setParameter(1,""String_Node_Str"");
  queryObj.executeUpdate();
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  queryObj.setHint(""String_Node_Str"",""String_Node_Str"");
  queryObj.setMaxResults(100);
  Assert.assertEquals(100,queryObj.getMaxResults());
  Assert.assertNotNull(queryObj.getHints());
  queryObj.setFetchSize(100);
  Assert.assertEquals(new Integer(100),queryObj.getFetchSize());
  query=""String_Node_Str"";
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  Set luceneResults=queryObj.fetchByLuceneQuery();
  Assert.assertNotNull(luceneResults);
  Assert.assertEquals(1,luceneResults.size());
  Assert.assertNotNull(queryObj.getParameter(""String_Node_Str"",String.class));
  Assert.assertTrue(queryObj.isBound(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(""String_Node_Str""));
  try {
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.getParameter(1);
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
    appMetadata.addQueryToCollection(query,query,true,null);
    queryObj=new CoreQuery(query,kunderaQuery,delegator);
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalStateException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  try {
    queryObj.getParameterValue(""String_Node_Str"");
  }
 catch (  IllegalArgumentException usex) {
    Assert.assertEquals(""String_Node_Str"",usex.getMessage());
  }
}","@Test public void test() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
  Person p1=new Person();
  p1.setAge(98);
  p1.setPersonId(""String_Node_Str"");
  p1.setDay(Day.SATURDAY);
  em.persist(p1);
  em.clear();
  Person p2=new Person();
  p2.setAge(100);
  p2.setPersonId(""String_Node_Str"");
  p2.setDay(Day.SATURDAY);
  em.persist(p2);
  String query=""String_Node_Str"";
  PersistenceDelegator delegator=CoreTestUtilities.getDelegator(em);
  KunderaQueryParser queryParser;
  KunderaQuery kunderaQuery=parseQuery(query);
  CoreQuery queryObj=new CoreQuery(query,kunderaQuery,delegator);
  queryObj.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<Person> results=queryObj.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNotNull(queryObj.getLuceneQueryFromJPAQuery());
  Assert.assertNotNull(queryObj.populateUsingLucene());
  final String deleteQuery=""String_Node_Str"";
  kunderaQuery=parseQuery(deleteQuery);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    Assert.assertNull(queryObj.getParameter(""String_Node_Str"",String.class));
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  Assert.assertNotNull(queryObj.getParameter(1,String.class));
  Assert.assertNotNull(queryObj.getParameterValue(1));
  try {
    queryObj.getParameterValue(1);
  }
 catch (  IllegalStateException usex) {
    Assert.assertEquals(""String_Node_Str"" + 1,usex.getMessage());
  }
  queryObj.setParameter(1,""String_Node_Str"");
  queryObj.executeUpdate();
  kunderaQuery=parseQuery(query);
  queryObj=new CoreQuery(query,kunderaQuery,delegator);
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.setParameter(CoreTestUtilities.getParameter(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  queryObj.setHint(""String_Node_Str"",""String_Node_Str"");
  queryObj.setMaxResults(100);
  Assert.assertEquals(100,queryObj.getMaxResults());
  Assert.assertNotNull(queryObj.getHints());
  queryObj.setFetchSize(100);
  Assert.assertEquals(new Integer(100),queryObj.getFetchSize());
  query=""String_Node_Str"";
  queryObj.setParameter(queryObj.getParameter(""String_Node_Str""),""String_Node_Str"");
  results=queryObj.getResultList();
  Assert.assertEquals(0,results.size());
  Set luceneResults=queryObj.fetchByLuceneQuery();
  Assert.assertNotNull(luceneResults);
  Assert.assertEquals(1,luceneResults.size());
  Assert.assertNotNull(queryObj.getParameter(""String_Node_Str"",String.class));
  Assert.assertTrue(queryObj.isBound(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(queryObj.getParameter(""String_Node_Str"",String.class)));
  Assert.assertNotNull(queryObj.getParameterValue(""String_Node_Str""));
  try {
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    queryObj.getParameter(1);
  }
 catch (  IllegalArgumentException iaex) {
    Assert.assertNotNull(iaex);
  }
  try {
    ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
    appMetadata.addQueryToCollection(query,query,true,null);
    queryObj=new CoreQuery(query,kunderaQuery,delegator);
    Assert.assertNull(queryObj.getParameter(1,String.class));
    Assert.fail(""String_Node_Str"");
  }
 catch (  IllegalStateException iaex) {
    Assert.assertEquals(""String_Node_Str"",iaex.getMessage());
  }
  try {
    queryObj.getParameterValue(""String_Node_Str"");
  }
 catch (  IllegalArgumentException usex) {
    Assert.assertEquals(""String_Node_Str"",usex.getMessage());
  }
  onassertBi1MAssociation(delegator);
  onassertBiM1Association(delegator);
}",0.9909523809523808
176394,"/** 
 * Reads property file which is given in persistence unit
 * @param pu
 */
final public void read(String pu){
  String propertyFileName=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_CLIENT_PROPERTY) : null;
  puMetadata=KunderaMetadataManager.getPersistenceUnitMetadata(pu);
  if (propertyFileName == null) {
    propertyFileName=puMetadata != null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_CLIENT_PROPERTY) : null;
  }
  if (propertyFileName != null && PropertyType.value(propertyFileName).equals(PropertyType.xml)) {
    onXml(onParseXML(propertyFileName,puMetadata));
  }
}","/** 
 * Reads property file which is given in persistence unit
 * @param pu
 */
public void read(String pu){
  String propertyFileName=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_CLIENT_PROPERTY) : null;
  puMetadata=KunderaMetadataManager.getPersistenceUnitMetadata(pu);
  if (propertyFileName == null) {
    propertyFileName=puMetadata != null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_CLIENT_PROPERTY) : null;
  }
  if (propertyFileName != null && PropertyType.value(propertyFileName) != null && PropertyType.value(propertyFileName).equals(PropertyType.xml)) {
    onXml(onParseXML(propertyFileName,puMetadata));
  }
}",0.9590288315629742
176395,"/** 
 * Check for allowed property format.
 * @param propertyFileName
 * @return
 */
static PropertyType value(String propertyFileName){
  if (isXml(propertyFileName)) {
    return xml;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + propertyFileName);
}","/** 
 * Check for allowed property format.
 * @param propertyFileName
 * @return
 */
public static PropertyType value(String propertyFileName){
  PropertyType type=null;
  if (isValid(propertyFileName,PropertyType.xml)) {
    type=xml;
  }
 else   if (isValid(propertyFileName,PropertyType.properties)) {
    if (log.isWarnEnabled()) {
      log.warn(""String_Node_Str"");
    }
    type=properties;
  }
 else {
    log.warn(""String_Node_Str"",propertyFileName);
  }
  return type;
}",0.5809906291834003
176396,"/** 
 * Returns collection of column values for given join table. TODO: Method is very much tightly coupled with Join table implementation and does not serve purpose as it is meant for.
 */
@Override public <E>List<E> getColumnsById(String schemaName,String tableName,String pKeyColumnName,String columnName,Object pKeyColumnValue,Class columnJavaType){
  Object connection=null;
  List results=new ArrayList();
  try {
    connection=getConnection();
    String valueAsStr=PropertyAccessorHelper.getString(pKeyColumnValue);
    Double score=getDouble(valueAsStr);
    Set<String> resultKeys=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
      ((Transaction)connection).exec();
      resultKeys=(Set<String>)response.get();
    }
 else {
      resultKeys=((Jedis)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
    }
    for (    String hashKey : resultKeys) {
      List columnValues=null;
      if (resource != null && resource.isActive()) {
        Response response=((Transaction)connection).hmget(hashKey,columnName);
        ((Transaction)connection).exec();
        columnValues=(List)response.get();
      }
 else {
        columnValues=((Jedis)connection).hmget(hashKey,columnName);
      }
      if (columnValues != null && !columnValues.isEmpty()) {
        results.addAll(columnValues);
      }
    }
    return results;
  }
  finally {
    onCleanup(connection);
  }
}","/** 
 * Returns collection of column values for given join table. TODO: Method is very much tightly coupled with Join table implementation and does not serve purpose as it is meant for.
 */
@Override public <E>List<E> getColumnsById(String schemaName,String tableName,String pKeyColumnName,String columnName,Object pKeyColumnValue,Class columnJavaType){
  Object connection=null;
  List results=new ArrayList();
  try {
    connection=getConnection();
    String valueAsStr=PropertyAccessorHelper.getString(pKeyColumnValue);
    Double score=getDouble(valueAsStr);
    Set<String> resultKeys=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
      ((Transaction)connection).exec();
      resultKeys=(Set<String>)response.get();
    }
 else {
      resultKeys=((Jedis)connection).zrangeByScore(getHashKey(tableName,valueAsStr),score,score);
    }
    results=fetchColumn(columnName,connection,results,resultKeys);
    return results;
  }
  finally {
    onCleanup(connection);
  }
}",0.7499048344118767
176397,"public Object[] findIdsByColumn(String tableName,String columnName,Object columnValue){
  Object connection=null;
  try {
    connection=getConnection();
    String valueAsStr=PropertyAccessorHelper.getString(columnValue);
    Set<String> results=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,columnName),getDouble(valueAsStr),getDouble(valueAsStr));
      ((Transaction)connection).exec();
      results=(Set<String>)response.get();
    }
 else {
      results=((Jedis)connection).zrangeByScore(getHashKey(tableName,columnName),getDouble(valueAsStr),getDouble(valueAsStr));
    }
    if (results != null) {
      return results.toArray(new Object[0]);
    }
  }
  finally {
    onCleanup(connection);
  }
  return null;
}","private Object[] findIdsByColumn(String tableName,String columnName,Object columnValue){
  Object connection=null;
  try {
    connection=getConnection();
    String valueAsStr=PropertyAccessorHelper.getString(columnValue);
    Set<String> results=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,columnName),getDouble(valueAsStr),getDouble(valueAsStr));
      ((Transaction)connection).exec();
      results=(Set<String>)response.get();
    }
 else {
      results=((Jedis)connection).zrangeByScore(getHashKey(tableName,columnName),getDouble(valueAsStr),getDouble(valueAsStr));
    }
    if (results != null) {
      return results.toArray(new Object[0]);
    }
  }
  finally {
    onCleanup(connection);
  }
  return null;
}",0.9932803909590716
176398,"/** 
 * Scan class and put metadata.
 * @param bits the bits
 * @param reader the reader
 * @param entityMetadataMap the entity metadata map
 * @param entityNameToClassMap the entity name to class map
 * @param keyDiscriptor
 * @param persistence unit the persistence unit.
 * @throws IOException Signals that an I/O exception has occurred.
 */
private List<Class<?>> scanClassAndPutMetadata(InputStream bits,Reader reader,Map<String,EntityMetadata> entityMetadataMap,Map<String,Class<?>> entityNameToClassMap,String persistenceUnit,String client,Map<String,List<String>> clazzToPuMap,Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap) throws IOException {
  DataInputStream dstream=new DataInputStream(new BufferedInputStream(bits));
  ClassFile cf=null;
  String className=null;
  List<Class<?>> classes=new ArrayList<Class<?>>();
  try {
    cf=new ClassFile(dstream);
    className=cf.getName();
    List<String> annotations=new ArrayList<String>();
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.visibleTag));
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.invisibleTag));
    for (    String validAnn : reader.getValidAnnotations()) {
      if (annotations.contains(validAnn)) {
        Class<?> clazz2=Thread.currentThread().getContextClassLoader().loadClass(className);
        Class<?> clazz=this.getClass().getClassLoader().loadClass(className);
        if (entityNameToClassMap.containsKey(clazz.getSimpleName()) && !entityNameToClassMap.get(clazz.getSimpleName()).getName().equals(clazz.getName())) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityNameToClassMap.get(clazz.getSimpleName()).getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ persistenceUnit);
        }
        entityNameToClassMap.put(clazz.getSimpleName(),clazz);
        EntityMetadata metadata=entityMetadataMap.get(clazz);
        if (null == metadata) {
          log.debug(""String_Node_Str"" + clazz.getName());
synchronized (clazz) {
            if (null == metadata) {
              MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,client,KunderaCoreUtils.getExternalProperties(persistenceUnit,externalPropertyMap,persistenceUnits));
              metadata=metadataBuilder.buildEntityMetadata(clazz);
              if (metadata != null) {
                entityMetadataMap.put(clazz.getName(),metadata);
                mapClazztoPu(clazz,persistenceUnit,clazzToPuMap);
                processGeneratedValueAnnotation(clazz,persistenceUnit,metadata,entityNameToKeyDiscriptorMap);
              }
            }
          }
        }
        onValidateClientProperties(classes,clazz,persistenceUnit);
      }
    }
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + className + ""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    if (dstream != null) {
      dstream.close();
    }
    if (bits != null) {
      bits.close();
    }
  }
  return classes;
}","/** 
 * Scan class and put metadata.
 * @param bits the bits
 * @param reader the reader
 * @param entityMetadataMap the entity metadata map
 * @param entityNameToClassMap the entity name to class map
 * @param keyDiscriptor
 * @param persistence unit the persistence unit.
 * @throws IOException Signals that an I/O exception has occurred.
 */
private List<Class<?>> scanClassAndPutMetadata(InputStream bits,Reader reader,Map<String,EntityMetadata> entityMetadataMap,Map<String,Class<?>> entityNameToClassMap,String persistenceUnit,String client,Map<String,List<String>> clazzToPuMap,Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap) throws IOException {
  DataInputStream dstream=new DataInputStream(new BufferedInputStream(bits));
  ClassFile cf=null;
  String className=null;
  List<Class<?>> classes=new ArrayList<Class<?>>();
  try {
    cf=new ClassFile(dstream);
    className=cf.getName();
    List<String> annotations=new ArrayList<String>();
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.visibleTag));
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.invisibleTag));
    for (    String validAnn : reader.getValidAnnotations()) {
      if (annotations.contains(validAnn)) {
        Class<?> clazz=this.getClass().getClassLoader().loadClass(className);
        if (entityNameToClassMap.containsKey(clazz.getSimpleName()) && !entityNameToClassMap.get(clazz.getSimpleName()).getName().equals(clazz.getName())) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityNameToClassMap.get(clazz.getSimpleName()).getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ persistenceUnit);
        }
        entityNameToClassMap.put(clazz.getSimpleName(),clazz);
        EntityMetadata metadata=entityMetadataMap.get(clazz);
        if (null == metadata) {
          log.debug(""String_Node_Str"" + clazz.getName());
synchronized (clazz) {
            if (null == metadata) {
              MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,client,KunderaCoreUtils.getExternalProperties(persistenceUnit,externalPropertyMap,persistenceUnits));
              metadata=metadataBuilder.buildEntityMetadata(clazz);
              if (metadata != null) {
                entityMetadataMap.put(clazz.getName(),metadata);
                mapClazztoPu(clazz,persistenceUnit,clazzToPuMap);
                processGeneratedValueAnnotation(clazz,persistenceUnit,metadata,entityNameToKeyDiscriptorMap);
              }
            }
          }
        }
        onValidateClientProperties(classes,clazz,persistenceUnit);
      }
    }
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + className + ""String_Node_Str"");
  }
 finally {
    if (dstream != null) {
      dstream.close();
    }
    if (bits != null) {
      bits.close();
    }
  }
  return classes;
}",0.9804181878526386
176399,"/** 
 * Populates a relationship of type   {@link Collection} (i.e. those of type{@link Set} or {@link List})
 */
private void populateCollectionFromJoinTable(Object entity,EntityMetadata entityMetadata,PersistenceDelegator delegator,Relation relation){
  JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
  Client pClient=delegator.getClient(entityMetadata);
  String schema=entityMetadata.getSchema();
  EntityMetadata owningEntityMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
  Class columnJavaType=owningEntityMetadata.getIdAttribute().getJavaType();
  if (jtMetadata == null) {
    columnJavaType=entityMetadata.getIdAttribute().getJavaType();
    jtMetadata=owningEntityMetadata.getRelation(relation.getMappedBy()).getJoinTableMetadata();
    pClient=delegator.getClient(owningEntityMetadata);
    schema=owningEntityMetadata.getSchema();
  }
  String joinTableName=jtMetadata.getJoinTableName();
  Set<String> joinColumns=jtMetadata.getJoinColumns();
  Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
  String joinColumnName=(String)joinColumns.toArray()[0];
  String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
  Object entityId=PropertyAccessorHelper.getId(entity,entityMetadata);
  List<?> foreignKeys=pClient.getColumnsById(schema,joinTableName,joinColumnName,inverseJoinColumnName,entityId,columnJavaType);
  List childrenEntities=new ArrayList();
  for (  Object foreignKey : foreignKeys) {
    EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
    Object child=delegator.find(relation.getTargetEntity(),foreignKey);
    Object obj=child instanceof EnhanceEntity && child != null ? ((EnhanceEntity)child).getEntity() : child;
    Field biDirectionalField=relation.getBiDirectionalField();
    boolean isBidirectionalRelation=(biDirectionalField != null);
    if (isBidirectionalRelation && obj != null) {
      Object columnValue=PropertyAccessorHelper.getId(obj,childMetadata);
      Object[] pKeys=pClient.findIdsByColumn(entityMetadata.getSchema(),joinTableName,joinColumnName,inverseJoinColumnName,columnValue,entityMetadata.getEntityClazz());
      List parents=delegator.find(entity.getClass(),pKeys);
      PropertyAccessorHelper.set(obj,biDirectionalField,ObjectUtils.getFieldInstance(parents,biDirectionalField));
      System.out.println();
    }
    childrenEntities.add(obj);
  }
  Field childField=relation.getProperty();
  try {
    PropertyAccessorHelper.set(entity,childField,PropertyAccessorHelper.isCollection(childField.getType()) ? ObjectUtils.getFieldInstance(childrenEntities,childField) : childrenEntities.get(0));
    PersistenceCacheManager.addEntityToPersistenceCache(entity,delegator,entityId);
  }
 catch (  PropertyAccessException ex) {
    throw new EntityReaderException(ex);
  }
}","/** 
 * Populates a relationship of type   {@link Collection} (i.e. those of type{@link Set} or {@link List})
 */
private void populateCollectionFromJoinTable(Object entity,EntityMetadata entityMetadata,PersistenceDelegator delegator,Relation relation){
  JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
  Client pClient=delegator.getClient(entityMetadata);
  String schema=entityMetadata.getSchema();
  EntityMetadata owningEntityMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
  Class columnJavaType=owningEntityMetadata.getIdAttribute().getJavaType();
  if (jtMetadata == null) {
    columnJavaType=entityMetadata.getIdAttribute().getJavaType();
    jtMetadata=owningEntityMetadata.getRelation(relation.getMappedBy()).getJoinTableMetadata();
    pClient=delegator.getClient(owningEntityMetadata);
    schema=owningEntityMetadata.getSchema();
  }
  String joinTableName=jtMetadata.getJoinTableName();
  Set<String> joinColumns=jtMetadata.getJoinColumns();
  Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
  String joinColumnName=(String)joinColumns.toArray()[0];
  String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
  Object entityId=PropertyAccessorHelper.getId(entity,entityMetadata);
  List<?> foreignKeys=pClient.getColumnsById(schema,joinTableName,joinColumnName,inverseJoinColumnName,entityId,columnJavaType);
  List childrenEntities=new ArrayList();
  for (  Object foreignKey : foreignKeys) {
    EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
    Object child=delegator.find(relation.getTargetEntity(),foreignKey);
    Object obj=child instanceof EnhanceEntity && child != null ? ((EnhanceEntity)child).getEntity() : child;
    Field biDirectionalField=relation.getBiDirectionalField();
    boolean isBidirectionalRelation=(biDirectionalField != null);
    if (isBidirectionalRelation && obj != null) {
      Object columnValue=PropertyAccessorHelper.getId(obj,childMetadata);
      Object[] pKeys=pClient.findIdsByColumn(entityMetadata.getSchema(),joinTableName,joinColumnName,inverseJoinColumnName,columnValue,entityMetadata.getEntityClazz());
      List parents=delegator.find(entity.getClass(),pKeys);
      PropertyAccessorHelper.set(obj,biDirectionalField,ObjectUtils.getFieldInstance(parents,biDirectionalField));
    }
    childrenEntities.add(obj);
  }
  Field childField=relation.getProperty();
  try {
    PropertyAccessorHelper.set(entity,childField,PropertyAccessorHelper.isCollection(childField.getType()) ? ObjectUtils.getFieldInstance(childrenEntities,childField) : childrenEntities.get(0));
    PersistenceCacheManager.addEntityToPersistenceCache(entity,delegator,entityId);
  }
 catch (  PropertyAccessException ex) {
    throw new EntityReaderException(ex);
  }
}",0.9950756243404854
176400,"@Override public void clearProxies(){
  if (proxies != null) {
    for (    KunderaProxy proxy : proxies.values()) {
      proxy.getKunderaLazyInitializer().setOwner(null);
      proxy.getKunderaLazyInitializer().setInitialized(false);
    }
    proxies.clear();
  }
}","@Override public void clearProxies(){
  for (  KunderaProxy proxy : proxies.values()) {
    proxy.getKunderaLazyInitializer().setOwner(null);
    proxy.getKunderaLazyInitializer().setInitialized(false);
  }
  proxies.clear();
}",0.7434343434343434
176401,"@Override protected void createSchemaForPERSONNEL() throws SQLException {
  try {
    cli.update(""String_Node_Str"");
  }
 catch (  Exception e) {
    cli.update(""String_Node_Str"");
    cli.update(""String_Node_Str"");
    cli.update(""String_Node_Str"");
  }
}","@Override protected void createSchemaForPERSONNEL() throws SQLException {
}",0.4531722054380664
176402,"@Override protected void createSchemaForHABITAT() throws SQLException {
  try {
    cli.update(""String_Node_Str"");
  }
 catch (  Exception e) {
    cli.update(""String_Node_Str"");
    cli.update(""String_Node_Str"");
    cli.update(""String_Node_Str"");
  }
}","@Override protected void createSchemaForHABITAT() throws SQLException {
}",0.4464831804281345
176403,"/** 
 * Gets the last element collection object count.
 * @param rowKey the row key
 * @return the last element collection object count
 */
public int getLastElementCollectionObjectCount(Object rowKey){
  if (getElementCollectionCache().get(rowKey) == null) {
    log.debug(""String_Node_Str"" + rowKey);
    return -1;
  }
 else {
    Map<Object,String> elementCollectionMap=getElementCollectionCache().get(rowKey);
    Collection<String> elementCollectionObjectNames=elementCollectionMap.values();
    int max=0;
    for (    String s : elementCollectionObjectNames) {
      String elementCollectionCountStr=s.substring(s.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) + 1);
      int elementCollectionCount=0;
      try {
        elementCollectionCount=Integer.parseInt(elementCollectionCountStr);
      }
 catch (      NumberFormatException e) {
        log.error(""String_Node_Str"" + s);
        throw new PersistenceException(""String_Node_Str"" + s);
      }
      if (elementCollectionCount > max) {
        max=elementCollectionCount;
      }
    }
    return max;
  }
}","/** 
 * Gets the last element collection object count.
 * @param rowKey the row key
 * @return the last element collection object count
 */
public int getLastElementCollectionObjectCount(Object rowKey){
  if (getElementCollectionCache().get(rowKey) == null) {
    log.debug(""String_Node_Str"" + rowKey);
    return -1;
  }
 else {
    Map<Object,String> elementCollectionMap=getElementCollectionCache().get(rowKey);
    Collection<String> elementCollectionObjectNames=elementCollectionMap.values();
    int max=0;
    for (    String s : elementCollectionObjectNames) {
      String elementCollectionCountStr=s.substring(s.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) + 1);
      int elementCollectionCount=0;
      try {
        elementCollectionCount=Integer.parseInt(elementCollectionCountStr);
      }
 catch (      NumberFormatException e) {
        log.error(""String_Node_Str"" + s);
        throw new CacheException(""String_Node_Str"" + s,e);
      }
      if (elementCollectionCount > max) {
        max=elementCollectionCount;
      }
    }
    return max;
  }
}",0.9925581395348836
176404,"private static void getEmbeddableType(EntityMetadata m,Map<String,Field> columnNameToFieldMap,Map<String,Field> superColumnNameToFieldMap){
  Metamodel metaModel=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entityType=metaModel.entity(m.getEntityClazz());
  Set attributes=entityType.getAttributes();
  Iterator<Attribute> iter=attributes.iterator();
  while (iter.hasNext()) {
    Attribute attribute=iter.next();
    if (((MetamodelImpl)metaModel).isEmbeddable(((AbstractAttribute)attribute).getBindableJavaType())) {
      superColumnNameToFieldMap.put(((AbstractAttribute)attribute).getJPAColumnName(),(Field)attribute.getJavaMember());
      if (columnNameToFieldMap != null) {
        getAttributeOfEmbedddable(columnNameToFieldMap,metaModel,attribute);
      }
    }
 else {
      columnNameToFieldMap.put(((AbstractAttribute)attribute).getJPAColumnName(),(Field)attribute.getJavaMember());
    }
  }
}","private static void getEmbeddableType(EntityMetadata m,Map<String,Field> columnNameToFieldMap,Map<String,Field> superColumnNameToFieldMap){
  Metamodel metaModel=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entityType=metaModel.entity(m.getEntityClazz());
  Set attributes=entityType.getAttributes();
  Iterator<Attribute> iter=attributes.iterator();
  while (iter.hasNext()) {
    Attribute attribute=iter.next();
    if (((MetamodelImpl)metaModel).isEmbeddable(((AbstractAttribute)attribute).getBindableJavaType())) {
      superColumnNameToFieldMap.put(((AbstractAttribute)attribute).getJPAColumnName(),(Field)attribute.getJavaMember());
      if (columnNameToFieldMap != null) {
        getAttributeOfEmbedddable(columnNameToFieldMap,metaModel,attribute);
      }
    }
 else {
      if (columnNameToFieldMap != null) {
        columnNameToFieldMap.put(((AbstractAttribute)attribute).getJPAColumnName(),(Field)attribute.getJavaMember());
      }
    }
  }
}",0.9737638748738648
176405,"/** 
 * Retrun map of external properties for given pu;
 * @param pu
 * @param externalProperties
 * @param persistenceUnits
 * @return
 */
public static Map<String,Object> getExternalProperties(String pu,Map<String,Object> externalProperties,String... persistenceUnits){
  Map<String,Object> puProperty;
  if (persistenceUnits.length > 1 && externalProperties != null) {
    puProperty=(Map<String,Object>)externalProperties.get(pu);
    if (puProperty != null) {
      return fetchPropertyMap(puProperty);
    }
    return null;
  }
  return externalProperties;
}","/** 
 * Retrun map of external properties for given pu;
 * @param pu
 * @param externalProperties
 * @param persistenceUnits
 * @return
 */
public static Map<String,Object> getExternalProperties(String pu,Map<String,Object> externalProperties,String... persistenceUnits){
  Map<String,Object> puProperty;
  if (persistenceUnits != null && persistenceUnits.length > 1 && externalProperties != null) {
    puProperty=(Map<String,Object>)externalProperties.get(pu);
    if (puProperty != null) {
      return fetchPropertyMap(puProperty);
    }
    return null;
  }
  return externalProperties;
}",0.9758203799654576
176406,"/** 
 * Checks for super ""has"" in class ""in"".
 * @param has the has
 * @param in the in
 * @return true, if exists?
 */
public static boolean hasSuperClass(Class<?> has,Class<?> in){
  if (in.equals(has)) {
    return true;
  }
  boolean match=false;
  if (in.getSuperclass().equals(Object.class)) {
    return match;
  }
  match=hasSuperClass(has,in.getSuperclass());
  return match;
}","/** 
 * Checks for super ""has"" in class ""in"".
 * @param has the has
 * @param in the in
 * @return true, if exists?
 */
public static boolean hasSuperClass(Class<?> has,Class<?> in){
  if (in.equals(has)) {
    return true;
  }
  boolean match=false;
  if (in.getSuperclass() != null && in.getSuperclass().equals(Object.class)) {
    return match;
  }
  match=in.getSuperclass() != null ? hasSuperClass(has,in.getSuperclass()) : false;
  return match;
}",0.9201430274135876
176407,"/** 
 * Adds typed parameter to   {@link TypedParameter}
 * @param type type of parameter(e.g. NAMED/INDEXED)
 * @param parameter parameter name.
 * @param clause filter clause.
 */
private void addTypedParameter(Type type,String parameter,UpdateClause clause){
  if (typedParameter == null) {
    typedParameter=new TypedParameter(type);
  }
  if (typedParameter.getType().equals(type)) {
    typedParameter.addParameters(parameter,clause);
  }
 else {
    logger.warn(""String_Node_Str"");
  }
}","/** 
 * Adds typed parameter to   {@link TypedParameter}
 * @param type type of parameter(e.g. NAMED/INDEXED)
 * @param parameter parameter name.
 * @param clause filter clause.
 */
private void addTypedParameter(Type type,String parameter,UpdateClause clause){
  if (type != null) {
    if (typedParameter == null) {
      typedParameter=new TypedParameter(type);
    }
    if (typedParameter.getType().equals(type)) {
      typedParameter.addParameters(parameter,clause);
    }
 else {
      logger.warn(""String_Node_Str"");
    }
  }
}",0.9593023255813954
176408,"public void addUpdateClause(final String property,final String value){
  UpdateClause updateClause=new UpdateClause(property.trim(),value.trim());
  updateClauseQueue.add(updateClause);
  addTypedParameter(value.trim().startsWith(""String_Node_Str"") ? Type.INDEXED : Type.NAMED,property,updateClause);
}","public void addUpdateClause(final String property,final String value){
  UpdateClause updateClause=new UpdateClause(property.trim(),value.trim());
  updateClauseQueue.add(updateClause);
  addTypedParameter(value.trim().startsWith(""String_Node_Str"") ? Type.INDEXED : value.trim().startsWith(""String_Node_Str"") ? Type.NAMED : null,property,updateClause);
}",0.9207317073170732
176409,"@Override public List<?> getResultList(){
  if (log.isDebugEnabled())   log.info(""String_Node_Str"" + query);
  List results=new ArrayList();
  EntityMetadata m=getEntityMetadata();
  Client client=persistenceDelegeator.getClient(m);
  if (!m.isRelationViaJoinTable() && (m.getRelationNames() == null || (m.getRelationNames().isEmpty()))) {
    results=populateEntities(m,client);
  }
 else {
    results=recursivelyPopulateEntities(m,client);
  }
  if (kunderaQuery.isDeleteUpdate()) {
    onDeleteOrUpdate(results);
  }
  return results != null ? results : new ArrayList();
}","@Override public List<?> getResultList(){
  if (log.isDebugEnabled())   log.info(""String_Node_Str"" + query);
  List results=new ArrayList();
  EntityMetadata m=getEntityMetadata();
  Client client=persistenceDelegeator.getClient(m);
  if (!m.isRelationViaJoinTable() && (m.getRelationNames() == null || (m.getRelationNames().isEmpty()))) {
    results=populateEntities(m,client);
  }
 else {
    results=recursivelyPopulateEntities(m,client);
  }
  if (kunderaQuery.isDeleteUpdate()) {
    onDeleteOrUpdate(results);
  }
  if (results != null) {
    for (    Object obj : results) {
      KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().setProxyOwners(m,obj);
    }
  }
  return results != null ? results : new ArrayList();
}",0.8595166163141994
176410,"/** 
 * On id attribute.
 * @param builder the builder
 * @param entityMetadata the entity metadata
 * @param clazz the clazz
 * @param f the f
 */
private void onIdAttribute(final MetaModelBuilder builder,EntityMetadata entityMetadata,final Class clazz,Field f){
  EntityType entity=(EntityType)builder.getManagedTypes().get(clazz);
  Attribute attrib=entity.getAttribute(f.getName());
  if (!attrib.isCollection() && ((SingularAttribute)attrib).isId()) {
    entityMetadata.setIdAttribute((SingularAttribute)attrib);
  }
}","/** 
 * On id attribute.
 * @param builder the builder
 * @param entityMetadata the entity metadata
 * @param clazz the clazz
 * @param f the f
 */
private void onIdAttribute(final MetaModelBuilder builder,EntityMetadata entityMetadata,final Class clazz,Field f){
  EntityType entity=(EntityType)builder.getManagedTypes().get(clazz);
  Attribute attrib=entity.getAttribute(f.getName());
  if (!attrib.isCollection() && ((SingularAttribute)attrib).isId()) {
    entityMetadata.setIdAttribute((SingularAttribute)attrib);
    populateIdAccessorMethods(entityMetadata,clazz,f);
  }
}",0.9501359927470536
176411,"protected boolean add(final Object object){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    Class<?> collectionClass=getRelation().getProperty().getType();
    if (collectionClass.isAssignableFrom(Set.class)) {
      dataCollection=new HashSet();
    }
 else     if (collectionClass.isAssignableFrom(List.class)) {
      dataCollection=new ArrayList();
    }
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && !dataCollection.contains(object) && object != null) {
    dataCollection.add(object);
    PropertyAccessorHelper.set(getOwner(),getRelation().getProperty(),dataCollection);
    result=true;
  }
  return result;
}","protected boolean add(final Object object){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && !dataCollection.contains(object) && object != null) {
    dataCollection.add(object);
    PropertyAccessorHelper.set(getOwner(),getRelation().getProperty(),dataCollection);
    result=true;
  }
  return result;
}",0.2901554404145077
176412,"protected boolean removeAll(final Collection collection){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && collection != null && !collection.isEmpty()) {
    for (    Object o : collection) {
      if (o != null) {
        getPersistenceDelegator().remove(o);
      }
    }
    dataCollection.removeAll(collection);
    result=true;
  }
  return result;
}","protected boolean removeAll(final Collection collection){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && collection != null && !collection.isEmpty()) {
    dataCollection.removeAll(collection);
    result=true;
  }
  return result;
}",0.3922984356197352
176413,"protected boolean addAll(final Collection collection){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && collection != null && !collection.isEmpty()) {
    for (    Object o : collection) {
      if (!dataCollection.contains(o) && o != null) {
        getPersistenceDelegator().persist(o);
        dataCollection.add(o);
      }
    }
    result=true;
  }
  return result;
}","protected boolean addAll(final Collection collection){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && collection != null && !collection.isEmpty()) {
    dataCollection.addAll(collection);
    result=true;
  }
  return result;
}",0.398576512455516
176414,"protected boolean remove(final Object object){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && object != null) {
    getPersistenceDelegator().remove(object);
    if (dataCollection.contains(object)) {
      dataCollection.remove(object);
    }
    result=true;
  }
  return result;
}","protected boolean remove(final Object object){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && object != null) {
    dataCollection.remove(object);
    result=true;
  }
  return result;
}",0.6498599439775911
176415,"protected boolean retainAll(final Collection collection){
  boolean result=false;
  eagerlyLoadDataCollection();
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && collection != null && !collection.isEmpty()) {
    result=dataCollection.retainAll(collection);
  }
  return result;
}","protected boolean retainAll(final Collection collection){
  boolean result=false;
  eagerlyLoadDataCollection();
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && collection != null && !collection.isEmpty()) {
    result=dataCollection.retainAll(collection);
  }
  return result;
}",0.6251808972503617
176416,"@Override public void add(final int arg0,final Object arg1){
  eagerlyLoadDataCollection();
  List dataList=(List)dataCollection;
  if (dataList != null && !dataList.contains(arg1) && arg1 != null) {
    getPersistenceDelegator().persist(arg1);
    dataList.add(arg0,arg1);
  }
}","@Override public void add(final int arg0,final Object arg1){
  eagerlyLoadDataCollection();
  List dataList=(List)dataCollection;
  if (dataList == null) {
    dataList=new ArrayList();
  }
  if (arg1 != null && !dataList.contains(arg1)) {
    dataList.add(arg0,arg1);
  }
}",0.7884267631103075
176417,"@Override public Object remove(final int arg0){
  eagerlyLoadDataCollection();
  Object result=null;
  List dataList=(List)dataCollection;
  if (dataList != null && !dataList.isEmpty() && dataList.contains(arg0)) {
    getPersistenceDelegator().remove(arg0);
    result=dataList.remove(arg0);
  }
  return result;
}","@Override public Object remove(final int arg0){
  eagerlyLoadDataCollection();
  Object result=null;
  List dataList=(List)dataCollection;
  if (dataList != null && !dataList.isEmpty() && dataList.contains(arg0)) {
    result=dataList.remove(arg0);
  }
  return result;
}",0.8737201365187713
176418,"@Override public boolean addAll(final int index,final Collection collection){
  eagerlyLoadDataCollection();
  boolean result=false;
  List dataList=(List)dataCollection;
  if (dataList != null && collection != null && !collection.isEmpty()) {
    int position=0;
    for (    Object o : collection) {
      if (!dataList.contains(o) && o != null) {
        getPersistenceDelegator().persist(o);
        dataList.add(index + position++,o);
      }
    }
    result=true;
  }
  return result;
}","@Override public boolean addAll(final int index,final Collection collection){
  eagerlyLoadDataCollection();
  boolean result=false;
  List dataList=(List)dataCollection;
  if (dataList == null) {
    dataList=new ArrayList();
  }
  if (collection != null && !collection.isEmpty()) {
    int position=0;
    for (    Object o : collection) {
      if (o != null && !dataList.contains(o)) {
        dataList.add(index + position++,o);
      }
    }
    result=true;
  }
  return result;
}",0.8326530612244898
176419,"/** 
 * Handles find by range query for given start and end row key range values.
 * @param < E > parameterized entity class.
 * @param entityClass entity class.
 * @param metadata entity metadata
 * @param startRow start row.
 * @param endRow end row.
 * @return collection holding results.
 */
public <E>List<E> findByRange(Class<E> entityClass,EntityMetadata metadata,byte[] startRow,byte[] endRow,String[] columns){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String tableName=entityMetadata.getTableName();
  List results=new ArrayList();
  if (isFindKeyOnly(metadata,columns)) {
    columns=null;
    addFilter(tableName,new KeyOnlyFilter());
  }
  try {
    results=handler.readDataByRange(tableName,entityClass,metadata,startRow,endRow,columns);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results;
}","/** 
 * Handles find by range query for given start and end row key range values.
 * @param < E > parameterized entity class.
 * @param entityClass entity class.
 * @param metadata entity metadata
 * @param startRow start row.
 * @param endRow end row.
 * @return collection holding results.
 */
public <E>List<E> findByRange(Class<E> entityClass,EntityMetadata metadata,byte[] startRow,byte[] endRow,String[] columns,Filter f){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String tableName=entityMetadata.getTableName();
  List results=new ArrayList();
  FilterList filter=new FilterList();
  if (f != null) {
    filter.addFilter(f);
  }
  if (isFindKeyOnly(metadata,columns)) {
    columns=null;
    filter.addFilter(new KeyOnlyFilter());
  }
  try {
    results=handler.readDataByRange(tableName,entityClass,metadata,startRow,endRow,columns,filter);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results;
}",0.9333333333333332
176420,"@Override public <E>List<E> find(Class<E> entityClass,Map<String,String> col){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(getPersistenceUnit(),entityClass);
  List<E> entities=new ArrayList<E>();
  Map<String,Field> columnFamilyNameToFieldMap=MetadataUtils.createSuperColumnsFieldMap(entityMetadata);
  for (  String columnFamilyName : col.keySet()) {
    String entityId=col.get(columnFamilyName);
    if (entityId != null) {
      E e=null;
      try {
        List results=handler.readData(entityMetadata.getTableName(),entityMetadata.getEntityClazz(),entityMetadata,entityId,null);
        if (results != null) {
          e=(E)results.get(0);
        }
      }
 catch (      IOException ioex) {
        log.error(""String_Node_Str"",ioex);
        throw new KunderaException(ioex);
      }
      Field columnFamilyField=columnFamilyNameToFieldMap.get(columnFamilyName.substring(0,columnFamilyName.indexOf(""String_Node_Str"")));
      Object columnFamilyValue=PropertyAccessorHelper.getObject(e,columnFamilyField);
      if (Collection.class.isAssignableFrom(columnFamilyField.getType())) {
        entities.addAll((Collection)columnFamilyValue);
      }
 else {
        entities.add((E)columnFamilyValue);
      }
    }
  }
  return entities;
}","@Override public <E>List<E> find(Class<E> entityClass,Map<String,String> col){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(getPersistenceUnit(),entityClass);
  List<E> entities=new ArrayList<E>();
  Map<String,Field> columnFamilyNameToFieldMap=MetadataUtils.createSuperColumnsFieldMap(entityMetadata);
  for (  String columnFamilyName : col.keySet()) {
    String entityId=col.get(columnFamilyName);
    if (entityId != null) {
      E e=null;
      try {
        List results=handler.readData(entityMetadata.getTableName(),entityMetadata.getEntityClazz(),entityMetadata,entityId,null,null);
        if (results != null) {
          e=(E)results.get(0);
        }
      }
 catch (      IOException ioex) {
        log.error(""String_Node_Str"",ioex);
        throw new KunderaException(ioex);
      }
      Field columnFamilyField=columnFamilyNameToFieldMap.get(columnFamilyName.substring(0,columnFamilyName.indexOf(""String_Node_Str"")));
      Object columnFamilyValue=PropertyAccessorHelper.getObject(e,columnFamilyField);
      if (Collection.class.isAssignableFrom(columnFamilyField.getType())) {
        entities.addAll((Collection)columnFamilyValue);
      }
 else {
        entities.add((E)columnFamilyValue);
      }
    }
  }
  return entities;
}",0.9980445834962848
176421,"/** 
 * Method to find entities using JPQL(converted into FilterList.)
 * @param < E > parameterized entity class.
 * @param entityClass entity class.
 * @param metadata entity metadata.
 * @return list of entities.
 */
public <E>List<E> findByQuery(Class<E> entityClass,EntityMetadata metadata,String... columns){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  List<String> relationNames=entityMetadata.getRelationNames();
  String tableName=entityMetadata.getTableName();
  List results=null;
  if (isFindKeyOnly(metadata,columns)) {
    columns=null;
    addFilter(tableName,new KeyOnlyFilter());
  }
  try {
    results=handler.readData(tableName,entityMetadata.getEntityClazz(),entityMetadata,null,relationNames,columns);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results != null ? results : new ArrayList();
}","/** 
 * Method to find entities using JPQL(converted into FilterList.)
 * @param < E > parameterized entity class.
 * @param entityClass entity class.
 * @param metadata entity metadata.
 * @return list of entities.
 */
public <E>List<E> findByQuery(Class<E> entityClass,EntityMetadata metadata,Filter f,String... columns){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  List<String> relationNames=entityMetadata.getRelationNames();
  String tableName=entityMetadata.getTableName();
  List results=null;
  FilterList filter=new FilterList();
  if (f != null) {
    filter.addFilter(f);
  }
  if (isFindKeyOnly(metadata,columns)) {
    columns=null;
    filter.addFilter(new KeyOnlyFilter());
  }
  try {
    results=handler.readData(tableName,entityMetadata.getEntityClazz(),entityMetadata,null,relationNames,filter,columns);
  }
 catch (  IOException ioex) {
    log.error(""String_Node_Str"",ioex);
    throw new KunderaException(ioex);
  }
  return results != null ? results : new ArrayList();
}",0.9337379868487607
176422,"/** 
 * Populates data for give column family, column name, and HBase table name.
 * @param tableName the table name
 * @param clazz the clazz
 * @param m the m
 * @param rowKey the row key
 * @param relationNames the relation names
 * @return the object
 * @throws IOException Signals that an I/O exception has occurred.
 */
List readData(String tableName,Class clazz,EntityMetadata m,Object rowKey,List<String> relatationNames,String... columns) throws IOException ;","/** 
 * Populates data for give column family, column name, and HBase table name.
 * @param tableName the table name
 * @param clazz the clazz
 * @param m the m
 * @param rowKey the row key
 * @param f 
 * @param relationNames the relation names
 * @return the object
 * @throws IOException Signals that an I/O exception has occurred.
 */
List readData(String tableName,Class clazz,EntityMetadata m,Object rowKey,List<String> relatationNames,FilterList f,String... columns) throws IOException ;",0.972972972972973
176423,"/** 
 * @param tableName
 * @param clazz
 * @param m
 * @param relationNames
 * @param startRow
 * @param endRow
 * @param columns
 * @return
 */
List readDataByRange(String tableName,Class clazz,EntityMetadata m,byte[] startRow,byte[] endRow,String[] columns) throws IOException ;","/** 
 * @param tableName
 * @param clazz
 * @param m
 * @param relationNames
 * @param startRow
 * @param endRow
 * @param columns
 * @param f 
 * @return
 */
List readDataByRange(String tableName,Class clazz,EntityMetadata m,byte[] startRow,byte[] endRow,String[] columns,FilterList f) throws IOException ;",0.95578231292517
176424,"public Object next(EntityMetadata m){
  Object entity=null;
  HBaseData result=((HBaseReader)hbaseReader).next();
  List<HBaseData> results=new ArrayList<HBaseData>();
  List output=new ArrayList();
  results.add(result);
  try {
    output=onRead(m.getTableName(),m.getEntityClazz(),m,output,gethTable(m.getTableName()),entity,m.getRelationNames(),results);
  }
 catch (  IOException e) {
  }
  return output != null && !output.isEmpty() ? output.get(0) : output;
}","public Object next(EntityMetadata m){
  Object entity=null;
  HBaseData result=((HBaseReader)hbaseReader).next();
  List<HBaseData> results=new ArrayList<HBaseData>();
  List output=new ArrayList();
  results.add(result);
  try {
    output=onRead(m.getTableName(),m.getEntityClazz(),m,output,gethTable(m.getTableName()),entity,m.getRelationNames(),results);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
  return output != null && !output.isEmpty() ? output.get(0) : output;
}",0.9292123629112662
176425,"@Override public List readDataByRange(String tableName,Class clazz,EntityMetadata m,byte[] startRow,byte[] endRow,String[] columns) throws IOException {
  List output=new ArrayList();
  HTableInterface hTable=null;
  Object entity=null;
  List<String> relationNames=m.getRelationNames();
  hTable=gethTable(tableName);
  List<HBaseData> results=hbaseReader.loadAll(hTable,getFilter(tableName),startRow,endRow,m.getTableName(),null,columns);
  output=onRead(tableName,clazz,m,output,hTable,entity,relationNames,results);
  return output;
}","@Override public List readDataByRange(String tableName,Class clazz,EntityMetadata m,byte[] startRow,byte[] endRow,String[] columns,FilterList f) throws IOException {
  List output=new ArrayList();
  HTableInterface hTable=null;
  Object entity=null;
  List<String> relationNames=m.getRelationNames();
  if (getFilter(tableName) != null) {
    if (f == null) {
      f=new FilterList();
    }
    f.addFilter(getFilter(tableName));
  }
  hTable=gethTable(tableName);
  List<HBaseData> results=hbaseReader.loadAll(hTable,f,startRow,endRow,m.getTableName(),null,columns);
  output=onRead(tableName,clazz,m,output,hTable,entity,relationNames,results);
  return output;
}",0.8604651162790697
176426,"@Override public List readData(final String tableName,Class clazz,EntityMetadata m,final Object rowKey,List<String> relationNames,String... columns) throws IOException {
  List output=null;
  Object entity=null;
  HTableInterface hTable=null;
  hTable=gethTable(tableName);
  List<HBaseData> results=hbaseReader.LoadData(hTable,rowKey,getFilter(tableName),columns);
  output=onRead(tableName,clazz,m,output,hTable,entity,relationNames,results);
  return output;
}","@Override public List readData(final String tableName,Class clazz,EntityMetadata m,final Object rowKey,List<String> relationNames,FilterList f,String... columns) throws IOException {
  List output=null;
  Object entity=null;
  HTableInterface hTable=null;
  hTable=gethTable(tableName);
  if (getFilter(tableName) != null) {
    if (f == null) {
      f=new FilterList();
    }
    f.addFilter(getFilter(tableName));
  }
  List<HBaseData> results=hbaseReader.LoadData(hTable,rowKey,f,columns);
  output=onRead(tableName,clazz,m,output,hTable,entity,relationNames,results);
  return output;
}",0.8406072106261859
176427,"/** 
 * Set filter to data handler.
 * @param filter hbase filter.
 */
public void setFilter(Filter filter){
  if (this.filter == null) {
    this.filter=new FilterList();
  }
  this.filter.addFilter(filter);
}","/** 
 * Set filter to data handler.
 * @param filter hbase filter.
 */
public void setFilter(Filter filter){
  if (this.filter == null) {
    this.filter=new FilterList();
  }
  if (filter != null) {
    this.filter.addFilter(filter);
  }
}",0.9333333333333332
176428,"public void addFilter(final String columnFamily,Filter filter){
  FilterList filterList=this.filters.get(columnFamily);
  if (filterList == null) {
    filterList=new FilterList();
  }
  filterList.addFilter(filter);
  this.filters.put(columnFamily,filterList);
}","public void addFilter(final String columnFamily,Filter filter){
  FilterList filterList=this.filters.get(columnFamily);
  if (filterList == null) {
    filterList=new FilterList();
  }
  if (filter != null) {
    filterList.addFilter(filter);
  }
  this.filters.put(columnFamily,filterList);
}",0.841726618705036
176429,"public void reset(){
  ((HBaseReader)hbaseReader).reset();
}","public void reset(){
  resetFilter();
  ((HBaseReader)hbaseReader).reset();
}",0.8759124087591241
176430,"/** 
 * @param entity
 * @param relationsMap
 * @param m
 * @param pd
 * @param entityId
 * @param relation
 */
public void setProxyRelationObject(Object entity,Map<String,Object> relationsMap,EntityMetadata m,PersistenceDelegator pd,Object entityId,Relation relation){
  String relationName=MetadataUtils.getMappedName(m,relation);
  Object relationValue=relationsMap != null ? relationsMap.get(relationName) : null;
  if ((relation.getType().equals(ForeignKey.ONE_TO_ONE) || relation.getType().equals(ForeignKey.MANY_TO_ONE))) {
    Field biDirectionalField=relation.getBiDirectionalField();
    boolean isBidirectionalRelation=(biDirectionalField != null);
    if (isBidirectionalRelation && relationValue == null) {
      EntityMetadata parentEntityMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
      Object owner=null;
      String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
      KunderaProxy kp=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy(entityName);
      if (kp != null) {
        owner=kp.getKunderaLazyInitializer().getOwner();
        if (owner != null && owner.getClass().equals(parentEntityMetadata.getEntityClazz())) {
          relationValue=PropertyAccessorHelper.getId(owner,parentEntityMetadata);
        }
        if (relationValue != null) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + parentEntityMetadata.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
          }
          Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),parentEntityMetadata.getReadIdentifierMethod(),parentEntityMetadata.getWriteIdentifierMethod(),relationValue,pd);
          PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
        }
      }
    }
 else     if (relationValue != null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + m.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
      }
      String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
      Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),m.getReadIdentifierMethod(),m.getWriteIdentifierMethod(),relationValue,pd);
      PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
    }
  }
 else   if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
    ProxyCollection proxyCollection=null;
    if (relation.getPropertyType().isAssignableFrom(Set.class)) {
      proxyCollection=new ProxySet(pd,relation);
    }
 else     if (relation.getPropertyType().isAssignableFrom(List.class)) {
      proxyCollection=new ProxyList(pd,relation);
    }
 else     if (relation.getPropertyType().isAssignableFrom(Map.class)) {
      proxyCollection=new ProxyMap(pd,relation);
    }
    proxyCollection.setOwner(entity);
    proxyCollection.setRelationsMap(relationsMap);
    PropertyAccessorHelper.set(entity,relation.getProperty(),proxyCollection);
  }
}","/** 
 * @param entity
 * @param relationsMap
 * @param m
 * @param pd
 * @param entityId
 * @param relation
 */
public void setProxyRelationObject(Object entity,Map<String,Object> relationsMap,EntityMetadata m,PersistenceDelegator pd,Object entityId,Relation relation){
  String relationName=MetadataUtils.getMappedName(m,relation);
  Object relationValue=relationsMap != null ? relationsMap.get(relationName) : null;
  if ((relation.getType().equals(ForeignKey.ONE_TO_ONE) || relation.getType().equals(ForeignKey.MANY_TO_ONE))) {
    Field biDirectionalField=relation.getBiDirectionalField();
    boolean isBidirectionalRelation=(biDirectionalField != null);
    if (isBidirectionalRelation && (relationValue == null && !relation.isJoinedByPrimaryKey())) {
      EntityMetadata parentEntityMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
      Object owner=null;
      String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
      KunderaProxy kp=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy(entityName);
      if (kp != null) {
        owner=kp.getKunderaLazyInitializer().getOwner();
        if (owner != null && owner.getClass().equals(parentEntityMetadata.getEntityClazz())) {
          relationValue=PropertyAccessorHelper.getId(owner,parentEntityMetadata);
        }
        if (relationValue != null) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + parentEntityMetadata.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
          }
          Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),parentEntityMetadata.getReadIdentifierMethod(),parentEntityMetadata.getWriteIdentifierMethod(),relationValue,pd);
          PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
        }
      }
    }
 else     if (relationValue != null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + m.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
      }
      String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
      Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),m.getReadIdentifierMethod(),m.getWriteIdentifierMethod(),relationValue,pd);
      PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
    }
 else     if (relation.isJoinedByPrimaryKey()) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + m.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
      }
      String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
      Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),m.getReadIdentifierMethod(),m.getWriteIdentifierMethod(),entityId,pd);
      PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
    }
  }
 else   if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
    ProxyCollection proxyCollection=null;
    if (relation.getPropertyType().isAssignableFrom(Set.class)) {
      proxyCollection=new ProxySet(pd,relation);
    }
 else     if (relation.getPropertyType().isAssignableFrom(List.class)) {
      proxyCollection=new ProxyList(pd,relation);
    }
 else     if (relation.getPropertyType().isAssignableFrom(Map.class)) {
      proxyCollection=new ProxyMap(pd,relation);
    }
    proxyCollection.setOwner(entity);
    proxyCollection.setRelationsMap(relationsMap);
    PropertyAccessorHelper.set(entity,relation.getProperty(),proxyCollection);
  }
}",0.9099313629359854
176431,"/** 
 * Populates a a relationship collection which is of type   {@link Map} fromrelationsMap into entity
 * @param entity
 * @param delegator
 * @param relation
 * @param relObject
 * @param relationsMap
 */
private void populateCollectionFromMap(Object entity,PersistenceDelegator delegator,Relation relation,Object relObject,Map<String,Object> relationsMap){
  EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
  Map<Object,Object> relationshipEntityMap=new HashMap<Object,Object>();
  if (relObject == null && relationsMap != null && !relationsMap.isEmpty()) {
    for (    String relationName : relationsMap.keySet()) {
      Object relationValue=relationsMap.get(relationName);
      if (relationValue instanceof Map) {
        Map<Object,Object> relationValueMap=(Map<Object,Object>)relationValue;
        Client targetEntityClient=delegator.getClient(childMetadata);
        for (        Object targetEntityKey : relationValueMap.keySet()) {
          Object targetEntity=targetEntityClient.find(childMetadata.getEntityClazz(),targetEntityKey);
          if (targetEntity != null && targetEntity instanceof EnhanceEntity) {
            targetEntity=((EnhanceEntity)targetEntity).getEntity();
          }
          Object mapKeyEntity=relationValueMap.get(targetEntityKey);
          Class<?> relationshipClass=relation.getMapKeyJoinClass();
          for (          Field f : relationshipClass.getDeclaredFields()) {
            if (f.getType().equals(entity.getClass())) {
              PropertyAccessorHelper.set(mapKeyEntity,f,entity);
            }
 else             if (f.getType().equals(childMetadata.getEntityClazz())) {
              PropertyAccessorHelper.set(mapKeyEntity,f,targetEntity);
            }
          }
          relationshipEntityMap.put(mapKeyEntity,targetEntity);
        }
      }
    }
    relObject=relationshipEntityMap;
  }
  PropertyAccessorHelper.set(entity,relation.getProperty(),relObject);
  if (relObject != null) {
    for (    Object child : ((Map)relObject).values()) {
      if (child != null) {
        Object childId=PropertyAccessorHelper.getId(child,childMetadata);
        PersistenceCacheManager.addEntityToPersistenceCache(child,delegator,childId);
      }
    }
  }
}","/** 
 * Populates a a relationship collection which is of type   {@link Map} fromrelationsMap into entity
 * @param entity
 * @param delegator
 * @param relation
 * @param relObject
 * @param relationsMap
 */
private void populateCollectionFromMap(Object entity,PersistenceDelegator delegator,Relation relation,Object relObject,Map<String,Object> relationsMap){
  EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
  Map<Object,Object> relationshipEntityMap=new HashMap<Object,Object>();
  if ((relObject == null || ProxyHelper.isProxyCollection(relObject)) && relationsMap != null && !relationsMap.isEmpty()) {
    for (    String relationName : relationsMap.keySet()) {
      Object relationValue=relationsMap.get(relationName);
      if (relationValue instanceof Map) {
        Map<Object,Object> relationValueMap=(Map<Object,Object>)relationValue;
        Client targetEntityClient=delegator.getClient(childMetadata);
        for (        Object targetEntityKey : relationValueMap.keySet()) {
          Object targetEntity=targetEntityClient.find(childMetadata.getEntityClazz(),targetEntityKey);
          if (targetEntity != null && targetEntity instanceof EnhanceEntity) {
            targetEntity=((EnhanceEntity)targetEntity).getEntity();
          }
          Object mapKeyEntity=relationValueMap.get(targetEntityKey);
          Class<?> relationshipClass=relation.getMapKeyJoinClass();
          for (          Field f : relationshipClass.getDeclaredFields()) {
            if (f.getType().equals(entity.getClass())) {
              PropertyAccessorHelper.set(mapKeyEntity,f,entity);
            }
 else             if (f.getType().equals(childMetadata.getEntityClazz())) {
              PropertyAccessorHelper.set(mapKeyEntity,f,targetEntity);
            }
          }
          relationshipEntityMap.put(mapKeyEntity,targetEntity);
        }
      }
    }
    relObject=relationshipEntityMap;
  }
  PropertyAccessorHelper.set(entity,relation.getProperty(),relObject);
  if (relObject != null && !ProxyHelper.isProxyCollection(relObject)) {
    for (    Object child : ((Map)relObject).values()) {
      if (child != null) {
        Object childId=PropertyAccessorHelper.getId(child,childMetadata);
        PersistenceCacheManager.addEntityToPersistenceCache(child,delegator,childId);
      }
    }
  }
}",0.9803752426137587
176432,"/** 
 */
protected void eagerlyLoadDataCollection(){
  if (getDataCollection() == null || getDataCollection() instanceof ProxyCollection) {
    EntityMetadata m=KunderaMetadataManager.getEntityMetadata(getOwner().getClass());
    getPersistenceDelegator().getClient(m).getReader().recursivelyFindEntities(getOwner(),relationsMap,m,getPersistenceDelegator(),true);
    dataCollection=(Collection)PropertyAccessorHelper.getObject(getOwner(),getRelation().getProperty());
    if (dataCollection instanceof ProxyCollection) {
      dataCollection=null;
    }
    PropertyAccessorHelper.set(getOwner(),getRelation().getProperty(),dataCollection);
  }
}","/** 
 */
protected void eagerlyLoadDataCollection(){
  if (getDataCollection() == null || getDataCollection() instanceof ProxyCollection) {
    EntityMetadata m=KunderaMetadataManager.getEntityMetadata(getOwner().getClass());
    if (!getPersistenceDelegator().isOpen()) {
      throw new LazyInitializationException(""String_Node_Str"" + ""String_Node_Str"");
    }
    getPersistenceDelegator().getClient(m).getReader().recursivelyFindEntities(getOwner(),relationsMap,m,getPersistenceDelegator(),true);
    if (getRelation().getProperty().getType().isAssignableFrom(Map.class)) {
      dataCollection=(Map)PropertyAccessorHelper.getObject(getOwner(),getRelation().getProperty());
    }
 else {
      dataCollection=(Collection)PropertyAccessorHelper.getObject(getOwner(),getRelation().getProperty());
    }
    if (dataCollection instanceof ProxyCollection) {
      dataCollection=null;
    }
    PropertyAccessorHelper.set(getOwner(),getRelation().getProperty(),dataCollection);
  }
}",0.7030674846625767
176433,"protected boolean containsAll(final Collection arg0){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (getDataCollection() != null && !(getDataCollection() instanceof ProxyCollection)) {
    result=getDataCollection().containsAll(arg0);
  }
  return result;
}","protected boolean containsAll(final Collection arg0){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (getDataCollection() != null && !(getDataCollection() instanceof ProxyCollection)) {
    result=((Collection)getDataCollection()).containsAll(arg0);
  }
  return result;
}",0.9100719424460432
176434,"protected boolean add(final Object object){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && !dataCollection.contains(object) && object != null) {
    dataCollection.add(object);
    PropertyAccessorHelper.set(getOwner(),getRelation().getProperty(),dataCollection);
    result=true;
  }
  return result;
}","protected boolean add(final Object object){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && !((Collection)dataCollection).contains(object) && object != null) {
    ((Collection)dataCollection).add(object);
    PropertyAccessorHelper.set(getOwner(),getRelation().getProperty(),dataCollection);
    result=true;
  }
  return result;
}",0.9113924050632912
176435,"protected boolean removeAll(final Collection collection){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && collection != null && !collection.isEmpty()) {
    dataCollection.removeAll(collection);
    result=true;
  }
  return result;
}","protected boolean removeAll(final Collection collection){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && collection != null && !collection.isEmpty()) {
    ((Collection)dataCollection).removeAll(collection);
    result=true;
  }
  return result;
}",0.947103274559194
176436,"protected Iterator iterator(){
  eagerlyLoadDataCollection();
  Iterator result=null;
  if (getDataCollection() != null && !(getDataCollection() instanceof ProxyCollection)) {
    result=getDataCollection().iterator();
  }
  return result;
}","protected Iterator iterator(){
  eagerlyLoadDataCollection();
  Iterator result=null;
  if (getDataCollection() != null && !(getDataCollection() instanceof ProxyCollection)) {
    result=((Collection)getDataCollection()).iterator();
  }
  return result;
}",0.8991935483870968
176437,"protected boolean addAll(final Collection collection){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && collection != null && !collection.isEmpty()) {
    dataCollection.addAll(collection);
    result=true;
  }
  return result;
}","protected boolean addAll(final Collection collection){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && collection != null && !collection.isEmpty()) {
    ((Collection)dataCollection).addAll(collection);
    result=true;
  }
  return result;
}",0.9462915601023018
176438,"protected Object[] toArray(final Object[] arg0){
  eagerlyLoadDataCollection();
  return dataCollection == null ? new Object[0] : dataCollection.toArray(arg0);
}","protected Object[] toArray(final Object[] arg0){
  eagerlyLoadDataCollection();
  return dataCollection == null ? new Object[0] : ((Collection)dataCollection).toArray(arg0);
}",0.9583333333333334
176439,"protected boolean remove(final Object object){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && object != null) {
    dataCollection.remove(object);
    result=true;
  }
  return result;
}","protected boolean remove(final Object object){
  eagerlyLoadDataCollection();
  boolean result=false;
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && object != null) {
    ((Collection)dataCollection).remove(object);
    result=true;
  }
  return result;
}",0.94
176440,"protected boolean retainAll(final Collection collection){
  boolean result=false;
  eagerlyLoadDataCollection();
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && collection != null && !collection.isEmpty()) {
    result=dataCollection.retainAll(collection);
  }
  return result;
}","protected boolean retainAll(final Collection collection){
  boolean result=false;
  eagerlyLoadDataCollection();
  if (dataCollection == null) {
    createEmptyDataCollection();
  }
  if (dataCollection != null && !(dataCollection instanceof ProxyCollection) && collection != null && !collection.isEmpty()) {
    result=((Collection)dataCollection).retainAll(collection);
  }
  return result;
}",0.9457364341085271
176441,"/** 
 * Retrieves actual collection data that implementor of this interface holds. Unless proxy collection is eagerly loaded, this values would normally be null
 */
Collection getDataCollection();","/** 
 * Retrieves actual collection data that implementor of this interface holds. Unless proxy collection is eagerly loaded, this values would normally be null
 */
Object getDataCollection();",0.9742268041237112
176442,"@Override public void clear(){
  super.clear();
}","@Override public void clear(){
  eagerlyLoadDataCollection();
  if (getDataCollection() != null && !(getDataCollection() instanceof ProxyCollection)) {
    ((Map)getDataCollection()).clear();
  }
}",0.3739837398373983
176443,"@Override public boolean isEmpty(){
  return super.isEmpty();
}","@Override public boolean isEmpty(){
  boolean result=true;
  eagerlyLoadDataCollection();
  if (getDataCollection() != null && !(getDataCollection() instanceof ProxyCollection)) {
    result=((Map)getDataCollection()).isEmpty();
  }
  return result;
}",0.3248407643312102
176444,"@Override public int size(){
  return super.size();
}","@Override public int size(){
  eagerlyLoadDataCollection();
  return dataCollection == null || dataCollection instanceof ProxyCollection ? 0 : ((Map)dataCollection).size();
}",0.4493392070484581
176445,"@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(11,ksDef.getCf_defsSize());
    int count=0;
    for (    CfDef cfDef : ksDef.cf_defs) {
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
        continue;
      }
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
      }
 else {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        List<ColumnDef> columnDefs=cfDef.getColumn_metadata();
        Assert.assertEquals(1,columnDefs.size());
        count++;
      }
    }
    Assert.assertEquals(11,count);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
}","@Test public void test(){
  try {
    KsDef ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    Assert.assertNotNull(ksDef);
    Assert.assertEquals(13,ksDef.getCf_defsSize());
    int count=0;
    for (    CfDef cfDef : ksDef.cf_defs) {
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
        continue;
      }
      if (cfDef.getName().equals(""String_Node_Str"")) {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        Assert.assertTrue(cfDef.getDefault_validation_class().equals(CounterColumnType.class.getName()));
        count++;
      }
 else {
        Assert.assertTrue(cfDef.getColumn_type().equals(""String_Node_Str""));
        List<ColumnDef> columnDefs=cfDef.getColumn_metadata();
        Assert.assertEquals(1,columnDefs.size());
        count++;
      }
    }
    Assert.assertEquals(13,count);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
}",0.9984
176446,"public static LoadState isLoadedWithReference(Object proxy,String property,MetadataCache cache){
  return isLoaded(get(proxy,property,cache));
}","public static LoadState isLoadedWithReference(Object proxy,String property,MetadataCache cache){
  return proxy == null ? LoadState.NOT_LOADED : isLoaded(get(proxy,property,cache));
}",0.8807339449541285
176447,"/** 
 * Adds typed parameter to   {@link TypedParameter}
 * @param type type of parameter(e.g. NAMED/INDEXED)
 * @param parameter parameter name.
 * @param clause filter clause.
 */
private void addTypedParameter(Type type,String parameter,UpdateClause clause){
  if (typedParameter == null) {
    typedParameter=new TypedParameter(type);
  }
  if (typedParameter.getType().equals(type)) {
    typedParameter.addParameters(parameter,clause);
  }
 else {
    logger.warn(""String_Node_Str"");
  }
}","/** 
 * Adds typed parameter to   {@link TypedParameter}
 * @param type type of parameter(e.g. NAMED/INDEXED)
 * @param parameter parameter name.
 * @param clause filter clause.
 */
private void addTypedParameter(Type type,String parameter,UpdateClause clause){
  if (type != null) {
    if (typedParameter == null) {
      typedParameter=new TypedParameter(type);
    }
    if (typedParameter.getType().equals(type)) {
      typedParameter.addParameters(parameter,clause);
    }
 else {
      logger.warn(""String_Node_Str"");
    }
  }
}",0.9593023255813954
176448,"public void addUpdateClause(final String property,final String value){
  UpdateClause updateClause=new UpdateClause(property.trim(),value.trim());
  updateClauseQueue.add(updateClause);
  addTypedParameter(value.trim().startsWith(""String_Node_Str"") ? Type.INDEXED : Type.NAMED,property,updateClause);
}","public void addUpdateClause(final String property,final String value){
  UpdateClause updateClause=new UpdateClause(property.trim(),value.trim());
  updateClauseQueue.add(updateClause);
  addTypedParameter(value.trim().startsWith(""String_Node_Str"") ? Type.INDEXED : value.trim().startsWith(""String_Node_Str"") ? Type.NAMED : null,property,updateClause);
}",0.9207317073170732
176449,"@Override public List<Object> getAllPhotographers(String className){
  EntityManager em=getEntityManager();
  Query q=em.createQuery(""String_Node_Str"" + className + ""String_Node_Str"");
  List<Object> photographers=q.getResultList();
  closeEntityManager();
  return photographers;
}","@Override public List<Object> getAllPhotographers(String className){
  EntityManager em=getEntityManager();
  Query q=em.createQuery(""String_Node_Str"" + className + ""String_Node_Str"");
  List<Object> photographers=q.getResultList();
  return photographers;
}",0.9555555555555556
176450,"@Override public SchemaManager getSchemaManager(Map<String,Object> puProperties){
  return null;
}","@Override public SchemaManager getSchemaManager(Map<String,Object> puProperties){
  if (schemaManager == null)   schemaManager=new CoreSchemaManager(""String_Node_Str"",puProperties);
  return schemaManager;
}",0.6032786885245902
176451,"@Override public void destroy(){
}","@Override public void destroy(){
  schemaManager.dropSchema();
}",0.6938775510204082
176452,"public void dropDatabase(){
  if (schemas != null) {
    for (    DummySchema schema : schemas.values()) {
      schema.dropSchema();
    }
  }
  schemas.clear();
}","public void dropDatabase(){
  if (schemas != null) {
    for (    DummySchema schema : schemas.values()) {
      schema.dropSchema();
    }
    schemas.clear();
  }
}",0.9818181818181818
176453,"/** 
 * @param paramString
 * @param paramThrowable
 */
public InvalidEntityDefinitionException(String paramString,Throwable paramThrowable){
  super(paramString,paramThrowable);
}","/** 
 * @param paramString
 */
public InvalidEntityDefinitionException(String paramString){
  super(paramString);
}",0.7796610169491526
176454,"public void addUpdateClause(final String property,final String value){
  UpdateClause updateClause=new UpdateClause(property.trim(),value.trim());
  updateClauseQueue.add(updateClause);
}","public void addUpdateClause(final String property,final String value){
  UpdateClause updateClause=new UpdateClause(property.trim(),value.trim());
  updateClauseQueue.add(updateClause);
  addTypedParameter(value.trim().startsWith(""String_Node_Str"") ? Type.INDEXED : Type.NAMED,property,updateClause);
}",0.7648261758691206
176455,"/** 
 * Returns specific clause value.
 * @param param parameter
 * @return clause value.
 */
public Object getClauseValue(Parameter param){
  Parameter match=null;
  if (typedParameter != null && typedParameter.jpaParameters != null) {
    for (    Parameter p : typedParameter.jpaParameters) {
      if (p.equals(param)) {
        match=p;
        if (typedParameter.getType().equals(Type.NAMED)) {
          FilterClause clause=typedParameter.getParameters().get(""String_Node_Str"" + p.getName());
          if (clause != null) {
            return clause.getValue();
          }
        }
 else {
          FilterClause clause=typedParameter.getParameters().get(""String_Node_Str"" + p.getPosition());
          if (clause != null) {
            return clause.getValue();
          }
        }
        break;
      }
    }
    if (match == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","/** 
 * Returns specific clause value.
 * @param param parameter
 * @return clause value.
 */
public Object getClauseValue(Parameter param){
  Parameter match=null;
  if (typedParameter != null && typedParameter.jpaParameters != null) {
    for (    Parameter p : typedParameter.jpaParameters) {
      if (p.equals(param)) {
        match=p;
        if (typedParameter.getType().equals(Type.NAMED)) {
          FilterClause clause=typedParameter.getParameters().get(""String_Node_Str"" + p.getName());
          if (clause != null) {
            return clause.getValue();
          }
        }
 else {
          FilterClause clause=typedParameter.getParameters().get(""String_Node_Str"" + p.getPosition());
          if (clause != null) {
            return clause.getValue();
          }
 else {
            UpdateClause updateClause=typedParameter.getUpdateParameters().get(""String_Node_Str"" + p.getPosition());
            if (updateClause != null) {
              return updateClause.getValue();
            }
          }
        }
        break;
      }
    }
    if (match == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  logger.error(""String_Node_Str"",param);
  throw new IllegalArgumentException(""String_Node_Str"");
}",0.8755595344673232
176456,"@Override public LockModeType getLockMode(){
  throw new NotImplementedException(""String_Node_Str"");
}","@Override public LockModeType getLockMode(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.8761904761904762
176457,"@Override public Query setFirstResult(int startPosition){
  throw new NotImplementedException(""String_Node_Str"");
}","@Override public Query setFirstResult(int startPosition){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.8898305084745762
176458,"@Override public int getFirstResult(){
  throw new NotImplementedException(""String_Node_Str"");
}","@Override public int getFirstResult(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.8686868686868687
176459,"/** 
 * Methods from   {@link Query} interface 
 */
@Override public Object getSingleResult(){
  throw new NotImplementedException(""String_Node_Str"");
}","/** 
 * Methods from   {@link Query} interface 
 */
@Override public Object getSingleResult(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9161290322580644
176460,"@Override public FlushModeType getFlushMode(){
  throw new NotImplementedException(""String_Node_Str"");
}","@Override public FlushModeType getFlushMode(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.8785046728971962
176461,"@Override public Query setParameter(Parameter<Date> paramParameter,Date paramDate,TemporalType paramTemporalType){
  throw new NotImplementedException(""String_Node_Str"");
}","@Override public Query setParameter(Parameter<Date> paramParameter,Date paramDate,TemporalType paramTemporalType){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9257142857142856
176462,"@Override public Query setFlushMode(FlushModeType flushMode){
  throw new NotImplementedException(""String_Node_Str"");
}","@Override public Query setFlushMode(FlushModeType flushMode){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.8934426229508197
176463,"@Override public Query setLockMode(LockModeType paramLockModeType){
  throw new NotImplementedException(""String_Node_Str"");
}","@Override public Query setLockMode(LockModeType paramLockModeType){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.8984375
176464,"@Override public List<?> getResultList(){
  if (log.isDebugEnabled())   log.info(""String_Node_Str"" + query);
  List results=new ArrayList();
  EntityMetadata m=getEntityMetadata();
  Client client=persistenceDelegeator.getClient(m);
  if (!m.isRelationViaJoinTable() && (m.getRelationNames() == null || (m.getRelationNames().isEmpty()))) {
    results=populateEntities(m,client);
  }
 else {
    results=recursivelyPopulateEntities(m,client);
  }
  if (kunderaQuery.isDeleteUpdate()) {
    onDeleteOrUpdate(results);
  }
  if (results != null) {
    for (    Object obj : results) {
      persistenceDelegeator.setProxyOwners(m,obj);
    }
  }
  return results != null ? results : new ArrayList();
}","@Override public List<?> getResultList(){
  if (log.isDebugEnabled())   log.info(""String_Node_Str"" + query);
  List results=new ArrayList();
  EntityMetadata m=getEntityMetadata();
  Client client=persistenceDelegeator.getClient(m);
  if (!m.isRelationViaJoinTable() && (m.getRelationNames() == null || (m.getRelationNames().isEmpty()))) {
    results=populateEntities(m,client);
  }
 else {
    results=recursivelyPopulateEntities(m,client);
  }
  if (kunderaQuery.isDeleteUpdate()) {
    onDeleteOrUpdate(results);
  }
  return results != null ? results : new ArrayList();
}",0.851764705882353
176465,"/** 
 * Gets the query instance.
 * @param jpaQuery the jpa query
 * @param persistenceDelegator the persistence delegator
 * @param persistenceUnits the persistence units
 * @return the query
 * @throws ClassNotFoundException the class not found exception
 * @throws SecurityException the security exception
 * @throws NoSuchMethodException the no such method exception
 * @throws IllegalArgumentException the illegal argument exception
 * @throws InstantiationException the instantiation exception
 * @throws IllegalAccessException the illegal access exception
 * @throws InvocationTargetException the invocation target exception
 */
public Query getQuery(String jpaQuery,PersistenceDelegator persistenceDelegator,EntityMetadata m) throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException {
  Query query;
  Class clazz=persistenceDelegator.getClient(m).getQueryImplementor();
  @SuppressWarnings(""String_Node_Str"") Constructor constructor=clazz.getConstructor(String.class,KunderaQuery.class,PersistenceDelegator.class);
  query=(Query)constructor.newInstance(jpaQuery,kunderaQuery,persistenceDelegator);
  return query;
}","/** 
 * Gets the query instance.
 * @param jpaQuery the jpa query
 * @param persistenceDelegator the persistence delegator
 * @param persistenceUnits the persistence units
 * @return the query
 * @throws ClassNotFoundException the class not found exception
 * @throws SecurityException the security exception
 * @throws NoSuchMethodException the no such method exception
 * @throws IllegalArgumentException the illegal argument exception
 * @throws InstantiationException the instantiation exception
 * @throws IllegalAccessException the illegal access exception
 * @throws InvocationTargetException the invocation target exception
 */
private Query getQuery(String jpaQuery,PersistenceDelegator persistenceDelegator,EntityMetadata m) throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException {
  Query query;
  Class clazz=persistenceDelegator.getClient(m).getQueryImplementor();
  @SuppressWarnings(""String_Node_Str"") Constructor constructor=clazz.getConstructor(String.class,KunderaQuery.class,PersistenceDelegator.class);
  query=(Query)constructor.newInstance(jpaQuery,kunderaQuery,persistenceDelegator);
  return query;
}",0.995569875151027
176466,"protected void getUserById(){
  twitter.createEntityManager();
  UserCassandra user1=twitter.findUserById(userId1);
  assertUser1(user1);
  UserCassandra user2=twitter.findUserById(userId2);
  assertUser2(user2);
}","protected void getUserById(){
  twitter.createEntityManager();
  UserCassandra user1=twitter.findUserById(userId1);
  assertUser1(user1);
  UserCassandra user2=twitter.findUserById(userId2);
  assertUser2(user2);
  twitter.closeEntityManager();
}",0.9304347826086956
176467,"/** 
 * @param < E >
 * @param entityMetadata
 * @param e
 */
private <E>void setProxyOwners(EntityMetadata entityMetadata,E e){
  Object entityId=PropertyAccessorHelper.getId(e,entityMetadata);
  for (  Relation r : entityMetadata.getRelations()) {
    String entityName=entityMetadata.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ r.getProperty().getName();
    KunderaProxy kunderaProxy=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy(entityName);
    if (kunderaProxy != null) {
      kunderaProxy.getKunderaLazyInitializer().setOwner(e);
    }
  }
}","/** 
 * @param < E >
 * @param entityMetadata
 * @param e
 */
private <E>void setProxyOwners(EntityMetadata entityMetadata,E e){
  Object entityId=PropertyAccessorHelper.getId(e,entityMetadata);
  for (  Relation r : entityMetadata.getRelations()) {
    if (r.isUnary()) {
      String entityName=entityMetadata.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ r.getProperty().getName();
      KunderaProxy kunderaProxy=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy(entityName);
      if (kunderaProxy != null) {
        kunderaProxy.getKunderaLazyInitializer().setOwner(e);
      }
    }
  }
}",0.9694117647058824
176468,"@Override public void setOwner(Object owner) throws PersistenceException {
  if (!owner.getClass().equals(persistentClass))   this.owner=owner;
}","@Override public void setOwner(Object owner) throws PersistenceException {
  if (owner != null && !owner.getClass().equals(persistentClass))   this.owner=owner;
}",0.9446254071661238
176469,"@Override public void clearProxies(){
  proxies.clear();
}","@Override public void clearProxies(){
  for (  KunderaProxy proxy : proxies.values()) {
    proxy.getKunderaLazyInitializer().setOwner(null);
    proxy.getKunderaLazyInitializer().setInitialized(false);
  }
  proxies.clear();
}",0.4070175438596491
176470,"public void dropDatabase(){
  if (schemas != null) {
    for (    DummySchema schema : schemas.values()) {
      schema.dropSchema();
    }
  }
  schemas.clear();
}","public void dropDatabase(){
  if (schemas != null) {
    for (    DummySchema schema : schemas.values()) {
      schema.dropSchema();
    }
    schemas.clear();
  }
}",0.9818181818181818
176471,"/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  Metamodel metaModel=appMetadata.getMetamodel(entityMetadata.getPersistenceUnit());
  if (appMetadata.isNative(jpaQuery)) {
    return appMetadata.getQuery(jpaQuery);
  }
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  for (  Attribute field : attributes) {
    if (!field.isAssociation() && !field.isCollection() && !((Field)field.getJavaMember()).isAnnotationPresent(ManyToMany.class)&& !((AbstractAttribute)field).getJPAColumnName().equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName())&& !((MetamodelImpl)metaModel).isEmbeddable(((AbstractAttribute)field).getBindableJavaType())) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(((AbstractAttribute)field).getJPAColumnName());
    }
  }
  Map<String,EmbeddableType> embeddedColumns=((MetamodelImpl)metaModel).getEmbeddables(entityMetadata.getEntityClazz());
  for (  EmbeddableType embeddedCol : embeddedColumns.values()) {
    Set<Attribute> embeddedAttributes=embeddedCol.getAttributes();
    for (    Attribute column : embeddedAttributes) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(((AbstractAttribute)column).getJPAColumnName());
    }
  }
  if (relations != null) {
    for (    String relation : relations) {
      Relation rel=entityMetadata.getRelation(entityMetadata.getFieldName(relation));
      String r=MetadataUtils.getMappedName(entityMetadata,rel);
      if (!((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName().equalsIgnoreCase(r != null ? r : relation) && rel != null && !rel.getProperty().isAnnotationPresent(ManyToMany.class) && !rel.getProperty().isAnnotationPresent(OneToMany.class) && (rel.getProperty().isAnnotationPresent(OneToOne.class) && StringUtils.isBlank(rel.getMappedBy()) || rel.getProperty().isAnnotationPresent(ManyToOne.class))) {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(aliasName);
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(r != null ? r : relation);
      }
    }
  }
  for (  Relation r : entityMetadata.getRelations()) {
    if (r.getJoinColumnName() != null && !r.getType().equals(ForeignKey.MANY_TO_MANY)) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(r.getJoinColumnName());
    }
  }
  queryBuilder.append(""String_Node_Str"");
  if (entityMetadata.getSchema() != null && !entityMetadata.getSchema().isEmpty()) {
    queryBuilder.append(entityMetadata.getSchema() + ""String_Node_Str"");
  }
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        String fieldName=clause.getProperty();
        boolean isString=isStringProperty(entityType,fieldName,entityMetadata);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),aliasName,aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        appendStringPrefix(queryBuilder,isString);
        queryBuilder.append(clause.getValue());
        appendStringPrefix(queryBuilder,isString);
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    Attribute col=entityMetadata.getIdAttribute();
    boolean isString=col.getJavaType().isAssignableFrom(String.class);
    for (    String key : primaryKeys) {
      appendStringPrefix(queryBuilder,isString);
      queryBuilder.append(key);
      appendStringPrefix(queryBuilder,isString);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}","/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  Metamodel metaModel=appMetadata.getMetamodel(entityMetadata.getPersistenceUnit());
  if (appMetadata.isNative(jpaQuery)) {
    return appMetadata.getQuery(jpaQuery);
  }
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName());
  EntityType entityType=metaModel.entity(entityMetadata.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  for (  Attribute field : attributes) {
    if (!field.isAssociation() && !field.isCollection() && !((Field)field.getJavaMember()).isAnnotationPresent(ManyToMany.class)&& !((AbstractAttribute)field).getJPAColumnName().equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName())&& !((MetamodelImpl)metaModel).isEmbeddable(((AbstractAttribute)field).getBindableJavaType())) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(((AbstractAttribute)field).getJPAColumnName());
    }
  }
  Map<String,EmbeddableType> embeddedColumns=((MetamodelImpl)metaModel).getEmbeddables(entityMetadata.getEntityClazz());
  for (  EmbeddableType embeddedCol : embeddedColumns.values()) {
    Set<Attribute> embeddedAttributes=embeddedCol.getAttributes();
    for (    Attribute column : embeddedAttributes) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(((AbstractAttribute)column).getJPAColumnName());
    }
  }
  if (relations != null) {
    for (    String relation : relations) {
      Relation rel=entityMetadata.getRelation(entityMetadata.getFieldName(relation));
      String r=MetadataUtils.getMappedName(entityMetadata,rel);
      if (!((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName().equalsIgnoreCase(r != null ? r : relation) && rel != null && !rel.getProperty().isAnnotationPresent(ManyToMany.class) && !rel.getProperty().isAnnotationPresent(OneToMany.class) && (rel.getProperty().isAnnotationPresent(OneToOne.class) && StringUtils.isBlank(rel.getMappedBy()) || rel.getProperty().isAnnotationPresent(ManyToOne.class))) {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(aliasName);
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(r != null ? r : relation);
      }
    }
  }
  for (  Relation r : entityMetadata.getRelations()) {
    if (!r.getType().equals(ForeignKey.MANY_TO_MANY) && (r.getProperty().isAnnotationPresent(OneToOne.class) && StringUtils.isBlank(r.getMappedBy()) || r.getProperty().isAnnotationPresent(ManyToOne.class))) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(r.getJoinColumnName());
    }
  }
  queryBuilder.append(""String_Node_Str"");
  if (entityMetadata.getSchema() != null && !entityMetadata.getSchema().isEmpty()) {
    queryBuilder.append(entityMetadata.getSchema() + ""String_Node_Str"");
  }
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        String fieldName=clause.getProperty();
        boolean isString=isStringProperty(entityType,fieldName,entityMetadata);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),aliasName,aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        appendStringPrefix(queryBuilder,isString);
        queryBuilder.append(clause.getValue());
        appendStringPrefix(queryBuilder,isString);
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    Attribute col=entityMetadata.getIdAttribute();
    boolean isString=col.getJavaType().isAssignableFrom(String.class);
    for (    String key : primaryKeys) {
      appendStringPrefix(queryBuilder,isString);
      queryBuilder.append(key);
      appendStringPrefix(queryBuilder,isString);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}",0.9832220819051056
176472,"/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  String persistenceUnit=null;
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  String batchQuery=CQLTranslator.BATCH_QUERY;
  batchQuery=StringUtils.replace(batchQuery,CQLTranslator.STATEMENT,""String_Node_Str"");
  StringBuilder batchQueryBuilder=new StringBuilder(batchQuery);
  try {
    boolean isCql3Enabled=false;
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (isCql3Enabled(metadata)) {
          isCql3Enabled=true;
          List<RelationHolder> relationHolders=getRelationHolders(node);
          String query;
          if (node.isInState(RemovedState.class)) {
            query=onDeleteQuery(metadata,metaModel,id);
          }
 else {
            query=createInsertQuery(metadata,entity,conn,relationHolders,getTtlValues().get(metadata.getTableName()));
          }
          batchQueryBuilder.append(query);
        }
 else {
          if (node.isInState(RemovedState.class)) {
            delete(entity,id);
          }
 else {
            List<RelationHolder> relationHolders=getRelationHolders(node);
            Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
            mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
            recordsExecuted+=mutationMap.size();
            if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
              batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
            }
 else {
              batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
            }
            indexNode(node,metadata);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getConection();
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
      }
    }
    if (!nodes.isEmpty() && isCql3Enabled) {
      batchQueryBuilder.append(CQLTranslator.APPLY_BATCH);
      executeCQLQuery(batchQueryBuilder.toString());
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    if (pooledConnection != null) {
      releaseConnection(pooledConnection);
    }
  }
  return recordsExecuted;
}","/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  String batchQuery=CQLTranslator.BATCH_QUERY;
  batchQuery=StringUtils.replace(batchQuery,CQLTranslator.STATEMENT,""String_Node_Str"");
  StringBuilder batchQueryBuilder=new StringBuilder(batchQuery);
  try {
    boolean isCql3Enabled=false;
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (isCql3Enabled(metadata)) {
          isCql3Enabled=true;
          List<RelationHolder> relationHolders=getRelationHolders(node);
          String query;
          if (node.isInState(RemovedState.class)) {
            query=onDeleteQuery(metadata,metaModel,id);
          }
 else {
            query=createInsertQuery(metadata,entity,conn,relationHolders,getTtlValues().get(metadata.getTableName()));
          }
          batchQueryBuilder.append(query);
        }
 else {
          if (node.isInState(RemovedState.class)) {
            delete(entity,id);
          }
 else {
            List<RelationHolder> relationHolders=getRelationHolders(node);
            Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
            mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
            recordsExecuted+=mutationMap.size();
            if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
              batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
            }
 else {
              batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
            }
            indexNode(node,metadata);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getConection();
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
      }
    }
    if (!nodes.isEmpty() && isCql3Enabled) {
      batchQueryBuilder.append(CQLTranslator.APPLY_BATCH);
      executeCQLQuery(batchQueryBuilder.toString());
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    if (pooledConnection != null) {
      releaseConnection(pooledConnection);
    }
  }
  return recordsExecuted;
}",0.9955657273637534
176473,"public Properties getConnectionProperties(){
  DataStore ds=getDataStore();
  Properties properties=new Properties();
  if (ds != null) {
    if (ds.getConnection() != null) {
      properties=ds.getConnection().getProperties();
      return properties;
    }
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"");
    }
  }
  return properties;
}","public Properties getConnectionProperties(){
  DataStore ds=getDataStore();
  Properties properties=new Properties();
  if (ds != null) {
    if (ds.getConnection() != null) {
      properties=ds.getConnection().getProperties();
      return properties != null ? properties : new Properties();
    }
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"");
    }
  }
  return properties;
}",0.9479166666666666
176474,"/** 
 * @return pool an the basis of LoadBalancing policy.
 */
private IThriftPool getPoolUsingPolicy(){
  if (!hostPools.isEmpty()) {
    logger.info(""String_Node_Str"",loadBalancingPolicy.getClass());
    return (IThriftPool)loadBalancingPolicy.getPool(hostPools.values());
  }
  throw new KunderaException(""String_Node_Str"");
}","/** 
 * @return pool an the basis of LoadBalancing policy.
 */
private IThriftPool getPoolUsingPolicy(){
  if (!hostPools.isEmpty()) {
    logger.info(""String_Node_Str"",loadBalancingPolicy.getClass().getSimpleName());
    return (IThriftPool)loadBalancingPolicy.getPool(hostPools.values());
  }
  throw new KunderaException(""String_Node_Str"");
}",0.9762611275964392
176475,"Mutator getMutator(IThriftPool pool){
  IThriftPool iThriftPool=pool;
  boolean success=false;
  while (!success) {
    success=true;
    if (iThriftPool != null) {
      Node[] nodes=((CommonsBackedPool)iThriftPool).getCluster().getNodes();
      String host=nodes[0].getAddress();
      int thriftPort=((CommonsBackedPool)iThriftPool).getCluster().getConnectionConfig().getThriftPort();
      if (PelopsUtils.verifyConnection(host,thriftPort)) {
        logger.info(""String_Node_Str"",nodes[0].getAddress(),thriftPort);
        return Pelops.createMutator(PelopsUtils.getPoolName(iThriftPool));
      }
      removePool(iThriftPool);
    }
    success=false;
    iThriftPool=getPoolUsingPolicy();
  }
  throw new KunderaException(""String_Node_Str"");
}","Mutator getMutator(IThriftPool pool){
  IThriftPool iThriftPool=pool;
  boolean success=false;
  while (!success) {
    success=true;
    if (iThriftPool != null) {
      Node[] nodes=((CommonsBackedPool)iThriftPool).getCluster().getNodes();
      String host=nodes[0].getAddress();
      int thriftPort=((CommonsBackedPool)iThriftPool).getCluster().getConnectionConfig().getThriftPort();
      CassandraHost cassandraHost=((CassandraHostConfiguration)configuration).getCassandraHost(nodes[0].getAddress(),((CommonsBackedPool)pool).getCluster().getConnectionConfig().getThriftPort());
      if (cassandraHost.isTestOnBorrow()) {
        if (cassandraHost.isTestOnBorrow() && PelopsUtils.verifyConnection(host,thriftPort)) {
          logger.info(""String_Node_Str"",nodes[0].getAddress(),thriftPort);
          return Pelops.createMutator(PelopsUtils.getPoolName(iThriftPool));
        }
        removePool(iThriftPool);
      }
 else {
        logger.info(""String_Node_Str"",nodes[0].getAddress(),thriftPort);
        return Pelops.createMutator(PelopsUtils.getPoolName(iThriftPool));
      }
    }
    success=false;
    iThriftPool=getPoolUsingPolicy();
  }
  throw new KunderaException(""String_Node_Str"");
}",0.6418367346938776
176476,"IPooledConnection getConnection(IThriftPool pool){
  IThriftPool iThriftPool=pool;
  boolean success=false;
  while (!success) {
    success=true;
    if (iThriftPool != null) {
      Node[] nodes=((CommonsBackedPool)iThriftPool).getCluster().getNodes();
      String host=nodes[0].getAddress();
      int thriftPort=((CommonsBackedPool)iThriftPool).getCluster().getConnectionConfig().getThriftPort();
      if (PelopsUtils.verifyConnection(host,thriftPort)) {
        logger.info(""String_Node_Str"",nodes[0].getAddress(),thriftPort);
        return iThriftPool.getConnection();
      }
      removePool(iThriftPool);
    }
    success=false;
    iThriftPool=getPoolUsingPolicy();
  }
  throw new KunderaException(""String_Node_Str"");
}","IPooledConnection getConnection(IThriftPool pool){
  IThriftPool iThriftPool=pool;
  boolean success=false;
  while (!success) {
    success=true;
    if (iThriftPool != null) {
      Node[] nodes=((CommonsBackedPool)iThriftPool).getCluster().getNodes();
      String host=nodes[0].getAddress();
      int thriftPort=((CommonsBackedPool)iThriftPool).getCluster().getConnectionConfig().getThriftPort();
      CassandraHost cassandraHost=((CassandraHostConfiguration)configuration).getCassandraHost(nodes[0].getAddress(),((CommonsBackedPool)pool).getCluster().getConnectionConfig().getThriftPort());
      if (cassandraHost.isTestOnBorrow()) {
        if (cassandraHost.isTestOnBorrow() && PelopsUtils.verifyConnection(host,thriftPort)) {
          logger.info(""String_Node_Str"",nodes[0].getAddress(),thriftPort);
          return iThriftPool.getConnection();
        }
        removePool(iThriftPool);
      }
 else {
        logger.info(""String_Node_Str"",nodes[0].getAddress(),thriftPort);
        return iThriftPool.getConnection();
      }
      removePool(iThriftPool);
    }
    success=false;
    iThriftPool=getPoolUsingPolicy();
  }
  throw new KunderaException(""String_Node_Str"");
}",0.6683991683991684
176477,"Selector getSelector(IThriftPool pool){
  IThriftPool iThriftPool=pool;
  boolean success=false;
  while (!success) {
    if (iThriftPool != null) {
      Node[] nodes=((CommonsBackedPool)iThriftPool).getCluster().getNodes();
      String host=nodes[0].getAddress();
      int thriftPort=((CommonsBackedPool)iThriftPool).getCluster().getConnectionConfig().getThriftPort();
      if (PelopsUtils.verifyConnection(host,thriftPort)) {
        logger.info(""String_Node_Str"",nodes[0].getAddress(),thriftPort);
        return Pelops.createSelector(PelopsUtils.getPoolName(iThriftPool));
      }
      removePool(iThriftPool);
    }
    success=false;
    iThriftPool=getPoolUsingPolicy();
  }
  throw new KunderaException(""String_Node_Str"");
}","Selector getSelector(IThriftPool pool){
  IThriftPool iThriftPool=pool;
  boolean success=false;
  while (!success) {
    if (iThriftPool != null) {
      Node[] nodes=((CommonsBackedPool)iThriftPool).getCluster().getNodes();
      String host=nodes[0].getAddress();
      int thriftPort=((CommonsBackedPool)iThriftPool).getCluster().getConnectionConfig().getThriftPort();
      CassandraHost cassandraHost=((CassandraHostConfiguration)configuration).getCassandraHost(nodes[0].getAddress(),((CommonsBackedPool)pool).getCluster().getConnectionConfig().getThriftPort());
      if (cassandraHost.isTestOnBorrow()) {
        if (cassandraHost.isTestOnBorrow() && PelopsUtils.verifyConnection(host,thriftPort)) {
          logger.info(""String_Node_Str"",nodes[0].getAddress(),thriftPort);
          return Pelops.createSelector(PelopsUtils.getPoolName(iThriftPool));
        }
        removePool(iThriftPool);
      }
 else {
        logger.info(""String_Node_Str"",nodes[0].getAddress(),thriftPort);
        return Pelops.createSelector(PelopsUtils.getPoolName(iThriftPool));
      }
    }
    success=false;
    iThriftPool=getPoolUsingPolicy();
  }
  throw new KunderaException(""String_Node_Str"");
}",0.6266183324702227
176478,"RowDeletor getRowDeletor(IThriftPool pool){
  IThriftPool iThriftPool=pool;
  boolean success=false;
  while (!success) {
    if (iThriftPool != null) {
      Node[] nodes=((CommonsBackedPool)iThriftPool).getCluster().getNodes();
      String host=nodes[0].getAddress();
      int thriftPort=((CommonsBackedPool)iThriftPool).getCluster().getConnectionConfig().getThriftPort();
      if (PelopsUtils.verifyConnection(host,thriftPort)) {
        logger.info(""String_Node_Str"",nodes[0].getAddress(),thriftPort);
        return Pelops.createRowDeletor(PelopsUtils.getPoolName(iThriftPool));
      }
      removePool(iThriftPool);
    }
    success=false;
    iThriftPool=getPoolUsingPolicy();
  }
  throw new KunderaException(""String_Node_Str"");
}","RowDeletor getRowDeletor(IThriftPool pool){
  IThriftPool iThriftPool=pool;
  boolean success=false;
  while (!success) {
    if (iThriftPool != null) {
      Node[] nodes=((CommonsBackedPool)iThriftPool).getCluster().getNodes();
      String host=nodes[0].getAddress();
      int thriftPort=((CommonsBackedPool)iThriftPool).getCluster().getConnectionConfig().getThriftPort();
      CassandraHost cassandraHost=((CassandraHostConfiguration)configuration).getCassandraHost(nodes[0].getAddress(),((CommonsBackedPool)pool).getCluster().getConnectionConfig().getThriftPort());
      if (cassandraHost.isTestOnBorrow()) {
        if (cassandraHost.isTestOnBorrow() && PelopsUtils.verifyConnection(host,thriftPort)) {
          logger.info(""String_Node_Str"",nodes[0].getAddress(),thriftPort);
          return Pelops.createRowDeletor(PelopsUtils.getPoolName(iThriftPool));
        }
        removePool(iThriftPool);
      }
 else {
        logger.info(""String_Node_Str"",nodes[0].getAddress(),thriftPort);
        return Pelops.createRowDeletor(PelopsUtils.getPoolName(iThriftPool));
      }
    }
    success=false;
    iThriftPool=getPoolUsingPolicy();
  }
  throw new KunderaException(""String_Node_Str"");
}",0.6570694087403599
176479,"/** 
 * @param host
 * @param port
 * @return
 */
public static boolean verifyConnection(String host,int port){
  try {
    TSocket socket=new TSocket(host,port);
    TTransport transport=new TFramedTransport(socket);
    TProtocol protocol=new TBinaryProtocol(transport);
    Cassandra.Client client=new Cassandra.Client(protocol);
    socket.open();
    return client.describe_cluster_name() != null;
  }
 catch (  TTransportException e) {
    logger.warn(""String_Node_Str"",host,port);
    return false;
  }
catch (  TException e) {
    logger.warn(""String_Node_Str"",host,port);
    return false;
  }
}","/** 
 * @param host
 * @param port
 * @return
 */
public static boolean verifyConnection(String host,int port){
  Socket socket=null;
  try {
    socket=new Socket(host,port);
    socket.setReuseAddress(true);
    socket.setSoLinger(true,0);
    boolean isConnected=socket.isConnected();
    return isConnected;
  }
 catch (  UnknownHostException e) {
    logger.warn(""String_Node_Str"",host,port);
    return false;
  }
catch (  IOException e) {
    logger.warn(""String_Node_Str"",host,port);
    return false;
  }
 finally {
    try {
      if (socket != null) {
        socket.close();
      }
    }
 catch (    IOException e) {
      logger.warn(""String_Node_Str"",host,port);
    }
  }
}",0.3279195668986852
176480,"/** 
 * Find List of objects based on value   {@columnValue} of column{@columnName}
 * @param m
 * @param columnName
 * @param columnValue
 * @param clazz
 * @param dataHandler
 * @return
 */
protected List<Object> findByRelationQuery(EntityMetadata m,String columnName,Object columnValue,Class clazz,CassandraDataHandler dataHandler){
  CQLTranslator translator=new CQLTranslator();
  String selectQuery=translator.SELECTALL_QUERY;
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),m.getTableName()).toString());
  StringBuilder selectQueryBuilder=new StringBuilder(selectQuery);
  selectQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  translator.buildWhereClause(selectQueryBuilder,columnValue.getClass(),columnName,columnValue,""String_Node_Str"");
  selectQueryBuilder.delete(selectQueryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),selectQueryBuilder.length());
  return executeQuery(selectQueryBuilder.toString(),clazz,null,dataHandler);
}","/** 
 * Find List of objects based on value   {@columnValue} of column{@columnName}
 * @param m
 * @param columnName
 * @param columnValue
 * @param clazz
 * @param dataHandler
 * @return
 */
protected List<Object> findByRelationQuery(EntityMetadata m,String columnName,Object columnValue,Class clazz,CassandraDataHandler dataHandler){
  CQLTranslator translator=new CQLTranslator();
  String selectQuery=translator.SELECTALL_QUERY;
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),m.getTableName()).toString());
  StringBuilder selectQueryBuilder=new StringBuilder(selectQuery);
  selectQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  translator.buildWhereClause(selectQueryBuilder,columnValue.getClass(),columnName,columnValue,""String_Node_Str"");
  selectQueryBuilder.delete(selectQueryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),selectQueryBuilder.length());
  return executeQuery(selectQueryBuilder.toString(),clazz,null,dataHandler,true);
}",0.997545409916544
176481,"/** 
 * Execute query and Return list of Objects.
 * @param cqlQuery
 * @param clazz
 * @param relationalField
 * @param dataHandler
 * @return
 */
public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField,CassandraDataHandler dataHandler){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(clazz);
  CqlResult result=null;
  List returnedEntities=new ArrayList();
  try {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",cqlQuery);
    }
    result=executeCQLQuery(cqlQuery);
    if (result != null && (result.getRows() != null || result.getRowsSize() > 0)) {
      returnedEntities=new ArrayList<Object>(result.getRowsSize());
      Iterator<CqlRow> iter=result.getRowsIterator();
      while (iter.hasNext()) {
        CqlRow row=iter.next();
        Object rowKey=null;
        ThriftRow thriftRow=null;
        thriftRow=new ThriftRow(rowKey,entityMetadata.getTableName(),row.getColumns(),new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
        Object entity=dataHandler.populateEntity(thriftRow,entityMetadata,relationalField,relationalField != null && !relationalField.isEmpty());
        if (entity != null) {
          returnedEntities.add(entity);
        }
 else {
          returnedEntities.add(row.getColumns().get(0));
        }
      }
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  return returnedEntities;
}","/** 
 * Execute query and Return list of Objects.
 * @param cqlQuery
 * @param clazz
 * @param relationalField
 * @param dataHandler
 * @return
 */
public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField,CassandraDataHandler dataHandler,boolean isCql3Enabled){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(clazz);
  CqlResult result=null;
  List returnedEntities=new ArrayList();
  try {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",cqlQuery);
    }
    result=executeCQLQuery(cqlQuery,isCql3Enabled);
    if (result != null && (result.getRows() != null || result.getRowsSize() > 0)) {
      returnedEntities=new ArrayList<Object>(result.getRowsSize());
      Iterator<CqlRow> iter=result.getRowsIterator();
      while (iter.hasNext()) {
        CqlRow row=iter.next();
        Object rowKey=null;
        ThriftRow thriftRow=null;
        thriftRow=new ThriftRow(rowKey,entityMetadata.getTableName(),row.getColumns(),new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
        Object entity=dataHandler.populateEntity(thriftRow,entityMetadata,relationalField,relationalField != null && !relationalField.isEmpty());
        if (entity != null) {
          returnedEntities.add(entity);
        }
 else {
          returnedEntities.add(row.getColumns().get(0));
        }
      }
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  return returnedEntities;
}",0.9913999044433828
176482,"/** 
 * Executes query string using cql3.
 * @param cqlQuery
 * @return
 * @throws InvalidRequestException
 * @throws UnavailableException
 * @throws TimedOutException
 * @throws SchemaDisagreementException
 * @throws TException
 */
protected CqlResult executeCQLQuery(String cqlQuery) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException {
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  pooledConnection=getConection(persistenceUnit);
  conn=getConnection(pooledConnection);
  try {
    if (isCql3Enabled()) {
      return conn.execute_cql3_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE,consistencyLevel);
    }
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",cqlQuery);
    }
    return conn.execute_cql_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE);
  }
  finally {
    releaseConnection(pooledConnection);
  }
}","/** 
 * Executes query string using cql3.
 * @param cqlQuery
 * @return
 * @throws InvalidRequestException
 * @throws UnavailableException
 * @throws TimedOutException
 * @throws SchemaDisagreementException
 * @throws TException
 */
protected CqlResult executeCQLQuery(String cqlQuery,boolean isCql3Enabled) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException {
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  pooledConnection=getConection(persistenceUnit);
  conn=getConnection(pooledConnection);
  try {
    if (isCql3Enabled || isCql3Enabled()) {
      return conn.execute_cql3_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE,consistencyLevel);
    }
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",cqlQuery);
    }
    return conn.execute_cql_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE);
  }
  finally {
    releaseConnection(pooledConnection);
  }
}",0.9805097451274364
176483,"/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  String persistenceUnit=null;
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  String batchQuery=CQLTranslator.BATCH_QUERY;
  batchQuery=StringUtils.replace(batchQuery,CQLTranslator.STATEMENT,""String_Node_Str"");
  StringBuilder batchQueryBuilder=new StringBuilder(batchQuery);
  try {
    boolean isCql3Enabled=false;
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (isCql3Enabled(metadata)) {
          isCql3Enabled=true;
          List<RelationHolder> relationHolders=getRelationHolders(node);
          String query;
          if (node.isInState(RemovedState.class)) {
            query=onDeleteQuery(metadata,metaModel,id);
          }
 else {
            query=createInsertQuery(metadata,entity,conn,relationHolders,getTtlValues().get(metadata.getTableName()));
          }
          batchQueryBuilder.append(query);
        }
 else {
          if (node.isInState(RemovedState.class)) {
            delete(entity,id);
          }
 else {
            List<RelationHolder> relationHolders=getRelationHolders(node);
            Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
            mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
            recordsExecuted+=mutationMap.size();
            if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
              batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
            }
 else {
              batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
            }
            indexNode(node,metadata);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getConection(persistenceUnit);
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
      }
    }
    if (!nodes.isEmpty() && isCql3Enabled) {
      batchQueryBuilder.append(CQLTranslator.APPLY_BATCH);
      executeCQLQuery(batchQueryBuilder.toString());
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    if (pooledConnection != null) {
      releaseConnection(pooledConnection);
    }
  }
  return recordsExecuted;
}","/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  String persistenceUnit=null;
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  String batchQuery=CQLTranslator.BATCH_QUERY;
  batchQuery=StringUtils.replace(batchQuery,CQLTranslator.STATEMENT,""String_Node_Str"");
  StringBuilder batchQueryBuilder=new StringBuilder(batchQuery);
  try {
    boolean isCql3Enabled=false;
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (isCql3Enabled(metadata)) {
          isCql3Enabled=true;
          List<RelationHolder> relationHolders=getRelationHolders(node);
          String query;
          if (node.isInState(RemovedState.class)) {
            query=onDeleteQuery(metadata,metaModel,id);
          }
 else {
            query=createInsertQuery(metadata,entity,conn,relationHolders,getTtlValues().get(metadata.getTableName()));
          }
          batchQueryBuilder.append(query);
        }
 else {
          if (node.isInState(RemovedState.class)) {
            delete(entity,id);
          }
 else {
            List<RelationHolder> relationHolders=getRelationHolders(node);
            Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
            mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
            recordsExecuted+=mutationMap.size();
            if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
              batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
            }
 else {
              batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
            }
            indexNode(node,metadata);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getConection(persistenceUnit);
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
      }
    }
    if (!nodes.isEmpty() && isCql3Enabled) {
      batchQueryBuilder.append(CQLTranslator.APPLY_BATCH);
      executeCQLQuery(batchQueryBuilder.toString(),false);
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    if (pooledConnection != null) {
      releaseConnection(pooledConnection);
    }
  }
  return recordsExecuted;
}",0.9991499008217626
176484,"@Override protected void onPersist(EntityMetadata metadata,Object entity,Object id,List<RelationHolder> rlHolders){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  if (isUpdate && metadata.isCounterColumnType()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  String insert_Query=null;
  if (isCql3Enabled(metadata)) {
    Cassandra.Client client=getRawClient(metadata.getPersistenceUnit(),metadata.getSchema());
    try {
      client.set_keyspace(metadata.getSchema());
      insert_Query=createInsertQuery(metadata,entity,client,rlHolders,getTtlValues().get(metadata.getTableName()));
      executeCQLQuery(insert_Query);
    }
 catch (    InvalidRequestException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    TException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    UnavailableException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    TimedOutException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    SchemaDisagreementException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
  }
 else {
    ThriftRow tf=null;
    try {
      String columnFamily=metadata.getTableName();
      tf=dataHandler.toThriftRow(entity,id,metadata,columnFamily,getTtlValues().get(columnFamily));
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      throw new KunderaException(e);
    }
    addRelationsToThriftRow(metadata,tf,rlHolders);
    Mutator mutator=clientFactory.getMutator(pool);
    if (metadata.isCounterColumnType()) {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"",tf.getId());
      }
      List<CounterColumn> thriftCounterColumns=tf.getCounterColumns();
      List<CounterSuperColumn> thriftCounterSuperColumns=tf.getCounterSuperColumns();
      if (thriftCounterColumns != null && !thriftCounterColumns.isEmpty()) {
        mutator.writeCounterColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Arrays.asList(tf.getCounterColumns().toArray(new CounterColumn[0])));
      }
      if (thriftCounterSuperColumns != null && !thriftCounterSuperColumns.isEmpty()) {
        for (        CounterSuperColumn sc : thriftCounterSuperColumns) {
          mutator.writeSubCounterColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Bytes.fromByteArray(sc.getName()),sc.getColumns());
        }
      }
    }
 else {
      List<Column> thriftColumns=tf.getColumns();
      List<SuperColumn> thriftSuperColumns=tf.getSuperColumns();
      if (thriftColumns != null && !thriftColumns.isEmpty()) {
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"",tf.getId());
        }
        mutator.writeColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Arrays.asList(tf.getColumns().toArray(new Column[0])));
      }
      if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
        for (        SuperColumn sc : thriftSuperColumns) {
          if (log.isInfoEnabled()) {
            log.info(""String_Node_Str"",tf.getId());
          }
          mutator.writeSubColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Bytes.fromByteArray(sc.getName()),sc.getColumns());
        }
      }
    }
    mutator.execute(getConsistencyLevel());
    tf=null;
    if (isTtlPerRequest()) {
      getTtlValues().clear();
    }
  }
}","@Override protected void onPersist(EntityMetadata metadata,Object entity,Object id,List<RelationHolder> rlHolders){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  if (isUpdate && metadata.isCounterColumnType()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  String insert_Query=null;
  if (isCql3Enabled(metadata)) {
    Cassandra.Client client=getRawClient(metadata.getPersistenceUnit(),metadata.getSchema());
    try {
      client.set_keyspace(metadata.getSchema());
      insert_Query=createInsertQuery(metadata,entity,client,rlHolders,getTtlValues().get(metadata.getTableName()));
      executeCQLQuery(insert_Query,true);
    }
 catch (    InvalidRequestException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    TException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    UnavailableException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    TimedOutException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
catch (    SchemaDisagreementException e) {
      log.error(""String_Node_Str"",insert_Query,e);
      throw new KunderaException(e);
    }
  }
 else {
    ThriftRow tf=null;
    try {
      String columnFamily=metadata.getTableName();
      tf=dataHandler.toThriftRow(entity,id,metadata,columnFamily,getTtlValues().get(columnFamily));
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      throw new KunderaException(e);
    }
    addRelationsToThriftRow(metadata,tf,rlHolders);
    Mutator mutator=clientFactory.getMutator(pool);
    if (metadata.isCounterColumnType()) {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"",tf.getId());
      }
      List<CounterColumn> thriftCounterColumns=tf.getCounterColumns();
      List<CounterSuperColumn> thriftCounterSuperColumns=tf.getCounterSuperColumns();
      if (thriftCounterColumns != null && !thriftCounterColumns.isEmpty()) {
        mutator.writeCounterColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Arrays.asList(tf.getCounterColumns().toArray(new CounterColumn[0])));
      }
      if (thriftCounterSuperColumns != null && !thriftCounterSuperColumns.isEmpty()) {
        for (        CounterSuperColumn sc : thriftCounterSuperColumns) {
          mutator.writeSubCounterColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Bytes.fromByteArray(sc.getName()),sc.getColumns());
        }
      }
    }
 else {
      List<Column> thriftColumns=tf.getColumns();
      List<SuperColumn> thriftSuperColumns=tf.getSuperColumns();
      if (thriftColumns != null && !thriftColumns.isEmpty()) {
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"",tf.getId());
        }
        mutator.writeColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Arrays.asList(tf.getColumns().toArray(new Column[0])));
      }
      if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
        for (        SuperColumn sc : thriftSuperColumns) {
          if (log.isInfoEnabled()) {
            log.info(""String_Node_Str"",tf.getId());
          }
          mutator.writeSubColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Bytes.fromByteArray(sc.getName()),sc.getColumns());
        }
      }
    }
    mutator.execute(getConsistencyLevel());
    tf=null;
    if (isTtlPerRequest()) {
      getTtlValues().clear();
    }
  }
}",0.9993240502906584
176485,"/** 
 * On composite columns.
 * @param translator the translator
 * @param columns the columns
 * @param queryBuilder the query builder
 */
private void onCompositeColumns(CQLTranslator translator,List<ColumnInfo> columns,StringBuilder queryBuilder){
  for (  ColumnInfo colInfo : columns) {
    String dataType=CassandraValidationClassMapper.getValidationClass(colInfo.getType());
    String cqlType=translator.getCQLType(dataType);
    translator.appendColumnName(queryBuilder,colInfo.getColumnName(),cqlType);
    queryBuilder.append(""String_Node_Str"");
  }
}","/** 
 * On composite columns.
 * @param translator the translator
 * @param columns the columns
 * @param queryBuilder the query builder
 */
private void onCompositeColumns(CQLTranslator translator,List<ColumnInfo> compositeColumns,StringBuilder queryBuilder,List<ColumnInfo> columns){
  for (  ColumnInfo colInfo : compositeColumns) {
    if (columns == null || (columns != null && !columns.contains(colInfo))) {
      String dataType=CassandraValidationClassMapper.getValidationClass(colInfo.getType());
      String cqlType=translator.getCQLType(dataType);
      translator.appendColumnName(queryBuilder,colInfo.getColumnName(),cqlType);
      queryBuilder.append(""String_Node_Str"");
    }
  }
}",0.8929421094369548
176486,"/** 
 * On compound key.
 * @param tableInfo the table infos
 * @throws TimedOutException
 * @throws UnavailableException
 * @throws InvalidRequestException the invalid request exception
 * @throws TException the t exception
 * @throws SchemaDisagreementException the schema disagreement exception
 */
private void onCompoundKey(TableInfo tableInfo){
  CQLTranslator translator=new CQLTranslator();
  String columnFamilyQuery=CQLTranslator.CREATE_COLUMNFAMILY_QUERY;
  columnFamilyQuery=StringUtils.replace(columnFamilyQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableInfo.getTableName()).toString());
  List<ColumnInfo> columns=tableInfo.getColumnMetadatas();
  StringBuilder queryBuilder=new StringBuilder();
  onCompositeColumns(translator,columns,queryBuilder);
  List<EmbeddedColumnInfo> compositeColumns=tableInfo.getEmbeddedColumnMetadatas();
  EmbeddableType compoEmbeddableType=compositeColumns.get(0).getEmbeddable();
  onCompositeColumns(translator,compositeColumns.get(0).getColumns(),queryBuilder);
  if (queryBuilder.length() > 0) {
    queryBuilder.deleteCharAt(queryBuilder.length() - 1);
    columnFamilyQuery=StringUtils.replace(columnFamilyQuery,CQLTranslator.COLUMNS,queryBuilder.toString());
    queryBuilder=new StringBuilder(columnFamilyQuery);
  }
  queryBuilder.append(translator.ADD_PRIMARYKEY_CLAUSE);
  Field[] fields=tableInfo.getTableIdType().getDeclaredFields();
  StringBuilder primaryKeyBuilder=new StringBuilder();
  for (  Field f : fields) {
    if (!ReflectUtils.isTransientOrStatic(f)) {
      Attribute attribute=compoEmbeddableType.getAttribute(f.getName());
      translator.appendColumnName(primaryKeyBuilder,((AbstractAttribute)attribute).getJPAColumnName());
      primaryKeyBuilder.append(""String_Node_Str"");
    }
  }
  primaryKeyBuilder.deleteCharAt(primaryKeyBuilder.length() - 1);
  queryBuilder=new StringBuilder(StringUtils.replace(queryBuilder.toString(),CQLTranslator.COLUMNS,primaryKeyBuilder.toString()));
  setColumnFamilyProperties(null,getColumnFamilyProperties(tableInfo),queryBuilder);
  try {
    cassandra_client.set_cql_version(CassandraConstants.CQL_VERSION_3_0);
    cassandra_client.set_keyspace(databaseName);
    cassandra_client.execute_cql3_query(ByteBuffer.wrap(queryBuilder.toString().getBytes(Constants.CHARSET_UTF8)),Compression.NONE,ConsistencyLevel.ONE);
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"",tableInfo.getTableName(),e);
    throw new SchemaGenerationException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",tableInfo.getTableName(),e);
    throw new SchemaGenerationException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",tableInfo.getTableName(),e);
    throw new SchemaGenerationException(e);
  }
catch (  InvalidRequestException ire) {
    StringBuilder builder=new StringBuilder(""String_Node_Str"");
    if (ire.getWhy() != null && ire.getWhy().contains(builder.toString()) && operation.equalsIgnoreCase(ScheamOperationType.update.name())) {
      for (      ColumnInfo column : tableInfo.getColumnMetadatas()) {
        addColumnToTable(tableInfo,translator,column);
      }
    }
 else     if (ire.getWhy() != null && ire.getWhy().equals(builder.toString())) {
      dropTableUsingCQL(tableInfo);
      onCompoundKey(tableInfo);
    }
 else {
      log.error(""String_Node_Str"",tableInfo.getTableName(),ire);
      throw new SchemaGenerationException(""String_Node_Str"" + tableInfo.getTableName(),ire,""String_Node_Str"",databaseName);
    }
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",tableInfo.getTableName(),e);
    throw new SchemaGenerationException(""String_Node_Str"" + tableInfo.getTableName(),e,""String_Node_Str"",databaseName);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",tableInfo.getTableName(),e);
    throw new SchemaGenerationException(""String_Node_Str"" + tableInfo.getTableName(),e,""String_Node_Str"",databaseName);
  }
}","/** 
 * On compound key.
 * @param tableInfo the table infos
 * @throws TimedOutException
 * @throws UnavailableException
 * @throws InvalidRequestException the invalid request exception
 * @throws TException the t exception
 * @throws SchemaDisagreementException the schema disagreement exception
 */
private void onCompoundKey(TableInfo tableInfo){
  CQLTranslator translator=new CQLTranslator();
  String columnFamilyQuery=CQLTranslator.CREATE_COLUMNFAMILY_QUERY;
  columnFamilyQuery=StringUtils.replace(columnFamilyQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableInfo.getTableName()).toString());
  List<ColumnInfo> columns=tableInfo.getColumnMetadatas();
  StringBuilder queryBuilder=new StringBuilder();
  onCompositeColumns(translator,columns,queryBuilder,null);
  List<EmbeddedColumnInfo> compositeColumns=tableInfo.getEmbeddedColumnMetadatas();
  EmbeddableType compoEmbeddableType=compositeColumns.get(0).getEmbeddable();
  onCompositeColumns(translator,compositeColumns.get(0).getColumns(),queryBuilder,columns);
  if (queryBuilder.length() > 0) {
    queryBuilder.deleteCharAt(queryBuilder.length() - 1);
    columnFamilyQuery=StringUtils.replace(columnFamilyQuery,CQLTranslator.COLUMNS,queryBuilder.toString());
    queryBuilder=new StringBuilder(columnFamilyQuery);
  }
  queryBuilder.append(translator.ADD_PRIMARYKEY_CLAUSE);
  Field[] fields=tableInfo.getTableIdType().getDeclaredFields();
  StringBuilder primaryKeyBuilder=new StringBuilder();
  for (  Field f : fields) {
    if (!ReflectUtils.isTransientOrStatic(f)) {
      Attribute attribute=compoEmbeddableType.getAttribute(f.getName());
      translator.appendColumnName(primaryKeyBuilder,((AbstractAttribute)attribute).getJPAColumnName());
      primaryKeyBuilder.append(""String_Node_Str"");
    }
  }
  primaryKeyBuilder.deleteCharAt(primaryKeyBuilder.length() - 1);
  queryBuilder=new StringBuilder(StringUtils.replace(queryBuilder.toString(),CQLTranslator.COLUMNS,primaryKeyBuilder.toString()));
  setColumnFamilyProperties(null,getColumnFamilyProperties(tableInfo),queryBuilder);
  try {
    cassandra_client.set_cql_version(CassandraConstants.CQL_VERSION_3_0);
    cassandra_client.set_keyspace(databaseName);
    cassandra_client.execute_cql3_query(ByteBuffer.wrap(queryBuilder.toString().getBytes(Constants.CHARSET_UTF8)),Compression.NONE,ConsistencyLevel.ONE);
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"",tableInfo.getTableName(),e);
    throw new SchemaGenerationException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",tableInfo.getTableName(),e);
    throw new SchemaGenerationException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",tableInfo.getTableName(),e);
    throw new SchemaGenerationException(e);
  }
catch (  InvalidRequestException ire) {
    StringBuilder builder=new StringBuilder(""String_Node_Str"");
    if (ire.getWhy() != null && ire.getWhy().contains(builder.toString()) && operation.equalsIgnoreCase(ScheamOperationType.update.name())) {
      for (      ColumnInfo column : tableInfo.getColumnMetadatas()) {
        addColumnToTable(tableInfo,translator,column);
      }
    }
 else     if (ire.getWhy() != null && ire.getWhy().equals(builder.toString())) {
      dropTableUsingCQL(tableInfo);
      onCompoundKey(tableInfo);
    }
 else {
      log.error(""String_Node_Str"",tableInfo.getTableName(),ire);
      throw new SchemaGenerationException(""String_Node_Str"" + tableInfo.getTableName(),ire,""String_Node_Str"",databaseName);
    }
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",tableInfo.getTableName(),e);
    throw new SchemaGenerationException(""String_Node_Str"" + tableInfo.getTableName(),e,""String_Node_Str"",databaseName);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",tableInfo.getTableName(),e);
    throw new SchemaGenerationException(""String_Node_Str"" + tableInfo.getTableName(),e,""String_Node_Str"",databaseName);
  }
}",0.9983739837398374
176487,"private static boolean deepEquals(Object a,Object b,Set visited){
  LinkedList<DualKey> stack=new LinkedList<DualKey>();
  stack.addFirst(new DualKey(a,b));
  while (!stack.isEmpty()) {
    DualKey dualKey=stack.removeFirst();
    visited.add(dualKey);
    if (dualKey._key1 == null || dualKey._key2 == null) {
      if (dualKey._key1 != dualKey._key2) {
        return false;
      }
      continue;
    }
    if (!dualKey._key1.getClass().equals(dualKey._key2.getClass())) {
      return false;
    }
    if (dualKey._key1.getClass().isArray()) {
      int len=Array.getLength(dualKey._key1);
      if (len != Array.getLength(dualKey._key2)) {
        return false;
      }
      for (int i=0; i < len; i++) {
        DualKey dk=new DualKey(Array.get(dualKey._key1,i),Array.get(dualKey._key2,i));
        if (!visited.contains(dk)) {
          stack.addFirst(dk);
        }
      }
      continue;
    }
    if (dualKey._key1 instanceof SortedSet) {
      if (!compareOrdered(dualKey,stack,visited)) {
        return false;
      }
      continue;
    }
    if (dualKey._key1 instanceof Set) {
      if (!compareUnordered((Set)dualKey._key1,(Set)dualKey._key2,visited)) {
        return false;
      }
      continue;
    }
    if (dualKey._key1 instanceof Collection) {
      if (!compareOrdered(dualKey,stack,visited)) {
        return false;
      }
      continue;
    }
    if (dualKey._key1 instanceof SortedMap) {
      Map map1=(Map)dualKey._key1;
      Map map2=(Map)dualKey._key2;
      if (map1.size() != map2.size()) {
        return false;
      }
      Iterator i1=map1.entrySet().iterator();
      Iterator i2=map2.entrySet().iterator();
      while (i1.hasNext()) {
        Map.Entry entry1=(Map.Entry)i1.next();
        Map.Entry entry2=(Map.Entry)i2.next();
        DualKey dk=new DualKey(entry1.getKey(),entry2.getKey());
        if (!visited.contains(dk)) {
          stack.addFirst(dk);
        }
        dk=new DualKey(entry1.getValue(),entry2.getValue());
        if (!visited.contains(dk)) {
          stack.addFirst(dk);
        }
      }
      continue;
    }
    if (dualKey._key1 instanceof Map) {
      Map<Object,Object> map1=(Map)dualKey._key1;
      Map<Object,Object> map2=(Map)dualKey._key2;
      if (map1.size() != map2.size()) {
        return false;
      }
      for (      Map.Entry entry1 : map1.entrySet()) {
        Map.Entry saveEntry2=null;
        for (        Map.Entry entry2 : map2.entrySet()) {
          if (deepEquals(entry1.getKey(),entry2.getKey(),visited)) {
            saveEntry2=entry2;
            break;
          }
        }
        if (saveEntry2 == null) {
          return false;
        }
        DualKey dk=new DualKey(entry1.getValue(),saveEntry2.getValue());
        if (!(visited instanceof ProxyCollection) && !visited.contains(dk)) {
          stack.addFirst(dk);
        }
      }
      continue;
    }
    if (hasCustomEquals(dualKey._key1.getClass())) {
      if (!dualKey._key1.equals(dualKey._key2)) {
        return false;
      }
      continue;
    }
    Collection<Field> fields=getDeepDeclaredFields(dualKey._key1.getClass());
    for (    Field field : fields) {
      try {
        DualKey dk=new DualKey(field.get(dualKey._key1),field.get(dualKey._key2));
        if (dk != null) {
          boolean isPersistentCollection=false;
          if (dk._key1 != null) {
            isPersistentCollection=ProxyHelper.isProxyCollection(dk._key1);
          }
          if (isPersistentCollection) {
            dk._key1=null;
          }
          if (dk._key1 != null && !visited.contains(dk)) {
            stack.addFirst(dk);
          }
        }
      }
 catch (      Exception e) {
        continue;
      }
    }
  }
  return true;
}","private static boolean deepEquals(Object a,Object b,Set visited){
  LinkedList<DualKey> stack=new LinkedList<DualKey>();
  stack.addFirst(new DualKey(a,b));
  while (!stack.isEmpty()) {
    DualKey dualKey=stack.removeFirst();
    visited.add(dualKey);
    if (dualKey._key1 == null || dualKey._key2 == null) {
      if (dualKey._key1 != dualKey._key2) {
        return false;
      }
      continue;
    }
    if (!dualKey._key1.getClass().equals(dualKey._key2.getClass())) {
      return false;
    }
    if (dualKey._key1.getClass().isArray()) {
      int len=Array.getLength(dualKey._key1);
      if (len != Array.getLength(dualKey._key2)) {
        return false;
      }
      for (int i=0; i < len; i++) {
        DualKey dk=new DualKey(Array.get(dualKey._key1,i),Array.get(dualKey._key2,i));
        if (!visited.contains(dk)) {
          stack.addFirst(dk);
        }
      }
      continue;
    }
    if (dualKey._key1 instanceof SortedSet) {
      if (!compareOrdered(dualKey,stack,visited)) {
        return false;
      }
      continue;
    }
    if (dualKey._key1 instanceof Set) {
      if (!compareUnordered((Set)dualKey._key1,(Set)dualKey._key2,visited)) {
        return false;
      }
      continue;
    }
    if (dualKey._key1 instanceof Collection) {
      if (!compareOrdered(dualKey,stack,visited)) {
        return false;
      }
      continue;
    }
    if (dualKey._key1 instanceof SortedMap) {
      Map map1=(Map)dualKey._key1;
      Map map2=(Map)dualKey._key2;
      if (map1.size() != map2.size()) {
        return false;
      }
      Iterator i1=map1.entrySet().iterator();
      Iterator i2=map2.entrySet().iterator();
      while (i1.hasNext()) {
        Map.Entry entry1=(Map.Entry)i1.next();
        Map.Entry entry2=(Map.Entry)i2.next();
        DualKey dk=new DualKey(entry1.getKey(),entry2.getKey());
        if (!visited.contains(dk)) {
          stack.addFirst(dk);
        }
        dk=new DualKey(entry1.getValue(),entry2.getValue());
        if (!visited.contains(dk)) {
          stack.addFirst(dk);
        }
      }
      continue;
    }
    if (dualKey._key1 instanceof Map) {
      Map<Object,Object> map1=(Map)dualKey._key1;
      Map<Object,Object> map2=(Map)dualKey._key2;
      if (map1.size() != map2.size()) {
        return false;
      }
      for (      Map.Entry entry1 : map1.entrySet()) {
        Map.Entry saveEntry2=null;
        for (        Map.Entry entry2 : map2.entrySet()) {
          if (deepEquals(entry1.getKey(),entry2.getKey(),visited)) {
            saveEntry2=entry2;
            break;
          }
        }
        if (saveEntry2 == null) {
          return false;
        }
        DualKey dk=new DualKey(entry1.getValue(),saveEntry2.getValue());
        if (!(visited instanceof ProxyCollection) && !visited.contains(dk)) {
          stack.addFirst(dk);
        }
      }
      continue;
    }
    if (hasCustomEquals(dualKey._key1.getClass())) {
      if (!dualKey._key1.equals(dualKey._key2)) {
        return false;
      }
      continue;
    }
    Collection<Field> fields=getDeepDeclaredFields(dualKey._key1.getClass());
    for (    Field field : fields) {
      try {
        DualKey dk=new DualKey(field.get(dualKey._key1),field.get(dualKey._key2));
        if (dk != null) {
          boolean isPersistentCollection=false;
          if (dk._key1 != null) {
            isPersistentCollection=ProxyHelper.isProxyCollection(dk._key1);
          }
          if (isPersistentCollection) {
            dk._key1=null;
          }
          if (!isPersistentCollection && !visited.contains(dk)) {
            stack.addFirst(dk);
          }
        }
      }
 catch (      Exception e) {
        continue;
      }
    }
  }
  return true;
}",0.995030221625252
176488,"@Test public void test(){
  EntityManager em=emf.createEntityManager();
  EmployeeInfo emp_info=new EmployeeInfo();
  EmployeeAddress address_info=new EmployeeAddress();
  address_info.setStreet(""String_Node_Str"");
  emp_info.setAddress(address_info);
  emp_info.setEmployeeName(""String_Node_Str"");
  em.persist(emp_info);
  em.clear();
  EmployeeInfo result=em.find(EmployeeInfo.class,1l);
  Assert.assertNotNull(result);
  Assert.assertNotNull(result.getAddress());
  Assert.assertNotNull(result.getAddress().getStreet());
  Assert.assertNotNull(result.getAddress().getAddress());
  Assert.assertEquals(""String_Node_Str"",result.getAddress().getStreet());
  result.getAddress().setStreet(""String_Node_Str"");
  em.merge(result);
  em.clear();
  result=em.find(EmployeeInfo.class,1l);
  Assert.assertNotNull(result);
  Assert.assertNotNull(result.getAddress());
  Assert.assertNotNull(result.getAddress().getStreet());
  Assert.assertNotNull(result.getAddress().getAddress());
  Assert.assertEquals(""String_Node_Str"",result.getAddress().getStreet());
  em.remove(result);
  em.clear();
  result=em.find(EmployeeInfo.class,1l);
  Assert.assertNull(result);
}","@Test public void test(){
  EntityManager em=emf.createEntityManager();
  EmployeeInfo emp_info=new EmployeeInfo();
  EmployeeAddress address_info=new EmployeeAddress();
  address_info.setStreet(""String_Node_Str"");
  emp_info.setAddress(address_info);
  em.persist(emp_info);
  em.clear();
  EmployeeInfo result=em.find(EmployeeInfo.class,1l);
  Assert.assertNotNull(result);
  Assert.assertNotNull(result.getAddress());
  Assert.assertNotNull(result.getAddress().getStreet());
  Assert.assertNotNull(result.getAddress().getAddress());
  Assert.assertEquals(""String_Node_Str"",result.getAddress().getStreet());
  result.getAddress().setStreet(""String_Node_Str"");
  em.merge(result);
  em.clear();
  result=em.find(EmployeeInfo.class,1l);
  Assert.assertNotNull(result);
  Assert.assertNotNull(result.getAddress());
  Assert.assertNotNull(result.getAddress().getStreet());
  Assert.assertNotNull(result.getAddress().getAddress());
  Assert.assertEquals(""String_Node_Str"",result.getAddress().getStreet());
  em.remove(result);
  em.clear();
  result=em.find(EmployeeInfo.class,1l);
  Assert.assertNull(result);
}",0.9792494481236204
176489,"protected void getUserById(){
  twitter.createEntityManager();
  UserCassandra user1=twitter.findUserById(userId1);
  assertUser1(user1);
  UserCassandra user2=twitter.findUserById(userId2);
  assertUser2(user2);
  twitter.closeEntityManager();
}","protected void getUserById(){
  twitter.createEntityManager();
  UserCassandra user1=twitter.findUserById(userId1);
  assertUser1(user1);
  UserCassandra user2=twitter.findUserById(userId2);
  assertUser2(user2);
}",0.9304347826086956
176490,"/** 
 * @param node
 * @return
 */
protected List<RelationHolder> getRelationHolders(Node node){
  List<RelationHolder> relationsHolder=new ArrayList<RelationHolder>();
  Map<NodeLink,Node> parents=node.getParents();
  Map<NodeLink,Node> children=node.getChildren();
  if (parents != null && !parents.isEmpty()) {
    for (    NodeLink parentNodeLink : parents.keySet()) {
      String linkName=(String)parentNodeLink.getLinkProperty(LinkProperty.LINK_NAME);
      Object linkValue=parentNodeLink.getLinkProperty(LinkProperty.LINK_VALUE);
      boolean isSharedByPrimaryKey=(Boolean)parentNodeLink.getLinkProperty(LinkProperty.IS_SHARED_BY_PRIMARY_KEY);
      Relation.ForeignKey multiplicity=parentNodeLink.getMultiplicity();
      if (linkName != null && linkValue != null && !isSharedByPrimaryKey && multiplicity.equals(ForeignKey.ONE_TO_MANY)) {
        RelationHolder relationHolder=new RelationHolder(linkName,linkValue);
        relationsHolder.add(relationHolder);
      }
    }
  }
  if (children != null && !children.isEmpty()) {
    for (    NodeLink childNodeLink : children.keySet()) {
      String linkName=(String)childNodeLink.getLinkProperty(LinkProperty.LINK_NAME);
      Object linkValue=childNodeLink.getLinkProperty(LinkProperty.LINK_VALUE);
      boolean isSharedByPrimaryKey=(Boolean)childNodeLink.getLinkProperty(LinkProperty.IS_SHARED_BY_PRIMARY_KEY);
      Relation.ForeignKey multiplicity=childNodeLink.getMultiplicity();
      if (linkName != null && linkValue != null && !isSharedByPrimaryKey) {
        if (multiplicity.equals(ForeignKey.ONE_TO_ONE) || multiplicity.equals(ForeignKey.MANY_TO_ONE)) {
          RelationHolder relationHolder=new RelationHolder(linkName,linkValue);
          relationsHolder.add(relationHolder);
        }
 else         if (multiplicity.equals(ForeignKey.MANY_TO_MANY) && ((Field)childNodeLink.getLinkProperty(LinkProperty.PROPERTY)).getType().isAssignableFrom(Map.class)) {
          Object relationTo=((Node)children.get(childNodeLink)).getData();
          RelationHolder relationHolder=new RelationHolder(linkName,relationTo,linkValue);
          relationsHolder.add(relationHolder);
        }
      }
    }
  }
  return relationsHolder;
}","/** 
 * @param node
 * @return
 */
protected List<RelationHolder> getRelationHolders(Node node){
  List<RelationHolder> relationsHolder=new ArrayList<RelationHolder>();
  Map<NodeLink,Node> parents=node.getParents();
  Map<NodeLink,Node> children=node.getChildren();
  if (parents != null && !parents.isEmpty()) {
    for (    NodeLink parentNodeLink : parents.keySet()) {
      String linkName=(String)parentNodeLink.getLinkProperty(LinkProperty.LINK_NAME);
      Object linkValue=parentNodeLink.getLinkProperty(LinkProperty.LINK_VALUE) != null ? parentNodeLink.getLinkProperty(LinkProperty.LINK_VALUE) : parents.get(parentNodeLink).getEntityId();
      boolean isSharedByPrimaryKey=(Boolean)parentNodeLink.getLinkProperty(LinkProperty.IS_SHARED_BY_PRIMARY_KEY);
      Relation.ForeignKey multiplicity=parentNodeLink.getMultiplicity();
      if (linkName != null && linkValue != null && !isSharedByPrimaryKey && multiplicity.equals(ForeignKey.ONE_TO_MANY)) {
        RelationHolder relationHolder=new RelationHolder(linkName,linkValue);
        relationsHolder.add(relationHolder);
      }
    }
  }
  if (children != null && !children.isEmpty()) {
    for (    NodeLink childNodeLink : children.keySet()) {
      String linkName=(String)childNodeLink.getLinkProperty(LinkProperty.LINK_NAME);
      Object linkValue=childNodeLink.getLinkProperty(LinkProperty.LINK_VALUE) != null ? childNodeLink.getLinkProperty(LinkProperty.LINK_VALUE) : children.get(childNodeLink).getEntityId();
      boolean isSharedByPrimaryKey=(Boolean)childNodeLink.getLinkProperty(LinkProperty.IS_SHARED_BY_PRIMARY_KEY);
      Relation.ForeignKey multiplicity=childNodeLink.getMultiplicity();
      if (linkName != null && linkValue != null && !isSharedByPrimaryKey) {
        if (multiplicity.equals(ForeignKey.ONE_TO_ONE) || multiplicity.equals(ForeignKey.MANY_TO_ONE)) {
          RelationHolder relationHolder=new RelationHolder(linkName,linkValue);
          relationsHolder.add(relationHolder);
        }
 else         if (multiplicity.equals(ForeignKey.MANY_TO_MANY) && ((Field)childNodeLink.getLinkProperty(LinkProperty.PROPERTY)).getType().isAssignableFrom(Map.class)) {
          Object relationTo=((Node)children.get(childNodeLink)).getData();
          RelationHolder relationHolder=new RelationHolder(linkName,relationTo,linkValue);
          relationsHolder.add(relationHolder);
        }
      }
    }
  }
  return relationsHolder;
}",0.9526691160579208
176491,"@Override public void configure(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  EntityValidator validator=new EntityValidatorImpl(externalPropertyMap);
  for (  String persistenceUnit : persistenceUnits) {
    log.info(""String_Node_Str"" + persistenceUnit);
    List<TableInfo> tableInfos=getSchemaInfo(persistenceUnit);
    Map<String,EntityMetadata> entityMetadataMap=getEntityMetadataCol(appMetadata,persistenceUnit);
    PersistenceUnitMetadata puMetadata=appMetadata.getPersistenceUnitMetadata(persistenceUnit);
    if (externalPropertyMap != null && externalPropertyMap.get(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE) != null || puMetadata.getProperty(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE) != null)     for (    EntityMetadata entityMetadata : entityMetadataMap.values()) {
      boolean found=false;
      Type type=entityMetadata.getType();
      Class idClassName=entityMetadata.getIdAttribute() != null ? entityMetadata.getIdAttribute().getJavaType() : null;
      String idName=entityMetadata.getIdAttribute() != null ? ((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName() : null;
      TableInfo tableInfo=new TableInfo(entityMetadata.getTableName(),type.name(),idClassName,idName);
      if (!tableInfos.isEmpty() && tableInfos.contains(tableInfo)) {
        found=true;
        int idx=tableInfos.indexOf(tableInfo);
        tableInfo=tableInfos.get(idx);
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
 else {
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
      List<Relation> relations=entityMetadata.getRelations();
      parseRelations(persistenceUnit,tableInfos,entityMetadata,tableInfo,relations);
      if (!found) {
        tableInfos.add(tableInfo);
      }
      addTableGenerator(appMetadata,persistenceUnit,tableInfos,entityMetadata,idClassName,idName);
      validator.validateEntity(entityMetadata.getEntityClazz());
    }
    puToSchemaMetadata.put(persistenceUnit,tableInfos);
  }
  for (  String persistenceUnit : persistenceUnits) {
    SchemaManager schemaManager=getSchemaManagerForPu(persistenceUnit);
    if (schemaManager != null) {
      schemaManager.exportSchema(persistenceUnit,puToSchemaMetadata.get(persistenceUnit));
    }
  }
}","@Override public void configure(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  EntityValidator validator=new EntityValidatorImpl(externalPropertyMap);
  for (  String persistenceUnit : persistenceUnits) {
    log.info(""String_Node_Str"" + persistenceUnit);
    List<TableInfo> tableInfos=getSchemaInfo(persistenceUnit);
    Map<String,EntityMetadata> entityMetadataMap=getEntityMetadataCol(appMetadata,persistenceUnit);
    PersistenceUnitMetadata puMetadata=appMetadata.getPersistenceUnitMetadata(persistenceUnit);
    for (    EntityMetadata entityMetadata : entityMetadataMap.values()) {
      boolean found=false;
      Type type=entityMetadata.getType();
      Class idClassName=entityMetadata.getIdAttribute() != null ? entityMetadata.getIdAttribute().getJavaType() : null;
      String idName=entityMetadata.getIdAttribute() != null ? ((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName() : null;
      TableInfo tableInfo=new TableInfo(entityMetadata.getTableName(),type.name(),idClassName,idName);
      if (!tableInfos.isEmpty() && tableInfos.contains(tableInfo)) {
        found=true;
        int idx=tableInfos.indexOf(tableInfo);
        tableInfo=tableInfos.get(idx);
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
 else {
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
      List<Relation> relations=entityMetadata.getRelations();
      parseRelations(persistenceUnit,tableInfos,entityMetadata,tableInfo,relations);
      if (!found) {
        tableInfos.add(tableInfo);
      }
      addTableGenerator(appMetadata,persistenceUnit,tableInfos,entityMetadata,idClassName,idName);
      validator.validateEntity(entityMetadata.getEntityClazz());
    }
    puToSchemaMetadata.put(persistenceUnit,tableInfos);
  }
  for (  String persistenceUnit : persistenceUnits) {
    PersistenceUnitMetadata puMetadata=appMetadata.getPersistenceUnitMetadata(persistenceUnit);
    if (externalPropertyMap != null && externalPropertyMap.get(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE) != null || puMetadata.getProperty(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE) != null) {
      SchemaManager schemaManager=getSchemaManagerForPu(persistenceUnit);
      if (schemaManager != null) {
        schemaManager.exportSchema(persistenceUnit,puToSchemaMetadata.get(persistenceUnit));
      }
    }
  }
}",0.3442692799318279
176492,"void clear(){
  flushManager.clearFlushStack();
  getPersistenceCache().clean();
}","void clear(){
  flushManager.clearFlushStack();
  getPersistenceCache().clean();
  KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().clearProxies();
}",0.6482213438735178
176493,"/** 
 * @param < E >
 * @param entityMetadata
 * @param e
 */
private <E>void setProxyOwners(EntityMetadata entityMetadata,E e){
  Object entityId=PropertyAccessorHelper.getId(e,entityMetadata);
  for (  Relation r : entityMetadata.getRelations()) {
    if (r.isUnary()) {
      String entityName=entityMetadata.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ r.getProperty().getName();
      KunderaProxy kunderaProxy=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy(entityName);
      if (kunderaProxy != null) {
        kunderaProxy.getKunderaLazyInitializer().setOwner(e);
      }
    }
  }
}","/** 
 * @param < E >
 * @param entityMetadata
 * @param e
 */
public <E>void setProxyOwners(EntityMetadata entityMetadata,E e){
  Object entityId=PropertyAccessorHelper.getId(e,entityMetadata);
  for (  Relation r : entityMetadata.getRelations()) {
    if (r.isUnary()) {
      String entityName=entityMetadata.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ r.getProperty().getName();
      KunderaProxy kunderaProxy=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy(entityName);
      if (kunderaProxy != null) {
        kunderaProxy.getKunderaLazyInitializer().setOwner(e);
      }
    }
  }
}",0.9916222391469915
176494,"@Override protected Client instantiateClient(String persistenceUnit){
  return new CoreTestClient();
}","@Override protected Client instantiateClient(String persistenceUnit){
  return new CoreTestClient(indexManager,persistenceUnit);
}",0.8793103448275862
176495,"protected void executeAllTests(){
  insert();
  find();
  update();
  remove();
}","protected void executeAllTests(){
  insert();
  find();
  findPersonByIdColumn();
  findPersonByName();
  findAddressByIdColumn();
  update();
  remove();
}",0.6835443037974683
176496,"@Test public void testSingleEntityCRUD_EmCleared(){
  final SampleEntity entity=new SampleEntity();
  entity.setKey(1);
  entity.setName(""String_Node_Str"");
  entity.setCity(""String_Node_Str"");
  em.persist(entity);
  em.clear();
  SampleEntity found=em.find(SampleEntity.class,1);
  assertSampleEntity(found);
  found.setName(""String_Node_Str"");
  found.setCity(""String_Node_Str"");
  em.clear();
  em.merge(found);
  SampleEntity foundAfterMerge=em.find(SampleEntity.class,1);
  assertUpdatedSampleEntity(foundAfterMerge);
  em.clear();
  em.remove(foundAfterMerge);
  SampleEntity foundAfterDeletion=em.find(SampleEntity.class,1);
  Assert.assertNull(foundAfterDeletion);
}","@Test public void testSingleEntityCRUD_EmCleared(){
  final SampleEntity entity=new SampleEntity();
  entity.setKey(1);
  entity.setName(""String_Node_Str"");
  entity.setCity(""String_Node_Str"");
  em.persist(entity);
  Assert.assertTrue(em.contains(entity));
  em.clear();
  Assert.assertFalse(em.contains(entity));
  SampleEntity found=em.find(SampleEntity.class,1,new HashMap<String,Object>());
  assertSampleEntity(found);
  found.setName(""String_Node_Str"");
  found.setCity(""String_Node_Str"");
  em.clear();
  em.merge(found);
  SampleEntity foundAfterMerge=em.find(SampleEntity.class,1);
  assertUpdatedSampleEntity(foundAfterMerge);
  SampleEntity se=(SampleEntity)DummyDatabase.INSTANCE.getSchema(""String_Node_Str"").getTable(""String_Node_Str"").getRecord(new Integer(1));
  se.setCity(""String_Node_Str"");
  em.refresh(foundAfterMerge);
  SampleEntity found2=em.find(SampleEntity.class,1);
  Assert.assertEquals(""String_Node_Str"",found2.getCity());
  em.detach(foundAfterMerge);
  em.clear();
  found=em.find(SampleEntity.class,1);
  em.clear();
  em.remove(found);
  SampleEntity foundAfterDeletion=em.find(SampleEntity.class,1);
  Assert.assertNull(foundAfterDeletion);
}",0.6695464362850972
176497,"@Test public void testSingleEntityCRUD_EmNotCleared(){
  final SampleEntity entity=new SampleEntity();
  entity.setKey(1);
  entity.setName(""String_Node_Str"");
  entity.setCity(""String_Node_Str"");
  em.persist(entity);
  SampleEntity found=em.find(SampleEntity.class,1);
  assertSampleEntity(found);
  found.setName(""String_Node_Str"");
  found.setCity(""String_Node_Str"");
  em.merge(found);
  SampleEntity foundAfterMerge=em.find(SampleEntity.class,1);
  assertUpdatedSampleEntity(foundAfterMerge);
  em.remove(foundAfterMerge);
  SampleEntity foundAfterDeletion=em.find(SampleEntity.class,1);
  Assert.assertNull(foundAfterDeletion);
}","@Test public void testSingleEntityCRUD_EmNotCleared(){
  final SampleEntity entity=new SampleEntity();
  entity.setKey(1);
  entity.setName(""String_Node_Str"");
  entity.setCity(""String_Node_Str"");
  em.persist(entity);
  SampleEntity found=em.find(SampleEntity.class,1);
  assertSampleEntity(found);
  Assert.assertTrue(em.contains(found));
  found.setName(""String_Node_Str"");
  found.setCity(""String_Node_Str"");
  em.merge(found);
  SampleEntity foundAfterMerge=em.find(SampleEntity.class,1);
  assertUpdatedSampleEntity(foundAfterMerge);
  em.flush();
  em.remove(foundAfterMerge);
  SampleEntity foundAfterDeletion=em.find(SampleEntity.class,1);
  Assert.assertNull(foundAfterDeletion);
}",0.958553127354936
176498,"@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders){
  DummySchema schema=DummyDatabase.INSTANCE.getSchema(entityMetadata.getSchema());
  DummyTable table=new DummyTable();
  table.addRecord(id,entity);
  if (schema == null) {
    schema=new DummySchema();
    schema.addTable(entityMetadata.getTableName(),table);
    DummyDatabase.INSTANCE.addSchema(entityMetadata.getSchema(),schema);
  }
 else {
    schema.addTable(entityMetadata.getTableName(),table);
  }
}","@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders){
  DummySchema schema=DummyDatabase.INSTANCE.getSchema(entityMetadata.getSchema());
  if (schema == null) {
    schema=new DummySchema();
    DummyTable table=new DummyTable();
    table.addRecord(id,entity);
    schema.addTable(entityMetadata.getTableName(),table);
    DummyDatabase.INSTANCE.addSchema(entityMetadata.getSchema(),schema);
  }
 else {
    DummyTable table=schema.getTable(entityMetadata.getTableName());
    if (table == null) {
      table=new DummyTable();
    }
    table.addRecord(id,entity);
    schema.addTable(entityMetadata.getTableName(),table);
  }
}",0.7056910569105691
176499,"/** 
 * @param entity
 * @param relationsMap
 * @param m
 * @param pd
 * @param entityId
 * @param relation
 */
public void setProxyRelationObject(Object entity,Map<String,Object> relationsMap,EntityMetadata m,PersistenceDelegator pd,Object entityId,Relation relation){
  String relationName=MetadataUtils.getMappedName(m,relation);
  Object relationValue=relationsMap != null ? relationsMap.get(relationName) : null;
  if ((relation.getType().equals(ForeignKey.ONE_TO_ONE) || relation.getType().equals(ForeignKey.MANY_TO_ONE))) {
    Field biDirectionalField=getBiDirectionalField(entity.getClass(),relation.getTargetEntity());
    boolean isBidirectionalRelation=(biDirectionalField != null);
    if (isBidirectionalRelation && relationValue == null) {
      EntityMetadata parentEntityMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
      Object owner=null;
      KunderaProxy kp=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy();
      if (kp != null) {
        owner=kp.getKunderaLazyInitializer().getOwner();
        if (owner != null && owner.getClass().equals(parentEntityMetadata.getEntityClazz())) {
          relationValue=PropertyAccessorHelper.getId(owner,parentEntityMetadata);
        }
        if (relationValue != null) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + parentEntityMetadata.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
          }
          String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
          Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),parentEntityMetadata.getReadIdentifierMethod(),parentEntityMetadata.getWriteIdentifierMethod(),relationValue,pd);
          PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
        }
      }
    }
 else     if (relationValue != null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + m.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
      }
      String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
      Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),m.getReadIdentifierMethod(),m.getWriteIdentifierMethod(),relationValue,pd);
      PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
    }
  }
 else   if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
    ProxyCollection proxyCollection=null;
    if (relation.getPropertyType().isAssignableFrom(Set.class)) {
      proxyCollection=new ProxySet(pd,relation);
    }
 else     if (relation.getPropertyType().isAssignableFrom(List.class)) {
      proxyCollection=new ProxyList(pd,relation);
    }
 else     if (relation.getPropertyType().isAssignableFrom(Map.class)) {
      proxyCollection=new ProxyMap(pd,relation);
    }
    proxyCollection.setOwner(entity);
    proxyCollection.setRelationsMap(relationsMap);
    PropertyAccessorHelper.set(entity,relation.getProperty(),proxyCollection);
  }
}","/** 
 * @param entity
 * @param relationsMap
 * @param m
 * @param pd
 * @param entityId
 * @param relation
 */
public void setProxyRelationObject(Object entity,Map<String,Object> relationsMap,EntityMetadata m,PersistenceDelegator pd,Object entityId,Relation relation){
  String relationName=MetadataUtils.getMappedName(m,relation);
  Object relationValue=relationsMap != null ? relationsMap.get(relationName) : null;
  if ((relation.getType().equals(ForeignKey.ONE_TO_ONE) || relation.getType().equals(ForeignKey.MANY_TO_ONE))) {
    Field biDirectionalField=getBiDirectionalField(entity.getClass(),relation.getTargetEntity());
    boolean isBidirectionalRelation=(biDirectionalField != null);
    if (isBidirectionalRelation && relationValue == null) {
      EntityMetadata parentEntityMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
      Object owner=null;
      String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
      KunderaProxy kp=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy(entityName);
      if (kp != null) {
        owner=kp.getKunderaLazyInitializer().getOwner();
        if (owner != null && owner.getClass().equals(parentEntityMetadata.getEntityClazz())) {
          relationValue=PropertyAccessorHelper.getId(owner,parentEntityMetadata);
        }
        if (relationValue != null) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + parentEntityMetadata.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
          }
          Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),parentEntityMetadata.getReadIdentifierMethod(),parentEntityMetadata.getWriteIdentifierMethod(),relationValue,pd);
          PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
        }
      }
    }
 else     if (relationValue != null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + m.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
      }
      String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
      Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),m.getReadIdentifierMethod(),m.getWriteIdentifierMethod(),relationValue,pd);
      PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
    }
  }
 else   if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
    ProxyCollection proxyCollection=null;
    if (relation.getPropertyType().isAssignableFrom(Set.class)) {
      proxyCollection=new ProxySet(pd,relation);
    }
 else     if (relation.getPropertyType().isAssignableFrom(List.class)) {
      proxyCollection=new ProxyList(pd,relation);
    }
 else     if (relation.getPropertyType().isAssignableFrom(Map.class)) {
      proxyCollection=new ProxyMap(pd,relation);
    }
    proxyCollection.setOwner(entity);
    proxyCollection.setRelationsMap(relationsMap);
    PropertyAccessorHelper.set(entity,relation.getProperty(),proxyCollection);
  }
}",0.9557926829268292
176500,"/** 
 * Close.
 */
void close(){
  doFlush();
  eventDispatcher=null;
  if (clientMap != null && !clientMap.isEmpty()) {
    for (    Client client : clientMap.values()) {
      client.close();
    }
    clientMap.clear();
    clientMap=null;
  }
  closed=true;
}","/** 
 * Close.
 */
void close(){
  doFlush();
  eventDispatcher=null;
  if (clientMap != null && !clientMap.isEmpty()) {
    for (    Client client : clientMap.values()) {
      client.close();
    }
    clientMap.clear();
    clientMap=null;
  }
  KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().clearProxies();
  closed=true;
}",0.8552845528455284
176501,"/** 
 * @param < E >
 * @param entityMetadata
 * @param e
 */
private <E>void setProxyOwners(EntityMetadata entityMetadata,E e){
  KunderaProxy kunderaProxy=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy();
  if (kunderaProxy != null) {
    kunderaProxy.getKunderaLazyInitializer().setOwner(e);
  }
}","/** 
 * @param < E >
 * @param entityMetadata
 * @param e
 */
private <E>void setProxyOwners(EntityMetadata entityMetadata,E e){
  Object entityId=PropertyAccessorHelper.getId(e,entityMetadata);
  for (  Relation r : entityMetadata.getRelations()) {
    String entityName=entityMetadata.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ r.getProperty().getName();
    KunderaProxy kunderaProxy=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy(entityName);
    if (kunderaProxy != null) {
      kunderaProxy.getKunderaLazyInitializer().setOwner(e);
    }
  }
}",0.7003154574132492
176502,KunderaProxy getProxy();,"/** 
 * Returns proxy instance for a given entity name, null if none exists
 * @param entityName
 * @return
 */
KunderaProxy getProxy(String entityName);",0.2711864406779661
176503,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  if (constructed) {
    String methodName=method.getName();
    int params=args.length;
    if (params == 0) {
      if (isUninitialized() && method.equals(getIdentifierMethod)) {
        return getIdentifier();
      }
 else       if (""String_Node_Str"".equals(methodName)) {
        return this;
      }
    }
    Object target=getImplementation();
    String[] strArr=entityName.split(""String_Node_Str"");
    String fieldName=strArr[1];
    if (owner != null) {
      EntityMetadata m=KunderaMetadataManager.getEntityMetadata(owner.getClass());
      Relation r=m.getRelation(fieldName);
      PropertyAccessorHelper.set(owner,r.getProperty(),target);
    }
    try {
      final Object returnValue;
      if (method.isAccessible()) {
        if (!method.getDeclaringClass().isInstance(target)) {
          throw new ClassCastException(target.getClass().getName());
        }
        returnValue=method.invoke(target,args);
      }
 else {
        if (!method.isAccessible()) {
          method.setAccessible(true);
        }
        returnValue=method.invoke(target,args);
      }
      return ((returnValue == target) ? proxy : returnValue);
    }
 catch (    InvocationTargetException ite) {
      throw new LazyInitializationException(ite);
    }
  }
 else {
    throw new LazyInitializationException(""String_Node_Str"" + method.getName());
  }
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  if (constructed) {
    String methodName=method.getName();
    int params=args.length;
    if (params == 0) {
      if (isUninitialized() && method.equals(getIdentifierMethod)) {
        return getIdentifier();
      }
 else       if (""String_Node_Str"".equals(methodName)) {
        return this;
      }
    }
    Object target=getImplementation();
    String[] strArr=entityName.split(""String_Node_Str"");
    String fieldName=strArr[1];
    if (owner != null) {
      EntityMetadata m=KunderaMetadataManager.getEntityMetadata(owner.getClass());
      Relation r=m.getRelation(fieldName);
      PropertyAccessorHelper.set(owner,r.getProperty(),target);
      if (r.getBiDirectionalField() != null && method.getReturnType().equals(m.getEntityClazz())) {
        PropertyAccessorHelper.set(target,r.getBiDirectionalField(),owner);
      }
      proxy=target;
    }
    try {
      final Object returnValue;
      if (method.isAccessible()) {
        if (!method.getDeclaringClass().isInstance(target)) {
          throw new ClassCastException(target.getClass().getName());
        }
        returnValue=method.invoke(target,args);
      }
 else {
        if (!method.isAccessible()) {
          method.setAccessible(true);
        }
        returnValue=method.invoke(target,args);
      }
      return ((returnValue == target) ? proxy : returnValue);
    }
 catch (    InvocationTargetException ite) {
      throw new LazyInitializationException(ite);
    }
  }
 else {
    throw new LazyInitializationException(""String_Node_Str"" + method.getName());
  }
}",0.9340232858990944
176504,"@Override public KunderaProxy getProxy(){
  return kunderaProxy;
}","@Override public KunderaProxy getProxy(String entityName){
  return proxies.get(entityName);
}",0.725
176505,"@After public void tearDown(){
  if (em != null)   em.close();
  if (emf != null)   emf.close();
}","@After public void tearDown(){
  if (em != null)   em.close();
  if (emf != null)   emf.close();
  dropDatabase();
}",0.9158878504672896
176506,"public static Node buildStoreNode(PersistenceCache pc){
  Store store=new Store();
  BillingCounter b1=new BillingCounter();
  BillingCounter b2=new BillingCounter();
  BillingCounter b3=new BillingCounter();
  String storeId=ObjectGraphUtils.getNodeId(""String_Node_Str"",store.getClass());
  String b1Id=ObjectGraphUtils.getNodeId(""String_Node_Str"",b1.getClass());
  String b2Id=ObjectGraphUtils.getNodeId(""String_Node_Str"",b2.getClass());
  String b3Id=ObjectGraphUtils.getNodeId(""String_Node_Str"",b3.getClass());
  Node headNode=new Node(storeId,store,null,pc,""String_Node_Str"");
  Node child1=new Node(b1Id,b1,null,pc,""String_Node_Str"");
  Node child2=new Node(b2Id,b2,null,pc,""String_Node_Str"");
  Node child3=new Node(b3Id,b3,null,pc,""String_Node_Str"");
  NodeLink linkB1=new NodeLink(storeId,b1Id);
  NodeLink linkB2=new NodeLink(storeId,b2Id);
  NodeLink linkB3=new NodeLink(storeId,b3Id);
  List<CascadeType> cascadeTypes=new ArrayList<CascadeType>();
  cascadeTypes.add(CascadeType.PERSIST);
  linkB1.addLinkProperty(LinkProperty.LINK_NAME,""String_Node_Str"");
  linkB1.addLinkProperty(LinkProperty.CASCADE,cascadeTypes);
  linkB2.addLinkProperty(LinkProperty.LINK_NAME,""String_Node_Str"");
  linkB2.addLinkProperty(LinkProperty.CASCADE,cascadeTypes);
  linkB3.addLinkProperty(LinkProperty.LINK_NAME,""String_Node_Str"");
  linkB3.addLinkProperty(LinkProperty.CASCADE,cascadeTypes);
  headNode.addChildNode(linkB1,child1);
  headNode.addChildNode(linkB2,child2);
  headNode.addChildNode(linkB3,child3);
  child1.addParentNode(linkB1,headNode);
  child2.addParentNode(linkB2,headNode);
  child3.addParentNode(linkB3,headNode);
  return headNode;
}","public static Node buildStoreNode(PersistenceCache pc,NodeState initialState,CascadeType cascadeType){
  Store store=new Store();
  BillingCounter b1=new BillingCounter();
  BillingCounter b2=new BillingCounter();
  BillingCounter b3=new BillingCounter();
  String storeId=ObjectGraphUtils.getNodeId(""String_Node_Str"",store.getClass());
  String b1Id=ObjectGraphUtils.getNodeId(""String_Node_Str"",b1.getClass());
  String b2Id=ObjectGraphUtils.getNodeId(""String_Node_Str"",b2.getClass());
  String b3Id=ObjectGraphUtils.getNodeId(""String_Node_Str"",b3.getClass());
  Node headNode=new Node(storeId,store,initialState,pc,""String_Node_Str"");
  Node child1=new Node(b1Id,b1,initialState,pc,""String_Node_Str"");
  Node child2=new Node(b2Id,b2,initialState,pc,""String_Node_Str"");
  Node child3=new Node(b3Id,b3,initialState,pc,""String_Node_Str"");
  NodeLink linkB1=new NodeLink(storeId,b1Id);
  NodeLink linkB2=new NodeLink(storeId,b2Id);
  NodeLink linkB3=new NodeLink(storeId,b3Id);
  List<CascadeType> cascadeTypes=new ArrayList<CascadeType>();
  cascadeTypes.add(cascadeType);
  linkB1.addLinkProperty(LinkProperty.LINK_NAME,""String_Node_Str"");
  linkB1.addLinkProperty(LinkProperty.CASCADE,cascadeTypes);
  linkB2.addLinkProperty(LinkProperty.LINK_NAME,""String_Node_Str"");
  linkB2.addLinkProperty(LinkProperty.CASCADE,cascadeTypes);
  linkB3.addLinkProperty(LinkProperty.LINK_NAME,""String_Node_Str"");
  linkB3.addLinkProperty(LinkProperty.CASCADE,cascadeTypes);
  headNode.addChildNode(linkB1,child1);
  headNode.addChildNode(linkB2,child2);
  headNode.addChildNode(linkB3,child3);
  child1.addParentNode(linkB1,headNode);
  child2.addParentNode(linkB2,headNode);
  child3.addParentNode(linkB3,headNode);
  return headNode;
}",0.9641268900088942
176507,"/** 
 * Test method for   {@link com.impetus.kundera.lifecycle.states.NodeState#recursivelyPerformOperation(com.impetus.kundera.lifecycle.NodeStateContext,com.impetus.kundera.lifecycle.states.NodeState.OPERATION)}.
 */
@Test public void testRecursivelyPerformOperation(){
  Node storeNode=StoreBuilder.buildStoreNode(pc);
  NodeState state=new TransientState();
  state.recursivelyPerformOperation(storeNode,OPERATION.PERSIST);
  Assert.assertEquals(TransientState.class,storeNode.getCurrentNodeState().getClass());
  for (  Node childNode : storeNode.getChildren().values()) {
    Assert.assertEquals(BillingCounter.class,childNode.getDataClass());
    Assert.assertEquals(ManagedState.class,childNode.getCurrentNodeState().getClass());
  }
}","/** 
 * Test method for   {@link com.impetus.kundera.lifecycle.states.NodeState#recursivelyPerformOperation(com.impetus.kundera.lifecycle.NodeStateContext,com.impetus.kundera.lifecycle.states.NodeState.OPERATION)}.
 */
@Test public void testRecursivelyPerformOperation(){
  NodeState state=new TransientState();
  Node storeNode=StoreBuilder.buildStoreNode(pc,state,CascadeType.PERSIST);
  state.recursivelyPerformOperation(storeNode,OPERATION.PERSIST);
  Assert.assertEquals(TransientState.class,storeNode.getCurrentNodeState().getClass());
  for (  Node childNode : storeNode.getChildren().values()) {
    Assert.assertEquals(BillingCounter.class,childNode.getDataClass());
    Assert.assertEquals(ManagedState.class,childNode.getCurrentNodeState().getClass());
  }
  state=new DetachedState();
  storeNode=StoreBuilder.buildStoreNode(pc,state,CascadeType.MERGE);
  state.recursivelyPerformOperation(storeNode,OPERATION.MERGE);
  Assert.assertEquals(DetachedState.class,storeNode.getCurrentNodeState().getClass());
  for (  Node childNode : storeNode.getChildren().values()) {
    Assert.assertEquals(BillingCounter.class,childNode.getDataClass());
    Assert.assertEquals(ManagedState.class,childNode.getCurrentNodeState().getClass());
  }
  state=new ManagedState();
  storeNode=StoreBuilder.buildStoreNode(pc,state,CascadeType.REMOVE);
  state.recursivelyPerformOperation(storeNode,OPERATION.REMOVE);
  Assert.assertEquals(ManagedState.class,storeNode.getCurrentNodeState().getClass());
  for (  Node childNode : storeNode.getChildren().values()) {
    Assert.assertEquals(BillingCounter.class,childNode.getDataClass());
    Assert.assertEquals(RemovedState.class,childNode.getCurrentNodeState().getClass());
  }
  state=new DetachedState();
  storeNode=StoreBuilder.buildStoreNode(pc,state,CascadeType.REFRESH);
  try {
    state.recursivelyPerformOperation(storeNode,OPERATION.REFRESH);
    Assert.fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    Assert.assertEquals(IllegalArgumentException.class,e.getClass());
  }
  state=new ManagedState();
  storeNode=StoreBuilder.buildStoreNode(pc,state,CascadeType.DETACH);
  state.recursivelyPerformOperation(storeNode,OPERATION.DETACH);
  Assert.assertEquals(ManagedState.class,storeNode.getCurrentNodeState().getClass());
  for (  Node childNode : storeNode.getChildren().values()) {
    Assert.assertEquals(BillingCounter.class,childNode.getDataClass());
    Assert.assertEquals(DetachedState.class,childNode.getCurrentNodeState().getClass());
  }
}",0.4272978788810329
176508,"@After public void tearDown(){
  if (em != null)   em.close();
  if (emf != null)   emf.close();
}","@After public void tearDown(){
  if (em != null)   em.close();
  if (emf != null)   emf.close();
  dropDatabase();
}",0.9158878504672896
176509,"/** 
 * @param entity
 * @param relationsMap
 * @param m
 * @param pd
 * @param entityId
 * @param relation
 */
public void setProxyRelationObject(Object entity,Map<String,Object> relationsMap,EntityMetadata m,PersistenceDelegator pd,Object entityId,Relation relation){
  String relationName=MetadataUtils.getMappedName(m,relation);
  Object relationValue=relationsMap != null ? relationsMap.get(relationName) : null;
  if ((relation.getType().equals(ForeignKey.ONE_TO_ONE) || relation.getType().equals(ForeignKey.MANY_TO_ONE))) {
    Field biDirectionalField=getBiDirectionalField(entity.getClass(),relation.getTargetEntity());
    boolean isBidirectionalRelation=(biDirectionalField != null);
    if (isBidirectionalRelation && relationValue == null) {
      EntityMetadata parentEntityMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
      Object owner=null;
      KunderaProxy kp=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy();
      if (kp != null) {
        owner=kp.getKunderaLazyInitializer().getOwner();
        if (owner != null && owner.getClass().equals(parentEntityMetadata.getEntityClazz())) {
          relationValue=PropertyAccessorHelper.getId(owner,parentEntityMetadata);
        }
        if (relationValue != null) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + parentEntityMetadata.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
          }
          String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
          Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),parentEntityMetadata.getReadIdentifierMethod(),parentEntityMetadata.getWriteIdentifierMethod(),relationValue,pd);
          PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
        }
      }
    }
 else     if (relationValue != null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + m.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
      }
      String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
      Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),m.getReadIdentifierMethod(),m.getWriteIdentifierMethod(),relationValue,pd);
      PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
    }
  }
 else   if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
    ProxyCollection proxyCollection=null;
    if (relation.getPropertyType().isAssignableFrom(Set.class)) {
      proxyCollection=new ProxySet(pd,relation);
    }
 else     if (relation.getPropertyType().isAssignableFrom(List.class)) {
      proxyCollection=new ProxyList(pd,relation);
    }
 else     if (relation.getPropertyType().isAssignableFrom(Map.class)) {
      proxyCollection=new ProxyMap(pd,relation);
    }
    proxyCollection.setOwner(entity);
    proxyCollection.setRelationsMap(relationsMap);
    PropertyAccessorHelper.set(entity,relation.getProperty(),proxyCollection);
  }
}","/** 
 * @param entity
 * @param relationsMap
 * @param m
 * @param pd
 * @param entityId
 * @param relation
 */
public void setProxyRelationObject(Object entity,Map<String,Object> relationsMap,EntityMetadata m,PersistenceDelegator pd,Object entityId,Relation relation){
  String relationName=MetadataUtils.getMappedName(m,relation);
  Object relationValue=relationsMap != null ? relationsMap.get(relationName) : null;
  if ((relation.getType().equals(ForeignKey.ONE_TO_ONE) || relation.getType().equals(ForeignKey.MANY_TO_ONE))) {
    Field biDirectionalField=getBiDirectionalField(entity.getClass(),relation.getTargetEntity());
    boolean isBidirectionalRelation=(biDirectionalField != null);
    if (isBidirectionalRelation && relationValue == null) {
      EntityMetadata parentEntityMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
      Object owner=null;
      String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
      KunderaProxy kp=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy(entityName);
      if (kp != null) {
        owner=kp.getKunderaLazyInitializer().getOwner();
        if (owner != null && owner.getClass().equals(parentEntityMetadata.getEntityClazz())) {
          relationValue=PropertyAccessorHelper.getId(owner,parentEntityMetadata);
        }
        if (relationValue != null) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + parentEntityMetadata.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
          }
          Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),parentEntityMetadata.getReadIdentifierMethod(),parentEntityMetadata.getWriteIdentifierMethod(),relationValue,pd);
          PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
        }
      }
    }
 else     if (relationValue != null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + m.getEntityClazz().getName() + ""String_Node_Str""+ relation.getProperty().getName()+ ""String_Node_Str""+ relationValue);
      }
      String entityName=m.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
      Object proxy=getLazyEntity(entityName,relation.getTargetEntity(),m.getReadIdentifierMethod(),m.getWriteIdentifierMethod(),relationValue,pd);
      PropertyAccessorHelper.set(entity,relation.getProperty(),proxy);
    }
  }
 else   if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
    ProxyCollection proxyCollection=null;
    if (relation.getPropertyType().isAssignableFrom(Set.class)) {
      proxyCollection=new ProxySet(pd,relation);
    }
 else     if (relation.getPropertyType().isAssignableFrom(List.class)) {
      proxyCollection=new ProxyList(pd,relation);
    }
 else     if (relation.getPropertyType().isAssignableFrom(Map.class)) {
      proxyCollection=new ProxyMap(pd,relation);
    }
    proxyCollection.setOwner(entity);
    proxyCollection.setRelationsMap(relationsMap);
    PropertyAccessorHelper.set(entity,relation.getProperty(),proxyCollection);
  }
}",0.9557926829268292
176510,"/** 
 * Close.
 */
void close(){
  doFlush();
  eventDispatcher=null;
  if (clientMap != null && !clientMap.isEmpty()) {
    for (    Client client : clientMap.values()) {
      client.close();
    }
    clientMap.clear();
    clientMap=null;
  }
  closed=true;
}","/** 
 * Close.
 */
void close(){
  doFlush();
  eventDispatcher=null;
  if (clientMap != null && !clientMap.isEmpty()) {
    for (    Client client : clientMap.values()) {
      client.close();
    }
    clientMap.clear();
    clientMap=null;
  }
  KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().clearProxies();
  closed=true;
}",0.8552845528455284
176511,"/** 
 * @param < E >
 * @param entityMetadata
 * @param e
 */
private <E>void setProxyOwners(EntityMetadata entityMetadata,E e){
  KunderaProxy kunderaProxy=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy();
  if (kunderaProxy != null) {
    kunderaProxy.getKunderaLazyInitializer().setOwner(e);
  }
}","/** 
 * @param < E >
 * @param entityMetadata
 * @param e
 */
private <E>void setProxyOwners(EntityMetadata entityMetadata,E e){
  Object entityId=PropertyAccessorHelper.getId(e,entityMetadata);
  for (  Relation r : entityMetadata.getRelations()) {
    String entityName=entityMetadata.getEntityClazz().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ r.getProperty().getName();
    KunderaProxy kunderaProxy=KunderaMetadata.INSTANCE.getCoreMetadata().getLazyInitializerFactory().getProxy(entityName);
    if (kunderaProxy != null) {
      kunderaProxy.getKunderaLazyInitializer().setOwner(e);
    }
  }
}",0.7003154574132492
176512,KunderaProxy getProxy();,"/** 
 * Returns proxy instance for a given entity name, null if none exists
 * @param entityName
 * @return
 */
KunderaProxy getProxy(String entityName);",0.2711864406779661
176513,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  if (constructed) {
    String methodName=method.getName();
    int params=args.length;
    if (params == 0) {
      if (isUninitialized() && method.equals(getIdentifierMethod)) {
        return getIdentifier();
      }
 else       if (""String_Node_Str"".equals(methodName)) {
        return this;
      }
    }
    Object target=getImplementation();
    String[] strArr=entityName.split(""String_Node_Str"");
    String fieldName=strArr[1];
    if (owner != null) {
      EntityMetadata m=KunderaMetadataManager.getEntityMetadata(owner.getClass());
      Relation r=m.getRelation(fieldName);
      PropertyAccessorHelper.set(owner,r.getProperty(),target);
    }
    try {
      final Object returnValue;
      if (method.isAccessible()) {
        if (!method.getDeclaringClass().isInstance(target)) {
          throw new ClassCastException(target.getClass().getName());
        }
        returnValue=method.invoke(target,args);
      }
 else {
        if (!method.isAccessible()) {
          method.setAccessible(true);
        }
        returnValue=method.invoke(target,args);
      }
      return ((returnValue == target) ? proxy : returnValue);
    }
 catch (    InvocationTargetException ite) {
      throw new LazyInitializationException(ite);
    }
  }
 else {
    throw new LazyInitializationException(""String_Node_Str"" + method.getName());
  }
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  if (constructed) {
    String methodName=method.getName();
    int params=args.length;
    if (params == 0) {
      if (isUninitialized() && method.equals(getIdentifierMethod)) {
        return getIdentifier();
      }
 else       if (""String_Node_Str"".equals(methodName)) {
        return this;
      }
    }
    Object target=getImplementation();
    String[] strArr=entityName.split(""String_Node_Str"");
    String fieldName=strArr[1];
    if (owner != null) {
      EntityMetadata m=KunderaMetadataManager.getEntityMetadata(owner.getClass());
      Relation r=m.getRelation(fieldName);
      PropertyAccessorHelper.set(owner,r.getProperty(),target);
      if (r.getBiDirectionalField() != null && method.getReturnType().equals(m.getEntityClazz())) {
        PropertyAccessorHelper.set(target,r.getBiDirectionalField(),owner);
      }
      proxy=target;
    }
    try {
      final Object returnValue;
      if (method.isAccessible()) {
        if (!method.getDeclaringClass().isInstance(target)) {
          throw new ClassCastException(target.getClass().getName());
        }
        returnValue=method.invoke(target,args);
      }
 else {
        if (!method.isAccessible()) {
          method.setAccessible(true);
        }
        returnValue=method.invoke(target,args);
      }
      return ((returnValue == target) ? proxy : returnValue);
    }
 catch (    InvocationTargetException ite) {
      throw new LazyInitializationException(ite);
    }
  }
 else {
    throw new LazyInitializationException(""String_Node_Str"" + method.getName());
  }
}",0.9340232858990944
176514,"@Override public KunderaProxy getProxy(){
  return kunderaProxy;
}","@Override public KunderaProxy getProxy(String entityName){
  return proxies.get(entityName);
}",0.725
176515,"public static Node buildStoreNode(PersistenceCache pc){
  Store store=new Store();
  BillingCounter b1=new BillingCounter();
  BillingCounter b2=new BillingCounter();
  BillingCounter b3=new BillingCounter();
  String storeId=ObjectGraphUtils.getNodeId(""String_Node_Str"",store.getClass());
  String b1Id=ObjectGraphUtils.getNodeId(""String_Node_Str"",b1.getClass());
  String b2Id=ObjectGraphUtils.getNodeId(""String_Node_Str"",b2.getClass());
  String b3Id=ObjectGraphUtils.getNodeId(""String_Node_Str"",b3.getClass());
  Node headNode=new Node(storeId,store,null,pc,""String_Node_Str"");
  Node child1=new Node(b1Id,b1,null,pc,""String_Node_Str"");
  Node child2=new Node(b2Id,b2,null,pc,""String_Node_Str"");
  Node child3=new Node(b3Id,b3,null,pc,""String_Node_Str"");
  NodeLink linkB1=new NodeLink(storeId,b1Id);
  NodeLink linkB2=new NodeLink(storeId,b2Id);
  NodeLink linkB3=new NodeLink(storeId,b3Id);
  List<CascadeType> cascadeTypes=new ArrayList<CascadeType>();
  cascadeTypes.add(CascadeType.PERSIST);
  linkB1.addLinkProperty(LinkProperty.LINK_NAME,""String_Node_Str"");
  linkB1.addLinkProperty(LinkProperty.CASCADE,cascadeTypes);
  linkB2.addLinkProperty(LinkProperty.LINK_NAME,""String_Node_Str"");
  linkB2.addLinkProperty(LinkProperty.CASCADE,cascadeTypes);
  linkB3.addLinkProperty(LinkProperty.LINK_NAME,""String_Node_Str"");
  linkB3.addLinkProperty(LinkProperty.CASCADE,cascadeTypes);
  headNode.addChildNode(linkB1,child1);
  headNode.addChildNode(linkB2,child2);
  headNode.addChildNode(linkB3,child3);
  child1.addParentNode(linkB1,headNode);
  child2.addParentNode(linkB2,headNode);
  child3.addParentNode(linkB3,headNode);
  return headNode;
}","public static Node buildStoreNode(PersistenceCache pc,NodeState initialState,CascadeType cascadeType){
  Store store=new Store();
  BillingCounter b1=new BillingCounter();
  BillingCounter b2=new BillingCounter();
  BillingCounter b3=new BillingCounter();
  String storeId=ObjectGraphUtils.getNodeId(""String_Node_Str"",store.getClass());
  String b1Id=ObjectGraphUtils.getNodeId(""String_Node_Str"",b1.getClass());
  String b2Id=ObjectGraphUtils.getNodeId(""String_Node_Str"",b2.getClass());
  String b3Id=ObjectGraphUtils.getNodeId(""String_Node_Str"",b3.getClass());
  Node headNode=new Node(storeId,store,initialState,pc,""String_Node_Str"");
  Node child1=new Node(b1Id,b1,initialState,pc,""String_Node_Str"");
  Node child2=new Node(b2Id,b2,initialState,pc,""String_Node_Str"");
  Node child3=new Node(b3Id,b3,initialState,pc,""String_Node_Str"");
  NodeLink linkB1=new NodeLink(storeId,b1Id);
  NodeLink linkB2=new NodeLink(storeId,b2Id);
  NodeLink linkB3=new NodeLink(storeId,b3Id);
  List<CascadeType> cascadeTypes=new ArrayList<CascadeType>();
  cascadeTypes.add(cascadeType);
  linkB1.addLinkProperty(LinkProperty.LINK_NAME,""String_Node_Str"");
  linkB1.addLinkProperty(LinkProperty.CASCADE,cascadeTypes);
  linkB2.addLinkProperty(LinkProperty.LINK_NAME,""String_Node_Str"");
  linkB2.addLinkProperty(LinkProperty.CASCADE,cascadeTypes);
  linkB3.addLinkProperty(LinkProperty.LINK_NAME,""String_Node_Str"");
  linkB3.addLinkProperty(LinkProperty.CASCADE,cascadeTypes);
  headNode.addChildNode(linkB1,child1);
  headNode.addChildNode(linkB2,child2);
  headNode.addChildNode(linkB3,child3);
  child1.addParentNode(linkB1,headNode);
  child2.addParentNode(linkB2,headNode);
  child3.addParentNode(linkB3,headNode);
  return headNode;
}",0.9641268900088942
176516,"/** 
 * parse the relations of entites .
 * @param persistenceUnit
 * @param tableInfos
 * @param entityMetadata
 * @param tableInfo
 * @param relations
 */
private void parseRelations(String persistenceUnit,List<TableInfo> tableInfos,EntityMetadata entityMetadata,TableInfo tableInfo,List<Relation> relations){
  for (  Relation relation : relations) {
    Class entityClass=relation.getTargetEntity();
    EntityMetadata targetEntityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
    if (targetEntityMetadata == null) {
      log.error(""String_Node_Str"" + entityClass + ""String_Node_Str"");
      throw new SchemaGenerationException(""String_Node_Str"" + entityClass + ""String_Node_Str"");
    }
    ForeignKey relationType=relation.getType();
    if (targetEntityMetadata != null && relationType.equals(ForeignKey.ONE_TO_MANY) && relation.getJoinColumnName() != null) {
      if (targetEntityMetadata.equals(entityMetadata)) {
        tableInfo.addColumnInfo(getJoinColumn(tableInfo,relation.getJoinColumnName(),entityMetadata.getIdAttribute().getJavaType()));
      }
 else {
        String pu=targetEntityMetadata.getPersistenceUnit();
        Type targetEntityType=targetEntityMetadata.getType();
        Class idClass=targetEntityMetadata.getIdAttribute().getJavaType();
        String idName=((AbstractAttribute)targetEntityMetadata.getIdAttribute()).getJPAColumnName();
        boolean isCompositeId=idClass.isAnnotationPresent(Embeddable.class);
        TableInfo targetTableInfo=new TableInfo(targetEntityMetadata.getTableName(),targetEntityMetadata.isIndexable(),targetEntityType.name(),idClass,idName,isCompositeId);
        if (!pu.equals(persistenceUnit)) {
          List<TableInfo> targetTableInfos=getSchemaInfo(pu);
          addJoinColumnToInfo(relation.getJoinColumnName(),targetTableInfo,targetTableInfos,entityMetadata);
          puToSchemaMetadata.put(pu,targetTableInfos);
        }
 else {
          addJoinColumnToInfo(relation.getJoinColumnName(),targetTableInfo,tableInfos,entityMetadata);
        }
      }
    }
 else     if (relation.isUnary() && relation.getJoinColumnName() != null) {
      tableInfo.addColumnInfo(getJoinColumn(tableInfo,relation.getJoinColumnName(),targetEntityMetadata.getIdAttribute().getJavaType()));
    }
 else     if ((relationType.equals(ForeignKey.MANY_TO_MANY)) && (entityMetadata.isRelationViaJoinTable())) {
      JoinTableMetadata joinTableMetadata=relation.getJoinTableMetadata();
      String joinTableName=joinTableMetadata != null ? joinTableMetadata.getJoinTableName() : null;
      String joinColumnName=joinTableMetadata != null ? (String)joinTableMetadata.getJoinColumns().toArray()[0] : null;
      String inverseJoinColumnName=joinTableMetadata != null ? (String)joinTableMetadata.getInverseJoinColumns().toArray()[0] : null;
      if (joinTableName != null) {
        TableInfo joinTableInfo=new TableInfo(joinTableName,false,Type.COLUMN_FAMILY.name(),String.class,joinColumnName.concat(inverseJoinColumnName),false);
        if (!tableInfos.isEmpty() && !tableInfos.contains(joinTableInfo) || tableInfos.isEmpty()) {
          joinTableInfo.addColumnInfo(getJoinColumn(joinTableInfo,joinColumnName,entityMetadata.getIdAttribute().getJavaType()));
          joinTableInfo.addColumnInfo(getJoinColumn(joinTableInfo,inverseJoinColumnName,entityMetadata.getIdAttribute().getJavaType()));
          tableInfos.add(joinTableInfo);
        }
      }
    }
  }
}","/** 
 * parse the relations of entites .
 * @param persistenceUnit
 * @param tableInfos
 * @param entityMetadata
 * @param tableInfo
 * @param relations
 */
private void parseRelations(String persistenceUnit,List<TableInfo> tableInfos,EntityMetadata entityMetadata,TableInfo tableInfo,List<Relation> relations){
  for (  Relation relation : relations) {
    Class entityClass=relation.getTargetEntity();
    EntityMetadata targetEntityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
    if (targetEntityMetadata == null) {
      log.error(""String_Node_Str"" + entityClass + ""String_Node_Str"");
      throw new SchemaGenerationException(""String_Node_Str"" + entityClass + ""String_Node_Str"");
    }
    ForeignKey relationType=relation.getType();
    if (targetEntityMetadata != null && relationType.equals(ForeignKey.ONE_TO_MANY) && relation.getJoinColumnName() != null) {
      if (targetEntityMetadata.equals(entityMetadata)) {
        tableInfo.addColumnInfo(getJoinColumn(tableInfo,relation.getJoinColumnName(),entityMetadata.getIdAttribute().getJavaType()));
      }
 else {
        String pu=targetEntityMetadata.getPersistenceUnit();
        Type targetEntityType=targetEntityMetadata.getType();
        Class idClass=targetEntityMetadata.getIdAttribute().getJavaType();
        String idName=((AbstractAttribute)targetEntityMetadata.getIdAttribute()).getJPAColumnName();
        TableInfo targetTableInfo=new TableInfo(targetEntityMetadata.getTableName(),targetEntityType.name(),idClass,idName);
        if (!pu.equals(persistenceUnit)) {
          List<TableInfo> targetTableInfos=getSchemaInfo(pu);
          addJoinColumnToInfo(relation.getJoinColumnName(),targetTableInfo,targetTableInfos,entityMetadata);
          puToSchemaMetadata.put(pu,targetTableInfos);
        }
 else {
          addJoinColumnToInfo(relation.getJoinColumnName(),targetTableInfo,tableInfos,entityMetadata);
        }
      }
    }
 else     if (relation.isUnary() && relation.getJoinColumnName() != null) {
      tableInfo.addColumnInfo(getJoinColumn(tableInfo,relation.getJoinColumnName(),targetEntityMetadata.getIdAttribute().getJavaType()));
    }
 else     if ((relationType.equals(ForeignKey.MANY_TO_MANY)) && (entityMetadata.isRelationViaJoinTable())) {
      JoinTableMetadata joinTableMetadata=relation.getJoinTableMetadata();
      String joinTableName=joinTableMetadata != null ? joinTableMetadata.getJoinTableName() : null;
      String joinColumnName=joinTableMetadata != null ? (String)joinTableMetadata.getJoinColumns().toArray()[0] : null;
      String inverseJoinColumnName=joinTableMetadata != null ? (String)joinTableMetadata.getInverseJoinColumns().toArray()[0] : null;
      if (joinTableName != null) {
        TableInfo joinTableInfo=new TableInfo(joinTableName,Type.COLUMN_FAMILY.name(),String.class,joinColumnName.concat(inverseJoinColumnName));
        if (!tableInfos.isEmpty() && !tableInfos.contains(joinTableInfo) || tableInfos.isEmpty()) {
          joinTableInfo.addColumnInfo(getJoinColumn(joinTableInfo,joinColumnName,entityMetadata.getIdAttribute().getJavaType()));
          joinTableInfo.addColumnInfo(getJoinColumn(joinTableInfo,inverseJoinColumnName,entityMetadata.getIdAttribute().getJavaType()));
          tableInfos.add(joinTableInfo);
        }
      }
    }
  }
}",0.9472748815165876
176517,"@Override public void configure(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  puToSchemaMetadata=appMetadata.getSchemaMetadata().getPuToSchemaMetadata();
  for (  String persistenceUnit : persistenceUnits) {
    log.info(""String_Node_Str"" + persistenceUnit);
    List<TableInfo> tableInfos=getSchemaInfo(persistenceUnit);
    Map<String,EntityMetadata> entityMetadataMap=getEntityMetadataCol(appMetadata,persistenceUnit);
    for (    EntityMetadata entityMetadata : entityMetadataMap.values()) {
      boolean found=false;
      Type type=entityMetadata.getType();
      Class idClassName=entityMetadata.getIdAttribute() != null ? entityMetadata.getIdAttribute().getJavaType() : null;
      String idName=entityMetadata.getIdAttribute() != null ? ((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName() : null;
      boolean isCompositeId=idClassName.isAnnotationPresent(Embeddable.class);
      TableInfo tableInfo=new TableInfo(entityMetadata.getTableName(),entityMetadata.isIndexable(),type.name(),idClassName,idName,isCompositeId);
      if (!tableInfos.isEmpty() && tableInfos.contains(tableInfo)) {
        found=true;
        int idx=tableInfos.indexOf(tableInfo);
        tableInfo=tableInfos.get(idx);
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
 else {
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
      List<Relation> relations=entityMetadata.getRelations();
      parseRelations(persistenceUnit,tableInfos,entityMetadata,tableInfo,relations);
      if (!found) {
        tableInfos.add(tableInfo);
      }
      addTableGenerator(appMetadata,persistenceUnit,tableInfos,entityMetadata,idClassName,idName,isCompositeId);
    }
    puToSchemaMetadata.put(persistenceUnit,tableInfos);
  }
  for (  String persistenceUnit : persistenceUnits) {
    Map<String,Object> externalProperties=KunderaCoreUtils.getExternalProperties(persistenceUnit,externalPropertyMap,persistenceUnits);
    if (getSchemaProperty(persistenceUnit,externalProperties) != null && !getSchemaProperty(persistenceUnit,externalProperties).isEmpty()) {
      ClientFactory clientFactory=ClientResolver.getClientFactory(persistenceUnit);
      SchemaManager schemaManager=clientFactory != null ? clientFactory.getSchemaManager(externalProperties) : null;
      if (schemaManager != null) {
        schemaManager.exportSchema();
      }
    }
  }
}","@Override public void configure(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  puToSchemaMetadata=appMetadata.getSchemaMetadata().getPuToSchemaMetadata();
  for (  String persistenceUnit : persistenceUnits) {
    log.info(""String_Node_Str"" + persistenceUnit);
    List<TableInfo> tableInfos=getSchemaInfo(persistenceUnit);
    Map<String,EntityMetadata> entityMetadataMap=getEntityMetadataCol(appMetadata,persistenceUnit);
    for (    EntityMetadata entityMetadata : entityMetadataMap.values()) {
      boolean found=false;
      Type type=entityMetadata.getType();
      Class idClassName=entityMetadata.getIdAttribute() != null ? entityMetadata.getIdAttribute().getJavaType() : null;
      String idName=entityMetadata.getIdAttribute() != null ? ((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName() : null;
      TableInfo tableInfo=new TableInfo(entityMetadata.getTableName(),type.name(),idClassName,idName);
      if (!tableInfos.isEmpty() && tableInfos.contains(tableInfo)) {
        found=true;
        int idx=tableInfos.indexOf(tableInfo);
        tableInfo=tableInfos.get(idx);
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
 else {
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
      List<Relation> relations=entityMetadata.getRelations();
      parseRelations(persistenceUnit,tableInfos,entityMetadata,tableInfo,relations);
      if (!found) {
        tableInfos.add(tableInfo);
      }
      addTableGenerator(appMetadata,persistenceUnit,tableInfos,entityMetadata,idClassName,idName);
    }
    puToSchemaMetadata.put(persistenceUnit,tableInfos);
  }
  for (  String persistenceUnit : persistenceUnits) {
    Map<String,Object> externalProperties=KunderaCoreUtils.getExternalProperties(persistenceUnit,externalPropertyMap,persistenceUnits);
    if (getSchemaProperty(persistenceUnit,externalProperties) != null && !getSchemaProperty(persistenceUnit,externalProperties).isEmpty()) {
      ClientFactory clientFactory=ClientResolver.getClientFactory(persistenceUnit);
      SchemaManager schemaManager=clientFactory != null ? clientFactory.getSchemaManager(externalProperties) : null;
      if (schemaManager != null) {
        schemaManager.exportSchema();
      }
    }
  }
}",0.9369445619974608
176518,"/** 
 * Add tableGenerator to table info.
 * @param appMetadata
 * @param persistenceUnit
 * @param tableInfos
 * @param entityMetadata
 * @param idClassName
 * @param idName
 * @param isCompositeId
 */
private void addTableGenerator(ApplicationMetadata appMetadata,String persistenceUnit,List<TableInfo> tableInfos,EntityMetadata entityMetadata,Class idClassName,String idName,boolean isCompositeId){
  Metamodel metamodel=appMetadata.getMetamodel(persistenceUnit);
  IdDiscriptor keyValue=((MetamodelImpl)metamodel).getKeyValue(entityMetadata.getEntityClazz().getName());
  if (keyValue != null && keyValue.getTableDiscriptor() != null) {
    TableInfo tableGeneratorDiscriptor=new TableInfo(keyValue.getTableDiscriptor().getTable(),false,""String_Node_Str"",String.class,idName,isCompositeId);
    if (!tableInfos.contains(tableGeneratorDiscriptor)) {
      tableGeneratorDiscriptor.addColumnInfo(getJoinColumn(tableGeneratorDiscriptor,keyValue.getTableDiscriptor().getValueColumnName(),Long.class));
      tableInfos.add(tableGeneratorDiscriptor);
    }
  }
}","/** 
 * Add tableGenerator to table info.
 * @param appMetadata
 * @param persistenceUnit
 * @param tableInfos
 * @param entityMetadata
 * @param idClassName
 * @param idName
 * @param isCompositeId
 */
private void addTableGenerator(ApplicationMetadata appMetadata,String persistenceUnit,List<TableInfo> tableInfos,EntityMetadata entityMetadata,Class idClassName,String idName){
  Metamodel metamodel=appMetadata.getMetamodel(persistenceUnit);
  IdDiscriptor keyValue=((MetamodelImpl)metamodel).getKeyValue(entityMetadata.getEntityClazz().getName());
  if (keyValue != null && keyValue.getTableDiscriptor() != null) {
    TableInfo tableGeneratorDiscriptor=new TableInfo(keyValue.getTableDiscriptor().getTable(),""String_Node_Str"",String.class,idName);
    if (!tableInfos.contains(tableGeneratorDiscriptor)) {
      tableGeneratorDiscriptor.addColumnInfo(getJoinColumn(tableGeneratorDiscriptor,keyValue.getTableDiscriptor().getValueColumnName(),Long.class));
      tableInfos.add(tableGeneratorDiscriptor);
    }
  }
}",0.9798076923076924
176519,"public String getIdColumnName(){
  return idColumnName;
}","/** 
 * Returns name of id attribute.
 * @return id attribute name.
 */
public String getIdColumnName(){
  return idColumnName;
}",0.6129032258064516
176520,"/** 
 * Instantiates a new table info.
 * @param tableName the table name
 * @param isIndexable the is indexable
 * @param tableSchemaType the table schema type
 * @param idClassType the id class type
 */
public TableInfo(String tableName,boolean isIndexable,String tableSchemaType,Class idClassType,String idColumnName,boolean isCompositeId){
  this.tableName=tableName;
  this.isIndexable=isIndexable;
  this.type=tableSchemaType;
  this.idClazz=idClassType;
  this.idColumnName=idColumnName;
  this.isCompositeId=isCompositeId;
}","/** 
 * Instantiates a new table info.
 * @param tableName the table name
 * @param isIndexable the is indexable
 * @param tableSchemaType the table schema type
 * @param idClassType the id class type
 */
public TableInfo(String tableName,String tableSchemaType,Class idClassType,String idColumnName){
  this.tableName=tableName;
  this.type=tableSchemaType;
  this.idClazz=idClassType;
  this.idColumnName=idColumnName;
}",0.7777777777777778
176521,"@Override public String toString(){
  StringBuilder strBuilder=new StringBuilder(""String_Node_Str"");
  strBuilder.append(idClazz);
  strBuilder.append(""String_Node_Str"");
  strBuilder.append(tableName);
  strBuilder.append(""String_Node_Str"");
  strBuilder.append(type);
  strBuilder.append(""String_Node_Str"");
  strBuilder.append(isIndexable);
  return strBuilder.toString();
}","@Override public String toString(){
  StringBuilder strBuilder=new StringBuilder(""String_Node_Str"");
  strBuilder.append(idClazz);
  strBuilder.append(""String_Node_Str"");
  strBuilder.append(tableName);
  strBuilder.append(""String_Node_Str"");
  strBuilder.append(type);
  return strBuilder.toString();
}",0.8911764705882353
176522,"public List<IndexInfo> getColumnsToBeIndexed(){
  return this.columnToBeIndexed;
}","/** 
 * Returns list of index information object.
 * @return
 */
public List<IndexInfo> getColumnsToBeIndexed(){
  return this.columnToBeIndexed;
}",0.7161572052401747
176523,"/** 
 * update method update schema and table for the list of tableInfos
 * @param tableInfos list of TableInfos.
 */
protected void update(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    DBObject options=setCollectionProperties(tableInfo);
    getDBName();
    DB db=mongo.getDB(databaseName);
    DBCollection collection=null;
    if (!db.collectionExists(tableInfo.getTableName())) {
      collection=db.createCollection(tableInfo.getTableName(),options);
    }
    collection=collection != null ? collection : db.getCollection(tableInfo.getTableName());
    boolean isCappedCollection=isCappedCollection(tableInfo);
    if (tableInfo.isIndexable() && !isCappedCollection) {
      createIndexes(tableInfo,collection);
    }
  }
}","/** 
 * update method update schema and table for the list of tableInfos
 * @param tableInfos list of TableInfos.
 */
protected void update(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    DBObject options=setCollectionProperties(tableInfo);
    getDBName();
    DB db=mongo.getDB(databaseName);
    DBCollection collection=null;
    if (!db.collectionExists(tableInfo.getTableName())) {
      collection=db.createCollection(tableInfo.getTableName(),options);
    }
    collection=collection != null ? collection : db.getCollection(tableInfo.getTableName());
    boolean isCappedCollection=isCappedCollection(tableInfo);
    if (!isCappedCollection) {
      createIndexes(tableInfo,collection);
    }
  }
}",0.9352037408149632
176524,"/** 
 * create method creates schema and table for the list of tableInfos.
 * @param tableInfos list of TableInfos.
 */
protected void create(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    DBObject options=setCollectionProperties(tableInfo);
    getDBName();
    DB db=mongo.getDB(databaseName);
    if (db.collectionExists(tableInfo.getTableName())) {
      db.getCollection(tableInfo.getTableName()).drop();
    }
    DBCollection collection=db.createCollection(tableInfo.getTableName(),options);
    boolean isCappedCollection=isCappedCollection(tableInfo);
    if (tableInfo.isIndexable() && !isCappedCollection) {
      createIndexes(tableInfo,collection);
    }
  }
}","/** 
 * create method creates schema and table for the list of tableInfos.
 * @param tableInfos list of TableInfos.
 */
protected void create(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    DBObject options=setCollectionProperties(tableInfo);
    getDBName();
    DB db=mongo.getDB(databaseName);
    if (db.collectionExists(tableInfo.getTableName())) {
      db.getCollection(tableInfo.getTableName()).drop();
    }
    DBCollection collection=db.createCollection(tableInfo.getTableName(),options);
    boolean isCappedCollection=isCappedCollection(tableInfo);
    if (!isCappedCollection) {
      createIndexes(tableInfo,collection);
    }
  }
}",0.9297610427226648
176525,"/** 
 * On counter column.
 * @param m the m
 * @param isRelation the is relation
 * @param relations the relations
 * @param ks the ks
 * @return the list
 */
protected List<Object> onCounterColumn(EntityMetadata m,boolean isRelation,List<String> relations,List<KeySlice> ks){
  List<Object> entities;
  if (m.getType().isSuperColumnFamilyMetadata()) {
    Map<Bytes,List<CounterSuperColumn>> qCounterSuperColumnResults=ColumnOrSuperColumnHelper.transformKeySlices(ks,ColumnOrSuperColumnHelper.COUNTER_SUPER_COLUMN);
    entities=new ArrayList<Object>(qCounterSuperColumnResults.size());
    for (    Bytes key : qCounterSuperColumnResults.keySet()) {
      List<CounterSuperColumn> counterSuperColumns=qCounterSuperColumnResults.get(key);
      ThriftRow tr=new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key.toByteArray()),m.getTableName(),new ArrayList<Column>(0),new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),counterSuperColumns);
      entities.add(getDataHandler().populateEntity(tr,m,relations,isRelation,isCql3Enabled(m)));
    }
  }
 else {
    Map<Bytes,List<CounterColumn>> qCounterColumnResults=ColumnOrSuperColumnHelper.transformKeySlices(ks,ColumnOrSuperColumnHelper.COUNTER_COLUMN);
    entities=new ArrayList<Object>(qCounterColumnResults.size());
    for (    Bytes key : qCounterColumnResults.keySet()) {
      List<CounterColumn> counterColumns=qCounterColumnResults.get(key);
      ThriftRow tr=new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key.toByteArray()),m.getTableName(),new ArrayList<Column>(0),new ArrayList<SuperColumn>(0),counterColumns,new ArrayList<CounterSuperColumn>(0));
      entities.add(getDataHandler().populateEntity(tr,m,relations,isRelation,isCql3Enabled(m)));
    }
  }
  return entities;
}","/** 
 * On counter column.
 * @param m the m
 * @param isRelation the is relation
 * @param relations the relations
 * @param ks the ks
 * @return the list
 */
protected List<Object> onCounterColumn(EntityMetadata m,boolean isRelation,List<String> relations,List<KeySlice> ks){
  List<Object> entities;
  if (m.getType().isSuperColumnFamilyMetadata()) {
    Map<Bytes,List<CounterSuperColumn>> qCounterSuperColumnResults=ColumnOrSuperColumnHelper.transformKeySlices(ks,ColumnOrSuperColumnHelper.COUNTER_SUPER_COLUMN);
    entities=new ArrayList<Object>(qCounterSuperColumnResults.size());
    for (    Bytes key : qCounterSuperColumnResults.keySet()) {
      List<CounterSuperColumn> counterSuperColumns=qCounterSuperColumnResults.get(key);
      ThriftRow tr=new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key.toByteArray()),m.getTableName(),new ArrayList<Column>(0),new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),counterSuperColumns);
      entities.add(getDataHandler().populateEntity(tr,m,relations,isRelation));
    }
  }
 else {
    Map<Bytes,List<CounterColumn>> qCounterColumnResults=ColumnOrSuperColumnHelper.transformKeySlices(ks,ColumnOrSuperColumnHelper.COUNTER_COLUMN);
    entities=new ArrayList<Object>(qCounterColumnResults.size());
    for (    Bytes key : qCounterColumnResults.keySet()) {
      List<CounterColumn> counterColumns=qCounterColumnResults.get(key);
      ThriftRow tr=new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key.toByteArray()),m.getTableName(),new ArrayList<Column>(0),new ArrayList<SuperColumn>(0),counterColumns,new ArrayList<CounterSuperColumn>(0));
      entities.add(getDataHandler().populateEntity(tr,m,relations,isRelation));
    }
  }
  return entities;
}",0.9905555555555556
176526,"/** 
 * Compute entity via super columns.
 * @param m the m
 * @param isRelation the is relation
 * @param relations the relations
 * @param entities the entities
 * @param qResults the q results
 */
protected void computeEntityViaSuperColumns(EntityMetadata m,boolean isRelation,List<String> relations,List<Object> entities,Map<Bytes,List<SuperColumn>> qResults){
  for (  Bytes key : qResults.keySet()) {
    List<SuperColumn> superColumns=qResults.get(key);
    ThriftRow tr=new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key.toByteArray()),m.getTableName(),new ArrayList<Column>(0),superColumns,new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
    Object o=getDataHandler().populateEntity(tr,m,relations,isRelation,isCql3Enabled(m));
    if (o != null) {
      entities.add(o);
    }
  }
}","/** 
 * Compute entity via super columns.
 * @param m the m
 * @param isRelation the is relation
 * @param relations the relations
 * @param entities the entities
 * @param qResults the q results
 */
protected void computeEntityViaSuperColumns(EntityMetadata m,boolean isRelation,List<String> relations,List<Object> entities,Map<Bytes,List<SuperColumn>> qResults){
  for (  Bytes key : qResults.keySet()) {
    List<SuperColumn> superColumns=qResults.get(key);
    ThriftRow tr=new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key.toByteArray()),m.getTableName(),new ArrayList<Column>(0),superColumns,new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
    Object o=getDataHandler().populateEntity(tr,m,relations,isRelation);
    if (o != null) {
      entities.add(o);
    }
  }
}",0.9898749255509232
176527,"/** 
 * Returns true in case of, composite Id and if cql3 opted and not a embedded entity.
 * @param metadata
 * @param metaModel
 * @return
 */
public boolean isCql3Enabled(){
  return isCql3Enabled(null);
}","/** 
 * Returns true in case of, composite Id and if cql3 opted and not a embedded entity.
 * @param metadata
 * @param metaModel
 * @return
 */
private boolean isCql3Enabled(){
  return isCql3Enabled(null);
}",0.973621103117506
176528,"/** 
 * Populate data.
 * @param m the m
 * @param qResults the q results
 * @param entities the entities
 * @param isRelational the is relational
 * @param relationNames the relation names
 * @param dataHandler the data handler
 */
protected void populateData(EntityMetadata m,Map<Bytes,List<Column>> qResults,List<Object> entities,boolean isRelational,List<String> relationNames,CassandraDataHandler dataHandler){
  if (m.getType().isSuperColumnFamilyMetadata()) {
    Set<Bytes> primaryKeys=qResults.keySet();
    if (primaryKeys != null && !primaryKeys.isEmpty()) {
      Object[] rowIds=new Object[primaryKeys.size()];
      int i=0;
      for (      Bytes b : primaryKeys) {
        rowIds[i]=PropertyAccessorHelper.getObject(b,(Field)m.getIdAttribute().getJavaMember());
        i++;
      }
      entities.addAll(findAll(m.getEntityClazz(),null,rowIds));
    }
  }
 else {
    Iterator<Bytes> rowIter=qResults.keySet().iterator();
    while (rowIter.hasNext()) {
      Bytes rowKey=rowIter.next();
      List<Column> columns=qResults.get(rowKey);
      try {
        Object id=PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),rowKey.toByteArray());
        Object e=dataHandler.populateEntity(new ThriftRow(id,m.getTableName(),columns,new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0)),m,relationNames,isRelational,isCql3Enabled(m));
        if (e != null) {
          entities.add(e);
        }
      }
 catch (      IllegalStateException e) {
        throw new KunderaException(e);
      }
catch (      Exception e) {
        throw new KunderaException(e);
      }
    }
  }
}","/** 
 * Populate data.
 * @param m the m
 * @param qResults the q results
 * @param entities the entities
 * @param isRelational the is relational
 * @param relationNames the relation names
 * @param dataHandler the data handler
 */
protected void populateData(EntityMetadata m,Map<Bytes,List<Column>> qResults,List<Object> entities,boolean isRelational,List<String> relationNames,CassandraDataHandler dataHandler){
  if (m.getType().isSuperColumnFamilyMetadata()) {
    Set<Bytes> primaryKeys=qResults.keySet();
    if (primaryKeys != null && !primaryKeys.isEmpty()) {
      Object[] rowIds=new Object[primaryKeys.size()];
      int i=0;
      for (      Bytes b : primaryKeys) {
        rowIds[i]=PropertyAccessorHelper.getObject(b,(Field)m.getIdAttribute().getJavaMember());
        i++;
      }
      entities.addAll(findAll(m.getEntityClazz(),null,rowIds));
    }
  }
 else {
    Iterator<Bytes> rowIter=qResults.keySet().iterator();
    while (rowIter.hasNext()) {
      Bytes rowKey=rowIter.next();
      List<Column> columns=qResults.get(rowKey);
      try {
        Object id=PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),rowKey.toByteArray());
        Object e=dataHandler.populateEntity(new ThriftRow(id,m.getTableName(),columns,new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0)),m,relationNames,isRelational);
        if (e != null) {
          entities.add(e);
        }
      }
 catch (      IllegalStateException e) {
        throw new KunderaException(e);
      }
catch (      Exception e) {
        throw new KunderaException(e);
      }
    }
  }
}",0.994828110739276
176529,"/** 
 * Executes query string using cql3.
 * @param cqlQuery
 * @return
 * @throws InvalidRequestException
 * @throws UnavailableException
 * @throws TimedOutException
 * @throws SchemaDisagreementException
 * @throws TException
 */
protected CqlResult executeCQLQuery(String cqlQuery) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException {
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  pooledConnection=getPooledConection(persistenceUnit);
  conn=getConnection(pooledConnection);
  try {
    if (isCql3Enabled()) {
      return conn.execute_cql3_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE,consistencyLevel);
    }
    return conn.execute_cql_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE);
  }
  finally {
    releaseConnection(pooledConnection);
  }
}","/** 
 * Executes query string using cql3.
 * @param cqlQuery
 * @return
 * @throws InvalidRequestException
 * @throws UnavailableException
 * @throws TimedOutException
 * @throws SchemaDisagreementException
 * @throws TException
 */
protected CqlResult executeCQLQuery(String cqlQuery) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException {
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  pooledConnection=getConection(persistenceUnit);
  conn=getConnection(pooledConnection);
  try {
    if (isCql3Enabled()) {
      return conn.execute_cql3_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE,consistencyLevel);
    }
    return conn.execute_cql_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE);
  }
  finally {
    releaseConnection(pooledConnection);
  }
}",0.9966777408637874
176530,"/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  String persistenceUnit=null;
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  String batchQuery=CQLTranslator.BATCH_QUERY;
  batchQuery=StringUtils.replace(batchQuery,CQLTranslator.STATEMENT,""String_Node_Str"");
  StringBuilder batchQueryBuilder=new StringBuilder(batchQuery);
  try {
    boolean isCql3Enabled=false;
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (isCql3Enabled(metadata)) {
          isCql3Enabled=true;
          List<RelationHolder> relationHolders=getRelationHolders(node);
          String query;
          if (node.isInState(RemovedState.class)) {
            query=onDeleteQuery(metadata,metaModel,id);
          }
 else {
            query=createInsertQuery(metadata,entity,conn,relationHolders);
          }
          batchQueryBuilder.append(query);
        }
 else {
          if (node.isInState(RemovedState.class)) {
            delete(entity,id);
          }
 else {
            List<RelationHolder> relationHolders=getRelationHolders(node);
            Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
            mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
            recordsExecuted+=mutationMap.size();
            if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
              batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
            }
 else {
              batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
            }
            indexNode(node,metadata);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getPooledConection(persistenceUnit);
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
      }
    }
    if (!nodes.isEmpty() && isCql3Enabled) {
      batchQueryBuilder.append(CQLTranslator.APPLY_BATCH);
      executeCQLQuery(batchQueryBuilder.toString());
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    if (pooledConnection != null) {
      releaseConnection(pooledConnection);
    }
  }
  return recordsExecuted;
}","/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  String persistenceUnit=null;
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  String batchQuery=CQLTranslator.BATCH_QUERY;
  batchQuery=StringUtils.replace(batchQuery,CQLTranslator.STATEMENT,""String_Node_Str"");
  StringBuilder batchQueryBuilder=new StringBuilder(batchQuery);
  try {
    boolean isCql3Enabled=false;
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (isCql3Enabled(metadata)) {
          isCql3Enabled=true;
          List<RelationHolder> relationHolders=getRelationHolders(node);
          String query;
          if (node.isInState(RemovedState.class)) {
            query=onDeleteQuery(metadata,metaModel,id);
          }
 else {
            query=createInsertQuery(metadata,entity,conn,relationHolders);
          }
          batchQueryBuilder.append(query);
        }
 else {
          if (node.isInState(RemovedState.class)) {
            delete(entity,id);
          }
 else {
            List<RelationHolder> relationHolders=getRelationHolders(node);
            Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
            mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
            recordsExecuted+=mutationMap.size();
            if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
              batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
            }
 else {
              batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
            }
            indexNode(node,metadata);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getConection(persistenceUnit);
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
      }
    }
    if (!nodes.isEmpty() && isCql3Enabled) {
      batchQueryBuilder.append(CQLTranslator.APPLY_BATCH);
      executeCQLQuery(batchQueryBuilder.toString());
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    if (pooledConnection != null) {
      releaseConnection(pooledConnection);
    }
  }
  return recordsExecuted;
}",0.9991411394217006
176531,"/** 
 * Deletes record for given primary key from counter column family.
 * @param pKey the key
 * @param metadata the metadata
 * @param consistencyLevel the consistency level
 */
protected void deleteRecordFromCounterColumnFamily(Object pKey,EntityMetadata metadata,ConsistencyLevel consistencyLevel){
  ColumnPath path=new ColumnPath(metadata.getTableName());
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  try {
    pooledConnection=getPooledConection(metadata.getPersistenceUnit());
    conn=getConnection(pooledConnection);
    conn.remove_counter((CassandraUtilities.toBytes(pKey,metadata.getIdAttribute().getJavaType())).getBytes(),path,consistencyLevel);
  }
 catch (  InvalidRequestException ire) {
    log.error(""String_Node_Str"" + ire);
    throw new PersistenceException(ire);
  }
catch (  UnavailableException ue) {
    log.error(""String_Node_Str"" + ue);
    throw new PersistenceException(ue);
  }
catch (  TimedOutException toe) {
    log.error(""String_Node_Str"" + toe);
    throw new PersistenceException(toe);
  }
catch (  TException te) {
    log.error(""String_Node_Str"" + te);
    throw new PersistenceException(te);
  }
 finally {
    releaseConnection(pooledConnection);
  }
}","/** 
 * Deletes record for given primary key from counter column family.
 * @param pKey the key
 * @param metadata the metadata
 * @param consistencyLevel the consistency level
 */
protected void deleteRecordFromCounterColumnFamily(Object pKey,EntityMetadata metadata,ConsistencyLevel consistencyLevel){
  ColumnPath path=new ColumnPath(metadata.getTableName());
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  try {
    pooledConnection=getConection(metadata.getPersistenceUnit());
    conn=getConnection(pooledConnection);
    conn.remove_counter((CassandraUtilities.toBytes(pKey,metadata.getIdAttribute().getJavaType())).getBytes(),path,consistencyLevel);
  }
 catch (  InvalidRequestException ire) {
    log.error(""String_Node_Str"" + ire);
    throw new PersistenceException(ire);
  }
catch (  UnavailableException ue) {
    log.error(""String_Node_Str"" + ue);
    throw new PersistenceException(ue);
  }
catch (  TimedOutException toe) {
    log.error(""String_Node_Str"" + toe);
    throw new PersistenceException(toe);
  }
catch (  TException te) {
    log.error(""String_Node_Str"" + te);
    throw new PersistenceException(te);
  }
 finally {
    releaseConnection(pooledConnection);
  }
}",0.9975247524752476
176532,"/** 
 * Returns raw cassandra client from thrift connection pool.
 * @param persistenceUnit persistence unit.
 * @param schema schema or keyspace.
 * @return raw cassandra client.
 */
protected Cassandra.Client getRawClient(final String persistenceUnit,final String schema){
  Cassandra.Client client=null;
  Object pooledConnection;
  pooledConnection=getPooledConection(persistenceUnit);
  client=getConnection(pooledConnection);
  try {
    client.set_cql_version(getCqlVersion());
  }
 catch (  InvalidRequestException irex) {
    log.error(""String_Node_Str"" + irex);
    throw new KunderaException(irex);
  }
catch (  TException tex) {
    log.error(""String_Node_Str"" + tex);
    throw new KunderaException(tex);
  }
 finally {
    releaseConnection(pooledConnection);
  }
  return client;
}","/** 
 * Returns raw cassandra client from thrift connection pool.
 * @param persistenceUnit persistence unit.
 * @param schema schema or keyspace.
 * @return raw cassandra client.
 */
protected Cassandra.Client getRawClient(final String persistenceUnit,final String schema){
  Cassandra.Client client=null;
  Object pooledConnection;
  pooledConnection=getConection(persistenceUnit);
  client=getConnection(pooledConnection);
  try {
    client.set_cql_version(getCqlVersion());
  }
 catch (  InvalidRequestException irex) {
    log.error(""String_Node_Str"" + irex);
    throw new KunderaException(irex);
  }
catch (  TException tex) {
    log.error(""String_Node_Str"" + tex);
    throw new KunderaException(tex);
  }
 finally {
    releaseConnection(pooledConnection);
  }
  return client;
}",0.996216897856242
176533,"/** 
 * Compute entity via columns.
 * @param m the m
 * @param isRelation the is relation
 * @param relations the relations
 * @param entities the entities
 * @param qResults the q results
 */
protected void computeEntityViaColumns(EntityMetadata m,boolean isRelation,List<String> relations,List<Object> entities,Map<Bytes,List<Column>> qResults){
  for (  Bytes key : qResults.keySet()) {
    List<Column> columns=qResults.get(key);
    ThriftRow tr=new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key.toByteArray()),m.getTableName(),columns,new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
    Object o=getDataHandler().populateEntity(tr,m,relations,isRelation,isCql3Enabled(m));
    if (o != null) {
      entities.add(o);
    }
  }
}","/** 
 * Compute entity via columns.
 * @param m the m
 * @param isRelation the is relation
 * @param relations the relations
 * @param entities the entities
 * @param qResults the q results
 */
protected void computeEntityViaColumns(EntityMetadata m,boolean isRelation,List<String> relations,List<Object> entities,Map<Bytes,List<Column>> qResults){
  for (  Bytes key : qResults.keySet()) {
    List<Column> columns=qResults.get(key);
    ThriftRow tr=new ThriftRow(PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),key.toByteArray()),m.getTableName(),columns,new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
    Object o=getDataHandler().populateEntity(tr,m,relations,isRelation);
    if (o != null) {
      entities.add(o);
    }
  }
}",0.9895513214505224
176534,"/** 
 * Execute query and Return list of Objects.
 * @param cqlQuery
 * @param clazz
 * @param relationalField
 * @param dataHandler
 * @return
 */
public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField,CassandraDataHandler dataHandler){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(clazz);
  CqlResult result=null;
  List returnedEntities=new ArrayList();
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
    if (log.isDebugEnabled()) {
      log.info(""String_Node_Str"" + cqlQuery);
    }
    result=executeCQLQuery(cqlQuery);
    if (result != null && (result.getRows() != null || result.getRowsSize() > 0)) {
      returnedEntities=new ArrayList<Object>(result.getRowsSize());
      Iterator<CqlRow> iter=result.getRowsIterator();
      while (iter.hasNext()) {
        CqlRow row=iter.next();
        Object rowKey=null;
        ThriftRow thriftRow=null;
        thriftRow=new ThriftRow(rowKey,entityMetadata.getTableName(),row.getColumns(),new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
        Object entity=dataHandler.populateEntity(thriftRow,entityMetadata,relationalField,relationalField != null && !relationalField.isEmpty(),isCql3Enabled(entityMetadata));
        if (entity != null) {
          returnedEntities.add(entity);
        }
 else {
          returnedEntities.add(row.getColumns().get(0));
        }
      }
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  return returnedEntities;
}","/** 
 * Execute query and Return list of Objects.
 * @param cqlQuery
 * @param clazz
 * @param relationalField
 * @param dataHandler
 * @return
 */
public List executeQuery(String cqlQuery,Class clazz,List<String> relationalField,CassandraDataHandler dataHandler){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(clazz);
  CqlResult result=null;
  List returnedEntities=new ArrayList();
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
    if (log.isDebugEnabled()) {
      log.info(""String_Node_Str"" + cqlQuery);
    }
    result=executeCQLQuery(cqlQuery);
    if (result != null && (result.getRows() != null || result.getRowsSize() > 0)) {
      returnedEntities=new ArrayList<Object>(result.getRowsSize());
      Iterator<CqlRow> iter=result.getRowsIterator();
      while (iter.hasNext()) {
        CqlRow row=iter.next();
        Object rowKey=null;
        ThriftRow thriftRow=null;
        thriftRow=new ThriftRow(rowKey,entityMetadata.getTableName(),row.getColumns(),new ArrayList<SuperColumn>(0),new ArrayList<CounterColumn>(0),new ArrayList<CounterSuperColumn>(0));
        Object entity=dataHandler.populateEntity(thriftRow,entityMetadata,relationalField,relationalField != null && !relationalField.isEmpty());
        if (entity != null) {
          returnedEntities.add(entity);
        }
 else {
          returnedEntities.add(row.getColumns().get(0));
        }
      }
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
  return returnedEntities;
}",0.9932945909700492
176535,"/** 
 * Populate entities from key slices.
 * @param m the m
 * @param isWrapReq the is wrap req
 * @param relations the relations
 * @param keys the keys
 * @param dataHandler the data handler
 * @return the list
 * @throws Exception the exception
 */
protected List populateEntitiesFromKeySlices(EntityMetadata m,boolean isWrapReq,List<String> relations,List<KeySlice> keys,CassandraDataHandler dataHandler) throws Exception {
  List results;
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  Set<String> superColumnAttribs=metaModel.getEmbeddables(m.getEntityClazz()).keySet();
  results=new ArrayList(keys.size());
  ThriftDataResultHelper dataGenerator=new ThriftDataResultHelper();
  for (  KeySlice key : keys) {
    List<ColumnOrSuperColumn> columns=key.getColumns();
    byte[] rowKey=key.getKey();
    Object id=PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),rowKey);
    Map<ByteBuffer,List<ColumnOrSuperColumn>> data=new HashMap<ByteBuffer,List<ColumnOrSuperColumn>>(1);
    data.put(ByteBuffer.wrap(rowKey),columns);
    ThriftRow tr=new ThriftRow();
    tr.setId(id);
    tr.setColumnFamilyName(m.getTableName());
    tr=dataGenerator.translateToThriftRow(data,m.isCounterColumnType(),m.getType(),tr);
    results.add(dataHandler.populateEntity(tr,m,relations,isWrapReq,isCql3Enabled(m)));
  }
  return results;
}","/** 
 * Populate entities from key slices.
 * @param m the m
 * @param isWrapReq the is wrap req
 * @param relations the relations
 * @param keys the keys
 * @param dataHandler the data handler
 * @return the list
 * @throws Exception the exception
 */
protected List populateEntitiesFromKeySlices(EntityMetadata m,boolean isWrapReq,List<String> relations,List<KeySlice> keys,CassandraDataHandler dataHandler) throws Exception {
  List results;
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  Set<String> superColumnAttribs=metaModel.getEmbeddables(m.getEntityClazz()).keySet();
  results=new ArrayList(keys.size());
  ThriftDataResultHelper dataGenerator=new ThriftDataResultHelper();
  for (  KeySlice key : keys) {
    List<ColumnOrSuperColumn> columns=key.getColumns();
    byte[] rowKey=key.getKey();
    Object id=PropertyAccessorHelper.getObject(m.getIdAttribute().getJavaType(),rowKey);
    Map<ByteBuffer,List<ColumnOrSuperColumn>> data=new HashMap<ByteBuffer,List<ColumnOrSuperColumn>>(1);
    data.put(ByteBuffer.wrap(rowKey),columns);
    ThriftRow tr=new ThriftRow();
    tr.setId(id);
    tr.setColumnFamilyName(m.getTableName());
    tr=dataGenerator.translateToThriftRow(data,m.isCounterColumnType(),m.getType(),tr);
    results.add(dataHandler.populateEntity(tr,m,relations,isWrapReq));
  }
  return results;
}",0.9940077546704263
176536,"/** 
 * Creates secondary indexes on columns if not already created.
 * @param tableName Column family name
 * @param poolName Pool Name
 * @param columns List of columns
 * @param columnType
 */
protected void createIndexesOnColumns(EntityMetadata m,String tableName,String poolName,List<Column> columns,Class columnType){
  Object pooledConnection=null;
  try {
    Cassandra.Client api=null;
    pooledConnection=getPooledConection(persistenceUnit);
    api=getConnection(pooledConnection);
    KsDef ksDef=api.describe_keyspace(m.getSchema());
    List<CfDef> cfDefs=ksDef.getCf_defs();
    CfDef columnFamilyDefToUpdate=null;
    boolean isUpdatable=false;
    for (    CfDef cfDef : cfDefs) {
      if (cfDef.getName().equals(tableName)) {
        columnFamilyDefToUpdate=cfDef;
        break;
      }
    }
    if (columnFamilyDefToUpdate == null) {
      throw new PersistenceException(""String_Node_Str"");
    }
    List<ColumnDef> columnMetadataList=columnFamilyDefToUpdate.getColumn_metadata();
    List<String> indexList=new ArrayList<String>();
    if (columnMetadataList != null) {
      for (      ColumnDef columnDef : columnMetadataList) {
        indexList.add(Bytes.toUTF8(columnDef.getName()));
      }
    }
    for (    Column column : columns) {
      ColumnDef columnDef=new ColumnDef();
      columnDef.setName(column.getName());
      columnDef.setValidation_class(CassandraValidationClassMapper.getValidationClass(columnType));
      columnDef.setIndex_type(IndexType.KEYS);
      if (!indexList.contains(Bytes.toUTF8(column.getName()))) {
        isUpdatable=true;
        columnFamilyDefToUpdate.addToColumn_metadata(columnDef);
      }
    }
    if (isUpdatable) {
      columnFamilyDefToUpdate.setKey_validation_class(CassandraValidationClassMapper.getValidationClass(m.getIdAttribute().getJavaType()));
      api.system_update_column_family(columnFamilyDefToUpdate);
    }
  }
 catch (  InvalidRequestException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e);
  }
catch (  SchemaDisagreementException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e);
  }
catch (  TException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e);
  }
catch (  NotFoundException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e);
  }
catch (  PropertyAccessException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e);
  }
 finally {
    releaseConnection(pooledConnection);
  }
}","/** 
 * Creates secondary indexes on columns if not already created.
 * @param tableName Column family name
 * @param poolName Pool Name
 * @param columns List of columns
 * @param columnType
 */
protected void createIndexesOnColumns(EntityMetadata m,String tableName,List<Column> columns,Class columnType){
  Object pooledConnection=null;
  try {
    Cassandra.Client api=null;
    pooledConnection=getConection(persistenceUnit);
    api=getConnection(pooledConnection);
    KsDef ksDef=api.describe_keyspace(m.getSchema());
    List<CfDef> cfDefs=ksDef.getCf_defs();
    CfDef columnFamilyDefToUpdate=null;
    boolean isUpdatable=false;
    for (    CfDef cfDef : cfDefs) {
      if (cfDef.getName().equals(tableName)) {
        columnFamilyDefToUpdate=cfDef;
        break;
      }
    }
    if (columnFamilyDefToUpdate == null) {
      throw new PersistenceException(""String_Node_Str"");
    }
    List<ColumnDef> columnMetadataList=columnFamilyDefToUpdate.getColumn_metadata();
    List<String> indexList=new ArrayList<String>();
    if (columnMetadataList != null) {
      for (      ColumnDef columnDef : columnMetadataList) {
        indexList.add(Bytes.toUTF8(columnDef.getName()));
      }
    }
    for (    Column column : columns) {
      ColumnDef columnDef=new ColumnDef();
      columnDef.setName(column.getName());
      columnDef.setValidation_class(CassandraValidationClassMapper.getValidationClass(columnType));
      columnDef.setIndex_type(IndexType.KEYS);
      if (!indexList.contains(Bytes.toUTF8(column.getName()))) {
        isUpdatable=true;
        columnFamilyDefToUpdate.addToColumn_metadata(columnDef);
      }
    }
    if (isUpdatable) {
      columnFamilyDefToUpdate.setKey_validation_class(CassandraValidationClassMapper.getValidationClass(m.getIdAttribute().getJavaType()));
      api.system_update_column_family(columnFamilyDefToUpdate);
    }
  }
 catch (  InvalidRequestException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e);
  }
catch (  SchemaDisagreementException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e);
  }
catch (  TException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e);
  }
catch (  NotFoundException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e);
  }
catch (  PropertyAccessException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e);
  }
 finally {
    releaseConnection(pooledConnection);
  }
}",0.9955823293172692
176537,"/** 
 * From thrift row.
 * @param clazz the clazz
 * @param m the m
 * @param rowKey the row key
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @param consistencyLevel the consistency level
 * @return the object
 * @throws Exception the exception
 */
Object fromThriftRow(Class<?> clazz,EntityMetadata m,Object rowKey,List<String> relationNames,boolean isWrapReq,ConsistencyLevel consistencyLevel,boolean isCql3Enabled,Object conn) throws Exception ;","/** 
 * From thrift row.
 * @param clazz the clazz
 * @param m the m
 * @param rowKey the row key
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @param consistencyLevel the consistency level
 * @return the object
 * @throws Exception the exception
 */
Object fromThriftRow(Class<?> clazz,EntityMetadata m,Object rowKey,List<String> relationNames,boolean isWrapReq,ConsistencyLevel consistencyLevel) throws Exception ;",0.9637526652452024
176538,"/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq,boolean isCql3Enabled);","/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq);",0.96028880866426
176539,"/** 
 * Scan class and put metadata.
 * @param bits the bits
 * @param reader the reader
 * @param entityMetadataMap the entity metadata map
 * @param entityNameToClassMap the entity name to class map
 * @param keyDiscriptor
 * @param persistence unit the persistence unit.
 * @throws IOException Signals that an I/O exception has occurred.
 */
private List<Class<?>> scanClassAndPutMetadata(InputStream bits,Reader reader,Map<String,EntityMetadata> entityMetadataMap,Map<String,Class<?>> entityNameToClassMap,String persistenceUnit,String client,Map<String,List<String>> clazzToPuMap,Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap) throws IOException {
  DataInputStream dstream=new DataInputStream(new BufferedInputStream(bits));
  ClassFile cf=null;
  String className=null;
  List<Class<?>> classes=new ArrayList<Class<?>>();
  try {
    cf=new ClassFile(dstream);
    className=cf.getName();
    List<String> annotations=new ArrayList<String>();
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.visibleTag));
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.invisibleTag));
    for (    String validAnn : reader.getValidAnnotations()) {
      if (annotations.contains(validAnn)) {
        Class<?> clazz=Thread.currentThread().getContextClassLoader().loadClass(className);
        if (entityNameToClassMap.containsKey(clazz.getSimpleName()) && !entityNameToClassMap.get(clazz.getSimpleName()).getName().equals(clazz.getName())) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityNameToClassMap.get(clazz.getSimpleName()).getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ persistenceUnit);
        }
        entityNameToClassMap.put(clazz.getSimpleName(),clazz);
        EntityMetadata metadata=entityMetadataMap.get(clazz);
        if (null == metadata) {
          log.debug(""String_Node_Str"" + clazz.getName());
synchronized (clazz) {
            if (null == metadata) {
              MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,client,KunderaCoreUtils.getExternalProperties(persistenceUnit,externalProperyMap,persistenceUnits));
              metadata=metadataBuilder.buildEntityMetadata(clazz);
              if (metadata != null) {
                entityMetadataMap.put(clazz.getName(),metadata);
                mapClazztoPu(clazz,persistenceUnit,clazzToPuMap);
                processGeneratedValueAnnotation(clazz,persistenceUnit,metadata,entityNameToKeyDiscriptorMap);
              }
            }
          }
        }
        onValidateClientProperties(classes,clazz,persistenceUnit);
      }
    }
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + className + ""String_Node_Str"");
  }
 finally {
    dstream.close();
    bits.close();
  }
  return classes;
}","/** 
 * Scan class and put metadata.
 * @param bits the bits
 * @param reader the reader
 * @param entityMetadataMap the entity metadata map
 * @param entityNameToClassMap the entity name to class map
 * @param keyDiscriptor
 * @param persistence unit the persistence unit.
 * @throws IOException Signals that an I/O exception has occurred.
 */
private List<Class<?>> scanClassAndPutMetadata(InputStream bits,Reader reader,Map<String,EntityMetadata> entityMetadataMap,Map<String,Class<?>> entityNameToClassMap,String persistenceUnit,String client,Map<String,List<String>> clazzToPuMap,Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap) throws IOException {
  DataInputStream dstream=new DataInputStream(new BufferedInputStream(bits));
  ClassFile cf=null;
  String className=null;
  List<Class<?>> classes=new ArrayList<Class<?>>();
  try {
    cf=new ClassFile(dstream);
    className=cf.getName();
    List<String> annotations=new ArrayList<String>();
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.visibleTag));
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.invisibleTag));
    for (    String validAnn : reader.getValidAnnotations()) {
      if (annotations.contains(validAnn)) {
        Class<?> clazz=this.getClass().getClassLoader().loadClass(className);
        if (entityNameToClassMap.containsKey(clazz.getSimpleName()) && !entityNameToClassMap.get(clazz.getSimpleName()).getName().equals(clazz.getName())) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityNameToClassMap.get(clazz.getSimpleName()).getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ persistenceUnit);
        }
        entityNameToClassMap.put(clazz.getSimpleName(),clazz);
        EntityMetadata metadata=entityMetadataMap.get(clazz);
        if (null == metadata) {
          log.debug(""String_Node_Str"" + clazz.getName());
synchronized (clazz) {
            if (null == metadata) {
              MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,client,KunderaCoreUtils.getExternalProperties(persistenceUnit,externalProperyMap,persistenceUnits));
              metadata=metadataBuilder.buildEntityMetadata(clazz);
              if (metadata != null) {
                entityMetadataMap.put(clazz.getName(),metadata);
                mapClazztoPu(clazz,persistenceUnit,clazzToPuMap);
                processGeneratedValueAnnotation(clazz,persistenceUnit,metadata,entityNameToKeyDiscriptorMap);
              }
            }
          }
        }
        onValidateClientProperties(classes,clazz,persistenceUnit);
      }
    }
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + className + ""String_Node_Str"");
  }
 finally {
    dstream.close();
    bits.close();
  }
  return classes;
}",0.9934324230902176
176540,"/** 
 * Find persistence meta data. Loads configured persistence.xml and load all provided configurations within persistence meta data as per @see JPA 2.0 specifications.
 * @return the list configure persistence unit meta data.
 */
private Map<String,PersistenceUnitMetadata> findPersistenceMetadatas() throws InvalidConfigurationException {
  Enumeration<URL> xmls=null;
  try {
    xmls=Thread.currentThread().getContextClassLoader().getResources(""String_Node_Str"");
  }
 catch (  IOException ioex) {
    log.warn(""String_Node_Str"" + ioex.getMessage());
  }
  if (xmls == null || !xmls.hasMoreElements()) {
    log.info(""String_Node_Str"" + ""String_Node_Str"");
    throw new InvalidConfigurationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Set<String> persistenceUnitNames=new HashSet<String>();
  Map<String,PersistenceUnitMetadata> persistenceUnitMap=new HashMap<String,PersistenceUnitMetadata>();
  while (xmls.hasMoreElements()) {
    URL url=xmls.nextElement();
    log.trace(""String_Node_Str"" + url);
    List<PersistenceUnitMetadata> metadataFiles=PersistenceXMLLoader.findPersistenceUnits(url,PersistenceUnitTransactionType.RESOURCE_LOCAL);
    for (    PersistenceUnitMetadata metadata : metadataFiles) {
      if (persistenceUnitNames.contains(metadata.getPersistenceUnitName())) {
        if (log.isWarnEnabled()) {
          log.warn(""String_Node_Str"" + metadata.getPersistenceUnitName() + ""String_Node_Str"");
        }
      }
      if (metadata.getPersistenceProviderClassName() == null || PROVIDER_IMPLEMENTATION_NAME.equalsIgnoreCase(metadata.getPersistenceProviderClassName())) {
        persistenceUnitMap.put(metadata.getPersistenceUnitName(),metadata);
      }
      persistenceUnitNames.add(metadata.getPersistenceUnitName());
    }
  }
  return persistenceUnitMap;
}","/** 
 * Find persistence meta data. Loads configured persistence.xml and load all provided configurations within persistence meta data as per @see JPA 2.0 specifications.
 * @return the list configure persistence unit meta data.
 */
private Map<String,PersistenceUnitMetadata> findPersistenceMetadatas() throws InvalidConfigurationException {
  Enumeration<URL> xmls=null;
  try {
    xmls=this.getClass().getClassLoader().getResources(""String_Node_Str"");
  }
 catch (  IOException ioex) {
    log.warn(""String_Node_Str"" + ioex.getMessage());
  }
  if (xmls == null || !xmls.hasMoreElements()) {
    log.info(""String_Node_Str"" + ""String_Node_Str"");
    throw new InvalidConfigurationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Set<String> persistenceUnitNames=new HashSet<String>();
  Map<String,PersistenceUnitMetadata> persistenceUnitMap=new HashMap<String,PersistenceUnitMetadata>();
  while (xmls.hasMoreElements()) {
    URL url=xmls.nextElement();
    log.trace(""String_Node_Str"" + url);
    List<PersistenceUnitMetadata> metadataFiles=PersistenceXMLLoader.findPersistenceUnits(url,PersistenceUnitTransactionType.RESOURCE_LOCAL);
    for (    PersistenceUnitMetadata metadata : metadataFiles) {
      if (persistenceUnitNames.contains(metadata.getPersistenceUnitName())) {
        if (log.isWarnEnabled()) {
          log.warn(""String_Node_Str"" + metadata.getPersistenceUnitName() + ""String_Node_Str"");
        }
      }
      if (metadata.getPersistenceProviderClassName() == null || PROVIDER_IMPLEMENTATION_NAME.equalsIgnoreCase(metadata.getPersistenceProviderClassName())) {
        persistenceUnitMap.put(metadata.getPersistenceUnitName(),metadata);
      }
      persistenceUnitNames.add(metadata.getPersistenceUnitName());
    }
  }
  return persistenceUnitMap;
}",0.9894091415830546
176541,"@Override public ClassLoader getClassLoader(){
  return Thread.currentThread().getContextClassLoader();
}","@Override public ClassLoader getClassLoader(){
  return this.getClass().getClassLoader();
}",0.826530612244898
176542,"/** 
 * Loads class with className using classLoader.
 * @param className the class name
 * @param classLoader the class loader
 * @return the class
 */
public static Class<?> classForName(String className,ClassLoader classLoader){
  try {
    Class<?> c=null;
    try {
      c=Class.forName(className,true,Thread.currentThread().getContextClassLoader());
    }
 catch (    ClassNotFoundException e) {
      try {
        c=Class.forName(className);
      }
 catch (      ClassNotFoundException e1) {
        if (classLoader == null) {
          throw e1;
        }
 else {
          c=classLoader.loadClass(className);
        }
      }
    }
    return c;
  }
 catch (  ClassNotFoundException e) {
    throw new KunderaException(e);
  }
}","/** 
 * Loads class with className using classLoader.
 * @param className the class name
 * @param classLoader the class loader
 * @return the class
 */
public static Class<?> classForName(String className,ClassLoader classLoader){
  try {
    Class<?> c=null;
    try {
      c=Class.forName(className,true,ReflectUtils.class.getClassLoader());
    }
 catch (    ClassNotFoundException e) {
      try {
        c=Class.forName(className);
      }
 catch (      ClassNotFoundException e1) {
        if (classLoader == null) {
          throw e1;
        }
 else {
          c=classLoader.loadClass(className);
        }
      }
    }
    return c;
  }
 catch (  ClassNotFoundException e) {
    throw new KunderaException(e);
  }
}",0.9707681849082256
176543,"@BeforeClass public static void setUp() throws Exception {
  Enumeration<URL> xmls=Thread.currentThread().getContextClassLoader().getResources(""String_Node_Str"");
  while (xmls.hasMoreElements()) {
    metadatas=PersistenceXMLLoader.findPersistenceUnits(xmls.nextElement());
  }
}","@BeforeClass public static void setUp() throws Exception {
  Enumeration<URL> xmls=PersistenceUnitMetadata.class.getClassLoader().getResources(""String_Node_Str"");
  while (xmls.hasMoreElements()) {
    metadatas=PersistenceXMLLoader.findPersistenceUnits(xmls.nextElement());
  }
}",0.8964285714285715
176544,"/** 
 * Test method on persistence unit loading.
 */
@Test public void testLoadPersistenceUnitLoading(){
  try {
    Enumeration<URL> xmls=Thread.currentThread().getContextClassLoader().getResources(""String_Node_Str"");
    while (xmls.hasMoreElements()) {
      final String _pattern=""String_Node_Str"";
      List<PersistenceUnitMetadata> metadatas=PersistenceXMLLoader.findPersistenceUnits(xmls.nextElement());
      Assert.assertNotNull(metadatas);
      Assert.assertEquals(4,metadatas.size());
      Assert.assertEquals(50,metadatas.get(0).getClasses().size());
      Assert.assertNotNull(metadatas.get(0).getPersistenceUnitRootUrl());
      Assert.assertTrue(metadatas.get(0).getPersistenceUnitRootUrl().getPath().endsWith(_pattern));
    }
  }
 catch (  IOException ioex) {
    log.error(ioex.getMessage());
    Assert.fail();
  }
catch (  Exception e) {
    log.error(e.getMessage());
    Assert.fail();
  }
}","/** 
 * Test method on persistence unit loading.
 */
@Test public void testLoadPersistenceUnitLoading(){
  try {
    Enumeration<URL> xmls=this.getClass().getClassLoader().getResources(""String_Node_Str"");
    while (xmls.hasMoreElements()) {
      final String _pattern=""String_Node_Str"";
      List<PersistenceUnitMetadata> metadatas=PersistenceXMLLoader.findPersistenceUnits(xmls.nextElement());
      Assert.assertNotNull(metadatas);
      Assert.assertEquals(4,metadatas.size());
      Assert.assertEquals(50,metadatas.get(0).getClasses().size());
      Assert.assertNotNull(metadatas.get(0).getPersistenceUnitRootUrl());
      Assert.assertTrue(metadatas.get(0).getPersistenceUnitRootUrl().getPath().endsWith(_pattern));
    }
  }
 catch (  IOException ioex) {
    log.error(ioex.getMessage());
    Assert.fail();
  }
catch (  Exception e) {
    log.error(e.getMessage());
    Assert.fail();
  }
}",0.9790979097909792
176545,"/** 
 * Constructor parameterised with persistence units.
 * @param persistenceUnits persistence units.
 */
public ClientFactoryConfiguraton(Map puProperties,String... persistenceUnits){
  this.persistenceUnits=persistenceUnits;
  this.externalProperties=puProperties;
}","/** 
 * Constructor parameterised with persistence units.
 * @param persistenceUnits persistence units.
 */
public ClientFactoryConfiguraton(Map externalProperties,String... persistenceUnits){
  super(persistenceUnits,externalProperties);
}",0.807843137254902
176546,"@Override public void configure(){
  for (  String pu : persistenceUnits) {
    log.info(""String_Node_Str"" + pu);
    Map<String,Object> puProperty=KunderaCoreUtils.getExternalProperties(pu,externalProperties,persistenceUnits);
    ClientResolver.getClientFactory(pu,puProperty).load(pu,puProperty);
  }
}","@Override public void configure(){
  for (  String pu : persistenceUnits) {
    log.info(""String_Node_Str"" + pu);
    Map<String,Object> puProperty=KunderaCoreUtils.getExternalProperties(pu,externalPropertyMap,persistenceUnits);
    ClientResolver.getClientFactory(pu,puProperty).load(pu,puProperty);
  }
}",0.9885433715220948
176547,"/** 
 * Configures and load meta-information for parameterised persistence units.
 */
void configure();","/** 
 * Configures and load meta-information for parameterized persistence units.
 */
void configure();",0.9902912621359224
176548,"/** 
 * Constructor using persistence units as parameter.
 * @param persistenceUnits persistence units.
 */
public MetamodelConfiguration(Map properties,String... persistenceUnits){
  this.persistenceUnits=persistenceUnits;
  this.externalProperyMap=properties;
}","/** 
 * Constructor using persistence units as parameter.
 * @param persistenceUnits persistence units.
 */
public MetamodelConfiguration(Map properties,String... persistenceUnits){
  super(persistenceUnits,properties);
}",0.8388429752066116
176549,"/** 
 * Scan class and put metadata.
 * @param bits the bits
 * @param reader the reader
 * @param entityMetadataMap the entity metadata map
 * @param entityNameToClassMap the entity name to class map
 * @param keyDiscriptor
 * @param persistence unit the persistence unit.
 * @throws IOException Signals that an I/O exception has occurred.
 */
private List<Class<?>> scanClassAndPutMetadata(InputStream bits,Reader reader,Map<String,EntityMetadata> entityMetadataMap,Map<String,Class<?>> entityNameToClassMap,String persistenceUnit,String client,Map<String,List<String>> clazzToPuMap,Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap) throws IOException {
  DataInputStream dstream=new DataInputStream(new BufferedInputStream(bits));
  ClassFile cf=null;
  String className=null;
  List<Class<?>> classes=new ArrayList<Class<?>>();
  try {
    cf=new ClassFile(dstream);
    className=cf.getName();
    List<String> annotations=new ArrayList<String>();
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.visibleTag));
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.invisibleTag));
    for (    String validAnn : reader.getValidAnnotations()) {
      if (annotations.contains(validAnn)) {
        Class<?> clazz=this.getClass().getClassLoader().loadClass(className);
        if (entityNameToClassMap.containsKey(clazz.getSimpleName()) && !entityNameToClassMap.get(clazz.getSimpleName()).getName().equals(clazz.getName())) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityNameToClassMap.get(clazz.getSimpleName()).getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ persistenceUnit);
        }
        entityNameToClassMap.put(clazz.getSimpleName(),clazz);
        EntityMetadata metadata=entityMetadataMap.get(clazz);
        if (null == metadata) {
          log.debug(""String_Node_Str"" + clazz.getName());
synchronized (clazz) {
            if (null == metadata) {
              MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,client,KunderaCoreUtils.getExternalProperties(persistenceUnit,externalProperyMap,persistenceUnits));
              metadata=metadataBuilder.buildEntityMetadata(clazz);
              if (metadata != null) {
                entityMetadataMap.put(clazz.getName(),metadata);
                mapClazztoPu(clazz,persistenceUnit,clazzToPuMap);
                processGeneratedValueAnnotation(clazz,persistenceUnit,metadata,entityNameToKeyDiscriptorMap);
              }
            }
          }
        }
        onValidateClientProperties(classes,clazz,persistenceUnit);
      }
    }
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + className + ""String_Node_Str"");
  }
 finally {
    dstream.close();
    bits.close();
  }
  return classes;
}","/** 
 * Scan class and put metadata.
 * @param bits the bits
 * @param reader the reader
 * @param entityMetadataMap the entity metadata map
 * @param entityNameToClassMap the entity name to class map
 * @param keyDiscriptor
 * @param persistence unit the persistence unit.
 * @throws IOException Signals that an I/O exception has occurred.
 */
private List<Class<?>> scanClassAndPutMetadata(InputStream bits,Reader reader,Map<String,EntityMetadata> entityMetadataMap,Map<String,Class<?>> entityNameToClassMap,String persistenceUnit,String client,Map<String,List<String>> clazzToPuMap,Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap) throws IOException {
  DataInputStream dstream=new DataInputStream(new BufferedInputStream(bits));
  ClassFile cf=null;
  String className=null;
  List<Class<?>> classes=new ArrayList<Class<?>>();
  try {
    cf=new ClassFile(dstream);
    className=cf.getName();
    List<String> annotations=new ArrayList<String>();
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.visibleTag));
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.invisibleTag));
    for (    String validAnn : reader.getValidAnnotations()) {
      if (annotations.contains(validAnn)) {
        Class<?> clazz=this.getClass().getClassLoader().loadClass(className);
        if (entityNameToClassMap.containsKey(clazz.getSimpleName()) && !entityNameToClassMap.get(clazz.getSimpleName()).getName().equals(clazz.getName())) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityNameToClassMap.get(clazz.getSimpleName()).getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ persistenceUnit);
        }
        entityNameToClassMap.put(clazz.getSimpleName(),clazz);
        EntityMetadata metadata=entityMetadataMap.get(clazz);
        if (null == metadata) {
          log.debug(""String_Node_Str"" + clazz.getName());
synchronized (clazz) {
            if (null == metadata) {
              MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,client,KunderaCoreUtils.getExternalProperties(persistenceUnit,externalPropertyMap,persistenceUnits));
              metadata=metadataBuilder.buildEntityMetadata(clazz);
              if (metadata != null) {
                entityMetadataMap.put(clazz.getName(),metadata);
                mapClazztoPu(clazz,persistenceUnit,clazzToPuMap);
                processGeneratedValueAnnotation(clazz,persistenceUnit,metadata,entityNameToKeyDiscriptorMap);
              }
            }
          }
        }
        onValidateClientProperties(classes,clazz,persistenceUnit);
      }
    }
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + className + ""String_Node_Str"");
  }
 finally {
    dstream.close();
    bits.close();
  }
  return classes;
}",0.999826779837173
176550,"/** 
 * Load entity metadata.
 * @param persistenceUnit the persistence unit
 */
private void loadEntityMetadata(String persistenceUnit){
  if (persistenceUnit == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + persistenceUnit);
  }
  KunderaMetadata kunderaMetadata=KunderaMetadata.INSTANCE;
  Map<String,PersistenceUnitMetadata> persistentUnitMetadataMap=kunderaMetadata.getApplicationMetadata().getPersistenceUnitMetadataMap();
  List<String> classesToScan;
  URL[] resources=null;
  String client=null;
  List<URL> managedURLs=null;
  if (persistentUnitMetadataMap == null || persistentUnitMetadataMap.isEmpty()) {
    log.error(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
    throw new MetamodelLoaderException(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
  }
 else {
    PersistenceUnitMetadata puMetadata=persistentUnitMetadataMap.get(persistenceUnit);
    classesToScan=puMetadata.getManagedClassNames();
    managedURLs=puMetadata.getManagedURLs();
    Map<String,Object> externalProperties=KunderaCoreUtils.getExternalProperties(persistenceUnit,externalProperyMap,persistenceUnits);
    client=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_CLIENT_FACTORY) : null;
    if (client == null) {
      client=puMetadata.getClient();
    }
  }
  Reader reader;
  ApplicationMetadata appMetadata=kunderaMetadata.getApplicationMetadata();
  if (classesToScan == null || classesToScan.isEmpty()) {
    log.info(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
    if (appMetadata.getMetamodelMap().get(persistenceUnit) != null) {
      log.info(""String_Node_Str"");
      return;
    }
    reader=new ClasspathReader();
  }
 else {
    reader=new ClasspathReader(classesToScan);
  }
  URL[] managedClasses=reader.findResources();
  if (managedClasses != null) {
    List<URL> managedResources=Arrays.asList(managedClasses);
    managedURLs.addAll(managedResources);
  }
  if (managedURLs != null) {
    resources=managedURLs.toArray(new URL[]{});
  }
  reader.addValidAnnotations(Entity.class.getName());
  Metamodel metamodel=appMetadata.getMetamodel(persistenceUnit);
  if (metamodel == null) {
    metamodel=new MetamodelImpl();
  }
  Map<String,EntityMetadata> entityMetadataMap=((MetamodelImpl)metamodel).getEntityMetadataMap();
  Map<String,Class<?>> entityNameToClassMap=((MetamodelImpl)metamodel).getEntityNameToClassMap();
  Map<String,List<String>> puToClazzMap=new HashMap<String,List<String>>();
  Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap=new HashMap<String,IdDiscriptor>();
  List<Class<?>> classes=new ArrayList<Class<?>>();
  if (resources != null) {
    for (    URL resource : resources) {
      try {
        ResourceIterator itr=reader.getResourceIterator(resource,reader.getFilter());
        InputStream is=null;
        while ((is=itr.next()) != null) {
          classes.addAll(scanClassAndPutMetadata(is,reader,entityMetadataMap,entityNameToClassMap,persistenceUnit,client,puToClazzMap,entityNameToKeyDiscriptorMap));
        }
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"",e);
        throw new MetamodelLoaderException(""String_Node_Str"");
      }
    }
  }
  ((MetamodelImpl)metamodel).setEntityMetadataMap(entityMetadataMap);
  appMetadata.getMetamodelMap().put(persistenceUnit,metamodel);
  appMetadata.setClazzToPuMap(puToClazzMap);
  ((MetamodelImpl)metamodel).addKeyValues(entityNameToKeyDiscriptorMap);
  ((MetamodelImpl)metamodel).assignEmbeddables(KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getEmbeddables());
  ((MetamodelImpl)metamodel).assignManagedTypes(KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getManagedTypes());
  ((MetamodelImpl)metamodel).assignMappedSuperClass(KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  validateEntityForClientSpecificProperty(classes,persistenceUnit);
}","/** 
 * Load entity metadata.
 * @param persistenceUnit the persistence unit
 */
private void loadEntityMetadata(String persistenceUnit){
  if (persistenceUnit == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + persistenceUnit);
  }
  KunderaMetadata kunderaMetadata=KunderaMetadata.INSTANCE;
  Map<String,PersistenceUnitMetadata> persistentUnitMetadataMap=kunderaMetadata.getApplicationMetadata().getPersistenceUnitMetadataMap();
  List<String> classesToScan;
  URL[] resources=null;
  String client=null;
  List<URL> managedURLs=null;
  if (persistentUnitMetadataMap == null || persistentUnitMetadataMap.isEmpty()) {
    log.error(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
    throw new MetamodelLoaderException(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
  }
 else {
    PersistenceUnitMetadata puMetadata=persistentUnitMetadataMap.get(persistenceUnit);
    classesToScan=puMetadata.getManagedClassNames();
    managedURLs=puMetadata.getManagedURLs();
    Map<String,Object> externalProperties=KunderaCoreUtils.getExternalProperties(persistenceUnit,externalPropertyMap,persistenceUnits);
    client=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_CLIENT_FACTORY) : null;
    if (client == null) {
      client=puMetadata.getClient();
    }
  }
  Reader reader;
  ApplicationMetadata appMetadata=kunderaMetadata.getApplicationMetadata();
  if (classesToScan == null || classesToScan.isEmpty()) {
    log.info(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
    if (appMetadata.getMetamodelMap().get(persistenceUnit) != null) {
      log.info(""String_Node_Str"");
      return;
    }
    reader=new ClasspathReader();
  }
 else {
    reader=new ClasspathReader(classesToScan);
  }
  URL[] managedClasses=reader.findResources();
  if (managedClasses != null) {
    List<URL> managedResources=Arrays.asList(managedClasses);
    managedURLs.addAll(managedResources);
  }
  if (managedURLs != null) {
    resources=managedURLs.toArray(new URL[]{});
  }
  reader.addValidAnnotations(Entity.class.getName());
  Metamodel metamodel=appMetadata.getMetamodel(persistenceUnit);
  if (metamodel == null) {
    metamodel=new MetamodelImpl();
  }
  Map<String,EntityMetadata> entityMetadataMap=((MetamodelImpl)metamodel).getEntityMetadataMap();
  Map<String,Class<?>> entityNameToClassMap=((MetamodelImpl)metamodel).getEntityNameToClassMap();
  Map<String,List<String>> puToClazzMap=new HashMap<String,List<String>>();
  Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap=new HashMap<String,IdDiscriptor>();
  List<Class<?>> classes=new ArrayList<Class<?>>();
  if (resources != null) {
    for (    URL resource : resources) {
      try {
        ResourceIterator itr=reader.getResourceIterator(resource,reader.getFilter());
        InputStream is=null;
        while ((is=itr.next()) != null) {
          classes.addAll(scanClassAndPutMetadata(is,reader,entityMetadataMap,entityNameToClassMap,persistenceUnit,client,puToClazzMap,entityNameToKeyDiscriptorMap));
        }
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"",e);
        throw new MetamodelLoaderException(""String_Node_Str"");
      }
    }
  }
  ((MetamodelImpl)metamodel).setEntityMetadataMap(entityMetadataMap);
  appMetadata.getMetamodelMap().put(persistenceUnit,metamodel);
  appMetadata.setClazzToPuMap(puToClazzMap);
  ((MetamodelImpl)metamodel).addKeyValues(entityNameToKeyDiscriptorMap);
  ((MetamodelImpl)metamodel).assignEmbeddables(KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getEmbeddables());
  ((MetamodelImpl)metamodel).assignManagedTypes(KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getManagedTypes());
  ((MetamodelImpl)metamodel).assignMappedSuperClass(KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  validateEntityForClientSpecificProperty(classes,persistenceUnit);
}",0.9998756373585376
176551,"/** 
 * @param resources
 * @param reader
 * @throws IOException
 * @throws ClassNotFoundException
 */
private void validateEntityForClientSpecificProperty(List<Class<?>> classes,final String persistenceUnit){
  for (  Class clazz : classes) {
    String pu=getPersistenceUnitOfEntity(clazz);
    EntityValidator validator=new EntityValidatorImpl(KunderaCoreUtils.getExternalProperties(persistenceUnit,externalProperyMap,persistenceUnits));
    if (clazz.isAnnotationPresent(Entity.class) && clazz.isAnnotationPresent(Table.class) && persistenceUnit.equalsIgnoreCase(pu)) {
      validator.validateEntity(clazz);
    }
  }
}","/** 
 * @param resources
 * @param reader
 * @throws IOException
 * @throws ClassNotFoundException
 */
private void validateEntityForClientSpecificProperty(List<Class<?>> classes,final String persistenceUnit){
  for (  Class clazz : classes) {
    String pu=getPersistenceUnitOfEntity(clazz);
    EntityValidator validator=new EntityValidatorImpl(KunderaCoreUtils.getExternalProperties(persistenceUnit,externalPropertyMap,persistenceUnits));
    if (clazz.isAnnotationPresent(Entity.class) && clazz.isAnnotationPresent(Table.class) && persistenceUnit.equalsIgnoreCase(pu)) {
      validator.validateEntity(clazz);
    }
  }
}",0.99919935948759
176552,"/** 
 * Constructor parameterised with persistence units.
 * @param persistenceUnits persistence units.
 */
public PersistenceUnitConfiguration(String... persistenceUnits){
  this.persistenceUnits=persistenceUnits;
}","/** 
 * Constructor parameterised with persistence units.
 * @param persistenceUnits persistence units.
 */
public PersistenceUnitConfiguration(String... persistenceUnits){
  super(persistenceUnits,null);
}",0.8436018957345972
176553,"/** 
 * Constructor using persistence units as parameter.
 * @param persistenceUnits persistence units.
 */
public SchemaConfiguration(Map externalProperties,String... persistenceUnits){
  this.persistenceUnits=persistenceUnits;
  this.externalPropertyMap=externalProperties;
}","/** 
 * Constructor using persistence units as parameter.
 * @param persistenceUnits persistence units.
 */
public SchemaConfiguration(Map externalProperties,String... persistenceUnits){
  super(persistenceUnits,externalProperties);
}",0.87279843444227
176554,"/** 
 * On insert cassandra.
 * @throws Exception the exception
 */
@Test public void onInsertCassandra() throws Exception {
  Object p1=prepareData(""String_Node_Str"",10);
  Object p2=prepareData(""String_Node_Str"",20);
  Object p3=prepareData(""String_Node_Str"",15);
  Query findQuery=em.createQuery(""String_Node_Str"",PersonCassandra.class);
  List<PersonCassandra> allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  PersonCassandra personWithKey=new PersonCassandra();
  personWithKey.setPersonId(""String_Node_Str"");
  em.persist(personWithKey);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  em.clear();
  PersonCassandra p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  Assert.assertEquals(Day.THURSDAY,p.getDay());
  em.clear();
  String qry=""String_Node_Str"";
  Query q=em.createQuery(qry);
  List<PersonCassandra> persons=q.getResultList();
  assertFindByName(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAge(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeGTAndLT(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeBetween(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByRange(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindWithoutWhereClause(em,""String_Node_Str"",PersonCassandra.class);
  testCountResult();
  for (  PersonCassandra person : persons) {
    person.setPersonName(""String_Node_Str"");
    em.merge(person);
  }
  em.clear();
  selectIdQuery();
  em.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String updateQuery=""String_Node_Str"";
  q=em.createQuery(updateQuery);
  q.executeUpdate();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String deleteQuery=""String_Node_Str"";
  q=em.createQuery(deleteQuery);
  Assert.assertEquals(3,q.executeUpdate());
}","/** 
 * On insert cassandra.
 * @throws Exception the exception
 */
@Test public void onInsertCassandra() throws Exception {
  Object p1=prepareData(""String_Node_Str"",10);
  Object p2=prepareData(""String_Node_Str"",20);
  Object p3=prepareData(""String_Node_Str"",15);
  Query findQuery=em.createQuery(""String_Node_Str"",PersonCassandra.class);
  List<PersonCassandra> allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  PersonCassandra personWithKey=new PersonCassandra();
  personWithKey.setPersonId(""String_Node_Str"");
  em.persist(personWithKey);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  em.clear();
  PersonCassandra p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  Assert.assertEquals(Day.THURSDAY,p.getDay());
  em.clear();
  String qry=""String_Node_Str"";
  Query q=em.createQuery(qry);
  List<PersonCassandra> persons=q.getResultList();
  assertFindByName(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAge(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeGTAndLT(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeBetween(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByRange(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindWithoutWhereClause(em,""String_Node_Str"",PersonCassandra.class);
  for (  PersonCassandra person : persons) {
    person.setPersonName(""String_Node_Str"");
    em.merge(person);
  }
  em.clear();
  selectIdQuery();
  em.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String updateQuery=""String_Node_Str"";
  q=em.createQuery(updateQuery);
  q.executeUpdate();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  testCountResult();
  String deleteQuery=""String_Node_Str"";
  q=em.createQuery(deleteQuery);
  Assert.assertEquals(3,q.executeUpdate());
}",0.9926393270241852
176555,"private void testCountResult(){
  Map<String,Client> clientMap=(Map<String,Client>)em.getDelegate();
  ThriftClient tc=(ThriftClient)clientMap.get(SEC_IDX_CASSANDRA_TEST);
  tc.setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  CQLTranslator translator=new CQLTranslator();
  String query=""String_Node_Str"" + translator.ensureCase(new StringBuilder(),""String_Node_Str"").toString();
  Query q=em.createNativeQuery(query,PersonCassandra.class);
  List noOfRows=q.getResultList();
  Assert.assertEquals(new Long(3),PropertyAccessorHelper.getObject(Long.class,((Column)noOfRows.get(0)).getValue()));
  Assert.assertEquals(""String_Node_Str"",PropertyAccessorHelper.getObject(String.class,((Column)noOfRows.get(0)).getName()));
}","private void testCountResult(){
  Map<String,Client> clientMap=(Map<String,Client>)em.getDelegate();
  ThriftClient tc=(ThriftClient)clientMap.get(SEC_IDX_CASSANDRA_TEST);
  tc.setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  CQLTranslator translator=new CQLTranslator();
  String query=""String_Node_Str"" + translator.ensureCase(new StringBuilder(),""String_Node_Str"").toString();
  Query q=em.createNativeQuery(query,PersonCassandra.class);
  List noOfRows=q.getResultList();
  Assert.assertEquals(new Long(3),PropertyAccessorHelper.getObject(Long.class,((Column)noOfRows.get(0)).getValue()));
  Assert.assertEquals(""String_Node_Str"",PropertyAccessorHelper.getObject(String.class,((Column)noOfRows.get(0)).getName()));
  tc.setCqlVersion(CassandraConstants.CQL_VERSION_2_0);
}",0.9627659574468084
176556,"@Test public void onAddColumn() throws Exception {
  String cql_Query=""String_Node_Str"" + ""String_Node_Str"";
  executeScript(cql_Query);
  emf=Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  onCRUD(em,key);
  em=emf.createEntityManager();
  CassandraPrimeUser result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  em.remove(result);
  em.flush();
  em.close();
  em=emf.createEntityManager();
  result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNull(result);
  em.close();
}","@Test public void onAddColumn() throws Exception {
  String cql_Query=""String_Node_Str"" + ""String_Node_Str"";
  executeScript(cql_Query);
  emf=Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  onCRUD(em,key);
  em=emf.createEntityManager();
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  CassandraPrimeUser result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  em.remove(result);
  em.flush();
  em.close();
  em=emf.createEntityManager();
  clients=(Map<String,Client>)em.getDelegate();
  client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNull(result);
  em.close();
}",0.8188720173535792
176557,"@Test public void onAlterColumnType() throws Exception {
  String cql_Query=""String_Node_Str"" + ""String_Node_Str"";
  executeScript(cql_Query);
  emf=Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  onCRUD(em,key);
  em=emf.createEntityManager();
  CassandraPrimeUser result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.remove(result);
  em.flush();
  em.close();
  em=emf.createEntityManager();
  result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNull(result);
  em.close();
}","@Test public void onAlterColumnType() throws Exception {
  String cql_Query=""String_Node_Str"" + ""String_Node_Str"";
  executeScript(cql_Query);
  emf=Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  onCRUD(em,key);
  em=emf.createEntityManager();
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  CassandraPrimeUser result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.remove(result);
  em.flush();
  em.close();
  em=emf.createEntityManager();
  clients=(Map<String,Client>)em.getDelegate();
  client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNull(result);
  em.close();
}",0.8227176220806794
176558,"@Test public void onCRUD(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  CassandraEmbeddedAssociation timeLine=new CassandraEmbeddedAssociation(key);
  timeLine.setTweetBody(""String_Node_Str"");
  timeLine.setTweetDate(new Date());
  UserInfo userInfo=new UserInfo(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",31);
  timeLine.setUserInfo(userInfo);
  em.persist(timeLine);
  em.clear();
  CassandraEmbeddedAssociation result=em.find(CassandraEmbeddedAssociation.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(currentDate,result.getTweetDate());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(""String_Node_Str"",result.getUserInfo().getFirstName());
  Assert.assertEquals(31,result.getUserInfo().getAge());
  result.getUserInfo().setFirstName(""String_Node_Str"");
  result.getUserInfo().setAge(23);
  em.merge(result);
  em.clear();
  result=null;
  result=em.find(CassandraEmbeddedAssociation.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(currentDate,result.getTweetDate());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(""String_Node_Str"",result.getUserInfo().getFirstName());
  Assert.assertEquals(23,result.getUserInfo().getAge());
  em.remove(result);
  em.clear();
  result=em.find(CassandraEmbeddedAssociation.class,key);
  Assert.assertNull(result);
}","@Test public void onCRUD(){
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(""String_Node_Str"");
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  CassandraEmbeddedAssociation timeLine=new CassandraEmbeddedAssociation(key);
  timeLine.setTweetBody(""String_Node_Str"");
  timeLine.setTweetDate(new Date());
  UserInfo userInfo=new UserInfo(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",31);
  timeLine.setUserInfo(userInfo);
  em.persist(timeLine);
  em.clear();
  CassandraEmbeddedAssociation result=em.find(CassandraEmbeddedAssociation.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(currentDate,result.getTweetDate());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(""String_Node_Str"",result.getUserInfo().getFirstName());
  Assert.assertEquals(31,result.getUserInfo().getAge());
  result.getUserInfo().setFirstName(""String_Node_Str"");
  result.getUserInfo().setAge(23);
  em.merge(result);
  em.clear();
  result=null;
  result=em.find(CassandraEmbeddedAssociation.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(currentDate,result.getTweetDate());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(""String_Node_Str"",result.getUserInfo().getFirstName());
  Assert.assertEquals(23,result.getUserInfo().getAge());
  em.remove(result);
  em.clear();
  result=em.find(CassandraEmbeddedAssociation.class,key);
  Assert.assertNull(result);
}",0.9445974900520356
176559,"@Test public void onQuery(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  CassandraEmbeddedAssociation timeLine=new CassandraEmbeddedAssociation(key);
  timeLine.setTweetBody(""String_Node_Str"");
  timeLine.setTweetDate(new Date());
  UserInfo userInfo=new UserInfo(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",31);
  timeLine.setUserInfo(userInfo);
  em.persist(timeLine);
  em.clear();
  final String noClause=""String_Node_Str"";
  Query query=em.createQuery(noClause);
  List<CassandraEmbeddedAssociation> results=query.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getUserInfo().getFirstName());
  Assert.assertEquals(31,results.get(0).getUserInfo().getAge());
  em.remove(timeLine);
  em.clear();
  UserInfo user_Info=em.find(UserInfo.class,""String_Node_Str"");
  Assert.assertNull(user_Info);
}","@Test public void onQuery(){
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(""String_Node_Str"");
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  CassandraEmbeddedAssociation timeLine=new CassandraEmbeddedAssociation(key);
  timeLine.setTweetBody(""String_Node_Str"");
  timeLine.setTweetDate(new Date());
  UserInfo userInfo=new UserInfo(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",31);
  timeLine.setUserInfo(userInfo);
  em.persist(timeLine);
  em.clear();
  final String noClause=""String_Node_Str"";
  Query query=em.createQuery(noClause);
  List<CassandraEmbeddedAssociation> results=query.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getUserInfo().getFirstName());
  Assert.assertEquals(31,results.get(0).getUserInfo().getAge());
  em.remove(timeLine);
  em.clear();
  UserInfo user_Info=em.find(UserInfo.class,""String_Node_Str"");
  Assert.assertNull(user_Info);
}",0.9214750542299348
176560,"/** 
 * Test.
 */
@Test public void test(){
  EntityManagerFactoryImpl emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  CassandraEntitySample entity=new CassandraEntitySample();
  entity.setKey(""String_Node_Str"");
  entity.setFull_name(""String_Node_Str"");
  entity.setState(""String_Node_Str"");
  em.persist(entity);
  CassandraEntitySample findEntity=em.find(CassandraEntitySample.class,123);
  Assert.assertNotNull(findEntity);
  Assert.assertEquals(""String_Node_Str"",findEntity.getKey());
  Assert.assertEquals(""String_Node_Str"",findEntity.getFull_name());
  Assert.assertEquals(""String_Node_Str"",findEntity.getState());
  Assert.assertNull(findEntity.getBirth_date());
}","/** 
 * Test.
 */
@Test public void test(){
  EntityManagerFactoryImpl emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  CassandraEntitySample entity=new CassandraEntitySample();
  entity.setKey(""String_Node_Str"");
  entity.setFull_name(""String_Node_Str"");
  entity.setState(""String_Node_Str"");
  em.persist(entity);
  CassandraEntitySample findEntity=em.find(CassandraEntitySample.class,123);
  Assert.assertNotNull(findEntity);
  Assert.assertEquals(""String_Node_Str"",findEntity.getKey());
  Assert.assertEquals(""String_Node_Str"",findEntity.getFull_name());
  Assert.assertEquals(""String_Node_Str"",findEntity.getState());
  Assert.assertNull(findEntity.getBirth_date());
  emf.close();
}",0.9894440534834624
176561,"@Test public void testUpdate(){
  EntityManager em=getEntityManagerFactory().createEntityManager();
  CassandraEntitySample entity=new CassandraEntitySample();
  entity.setBirth_date(new Integer(100112));
  entity.setFull_name(""String_Node_Str"");
  entity.setKey(""String_Node_Str"");
  entity.setState(""String_Node_Str"");
  em.persist(entity);
  String updateQuery=""String_Node_Str"";
  Query q=em.createQuery(updateQuery);
  q.executeUpdate();
  CassandraEntitySample result=em.find(CassandraEntitySample.class,""String_Node_Str"");
  Assert.assertNotNull(result);
  String deleteQuery=""String_Node_Str"";
  q=em.createQuery(deleteQuery);
  q.executeUpdate();
  result=em.find(CassandraEntitySample.class,""String_Node_Str"");
}","@Test public void testUpdate(){
  EntityManagerFactory emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  CassandraEntitySample entity=new CassandraEntitySample();
  entity.setBirth_date(new Integer(100112));
  entity.setFull_name(""String_Node_Str"");
  entity.setKey(""String_Node_Str"");
  entity.setState(""String_Node_Str"");
  em.persist(entity);
  String updateQuery=""String_Node_Str"";
  Query q=em.createQuery(updateQuery);
  q.executeUpdate();
  CassandraEntitySample result=em.find(CassandraEntitySample.class,""String_Node_Str"");
  Assert.assertNotNull(result);
  String deleteQuery=""String_Node_Str"";
  q=em.createQuery(deleteQuery);
  q.executeUpdate();
  result=em.find(CassandraEntitySample.class,""String_Node_Str"");
  emf.close();
}",0.9644533869885984
176562,"public static boolean instanceOfHibernatePersistentCollection(Object o){
  try {
    return o instanceof org.hibernate.collection.spi.PersistentCollection;
  }
 catch (  Exception e) {
    return false;
  }
catch (  NoClassDefFoundError e) {
    return false;
  }
}","public static boolean instanceOfHibernatePersistentCollection(Object o){
  if (o == null)   return false;
  try {
    return o.getClass().isAssignableFrom(PersistentCollection.class);
  }
 catch (  Exception e) {
    return false;
  }
catch (  NoClassDefFoundError e) {
    return false;
  }
}",0.7455197132616488
176563,"/** 
 * Scan class and put metadata.
 * @param bits the bits
 * @param reader the reader
 * @param entityMetadataMap the entity metadata map
 * @param entityNameToClassMap the entity name to class map
 * @param keyDiscriptor
 * @param persistence unit the persistence unit.
 * @throws IOException Signals that an I/O exception has occurred.
 */
private List<Class<?>> scanClassAndPutMetadata(InputStream bits,Reader reader,Map<Class<?>,EntityMetadata> entityMetadataMap,Map<String,Class<?>> entityNameToClassMap,String persistenceUnit,String client,Map<String,List<String>> clazzToPuMap,Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap) throws IOException {
  DataInputStream dstream=new DataInputStream(new BufferedInputStream(bits));
  ClassFile cf=null;
  String className=null;
  List<Class<?>> classes=new ArrayList<Class<?>>();
  try {
    cf=new ClassFile(dstream);
    className=cf.getName();
    List<String> annotations=new ArrayList<String>();
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.visibleTag));
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.invisibleTag));
    for (    String validAnn : reader.getValidAnnotations()) {
      if (annotations.contains(validAnn)) {
        Class<?> clazz=Thread.currentThread().getContextClassLoader().loadClass(className);
        if (entityNameToClassMap.containsKey(clazz.getSimpleName()) && !entityNameToClassMap.get(clazz.getSimpleName()).getName().equals(clazz.getName())) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityNameToClassMap.get(clazz.getSimpleName()).getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ persistenceUnit);
        }
        entityNameToClassMap.put(clazz.getSimpleName(),clazz);
        EntityMetadata metadata=entityMetadataMap.get(clazz);
        if (null == metadata) {
          log.debug(""String_Node_Str"" + clazz.getName());
synchronized (clazz) {
            if (null == metadata) {
              MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,client,KunderaCoreUtils.getExternalProperties(persistenceUnit,externalProperyMap,persistenceUnits));
              metadata=metadataBuilder.buildEntityMetadata(clazz);
              if (metadata != null) {
                entityMetadataMap.put(clazz,metadata);
                mapClazztoPu(clazz,persistenceUnit,clazzToPuMap);
                processGeneratedValueAnnotation(clazz,persistenceUnit,metadata,entityNameToKeyDiscriptorMap);
              }
            }
          }
        }
        onValidateClientProperties(classes,clazz,persistenceUnit);
      }
    }
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + className + ""String_Node_Str"");
  }
 finally {
    dstream.close();
    bits.close();
  }
  return classes;
}","/** 
 * Scan class and put metadata.
 * @param bits the bits
 * @param reader the reader
 * @param entityMetadataMap the entity metadata map
 * @param entityNameToClassMap the entity name to class map
 * @param keyDiscriptor
 * @param persistence unit the persistence unit.
 * @throws IOException Signals that an I/O exception has occurred.
 */
private List<Class<?>> scanClassAndPutMetadata(InputStream bits,Reader reader,Map<String,EntityMetadata> entityMetadataMap,Map<String,Class<?>> entityNameToClassMap,String persistenceUnit,String client,Map<String,List<String>> clazzToPuMap,Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap) throws IOException {
  DataInputStream dstream=new DataInputStream(new BufferedInputStream(bits));
  ClassFile cf=null;
  String className=null;
  List<Class<?>> classes=new ArrayList<Class<?>>();
  try {
    cf=new ClassFile(dstream);
    className=cf.getName();
    List<String> annotations=new ArrayList<String>();
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.visibleTag));
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.invisibleTag));
    for (    String validAnn : reader.getValidAnnotations()) {
      if (annotations.contains(validAnn)) {
        Class<?> clazz=Thread.currentThread().getContextClassLoader().loadClass(className);
        if (entityNameToClassMap.containsKey(clazz.getSimpleName()) && !entityNameToClassMap.get(clazz.getSimpleName()).getName().equals(clazz.getName())) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityNameToClassMap.get(clazz.getSimpleName()).getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ persistenceUnit);
        }
        entityNameToClassMap.put(clazz.getSimpleName(),clazz);
        EntityMetadata metadata=entityMetadataMap.get(clazz);
        if (null == metadata) {
          log.debug(""String_Node_Str"" + clazz.getName());
synchronized (clazz) {
            if (null == metadata) {
              MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,client,KunderaCoreUtils.getExternalProperties(persistenceUnit,externalProperyMap,persistenceUnits));
              metadata=metadataBuilder.buildEntityMetadata(clazz);
              if (metadata != null) {
                entityMetadataMap.put(clazz.getName(),metadata);
                mapClazztoPu(clazz,persistenceUnit,clazzToPuMap);
                processGeneratedValueAnnotation(clazz,persistenceUnit,metadata,entityNameToKeyDiscriptorMap);
              }
            }
          }
        }
        onValidateClientProperties(classes,clazz,persistenceUnit);
      }
    }
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + className + ""String_Node_Str"");
  }
 finally {
    dstream.close();
    bits.close();
  }
  return classes;
}",0.9958563535911602
176564,"/** 
 * Load entity metadata.
 * @param persistenceUnit the persistence unit
 */
private void loadEntityMetadata(String persistenceUnit){
  if (persistenceUnit == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + persistenceUnit);
  }
  KunderaMetadata kunderaMetadata=KunderaMetadata.INSTANCE;
  Map<String,PersistenceUnitMetadata> persistentUnitMetadataMap=kunderaMetadata.getApplicationMetadata().getPersistenceUnitMetadataMap();
  List<String> classesToScan;
  URL[] resources=null;
  String client=null;
  List<URL> managedURLs=null;
  if (persistentUnitMetadataMap == null || persistentUnitMetadataMap.isEmpty()) {
    log.error(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
    throw new MetamodelLoaderException(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
  }
 else {
    PersistenceUnitMetadata puMetadata=persistentUnitMetadataMap.get(persistenceUnit);
    classesToScan=puMetadata.getManagedClassNames();
    managedURLs=puMetadata.getManagedURLs();
    Map<String,Object> externalProperties=KunderaCoreUtils.getExternalProperties(persistenceUnit,externalProperyMap,persistenceUnits);
    client=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_CLIENT_FACTORY) : null;
    if (client == null) {
      client=puMetadata.getClient();
    }
  }
  Reader reader;
  ApplicationMetadata appMetadata=kunderaMetadata.getApplicationMetadata();
  if (classesToScan == null || classesToScan.isEmpty()) {
    log.info(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
    if (appMetadata.getMetamodelMap().get(persistenceUnit) != null) {
      log.info(""String_Node_Str"");
      return;
    }
    reader=new ClasspathReader();
  }
 else {
    reader=new ClasspathReader(classesToScan);
  }
  URL[] managedClasses=reader.findResources();
  if (managedClasses != null) {
    List<URL> managedResources=Arrays.asList(managedClasses);
    managedURLs.addAll(managedResources);
  }
  if (managedURLs != null) {
    resources=managedURLs.toArray(new URL[]{});
  }
  reader.addValidAnnotations(Entity.class.getName());
  Metamodel metamodel=appMetadata.getMetamodel(persistenceUnit);
  if (metamodel == null) {
    metamodel=new MetamodelImpl();
  }
  Map<Class<?>,EntityMetadata> entityMetadataMap=((MetamodelImpl)metamodel).getEntityMetadataMap();
  Map<String,Class<?>> entityNameToClassMap=((MetamodelImpl)metamodel).getEntityNameToClassMap();
  Map<String,List<String>> puToClazzMap=new HashMap<String,List<String>>();
  Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap=new HashMap<String,IdDiscriptor>();
  List<Class<?>> classes=new ArrayList<Class<?>>();
  if (resources != null) {
    for (    URL resource : resources) {
      try {
        ResourceIterator itr=reader.getResourceIterator(resource,reader.getFilter());
        InputStream is=null;
        while ((is=itr.next()) != null) {
          classes.addAll(scanClassAndPutMetadata(is,reader,entityMetadataMap,entityNameToClassMap,persistenceUnit,client,puToClazzMap,entityNameToKeyDiscriptorMap));
        }
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"",e);
        throw new MetamodelLoaderException(""String_Node_Str"");
      }
    }
  }
  ((MetamodelImpl)metamodel).setEntityMetadataMap(entityMetadataMap);
  appMetadata.getMetamodelMap().put(persistenceUnit,metamodel);
  appMetadata.setClazzToPuMap(puToClazzMap);
  ((MetamodelImpl)metamodel).addKeyValues(entityNameToKeyDiscriptorMap);
  ((MetamodelImpl)metamodel).assignEmbeddables(KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getEmbeddables());
  ((MetamodelImpl)metamodel).assignManagedTypes(KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getManagedTypes());
  ((MetamodelImpl)metamodel).assignMappedSuperClass(KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  validateEntityForClientSpecificProperty(classes,persistenceUnit);
}","/** 
 * Load entity metadata.
 * @param persistenceUnit the persistence unit
 */
private void loadEntityMetadata(String persistenceUnit){
  if (persistenceUnit == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + persistenceUnit);
  }
  KunderaMetadata kunderaMetadata=KunderaMetadata.INSTANCE;
  Map<String,PersistenceUnitMetadata> persistentUnitMetadataMap=kunderaMetadata.getApplicationMetadata().getPersistenceUnitMetadataMap();
  List<String> classesToScan;
  URL[] resources=null;
  String client=null;
  List<URL> managedURLs=null;
  if (persistentUnitMetadataMap == null || persistentUnitMetadataMap.isEmpty()) {
    log.error(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
    throw new MetamodelLoaderException(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
  }
 else {
    PersistenceUnitMetadata puMetadata=persistentUnitMetadataMap.get(persistenceUnit);
    classesToScan=puMetadata.getManagedClassNames();
    managedURLs=puMetadata.getManagedURLs();
    Map<String,Object> externalProperties=KunderaCoreUtils.getExternalProperties(persistenceUnit,externalProperyMap,persistenceUnits);
    client=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_CLIENT_FACTORY) : null;
    if (client == null) {
      client=puMetadata.getClient();
    }
  }
  Reader reader;
  ApplicationMetadata appMetadata=kunderaMetadata.getApplicationMetadata();
  if (classesToScan == null || classesToScan.isEmpty()) {
    log.info(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
    if (appMetadata.getMetamodelMap().get(persistenceUnit) != null) {
      log.info(""String_Node_Str"");
      return;
    }
    reader=new ClasspathReader();
  }
 else {
    reader=new ClasspathReader(classesToScan);
  }
  URL[] managedClasses=reader.findResources();
  if (managedClasses != null) {
    List<URL> managedResources=Arrays.asList(managedClasses);
    managedURLs.addAll(managedResources);
  }
  if (managedURLs != null) {
    resources=managedURLs.toArray(new URL[]{});
  }
  reader.addValidAnnotations(Entity.class.getName());
  Metamodel metamodel=appMetadata.getMetamodel(persistenceUnit);
  if (metamodel == null) {
    metamodel=new MetamodelImpl();
  }
  Map<String,EntityMetadata> entityMetadataMap=((MetamodelImpl)metamodel).getEntityMetadataMap();
  Map<String,Class<?>> entityNameToClassMap=((MetamodelImpl)metamodel).getEntityNameToClassMap();
  Map<String,List<String>> puToClazzMap=new HashMap<String,List<String>>();
  Map<String,IdDiscriptor> entityNameToKeyDiscriptorMap=new HashMap<String,IdDiscriptor>();
  List<Class<?>> classes=new ArrayList<Class<?>>();
  if (resources != null) {
    for (    URL resource : resources) {
      try {
        ResourceIterator itr=reader.getResourceIterator(resource,reader.getFilter());
        InputStream is=null;
        while ((is=itr.next()) != null) {
          classes.addAll(scanClassAndPutMetadata(is,reader,entityMetadataMap,entityNameToClassMap,persistenceUnit,client,puToClazzMap,entityNameToKeyDiscriptorMap));
        }
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"",e);
        throw new MetamodelLoaderException(""String_Node_Str"");
      }
    }
  }
  ((MetamodelImpl)metamodel).setEntityMetadataMap(entityMetadataMap);
  appMetadata.getMetamodelMap().put(persistenceUnit,metamodel);
  appMetadata.setClazzToPuMap(puToClazzMap);
  ((MetamodelImpl)metamodel).addKeyValues(entityNameToKeyDiscriptorMap);
  ((MetamodelImpl)metamodel).assignEmbeddables(KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getEmbeddables());
  ((MetamodelImpl)metamodel).assignManagedTypes(KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getManagedTypes());
  ((MetamodelImpl)metamodel).assignMappedSuperClass(KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(persistenceUnit).getMappedSuperClassTypes());
  validateEntityForClientSpecificProperty(classes,persistenceUnit);
}",0.998259139517533
176565,"/** 
 * Adds the entity metadata.
 * @param persistenceUnit the persistence unit
 * @param clazz the clazz
 * @param entityMetadata the entity metadata
 */
public void addEntityMetadata(String persistenceUnit,Class<?> clazz,EntityMetadata entityMetadata){
  Metamodel metamodel=getMetamodelMap().get(persistenceUnit);
  Map<Class<?>,EntityMetadata> entityClassToMetadataMap=((MetamodelImpl)metamodel).getEntityMetadataMap();
  if (entityClassToMetadataMap == null || entityClassToMetadataMap.isEmpty()) {
    entityClassToMetadataMap.put(clazz,entityMetadata);
  }
 else {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + persistenceUnit + ""String_Node_Str""+ clazz+ ""String_Node_Str"");
  }
}","/** 
 * Adds the entity metadata.
 * @param persistenceUnit the persistence unit
 * @param clazz the clazz
 * @param entityMetadata the entity metadata
 */
public void addEntityMetadata(String persistenceUnit,Class<?> clazz,EntityMetadata entityMetadata){
  Metamodel metamodel=getMetamodelMap().get(persistenceUnit);
  Map<String,EntityMetadata> entityClassToMetadataMap=((MetamodelImpl)metamodel).getEntityMetadataMap();
  if (entityClassToMetadataMap == null || entityClassToMetadataMap.isEmpty()) {
    entityClassToMetadataMap.put(clazz.getName(),entityMetadata);
  }
 else {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + persistenceUnit + ""String_Node_Str""+ clazz+ ""String_Node_Str"");
  }
}",0.9832402234636872
176566,"/** 
 * Adds the entity metadata.
 * @param clazz the clazz
 * @param entityMetadata the entity metadata
 */
public void addEntityMetadata(Class<?> clazz,EntityMetadata entityMetadata){
  getEntityMetadataMap().put(clazz,entityMetadata);
}","/** 
 * Adds the entity metadata.
 * @param clazz the clazz
 * @param entityMetadata the entity metadata
 */
public void addEntityMetadata(Class<?> clazz,EntityMetadata entityMetadata){
  getEntityMetadataMap().put(clazz.getName(),entityMetadata);
}",0.9795081967213116
176567,"/** 
 * Gets the entity metadata map.
 * @return the entityMetadataMap
 */
public Map<Class<?>,EntityMetadata> getEntityMetadataMap(){
  if (entityMetadataMap == null) {
    entityMetadataMap=new HashMap<Class<?>,EntityMetadata>();
  }
  return entityMetadataMap;
}","/** 
 * Gets the entity metadata map.
 * @return the entityMetadataMap
 */
public Map<String,EntityMetadata> getEntityMetadataMap(){
  if (entityMetadataMap == null) {
    entityMetadataMap=new HashMap<String,EntityMetadata>();
  }
  return entityMetadataMap;
}",0.946768060836502
176568,"/** 
 * Gets the entity metadata.
 * @param entityClass the entity class
 * @return the entity metadata
 */
public EntityMetadata getEntityMetadata(Class<?> entityClass){
  return getEntityMetadataMap().get(entityClass);
}","/** 
 * Gets the entity metadata.
 * @param entityClass the entity class
 * @return the entity metadata
 */
public EntityMetadata getEntityMetadata(Class<?> entityClass){
  return getEntityMetadataMap().get(entityClass.getName());
}",0.9779735682819384
176569,"/** 
 * Instantiates a new metamodel impl.
 */
public MetamodelImpl(){
  super();
  setEntityMetadataMap(new HashMap<Class<?>,EntityMetadata>());
}","/** 
 * Instantiates a new metamodel impl.
 */
public MetamodelImpl(){
  super();
  setEntityMetadataMap(new HashMap<String,EntityMetadata>());
}",0.952054794520548
176570,"/** 
 * Sets the entity metadata map.
 * @param entityMetadataMap the entityMetadataMap to set
 */
public void setEntityMetadataMap(Map<Class<?>,EntityMetadata> entityMetadataMap){
  this.entityMetadataMap=entityMetadataMap;
}","/** 
 * Sets the entity metadata map.
 * @param entityMetadataMap the entityMetadataMap to set
 */
public void setEntityMetadataMap(Map<String,EntityMetadata> entityMetadataMap){
  this.entityMetadataMap=entityMetadataMap;
}",0.9688888888888888
176571,"/** 
 * Use this if you want to construct this directly.
 * @param persistenceUnit used to prefix the Cassandra domains
 * @param properties the properties
 */
public EntityManagerFactoryImpl(String persistenceUnit,Map<String,Object> properties){
  if (properties == null) {
    properties=new HashMap<String,Object>();
  }
  properties.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  this.properties=properties;
  this.persistenceUnits=persistenceUnit.split(Constants.PERSISTENCE_UNIT_SEPARATOR);
  this.cacheProvider=initSecondLevelCache();
  this.cacheProvider.createCache(Constants.KUNDERA_SECONDARY_CACHE_NAME);
  Set<PersistenceUnitTransactionType> txTypes=new HashSet<PersistenceUnitTransactionType>();
  for (  String pu : persistenceUnits) {
    PersistenceUnitTransactionType txType=KunderaMetadataManager.getPersistenceUnitMetadata(pu).getTransactionType();
    txTypes.add(txType);
  }
  if (txTypes.size() != 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    this.transactionType=txTypes.iterator().next();
  }
  this.util=new KunderaPersistenceUnitUtil(cache);
  if (logger.isDebugEnabled())   logger.info(""String_Node_Str"" + persistenceUnit);
}","/** 
 * Use this if you want to construct this directly.
 * @param persistenceUnit used to prefix the Cassandra domains
 * @param properties the properties
 */
public EntityManagerFactoryImpl(String persistenceUnit,Map<String,Object> properties){
  Map<String,Object> propsMap=new HashMap<String,Object>();
  if (properties != null) {
    propsMap.putAll(properties);
  }
  propsMap.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  this.properties=propsMap;
  this.persistenceUnits=persistenceUnit.split(Constants.PERSISTENCE_UNIT_SEPARATOR);
  this.cacheProvider=initSecondLevelCache();
  this.cacheProvider.createCache(Constants.KUNDERA_SECONDARY_CACHE_NAME);
  Set<PersistenceUnitTransactionType> txTypes=new HashSet<PersistenceUnitTransactionType>();
  for (  String pu : persistenceUnits) {
    PersistenceUnitTransactionType txType=KunderaMetadataManager.getPersistenceUnitMetadata(pu).getTransactionType();
    txTypes.add(txType);
  }
  if (txTypes.size() != 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    this.transactionType=txTypes.iterator().next();
  }
  this.util=new KunderaPersistenceUnitUtil(cache);
  if (logger.isDebugEnabled())   logger.info(""String_Node_Str"" + persistenceUnit);
}",0.9310910582444628
176572,"/** 
 * Writes an entity into Persistence cache. (Actual database write is done while flushing)
 */
public void persist(Object e){
  if (e == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new TransientState());
  Node node=graph.getHeadNode();
  lock.writeLock().lock();
  node.persist();
  flushManager.buildFlushStack(node,com.impetus.kundera.persistence.context.EventLog.EventType.INSERT);
  flush();
  getPersistenceCache().getMainCache().addHeadNode(node);
  lock.writeLock().unlock();
  graph.clear();
  graph=null;
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + e.getClass());
  }
}","/** 
 * Writes an entity into Persistence cache. (Actual database write is done while flushing)
 */
public void persist(Object e){
  if (e == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  getMetadata(e.getClass());
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new TransientState());
  Node node=graph.getHeadNode();
  lock.writeLock().lock();
  node.persist();
  flushManager.buildFlushStack(node,com.impetus.kundera.persistence.context.EventLog.EventType.INSERT);
  flush();
  getPersistenceCache().getMainCache().addHeadNode(node);
  lock.writeLock().unlock();
  graph.clear();
  graph=null;
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + e.getClass());
  }
}",0.9791516894320632
176573,"/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  for (  PersonBatchHBaseEntity o : rows) {
    em.remove(o);
  }
  em.close();
  emf.close();
  if (cli != null && cli.isStarted()) {
    cli.stopCluster(""String_Node_Str"");
  }
}","/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  for (  PersonBatchHBaseEntity o : rows) {
    em.remove(o);
  }
  em.close();
  emf.close();
  if (cli != null) {
    cli.stopCluster(""String_Node_Str"");
  }
}",0.9633911368015414
176574,"/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  for (  Object val : col.values()) {
    em.remove(val);
  }
  em.close();
  emf.close();
  if (cli != null && cli.isStarted()) {
    cli.stopCluster(""String_Node_Str"");
  }
  LuceneCleanupUtilities.cleanLuceneDirectory(""String_Node_Str"");
}","/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  for (  Object val : col.values()) {
    em.remove(val);
  }
  em.close();
  emf.close();
  if (cli != null) {
    cli.stopCluster(""String_Node_Str"");
  }
  LuceneCleanupUtilities.cleanLuceneDirectory(""String_Node_Str"");
}",0.9704510108864696
176575,"@After public void tearDown(){
  em.close();
  emf.close();
  if (cli != null && cli.isStarted()) {
    cli.dropTable(""String_Node_Str"");
    cli.dropTable(""String_Node_Str"");
  }
}","@After public void tearDown(){
  em.close();
  emf.close();
  if (cli != null) {
    cli.dropTable(""String_Node_Str"");
    cli.dropTable(""String_Node_Str"");
  }
}",0.9446064139941692
176576,"private void init(){
  if (!cli.isStarted) {
    cli.startCluster();
  }
  Object p1=prepareHbaseInstance(""String_Node_Str"",10);
  Object p2=prepareHbaseInstance(""String_Node_Str"",20);
  Object p3=prepareHbaseInstance(""String_Node_Str"",15);
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
}","private void init(){
  cli.startCluster();
  Object p1=prepareHbaseInstance(""String_Node_Str"",10);
  Object p2=prepareHbaseInstance(""String_Node_Str"",20);
  Object p3=prepareHbaseInstance(""String_Node_Str"",15);
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
}",0.9605263157894736
176577,"/** 
 * Tear down.
 * @throws Exception the exception
 */
@After public void tearDown() throws Exception {
  for (  Object val : col.values()) {
    em.remove(val);
  }
  em.close();
  emf.close();
  if (cli != null && cli.isStarted()) {
    cli.dropTable(""String_Node_Str"");
    cli.stopCluster(""String_Node_Str"");
  }
  LuceneCleanupUtilities.cleanLuceneDirectory(""String_Node_Str"");
}","/** 
 * Tear down.
 * @throws Exception the exception
 */
@After public void tearDown() throws Exception {
  for (  Object val : col.values()) {
    em.remove(val);
  }
  em.close();
  emf.close();
  if (cli != null) {
    cli.dropTable(""String_Node_Str"");
    cli.stopCluster(""String_Node_Str"");
  }
  LuceneCleanupUtilities.cleanLuceneDirectory(""String_Node_Str"");
}",0.9748344370860929
176578,"@AfterClass public static void tearDownAfterClass(){
  emf.close();
  if (cli != null && cli.isStarted()) {
    cli.dropTable(""String_Node_Str"");
  }
}","@AfterClass public static void tearDownAfterClass(){
  emf.close();
  if (cli != null) {
    cli.dropTable(""String_Node_Str"");
  }
}",0.9328621908127208
176579,"public static void cleanUp(){
  try {
    if (utility != null) {
      utility.cleanupTestDir();
      utility.shutdownMiniCluster();
      FileUtil.fullyDelete(zkDir);
      FileUtil.fullyDelete(masterDir);
      utility=null;
      isStarted=false;
    }
  }
 catch (  IOException e) {
    logger.error(e.getMessage());
  }
catch (  NullPointerException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void cleanUp(){
  try {
    if (utility != null) {
      utility.cleanupTestDir();
      utility.shutdownMiniCluster();
      FileUtil.fullyDelete(zkDir);
      FileUtil.fullyDelete(masterDir);
      utility=null;
    }
  }
 catch (  IOException e) {
    logger.error(e.getMessage());
  }
catch (  NullPointerException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9734104046242774
176580,"public static void main(String arg[]){
  HBaseCli cli=new HBaseCli();
}","public static void main(String arg[]){
  HBaseCli cli=new HBaseCli();
  cli.startCluster();
  ;
}",0.8452380952380952
176581,"public void startCluster(){
  if (!isStarted) {
    File workingDirectory=new File(""String_Node_Str"");
    Configuration conf=new Configuration();
    System.setProperty(""String_Node_Str"",workingDirectory.getAbsolutePath());
    conf.set(""String_Node_Str"",new File(workingDirectory,""String_Node_Str"").getAbsolutePath());
    conf.set(""String_Node_Str"",""String_Node_Str"");
    conf.set(""String_Node_Str"",""String_Node_Str"");
    conf.set(""String_Node_Str"",""String_Node_Str"");
    conf.set(""String_Node_Str"",""String_Node_Str"");
    conf.set(""String_Node_Str"",""String_Node_Str"");
    try {
      masterDir=new File(workingDirectory,""String_Node_Str"");
      conf.set(HConstants.HBASE_DIR,masterDir.toURI().toURL().toString());
    }
 catch (    MalformedURLException e1) {
      logger.error(e1.getMessage());
    }
    Configuration hbaseConf=HBaseConfiguration.create(conf);
    utility=new HBaseTestingUtility(hbaseConf);
    hTablePool=new HTablePool(conf,1);
    try {
      zkCluster=new MiniZooKeeperCluster(conf);
      zkCluster.setDefaultClientPort(2181);
      zkCluster.setTickTime(18000);
      zkDir=new File(utility.getClusterTestDir().toString());
      zkCluster.startup(zkDir);
      utility.setZkCluster(zkCluster);
      utility.startMiniCluster();
      utility.getHBaseCluster().startMaster();
    }
 catch (    Exception e) {
      e.printStackTrace();
      logger.error(e.getMessage());
      throw new RuntimeException(e);
    }
    isStarted=true;
  }
}","public void startCluster(){
  File workingDirectory=new File(""String_Node_Str"");
  Configuration conf=new Configuration();
  System.setProperty(""String_Node_Str"",workingDirectory.getAbsolutePath());
  conf.set(""String_Node_Str"",new File(workingDirectory,""String_Node_Str"").getAbsolutePath());
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.set(""String_Node_Str"",""String_Node_Str"");
  try {
    masterDir=new File(workingDirectory,""String_Node_Str"");
    conf.set(HConstants.HBASE_DIR,masterDir.toURI().toURL().toString());
  }
 catch (  MalformedURLException e1) {
    logger.error(e1.getMessage());
  }
  Configuration hbaseConf=HBaseConfiguration.create(conf);
  utility=new HBaseTestingUtility(hbaseConf);
  if (!checkIfServerRunning()) {
    hTablePool=new HTablePool(conf,1);
    try {
      zkCluster=new MiniZooKeeperCluster(conf);
      zkCluster.setDefaultClientPort(2181);
      zkCluster.setTickTime(18000);
      zkDir=new File(utility.getClusterTestDir().toString());
      zkCluster.startup(zkDir);
      utility.setZkCluster(zkCluster);
      utility.startMiniCluster();
      utility.getHBaseCluster().startMaster();
    }
 catch (    Exception e) {
      e.printStackTrace();
      logger.error(e.getMessage());
      throw new RuntimeException(e);
    }
  }
}",0.9625300790649708
176582,"@Override void startServer(){
  if (!cli.isStarted()) {
    cli.startCluster();
  }
}","@Override void startServer(){
  cli.startCluster();
}",0.7681159420289855
176583,"@Override void stopServer(){
  if (cli.isStarted()) {
    cli.stopCluster();
  }
}","@Override void stopServer(){
  cli.stopCluster();
}",0.7669172932330827
176584,"/** 
 * Starts a new cluster.
 */
public static void startCluster(){
  if (!isStarted) {
    File workingDirectory=new File(""String_Node_Str"");
    Configuration conf=new Configuration();
    System.setProperty(""String_Node_Str"",workingDirectory.getAbsolutePath());
    conf.set(""String_Node_Str"",new File(workingDirectory,""String_Node_Str"").getAbsolutePath());
    conf.set(""String_Node_Str"",""String_Node_Str"");
    conf.set(""String_Node_Str"",""String_Node_Str"");
    conf.set(""String_Node_Str"",""String_Node_Str"");
    conf.set(""String_Node_Str"",""String_Node_Str"");
    conf.set(""String_Node_Str"",""String_Node_Str"");
    try {
      masterDir=new File(workingDirectory,""String_Node_Str"");
      conf.set(HConstants.HBASE_DIR,masterDir.toURI().toURL().toString());
    }
 catch (    MalformedURLException e1) {
      logger.error(e1.getMessage());
    }
    Configuration hbaseConf=HBaseConfiguration.create(conf);
    utility=new HBaseTestingUtility(hbaseConf);
    try {
      MiniZooKeeperCluster zkCluster=new MiniZooKeeperCluster(conf);
      zkCluster.setDefaultClientPort(2181);
      zkCluster.setTickTime(18000);
      zkDir=new File(utility.getClusterTestDir().toString());
      zkCluster.startup(zkDir);
      utility.setZkCluster(zkCluster);
      utility.startMiniCluster();
      utility.getHBaseCluster().startMaster();
    }
 catch (    Exception e) {
      logger.error(e.getMessage());
      throw new RuntimeException(e);
    }
    isStarted=true;
  }
}","/** 
 * Starts a new cluster.
 */
public static void startCluster(){
  if (checkIfServerRunning()) {
    File workingDirectory=new File(""String_Node_Str"");
    Configuration conf=new Configuration();
    System.setProperty(""String_Node_Str"",workingDirectory.getAbsolutePath());
    conf.set(""String_Node_Str"",new File(workingDirectory,""String_Node_Str"").getAbsolutePath());
    conf.set(""String_Node_Str"",""String_Node_Str"");
    conf.set(""String_Node_Str"",""String_Node_Str"");
    conf.set(""String_Node_Str"",""String_Node_Str"");
    conf.set(""String_Node_Str"",""String_Node_Str"");
    conf.set(""String_Node_Str"",""String_Node_Str"");
    try {
      masterDir=new File(workingDirectory,""String_Node_Str"");
      conf.set(HConstants.HBASE_DIR,masterDir.toURI().toURL().toString());
    }
 catch (    MalformedURLException e1) {
      logger.error(e1.getMessage());
    }
    Configuration hbaseConf=HBaseConfiguration.create(conf);
    utility=new HBaseTestingUtility(hbaseConf);
    if (!checkIfServerRunning()) {
      try {
        MiniZooKeeperCluster zkCluster=new MiniZooKeeperCluster(conf);
        zkCluster.setDefaultClientPort(2181);
        zkCluster.setTickTime(18000);
        zkDir=new File(utility.getClusterTestDir().toString());
        zkCluster.startup(zkDir);
        utility.setZkCluster(zkCluster);
        utility.startMiniCluster();
        utility.getHBaseCluster().startMaster();
      }
 catch (      Exception e) {
        logger.error(e.getMessage());
        throw new RuntimeException(e);
      }
    }
  }
}",0.9610648918469218
176585,"/** 
 * Switch over persistence units.
 * @param entityPuCol the entity pu col
 * @throws SchemaDisagreementException
 * @throws TimedOutException
 * @throws UnavailableException
 * @throws InvalidRequestException
 * @throws TException
 * @throws IOException
 */
protected void switchPersistenceUnits(Map<Class,String> entityPuCol) throws IOException, TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  if (entityPuCol != null) {
    Iterator<Class> iter=entityPuCol.keySet().iterator();
    log.warn(""String_Node_Str"");
    while (iter.hasNext()) {
      Class clazz=iter.next();
      String pu=entityPuCol.get(clazz);
      Map<String,Metamodel> metaModels=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodelMap();
      EntityMetadata mAdd=KunderaMetadataManager.getEntityMetadata(clazz);
      for (      Metamodel m : metaModels.values()) {
        mAdd=((MetamodelImpl)m).getEntityMetadataMap().get(clazz);
        if (mAdd != null) {
          break;
        }
      }
      mAdd.setPersistenceUnit(pu);
      Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>(1);
      List<String> pus=new ArrayList<String>(1);
      pus.add(pu);
      clazzToPu.put(clazz.getName(),pus);
      KunderaMetadata.INSTANCE.getApplicationMetadata().setClazzToPuMap(clazzToPu);
      Metamodel metaModel=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(pu);
      ((MetamodelImpl)metaModel).addEntityMetadata(clazz,mAdd);
      KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodelMap().put(pu,metaModel);
      PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(pu);
      String client=puMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_CLIENT_FACTORY);
      if (client.equalsIgnoreCase(""String_Node_Str"") || client.equalsIgnoreCase(""String_Node_Str"")) {
        if (RUN_IN_EMBEDDED_MODE) {
          CassandraCli.cassandraSetUp();
          CassandraCli.initClient();
        }
        if (AUTO_MANAGE_SCHEMA) {
          if (mAdd.getTableName().equalsIgnoreCase(""String_Node_Str"")) {
            loadDataForHABITAT();
          }
 else           if (mAdd.getTableName().equalsIgnoreCase(""String_Node_Str"")) {
            loadDataForPERSONNEL();
          }
        }
      }
      if (client.equalsIgnoreCase(""String_Node_Str"") && RUN_IN_EMBEDDED_MODE) {
        if (!HBaseCli.isStarted()) {
        }
      }
      if (client.equalsIgnoreCase(""String_Node_Str"")) {
        try {
          createSchemaForPERSONNEL();
          createSchemaForHABITAT();
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
      }
      String schema=puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE);
      mAdd.setSchema(schema != null ? schema : KEYSPACE);
      log.warn(""String_Node_Str"" + pu + ""String_Node_Str""+ clazz.getCanonicalName());
    }
  }
  dao.closeEntityManager();
  em=dao.getEntityManager(persistenceUnits,propertyMap);
}","/** 
 * Switch over persistence units.
 * @param entityPuCol the entity pu col
 * @throws SchemaDisagreementException
 * @throws TimedOutException
 * @throws UnavailableException
 * @throws InvalidRequestException
 * @throws TException
 * @throws IOException
 */
protected void switchPersistenceUnits(Map<Class,String> entityPuCol) throws IOException, TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  if (entityPuCol != null) {
    Iterator<Class> iter=entityPuCol.keySet().iterator();
    log.warn(""String_Node_Str"");
    while (iter.hasNext()) {
      Class clazz=iter.next();
      String pu=entityPuCol.get(clazz);
      Map<String,Metamodel> metaModels=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodelMap();
      EntityMetadata mAdd=KunderaMetadataManager.getEntityMetadata(clazz);
      for (      Metamodel m : metaModels.values()) {
        mAdd=((MetamodelImpl)m).getEntityMetadataMap().get(clazz);
        if (mAdd != null) {
          break;
        }
      }
      mAdd.setPersistenceUnit(pu);
      Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>(1);
      List<String> pus=new ArrayList<String>(1);
      pus.add(pu);
      clazzToPu.put(clazz.getName(),pus);
      KunderaMetadata.INSTANCE.getApplicationMetadata().setClazzToPuMap(clazzToPu);
      Metamodel metaModel=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(pu);
      ((MetamodelImpl)metaModel).addEntityMetadata(clazz,mAdd);
      KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodelMap().put(pu,metaModel);
      PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(pu);
      String client=puMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_CLIENT_FACTORY);
      if (client.equalsIgnoreCase(""String_Node_Str"") || client.equalsIgnoreCase(""String_Node_Str"")) {
        if (RUN_IN_EMBEDDED_MODE) {
          CassandraCli.cassandraSetUp();
          CassandraCli.initClient();
        }
        if (AUTO_MANAGE_SCHEMA) {
          if (mAdd.getTableName().equalsIgnoreCase(""String_Node_Str"")) {
            loadDataForHABITAT();
          }
 else           if (mAdd.getTableName().equalsIgnoreCase(""String_Node_Str"")) {
            loadDataForPERSONNEL();
          }
        }
      }
      if (client.equalsIgnoreCase(""String_Node_Str"") && RUN_IN_EMBEDDED_MODE) {
      }
      if (client.equalsIgnoreCase(""String_Node_Str"")) {
        try {
          createSchemaForPERSONNEL();
          createSchemaForHABITAT();
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
      }
      String schema=puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE);
      mAdd.setSchema(schema != null ? schema : KEYSPACE);
      log.warn(""String_Node_Str"" + pu + ""String_Node_Str""+ clazz.getCanonicalName());
    }
  }
  dao.closeEntityManager();
  em=dao.getEntityManager(persistenceUnits,propertyMap);
}",0.9922659206845484
176586,"/** 
 * Test create insert column family query.
 */
@Test public void testCreateInsertColumnFamilyQueryVersion3(){
  String useNativeSql=""String_Node_Str"" + schema;
  EntityManagerFactoryImpl emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clientMap=(Map<String,Client>)em.getDelegate();
  PelopsClient pc=(PelopsClient)clientMap.get(""String_Node_Str"");
  pc.setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  Query q=em.createNativeQuery(useNativeSql,CassandraEntity.class);
  q.executeUpdate();
  String colFamilySql=""String_Node_Str"";
  q=em.createNativeQuery(colFamilySql,CassandraEntity.class);
  q.executeUpdate();
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",""String_Node_Str""));
  String idxSql=""String_Node_Str"";
  q=em.createNativeQuery(idxSql,CassandraEntity.class);
  q.executeUpdate();
  idxSql=""String_Node_Str"";
  q=em.createNativeQuery(idxSql,CassandraEntity.class);
  q.executeUpdate();
  String insertSql=""String_Node_Str"";
  q=em.createNativeQuery(insertSql,CassandraEntity.class);
  q.executeUpdate();
  String selectSql=""String_Node_Str"";
  q=em.createNativeQuery(selectSql,CassandraEntity.class);
  List<CassandraEntity> results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getKey());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getState());
  Assert.assertNull(results.get(0).getFull_name());
  insertSql=""String_Node_Str"";
  q=em.createNativeQuery(insertSql,CassandraEntity.class);
  q.getResultList();
  insertSql=""String_Node_Str"";
  q=em.createNativeQuery(insertSql,CassandraEntity.class);
  q.getResultList();
  String selectAll=""String_Node_Str"";
  q=em.createNativeQuery(selectAll,CassandraEntity.class);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getKey());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getState());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getFull_name());
  Assert.assertEquals(new Integer(1975),results.get(0).getBirth_date());
}","/** 
 * Test create insert column family query.
 */
@Test public void testCreateInsertColumnFamilyQueryVersion3(){
  String useNativeSql=""String_Node_Str"" + schema;
  EntityManagerFactoryImpl emf=getEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clientMap=(Map<String,Client>)em.getDelegate();
  PelopsClient pc=(PelopsClient)clientMap.get(""String_Node_Str"");
  pc.setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  Query q=em.createNativeQuery(useNativeSql,CassandraEntity.class);
  q.executeUpdate();
  String colFamilySql=""String_Node_Str"";
  q=em.createNativeQuery(colFamilySql,CassandraEntity.class);
  q.executeUpdate();
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",""String_Node_Str""));
  String idxSql=""String_Node_Str"";
  q=em.createNativeQuery(idxSql,CassandraEntity.class);
  q.executeUpdate();
  idxSql=""String_Node_Str"";
  q=em.createNativeQuery(idxSql,CassandraEntity.class);
  q.executeUpdate();
  String insertSql=""String_Node_Str"";
  q=em.createNativeQuery(insertSql,CassandraEntity.class);
  q.executeUpdate();
  String selectSql=""String_Node_Str"";
  q=em.createNativeQuery(selectSql,CassandraEntity.class);
  List<CassandraEntity> results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getKey());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getState());
  Assert.assertNull(results.get(0).getFull_name());
  insertSql=""String_Node_Str"";
  q=em.createNativeQuery(insertSql,CassandraEntity.class);
  q.getResultList();
  insertSql=""String_Node_Str"";
  q=em.createNativeQuery(insertSql,CassandraEntity.class);
  q.getResultList();
  String selectAll=""String_Node_Str"";
  q=em.createNativeQuery(selectAll,CassandraEntity.class);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getKey());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getState());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getFull_name());
  Assert.assertEquals(new Integer(1975),results.get(0).getBirth_date());
  emf.close();
}",0.996614759647935
176587,"/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  CassandraCli.cassandraSetUp();
  String nativeSql=""String_Node_Str"" + schema + ""String_Node_Str"";
  CassandraCli.executeCqlQuery(nativeSql);
}","/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  CassandraCli.cassandraSetUp();
  String nativeSql=""String_Node_Str"" + schema + ""String_Node_Str"";
  CassandraCli.executeCqlQuery(nativeSql);
}",0.8980322003577818
176588,"@Test public void testCQLBatch(){
  String useNativeSql=""String_Node_Str"" + schema;
  EntityManagerFactory emf=getEntityManagerFactory();
  String createColumnFamily=""String_Node_Str"";
  String batchOps=""String_Node_Str"";
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clientMap=(Map<String,Client>)em.getDelegate();
  PelopsClient pc=(PelopsClient)clientMap.get(""String_Node_Str"");
  pc.setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  Query q=em.createNativeQuery(useNativeSql,CassandraBatchEntity.class);
  q.executeUpdate();
  pc.setConsistencyLevel(ConsistencyLevel.QUORUM);
  q=em.createNativeQuery(createColumnFamily,CassandraBatchEntity.class);
  q.executeUpdate();
  pc.setConsistencyLevel(ConsistencyLevel.QUORUM);
  q=em.createNativeQuery(batchOps,CassandraBatchEntity.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",CassandraBatchEntity.class);
  List<CassandraBatchEntity> results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(3,results.size());
  createColumnFamily=""String_Node_Str"";
  em.createNativeQuery(createColumnFamily,CassandraBatchEntity.class).executeUpdate();
  createColumnFamily=""String_Node_Str"";
  em.createNativeQuery(createColumnFamily,CassandraBatchEntity.class).executeUpdate();
  batchOps=""String_Node_Str"";
  em.createNativeQuery(batchOps,CassandraBatchEntity.class).executeUpdate();
}","@Test public void testCQLBatch(){
  String useNativeSql=""String_Node_Str"" + schema;
  EntityManagerFactory emf=getEntityManagerFactory();
  String createColumnFamily=""String_Node_Str"";
  String batchOps=""String_Node_Str"";
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clientMap=(Map<String,Client>)em.getDelegate();
  PelopsClient pc=(PelopsClient)clientMap.get(""String_Node_Str"");
  pc.setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  Query q=em.createNativeQuery(useNativeSql,CassandraBatchEntity.class);
  q.executeUpdate();
  pc.setConsistencyLevel(ConsistencyLevel.QUORUM);
  q=em.createNativeQuery(createColumnFamily,CassandraBatchEntity.class);
  q.executeUpdate();
  pc.setConsistencyLevel(ConsistencyLevel.QUORUM);
  q=em.createNativeQuery(batchOps,CassandraBatchEntity.class);
  q.executeUpdate();
  q=em.createNativeQuery(""String_Node_Str"",CassandraBatchEntity.class);
  List<CassandraBatchEntity> results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(3,results.size());
  createColumnFamily=""String_Node_Str"";
  em.createNativeQuery(createColumnFamily,CassandraBatchEntity.class).executeUpdate();
  createColumnFamily=""String_Node_Str"";
  em.createNativeQuery(createColumnFamily,CassandraBatchEntity.class).executeUpdate();
  batchOps=""String_Node_Str"";
  em.createNativeQuery(batchOps,CassandraBatchEntity.class).executeUpdate();
  emf.close();
}",0.9946600213599146
176589,"/** 
 * Sets the up internal.
 * @param persistenceUnitName the new up internal
 * @throws Exception the exception
 */
protected void setUpInternal(String persistenceUnitName) throws Exception {
  userId1=""String_Node_Str"";
  userId2=""String_Node_Str"";
  if (RUN_IN_EMBEDDED_MODE) {
    startServer();
  }
  if (AUTO_MANAGE_SCHEMA) {
    CassandraCli.initClient();
    createSchema();
  }
  twitter=new TwitterServiceCassandra(persistenceUnitName);
}","/** 
 * Sets the up internal.
 * @param persistenceUnitName the new up internal
 * @throws Exception the exception
 */
protected void setUpInternal(String persistenceUnitName) throws Exception {
  userId1=""String_Node_Str"";
  userId2=""String_Node_Str"";
  if (RUN_IN_EMBEDDED_MODE) {
    startServer();
  }
  if (AUTO_MANAGE_SCHEMA) {
    CassandraCli.initClient();
    createSchema();
  }
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  twitter=new TwitterServiceCassandra(persistenceUnitName);
}",0.9404388714733544
176590,"/** 
 * Find persistence meta data. Loads configured persistence.xml and load all provided configurations within persistence meta data as per @see JPA 2.0 specifications.
 * @return the list configure persistence unit meta data.
 */
private Map<String,PersistenceUnitMetadata> findPersistenceMetadatas() throws InvalidConfigurationException {
  Enumeration<URL> xmls=null;
  try {
    xmls=Thread.currentThread().getContextClassLoader().getResources(""String_Node_Str"");
  }
 catch (  IOException ioex) {
    log.warn(""String_Node_Str"" + ioex.getMessage());
  }
  if (xmls == null || !xmls.hasMoreElements()) {
    log.info(""String_Node_Str"" + ""String_Node_Str"");
    throw new InvalidConfigurationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Set<String> persistenceUnitNames=new HashSet<String>();
  Map<String,PersistenceUnitMetadata> persistenceUnitMap=new HashMap<String,PersistenceUnitMetadata>();
  while (xmls.hasMoreElements()) {
    URL url=xmls.nextElement();
    log.trace(""String_Node_Str"" + url);
    List<PersistenceUnitMetadata> metadataFiles=PersistenceXMLLoader.findPersistenceUnits(url,PersistenceUnitTransactionType.RESOURCE_LOCAL);
    for (    PersistenceUnitMetadata metadata : metadataFiles) {
      if (persistenceUnitNames.contains(metadata.getPersistenceUnitName())) {
        throw new InvalidConfigurationException(""String_Node_Str"" + metadata.getPersistenceUnitName() + ""String_Node_Str"");
      }
      if (metadata.getPersistenceProviderClassName() == null || PROVIDER_IMPLEMENTATION_NAME.equalsIgnoreCase(metadata.getPersistenceProviderClassName())) {
        persistenceUnitMap.put(metadata.getPersistenceUnitName(),metadata);
      }
      persistenceUnitNames.add(metadata.getPersistenceUnitName());
    }
  }
  return persistenceUnitMap;
}","/** 
 * Find persistence meta data. Loads configured persistence.xml and load all provided configurations within persistence meta data as per @see JPA 2.0 specifications.
 * @return the list configure persistence unit meta data.
 */
private Map<String,PersistenceUnitMetadata> findPersistenceMetadatas() throws InvalidConfigurationException {
  Enumeration<URL> xmls=null;
  try {
    xmls=Thread.currentThread().getContextClassLoader().getResources(""String_Node_Str"");
  }
 catch (  IOException ioex) {
    log.warn(""String_Node_Str"" + ioex.getMessage());
  }
  if (xmls == null || !xmls.hasMoreElements()) {
    log.info(""String_Node_Str"" + ""String_Node_Str"");
    throw new InvalidConfigurationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Set<String> persistenceUnitNames=new HashSet<String>();
  Map<String,PersistenceUnitMetadata> persistenceUnitMap=new HashMap<String,PersistenceUnitMetadata>();
  while (xmls.hasMoreElements()) {
    URL url=xmls.nextElement();
    log.trace(""String_Node_Str"" + url);
    List<PersistenceUnitMetadata> metadataFiles=PersistenceXMLLoader.findPersistenceUnits(url,PersistenceUnitTransactionType.RESOURCE_LOCAL);
    for (    PersistenceUnitMetadata metadata : metadataFiles) {
      if (persistenceUnitNames.contains(metadata.getPersistenceUnitName())) {
        if (log.isWarnEnabled()) {
          log.warn(""String_Node_Str"" + metadata.getPersistenceUnitName() + ""String_Node_Str"");
        }
      }
      if (metadata.getPersistenceProviderClassName() == null || PROVIDER_IMPLEMENTATION_NAME.equalsIgnoreCase(metadata.getPersistenceProviderClassName())) {
        persistenceUnitMap.put(metadata.getPersistenceUnitName(),metadata);
      }
      persistenceUnitNames.add(metadata.getPersistenceUnitName());
    }
  }
  return persistenceUnitMap;
}",0.9749023982152816
176591,"/** 
 * On where clause.
 * @param metadata the metadata
 * @param key the compound key object
 * @param translator the translator
 * @param queryBuilder the query builder
 * @param compoundKey the compound key
 */
private void onWhereClause(EntityMetadata metadata,Object key,CQLTranslator translator,StringBuilder queryBuilder,MetamodelImpl metaModel){
  queryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  if (metaModel.isEmbeddable(metadata.getIdAttribute().getBindableJavaType())) {
    Field[] fields=metadata.getIdAttribute().getBindableJavaType().getDeclaredFields();
    EmbeddableType compoundKey=metaModel.embeddable(metadata.getIdAttribute().getBindableJavaType());
    for (    Field field : fields) {
      if (field != null && !Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers()) && !field.isAnnotationPresent(Transient.class)) {
        Attribute attribute=compoundKey.getAttribute(field.getName());
        String columnName=((AbstractAttribute)attribute).getJPAColumnName();
        translator.buildWhereClause(queryBuilder,columnName,field,key);
      }
    }
  }
 else {
    Attribute attribute=metadata.getIdAttribute();
    translator.buildWhereClause(queryBuilder,CassandraUtilities.getIdColumnName(metadata,getExternalProperties()),key,translator.EQ_CLAUSE);
  }
  queryBuilder.delete(queryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),queryBuilder.length());
}","/** 
 * On where clause.
 * @param metadata the metadata
 * @param key the compound key object
 * @param translator the translator
 * @param queryBuilder the query builder
 * @param compoundKey the compound key
 */
private void onWhereClause(EntityMetadata metadata,Object key,CQLTranslator translator,StringBuilder queryBuilder,MetamodelImpl metaModel){
  queryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  if (metaModel.isEmbeddable(metadata.getIdAttribute().getBindableJavaType())) {
    Field[] fields=metadata.getIdAttribute().getBindableJavaType().getDeclaredFields();
    EmbeddableType compoundKey=metaModel.embeddable(metadata.getIdAttribute().getBindableJavaType());
    for (    Field field : fields) {
      if (field != null && !Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers()) && !field.isAnnotationPresent(Transient.class)) {
        Attribute attribute=compoundKey.getAttribute(field.getName());
        String columnName=((AbstractAttribute)attribute).getJPAColumnName();
        translator.buildWhereClause(queryBuilder,columnName,field,key);
      }
    }
  }
 else {
    Attribute attribute=metadata.getIdAttribute();
    translator.buildWhereClause(queryBuilder,((AbstractAttribute)metadata.getIdAttribute()).getBindableJavaType(),CassandraUtilities.getIdColumnName(metadata,getExternalProperties()),key,translator.EQ_CLAUSE);
  }
  queryBuilder.delete(queryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),queryBuilder.length());
}",0.976329331046312
176592,"/** 
 * Find List of objects based on value   {@columnValue} of column{@columnName}
 * @param m
 * @param columnName
 * @param columnValue
 * @param clazz
 * @param dataHandler
 * @return
 */
protected List<Object> findByRelationQuery(EntityMetadata m,String columnName,Object columnValue,Class clazz,CassandraDataHandler dataHandler){
  CqlResult result=null;
  CQLTranslator translator=new CQLTranslator();
  String selectQuery=translator.SELECTALL_QUERY;
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),m.getTableName()).toString());
  StringBuilder selectQueryBuilder=new StringBuilder(selectQuery);
  selectQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  translator.buildWhereClause(selectQueryBuilder,columnName,columnValue,""String_Node_Str"");
  selectQueryBuilder.delete(selectQueryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),selectQueryBuilder.length());
  return executeQuery(selectQueryBuilder.toString(),clazz,null,dataHandler);
}","/** 
 * Find List of objects based on value   {@columnValue} of column{@columnName}
 * @param m
 * @param columnName
 * @param columnValue
 * @param clazz
 * @param dataHandler
 * @return
 */
protected List<Object> findByRelationQuery(EntityMetadata m,String columnName,Object columnValue,Class clazz,CassandraDataHandler dataHandler){
  CQLTranslator translator=new CQLTranslator();
  String selectQuery=translator.SELECTALL_QUERY;
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),m.getTableName()).toString());
  StringBuilder selectQueryBuilder=new StringBuilder(selectQuery);
  selectQueryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  translator.buildWhereClause(selectQueryBuilder,columnValue.getClass(),columnName,columnValue,""String_Node_Str"");
  selectQueryBuilder.delete(selectQueryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),selectQueryBuilder.length());
  return executeQuery(selectQueryBuilder.toString(),clazz,null,dataHandler);
}",0.976401179941003
176593,"/** 
 * Executes query string using cql3.
 * @param cqlQuery
 * @return
 * @throws InvalidRequestException
 * @throws UnavailableException
 * @throws TimedOutException
 * @throws SchemaDisagreementException
 * @throws TException
 */
protected CqlResult executeCQLQuery(String cqlQuery) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException {
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  pooledConnection=getPooledConection(persistenceUnit);
  conn=getConnection(pooledConnection);
  conn.set_cql_version(getCqlVersion());
  try {
    return conn.execute_cql3_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE,consistencyLevel);
  }
  finally {
    releaseConnection(pooledConnection);
  }
}","/** 
 * Executes query string using cql3.
 * @param cqlQuery
 * @return
 * @throws InvalidRequestException
 * @throws UnavailableException
 * @throws TimedOutException
 * @throws SchemaDisagreementException
 * @throws TException
 */
protected CqlResult executeCQLQuery(String cqlQuery) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException {
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  pooledConnection=getPooledConection(persistenceUnit);
  conn=getConnection(pooledConnection);
  try {
    return conn.execute_cql3_query(ByteBufferUtil.bytes(cqlQuery),org.apache.cassandra.thrift.Compression.NONE,consistencyLevel);
  }
  finally {
    releaseConnection(pooledConnection);
  }
}",0.9737010904425916
176594,"/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  String persistenceUnit=null;
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  String batchQuery=CQLTranslator.BATCH_QUERY;
  batchQuery=StringUtils.replace(batchQuery,CQLTranslator.STATEMENT,""String_Node_Str"");
  StringBuilder batchQueryBuilder=new StringBuilder(batchQuery);
  try {
    for (    Node node : nodes) {
      if (node.isDirty()) {
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (isCQL3Enabled(metadata,metaModel)) {
          List<RelationHolder> relationHolders=getRelationHolders(node);
          String query;
          if (node.isInState(RemovedState.class)) {
            query=onDeleteQuery(metadata,metaModel,id);
          }
 else {
            query=createInsertQuery(metadata,entity,conn,relationHolders);
          }
          batchQueryBuilder.append(query);
        }
 else {
          if (node.isInState(RemovedState.class)) {
            delete(entity,id);
          }
 else {
            List<RelationHolder> relationHolders=getRelationHolders(node);
            Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
            mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
            recordsExecuted+=mutationMap.size();
            if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
              batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
            }
 else {
              batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
            }
            indexNode(node,metadata);
          }
        }
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getPooledConection(persistenceUnit);
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
      }
    }
    if (!nodes.isEmpty() && isCQLEnabled) {
      batchQueryBuilder.append(CQLTranslator.APPLY_BATCH);
      executeCQLQuery(batchQueryBuilder.toString());
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    releaseConnection(pooledConnection);
  }
  return recordsExecuted;
}","/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  String persistenceUnit=null;
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  String batchQuery=CQLTranslator.BATCH_QUERY;
  batchQuery=StringUtils.replace(batchQuery,CQLTranslator.STATEMENT,""String_Node_Str"");
  StringBuilder batchQueryBuilder=new StringBuilder(batchQuery);
  try {
    for (    Node node : nodes) {
      if (node.isDirty()) {
        node.handlePreEvent();
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (isCQL3Enabled(metadata,metaModel)) {
          List<RelationHolder> relationHolders=getRelationHolders(node);
          String query;
          if (node.isInState(RemovedState.class)) {
            query=onDeleteQuery(metadata,metaModel,id);
          }
 else {
            query=createInsertQuery(metadata,entity,conn,relationHolders);
          }
          batchQueryBuilder.append(query);
        }
 else {
          if (node.isInState(RemovedState.class)) {
            delete(entity,id);
          }
 else {
            List<RelationHolder> relationHolders=getRelationHolders(node);
            Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
            mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
            recordsExecuted+=mutationMap.size();
            if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
              batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
            }
 else {
              batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
            }
            indexNode(node,metadata);
          }
        }
        node.handlePostEvent();
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getPooledConection(persistenceUnit);
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
      }
    }
    if (!nodes.isEmpty() && isCQLEnabled) {
      batchQueryBuilder.append(CQLTranslator.APPLY_BATCH);
      executeCQLQuery(batchQueryBuilder.toString());
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    releaseConnection(pooledConnection);
  }
  return recordsExecuted;
}",0.990643101143621
176595,"/** 
 * Return the generated value of id.
 * @param discriptor
 * @param pu
 * @return
 */
public Long getGeneratedValue(TableGeneratorDiscriptor discriptor,String pu){
  Cassandra.Client conn=getRawClient(pu,discriptor.getSchema());
  try {
    conn.set_keyspace(discriptor.getSchema());
    ColumnPath columnPath=new ColumnPath(discriptor.getTable());
    columnPath.setColumn(discriptor.getValueColumnName().getBytes());
    long latestCount=0l;
    try {
      latestCount=conn.get(ByteBuffer.wrap(discriptor.getPkColumnValue().getBytes()),columnPath,getConsistencyLevel()).counter_column.value;
    }
 catch (    NotFoundException e) {
      latestCount=0;
    }
    ColumnParent columnParent=new ColumnParent(discriptor.getTable());
    CounterColumn counterColumn=new CounterColumn(ByteBuffer.wrap(discriptor.getValueColumnName().getBytes()),1);
    conn.add(ByteBuffer.wrap(discriptor.getPkColumnValue().getBytes()),columnParent,counterColumn,getConsistencyLevel());
    if (latestCount == 0) {
      return (long)discriptor.getInitialValue();
    }
 else {
      return (latestCount + 1) * discriptor.getAllocationSize();
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(""String_Node_Str"",e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(""String_Node_Str"",e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + discriptor.getTable() + ""String_Node_Str"",e);
    throw new KunderaException(""String_Node_Str"",e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + discriptor.getTable() + ""String_Node_Str"",e);
    throw new KunderaException(""String_Node_Str"",e);
  }
 finally {
    releaseConnection(conn);
  }
}","/** 
 * Return the generated value of id.
 * @param discriptor
 * @param pu
 * @return
 */
public Long getGeneratedValue(TableGeneratorDiscriptor discriptor,String pu){
  Cassandra.Client conn=getRawClient(pu,discriptor.getSchema());
  try {
    conn.set_keyspace(discriptor.getSchema());
    ColumnPath columnPath=new ColumnPath(discriptor.getTable());
    columnPath.setColumn(discriptor.getValueColumnName().getBytes());
    long latestCount=0l;
    try {
      latestCount=conn.get(ByteBuffer.wrap(discriptor.getPkColumnValue().getBytes()),columnPath,getConsistencyLevel()).counter_column.value;
    }
 catch (    NotFoundException e) {
      latestCount=0;
    }
    ColumnParent columnParent=new ColumnParent(discriptor.getTable());
    CounterColumn counterColumn=new CounterColumn(ByteBuffer.wrap(discriptor.getValueColumnName().getBytes()),1);
    conn.add(ByteBuffer.wrap(discriptor.getPkColumnValue().getBytes()),columnParent,counterColumn,getConsistencyLevel());
    if (latestCount == 0) {
      return (long)discriptor.getInitialValue();
    }
 else {
      return (latestCount + 1) * discriptor.getAllocationSize();
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(""String_Node_Str"",e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(""String_Node_Str"",e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + discriptor.getTable() + ""String_Node_Str"",e);
    throw new KunderaException(""String_Node_Str"",e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + discriptor.getTable() + ""String_Node_Str"",e);
    throw new KunderaException(""String_Node_Str"",e);
  }
}",0.9874643874643876
176596,"/** 
 * On condition.
 * @param m the m
 * @param metaModel the meta model
 * @param keyObj the compound key
 * @param idColumn the id column
 * @param builder the builder
 * @param isPresent the is present
 * @param translator the translator
 * @return true, if successful
 */
private boolean onCondition(EntityMetadata m,MetamodelImpl metaModel,EmbeddableType keyObj,String idColumn,StringBuilder builder,boolean isPresent,CQLTranslator translator){
  String partitionKey=null;
  boolean allowFiltering=false;
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      String fieldName=clause.getProperty();
      String condition=clause.getCondition();
      Object value=clause.getValue();
      isPresent=true;
      if (keyObj != null && idColumn.equals(fieldName)) {
        Field[] fields=m.getIdAttribute().getBindableJavaType().getDeclaredFields();
        for (        Field field : fields) {
          if (!ReflectUtils.isTransientOrStatic(field)) {
            Attribute compositeColumn=keyObj.getAttribute(field.getName());
            translator.buildWhereClause(builder,((AbstractAttribute)compositeColumn).getJPAColumnName(),field,value);
            if (partitionKey == null) {
              partitionKey=compositeColumn.getName();
            }
            if (!allowFiltering) {
              allowFiltering=fieldName.equals(partitionKey);
            }
          }
        }
      }
 else       if (keyObj != null && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType()) && StringUtils.contains(fieldName,'.')) {
        fieldName=fieldName.substring(fieldName.indexOf(""String_Node_Str"") + 1);
        ((AbstractAttribute)keyObj.getAttribute(fieldName)).getJPAColumnName();
        translator.buildWhereClause(builder,((AbstractAttribute)keyObj.getAttribute(fieldName)).getJPAColumnName(),value,condition);
        if (partitionKey == null) {
          partitionKey=keyObj.getAttribute(fieldName).getName();
        }
        if (!allowFiltering) {
          allowFiltering=fieldName.equals(partitionKey);
        }
      }
 else       if (idColumn.equals(fieldName)) {
        translator.buildWhereClause(builder,CassandraUtilities.getIdColumnName(m,externalProperties),value,condition);
      }
 else {
        translator.buildWhereClause(builder,fieldName,value,condition);
        allowFiltering=true;
      }
    }
  }
  if (isPresent) {
    builder.delete(builder.lastIndexOf(CQLTranslator.AND_CLAUSE),builder.length());
  }
  if (allowFiltering) {
    onLimit(builder);
    builder.append(""String_Node_Str"");
    translator.buildFilteringClause(builder);
  }
 else {
    onLimit(builder);
  }
  return isPresent;
}","/** 
 * On condition.
 * @param m the m
 * @param metaModel the meta model
 * @param keyObj the compound key
 * @param idColumn the id column
 * @param builder the builder
 * @param isPresent the is present
 * @param translator the translator
 * @return true, if successful
 */
private boolean onCondition(EntityMetadata m,MetamodelImpl metaModel,EmbeddableType keyObj,String idColumn,StringBuilder builder,boolean isPresent,CQLTranslator translator){
  String partitionKey=null;
  boolean allowFiltering=false;
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      String fieldName=clause.getProperty();
      String condition=clause.getCondition();
      Object value=clause.getValue();
      isPresent=true;
      if (keyObj != null && idColumn.equals(fieldName)) {
        Field[] fields=m.getIdAttribute().getBindableJavaType().getDeclaredFields();
        for (        Field field : fields) {
          if (!ReflectUtils.isTransientOrStatic(field)) {
            Attribute compositeColumn=keyObj.getAttribute(field.getName());
            translator.buildWhereClause(builder,((AbstractAttribute)compositeColumn).getJPAColumnName(),field,value);
            if (partitionKey == null) {
              partitionKey=compositeColumn.getName();
            }
            if (!allowFiltering) {
              allowFiltering=fieldName.equals(partitionKey);
            }
          }
        }
      }
 else       if (keyObj != null && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType()) && StringUtils.contains(fieldName,'.')) {
        fieldName=fieldName.substring(fieldName.indexOf(""String_Node_Str"") + 1);
        ((AbstractAttribute)keyObj.getAttribute(fieldName)).getJPAColumnName();
        translator.buildWhereClause(builder,((AbstractAttribute)keyObj.getAttribute(fieldName)).getBindableJavaType(),((AbstractAttribute)keyObj.getAttribute(fieldName)).getJPAColumnName(),value,condition);
        if (partitionKey == null) {
          partitionKey=keyObj.getAttribute(fieldName).getName();
        }
        if (!allowFiltering) {
          allowFiltering=fieldName.equals(partitionKey);
        }
      }
 else       if (idColumn.equals(fieldName)) {
        translator.buildWhereClause(builder,((AbstractAttribute)m.getIdAttribute()).getBindableJavaType(),CassandraUtilities.getIdColumnName(m,externalProperties),value,condition);
      }
 else {
        Metamodel metamodel=KunderaMetadataManager.getMetamodel(m.getPersistenceUnit());
        Attribute attribute=((MetamodelImpl)metamodel).getEntityAttribute(m.getEntityClazz(),m.getFieldName(fieldName));
        translator.buildWhereClause(builder,((AbstractAttribute)attribute).getBindableJavaType(),fieldName,value,condition);
        allowFiltering=true;
      }
    }
  }
  if (isPresent) {
    builder.delete(builder.lastIndexOf(CQLTranslator.AND_CLAUSE),builder.length());
  }
  if (allowFiltering) {
    onLimit(builder);
    builder.append(""String_Node_Str"");
    translator.buildFilteringClause(builder);
  }
 else {
    onLimit(builder);
  }
  return isPresent;
}",0.9322695637413004
176597,"@Test public void test(){
  Token token1=new Token();
  token1.setId(""String_Node_Str"");
  TokenClient client=new TokenClient();
  client.setClientName(""String_Node_Str"");
  client.setId(""String_Node_Str"");
  token1.setClient(client);
  Token token2=new Token();
  token2.setId(""String_Node_Str"");
  token2.setClient(client);
  em.persist(token1);
  em.persist(token2);
  em.clear();
  Token result=em.find(Token.class,""String_Node_Str"");
  Assert.assertNotNull(result);
  Assert.assertNotNull(result.getClient());
  em.clear();
  String query=""String_Node_Str"";
  Query q=em.createQuery(query);
  List<Token> results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  Assert.assertNotNull(results.get(0).getClient());
  Assert.assertNotNull(results.get(1).getClient());
  em.clear();
  query=""String_Node_Str"";
  q=em.createQuery(query);
  List<TokenClient> resultClient=q.getResultList();
  Assert.assertNotNull(resultClient);
  Assert.assertEquals(1,resultClient.size());
  Assert.assertEquals(2,resultClient.get(0).getTokens().size());
}","@Test public void test(){
  Token token1=new Token();
  token1.setId(""String_Node_Str"");
  TokenClient client=new TokenClient();
  client.setClientName(""String_Node_Str"");
  client.setId(""String_Node_Str"");
  token1.setClient(client);
  Token token2=new Token();
  token2.setId(""String_Node_Str"");
  token2.setClient(client);
  em.persist(token1);
  em.persist(token2);
  em.clear();
  Token result=em.find(Token.class,""String_Node_Str"");
  Assert.assertNotNull(result);
  Assert.assertNotNull(result.getClient());
  em.clear();
  String query=""String_Node_Str"";
  Query q=em.createQuery(query);
  List<Token> results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  Assert.assertNotNull(results.get(0).getClient());
  Assert.assertNotNull(results.get(1).getClient());
  em.clear();
  query=""String_Node_Str"";
  q=em.createQuery(query);
  List<TokenClient> resultClient=q.getResultList();
  Assert.assertNotNull(resultClient);
  Assert.assertEquals(1,resultClient.size());
  Assert.assertEquals(2,resultClient.get(0).getTokens().size());
  em.clear();
}",0.9935897435897436
176598,"/** 
 * On insert cassandra.
 * @throws Exception the exception
 */
@Test public void onInsertCassandra() throws Exception {
  Object p1=prepareData(""String_Node_Str"",10);
  Object p2=prepareData(""String_Node_Str"",20);
  Object p3=prepareData(""String_Node_Str"",15);
  Query findQuery=em.createQuery(""String_Node_Str"");
  List<PersonCassandra> allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  PersonCassandra personWithKey=new PersonCassandra();
  personWithKey.setPersonId(""String_Node_Str"");
  em.persist(personWithKey);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  em.clear();
  PersonCassandra p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  Assert.assertEquals(Day.THURSDAY,p.getDay());
  em.clear();
  String qry=""String_Node_Str"";
  Query q=em.createQuery(qry);
  List<PersonCassandra> persons=q.getResultList();
  assertFindByName(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAge(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeGTAndLT(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeBetween(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByRange(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindWithoutWhereClause(em,""String_Node_Str"",PersonCassandra.class);
  testCountResult();
  for (  PersonCassandra person : persons) {
    person.setPersonName(""String_Node_Str"");
    em.merge(person);
  }
  em.clear();
  selectIdQuery();
  em.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String updateQuery=""String_Node_Str"";
  q=em.createQuery(updateQuery);
  q.executeUpdate();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String deleteQuery=""String_Node_Str"";
  q=em.createQuery(deleteQuery);
  Assert.assertEquals(3,q.executeUpdate());
}","/** 
 * On insert cassandra.
 * @throws Exception the exception
 */
@Test public void onInsertCassandra() throws Exception {
  Object p1=prepareData(""String_Node_Str"",10);
  Object p2=prepareData(""String_Node_Str"",20);
  Object p3=prepareData(""String_Node_Str"",15);
  Query findQuery=em.createQuery(""String_Node_Str"",PersonCassandra.class);
  List<PersonCassandra> allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  PersonCassandra personWithKey=new PersonCassandra();
  personWithKey.setPersonId(""String_Node_Str"");
  em.persist(personWithKey);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  em.clear();
  PersonCassandra p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  Assert.assertEquals(Day.THURSDAY,p.getDay());
  em.clear();
  String qry=""String_Node_Str"";
  Query q=em.createQuery(qry);
  List<PersonCassandra> persons=q.getResultList();
  assertFindByName(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAge(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeGTAndLT(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeBetween(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByRange(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindWithoutWhereClause(em,""String_Node_Str"",PersonCassandra.class);
  testCountResult();
  for (  PersonCassandra person : persons) {
    person.setPersonName(""String_Node_Str"");
    em.merge(person);
  }
  em.clear();
  selectIdQuery();
  em.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String updateQuery=""String_Node_Str"";
  q=em.createQuery(updateQuery);
  q.executeUpdate();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String deleteQuery=""String_Node_Str"";
  q=em.createQuery(deleteQuery);
  Assert.assertEquals(3,q.executeUpdate());
}",0.9961294862772696
176599,"/** 
 * CompositeUserDataType
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  CassandraCli.dropKeySpace(""String_Node_Str"");
}","/** 
 * CompositeUserDataType
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
}",0.8273381294964028
176600,"@Test public void onQuery() throws InstantiationException, IllegalAccessException {
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CompoundKeyDataType key=prepareData(new Long(12345677),78575785897L,""String_Node_Str"",false,10,'A',(byte)5,(short)8,(float)69.3,163.76765654,enrolmentDate,enrolmentTime,joiningDateAndTime,new Integer(3),new Long(978423946455l),135434.89,newSqlDate,sqlTime,sqlTimestamp,bigDecimal,bigInteger,calendar,CompoundKeyDataType.class.newInstance());
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  PrimeUserDataType user=new PrimeUserDataType(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  em.persist(user);
  em.clear();
  final String noClause=""String_Node_Str"";
  final String withFirstCompositeColClause=""String_Node_Str"";
  final String withSecondCompositeColClause=""String_Node_Str"";
  final String withBothCompositeColClause=""String_Node_Str"";
  final String withSelectiveCompositeColClause=""String_Node_Str"";
  final String withAllCompositeColClause=""String_Node_Str"";
  final String selectiveColumnTweetBodyWithAllCompositeColClause=""String_Node_Str"";
  Query q=em.createQuery(noClause);
  List<PrimeUserDataType> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withFirstCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSecondCompositeColClause);
  q.setParameter(""String_Node_Str"",78575785897L);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withBothCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  q.setParameter(""String_Node_Str"",78575785897L);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withAllCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  q.setParameter(""String_Node_Str"",78575785897L);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",false);
  q.setParameter(""String_Node_Str"",10);
  q.setParameter(""String_Node_Str"",'A');
  q.setParameter(""String_Node_Str"",new Byte((byte)5));
  q.setParameter(""String_Node_Str"",(short)8);
  q.setParameter(""String_Node_Str"",(float)69.3);
  q.setParameter(""String_Node_Str"",163.76765654);
  q.setParameter(""String_Node_Str"",enrolmentDate);
  q.setParameter(""String_Node_Str"",enrolmentTime);
  q.setParameter(""String_Node_Str"",joiningDateAndTime);
  q.setParameter(""String_Node_Str"",new Integer(3));
  q.setParameter(""String_Node_Str"",new Long(978423946455l));
  q.setParameter(""String_Node_Str"",135434.89);
  q.setParameter(""String_Node_Str"",newSqlDate);
  q.setParameter(""String_Node_Str"",sqlTimestamp);
  q.setParameter(""String_Node_Str"",sqlTime);
  q.setParameter(""String_Node_Str"",bigInteger);
  q.setParameter(""String_Node_Str"",calendar.getTime());
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSelectiveCompositeColClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNull(results.get(0).getTweetBody());
  q=em.createQuery(selectiveColumnTweetBodyWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  q.setParameter(""String_Node_Str"",78575785897L);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",false);
  q.setParameter(""String_Node_Str"",10);
  q.setParameter(""String_Node_Str"",'A');
  q.setParameter(""String_Node_Str"",(byte)5);
  q.setParameter(""String_Node_Str"",(short)8);
  q.setParameter(""String_Node_Str"",(float)69.3);
  q.setParameter(""String_Node_Str"",163.76765654);
  q.setParameter(""String_Node_Str"",enrolmentDate);
  q.setParameter(""String_Node_Str"",enrolmentTime);
  q.setParameter(""String_Node_Str"",joiningDateAndTime);
  q.setParameter(""String_Node_Str"",new Integer(3));
  q.setParameter(""String_Node_Str"",new Long(978423946455l));
  q.setParameter(""String_Node_Str"",135434.89);
  q.setParameter(""String_Node_Str"",newSqlDate);
  q.setParameter(""String_Node_Str"",sqlTimestamp);
  q.setParameter(""String_Node_Str"",sqlTime);
  q.setParameter(""String_Node_Str"",bigInteger);
  q.setParameter(""String_Node_Str"",calendar.getTime());
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertNull(results.get(0).getTweetDate());
  final String selectiveColumnTweetDateWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetDateWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(currentDate.getTime(),results.get(0).getTweetDate().getTime());
  Assert.assertNull(results.get(0).getTweetBody());
  final String withCompositeKeyClause=""String_Node_Str"";
  q=em.createQuery(withCompositeKeyClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  em.remove(user);
  em.clear();
}","@Test public void onQuery() throws InstantiationException, IllegalAccessException {
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CompoundKeyDataType key=prepareData(new Long(12345677),78575785897L,""String_Node_Str"",false,10,'A',(byte)5,(short)8,(float)69.3,163.76765654,enrolmentDate,enrolmentTime,joiningDateAndTime,new Integer(3),new Long(978423946455l),135434.89,newSqlDate,sqlTime,sqlTimestamp,bigDecimal,bigInteger,calendar,CompoundKeyDataType.class.newInstance());
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  PrimeUserDataType user=new PrimeUserDataType(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  em.persist(user);
  em.clear();
  final String noClause=""String_Node_Str"";
  final String withFirstCompositeColClause=""String_Node_Str"";
  final String withSecondCompositeColClause=""String_Node_Str"";
  final String withBothCompositeColClause=""String_Node_Str"";
  final String withSelectiveCompositeColClause=""String_Node_Str"";
  final String withAllCompositeColClause=""String_Node_Str"";
  final String selectiveColumnTweetBodyWithAllCompositeColClause=""String_Node_Str"";
  Query q=em.createQuery(noClause);
  List<PrimeUserDataType> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withFirstCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSecondCompositeColClause);
  q.setParameter(""String_Node_Str"",78575785897L);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withBothCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  q.setParameter(""String_Node_Str"",78575785897L);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withAllCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  q.setParameter(""String_Node_Str"",78575785897L);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",false);
  q.setParameter(""String_Node_Str"",10);
  q.setParameter(""String_Node_Str"",'A');
  q.setParameter(""String_Node_Str"",new Byte((byte)5));
  q.setParameter(""String_Node_Str"",(short)8);
  q.setParameter(""String_Node_Str"",(float)69.3);
  q.setParameter(""String_Node_Str"",163.76765654);
  q.setParameter(""String_Node_Str"",enrolmentDate);
  q.setParameter(""String_Node_Str"",enrolmentTime);
  q.setParameter(""String_Node_Str"",joiningDateAndTime);
  q.setParameter(""String_Node_Str"",new Integer(3));
  q.setParameter(""String_Node_Str"",new Long(978423946455l));
  q.setParameter(""String_Node_Str"",135434.89);
  q.setParameter(""String_Node_Str"",newSqlDate);
  q.setParameter(""String_Node_Str"",sqlTimestamp);
  q.setParameter(""String_Node_Str"",sqlTime);
  q.setParameter(""String_Node_Str"",bigInteger);
  q.setParameter(""String_Node_Str"",calendar);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSelectiveCompositeColClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNull(results.get(0).getTweetBody());
  q=em.createQuery(selectiveColumnTweetBodyWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  q.setParameter(""String_Node_Str"",78575785897L);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",false);
  q.setParameter(""String_Node_Str"",10);
  q.setParameter(""String_Node_Str"",'A');
  q.setParameter(""String_Node_Str"",(byte)5);
  q.setParameter(""String_Node_Str"",(short)8);
  q.setParameter(""String_Node_Str"",(float)69.3);
  q.setParameter(""String_Node_Str"",163.76765654);
  q.setParameter(""String_Node_Str"",enrolmentDate);
  q.setParameter(""String_Node_Str"",enrolmentTime);
  q.setParameter(""String_Node_Str"",joiningDateAndTime);
  q.setParameter(""String_Node_Str"",new Integer(3));
  q.setParameter(""String_Node_Str"",new Long(978423946455l));
  q.setParameter(""String_Node_Str"",135434.89);
  q.setParameter(""String_Node_Str"",newSqlDate);
  q.setParameter(""String_Node_Str"",sqlTimestamp);
  q.setParameter(""String_Node_Str"",sqlTime);
  q.setParameter(""String_Node_Str"",bigInteger);
  q.setParameter(""String_Node_Str"",calendar);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertNull(results.get(0).getTweetDate());
  final String selectiveColumnTweetDateWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetDateWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(currentDate.getTime(),results.get(0).getTweetDate().getTime());
  Assert.assertNull(results.get(0).getTweetBody());
  final String withCompositeKeyClause=""String_Node_Str"";
  q=em.createQuery(withCompositeKeyClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  em.remove(user);
  em.clear();
}",0.998159057437408
176601,"/** 
 * Gets the client instance.
 * @return the client instance
 */
@Override public Client getClientInstance(){
  if (isThreadSafe()) {
    logger.info(""String_Node_Str"" + persistenceUnit);
    if (client == null) {
      client=instantiateClient(persistenceUnit);
    }
  }
 else {
    logger.debug(""String_Node_Str"" + persistenceUnit);
    client=instantiateClient(persistenceUnit);
  }
  return client;
}","/** 
 * Gets the client instance.
 * @return the client instance
 */
@Override public Client getClientInstance(){
  if (isThreadSafe()) {
    logger.info(""String_Node_Str"" + persistenceUnit);
    if (client == null) {
      client=instantiateClient(persistenceUnit);
    }
  }
 else {
    logger.debug(""String_Node_Str"" + persistenceUnit);
    return instantiateClient(persistenceUnit);
  }
  return client;
}",0.982885085574572
176602,"/** 
 * Scan class resource in the provided urls with the additional Class-Path of each jar checking
 * @param classRelativePath relative path to a class resource
 * @param urls urls to be checked
 * @return list of class path included in the base package
 */
private URL[] findResourcesInUrls(String classRelativePath,URL[] urls){
  List<URL> list=new ArrayList<URL>();
  for (  URL url : urls) {
    if (AllowedProtocol.isValidProtocol(url.getProtocol().toUpperCase()) && url.getPath().endsWith(""String_Node_Str"")) {
      try {
        JarFile jarFile=new JarFile(URLDecoder.decode(url.getFile(),Constants.CHARSET_UTF8));
        Manifest manifest=jarFile.getManifest();
        if (manifest != null) {
          String classPath=manifest.getMainAttributes().getValue(""String_Node_Str"");
          if (!StringUtils.isEmpty(classPath)) {
            List<URL> subList=new ArrayList<URL>();
            for (            String cpEntry : classPath.split(""String_Node_Str"")) {
              try {
                subList.add(new URL(cpEntry));
              }
 catch (              MalformedURLException e) {
                logger.warn(""String_Node_Str"" + url.toString() + ""String_Node_Str""+ cpEntry);
              }
            }
            list.addAll(Arrays.asList(findResourcesInUrls(classRelativePath,subList.toArray(new URL[subList.size()]))));
          }
        }
        JarEntry present=jarFile.getJarEntry(classRelativePath + ""String_Node_Str"");
        if (present != null) {
          list.add(url);
        }
      }
 catch (      IOException e) {
        logger.warn(""String_Node_Str"" + e.getMessage());
      }
    }
 else     if (url.getPath().endsWith(""String_Node_Str"")) {
      File file=new File(url.getPath() + classRelativePath + ""String_Node_Str"");
      if (file.exists()) {
        try {
          list.add(file.toURL());
        }
 catch (        MalformedURLException e) {
          throw new ResourceReadingException(e);
        }
      }
    }
  }
  return list.toArray(new URL[list.size()]);
}","/** 
 * Scan class resource in the provided urls with the additional Class-Path of each jar checking
 * @param classRelativePath relative path to a class resource
 * @param urls urls to be checked
 * @return list of class path included in the base package
 */
private URL[] findResourcesInUrls(String classRelativePath,URL[] urls){
  List<URL> list=new ArrayList<URL>();
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  for (  URL url : urls) {
    if (AllowedProtocol.isValidProtocol(url.getProtocol().toUpperCase()) && url.getPath().endsWith(""String_Node_Str"")) {
      try {
        JarFile jarFile=new JarFile(URLDecoder.decode(url.getFile(),Constants.CHARSET_UTF8));
        Manifest manifest=jarFile.getManifest();
        if (manifest != null) {
          String classPath=manifest.getMainAttributes().getValue(""String_Node_Str"");
          if (!StringUtils.isEmpty(classPath)) {
            List<URL> subList=new ArrayList<URL>();
            for (            String cpEntry : classPath.split(""String_Node_Str"")) {
              URLClassLoader loader=(URLClassLoader)this.getClass().getClassLoader();
              URL enclosedJar=loader.findResource(cpEntry);
              if (enclosedJar != null) {
                subList.add(enclosedJar);
              }
            }
            list.addAll(Arrays.asList(findResourcesInUrls(classRelativePath,subList.toArray(new URL[subList.size()]))));
          }
        }
        JarEntry present=jarFile.getJarEntry(classRelativePath + ""String_Node_Str"");
        if (present != null) {
          list.add(url);
        }
      }
 catch (      IOException e) {
        logger.warn(""String_Node_Str"" + e.getMessage());
      }
    }
 else     if (url.getPath().endsWith(""String_Node_Str"")) {
      File file=new File(url.getPath() + classRelativePath + ""String_Node_Str"");
      if (file.exists()) {
        try {
          list.add(file.toURL());
        }
 catch (        MalformedURLException e) {
          throw new ResourceReadingException(e);
        }
      }
    }
  }
  return list.toArray(new URL[list.size()]);
}",0.9034132171387074
176603,"/** 
 * Process.
 * @param clazz the clazz
 * @param externalProperties
 * @return the entity metadata
 */
public EntityMetadata buildEntityMetadata(Class<?> clazz){
  EntityMetadata metadata=new EntityMetadata(clazz);
  validate(clazz);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + clazz);
  for (  MetadataProcessor processor : metadataProcessors) {
    checkForRDBMS(metadata);
    checkForNeo4J(metadata);
    processor.process(clazz,metadata);
    metadata=belongsToPersistenceUnit(metadata);
    if (metadata == null) {
      break;
    }
  }
  return metadata;
}","/** 
 * Process.
 * @param clazz the clazz
 * @param externalProperties
 * @return the entity metadata
 */
public EntityMetadata buildEntityMetadata(Class<?> clazz){
  EntityMetadata metadata=new EntityMetadata(clazz);
  validate(clazz);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + clazz);
  for (  MetadataProcessor processor : metadataProcessors) {
    checkForRDBMS(metadata);
    checkForNeo4J(metadata);
    processor.process(clazz,metadata);
    metadata=belongsToPersistenceUnit(metadata);
    if (metadata == null) {
      break;
    }
    if (MetadataUtils.isSchemaAttributeRequired(metadata.getPersistenceUnit()) && StringUtils.isBlank(metadata.getSchema())) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"" + metadata.getTableName() + ""String_Node_Str"");
      }
      throw new InvalidEntityDefinitionException(""String_Node_Str"" + metadata.getTableName() + ""String_Node_Str"");
    }
  }
  return metadata;
}",0.7574578469520103
176604,"/** 
 * Populate metadata.
 * @param < X > the generic type
 * @param < T > the generic type
 * @param metadata the metadata
 * @param clazz the clazz
 */
private <X extends Class,T extends Object>void populateMetadata(EntityMetadata metadata,Class<X> clazz,Map puProperties){
  Table table=clazz.getAnnotation(Table.class);
  boolean isEmbeddable=false;
  metadata.setTableName(table.name());
  addNamedNativeQueryMetadata(clazz);
  String schemaStr=table.schema();
  MetadataUtils.setSchemaAndPersistenceUnit(metadata,schemaStr,puProperties);
  if (metadata.getPersistenceUnit() != null) {
    MetaModelBuilder<X,T> metaModelBuilder=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(metadata.getPersistenceUnit());
    metaModelBuilder.process(clazz);
    for (    Field f : clazz.getDeclaredFields()) {
      if (f != null && !Modifier.isStatic(f.getModifiers()) && !Modifier.isTransient(f.getModifiers()) && !f.isAnnotationPresent(Transient.class)) {
        metaModelBuilder.construct(clazz,f);
        onIdAttribute(metaModelBuilder,metadata,clazz,f);
        onFamilyType(metadata,clazz,f);
        onJPAColumnMapping(metaModelBuilder,metadata,f);
        addRelationIntoMetadata(clazz,f,metadata);
      }
    }
  }
}","/** 
 * Populate metadata.
 * @param < X > the generic type
 * @param < T > the generic type
 * @param metadata the metadata
 * @param clazz the clazz
 */
private <X extends Class,T extends Object>void populateMetadata(EntityMetadata metadata,Class<X> clazz,Map puProperties){
  Table table=clazz.getAnnotation(Table.class);
  metadata.setTableName(table.name());
  addNamedNativeQueryMetadata(clazz);
  String schemaStr=table.schema();
  MetadataUtils.setSchemaAndPersistenceUnit(metadata,schemaStr,puProperties);
  if (metadata.getPersistenceUnit() != null) {
    MetaModelBuilder<X,T> metaModelBuilder=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(metadata.getPersistenceUnit());
    metaModelBuilder.process(clazz);
    for (    Field f : clazz.getDeclaredFields()) {
      if (f != null && !Modifier.isStatic(f.getModifiers()) && !Modifier.isTransient(f.getModifiers()) && !f.isAnnotationPresent(Transient.class)) {
        metaModelBuilder.construct(clazz,f);
        onIdAttribute(metaModelBuilder,metadata,clazz,f);
        onFamilyType(metadata,clazz,f);
        onJPAColumnMapping(metaModelBuilder,metadata,f);
        addRelationIntoMetadata(clazz,f,metadata);
      }
    }
  }
}",0.9878048780487804
176605,"/** 
 * Close.
 */
public void close(){
  nodes.clear();
  nodes=null;
  closed=true;
  externalProperties=null;
}","/** 
 * Close.
 */
public void close(){
  clear();
  closed=true;
}",0.7403314917127072
176606,"/** 
 * Return name if Idcolumn for cql, returns   {@CassandraConstants.CQL_KEY}if user opted for   {@PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE} otherwise returns JPAColumnName of id attribute.
 * @param m
 * @param externalProperties
 * @return
 */
public static String getIdColumnName(final EntityMetadata m,final Map<String,Object> externalProperties){
  String persistenceUnit=m.getPersistenceUnit();
  PersistenceUnitMetadata persistenceUnitMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String autoDdlOption=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE) : null;
  if (autoDdlOption == null) {
    autoDdlOption=persistenceUnitMetadata != null ? persistenceUnitMetadata.getProperty(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE) : null;
  }
  return autoDdlOption == null ? ((AbstractAttribute)m.getIdAttribute()).getJPAColumnName() : CassandraConstants.CQL_KEY;
}","/** 
 * Return name if Idcolumn for cql, returns   {@CassandraConstants.CQL_KEY} if user opted for{@PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE} otherwise returnsJPAColumnName of id attribute.
 * @param m
 * @param externalProperties
 * @return
 */
public static String getIdColumnName(final EntityMetadata m,final Map<String,Object> externalProperties){
  String persistenceUnit=m.getPersistenceUnit();
  PersistenceUnitMetadata persistenceUnitMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
  String autoDdlOption=externalProperties != null ? (String)externalProperties.get(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE) : null;
  if (autoDdlOption == null) {
    autoDdlOption=persistenceUnitMetadata != null ? persistenceUnitMetadata.getProperty(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE) : null;
  }
  return autoDdlOption == null ? ((AbstractAttribute)m.getIdAttribute()).getJPAColumnName() : CassandraConstants.CQL_KEY;
}",0.9974861739567622
176607,"/** 
 * Populate metadata.
 * @param < X > the generic type
 * @param < T > the generic type
 * @param metadata the metadata
 * @param clazz the clazz
 */
private <X extends Class,T extends Object>void populateMetadata(EntityMetadata metadata,Class<X> clazz,Map puProperties){
  Table table=clazz.getAnnotation(Table.class);
  boolean isEmbeddable=false;
  metadata.setTableName(table.name());
  addNamedNativeQueryMetadata(clazz);
  String schemaStr=table.schema();
  if (schemaStr == null) {
    LOG.error(""String_Node_Str"" + table.name() + ""String_Node_Str"");
    throw new InvalidEntityDefinitionException(""String_Node_Str"" + table.name() + ""String_Node_Str"");
  }
  MetadataUtils.setSchemaAndPersistenceUnit(metadata,schemaStr,puProperties);
  if (metadata.getPersistenceUnit() != null) {
    MetaModelBuilder<X,T> metaModelBuilder=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(metadata.getPersistenceUnit());
    metaModelBuilder.process(clazz);
    for (    Field f : clazz.getDeclaredFields()) {
      if (f != null && !Modifier.isStatic(f.getModifiers()) && !Modifier.isTransient(f.getModifiers()) && !f.isAnnotationPresent(Transient.class)) {
        metaModelBuilder.construct(clazz,f);
        onIdAttribute(metaModelBuilder,metadata,clazz,f);
        onFamilyType(metadata,clazz,f);
        onJPAColumnMapping(metaModelBuilder,metadata,f);
        addRelationIntoMetadata(clazz,f,metadata);
      }
    }
  }
}","/** 
 * Populate metadata.
 * @param < X > the generic type
 * @param < T > the generic type
 * @param metadata the metadata
 * @param clazz the clazz
 */
private <X extends Class,T extends Object>void populateMetadata(EntityMetadata metadata,Class<X> clazz,Map puProperties){
  Table table=clazz.getAnnotation(Table.class);
  boolean isEmbeddable=false;
  metadata.setTableName(table.name());
  addNamedNativeQueryMetadata(clazz);
  String schemaStr=table.schema();
  if (StringUtils.isBlank(schemaStr)) {
    LOG.error(""String_Node_Str"" + table.name() + ""String_Node_Str"");
    throw new InvalidEntityDefinitionException(""String_Node_Str"" + table.name() + ""String_Node_Str"");
  }
  MetadataUtils.setSchemaAndPersistenceUnit(metadata,schemaStr,puProperties);
  if (metadata.getPersistenceUnit() != null) {
    MetaModelBuilder<X,T> metaModelBuilder=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(metadata.getPersistenceUnit());
    metaModelBuilder.process(clazz);
    for (    Field f : clazz.getDeclaredFields()) {
      if (f != null && !Modifier.isStatic(f.getModifiers()) && !Modifier.isTransient(f.getModifiers()) && !f.isAnnotationPresent(Transient.class)) {
        metaModelBuilder.construct(clazz,f);
        onIdAttribute(metaModelBuilder,metadata,clazz,f);
        onFamilyType(metadata,clazz,f);
        onJPAColumnMapping(metaModelBuilder,metadata,f);
        addRelationIntoMetadata(clazz,f,metadata);
      }
    }
  }
}",0.9900240798073616
176608,"@Override public List<Object> findByRelation(String colName,Object colValue,Class entityClazz){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClazz);
  Object[] ids=findIdsByColumn(entityMetadata.getSchema(),entityMetadata.getTableName(),((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName(),colName,colValue,entityClazz);
  List<Object> resultSet=new ArrayList<Object>();
  if (ids != null) {
    for (    Object id : new HashSet(Arrays.asList(ids))) {
      resultSet.add(find(entityClazz,id));
    }
  }
  return resultSet;
}","@Override public List<Object> findByRelation(String colName,Object colValue,Class entityClazz){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClazz);
  Object[] ids=findIdsByColumn(entityMetadata.getTableName(),colName,colValue);
  List<Object> resultSet=new ArrayList<Object>();
  if (ids != null) {
    for (    Object id : new HashSet(Arrays.asList(ids))) {
      resultSet.add(find(entityClazz,id));
    }
  }
  return resultSet;
}",0.8729703915950334
176609,"@Override public Object[] findIdsByColumn(String schemaName,String tableName,String pKeyName,String columnName,Object columnValue,Class entityClazz){
  Object connection=null;
  try {
    connection=getConnection();
    String valueAsStr=PropertyAccessorHelper.getString(columnValue);
    Set<String> results=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,columnName),getDouble(valueAsStr),getDouble(valueAsStr));
      ((Transaction)connection).exec();
      results=(Set<String>)response.get();
    }
 else {
      results=((Jedis)connection).zrangeByScore(getHashKey(tableName,columnName),getDouble(valueAsStr),getDouble(valueAsStr));
    }
    if (results != null) {
      return results.toArray(new Object[0]);
    }
  }
  finally {
    onCleanup(connection);
  }
  return null;
}","public Object[] findIdsByColumn(String tableName,String columnName,Object columnValue){
  Object connection=null;
  try {
    connection=getConnection();
    String valueAsStr=PropertyAccessorHelper.getString(columnValue);
    Set<String> results=null;
    if (resource != null && resource.isActive()) {
      Response response=((Transaction)connection).zrangeByScore(getHashKey(tableName,columnName),getDouble(valueAsStr),getDouble(valueAsStr));
      ((Transaction)connection).exec();
      results=(Set<String>)response.get();
    }
 else {
      results=((Jedis)connection).zrangeByScore(getHashKey(tableName,columnName),getDouble(valueAsStr),getDouble(valueAsStr));
    }
    if (results != null) {
      return results.toArray(new Object[0]);
    }
  }
  finally {
    onCleanup(connection);
  }
  return null;
}",0.9575971731448764
176610,"@Override public void delete(Object entity,Object pKey){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  String idString=PropertyAccessorHelper.getString(pKey);
  Key key=Key.createKey(entityMetadata.getTableName());
  KeyRange keyRange=new KeyRange(idString,true,idString,true);
  Iterator<KeyValueVersion> iterator=kvStore.storeIterator(Direction.UNORDERED,0,key,keyRange,null);
  List<Operation> deleteOperations=new ArrayList<Operation>();
  while (iterator.hasNext()) {
    KeyValueVersion keyValueVersion=iterator.next();
    List<String> minorKeysComponents=keyValueVersion.getKey().getMinorPath();
    if (minorKeysComponents.size() > 0 && minorKeysComponents.get(minorKeysComponents.size() - 1).endsWith(LOB_SUFFIX)) {
      kvStore.deleteLOB(keyValueVersion.getKey(),DURABILITY_DEFAULT,WRITE_TIMEOUT_SECONDS,TimeUnit.SECONDS);
    }
 else {
      Operation op=kvStore.getOperationFactory().createDelete(keyValueVersion.getKey());
      deleteOperations.add(op);
    }
  }
  execute(deleteOperations);
  getIndexManager().remove(entityMetadata,entity,pKey.toString());
}","@Override public void delete(Object entity,Object pKey){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  String idString=PropertyAccessorHelper.getString(pKey);
  Key key=Key.createKey(entityMetadata.getTableName());
  KeyRange keyRange=new KeyRange(idString,true,idString,true);
  Iterator<KeyValueVersion> iterator=kvStore.storeIterator(Direction.UNORDERED,0,key,keyRange,null);
  List<Operation> deleteOperations=new ArrayList<Operation>();
  while (iterator.hasNext()) {
    KeyValueVersion keyValueVersion=iterator.next();
    Key foundKey=keyValueVersion.getKey();
    String foundIdString=foundKey.getMajorPath().get(1);
    List<String> minorKeysComponents=keyValueVersion.getKey().getMinorPath();
    if (minorKeysComponents.size() > 0 && minorKeysComponents.get(minorKeysComponents.size() - 1).endsWith(LOB_SUFFIX)) {
      kvStore.deleteLOB(keyValueVersion.getKey(),DURABILITY_DEFAULT,WRITE_TIMEOUT_SECONDS,TimeUnit.SECONDS);
    }
 else {
      if (idString.equals(foundIdString)) {
        Operation op=kvStore.getOperationFactory().createDelete(foundKey);
        deleteOperations.add(op);
      }
    }
  }
  execute(deleteOperations);
  getIndexManager().remove(entityMetadata,entity,pKey.toString());
}",0.8929765886287625
176611,"public void persist(EntityMetadata entityMetadata,Object entity,org.apache.cassandra.thrift.Cassandra.Client conn,List<RelationHolder> rlHolders) throws UnsupportedEncodingException, InvalidRequestException, TException, UnavailableException, TimedOutException, SchemaDisagreementException {
  String query;
  if (entityMetadata.isCounterColumnType()) {
    query=createUpdateQuery(entityMetadata,entity,conn,rlHolders);
  }
 else {
    query=createInsertQuery(entityMetadata,entity,conn,rlHolders);
  }
  conn.execute_cql3_query(ByteBuffer.wrap(query.getBytes(Constants.CHARSET_UTF8)),Compression.NONE,consistencyLevel);
}","public void persist(EntityMetadata entityMetadata,Object entity,org.apache.cassandra.thrift.Cassandra.Client conn,List<RelationHolder> rlHolders) throws UnsupportedEncodingException, InvalidRequestException, TException, UnavailableException, TimedOutException, SchemaDisagreementException {
  String query;
  if (entityMetadata.isCounterColumnType()) {
    query=createUpdateQueryForCounter(entityMetadata,entity,conn,rlHolders);
  }
 else {
    query=createInsertQuery(entityMetadata,entity,conn,rlHolders);
  }
  conn.execute_cql3_query(ByteBuffer.wrap(query.getBytes(Constants.CHARSET_UTF8)),Compression.NONE,consistencyLevel);
}",0.9920255183413078
176612,"public String getCqlVersion(){
  if (getDataStore() != null) {
    Properties properties=getDataStore().getConnection() != null ? getDataStore().getConnection().getProperties() : null;
    if (properties != null) {
      String cqlVersion=properties.getProperty(CassandraConstants.CQL_VERSION);
      if (cqlVersion != null) {
        if (cqlVersion.equalsIgnoreCase(CassandraConstants.CQL_VERSION_3_0) || cqlVersion.equalsIgnoreCase(CassandraConstants.CQL_VERSION_2_0)) {
          return cqlVersion;
        }
      }
 else {
        log.warn(""String_Node_Str"");
      }
    }
  }
  return CassandraConstants.CQL_VERSION_2_0;
}","public String getCqlVersion(){
  if (getDataStore() != null) {
    Properties properties=getDataStore().getConnection() != null ? getDataStore().getConnection().getProperties() : null;
    if (properties != null) {
      String cqlVersion=properties.getProperty(CassandraConstants.CQL_VERSION);
      if (cqlVersion != null) {
        if (cqlVersion.equalsIgnoreCase(CassandraConstants.CQL_VERSION_3_0) || cqlVersion.equalsIgnoreCase(CassandraConstants.CQL_VERSION_2_0)) {
          return cqlVersion;
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
    }
  }
  return CassandraConstants.CQL_VERSION_2_0;
}",0.925515055467512
176613,"/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        if (CassandraConstants.CQL_KEY.equals(thriftColumnName) && tr.getId() == null) {
          entity=initialize(m,entity,null);
          setId(m,entity,column.getValue());
        }
 else         if (m.isCounterColumnType()) {
          LongAccessor accessor=new LongAccessor();
          Long value=accessor.fromBytes(Long.class,column.getValue());
          CounterColumn counterColumn=new CounterColumn(ByteBuffer.wrap(column.getName()),value);
          onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations);
        }
 else {
          entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations);
        }
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  InstantiationException iex) {
    log.error(""String_Node_Str"" + iex.getMessage());
    throw new PersistenceException(iex);
  }
catch (  IllegalAccessException iaex) {
    log.error(""String_Node_Str"" + iaex.getMessage());
    throw new PersistenceException(iaex);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relations) : entity;
}","/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        if (CassandraConstants.CQL_KEY.equals(thriftColumnName) && tr.getId() == null) {
          entity=initialize(m,entity,null);
          setId(m,entity,column.getValue());
        }
 else {
          entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations);
        }
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  InstantiationException iex) {
    log.error(""String_Node_Str"" + iex.getMessage());
    throw new PersistenceException(iex);
  }
catch (  IllegalAccessException iaex) {
    log.error(""String_Node_Str"" + iaex.getMessage());
    throw new PersistenceException(iaex);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relations) : entity;
}",0.971753986332574
176614,"private Object getFieldValueViaCQL(Object thriftColumnValue,Attribute attribute){
  PropertyAccessor<?> accessor=PropertyAccessorFactory.getPropertyAccessor(((AbstractAttribute)attribute).getBindableJavaType());
  Object objValue;
  try {
    if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(String.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(char.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(Character.class)) {
      objValue=accessor.fromString(((AbstractAttribute)attribute).getBindableJavaType(),new String((byte[])thriftColumnValue));
      return objValue;
    }
 else     if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(short.class)) {
      IntegerAccessor intAccessor=new IntegerAccessor();
      Integer value=intAccessor.fromBytes(short.class,(byte[])thriftColumnValue);
      objValue=accessor.fromString(((AbstractAttribute)attribute).getBindableJavaType(),String.valueOf(value));
      return objValue;
    }
 else     if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(byte.class)) {
      IntegerAccessor intAccessor=new IntegerAccessor();
      Integer value=intAccessor.fromBytes(byte.class,(byte[])thriftColumnValue);
      objValue=accessor.fromString(((AbstractAttribute)attribute).getBindableJavaType(),String.valueOf(value));
      return objValue;
    }
 else {
      objValue=accessor.fromBytes(((AbstractAttribute)attribute).getBindableJavaType(),(byte[])thriftColumnValue);
      return objValue;
    }
  }
 catch (  PropertyAccessException pae) {
    log.warn(pae.getMessage());
  }
  return null;
}","private Object getFieldValueViaCQL(Object thriftColumnValue,Attribute attribute){
  PropertyAccessor<?> accessor=PropertyAccessorFactory.getPropertyAccessor((Field)attribute.getJavaMember());
  Object objValue;
  try {
    if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(String.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(char.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(Character.class)) {
      objValue=accessor.fromString(((AbstractAttribute)attribute).getBindableJavaType(),new String((byte[])thriftColumnValue));
      return objValue;
    }
 else     if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(short.class)) {
      IntegerAccessor intAccessor=new IntegerAccessor();
      Integer value=intAccessor.fromBytes(short.class,(byte[])thriftColumnValue);
      objValue=accessor.fromString(((AbstractAttribute)attribute).getBindableJavaType(),String.valueOf(value));
      return objValue;
    }
 else     if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(byte.class)) {
      IntegerAccessor intAccessor=new IntegerAccessor();
      Integer value=intAccessor.fromBytes(byte.class,(byte[])thriftColumnValue);
      objValue=accessor.fromString(((AbstractAttribute)attribute).getBindableJavaType(),String.valueOf(value));
      return objValue;
    }
 else {
      objValue=accessor.fromBytes(((AbstractAttribute)attribute).getBindableJavaType(),(byte[])thriftColumnValue);
      return objValue;
    }
  }
 catch (  PropertyAccessException pae) {
    log.warn(pae.getMessage());
  }
  return null;
}",0.979555021046302
176615,"/** 
 * On column.
 * @param column the column
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @param relations the relations
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private Object onColumn(Column column,EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,boolean isWrapReq,Map<String,Object> relations) throws InstantiationException, IllegalAccessException {
  String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
  byte[] thriftColumnValue=column.getValue();
  return populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,thriftColumnValue);
}","/** 
 * On column.
 * @param column the column
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @param relations the relations
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private Object onColumn(Column column,EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,boolean isWrapReq,Map<String,Object> relations) throws InstantiationException, IllegalAccessException {
  String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
  byte[] thriftColumnValue=column.getValue();
  if (m.isCounterColumnType()) {
    LongAccessor accessor=new LongAccessor();
    Long value=accessor.fromBytes(Long.class,column.getValue());
    return populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,value.toString());
  }
  return populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,thriftColumnValue);
}",0.8428493746601414
176616,"/** 
 * Gets the pool config policy.
 * @param persistenceUnitMetadata the persistence unit metadata
 * @param puProperties
 * @return the pool config policy
 */
public static PoolConfiguration setPoolConfigPolicy(PersistenceUnitMetadata persistenceUnitMetadata,PoolConfiguration prop,Map<String,Object> puProperties){
  Properties props=persistenceUnitMetadata.getProperties();
  String maxActivePerNode=null;
  String maxIdlePerNode=null;
  String minIdlePerNode=null;
  String maxTotal=null;
  boolean testOnBorrow=false;
  boolean testWhileIdle=false;
  boolean testOnConnect=false;
  boolean testOnReturn=false;
  if (puProperties != null) {
    maxActivePerNode=(String)puProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_ACTIVE);
    maxIdlePerNode=(String)puProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_IDLE);
    minIdlePerNode=(String)puProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MIN_IDLE);
    maxTotal=(String)puProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_TOTAL);
  }
  if (maxActivePerNode == null) {
    maxActivePerNode=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_ACTIVE);
  }
  if (maxIdlePerNode == null) {
    maxIdlePerNode=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_IDLE);
  }
  if (minIdlePerNode == null) {
    minIdlePerNode=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MIN_IDLE);
  }
  if (maxTotal == null) {
    maxTotal=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_TOTAL);
  }
  try {
    if (!StringUtils.isEmpty(maxActivePerNode)) {
      prop.setInitialSize(Integer.parseInt(maxActivePerNode));
    }
    if (!StringUtils.isEmpty(maxIdlePerNode)) {
      prop.setMaxIdle(Integer.parseInt(maxIdlePerNode));
    }
    if (!StringUtils.isEmpty(minIdlePerNode)) {
      prop.setMinIdle(Integer.parseInt(minIdlePerNode));
    }
    if (!StringUtils.isEmpty(maxTotal)) {
      prop.setMaxActive(Integer.parseInt(maxTotal));
    }
    CassandraSchemaMetadata csm=CassandraPropertyReader.csmd;
    Properties connProps=csm.getConnectionProperties();
    if (connProps != null) {
      testOnBorrow=Boolean.parseBoolean(connProps.getProperty(CassandraConstants.TEST_ON_BORROW));
      testOnConnect=Boolean.parseBoolean(connProps.getProperty(CassandraConstants.TEST_ON_CONNECT));
      testOnReturn=Boolean.parseBoolean(connProps.getProperty(CassandraConstants.TEST_ON_RETURN));
      testWhileIdle=Boolean.parseBoolean(connProps.getProperty(CassandraConstants.TEST_WHILE_IDLE));
    }
    prop.setTestOnBorrow(testOnBorrow);
    prop.setTestOnConnect(testOnConnect);
    prop.setTestOnReturn(testOnReturn);
    prop.setTestWhileIdle(testWhileIdle);
  }
 catch (  NumberFormatException e) {
    logger.warn(""String_Node_Str"" + persistenceUnitMetadata.getPersistenceUnitName() + ""String_Node_Str"");
    prop=null;
  }
  return prop;
}","/** 
 * Gets the pool config policy.
 * @param persistenceUnitMetadata the persistence unit metadata
 * @param puProperties
 * @return the pool config policy
 */
public static PoolConfiguration setPoolConfigPolicy(PersistenceUnitMetadata persistenceUnitMetadata,PoolConfiguration prop,Map<String,Object> puProperties){
  Properties props=persistenceUnitMetadata.getProperties();
  String maxActivePerNode=null;
  String maxIdlePerNode=null;
  String minIdlePerNode=null;
  String maxTotal=null;
  String testOnBorrow=null;
  String testWhileIdle=null;
  String testOnConnect=null;
  String testOnReturn=null;
  String socketTimeOut=null;
  if (puProperties != null) {
    maxActivePerNode=(String)puProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_ACTIVE);
    maxIdlePerNode=(String)puProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_IDLE);
    minIdlePerNode=(String)puProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MIN_IDLE);
    maxTotal=(String)puProperties.get(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_TOTAL);
    testOnBorrow=(String)puProperties.get(CassandraConstants.TEST_ON_BORROW);
    testOnConnect=(String)puProperties.get(CassandraConstants.TEST_ON_CONNECT);
    testOnReturn=(String)puProperties.get(CassandraConstants.TEST_ON_RETURN);
    testWhileIdle=(String)puProperties.get(CassandraConstants.TEST_WHILE_IDLE);
    socketTimeOut=(String)puProperties.get(CassandraConstants.SOCKET_TIMEOUT);
  }
  if (maxActivePerNode == null) {
    maxActivePerNode=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_ACTIVE);
  }
  if (maxIdlePerNode == null) {
    maxIdlePerNode=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_IDLE);
  }
  if (minIdlePerNode == null) {
    minIdlePerNode=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MIN_IDLE);
  }
  if (maxTotal == null) {
    maxTotal=props.getProperty(PersistenceProperties.KUNDERA_POOL_SIZE_MAX_TOTAL);
  }
  try {
    if (!StringUtils.isEmpty(maxActivePerNode)) {
      prop.setInitialSize(Integer.parseInt(maxActivePerNode));
    }
    if (!StringUtils.isEmpty(maxIdlePerNode)) {
      prop.setMaxIdle(Integer.parseInt(maxIdlePerNode));
    }
    if (!StringUtils.isEmpty(minIdlePerNode)) {
      prop.setMinIdle(Integer.parseInt(minIdlePerNode));
    }
    if (!StringUtils.isEmpty(maxTotal)) {
      prop.setMaxActive(Integer.parseInt(maxTotal));
    }
    CassandraSchemaMetadata csm=CassandraPropertyReader.csmd;
    Properties connProps=csm.getConnectionProperties();
    if (connProps != null) {
      if (testOnBorrow == null) {
        testOnBorrow=connProps.getProperty(CassandraConstants.TEST_ON_BORROW);
      }
      if (testOnConnect == null) {
        testOnConnect=connProps.getProperty(CassandraConstants.TEST_ON_CONNECT);
      }
      if (testOnReturn == null) {
        testOnReturn=connProps.getProperty(CassandraConstants.TEST_ON_RETURN);
      }
      if (testWhileIdle == null) {
        testWhileIdle=connProps.getProperty(CassandraConstants.TEST_WHILE_IDLE);
      }
      if (socketTimeOut == null) {
        socketTimeOut=connProps.getProperty(CassandraConstants.SOCKET_TIMEOUT);
      }
    }
    prop.setTestOnBorrow(Boolean.parseBoolean(testOnBorrow));
    prop.setTestOnConnect(Boolean.parseBoolean(testOnConnect));
    prop.setTestOnReturn(Boolean.parseBoolean(testOnReturn));
    prop.setTestWhileIdle(Boolean.parseBoolean(testWhileIdle));
    if (!StringUtils.isEmpty(socketTimeOut)) {
      prop.setSocketTimeout(Integer.parseInt(socketTimeOut));
    }
 else {
      prop.setSocketTimeout(_DEFAULT_SHOCKET_TIMEOUT);
    }
  }
 catch (  NumberFormatException e) {
    logger.warn(""String_Node_Str"" + persistenceUnitMetadata.getPersistenceUnitName() + ""String_Node_Str"");
    prop=null;
  }
  return prop;
}",0.7881981032665965
176617,"public void buildSetClauseForCounters(StringBuilder builder,String field,Object value){
  builder=ensureCase(builder,field);
  builder.append(EQ_CLAUSE);
  builder=ensureCase(builder,field);
  builder.append(INCR_COUNTER);
  appendValue(builder,value.getClass(),value,false);
  builder.append(COMMA_STR);
}","/** 
 * Builds set clause for a given counter field.
 * @param builder
 * @param field
 * @param value
 */
public void buildSetClauseForCounters(StringBuilder builder,String field,Object value){
  builder=ensureCase(builder,field);
  builder.append(EQ_CLAUSE);
  builder=ensureCase(builder,field);
  builder.append(INCR_COUNTER);
  appendValue(builder,value.getClass(),value,false);
  builder.append(COMMA_STR);
}",0.8511821974965229
176618,"public void buildWhereClause(StringBuilder builder,String field,Object value,String clause){
  builder=ensureCase(builder,field);
  builder.append(clause);
  appendValue(builder,value.getClass(),value,false);
  builder.append(AND_CLAUSE);
}","/** 
 * Build where clause with given clause.
 * @param builder
 * @param field
 * @param value
 * @param clause
 */
public void buildWhereClause(StringBuilder builder,String field,Object value,String clause){
  builder=ensureCase(builder,field);
  builder.append(clause);
  appendValue(builder,value.getClass(),value,false);
  builder.append(AND_CLAUSE);
}",0.8040201005025126
176619,"/** 
 * Prepare data.
 * @param rowKey the row key
 * @param age the age
 * @return the person
 */
protected PersonCassandra prepareData(String rowKey,int age){
  PersonCassandra o=new PersonCassandra();
  o.setPersonId(rowKey);
  o.setPersonName(""String_Node_Str"");
  o.setAge(age);
  o.setDay(Day.THURSDAY);
  return o;
}","/** 
 * Prepare data.
 * @param rowKey the row key
 * @param age the age
 * @return the person
 */
protected PersonCassandra prepareData(String rowKey,int age){
  PersonCassandra o=new PersonCassandra();
  o.setPersonId(rowKey);
  o.setPersonName(""String_Node_Str"");
  o.setAge(age);
  o.setDay(Day.THURSDAY);
  o.setMonth(Month.APRIL);
  return o;
}",0.9598811292719168
176620,"/** 
 * On insert mongo.
 */
@Test public void onInsertMongo() throws Exception {
  Object p1=prepareMongoInstance(""String_Node_Str"",10);
  Object p2=prepareMongoInstance(""String_Node_Str"",20);
  Object p3=prepareMongoInstance(""String_Node_Str"",15);
  Query findQuery=em.createQuery(""String_Node_Str"");
  List<PersonMongo> allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  em.clear();
  PersonMongo p=findById(PersonMongo.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(Day.FRIDAY,p.getDay());
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  assertFindByName(em,""String_Node_Str"",PersonMongo.class,""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAge(em,""String_Node_Str"",PersonMongo.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeGTAndLT(em,""String_Node_Str"",PersonMongo.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeBetween(em,""String_Node_Str"",PersonMongo.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByRange(em,""String_Node_Str"",PersonMongo.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindWithoutWhereClause(em,""String_Node_Str"",PersonMongo.class);
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<PersonMongo> results=query.getResultList();
  Assert.assertEquals(3,results.size());
  query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(1,""String_Node_Str"");
  results=query.getResultList();
  Assert.assertEquals(3,results.size());
  query=em.createQuery(""String_Node_Str"");
  query.setMaxResults(2);
  results=query.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  selectIdQuery();
}","/** 
 * On insert mongo.
 */
@Test public void onInsertMongo() throws Exception {
  Object p1=prepareMongoInstance(""String_Node_Str"",10);
  Object p2=prepareMongoInstance(""String_Node_Str"",20);
  Object p3=prepareMongoInstance(""String_Node_Str"",15);
  Query findQuery=em.createQuery(""String_Node_Str"");
  List<PersonMongo> allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  findQuery=em.createQuery(""String_Node_Str"");
  allPersons=findQuery.getResultList();
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.isEmpty());
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  em.clear();
  PersonMongo p=findById(PersonMongo.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(Day.FRIDAY,p.getDay());
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  assertFindByName(em,""String_Node_Str"",PersonMongo.class,""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAge(em,""String_Node_Str"",PersonMongo.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeGTAndLT(em,""String_Node_Str"",PersonMongo.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeBetween(em,""String_Node_Str"",PersonMongo.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByRange(em,""String_Node_Str"",PersonMongo.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindWithoutWhereClause(em,""String_Node_Str"",PersonMongo.class);
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<PersonMongo> results=query.getResultList();
  Assert.assertEquals(3,results.size());
  query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(1,""String_Node_Str"");
  results=query.getResultList();
  Assert.assertEquals(3,results.size());
  query=em.createQuery(""String_Node_Str"");
  query.setMaxResults(2);
  results=query.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  selectIdQuery();
  onExecuteScript();
}",0.9956386292834892
176621,"@Test public void testPersistJoinTableData(){
  final String schemaName=""String_Node_Str"";
  final String tableName=""String_Node_Str"";
  final String joinColumn=""String_Node_Str"";
  final String inverseJoinColumn=""String_Node_Str"";
  JoinTableData joinTableData=new JoinTableData(OPERATION.INSERT,schemaName,tableName,joinColumn,inverseJoinColumn,null);
  String joinKey1=""String_Node_Str"";
  Integer joinKey2=new Integer(2);
  Integer inverseJoinKey1=new Integer(1);
  Double inverseJoinKey2=new Double(2.2);
  String inverseJoinKey3=""String_Node_Str"";
  Set inverseJoinKeysFor1=new HashSet();
  inverseJoinKeysFor1.add(inverseJoinKey1);
  inverseJoinKeysFor1.add(inverseJoinKey2);
  Set inverseJoinKeysFor2=new HashSet();
  inverseJoinKeysFor2.add(inverseJoinKey2);
  inverseJoinKeysFor2.add(inverseJoinKey3);
  joinTableData.addJoinTableRecord(joinKey1,inverseJoinKeysFor1);
  joinTableData.addJoinTableRecord(joinKey2,inverseJoinKeysFor2);
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  OracleNoSQLClient client=(OracleNoSQLClient)clients.get(PU);
  client.persistJoinTable(joinTableData);
  List<String> columns=client.getColumnsById(schemaName,tableName,joinColumn,inverseJoinColumn,joinKey1,String.class);
  Assert.assertNotNull(columns);
  Assert.assertEquals(true,!columns.isEmpty());
  Assert.assertEquals(2,columns.size());
  Assert.assertEquals(true,columns.contains(inverseJoinKey1.toString()));
  Assert.assertEquals(true,columns.contains(inverseJoinKey2.toString()));
  Object[] ids=client.findIdsByColumn(schemaName,tableName,joinColumn,inverseJoinColumn,inverseJoinKey2,null);
  Assert.assertNotNull(ids);
  Assert.assertTrue(ids.length == 2);
  client.deleteByColumn(schemaName,tableName,inverseJoinColumn,inverseJoinKey1);
  client.deleteByColumn(schemaName,tableName,inverseJoinColumn,inverseJoinKey2);
  columns=client.getColumnsById(schemaName,tableName,joinColumn,inverseJoinColumn,joinKey1,String.class);
  Assert.assertTrue(columns.isEmpty());
}","@Test public void testPersistJoinTableData(){
  final String schemaName=""String_Node_Str"";
  final String tableName=""String_Node_Str"";
  final String joinColumn=""String_Node_Str"";
  final String inverseJoinColumn=""String_Node_Str"";
  JoinTableData joinTableData=new JoinTableData(OPERATION.INSERT,schemaName,tableName,joinColumn,inverseJoinColumn,PersonOTOOracleNoSQL.class);
  String joinKey1=""String_Node_Str"";
  Integer joinKey2=new Integer(2);
  Integer inverseJoinKey1=new Integer(1);
  Double inverseJoinKey2=new Double(2.2);
  String inverseJoinKey3=""String_Node_Str"";
  Set inverseJoinKeysFor1=new HashSet();
  inverseJoinKeysFor1.add(inverseJoinKey1);
  inverseJoinKeysFor1.add(inverseJoinKey2);
  Set inverseJoinKeysFor2=new HashSet();
  inverseJoinKeysFor2.add(inverseJoinKey2);
  inverseJoinKeysFor2.add(inverseJoinKey3);
  joinTableData.addJoinTableRecord(joinKey1,inverseJoinKeysFor1);
  joinTableData.addJoinTableRecord(joinKey2,inverseJoinKeysFor2);
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  OracleNoSQLClient client=(OracleNoSQLClient)clients.get(PU);
  client.persistJoinTable(joinTableData);
  List<String> columns=client.getColumnsById(schemaName,tableName,joinColumn,inverseJoinColumn,joinKey1,String.class);
  Assert.assertNotNull(columns);
  Assert.assertEquals(true,!columns.isEmpty());
  Assert.assertEquals(2,columns.size());
  Assert.assertEquals(true,columns.contains(inverseJoinKey1.toString()));
  Assert.assertEquals(true,columns.contains(inverseJoinKey2.toString()));
  Object[] ids=client.findIdsByColumn(schemaName,tableName,joinColumn,inverseJoinColumn,inverseJoinKey2,PersonOTOOracleNoSQL.class);
  Assert.assertNotNull(ids);
  Assert.assertTrue(ids.length == 2);
  client.deleteByColumn(schemaName,tableName,inverseJoinColumn,inverseJoinKey1);
  client.deleteByColumn(schemaName,tableName,inverseJoinColumn,inverseJoinKey2);
  columns=client.getColumnsById(schemaName,tableName,joinColumn,inverseJoinColumn,joinKey1,String.class);
  Assert.assertTrue(columns.isEmpty());
}",0.9854368932038836
176622,"private void execute(List<Operation> batch){
  try {
    kvStore.execute(batch);
  }
 catch (  DurabilityException e) {
    log.error(e);
    throw new PersistenceException(""String_Node_Str"",e);
  }
catch (  OperationExecutionException e) {
    log.error(e);
    throw new PersistenceException(""String_Node_Str"",e);
  }
catch (  FaultException e) {
    log.error(e);
    throw new PersistenceException(""String_Node_Str"",e);
  }
 finally {
    batch.clear();
  }
}","private void execute(List<Operation> batch){
  if (batch != null && !batch.isEmpty()) {
    try {
      kvStore.execute(batch);
    }
 catch (    DurabilityException e) {
      log.error(e);
      throw new PersistenceException(""String_Node_Str"",e);
    }
catch (    OperationExecutionException e) {
      log.error(e);
      throw new PersistenceException(""String_Node_Str"",e);
    }
catch (    FaultException e) {
      log.error(e);
      throw new PersistenceException(""String_Node_Str"",e);
    }
 finally {
      batch.clear();
    }
  }
}",0.8480635551142006
176623,"public <E>List<E> executeQuery(Class<E> entityClass,OracleNoSQLQueryInterpreter interpreter){
  List<E> results=new ArrayList<E>();
  Set<Object> primaryKeys=null;
  if (!interpreter.getClauseQueue().isEmpty()) {
    primaryKeys=((OracleNoSQLInvertedIndexer)getIndexManager().getIndexer()).executeQuery(interpreter,entityClass);
  }
 else {
    EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClass);
    ArrayList<String> majorComponents=new ArrayList<String>();
    majorComponents.add(m.getTableName());
    Key key=Key.createKey(majorComponents);
    Iterator<KeyValueVersion> iterator=kvStore.storeIterator(Direction.UNORDERED,0,key,null,null);
    Set<Object> keySet=new HashSet<Object>();
    while (iterator.hasNext()) {
      KeyValueVersion keyValueVersion=iterator.next();
      String majorKeySecondPart=keyValueVersion.getKey().getMajorPath().get(1);
      keySet.add(majorKeySecondPart);
    }
    primaryKeys=keySet;
  }
  results=findAll(entityClass,interpreter.getSelectColumns(),primaryKeys.toArray());
  return results;
}","public <E>List<E> executeQuery(Class<E> entityClass,OracleNoSQLQueryInterpreter interpreter,Set<Object> primaryKeys){
  List<E> results=new ArrayList<E>();
  if (primaryKeys == null) {
    primaryKeys=new HashSet<Object>();
  }
  if (!interpreter.getClauseQueue().isEmpty()) {
    primaryKeys.addAll(((OracleNoSQLInvertedIndexer)getIndexManager().getIndexer()).executeQuery(interpreter,entityClass));
  }
 else {
    EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClass);
    ArrayList<String> majorComponents=new ArrayList<String>();
    majorComponents.add(m.getTableName());
    Key key=Key.createKey(majorComponents);
    Iterator<KeyValueVersion> iterator=kvStore.storeIterator(Direction.UNORDERED,0,key,null,null);
    Set<Object> keySet=new HashSet<Object>();
    while (iterator.hasNext()) {
      KeyValueVersion keyValueVersion=iterator.next();
      String majorKeySecondPart=keyValueVersion.getKey().getMajorPath().get(1);
      keySet.add(majorKeySecondPart);
    }
    primaryKeys.addAll(keySet);
  }
  results=findAll(entityClass,interpreter.getSelectColumns(),primaryKeys.toArray());
  return results;
}",0.9197080291970804
176624,"public <E>Set<E> executeQuery(OracleNoSQLQueryInterpreter interpreter,Class<?> entityClass){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String idColumnName=((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName();
  String secIndexName=getIndexTableName(entityMetadata);
  Set<Object> results=new HashSet<Object>();
  Set<Object> foundKeys=new HashSet<Object>();
  String interClauseOperator=null;
  Queue filterClauseQueue=interpreter.getClauseQueue();
  for (  Object clause : filterClauseQueue) {
    if (clause instanceof FilterClause) {
      foundKeys=new HashSet<Object>();
      String columnName=((FilterClause)clause).getProperty();
      String condition=((FilterClause)clause).getCondition();
      Object value=((FilterClause)clause).getValue();
      if (columnName.equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()) && condition.equals(""String_Node_Str"")) {
        Object idValue=PropertyAccessorHelper.fromSourceToTargetClass(entityMetadata.getIdAttribute().getJavaType(),String.class,value);
        foundKeys.add(idValue);
      }
 else {
        List<String> majorComponents=new ArrayList<String>();
        majorComponents.add(secIndexName);
        majorComponents.add(columnName);
        KeyRange range=null;
        Iterator<KeyValueVersion> iterator=null;
        if (condition.equals(""String_Node_Str"")) {
          majorComponents.add(PropertyAccessorHelper.getString(value));
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.multiGetIterator(Direction.FORWARD,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(value.toString(),false,null,true);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(null,true,value.toString(),false);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(value.toString(),true,null,true);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(null,true,value.toString(),true);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
        while (iterator.hasNext()) {
          KeyValueVersion keyValueVersion=iterator.next();
          String minorKey=keyValueVersion.getKey().getMinorPath().get(0);
          PropertyAccessor accessor=PropertyAccessorFactory.getPropertyAccessor(entityMetadata.getIdAttribute().getBindableJavaType());
          byte[] idByteArr=keyValueVersion.getValue().getValue();
          Object keyObj=accessor.fromBytes(entityMetadata.getIdAttribute().getBindableJavaType(),idByteArr);
          foundKeys.add(keyObj);
        }
      }
    }
 else     if (clause instanceof String) {
      interClauseOperator=clause.toString();
    }
    addToPrimaryKeySet(results,foundKeys,interClauseOperator);
  }
  return (Set<E>)results;
}","public <E>Set<E> executeQuery(OracleNoSQLQueryInterpreter interpreter,Class<?> entityClass){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String idColumnName=((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName();
  String secIndexName=getIndexTableName(entityMetadata);
  Set<Object> results=new HashSet<Object>();
  Set<Object> foundKeys=new HashSet<Object>();
  String interClauseOperator=null;
  Queue filterClauseQueue=interpreter.getClauseQueue();
  for (  Object clause : filterClauseQueue) {
    if (clause instanceof FilterClause) {
      foundKeys=new HashSet<Object>();
      String columnName=((FilterClause)clause).getProperty();
      String condition=((FilterClause)clause).getCondition();
      Object value=((FilterClause)clause).getValue();
      if (columnName.equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName()) && condition.equals(""String_Node_Str"")) {
        Object idValue=PropertyAccessorHelper.fromSourceToTargetClass(entityMetadata.getIdAttribute().getJavaType(),String.class,value);
        foundKeys.add(idValue);
      }
 else {
        List<String> majorComponents=new ArrayList<String>();
        majorComponents.add(secIndexName);
        majorComponents.add(columnName);
        KeyRange range=null;
        Iterator<KeyValueVersion> iterator=null;
        if (condition.equals(""String_Node_Str"")) {
          majorComponents.add(PropertyAccessorHelper.getString(value));
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.multiGetIterator(Direction.FORWARD,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(value.toString(),false,null,true);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(null,true,value.toString(),false);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(value.toString(),true,null,true);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
 else         if (condition.equals(""String_Node_Str"")) {
          range=new KeyRange(null,true,value.toString(),true);
          Key majorKeyToFind=Key.createKey(majorComponents);
          iterator=kvStore.storeIterator(Direction.UNORDERED,0,majorKeyToFind,range,null);
        }
        while (iterator.hasNext()) {
          KeyValueVersion keyValueVersion=iterator.next();
          String minorKey=keyValueVersion.getKey().getMinorPath().get(0);
          PropertyAccessor accessor=PropertyAccessorFactory.getPropertyAccessor(entityMetadata.getIdAttribute().getBindableJavaType());
          byte[] idByteArr=keyValueVersion.getValue().getValue();
          Object keyObj=accessor.fromBytes(entityMetadata.getIdAttribute().getBindableJavaType(),idByteArr);
          foundKeys.add(keyObj);
        }
      }
    }
 else     if (clause instanceof String) {
      interClauseOperator=clause.toString();
    }
    addToResults(results,foundKeys,interClauseOperator);
  }
  return (Set<E>)results;
}",0.9971509971509972
176625,"@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  List<Object> results=new ArrayList<Object>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  String indexerClass=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(m.getPersistenceUnit()).getProperties().getProperty(PersistenceProperties.KUNDERA_INDEXER_CLASS);
  ClientMetadata clientMetadata=KunderaMetadata.INSTANCE.getClientMetadata(m.getPersistenceUnit());
  if (clientMetadata.getIndexImplementor() != null && client.getIndexManager().getIndexer().getClass().equals(LuceneIndexer.class)) {
    results=populateUsingLucene(m,client,results);
  }
 else {
    OracleNoSQLQueryInterpreter interpreter=translateQuery(getKunderaQuery().getFilterClauseQueue(),m);
    results=(List<Object>)((OracleNoSQLClient)client).executeQuery(m.getEntityClazz(),interpreter);
  }
  return results;
}","@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  Set<Object> results=new HashSet<Object>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  String indexerClass=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(m.getPersistenceUnit()).getProperties().getProperty(PersistenceProperties.KUNDERA_INDEXER_CLASS);
  ClientMetadata clientMetadata=KunderaMetadata.INSTANCE.getClientMetadata(m.getPersistenceUnit());
  OracleNoSQLQueryInterpreter interpreter=translateQuery(getKunderaQuery().getFilterClauseQueue(),m);
  Set<Object> resultsFromIdSearch=new HashSet<Object>();
  if (interpreter.isFindById()) {
    Object entity=client.find(m.getEntityClazz(),interpreter.getRowKey());
    resultsFromIdSearch.add(entity);
    if (interpreter.getOperatorWithRowKey() == null) {
      List<Object> output=new ArrayList<Object>();
      output.addAll(resultsFromIdSearch);
      return output;
    }
  }
  if (client.getIndexManager().getIndexer().getClass().equals(LuceneIndexer.class)) {
    results.addAll(populateUsingLucene(m,client,null));
  }
 else {
    results.addAll((List<Object>)((OracleNoSQLClient)client).executeQuery(m.getEntityClazz(),interpreter,null));
  }
  List<Object> output=new ArrayList<Object>();
  output.addAll(results);
  return output;
}",0.6315356113627008
176626,"private OracleNoSQLQueryInterpreter translateQuery(Queue clauseQueue,EntityMetadata entityMetadata){
  OracleNoSQLQueryInterpreter interpreter=new OracleNoSQLQueryInterpreter(getColumns(getKunderaQuery().getResult(),entityMetadata));
  interpreter.setClauseQueue(clauseQueue);
  return interpreter;
}","private OracleNoSQLQueryInterpreter translateQuery(Queue clauseQueue,EntityMetadata entityMetadata){
  OracleNoSQLQueryInterpreter interpreter=new OracleNoSQLQueryInterpreter(getColumns(getKunderaQuery().getResult(),entityMetadata));
  interpreter.setClauseQueue(clauseQueue);
  String operatorWithIdClause=null;
  boolean idClauseFound=false;
  for (  Object clause : clauseQueue) {
    if (clause.getClass().isAssignableFrom(FilterClause.class) && !idClauseFound) {
      String columnName=((FilterClause)clause).getProperty();
      if (columnName.equals(((AbstractAttribute)entityMetadata.getIdAttribute()).getJPAColumnName())) {
        interpreter.setFindById(true);
        interpreter.setRowKey(((FilterClause)clause).getValue());
        idClauseFound=true;
      }
    }
 else     if (clause instanceof String) {
      operatorWithIdClause=clause.toString();
    }
    if (idClauseFound && operatorWithIdClause != null) {
      break;
    }
  }
  interpreter.setOperatorWithRowKey(operatorWithIdClause);
  return interpreter;
}",0.418848167539267
176627,"/** 
 * Sets parameter value into filterClause, depending upon   {@link Type}
 * @param name parameter name.
 * @param value parameter value.
 */
private void setParameterValue(String name,Object value){
  if (typedParameter != null) {
    FilterClause clause=typedParameter.getParameters().get(name);
    if (clause != null) {
      clause.setValue(value);
    }
 else {
      if (typedParameter.getUpdateParameters() != null) {
        UpdateClause updateClause=typedParameter.getUpdateParameters().get(name);
        updateClause.setValue(value);
      }
 else {
        logger.error(""String_Node_Str"");
        throw new QueryHandlerException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
  }
 else {
    throw new QueryHandlerException(""String_Node_Str"");
  }
}","/** 
 * Sets parameter value into filterClause, depending upon   {@link Type}
 * @param name parameter name.
 * @param value parameter value.
 */
private void setParameterValue(String name,Object value){
  if (typedParameter != null) {
    FilterClause clause=typedParameter.getParameters() != null ? typedParameter.getParameters().get(name) : null;
    if (clause != null) {
      clause.setValue(value);
    }
 else {
      if (typedParameter.getUpdateParameters() != null) {
        UpdateClause updateClause=typedParameter.getUpdateParameters().get(name);
        updateClause.setValue(value);
      }
 else {
        logger.error(""String_Node_Str"");
        throw new QueryHandlerException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
  }
 else {
    throw new QueryHandlerException(""String_Node_Str"");
  }
}",0.9577639751552796
176628,"/** 
 * constructor using fields.
 * @param persistenceUnit the persistence unit
 * @param externalProperties
 */
protected CassandraClientBase(String persistenceUnit,Map<String,Object> externalProperties){
  this.externalProperties=externalProperties;
  this.cqlClient=new CQLClient();
  setBatchSize(persistenceUnit,this.externalProperties);
  cqlVersion=externalProperties != null ? (String)externalProperties.get(CassandraConstants.CQL_VERSION) : null;
  cqlVersion=cqlVersion == null ? (CassandraPropertyReader.csmd != null ? CassandraPropertyReader.csmd.getCqlVersion() : CassandraConstants.CQL_VERSION_3_0) : cqlVersion;
  this.isCQLEnabled=cqlVersion.equals(CassandraConstants.CQL_VERSION_3_0);
}","/** 
 * constructor using fields.
 * @param persistenceUnit the persistence unit
 * @param externalProperties
 */
protected CassandraClientBase(String persistenceUnit,Map<String,Object> externalProperties){
  this.externalProperties=externalProperties;
  this.cqlClient=new CQLClient();
  setBatchSize(persistenceUnit,this.externalProperties);
  cqlVersion=externalProperties != null ? (String)externalProperties.get(CassandraConstants.CQL_VERSION) : null;
  cqlVersion=cqlVersion == null ? (CassandraPropertyReader.csmd != null ? CassandraPropertyReader.csmd.getCqlVersion() : CassandraConstants.CQL_VERSION_2_0) : cqlVersion;
  this.isCQLEnabled=cqlVersion.equals(CassandraConstants.CQL_VERSION_3_0);
}",0.9985795454545454
176629,"public String getCqlVersion(){
  if (getDataStore() != null) {
    Properties properties=getDataStore().getConnection() != null ? getDataStore().getConnection().getProperties() : null;
    if (properties != null) {
      String cqlVersion=properties.getProperty(CassandraConstants.CQL_VERSION);
      if (cqlVersion != null) {
        if (cqlVersion.equalsIgnoreCase(CassandraConstants.CQL_VERSION_3_0) || cqlVersion.equalsIgnoreCase(CassandraConstants.CQL_VERSION_2_0)) {
          return cqlVersion;
        }
      }
 else {
        log.warn(""String_Node_Str"");
      }
    }
  }
  return CassandraConstants.CQL_VERSION_3_0;
}","public String getCqlVersion(){
  if (getDataStore() != null) {
    Properties properties=getDataStore().getConnection() != null ? getDataStore().getConnection().getProperties() : null;
    if (properties != null) {
      String cqlVersion=properties.getProperty(CassandraConstants.CQL_VERSION);
      if (cqlVersion != null) {
        if (cqlVersion.equalsIgnoreCase(CassandraConstants.CQL_VERSION_3_0) || cqlVersion.equalsIgnoreCase(CassandraConstants.CQL_VERSION_2_0)) {
          return cqlVersion;
        }
      }
 else {
        log.warn(""String_Node_Str"");
      }
    }
  }
  return CassandraConstants.CQL_VERSION_2_0;
}",0.9984101748807632
176630,"/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        if (Constants.CQL_KEY.equals(thriftColumnName) && tr.getId() == null) {
          entity=initialize(m,entity,null);
          setId(m,entity,column.getValue());
        }
 else {
          entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations);
        }
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  InstantiationException iex) {
    log.error(""String_Node_Str"" + iex.getMessage());
    throw new PersistenceException(iex);
  }
catch (  IllegalAccessException iaex) {
    log.error(""String_Node_Str"" + iaex.getMessage());
    throw new PersistenceException(iaex);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}","/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        if (Constants.CQL_KEY.equals(thriftColumnName) && tr.getId() == null) {
          entity=initialize(m,entity,null);
          setId(m,entity,column.getValue());
        }
 else {
          entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations);
        }
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  InstantiationException iex) {
    log.error(""String_Node_Str"" + iex.getMessage());
    throw new PersistenceException(iex);
  }
catch (  IllegalAccessException iaex) {
    log.error(""String_Node_Str"" + iaex.getMessage());
    throw new PersistenceException(iaex);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relations) : entity;
}",0.997647427854454
176631,"private void setFieldValueViaCQL(Object entity,Object thriftColumnValue,Attribute attribute){
  if (attribute != null) {
    try {
      if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(String.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(char.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(Character.class)) {
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),new String((byte[])thriftColumnValue));
      }
 else       if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(short.class)) {
        IntegerAccessor accessor=new IntegerAccessor();
        Integer value=accessor.fromBytes(short.class,(byte[])thriftColumnValue);
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),String.valueOf(value));
      }
 else       if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(byte.class)) {
        IntegerAccessor accessor=new IntegerAccessor();
        Integer value=accessor.fromBytes(byte.class,(byte[])thriftColumnValue);
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),String.valueOf(value));
      }
 else {
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),(byte[])thriftColumnValue);
      }
    }
 catch (    PropertyAccessException pae) {
      log.warn(pae.getMessage());
    }
  }
}","private void setFieldValueViaCQL(Object entity,Object thriftColumnValue,Attribute attribute){
  if (attribute != null) {
    try {
      if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(String.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(char.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(Character.class)) {
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),new String((byte[])thriftColumnValue));
      }
 else       if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(short.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(Short.class)) {
        IntegerAccessor accessor=new IntegerAccessor();
        Integer value=accessor.fromBytes(short.class,(byte[])thriftColumnValue);
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),String.valueOf(value));
      }
 else       if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(byte.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(Byte.class)) {
        IntegerAccessor accessor=new IntegerAccessor();
        Integer value=accessor.fromBytes(byte.class,(byte[])thriftColumnValue);
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),String.valueOf(value));
      }
 else {
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),(byte[])thriftColumnValue);
      }
    }
 catch (    PropertyAccessException pae) {
      log.warn(pae.getMessage());
    }
  }
}",0.9435457246616044
176632,"@Override public void destroy(){
  if (indexManager != null) {
    indexManager.close();
  }
  if (schemaManager != null) {
    getSchemaManager(externalProperties).dropSchema();
  }
  schemaManager=null;
  externalProperties=null;
}","@Override public void destroy(){
  if (indexManager != null) {
    indexManager.close();
  }
  if (schemaManager != null) {
    schemaManager.dropSchema();
  }
  schemaManager=null;
  externalProperties=null;
}",0.690744920993228
176633,"/** 
 * Appends value to builder object for given class type
 * @param builder string builder.
 * @param fieldClazz field class.
 * @param value value to be appended.
 * @param isPresent if field is present.
 * @return true, if value is not null else false.
 */
public boolean appendValue(StringBuilder builder,Class fieldClazz,Object value,boolean isPresent){
  if (value != null) {
    isPresent=true;
    if (fieldClazz.isAssignableFrom(String.class) || isDate(fieldClazz) || fieldClazz.isAssignableFrom(char.class)|| fieldClazz.isAssignableFrom(Character.class)|| value instanceof Enum|| fieldClazz.isAssignableFrom(Float.class)) {
      builder.append(""String_Node_Str"");
      if (isDate(fieldClazz)) {
        builder.append(PropertyAccessorFactory.getPropertyAccessor(fieldClazz).toString(value));
      }
 else       if (value instanceof Enum) {
        builder.append(((Enum)value).name());
      }
 else {
        builder.append(value);
      }
      builder.append(""String_Node_Str"");
    }
 else {
      builder.append(value);
    }
  }
  return isPresent;
}","/** 
 * Appends value to builder object for given class type
 * @param builder string builder.
 * @param fieldClazz field class.
 * @param value value to be appended.
 * @param isPresent if field is present.
 * @return true, if value is not null else false.
 */
public boolean appendValue(StringBuilder builder,Class fieldClazz,Object value,boolean isPresent){
  if (value != null) {
    isPresent=true;
    if (fieldClazz.isAssignableFrom(String.class) || isDate(fieldClazz) || fieldClazz.isAssignableFrom(char.class)|| fieldClazz.isAssignableFrom(Character.class)|| value instanceof Enum|| fieldClazz.isAssignableFrom(Float.class)|| fieldClazz.isAssignableFrom(float.class)|| fieldClazz.isAssignableFrom(Double.class)|| fieldClazz.isAssignableFrom(double.class)) {
      builder.append(""String_Node_Str"");
      if (isDate(fieldClazz)) {
        builder.append(PropertyAccessorFactory.getPropertyAccessor(fieldClazz).toString(value));
      }
 else       if (value instanceof Enum) {
        builder.append(((Enum)value).name());
      }
 else {
        builder.append(value);
      }
      builder.append(""String_Node_Str"");
    }
 else {
      builder.append(value);
    }
  }
  return isPresent;
}",0.9423669159700836
176634,"@Override public void destroy(){
  if (indexManager != null) {
    indexManager.close();
  }
  if (schemaManager != null) {
    getSchemaManager(externalProperties).dropSchema();
  }
  schemaManager=null;
  externalProperties=null;
}","@Override public void destroy(){
  if (indexManager != null) {
    indexManager.close();
  }
  if (schemaManager != null) {
    schemaManager.dropSchema();
  }
  schemaManager=null;
  externalProperties=null;
}",0.690744920993228
176635,"/** 
 * adds join column name to the table Info of entity.
 * @param joinColumn
 * @param targetTableInfo
 * @param targetTableInfos
 */
private void addJoinColumnToInfo(String joinColumn,TableInfo targetTableInfo,List<TableInfo> targetTableInfos,EntityMetadata m){
  if (!targetTableInfos.isEmpty() && targetTableInfos.contains(targetTableInfo)) {
    int idx=targetTableInfos.indexOf(targetTableInfo);
    targetTableInfo=targetTableInfos.get(idx);
    if (!targetTableInfo.getColumnMetadatas().contains(getJoinColumn(joinColumn,m.getIdAttribute().getBindableJavaType()))) {
      targetTableInfo.addColumnInfo(getJoinColumn(joinColumn,m.getIdAttribute().getBindableJavaType()));
    }
  }
 else {
    if (!targetTableInfo.getColumnMetadatas().contains(getJoinColumn(joinColumn,m.getIdAttribute().getBindableJavaType()))) {
      targetTableInfo.addColumnInfo(getJoinColumn(joinColumn,m.getIdAttribute().getBindableJavaType()));
    }
    targetTableInfos.add(targetTableInfo);
  }
}","/** 
 * adds join column name to the table Info of entity.
 * @param joinColumn
 * @param targetTableInfo
 * @param targetTableInfos
 */
private void addJoinColumnToInfo(String joinColumn,TableInfo targetTableInfo,List<TableInfo> targetTableInfos,EntityMetadata m){
  if (!targetTableInfos.isEmpty() && targetTableInfos.contains(targetTableInfo)) {
    int idx=targetTableInfos.indexOf(targetTableInfo);
    targetTableInfo=targetTableInfos.get(idx);
    if (!targetTableInfo.getColumnMetadatas().contains(getJoinColumn(joinColumn))) {
      targetTableInfo.addColumnInfo(getJoinColumn(joinColumn));
    }
  }
 else {
    if (!targetTableInfo.getColumnMetadatas().contains(getJoinColumn(joinColumn))) {
      targetTableInfo.addColumnInfo(getJoinColumn(joinColumn));
    }
    targetTableInfos.add(targetTableInfo);
  }
}",0.6411960132890365
176636,"/** 
 * getJoinColumn method return ColumnInfo for the join column
 * @param columnType
 * @param String joinColumnName.
 * @return ColumnInfo object columnInfo.
 */
private ColumnInfo getJoinColumn(String joinColumnName,Class columnType){
  ColumnInfo columnInfo=new ColumnInfo();
  columnInfo.setColumnName(joinColumnName);
  columnInfo.setIndexable(true);
  columnInfo.setType(columnType);
  return columnInfo;
}","/** 
 * getJoinColumn method return ColumnInfo for the join column
 * @param columnType
 * @param String joinColumnName.
 * @return ColumnInfo object columnInfo.
 */
private ColumnInfo getJoinColumn(String joinColumnName){
  ColumnInfo columnInfo=new ColumnInfo();
  columnInfo.setColumnName(joinColumnName);
  columnInfo.setIndexable(true);
  return columnInfo;
}",0.8908857509627728
176637,"/** 
 * parse the relations of entites .
 * @param persistenceUnit
 * @param tableInfos
 * @param entityMetadata
 * @param tableInfo
 * @param relations
 */
private void parseRelations(String persistenceUnit,List<TableInfo> tableInfos,EntityMetadata entityMetadata,TableInfo tableInfo,List<Relation> relations){
  for (  Relation relation : relations) {
    Class entityClass=relation.getTargetEntity();
    EntityMetadata targetEntityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
    ForeignKey relationType=relation.getType();
    if (targetEntityMetadata != null && relationType.equals(ForeignKey.ONE_TO_MANY) && relation.getJoinColumnName() != null) {
      if (targetEntityMetadata.equals(entityMetadata)) {
        tableInfo.addColumnInfo(getJoinColumn(relation.getJoinColumnName(),entityMetadata.getIdAttribute().getBindableJavaType()));
      }
 else {
        String pu=targetEntityMetadata.getPersistenceUnit();
        Type targetEntityType=targetEntityMetadata.getType();
        Class idClass=targetEntityMetadata.getIdAttribute().getJavaType();
        String idName=((AbstractAttribute)targetEntityMetadata.getIdAttribute()).getJPAColumnName();
        boolean isCompositeId=idClass.isAnnotationPresent(Embeddable.class);
        TableInfo targetTableInfo=new TableInfo(targetEntityMetadata.getTableName(),targetEntityMetadata.isIndexable(),targetEntityType.name(),idClass,idName,isCompositeId);
        if (!pu.equals(persistenceUnit)) {
          List<TableInfo> targetTableInfos=getSchemaInfo(pu);
          addJoinColumnToInfo(relation.getJoinColumnName(),targetTableInfo,targetTableInfos,entityMetadata);
          puToSchemaMetadata.put(pu,targetTableInfos);
        }
 else {
          addJoinColumnToInfo(relation.getJoinColumnName(),targetTableInfo,tableInfos,entityMetadata);
        }
      }
    }
 else     if (relation.isUnary() && relation.getJoinColumnName() != null) {
      tableInfo.addColumnInfo(getJoinColumn(relation.getJoinColumnName(),targetEntityMetadata.getIdAttribute().getBindableJavaType()));
    }
 else     if ((relationType.equals(ForeignKey.MANY_TO_MANY)) && (entityMetadata.isRelationViaJoinTable())) {
      JoinTableMetadata joinTableMetadata=relation.getJoinTableMetadata();
      String joinTableName=joinTableMetadata != null ? joinTableMetadata.getJoinTableName() : null;
      String joinColumnName=joinTableMetadata != null ? (String)joinTableMetadata.getJoinColumns().toArray()[0] : null;
      String inverseJoinColumnName=joinTableMetadata != null ? (String)joinTableMetadata.getInverseJoinColumns().toArray()[0] : null;
      if (joinTableName != null) {
        TableInfo joinTableInfo=new TableInfo(joinTableName,false,Type.COLUMN_FAMILY.name(),String.class,joinColumnName.concat(inverseJoinColumnName),false);
        if (!tableInfos.isEmpty() && !tableInfos.contains(joinTableInfo) || tableInfos.isEmpty()) {
          joinTableInfo.addColumnInfo(getJoinColumn(joinColumnName,entityMetadata.getIdAttribute().getBindableJavaType()));
          joinTableInfo.addColumnInfo(getJoinColumn(inverseJoinColumnName,targetEntityMetadata.getIdAttribute().getBindableJavaType()));
          tableInfos.add(joinTableInfo);
        }
      }
    }
  }
}","/** 
 * parse the relations of entites .
 * @param persistenceUnit
 * @param tableInfos
 * @param entityMetadata
 * @param tableInfo
 * @param relations
 */
private void parseRelations(String persistenceUnit,List<TableInfo> tableInfos,EntityMetadata entityMetadata,TableInfo tableInfo,List<Relation> relations){
  for (  Relation relation : relations) {
    Class entityClass=relation.getTargetEntity();
    EntityMetadata targetEntityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
    ForeignKey relationType=relation.getType();
    if (targetEntityMetadata != null && relationType.equals(ForeignKey.ONE_TO_MANY) && relation.getJoinColumnName() != null) {
      if (targetEntityMetadata.equals(entityMetadata)) {
        tableInfo.addColumnInfo(getJoinColumn(relation.getJoinColumnName()));
      }
 else {
        String pu=targetEntityMetadata.getPersistenceUnit();
        Type targetEntityType=targetEntityMetadata.getType();
        Class idClass=targetEntityMetadata.getIdAttribute().getJavaType();
        String idName=((AbstractAttribute)targetEntityMetadata.getIdAttribute()).getJPAColumnName();
        boolean isCompositeId=idClass.isAnnotationPresent(Embeddable.class);
        TableInfo targetTableInfo=new TableInfo(targetEntityMetadata.getTableName(),targetEntityMetadata.isIndexable(),targetEntityType.name(),idClass,idName,isCompositeId);
        if (!pu.equals(persistenceUnit)) {
          List<TableInfo> targetTableInfos=getSchemaInfo(pu);
          addJoinColumnToInfo(relation.getJoinColumnName(),targetTableInfo,targetTableInfos,entityMetadata);
          puToSchemaMetadata.put(pu,targetTableInfos);
        }
 else {
          addJoinColumnToInfo(relation.getJoinColumnName(),targetTableInfo,tableInfos,entityMetadata);
        }
      }
    }
 else     if (relation.isUnary() && relation.getJoinColumnName() != null) {
      tableInfo.addColumnInfo(getJoinColumn(relation.getJoinColumnName()));
    }
 else     if ((relationType.equals(ForeignKey.MANY_TO_MANY)) && (entityMetadata.isRelationViaJoinTable())) {
      JoinTableMetadata joinTableMetadata=relation.getJoinTableMetadata();
      String joinTableName=joinTableMetadata != null ? joinTableMetadata.getJoinTableName() : null;
      String joinColumnName=joinTableMetadata != null ? (String)joinTableMetadata.getJoinColumns().toArray()[0] : null;
      String inverseJoinColumnName=joinTableMetadata != null ? (String)joinTableMetadata.getInverseJoinColumns().toArray()[0] : null;
      if (joinTableName != null) {
        TableInfo joinTableInfo=new TableInfo(joinTableName,false,Type.COLUMN_FAMILY.name(),String.class,joinColumnName.concat(inverseJoinColumnName),false);
        if (!tableInfos.isEmpty() && !tableInfos.contains(joinTableInfo) || tableInfos.isEmpty()) {
          joinTableInfo.addColumnInfo(getJoinColumn(joinColumnName));
          joinTableInfo.addColumnInfo(getJoinColumn(inverseJoinColumnName));
          tableInfos.add(joinTableInfo);
        }
      }
    }
  }
}",0.9343840463171438
176638,"/** 
 * Sets the connection pool or connection.      
 */
protected void setConnectionPoolOrConnection(Object connectionPoolOrConnection){
  this.connectionPoolOrConnection=connectionPoolOrConnection;
}","/** 
 * Sets the connection pool or connection.
 */
protected void setConnectionPoolOrConnection(Object connectionPoolOrConnection){
  this.connectionPoolOrConnection=connectionPoolOrConnection;
}",0.984924623115578
176639,"protected void unload(){
  if (client != null) {
    client.close();
    client=null;
  }
}","protected void unload(){
  if (client != null) {
    client.close();
    client=null;
  }
  externalProperties=null;
}",0.8708133971291866
176640,"/** 
 * @param puProperties
 */
protected void setExternalProperties(Map<String,Object> puProperties){
  if (this.externalProperties == null) {
    this.externalProperties=puProperties;
  }
}","/** 
 * @param puProperties
 */
protected void setExternalProperties(Map<String,Object> puProperties){
  this.externalProperties=puProperties;
}",0.8597014925373134
176641,"/** 
 * Retrieves associated entities from secondary index. There are two alternatives here: 1. Via running Lucene query into Lucene powered secondary index. 2. Searching into a secondary index by custom secondary index class provided by user.
 * @see PersistenceProperties#KUNDERA_INDEX_HOME_DIR
 * @see PersistenceProperties#KUNDERA_INDEXER_CLASS TODO: Which secondary index to use should be transparent. All we should bother about is indexer.index(), indexer.search() etc. 
 */
private List getAssociatedEntitiesFromIndex(Object entity,Object entityId,Class<?> childClass,Client childClient){
  List associatedEntities;
  IndexManager indexManager=childClient.getIndexManager();
  Map<String,Object> results=indexManager != null ? indexManager.search(entity.getClass(),childClass,entityId) : new HashMap<String,Object>();
  Set rsSet=results != null ? new HashSet(results.values()) : new HashSet();
  if (childClass.equals(entity.getClass())) {
    associatedEntities=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new Object[]{}));
  }
 else {
    associatedEntities=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new Object[]{}));
  }
  return associatedEntities;
}","/** 
 * Retrieves associated entities from secondary index. There are two alternatives here: 1. Via running Lucene query into Lucene powered secondary index. 2. Searching into a secondary index by custom secondary index class provided by user.
 * @see PersistenceProperties#KUNDERA_INDEX_HOME_DIR
 * @see PersistenceProperties#KUNDERA_INDEXER_CLASS TODO: Which secondary index to use should be transparent. All we should bother about is indexer.index(), indexer.search() etc.
 */
private List getAssociatedEntitiesFromIndex(Object entity,Object entityId,Class<?> childClass,Client childClient){
  List associatedEntities;
  IndexManager indexManager=childClient.getIndexManager();
  Map<String,Object> results=indexManager != null ? indexManager.search(entity.getClass(),childClass,entityId) : new HashMap<String,Object>();
  Set rsSet=results != null ? new HashSet(results.values()) : new HashSet();
  if (childClass.equals(entity.getClass())) {
    associatedEntities=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new Object[]{}));
  }
 else {
    associatedEntities=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new Object[]{}));
  }
  return associatedEntities;
}",0.9995810640971932
176642,"private void onLookUp(PersistenceUnitTransactionType transactionType){
  if (transactionType != null && transactionType.equals(PersistenceUnitTransactionType.JTA)) {
    if (this.entityTransaction == null) {
      this.entityTransaction=new KunderaEntityTransaction(this);
    }
    Context ctx;
    try {
      ctx=new InitialContext();
      this.utx=(UserTransaction)ctx.lookup(""String_Node_Str"");
      if (this.utx == null) {
        throw new KunderaException(""String_Node_Str"");
      }
      if (!(this.utx instanceof KunderaJTAUserTransaction)) {
        throw new KunderaException(""String_Node_Str"" + KunderaJTAUserTransaction.class.getName() + ""String_Node_Str""+ this.utx.getClass());
      }
      if (!this.entityTransaction.isActive()) {
        this.entityTransaction.begin();
      }
      this.setFlushMode(FlushModeType.COMMIT);
      ((KunderaJTAUserTransaction)this.utx).setImplementor(this);
    }
 catch (    NamingException e) {
      logger.error(""String_Node_Str"",e);
      throw new KunderaException(e);
    }
  }
}","private void onLookUp(PersistenceUnitTransactionType transactionType){
  if (transactionType != null && transactionType.equals(PersistenceUnitTransactionType.JTA)) {
    if (this.entityTransaction == null) {
      this.entityTransaction=new KunderaEntityTransaction(this);
    }
    Context ctx;
    try {
      ctx=new InitialContext();
      this.utx=(UserTransaction)ctx.lookup(""String_Node_Str"");
      if (this.utx == null) {
        throw new KunderaException(""String_Node_Str"");
      }
      if (!(this.utx instanceof KunderaJTAUserTransaction)) {
        throw new KunderaException(""String_Node_Str"" + KunderaJTAUserTransaction.class.getName() + ""String_Node_Str""+ this.utx.getClass());
      }
      if (!this.entityTransaction.isActive()) {
        this.entityTransaction.begin();
        this.setFlushMode(FlushModeType.COMMIT);
        ((KunderaJTAUserTransaction)this.utx).setImplementor(this);
      }
    }
 catch (    NamingException e) {
      logger.error(""String_Node_Str"",e);
      throw new KunderaException(e);
    }
  }
}",0.9923298178331736
176643,"void setImplementor(ResourceManager implementor){
  implementors.add(implementor);
}","void setImplementor(ResourceManager implementor){
  if (!implementors.contains(implementor)) {
    implementors.add(implementor);
  }
}",0.7671232876712328
176644,"@Test public void testConcurrentPersist() throws NotSupportedException, SystemException, NamingException, SecurityException, IllegalStateException, RollbackException, HeuristicMixedException, HeuristicRollbackException {
  userTransaction=(UserTransaction)initialContext.lookup(""String_Node_Str"");
  userTransaction.begin();
  for (i=0; i < 1; i++) {
    Runnable r=onExecute();
    r.run();
  }
  userTransaction.commit();
  userTransaction.begin();
  for (i=0; i < 1; i++) {
    EntityManager em1=emf.createEntityManager();
    Assert.assertNotNull(em1.find(PersonnelOToOFKEntityJTA.class,""String_Node_Str"" + i));
  }
}","@Test public void testConcurrentPersist() throws NotSupportedException, SystemException, NamingException, SecurityException, IllegalStateException, RollbackException, HeuristicMixedException, HeuristicRollbackException {
  userTransaction=(UserTransaction)initialContext.lookup(""String_Node_Str"");
  userTransaction.begin();
  for (i=0; i < 100; i++) {
    Runnable r=onExecute();
    r.run();
  }
  userTransaction.commit();
  userTransaction.begin();
  for (i=0; i < 100; i++) {
    EntityManager em1=emf.createEntityManager();
    Assert.assertNotNull(em1.find(PersonnelOToOFKEntityJTA.class,""String_Node_Str"" + i));
  }
}",0.9967897271268058
176645,"@Override public final void process(final Class<?> entityClass,EntityMetadata metadata){
  EntityListeners entityListeners=(EntityListeners)entityClass.getAnnotation(EntityListeners.class);
  if (entityListeners != null) {
    Class<?>[] entityListenerClasses=entityListeners.value();
    if (entityListenerClasses != null) {
      for (      Class<?> entityListener : entityListenerClasses) {
        try {
          entityListener.getConstructor();
        }
 catch (        NoSuchMethodException nsme) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityListener.getName() + ""String_Node_Str"");
        }
        for (        Method method : entityListener.getDeclaredMethods()) {
          List<Class<?>> jpaAnnotations=getValidJPAAnnotationsFromMethod(entityListener,method,1);
          for (          Class<?> jpaAnnotation : jpaAnnotations) {
            CallbackMethod callBackMethod=new ExternalCallbackMethod(entityListener,method);
            addCallBackMethod(metadata,jpaAnnotation,callBackMethod);
          }
        }
      }
    }
  }
  for (  Method method : entityClass.getDeclaredMethods()) {
    List<Class<?>> jpaAnnotations=getValidJPAAnnotationsFromMethod(entityClass,method,0);
    for (    Class<?> jpaAnnotation : jpaAnnotations) {
      CallbackMethod callbackMethod=new InternalCallbackMethod(metadata,method);
      addCallBackMethod(metadata,jpaAnnotation,callbackMethod);
    }
  }
}","@Override public final void process(final Class<?> entityClass,EntityMetadata metadata){
  EntityListeners entityListeners=(EntityListeners)entityClass.getAnnotation(EntityListeners.class);
  if (entityListeners != null) {
    Class<?>[] entityListenerClasses=entityListeners.value();
    if (entityListenerClasses != null) {
      for (      Class<?> entityListener : entityListenerClasses) {
        try {
          entityListener.getConstructor();
        }
 catch (        NoSuchMethodException nsme) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityListener.getName() + ""String_Node_Str"");
        }
        for (        Method method : entityListener.getDeclaredMethods()) {
          List<Class<?>> jpaAnnotations=getValidJPAAnnotationsFromMethod(entityListener,method,1,entityClass);
          for (          Class<?> jpaAnnotation : jpaAnnotations) {
            CallbackMethod callBackMethod=new ExternalCallbackMethod(entityListener,method);
            addCallBackMethod(metadata,jpaAnnotation,callBackMethod);
          }
        }
      }
    }
  }
  for (  Method method : entityClass.getDeclaredMethods()) {
    List<Class<?>> jpaAnnotations=getValidJPAAnnotationsFromMethod(entityClass,method,0,entityClass);
    for (    Class<?> jpaAnnotation : jpaAnnotations) {
      CallbackMethod callbackMethod=new InternalCallbackMethod(metadata,method);
      addCallBackMethod(metadata,jpaAnnotation,callbackMethod);
    }
  }
}",0.9917241379310344
176646,"/** 
 * Gets the valid jpa annotations from method.
 * @param clazz the clazz
 * @param method the method
 * @param numberOfParams the number of params
 * @return the valid jpa annotations from method
 */
private List<Class<?>> getValidJPAAnnotationsFromMethod(Class<?> clazz,Method method,int numberOfParams){
  List<Class<?>> annotations=new ArrayList<Class<?>>();
  for (  Annotation methodAnnotation : method.getAnnotations()) {
    Class<?> methodAnnotationType=methodAnnotation.annotationType();
    if (isValidJPAEntityListenerAnnotation(methodAnnotationType)) {
      boolean hasUncheckedExceptions=false;
      for (      Class<?> exception : method.getExceptionTypes()) {
        if (!ReflectUtils.hasSuperClass(RuntimeException.class,exception)) {
          hasUncheckedExceptions=true;
          break;
        }
      }
      if (hasUncheckedExceptions) {
        log.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str"");
        continue;
      }
      if (!method.getReturnType().getSimpleName().equals(""String_Node_Str"")) {
        log.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str"");
        continue;
      }
      Class<?>[] paramTypes=method.getParameterTypes();
      if (paramTypes.length != numberOfParams) {
        log.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str""+ numberOfParams+ ""String_Node_Str"");
        continue;
      }
      if (numberOfParams == 1) {
        Class<?> parameter=paramTypes[0];
        if (!parameter.getName().equals(""String_Node_Str"")) {
          log.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str"");
          continue;
        }
      }
      annotations.add(methodAnnotationType);
    }
  }
  return annotations;
}","/** 
 * Gets the valid jpa annotations from method.
 * @param clazz the clazz
 * @param method the method
 * @param numberOfParams the number of params
 * @return the valid jpa annotations from method
 */
private List<Class<?>> getValidJPAAnnotationsFromMethod(Class<?> clazz,Method method,int numberOfParams,Class<?> entityClazz){
  List<Class<?>> annotations=new ArrayList<Class<?>>();
  for (  Annotation methodAnnotation : method.getAnnotations()) {
    Class<?> methodAnnotationType=methodAnnotation.annotationType();
    if (isValidJPAEntityListenerAnnotation(methodAnnotationType)) {
      boolean hasUncheckedExceptions=false;
      for (      Class<?> exception : method.getExceptionTypes()) {
        if (!ReflectUtils.hasSuperClass(RuntimeException.class,exception)) {
          hasUncheckedExceptions=true;
          break;
        }
      }
      if (hasUncheckedExceptions) {
        log.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str"");
        continue;
      }
      if (!method.getReturnType().getSimpleName().equals(""String_Node_Str"")) {
        log.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str"");
        continue;
      }
      Class<?>[] paramTypes=method.getParameterTypes();
      if (paramTypes.length != numberOfParams) {
        log.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str""+ numberOfParams+ ""String_Node_Str"");
        continue;
      }
      if (numberOfParams == 1) {
        Class<?> parameter=paramTypes[0];
        if (!(parameter != null && parameter.isAssignableFrom(entityClazz))) {
          log.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str"");
          continue;
        }
      }
      annotations.add(methodAnnotationType);
    }
  }
  return annotations;
}",0.9433262711864406
176647,"/** 
 * Writes an entity into Persistence cache. (Actual database write is done while flushing)
 */
public void persist(Object e){
  if (e == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  EntityMetadata metadata=getMetadata(e.getClass());
  idGenerator.setGeneratedIdIfApplicable(e,metadata,getClient(metadata));
  if (!validator.isValidEntityObject(e)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new TransientState());
  Node node=graph.getHeadNode();
  lock.writeLock().lock();
  node.persist();
  flushManager.buildFlushStack(node,com.impetus.kundera.persistence.context.EventLog.EventType.INSERT);
  flush();
  getPersistenceCache().getMainCache().addHeadNode(node);
  lock.writeLock().unlock();
  graph.clear();
  graph=null;
  getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + e.getClass());
  }
}","/** 
 * Writes an entity into Persistence cache. (Actual database write is done while flushing)
 */
public void persist(Object e){
  if (e == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  EntityMetadata metadata=getMetadata(e.getClass());
  idGenerator.setGeneratedIdIfApplicable(e,metadata,getClient(metadata));
  if (!validator.isValidEntityObject(e)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
  }
 catch (  Exception es) {
    es.printStackTrace();
  }
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new TransientState());
  Node node=graph.getHeadNode();
  lock.writeLock().lock();
  node.persist();
  flushManager.buildFlushStack(node,com.impetus.kundera.persistence.context.EventLog.EventType.INSERT);
  flush();
  getPersistenceCache().getMainCache().addHeadNode(node);
  lock.writeLock().unlock();
  graph.clear();
  graph=null;
  getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + e.getClass());
  }
}",0.9680073126142597
176648,"/** 
 * Gets the entity manager factory.
 * @param useLucene
 * @param property
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(_persistenceUnit);
  clazzToPu.put(PersonnelDTO.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(PersonnelDTO.class);
  TableProcessor processor=new TableProcessor(null);
  processor.process(PersonnelDTO.class,m);
  m.setPersistenceUnit(_persistenceUnit);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(PersonnelDTO.class,m);
  metaModel.assignManagedTypes(appMetadata.getMetaModelBuilder(_persistenceUnit).getManagedTypes());
  metaModel.assignEmbeddables(appMetadata.getMetaModelBuilder(_persistenceUnit).getEmbeddables());
  metaModel.assignMappedSuperClass(appMetadata.getMetaModelBuilder(_persistenceUnit).getMappedSuperClassTypes());
  appMetadata.getMetamodelMap().put(_persistenceUnit,metaModel);
  return null;
}","/** 
 * Gets the entity manager factory.
 * @param useLucene
 * @param property
 * @return the entity manager factory
 */
private EntityManagerFactory getEntityManagerFactory(){
  return Persistence.createEntityManagerFactory(_persistenceUnit);
}",0.2576177285318559
176649,"@PrePersist public void handledPrePersist(PersonnelDTO user){
  System.out.println(""String_Node_Str"");
}","@PrePersist public void handledPrePersist(PersonnelDTO user){
  user.setLastName(""String_Node_Str"");
}",0.8640776699029126
176650,"@Test public void testCRUDWithBatch(){
  Map<String,String> batchProperty=new HashMap<String,String>(1);
  batchProperty.put(PersistenceProperties.KUNDERA_BATCH_SIZE,""String_Node_Str"");
  emf=Persistence.createEntityManagerFactory(REDIS_PU,batchProperty);
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  RedisClient client=(RedisClient)clients.get(REDIS_PU);
  Assert.assertEquals(5,((Batcher)client).getBatchSize());
  final String originalName=""String_Node_Str"";
  for (int i=0; i < 9; i++) {
    PersonRedis object=new PersonRedis();
    object.setAge(32);
    object.setPersonId(ROW_KEY + i);
    object.setPersonName(originalName);
    em.persist(object);
    if (i >= 5) {
      PersonRedis result=(PersonRedis)client.find(PersonRedis.class,ROW_KEY + i);
      Assert.assertNull(result);
    }
 else     if (i > 0 && i % 4 == 0) {
      PersonRedis result=(PersonRedis)client.find(PersonRedis.class,ROW_KEY + i);
      Assert.assertNotNull(result);
      Assert.assertEquals(result.getPersonId(),object.getPersonId());
      Assert.assertEquals(result.getAge(),object.getAge());
      Assert.assertEquals(result.getPersonName(),object.getPersonName());
    }
  }
  em.close();
}","@Test public void testCRUDWithBatch(){
  Map<String,String> batchProperty=new HashMap<String,String>(1);
  batchProperty.put(PersistenceProperties.KUNDERA_BATCH_SIZE,""String_Node_Str"");
  emf=Persistence.createEntityManagerFactory(REDIS_PU,batchProperty);
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  RedisClient client=(RedisClient)clients.get(REDIS_PU);
  Assert.assertEquals(5,((Batcher)client).getBatchSize());
  final String originalName=""String_Node_Str"";
  for (int i=0; i < 9; i++) {
    PersonRedis object=new PersonRedis();
    object.setAge(32);
    object.setPersonId(ROW_KEY + i);
    object.setPersonName(originalName);
    em.persist(object);
    if (i >= 5) {
      PersonRedis result=(PersonRedis)client.find(PersonRedis.class,ROW_KEY + i);
      Assert.assertNull(result);
    }
 else     if (i > 0 && i % 4 == 0) {
      PersonRedis result=(PersonRedis)client.find(PersonRedis.class,ROW_KEY + i);
      Assert.assertNotNull(result);
      Assert.assertEquals(result.getPersonId(),object.getPersonId());
      Assert.assertEquals(result.getAge(),object.getAge());
      Assert.assertEquals(result.getPersonName(),object.getPersonName());
    }
  }
  em.flush();
  em.clear();
  em.close();
  em=null;
  emf.close();
  emf=null;
  batchProperty.put(PersistenceProperties.KUNDERA_BATCH_SIZE,null);
  emf=Persistence.createEntityManagerFactory(REDIS_PU,batchProperty);
}",0.9201773835920176
176651,"/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations);
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  InstantiationException iex) {
    log.error(""String_Node_Str"" + iex.getMessage());
    throw new PersistenceException(iex);
  }
catch (  IllegalAccessException iaex) {
    log.error(""String_Node_Str"" + iaex.getMessage());
    throw new PersistenceException(iaex);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}","/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        if (""String_Node_Str"".equals(thriftColumnName) && tr.getId() == null) {
          entity=initialize(m,entity,null);
          PropertyAccessorHelper.setId(entity,m,column.getValue());
        }
        entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations);
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  InstantiationException iex) {
    log.error(""String_Node_Str"" + iex.getMessage());
    throw new PersistenceException(iex);
  }
catch (  IllegalAccessException iaex) {
    log.error(""String_Node_Str"" + iaex.getMessage());
    throw new PersistenceException(iaex);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}",0.975287772679707
176652,"/** 
 * On where clause.
 * @param metadata the metadata
 * @param compoundKeyObject the compound key object
 * @param translator the translator
 * @param queryBuilder the query builder
 * @param compoundKey the compound key
 */
private void onWhereClause(EntityMetadata metadata,Object compoundKeyObject,CQLTranslator translator,StringBuilder queryBuilder,ManagedType compoundKey){
  Field[] fields=metadata.getIdAttribute().getBindableJavaType().getDeclaredFields();
  queryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  for (  Field field : fields) {
    Attribute attribute=compoundKey.getAttribute(field.getName());
    String columnName=((AbstractAttribute)attribute).getJPAColumnName();
    translator.buildWhereClause(queryBuilder,columnName,field,compoundKeyObject);
  }
  queryBuilder.delete(queryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),queryBuilder.length());
}","/** 
 * On where clause.
 * @param metadata the metadata
 * @param compoundKeyObject the compound key object
 * @param translator the translator
 * @param queryBuilder the query builder
 * @param compoundKey the compound key
 */
private void onWhereClause(EntityMetadata metadata,Object compoundKeyObject,CQLTranslator translator,StringBuilder queryBuilder,ManagedType compoundKey){
  Field[] fields=metadata.getIdAttribute().getBindableJavaType().getDeclaredFields();
  queryBuilder.append(CQLTranslator.ADD_WHERE_CLAUSE);
  for (  Field field : fields) {
    if (field != null && !Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers()) && !field.isAnnotationPresent(Transient.class)) {
      Attribute attribute=compoundKey.getAttribute(field.getName());
      String columnName=((AbstractAttribute)attribute).getJPAColumnName();
      translator.buildWhereClause(queryBuilder,columnName,field,compoundKeyObject);
    }
  }
  queryBuilder.delete(queryBuilder.lastIndexOf(CQLTranslator.AND_CLAUSE),queryBuilder.length());
}",0.9096541042849768
176653,"/** 
 * Close.
 */
public void close(){
  nodes.clear();
  nodes=null;
  closed=true;
}","/** 
 * Close.
 */
public void close(){
  nodes.clear();
  nodes=null;
  closed=true;
  externalProperties=null;
}",0.8656716417910447
176654,"public void clear(){
  if (nodes != null) {
    nodes.clear();
    nodes=null;
    nodes=new ArrayList<Node>();
  }
}","public void clear(){
  if (nodes != null) {
    nodes.clear();
    nodes=null;
    nodes=new ArrayList<Node>();
  }
  externalProperties=null;
}",0.896551724137931
176655,"@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  List<Object> result=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  if (!appMetadata.isNative(getJPAQuery()) && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
    result=onQueryOverCompositeColumns(m,client,metaModel,null);
  }
 else {
    if (appMetadata.isNative(getJPAQuery())) {
      result=((CassandraClientBase)client).executeQuery(appMetadata.getQuery(getJPAQuery()),m.getEntityClazz(),null);
    }
 else {
      if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
        boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m);
        Map<Boolean,List<IndexClause>> ixClause=prepareIndexClause(m,useInvertedIndex);
        if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
          result=(List)((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
        }
 else {
          boolean isRowKeyQuery=ixClause.keySet().iterator().next();
          if (!isRowKeyQuery) {
            result=((CassandraClientBase)client).find(ixClause.get(isRowKeyQuery),m,false,null,maxResult,getColumnList(m,getKunderaQuery().getResult(),null));
          }
 else {
            result=((CassandraEntityReader)getReader()).handleFindByRange(m,client,result,ixClause,isRowKeyQuery,getColumnList(m,getKunderaQuery().getResult(),null));
          }
        }
      }
 else {
        result=populateUsingLucene(m,client,result);
      }
    }
  }
  return result;
}","@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  List<Object> result=new ArrayList<Object>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  if (!appMetadata.isNative(getJPAQuery()) && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
    result=onQueryOverCompositeColumns(m,client,metaModel,null);
  }
 else {
    if (appMetadata.isNative(getJPAQuery())) {
      result=((CassandraClientBase)client).executeQuery(appMetadata.getQuery(getJPAQuery()),m.getEntityClazz(),null);
    }
 else {
      if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
        boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m);
        Map<Boolean,List<IndexClause>> ixClause=prepareIndexClause(m,useInvertedIndex);
        if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
          result=(List)((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
        }
 else {
          boolean isRowKeyQuery=ixClause.keySet().iterator().next();
          if (!isRowKeyQuery) {
            result=((CassandraClientBase)client).find(ixClause.get(isRowKeyQuery),m,false,null,maxResult,getColumnList(m,getKunderaQuery().getResult(),null));
          }
 else {
            result=((CassandraEntityReader)getReader()).handleFindByRange(m,client,result,ixClause,isRowKeyQuery,getColumnList(m,getKunderaQuery().getResult(),null));
          }
        }
      }
 else {
        result=populateUsingLucene(m,client,result);
      }
    }
  }
  return result;
}",0.9930303875104544
176656,"/** 
 * On query over composite columns.
 * @param m the m
 * @param client the client
 * @param metaModel the meta model
 * @return the list
 */
private List onQueryOverCompositeColumns(EntityMetadata m,Client client,MetamodelImpl metaModel,List<String> relations){
  List<Object> result;
  Class compoundKeyClass=m.getIdAttribute().getBindableJavaType();
  EmbeddableType compoundKey=metaModel.embeddable(m.getIdAttribute().getBindableJavaType());
  String idColumn=((AbstractAttribute)m.getIdAttribute()).getJPAColumnName();
  StringBuilder builder=new StringBuilder();
  boolean isPresent=false;
  List<String> columns=getColumnList(m,getKunderaQuery().getResult(),compoundKey);
  String selectQuery=columns != null && !columns.isEmpty() ? CQLTranslator.SELECT_QUERY : CQLTranslator.SELECTALL_QUERY;
  CQLTranslator translator=new CQLTranslator();
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),m.getTableName()).toString());
  builder=appendColumns(builder,columns,selectQuery,translator);
  addWhereClause(builder);
  onCondition(m,metaModel,compoundKey,idColumn,builder,isPresent,translator);
  result=((CassandraClientBase)client).executeQuery(builder.toString(),m.getEntityClazz(),relations);
  return result;
}","/** 
 * On query over composite columns.
 * @param m the m
 * @param client the client
 * @param metaModel the meta model
 * @return the list
 */
private List onQueryOverCompositeColumns(EntityMetadata m,Client client,MetamodelImpl metaModel,List<String> relations){
  List<Object> result=new ArrayList<Object>();
  Class compoundKeyClass=m.getIdAttribute().getBindableJavaType();
  EmbeddableType compoundKey=metaModel.embeddable(m.getIdAttribute().getBindableJavaType());
  String idColumn=((AbstractAttribute)m.getIdAttribute()).getJPAColumnName();
  StringBuilder builder=new StringBuilder();
  boolean isPresent=false;
  List<String> columns=getColumnList(m,getKunderaQuery().getResult(),compoundKey);
  String selectQuery=columns != null && !columns.isEmpty() ? CQLTranslator.SELECT_QUERY : CQLTranslator.SELECTALL_QUERY;
  CQLTranslator translator=new CQLTranslator();
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),m.getTableName()).toString());
  builder=appendColumns(builder,columns,selectQuery,translator);
  addWhereClause(builder);
  onCondition(m,metaModel,compoundKey,idColumn,builder,isPresent,translator);
  result=((CassandraClientBase)client).executeQuery(builder.toString(),m.getEntityClazz(),relations);
  return result;
}",0.9907763259031516
176657,"/** 
 * On condition.
 * @param m the m
 * @param metaModel the meta model
 * @param compoundKey the compound key
 * @param idColumn the id column
 * @param builder the builder
 * @param isPresent the is present
 * @param translator the translator
 * @return true, if successful
 */
private boolean onCondition(EntityMetadata m,MetamodelImpl metaModel,EmbeddableType compoundKey,String idColumn,StringBuilder builder,boolean isPresent,CQLTranslator translator){
  String partitionKey=null;
  boolean allowFiltering=false;
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      String fieldName=clause.getProperty();
      String condition=clause.getCondition();
      Object value=clause.getValue();
      isPresent=true;
      if (idColumn.equals(fieldName)) {
        Field[] fields=m.getIdAttribute().getBindableJavaType().getDeclaredFields();
        for (        Field field : fields) {
          Attribute compositeColumn=compoundKey.getAttribute(field.getName());
          translator.buildWhereClause(builder,((AbstractAttribute)compositeColumn).getJPAColumnName(),field,value);
          if (partitionKey == null) {
            partitionKey=compositeColumn.getName();
          }
          if (!allowFiltering) {
            allowFiltering=fieldName.equals(partitionKey);
          }
        }
      }
 else       if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType()) && StringUtils.contains(fieldName,'.')) {
        fieldName=fieldName.substring(fieldName.indexOf(""String_Node_Str"") + 1);
        ((AbstractAttribute)compoundKey.getAttribute(fieldName)).getJPAColumnName();
        translator.buildWhereClause(builder,((AbstractAttribute)compoundKey.getAttribute(fieldName)).getJPAColumnName(),value,condition);
        if (partitionKey == null) {
          partitionKey=compoundKey.getAttribute(fieldName).getName();
        }
        if (!allowFiltering) {
          allowFiltering=fieldName.equals(partitionKey);
        }
      }
 else {
        Field[] fields=m.getIdAttribute().getBindableJavaType().getDeclaredFields();
        Attribute compositeColumn=compoundKey.getAttribute(fields[0].getName());
        if (partitionKey == null) {
          partitionKey=compositeColumn.getName();
        }
        if (!allowFiltering) {
          allowFiltering=fieldName.equals(partitionKey);
        }
        translator.buildWhereClause(builder,fieldName,value,condition);
      }
    }
  }
  if (isPresent) {
    builder.delete(builder.lastIndexOf(CQLTranslator.AND_CLAUSE),builder.length());
  }
  if (allowFiltering) {
    onLimit(builder);
    builder.append(""String_Node_Str"");
    translator.buildFilteringClause(builder);
  }
 else {
    onLimit(builder);
  }
  return isPresent;
}","/** 
 * On condition.
 * @param m the m
 * @param metaModel the meta model
 * @param compoundKey the compound key
 * @param idColumn the id column
 * @param builder the builder
 * @param isPresent the is present
 * @param translator the translator
 * @return true, if successful
 */
private boolean onCondition(EntityMetadata m,MetamodelImpl metaModel,EmbeddableType compoundKey,String idColumn,StringBuilder builder,boolean isPresent,CQLTranslator translator){
  String partitionKey=null;
  boolean allowFiltering=false;
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      String fieldName=clause.getProperty();
      String condition=clause.getCondition();
      Object value=clause.getValue();
      isPresent=true;
      if (idColumn.equals(fieldName)) {
        Field[] fields=m.getIdAttribute().getBindableJavaType().getDeclaredFields();
        for (        Field field : fields) {
          if (!ReflectUtils.isTransientOrStatic(field)) {
            Attribute compositeColumn=compoundKey.getAttribute(field.getName());
            translator.buildWhereClause(builder,((AbstractAttribute)compositeColumn).getJPAColumnName(),field,value);
            if (partitionKey == null) {
              partitionKey=compositeColumn.getName();
            }
            if (!allowFiltering) {
              allowFiltering=fieldName.equals(partitionKey);
            }
          }
        }
      }
 else       if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType()) && StringUtils.contains(fieldName,'.')) {
        fieldName=fieldName.substring(fieldName.indexOf(""String_Node_Str"") + 1);
        ((AbstractAttribute)compoundKey.getAttribute(fieldName)).getJPAColumnName();
        translator.buildWhereClause(builder,((AbstractAttribute)compoundKey.getAttribute(fieldName)).getJPAColumnName(),value,condition);
        if (partitionKey == null) {
          partitionKey=compoundKey.getAttribute(fieldName).getName();
        }
        if (!allowFiltering) {
          allowFiltering=fieldName.equals(partitionKey);
        }
      }
 else {
        Field[] fields=m.getIdAttribute().getBindableJavaType().getDeclaredFields();
        Attribute compositeColumn=compoundKey.getAttribute(fields[0].getName());
        if (partitionKey == null) {
          partitionKey=compositeColumn.getName();
        }
        if (!allowFiltering) {
          allowFiltering=fieldName.equals(partitionKey);
        }
        translator.buildWhereClause(builder,fieldName,value,condition);
      }
    }
  }
  if (isPresent) {
    builder.delete(builder.lastIndexOf(CQLTranslator.AND_CLAUSE),builder.length());
  }
  if (allowFiltering) {
    onLimit(builder);
    builder.append(""String_Node_Str"");
    translator.buildFilteringClause(builder);
  }
 else {
    onLimit(builder);
  }
  return isPresent;
}",0.984938704028021
176658,"/** 
 * Gets the column list.
 * @param m the m
 * @param results the results
 * @return the column list
 */
private List<String> getColumnList(EntityMetadata m,String[] results,EmbeddableType compoundKey){
  List<String> columns=new ArrayList<String>();
  if (results != null && results.length > 0) {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entity=metaModel.entity(m.getEntityClazz());
    for (int i=1; i < results.length; i++) {
      if (results[i] != null) {
        Attribute col=entity.getAttribute(results[i]);
        if (col == null) {
          throw new QueryHandlerException(""String_Node_Str"" + results);
        }
 else         if (m.getIdAttribute().equals(col) && compoundKey != null) {
          Field[] fields=m.getIdAttribute().getBindableJavaType().getDeclaredFields();
          for (          Field field : fields) {
            Attribute compositeColumn=compoundKey.getAttribute(field.getName());
            columns.add(((AbstractAttribute)compositeColumn).getJPAColumnName());
          }
        }
 else {
          columns.add(((AbstractAttribute)col).getJPAColumnName());
        }
      }
    }
    return columns;
  }
  return null;
}","/** 
 * Gets the column list.
 * @param m the m
 * @param results the results
 * @return the column list
 */
private List<String> getColumnList(EntityMetadata m,String[] results,EmbeddableType compoundKey){
  List<String> columns=new ArrayList<String>();
  if (results != null && results.length > 0) {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entity=metaModel.entity(m.getEntityClazz());
    for (int i=1; i < results.length; i++) {
      if (results[i] != null) {
        Attribute col=entity.getAttribute(results[i]);
        if (col == null) {
          throw new QueryHandlerException(""String_Node_Str"" + results);
        }
 else         if (m.getIdAttribute().equals(col) && compoundKey != null) {
          Field[] fields=m.getIdAttribute().getBindableJavaType().getDeclaredFields();
          for (          Field field : fields) {
            if (!ReflectUtils.isTransientOrStatic(field)) {
              Attribute compositeColumn=compoundKey.getAttribute(field.getName());
              columns.add(((AbstractAttribute)compositeColumn).getJPAColumnName());
            }
          }
        }
 else {
          columns.add(((AbstractAttribute)col).getJPAColumnName());
        }
      }
    }
    return columns;
  }
  return null;
}",0.9702062643239114
176659,"public List<EnhanceEntity> readFromIndexTable(EntityMetadata m,Client client,Map<Boolean,List<IndexClause>> indexClauseMap){
  List<SearchResult> searchResults=new ArrayList<SearchResult>();
  List<Object> primaryKeys=new ArrayList<Object>();
  String columnFamilyName=m.getTableName() + Constants.INDEX_TABLE_SUFFIX;
  searchResults=((CassandraClientBase)client).searchInInvertedIndex(columnFamilyName,m,indexClauseMap);
  Map<String,String> embeddedColumns=new HashMap<String,String>();
  for (  SearchResult searchResult : searchResults) {
    if (searchResult.getEmbeddedColumnValues() != null) {
      for (      String embeddedColVal : searchResult.getEmbeddedColumnValues()) {
        if (embeddedColVal != null) {
          StringBuilder strBuilder=new StringBuilder(embeddedColVal);
          strBuilder.append(""String_Node_Str"");
          strBuilder.append(searchResult.getPrimaryKey().toString());
          embeddedColumns.put(strBuilder.toString(),searchResult.getPrimaryKey().toString());
        }
      }
    }
  }
  List<EnhanceEntity> enhanceEntityList=null;
  if (embeddedColumns != null && !embeddedColumns.isEmpty()) {
    enhanceEntityList=client.find(m.getEntityClazz(),embeddedColumns);
  }
 else {
    for (    SearchResult searchResult : searchResults) {
      primaryKeys.add(searchResult.getPrimaryKey());
    }
    enhanceEntityList=(List<EnhanceEntity>)((CassandraClientBase)client).find(m.getEntityClazz(),m.getRelationNames(),true,m,primaryKeys.toArray(new String[]{}));
  }
  return enhanceEntityList;
}","public List<EnhanceEntity> readFromIndexTable(EntityMetadata m,Client client,Map<Boolean,List<IndexClause>> indexClauseMap){
  List<SearchResult> searchResults=new ArrayList<SearchResult>();
  List<Object> primaryKeys=new ArrayList<Object>();
  String columnFamilyName=m.getTableName() + Constants.INDEX_TABLE_SUFFIX;
  searchResults=((CassandraClientBase)client).searchInInvertedIndex(columnFamilyName,m,indexClauseMap);
  Map<String,String> embeddedColumns=new HashMap<String,String>();
  for (  SearchResult searchResult : searchResults) {
    if (searchResult.getEmbeddedColumnValues() != null) {
      for (      String embeddedColVal : searchResult.getEmbeddedColumnValues()) {
        if (embeddedColVal != null) {
          StringBuilder strBuilder=new StringBuilder(embeddedColVal);
          strBuilder.append(""String_Node_Str"");
          strBuilder.append(searchResult.getPrimaryKey().toString());
          embeddedColumns.put(strBuilder.toString(),searchResult.getPrimaryKey().toString());
        }
      }
    }
  }
  List<EnhanceEntity> enhanceEntityList=new ArrayList<EnhanceEntity>();
  if (embeddedColumns != null && !embeddedColumns.isEmpty()) {
    enhanceEntityList=client.find(m.getEntityClazz(),embeddedColumns);
  }
 else {
    for (    SearchResult searchResult : searchResults) {
      primaryKeys.add(searchResult.getPrimaryKey());
    }
    enhanceEntityList=(List<EnhanceEntity>)((CassandraClientBase)client).find(m.getEntityClazz(),m.getRelationNames(),true,m,primaryKeys.toArray(new String[]{}));
  }
  return enhanceEntityList;
}",0.9896774193548388
176660,"/** 
 * Sets the column family properties.
 * @param cfDef the cf def
 * @param cFProperties the c f properties
 */
private void setColumnFamilyProperties(CfDef cfDef,Properties cFProperties,StringBuilder builder){
  if ((cfDef != null && cFProperties != null) || (builder != null && cFProperties != null)) {
    if (builder != null) {
      builder.append(CQLTranslator.WITH_CLAUSE);
    }
    String keyValidationClass=cFProperties.getProperty(CassandraConstants.KEY_VALIDATION_CLASS);
    if (keyValidationClass != null) {
      if (builder != null) {
      }
 else {
        cfDef.setKey_validation_class(keyValidationClass);
      }
    }
    String compactionStrategy=cFProperties.getProperty(CassandraConstants.COMPACTION_STRATEGY);
    if (compactionStrategy != null) {
      if (builder != null) {
        String strategy_class=CQLTranslator.getKeyword(CassandraConstants.COMPACTION_STRATEGY);
        builder.append(strategy_class);
        builder.append(CQLTranslator.EQ_CLAUSE);
        builder.append(CQLTranslator.QUOTE_STR);
        builder.append(compactionStrategy);
        builder.append(CQLTranslator.QUOTE_STR);
        builder.append(CQLTranslator.AND_CLAUSE);
      }
 else {
        cfDef.setCompaction_strategy(compactionStrategy);
      }
    }
    String comparatorType=cFProperties.getProperty(CassandraConstants.COMPARATOR_TYPE);
    if (comparatorType != null) {
      if (builder != null) {
      }
 else {
        cfDef.setComparator_type(comparatorType);
      }
    }
    String subComparatorType=cFProperties.getProperty(CassandraConstants.SUB_COMPARATOR_TYPE);
    if (subComparatorType != null && ColumnFamilyType.valueOf(cfDef.getColumn_type()) == ColumnFamilyType.Super) {
      if (builder != null) {
      }
 else {
        cfDef.setSubcomparator_type(subComparatorType);
      }
    }
    String replicateOnWrite=cFProperties.getProperty(CassandraConstants.REPLICATE_ON_WRITE);
    if (builder != null) {
      appendPropertyToBuilder(builder,replicateOnWrite,CassandraConstants.REPLICATE_ON_WRITE);
    }
 else {
      cfDef.setReplicate_on_write(Boolean.parseBoolean(replicateOnWrite));
    }
    String maxCompactionThreshold=cFProperties.getProperty(CassandraConstants.MAX_COMPACTION_THRESHOLD);
    if (maxCompactionThreshold != null) {
      try {
        if (builder != null) {
        }
 else {
          cfDef.setMax_compaction_threshold(Integer.parseInt(maxCompactionThreshold));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    String minCompactionThreshold=cFProperties.getProperty(CassandraConstants.MIN_COMPACTION_THRESHOLD);
    if (minCompactionThreshold != null) {
      try {
        if (builder != null) {
        }
 else {
          cfDef.setMin_compaction_threshold(Integer.parseInt(minCompactionThreshold));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    String comment=cFProperties.getProperty(CassandraConstants.COMMENT);
    if (comment != null) {
      if (builder != null) {
        String comment_Str=CQLTranslator.getKeyword(CassandraConstants.COMMENT);
        builder.append(comment_Str);
        builder.append(CQLTranslator.EQ_CLAUSE);
        builder.append(CQLTranslator.QUOTE_STR);
        builder.append(comment);
        builder.append(CQLTranslator.QUOTE_STR);
        builder.append(CQLTranslator.AND_CLAUSE);
      }
 else {
        cfDef.setComment(comment);
      }
    }
    String id=cFProperties.getProperty(CassandraConstants.ID);
    if (id != null) {
      try {
        if (builder != null) {
        }
 else {
          cfDef.setId(Integer.parseInt(id));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    String gcGraceSeconds=cFProperties.getProperty(CassandraConstants.GC_GRACE_SECONDS);
    if (gcGraceSeconds != null) {
      try {
        if (builder != null) {
          appendPropertyToBuilder(builder,gcGraceSeconds,CassandraConstants.GC_GRACE_SECONDS);
        }
 else {
          cfDef.setGc_grace_seconds(Integer.parseInt(gcGraceSeconds));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    String caching=cFProperties.getProperty(CassandraConstants.CACHING);
    if (caching != null) {
      if (builder != null) {
        appendPropertyToBuilder(builder,caching,CassandraConstants.CACHING);
      }
 else {
        cfDef.setCaching(caching);
      }
    }
    String bloomFilterFpChance=cFProperties.getProperty(CassandraConstants.BLOOM_FILTER_FP_CHANCE);
    if (bloomFilterFpChance != null) {
      try {
        if (builder != null) {
          appendPropertyToBuilder(builder,bloomFilterFpChance,CassandraConstants.BLOOM_FILTER_FP_CHANCE);
        }
 else {
          cfDef.setBloom_filter_fp_chance(Double.parseDouble(bloomFilterFpChance));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    String readRepairChance=cFProperties.getProperty(CassandraConstants.READ_REPAIR_CHANCE);
    if (readRepairChance != null) {
      try {
        if (builder != null) {
          appendPropertyToBuilder(builder,readRepairChance,CassandraConstants.READ_REPAIR_CHANCE);
        }
 else {
          cfDef.setRead_repair_chance(Double.parseDouble(readRepairChance));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    String dclocalReadRepairChance=cFProperties.getProperty(CassandraConstants.DCLOCAL_READ_REPAIR_CHANCE);
    if (dclocalReadRepairChance != null) {
      try {
        if (builder != null) {
          appendPropertyToBuilder(builder,dclocalReadRepairChance,CassandraConstants.DCLOCAL_READ_REPAIR_CHANCE);
        }
 else {
          cfDef.setDclocal_read_repair_chance(Double.parseDouble(dclocalReadRepairChance));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    if (builder != null && StringUtils.contains(builder.toString(),CQLTranslator.AND_CLAUSE)) {
      builder.delete(builder.lastIndexOf(CQLTranslator.AND_CLAUSE),builder.length());
    }
  }
}","/** 
 * Sets the column family properties.
 * @param cfDef the cf def
 * @param cFProperties the c f properties
 */
private void setColumnFamilyProperties(CfDef cfDef,Properties cFProperties,StringBuilder builder){
  if ((cfDef != null && cFProperties != null) || (builder != null && cFProperties != null)) {
    if (builder != null) {
      builder.append(CQLTranslator.WITH_CLAUSE);
    }
    String keyValidationClass=cFProperties.getProperty(CassandraConstants.KEY_VALIDATION_CLASS);
    if (keyValidationClass != null) {
      if (builder != null) {
      }
 else {
        cfDef.setKey_validation_class(keyValidationClass);
      }
    }
    String compactionStrategy=cFProperties.getProperty(CassandraConstants.COMPACTION_STRATEGY);
    if (compactionStrategy != null) {
      if (builder != null) {
        String strategy_class=CQLTranslator.getKeyword(CassandraConstants.COMPACTION_STRATEGY);
        builder.append(strategy_class);
        builder.append(CQLTranslator.EQ_CLAUSE);
        builder.append(CQLTranslator.QUOTE_STR);
        builder.append(compactionStrategy);
        builder.append(CQLTranslator.QUOTE_STR);
        builder.append(CQLTranslator.AND_CLAUSE);
      }
 else {
        cfDef.setCompaction_strategy(compactionStrategy);
      }
    }
    String comparatorType=cFProperties.getProperty(CassandraConstants.COMPARATOR_TYPE);
    if (comparatorType != null) {
      if (builder != null) {
      }
 else {
        cfDef.setComparator_type(comparatorType);
      }
    }
    String subComparatorType=cFProperties.getProperty(CassandraConstants.SUBCOMPARATOR_TYPE);
    if (subComparatorType != null && ColumnFamilyType.valueOf(cfDef.getColumn_type()) == ColumnFamilyType.Super) {
      if (builder != null) {
      }
 else {
        cfDef.setSubcomparator_type(subComparatorType);
      }
    }
    String replicateOnWrite=cFProperties.getProperty(CassandraConstants.REPLICATE_ON_WRITE);
    if (builder != null) {
      appendPropertyToBuilder(builder,replicateOnWrite,CassandraConstants.REPLICATE_ON_WRITE);
    }
 else {
      cfDef.setReplicate_on_write(Boolean.parseBoolean(replicateOnWrite));
    }
    String maxCompactionThreshold=cFProperties.getProperty(CassandraConstants.MAX_COMPACTION_THRESHOLD);
    if (maxCompactionThreshold != null) {
      try {
        if (builder != null) {
        }
 else {
          cfDef.setMax_compaction_threshold(Integer.parseInt(maxCompactionThreshold));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    String minCompactionThreshold=cFProperties.getProperty(CassandraConstants.MIN_COMPACTION_THRESHOLD);
    if (minCompactionThreshold != null) {
      try {
        if (builder != null) {
        }
 else {
          cfDef.setMin_compaction_threshold(Integer.parseInt(minCompactionThreshold));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    String comment=cFProperties.getProperty(CassandraConstants.COMMENT);
    if (comment != null) {
      if (builder != null) {
        String comment_Str=CQLTranslator.getKeyword(CassandraConstants.COMMENT);
        builder.append(comment_Str);
        builder.append(CQLTranslator.EQ_CLAUSE);
        builder.append(CQLTranslator.QUOTE_STR);
        builder.append(comment);
        builder.append(CQLTranslator.QUOTE_STR);
        builder.append(CQLTranslator.AND_CLAUSE);
      }
 else {
        cfDef.setComment(comment);
      }
    }
    String id=cFProperties.getProperty(CassandraConstants.ID);
    if (id != null) {
      try {
        if (builder != null) {
        }
 else {
          cfDef.setId(Integer.parseInt(id));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    String gcGraceSeconds=cFProperties.getProperty(CassandraConstants.GC_GRACE_SECONDS);
    if (gcGraceSeconds != null) {
      try {
        if (builder != null) {
          appendPropertyToBuilder(builder,gcGraceSeconds,CassandraConstants.GC_GRACE_SECONDS);
        }
 else {
          cfDef.setGc_grace_seconds(Integer.parseInt(gcGraceSeconds));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    String caching=cFProperties.getProperty(CassandraConstants.CACHING);
    if (caching != null) {
      if (builder != null) {
        appendPropertyToBuilder(builder,caching,CassandraConstants.CACHING);
      }
 else {
        cfDef.setCaching(caching);
      }
    }
    String bloomFilterFpChance=cFProperties.getProperty(CassandraConstants.BLOOM_FILTER_FP_CHANCE);
    if (bloomFilterFpChance != null) {
      try {
        if (builder != null) {
          appendPropertyToBuilder(builder,bloomFilterFpChance,CassandraConstants.BLOOM_FILTER_FP_CHANCE);
        }
 else {
          cfDef.setBloom_filter_fp_chance(Double.parseDouble(bloomFilterFpChance));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    String readRepairChance=cFProperties.getProperty(CassandraConstants.READ_REPAIR_CHANCE);
    if (readRepairChance != null) {
      try {
        if (builder != null) {
          appendPropertyToBuilder(builder,readRepairChance,CassandraConstants.READ_REPAIR_CHANCE);
        }
 else {
          cfDef.setRead_repair_chance(Double.parseDouble(readRepairChance));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    String dclocalReadRepairChance=cFProperties.getProperty(CassandraConstants.DCLOCAL_READ_REPAIR_CHANCE);
    if (dclocalReadRepairChance != null) {
      try {
        if (builder != null) {
          appendPropertyToBuilder(builder,dclocalReadRepairChance,CassandraConstants.DCLOCAL_READ_REPAIR_CHANCE);
        }
 else {
          cfDef.setDclocal_read_repair_chance(Double.parseDouble(dclocalReadRepairChance));
        }
      }
 catch (      NumberFormatException nfe) {
        log.error(""String_Node_Str"");
        throw new SchemaGenerationException(nfe);
      }
    }
    if (builder != null && StringUtils.contains(builder.toString(),CQLTranslator.AND_CLAUSE)) {
      builder.delete(builder.lastIndexOf(CQLTranslator.AND_CLAUSE),builder.length());
    }
  }
}",0.9999241217087792
176661,"/** 
 * On compound key.
 * @param tableInfo the table info
 * @throws InvalidRequestException the invalid request exception
 * @throws TException the t exception
 * @throws SchemaDisagreementException the schema disagreement exception
 */
private void onCompoundKey(TableInfo tableInfo) throws InvalidRequestException, TException, SchemaDisagreementException {
  CQLTranslator translator=new CQLTranslator();
  String columnFamilyQuery=CQLTranslator.CREATE_COLUMNFAMILY_QUERY;
  columnFamilyQuery=StringUtils.replace(columnFamilyQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableInfo.getTableName()).toString());
  List<ColumnInfo> columns=tableInfo.getColumnMetadatas();
  Properties props=getColumnFamilyProperties(tableInfo);
  StringBuilder queryBuilder=new StringBuilder();
  onCompositeColumns(translator,columns,queryBuilder);
  List<EmbeddedColumnInfo> compositeColumns=tableInfo.getEmbeddedColumnMetadatas();
  EmbeddableType compoEmbeddableType=compositeColumns.get(0).getEmbeddable();
  onCompositeColumns(translator,compositeColumns.get(0).getColumns(),queryBuilder);
  if (queryBuilder.length() > 0) {
    queryBuilder.deleteCharAt(queryBuilder.length() - 1);
    columnFamilyQuery=StringUtils.replace(columnFamilyQuery,CQLTranslator.COLUMNS,queryBuilder.toString());
    queryBuilder=new StringBuilder(columnFamilyQuery);
  }
  queryBuilder.append(translator.ADD_PRIMARYKEY_CLAUSE);
  Field[] fields=tableInfo.getTableIdType().getDeclaredFields();
  StringBuilder primaryKeyBuilder=new StringBuilder();
  for (  Field f : fields) {
    Attribute attribute=compoEmbeddableType.getAttribute(f.getName());
    translator.appendColumnName(primaryKeyBuilder,((AbstractAttribute)attribute).getJPAColumnName());
    primaryKeyBuilder.append(""String_Node_Str"");
  }
  primaryKeyBuilder.deleteCharAt(primaryKeyBuilder.length() - 1);
  queryBuilder=new StringBuilder(StringUtils.replace(queryBuilder.toString(),CQLTranslator.COLUMNS,primaryKeyBuilder.toString()));
  setColumnFamilyProperties(null,getColumnFamilyProperties(tableInfo),queryBuilder);
  cassandra_client.set_cql_version(CassandraConstants.CQL_VERSION_3_0);
  cassandra_client.set_keyspace(databaseName);
  try {
    cassandra_client.execute_cql3_query(ByteBuffer.wrap(queryBuilder.toString().getBytes(Constants.CHARSET_UTF8)),Compression.NONE,ConsistencyLevel.ONE);
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"" + databaseName + ""String_Node_Str"",e);
    throw new SchemaGenerationException(""String_Node_Str"" + databaseName,e,""String_Node_Str"",databaseName);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + databaseName + ""String_Node_Str"",e);
    throw new SchemaGenerationException(""String_Node_Str"" + databaseName,e,""String_Node_Str"",databaseName);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + databaseName + ""String_Node_Str"",e);
    throw new SchemaGenerationException(""String_Node_Str"" + databaseName,e,""String_Node_Str"",databaseName);
  }
}","/** 
 * On compound key.
 * @param tableInfo the table info
 * @throws InvalidRequestException the invalid request exception
 * @throws TException the t exception
 * @throws SchemaDisagreementException the schema disagreement exception
 */
private void onCompoundKey(TableInfo tableInfo) throws InvalidRequestException, TException, SchemaDisagreementException {
  CQLTranslator translator=new CQLTranslator();
  String columnFamilyQuery=CQLTranslator.CREATE_COLUMNFAMILY_QUERY;
  columnFamilyQuery=StringUtils.replace(columnFamilyQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableInfo.getTableName()).toString());
  List<ColumnInfo> columns=tableInfo.getColumnMetadatas();
  Properties props=getColumnFamilyProperties(tableInfo);
  StringBuilder queryBuilder=new StringBuilder();
  onCompositeColumns(translator,columns,queryBuilder);
  List<EmbeddedColumnInfo> compositeColumns=tableInfo.getEmbeddedColumnMetadatas();
  EmbeddableType compoEmbeddableType=compositeColumns.get(0).getEmbeddable();
  onCompositeColumns(translator,compositeColumns.get(0).getColumns(),queryBuilder);
  if (queryBuilder.length() > 0) {
    queryBuilder.deleteCharAt(queryBuilder.length() - 1);
    columnFamilyQuery=StringUtils.replace(columnFamilyQuery,CQLTranslator.COLUMNS,queryBuilder.toString());
    queryBuilder=new StringBuilder(columnFamilyQuery);
  }
  queryBuilder.append(translator.ADD_PRIMARYKEY_CLAUSE);
  Field[] fields=tableInfo.getTableIdType().getDeclaredFields();
  StringBuilder primaryKeyBuilder=new StringBuilder();
  for (  Field f : fields) {
    if (!ReflectUtils.isTransientOrStatic(f)) {
      Attribute attribute=compoEmbeddableType.getAttribute(f.getName());
      translator.appendColumnName(primaryKeyBuilder,((AbstractAttribute)attribute).getJPAColumnName());
      primaryKeyBuilder.append(""String_Node_Str"");
    }
  }
  primaryKeyBuilder.deleteCharAt(primaryKeyBuilder.length() - 1);
  queryBuilder=new StringBuilder(StringUtils.replace(queryBuilder.toString(),CQLTranslator.COLUMNS,primaryKeyBuilder.toString()));
  setColumnFamilyProperties(null,getColumnFamilyProperties(tableInfo),queryBuilder);
  cassandra_client.set_cql_version(CassandraConstants.CQL_VERSION_3_0);
  cassandra_client.set_keyspace(databaseName);
  try {
    cassandra_client.execute_cql3_query(ByteBuffer.wrap(queryBuilder.toString().getBytes(Constants.CHARSET_UTF8)),Compression.NONE,ConsistencyLevel.ONE);
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"" + databaseName + ""String_Node_Str"",e);
    throw new SchemaGenerationException(""String_Node_Str"" + databaseName,e,""String_Node_Str"",databaseName);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + databaseName + ""String_Node_Str"",e);
    throw new SchemaGenerationException(""String_Node_Str"" + databaseName,e,""String_Node_Str"",databaseName);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + databaseName + ""String_Node_Str"",e);
    throw new SchemaGenerationException(""String_Node_Str"" + databaseName,e,""String_Node_Str"",databaseName);
  }
}",0.9902024820378836
176662,"/** 
 * @param tableInfo
 * @return CfDef object
 */
private CfDef getTableMetadata(TableInfo tableInfo){
  CfDef cfDef=new CfDef();
  cfDef.setKeyspace(databaseName);
  cfDef.setName(tableInfo.getTableName());
  cfDef.setKey_validation_class(CassandraValidationClassMapper.getValidationClass(tableInfo.getTableIdType()));
  Schema schema=CassandraPropertyReader.csmd.getSchema(databaseName);
  tables=schema != null ? schema.getTables() : null;
  Properties cFProperties=getColumnFamilyProperties(tableInfo);
  String defaultValidationClass=null;
  if (tableInfo.getType() != null && tableInfo.getType().equals(Type.SUPER_COLUMN_FAMILY.name())) {
    if (isCounterColumnType(tableInfo,defaultValidationClass)) {
      cfDef.setDefault_validation_class(CounterColumnType.class.getSimpleName());
    }
    cfDef.setColumn_type(""String_Node_Str"");
  }
 else   if (tableInfo.getType() != null) {
    defaultValidationClass=cFProperties != null ? cFProperties.getProperty(CassandraConstants.DEFAULT_VALIDATION_CLASS) : null;
    cfDef.setColumn_type(""String_Node_Str"");
    if (isCounterColumnType(tableInfo,defaultValidationClass)) {
      cfDef.setDefault_validation_class(CounterColumnType.class.getSimpleName());
    }
 else {
      List<ColumnDef> columnDefs=new ArrayList<ColumnDef>();
      List<ColumnInfo> columnInfos=tableInfo.getColumnMetadatas();
      if (columnInfos != null) {
        for (        ColumnInfo columnInfo : columnInfos) {
          ColumnDef columnDef=new ColumnDef();
          if (columnInfo.isIndexable()) {
            columnDef.setIndex_type(CassandraIndexHelper.getIndexType(columnInfo.getIndexType()));
          }
          columnDef.setName(columnInfo.getColumnName().getBytes());
          columnDef.setValidation_class(CassandraValidationClassMapper.getValidationClass(columnInfo.getType()));
          columnDefs.add(columnDef);
        }
      }
      cfDef.setColumn_metadata(columnDefs);
    }
  }
  setColumnFamilyProperties(cfDef,cFProperties,null);
  return cfDef;
}","/** 
 * @param tableInfo
 * @return CfDef object
 */
private CfDef getTableMetadata(TableInfo tableInfo){
  CfDef cfDef=new CfDef();
  cfDef.setKeyspace(databaseName);
  cfDef.setName(tableInfo.getTableName());
  cfDef.setKey_validation_class(CassandraValidationClassMapper.getValidationClass(tableInfo.getTableIdType()));
  Schema schema=CassandraPropertyReader.csmd.getSchema(databaseName);
  tables=schema != null ? schema.getTables() : null;
  Properties cFProperties=getColumnFamilyProperties(tableInfo);
  String defaultValidationClass=null;
  if (tableInfo.getType() != null && tableInfo.getType().equals(Type.SUPER_COLUMN_FAMILY.name())) {
    if (isCounterColumnType(tableInfo,defaultValidationClass)) {
      cfDef.setDefault_validation_class(CounterColumnType.class.getSimpleName());
    }
    cfDef.setColumn_type(""String_Node_Str"");
    cfDef.setComparator_type(UTF8Type.class.getSimpleName());
    cfDef.setSubcomparator_type(UTF8Type.class.getSimpleName());
  }
 else   if (tableInfo.getType() != null) {
    defaultValidationClass=cFProperties != null ? cFProperties.getProperty(CassandraConstants.DEFAULT_VALIDATION_CLASS) : null;
    cfDef.setColumn_type(""String_Node_Str"");
    cfDef.setComparator_type(UTF8Type.class.getSimpleName());
    if (isCounterColumnType(tableInfo,defaultValidationClass)) {
      cfDef.setDefault_validation_class(CounterColumnType.class.getSimpleName());
    }
 else {
      List<ColumnDef> columnDefs=new ArrayList<ColumnDef>();
      List<ColumnInfo> columnInfos=tableInfo.getColumnMetadatas();
      if (columnInfos != null) {
        for (        ColumnInfo columnInfo : columnInfos) {
          ColumnDef columnDef=new ColumnDef();
          if (columnInfo.isIndexable()) {
            columnDef.setIndex_type(CassandraIndexHelper.getIndexType(columnInfo.getIndexType()));
          }
          columnDef.setName(columnInfo.getColumnName().getBytes());
          columnDef.setValidation_class(CassandraValidationClassMapper.getValidationClass(columnInfo.getType()));
          columnDefs.add(columnDef);
        }
      }
      cfDef.setColumn_metadata(columnDefs);
    }
  }
  setColumnFamilyProperties(cfDef,cFProperties,null);
  return cfDef;
}",0.955096222380613
176663,"/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  String persistenceUnit=null;
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
  try {
    for (    Node node : nodes) {
      if (node.isDirty()) {
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (node.isInState(RemovedState.class)) {
          delete(entity,id);
        }
 else         if (metaModel.isEmbeddable(metadata.getIdAttribute().getBindableJavaType())) {
          List<RelationHolder> relationHolders=getRelationHolders(node);
          onPersist(metadata,entity,id,relationHolders);
        }
 else {
          List<RelationHolder> relationHolders=getRelationHolders(node);
          mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
          indexNode(node,metadata);
        }
      }
    }
    if (!mutationMap.isEmpty()) {
      pooledConnection=getPooledConection(persistenceUnit);
      conn=getConnection(pooledConnection);
      conn.batch_mutate(mutationMap,consistencyLevel);
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    releaseConnection(pooledConnection);
  }
  return mutationMap.size();
}","/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  String persistenceUnit=null;
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>> batchMutationMap=new HashMap<Class<?>,Map<ByteBuffer,Map<String,List<Mutation>>>>();
  int recordsExecuted=0;
  try {
    for (    Node node : nodes) {
      if (node.isDirty()) {
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (node.isInState(RemovedState.class)) {
          delete(entity,id);
        }
 else         if (metaModel.isEmbeddable(metadata.getIdAttribute().getBindableJavaType())) {
          List<RelationHolder> relationHolders=getRelationHolders(node);
          onPersist(metadata,entity,id,relationHolders);
        }
 else {
          List<RelationHolder> relationHolders=getRelationHolders(node);
          Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
          mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
          recordsExecuted+=mutationMap.size();
          if (!batchMutationMap.containsKey(metadata.getEntityClazz())) {
            batchMutationMap.put(metadata.getEntityClazz(),mutationMap);
          }
 else {
            batchMutationMap.get(metadata.getEntityClazz()).putAll(mutationMap);
          }
          indexNode(node,metadata);
        }
      }
    }
    if (!batchMutationMap.isEmpty()) {
      pooledConnection=getPooledConection(persistenceUnit);
      conn=getConnection(pooledConnection);
      for (      Class<?> entityClass : batchMutationMap.keySet()) {
        conn.batch_mutate(batchMutationMap.get(entityClass),consistencyLevel);
      }
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    releaseConnection(pooledConnection);
  }
  return recordsExecuted;
}",0.8596528819370045
176664,"/** 
 * Prepare mutation.
 * @param entityMetadata the entity metadata
 * @param entity the entity
 * @param id the id
 * @param relationHolders the relation holders
 * @param mutationMap the mutation map
 * @return the map
 */
protected Map<ByteBuffer,Map<String,List<Mutation>>> prepareMutation(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> relationHolders,Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  if (isUpdate && entityMetadata.isCounterColumnType()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  ThriftRow tf=null;
  try {
    String columnFamily=entityMetadata.getTableName();
    tf=getDataHandler().toThriftRow(entity,id,entityMetadata,columnFamily);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
  addRelationsToThriftRow(entityMetadata,tf,relationHolders);
  String columnFamily=entityMetadata.getTableName();
  List<Mutation> insertion_list=new ArrayList<Mutation>();
  if (entityMetadata.isCounterColumnType()) {
    List<CounterColumn> thriftCounterColumns=tf.getCounterColumns();
    List<CounterSuperColumn> thriftCounterSuperColumns=tf.getCounterSuperColumns();
    if (thriftCounterColumns != null && !thriftCounterColumns.isEmpty()) {
      for (      CounterColumn column : thriftCounterColumns) {
        Mutation mut=new Mutation();
        mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setCounter_column(column));
        insertion_list.add(mut);
      }
    }
    if (thriftCounterSuperColumns != null && !thriftCounterSuperColumns.isEmpty()) {
      for (      CounterSuperColumn sc : thriftCounterSuperColumns) {
        Mutation mut=new Mutation();
        mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setCounter_super_column(sc));
        insertion_list.add(mut);
      }
    }
  }
 else {
    List<Column> thriftColumns=tf.getColumns();
    List<SuperColumn> thriftSuperColumns=tf.getSuperColumns();
    if (thriftColumns != null && !thriftColumns.isEmpty()) {
      for (      Column column : thriftColumns) {
        Mutation mut=new Mutation();
        mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setColumn(column));
        insertion_list.add(mut);
      }
    }
    if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
      for (      SuperColumn superColumn : thriftSuperColumns) {
        Mutation mut=new Mutation();
        mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setSuper_column(superColumn));
        insertion_list.add(mut);
      }
    }
  }
  Map<String,List<Mutation>> columnFamilyValues=new HashMap<String,List<Mutation>>();
  columnFamilyValues.put(columnFamily,insertion_list);
  Bytes b=CassandraUtilities.toBytes(tf.getId(),entityMetadata.getIdAttribute().getBindableJavaType());
  mutationMap.put(b.getBytes(),columnFamilyValues);
  return mutationMap;
}","/** 
 * Prepare mutation.
 * @param entityMetadata the entity metadata
 * @param entity the entity
 * @param id the id
 * @param relationHolders the relation holders
 * @param mutationMap the mutation map
 * @return the map
 */
protected Map<ByteBuffer,Map<String,List<Mutation>>> prepareMutation(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> relationHolders,Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  if (isUpdate && entityMetadata.isCounterColumnType()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  ThriftRow tf=null;
  try {
    String columnFamily=entityMetadata.getTableName();
    tf=getDataHandler().toThriftRow(entity,id,entityMetadata,columnFamily);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
  addRelationsToThriftRow(entityMetadata,tf,relationHolders);
  String columnFamily=entityMetadata.getTableName();
  List<Mutation> mutationList=new ArrayList<Mutation>();
  if (entityMetadata.isCounterColumnType()) {
    List<CounterColumn> thriftCounterColumns=tf.getCounterColumns();
    List<CounterSuperColumn> thriftCounterSuperColumns=tf.getCounterSuperColumns();
    if (thriftCounterColumns != null && !thriftCounterColumns.isEmpty()) {
      for (      CounterColumn column : thriftCounterColumns) {
        Mutation mut=new Mutation();
        mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setCounter_column(column));
        mutationList.add(mut);
      }
    }
    if (thriftCounterSuperColumns != null && !thriftCounterSuperColumns.isEmpty()) {
      for (      CounterSuperColumn sc : thriftCounterSuperColumns) {
        Mutation mut=new Mutation();
        mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setCounter_super_column(sc));
        mutationList.add(mut);
      }
    }
  }
 else {
    List<Column> thriftColumns=tf.getColumns();
    List<SuperColumn> thriftSuperColumns=tf.getSuperColumns();
    if (thriftColumns != null && !thriftColumns.isEmpty()) {
      for (      Column column : thriftColumns) {
        Mutation mut=new Mutation();
        mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setColumn(column));
        mutationList.add(mut);
      }
    }
    if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
      for (      SuperColumn superColumn : thriftSuperColumns) {
        Mutation mut=new Mutation();
        mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setSuper_column(superColumn));
        mutationList.add(mut);
      }
    }
  }
  Map<String,List<Mutation>> columnFamilyValues=new HashMap<String,List<Mutation>>();
  columnFamilyValues.put(columnFamily,mutationList);
  Bytes b=CassandraUtilities.toBytes(tf.getId(),entityMetadata.getIdAttribute().getBindableJavaType());
  mutationMap.put(b.getBytes(),columnFamilyValues);
  return mutationMap;
}",0.9797775530839232
176665,"void setImplementor(ResourceManager implementor){
  if (!implementors.contains(implementor)) {
    implementors.add(implementor);
  }
}","void setImplementor(ResourceManager implementor){
  implementors.add(implementor);
}",0.7671232876712328
176666,"/** 
 * @param databaseName
 * @param tableName
 * @return
 */
public boolean isCappedCollection(String databaseName,String tableName){
  List<Schema> schemas=getDataStore() != null ? getDataStore().getSchemas() : null;
  if (schemas != null) {
    for (    Schema schema : schemas) {
      if (schema != null && schema.getName() != null && schema.getName().equalsIgnoreCase(databaseName)) {
        for (        Table table : schema.getTables()) {
          if (table.getProperties() != null) {
            return Boolean.parseBoolean(table.getProperties().getProperty(MongoDBConstants.CAPPED));
          }
        }
      }
    }
  }
  return false;
}","/** 
 * @param databaseName
 * @param tableName
 * @return
 */
public boolean isCappedCollection(String databaseName,String tableName){
  List<Schema> schemas=getDataStore() != null ? getDataStore().getSchemas() : null;
  if (schemas != null) {
    for (    Schema schema : schemas) {
      if (schema != null && schema.getName() != null && schema.getName().equalsIgnoreCase(databaseName)) {
        for (        Table table : schema.getTables()) {
          if (table.getProperties() != null && tableName.equals(table.getName())) {
            return Boolean.parseBoolean(table.getProperties().getProperty(MongoDBConstants.CAPPED));
          }
        }
      }
    }
  }
  return false;
}",0.9724907063197026
176667,"@Test public void testCappedCollection(){
  DBCollection collection=db.getCollection(""String_Node_Str"");
  Assert.assertTrue(collection.isCapped());
  CommandResult stats=collection.getStats();
  Object maxObj=stats.get(MongoDBConstants.MAX);
  Assert.assertNotNull(maxObj);
  int max=Integer.parseInt(maxObj.toString());
  Assert.assertEquals(10,max);
  List<DBObject> indexInfo=collection.getIndexInfo();
  Assert.assertTrue(indexInfo.isEmpty());
  for (int i=1; i <= max; i++) {
    MongoDBEntitySimple entity=new MongoDBEntitySimple();
    entity.setPersonId(i + ""String_Node_Str"");
    entity.setPersonName(""String_Node_Str"" + i);
    entity.setAge((short)i);
    em.persist(entity);
  }
  MongoDBEntitySimple entity=new MongoDBEntitySimple();
  entity.setPersonId((max + 1) + ""String_Node_Str"");
  entity.setPersonName(""String_Node_Str"" + (max + 1));
  entity.setAge((short)(max + 1));
  em.persist(entity);
  em.clear();
  MongoDBEntitySimple firstRecord=em.find(MongoDBEntitySimple.class,""String_Node_Str"");
  Assert.assertNull(firstRecord);
  MongoDBEntitySimple lastRecord=em.find(MongoDBEntitySimple.class,""String_Node_Str"" + (max + 1));
  Assert.assertNotNull(lastRecord);
  em.remove(lastRecord);
  em.clear();
  lastRecord=em.find(MongoDBEntitySimple.class,""String_Node_Str"" + (max + 1));
  Assert.assertNotNull(lastRecord);
}","@Test public void testCappedCollection(){
  DBCollection collection=db.getCollection(""String_Node_Str"");
  Assert.assertTrue(collection.isCapped());
  CommandResult stats=collection.getStats();
  Object maxObj=stats.get(MongoDBConstants.MAX);
  Assert.assertNotNull(maxObj);
  int max=Integer.parseInt(maxObj.toString());
  Assert.assertEquals(10,max);
  List<DBObject> indexInfo=collection.getIndexInfo();
  Assert.assertTrue(indexInfo.isEmpty());
  for (int i=1; i <= max; i++) {
    MongoDBCappedEntity entity=new MongoDBCappedEntity();
    entity.setPersonId(i + ""String_Node_Str"");
    entity.setPersonName(""String_Node_Str"" + i);
    entity.setAge((short)i);
    em.persist(entity);
  }
  MongoDBCappedEntity entity=new MongoDBCappedEntity();
  entity.setPersonId((max + 1) + ""String_Node_Str"");
  entity.setPersonName(""String_Node_Str"" + (max + 1));
  entity.setAge((short)(max + 1));
  em.persist(entity);
  em.clear();
  MongoDBCappedEntity firstRecord=em.find(MongoDBCappedEntity.class,""String_Node_Str"");
  Assert.assertNull(firstRecord);
  MongoDBCappedEntity lastRecord=em.find(MongoDBCappedEntity.class,""String_Node_Str"" + (max + 1));
  Assert.assertNotNull(lastRecord);
  em.remove(lastRecord);
  em.clear();
  lastRecord=em.find(MongoDBCappedEntity.class,""String_Node_Str"" + (max + 1));
  Assert.assertNotNull(lastRecord);
}",0.9597014925373134
176668,"/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  truncateMongo();
}","/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
  truncateMongo();
  emf.close();
}",0.9356223175965666
176669,"@Before public void setUp() throws Exception {
  dao=new PersonGISDao(persistenceUnit);
}","@Before public void setUp() throws Exception {
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  dao=new PersonGISDao(persistenceUnit);
}",0.7574468085106383
176670,"/** 
 * Test method for  {@link com.impetus.client.mongodb.schemamanager.MongoDBSchemaManager#create(java.util.List)}.
 */
@Test public void testCreate(){
  DBCollection collection=db.getCollection(""String_Node_Str"");
  Assert.assertTrue(collection.isCapped());
  Assert.assertEquals(ReadPreference.PRIMARY,collection.getReadPreference());
  Assert.assertNotNull(collection.getIndexInfo());
  Assert.assertEquals(3,collection.getIndexInfo().size());
  int count=0;
  for (  DBObject dbObject : collection.getIndexInfo()) {
    if (dbObject.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      Assert.assertEquals(new Integer(Integer.MIN_VALUE),dbObject.get(""String_Node_Str""));
      Assert.assertEquals(new Integer(Integer.MAX_VALUE),dbObject.get(""String_Node_Str""));
      Assert.assertTrue(dbObject.get(""String_Node_Str"").equals(new BasicDBObject(""String_Node_Str"",1)));
      count++;
    }
 else     if (dbObject.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      Assert.assertEquals(new Integer(100),dbObject.get(""String_Node_Str""));
      Assert.assertEquals(new Integer(500),dbObject.get(""String_Node_Str""));
      Assert.assertTrue(dbObject.get(""String_Node_Str"").equals(new BasicDBObject(""String_Node_Str"",-1)));
      count++;
    }
 else {
      Assert.assertEquals(new Integer(-100),dbObject.get(""String_Node_Str""));
      Assert.assertEquals(new Integer(500),dbObject.get(""String_Node_Str""));
      Assert.assertTrue(dbObject.get(""String_Node_Str"").equals(new BasicDBObject(""String_Node_Str"",""String_Node_Str"")));
      count++;
    }
  }
  Assert.assertEquals(3,count);
}","/** 
 * Test method for  {@link com.impetus.client.mongodb.schemamanager.MongoDBSchemaManager#create(java.util.List)}.
 */
@Test public void testCreate(){
  DBCollection collection=db.getCollection(""String_Node_Str"");
  Assert.assertEquals(ReadPreference.PRIMARY,collection.getReadPreference());
  Assert.assertNotNull(collection.getIndexInfo());
  Assert.assertEquals(4,collection.getIndexInfo().size());
  int count=0;
  for (  DBObject dbObject : collection.getIndexInfo()) {
    if (dbObject.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      Assert.assertTrue(dbObject.get(""String_Node_Str"").equals(new BasicDBObject(""String_Node_Str"",1)));
      count++;
    }
 else     if (dbObject.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      Assert.assertEquals(new Integer(Integer.MIN_VALUE),dbObject.get(""String_Node_Str""));
      Assert.assertEquals(new Integer(Integer.MAX_VALUE),dbObject.get(""String_Node_Str""));
      Assert.assertTrue(dbObject.get(""String_Node_Str"").equals(new BasicDBObject(""String_Node_Str"",1)));
      count++;
    }
 else     if (dbObject.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      Assert.assertEquals(new Integer(100),dbObject.get(""String_Node_Str""));
      Assert.assertEquals(new Integer(500),dbObject.get(""String_Node_Str""));
      Assert.assertTrue(dbObject.get(""String_Node_Str"").equals(new BasicDBObject(""String_Node_Str"",-1)));
      count++;
    }
 else {
      Assert.assertEquals(new Integer(-100),dbObject.get(""String_Node_Str""));
      Assert.assertEquals(new Integer(500),dbObject.get(""String_Node_Str""));
      Assert.assertTrue(dbObject.get(""String_Node_Str"").equals(new BasicDBObject(""String_Node_Str"",""String_Node_Str"")));
      count++;
    }
  }
  Assert.assertEquals(4,count);
}",0.9257381449448256
176671,"/** 
 * Fetches(and converts)   {@link Node} instance from Entity object If it's aupdate operation, node is searched and attributes populated Otherwise Node is created into database (replacing any existing node) with attributes populated
 */
public Node getNodeFromEntity(Object entity,GraphDatabaseService graphDb,EntityMetadata m,boolean isUpdate){
  Node node=null;
  Object key=PropertyAccessorHelper.getId(entity,m);
  if (!isUpdate) {
    node=getOrCreateNodeWithUniqueFactory(entity,key,m,graphDb);
  }
 else {
    node=searchNode(key,m,graphDb,true);
  }
  if (node != null) {
    populateNodeProperties(entity,m,node);
  }
  return node;
}","/** 
 * Fetches(and converts)   {@link Node} instance from Entity object If it's aupdate operation, node is searched and attributes populated Otherwise Node is created into database (replacing any existing node) with attributes populated
 * @param id TODO
 */
public Node getNodeFromEntity(Object entity,Object key,GraphDatabaseService graphDb,EntityMetadata m,boolean isUpdate){
  Node node=null;
  if (!isUpdate) {
    node=getOrCreateNodeWithUniqueFactory(entity,key,m,graphDb);
  }
 else {
    node=searchNode(key,m,graphDb,true);
  }
  if (node != null) {
    populateNodeProperties(entity,m,node);
  }
  return node;
}",0.9355345911949684
176672,"/** 
 * Converts a given field value to an object that is Neo4J compatible
 * @param source
 * @return
 */
public Object toNeo4JProperty(Object source){
  Class<?> sourceClass=source.getClass();
  if (source instanceof BigDecimal || source instanceof BigInteger) {
    return source.toString();
  }
 else   if ((source instanceof Calendar) || (source instanceof GregorianCalendar)) {
    return PropertyAccessorHelper.fromSourceToTargetClass(String.class,Date.class,((Calendar)source).getTime());
  }
  if (source instanceof Date) {
    return PropertyAccessorHelper.fromSourceToTargetClass(String.class,sourceClass,source);
  }
  return source;
}","/** 
 * Converts a given field value to an object that is Neo4J compatible
 * @param source
 * @return
 */
public Object toNeo4JProperty(Object source){
  if (source instanceof BigDecimal || source instanceof BigInteger) {
    return source.toString();
  }
 else   if ((source instanceof Calendar) || (source instanceof GregorianCalendar)) {
    return PropertyAccessorHelper.fromSourceToTargetClass(String.class,Date.class,((Calendar)source).getTime());
  }
  if (source instanceof Date) {
    Class<?> sourceClass=source.getClass();
    return PropertyAccessorHelper.fromSourceToTargetClass(String.class,sourceClass,source);
  }
  return source;
}",0.4367283950617284
176673,"/** 
 * Writes an entity to database
 */
@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + entity);
  checkActiveTransaction();
  GraphDatabaseService graphDb=getConnection();
  try {
    Node node=mapper.getNodeFromEntity(entity,graphDb,entityMetadata,isUpdate);
    if (node != null) {
      ((Neo4JTransaction)resource).addProcessedNode(id,node);
      if (!rlHolders.isEmpty()) {
        for (        RelationHolder rh : rlHolders) {
          EntityMetadata targetNodeMetadata=KunderaMetadataManager.getEntityMetadata(rh.getRelationValue().getClass());
          Object targetNodeKey=PropertyAccessorHelper.getId(rh.getRelationValue(),targetNodeMetadata);
          Node targetNode=null;
          if (isEntityForNeo4J(targetNodeMetadata)) {
            targetNode=((Neo4JTransaction)resource).getProcessedNode(targetNodeKey);
          }
 else {
            if (!isUpdate) {
              targetNode=mapper.createProxyNode(id,targetNodeKey,graphDb,entityMetadata,targetNodeMetadata);
            }
          }
          if (targetNode != null) {
            DynamicRelationshipType relType=DynamicRelationshipType.withName(rh.getRelationName());
            Relationship relationship=node.createRelationshipTo(targetNode,relType);
            Object relationshipObj=rh.getRelationVia();
            if (relationshipObj != null) {
              mapper.populateRelationshipProperties(entityMetadata,targetNodeMetadata,relationship,relationshipObj);
              EntityMetadata relationMetadata=KunderaMetadataManager.getEntityMetadata(relationshipObj.getClass());
              if (!isUpdate) {
                indexer.indexRelationship(relationMetadata,graphDb,relationship);
              }
 else {
                indexer.updateRelationshipIndex(relationMetadata,graphDb,relationship);
              }
            }
          }
        }
      }
      if (!isUpdate) {
        indexer.indexNode(entityMetadata,graphDb,node);
      }
 else {
        indexer.updateNodeIndex(entityMetadata,graphDb,node);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + entity + ""String_Node_Str""+ e.getMessage());
    throw new PersistenceException(e);
  }
}","/** 
 * Writes an entity to database
 */
@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + entity);
  checkActiveTransaction();
  GraphDatabaseService graphDb=getConnection();
  try {
    Node node=mapper.getNodeFromEntity(entity,id,graphDb,entityMetadata,isUpdate);
    if (node != null) {
      ((Neo4JTransaction)resource).addProcessedNode(id,node);
      if (!rlHolders.isEmpty()) {
        for (        RelationHolder rh : rlHolders) {
          EntityMetadata targetNodeMetadata=KunderaMetadataManager.getEntityMetadata(rh.getRelationValue().getClass());
          Object targetNodeKey=PropertyAccessorHelper.getId(rh.getRelationValue(),targetNodeMetadata);
          Node targetNode=null;
          if (isEntityForNeo4J(targetNodeMetadata)) {
            targetNode=((Neo4JTransaction)resource).getProcessedNode(targetNodeKey);
          }
 else {
            if (!isUpdate) {
              targetNode=mapper.createProxyNode(id,targetNodeKey,graphDb,entityMetadata,targetNodeMetadata);
            }
          }
          if (targetNode != null) {
            DynamicRelationshipType relType=DynamicRelationshipType.withName(rh.getRelationName());
            Relationship relationship=node.createRelationshipTo(targetNode,relType);
            Object relationshipObj=rh.getRelationVia();
            if (relationshipObj != null) {
              mapper.populateRelationshipProperties(entityMetadata,targetNodeMetadata,relationship,relationshipObj);
              EntityMetadata relationMetadata=KunderaMetadataManager.getEntityMetadata(relationshipObj.getClass());
              if (!isUpdate) {
                indexer.indexRelationship(relationMetadata,graphDb,relationship);
              }
 else {
                indexer.updateRelationshipIndex(relationMetadata,graphDb,relationship);
              }
            }
          }
        }
      }
      if (!isUpdate) {
        indexer.indexNode(entityMetadata,graphDb,node);
      }
 else {
        indexer.updateNodeIndex(entityMetadata,graphDb,node);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + entity + ""String_Node_Str""+ e.getMessage());
    throw new PersistenceException(e);
  }
}",0.999350789872322
176674,"public List<Object> executeLuceneQuery(EntityMetadata m,String luceneQuery){
  log.info(""String_Node_Str"" + luceneQuery);
  GraphDatabaseService graphDb=getConnection();
  List<Object> entities=new ArrayList<Object>();
  if (!indexer.isNodeAutoIndexingEnabled(graphDb) && m.isIndexable()) {
    Index<Node> nodeIndex=graphDb.index().forNodes(m.getIndexName());
    IndexHits<Node> hits=nodeIndex.query(luceneQuery);
    for (    Node node : hits) {
      if (node != null) {
        entities.add(getEntityWithAssociationFromNode(m,node));
      }
    }
  }
 else {
    IndexHits<Node> hits;
    ReadableIndex<Node> autoNodeIndex=graphDb.index().getNodeAutoIndexer().getAutoIndex();
    hits=autoNodeIndex.query(luceneQuery);
    for (    Node node : hits) {
      entities.add(getEntityWithAssociationFromNode(m,node));
    }
  }
  return entities;
}","public List<Object> executeLuceneQuery(EntityMetadata m,String luceneQuery){
  log.info(""String_Node_Str"" + luceneQuery);
  GraphDatabaseService graphDb=getConnection();
  List<Object> entities=new ArrayList<Object>();
  if (!indexer.isNodeAutoIndexingEnabled(graphDb) && m.isIndexable()) {
    Index<Node> nodeIndex=graphDb.index().forNodes(m.getIndexName());
    IndexHits<Node> hits=nodeIndex.query(luceneQuery);
    addEntityFromIndexHits(m,entities,hits);
  }
 else {
    ReadableIndex<Node> autoNodeIndex=graphDb.index().getNodeAutoIndexer().getAutoIndex();
    IndexHits<Node> hits=autoNodeIndex.query(luceneQuery);
    addEntityFromIndexHits(m,entities,hits);
  }
  return entities;
}",0.5810635538261998
176675,"/** 
 * @param m
 * @param entities
 * @param node
 */
private Object getEntityWithAssociationFromNode(EntityMetadata m,Node node){
  Map<String,Object> relationMap=new HashMap<String,Object>();
  Map<Long,Object> nodeIdToEntityMap=new HashMap<Long,Object>();
  Object entity=mapper.getEntityFromNode(node,m);
  nodeIdToEntityMap.put(node.getId(),entity);
  populateRelations(m,entity,relationMap,node,nodeIdToEntityMap);
  nodeIdToEntityMap.clear();
  if (!relationMap.isEmpty()) {
    return new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relationMap);
  }
 else {
    return entity;
  }
}","/** 
 * @param m
 * @param entities
 * @param node
 */
private Object getEntityWithAssociationFromNode(EntityMetadata m,Node node){
  Map<String,Object> relationMap=new HashMap<String,Object>();
  Map<Long,Object> nodeIdToEntityMap=new HashMap<Long,Object>();
  Object entity=mapper.getEntityFromNode(node,m);
  nodeIdToEntityMap.put(node.getId(),entity);
  populateRelations(m,entity,relationMap,node,nodeIdToEntityMap);
  nodeIdToEntityMap.clear();
  if (!relationMap.isEmpty() && entity != null) {
    return new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relationMap);
  }
 else {
    return entity;
  }
}",0.985413290113452
176676,"@Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<Object> entities=new ArrayList<Object>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  if (appMetadata.isNative(getJPAQuery())) {
    String nativeQuery=appMetadata.getQuery(getJPAQuery());
    Neo4JNativeQuery nativeQueryImpl=Neo4JNativeQueryFactory.getNativeQueryImplementation(queryType);
    entities=nativeQueryImpl.executeNativeQuery(nativeQuery,(Neo4JClient)client,m);
  }
 else {
    String luceneQuery=getLuceneQuery(kunderaQuery);
    entities=((Neo4JClient)client).executeLuceneQuery(m,luceneQuery);
  }
  return entities;
}","@Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<Object> entities=new ArrayList<Object>();
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  if (appMetadata.isNative(getJPAQuery())) {
    String nativeQuery=appMetadata.getQuery(getJPAQuery());
    Neo4JNativeQuery nativeQueryImpl=Neo4JNativeQueryFactory.getNativeQueryImplementation(queryType);
    entities=nativeQueryImpl.executeNativeQuery(nativeQuery,(Neo4JClient)client,m);
  }
 else {
    String luceneQuery=getLuceneQuery(kunderaQuery);
    entities=((Neo4JClient)client).executeLuceneQuery(m,luceneQuery);
  }
  return setRelationEntities(entities,client,m);
}",0.9668109668109668
176677,"@Override protected EntityReader getReader(){
  return null;
}","@Override protected EntityReader getReader(){
  if (reader == null) {
    reader=new Neo4JEntityReader();
  }
  return reader;
}",0.6105263157894737
176678,"/** 
 * Test method for  {@link com.impetus.client.neo4j.GraphEntityMapper#getNodeFromEntity(java.lang.Object,org.neo4j.graphdb.GraphDatabaseService,com.impetus.kundera.metadata.model.EntityMetadata,boolean)}.
 */
@Test public void testGetNodeFromEntity(){
  Actor actor=new Actor();
  actor.setId(1);
  actor.setName(""String_Node_Str"");
  Transaction tx=graphDb.beginTx();
  Node node=mapper.getNodeFromEntity(actor,graphDb,KunderaMetadataManager.getEntityMetadata(Actor.class),false);
  Assert.assertNotNull(node);
  Assert.assertEquals(1,node.getProperty(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",node.getProperty(""String_Node_Str""));
  node.delete();
  tx.success();
  tx.finish();
}","/** 
 * Test method for  {@link com.impetus.client.neo4j.GraphEntityMapper#getNodeFromEntity(java.lang.Object,Object,org.neo4j.graphdb.GraphDatabaseService,com.impetus.kundera.metadata.model.EntityMetadata,boolean)}.
 */
@Test public void testGetNodeFromEntity(){
  Actor actor=new Actor();
  actor.setId(1);
  actor.setName(""String_Node_Str"");
  Transaction tx=graphDb.beginTx();
  Node node=mapper.getNodeFromEntity(actor,1,graphDb,KunderaMetadataManager.getEntityMetadata(Actor.class),false);
  Assert.assertNotNull(node);
  Assert.assertEquals(1,node.getProperty(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",node.getProperty(""String_Node_Str""));
  node.delete();
  tx.success();
  tx.finish();
}",0.9936664320900774
176679,"/** 
 * Appends value to builder object for given class type
 * @param builder string builder.
 * @param fieldClazz field class.
 * @param value value to be appended.
 * @param isPresent if field is present.
 * @return true, if value is not null else false.
 */
public boolean appendValue(StringBuilder builder,Class fieldClazz,Object value,boolean isPresent){
  if (value != null) {
    isPresent=true;
    if (fieldClazz.isAssignableFrom(String.class) || isDate(fieldClazz) || fieldClazz.isAssignableFrom(char.class)|| fieldClazz.isAssignableFrom(Character.class)|| fieldClazz.isAssignableFrom(boolean.class)|| fieldClazz.isAssignableFrom(Boolean.class)) {
      builder.append(""String_Node_Str"");
      if (isDate(fieldClazz)) {
        builder.append(PropertyAccessorFactory.getPropertyAccessor(fieldClazz).toString(value));
      }
 else {
        builder.append(value);
      }
      builder.append(""String_Node_Str"");
    }
 else {
      builder.append(value);
    }
  }
  return isPresent;
}","/** 
 * Appends value to builder object for given class type
 * @param builder string builder.
 * @param fieldClazz field class.
 * @param value value to be appended.
 * @param isPresent if field is present.
 * @return true, if value is not null else false.
 */
public boolean appendValue(StringBuilder builder,Class fieldClazz,Object value,boolean isPresent){
  if (value != null) {
    isPresent=true;
    if (fieldClazz.isAssignableFrom(String.class) || isDate(fieldClazz) || fieldClazz.isAssignableFrom(char.class)|| fieldClazz.isAssignableFrom(Character.class)) {
      builder.append(""String_Node_Str"");
      if (isDate(fieldClazz)) {
        builder.append(PropertyAccessorFactory.getPropertyAccessor(fieldClazz).toString(value));
      }
 else {
        builder.append(value);
      }
      builder.append(""String_Node_Str"");
    }
 else {
      builder.append(value);
    }
  }
  return isPresent;
}",0.9528301886792452
176680,"/** 
 * CRUD over Compound primary Key.
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
@Test public void onCRUD() throws InstantiationException, IllegalAccessException {
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CompoundKeyDataType key=prepareData(new Long(12345677),78575785897L,""String_Node_Str"",false,10,'A',(byte)5,(short)8,(float)69.3,163.76765654,enrolmentDate,enrolmentTime,joiningDateAndTime,new Integer(3),new Long(978423946455l),135434.89,newSqlDate,sqlTime,sqlTimestamp,bigDecimal,bigInteger,calendar,CompoundKeyDataType.class.newInstance());
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  PrimeUserDataType user=new PrimeUserDataType(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  em.persist(user);
  em.clear();
  PrimeUserDataType result=em.find(PrimeUserDataType.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.clear();
  user.setTweetBody(""String_Node_Str"");
  em.merge(user);
  em.clear();
  result=em.find(PrimeUserDataType.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.remove(result);
  em.clear();
  result=em.find(PrimeUserDataType.class,key);
  Assert.assertNull(result);
}","/** 
 * CRUD over Compound primary Key.
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
@Test public void onCRUD() throws InstantiationException, IllegalAccessException {
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CompoundKeyDataType key=prepareData(new Long(12345677),78575785897L,""String_Node_Str"",false,10,'A',(byte)5,(short)8,(float)69.3,163.76765654,enrolmentDate,enrolmentTime,joiningDateAndTime,new Integer(3),new Long(978423946455l),135434.89,newSqlDate,sqlTime,sqlTimestamp,bigDecimal,bigInteger,calendar,CompoundKeyDataType.class.newInstance());
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  PrimeUserDataType user=new PrimeUserDataType(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  user.setIsActive(true);
  em.persist(user);
  em.clear();
  PrimeUserDataType result=em.find(PrimeUserDataType.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  Assert.assertTrue(result.getIsActive());
  em.clear();
  user.setTweetBody(""String_Node_Str"");
  em.merge(user);
  em.clear();
  result=em.find(PrimeUserDataType.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.remove(result);
  em.clear();
  result=em.find(PrimeUserDataType.class,key);
  Assert.assertNull(result);
}",0.9795434331455678
176681,"/** 
 * Returns associated bi-directional field.
 * @param originalClazz Original class
 * @param referencedClass Referenced class.
 */
public Field getBiDirectionalField(Class originalClazz,Class referencedClass){
  Field[] fields=referencedClass.getDeclaredFields();
  Class<?> clazzz=null;
  Field biDirectionalField=null;
  for (  Field field : fields) {
    clazzz=field.getType();
    if (PropertyAccessorHelper.isCollection(clazzz)) {
      ParameterizedType type=(ParameterizedType)field.getGenericType();
      Type[] types=type.getActualTypeArguments();
      clazzz=(Class<?>)types[0];
    }
    if (clazzz.equals(originalClazz)) {
      biDirectionalField=field;
      break;
    }
  }
  return biDirectionalField;
}","/** 
 * Returns associated bi-directional field.
 * @param originalClazz Original class
 * @param referencedClass Referenced class.
 */
public Field getBiDirectionalField(Class originalClazz,Class referencedClass){
  Field[] fields=referencedClass.getDeclaredFields();
  Class<?> clazzz=null;
  Field biDirectionalField=null;
  for (  Field field : fields) {
    clazzz=field.getType();
    if (PropertyAccessorHelper.isCollection(clazzz)) {
      ParameterizedType type=(ParameterizedType)field.getGenericType();
      Type[] types=type.getActualTypeArguments();
      clazzz=(Class<?>)types[0];
    }
 else     if (Map.class.isAssignableFrom(clazzz)) {
      ParameterizedType type=(ParameterizedType)field.getGenericType();
      Type[] types=type.getActualTypeArguments();
      clazzz=(Class<?>)types[1];
    }
    if (clazzz.equals(originalClazz)) {
      biDirectionalField=field;
      break;
    }
  }
  return biDirectionalField;
}",0.8723786698621929
176682,"/** 
 * Fetches(and converts)   {@link Node} instance from Entity object
 */
public Node fromEntity(Object entity,List<RelationHolder> relations,GraphDatabaseService graphDb,EntityMetadata m,boolean isUpdate){
  Node node=null;
  if (!isUpdate) {
    node=getOrCreateNodeWithUniqueFactory(entity,m,graphDb);
  }
 else {
    Object key=PropertyAccessorHelper.getId(entity,m);
    node=searchNode(key,m,graphDb);
  }
  if (node != null) {
    populateNodeProperties(entity,m,node);
  }
  return node;
}","/** 
 * Fetches(and converts)   {@link Node} instance from Entity object
 */
public Node fromEntity(Object entity,List<RelationHolder> relations,GraphDatabaseService graphDb,EntityMetadata m,boolean isUpdate){
  Node node=null;
  if (!isUpdate) {
    node=getOrCreateNodeWithUniqueFactory(entity,m,graphDb);
  }
 else {
    Object key=PropertyAccessorHelper.getId(entity,m);
    node=searchNode(key,m,graphDb,true);
  }
  if (node != null) {
    populateNodeProperties(entity,m,node);
  }
  return node;
}",0.9950248756218906
176683,"/** 
 * Searches a node from the database for a given key
 */
public Node searchNode(Object key,EntityMetadata m,GraphDatabaseService graphDb){
  Node node=null;
  String idColumnName=((AbstractAttribute)m.getIdAttribute()).getJPAColumnName();
  final MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
    key=serializeIdAttributeValue(m,key);
  }
  if (indexer.isNodeAutoIndexingEnabled(graphDb)) {
    ReadableIndex<Node> autoNodeIndex=graphDb.index().getNodeAutoIndexer().getAutoIndex();
    IndexHits<Node> nodesFound=autoNodeIndex.get(idColumnName,key);
    if (nodesFound == null || nodesFound.size() == 0 || !nodesFound.hasNext()) {
      return null;
    }
 else {
      node=nodesFound.next();
    }
    nodesFound.close();
  }
 else {
    Index<Node> nodeIndex=graphDb.index().forNodes(m.getIndexName());
    IndexHits<Node> hits=nodeIndex.get(idColumnName,key);
    if (hits == null || hits.size() == 0 || !hits.hasNext()) {
      return null;
    }
 else {
      node=hits.next();
    }
    hits.close();
  }
  return node;
}","/** 
 * Searches a node from the database for a given key
 */
public Node searchNode(Object key,EntityMetadata m,GraphDatabaseService graphDb,boolean skipProxy){
  Node node=null;
  String idColumnName=((AbstractAttribute)m.getIdAttribute()).getJPAColumnName();
  final MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
    key=serializeIdAttributeValue(m,key);
  }
  if (indexer.isNodeAutoIndexingEnabled(graphDb)) {
    ReadableIndex<Node> autoNodeIndex=graphDb.index().getNodeAutoIndexer().getAutoIndex();
    IndexHits<Node> nodesFound=autoNodeIndex.get(idColumnName,key);
    if (nodesFound == null || nodesFound.size() == 0 || !nodesFound.hasNext()) {
      return null;
    }
 else {
      if (skipProxy)       node=getNonProxyNode(nodesFound);
 else       node=nodesFound.next();
    }
    nodesFound.close();
  }
 else {
    Index<Node> nodeIndex=graphDb.index().forNodes(m.getIndexName());
    IndexHits<Node> hits=nodeIndex.get(idColumnName,key);
    if (hits == null || hits.size() == 0 || !hits.hasNext()) {
      return null;
    }
 else {
      if (skipProxy)       node=getNonProxyNode(hits);
 else       node=hits.next();
    }
    hits.close();
  }
  return node;
}",0.9421094369547978
176684,"@Override public void flush(){
  if (isDirty()) {
    getCurrentNodeState().handleFlush(this);
    this.isProcessed=true;
  }
}","@Override public void flush(){
  if (isDirty()) {
    getCurrentNodeState().handleFlush(this);
    Map<NodeLink,Node> parents=this.getParents();
    Map<NodeLink,Node> children=this.getChildren();
    if (parents != null && !parents.isEmpty()) {
      for (      NodeLink parentNodeLink : parents.keySet()) {
        if (!parentNodeLink.getMultiplicity().equals(ForeignKey.MANY_TO_MANY))         parentNodeLink.addLinkProperty(LinkProperty.LINK_VALUE,this.getEntityId());
      }
    }
    if (children != null && !children.isEmpty()) {
      for (      NodeLink childNodeLink : children.keySet()) {
        if (!childNodeLink.getMultiplicity().equals(ForeignKey.MANY_TO_MANY))         childNodeLink.addLinkProperty(LinkProperty.LINK_VALUE,this.getEntityId());
      }
    }
    this.isProcessed=true;
  }
}",0.2334047109207709
176685,"/** 
 * Flushes Dirty objects in   {@link PersistenceCache} to databases.
 */
private void flush(){
  Deque<Node> fs=flushManager.getFlushStack();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + fs);
  }
  if (fs != null) {
    boolean isBatch=false;
    while (!fs.isEmpty()) {
      Node node=fs.pop();
      if (node.isInState(ManagedState.class) || node.isInState(RemovedState.class)) {
        EntityMetadata metadata=getMetadata(node.getDataClass());
        node.setClient(getClient(metadata));
        if ((node.getClient() instanceof Batcher) && ((Batcher)(node.getClient())).getBatchSize() > 0) {
          isBatch=true;
          ((Batcher)(node.getClient())).addBatch(node);
        }
 else         if (flushMode.equals(FlushModeType.AUTO) || enableFlush) {
          if (isTransactionInProgress && MetadataUtils.defaultTransactionSupported(metadata.getPersistenceUnit())) {
            onSynchronization(node,metadata);
          }
 else {
            node.flush();
          }
        }
        Map<NodeLink,Node> parents=node.getParents();
        Map<NodeLink,Node> children=node.getChildren();
        if (parents != null && !parents.isEmpty()) {
          for (          NodeLink parentNodeLink : parents.keySet()) {
            if (!parentNodeLink.getMultiplicity().equals(ForeignKey.MANY_TO_MANY))             parentNodeLink.addLinkProperty(LinkProperty.LINK_VALUE,node.getEntityId());
          }
        }
        if (children != null && !children.isEmpty()) {
          for (          NodeLink childNodeLink : children.keySet()) {
            if (!childNodeLink.getMultiplicity().equals(ForeignKey.MANY_TO_MANY))             childNodeLink.addLinkProperty(LinkProperty.LINK_VALUE,node.getEntityId());
          }
        }
      }
    }
    if (!isBatch) {
      flushJoinTableData();
    }
  }
}","/** 
 * Flushes Dirty objects in   {@link PersistenceCache} to databases.
 */
private void flush(){
  Deque<Node> fs=flushManager.getFlushStack();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + fs);
  }
  if (fs != null) {
    boolean isBatch=false;
    while (!fs.isEmpty()) {
      Node node=fs.pop();
      if (node.isInState(ManagedState.class) || node.isInState(RemovedState.class)) {
        EntityMetadata metadata=getMetadata(node.getDataClass());
        node.setClient(getClient(metadata));
        if ((node.getClient() instanceof Batcher) && ((Batcher)(node.getClient())).getBatchSize() > 0) {
          isBatch=true;
          ((Batcher)(node.getClient())).addBatch(node);
        }
 else         if (flushMode.equals(FlushModeType.AUTO) || enableFlush) {
          if (isTransactionInProgress && MetadataUtils.defaultTransactionSupported(metadata.getPersistenceUnit())) {
            onSynchronization(node,metadata);
          }
 else {
            node.flush();
          }
        }
      }
    }
    if (!isBatch) {
      flushJoinTableData();
    }
  }
}",0.7099863201094391
176686,"/** 
 * On condition.
 * @param m the m
 * @param metaModel the meta model
 * @param compoundKey the compound key
 * @param idColumn the id column
 * @param builder the builder
 * @param isPresent the is present
 * @param translator the translator
 * @return true, if successful
 */
private boolean onCondition(EntityMetadata m,MetamodelImpl metaModel,EmbeddableType compoundKey,String idColumn,StringBuilder builder,boolean isPresent,CQLTranslator translator){
  String partitionKey=null;
  boolean allowFiltering=false;
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      String fieldName=clause.getProperty();
      String condition=clause.getCondition();
      Object value=clause.getValue();
      isPresent=true;
      if (idColumn.equals(fieldName)) {
        Field[] fields=m.getIdAttribute().getBindableJavaType().getDeclaredFields();
        for (        Field field : fields) {
          Attribute compositeColumn=compoundKey.getAttribute(field.getName());
          translator.buildWhereClause(builder,((AbstractAttribute)compositeColumn).getJPAColumnName(),field,value);
          if (partitionKey == null) {
            partitionKey=compositeColumn.getName();
          }
          if (!allowFiltering) {
            allowFiltering=fieldName.equals(partitionKey);
          }
        }
      }
 else       if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType()) && StringUtils.contains(fieldName,'.')) {
        fieldName=fieldName.substring(fieldName.indexOf(""String_Node_Str"") + 1);
        ((AbstractAttribute)compoundKey.getAttribute(fieldName)).getJPAColumnName();
        translator.buildWhereClause(builder,((AbstractAttribute)compoundKey.getAttribute(fieldName)).getJPAColumnName(),value,condition);
        if (partitionKey == null) {
          partitionKey=compoundKey.getAttribute(fieldName).getName();
        }
        if (!allowFiltering) {
          allowFiltering=fieldName.equals(partitionKey);
        }
      }
 else {
        Field[] fields=m.getIdAttribute().getBindableJavaType().getDeclaredFields();
        Attribute compositeColumn=compoundKey.getAttribute(fields[0].getName());
        if (partitionKey == null) {
          partitionKey=compositeColumn.getName();
        }
        if (!allowFiltering) {
          allowFiltering=fieldName.equals(partitionKey);
        }
        translator.buildWhereClause(builder,fieldName,value,condition);
      }
    }
  }
  if (isPresent) {
    builder.delete(builder.lastIndexOf(CQLTranslator.AND_CLAUSE),builder.length());
  }
  if (allowFiltering) {
    translator.buildFilteringClause(builder);
  }
  return isPresent;
}","/** 
 * On condition.
 * @param m the m
 * @param metaModel the meta model
 * @param compoundKey the compound key
 * @param idColumn the id column
 * @param builder the builder
 * @param isPresent the is present
 * @param translator the translator
 * @return true, if successful
 */
private boolean onCondition(EntityMetadata m,MetamodelImpl metaModel,EmbeddableType compoundKey,String idColumn,StringBuilder builder,boolean isPresent,CQLTranslator translator){
  String partitionKey=null;
  boolean allowFiltering=false;
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      String fieldName=clause.getProperty();
      String condition=clause.getCondition();
      Object value=clause.getValue();
      isPresent=true;
      if (idColumn.equals(fieldName)) {
        Field[] fields=m.getIdAttribute().getBindableJavaType().getDeclaredFields();
        for (        Field field : fields) {
          Attribute compositeColumn=compoundKey.getAttribute(field.getName());
          translator.buildWhereClause(builder,((AbstractAttribute)compositeColumn).getJPAColumnName(),field,value);
          if (partitionKey == null) {
            partitionKey=compositeColumn.getName();
          }
          if (!allowFiltering) {
            allowFiltering=fieldName.equals(partitionKey);
          }
        }
      }
 else       if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType()) && StringUtils.contains(fieldName,'.')) {
        fieldName=fieldName.substring(fieldName.indexOf(""String_Node_Str"") + 1);
        ((AbstractAttribute)compoundKey.getAttribute(fieldName)).getJPAColumnName();
        translator.buildWhereClause(builder,((AbstractAttribute)compoundKey.getAttribute(fieldName)).getJPAColumnName(),value,condition);
        if (partitionKey == null) {
          partitionKey=compoundKey.getAttribute(fieldName).getName();
        }
        if (!allowFiltering) {
          allowFiltering=fieldName.equals(partitionKey);
        }
      }
 else {
        Field[] fields=m.getIdAttribute().getBindableJavaType().getDeclaredFields();
        Attribute compositeColumn=compoundKey.getAttribute(fields[0].getName());
        if (partitionKey == null) {
          partitionKey=compositeColumn.getName();
        }
        if (!allowFiltering) {
          allowFiltering=fieldName.equals(partitionKey);
        }
        translator.buildWhereClause(builder,fieldName,value,condition);
      }
    }
  }
  if (isPresent) {
    builder.delete(builder.lastIndexOf(CQLTranslator.AND_CLAUSE),builder.length());
  }
  if (allowFiltering) {
    onLimit(builder);
    builder.append(""String_Node_Str"");
    translator.buildFilteringClause(builder);
  }
 else {
    onLimit(builder);
  }
  return isPresent;
}",0.9828178694158076
176687,"private void validateGeneratedValueAnnotation(final Class<?> clazz,Field field){
  Table table=clazz.getAnnotation(Table.class);
  String schemaName=table.schema();
  schemaName=schemaName.substring(0,schemaName.indexOf('@'));
  GeneratedValue generatedValue=field.getAnnotation(GeneratedValue.class);
  if (generatedValue != null && generatedValue.generator() != null && !generatedValue.generator().isEmpty()) {
    if (!(field.isAnnotationPresent(TableGenerator.class) || field.isAnnotationPresent(SequenceGenerator.class) || clazz.isAnnotationPresent(TableGenerator.class)|| clazz.isAnnotationPresent(SequenceGenerator.class))) {
      throw new IllegalArgumentException(""String_Node_Str"" + generatedValue.generator());
    }
 else {
      checkForGenerator(clazz,field,generatedValue,schemaName);
    }
  }
}","private void validateGeneratedValueAnnotation(final Class<?> clazz,Field field){
  Table table=clazz.getAnnotation(Table.class);
  String schemaName=table.schema();
  if (schemaName != null && schemaName.indexOf(""String_Node_Str"") > 0) {
    schemaName=schemaName.substring(0,schemaName.indexOf('@'));
    GeneratedValue generatedValue=field.getAnnotation(GeneratedValue.class);
    if (generatedValue != null && generatedValue.generator() != null && !generatedValue.generator().isEmpty()) {
      if (!(field.isAnnotationPresent(TableGenerator.class) || field.isAnnotationPresent(SequenceGenerator.class) || clazz.isAnnotationPresent(TableGenerator.class)|| clazz.isAnnotationPresent(SequenceGenerator.class))) {
        throw new IllegalArgumentException(""String_Node_Str"" + generatedValue.generator());
      }
 else {
        checkForGenerator(clazz,field,generatedValue,schemaName);
      }
    }
  }
}",0.9447353112274578
176688,"/** 
 * @param source
 * @return
 */
private static Object deepCopyUsingMetadata(Object source,Map<Object,Object> copiedObjectMap){
  Object target=null;
  try {
    if (source == null)     return null;
    Class<?> sourceObjectClass=source.getClass();
    EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(sourceObjectClass);
    if (metadata == null) {
      return source;
    }
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
    EntityType entityType=metaModel.entity(sourceObjectClass);
    Object id=null;
    if (metadata.getRelations() != null && !metadata.getRelations().isEmpty()) {
      id=PropertyAccessorHelper.getId(source,metadata);
      StringBuilder keyBuilder=new StringBuilder(sourceObjectClass.getName());
      keyBuilder.append(""String_Node_Str"");
      keyBuilder.append(id);
      Object copiedObjectInMap=copiedObjectMap.get(keyBuilder.toString());
      if (copiedObjectInMap != null) {
        return copiedObjectInMap;
      }
    }
    target=sourceObjectClass.newInstance();
    Iterator<Attribute> iter=entityType.getAttributes().iterator();
    while (iter.hasNext()) {
      Attribute attrib=iter.next();
      Field columnField=(Field)attrib.getJavaMember();
      if (attrib.getPersistentAttributeType().equals(PersistentAttributeType.EMBEDDED) || attrib.getPersistentAttributeType().equals(PersistentAttributeType.ELEMENT_COLLECTION)) {
        EmbeddableType embeddedColumn=metaModel.embeddable(((AbstractAttribute)attrib).getBindableJavaType());
        Object sourceEmbeddedObj=PropertyAccessorHelper.getObject(source,columnField);
        if (sourceEmbeddedObj != null) {
          if (columnField.getAnnotation(Embedded.class) != null) {
            Class<?> embeddedColumnClass=columnField.getType();
            Object targetEmbeddedObj=embeddedColumnClass.newInstance();
            Set<Attribute> columns=embeddedColumn.getAttributes();
            for (            Attribute column : columns) {
              PropertyAccessorHelper.set(targetEmbeddedObj,(Field)column.getJavaMember(),PropertyAccessorHelper.getObjectCopy(sourceEmbeddedObj,(Field)column.getJavaMember()));
            }
            PropertyAccessorHelper.set(target,columnField,targetEmbeddedObj);
          }
 else           if (columnField.getAnnotation(ElementCollection.class) != null) {
            if (sourceEmbeddedObj instanceof Collection) {
              Class<?> ecDeclaredClass=columnField.getType();
              Class<?> actualEcObjectClass=sourceEmbeddedObj.getClass();
              Class<?> genericClass=PropertyAccessorHelper.getGenericClass(columnField);
              Object targetCollectionObject=actualEcObjectClass.newInstance();
              for (              Object sourceEcObj : (Collection)sourceEmbeddedObj) {
                Object targetEcObj=genericClass.newInstance();
                for (                Field f : genericClass.getDeclaredFields()) {
                  PropertyAccessorHelper.set(targetEcObj,f,PropertyAccessorHelper.getObjectCopy(sourceEcObj,f));
                }
                if (List.class.isAssignableFrom(ecDeclaredClass)) {
                  Method m=actualEcObjectClass.getMethod(""String_Node_Str"",Object.class);
                  m.invoke(targetCollectionObject,targetEcObj);
                }
 else                 if (Set.class.isAssignableFrom(ecDeclaredClass)) {
                  Method m=actualEcObjectClass.getMethod(""String_Node_Str"",Object.class);
                  m.invoke(targetCollectionObject,targetEcObj);
                }
              }
              PropertyAccessorHelper.set(target,columnField,targetCollectionObject);
            }
          }
 else           if (columnField.getAnnotation(javax.persistence.Column.class) != null) {
            PropertyAccessorHelper.set(target,columnField,sourceEmbeddedObj);
          }
        }
      }
 else       if (attrib.getPersistentAttributeType().equals(PersistentAttributeType.BASIC)) {
        PropertyAccessorHelper.set(target,columnField,PropertyAccessorHelper.getObjectCopy(source,columnField));
      }
    }
    if (id != null) {
      StringBuilder keyBuilder=new StringBuilder(sourceObjectClass.getName());
      keyBuilder.append(""String_Node_Str"");
      keyBuilder.append(id);
      copiedObjectMap.put(keyBuilder.toString(),target);
    }
    for (    Relation relation : metadata.getRelations()) {
      Field relationField=relation.getProperty();
      Object sourceRelationObject=PropertyAccessorHelper.getObject(source,relationField);
      if (sourceRelationObject != null && !(sourceRelationObject instanceof AbstractPersistentCollection)) {
        if (sourceRelationObject instanceof KunderaProxy) {
          PropertyAccessorHelper.set(target,relationField,sourceRelationObject);
          continue;
        }
        Object targetRelationObject=null;
        Class<?> relationObjectClass=relation.getProperty().getType();
        Class<?> actualRelationObjectClass=sourceRelationObject.getClass();
        if (!Collection.class.isAssignableFrom(relationObjectClass)) {
          targetRelationObject=deepCopyUsingMetadata(sourceRelationObject,copiedObjectMap);
        }
 else {
          targetRelationObject=actualRelationObjectClass.newInstance();
          Method m=actualRelationObjectClass.getMethod(""String_Node_Str"",Object.class);
          for (          Object obj : (Collection)sourceRelationObject) {
            Object copyTargetRelObj=deepCopyUsingMetadata(obj,copiedObjectMap);
            m.invoke(targetRelationObject,copyTargetRelObj);
          }
        }
        PropertyAccessorHelper.set(target,relationField,targetRelationObject);
      }
    }
  }
 catch (  InstantiationException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
catch (  IllegalAccessException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
catch (  InvocationTargetException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
catch (  NoSuchMethodException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
  return target;
}","/** 
 * @param source
 * @return
 */
private static Object deepCopyUsingMetadata(Object source,Map<Object,Object> copiedObjectMap){
  Object target=null;
  try {
    if (source == null)     return null;
    Class<?> sourceObjectClass=source.getClass();
    EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(sourceObjectClass);
    if (metadata == null) {
      return source;
    }
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
    EntityType entityType=metaModel.entity(sourceObjectClass);
    Object id=null;
    if (metadata.getRelations() != null && !metadata.getRelations().isEmpty()) {
      id=PropertyAccessorHelper.getId(source,metadata);
      StringBuilder keyBuilder=new StringBuilder(sourceObjectClass.getName());
      keyBuilder.append(""String_Node_Str"");
      keyBuilder.append(id);
      Object copiedObjectInMap=copiedObjectMap.get(keyBuilder.toString());
      if (copiedObjectInMap != null) {
        return copiedObjectInMap;
      }
    }
    target=sourceObjectClass.newInstance();
    Iterator<Attribute> iter=entityType.getAttributes().iterator();
    while (iter.hasNext()) {
      Attribute attrib=iter.next();
      Field columnField=(Field)attrib.getJavaMember();
      if (attrib.getPersistentAttributeType().equals(PersistentAttributeType.EMBEDDED) || attrib.getPersistentAttributeType().equals(PersistentAttributeType.ELEMENT_COLLECTION)) {
        EmbeddableType embeddedColumn=metaModel.embeddable(((AbstractAttribute)attrib).getBindableJavaType());
        Object sourceEmbeddedObj=PropertyAccessorHelper.getObject(source,columnField);
        if (sourceEmbeddedObj != null) {
          if (columnField.getAnnotation(Embedded.class) != null) {
            Class<?> embeddedColumnClass=columnField.getType();
            Object targetEmbeddedObj=embeddedColumnClass.newInstance();
            Set<Attribute> columns=embeddedColumn.getAttributes();
            for (            Attribute column : columns) {
              PropertyAccessorHelper.set(targetEmbeddedObj,(Field)column.getJavaMember(),PropertyAccessorHelper.getObjectCopy(sourceEmbeddedObj,(Field)column.getJavaMember()));
            }
            PropertyAccessorHelper.set(target,columnField,targetEmbeddedObj);
          }
 else           if (columnField.getAnnotation(ElementCollection.class) != null) {
            if (sourceEmbeddedObj instanceof Collection) {
              Class<?> ecDeclaredClass=columnField.getType();
              Class<?> actualEcObjectClass=sourceEmbeddedObj.getClass();
              Class<?> genericClass=PropertyAccessorHelper.getGenericClass(columnField);
              Object targetCollectionObject=actualEcObjectClass.newInstance();
              for (              Object sourceEcObj : (Collection)sourceEmbeddedObj) {
                Object targetEcObj=genericClass.newInstance();
                for (                Field f : genericClass.getDeclaredFields()) {
                  PropertyAccessorHelper.set(targetEcObj,f,PropertyAccessorHelper.getObjectCopy(sourceEcObj,f));
                }
                if (List.class.isAssignableFrom(ecDeclaredClass)) {
                  Method m=actualEcObjectClass.getMethod(""String_Node_Str"",Object.class);
                  m.invoke(targetCollectionObject,targetEcObj);
                }
 else                 if (Set.class.isAssignableFrom(ecDeclaredClass)) {
                  Method m=actualEcObjectClass.getMethod(""String_Node_Str"",Object.class);
                  m.invoke(targetCollectionObject,targetEcObj);
                }
              }
              PropertyAccessorHelper.set(target,columnField,targetCollectionObject);
            }
          }
 else           if (columnField.getAnnotation(javax.persistence.Column.class) != null) {
            PropertyAccessorHelper.set(target,columnField,sourceEmbeddedObj);
          }
        }
      }
 else       if (attrib.getPersistentAttributeType().equals(PersistentAttributeType.BASIC)) {
        PropertyAccessorHelper.set(target,columnField,PropertyAccessorHelper.getObjectCopy(source,columnField));
      }
    }
    if (id != null) {
      StringBuilder keyBuilder=new StringBuilder(sourceObjectClass.getName());
      keyBuilder.append(""String_Node_Str"");
      keyBuilder.append(id);
      copiedObjectMap.put(keyBuilder.toString(),target);
    }
    for (    Relation relation : metadata.getRelations()) {
      Field relationField=relation.getProperty();
      Object sourceRelationObject=PropertyAccessorHelper.getObject(source,relationField);
      if (sourceRelationObject != null && !(sourceRelationObject instanceof AbstractPersistentCollection)) {
        if (sourceRelationObject instanceof KunderaProxy) {
          PropertyAccessorHelper.set(target,relationField,sourceRelationObject);
          continue;
        }
        Object targetRelationObject=null;
        Class<?> relationObjectClass=relation.getProperty().getType();
        Class<?> actualRelationObjectClass=sourceRelationObject.getClass();
        if (Collection.class.isAssignableFrom(relationObjectClass)) {
          targetRelationObject=actualRelationObjectClass.newInstance();
          Method m=actualRelationObjectClass.getMethod(""String_Node_Str"",Object.class);
          for (          Object obj : (Collection)sourceRelationObject) {
            Object copyTargetRelObj=deepCopyUsingMetadata(obj,copiedObjectMap);
            m.invoke(targetRelationObject,copyTargetRelObj);
          }
        }
 else         if (Map.class.isAssignableFrom(relationObjectClass)) {
          targetRelationObject=actualRelationObjectClass.newInstance();
          Method m=actualRelationObjectClass.getMethod(""String_Node_Str"",new Class<?>[]{Object.class,Object.class});
          for (          Object keyObj : ((Map)sourceRelationObject).keySet()) {
            Object valObj=((Map)sourceRelationObject).get(keyObj);
            Object copyTargetKeyObj=deepCopyUsingMetadata(keyObj,copiedObjectMap);
            Object copyTargetValueObj=deepCopyUsingMetadata(valObj,copiedObjectMap);
            m.invoke(targetRelationObject,new Object[]{copyTargetKeyObj,copyTargetValueObj});
          }
        }
 else {
          targetRelationObject=deepCopyUsingMetadata(sourceRelationObject,copiedObjectMap);
        }
        PropertyAccessorHelper.set(target,relationField,targetRelationObject);
      }
    }
  }
 catch (  InstantiationException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
catch (  IllegalAccessException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
catch (  InvocationTargetException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
catch (  NoSuchMethodException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
  return target;
}",0.9310213123519976
176689,"/** 
 * Fetches Non-proxy nodes from index hits
 */
private Node getNonProxyNode(IndexHits<Node> nodesFound){
  Node node=null;
  if (nodesFound.hasNext()) {
    node=nodesFound.next();
  }
 else {
    return null;
  }
  try {
    Object proxyNodeProperty=node.getProperty(PROXY_NODE_TYPE_KEY);
  }
 catch (  NotFoundException e) {
    return node;
  }
  return getNonProxyNode(nodesFound);
}","/** 
 * Fetches Non-proxy nodes from index hits
 */
private Node getNonProxyNode(IndexHits<Node> nodesFound){
  Node node=null;
  if (nodesFound.hasNext()) {
    node=nodesFound.next();
  }
 else {
    return null;
  }
  try {
    Object proxyNodeProperty=node.getProperty(PROXY_NODE_TYPE_KEY);
  }
 catch (  NotFoundException e) {
    return node;
  }
catch (  IllegalStateException e) {
    return node;
  }
  return getNonProxyNode(nodesFound);
}",0.8418549346016647
176690,"/** 
 * Populates a a relationship collection which is of type   {@link Map} from relationsMap into entity
 * @param entity
 * @param delegator
 * @param relation
 * @param relObject
 * @param relationsMap
 */
private void populateCollectionFromMap(Object entity,PersistenceDelegator delegator,Relation relation,Object relObject,Map<String,Object> relationsMap){
  EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
  Map<Object,Object> relationshipEntityMap=new HashMap<Object,Object>();
  if (relObject == null && relationsMap != null && !relationsMap.isEmpty()) {
    for (    String relationName : relationsMap.keySet()) {
      Object relationValue=relationsMap.get(relationName);
      if (relationValue instanceof Map) {
        Map<Object,Object> relationValueMap=(Map<Object,Object>)relationValue;
        Client targetEntityClient=delegator.getClient(childMetadata);
        for (        Object targetEntityKey : relationValueMap.keySet()) {
          Object targetEntity=targetEntityClient.find(childMetadata.getEntityClazz(),targetEntityKey);
          Object mapKeyEntity=relationValueMap.get(targetEntityKey);
          Class<?> relationshipClass=relation.getMapKeyJoinClass();
          for (          Field f : relationshipClass.getDeclaredFields()) {
            if (f.getType().equals(entity.getClass())) {
              PropertyAccessorHelper.set(mapKeyEntity,f,entity);
            }
 else             if (f.getType().equals(childMetadata.getEntityClazz())) {
              PropertyAccessorHelper.set(mapKeyEntity,f,targetEntity);
            }
          }
          relationshipEntityMap.put(mapKeyEntity,targetEntity);
        }
      }
    }
    relObject=relationshipEntityMap;
  }
  PropertyAccessorHelper.set(entity,relation.getProperty(),relObject);
  if (relObject != null) {
    for (    Object child : ((Map)relObject).values()) {
      Object childId=PropertyAccessorHelper.getId(child,childMetadata);
      PersistenceCacheManager.addEntityToPersistenceCache(child,delegator,childId);
    }
  }
}","/** 
 * Populates a a relationship collection which is of type   {@link Map} from relationsMap into entity
 * @param entity
 * @param delegator
 * @param relation
 * @param relObject
 * @param relationsMap
 */
private void populateCollectionFromMap(Object entity,PersistenceDelegator delegator,Relation relation,Object relObject,Map<String,Object> relationsMap){
  EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
  Map<Object,Object> relationshipEntityMap=new HashMap<Object,Object>();
  if (relObject == null && relationsMap != null && !relationsMap.isEmpty()) {
    for (    String relationName : relationsMap.keySet()) {
      Object relationValue=relationsMap.get(relationName);
      if (relationValue instanceof Map) {
        Map<Object,Object> relationValueMap=(Map<Object,Object>)relationValue;
        Client targetEntityClient=delegator.getClient(childMetadata);
        for (        Object targetEntityKey : relationValueMap.keySet()) {
          Object targetEntity=targetEntityClient.find(childMetadata.getEntityClazz(),targetEntityKey);
          Object mapKeyEntity=relationValueMap.get(targetEntityKey);
          Class<?> relationshipClass=relation.getMapKeyJoinClass();
          for (          Field f : relationshipClass.getDeclaredFields()) {
            if (f.getType().equals(entity.getClass())) {
              PropertyAccessorHelper.set(mapKeyEntity,f,entity);
            }
 else             if (f.getType().equals(childMetadata.getEntityClazz())) {
              PropertyAccessorHelper.set(mapKeyEntity,f,targetEntity);
            }
          }
          relationshipEntityMap.put(mapKeyEntity,targetEntity);
        }
      }
    }
    relObject=relationshipEntityMap;
  }
  PropertyAccessorHelper.set(entity,relation.getProperty(),relObject);
  if (relObject != null) {
    for (    Object child : ((Map)relObject).values()) {
      if (child != null) {
        Object childId=PropertyAccessorHelper.getId(child,childMetadata);
        PersistenceCacheManager.addEntityToPersistenceCache(child,delegator,childId);
      }
    }
  }
}",0.9906943450250536
176691,"/** 
 * Deletes an entity from database
 */
@Override public void delete(Object entity,Object key){
  checkActiveTransaction();
  GraphDatabaseService graphDb=getConnection();
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  Node node=mapper.searchNode(key,m,graphDb,false);
  if (node != null) {
    if (!((Neo4JTransaction)resource).containsNodeId(node.getId())) {
      node.delete();
      indexer.deleteNodeIndex(m,graphDb,node);
      for (      Relationship relationship : node.getRelationships()) {
        relationship.delete();
        indexer.deleteRelationshipIndex(m,graphDb,relationship);
      }
      ((Neo4JTransaction)resource).addNodeId(node.getId());
    }
  }
 else {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
  }
}","/** 
 * Deletes an entity from database
 */
@Override public void delete(Object entity,Object key){
  checkActiveTransaction();
  GraphDatabaseService graphDb=getConnection();
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  Node node=mapper.searchNode(key,m,graphDb,true);
  if (node != null) {
    if (!((Neo4JTransaction)resource).containsNodeId(node.getId())) {
      node.delete();
      indexer.deleteNodeIndex(m,graphDb,node);
      for (      Relationship relationship : node.getRelationships()) {
        relationship.delete();
        indexer.deleteRelationshipIndex(m,graphDb,relationship);
      }
      ((Neo4JTransaction)resource).addNodeId(node.getId());
    }
  }
 else {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
  }
}",0.995572422517394
176692,"/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  String persistenceUnit=null;
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
  try {
    for (    Node node : nodes) {
      if (node.isDirty()) {
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (node.isInState(RemovedState.class)) {
          delete(entity,id);
        }
 else         if (metaModel.isEmbeddable(metadata.getIdAttribute().getBindableJavaType())) {
          List<RelationHolder> relationHolders=getRelationHolders(node);
          onPersist(metadata,entity,id,relationHolders);
        }
 else {
          List<RelationHolder> relationHolders=getRelationHolders(node);
          mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
          indexNode(node,metadata);
        }
      }
    }
    if (!mutationMap.isEmpty()) {
      pooledConnection=getPooledConection(persistenceUnit);
      conn=getConnection(pooledConnection);
      conn.batch_mutate(mutationMap,consistencyLevel);
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
 finally {
    releaseConnection(pooledConnection);
  }
  return mutationMap.size();
}","/** 
 * Execute batch.
 * @return the int
 */
public int executeBatch(){
  String persistenceUnit=null;
  Cassandra.Client conn=null;
  Object pooledConnection=null;
  Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
  try {
    for (    Node node : nodes) {
      if (node.isDirty()) {
        Object entity=node.getData();
        Object id=node.getEntityId();
        EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
        persistenceUnit=metadata.getPersistenceUnit();
        isUpdate=node.isUpdate();
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
        if (node.isInState(RemovedState.class)) {
          delete(entity,id);
        }
 else         if (metaModel.isEmbeddable(metadata.getIdAttribute().getBindableJavaType())) {
          List<RelationHolder> relationHolders=getRelationHolders(node);
          onPersist(metadata,entity,id,relationHolders);
        }
 else {
          List<RelationHolder> relationHolders=getRelationHolders(node);
          mutationMap=prepareMutation(metadata,entity,id,relationHolders,mutationMap);
          indexNode(node,metadata);
        }
      }
    }
    if (!mutationMap.isEmpty()) {
      pooledConnection=getPooledConection(persistenceUnit);
      conn=getConnection(pooledConnection);
      conn.batch_mutate(mutationMap,consistencyLevel);
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e);
    throw new KunderaException(e);
  }
 finally {
    clear();
    releaseConnection(pooledConnection);
  }
  return mutationMap.size();
}",0.9968035406933858
176693,"/** 
 * Populates a a relationship collection which is of type   {@link Map} from relationsMap into entity
 * @param entity
 * @param delegator
 * @param relation
 * @param relObject
 * @param relationsMap
 */
private void populateCollectionFromMap(Object entity,PersistenceDelegator delegator,Relation relation,Object relObject,Map<String,Object> relationsMap){
  EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
  Map<Object,Object> relationshipEntityMap=new HashMap<Object,Object>();
  if (relObject == null && !relationsMap.isEmpty()) {
    for (    String relationName : relationsMap.keySet()) {
      Object relationValue=relationsMap.get(relationName);
      if (relationValue instanceof Map) {
        Map<Object,Object> relationValueMap=(Map<Object,Object>)relationValue;
        Client targetEntityClient=delegator.getClient(childMetadata);
        for (        Object targetEntityKey : relationValueMap.keySet()) {
          Object targetEntity=targetEntityClient.find(childMetadata.getEntityClazz(),targetEntityKey);
          Object mapKeyEntity=relationValueMap.get(targetEntityKey);
          Class<?> relationshipClass=relation.getMapKeyJoinClass();
          for (          Field f : relationshipClass.getDeclaredFields()) {
            if (f.getType().equals(entity.getClass())) {
              PropertyAccessorHelper.set(mapKeyEntity,f,entity);
            }
 else             if (f.getType().equals(childMetadata.getEntityClazz())) {
              PropertyAccessorHelper.set(mapKeyEntity,f,targetEntity);
            }
          }
          relationshipEntityMap.put(mapKeyEntity,targetEntity);
        }
      }
    }
    relObject=relationshipEntityMap;
  }
  PropertyAccessorHelper.set(entity,relation.getProperty(),relObject);
  if (relObject != null) {
    for (    Object child : ((Map)relObject).values()) {
      Object childId=PropertyAccessorHelper.getId(child,childMetadata);
      PersistenceCacheManager.addEntityToPersistenceCache(child,delegator,childId);
    }
  }
}","/** 
 * Populates a a relationship collection which is of type   {@link Map} from relationsMap into entity
 * @param entity
 * @param delegator
 * @param relation
 * @param relObject
 * @param relationsMap
 */
private void populateCollectionFromMap(Object entity,PersistenceDelegator delegator,Relation relation,Object relObject,Map<String,Object> relationsMap){
  EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(relation.getTargetEntity());
  Map<Object,Object> relationshipEntityMap=new HashMap<Object,Object>();
  if (relObject == null && relationsMap != null && !relationsMap.isEmpty()) {
    for (    String relationName : relationsMap.keySet()) {
      Object relationValue=relationsMap.get(relationName);
      if (relationValue instanceof Map) {
        Map<Object,Object> relationValueMap=(Map<Object,Object>)relationValue;
        Client targetEntityClient=delegator.getClient(childMetadata);
        for (        Object targetEntityKey : relationValueMap.keySet()) {
          Object targetEntity=targetEntityClient.find(childMetadata.getEntityClazz(),targetEntityKey);
          Object mapKeyEntity=relationValueMap.get(targetEntityKey);
          Class<?> relationshipClass=relation.getMapKeyJoinClass();
          for (          Field f : relationshipClass.getDeclaredFields()) {
            if (f.getType().equals(entity.getClass())) {
              PropertyAccessorHelper.set(mapKeyEntity,f,entity);
            }
 else             if (f.getType().equals(childMetadata.getEntityClazz())) {
              PropertyAccessorHelper.set(mapKeyEntity,f,targetEntity);
            }
          }
          relationshipEntityMap.put(mapKeyEntity,targetEntity);
        }
      }
    }
    relObject=relationshipEntityMap;
  }
  PropertyAccessorHelper.set(entity,relation.getProperty(),relObject);
  if (relObject != null) {
    for (    Object child : ((Map)relObject).values()) {
      Object childId=PropertyAccessorHelper.getId(child,childMetadata);
      PersistenceCacheManager.addEntityToPersistenceCache(child,delegator,childId);
    }
  }
}",0.994186046511628
176694,"/** 
 * Try operation.
 * @param ALL_PUs_UNDER_TEST
 */
protected void tryOperation(String[] ALL_PUs_UNDER_TEST){
  try {
    Metamodel metaModel=null;
    for (int i=0; i < ALL_PUs_UNDER_TEST.length; i++) {
      metaModel=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(ALL_PUs_UNDER_TEST[i]);
      for (int i1=0; i1 < ALL_PUs_UNDER_TEST.length; i1++) {
        if (i != i1) {
          Map<Class<?>,EntityType<?>> original=getManagedTypes((MetamodelImpl)metaModel);
          Metamodel m=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(ALL_PUs_UNDER_TEST[i1]);
          Map<Class<?>,EntityType<?>> copy=getManagedTypes((MetamodelImpl)m);
          if (original != null && copy != null) {
            original.putAll(copy);
          }
        }
      }
    }
    for (    Map<Class,String> c : combinations) {
      Set<String> allPus=new HashSet<String>(c.values());
      if (allPus.size() == 1) {
        continue;
      }
 else {
        String puForActor=c.get(Actor.class);
        String puForMovie=c.get(Movie.class);
        if (puForActor.equals(""String_Node_Str"") && puForMovie.equals(""String_Node_Str"")) {
          continue;
        }
      }
      switchPersistenceUnits(c);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(e);
    Assert.fail(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Try operation.
 * @param ALL_PUs_UNDER_TEST
 */
protected void tryOperation(String[] ALL_PUs_UNDER_TEST){
  try {
    Metamodel metaModel=null;
    for (int i=0; i < ALL_PUs_UNDER_TEST.length; i++) {
      metaModel=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(ALL_PUs_UNDER_TEST[i]);
      for (int i1=0; i1 < ALL_PUs_UNDER_TEST.length; i1++) {
        if (i != i1) {
          Map<Class<?>,EntityType<?>> original=getManagedTypes((MetamodelImpl)metaModel);
          Metamodel m=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(ALL_PUs_UNDER_TEST[i1]);
          Map<Class<?>,EntityType<?>> copy=getManagedTypes((MetamodelImpl)m);
          if (original != null && copy != null) {
            original.putAll(copy);
          }
        }
      }
    }
    for (    Map<Class,String> c : combinations) {
      Set<String> allPus=new HashSet<String>(c.values());
      if (allPus.size() == 1) {
        continue;
      }
 else {
        String puForActor=c.get(Actor.class);
        String puForMovie=c.get(Movie.class);
        if (puForActor.equals(""String_Node_Str"") && puForMovie.equals(""String_Node_Str"")) {
          continue;
        }
      }
      switchPersistenceUnits(c);
      insert();
      find();
      tearDownInternal(ALL_PUs_UNDER_TEST);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(e);
    Assert.fail(""String_Node_Str"" + e.getMessage());
  }
}",0.9735146743020758
176695,"protected void onpersistOverCompositeKey(EntityMetadata entityMetadata,Object entity,Cassandra.Client cassandra_client) throws InvalidRequestException, TException, UnavailableException, TimedOutException, SchemaDisagreementException, UnsupportedEncodingException {
  cassandra_client.set_cql_version(getCqlVersion());
  CQLTranslator translator=new CQLTranslator();
  String insert_Query=translator.INSERT_QUERY;
  insert_Query=StringUtils.replace(insert_Query,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),entityMetadata.getTableName()).toString());
  HashMap<TranslationType,String> translation=translator.prepareColumnOrColumnValues(entity,entityMetadata,TranslationType.ALL);
  insert_Query=StringUtils.replace(insert_Query,CQLTranslator.COLUMN_VALUES,translation.get(TranslationType.VALUE));
  insert_Query=StringUtils.replace(insert_Query,CQLTranslator.COLUMNS,translation.get(TranslationType.COLUMN));
  cassandra_client.execute_cql3_query(ByteBuffer.wrap(insert_Query.getBytes(Constants.CHARSET_UTF8)),Compression.NONE,consistencyLevel);
}","protected void onpersistOverCompositeKey(EntityMetadata entityMetadata,Object entity,Cassandra.Client cassandra_client,List<RelationHolder> rlHolders) throws InvalidRequestException, TException, UnavailableException, TimedOutException, SchemaDisagreementException, UnsupportedEncodingException {
  cassandra_client.set_cql_version(getCqlVersion());
  CQLTranslator translator=new CQLTranslator();
  String insert_Query=translator.INSERT_QUERY;
  insert_Query=StringUtils.replace(insert_Query,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),entityMetadata.getTableName()).toString());
  HashMap<TranslationType,String> translation=translator.prepareColumnOrColumnValues(entity,entityMetadata,TranslationType.ALL);
  String columnNames=translation.get(TranslationType.COLUMN);
  String columnValues=translation.get(TranslationType.VALUE);
  StringBuilder columnNameBuilder=new StringBuilder(columnNames);
  StringBuilder columnValueBuilder=new StringBuilder(columnValues);
  for (  RelationHolder rl : rlHolders) {
    columnNameBuilder.append(""String_Node_Str"");
    columnValueBuilder.append(""String_Node_Str"");
    translator.appendColumnName(columnNameBuilder,rl.getRelationName());
    translator.appendValue(columnValueBuilder,rl.getRelationValue().getClass(),rl.getRelationValue(),true);
  }
  translation.put(TranslationType.COLUMN,columnNameBuilder.toString());
  translation.put(TranslationType.VALUE,columnValueBuilder.toString());
  insert_Query=StringUtils.replace(insert_Query,CQLTranslator.COLUMN_VALUES,translation.get(TranslationType.VALUE));
  insert_Query=StringUtils.replace(insert_Query,CQLTranslator.COLUMNS,translation.get(TranslationType.COLUMN));
  cassandra_client.execute_cql3_query(ByteBuffer.wrap(insert_Query.getBytes(Constants.CHARSET_UTF8)),Compression.NONE,consistencyLevel);
}",0.7383660806618407
176696,"@Override protected void onPersist(EntityMetadata metadata,Object entity,Object id,List<RelationHolder> rlHolders){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  if (isUpdate && metadata.isCounterColumnType()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
  if (metaModel.isEmbeddable(metadata.getIdAttribute().getBindableJavaType())) {
    Cassandra.Client client=getRawClient(metadata.getPersistenceUnit(),metadata.getSchema());
    try {
      client.set_cql_version(getCqlVersion());
      client.set_keyspace(metadata.getSchema());
      onpersistOverCompositeKey(metadata,entity,client);
    }
 catch (    InvalidRequestException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
catch (    TException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
catch (    UnsupportedEncodingException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
catch (    UnavailableException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
catch (    TimedOutException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
catch (    SchemaDisagreementException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
  }
 else {
    ThriftRow tf=null;
    try {
      String columnFamily=metadata.getTableName();
      tf=dataHandler.toThriftRow(entity,id,metadata,columnFamily);
      timestamp=System.currentTimeMillis();
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
    addRelationsToThriftRow(metadata,tf,rlHolders);
    Mutator mutator=Pelops.createMutator(PelopsUtils.generatePoolName(getPersistenceUnit(),externalProperties));
    if (metadata.isCounterColumnType()) {
      List<CounterColumn> thriftCounterColumns=tf.getCounterColumns();
      List<CounterSuperColumn> thriftCounterSuperColumns=tf.getCounterSuperColumns();
      if (thriftCounterColumns != null && !thriftCounterColumns.isEmpty()) {
        mutator.writeCounterColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Arrays.asList(tf.getCounterColumns().toArray(new CounterColumn[0])));
      }
      if (thriftCounterSuperColumns != null && !thriftCounterSuperColumns.isEmpty()) {
        for (        CounterSuperColumn sc : thriftCounterSuperColumns) {
          mutator.writeSubCounterColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Bytes.fromByteArray(sc.getName()),sc.getColumns());
        }
      }
    }
 else {
      List<Column> thriftColumns=tf.getColumns();
      List<SuperColumn> thriftSuperColumns=tf.getSuperColumns();
      if (thriftColumns != null && !thriftColumns.isEmpty()) {
        mutator.writeColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Arrays.asList(tf.getColumns().toArray(new Column[0])));
      }
      if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
        for (        SuperColumn sc : thriftSuperColumns) {
          mutator.writeSubColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Bytes.fromByteArray(sc.getName()),sc.getColumns());
        }
      }
    }
    mutator.execute(getConsistencyLevel());
    tf=null;
  }
}","@Override protected void onPersist(EntityMetadata metadata,Object entity,Object id,List<RelationHolder> rlHolders){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  if (isUpdate && metadata.isCounterColumnType()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
  if (metaModel.isEmbeddable(metadata.getIdAttribute().getBindableJavaType())) {
    Cassandra.Client client=getRawClient(metadata.getPersistenceUnit(),metadata.getSchema());
    try {
      client.set_cql_version(getCqlVersion());
      client.set_keyspace(metadata.getSchema());
      onpersistOverCompositeKey(metadata,entity,client,rlHolders);
    }
 catch (    InvalidRequestException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
catch (    TException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
catch (    UnsupportedEncodingException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
catch (    UnavailableException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
catch (    TimedOutException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
catch (    SchemaDisagreementException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
  }
 else {
    ThriftRow tf=null;
    try {
      String columnFamily=metadata.getTableName();
      tf=dataHandler.toThriftRow(entity,id,metadata,columnFamily);
      timestamp=System.currentTimeMillis();
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
    addRelationsToThriftRow(metadata,tf,rlHolders);
    Mutator mutator=Pelops.createMutator(PelopsUtils.generatePoolName(getPersistenceUnit(),externalProperties));
    if (metadata.isCounterColumnType()) {
      List<CounterColumn> thriftCounterColumns=tf.getCounterColumns();
      List<CounterSuperColumn> thriftCounterSuperColumns=tf.getCounterSuperColumns();
      if (thriftCounterColumns != null && !thriftCounterColumns.isEmpty()) {
        mutator.writeCounterColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Arrays.asList(tf.getCounterColumns().toArray(new CounterColumn[0])));
      }
      if (thriftCounterSuperColumns != null && !thriftCounterSuperColumns.isEmpty()) {
        for (        CounterSuperColumn sc : thriftCounterSuperColumns) {
          mutator.writeSubCounterColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Bytes.fromByteArray(sc.getName()),sc.getColumns());
        }
      }
    }
 else {
      List<Column> thriftColumns=tf.getColumns();
      List<SuperColumn> thriftSuperColumns=tf.getSuperColumns();
      if (thriftColumns != null && !thriftColumns.isEmpty()) {
        mutator.writeColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Arrays.asList(tf.getColumns().toArray(new Column[0])));
      }
      if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
        for (        SuperColumn sc : thriftSuperColumns) {
          mutator.writeSubColumns(metadata.getTableName(),CassandraUtilities.toBytes(tf.getId(),tf.getId().getClass()),Bytes.fromByteArray(sc.getName()),sc.getColumns());
        }
      }
    }
    mutator.execute(getConsistencyLevel());
    tf=null;
  }
}",0.9986471861471862
176697,"@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  List<Object> result=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  if (!appMetadata.isNative(getJPAQuery()) && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
    result=onQueryOverCompositeColumns(m,client,metaModel);
  }
 else {
    if (appMetadata.isNative(getJPAQuery())) {
      result=((CassandraClientBase)client).executeQuery(appMetadata.getQuery(getJPAQuery()),m.getEntityClazz(),null);
    }
 else {
      if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
        boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m);
        Map<Boolean,List<IndexClause>> ixClause=prepareIndexClause(m,useInvertedIndex);
        if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
          result=(List)((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
        }
 else {
          boolean isRowKeyQuery=ixClause.keySet().iterator().next();
          if (!isRowKeyQuery) {
            result=((CassandraClientBase)client).find(ixClause.get(isRowKeyQuery),m,false,null,maxResult,getColumnList(m,getKunderaQuery().getResult(),null));
          }
 else {
            result=((CassandraEntityReader)getReader()).handleFindByRange(m,client,result,ixClause,isRowKeyQuery,getColumnList(m,getKunderaQuery().getResult(),null));
          }
        }
      }
 else {
        result=populateUsingLucene(m,client,result);
      }
    }
  }
  return result;
}","@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  List<Object> result=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  if (!appMetadata.isNative(getJPAQuery()) && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
    result=onQueryOverCompositeColumns(m,client,metaModel,null);
  }
 else {
    if (appMetadata.isNative(getJPAQuery())) {
      result=((CassandraClientBase)client).executeQuery(appMetadata.getQuery(getJPAQuery()),m.getEntityClazz(),null);
    }
 else {
      if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
        boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m);
        Map<Boolean,List<IndexClause>> ixClause=prepareIndexClause(m,useInvertedIndex);
        if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
          result=(List)((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
        }
 else {
          boolean isRowKeyQuery=ixClause.keySet().iterator().next();
          if (!isRowKeyQuery) {
            result=((CassandraClientBase)client).find(ixClause.get(isRowKeyQuery),m,false,null,maxResult,getColumnList(m,getKunderaQuery().getResult(),null));
          }
 else {
            result=((CassandraEntityReader)getReader()).handleFindByRange(m,client,result,ixClause,isRowKeyQuery,getColumnList(m,getKunderaQuery().getResult(),null));
          }
        }
      }
 else {
        result=populateUsingLucene(m,client,result);
      }
    }
  }
  return result;
}",0.9985966881841144
176698,"/** 
 * On query over composite columns.
 * @param m the m
 * @param client the client
 * @param metaModel the meta model
 * @return the list
 */
private List<Object> onQueryOverCompositeColumns(EntityMetadata m,Client client,MetamodelImpl metaModel){
  List<Object> result;
  Class compoundKeyClass=m.getIdAttribute().getBindableJavaType();
  EmbeddableType compoundKey=metaModel.embeddable(m.getIdAttribute().getBindableJavaType());
  String idColumn=((AbstractAttribute)m.getIdAttribute()).getJPAColumnName();
  StringBuilder builder=new StringBuilder();
  boolean isPresent=false;
  List<String> columns=getColumnList(m,getKunderaQuery().getResult(),compoundKey);
  String selectQuery=columns != null && !columns.isEmpty() ? CQLTranslator.SELECT_QUERY : CQLTranslator.SELECTALL_QUERY;
  CQLTranslator translator=new CQLTranslator();
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),m.getTableName()).toString());
  builder=appendColumns(builder,columns,selectQuery,translator);
  addWhereClause(builder);
  onCondition(m,metaModel,compoundKey,idColumn,builder,isPresent,translator);
  result=((CassandraClientBase)client).executeQuery(builder.toString(),m.getEntityClazz(),null);
  return result;
}","/** 
 * On query over composite columns.
 * @param m the m
 * @param client the client
 * @param metaModel the meta model
 * @return the list
 */
private List onQueryOverCompositeColumns(EntityMetadata m,Client client,MetamodelImpl metaModel,List<String> relations){
  List<Object> result;
  Class compoundKeyClass=m.getIdAttribute().getBindableJavaType();
  EmbeddableType compoundKey=metaModel.embeddable(m.getIdAttribute().getBindableJavaType());
  String idColumn=((AbstractAttribute)m.getIdAttribute()).getJPAColumnName();
  StringBuilder builder=new StringBuilder();
  boolean isPresent=false;
  List<String> columns=getColumnList(m,getKunderaQuery().getResult(),compoundKey);
  String selectQuery=columns != null && !columns.isEmpty() ? CQLTranslator.SELECT_QUERY : CQLTranslator.SELECTALL_QUERY;
  CQLTranslator translator=new CQLTranslator();
  selectQuery=StringUtils.replace(selectQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),m.getTableName()).toString());
  builder=appendColumns(builder,columns,selectQuery,translator);
  addWhereClause(builder);
  onCondition(m,metaModel,compoundKey,idColumn,builder,isPresent,translator);
  result=((CassandraClientBase)client).executeQuery(builder.toString(),m.getEntityClazz(),relations);
  return result;
}",0.9827990617670056
176699,"@Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<EnhanceEntity> ls=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  if (appMetadata.isNative(getJPAQuery())) {
    ls=(List<EnhanceEntity>)((CassandraClientBase)client).executeQuery(appMetadata.getQuery(getJPAQuery()),m.getEntityClazz(),null);
  }
 else {
    boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m);
    Map<Boolean,List<IndexClause>> ixClause=MetadataUtils.useSecondryIndex(m.getPersistenceUnit()) ? prepareIndexClause(m,useInvertedIndex) : null;
    if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
      ls=((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
    }
 else {
      ((CassandraEntityReader)getReader()).setConditions(ixClause);
      ls=reader.populateRelation(m,client);
    }
  }
  return setRelationEntities(ls,client,m);
}","@SuppressWarnings(""String_Node_Str"") @Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<EnhanceEntity> ls=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  if (appMetadata.isNative(getJPAQuery())) {
    ls=(List<EnhanceEntity>)((CassandraClientBase)client).executeQuery(appMetadata.getQuery(getJPAQuery()),m.getEntityClazz(),null);
  }
 else   if (!appMetadata.isNative(getJPAQuery()) && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
    ls=onQueryOverCompositeColumns(m,client,metaModel,m.getRelationNames());
  }
 else {
    boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m);
    Map<Boolean,List<IndexClause>> ixClause=MetadataUtils.useSecondryIndex(m.getPersistenceUnit()) ? prepareIndexClause(m,useInvertedIndex) : null;
    if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
      ls=((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
    }
 else {
      ((CassandraEntityReader)getReader()).setConditions(ixClause);
      ls=reader.populateRelation(m,client);
    }
  }
  return setRelationEntities(ls,client,m);
}",0.8421505376344086
176700,"/** 
 * Appends value to builder object for given class type
 * @param builder string builder.
 * @param fieldClazz field class.
 * @param value value to be appended.
 * @param isPresent if field is present.
 * @return true, if value is not null else false.
 */
private boolean appendValue(StringBuilder builder,Class fieldClazz,Object value,boolean isPresent){
  if (value != null) {
    isPresent=true;
    if (fieldClazz.isAssignableFrom(String.class) || isDate(fieldClazz) || fieldClazz.isAssignableFrom(char.class)|| fieldClazz.isAssignableFrom(Character.class)|| fieldClazz.isAssignableFrom(boolean.class)|| fieldClazz.isAssignableFrom(Boolean.class)) {
      builder.append(""String_Node_Str"");
      if (isDate(fieldClazz)) {
        builder.append(PropertyAccessorFactory.getPropertyAccessor(fieldClazz).toString(value));
      }
 else {
        builder.append(value);
      }
      builder.append(""String_Node_Str"");
    }
 else {
      builder.append(value);
    }
  }
  return isPresent;
}","/** 
 * Appends value to builder object for given class type
 * @param builder string builder.
 * @param fieldClazz field class.
 * @param value value to be appended.
 * @param isPresent if field is present.
 * @return true, if value is not null else false.
 */
public boolean appendValue(StringBuilder builder,Class fieldClazz,Object value,boolean isPresent){
  if (value != null) {
    isPresent=true;
    if (fieldClazz.isAssignableFrom(String.class) || isDate(fieldClazz) || fieldClazz.isAssignableFrom(char.class)|| fieldClazz.isAssignableFrom(Character.class)|| fieldClazz.isAssignableFrom(boolean.class)|| fieldClazz.isAssignableFrom(Boolean.class)) {
      builder.append(""String_Node_Str"");
      if (isDate(fieldClazz)) {
        builder.append(PropertyAccessorFactory.getPropertyAccessor(fieldClazz).toString(value));
      }
 else {
        builder.append(value);
      }
      builder.append(""String_Node_Str"");
    }
 else {
      builder.append(value);
    }
  }
  return isPresent;
}",0.994497248624312
176701,"/** 
 * Persists a   {@link Node} to database
 */
@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders){
  Cassandra.Client conn=PelopsUtils.getCassandraConnection(pool);
  try {
    Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
    if (metaModel.isEmbeddable(entityMetadata.getIdAttribute().getBindableJavaType())) {
      onpersistOverCompositeKey(entityMetadata,entity,conn);
    }
 else {
      prepareMutation(entityMetadata,entity,id,rlHolders,mutationMap);
      conn.batch_mutate(mutationMap,getConsistencyLevel());
    }
    mutationMap.clear();
    mutationMap=null;
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
 finally {
    PelopsUtils.releaseConnection(pool,conn);
  }
}","/** 
 * Persists a   {@link Node} to database
 */
@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders){
  Cassandra.Client conn=PelopsUtils.getCassandraConnection(pool);
  try {
    Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
    if (metaModel.isEmbeddable(entityMetadata.getIdAttribute().getBindableJavaType())) {
      onpersistOverCompositeKey(entityMetadata,entity,conn,rlHolders);
    }
 else {
      prepareMutation(entityMetadata,entity,id,rlHolders,mutationMap);
      conn.batch_mutate(mutationMap,getConsistencyLevel());
    }
    mutationMap.clear();
    mutationMap=null;
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"",e);
    throw new KunderaException(e);
  }
 finally {
    PelopsUtils.releaseConnection(pool,conn);
  }
}",0.9968513853904282
176702,"@Override public final EntityTransaction getTransaction(){
  if (this.transactionType == PersistenceUnitTransactionType.JTA) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return this.entityTransaction;
}","@Override public final EntityTransaction getTransaction(){
  if (this.transactionType == PersistenceUnitTransactionType.JTA) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (this.entityTransaction == null) {
    this.entityTransaction=new KunderaEntityTransaction(this);
  }
  return this.entityTransaction;
}",0.7030965391621129
176703,"@Override public void doRollback(){
  checkClosed();
  this.entityTransaction.rollback();
}","@Override public void doRollback(){
  checkClosed();
  if (this.entityTransaction != null) {
    this.entityTransaction.rollback();
  }
 else {
    this.persistenceDelegator.rollback();
  }
}",0.6453900709219859
176704,"/** 
 * update method update schema and table for the list of tableInfos
 * @param tableInfos list of TableInfos.
 */
protected void update(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    if (tableInfo != null && tableInfo.getTableName() != null) {
      HTableDescriptor hTableDescriptor=getTableMetaData(tableInfo);
      try {
        HTableDescriptor descriptor=admin.getTableDescriptor(tableInfo.getTableName().getBytes());
        if (descriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
          if (admin.isTableEnabled(tableInfo.getTableName().getBytes())) {
            admin.disableTable(tableInfo.getTableName().getBytes());
          }
          HColumnDescriptor[] descriptors=descriptor.getColumnFamilies();
          if (tableInfo.getColumnMetadatas() != null) {
            boolean found=false;
            HColumnDescriptor columnDescriptor=new HColumnDescriptor(tableInfo.getTableName());
            for (            HColumnDescriptor hColumnDescriptor : descriptors) {
              if (hColumnDescriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
                found=true;
                break;
              }
            }
            if (!found) {
              admin.addColumn(tableInfo.getTableName(),columnDescriptor);
            }
          }
        }
      }
 catch (      IOException e) {
        try {
          admin.createTable(hTableDescriptor);
        }
 catch (        IOException e1) {
          logger.error(""String_Node_Str"" + e.getMessage());
          throw new SchemaGenerationException(e,""String_Node_Str"");
        }
      }
    }
  }
}","/** 
 * update method update schema and table for the list of tableInfos
 * @param tableInfos list of TableInfos.
 */
protected void update(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    if (tableInfo != null && tableInfo.getTableName() != null) {
      HTableDescriptor hTableDescriptor=getTableMetaData(tableInfo);
      try {
        HTableDescriptor descriptor=admin.getTableDescriptor(tableInfo.getTableName().getBytes());
        if (descriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
          if (admin.isTableEnabled(tableInfo.getTableName().getBytes())) {
            admin.disableTable(tableInfo.getTableName().getBytes());
          }
          HColumnDescriptor[] descriptors=descriptor.getColumnFamilies();
          if (tableInfo.getColumnMetadatas() != null) {
            boolean found=false;
            HColumnDescriptor columnDescriptor=new HColumnDescriptor(tableInfo.getTableName());
            for (            HColumnDescriptor hColumnDescriptor : descriptors) {
              if (hColumnDescriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
                found=true;
                break;
              }
            }
            if (!found) {
              admin.addColumn(tableInfo.getTableName(),columnDescriptor);
            }
          }
          if (admin.isTableDisabled(tableInfo.getTableName().getBytes())) {
            admin.enableTable(tableInfo.getTableName().getBytes());
          }
        }
      }
 catch (      IOException e) {
        try {
          admin.createTable(hTableDescriptor);
        }
 catch (        IOException e1) {
          logger.error(""String_Node_Str"" + e.getMessage());
          throw new SchemaGenerationException(e,""String_Node_Str"");
        }
      }
 finally {
      }
    }
  }
}",0.9499571060909352
176705,"@Test public void testOps(){
  String humanId=""String_Node_Str"";
  Human human=new Human(humanId);
  human.setHumanAlive(true);
  HumansPrivatePhoto photo=new HumansPrivatePhoto(humanId);
  photo.setPhotoName(""String_Node_Str"");
  human.setHumansPrivatePhoto(photo);
  photo.setHuman(human);
  em.persist(human);
  em.clear();
  Human result=em.find(Human.class,humanId);
  System.out.println(result);
}","@Test public void testOps(){
  String humanId=""String_Node_Str"";
  Human human=new Human(humanId);
  human.setHumanAlive(true);
  HumansPrivatePhoto photo=new HumansPrivatePhoto(humanId);
  photo.setPhotoName(""String_Node_Str"");
  human.setHumansPrivatePhoto(photo);
  photo.setHuman(human);
  em.persist(human);
  em.clear();
  Human result=em.find(Human.class,humanId);
  Assert.assertNotNull(result);
  Assert.assertEquals(humanId,result.getHumanId());
  Assert.assertEquals(""String_Node_Str"",result.getHumansPrivatePhoto().getPhotoName());
  Assert.assertTrue(result.getHumanAlive());
}",0.7613293051359517
176706,"@After public void tearDown(){
  em.close();
  emf.close();
  if (cli != null && cli.isStarted()) {
    cli.dropTable(""String_Node_Str"");
    cli.dropTable(""String_Node_Str"");
    cli.stopCluster(""String_Node_Str"");
  }
}","@After public void tearDown(){
  em.close();
  emf.close();
  if (cli != null && cli.isStarted()) {
    cli.dropTable(""String_Node_Str"");
    cli.dropTable(""String_Node_Str"");
  }
}",0.900497512437811
176707,"/** 
 * @param columns
 * @param m
 * @return
 */
private String[] getTranslatedColumns(EntityMetadata m,String[] columns){
  if (columns != null) {
    String[] translatedColumns=new String[columns.length - 1];
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entity=metaModel.entity(m.getEntityClazz());
    int count=0;
    for (int i=1; i < columns.length; i++) {
      if (columns[i] != null) {
        Attribute col=entity.getAttribute(columns[i]);
        if (col == null) {
          throw new QueryHandlerException(""String_Node_Str"" + columns[i]);
        }
        translatedColumns[count++]=((AbstractAttribute)col).getJPAColumnName();
      }
    }
    return translatedColumns;
  }
  return null;
}","/** 
 * @param columns
 * @param m
 * @return
 */
private List<String> getTranslatedColumns(EntityMetadata m,String[] columns){
  List<String> translatedColumns=new ArrayList<String>();
  if (columns != null) {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entity=metaModel.entity(m.getEntityClazz());
    int count=0;
    for (int i=1; i < columns.length; i++) {
      if (columns[i] != null) {
        String fieldName=null;
        String embeddedFieldName=null;
        StringTokenizer stringTokenizer=new StringTokenizer(columns[i],""String_Node_Str"");
        if (stringTokenizer.countTokens() > 1) {
          fieldName=stringTokenizer.nextToken();
          embeddedFieldName=stringTokenizer.nextToken();
          Attribute col=entity.getAttribute(fieldName);
          EmbeddableType embeddableType=metaModel.embeddable(col.getJavaType());
          Attribute attribute=embeddableType.getAttribute(embeddedFieldName);
          translatedColumns.add(((AbstractAttribute)attribute).getJPAColumnName());
        }
 else {
          fieldName=columns[i];
          Attribute col=entity.getAttribute(fieldName);
          onEmbeddable(translatedColumns,metaModel,col,metaModel.isEmbeddable(((AbstractAttribute)col).getBindableJavaType()));
        }
      }
    }
  }
  return translatedColumns;
}",0.4733031674208144
176708,"private byte[] getBytes(String jpaFieldName,EntityMetadata m,Object value){
  Attribute idCol=m.getIdAttribute();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entity=metaModel.entity(m.getEntityClazz());
  Field f=null;
  boolean isId=false;
  if (idCol.getName().equals(jpaFieldName)) {
    f=(Field)idCol.getJavaMember();
    isId=true;
  }
 else {
    String fieldName=m.getFieldName(jpaFieldName);
    Attribute col=entity.getAttribute(fieldName);
    if (col == null) {
      throw new QueryHandlerException(""String_Node_Str"" + jpaFieldName);
    }
    f=(Field)col.getJavaMember();
  }
  if (f != null && f.getType() != null) {
    return HBaseUtils.getBytes(value,f.getType());
  }
 else {
    log.error(""String_Node_Str"" + jpaFieldName);
    throw new QueryHandlerException(""String_Node_Str"" + jpaFieldName);
  }
}","private byte[] getBytes(String jpaFieldName,EntityMetadata m,Object value){
  Attribute idCol=m.getIdAttribute();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entity=metaModel.entity(m.getEntityClazz());
  Class fieldClazz=null;
  boolean isId=false;
  if (idCol.getName().equals(jpaFieldName)) {
    Field f=(Field)idCol.getJavaMember();
    fieldClazz=f.getType();
    isId=true;
  }
 else {
    StringTokenizer tokenizer=new StringTokenizer(jpaFieldName,""String_Node_Str"");
    String embeddedFieldName=null;
    if (tokenizer.countTokens() > 1) {
      embeddedFieldName=tokenizer.nextToken();
      String fieldName=tokenizer.nextToken();
      Attribute embeddableAttribute=entity.getAttribute(embeddedFieldName);
      EmbeddableType embeddableType=metaModel.embeddable(embeddableAttribute.getJavaType());
      Attribute embeddedAttribute=embeddableType.getAttribute(fieldName);
      jpaFieldName=((AbstractAttribute)embeddedAttribute).getJPAColumnName();
      fieldClazz=((AbstractAttribute)embeddedAttribute).getBindableJavaType();
    }
 else {
      String fieldName=m.getFieldName(jpaFieldName);
      Attribute col=entity.getAttribute(fieldName);
      if (col == null) {
        throw new QueryHandlerException(""String_Node_Str"" + jpaFieldName);
      }
      fieldClazz=((AbstractAttribute)col).getBindableJavaType();
    }
  }
  if (fieldClazz != null) {
    return HBaseUtils.getBytes(value,fieldClazz);
  }
 else {
    log.error(""String_Node_Str"" + jpaFieldName);
    throw new QueryHandlerException(""String_Node_Str"" + jpaFieldName);
  }
}",0.4904928211098176
176709,"/** 
 * Parses and translates query into HBase filter and invokes client's method to return list of entities.
 * @param m Entity metadata
 * @param client hbase client
 * @return list of entities.
 */
private List onQuery(EntityMetadata m,Client client){
  QueryTranslator translator=new QueryTranslator();
  translator.translate(getKunderaQuery(),m);
  String[] columns=getTranslatedColumns(m,getKunderaQuery().getResult());
  Map<Boolean,Filter> filter=translator.getFilter();
  if (translator.isFindById && (filter == null && columns == null)) {
    List results=new ArrayList();
    Object output=client.find(m.getEntityClazz(),translator.rowKey);
    if (output != null) {
      results.add(output);
      return results;
    }
  }
  if (translator.isFindById && filter == null && columns != null) {
    return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,translator.rowKey,translator.rowKey,columns);
  }
  if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
    if (filter == null && !translator.isFindById) {
      if (translator.isRangeScan()) {
        return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,translator.getStartRow(),translator.getEndRow(),columns);
      }
 else {
        return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,null,null,columns);
      }
    }
 else {
      if (filter != null && filter.values() != null && !filter.values().isEmpty()) {
        ((HBaseClient)client).setFilter(filter.values().iterator().next());
      }
      if (translator.isRangeScan()) {
        return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,translator.getStartRow(),translator.getEndRow(),columns);
      }
 else {
        return ((HBaseClient)client).findByQuery(m.getEntityClazz(),m,columns);
      }
    }
  }
 else {
    List results=null;
    return populateUsingLucene(m,client,results);
  }
}","/** 
 * Parses and translates query into HBase filter and invokes client's method to return list of entities.
 * @param m Entity metadata
 * @param client hbase client
 * @return list of entities.
 */
private List onQuery(EntityMetadata m,Client client){
  QueryTranslator translator=new QueryTranslator();
  translator.translate(getKunderaQuery(),m);
  List<String> columns=getTranslatedColumns(m,getKunderaQuery().getResult());
  Map<Boolean,Filter> filter=translator.getFilter();
  if (translator.isFindById && (filter == null && columns == null)) {
    List results=new ArrayList();
    Object output=client.find(m.getEntityClazz(),translator.rowKey);
    if (output != null) {
      results.add(output);
      return results;
    }
  }
  if (translator.isFindById && filter == null && columns != null) {
    return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,translator.rowKey,translator.rowKey,columns.toArray(new String[columns.size()]));
  }
  if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
    if (filter == null && !translator.isFindById) {
      if (translator.isRangeScan()) {
        return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,translator.getStartRow(),translator.getEndRow(),columns.toArray(new String[columns.size()]));
      }
 else {
        return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,null,null,columns.toArray(new String[columns.size()]));
      }
    }
 else {
      if (filter != null && filter.values() != null && !filter.values().isEmpty()) {
        ((HBaseClient)client).setFilter(filter.values().iterator().next());
      }
      if (translator.isRangeScan()) {
        return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,translator.getStartRow(),translator.getEndRow(),columns.toArray(new String[columns.size()]));
      }
 else {
        return ((HBaseClient)client).findByQuery(m.getEntityClazz(),m,columns.toArray(new String[columns.size()]));
      }
    }
  }
 else {
    List results=null;
    return populateUsingLucene(m,client,results);
  }
}",0.9519918283963228
176710,"/** 
 * get Table metadata method returns the HTableDescriptor of table for given tableInfo
 * @return HHTableDescriptor object for tableInfo
 */
private HTableDescriptor getTableMetaData(TableInfo tableInfo){
  HTableDescriptor tableDescriptor=new HTableDescriptor(tableInfo.getTableName());
  Properties tableProperties=null;
  schemas=HBasePropertyReader.hsmd.getDataStore() != null ? HBasePropertyReader.hsmd.getDataStore().getSchemas() : null;
  if (schemas != null && !schemas.isEmpty()) {
    for (    Schema s : schemas) {
      if (s.getName() != null && s.getName().equalsIgnoreCase(tableInfo.getTableName())) {
        tableProperties=s.getSchemaProperties();
        tables=s.getTables();
      }
    }
  }
  if (tableInfo.getColumnMetadatas() != null) {
    HColumnDescriptor hColumnDescriptor=new HColumnDescriptor(tableInfo.getTableName());
    setColumnFamilyProperties(hColumnDescriptor,tableInfo.getTableName());
    tableDescriptor.addFamily(hColumnDescriptor);
  }
  if (tableInfo.getEmbeddedColumnMetadatas() != null) {
  }
  if (tableProperties != null) {
    for (    Object o : tableProperties.keySet()) {
      tableDescriptor.setValue(Bytes.toBytes(o.toString()),Bytes.toBytes(tableProperties.get(o).toString()));
    }
  }
  return tableDescriptor;
}","/** 
 * get Table metadata method returns the HTableDescriptor of table for given tableInfo
 * @return HHTableDescriptor object for tableInfo
 */
private HTableDescriptor getTableMetaData(TableInfo tableInfo){
  HTableDescriptor tableDescriptor=new HTableDescriptor(tableInfo.getTableName());
  Properties tableProperties=null;
  schemas=HBasePropertyReader.hsmd.getDataStore() != null ? HBasePropertyReader.hsmd.getDataStore().getSchemas() : null;
  if (schemas != null && !schemas.isEmpty()) {
    for (    Schema s : schemas) {
      if (s.getName() != null && s.getName().equalsIgnoreCase(tableInfo.getTableName())) {
        tableProperties=s.getSchemaProperties();
        tables=s.getTables();
      }
    }
  }
  if (tableInfo.getColumnMetadatas() != null) {
    HColumnDescriptor hColumnDescriptor=new HColumnDescriptor(tableInfo.getTableName());
    setColumnFamilyProperties(hColumnDescriptor,tableInfo.getTableName());
    tableDescriptor.addFamily(hColumnDescriptor);
  }
  if (tableProperties != null) {
    for (    Object o : tableProperties.keySet()) {
      tableDescriptor.setValue(Bytes.toBytes(o.toString()),Bytes.toBytes(tableProperties.get(o).toString()));
    }
  }
  return tableDescriptor;
}",0.9759422614274258
176711,"/** 
 * update method update schema and table for the list of tableInfos
 * @param tableInfos list of TableInfos.
 */
protected void update(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    if (tableInfo != null && tableInfo.getTableName() != null) {
      HTableDescriptor hTableDescriptor=getTableMetaData(tableInfo);
      try {
        HTableDescriptor descriptor=admin.getTableDescriptor(tableInfo.getTableName().getBytes());
        if (descriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
          if (admin.isTableEnabled(tableInfo.getTableName().getBytes())) {
            admin.disableTable(tableInfo.getTableName().getBytes());
          }
          HColumnDescriptor[] descriptors=descriptor.getColumnFamilies();
          if (tableInfo.getColumnMetadatas() != null) {
            boolean found=false;
            HColumnDescriptor columnDescriptor=new HColumnDescriptor(tableInfo.getTableName());
            for (            HColumnDescriptor hColumnDescriptor : descriptors) {
              if (hColumnDescriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
                found=true;
                break;
              }
            }
            if (!found) {
              admin.addColumn(tableInfo.getTableName(),columnDescriptor);
            }
          }
          if (tableInfo.getEmbeddedColumnMetadatas() != null) {
          }
        }
      }
 catch (      IOException e) {
        try {
          admin.createTable(hTableDescriptor);
        }
 catch (        IOException e1) {
          logger.error(""String_Node_Str"" + e.getMessage());
          throw new SchemaGenerationException(e,""String_Node_Str"");
        }
      }
    }
  }
}","/** 
 * update method update schema and table for the list of tableInfos
 * @param tableInfos list of TableInfos.
 */
protected void update(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    if (tableInfo != null && tableInfo.getTableName() != null) {
      HTableDescriptor hTableDescriptor=getTableMetaData(tableInfo);
      try {
        HTableDescriptor descriptor=admin.getTableDescriptor(tableInfo.getTableName().getBytes());
        if (descriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
          if (admin.isTableEnabled(tableInfo.getTableName().getBytes())) {
            admin.disableTable(tableInfo.getTableName().getBytes());
          }
          HColumnDescriptor[] descriptors=descriptor.getColumnFamilies();
          if (tableInfo.getColumnMetadatas() != null) {
            boolean found=false;
            HColumnDescriptor columnDescriptor=new HColumnDescriptor(tableInfo.getTableName());
            for (            HColumnDescriptor hColumnDescriptor : descriptors) {
              if (hColumnDescriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
                found=true;
                break;
              }
            }
            if (!found) {
              admin.addColumn(tableInfo.getTableName(),columnDescriptor);
            }
          }
        }
      }
 catch (      IOException e) {
        try {
          admin.createTable(hTableDescriptor);
        }
 catch (        IOException e1) {
          logger.error(""String_Node_Str"" + e.getMessage());
          throw new SchemaGenerationException(e,""String_Node_Str"");
        }
      }
    }
  }
}",0.977633902295468
176712,"/** 
 * validate method validate schema and table for the list of tableInfos.
 * @param tableInfos list of TableInfos.
 */
protected void validate(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    HTableDescriptor hTableDescriptor;
    try {
      hTableDescriptor=admin.getTableDescriptor(tableInfo.getTableName().getBytes());
      if (tableInfo.getColumnMetadatas() != null) {
        boolean isColumnFound=false;
        for (        HColumnDescriptor columnDescriptor : hTableDescriptor.getColumnFamilies()) {
          if (columnDescriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
            isColumnFound=true;
            break;
          }
        }
        if (!isColumnFound) {
          throw new SchemaGenerationException(""String_Node_Str"" + tableInfo.getTableName() + ""String_Node_Str""+ tableInfo.getTableName()+ ""String_Node_Str"",""String_Node_Str"",tableInfo.getTableName(),tableInfo.getTableName());
        }
      }
      if (tableInfo.getEmbeddedColumnMetadatas() != null) {
      }
    }
 catch (    TableNotFoundException tnfex) {
      throw new SchemaGenerationException(""String_Node_Str"" + tableInfo.getTableName() + ""String_Node_Str"",tnfex,""String_Node_Str"");
    }
catch (    IOException e) {
      logger.error(""String_Node_Str"" + e.getMessage());
      throw new SchemaGenerationException(e,""String_Node_Str"");
    }
  }
}","/** 
 * validate method validate schema and table for the list of tableInfos.
 * @param tableInfos list of TableInfos.
 */
protected void validate(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    HTableDescriptor hTableDescriptor;
    try {
      hTableDescriptor=admin.getTableDescriptor(tableInfo.getTableName().getBytes());
      if (tableInfo.getColumnMetadatas() != null) {
        boolean isColumnFound=false;
        for (        HColumnDescriptor columnDescriptor : hTableDescriptor.getColumnFamilies()) {
          if (columnDescriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
            isColumnFound=true;
            break;
          }
        }
        if (!isColumnFound) {
          throw new SchemaGenerationException(""String_Node_Str"" + tableInfo.getTableName() + ""String_Node_Str""+ tableInfo.getTableName()+ ""String_Node_Str"",""String_Node_Str"",tableInfo.getTableName(),tableInfo.getTableName());
        }
      }
    }
 catch (    TableNotFoundException tnfex) {
      throw new SchemaGenerationException(""String_Node_Str"" + tableInfo.getTableName() + ""String_Node_Str"",tnfex,""String_Node_Str"");
    }
catch (    IOException e) {
      logger.error(""String_Node_Str"" + e.getMessage());
      throw new SchemaGenerationException(e,""String_Node_Str"");
    }
  }
}",0.9751280175566936
176713,"/** 
 * @param columns
 * @param m
 * @return
 */
private List<String> getTranslatedColumns(EntityMetadata m,String[] columns){
  List<String> translatedColumns=new ArrayList<String>();
  if (columns != null) {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entity=metaModel.entity(m.getEntityClazz());
    int count=0;
    for (int i=1; i < columns.length; i++) {
      if (columns[i] != null) {
        String fieldName=null;
        String embeddedFieldName=null;
        StringTokenizer stringTokenizer=new StringTokenizer(columns[i],""String_Node_Str"");
        if (stringTokenizer.countTokens() > 1) {
          fieldName=stringTokenizer.nextToken();
          embeddedFieldName=stringTokenizer.nextToken();
          Attribute col=entity.getAttribute(fieldName);
          EmbeddableType embeddableType=metaModel.embeddable(col.getJavaType());
          Attribute attribute=embeddableType.getAttribute(embeddedFieldName);
          translatedColumns.add(((AbstractAttribute)attribute).getJPAColumnName());
        }
 else {
          fieldName=columns[i];
          Attribute col=entity.getAttribute(fieldName);
          onEmbeddable(translatedColumns,metaModel,col,metaModel.isEmbeddable(((AbstractAttribute)col).getBindableJavaType()));
        }
      }
    }
  }
  return translatedColumns;
}","/** 
 * @param columns
 * @param m
 * @return
 */
private List<String> getTranslatedColumns(EntityMetadata m,String[] columns,final int startWith){
  List<String> translatedColumns=new ArrayList<String>();
  if (columns != null) {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entity=metaModel.entity(m.getEntityClazz());
    int count=0;
    for (int i=startWith; i < columns.length; i++) {
      if (columns[i] != null) {
        String fieldName=null;
        String embeddedFieldName=null;
        StringTokenizer stringTokenizer=new StringTokenizer(columns[i],""String_Node_Str"");
        if (stringTokenizer.countTokens() > 1) {
          fieldName=stringTokenizer.nextToken();
          embeddedFieldName=stringTokenizer.nextToken();
          Attribute col=entity.getAttribute(fieldName);
          EmbeddableType embeddableType=metaModel.embeddable(col.getJavaType());
          Attribute attribute=embeddableType.getAttribute(embeddedFieldName);
          translatedColumns.add(((AbstractAttribute)attribute).getJPAColumnName());
        }
 else {
          fieldName=columns[i];
          Attribute col=entity.getAttribute(fieldName);
          onEmbeddable(translatedColumns,metaModel,col,metaModel.isEmbeddable(((AbstractAttribute)col).getBindableJavaType()));
        }
      }
    }
  }
  return translatedColumns;
}",0.989406779661017
176714,"private byte[] getBytes(String jpaFieldName,EntityMetadata m,Object value){
  Attribute idCol=m.getIdAttribute();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entity=metaModel.entity(m.getEntityClazz());
  Class fieldClazz=null;
  boolean isId=false;
  if (idCol.getName().equals(jpaFieldName)) {
    Field f=(Field)idCol.getJavaMember();
    fieldClazz=f.getType();
    isId=true;
  }
 else {
    StringTokenizer tokenizer=new StringTokenizer(jpaFieldName,""String_Node_Str"");
    String embeddedFieldName=null;
    if (tokenizer.countTokens() > 1) {
      embeddedFieldName=tokenizer.nextToken();
      String fieldName=tokenizer.nextToken();
      Attribute embeddableAttribute=entity.getAttribute(embeddedFieldName);
      EmbeddableType embeddableType=metaModel.embeddable(embeddableAttribute.getJavaType());
      Attribute embeddedAttribute=embeddableType.getAttribute(fieldName);
      jpaFieldName=((AbstractAttribute)embeddedAttribute).getJPAColumnName();
      fieldClazz=((AbstractAttribute)embeddedAttribute).getBindableJavaType();
    }
 else {
      String fieldName=m.getFieldName(jpaFieldName);
      Attribute col=entity.getAttribute(fieldName);
      if (col == null) {
        throw new QueryHandlerException(""String_Node_Str"" + jpaFieldName);
      }
      fieldClazz=((AbstractAttribute)col).getBindableJavaType();
    }
  }
  if (fieldClazz != null) {
    return HBaseUtils.getBytes(value,fieldClazz);
  }
 else {
    log.error(""String_Node_Str"" + jpaFieldName);
    throw new QueryHandlerException(""String_Node_Str"" + jpaFieldName);
  }
}","private byte[] getBytes(String jpaFieldName,EntityMetadata m,Object value){
  Attribute idCol=m.getIdAttribute();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entity=metaModel.entity(m.getEntityClazz());
  Class fieldClazz=null;
  boolean isId=false;
  if (idCol.getName().equals(jpaFieldName)) {
    Field f=(Field)idCol.getJavaMember();
    fieldClazz=f.getType();
    isId=true;
  }
 else {
    StringTokenizer tokenizer=new StringTokenizer(jpaFieldName,""String_Node_Str"");
    String embeddedFieldName=null;
    if (tokenizer.countTokens() > 1) {
      embeddedFieldName=tokenizer.nextToken();
      String fieldName=tokenizer.nextToken();
      Attribute embeddableAttribute=entity.getAttribute(embeddedFieldName);
      EmbeddableType embeddableType=metaModel.embeddable(embeddableAttribute.getJavaType());
      Attribute embeddedAttribute=embeddableType.getAttribute(fieldName);
      jpaFieldName=((AbstractAttribute)embeddedAttribute).getJPAColumnName();
      fieldClazz=((AbstractAttribute)embeddedAttribute).getBindableJavaType();
    }
 else {
      String fieldName=m.getFieldName(jpaFieldName);
      Attribute col=entity.getAttribute(fieldName);
      fieldClazz=((AbstractAttribute)col).getBindableJavaType();
    }
  }
  if (fieldClazz != null) {
    return HBaseUtils.getBytes(value,fieldClazz);
  }
 else {
    log.error(""String_Node_Str"" + jpaFieldName);
    throw new QueryHandlerException(""String_Node_Str"" + jpaFieldName);
  }
}",0.8466334164588528
176715,"/** 
 * On parsing filter clause(e.g. WHERE clause).
 * @param condition condition
 * @param name column name.
 * @param value column value.
 * @param isIdColumn if it is an id column.
 * @param m entity metadata.
 */
private void onParseFilter(String condition,String name,Object value,boolean isIdColumn,EntityMetadata m){
  CompareOp operator=HBaseUtils.getOperator(condition,isIdColumn);
  byte[] valueInBytes=getBytes(name,m,value);
  if (!isIdColumn) {
    Filter f=new SingleColumnValueFilter(Bytes.toBytes(m.getTableName()),Bytes.toBytes(name),operator,valueInBytes);
    addToFilter(f);
  }
 else {
    if (operator.equals(CompareOp.GREATER_OR_EQUAL) || operator.equals(CompareOp.GREATER)) {
      startRow=valueInBytes;
    }
 else     if (operator.equals(CompareOp.LESS_OR_EQUAL) || operator.equals(CompareOp.LESS)) {
      endRow=valueInBytes;
    }
 else     if (operator.equals(CompareOp.EQUAL)) {
      rowKey=getBytes(m.getIdAttribute().getName(),m,value);
      endRow=null;
      isFindById=true;
    }
  }
  this.isIdColumn=isIdColumn;
}","/** 
 * On parsing filter clause(e.g. WHERE clause).
 * @param condition condition
 * @param name column name.
 * @param value column value.
 * @param isIdColumn if it is an id column.
 * @param m entity metadata.
 */
private void onParseFilter(String condition,String name,Object value,boolean isIdColumn,EntityMetadata m){
  CompareOp operator=HBaseUtils.getOperator(condition,isIdColumn);
  byte[] valueInBytes=getBytes(name,m,value);
  if (!isIdColumn) {
    List<String> columns=null;
    if (new StringTokenizer(name,""String_Node_Str"").countTokens() > 1) {
      columns=getTranslatedColumns(m,new String[]{name},0);
    }
    if (columns != null && !columns.isEmpty()) {
      name=columns.get(0);
    }
    Filter f=new SingleColumnValueFilter(Bytes.toBytes(m.getTableName()),Bytes.toBytes(name),operator,valueInBytes);
    addToFilter(f);
  }
 else {
    if (operator.equals(CompareOp.GREATER_OR_EQUAL) || operator.equals(CompareOp.GREATER)) {
      startRow=valueInBytes;
    }
 else     if (operator.equals(CompareOp.LESS_OR_EQUAL) || operator.equals(CompareOp.LESS)) {
      endRow=valueInBytes;
    }
 else     if (operator.equals(CompareOp.EQUAL)) {
      rowKey=getBytes(m.getIdAttribute().getName(),m,value);
      endRow=null;
      isFindById=true;
    }
  }
  this.isIdColumn=isIdColumn;
}",0.8934010152284264
176716,"/** 
 * Parses and translates query into HBase filter and invokes client's method to return list of entities.
 * @param m Entity metadata
 * @param client hbase client
 * @return list of entities.
 */
private List onQuery(EntityMetadata m,Client client){
  QueryTranslator translator=new QueryTranslator();
  translator.translate(getKunderaQuery(),m);
  List<String> columns=getTranslatedColumns(m,getKunderaQuery().getResult());
  Map<Boolean,Filter> filter=translator.getFilter();
  if (translator.isFindById && (filter == null && columns == null)) {
    List results=new ArrayList();
    Object output=client.find(m.getEntityClazz(),translator.rowKey);
    if (output != null) {
      results.add(output);
      return results;
    }
  }
  if (translator.isFindById && filter == null && columns != null) {
    return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,translator.rowKey,translator.rowKey,columns.toArray(new String[columns.size()]));
  }
  if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
    if (filter == null && !translator.isFindById) {
      if (translator.isRangeScan()) {
        return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,translator.getStartRow(),translator.getEndRow(),columns.toArray(new String[columns.size()]));
      }
 else {
        return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,null,null,columns.toArray(new String[columns.size()]));
      }
    }
 else {
      if (filter != null && filter.values() != null && !filter.values().isEmpty()) {
        ((HBaseClient)client).setFilter(filter.values().iterator().next());
      }
      if (translator.isRangeScan()) {
        return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,translator.getStartRow(),translator.getEndRow(),columns.toArray(new String[columns.size()]));
      }
 else {
        return ((HBaseClient)client).findByQuery(m.getEntityClazz(),m,columns.toArray(new String[columns.size()]));
      }
    }
  }
 else {
    List results=null;
    return populateUsingLucene(m,client,results);
  }
}","/** 
 * Parses and translates query into HBase filter and invokes client's method to return list of entities.
 * @param m Entity metadata
 * @param client hbase client
 * @return list of entities.
 */
private List onQuery(EntityMetadata m,Client client){
  QueryTranslator translator=new QueryTranslator();
  translator.translate(getKunderaQuery(),m);
  List<String> columns=getTranslatedColumns(m,getKunderaQuery().getResult(),1);
  Map<Boolean,Filter> filter=translator.getFilter();
  if (translator.isFindById && (filter == null && columns == null)) {
    List results=new ArrayList();
    Object output=client.find(m.getEntityClazz(),translator.rowKey);
    if (output != null) {
      results.add(output);
      return results;
    }
  }
  if (translator.isFindById && filter == null && columns != null) {
    return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,translator.rowKey,translator.rowKey,columns.toArray(new String[columns.size()]));
  }
  if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
    if (filter == null && !translator.isFindById) {
      if (translator.isRangeScan()) {
        return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,translator.getStartRow(),translator.getEndRow(),columns.toArray(new String[columns.size()]));
      }
 else {
        return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,null,null,columns.toArray(new String[columns.size()]));
      }
    }
 else {
      if (filter != null && filter.values() != null && !filter.values().isEmpty()) {
        ((HBaseClient)client).setFilter(filter.values().iterator().next());
      }
      if (translator.isRangeScan()) {
        return ((HBaseClient)client).findByRange(m.getEntityClazz(),m,translator.getStartRow(),translator.getEndRow(),columns.toArray(new String[columns.size()]));
      }
 else {
        return ((HBaseClient)client).findByQuery(m.getEntityClazz(),m,columns.toArray(new String[columns.size()]));
      }
    }
  }
 else {
    List results=null;
    return populateUsingLucene(m,client,results);
  }
}",0.999512432959532
176717,"/** 
 * update method update schema and table for the list of tableInfos
 * @param tableInfos list of TableInfos.
 */
protected void update(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    if (tableInfo != null && tableInfo.getTableName() != null) {
      HTableDescriptor hTableDescriptor=getTableMetaData(tableInfo);
      try {
        HTableDescriptor descriptor=admin.getTableDescriptor(tableInfo.getTableName().getBytes());
        if (descriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
          if (admin.isTableEnabled(tableInfo.getTableName().getBytes())) {
            admin.disableTable(tableInfo.getTableName().getBytes());
          }
          HColumnDescriptor[] descriptors=descriptor.getColumnFamilies();
          if (tableInfo.getColumnMetadatas() != null) {
            boolean found=false;
            HColumnDescriptor columnDescriptor=new HColumnDescriptor(tableInfo.getTableName());
            for (            HColumnDescriptor hColumnDescriptor : descriptors) {
              if (hColumnDescriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
                found=true;
                break;
              }
            }
            if (!found) {
              admin.addColumn(tableInfo.getTableName(),columnDescriptor);
            }
          }
          if (admin.isTableDisabled(tableInfo.getTableName().getBytes())) {
            admin.enableTable(tableInfo.getTableName().getBytes());
          }
        }
      }
 catch (      IOException e) {
        try {
          admin.createTable(hTableDescriptor);
        }
 catch (        IOException ioe) {
          logger.error(""String_Node_Str"",ioe);
          throw new SchemaGenerationException(e,""String_Node_Str"");
        }
      }
    }
  }
}","/** 
 * update method update schema and table for the list of tableInfos
 * @param tableInfos list of TableInfos.
 */
protected void update(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    if (tableInfo != null && tableInfo.getTableName() != null) {
      HTableDescriptor hTableDescriptor=getTableMetaData(tableInfo);
      try {
        HTableDescriptor descriptor=admin.getTableDescriptor(tableInfo.getTableName().getBytes());
        if (descriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
          if (admin.isTableEnabled(tableInfo.getTableName().getBytes())) {
            admin.disableTable(tableInfo.getTableName().getBytes());
          }
          HColumnDescriptor[] descriptors=descriptor.getColumnFamilies();
          if (tableInfo.getColumnMetadatas() != null) {
            boolean found=false;
            HColumnDescriptor columnDescriptor=new HColumnDescriptor(tableInfo.getTableName());
            for (            HColumnDescriptor hColumnDescriptor : descriptors) {
              if (hColumnDescriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
                found=true;
                break;
              }
            }
            if (!found) {
              admin.addColumn(tableInfo.getTableName(),columnDescriptor);
            }
          }
          if (admin.isTableDisabled(tableInfo.getTableName().getBytes())) {
            admin.enableTable(tableInfo.getTableName().getBytes());
          }
        }
      }
 catch (      IOException e) {
        try {
          admin.createTable(hTableDescriptor);
        }
 catch (        IOException ioe) {
          logger.error(""String_Node_Str"",ioe);
          throw new SchemaGenerationException(ioe,""String_Node_Str"");
        }
      }
    }
  }
}",0.9994462901439646
176718,"@Test public void testSelectAll(){
  persist();
  String query2=""String_Node_Str"" + ""String_Node_Str"";
  Query query=em.createQuery(query2);
  query.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<NetstatData> result=query.getResultList();
  Assert.assertNotNull(result);
  Assert.assertEquals(1,result.size());
  Assert.assertNotNull(result.get(0));
  Assert.assertNotNull(result.get(0).getId());
  Assert.assertEquals(CAPTURE_TIME,result.get(0).getId().getCaptureTime());
  Assert.assertEquals(""String_Node_Str"",result.get(0).getId().getServer());
  Assert.assertNull(result.get(0).getId().getPortMapId());
}","@Test public void testSelectAll(){
  persist();
  String query2=""String_Node_Str"" + ""String_Node_Str"";
  Query query=em.createQuery(query2);
  query.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<NetstatData> result=query.getResultList();
  Assert.assertNotNull(result);
  Assert.assertEquals(4,result.size());
  Assert.assertNotNull(result.get(0));
  Assert.assertNotNull(result.get(0).getId());
  Assert.assertEquals(CAPTURE_TIME,result.get(0).getId().getCaptureTime());
  Assert.assertEquals(""String_Node_Str"",result.get(0).getId().getServer());
  Assert.assertNull(result.get(0).getId().getPortMapId());
}",0.9983870967741936
176719,"@Test public void testSelectTwoSpecificColumnOfEmbeddable(){
  persist();
  String query2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Query query=em.createQuery(query2);
  query.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<NetstatData> result=query.getResultList();
  Assert.assertNotNull(result);
  Assert.assertEquals(1,result.size());
  Assert.assertNotNull(result.get(0));
  Assert.assertNotNull(result.get(0).getId());
  Assert.assertEquals(CAPTURE_TIME,result.get(0).getId().getCaptureTime());
  Assert.assertEquals(""String_Node_Str"",result.get(0).getId().getServer());
  Assert.assertNull(result.get(0).getId().getPortMapId());
}","@Test public void testSelectTwoSpecificColumnOfEmbeddable(){
  persist();
  String query2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Query query=em.createQuery(query2);
  query.setParameter(""String_Node_Str"",""String_Node_Str"");
  query.setParameter(""String_Node_Str"",CAPTURE_TIME1);
  query.setParameter(""String_Node_Str"",CAPTURE_TIME3);
  List<NetstatData> result=query.getResultList();
  Assert.assertNotNull(result);
  Assert.assertEquals(3,result.size());
  Assert.assertNotNull(result.get(0));
  Assert.assertNotNull(result.get(0).getId());
  Assert.assertEquals(CAPTURE_TIME,result.get(0).getId().getCaptureTime());
  Assert.assertEquals(""String_Node_Str"",result.get(0).getId().getServer());
  Assert.assertNull(result.get(0).getId().getPortMapId());
}",0.6567323044172432
176720,"/** 
 */
private void persist(){
  NetstatData data=new NetstatData();
  NetstatDataId id=new NetstatDataId();
  id.setServer(""String_Node_Str"");
  data.setRowKey(""String_Node_Str"");
  id.setCaptureTime(CAPTURE_TIME);
  id.setPortMapTypeCd(""String_Node_Str"");
  data.setEstablished(1);
  data.setTotal(1);
  data.setId(id);
  em.persist(data);
  em.clear();
}","/** 
 */
private void persist(){
  NetstatData data=new NetstatData();
  NetstatDataId id=new NetstatDataId();
  id.setServer(""String_Node_Str"");
  data.setRowKey(""String_Node_Str"");
  id.setCaptureTime(CAPTURE_TIME);
  id.setPortMapTypeCd(""String_Node_Str"");
  data.setEstablished(1);
  data.setTotal(1);
  data.setId(id);
  em.persist(data);
  NetstatData data1=new NetstatData();
  NetstatDataId id1=new NetstatDataId();
  id1.setServer(""String_Node_Str"");
  data1.setRowKey(""String_Node_Str"");
  id1.setCaptureTime(CAPTURE_TIME1);
  id1.setPortMapTypeCd(""String_Node_Str"");
  data1.setEstablished(2);
  data1.setTotal(2);
  data1.setId(id1);
  em.persist(data1);
  NetstatData data2=new NetstatData();
  NetstatDataId id2=new NetstatDataId();
  id2.setServer(""String_Node_Str"");
  data2.setRowKey(""String_Node_Str"");
  id2.setCaptureTime(CAPTURE_TIME2);
  id2.setPortMapTypeCd(""String_Node_Str"");
  data2.setEstablished(3);
  data2.setTotal(3);
  data2.setId(id2);
  em.persist(data2);
  NetstatData data3=new NetstatData();
  NetstatDataId id3=new NetstatDataId();
  id3.setServer(""String_Node_Str"");
  data3.setRowKey(""String_Node_Str"");
  id3.setCaptureTime(CAPTURE_TIME3);
  id3.setPortMapTypeCd(""String_Node_Str"");
  data3.setEstablished(4);
  data3.setTotal(4);
  data3.setId(id3);
  em.persist(data3);
  em.clear();
}",0.4256075874333135
176721,"@Test public void testSelectOnlySpecificColumnOfEmbeddable(){
  persist();
  String query2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Query query=em.createQuery(query2);
  query.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<NetstatData> result=query.getResultList();
  Assert.assertNotNull(result);
  Assert.assertEquals(1,result.size());
  Assert.assertNotNull(result.get(0));
  Assert.assertNotNull(result.get(0).getId());
  Assert.assertEquals(CAPTURE_TIME,result.get(0).getId().getCaptureTime());
  Assert.assertNull(result.get(0).getId().getServer());
  Assert.assertNull(result.get(0).getId().getPortMapId());
}","@Test public void testSelectOnlySpecificColumnOfEmbeddable(){
  persist();
  String query2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Query query=em.createQuery(query2);
  query.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<NetstatData> result=query.getResultList();
  Assert.assertNotNull(result);
  Assert.assertEquals(2,result.size());
  Assert.assertNotNull(result.get(0));
  Assert.assertNotNull(result.get(0).getId());
  Assert.assertEquals(CAPTURE_TIME2,result.get(0).getId().getCaptureTime());
  Assert.assertNull(result.get(0).getId().getServer());
  Assert.assertNull(result.get(0).getId().getPortMapId());
}",0.9982089552238806
176722,"@Test public void testSelectEmbeddedColumn(){
  persist();
  String query2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Query query=em.createQuery(query2);
  query.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<NetstatData> result=query.getResultList();
  Assert.assertNotNull(result);
  Assert.assertEquals(1,result.size());
  Assert.assertNotNull(result.get(0));
  Assert.assertNotNull(result.get(0).getId());
  Assert.assertEquals(CAPTURE_TIME,result.get(0).getId().getCaptureTime());
  Assert.assertEquals(""String_Node_Str"",result.get(0).getId().getServer());
  Assert.assertNull(result.get(0).getId().getPortMapId());
}","@Test public void testSelectEmbeddedColumn(){
  persist();
  String query2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Query query=em.createQuery(query2);
  query.setParameter(""String_Node_Str"",""String_Node_Str"");
  List<NetstatData> result=query.getResultList();
  Assert.assertNotNull(result);
  Assert.assertEquals(2,result.size());
  Assert.assertNotNull(result.get(0));
  Assert.assertNotNull(result.get(0).getId());
  Assert.assertEquals(CAPTURE_TIME,result.get(0).getId().getCaptureTime());
  Assert.assertEquals(""String_Node_Str"",result.get(0).getId().getServer());
  Assert.assertNull(result.get(0).getId().getPortMapId());
}",0.9988109393579072
176723,"@Override protected void setUp() throws Exception {
}","@Override protected void setUp() throws Exception {
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  setUpInternal(""String_Node_Str"");
}",0.5326633165829145
176724,"/** 
 * Test on execute.
 */
@Test public void testOnExecute(){
}","/** 
 * Test on execute.
 */
@Test public void testOnExecute(){
  executeTestSuite();
}",0.8552631578947368
176725,"@Override protected void tearDown() throws Exception {
}","@Override protected void tearDown() throws Exception {
  tearDownInternal();
}",0.835820895522388
176726,"@Override public void closeEntityManager(){
  if (em != null) {
    em.close();
    em=null;
  }
}","@Override public void closeEntityManager(){
  if (em != null) {
    em.clear();
    em.close();
    em=null;
  }
}",0.9245283018867924
176727,"/** 
 * Adds the nodes to flush stack.
 * @param node the node
 * @param eventType the event type
 */
private void addNodesToFlushStack(Node node,EventType eventType){
  Map<NodeLink,Node> children=node.getChildren();
  if (children != null) {
    Map<NodeLink,Node> oneToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> oneToManyChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToManyChildren=new HashMap<NodeLink,Node>();
    for (    NodeLink nodeLink : children.keySet()) {
      Relation.ForeignKey multiplicity=nodeLink.getMultiplicity();
switch (multiplicity) {
case ONE_TO_ONE:
        oneToOneChildren.put(nodeLink,children.get(nodeLink));
      break;
case ONE_TO_MANY:
    oneToManyChildren.put(nodeLink,children.get(nodeLink));
  break;
case MANY_TO_ONE:
manyToOneChildren.put(nodeLink,children.get(nodeLink));
break;
case MANY_TO_MANY:
manyToManyChildren.put(nodeLink,children.get(nodeLink));
break;
}
}
for (NodeLink nodeLink : oneToManyChildren.keySet()) {
Node childNode=children.get(nodeLink);
if (childNode != null && !childNode.isTraversed()) {
addNodesToFlushStack(childNode,eventType);
}
}
for (NodeLink nodeLink : manyToManyChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
stackQueue.push(node);
logEvent(node,eventType);
}
Node childNode=children.get(nodeLink);
if (childNode != null) {
if (node.isDirty() && !node.isTraversed()) {
JoinTableMetadata jtmd=(JoinTableMetadata)nodeLink.getLinkProperty(LinkProperty.JOIN_TABLE_METADATA);
if (jtmd != null) {
String joinColumnName=(String)jtmd.getJoinColumns().toArray()[0];
String inverseJoinColumnName=(String)jtmd.getInverseJoinColumns().toArray()[0];
Object entityId=node.getEntityId();
Object childId=childNode.getEntityId();
Set<Object> childValues=new HashSet<Object>();
childValues.add(childId);
OPERATION operation=null;
if (node.getCurrentNodeState().getClass().equals(ManagedState.class)) {
operation=OPERATION.INSERT;
}
 else if (node.getCurrentNodeState().getClass().equals(RemovedState.class)) {
operation=OPERATION.DELETE;
}
addJoinTableData(operation,jtmd.getJoinTableSchema(),jtmd.getJoinTableName(),joinColumnName,inverseJoinColumnName,node.getDataClass(),entityId,childValues);
}
}
if (!childNode.isTraversed()) {
addNodesToFlushStack(childNode,eventType);
}
}
}
for (NodeLink nodeLink : oneToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
stackQueue.push(node);
logEvent(node,eventType);
Node childNode=children.get(nodeLink);
addNodesToFlushStack(childNode,eventType);
}
}
for (NodeLink nodeLink : manyToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
stackQueue.push(node);
logEvent(node,eventType);
}
Node childNode=children.get(nodeLink);
Map<NodeLink,Node> parents=childNode.getParents();
for (NodeLink parentLink : parents.keySet()) {
Relation.ForeignKey multiplicity=parentLink.getMultiplicity();
if (multiplicity.equals(Relation.ForeignKey.MANY_TO_ONE)) {
Node parentNode=parents.get(parentLink);
if (!parentNode.isTraversed() && parentNode.isDirty()) {
addNodesToFlushStack(parentNode,eventType);
}
}
}
if (!childNode.isTraversed() && childNode.isDirty()) {
addNodesToFlushStack(childNode,eventType);
}
 else if (!childNode.isDirty()) {
childNode.setTraversed(true);
stackQueue.push(childNode);
logEvent(childNode,eventType);
}
}
}
if (!node.isTraversed() && node.isDirty()) {
node.setTraversed(true);
stackQueue.push(node);
logEvent(node,eventType);
}
}","/** 
 * Adds the nodes to flush stack.
 * @param node the node
 * @param eventType the event type
 */
private void addNodesToFlushStack(Node node,EventType eventType){
  Map<NodeLink,Node> children=node.getChildren();
  if (children != null) {
    Map<NodeLink,Node> oneToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> oneToManyChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToManyChildren=new HashMap<NodeLink,Node>();
    for (    NodeLink nodeLink : children.keySet()) {
      Relation.ForeignKey multiplicity=nodeLink.getMultiplicity();
switch (multiplicity) {
case ONE_TO_ONE:
        oneToOneChildren.put(nodeLink,children.get(nodeLink));
      break;
case ONE_TO_MANY:
    oneToManyChildren.put(nodeLink,children.get(nodeLink));
  break;
case MANY_TO_ONE:
manyToOneChildren.put(nodeLink,children.get(nodeLink));
break;
case MANY_TO_MANY:
manyToManyChildren.put(nodeLink,children.get(nodeLink));
break;
}
}
for (NodeLink nodeLink : oneToManyChildren.keySet()) {
Node childNode=children.get(nodeLink);
if (childNode != null && !childNode.isTraversed()) {
addNodesToFlushStack(childNode,eventType);
}
}
for (NodeLink nodeLink : manyToManyChildren.keySet()) {
if (!node.isTraversed() && !(Boolean)nodeLink.getLinkProperty(LinkProperty.IS_RELATED_VIA_JOIN_TABLE)) {
node.setTraversed(true);
stackQueue.push(node);
logEvent(node,eventType);
}
Node childNode=children.get(nodeLink);
if (childNode != null) {
if (node.isDirty() && !node.isTraversed()) {
JoinTableMetadata jtmd=(JoinTableMetadata)nodeLink.getLinkProperty(LinkProperty.JOIN_TABLE_METADATA);
if (jtmd != null) {
String joinColumnName=(String)jtmd.getJoinColumns().toArray()[0];
String inverseJoinColumnName=(String)jtmd.getInverseJoinColumns().toArray()[0];
Object entityId=node.getEntityId();
Object childId=childNode.getEntityId();
Set<Object> childValues=new HashSet<Object>();
childValues.add(childId);
OPERATION operation=null;
if (node.getCurrentNodeState().getClass().equals(ManagedState.class)) {
operation=OPERATION.INSERT;
}
 else if (node.getCurrentNodeState().getClass().equals(RemovedState.class)) {
operation=OPERATION.DELETE;
}
addJoinTableData(operation,jtmd.getJoinTableSchema(),jtmd.getJoinTableName(),joinColumnName,inverseJoinColumnName,node.getDataClass(),entityId,childValues);
}
}
if (!childNode.isTraversed()) {
addNodesToFlushStack(childNode,eventType);
}
}
}
for (NodeLink nodeLink : oneToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
stackQueue.push(node);
logEvent(node,eventType);
Node childNode=children.get(nodeLink);
addNodesToFlushStack(childNode,eventType);
}
}
for (NodeLink nodeLink : manyToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
stackQueue.push(node);
logEvent(node,eventType);
}
Node childNode=children.get(nodeLink);
Map<NodeLink,Node> parents=childNode.getParents();
for (NodeLink parentLink : parents.keySet()) {
Relation.ForeignKey multiplicity=parentLink.getMultiplicity();
if (multiplicity.equals(Relation.ForeignKey.MANY_TO_ONE)) {
Node parentNode=parents.get(parentLink);
if (!parentNode.isTraversed() && parentNode.isDirty()) {
addNodesToFlushStack(parentNode,eventType);
}
}
}
if (!childNode.isTraversed() && childNode.isDirty()) {
addNodesToFlushStack(childNode,eventType);
}
 else if (!childNode.isDirty()) {
childNode.setTraversed(true);
stackQueue.push(childNode);
logEvent(childNode,eventType);
}
}
}
if (!node.isTraversed() && node.isDirty()) {
node.setTraversed(true);
stackQueue.push(node);
logEvent(node,eventType);
}
}",0.9890909090909092
176728,"/** 
 * Constructs and returns   {@link Node} representation for a given entityobject. Output is fully constructed graph with relationships embedded. Each node is put into <code>graph</code> once it is constructed.
 * @param entity
 * @return
 */
private Node getNode(Object entity,ObjectGraph graph,NodeState initialNodeState){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (entityMetadata == null) {
    return null;
  }
  Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
  String nodeId=ObjectGraphUtils.getNodeId(id,entity);
  Node node=graph.getNode(nodeId);
  if (node != null) {
    if (node.isGraphCompleted()) {
      return node;
    }
 else {
      return null;
    }
  }
  node=null;
  Node nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,entity,initialNodeState,persistenceCache,id);
  }
 else {
    node=nodeInPersistenceCache;
    if (!DeepEquals.deepEquals(node.getData(),entity)) {
      node.setData(entity);
      node.setDirty(true);
    }
 else {
      node.setDirty(false);
    }
  }
  graph.addNode(nodeId,node);
  for (  Relation relation : entityMetadata.getRelations()) {
    Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (childObject != null) {
      if (Collection.class.isAssignableFrom(childObject.getClass())) {
        Collection childrenObjects=(Collection)childObject;
        if (childrenObjects != null && !(childrenObjects instanceof PersistentCollection))         for (        Object childObj : childrenObjects) {
          if (childObj != null) {
            addChildNodesToGraph(graph,node,relation,childObj,initialNodeState);
          }
        }
      }
 else       if (Map.class.isAssignableFrom(childObject.getClass())) {
        Map childrenObjects=(Map)childObject;
        if (childrenObjects != null && !(childrenObjects instanceof PersistentCollection)) {
          for (          Map.Entry entry : (Set<Map.Entry>)childrenObjects.entrySet()) {
            addChildNodesToGraph(graph,node,relation,entry,initialNodeState);
          }
        }
      }
 else {
        addChildNodesToGraph(graph,node,relation,childObject,initialNodeState);
      }
    }
  }
  node.setGraphCompleted(true);
  return node;
}","/** 
 * Constructs and returns   {@link Node} representation for a given entityobject. Output is fully constructed graph with relationships embedded. Each node is put into <code>graph</code> once it is constructed.
 * @param entity
 * @return
 */
private Node getNode(Object entity,ObjectGraph graph,NodeState initialNodeState){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (entityMetadata == null) {
    return null;
  }
  Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
  String nodeId=ObjectGraphUtils.getNodeId(id,entity);
  Node node=graph.getNode(nodeId);
  if (node != null) {
    if (node.isGraphCompleted()) {
      return node;
    }
 else {
      return null;
    }
  }
  node=null;
  Node nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,entity,initialNodeState,persistenceCache,id);
  }
 else {
    node=nodeInPersistenceCache;
    if (!DeepEquals.deepEquals(node.getData(),entity)) {
      node.setData(entity);
      node.setDirty(true);
    }
 else     if (node.isProcessed()) {
      node.setDirty(false);
    }
  }
  graph.addNode(nodeId,node);
  for (  Relation relation : entityMetadata.getRelations()) {
    Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (childObject != null) {
      if (Collection.class.isAssignableFrom(childObject.getClass())) {
        Collection childrenObjects=(Collection)childObject;
        if (childrenObjects != null && !(childrenObjects instanceof PersistentCollection))         for (        Object childObj : childrenObjects) {
          if (childObj != null) {
            addChildNodesToGraph(graph,node,relation,childObj,initialNodeState);
          }
        }
      }
 else       if (Map.class.isAssignableFrom(childObject.getClass())) {
        Map childrenObjects=(Map)childObject;
        if (childrenObjects != null && !(childrenObjects instanceof PersistentCollection)) {
          for (          Map.Entry entry : (Set<Map.Entry>)childrenObjects.entrySet()) {
            addChildNodesToGraph(graph,node,relation,entry,initialNodeState);
          }
        }
      }
 else {
        addChildNodesToGraph(graph,node,relation,childObject,initialNodeState);
      }
    }
  }
  node.setGraphCompleted(true);
  return node;
}",0.9941176470588236
176729,"@Test public void testCRUD(){
  tryOperation(ALL_PUs_UNDER_TEST);
}","public void testCRUD(){
  tryOperation(ALL_PUs_UNDER_TEST);
}",0.953125
176730,"public void withTransaction(){
  try {
    prepareData();
    em.getTransaction().begin();
    em.persist(actor1);
    em.persist(actor2);
    em.getTransaction().commit();
    em.clear();
    Actor actor11=em.find(Actor.class,1);
    Actor actor22=em.find(Actor.class,2);
    assertActors(actor11,actor22);
    em.clear();
    actor1.setName(""String_Node_Str"");
    actor2.setName(""String_Node_Str"");
    em.getTransaction().begin();
    em.merge(actor1);
    em.merge(actor2);
    em.getTransaction().commit();
    em.clear();
    Actor actor1AfterMerge=em.find(Actor.class,1);
    Actor actor2AfterMerge=em.find(Actor.class,2);
    assertUpdatedActors(actor1AfterMerge,actor2AfterMerge);
    em.clear();
    em.getTransaction().begin();
    em.remove(actor11);
    em.getTransaction().commit();
    em.getTransaction().begin();
    em.remove(actor22);
    em.getTransaction().commit();
    em.clear();
    Actor actor1AfterDeletion=em.find(Actor.class,1);
    Actor actor2AfterDeletion=em.find(Actor.class,2);
    Assert.assertNull(actor1AfterDeletion);
    Assert.assertNull(actor2AfterDeletion);
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
}","@Test public void withTransaction(){
  try {
    prepareData();
    em.getTransaction().begin();
    em.persist(actor1);
    em.persist(actor2);
    em.getTransaction().commit();
    Actor actor11=em.find(Actor.class,1);
    Actor actor22=em.find(Actor.class,2);
    assertActors(actor11,actor22);
    em.clear();
    actor1.setName(""String_Node_Str"");
    actor2.setName(""String_Node_Str"");
    em.getTransaction().begin();
    em.merge(actor1);
    em.merge(actor2);
    em.getTransaction().commit();
    em.clear();
    Actor actor1AfterMerge=em.find(Actor.class,1);
    Actor actor2AfterMerge=em.find(Actor.class,2);
    assertUpdatedActors(actor1AfterMerge,actor2AfterMerge);
    em.clear();
    em.getTransaction().begin();
    em.remove(actor11);
    em.getTransaction().commit();
    em.getTransaction().begin();
    em.remove(actor22);
    em.getTransaction().commit();
    em.clear();
    Actor actor1AfterDeletion=em.find(Actor.class,1);
    Actor actor2AfterDeletion=em.find(Actor.class,2);
    Assert.assertNull(actor1AfterDeletion);
    Assert.assertNull(actor2AfterDeletion);
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
}",0.9905417024935512
176731,"public void rollbackBehavior(){
  prepareData();
  em.getTransaction().begin();
  em.persist(actor1);
  em.persist(actor2);
  em.getTransaction().rollback();
  em.clear();
  Actor actor11=em.find(Actor.class,1);
  Actor actor22=em.find(Actor.class,2);
  Assert.assertNull(actor11);
  Assert.assertNull(actor22);
}","@Test public void rollbackBehavior(){
  prepareData();
  em.getTransaction().begin();
  em.persist(actor1);
  em.persist(actor2);
  em.getTransaction().rollback();
  em.clear();
  Actor actor11=em.find(Actor.class,1);
  Actor actor22=em.find(Actor.class,2);
  Assert.assertNull(actor11);
  Assert.assertNull(actor22);
}",0.990506329113924
176732,"@Test public void rollbackBehaviorOnException(){
  prepareData();
  try {
    em.getTransaction().begin();
    em.persist(actor1);
    em.persist(actor2);
    em.getTransaction().commit();
    em.getTransaction().begin();
    actor1.setName(""String_Node_Str"");
    em.merge(actor1);
    em.merge(null);
    em.getTransaction().commit();
  }
 catch (  Exception e) {
    em.clear();
    Actor actor11=em.find(Actor.class,1);
    Actor actor22=em.find(Actor.class,2);
    Assert.assertNull(actor11);
    Assert.assertNull(actor22);
  }
}","@Test public void rollbackBehaviorOnException(){
  prepareData();
  try {
    em.getTransaction().begin();
    em.persist(actor1);
    em.persist(actor2);
    em.getTransaction().commit();
    em.getTransaction().begin();
    actor1.setName(""String_Node_Str"");
    actor2.setName(""String_Node_Str"");
    em.merge(actor1);
    em.merge(null);
    em.merge(actor2);
    em.getTransaction().commit();
  }
 catch (  Exception e) {
    em.clear();
    Actor actor11=em.find(Actor.class,1);
    Actor actor22=em.find(Actor.class,2);
    Assert.assertNotNull(actor11);
    Assert.assertNotNull(actor22);
    Assert.assertEquals(""String_Node_Str"",actor11.getName());
    Assert.assertNotSame(""String_Node_Str"",actor22.getName());
  }
}",0.8478605388272583
176733,"public void withoutTransaction(){
  prepareData();
  try {
    em.persist(actor1);
    em.persist(actor2);
  }
 catch (  Exception e) {
    Assert.assertTrue(e.getCause().toString().indexOf(NotInTransactionException.class.getSimpleName()) >= 0);
  }
  em.clear();
  Actor actor11=em.find(Actor.class,1);
  Actor actor22=em.find(Actor.class,2);
  Assert.assertNull(actor11);
  Assert.assertNull(actor22);
}","@Test public void withoutTransaction(){
  prepareData();
  try {
    em.persist(actor1);
    em.persist(actor2);
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertTrue(e.getMessage().toString().indexOf(""String_Node_Str"") >= 0);
  }
  em.clear();
  Actor actor11=em.find(Actor.class,1);
  Actor actor22=em.find(Actor.class,2);
  Assert.assertNull(actor11);
  Assert.assertNull(actor22);
  em.getTransaction().begin();
  em.remove(actor1);
  em.remove(actor2);
  em.getTransaction().commit();
}",0.7828947368421053
176734,"@Override public void onCommit(){
  onFlush();
  isActive=false;
}","@Override public void onCommit(){
  onFlush();
  nodes.clear();
  nodes=null;
  nodes=new ArrayList<Node>();
  isActive=false;
}",0.6804123711340206
176735,"public void commit(){
  doFlush();
  execute();
  isTransactionInProgress=false;
}","public void commit(){
  execute();
  flushManager.commit();
  flushManager.clearFlushStack();
  isTransactionInProgress=false;
}",0.6571428571428571
176736,"/** 
 * Release/return connection to pool.
 * @param res jedis resource
 */
void releaseConnection(Jedis res){
  logger.info(""String_Node_Str"");
  Object poolOrConnection=getConnectionPoolOrConnection();
  if (poolOrConnection instanceof JedisPoolConfig) {
    ((JedisPool)poolOrConnection).returnResource(res);
  }
}","/** 
 * Release/return connection to pool.
 * @param res jedis resource
 */
void releaseConnection(Jedis res){
  logger.info(""String_Node_Str"");
  Object poolOrConnection=getConnectionPoolOrConnection();
  if (poolOrConnection instanceof JedisPool) {
    ((JedisPool)poolOrConnection).returnResource(res);
  }
}",0.9904458598726116
176737,"@Override public void destroy(){
  logger.info(""String_Node_Str"");
  if (getConnectionPoolOrConnection() != null && getConnectionPoolOrConnection() instanceof JedisPoolConfig) {
    ((JedisPool)getConnectionPoolOrConnection()).destroy();
  }
}","@Override public void destroy(){
  logger.info(""String_Node_Str"");
  if (getConnectionPoolOrConnection() != null && getConnectionPoolOrConnection() instanceof JedisPool) {
    ((JedisPool)getConnectionPoolOrConnection()).destroy();
  }
}",0.9875
176738,"/** 
 * Retrieving connection from connection pool.
 * @return returns jedis instance.
 */
Jedis getConnection(){
  logger.info(""String_Node_Str"");
  Object poolOrConnection=getConnectionPoolOrConnection();
  if (poolOrConnection instanceof JedisPoolConfig) {
    connection=((JedisPool)getConnectionPoolOrConnection()).getResource();
    Map props=RedisPropertyReader.rsmd.getProperties();
    if (props != null) {
      for (      Object key : props.keySet()) {
        connection.configSet(key.toString(),props.get(key).toString());
      }
    }
    return connection;
  }
 else {
    return (Jedis)poolOrConnection;
  }
}","/** 
 * Retrieving connection from connection pool.
 * @return returns jedis instance.
 */
Jedis getConnection(){
  logger.info(""String_Node_Str"");
  Object poolOrConnection=getConnectionPoolOrConnection();
  if (poolOrConnection instanceof JedisPool) {
    connection=((JedisPool)getConnectionPoolOrConnection()).getResource();
    Map props=RedisPropertyReader.rsmd.getProperties();
    if (props != null) {
      for (      Object key : props.keySet()) {
        connection.configSet(key.toString(),props.get(key).toString());
      }
    }
    return connection;
  }
 else {
    return (Jedis)poolOrConnection;
  }
}",0.9951845906902088
176739,"/** 
 * On flusing join table data
 */
private void flushJoinTableData(){
  if (applyFlush()) {
    Map<String,JoinTableData> joinTableDataMap=flushManager.getJoinTableDataMap();
    for (    JoinTableData jtData : joinTableDataMap.values()) {
      if (!jtData.isProcessed()) {
        EntityMetadata m=KunderaMetadataManager.getEntityMetadata(jtData.getEntityClass());
        Client client=getClient(m);
        if (OPERATION.INSERT.equals(jtData.getOperation())) {
          client.persistJoinTable(jtData);
          jtData.setProcessed(true);
        }
 else         if (OPERATION.DELETE.equals(jtData.getOperation())) {
          for (          Object pk : jtData.getJoinTableRecords().keySet()) {
            client.deleteByColumn(jtData.getSchemaName(),jtData.getJoinTableName(),((AbstractAttribute)m.getIdAttribute()).getJPAColumnName(),pk);
          }
          jtData.setProcessed(true);
        }
      }
    }
  }
}","/** 
 * On flusing join table data
 */
private void flushJoinTableData(){
  if (applyFlush()) {
    for (    JoinTableData jtData : flushManager.getJoinTableData()) {
      if (!jtData.isProcessed()) {
        EntityMetadata m=KunderaMetadataManager.getEntityMetadata(jtData.getEntityClass());
        Client client=getClient(m);
        if (OPERATION.INSERT.equals(jtData.getOperation())) {
          client.persistJoinTable(jtData);
          jtData.setProcessed(true);
        }
 else         if (OPERATION.DELETE.equals(jtData.getOperation())) {
          for (          Object pk : jtData.getJoinTableRecords().keySet()) {
            client.deleteByColumn(jtData.getSchemaName(),jtData.getJoinTableName(),((AbstractAttribute)m.getIdAttribute()).getJPAColumnName(),pk);
          }
          jtData.setProcessed(true);
        }
      }
    }
  }
}",0.9355019629837352
176740,"/** 
 * Adds the nodes to flush stack.
 * @param node the node
 * @param eventType the event type
 */
private void addNodesToFlushStack(Node node,EventType eventType){
  Map<NodeLink,Node> children=node.getChildren();
  if (children != null) {
    Map<NodeLink,Node> oneToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> oneToManyChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToManyChildren=new HashMap<NodeLink,Node>();
    for (    NodeLink nodeLink : children.keySet()) {
      Relation.ForeignKey multiplicity=nodeLink.getMultiplicity();
switch (multiplicity) {
case ONE_TO_ONE:
        oneToOneChildren.put(nodeLink,children.get(nodeLink));
      break;
case ONE_TO_MANY:
    oneToManyChildren.put(nodeLink,children.get(nodeLink));
  break;
case MANY_TO_ONE:
manyToOneChildren.put(nodeLink,children.get(nodeLink));
break;
case MANY_TO_MANY:
manyToManyChildren.put(nodeLink,children.get(nodeLink));
break;
}
}
for (NodeLink nodeLink : oneToManyChildren.keySet()) {
Node childNode=children.get(nodeLink);
if (!childNode.isTraversed()) {
addNodesToFlushStack(childNode,eventType);
}
}
for (NodeLink nodeLink : manyToManyChildren.keySet()) {
Node childNode=children.get(nodeLink);
if (childNode != null) {
if (node.isDirty() && !node.isTraversed()) {
JoinTableMetadata jtmd=(JoinTableMetadata)nodeLink.getLinkProperty(LinkProperty.JOIN_TABLE_METADATA);
if (jtmd != null) {
String joinColumnName=(String)jtmd.getJoinColumns().toArray()[0];
String inverseJoinColumnName=(String)jtmd.getInverseJoinColumns().toArray()[0];
Object entityId=node.getEntityId();
Object childId=childNode.getEntityId();
Set<Object> childValues=new HashSet<Object>();
childValues.add(childId);
OPERATION operation=null;
if (node.getCurrentNodeState().getClass().equals(ManagedState.class)) {
operation=OPERATION.INSERT;
}
 else if (node.getCurrentNodeState().getClass().equals(RemovedState.class)) {
operation=OPERATION.DELETE;
}
addJoinTableDataIntoMap(operation,jtmd.getJoinTableSchema(),jtmd.getJoinTableName(),joinColumnName,inverseJoinColumnName,node.getDataClass(),entityId,childValues);
}
}
if (!childNode.isTraversed()) {
addNodesToFlushStack(childNode,eventType);
}
}
}
for (NodeLink nodeLink : oneToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
flushStack.push(node);
logEvent(node,eventType);
Node childNode=children.get(nodeLink);
addNodesToFlushStack(childNode,eventType);
}
}
for (NodeLink nodeLink : manyToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
flushStack.push(node);
logEvent(node,eventType);
}
Node childNode=children.get(nodeLink);
Map<NodeLink,Node> parents=childNode.getParents();
for (NodeLink parentLink : parents.keySet()) {
Relation.ForeignKey multiplicity=parentLink.getMultiplicity();
if (multiplicity.equals(Relation.ForeignKey.MANY_TO_ONE)) {
Node parentNode=parents.get(parentLink);
if (!parentNode.isTraversed() && parentNode.isDirty()) {
addNodesToFlushStack(parentNode,eventType);
}
}
}
if (!childNode.isTraversed() && childNode.isDirty()) {
addNodesToFlushStack(childNode,eventType);
}
 else if (!childNode.isDirty()) {
childNode.setTraversed(true);
flushStack.push(childNode);
logEvent(childNode,eventType);
}
}
}
if (!node.isTraversed() && node.isDirty()) {
node.setTraversed(true);
flushStack.push(node);
logEvent(node,eventType);
}
}","/** 
 * Adds the nodes to flush stack.
 * @param node the node
 * @param eventType the event type
 */
private void addNodesToFlushStack(Node node,EventType eventType){
  Map<NodeLink,Node> children=node.getChildren();
  if (children != null) {
    Map<NodeLink,Node> oneToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> oneToManyChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToManyChildren=new HashMap<NodeLink,Node>();
    for (    NodeLink nodeLink : children.keySet()) {
      Relation.ForeignKey multiplicity=nodeLink.getMultiplicity();
switch (multiplicity) {
case ONE_TO_ONE:
        oneToOneChildren.put(nodeLink,children.get(nodeLink));
      break;
case ONE_TO_MANY:
    oneToManyChildren.put(nodeLink,children.get(nodeLink));
  break;
case MANY_TO_ONE:
manyToOneChildren.put(nodeLink,children.get(nodeLink));
break;
case MANY_TO_MANY:
manyToManyChildren.put(nodeLink,children.get(nodeLink));
break;
}
}
for (NodeLink nodeLink : oneToManyChildren.keySet()) {
Node childNode=children.get(nodeLink);
if (!childNode.isTraversed()) {
addNodesToFlushStack(childNode,eventType);
}
}
for (NodeLink nodeLink : manyToManyChildren.keySet()) {
Node childNode=children.get(nodeLink);
if (childNode != null) {
if (node.isDirty() && !node.isTraversed()) {
JoinTableMetadata jtmd=(JoinTableMetadata)nodeLink.getLinkProperty(LinkProperty.JOIN_TABLE_METADATA);
if (jtmd != null) {
String joinColumnName=(String)jtmd.getJoinColumns().toArray()[0];
String inverseJoinColumnName=(String)jtmd.getInverseJoinColumns().toArray()[0];
Object entityId=node.getEntityId();
Object childId=childNode.getEntityId();
Set<Object> childValues=new HashSet<Object>();
childValues.add(childId);
OPERATION operation=null;
if (node.getCurrentNodeState().getClass().equals(ManagedState.class)) {
operation=OPERATION.INSERT;
}
 else if (node.getCurrentNodeState().getClass().equals(RemovedState.class)) {
operation=OPERATION.DELETE;
}
addJoinTableData(operation,jtmd.getJoinTableSchema(),jtmd.getJoinTableName(),joinColumnName,inverseJoinColumnName,node.getDataClass(),entityId,childValues);
}
}
if (!childNode.isTraversed()) {
addNodesToFlushStack(childNode,eventType);
}
}
}
for (NodeLink nodeLink : oneToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
flushStack.push(node);
logEvent(node,eventType);
Node childNode=children.get(nodeLink);
addNodesToFlushStack(childNode,eventType);
}
}
for (NodeLink nodeLink : manyToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
flushStack.push(node);
logEvent(node,eventType);
}
Node childNode=children.get(nodeLink);
Map<NodeLink,Node> parents=childNode.getParents();
for (NodeLink parentLink : parents.keySet()) {
Relation.ForeignKey multiplicity=parentLink.getMultiplicity();
if (multiplicity.equals(Relation.ForeignKey.MANY_TO_ONE)) {
Node parentNode=parents.get(parentLink);
if (!parentNode.isTraversed() && parentNode.isDirty()) {
addNodesToFlushStack(parentNode,eventType);
}
}
}
if (!childNode.isTraversed() && childNode.isDirty()) {
addNodesToFlushStack(childNode,eventType);
}
 else if (!childNode.isDirty()) {
childNode.setTraversed(true);
flushStack.push(childNode);
logEvent(childNode,eventType);
}
}
}
if (!node.isTraversed() && node.isDirty()) {
node.setTraversed(true);
flushStack.push(node);
logEvent(node,eventType);
}
}",0.998975259844825
176741,"/** 
 * Instantiates a new flush manager.
 */
public FlushManager(){
  flushStack=new FlushStack();
  joinTableDataMap=new HashMap<String,JoinTableData>();
}","/** 
 * Instantiates a new flush manager.
 */
public FlushManager(){
  flushStack=new FlushStack();
}",0.7829457364341085
176742,"/** 
 * Empties Flush stack present in a PersistenceCache.
 */
public void clearFlushStack(){
  if (flushStack != null && !flushStack.isEmpty()) {
    flushStack.clear();
  }
  if (joinTableDataMap != null && !joinTableDataMap.isEmpty()) {
    joinTableDataMap.clear();
  }
  if (eventLogQueue != null) {
    eventLogQueue.clear();
  }
}","/** 
 * Empties Flush stack present in a PersistenceCache.
 */
public void clearFlushStack(){
  if (flushStack != null && !flushStack.isEmpty()) {
    flushStack.clear();
  }
  if (joinTableDataCollection != null && !joinTableDataCollection.isEmpty()) {
    joinTableDataCollection.clear();
  }
  if (eventLogQueue != null) {
    eventLogQueue.clear();
  }
}",0.943884892086331
176743,"private void rollbackJoinTableData(PersistenceDelegator delegator){
  Map<String,JoinTableData> joinTableDataMap=getJoinTableDataMap();
  for (  JoinTableData jtData : joinTableDataMap.values()) {
    if (jtData.isProcessed()) {
      EntityMetadata m=KunderaMetadataManager.getEntityMetadata(jtData.getEntityClass());
      Client client=delegator.getClient(m);
      if (OPERATION.INSERT.equals(jtData.getOperation())) {
        for (        Object pk : jtData.getJoinTableRecords().keySet()) {
          client.deleteByColumn(jtData.getSchemaName(),jtData.getJoinTableName(),m.getIdAttribute().getName(),pk);
        }
      }
 else       if (OPERATION.DELETE.equals(jtData.getOperation())) {
        client.persistJoinTable(jtData);
      }
    }
  }
  joinTableDataMap.clear();
  joinTableDataMap=null;
  joinTableDataMap=new HashMap<String,JoinTableData>();
}","private void rollbackJoinTableData(PersistenceDelegator delegator){
  for (  JoinTableData jtData : joinTableDataCollection) {
    if (jtData.isProcessed()) {
      EntityMetadata m=KunderaMetadataManager.getEntityMetadata(jtData.getEntityClass());
      Client client=delegator.getClient(m);
      if (OPERATION.INSERT.equals(jtData.getOperation())) {
        for (        Object pk : jtData.getJoinTableRecords().keySet()) {
          client.deleteByColumn(jtData.getSchemaName(),jtData.getJoinTableName(),m.getIdAttribute().getName(),pk);
        }
      }
 else       if (OPERATION.DELETE.equals(jtData.getOperation())) {
        client.persistJoinTable(jtData);
      }
    }
  }
  joinTableDataCollection.clear();
  joinTableDataCollection=null;
  joinTableDataCollection=new ArrayList<JoinTableData>();
}",0.9009546539379476
176744,"/** 
 * Finds ands returns Entity metadata for a given array of PUs.
 * @param entityClass the entity class
 * @param persistenceUnits the persistence units
 * @return the entity metadata
 */
public static EntityMetadata getEntityMetadata(Class entityClass){
  List<String> persistenceUnits=KunderaMetadata.INSTANCE.getApplicationMetadata().getMappedPersistenceUnit(entityClass);
  if (persistenceUnits != null) {
    for (    String pu : persistenceUnits) {
      MetamodelImpl metamodel=getMetamodel(pu);
      EntityMetadata metadata=metamodel.getEntityMetadata(entityClass);
      if (metadata != null && metadata.getPersistenceUnit().equals(pu)) {
        return metadata;
      }
    }
  }
  log.warn(""String_Node_Str"" + entityClass + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  return null;
}","/** 
 * Finds ands returns Entity metadata for a given array of PUs.
 * @param entityClass the entity class
 * @param persistenceUnits the persistence units
 * @return the entity metadata
 */
public static EntityMetadata getEntityMetadata(Class entityClass){
  List<String> persistenceUnits=KunderaMetadata.INSTANCE.getApplicationMetadata().getMappedPersistenceUnit(entityClass);
  if (persistenceUnits != null) {
    for (    String pu : persistenceUnits) {
      MetamodelImpl metamodel=getMetamodel(pu);
      EntityMetadata metadata=metamodel.getEntityMetadata(entityClass);
      if (metadata != null && metadata.getPersistenceUnit().equals(pu)) {
        return metadata;
      }
    }
  }
  if (log.isDebugEnabled())   log.warn(""String_Node_Str"" + entityClass + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  return null;
}",0.983490566037736
176745,"/** 
 * Flushes Dirty objects in   {@link PersistenceCache} to databases.
 */
public void flush(){
  Deque<Node> fs=flushManager.getFlushStack();
  log.debug(""String_Node_Str"" + fs);
  if (fs != null) {
    boolean isBatch=false;
    while (!fs.isEmpty()) {
      Node node=fs.pop();
      if (node.isInState(ManagedState.class) || node.isInState(RemovedState.class)) {
        EntityMetadata metadata=getMetadata(node.getDataClass());
        node.setClient(getClient(metadata));
        if ((node.getClient() instanceof Batcher) && ((Batcher)(node.getClient())).getBatchSize() > 0) {
          isBatch=true;
          ((Batcher)(node.getClient())).addBatch(node);
        }
 else         if (flushMode.equals(FlushModeType.AUTO) || enableFlush) {
          if (isTransactionInProgress && defaultTransactionSupported(metadata.getPersistenceUnit())) {
            onSynchronization(node,metadata);
          }
 else {
            node.flush();
          }
        }
        Map<NodeLink,Node> parents=node.getParents();
        Map<NodeLink,Node> children=node.getChildren();
        if (parents != null && !parents.isEmpty()) {
          for (          NodeLink parentNodeLink : parents.keySet()) {
            parentNodeLink.addLinkProperty(LinkProperty.LINK_VALUE,node.getEntityId());
          }
        }
        if (children != null && !children.isEmpty()) {
          for (          NodeLink childNodeLink : children.keySet()) {
            childNodeLink.addLinkProperty(LinkProperty.LINK_VALUE,node.getEntityId());
          }
        }
      }
    }
    if (!isBatch) {
      flushJoinTableData();
    }
  }
}","/** 
 * Flushes Dirty objects in   {@link PersistenceCache} to databases.
 */
public void flush(){
  Deque<Node> fs=flushManager.getFlushStack();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + fs);
  }
  if (fs != null) {
    boolean isBatch=false;
    while (!fs.isEmpty()) {
      Node node=fs.pop();
      if (node.isInState(ManagedState.class) || node.isInState(RemovedState.class)) {
        EntityMetadata metadata=getMetadata(node.getDataClass());
        node.setClient(getClient(metadata));
        if ((node.getClient() instanceof Batcher) && ((Batcher)(node.getClient())).getBatchSize() > 0) {
          isBatch=true;
          ((Batcher)(node.getClient())).addBatch(node);
        }
 else         if (flushMode.equals(FlushModeType.AUTO) || enableFlush) {
          if (isTransactionInProgress && defaultTransactionSupported(metadata.getPersistenceUnit())) {
            onSynchronization(node,metadata);
          }
 else {
            node.flush();
          }
        }
        Map<NodeLink,Node> parents=node.getParents();
        Map<NodeLink,Node> children=node.getChildren();
        if (parents != null && !parents.isEmpty()) {
          for (          NodeLink parentNodeLink : parents.keySet()) {
            parentNodeLink.addLinkProperty(LinkProperty.LINK_VALUE,node.getEntityId());
          }
        }
        if (children != null && !children.isEmpty()) {
          for (          NodeLink childNodeLink : children.keySet()) {
            childNodeLink.addLinkProperty(LinkProperty.LINK_VALUE,node.getEntityId());
          }
        }
      }
    }
    if (!isBatch) {
      flushJoinTableData();
    }
  }
}",0.988997555012225
176746,"/** 
 * Writes an entity into Persistence cache. (Actual database write is done while flushing)
 */
public void persist(Object e){
  if (!validator.isValidEntityObject(e)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  EntityMetadata metadata=getMetadata(e.getClass());
  getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new TransientState());
  Node node=graph.getHeadNode();
  lock.writeLock().lock();
  node.persist();
  if (node.isHeadNode()) {
    flushManager.buildFlushStack(node,com.impetus.kundera.persistence.context.EventLog.EventType.INSERT);
    flush();
    getPersistenceCache().getMainCache().addHeadNode(node);
  }
  lock.writeLock().unlock();
  graph.clear();
  graph=null;
  getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
  log.debug(""String_Node_Str"" + e.getClass());
}","/** 
 * Writes an entity into Persistence cache. (Actual database write is done while flushing)
 */
public void persist(Object e){
  if (!validator.isValidEntityObject(e)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  EntityMetadata metadata=getMetadata(e.getClass());
  getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new TransientState());
  Node node=graph.getHeadNode();
  lock.writeLock().lock();
  node.persist();
  if (node.isHeadNode()) {
    flushManager.buildFlushStack(node,com.impetus.kundera.persistence.context.EventLog.EventType.INSERT);
    flush();
    getPersistenceCache().getMainCache().addHeadNode(node);
  }
  lock.writeLock().unlock();
  graph.clear();
  graph=null;
  getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + e.getClass());
  }
}",0.980477223427332
176747,"private void logCacheEvent(String eventType,String nodeId){
  log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ eventType+ ""String_Node_Str"");
}","private void logCacheEvent(String eventType,String nodeId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ eventType+ ""String_Node_Str"");
  }
}",0.8941176470588236
176748,"/** 
 * Populate via thrift.
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param relations the relations
 * @param thriftColumnName the thrift column name
 * @param thriftColumnValue the thrift column value
 */
private void populateViaThrift(EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,Map<String,Object> relations,String thriftColumnName,Object thriftColumnValue){
  if (relationNames == null || !relationNames.contains(thriftColumnName)) {
    if (thriftColumnValue != null) {
      String fieldName=m.getFieldName(thriftColumnName);
      Attribute attribute=fieldName != null ? entityType.getAttribute(fieldName) : null;
      if (attribute != null) {
        setFieldValue(entity,thriftColumnValue,attribute);
      }
 else {
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
        if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
          EmbeddableType compoundKey=metaModel.embeddable(m.getIdAttribute().getBindableJavaType());
          try {
            Object compoundKeyObject=PropertyAccessorHelper.getObject(entity,(Field)m.getIdAttribute().getJavaMember());
            if (compoundKeyObject == null) {
              compoundKeyObject=m.getIdAttribute().getBindableJavaType().newInstance();
            }
            Set<Attribute> attributes=compoundKey.getAttributes();
            for (            Attribute compoundAttribute : attributes) {
              if (((AbstractAttribute)compoundAttribute).getJPAColumnName().equals(thriftColumnName)) {
                setFieldValueViaCQL(compoundKeyObject,thriftColumnValue,compoundAttribute);
                PropertyAccessorHelper.set(entity,(Field)m.getIdAttribute().getJavaMember(),compoundKeyObject);
                break;
              }
            }
          }
 catch (          IllegalArgumentException iaex) {
          }
catch (          InstantiationException e) {
            e.printStackTrace();
          }
catch (          IllegalAccessException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
 else {
    if (relationNames != null && relationNames.contains(thriftColumnName) && thriftColumnValue != null) {
      String fieldName=m.getFieldName(thriftColumnName);
      Attribute attribute=fieldName != null ? entityType.getAttribute(fieldName) : null;
      EntityMetadata relationMetadata=KunderaMetadataManager.getEntityMetadata(attribute.getJavaType());
      Object value=PropertyAccessorHelper.getObject(relationMetadata.getIdAttribute().getJavaType(),(byte[])thriftColumnValue);
      relations.put(thriftColumnName,value);
    }
  }
}","/** 
 * Populate via thrift.
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param relations the relations
 * @param thriftColumnName the thrift column name
 * @param thriftColumnValue the thrift column value
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private Object populateViaThrift(EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,Map<String,Object> relations,String thriftColumnName,Object thriftColumnValue) throws InstantiationException, IllegalAccessException {
  if (relationNames == null || !relationNames.contains(thriftColumnName)) {
    if (thriftColumnValue != null) {
      String fieldName=m.getFieldName(thriftColumnName);
      Attribute attribute=fieldName != null ? entityType.getAttribute(fieldName) : null;
      if (attribute != null) {
        entity=initialize(m,entity,null);
        setFieldValue(entity,thriftColumnValue,attribute);
      }
 else {
        MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
        if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
          entity=initialize(m,entity,null);
          EmbeddableType compoundKey=metaModel.embeddable(m.getIdAttribute().getBindableJavaType());
          try {
            Object compoundKeyObject=PropertyAccessorHelper.getObject(entity,(Field)m.getIdAttribute().getJavaMember());
            if (compoundKeyObject == null) {
              compoundKeyObject=m.getIdAttribute().getBindableJavaType().newInstance();
            }
            Set<Attribute> attributes=compoundKey.getAttributes();
            for (            Attribute compoundAttribute : attributes) {
              if (((AbstractAttribute)compoundAttribute).getJPAColumnName().equals(thriftColumnName)) {
                setFieldValueViaCQL(compoundKeyObject,thriftColumnValue,compoundAttribute);
                PropertyAccessorHelper.set(entity,(Field)m.getIdAttribute().getJavaMember(),compoundKeyObject);
                break;
              }
            }
          }
 catch (          IllegalArgumentException iaex) {
          }
catch (          InstantiationException e) {
            e.printStackTrace();
          }
catch (          IllegalAccessException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
 else {
    if (relationNames != null && relationNames.contains(thriftColumnName) && thriftColumnValue != null) {
      String fieldName=m.getFieldName(thriftColumnName);
      Attribute attribute=fieldName != null ? entityType.getAttribute(fieldName) : null;
      EntityMetadata relationMetadata=KunderaMetadataManager.getEntityMetadata(attribute.getJavaType());
      Object value=PropertyAccessorHelper.getObject(relationMetadata.getIdAttribute().getJavaType(),(byte[])thriftColumnValue);
      relations.put(thriftColumnName,value);
    }
  }
  return entity;
}",0.9592822636300896
176749,"/** 
 * On column.
 * @param column the column
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @param relations the relations
 */
private void onColumn(Column column,EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,boolean isWrapReq,Map<String,Object> relations){
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
  byte[] thriftColumnValue=column.getValue();
  populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,thriftColumnValue);
}","/** 
 * On column.
 * @param column the column
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @param relations the relations
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private Object onColumn(Column column,EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,boolean isWrapReq,Map<String,Object> relations) throws InstantiationException, IllegalAccessException {
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
  byte[] thriftColumnValue=column.getValue();
  return populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,thriftColumnValue);
}",0.7810304449648712
176750,"/** 
 * On counter column.
 * @param column the column
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @param relations the relations
 */
private void onCounterColumn(CounterColumn column,EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,boolean isWrapReq,Map<String,Object> relations){
  String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
  String thriftColumnValue=new Long(column.getValue()).toString();
  populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,thriftColumnValue);
}","/** 
 * On counter column.
 * @param column the column
 * @param m the m
 * @param entity the entity
 * @param entityType the entity type
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @param relations the relations
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private void onCounterColumn(CounterColumn column,EntityMetadata m,Object entity,EntityType entityType,List<String> relationNames,boolean isWrapReq,Map<String,Object> relations) throws InstantiationException, IllegalAccessException {
  String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
  String thriftColumnValue=new Long(column.getValue()).toString();
  populateViaThrift(m,entity,entityType,relationNames,relations,thriftColumnName,thriftColumnValue);
}",0.9194499017681728
176751,"/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        entity=initialize(tr,m,entity);
        onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations);
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(tr,m,entity);
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(tr,m,entity);
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(tr,m,entity);
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  InstantiationException iex) {
    log.error(""String_Node_Str"" + iex.getMessage());
    throw new PersistenceException(iex);
  }
catch (  IllegalAccessException iaex) {
    log.error(""String_Node_Str"" + iaex.getMessage());
    throw new PersistenceException(iaex);
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}","/** 
 * Populate entity.
 * @param tr the tr
 * @param m the m
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 */
public Object populateEntity(ThriftRow tr,EntityMetadata m,List<String> relationNames,boolean isWrapReq){
  Map<String,Object> relations=new HashMap<String,Object>();
  Object entity=null;
  try {
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(m.getEntityClazz());
    for (    Column column : tr.getColumns()) {
      if (column != null) {
        entity=onColumn(column,m,entity,entityType,relationNames,isWrapReq,relations);
      }
    }
    Collection embeddedCollection=null;
    Field embeddedCollectionField=null;
    boolean mappingProcessed=false;
    Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
    Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
    for (    SuperColumn superColumn : tr.getSuperColumns()) {
      if (superColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,superColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObject,columnNameToFieldMap);
          Collection collection=PropertyAccessorHelper.getCollectionInstance(embeddedCollectionField);
          collection.add(embeddedObject);
          PropertyAccessorHelper.set(entity,embeddedCollectionField,collection);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverSuperColumn(m,relationNames,isWrapReq,relations,entityType,superColumn,entity);
          }
        }
      }
    }
    mappingProcessed=false;
    for (    CounterColumn counterColumn : tr.getCounterColumns()) {
      if (counterColumn != null) {
        entity=initialize(m,entity,tr.getId());
        onCounterColumn(counterColumn,m,entity,entityType,relationNames,isWrapReq,relations);
      }
    }
    for (    CounterSuperColumn counterSuperColumn : tr.getCounterSuperColumns()) {
      if (counterSuperColumn != null) {
        entity=initialize(m,entity,tr.getId());
        String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,counterSuperColumn.getName());
        String scNamePrefix=null;
        Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
        if (!mappingProcessed) {
          MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
          mappingProcessed=true;
        }
        if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
          scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
          embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
          if (embeddedCollection == null) {
            embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
          }
          Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObject,columnNameToFieldMap);
          embeddedCollection.add(embeddedObject);
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
        }
 else {
          if (superColumnNameToFieldMap.containsKey(scName)) {
            Field field=superColumnNameToFieldMap.get(scName);
            Object embeddedObj=field.getType().newInstance();
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,embeddedObj,columnNameToFieldMap);
            PropertyAccessorHelper.set(entity,field,embeddedObj);
          }
 else {
            scrollOverCounterSuperColumn(m,relationNames,isWrapReq,relations,entityType,counterSuperColumn,entity);
          }
        }
      }
    }
    if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
      PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
    }
  }
 catch (  InstantiationException iex) {
    log.error(""String_Node_Str"" + iex.getMessage());
    throw new PersistenceException(iex);
  }
catch (  IllegalAccessException iaex) {
    log.error(""String_Node_Str"" + iaex.getMessage());
    throw new PersistenceException(iaex);
  }
  if (entity != null && tr.getId() != null) {
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}",0.9768718801996672
176752,"/** 
 * Initialize.
 * @param tr the tr
 * @param m the m
 * @param entity the entity
 * @return the object
 * @throws InstantiationException the instantiation exception
 * @throws IllegalAccessException the illegal access exception
 */
private Object initialize(ThriftRow tr,EntityMetadata m,Object entity) throws InstantiationException, IllegalAccessException {
  if (entity == null) {
    entity=m.getEntityClazz().newInstance();
    PropertyAccessorHelper.setId(entity,m,tr.getId());
  }
  return entity;
}","/** 
 * Initialize.
 * @param tr the tr
 * @param m the m
 * @param entity the entity
 * @param tr
 * @return the object
 * @throws InstantiationException the instantiation exception
 * @throws IllegalAccessException the illegal access exception
 */
private Object initialize(EntityMetadata m,Object entity,Object id) throws InstantiationException, IllegalAccessException {
  if (entity == null) {
    entity=m.getEntityClazz().newInstance();
    if (id != null) {
      PropertyAccessorHelper.setId(entity,m,id);
    }
  }
  return entity;
}",0.9277566539923956
176753,"@Test public void test() throws TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  init();
  em.clear();
  findById();
  findByWithOutWhereClause();
  findByIdEQ();
  findByIdLT();
  findByIdLTE();
  findByIdGT();
  findByIdGTE();
  findByIdGTEAndLT();
  findByIdGTAndLTE();
  findByIdGTAndAgeGTAndLT();
  findByIdGTEAndAge();
  findByIdLTEAndAge();
}","@Test public void test() throws TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  init();
  em.clear();
  findById();
  findByWithOutWhereClause();
  findByIdEQ();
  findByIdLT();
  findByIdLTE();
  findByIdGT();
  findByIdGTE();
  findByIdGTEAndLT();
  findByIdGTAndLTE();
  findByIdAndAgeGTAndLT();
  findByIdGTAndAgeGTAndLT();
  findByIdAndAge();
  findByIdAndAgeGT();
  findByIdGTEAndAge();
  findByIdLTEAndAge();
}",0.890888638920135
176754,"private void onLookUp(PersistenceUnitTransactionType transactionType){
  if (transactionType != null && transactionType.equals(PersistenceUnitTransactionType.JTA)) {
    Context ctx;
    try {
      ctx=new InitialContext();
      utx=(KunderaJTAUserTransaction)ctx.lookup(""String_Node_Str"");
      if (utx == null) {
        throw new KunderaException(""String_Node_Str"");
      }
      if (!(utx instanceof KunderaJTAUserTransaction)) {
        throw new KunderaException(""String_Node_Str"" + KunderaJTAUserTransaction.class.getName() + ""String_Node_Str""+ utx.getClass());
      }
      this.setFlushMode(FlushModeType.COMMIT);
      ((KunderaJTAUserTransaction)utx).setImplementor(this);
    }
 catch (    NamingException e) {
      logger.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
  }
}","private void onLookUp(PersistenceUnitTransactionType transactionType){
  if (transactionType != null && transactionType.equals(PersistenceUnitTransactionType.JTA)) {
    Context ctx;
    try {
      ctx=new InitialContext();
      utx=(KunderaJTAUserTransaction)ctx.lookup(""String_Node_Str"");
      if (utx == null) {
        throw new KunderaException(""String_Node_Str"");
      }
      if (!(utx instanceof KunderaJTAUserTransaction)) {
        throw new KunderaException(""String_Node_Str"" + KunderaJTAUserTransaction.class.getName() + ""String_Node_Str""+ utx.getClass());
      }
      if (((KunderaJTAUserTransaction)utx).isTransactionInProgress()) {
        entityTransaction.begin();
      }
      this.setFlushMode(FlushModeType.COMMIT);
      ((KunderaJTAUserTransaction)utx).setImplementor(this);
    }
 catch (    NamingException e) {
      logger.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
  }
}",0.9353569421023048
176755,"@Override protected Object createPoolOrConnection(){
  PersistenceUnitMetadata persistenceUnitMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(getPersistenceUnit());
  Properties props=persistenceUnitMetadata.getProperties();
  String contactNodes=null;
  String defaultPort=null;
  String keyspace=null;
  if (externalProperties != null) {
    contactNodes=(String)externalProperties.get(PersistenceProperties.KUNDERA_NODES);
    defaultPort=(String)externalProperties.get(PersistenceProperties.KUNDERA_PORT);
    keyspace=(String)externalProperties.get(PersistenceProperties.KUNDERA_KEYSPACE);
  }
  if (contactNodes == null) {
    contactNodes=(String)props.get(PersistenceProperties.KUNDERA_NODES);
  }
  if (defaultPort == null) {
    defaultPort=(String)props.get(PersistenceProperties.KUNDERA_PORT);
  }
  if (keyspace == null) {
    keyspace=(String)props.get(PersistenceProperties.KUNDERA_KEYSPACE);
  }
  PoolConfiguration prop=new PoolProperties();
  prop.setHost(contactNodes);
  prop.setPort(Integer.parseInt(defaultPort));
  prop.setKeySpace(keyspace);
  PelopsUtils.setPoolConfigPolicy(persistenceUnitMetadata,prop,externalProperties);
  try {
    pool=new ConnectionPool(prop);
  }
 catch (  TException e) {
    e.printStackTrace();
  }
  return null;
}","@Override protected Object createPoolOrConnection(){
  PersistenceUnitMetadata persistenceUnitMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(getPersistenceUnit());
  Properties props=persistenceUnitMetadata.getProperties();
  String contactNodes=null;
  String defaultPort=null;
  String keyspace=null;
  if (externalProperties != null) {
    contactNodes=(String)externalProperties.get(PersistenceProperties.KUNDERA_NODES);
    defaultPort=(String)externalProperties.get(PersistenceProperties.KUNDERA_PORT);
    keyspace=(String)externalProperties.get(PersistenceProperties.KUNDERA_KEYSPACE);
  }
  if (contactNodes == null) {
    contactNodes=(String)props.get(PersistenceProperties.KUNDERA_NODES);
  }
  if (defaultPort == null) {
    defaultPort=(String)props.get(PersistenceProperties.KUNDERA_PORT);
  }
  if (keyspace == null) {
    keyspace=(String)props.get(PersistenceProperties.KUNDERA_KEYSPACE);
  }
  PoolConfiguration prop=new PoolProperties();
  prop.setHost(contactNodes);
  prop.setPort(Integer.parseInt(defaultPort));
  prop.setKeySpace(keyspace);
  PelopsUtils.setPoolConfigPolicy(persistenceUnitMetadata,prop,externalProperties);
  try {
    pool=new ConnectionPool(prop);
  }
 catch (  TException e) {
    logger.error(""String_Node_Str"",e);
    throw new ClientLoaderException(e);
  }
  return null;
}",0.9662415603900976
176756,"@Override public synchronized final EntityManagerFactory createEntityManagerFactory(String persistenceUnit,Map map){
synchronized (persistenceUnit) {
    initializeKundera(persistenceUnit,map);
    EntityManagerFactory emf=new EntityManagerFactoryImpl(persistenceUnit,map);
    return emf;
  }
}","@Override public synchronized final EntityManagerFactory createEntityManagerFactory(String persistenceUnit,Map map){
synchronized (persistenceUnit) {
    try {
      initializeKundera(persistenceUnit,map);
      EntityManagerFactory emf=new EntityManagerFactoryImpl(persistenceUnit,map);
      return emf;
    }
 catch (    PersistenceUnitConfigurationException pcex) {
      return null;
    }
  }
}",0.8489208633093526
176757,"@Override public void configure(){
  log.info(""String_Node_Str"");
  KunderaMetadata kunderaMetadata=KunderaMetadata.INSTANCE;
  ApplicationMetadata appMetadata=kunderaMetadata.getApplicationMetadata();
  Map<String,PersistenceUnitMetadata> metadatas;
  try {
    metadatas=findPersistenceMetadatas();
    for (    String persistenceUnit : persistenceUnits) {
      if (!metadatas.containsKey(persistenceUnit)) {
        log.error(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
        throw new IllegalArgumentException(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
      }
    }
    log.info(""String_Node_Str"");
    appMetadata.addPersistenceUnitMetadata(metadatas);
  }
 catch (  InvalidConfigurationException icex) {
    log.error(""String_Node_Str"" + icex.getMessage());
    throw new PersistenceLoaderException(icex);
  }
}","@Override public void configure(){
  log.info(""String_Node_Str"");
  KunderaMetadata kunderaMetadata=KunderaMetadata.INSTANCE;
  ApplicationMetadata appMetadata=kunderaMetadata.getApplicationMetadata();
  Map<String,PersistenceUnitMetadata> metadatas;
  try {
    metadatas=findPersistenceMetadatas();
    for (    String persistenceUnit : persistenceUnits) {
      if (!metadatas.containsKey(persistenceUnit)) {
        log.error(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
        throw new PersistenceUnitConfigurationException(""String_Node_Str"" + persistenceUnit + ""String_Node_Str"");
      }
    }
    log.info(""String_Node_Str"");
    appMetadata.addPersistenceUnitMetadata(metadatas);
  }
 catch (  InvalidConfigurationException icex) {
    log.error(""String_Node_Str"" + icex.getMessage());
    throw new PersistenceLoaderException(icex);
  }
}",0.9772329246935202
176758,"/** 
 * Test invalid configure.
 */
@Test public void testInvalidConfigure(){
  final String invalidPuName=""String_Node_Str"";
  PersistenceUnitMetadata puMetadata=null;
  try {
    Configurator configurator=new Configurator(null,invalidPuName);
    configurator.configure();
    puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(invalidPuName);
  }
 catch (  IllegalArgumentException iex) {
    Assert.assertNull(puMetadata);
  }
}","/** 
 * Test invalid configure.
 */
@Test public void testInvalidConfigure(){
  final String invalidPuName=""String_Node_Str"";
  PersistenceUnitMetadata puMetadata=null;
  try {
    Configurator configurator=new Configurator(null,invalidPuName);
    configurator.configure();
    puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(invalidPuName);
  }
 catch (  PersistenceUnitConfigurationException iex) {
    Assert.assertNull(puMetadata);
  }
}",0.9547844374342797
176759,"/** 
 * Persists a   {@link Node} to database
 */
@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders){
  IPooledConnection conn=null;
  Cassandra.Client cassandra_client=null;
  try {
    Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
    conn=PelopsUtils.getCassandraConnection(entityMetadata.getPersistenceUnit());
    cassandra_client=conn.getAPI();
    cassandra_client.set_keyspace(entityMetadata.getSchema());
    if (metaModel.isEmbeddable(entityMetadata.getIdAttribute().getBindableJavaType())) {
      onpersistOverCompositeKey(entityMetadata,entity,cassandra_client);
    }
 else {
      prepareMutation(entityMetadata,entity,id,rlHolders,mutationMap);
      cassandra_client.batch_mutate(mutationMap,getConsistencyLevel());
    }
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
 finally {
    PelopsUtils.releaseConnection(conn);
    cassandra_client=null;
  }
}","/** 
 * Persists a   {@link Node} to database
 */
@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders){
  IPooledConnection conn=null;
  Cassandra.Client cassandra_client=null;
  try {
    Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(entityMetadata.getPersistenceUnit());
    conn=PelopsUtils.getCassandraConnection(entityMetadata.getPersistenceUnit());
    cassandra_client=conn.getAPI();
    cassandra_client.set_keyspace(entityMetadata.getSchema());
    if (metaModel.isEmbeddable(entityMetadata.getIdAttribute().getBindableJavaType())) {
      onpersistOverCompositeKey(entityMetadata,entity,cassandra_client);
    }
 else {
      prepareMutation(entityMetadata,entity,id,rlHolders,mutationMap);
      cassandra_client.batch_mutate(mutationMap,getConsistencyLevel());
    }
    mutationMap.clear();
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
 finally {
    PelopsUtils.releaseConnection(conn);
    cassandra_client=null;
  }
}",0.9933244325767692
176760,"/** 
 * Scan class and put metadata.
 * @param bits the bits
 * @param reader the reader
 * @param entityMetadataMap the entity metadata map
 * @param entityNameToClassMap the entity name to class map
 * @param persistence unit the persistence unit.
 * @throws IOException Signals that an I/O exception has occurred.
 */
private List<Class<?>> scanClassAndPutMetadata(InputStream bits,Reader reader,Map<Class<?>,EntityMetadata> entityMetadataMap,Map<String,Class<?>> entityNameToClassMap,String persistenceUnit,String client,Map<String,List<String>> clazzToPuMap) throws IOException {
  DataInputStream dstream=new DataInputStream(new BufferedInputStream(bits));
  ClassFile cf=null;
  String className=null;
  List<Class<?>> classes=new ArrayList<Class<?>>();
  try {
    cf=new ClassFile(dstream);
    className=cf.getName();
    List<String> annotations=new ArrayList<String>();
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.visibleTag));
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.invisibleTag));
    for (    String validAnn : reader.getValidAnnotations()) {
      if (annotations.contains(validAnn)) {
        Class<?> clazz=Class.forName(className);
        if (entityNameToClassMap.containsKey(clazz.getSimpleName()) && !entityNameToClassMap.get(clazz.getSimpleName()).getName().equals(clazz.getName())) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityNameToClassMap.get(clazz.getSimpleName()).getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ persistenceUnit);
        }
        entityNameToClassMap.put(clazz.getSimpleName(),clazz);
        EntityMetadata metadata=entityMetadataMap.get(clazz);
        if (null == metadata) {
          log.debug(""String_Node_Str"" + clazz.getName());
synchronized (clazz) {
            if (null == metadata) {
              MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,client);
              metadata=metadataBuilder.buildEntityMetadata(clazz);
              if (metadata != null) {
                entityMetadataMap.put(clazz,metadata);
                mapClazztoPu(clazz,persistenceUnit,clazzToPuMap);
              }
            }
          }
        }
        onValidateClientProperties(classes,clazz,persistenceUnit);
      }
    }
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + className + ""String_Node_Str"");
  }
 finally {
    dstream.close();
    bits.close();
  }
  return classes;
}","/** 
 * Scan class and put metadata.
 * @param bits the bits
 * @param reader the reader
 * @param entityMetadataMap the entity metadata map
 * @param entityNameToClassMap the entity name to class map
 * @param persistence unit the persistence unit.
 * @throws IOException Signals that an I/O exception has occurred.
 */
private List<Class<?>> scanClassAndPutMetadata(InputStream bits,Reader reader,Map<Class<?>,EntityMetadata> entityMetadataMap,Map<String,Class<?>> entityNameToClassMap,String persistenceUnit,String client,Map<String,List<String>> clazzToPuMap) throws IOException {
  DataInputStream dstream=new DataInputStream(new BufferedInputStream(bits));
  ClassFile cf=null;
  String className=null;
  PersistenceUnitMetadata puMetadata=null;
  List<Class<?>> classes=new ArrayList<Class<?>>();
  try {
    cf=new ClassFile(dstream);
    className=cf.getName();
    List<String> annotations=new ArrayList<String>();
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.visibleTag));
    reader.accumulateAnnotations(annotations,(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.invisibleTag));
    puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(persistenceUnit);
    for (    String validAnn : reader.getValidAnnotations()) {
      if (annotations.contains(validAnn) && puMetadata != null) {
        Class<?> clazz=puMetadata.getClassLoader().loadClass(className);
        if (entityNameToClassMap.containsKey(clazz.getSimpleName()) && !entityNameToClassMap.get(clazz.getSimpleName()).getName().equals(clazz.getName())) {
          throw new MetamodelLoaderException(""String_Node_Str"" + entityNameToClassMap.get(clazz.getSimpleName()).getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ persistenceUnit);
        }
        entityNameToClassMap.put(clazz.getSimpleName(),clazz);
        EntityMetadata metadata=entityMetadataMap.get(clazz);
        if (null == metadata) {
          log.debug(""String_Node_Str"" + clazz.getName());
synchronized (clazz) {
            if (null == metadata) {
              MetadataBuilder metadataBuilder=new MetadataBuilder(persistenceUnit,client);
              metadata=metadataBuilder.buildEntityMetadata(clazz);
              if (metadata != null) {
                entityMetadataMap.put(clazz,metadata);
                mapClazztoPu(clazz,persistenceUnit,clazzToPuMap);
              }
            }
          }
        }
        onValidateClientProperties(classes,clazz,persistenceUnit);
      }
    }
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + className + ""String_Node_Str"");
  }
 finally {
    dstream.close();
    bits.close();
  }
  return classes;
}",0.9597151958028856
176761,"/** 
 * update method update schema and table for the list of tableInfos
 * @param tableInfos list of TableInfos.
 */
protected void update(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    HTableDescriptor hTableDescriptor=getTableMetaData(tableInfo);
    try {
      HTableDescriptor descriptor=admin.getTableDescriptor(tableInfo.getTableName().getBytes());
      if (descriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
        if (admin.isTableEnabled(tableInfo.getTableName().getBytes())) {
          admin.disableTable(tableInfo.getTableName().getBytes());
        }
        HColumnDescriptor[] descriptors=descriptor.getColumnFamilies();
        if (tableInfo.getColumnMetadatas() != null) {
          for (          ColumnInfo columnInfo : tableInfo.getColumnMetadatas()) {
            boolean found=false;
            HColumnDescriptor columnDescriptor=new HColumnDescriptor(columnInfo.getColumnName());
            for (            HColumnDescriptor hColumnDescriptor : descriptors) {
              if (hColumnDescriptor.getNameAsString().equalsIgnoreCase(columnInfo.getColumnName())) {
                found=true;
                break;
              }
            }
            if (!found) {
              admin.addColumn(tableInfo.getTableName(),columnDescriptor);
            }
          }
        }
        if (tableInfo.getEmbeddedColumnMetadatas() != null) {
          for (          EmbeddedColumnInfo embeddedColumnInfo : tableInfo.getEmbeddedColumnMetadatas()) {
            boolean found=false;
            HColumnDescriptor columnDescriptor=new HColumnDescriptor(embeddedColumnInfo.getEmbeddedColumnName());
            for (            HColumnDescriptor hColumnDescriptor : descriptors) {
              if (hColumnDescriptor.getNameAsString().equalsIgnoreCase(embeddedColumnInfo.getEmbeddedColumnName())) {
                found=true;
                break;
              }
            }
            if (!found) {
              admin.addColumn(tableInfo.getTableName(),columnDescriptor);
            }
          }
        }
      }
    }
 catch (    IOException e) {
      try {
        admin.createTable(hTableDescriptor);
      }
 catch (      IOException e1) {
        logger.error(""String_Node_Str"" + e.getMessage());
        throw new SchemaGenerationException(e,""String_Node_Str"");
      }
    }
  }
}","/** 
 * update method update schema and table for the list of tableInfos
 * @param tableInfos list of TableInfos.
 */
protected void update(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    if (tableInfo != null && tableInfo.getTableName() != null) {
      HTableDescriptor hTableDescriptor=getTableMetaData(tableInfo);
      try {
        HTableDescriptor descriptor=admin.getTableDescriptor(tableInfo.getTableName().getBytes());
        if (descriptor.getNameAsString().equalsIgnoreCase(tableInfo.getTableName())) {
          if (admin.isTableEnabled(tableInfo.getTableName().getBytes())) {
            admin.disableTable(tableInfo.getTableName().getBytes());
          }
          HColumnDescriptor[] descriptors=descriptor.getColumnFamilies();
          if (tableInfo.getColumnMetadatas() != null) {
            for (            ColumnInfo columnInfo : tableInfo.getColumnMetadatas()) {
              boolean found=false;
              HColumnDescriptor columnDescriptor=new HColumnDescriptor(columnInfo.getColumnName());
              for (              HColumnDescriptor hColumnDescriptor : descriptors) {
                if (hColumnDescriptor.getNameAsString().equalsIgnoreCase(columnInfo.getColumnName())) {
                  found=true;
                  break;
                }
              }
              if (!found) {
                admin.addColumn(tableInfo.getTableName(),columnDescriptor);
              }
            }
          }
          if (tableInfo.getEmbeddedColumnMetadatas() != null) {
            for (            EmbeddedColumnInfo embeddedColumnInfo : tableInfo.getEmbeddedColumnMetadatas()) {
              boolean found=false;
              HColumnDescriptor columnDescriptor=new HColumnDescriptor(embeddedColumnInfo.getEmbeddedColumnName());
              for (              HColumnDescriptor hColumnDescriptor : descriptors) {
                if (hColumnDescriptor.getNameAsString().equalsIgnoreCase(embeddedColumnInfo.getEmbeddedColumnName())) {
                  found=true;
                  break;
                }
              }
              if (!found) {
                admin.addColumn(tableInfo.getTableName(),columnDescriptor);
              }
            }
          }
        }
      }
 catch (      IOException e) {
        try {
          admin.createTable(hTableDescriptor);
        }
 catch (        IOException e1) {
          logger.error(""String_Node_Str"" + e.getMessage());
          throw new SchemaGenerationException(e,""String_Node_Str"");
        }
      }
    }
  }
}",0.9560461818918372
176762,"/** 
 * create method creates schema and table for the list of tableInfos.
 * @param tableInfos list of TableInfos.
 */
protected void create(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    try {
      admin.getTableDescriptor(tableInfo.getTableName().getBytes());
      admin.disableTable(tableInfo.getTableName());
      admin.deleteTable(tableInfo.getTableName());
    }
 catch (    TableNotFoundException e) {
      logger.info(""String_Node_Str"" + tableInfo.getTableName());
    }
catch (    IOException ioex) {
      logger.error(""String_Node_Str"" + ioex.getMessage());
      throw new SchemaGenerationException(ioex,""String_Node_Str"");
    }
    HTableDescriptor hTableDescriptor=getTableMetaData(tableInfo);
    try {
      admin.createTable(hTableDescriptor);
    }
 catch (    IOException ioex1) {
      logger.error(""String_Node_Str"" + ioex1.getMessage());
      throw new SchemaGenerationException(ioex1,""String_Node_Str"");
    }
  }
}","/** 
 * create method creates schema and table for the list of tableInfos.
 * @param tableInfos list of TableInfos.
 */
protected void create(List<TableInfo> tableInfos){
  for (  TableInfo tableInfo : tableInfos) {
    if (tableInfo != null && tableInfo.getTableName() != null) {
      try {
        admin.getTableDescriptor(tableInfo.getTableName().getBytes());
        admin.disableTable(tableInfo.getTableName());
        admin.deleteTable(tableInfo.getTableName());
      }
 catch (      TableNotFoundException e) {
        logger.info(""String_Node_Str"" + tableInfo.getTableName());
      }
catch (      IOException ioex) {
        logger.error(""String_Node_Str"" + ioex.getMessage());
        throw new SchemaGenerationException(ioex,""String_Node_Str"");
      }
      HTableDescriptor hTableDescriptor=getTableMetaData(tableInfo);
      try {
        admin.createTable(hTableDescriptor);
      }
 catch (      IOException ioex1) {
        logger.error(""String_Node_Str"" + ioex1.getMessage());
        throw new SchemaGenerationException(ioex1,""String_Node_Str"");
      }
    }
  }
}",0.9461948618516725
176763,"/** 
 * drop schema method drop the table
 */
public void dropSchema(){
  if (operation != null && operation.equalsIgnoreCase(""String_Node_Str"")) {
    for (    TableInfo tableInfo : tableInfos) {
      try {
        admin.disableTable(tableInfo.getTableName());
        admin.deleteTable(tableInfo.getTableName());
      }
 catch (      TableNotFoundException e) {
        logger.error(""String_Node_Str"" + e.getMessage());
        throw new SchemaGenerationException(e,""String_Node_Str"");
      }
catch (      IOException e) {
        logger.error(""String_Node_Str"" + e.getMessage());
        throw new SchemaGenerationException(e,""String_Node_Str"");
      }
    }
  }
  operation=null;
  admin=null;
}","/** 
 * drop schema method drop the table
 */
public void dropSchema(){
  if (operation != null && operation.equalsIgnoreCase(""String_Node_Str"")) {
    for (    TableInfo tableInfo : tableInfos) {
      if (tableInfo != null && tableInfo.getTableName() != null) {
        try {
          admin.disableTable(tableInfo.getTableName());
          admin.deleteTable(tableInfo.getTableName());
        }
 catch (        TableNotFoundException e) {
          logger.error(""String_Node_Str"" + e.getMessage());
          throw new SchemaGenerationException(e,""String_Node_Str"");
        }
catch (        IOException e) {
          logger.error(""String_Node_Str"" + e.getMessage());
          throw new SchemaGenerationException(e,""String_Node_Str"");
        }
      }
    }
  }
  operation=null;
  admin=null;
}",0.93421926910299
176764,"/** 
 * add tables to given keyspace   {@code ksDef}.
 * @param tableInfos the table infos
 * @param ksDef the ks def
 * @throws InvalidRequestException the invalid request exception
 * @throws SchemaDisagreementException the schema disagreement exception
 * @throws TException the t exception
 * @throws InterruptedException the interrupted exception
 */
private void addTablesToKeyspace(List<TableInfo> tableInfos,KsDef ksDef) throws InvalidRequestException, SchemaDisagreementException, TException, InterruptedException {
  cassandra_client.set_keyspace(databaseName);
  for (  TableInfo tableInfo : tableInfos) {
    for (    CfDef cfDef : ksDef.getCf_defs()) {
      if (cfDef.getName().equalsIgnoreCase(tableInfo.getTableName())) {
        cassandra_client.system_drop_column_family(tableInfo.getTableName());
        dropInvertedIndexTable(tableInfo);
        TimeUnit.SECONDS.sleep(3);
        break;
      }
    }
    if (tableInfo.getTableIdType() != null && tableInfo.getTableIdType().isAnnotationPresent(Embeddable.class)) {
      if (tableInfo.getType() != null && tableInfo.getType().equals(Type.SUPER_COLUMN_FAMILY.name())) {
        throw new SchemaGenerationException(""String_Node_Str"",""String_Node_Str"",databaseName);
      }
 else {
        onCompoundKey(tableInfo);
      }
    }
 else {
      cassandra_client.system_add_column_family(getTableMetadata(tableInfo));
      createInvertedIndexTable(tableInfo);
    }
  }
}","/** 
 * add tables to given keyspace   {@code ksDef}.
 * @param tableInfos the table infos
 * @param ksDef the ks def
 * @throws InvalidRequestException the invalid request exception
 * @throws SchemaDisagreementException the schema disagreement exception
 * @throws TException the t exception
 * @throws InterruptedException the interrupted exception
 */
private void addTablesToKeyspace(List<TableInfo> tableInfos,KsDef ksDef) throws InvalidRequestException, SchemaDisagreementException, TException, InterruptedException {
  cassandra_client.set_keyspace(databaseName);
  for (  TableInfo tableInfo : tableInfos) {
    for (    CfDef cfDef : ksDef.getCf_defs()) {
      if (cfDef.getName().equalsIgnoreCase(tableInfo.getTableName())) {
        cassandra_client.system_drop_column_family(tableInfo.getTableName());
        dropInvertedIndexTable(tableInfo);
        TimeUnit.SECONDS.sleep(2);
        break;
      }
    }
    if (tableInfo.getTableIdType() != null && tableInfo.getTableIdType().isAnnotationPresent(Embeddable.class)) {
      if (tableInfo.getType() != null && tableInfo.getType().equals(Type.SUPER_COLUMN_FAMILY.name())) {
        throw new SchemaGenerationException(""String_Node_Str"",""String_Node_Str"",databaseName);
      }
 else {
        onCompoundKey(tableInfo);
      }
    }
 else {
      cassandra_client.system_add_column_family(getTableMetadata(tableInfo));
      createInvertedIndexTable(tableInfo);
    }
  }
}",0.9993055555555556
176765,"@Test public void onBatchInsert(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  long t1=System.currentTimeMillis();
  for (int i=0; i < 5000; i++) {
    CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",i,timeLineId);
    Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
    Client client=clients.get(PERSISTENCE_UNIT);
    ((CassandraClientBase)client).setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
    CassandraPrimeUser user=new CassandraPrimeUser(key);
    user.setTweetBody(""String_Node_Str"");
    user.setTweetDate(currentDate);
    em.persist(user);
  }
  long t2=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (t2 - t1));
}","@Test public void onBatchInsert(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  long t1=System.currentTimeMillis();
  for (int i=0; i < 5000; i++) {
    CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",i,timeLineId);
    Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
    Client client=clients.get(PERSISTENCE_UNIT);
    ((CassandraClientBase)client).setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
    CassandraPrimeUser user=new CassandraPrimeUser(key);
    user.setTweetBody(""String_Node_Str"");
    user.setTweetDate(currentDate);
    em.persist(user);
  }
  long t2=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (t2 - t1));
  em.clear();
  CassandraPrimeUser u=em.find(CassandraPrimeUser.class,new CassandraCompoundKey(""String_Node_Str"",4999,timeLineId));
  Assert.assertNotNull(u);
}",0.9020332717190388
176766,"/** 
 * parse the relations of entites .
 * @param persistenceUnit
 * @param tableInfos
 * @param entityMetadata
 * @param tableInfo
 * @param relations
 */
private void parseRelations(String persistenceUnit,List<TableInfo> tableInfos,EntityMetadata entityMetadata,TableInfo tableInfo,List<Relation> relations){
  for (  Relation relation : relations) {
    Class entityClass=relation.getTargetEntity();
    EntityMetadata targetEntityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
    ForeignKey relationType=relation.getType();
    if (targetEntityMetadata != null && relationType.equals(ForeignKey.ONE_TO_MANY) && relation.getJoinColumnName() != null) {
      if (targetEntityMetadata.equals(entityMetadata)) {
        tableInfo.addColumnInfo(getJoinColumn(relation.getJoinColumnName()));
      }
 else {
        String pu=targetEntityMetadata.getPersistenceUnit();
        Type targetEntityType=targetEntityMetadata.getType();
        Class idClass=entityMetadata.getIdAttribute().getJavaType();
        TableInfo targetTableInfo=new TableInfo(targetEntityMetadata.getTableName(),targetEntityMetadata.isIndexable(),targetEntityType.name(),idClass);
        if (!pu.equals(persistenceUnit)) {
          List<TableInfo> targetTableInfos=getSchemaInfo(pu);
          addJoinColumnToInfo(relation.getJoinColumnName(),targetTableInfo,targetTableInfos);
          puToSchemaMetadata.put(pu,targetTableInfos);
        }
 else {
          addJoinColumnToInfo(relation.getJoinColumnName(),targetTableInfo,tableInfos);
        }
      }
    }
 else     if (relation.isUnary() && relation.getJoinColumnName() != null) {
      tableInfo.addColumnInfo(getJoinColumn(relation.getJoinColumnName()));
    }
 else     if ((relationType.equals(ForeignKey.MANY_TO_MANY)) && (entityMetadata.isRelationViaJoinTable())) {
      String joinTableName=relation.getJoinTableMetadata().getJoinTableName();
      TableInfo joinTableInfo=new TableInfo(joinTableName,false,Type.COLUMN_FAMILY.name(),null);
      if (!tableInfos.isEmpty() && !tableInfos.contains(joinTableInfo) || tableInfos.isEmpty()) {
        tableInfos.add(joinTableInfo);
      }
    }
  }
}","/** 
 * parse the relations of entites .
 * @param persistenceUnit
 * @param tableInfos
 * @param entityMetadata
 * @param tableInfo
 * @param relations
 */
private void parseRelations(String persistenceUnit,List<TableInfo> tableInfos,EntityMetadata entityMetadata,TableInfo tableInfo,List<Relation> relations){
  for (  Relation relation : relations) {
    Class entityClass=relation.getTargetEntity();
    EntityMetadata targetEntityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
    ForeignKey relationType=relation.getType();
    if (targetEntityMetadata != null && relationType.equals(ForeignKey.ONE_TO_MANY) && relation.getJoinColumnName() != null) {
      if (targetEntityMetadata.equals(entityMetadata)) {
        tableInfo.addColumnInfo(getJoinColumn(relation.getJoinColumnName()));
      }
 else {
        String pu=targetEntityMetadata.getPersistenceUnit();
        Type targetEntityType=targetEntityMetadata.getType();
        Class idClass=entityMetadata.getIdAttribute().getJavaType();
        TableInfo targetTableInfo=new TableInfo(targetEntityMetadata.getTableName(),targetEntityMetadata.isIndexable(),targetEntityType.name(),idClass);
        if (!pu.equals(persistenceUnit)) {
          List<TableInfo> targetTableInfos=getSchemaInfo(pu);
          addJoinColumnToInfo(relation.getJoinColumnName(),targetTableInfo,targetTableInfos);
          puToSchemaMetadata.put(pu,targetTableInfos);
        }
 else {
          addJoinColumnToInfo(relation.getJoinColumnName(),targetTableInfo,tableInfos);
        }
      }
    }
 else     if (relation.isUnary() && relation.getJoinColumnName() != null) {
      tableInfo.addColumnInfo(getJoinColumn(relation.getJoinColumnName()));
    }
 else     if ((relationType.equals(ForeignKey.MANY_TO_MANY)) && (entityMetadata.isRelationViaJoinTable())) {
      JoinTableMetadata joinTableMetadata=relation.getJoinTableMetadata();
      String joinTableName=joinTableMetadata != null ? joinTableMetadata.getJoinTableName() : null;
      if (joinTableName != null) {
        TableInfo joinTableInfo=new TableInfo(joinTableName,false,Type.COLUMN_FAMILY.name(),null);
        if (!tableInfos.isEmpty() && !tableInfos.contains(joinTableInfo) || tableInfos.isEmpty()) {
          tableInfos.add(joinTableInfo);
        }
      }
    }
  }
}",0.9530653492027846
176767,"@Override public void configure(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  puToSchemaMetadata=appMetadata.getSchemaMetadata().getPuToSchemaMetadata();
  for (  String persistenceUnit : persistenceUnits) {
    if (getSchemaProperty(persistenceUnit) != null) {
      log.info(""String_Node_Str"" + persistenceUnit);
      List<TableInfo> tableInfos=getSchemaInfo(persistenceUnit);
      Map<Class<?>,EntityMetadata> entityMetadataMap=getEntityMetadataCol(appMetadata,persistenceUnit);
      for (      EntityMetadata entityMetadata : entityMetadataMap.values()) {
        boolean found=false;
        Type type=entityMetadata.getType();
        Class idClassName=entityMetadata.getIdAttribute().getJavaType();
        TableInfo tableInfo=new TableInfo(entityMetadata.getTableName(),entityMetadata.isIndexable(),type.name(),idClassName);
        if (!tableInfos.isEmpty() && tableInfos.contains(tableInfo)) {
          found=true;
          int idx=tableInfos.indexOf(tableInfo);
          tableInfo=tableInfos.get(idx);
          addColumnToTableInfo(entityMetadata,type,tableInfo);
        }
 else {
          addColumnToTableInfo(entityMetadata,type,tableInfo);
        }
        List<Relation> relations=entityMetadata.getRelations();
        parseRelations(persistenceUnit,tableInfos,entityMetadata,tableInfo,relations);
        if (!found) {
          tableInfos.add(tableInfo);
        }
      }
      puToSchemaMetadata.put(persistenceUnit,tableInfos);
      SchemaManager schemaManager=ClientResolver.getClientFactory(persistenceUnit).getSchemaManager();
      if (schemaManager != null) {
        schemaManager.exportSchema();
      }
    }
  }
}","@Override public void configure(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  puToSchemaMetadata=appMetadata.getSchemaMetadata().getPuToSchemaMetadata();
  for (  String persistenceUnit : persistenceUnits) {
    log.info(""String_Node_Str"" + persistenceUnit);
    List<TableInfo> tableInfos=getSchemaInfo(persistenceUnit);
    Map<Class<?>,EntityMetadata> entityMetadataMap=getEntityMetadataCol(appMetadata,persistenceUnit);
    for (    EntityMetadata entityMetadata : entityMetadataMap.values()) {
      boolean found=false;
      Type type=entityMetadata.getType();
      Class idClassName=entityMetadata.getIdAttribute().getJavaType();
      TableInfo tableInfo=new TableInfo(entityMetadata.getTableName(),entityMetadata.isIndexable(),type.name(),idClassName);
      if (!tableInfos.isEmpty() && tableInfos.contains(tableInfo)) {
        found=true;
        int idx=tableInfos.indexOf(tableInfo);
        tableInfo=tableInfos.get(idx);
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
 else {
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
      List<Relation> relations=entityMetadata.getRelations();
      parseRelations(persistenceUnit,tableInfos,entityMetadata,tableInfo,relations);
      if (!found) {
        tableInfos.add(tableInfo);
      }
    }
    puToSchemaMetadata.put(persistenceUnit,tableInfos);
    if (getSchemaProperty(persistenceUnit) != null) {
      ClientFactory clientFactory=ClientResolver.getClientFactory(persistenceUnit);
      SchemaManager schemaManager=clientFactory != null ? clientFactory.getSchemaManager() : null;
      if (schemaManager != null) {
        schemaManager.exportSchema();
      }
    }
  }
}",0.8885647607934656
176768,"/** 
 * Recursively fetches associated entities for a given <code>entity</code>
 * @param entity
 * @param relationsMap
 * @param client
 * @param m
 * @param pd
 * @return
 */
public Object recursivelyFindEntities(Object entity,Map<String,Object> relationsMap,EntityMetadata m,PersistenceDelegator pd){
  Object entityId=PropertyAccessorHelper.getId(entity,m);
  associationBuilder=new AssociationBuilder();
  for (  Relation relation : m.getRelations()) {
    Field f=relation.getProperty();
    Object object=PropertyAccessorHelper.getObject(entity,f);
    if (object == null || object instanceof HibernateProxy || object instanceof PersistentSet || object instanceof PersistentCollection) {
      FetchType fetch=relation.getFetchType();
      if (relation.isRelatedViaJoinTable()) {
        PersistenceCacheManager.addEntityToPersistenceCache(entity,pd,entityId);
        associationBuilder.populateRelationFromJoinTable(entity,m,pd,relation);
      }
 else {
        String relationName=MetadataUtils.getMappedName(m,relation);
        Object relationValue=relationsMap != null ? relationsMap.get(relationName) : null;
        Class<?> childClass=relation.getTargetEntity();
        EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(childClass);
        if (relationValue != null) {
          associationBuilder.populateRelationFromValue(entity,pd,relation,relationValue,childMetadata);
        }
 else {
          associationBuilder.populateRelationViaQuery(entity,pd,entityId,relation,relationName,childMetadata);
        }
      }
    }
  }
  return entity;
}","/** 
 * Recursively fetches associated entities for a given <code>entity</code>
 * @param entity
 * @param relationsMap
 * @param client
 * @param m
 * @param pd
 * @return
 */
public Object recursivelyFindEntities(Object entity,Map<String,Object> relationsMap,EntityMetadata m,PersistenceDelegator pd){
  Object entityId=PropertyAccessorHelper.getId(entity,m);
  associationBuilder=new AssociationBuilder();
  for (  Relation relation : m.getRelations()) {
    ForeignKey type=relation.getType();
    if (isTraversalRequired(relationsMap,type)) {
      Field f=relation.getProperty();
      Object object=PropertyAccessorHelper.getObject(entity,f);
      if (object == null || object instanceof HibernateProxy || object instanceof PersistentSet || object instanceof PersistentCollection) {
        FetchType fetch=relation.getFetchType();
        if (relation.isRelatedViaJoinTable()) {
          PersistenceCacheManager.addEntityToPersistenceCache(entity,pd,entityId);
          associationBuilder.populateRelationFromJoinTable(entity,m,pd,relation);
        }
 else {
          String relationName=MetadataUtils.getMappedName(m,relation);
          Object relationValue=relationsMap != null ? relationsMap.get(relationName) : null;
          Class<?> childClass=relation.getTargetEntity();
          EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(childClass);
          if (relationValue != null) {
            associationBuilder.populateRelationFromValue(entity,pd,relation,relationValue,childMetadata);
          }
 else {
            associationBuilder.populateRelationViaQuery(entity,pd,entityId,relation,relationName,childMetadata);
          }
        }
      }
    }
  }
  return entity;
}",0.9595166163141994
176769,"public List scanData(Filter f,final String tableName,Class clazz,EntityMetadata m,String qualifier) throws IOException, InstantiationException, IllegalAccessException {
  List returnedResults=new ArrayList();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entityType=metaModel.entity(m.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  String[] columns=new String[attributes.size()];
  int count=0;
  boolean isCollection=false;
  for (  Attribute attr : attributes) {
    if (!attr.isCollection()) {
      columns[count++]=((AbstractAttribute)attr).getJPAColumnName();
    }
 else {
      isCollection=true;
      break;
    }
  }
  List<HBaseData> results=hbaseReader.loadAll(gethTable(tableName),f,null,null,isCollection ? qualifier : null,!isCollection ? columns : null);
  if (results != null) {
    for (    HBaseData row : results) {
      Object entity=clazz.newInstance();
      returnedResults.add(populateEntityFromHbaseData(entity,row,m,row.getRowKey(),m.getRelationNames()));
    }
  }
  return returnedResults;
}","public List scanData(Filter f,final String tableName,Class clazz,EntityMetadata m,String qualifier) throws IOException, InstantiationException, IllegalAccessException {
  List returnedResults=new ArrayList();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entityType=metaModel.entity(m.getEntityClazz());
  Set<Attribute> attributes=entityType.getAttributes();
  String[] columns=new String[attributes.size()];
  int count=0;
  boolean isCollection=false;
  for (  Attribute attr : attributes) {
    if (!attr.isCollection() && !attr.getName().equalsIgnoreCase(m.getIdAttribute().getName())) {
      columns[count++]=((AbstractAttribute)attr).getJPAColumnName();
    }
 else     if (attr.isCollection()) {
      isCollection=true;
      break;
    }
  }
  List<HBaseData> results=hbaseReader.loadAll(gethTable(tableName),f,null,null,isCollection ? qualifier : null,!isCollection ? columns : null);
  if (results != null) {
    for (    HBaseData row : results) {
      Object entity=clazz.newInstance();
      returnedResults.add(populateEntityFromHbaseData(entity,row,m,row.getRowKey(),m.getRelationNames()));
    }
  }
  return returnedResults;
}",0.960267670430782
176770,"/** 
 * Sets the properties.
 * @param ksDef the ks def
 * @param strategy_options the strategy_options
 */
private void setProperties(KsDef ksDef,Map<String,String> strategy_options){
  Schema schema=CassandraPropertyReader.csmd.getSchema(databaseName);
  if (schema != null && schema.getName() != null && schema.getName().equalsIgnoreCase(databaseName) && schema.getSchemaProperties() != null) {
    tables=schema.getTables();
    setKeyspaceProperties(ksDef,schema.getSchemaProperties(),strategy_options,schema.getDataCenters());
  }
 else {
    setDefaultReplicationFactor(strategy_options);
  }
}","/** 
 * Sets the properties.
 * @param ksDef the ks def
 * @param strategy_options the strategy_options
 */
private void setProperties(KsDef ksDef,Map<String,String> strategy_options){
  Schema schema=CassandraPropertyReader.csmd.getSchema(databaseName);
  if (schema != null && schema.getName() != null && schema.getName().equalsIgnoreCase(databaseName) && schema.getSchemaProperties() != null) {
    setKeyspaceProperties(ksDef,schema.getSchemaProperties(),strategy_options,schema.getDataCenters());
  }
 else {
    setDefaultReplicationFactor(strategy_options);
  }
}",0.7412467976088813
176771,"/** 
 * initiate client method initiates the client.
 * @return boolean value ie client started or not.
 */
protected boolean initiateClient(){
  if (cassandra_client == null) {
    TSocket socket=new TSocket(host,Integer.parseInt(port));
    TTransport transport=new TFramedTransport(socket);
    TProtocol protocol=new TBinaryProtocol(transport);
    cassandra_client=new Cassandra.Client(protocol);
    try {
      if (!socket.isOpen()) {
        socket.open();
      }
    }
 catch (    TTransportException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new SchemaGenerationException(e,""String_Node_Str"");
    }
catch (    NumberFormatException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new SchemaGenerationException(e,""String_Node_Str"");
    }
    return true;
  }
  return false;
}","/** 
 * initiate client method initiates the client.
 * @return boolean value ie client started or not.
 */
protected boolean initiateClient(){
  if (cassandra_client == null) {
    TSocket socket=new TSocket(host,Integer.parseInt(port));
    TTransport transport=new TFramedTransport(socket);
    TProtocol protocol=new TBinaryProtocol(transport);
    cassandra_client=new Cassandra.Client(protocol);
    try {
      if (!socket.isOpen()) {
        socket.open();
      }
    }
 catch (    TTransportException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new SchemaGenerationException(e,""String_Node_Str"");
    }
catch (    NumberFormatException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new SchemaGenerationException(e,""String_Node_Str"");
    }
  }
  return cassandra_client != null ? true : false;
}",0.9604252805670408
176772,"/** 
 * @param tableInfo
 * @return CfDef object
 */
private CfDef getTableMetadata(TableInfo tableInfo){
  CfDef cfDef=new CfDef();
  cfDef.setKeyspace(databaseName);
  cfDef.setName(tableInfo.getTableName());
  cfDef.setKey_validation_class(CassandraValidationClassMapper.getValidationClass(tableInfo.getTableIdType()));
  Properties cFProperties=getColumnFamilyProperties(tableInfo);
  String defaultValidationClass=null;
  if (tableInfo.getType() != null && tableInfo.getType().equals(Type.COLUMN_FAMILY.name())) {
    defaultValidationClass=cFProperties != null ? cFProperties.getProperty(CassandraConstants.DEFAULT_VALIDATION_CLASS) : null;
    cfDef.setColumn_type(""String_Node_Str"");
    if (isCounterColumnType(tableInfo,defaultValidationClass)) {
      cfDef.setDefault_validation_class(CounterColumnType.class.getSimpleName());
    }
 else {
      List<ColumnDef> columnDefs=new ArrayList<ColumnDef>();
      List<ColumnInfo> columnInfos=tableInfo.getColumnMetadatas();
      if (columnInfos != null) {
        for (        ColumnInfo columnInfo : columnInfos) {
          ColumnDef columnDef=new ColumnDef();
          if (columnInfo.isIndexable()) {
            columnDef.setIndex_type(CassandraIndexHelper.getIndexType(columnInfo.getIndexType()));
          }
          columnDef.setName(columnInfo.getColumnName().getBytes());
          columnDef.setValidation_class(CassandraValidationClassMapper.getValidationClass(columnInfo.getType()));
          columnDefs.add(columnDef);
        }
      }
      cfDef.setColumn_metadata(columnDefs);
    }
  }
 else   if (tableInfo.getType() != null) {
    if (isCounterColumnType(tableInfo,defaultValidationClass)) {
      cfDef.setDefault_validation_class(CounterColumnType.class.getSimpleName());
    }
    cfDef.setColumn_type(""String_Node_Str"");
  }
  setColumnFamilyProperties(cfDef,cFProperties,null);
  return cfDef;
}","/** 
 * @param tableInfo
 * @return CfDef object
 */
private CfDef getTableMetadata(TableInfo tableInfo){
  CfDef cfDef=new CfDef();
  cfDef.setKeyspace(databaseName);
  cfDef.setName(tableInfo.getTableName());
  cfDef.setKey_validation_class(CassandraValidationClassMapper.getValidationClass(tableInfo.getTableIdType()));
  Schema schema=CassandraPropertyReader.csmd.getSchema(databaseName);
  tables=schema != null ? schema.getTables() : null;
  Properties cFProperties=getColumnFamilyProperties(tableInfo);
  String defaultValidationClass=null;
  if (tableInfo.getType() != null && tableInfo.getType().equals(Type.COLUMN_FAMILY.name())) {
    defaultValidationClass=cFProperties != null ? cFProperties.getProperty(CassandraConstants.DEFAULT_VALIDATION_CLASS) : null;
    cfDef.setColumn_type(""String_Node_Str"");
    if (isCounterColumnType(tableInfo,defaultValidationClass)) {
      cfDef.setDefault_validation_class(CounterColumnType.class.getSimpleName());
    }
 else {
      List<ColumnDef> columnDefs=new ArrayList<ColumnDef>();
      List<ColumnInfo> columnInfos=tableInfo.getColumnMetadatas();
      if (columnInfos != null) {
        for (        ColumnInfo columnInfo : columnInfos) {
          ColumnDef columnDef=new ColumnDef();
          if (columnInfo.isIndexable()) {
            columnDef.setIndex_type(CassandraIndexHelper.getIndexType(columnInfo.getIndexType()));
          }
          columnDef.setName(columnInfo.getColumnName().getBytes());
          columnDef.setValidation_class(CassandraValidationClassMapper.getValidationClass(columnInfo.getType()));
          columnDefs.add(columnDef);
        }
      }
      cfDef.setColumn_metadata(columnDefs);
    }
  }
 else   if (tableInfo.getType() != null) {
    if (isCounterColumnType(tableInfo,defaultValidationClass)) {
      cfDef.setDefault_validation_class(CounterColumnType.class.getSimpleName());
    }
    cfDef.setColumn_type(""String_Node_Str"");
  }
  setColumnFamilyProperties(cfDef,cFProperties,null);
  return cfDef;
}",0.9683397683397684
176773,"private void init() throws TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  CassandraCli.createKeySpace(""String_Node_Str"");
  loadData();
  Object p1=prepareData(""String_Node_Str"",10);
  Object p2=prepareData(""String_Node_Str"",20);
  Object p3=prepareData(""String_Node_Str"",15);
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
}","private void init() throws TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  Object p1=prepareData(""String_Node_Str"",10);
  Object p2=prepareData(""String_Node_Str"",20);
  Object p3=prepareData(""String_Node_Str"",15);
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
}",0.9307359307359307
176774,"/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  CassandraCli.cassandraSetUp();
  emf=Persistence.createEntityManagerFactory(""String_Node_Str"");
  em=emf.createEntityManager();
  col=new java.util.HashMap<Object,Object>();
}","/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  CassandraCli.cassandraSetUp();
  CassandraCli.createKeySpace(""String_Node_Str"");
  loadData();
  emf=Persistence.createEntityManagerFactory(""String_Node_Str"");
  em=emf.createEntityManager();
  col=new java.util.HashMap<Object,Object>();
}",0.8918918918918919
176775,"/** 
 * On insert cassandra.
 * @throws Exception the exception
 */
@Test public void onInsertCassandra() throws Exception {
  Object p1=prepareData(""String_Node_Str"",10);
  Object p2=prepareData(""String_Node_Str"",20);
  Object p3=prepareData(""String_Node_Str"",15);
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  PersonCassandra p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  em.clear();
  String qry=""String_Node_Str"";
  Query q=em.createQuery(qry);
  List<PersonCassandra> persons=q.getResultList();
  assertFindByName(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAge(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeGTAndLT(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeBetween(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByRange(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindWithoutWhereClause(em,""String_Node_Str"",PersonCassandra.class);
  for (  PersonCassandra person : persons) {
    person.setPersonName(""String_Node_Str"");
    em.merge(person);
  }
  em.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String deleteQuery=""String_Node_Str"";
  q=em.createQuery(deleteQuery);
  Assert.assertEquals(3,q.executeUpdate());
}","/** 
 * On insert cassandra.
 * @throws Exception the exception
 */
@Test public void onInsertCassandra() throws Exception {
  Object p1=prepareData(""String_Node_Str"",10);
  Object p2=prepareData(""String_Node_Str"",20);
  Object p3=prepareData(""String_Node_Str"",15);
  em.persist(p1);
  em.persist(p2);
  em.persist(p3);
  col.put(""String_Node_Str"",p1);
  col.put(""String_Node_Str"",p2);
  col.put(""String_Node_Str"",p3);
  PersonCassandra p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  em.clear();
  String qry=""String_Node_Str"";
  Query q=em.createQuery(qry);
  List<PersonCassandra> persons=q.getResultList();
  assertFindByName(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAge(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeGTAndLT(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByNameAndAgeBetween(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindByRange(em,""String_Node_Str"",PersonCassandra.class,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFindWithoutWhereClause(em,""String_Node_Str"",PersonCassandra.class);
  testCountResult();
  for (  PersonCassandra person : persons) {
    person.setPersonName(""String_Node_Str"");
    em.merge(person);
  }
  em.clear();
  p=findById(PersonCassandra.class,""String_Node_Str"",em);
  Assert.assertNotNull(p);
  Assert.assertEquals(""String_Node_Str"",p.getPersonName());
  String deleteQuery=""String_Node_Str"";
  q=em.createQuery(deleteQuery);
  Assert.assertEquals(3,q.executeUpdate());
}",0.9942575881870386
176776,"/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  CassandraCli.cassandraSetUp();
  CassandraCli.initClient();
  loadData();
  emf=Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);
}","/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  CassandraCli.cassandraSetUp();
  CassandraCli.initClient();
  emf=Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);
}",0.9683257918552036
176777,"/** 
 * Create keyspace.
 * @param keyspaceName keyspace name.
 */
public static void createKeySpace(String keyspaceName){
  try {
    client.describe_keyspace(keyspaceName);
  }
 catch (  NotFoundException e) {
    List<CfDef> cfDefs=new ArrayList<CfDef>();
    KsDef ks_Def=new KsDef(keyspaceName,SimpleStrategy.class.getName(),cfDefs);
    if (ks_Def.strategy_options == null) {
      ks_Def.strategy_options=new LinkedHashMap<String,String>();
    }
    ks_Def.strategy_options.put(""String_Node_Str"",""String_Node_Str"");
    try {
      client.system_add_keyspace(ks_Def);
    }
 catch (    TException e1) {
      log.error(e1.getMessage());
    }
catch (    InvalidRequestException ess) {
      log.error(ess.getMessage());
    }
catch (    SchemaDisagreementException sde) {
      log.error(sde.getMessage());
    }
  }
catch (  InvalidRequestException e) {
    log.error(e.getMessage());
  }
catch (  TException e) {
    log.error(e.getMessage());
  }
}","/** 
 * Create keyspace.
 * @param keyspaceName keyspace name.
 */
public static void createKeySpace(String keyspaceName){
  try {
    client.describe_keyspace(keyspaceName);
  }
 catch (  NotFoundException e) {
    List<CfDef> cfDefs=new ArrayList<CfDef>();
    KsDef ks_Def=new KsDef(keyspaceName,SimpleStrategy.class.getName(),cfDefs);
    if (ks_Def.strategy_options == null) {
      ks_Def.strategy_options=new LinkedHashMap<String,String>();
    }
    ks_Def.strategy_options.put(""String_Node_Str"",""String_Node_Str"");
    try {
      client.system_add_keyspace(ks_Def);
    }
 catch (    TException e1) {
      log.error(e1);
    }
catch (    InvalidRequestException ess) {
      log.error(ess);
    }
catch (    SchemaDisagreementException sde) {
      log.error(sde);
    }
  }
catch (  InvalidRequestException e) {
    log.error(e);
  }
catch (  TException e) {
    log.error(e);
  }
}",0.956287101996762
176778,"/** 
 * Drop out key space.
 * @param keyspaceName keyspace name
 */
public static void dropKeySpace(String keyspaceName){
  try {
    client.system_drop_keyspace(keyspaceName);
  }
 catch (  InvalidRequestException e) {
    log.error(e.getMessage());
  }
catch (  SchemaDisagreementException e) {
    log.error(e.getMessage());
  }
catch (  TException e) {
    log.error(e.getMessage());
  }
}","/** 
 * Drop out key space.
 * @param keyspaceName keyspace name
 */
public static void dropKeySpace(String keyspaceName){
  try {
    client.system_drop_keyspace(keyspaceName);
  }
 catch (  InvalidRequestException e) {
    log.error(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(e);
  }
catch (  TException e) {
    log.error(e);
  }
}",0.9479305740987984
176779,"public static boolean keyspaceExist(String keySpaceName){
  try {
    return client.describe_keyspace(keySpaceName) != null;
  }
 catch (  NotFoundException e) {
    return false;
  }
catch (  InvalidRequestException e) {
    log.error(e.getMessage());
  }
catch (  TException e) {
    log.error(e.getMessage());
  }
  return false;
}","public static boolean keyspaceExist(String keySpaceName){
  try {
    return client.describe_keyspace(keySpaceName) != null;
  }
 catch (  NotFoundException e) {
    return false;
  }
catch (  InvalidRequestException e) {
    log.error(e);
  }
catch (  TException e) {
    log.error(e);
  }
  return false;
}",0.9595015576323987
176780,"@Override public void configure(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  puToSchemaMetadata=appMetadata.getSchemaMetadata().getPuToSchemaMetadata();
  for (  String persistenceUnit : persistenceUnits) {
    log.info(""String_Node_Str"" + persistenceUnit);
    List<TableInfo> tableInfos=getSchemaInfo(persistenceUnit);
    Map<Class<?>,EntityMetadata> entityMetadataMap=getEntityMetadataCol(appMetadata,persistenceUnit);
    for (    EntityMetadata entityMetadata : entityMetadataMap.values()) {
      boolean found=false;
      Type type=entityMetadata.getType();
      Class idClassName=entityMetadata.getIdAttribute().getJavaType();
      TableInfo tableInfo=new TableInfo(entityMetadata.getTableName(),entityMetadata.isIndexable(),type.name(),idClassName);
      if (!tableInfos.isEmpty() && tableInfos.contains(tableInfo)) {
        found=true;
        int idx=tableInfos.indexOf(tableInfo);
        tableInfo=tableInfos.get(idx);
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
 else {
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
      List<Relation> relations=entityMetadata.getRelations();
      parseRelations(persistenceUnit,tableInfos,entityMetadata,tableInfo,relations);
      if (!found) {
        tableInfos.add(tableInfo);
      }
    }
    puToSchemaMetadata.put(persistenceUnit,tableInfos);
    if (getSchemaProperty(persistenceUnit) != null) {
      ClientFactory clientFactory=ClientResolver.getClientFactory(persistenceUnit);
      SchemaManager schemaManager=clientFactory != null ? clientFactory.getSchemaManager() : null;
      if (schemaManager != null) {
        schemaManager.exportSchema();
      }
    }
  }
}","@Override public void configure(){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  puToSchemaMetadata=appMetadata.getSchemaMetadata().getPuToSchemaMetadata();
  for (  String persistenceUnit : persistenceUnits) {
    log.info(""String_Node_Str"" + persistenceUnit);
    List<TableInfo> tableInfos=getSchemaInfo(persistenceUnit);
    Map<Class<?>,EntityMetadata> entityMetadataMap=getEntityMetadataCol(appMetadata,persistenceUnit);
    for (    EntityMetadata entityMetadata : entityMetadataMap.values()) {
      boolean found=false;
      Type type=entityMetadata.getType();
      Class idClassName=entityMetadata.getIdAttribute().getJavaType();
      TableInfo tableInfo=new TableInfo(entityMetadata.getTableName(),entityMetadata.isIndexable(),type.name(),idClassName);
      if (!tableInfos.isEmpty() && tableInfos.contains(tableInfo)) {
        found=true;
        int idx=tableInfos.indexOf(tableInfo);
        tableInfo=tableInfos.get(idx);
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
 else {
        addColumnToTableInfo(entityMetadata,type,tableInfo);
      }
      List<Relation> relations=entityMetadata.getRelations();
      parseRelations(persistenceUnit,tableInfos,entityMetadata,tableInfo,relations);
      if (!found) {
        tableInfos.add(tableInfo);
      }
    }
    puToSchemaMetadata.put(persistenceUnit,tableInfos);
  }
  for (  String persistenceUnit : persistenceUnits) {
    if (getSchemaProperty(persistenceUnit) != null) {
      ClientFactory clientFactory=ClientResolver.getClientFactory(persistenceUnit);
      SchemaManager schemaManager=clientFactory != null ? clientFactory.getSchemaManager() : null;
      if (schemaManager != null) {
        schemaManager.exportSchema();
      }
    }
  }
}",0.9835133598635588
176781,"public final void process(final Class<?> clazz,EntityMetadata metadata){
  if (clazz != null) {
    metadata.setIndexName(clazz.getSimpleName());
  }
  Index idx=clazz.getAnnotation(Index.class);
  IndexCollection indexes=clazz.getAnnotation(IndexCollection.class);
  List<String> columnsNameToBeIndexed=new ArrayList<String>();
  Map<String,com.impetus.kundera.index.Index> indexedColumnsMap=new HashMap<String,com.impetus.kundera.index.Index>();
  if (null != indexes) {
    if (indexes.columns() != null && indexes.columns().length != 0) {
      metadata.setIndexable(true);
      for (      com.impetus.kundera.index.Index indexedColumn : indexes.columns()) {
        indexedColumnsMap.put(indexedColumn.name(),indexedColumn);
      }
    }
  }
 else   if (null != idx) {
    boolean isIndexable=idx.index();
    if (isIndexable) {
      metadata.setIndexable(isIndexable);
      String indexName=idx.name();
      if (indexName != null && !indexName.isEmpty()) {
        metadata.setIndexName(indexName);
      }
      if (idx.columns() != null && idx.columns().length != 0) {
        for (        String indexedColumn : idx.columns()) {
          columnsNameToBeIndexed.add(indexedColumn);
        }
      }
    }
  }
 else {
    log.debug(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ (indexedColumnsMap.isEmpty() ? ""String_Node_Str"" : indexedColumnsMap));
    return;
  }
  log.debug(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  for (  Field f : clazz.getDeclaredFields()) {
    if (f.isAnnotationPresent(Column.class)) {
      String fieldName=f.getName();
      if (indexedColumnsMap != null && !indexedColumnsMap.isEmpty() && indexedColumnsMap.containsKey(fieldName)) {
        com.impetus.kundera.index.Index indexedColumn=indexedColumnsMap.get(fieldName);
        metadata.addIndexProperty(populatePropertyIndex(indexedColumn.name(),indexedColumn.type(),indexedColumn.max(),indexedColumn.min(),f));
      }
 else       if (columnsNameToBeIndexed != null && !columnsNameToBeIndexed.isEmpty() && columnsNameToBeIndexed.contains(fieldName)) {
        metadata.addIndexProperty(populatePropertyIndex(fieldName,null,null,null,f));
      }
    }
  }
}","public final void process(final Class<?> clazz,EntityMetadata metadata){
  if (clazz != null) {
    metadata.setIndexName(clazz.getSimpleName());
  }
  Index idx=clazz.getAnnotation(Index.class);
  IndexCollection indexes=clazz.getAnnotation(IndexCollection.class);
  List<String> columnsNameToBeIndexed=new ArrayList<String>();
  Map<String,com.impetus.kundera.index.Index> indexedColumnsMap=new HashMap<String,com.impetus.kundera.index.Index>();
  if (null != indexes) {
    if (indexes.columns() != null && indexes.columns().length != 0) {
      metadata.setIndexable(true);
      for (      com.impetus.kundera.index.Index indexedColumn : indexes.columns()) {
        indexedColumnsMap.put(indexedColumn.name(),indexedColumn);
      }
    }
  }
 else   if (null != idx) {
    boolean isIndexable=idx.index();
    if (isIndexable) {
      metadata.setIndexable(isIndexable);
      String indexName=idx.name();
      if (indexName != null && !indexName.isEmpty()) {
        metadata.setIndexName(indexName);
      }
      if (idx.columns() != null && idx.columns().length != 0) {
        for (        String indexedColumn : idx.columns()) {
          columnsNameToBeIndexed.add(indexedColumn);
        }
      }
    }
  }
 else {
    log.debug(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ (indexedColumnsMap.isEmpty() ? ""String_Node_Str"" : indexedColumnsMap));
    return;
  }
  log.debug(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  for (  Field f : clazz.getDeclaredFields()) {
    if (f.isAnnotationPresent(Column.class)) {
      String fieldName=f.getName();
      String colName=getIndexName(f,fieldName);
      if (indexedColumnsMap != null && !indexedColumnsMap.isEmpty() && indexedColumnsMap.containsKey(fieldName)) {
        com.impetus.kundera.index.Index indexedColumn=indexedColumnsMap.get(fieldName);
        metadata.addIndexProperty(populatePropertyIndex(indexedColumn.name(),indexedColumn.type(),indexedColumn.max(),indexedColumn.min(),f));
      }
 else       if (columnsNameToBeIndexed != null && !columnsNameToBeIndexed.isEmpty() && columnsNameToBeIndexed.contains(colName)) {
        metadata.addIndexProperty(populatePropertyIndex(fieldName,null,null,null,f));
      }
    }
  }
}",0.987313094698686
176782,"/** 
 * Drop out key space.
 * @param keyspaceName keyspace name
 */
public static void dropKeySpace(String keyspaceName){
  try {
    client.system_drop_keyspace(keyspaceName);
    deleteCassandraFolders(""String_Node_Str"");
    deleteCassandraFolders(""String_Node_Str"");
    deleteCassandraFolders(""String_Node_Str"");
    deleteCassandraFolders(""String_Node_Str"");
    deleteCassandraFolders(""String_Node_Str"");
  }
 catch (  InvalidRequestException e) {
    log.error(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(e);
  }
catch (  TException e) {
    log.error(e);
  }
}","/** 
 * Drop out key space.
 * @param keyspaceName keyspace name
 */
public static void dropKeySpace(String keyspaceName){
  try {
    client.system_drop_keyspace(keyspaceName);
  }
 catch (  InvalidRequestException e) {
    log.error(e);
  }
catch (  SchemaDisagreementException e) {
    log.error(e);
  }
catch (  TException e) {
    log.error(e);
  }
}",0.7513227513227513
176783,"/** 
 * delete by Named Query.
 */
private void deleteNamed(){
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  String deleteQuery=""String_Node_Str"";
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  Query q=em.createQuery(deleteQuery);
  q.setParameter(""String_Node_Str"",key);
  q.executeUpdate();
  CassandraPrimeUser result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNull(result);
  em.close();
}","/** 
 * delete by Named Query.
 */
private void deleteNamed(){
  UUID timeLineId=UUID.randomUUID();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  String deleteQuery=""String_Node_Str"";
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  Query q=em.createQuery(deleteQuery);
  q.setParameter(""String_Node_Str"",key);
  q.executeUpdate();
  CassandraPrimeUser result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNull(result);
  em.close();
}",0.9771554900515844
176784,"/** 
 * Update by Named Query.
 * @return
 */
private void updateNamed(){
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  CassandraPrimeUser user=new CassandraPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  em.persist(user);
  em=emf.createEntityManager();
  clients=(Map<String,Client>)em.getDelegate();
  client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  String updateQuery=""String_Node_Str"";
  Query q=em.createQuery(updateQuery);
  q.setParameter(""String_Node_Str"",key);
  q.executeUpdate();
  CassandraPrimeUser result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.close();
}","/** 
 * Update by Named Query.
 * @return
 */
private void updateNamed(){
  EntityManager em=emf.createEntityManager();
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  UUID timeLineId=UUID.randomUUID();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  CassandraPrimeUser user=new CassandraPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  em.persist(user);
  em=emf.createEntityManager();
  clients=(Map<String,Client>)em.getDelegate();
  client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  String updateQuery=""String_Node_Str"";
  Query q=em.createQuery(updateQuery);
  q.setParameter(""String_Node_Str"",key);
  q.executeUpdate();
  CassandraPrimeUser result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.close();
}",0.9874646178730287
176785,"/** 
 * CRUD over Compound primary Key.
 */
@Test @PerfTest(invocations=1000) public void onCRUD(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  CassandraPrimeUser user=new CassandraPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  em.persist(user);
  em.clear();
  CassandraPrimeUser result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.clear();
  user.setTweetBody(""String_Node_Str"");
  em.merge(user);
  em.clear();
  result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.remove(result);
  em.clear();
  result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNull(result);
}","/** 
 * CRUD over Compound primary Key.
 */
@Test @PerfTest(invocations=10) public void onCRUD(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  CassandraPrimeUser user=new CassandraPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  em.persist(user);
  em.clear();
  CassandraPrimeUser result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.clear();
  user.setTweetBody(""String_Node_Str"");
  em.merge(user);
  em.clear();
  result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.remove(result);
  em.clear();
  result=em.find(CassandraPrimeUser.class,key);
  Assert.assertNull(result);
}",0.999297259311314
176786,"@Test public void onQuery(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  CassandraPrimeUser user=new CassandraPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(new Date());
  em.persist(user);
  em.clear();
  final String noClause=""String_Node_Str"";
  final String withFirstCompositeColClause=""String_Node_Str"";
  final String withSecondCompositeColClause=""String_Node_Str"";
  final String withBothCompositeColClause=""String_Node_Str"";
  final String withAllCompositeColClause=""String_Node_Str"";
  final String withLastCompositeColGTClause=""String_Node_Str"";
  final String withSelectiveCompositeColClause=""String_Node_Str"";
  Query q=em.createQuery(noClause);
  List<CassandraPrimeUser> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withFirstCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSecondCompositeColClause);
  q.setParameter(""String_Node_Str"",1);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withBothCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withLastCompositeColGTClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSelectiveCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNull(results.get(0).getTweetBody());
  final String selectiveColumnTweetBodyWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetBodyWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertNull(results.get(0).getTweetDate());
  final String selectiveColumnTweetDateWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetDateWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(currentDate.getTime(),results.get(0).getTweetDate().getTime());
  Assert.assertNull(results.get(0).getTweetBody());
  final String withCompositeKeyClause=""String_Node_Str"";
  q=em.createQuery(withCompositeKeyClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  em.remove(user);
  em.clear();
}","@Test public void onQuery(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  CassandraCompoundKey key=new CassandraCompoundKey(""String_Node_Str"",1,timeLineId);
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(""String_Node_Str"");
  CassandraPrimeUser user=new CassandraPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  em.persist(user);
  em.clear();
  final String noClause=""String_Node_Str"";
  final String withFirstCompositeColClause=""String_Node_Str"";
  final String withSecondCompositeColClause=""String_Node_Str"";
  final String withBothCompositeColClause=""String_Node_Str"";
  final String withAllCompositeColClause=""String_Node_Str"";
  final String withLastCompositeColGTClause=""String_Node_Str"";
  final String withSelectiveCompositeColClause=""String_Node_Str"";
  Query q=em.createQuery(noClause);
  List<CassandraPrimeUser> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withFirstCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSecondCompositeColClause);
  q.setParameter(""String_Node_Str"",1);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withBothCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withLastCompositeColGTClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSelectiveCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNull(results.get(0).getTweetBody());
  final String selectiveColumnTweetBodyWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetBodyWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertNull(results.get(0).getTweetDate());
  final String selectiveColumnTweetDateWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetDateWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(currentDate.getTime(),results.get(0).getTweetDate().getTime());
  Assert.assertNull(results.get(0).getTweetBody());
  final String withCompositeKeyClause=""String_Node_Str"";
  q=em.createQuery(withCompositeKeyClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  em.remove(user);
  em.clear();
}",0.9942028985507246
176787,"@Test @PerfTest(invocations=1000) public void onExecute() throws Exception {
  executeTwissandraTest();
}","@Test @PerfTest(invocations=10) public void onExecute() throws Exception {
  executeTwissandraTest();
}",0.9903846153846154
176788,"/** 
 * delete by Named Query.
 */
private void deleteNamed(){
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  MongoCompoundKey key=new MongoCompoundKey(""String_Node_Str"",1,timeLineId);
  String deleteQuery=""String_Node_Str"";
  EntityManager em=emf.createEntityManager();
  Query q=em.createQuery(deleteQuery);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.executeUpdate();
  MongoPrimeUser result=em.find(MongoPrimeUser.class,key);
  Assert.assertNull(result);
  em.close();
}","/** 
 * delete by Named Query.
 */
private void deleteNamed(){
  UUID timeLineId=UUID.randomUUID();
  MongoCompoundKey key=new MongoCompoundKey(""String_Node_Str"",1,timeLineId);
  String deleteQuery=""String_Node_Str"";
  EntityManager em=emf.createEntityManager();
  Query q=em.createQuery(deleteQuery);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.executeUpdate();
  MongoPrimeUser result=em.find(MongoPrimeUser.class,key);
  Assert.assertNull(result);
  em.close();
}",0.9687814702920444
176789,"/** 
 * Update by Named Query.
 * @return
 */
private void updateNamed(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  MongoCompoundKey key=new MongoCompoundKey(""String_Node_Str"",1,timeLineId);
  MongoPrimeUser user=new MongoPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(new Date());
  em.persist(user);
  em=emf.createEntityManager();
  String updateQuery=""String_Node_Str"";
  Query q=em.createQuery(updateQuery);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.executeUpdate();
  MongoPrimeUser result=em.find(MongoPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.close();
}","/** 
 * Update by Named Query.
 * @return
 */
private void updateNamed(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  MongoCompoundKey key=new MongoCompoundKey(""String_Node_Str"",1,timeLineId);
  MongoPrimeUser user=new MongoPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  em.persist(user);
  em=emf.createEntityManager();
  String updateQuery=""String_Node_Str"";
  Query q=em.createQuery(updateQuery);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.executeUpdate();
  MongoPrimeUser result=em.find(MongoPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.close();
}",0.9753363228699552
176790,"/** 
 * CRUD over Compound primary Key.
 */
@Test @PerfTest(invocations=1000) public synchronized void onCRUD(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  MongoCompoundKey key=new MongoCompoundKey(""String_Node_Str"",1,timeLineId);
  MongoPrimeUser user=new MongoPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  em.persist(user);
  em.clear();
  MongoPrimeUser result=em.find(MongoPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.clear();
  user.setTweetBody(""String_Node_Str"");
  em.merge(user);
  em.clear();
  result=em.find(MongoPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.remove(result);
  em.clear();
  result=em.find(MongoPrimeUser.class,key);
  Assert.assertNull(result);
}","/** 
 * CRUD over Compound primary Key.
 */
@Test @PerfTest(invocations=10) public synchronized void onCRUD(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  MongoCompoundKey key=new MongoCompoundKey(""String_Node_Str"",1,timeLineId);
  MongoPrimeUser user=new MongoPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  em.persist(user);
  em.clear();
  MongoPrimeUser result=em.find(MongoPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.clear();
  user.setTweetBody(""String_Node_Str"");
  em.merge(user);
  em.clear();
  result=em.find(MongoPrimeUser.class,key);
  Assert.assertNotNull(result);
  Assert.assertEquals(""String_Node_Str"",result.getTweetBody());
  Assert.assertEquals(timeLineId,result.getKey().getTimeLineId());
  Assert.assertEquals(currentDate.getTime(),result.getTweetDate().getTime());
  em.remove(result);
  em.clear();
  result=em.find(MongoPrimeUser.class,key);
  Assert.assertNull(result);
}",0.9991714995857498
176791,"@Test public synchronized void onQuery(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  MongoCompoundKey key=new MongoCompoundKey(""String_Node_Str"",1,timeLineId);
  MongoPrimeUser user=new MongoPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(new Date());
  em.persist(user);
  em.clear();
  final String noClause=""String_Node_Str"";
  final String withFirstCompositeColClause=""String_Node_Str"";
  final String withClauseOnNoncomposite=""String_Node_Str"";
  final String withSecondCompositeColClause=""String_Node_Str"";
  final String withBothCompositeColClause=""String_Node_Str"";
  final String withAllCompositeColClause=""String_Node_Str"";
  final String withLastCompositeColGTClause=""String_Node_Str"";
  final String withSelectiveCompositeColClause=""String_Node_Str"";
  Query q=em.createQuery(noClause);
  List<MongoPrimeUser> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withFirstCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  results=q.getResultList();
  Assert.assertNull(results);
  q=em.createQuery(withClauseOnNoncomposite);
  q.setParameter(1,currentDate);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSecondCompositeColClause);
  q.setParameter(""String_Node_Str"",1);
  results=q.getResultList();
  Assert.assertNull(results);
  q=em.createQuery(withBothCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  results=q.getResultList();
  Assert.assertNull(results);
  q=em.createQuery(withAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withLastCompositeColGTClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  q=em.createQuery(withSelectiveCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNull(results.get(0).getTweetBody());
  final String selectiveColumnTweetBodyWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetBodyWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertNull(results.get(0).getTweetDate());
  final String selectiveColumnTweetDateWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetDateWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(currentDate.getTime(),results.get(0).getTweetDate().getTime());
  Assert.assertNull(results.get(0).getTweetBody());
  final String withCompositeKeyClause=""String_Node_Str"";
  q=em.createQuery(withCompositeKeyClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  em.remove(user);
  em.clear();
}","@Test public synchronized void onQuery(){
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  MongoCompoundKey key=new MongoCompoundKey(""String_Node_Str"",1,timeLineId);
  MongoPrimeUser user=new MongoPrimeUser(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(currentDate);
  em.persist(user);
  em.clear();
  final String noClause=""String_Node_Str"";
  final String withFirstCompositeColClause=""String_Node_Str"";
  final String withClauseOnNoncomposite=""String_Node_Str"";
  final String withSecondCompositeColClause=""String_Node_Str"";
  final String withBothCompositeColClause=""String_Node_Str"";
  final String withAllCompositeColClause=""String_Node_Str"";
  final String withLastCompositeColGTClause=""String_Node_Str"";
  final String withSelectiveCompositeColClause=""String_Node_Str"";
  Query q=em.createQuery(noClause);
  List<MongoPrimeUser> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withFirstCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  results=q.getResultList();
  Assert.assertNull(results);
  q=em.createQuery(withClauseOnNoncomposite);
  q.setParameter(1,currentDate);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSecondCompositeColClause);
  q.setParameter(""String_Node_Str"",1);
  results=q.getResultList();
  Assert.assertNull(results);
  q=em.createQuery(withBothCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  results=q.getResultList();
  Assert.assertNull(results);
  q=em.createQuery(withAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withLastCompositeColGTClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  q=em.createQuery(withSelectiveCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNull(results.get(0).getTweetBody());
  final String selectiveColumnTweetBodyWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetBodyWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertNull(results.get(0).getTweetDate());
  final String selectiveColumnTweetDateWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetDateWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",1);
  q.setParameter(""String_Node_Str"",timeLineId);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(currentDate.getTime(),results.get(0).getTweetDate().getTime());
  Assert.assertNull(results.get(0).getTweetBody());
  final String withCompositeKeyClause=""String_Node_Str"";
  q=em.createQuery(withCompositeKeyClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  em.remove(user);
  em.clear();
}",0.9941207910208444
176792,"/** 
 * Test on execute.
 */
@Test @PerfTest(invocations=1000) public void testOnExecute(){
  executeTestSuite();
}","/** 
 * Test on execute.
 */
@Test @PerfTest(invocations=10) public void testOnExecute(){
  executeTestSuite();
}",0.9912280701754386
176793,"@BeforeClass public static void setUpBeforeClass() throws Exception {
  if (USE_EMBEDDED_SERVER) {
    CassandraCli.cassandraSetUp();
  }
  if (AUTO_MANAGE_SCHEMA) {
    CassandraCli.dropKeySpace(_KEYSPACE.toLowerCase());
    loadData();
  }
}","@BeforeClass public static void setUpBeforeClass() throws Exception {
  if (USE_EMBEDDED_SERVER) {
    CassandraCli.cassandraSetUp();
  }
  if (AUTO_MANAGE_SCHEMA) {
    CassandraCli.dropKeySpace(_KEYSPACE.toLowerCase());
    loadData();
  }
  restClient=new RESTClientImpl();
}",0.9328214971209212
176794,"@Test @PerfTest(invocations=1000) public void testCRUDOnAssociation(){
  String personStr;
  String personStr1;
  String personPk=""String_Node_Str"";
  String person1Pk=""String_Node_Str"";
  String addressPk=""String_Node_Str"";
  Set<HabitatUni1ToM> addresses=new HashSet<HabitatUni1ToM>();
  HabitatUni1ToM add1=new HabitatUni1ToM();
  add1.setAddressId(addressPk);
  add1.setStreet(""String_Node_Str"");
  HabitatUni1ToM add=new HabitatUni1ToM();
  add.setAddressId(addressPk);
  add.setStreet(""String_Node_Str"");
  addresses.add(add1);
  addresses.add(add);
  PersonnelUni1ToM p=new PersonnelUni1ToM();
  p.setPersonId(personPk);
  p.setPersonName(""String_Node_Str"");
  p.setAddresses(addresses);
  PersonnelUni1ToM p1=new PersonnelUni1ToM();
  p1.setPersonId(person1Pk);
  p1.setPersonName(""String_Node_Str"");
  p1.setAddresses(addresses);
  personStr=JAXBUtils.toString(PersonnelUni1ToM.class,p,mediaType);
  personStr1=JAXBUtils.toString(PersonnelUni1ToM.class,p1,mediaType);
  applicationToken=restClient.getApplicationToken(""String_Node_Str"");
  Assert.assertNotNull(applicationToken);
  Assert.assertTrue(applicationToken.startsWith(""String_Node_Str""));
  sessionToken=restClient.getSessionToken(applicationToken);
  Assert.assertNotNull(sessionToken);
  Assert.assertTrue(sessionToken.startsWith(""String_Node_Str""));
  String insertResponse=restClient.insertPerson(sessionToken,personStr);
  String insertResponse1=restClient.insertPerson(sessionToken,personStr1);
  Assert.assertNotNull(insertResponse);
  Assert.assertTrue(insertResponse.indexOf(""String_Node_Str"") > 0);
  Assert.assertNotNull(insertResponse1);
  Assert.assertTrue(insertResponse1.indexOf(""String_Node_Str"") > 0);
  String foundPerson=restClient.findPerson(sessionToken,personPk);
  Assert.assertNotNull(foundPerson);
  if (MediaType.APPLICATION_JSON.equals(mediaType)) {
    foundPerson=""String_Node_Str"" + foundPerson + ""String_Node_Str"";
  }
  Assert.assertTrue(foundPerson.indexOf(addressPk) > 0);
  Assert.assertTrue(foundPerson.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(foundPerson.indexOf(""String_Node_Str"") > 0);
  String updatedPerson=restClient.updatePerson(sessionToken,foundPerson);
  Assert.assertNotNull(updatedPerson);
  Assert.assertTrue(updatedPerson.indexOf(""String_Node_Str"") > 0);
  String allPersons=restClient.getAllPersons(sessionToken);
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.indexOf(""String_Node_Str"") > 0);
  log.debug(allPersons);
  String jpaQuery=""String_Node_Str"" + person1Pk;
  String queryResult=restClient.runJPAQuery(sessionToken,jpaQuery,new HashMap<String,Object>());
  log.debug(""String_Node_Str"" + queryResult);
  restClient.deletePerson(sessionToken,updatedPerson,personPk);
  foundPerson=restClient.findPerson(sessionToken,personPk);
  Assert.assertEquals(""String_Node_Str"",foundPerson);
  restClient.closeSession(sessionToken);
  restClient.closeApplication(applicationToken);
}","@Test @PerfTest(invocations=10) public void testCRUDOnAssociation(){
  String personStr;
  String personStr1;
  String personPk=""String_Node_Str"";
  String person1Pk=""String_Node_Str"";
  String addressPk=""String_Node_Str"";
  Set<HabitatUni1ToM> addresses=new HashSet<HabitatUni1ToM>();
  HabitatUni1ToM add1=new HabitatUni1ToM();
  add1.setAddressId(addressPk);
  add1.setStreet(""String_Node_Str"");
  HabitatUni1ToM add=new HabitatUni1ToM();
  add.setAddressId(addressPk);
  add.setStreet(""String_Node_Str"");
  addresses.add(add1);
  addresses.add(add);
  PersonnelUni1ToM p=new PersonnelUni1ToM();
  p.setPersonId(personPk);
  p.setPersonName(""String_Node_Str"");
  p.setAddresses(addresses);
  PersonnelUni1ToM p1=new PersonnelUni1ToM();
  p1.setPersonId(person1Pk);
  p1.setPersonName(""String_Node_Str"");
  p1.setAddresses(addresses);
  personStr=JAXBUtils.toString(PersonnelUni1ToM.class,p,mediaType);
  personStr1=JAXBUtils.toString(PersonnelUni1ToM.class,p1,mediaType);
  applicationToken=restClient.getApplicationToken(""String_Node_Str"");
  Assert.assertNotNull(applicationToken);
  Assert.assertTrue(applicationToken.startsWith(""String_Node_Str""));
  sessionToken=restClient.getSessionToken(applicationToken);
  Assert.assertNotNull(sessionToken);
  Assert.assertTrue(sessionToken.startsWith(""String_Node_Str""));
  String insertResponse=restClient.insertPerson(sessionToken,personStr);
  String insertResponse1=restClient.insertPerson(sessionToken,personStr1);
  Assert.assertNotNull(insertResponse);
  Assert.assertTrue(insertResponse.indexOf(""String_Node_Str"") > 0);
  Assert.assertNotNull(insertResponse1);
  Assert.assertTrue(insertResponse1.indexOf(""String_Node_Str"") > 0);
  String foundPerson=restClient.findPerson(sessionToken,personPk);
  Assert.assertNotNull(foundPerson);
  if (MediaType.APPLICATION_JSON.equals(mediaType)) {
    foundPerson=""String_Node_Str"" + foundPerson + ""String_Node_Str"";
  }
  Assert.assertTrue(foundPerson.indexOf(addressPk) > 0);
  Assert.assertTrue(foundPerson.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(foundPerson.indexOf(""String_Node_Str"") > 0);
  String updatedPerson=restClient.updatePerson(sessionToken,foundPerson);
  Assert.assertNotNull(updatedPerson);
  Assert.assertTrue(updatedPerson.indexOf(""String_Node_Str"") > 0);
  String allPersons=restClient.getAllPersons(sessionToken);
  Assert.assertNotNull(allPersons);
  Assert.assertTrue(allPersons.indexOf(""String_Node_Str"") > 0);
  log.debug(allPersons);
  String jpaQuery=""String_Node_Str"" + person1Pk;
  String queryResult=restClient.runJPAQuery(sessionToken,jpaQuery,new HashMap<String,Object>());
  log.debug(""String_Node_Str"" + queryResult);
  restClient.deletePerson(sessionToken,updatedPerson,personPk);
  foundPerson=restClient.findPerson(sessionToken,personPk);
  Assert.assertEquals(""String_Node_Str"",foundPerson);
  restClient.closeSession(sessionToken);
  restClient.closeApplication(applicationToken);
  if (AUTO_MANAGE_SCHEMA) {
    truncateColumnFamily();
  }
}",0.9895305639986492
176795,"@Before public void setup() throws Exception {
}","@Before public void setup() throws Exception {
  restClient.initialize(webResource,mediaType);
}",0.6666666666666666
176796,"@Test @PerfTest(invocations=1000) public void testCRUD(){
  WebResource webResource=resource();
  restClient=new RESTClientImpl();
  restClient.initialize(webResource,mediaType);
  if (MediaType.APPLICATION_XML.equals(mediaType)) {
    bookStr1=""String_Node_Str"";
    bookStr2=""String_Node_Str"";
    pk1=""String_Node_Str"";
    pk2=""String_Node_Str"";
  }
 else   if (MediaType.APPLICATION_JSON.equals(mediaType)) {
    bookStr1=""String_Node_Str"";
    bookStr2=""String_Node_Str"";
    pk1=""String_Node_Str"";
    pk2=""String_Node_Str"";
  }
 else {
    Assert.fail(""String_Node_Str"" + mediaType);
    return;
  }
  applicationToken=restClient.getApplicationToken(""String_Node_Str"");
  Assert.assertNotNull(applicationToken);
  Assert.assertTrue(applicationToken.startsWith(""String_Node_Str""));
  sessionToken=restClient.getSessionToken(applicationToken);
  Assert.assertNotNull(sessionToken);
  Assert.assertTrue(sessionToken.startsWith(""String_Node_Str""));
  String insertResponse1=restClient.insertEntity(sessionToken,bookStr1,""String_Node_Str"");
  String insertResponse2=restClient.insertEntity(sessionToken,bookStr2,""String_Node_Str"");
  Assert.assertNotNull(insertResponse1);
  Assert.assertNotNull(insertResponse2);
  Assert.assertTrue(insertResponse1.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(insertResponse2.indexOf(""String_Node_Str"") > 0);
  String foundBook=restClient.findEntity(sessionToken,pk1,""String_Node_Str"");
  Assert.assertNotNull(foundBook);
  if (MediaType.APPLICATION_JSON.equals(mediaType)) {
    foundBook=""String_Node_Str"" + foundBook + ""String_Node_Str"";
  }
  Assert.assertTrue(foundBook.indexOf(""String_Node_Str"") > 0);
  foundBook=foundBook.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String updatedBook=restClient.updateEntity(sessionToken,foundBook,""String_Node_Str"");
  Assert.assertNotNull(updatedBook);
  Assert.assertTrue(updatedBook.indexOf(""String_Node_Str"") > 0);
  String jpaQuery=""String_Node_Str"";
  String queryResult=restClient.runJPAQuery(sessionToken,jpaQuery,new HashMap<String,Object>());
  log.debug(""String_Node_Str"" + queryResult);
  String allBooks=restClient.getAllEntities(sessionToken,""String_Node_Str"");
  Assert.assertNotNull(allBooks);
  Assert.assertTrue(allBooks.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(allBooks.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(allBooks.indexOf(""String_Node_Str"") > 0);
  log.debug(allBooks);
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  String booksByAuthor=restClient.runNamedJPAQuery(sessionToken,Book.class.getSimpleName(),""String_Node_Str"",params);
  Assert.assertNotNull(booksByAuthor);
  Assert.assertTrue(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  Assert.assertFalse(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  log.debug(booksByAuthor);
  Map<String,Object> paramsPublication=new HashMap<String,Object>();
  paramsPublication.put(""String_Node_Str"",""String_Node_Str"");
  String booksByPublication=restClient.runNamedJPAQuery(sessionToken,Book.class.getSimpleName(),""String_Node_Str"",paramsPublication);
  Assert.assertNotNull(booksByPublication);
  Assert.assertTrue(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  Assert.assertFalse(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  log.debug(booksByAuthor);
  String nativeQuery=""String_Node_Str"";
  String nativeQueryResult=restClient.runNativeQuery(sessionToken,""String_Node_Str"",nativeQuery,new HashMap<String,Object>());
  log.debug(""String_Node_Str"" + nativeQueryResult);
  Assert.assertNotNull(nativeQueryResult);
  Assert.assertTrue(nativeQueryResult.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(nativeQueryResult.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(nativeQueryResult.indexOf(""String_Node_Str"") > 0);
  String namedNativeQuerySelectResult=restClient.runNamedNativeQuery(sessionToken,""String_Node_Str"",""String_Node_Str"",new HashMap<String,Object>());
  log.debug(""String_Node_Str"" + namedNativeQuerySelectResult);
  Assert.assertNotNull(namedNativeQuerySelectResult);
  Assert.assertTrue(namedNativeQuerySelectResult.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(namedNativeQuerySelectResult.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(namedNativeQuerySelectResult.indexOf(""String_Node_Str"") > 0);
  restClient.deleteEntity(sessionToken,updatedBook,pk1,""String_Node_Str"");
  restClient.deleteEntity(sessionToken,updatedBook,pk2,""String_Node_Str"");
  restClient.closeSession(sessionToken);
  restClient.closeApplication(applicationToken);
}","@Test @PerfTest(invocations=10) public void testCRUD(){
  if (MediaType.APPLICATION_XML.equals(mediaType)) {
    bookStr1=""String_Node_Str"";
    bookStr2=""String_Node_Str"";
    pk1=""String_Node_Str"";
    pk2=""String_Node_Str"";
  }
 else   if (MediaType.APPLICATION_JSON.equals(mediaType)) {
    bookStr1=""String_Node_Str"";
    bookStr2=""String_Node_Str"";
    pk1=""String_Node_Str"";
    pk2=""String_Node_Str"";
  }
 else {
    Assert.fail(""String_Node_Str"" + mediaType);
    return;
  }
  applicationToken=restClient.getApplicationToken(""String_Node_Str"");
  Assert.assertNotNull(applicationToken);
  Assert.assertTrue(applicationToken.startsWith(""String_Node_Str""));
  sessionToken=restClient.getSessionToken(applicationToken);
  Assert.assertNotNull(sessionToken);
  Assert.assertTrue(sessionToken.startsWith(""String_Node_Str""));
  String insertResponse1=restClient.insertEntity(sessionToken,bookStr1,""String_Node_Str"");
  String insertResponse2=restClient.insertEntity(sessionToken,bookStr2,""String_Node_Str"");
  Assert.assertNotNull(insertResponse1);
  Assert.assertNotNull(insertResponse2);
  Assert.assertTrue(insertResponse1.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(insertResponse2.indexOf(""String_Node_Str"") > 0);
  String foundBook=restClient.findEntity(sessionToken,pk1,""String_Node_Str"");
  Assert.assertNotNull(foundBook);
  if (MediaType.APPLICATION_JSON.equals(mediaType)) {
    foundBook=""String_Node_Str"" + foundBook + ""String_Node_Str"";
  }
  Assert.assertTrue(foundBook.indexOf(""String_Node_Str"") > 0);
  foundBook=foundBook.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String updatedBook=restClient.updateEntity(sessionToken,foundBook,""String_Node_Str"");
  Assert.assertNotNull(updatedBook);
  Assert.assertTrue(updatedBook.indexOf(""String_Node_Str"") > 0);
  String jpaQuery=""String_Node_Str"";
  String queryResult=restClient.runJPAQuery(sessionToken,jpaQuery,new HashMap<String,Object>());
  log.debug(""String_Node_Str"" + queryResult);
  String allBooks=restClient.getAllEntities(sessionToken,""String_Node_Str"");
  Assert.assertNotNull(allBooks);
  Assert.assertTrue(allBooks.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(allBooks.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(allBooks.indexOf(""String_Node_Str"") > 0);
  log.debug(allBooks);
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  String booksByAuthor=restClient.runNamedJPAQuery(sessionToken,Book.class.getSimpleName(),""String_Node_Str"",params);
  Assert.assertNotNull(booksByAuthor);
  Assert.assertTrue(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  Assert.assertFalse(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  log.debug(booksByAuthor);
  Map<String,Object> paramsPublication=new HashMap<String,Object>();
  paramsPublication.put(""String_Node_Str"",""String_Node_Str"");
  String booksByPublication=restClient.runNamedJPAQuery(sessionToken,Book.class.getSimpleName(),""String_Node_Str"",paramsPublication);
  Assert.assertNotNull(booksByPublication);
  Assert.assertTrue(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  Assert.assertFalse(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(booksByAuthor.indexOf(""String_Node_Str"") > 0);
  log.debug(booksByAuthor);
  String nativeQuery=""String_Node_Str"";
  String nativeQueryResult=restClient.runNativeQuery(sessionToken,""String_Node_Str"",nativeQuery,new HashMap<String,Object>());
  log.debug(""String_Node_Str"" + nativeQueryResult);
  Assert.assertNotNull(nativeQueryResult);
  Assert.assertTrue(nativeQueryResult.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(nativeQueryResult.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(nativeQueryResult.indexOf(""String_Node_Str"") > 0);
  String namedNativeQuerySelectResult=restClient.runNamedNativeQuery(sessionToken,""String_Node_Str"",""String_Node_Str"",new HashMap<String,Object>());
  log.debug(""String_Node_Str"" + namedNativeQuerySelectResult);
  Assert.assertNotNull(namedNativeQuerySelectResult);
  Assert.assertTrue(namedNativeQuerySelectResult.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(namedNativeQuerySelectResult.indexOf(""String_Node_Str"") > 0);
  Assert.assertTrue(namedNativeQuerySelectResult.indexOf(""String_Node_Str"") > 0);
  restClient.deleteEntity(sessionToken,updatedBook,pk1,""String_Node_Str"");
  restClient.deleteEntity(sessionToken,updatedBook,pk2,""String_Node_Str"");
  restClient.closeSession(sessionToken);
  restClient.closeApplication(applicationToken);
  if (AUTO_MANAGE_SCHEMA) {
    truncateColumnFamily();
  }
}",0.980587673703193
176797,"private void setFieldValueViaCQL(Object entity,Object thriftColumnValue,Attribute attribute){
  if (attribute != null) {
    try {
      if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(String.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(char.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(Character.class)) {
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),new String((byte[])thriftColumnValue));
      }
 else       if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(short.class)) {
        IntegerAccessor accessor=new IntegerAccessor();
        Integer value=accessor.fromBytes(short.class,(byte[])thriftColumnValue);
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),String.valueOf(value));
      }
 else {
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),(byte[])thriftColumnValue);
      }
    }
 catch (    PropertyAccessException pae) {
      log.warn(pae.getMessage());
    }
  }
}","private void setFieldValueViaCQL(Object entity,Object thriftColumnValue,Attribute attribute){
  if (attribute != null) {
    try {
      if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(String.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(char.class) || ((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(Character.class)) {
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),new String((byte[])thriftColumnValue));
      }
 else       if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(short.class)) {
        IntegerAccessor accessor=new IntegerAccessor();
        Integer value=accessor.fromBytes(short.class,(byte[])thriftColumnValue);
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),String.valueOf(value));
      }
 else       if (((AbstractAttribute)attribute).getBindableJavaType().isAssignableFrom(byte.class)) {
        IntegerAccessor accessor=new IntegerAccessor();
        Integer value=accessor.fromBytes(byte.class,(byte[])thriftColumnValue);
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),String.valueOf(value));
      }
 else {
        PropertyAccessorHelper.set(entity,(Field)attribute.getJavaMember(),(byte[])thriftColumnValue);
      }
    }
 catch (    PropertyAccessException pae) {
      log.warn(pae.getMessage());
    }
  }
}",0.8106603023070803
176798,"/** 
 * Appends value to builder object for given class type
 * @param builder string builder.
 * @param fieldClazz field class.
 * @param value value to be appended.
 * @param isPresent if field is present.
 * @return true, if value is not null else false.
 */
private boolean appendValue(StringBuilder builder,Class fieldClazz,Object value,boolean isPresent){
  if (value != null) {
    isPresent=true;
    if (fieldClazz.isAssignableFrom(String.class) || isDate(fieldClazz) || fieldClazz.isAssignableFrom(char.class)|| fieldClazz.isAssignableFrom(Character.class)|| fieldClazz.isAssignableFrom(boolean.class)|| fieldClazz.isAssignableFrom(Boolean.class)) {
      builder.append(""String_Node_Str"");
      if (isDate(fieldClazz)) {
        builder.append(PropertyAccessorFactory.getPropertyAccessor(fieldClazz).toString(value));
      }
 else {
        builder.append(value);
      }
      builder.append(""String_Node_Str"");
    }
 else     if (fieldClazz.isAssignableFrom(byte.class)) {
      ByteAccessor accessor=new ByteAccessor();
      builder.append(Hex.encodeHex(accessor.toBytes(value)));
    }
 else {
      builder.append(value);
    }
  }
  return isPresent;
}","/** 
 * Appends value to builder object for given class type
 * @param builder string builder.
 * @param fieldClazz field class.
 * @param value value to be appended.
 * @param isPresent if field is present.
 * @return true, if value is not null else false.
 */
private boolean appendValue(StringBuilder builder,Class fieldClazz,Object value,boolean isPresent){
  if (value != null) {
    isPresent=true;
    if (fieldClazz.isAssignableFrom(String.class) || isDate(fieldClazz) || fieldClazz.isAssignableFrom(char.class)|| fieldClazz.isAssignableFrom(Character.class)|| fieldClazz.isAssignableFrom(boolean.class)|| fieldClazz.isAssignableFrom(Boolean.class)) {
      builder.append(""String_Node_Str"");
      if (isDate(fieldClazz)) {
        builder.append(PropertyAccessorFactory.getPropertyAccessor(fieldClazz).toString(value));
      }
 else {
        builder.append(value);
      }
      builder.append(""String_Node_Str"");
    }
 else {
      builder.append(value);
    }
  }
  return isPresent;
}",0.8798895536125173
176799,"@Test public void onQuery() throws InstantiationException, IllegalAccessException {
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CompoundKeyDataType key=prepareData(new Long(12345677),78575785897L,""String_Node_Str"",false,10,'A',(byte)5,(short)8,(float)69.3,163.76765654,enrolmentDate,enrolmentTime,joiningDateAndTime,new Integer(3),new Long(978423946455l),135434.89,newSqlDate,sqlTime,sqlTimestamp,bigDecimal,bigInteger,calendar,CompoundKeyDataType.class.newInstance());
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  PrimeUserDataType user=new PrimeUserDataType(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(new Date());
  em.persist(user);
  em.clear();
  final String noClause=""String_Node_Str"";
  final String withFirstCompositeColClause=""String_Node_Str"";
  final String withSecondCompositeColClause=""String_Node_Str"";
  final String withBothCompositeColClause=""String_Node_Str"";
  final String withSelectiveCompositeColClause=""String_Node_Str"";
  Query q=em.createQuery(noClause);
  List<PrimeUserDataType> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withFirstCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSecondCompositeColClause);
  q.setParameter(""String_Node_Str"",78575785897L);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withBothCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  q.setParameter(""String_Node_Str"",78575785897L);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSelectiveCompositeColClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNull(results.get(0).getTweetBody());
  final String selectiveColumnTweetDateWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetDateWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(currentDate.getTime(),results.get(0).getTweetDate().getTime());
  Assert.assertNull(results.get(0).getTweetBody());
  final String withCompositeKeyClause=""String_Node_Str"";
  q=em.createQuery(withCompositeKeyClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  em.remove(user);
  em.clear();
}","@Test public void onQuery() throws InstantiationException, IllegalAccessException {
  EntityManager em=emf.createEntityManager();
  UUID timeLineId=UUID.randomUUID();
  Date currentDate=new Date();
  CompoundKeyDataType key=prepareData(new Long(12345677),78575785897L,""String_Node_Str"",false,10,'A',(byte)5,(short)8,(float)69.3,163.76765654,enrolmentDate,enrolmentTime,joiningDateAndTime,new Integer(3),new Long(978423946455l),135434.89,newSqlDate,sqlTime,sqlTimestamp,bigDecimal,bigInteger,calendar,CompoundKeyDataType.class.newInstance());
  Map<String,Client> clients=(Map<String,Client>)em.getDelegate();
  Client client=clients.get(PERSISTENCE_UNIT);
  ((CassandraClientBase)client).setCqlVersion(CassandraConstants.CQL_VERSION_3_0);
  PrimeUserDataType user=new PrimeUserDataType(key);
  user.setTweetBody(""String_Node_Str"");
  user.setTweetDate(new Date());
  em.persist(user);
  em.clear();
  final String noClause=""String_Node_Str"";
  final String withFirstCompositeColClause=""String_Node_Str"";
  final String withSecondCompositeColClause=""String_Node_Str"";
  final String withBothCompositeColClause=""String_Node_Str"";
  final String withSelectiveCompositeColClause=""String_Node_Str"";
  final String withAllCompositeColClause=""String_Node_Str"";
  final String selectiveColumnTweetBodyWithAllCompositeColClause=""String_Node_Str"";
  Query q=em.createQuery(noClause);
  List<PrimeUserDataType> results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withFirstCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSecondCompositeColClause);
  q.setParameter(""String_Node_Str"",78575785897L);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withBothCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  q.setParameter(""String_Node_Str"",78575785897L);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withAllCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  q.setParameter(""String_Node_Str"",78575785897L);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",false);
  q.setParameter(""String_Node_Str"",10);
  q.setParameter(""String_Node_Str"",'A');
  q.setParameter(""String_Node_Str"",new Byte((byte)5));
  q.setParameter(""String_Node_Str"",(short)8);
  q.setParameter(""String_Node_Str"",(float)69.3);
  q.setParameter(""String_Node_Str"",163.76765654);
  q.setParameter(""String_Node_Str"",enrolmentDate);
  q.setParameter(""String_Node_Str"",enrolmentTime);
  q.setParameter(""String_Node_Str"",joiningDateAndTime);
  q.setParameter(""String_Node_Str"",new Integer(3));
  q.setParameter(""String_Node_Str"",new Long(978423946455l));
  q.setParameter(""String_Node_Str"",135434.89);
  q.setParameter(""String_Node_Str"",newSqlDate);
  q.setParameter(""String_Node_Str"",sqlTimestamp);
  q.setParameter(""String_Node_Str"",sqlTime);
  q.setParameter(""String_Node_Str"",bigInteger);
  q.setParameter(""String_Node_Str"",calendar.getTime());
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  q=em.createQuery(withSelectiveCompositeColClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertNull(results.get(0).getTweetBody());
  q=em.createQuery(selectiveColumnTweetBodyWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",new Long(12345677));
  q.setParameter(""String_Node_Str"",78575785897L);
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  q.setParameter(""String_Node_Str"",false);
  q.setParameter(""String_Node_Str"",10);
  q.setParameter(""String_Node_Str"",'A');
  q.setParameter(""String_Node_Str"",(byte)5);
  q.setParameter(""String_Node_Str"",(short)8);
  q.setParameter(""String_Node_Str"",(float)69.3);
  q.setParameter(""String_Node_Str"",163.76765654);
  q.setParameter(""String_Node_Str"",enrolmentDate);
  q.setParameter(""String_Node_Str"",enrolmentTime);
  q.setParameter(""String_Node_Str"",joiningDateAndTime);
  q.setParameter(""String_Node_Str"",new Integer(3));
  q.setParameter(""String_Node_Str"",new Long(978423946455l));
  q.setParameter(""String_Node_Str"",135434.89);
  q.setParameter(""String_Node_Str"",newSqlDate);
  q.setParameter(""String_Node_Str"",sqlTimestamp);
  q.setParameter(""String_Node_Str"",sqlTime);
  q.setParameter(""String_Node_Str"",bigInteger);
  q.setParameter(""String_Node_Str"",calendar.getTime());
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getTweetBody());
  Assert.assertNull(results.get(0).getTweetDate());
  final String selectiveColumnTweetDateWithAllCompositeColClause=""String_Node_Str"";
  q=em.createQuery(selectiveColumnTweetDateWithAllCompositeColClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(currentDate.getTime(),results.get(0).getTweetDate().getTime());
  Assert.assertNull(results.get(0).getTweetBody());
  final String withCompositeKeyClause=""String_Node_Str"";
  q=em.createQuery(withCompositeKeyClause);
  q.setParameter(""String_Node_Str"",key);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  em.remove(user);
  em.clear();
}",0.6128993076642779
176800,"@Test public void onInvalidQueryParse(){
  KunderaQuery kunderQuery=new KunderaQuery();
  String validQuery=""String_Node_Str"";
  KunderaQueryParser parser=new KunderaQueryParser(kunderQuery,validQuery);
  try {
    parser.parse();
  }
 catch (  JPQLParseException jpqlpe) {
    Assert.assertEquals(""String_Node_Str"",jpqlpe.getMessage());
  }
  kunderQuery=new KunderaQuery();
  validQuery=""String_Node_Str"";
  parser=new KunderaQueryParser(kunderQuery,validQuery);
  try {
    parser.parse();
  }
 catch (  JPQLParseException jpqlpe) {
    Assert.assertEquals(""String_Node_Str"",jpqlpe.getMessage());
  }
  kunderQuery=new KunderaQuery();
  validQuery=""String_Node_Str"";
  parser=new KunderaQueryParser(kunderQuery,validQuery);
  try {
    parser.parse();
  }
 catch (  JPQLParseException jpqlpe) {
    Assert.assertEquals(""String_Node_Str"",jpqlpe.getMessage());
  }
}","@Test public void onInvalidQueryParse(){
  KunderaQuery kunderQuery=new KunderaQuery();
  String validQuery=""String_Node_Str"";
  KunderaQueryParser parser=new KunderaQueryParser(kunderQuery,validQuery);
  try {
    parser.parse();
  }
 catch (  JPQLParseException jpqlpe) {
    Assert.assertTrue(jpqlpe.getMessage().startsWith(""String_Node_Str""));
  }
  kunderQuery=new KunderaQuery();
  validQuery=""String_Node_Str"";
  parser=new KunderaQueryParser(kunderQuery,validQuery);
  try {
    parser.parse();
  }
 catch (  JPQLParseException jpqlpe) {
    Assert.assertTrue(jpqlpe.getMessage().startsWith(""String_Node_Str""));
  }
  kunderQuery=new KunderaQuery();
  validQuery=""String_Node_Str"";
  parser=new KunderaQueryParser(kunderQuery,validQuery);
  try {
    parser.parse();
  }
 catch (  JPQLParseException jpqlpe) {
    Assert.assertTrue(jpqlpe.getMessage().startsWith(""String_Node_Str""));
  }
}",0.9013605442176872
176801,"@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  log.debug(""String_Node_Str"");
  List<Object> result=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  if (metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
    result=onQueryOverCompositeColumns(m,client,metaModel);
  }
 else {
    if (appMetadata.isNative(getJPAQuery())) {
      result=((CassandraClientBase)client).executeQuery(appMetadata.getQuery(getJPAQuery()),m.getEntityClazz(),null);
    }
 else {
      if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
        boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m);
        Map<Boolean,List<IndexClause>> ixClause=prepareIndexClause(m,useInvertedIndex);
        if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
          result=(List)((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
        }
 else {
          boolean isRowKeyQuery=ixClause.keySet().iterator().next();
          if (!isRowKeyQuery) {
            result=((CassandraClientBase)client).find(ixClause.get(isRowKeyQuery),m,false,null,maxResult,getColumnList(m,getKunderaQuery().getResult(),null));
          }
 else {
            result=((CassandraEntityReader)getReader()).handleFindByRange(m,client,result,ixClause,isRowKeyQuery,getColumnList(m,getKunderaQuery().getResult(),null));
          }
        }
      }
 else {
        result=populateUsingLucene(m,client,result);
      }
    }
  }
  return result;
}","@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  log.debug(""String_Node_Str"");
  List<Object> result=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  if (!appMetadata.isNative(getJPAQuery()) && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType())) {
    result=onQueryOverCompositeColumns(m,client,metaModel);
  }
 else {
    if (appMetadata.isNative(getJPAQuery())) {
      result=((CassandraClientBase)client).executeQuery(appMetadata.getQuery(getJPAQuery()),m.getEntityClazz(),null);
    }
 else {
      if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
        boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m);
        Map<Boolean,List<IndexClause>> ixClause=prepareIndexClause(m,useInvertedIndex);
        if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
          result=(List)((CassandraEntityReader)getReader()).readFromIndexTable(m,client,ixClause);
        }
 else {
          boolean isRowKeyQuery=ixClause.keySet().iterator().next();
          if (!isRowKeyQuery) {
            result=((CassandraClientBase)client).find(ixClause.get(isRowKeyQuery),m,false,null,maxResult,getColumnList(m,getKunderaQuery().getResult(),null));
          }
 else {
            result=((CassandraEntityReader)getReader()).handleFindByRange(m,client,result,ixClause,isRowKeyQuery,getColumnList(m,getKunderaQuery().getResult(),null));
          }
        }
      }
 else {
        result=populateUsingLucene(m,client,result);
      }
    }
  }
  return result;
}",0.8682530470110272
176802,"/** 
 * add tables to given keyspace   {@code ksDef}.
 * @param tableInfos the table infos
 * @param ksDef the ks def
 * @throws InvalidRequestException the invalid request exception
 * @throws SchemaDisagreementException the schema disagreement exception
 * @throws TException the t exception
 * @throws InterruptedException the interrupted exception
 */
private void addTablesToKeyspace(List<TableInfo> tableInfos,KsDef ksDef) throws InvalidRequestException, SchemaDisagreementException, TException, InterruptedException {
  cassandra_client.set_keyspace(databaseName);
  for (  TableInfo tableInfo : tableInfos) {
    for (    CfDef cfDef : ksDef.getCf_defs()) {
      if (cfDef.getName().equalsIgnoreCase(tableInfo.getTableName())) {
        cassandra_client.system_drop_column_family(tableInfo.getTableName());
        dropInvertedIndexTable(tableInfo);
        TimeUnit.SECONDS.sleep(3);
        break;
      }
    }
    if (tableInfo.getTableIdType() != null && tableInfo.getTableIdType().isAnnotationPresent(Embeddable.class)) {
      onCompoundKey(tableInfo);
    }
 else {
      cassandra_client.system_add_column_family(getTableMetadata(tableInfo));
      createInvertedIndexTable(tableInfo);
    }
  }
}","/** 
 * add tables to given keyspace   {@code ksDef}.
 * @param tableInfos the table infos
 * @param ksDef the ks def
 * @throws InvalidRequestException the invalid request exception
 * @throws SchemaDisagreementException the schema disagreement exception
 * @throws TException the t exception
 * @throws InterruptedException the interrupted exception
 */
private void addTablesToKeyspace(List<TableInfo> tableInfos,KsDef ksDef) throws InvalidRequestException, SchemaDisagreementException, TException, InterruptedException {
  cassandra_client.set_keyspace(databaseName);
  for (  TableInfo tableInfo : tableInfos) {
    for (    CfDef cfDef : ksDef.getCf_defs()) {
      if (cfDef.getName().equalsIgnoreCase(tableInfo.getTableName())) {
        cassandra_client.system_drop_column_family(tableInfo.getTableName());
        dropInvertedIndexTable(tableInfo);
        TimeUnit.SECONDS.sleep(3);
        break;
      }
    }
    if (tableInfo.getTableIdType() != null && tableInfo.getTableIdType().isAnnotationPresent(Embeddable.class)) {
      if (tableInfo.getType() != null && tableInfo.getType().equals(Type.SUPER_COLUMN_FAMILY.name())) {
        throw new SchemaGenerationException(""String_Node_Str"",""String_Node_Str"",databaseName);
      }
 else {
        onCompoundKey(tableInfo);
      }
    }
 else {
      cassandra_client.system_add_column_family(getTableMetadata(tableInfo));
      createInvertedIndexTable(tableInfo);
    }
  }
}",0.9137476459510356
176803,"/** 
 * On compound key.
 * @param tableInfo the table info
 * @throws InvalidRequestException the invalid request exception
 * @throws TException the t exception
 * @throws SchemaDisagreementException the schema disagreement exception
 */
private void onCompoundKey(TableInfo tableInfo) throws InvalidRequestException, TException, SchemaDisagreementException {
  CQLTranslator translator=new CQLTranslator();
  String columnFamilyQuery=CQLTranslator.CREATE_COLUMNFAMILY_QUERY;
  columnFamilyQuery=StringUtils.replace(columnFamilyQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableInfo.getTableName()).toString());
  List<ColumnInfo> columns=tableInfo.getColumnMetadatas();
  Properties props=getColumnFamilyProperties(tableInfo);
  StringBuilder queryBuilder=new StringBuilder();
  onCompositeColumns(translator,columns,queryBuilder);
  List<EmbeddedColumnInfo> compositeColumns=tableInfo.getEmbeddedColumnMetadatas();
  EmbeddableType compoEmbeddableType=compositeColumns.get(0).getEmbeddable();
  onCompositeColumns(translator,compositeColumns.get(0).getColumns(),queryBuilder);
  if (queryBuilder.length() > 0) {
    queryBuilder.deleteCharAt(queryBuilder.length() - 1);
    columnFamilyQuery=StringUtils.replace(columnFamilyQuery,CQLTranslator.COLUMNS,queryBuilder.toString());
    queryBuilder=new StringBuilder(columnFamilyQuery);
  }
  queryBuilder.append(translator.ADD_PRIMARYKEY_CLAUSE);
  Field[] fields=tableInfo.getTableIdType().getDeclaredFields();
  StringBuilder primaryKeyBuilder=new StringBuilder();
  for (  Field f : fields) {
    Attribute attribute=compoEmbeddableType.getAttribute(f.getName());
    translator.appendColumnName(primaryKeyBuilder,((AbstractAttribute)attribute).getJPAColumnName());
    primaryKeyBuilder.append(""String_Node_Str"");
  }
  primaryKeyBuilder.deleteCharAt(primaryKeyBuilder.length() - 1);
  queryBuilder=new StringBuilder(StringUtils.replace(queryBuilder.toString(),CQLTranslator.COLUMNS,primaryKeyBuilder.toString()));
  setColumnFamilyProperties(null,getColumnFamilyProperties(tableInfo),queryBuilder);
  cassandra_client.set_cql_version(""String_Node_Str"");
  try {
    cassandra_client.execute_cql_query(ByteBuffer.wrap(queryBuilder.toString().getBytes(Constants.CHARSET_UTF8)),Compression.NONE);
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"" + databaseName + ""String_Node_Str""+ e.getMessage());
    throw new SchemaGenerationException(""String_Node_Str"" + databaseName,e,""String_Node_Str"",databaseName);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + databaseName + ""String_Node_Str""+ e.getMessage());
    throw new SchemaGenerationException(""String_Node_Str"" + databaseName,e,""String_Node_Str"",databaseName);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + databaseName + ""String_Node_Str""+ e.getMessage());
    throw new SchemaGenerationException(""String_Node_Str"" + databaseName,e,""String_Node_Str"",databaseName);
  }
}","/** 
 * On compound key.
 * @param tableInfo the table info
 * @throws InvalidRequestException the invalid request exception
 * @throws TException the t exception
 * @throws SchemaDisagreementException the schema disagreement exception
 */
private void onCompoundKey(TableInfo tableInfo) throws InvalidRequestException, TException, SchemaDisagreementException {
  CQLTranslator translator=new CQLTranslator();
  String columnFamilyQuery=CQLTranslator.CREATE_COLUMNFAMILY_QUERY;
  columnFamilyQuery=StringUtils.replace(columnFamilyQuery,CQLTranslator.COLUMN_FAMILY,translator.ensureCase(new StringBuilder(),tableInfo.getTableName()).toString());
  List<ColumnInfo> columns=tableInfo.getColumnMetadatas();
  Properties props=getColumnFamilyProperties(tableInfo);
  StringBuilder queryBuilder=new StringBuilder();
  onCompositeColumns(translator,columns,queryBuilder);
  List<EmbeddedColumnInfo> compositeColumns=tableInfo.getEmbeddedColumnMetadatas();
  EmbeddableType compoEmbeddableType=compositeColumns.get(0).getEmbeddable();
  onCompositeColumns(translator,compositeColumns.get(0).getColumns(),queryBuilder);
  if (queryBuilder.length() > 0) {
    queryBuilder.deleteCharAt(queryBuilder.length() - 1);
    columnFamilyQuery=StringUtils.replace(columnFamilyQuery,CQLTranslator.COLUMNS,queryBuilder.toString());
    queryBuilder=new StringBuilder(columnFamilyQuery);
  }
  queryBuilder.append(translator.ADD_PRIMARYKEY_CLAUSE);
  Field[] fields=tableInfo.getTableIdType().getDeclaredFields();
  StringBuilder primaryKeyBuilder=new StringBuilder();
  for (  Field f : fields) {
    Attribute attribute=compoEmbeddableType.getAttribute(f.getName());
    translator.appendColumnName(primaryKeyBuilder,((AbstractAttribute)attribute).getJPAColumnName());
    primaryKeyBuilder.append(""String_Node_Str"");
  }
  primaryKeyBuilder.deleteCharAt(primaryKeyBuilder.length() - 1);
  queryBuilder=new StringBuilder(StringUtils.replace(queryBuilder.toString(),CQLTranslator.COLUMNS,primaryKeyBuilder.toString()));
  setColumnFamilyProperties(null,getColumnFamilyProperties(tableInfo),queryBuilder);
  cassandra_client.set_cql_version(CassandraPropertyReader.csmd != null ? CassandraPropertyReader.csmd.getCqlVersion() : CassandraConstants.CQL_VERSION_3_0);
  try {
    cassandra_client.execute_cql_query(ByteBuffer.wrap(queryBuilder.toString().getBytes(Constants.CHARSET_UTF8)),Compression.NONE);
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"" + databaseName + ""String_Node_Str""+ e.getMessage());
    throw new SchemaGenerationException(""String_Node_Str"" + databaseName,e,""String_Node_Str"",databaseName);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + databaseName + ""String_Node_Str""+ e.getMessage());
    throw new SchemaGenerationException(""String_Node_Str"" + databaseName,e,""String_Node_Str"",databaseName);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + databaseName + ""String_Node_Str""+ e.getMessage());
    throw new SchemaGenerationException(""String_Node_Str"" + databaseName,e,""String_Node_Str"",databaseName);
  }
}",0.9774633985852936
176804,"public static GeospatialQuery getGeospatialQueryImplementor(String operator,Object shape){
  if (operator.equalsIgnoreCase(""String_Node_Str"")) {
    if (shape.getClass().isAssignableFrom(Circle.class)) {
      return new CircleQueryImpl();
    }
 else     if (shape.getClass().isAssignableFrom(Envelope.class)) {
      return new EnvelopeQueryImpl();
    }
 else     if (shape.getClass().isAssignableFrom(Triangle.class)) {
      return new TriangleQueryImpl();
    }
 else     if (shape.getClass().isAssignableFrom(Polygon.class)) {
      return new PolygonQueryImpl();
    }
 else {
      throw new QueryHandlerException(""String_Node_Str"" + shape.getClass() + ""String_Node_Str""+ ""String_Node_Str""+ operator+ ""String_Node_Str"");
    }
  }
 else   if (operator.equals(""String_Node_Str"") || operator.equals(""String_Node_Str"") || operator.equals(""String_Node_Str"")|| operator.equals(""String_Node_Str"")) {
    if (shape.getClass().isAssignableFrom(Point.class)) {
      return new NearQueryImpl();
    }
 else {
      throw new QueryHandlerException(""String_Node_Str"" + shape.getClass() + ""String_Node_Str""+ ""String_Node_Str""+ operator+ ""String_Node_Str"");
    }
  }
 else {
    throw new QueryHandlerException(""String_Node_Str"" + shape.getClass() + ""String_Node_Str""+ ""String_Node_Str""+ operator+ ""String_Node_Str"");
  }
}","public static GeospatialQuery getGeospatialQueryImplementor(String operator,Object shape){
  if (operator.equalsIgnoreCase(""String_Node_Str"")) {
    if (shape.getClass().isAssignableFrom(Circle.class)) {
      return new CircleQueryImpl();
    }
 else     if (shape.getClass().isAssignableFrom(Envelope.class)) {
      return new EnvelopeQueryImpl();
    }
 else     if (shape.getClass().isAssignableFrom(Triangle.class)) {
      return new TriangleQueryImpl();
    }
 else     if (shape.getClass().isAssignableFrom(Polygon.class)) {
      return new PolygonQueryImpl();
    }
 else {
      throw new QueryHandlerException(""String_Node_Str"" + shape.getClass() + ""String_Node_Str""+ ""String_Node_Str""+ operator+ ""String_Node_Str"");
    }
  }
 else   if (operator.equals(""String_Node_Str"") || operator.equals(""String_Node_Str"") || operator.equals(""String_Node_Str"")|| operator.equals(""String_Node_Str"")) {
    return new NearQueryImpl();
  }
 else {
    throw new QueryHandlerException(""String_Node_Str"" + shape.getClass() + ""String_Node_Str""+ ""String_Node_Str""+ operator+ ""String_Node_Str"");
  }
}",0.906832298136646
176805,"@Test public void executeTests() throws Exception {
  addPersons();
  findPerson();
  findWithinCircle();
  findWithinTriangle();
  findWithinPolygon();
  findWithinRectangle();
  findNear();
  findNearSphere();
  findCentreSphere();
  findUsingCLWithEQ();
  findWithinCircleAndName();
  updateNameWithinCircle();
  deleteNameWithinCircle();
  updatePerson();
  removePerson();
}","@Test public void executeTests() throws Exception {
  addPersons();
  findPerson();
  findWithinCircle();
  findWithinTriangle();
  findWithinPolygon();
  findWithinRectangle();
  findNear();
  findNearSphere();
  findCentreSphere();
  findUsingExactCurrentLocation();
  findWithinCircleAndName();
  updateNameWithinCircle();
  deleteNameWithinCircle();
  updatePerson();
  removePerson();
}",0.9662337662337662
176806,"/** 
 * Load cassandra specific data.
 * @throws TException the t exception
 * @throws InvalidRequestException the invalid request exception
 * @throws UnavailableException the unavailable exception
 * @throws TimedOutException the timed out exception
 * @throws SchemaDisagreementException the schema disagreement exception
 */
private static void loadData() throws TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  KsDef ksDef=null;
  CfDef user_Def=new CfDef();
  user_Def.name=""String_Node_Str"";
  user_Def.keyspace=_KEYSPACE;
  user_Def.setComparator_type(""String_Node_Str"");
  user_Def.setDefault_validation_class(""String_Node_Str"");
  CfDef person_Def=new CfDef();
  person_Def.name=""String_Node_Str"";
  person_Def.keyspace=_KEYSPACE;
  person_Def.setComparator_type(""String_Node_Str"");
  person_Def.setDefault_validation_class(""String_Node_Str"");
  ColumnDef columnDef=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  person_Def.addToColumn_metadata(columnDef);
  CfDef address_Def=new CfDef();
  address_Def.name=""String_Node_Str"";
  address_Def.keyspace=_KEYSPACE;
  ColumnDef street=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  street.index_type=IndexType.KEYS;
  address_Def.addToColumn_metadata(street);
  ColumnDef personId=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  personId.index_type=IndexType.KEYS;
  address_Def.addToColumn_metadata(personId);
  List<CfDef> cfDefs=new ArrayList<CfDef>();
  cfDefs.add(user_Def);
  cfDefs.add(person_Def);
  cfDefs.add(address_Def);
  try {
    ksDef=CassandraCli.client.describe_keyspace(_KEYSPACE);
    CassandraCli.client.set_keyspace(_KEYSPACE);
    List<CfDef> cfDefn=ksDef.getCf_defs();
    for (    CfDef cfDef1 : cfDefn) {
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
    }
    CassandraCli.client.system_add_column_family(user_Def);
    CassandraCli.client.system_add_column_family(person_Def);
    CassandraCli.client.system_add_column_family(address_Def);
  }
 catch (  NotFoundException e) {
    ksDef=new KsDef(_KEYSPACE,""String_Node_Str"",cfDefs);
    Map<String,String> strategy_options=new HashMap<String,String>();
    strategy_options.put(""String_Node_Str"",""String_Node_Str"");
    ksDef.setStrategy_options(strategy_options);
    CassandraCli.client.system_add_keyspace(ksDef);
  }
  CassandraCli.client.set_keyspace(_KEYSPACE);
}","/** 
 * Load cassandra specific data.
 * @throws TException the t exception
 * @throws InvalidRequestException the invalid request exception
 * @throws UnavailableException the unavailable exception
 * @throws TimedOutException the timed out exception
 * @throws SchemaDisagreementException the schema disagreement exception
 */
private static void loadData() throws TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  KsDef ksDef=null;
  CfDef user_Def=new CfDef();
  user_Def.name=""String_Node_Str"";
  user_Def.keyspace=_KEYSPACE;
  user_Def.setComparator_type(""String_Node_Str"");
  user_Def.setDefault_validation_class(""String_Node_Str"");
  ColumnDef authorDef=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  authorDef.index_type=IndexType.KEYS;
  ColumnDef publicationDef=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  publicationDef.index_type=IndexType.KEYS;
  user_Def.addToColumn_metadata(authorDef);
  user_Def.addToColumn_metadata(publicationDef);
  CfDef person_Def=new CfDef();
  person_Def.name=""String_Node_Str"";
  person_Def.keyspace=_KEYSPACE;
  person_Def.setComparator_type(""String_Node_Str"");
  person_Def.setDefault_validation_class(""String_Node_Str"");
  ColumnDef columnDef=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  person_Def.addToColumn_metadata(columnDef);
  CfDef address_Def=new CfDef();
  address_Def.name=""String_Node_Str"";
  address_Def.keyspace=_KEYSPACE;
  ColumnDef street=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  street.index_type=IndexType.KEYS;
  address_Def.addToColumn_metadata(street);
  ColumnDef personId=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  personId.index_type=IndexType.KEYS;
  address_Def.addToColumn_metadata(personId);
  List<CfDef> cfDefs=new ArrayList<CfDef>();
  cfDefs.add(user_Def);
  cfDefs.add(person_Def);
  cfDefs.add(address_Def);
  try {
    ksDef=CassandraCli.client.describe_keyspace(_KEYSPACE);
    CassandraCli.client.set_keyspace(_KEYSPACE);
    List<CfDef> cfDefn=ksDef.getCf_defs();
    for (    CfDef cfDef1 : cfDefn) {
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
    }
    CassandraCli.client.system_add_column_family(user_Def);
    CassandraCli.client.system_add_column_family(person_Def);
    CassandraCli.client.system_add_column_family(address_Def);
  }
 catch (  NotFoundException e) {
    ksDef=new KsDef(_KEYSPACE,""String_Node_Str"",cfDefs);
    Map<String,String> strategy_options=new HashMap<String,String>();
    strategy_options.put(""String_Node_Str"",""String_Node_Str"");
    ksDef.setStrategy_options(strategy_options);
    CassandraCli.client.system_add_keyspace(ksDef);
  }
  CassandraCli.client.set_keyspace(_KEYSPACE);
}",0.3036443863376368
176807,"public void delete(Object entity,EntityMetadata metadata,ConsistencyLevel consistencyLevel){
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
  if (CassandraIndexHelper.isInvertedIndexingApplicable(metadata)) {
    String indexColumnFamily=CassandraIndexHelper.getInvertedIndexTableName(metadata.getTableName());
    Map<String,EmbeddableType> embeddables=metaModel.getEmbeddables(metadata.getEntityClazz());
    EntityType entityType=metaModel.entity(metadata.getEntityClazz());
    for (    String fieldName : embeddables.keySet()) {
      EmbeddableType embeddedColumn=embeddables.get(fieldName);
      Attribute embeddedAttribute=entityType.getAttribute(fieldName);
      Object embeddedObject=PropertyAccessorHelper.getObject(entity,(Field)embeddedAttribute.getJavaMember());
      if (embeddedObject != null) {
        if (embeddedObject instanceof Collection) {
          for (          Object obj : (Collection)embeddedObject) {
            Iterator<Attribute> iter=embeddedColumn.getAttributes().iterator();
            while (iter.hasNext()) {
              Attribute attrib=iter.next();
              String rowKey=embeddedAttribute.getName() + Constants.INDEX_TABLE_ROW_KEY_DELIMITER + attrib.getName();
              byte[] columnName=PropertyAccessorHelper.get(obj,(Field)attrib.getJavaMember());
              if (columnName != null) {
                deleteColumn(indexColumnFamily,rowKey,columnName,metadata.getPersistenceUnit(),consistencyLevel);
              }
            }
          }
        }
 else {
          Iterator<Attribute> iter=embeddedColumn.getAttributes().iterator();
          while (iter.hasNext()) {
            Attribute attrib=iter.next();
            String rowKey=embeddedAttribute.getName() + Constants.INDEX_TABLE_ROW_KEY_DELIMITER + attrib.getName();
            byte[] columnName=PropertyAccessorHelper.get(embeddedObject,(Field)attrib.getJavaMember());
            if (columnName != null) {
              deleteColumn(indexColumnFamily,rowKey,columnName,metadata.getPersistenceUnit(),consistencyLevel);
            }
          }
        }
      }
    }
  }
}","public void delete(Object entity,EntityMetadata metadata,ConsistencyLevel consistencyLevel){
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(metadata.getPersistenceUnit());
  if (CassandraIndexHelper.isInvertedIndexingApplicable(metadata)) {
    String indexColumnFamily=CassandraIndexHelper.getInvertedIndexTableName(metadata.getTableName());
    Map<String,EmbeddableType> embeddables=metaModel.getEmbeddables(metadata.getEntityClazz());
    EntityType entityType=metaModel.entity(metadata.getEntityClazz());
    byte[] columnName=PropertyAccessorHelper.get(entity,(Field)metadata.getIdAttribute().getJavaMember());
    for (    String fieldName : embeddables.keySet()) {
      EmbeddableType embeddedColumn=embeddables.get(fieldName);
      Attribute embeddedAttribute=entityType.getAttribute(fieldName);
      Object embeddedObject=PropertyAccessorHelper.getObject(entity,(Field)embeddedAttribute.getJavaMember());
      if (embeddedObject != null) {
        if (embeddedObject instanceof Collection) {
          for (          Object obj : (Collection)embeddedObject) {
            Iterator<Attribute> iter=embeddedColumn.getAttributes().iterator();
            while (iter.hasNext()) {
              Attribute attrib=iter.next();
              String rowKey=embeddedAttribute.getName() + Constants.INDEX_TABLE_ROW_KEY_DELIMITER + attrib.getName();
              byte[] superColumnName=PropertyAccessorHelper.get(obj,(Field)attrib.getJavaMember());
              if (superColumnName != null) {
                deleteColumn(indexColumnFamily,rowKey,superColumnName,metadata.getPersistenceUnit(),consistencyLevel,columnName);
              }
            }
          }
        }
 else {
          Iterator<Attribute> iter=embeddedColumn.getAttributes().iterator();
          while (iter.hasNext()) {
            Attribute attrib=iter.next();
            String rowKey=embeddedAttribute.getName() + Constants.INDEX_TABLE_ROW_KEY_DELIMITER + attrib.getName();
            byte[] superColumnName=PropertyAccessorHelper.get(embeddedObject,(Field)attrib.getJavaMember());
            if (superColumnName != null) {
              deleteColumn(indexColumnFamily,rowKey,superColumnName,metadata.getPersistenceUnit(),consistencyLevel,columnName);
            }
          }
        }
      }
    }
  }
}",0.962359674224081
176808,"/** 
 * @param indexColumnFamily
 * @param rowKey
 * @param columnName
 */
protected abstract void deleteColumn(String indexColumnFamily,String rowKey,byte[] columnName,String persistenceUnit,ConsistencyLevel consistencyLevel);","/** 
 * @param indexColumnFamily
 * @param rowKey
 * @param superColumnName
 * @param columnName TODO
 */
protected abstract void deleteColumn(String indexColumnFamily,String rowKey,byte[] superColumnName,String persistenceUnit,ConsistencyLevel consistencyLevel,byte[] columnName);",0.8503937007874016
176809,"@Override public SuperColumn getSuperColumnForRow(ConsistencyLevel consistencyLevel,String columnFamilyName,String rowKey,byte[] superColumnName,String persistenceUnit){
  Selector selector=Pelops.createSelector(PelopsUtils.generatePoolName(persistenceUnit));
  SuperColumn thriftSuperColumn=null;
  try {
    thriftSuperColumn=selector.getSuperColumnFromRow(columnFamilyName,rowKey,Bytes.fromByteArray(superColumnName),consistencyLevel);
  }
 catch (  NotFoundException e) {
    log.error(e.getMessage());
    e.printStackTrace();
    return null;
  }
catch (  PelopsException e) {
    e.printStackTrace();
    log.error(e.getMessage());
    return null;
  }
  return thriftSuperColumn;
}","@Override public SuperColumn getSuperColumnForRow(ConsistencyLevel consistencyLevel,String columnFamilyName,String rowKey,byte[] superColumnName,String persistenceUnit){
  Selector selector=Pelops.createSelector(PelopsUtils.generatePoolName(persistenceUnit));
  SuperColumn thriftSuperColumn=null;
  try {
    thriftSuperColumn=selector.getSuperColumnFromRow(columnFamilyName,rowKey,Bytes.fromByteArray(superColumnName),consistencyLevel);
  }
 catch (  NotFoundException e) {
    log.error(e.getMessage());
    return null;
  }
catch (  PelopsException e) {
    log.error(e.getMessage());
    return null;
  }
  return thriftSuperColumn;
}",0.9623493975903614
176810,"/** 
 * @param mutator
 * @param indexColumnFamily
 * @param rowKey
 * @param columnName
 */
public void deleteColumn(String indexColumnFamily,String rowKey,byte[] columnName,String persistenceUnit,ConsistencyLevel consistencyLevel){
  Mutator mutator=Pelops.createMutator(PelopsUtils.generatePoolName(persistenceUnit));
  mutator.deleteColumn(indexColumnFamily,rowKey,Bytes.fromByteArray(columnName));
  mutator.execute(consistencyLevel);
}","/** 
 * @param indexColumnFamily
 * @param rowKey
 * @param superColumnName
 * @param mutator
 */
public void deleteColumn(String indexColumnFamily,String rowKey,byte[] superColumnName,String persistenceUnit,ConsistencyLevel consistencyLevel,byte[] columnName){
  Mutator mutator=Pelops.createMutator(PelopsUtils.generatePoolName(persistenceUnit));
  mutator.deleteColumn(indexColumnFamily,rowKey,Bytes.fromByteArray(superColumnName));
  mutator.execute(consistencyLevel);
}",0.918032786885246
176811,"/** 
 * Returns bytes value for given value.
 * @param jpaFieldName field name.
 * @param m entity metadata
 * @param value value.
 * @return bytes value.
 */
private Bytes getBytesValue(String jpaFieldName,EntityMetadata m,Object value){
  Attribute idCol=m.getIdAttribute();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entity=metaModel.entity(m.getEntityClazz());
  Field f=null;
  boolean isId=false;
  if (((AbstractAttribute)idCol).getJPAColumnName().equals(jpaFieldName)) {
    f=(Field)idCol.getJavaMember();
    isId=true;
  }
 else {
    if (jpaFieldName != null && jpaFieldName.indexOf(Constants.INDEX_TABLE_ROW_KEY_DELIMITER) > 0) {
      String embeddedFieldName=jpaFieldName.substring(0,jpaFieldName.indexOf(Constants.INDEX_TABLE_ROW_KEY_DELIMITER));
      String columnFieldName=jpaFieldName.substring(jpaFieldName.indexOf(Constants.INDEX_TABLE_ROW_KEY_DELIMITER) + 1,jpaFieldName.length());
      Attribute embeddedAttr=entity.getAttribute(embeddedFieldName);
      try {
        Class<?> embeddedClass=embeddedAttr.getJavaType();
        if (Collection.class.isAssignableFrom(embeddedClass)) {
          Class<?> genericClass=PropertyAccessorHelper.getGenericClass((Field)embeddedAttr.getJavaMember());
          f=genericClass.getDeclaredField(columnFieldName);
        }
 else {
          f=embeddedClass.getDeclaredField(columnFieldName);
        }
      }
 catch (      SecurityException e) {
        e.printStackTrace();
      }
catch (      NoSuchFieldException e) {
        e.printStackTrace();
      }
    }
 else {
      String fieldName=m.getFieldName(jpaFieldName);
      Attribute col=entity.getAttribute(fieldName);
      if (col == null) {
        throw new QueryHandlerException(""String_Node_Str"" + jpaFieldName);
      }
      f=(Field)col.getJavaMember();
    }
  }
  if (f != null && f.getType() != null) {
    return CassandraUtilities.toBytes(value,f);
  }
 else {
    log.error(""String_Node_Str"" + jpaFieldName);
    throw new QueryHandlerException(""String_Node_Str"" + jpaFieldName);
  }
}","/** 
 * Returns bytes value for given value.
 * @param jpaFieldName field name.
 * @param m entity metadata
 * @param value value.
 * @return bytes value.
 */
private Bytes getBytesValue(String jpaFieldName,EntityMetadata m,Object value){
  Attribute idCol=m.getIdAttribute();
  MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entity=metaModel.entity(m.getEntityClazz());
  Field f=null;
  boolean isId=false;
  if (((AbstractAttribute)idCol).getJPAColumnName().equals(jpaFieldName)) {
    f=(Field)idCol.getJavaMember();
    isId=true;
  }
 else {
    if (jpaFieldName != null && jpaFieldName.indexOf(Constants.INDEX_TABLE_ROW_KEY_DELIMITER) > 0) {
      String embeddedFieldName=jpaFieldName.substring(0,jpaFieldName.indexOf(Constants.INDEX_TABLE_ROW_KEY_DELIMITER));
      String columnFieldName=jpaFieldName.substring(jpaFieldName.indexOf(Constants.INDEX_TABLE_ROW_KEY_DELIMITER) + 1,jpaFieldName.length());
      Attribute embeddedAttr=entity.getAttribute(embeddedFieldName);
      try {
        Class<?> embeddedClass=embeddedAttr.getJavaType();
        if (Collection.class.isAssignableFrom(embeddedClass)) {
          Class<?> genericClass=PropertyAccessorHelper.getGenericClass((Field)embeddedAttr.getJavaMember());
          f=genericClass.getDeclaredField(columnFieldName);
        }
 else {
          f=embeddedClass.getDeclaredField(columnFieldName);
        }
      }
 catch (      SecurityException e) {
        log.error(e.getMessage());
      }
catch (      NoSuchFieldException e) {
        log.error(e.getMessage());
      }
    }
 else {
      String fieldName=m.getFieldName(jpaFieldName);
      Attribute col=entity.getAttribute(fieldName);
      if (col == null) {
        throw new QueryHandlerException(""String_Node_Str"" + jpaFieldName);
      }
      f=(Field)col.getJavaMember();
    }
  }
  if (f != null && f.getType() != null) {
    return CassandraUtilities.toBytes(value,f);
  }
 else {
    log.error(""String_Node_Str"" + jpaFieldName);
    throw new QueryHandlerException(""String_Node_Str"" + jpaFieldName);
  }
}",0.967605633802817
176812,"@Override protected void deleteColumn(String indexColumnFamily,String rowKey,byte[] columnName,String persistenceUnit,ConsistencyLevel consistencyLevel){
  ColumnPath cp=new ColumnPath(indexColumnFamily);
  cp.setColumn(columnName);
  IPooledConnection conn=null;
  try {
    String keyspace=CassandraUtilities.getKeyspace(persistenceUnit);
    conn=PelopsUtils.getCassandraConnection(persistenceUnit);
    Cassandra.Client cassandra_client=conn.getAPI();
    cassandra_client.set_keyspace(keyspace);
    cassandra_client.remove(ByteBuffer.wrap(rowKey.getBytes()),cp,System.currentTimeMillis(),consistencyLevel);
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new IndexingException(""String_Node_Str"",e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new IndexingException(""String_Node_Str"",e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new IndexingException(""String_Node_Str"",e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new IndexingException(""String_Node_Str"",e);
  }
 finally {
    PelopsUtils.releaseConnection(conn);
  }
}","@Override protected void deleteColumn(String indexColumnFamily,String rowKey,byte[] superColumnName,String persistenceUnit,ConsistencyLevel consistencyLevel,byte[] columnName){
  ColumnPath cp=new ColumnPath(indexColumnFamily);
  cp.setSuper_column(superColumnName);
  IPooledConnection conn=null;
  try {
    String keyspace=CassandraUtilities.getKeyspace(persistenceUnit);
    conn=PelopsUtils.getCassandraConnection(persistenceUnit);
    Cassandra.Client cassandra_client=conn.getAPI();
    cassandra_client.set_keyspace(keyspace);
    ColumnOrSuperColumn cosc;
    try {
      cosc=cassandra_client.get(ByteBuffer.wrap(rowKey.getBytes()),cp,consistencyLevel);
    }
 catch (    NotFoundException e) {
      return;
    }
    SuperColumn thriftSuperColumn=ThriftDataResultHelper.transformThriftResult(cosc,ColumnFamilyType.SUPER_COLUMN,null);
    if (thriftSuperColumn != null && thriftSuperColumn.getColumns() != null && thriftSuperColumn.getColumns().size() > 1) {
      cp.setColumn(columnName);
    }
    cassandra_client.remove(ByteBuffer.wrap(rowKey.getBytes()),cp,System.currentTimeMillis(),consistencyLevel);
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new IndexingException(""String_Node_Str"",e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new IndexingException(""String_Node_Str"",e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new IndexingException(""String_Node_Str"",e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new IndexingException(""String_Node_Str"",e);
  }
 finally {
    PelopsUtils.releaseConnection(conn);
  }
}",0.8243559718969555
176813,"@Override void startServer(){
  try {
    CassandraCli.cassandraSetUp();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  TException e) {
    e.printStackTrace();
  }
catch (  InvalidRequestException e) {
    e.printStackTrace();
  }
catch (  UnavailableException e) {
    e.printStackTrace();
  }
catch (  TimedOutException e) {
    e.printStackTrace();
  }
catch (  SchemaDisagreementException e) {
    e.printStackTrace();
  }
}","@Override void startServer(){
  try {
    CassandraCli.cassandraSetUp();
  }
 catch (  IOException e) {
    log.error(e.getMessage());
  }
catch (  TException e) {
    log.error(e.getMessage());
  }
catch (  InvalidRequestException e) {
    log.error(e.getMessage());
  }
catch (  UnavailableException e) {
    log.error(e.getMessage());
  }
catch (  TimedOutException e) {
    e.printStackTrace();
  }
catch (  SchemaDisagreementException e) {
    log.error(e.getMessage());
  }
}",0.3133047210300429
176814,"/** 
 * Execute suite.
 */
protected void executeTwissandraTest(){
  addAllUserInfo();
  getUserById();
  updateUser();
  getPersonalDetailByName();
  getTweetsByDevice();
  getTweetsByRelationshipAndDevice();
  getTweetsByUserIdAndDevice();
  removeUsers();
}","/** 
 * Execute suite.
 */
protected void executeTwissandraTest(){
  addAllUserInfo();
  getUserById();
  updateUser();
  getPersonalDetailByName();
  getAllUsers();
  getTweetsByDevice();
  getTweetsByRelationshipAndDevice();
  getTweetsByUserIdAndDevice();
  removeUsers();
}",0.968342644320298
176815,"public TwitterService(String persistenceUnitName){
  if (emf == null) {
    try {
      emf=createEntityManagerFactory(persistenceUnitName);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public TwitterService(String persistenceUnitName){
  if (emf == null) {
    try {
      emf=createEntityManagerFactory(persistenceUnitName);
    }
 catch (    Exception e) {
      log.error(e.getMessage());
    }
  }
}",0.9069767441860463
176816,"@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  log.debug(""String_Node_Str"");
  List<Object> result=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  if (appMetadata.isNative(getJPAQuery())) {
    result=((CassandraClientBase)client).executeQuery(getJPAQuery(),m.getEntityClazz(),null);
  }
 else {
    if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
      Map<Boolean,List<IndexClause>> ixClause=prepareIndexClause(m);
      boolean isRowKeyQuery=ixClause.keySet().iterator().next();
      if (!isRowKeyQuery) {
        result=((CassandraClientBase)client).find(ixClause.get(isRowKeyQuery),m,false,null,maxResult,getColumnList(m,getKunderaQuery().getResult()));
      }
 else {
        result=((CassandraEntityReader)getReader()).handleFindByRange(m,client,result,ixClause,isRowKeyQuery,getColumnList(m,getKunderaQuery().getResult()));
      }
    }
 else {
      result=populateUsingLucene(m,client,result);
    }
  }
  return result;
}","@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  log.debug(""String_Node_Str"");
  List<Object> result=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  if (appMetadata.isNative(getJPAQuery())) {
    result=((CassandraClientBase)client).executeQuery(getJPAQuery(),m.getEntityClazz(),null);
  }
 else {
    if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
      boolean useInvertedIndex=CassandraIndexHelper.isInvertedIndexingApplicable(m);
      if (useInvertedIndex && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
        result=(List)((CassandraEntityReader)getReader()).readFromIndexTable(m,client,getKunderaQuery().getFilterClauseQueue());
      }
 else {
        Map<Boolean,List<IndexClause>> ixClause=prepareIndexClause(m);
        boolean isRowKeyQuery=ixClause.keySet().iterator().next();
        if (!isRowKeyQuery) {
          result=((CassandraClientBase)client).find(ixClause.get(isRowKeyQuery),m,false,null,maxResult,getColumnList(m,getKunderaQuery().getResult()));
        }
 else {
          result=((CassandraEntityReader)getReader()).handleFindByRange(m,client,result,ixClause,isRowKeyQuery,getColumnList(m,getKunderaQuery().getResult()));
        }
      }
    }
 else {
      result=populateUsingLucene(m,client,result);
    }
  }
  return result;
}",0.8596418159100375
176817,"@Override protected void onPersist(EntityMetadata metadata,Object entity,Object id,List<RelationHolder> relationHolders){
  Transaction tx=null;
  try {
    s=getStatelessSession();
    tx=s.beginTransaction();
    s.insert(entity);
  }
 catch (  org.hibernate.exception.ConstraintViolationException e) {
    log.info(e.getMessage());
    s.update(entity);
  }
catch (  HibernateException e) {
    log.info(e.getMessage());
  }
 finally {
    for (    RelationHolder rh : relationHolders) {
      String linkName=rh.getRelationName();
      Object linkValue=rh.getRelationValue();
      if (linkName != null && linkValue != null) {
        String updateSql=""String_Node_Str"" + metadata.getTableName() + ""String_Node_Str""+ linkName+ ""String_Node_Str""+ linkValue+ ""String_Node_Str""+ ((AbstractAttribute)metadata.getIdAttribute()).getJPAColumnName()+ ""String_Node_Str""+ id+ ""String_Node_Str"";
        s.createSQLQuery(updateSql).executeUpdate();
      }
    }
    tx.commit();
  }
}","@Override protected void onPersist(EntityMetadata metadata,Object entity,Object id,List<RelationHolder> relationHolders){
  Transaction tx=null;
  s=getStatelessSession();
  tx=s.beginTransaction();
  try {
    if (!isUpdate) {
      s.insert(entity);
      for (      RelationHolder rh : relationHolders) {
        String linkName=rh.getRelationName();
        Object linkValue=rh.getRelationValue();
        if (linkName != null && linkValue != null) {
          String updateSql=""String_Node_Str"" + metadata.getTableName() + ""String_Node_Str""+ linkName+ ""String_Node_Str""+ linkValue+ ""String_Node_Str""+ ((AbstractAttribute)metadata.getIdAttribute()).getJPAColumnName()+ ""String_Node_Str""+ id+ ""String_Node_Str"";
          s.createSQLQuery(updateSql).executeUpdate();
        }
      }
    }
 else {
      s.update(entity);
    }
  }
 catch (  org.hibernate.exception.ConstraintViolationException e) {
    log.info(e.getMessage());
  }
catch (  HibernateException e) {
    log.info(e.getMessage());
  }
 finally {
    tx.commit();
  }
}",0.6425384234010907
176818,"/** 
 * Constructs and returns   {@link Node} representation for a given entityobject. Output is fully constructed graph with relationships embedded. Each node is put into <code>graph</code> once it is constructed.
 * @param entity
 * @return
 */
private Node getNode(Object entity,ObjectGraph graph,NodeState initialNodeState){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (entityMetadata == null) {
    return null;
  }
  Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
  String nodeId=ObjectGraphUtils.getNodeId(id,entity);
  Node node=graph.getNode(nodeId);
  if (node != null) {
    if (node.isGraphCompleted()) {
      return node;
    }
 else {
      return null;
    }
  }
  node=null;
  Node nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
  Object nodeDataCopy=ObjectUtils.deepCopy(entity);
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,nodeDataCopy,initialNodeState,persistenceCache,id);
  }
 else {
    node=nodeInPersistenceCache;
    if (!DeepEquals.deepEquals(node.getData(),entity)) {
      node.setData(nodeDataCopy);
      node.setDirty(true);
    }
 else {
      node.setDirty(false);
    }
  }
  graph.addNode(nodeId,node);
  for (  Relation relation : entityMetadata.getRelations()) {
    Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (childObject != null) {
      if (Collection.class.isAssignableFrom(childObject.getClass())) {
        Collection childrenObjects=(Collection)childObject;
        for (        Object childObj : childrenObjects) {
          if (childObj != null) {
            addChildNodesToGraph(graph,node,relation,childObj,initialNodeState);
          }
        }
      }
 else {
        addChildNodesToGraph(graph,node,relation,childObject,initialNodeState);
      }
    }
  }
  node.setGraphCompleted(true);
  return node;
}","/** 
 * Constructs and returns   {@link Node} representation for a given entityobject. Output is fully constructed graph with relationships embedded. Each node is put into <code>graph</code> once it is constructed.
 * @param entity
 * @return
 */
private Node getNode(Object entity,ObjectGraph graph,NodeState initialNodeState){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (entityMetadata == null) {
    return null;
  }
  Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
  String nodeId=ObjectGraphUtils.getNodeId(id,entity);
  Node node=graph.getNode(nodeId);
  if (node != null) {
    if (node.isGraphCompleted()) {
      return node;
    }
 else {
      return null;
    }
  }
  node=null;
  Node nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
  Object nodeDataCopy=ObjectUtils.deepCopy(entity);
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,nodeDataCopy,initialNodeState,persistenceCache,id);
  }
 else {
    node=nodeInPersistenceCache;
    if (!DeepEquals.deepEquals(node.getData(),entity)) {
      node.setData(nodeDataCopy);
      node.setDirty(true);
    }
 else {
      node.setDirty(false);
    }
  }
  graph.addNode(nodeId,node);
  for (  Relation relation : entityMetadata.getRelations()) {
    Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (childObject != null) {
      if (Collection.class.isAssignableFrom(childObject.getClass())) {
        Collection childrenObjects=(Collection)childObject;
        if (childrenObjects != null && !(childrenObjects instanceof PersistentCollection))         for (        Object childObj : childrenObjects) {
          if (childObj != null) {
            addChildNodesToGraph(graph,node,relation,childObj,initialNodeState);
          }
        }
      }
 else {
        addChildNodesToGraph(graph,node,relation,childObject,initialNodeState);
      }
    }
  }
  node.setGraphCompleted(true);
  return node;
}",0.9411170078342178
176819,"public static int deepHashCode(Object obj){
  Set visited=new HashSet();
  LinkedList<Object> stack=new LinkedList<Object>();
  stack.addFirst(obj);
  int hash=0;
  while (!stack.isEmpty()) {
    obj=stack.removeFirst();
    if (obj == null || visited.contains(obj)) {
      continue;
    }
    visited.add(obj);
    if (obj.getClass().isArray()) {
      int len=Array.getLength(obj);
      for (int i=0; i < len; i++) {
        stack.addFirst(Array.get(obj,i));
      }
      continue;
    }
    if (obj instanceof Collection) {
      stack.addAll(0,(Collection)obj);
      continue;
    }
    if (obj instanceof Map) {
      stack.addAll(0,((Map)obj).keySet());
      stack.addAll(0,((Map)obj).values());
      continue;
    }
    if (hasCustomHashCode(obj.getClass())) {
      hash+=obj.hashCode();
      continue;
    }
    Collection<Field> fields=getDeepDeclaredFields(obj.getClass());
    for (    Field field : fields) {
      try {
        stack.addFirst(field.get(obj));
      }
 catch (      Exception ignored) {
      }
    }
  }
  return hash;
}","public static int deepHashCode(Object obj){
  Set visited=new HashSet();
  LinkedList<Object> stack=new LinkedList<Object>();
  stack.addFirst(obj);
  int hash=0;
  while (!stack.isEmpty()) {
    obj=stack.removeFirst();
    if (obj == null || visited.contains(obj)) {
      continue;
    }
    visited.add(obj);
    if (obj.getClass().isArray()) {
      int len=Array.getLength(obj);
      for (int i=0; i < len; i++) {
        stack.addFirst(Array.get(obj,i));
      }
      continue;
    }
    if (obj instanceof Collection && !(obj instanceof PersistentCollection)) {
      stack.addAll(0,(Collection)obj);
      continue;
    }
    if (obj instanceof Map) {
      stack.addAll(0,((Map)obj).keySet());
      stack.addAll(0,((Map)obj).values());
      continue;
    }
    if (hasCustomHashCode(obj.getClass())) {
      hash+=obj.hashCode();
      continue;
    }
    Collection<Field> fields=getDeepDeclaredFields(obj.getClass());
    for (    Field field : fields) {
      try {
        stack.addFirst(field.get(obj));
      }
 catch (      Exception ignored) {
      }
    }
  }
  return hash;
}",0.9805375347544022
176820,"/** 
 * Compare two Collections that must be same length and in same order.
 * @param dualKey DualKey represents the two Collections to compare
 * @param visited Collection of objects already compared (prevents cycles)
 * @param stack add items to compare to the Stack (Stack versus recursion)
 * @return boolean false if the Collections are not the same length,otherwise place collection items on Stack to be further compared.
 */
private static boolean compareOrdered(DualKey dualKey,LinkedList<DualKey> stack,Collection visited){
  Collection col1=(Collection)dualKey._key1;
  Collection col2=(Collection)dualKey._key2;
  if (col1.size() != col2.size()) {
    return false;
  }
  Iterator i1=col1.iterator();
  Iterator i2=col2.iterator();
  while (i1.hasNext()) {
    DualKey dk=new DualKey(i1.next(),i2.next());
    if (!visited.contains(dk)) {
      stack.addFirst(dk);
    }
  }
  return true;
}","/** 
 * Compare two Collections that must be same length and in same order.
 * @param dualKey DualKey represents the two Collections to compare
 * @param visited Collection of objects already compared (prevents cycles)
 * @param stack add items to compare to the Stack (Stack versus recursion)
 * @return boolean false if the Collections are not the same length,otherwise place collection items on Stack to be further compared.
 */
private static boolean compareOrdered(DualKey dualKey,LinkedList<DualKey> stack,Collection visited){
  Collection col1=(Collection)dualKey._key1;
  Collection col2=(Collection)dualKey._key2;
  if (col1 instanceof PersistentCollection || col2 instanceof PersistentCollection) {
    return false;
  }
  if (col1.size() != col2.size()) {
    return false;
  }
  Iterator i1=col1.iterator();
  Iterator i2=col2.iterator();
  while (i1.hasNext()) {
    DualKey dk=new DualKey(i1.next(),i2.next());
    if (!visited.contains(dk)) {
      stack.addFirst(dk);
    }
  }
  return true;
}",0.9435146443514644
176821,"/** 
 * Deeply compare the two sets referenced by dualKey. This method attempts to quickly determine inequality by length, then hash, and finally does a deepEquals on each element if the two Sets passed by the prior tests.
 * @param col1 Collection one
 * @param col2 Collection two
 * @param visited Set containing items that have already been compared, so as to prevent cycles.
 * @return boolean true if the Sets are deeply equals, false otherwise.
 */
private static boolean compareUnordered(Collection col1,Collection col2,Set visited){
  if (col1.size() != col2.size()) {
    return false;
  }
  int h1=deepHashCode(col1);
  int h2=deepHashCode(col2);
  if (h1 != h2) {
    return false;
  }
  List copy=new ArrayList(col2);
  for (  Object element1 : col1) {
    int len=copy.size();
    for (int i=0; i < len; i++) {
      if (deepEquals(element1,copy.get(i),visited)) {
        copy.remove(i);
        break;
      }
    }
    if (len == copy.size()) {
      return false;
    }
  }
  return true;
}","/** 
 * Deeply compare the two sets referenced by dualKey. This method attempts to quickly determine inequality by length, then hash, and finally does a deepEquals on each element if the two Sets passed by the prior tests.
 * @param col1 Collection one
 * @param col2 Collection two
 * @param visited Set containing items that have already been compared, so as to prevent cycles.
 * @return boolean true if the Sets are deeply equals, false otherwise.
 */
private static boolean compareUnordered(Collection col1,Collection col2,Set visited){
  if (col1 instanceof PersistentCollection || col2 instanceof PersistentCollection) {
    return false;
  }
  if (col1.size() != col2.size()) {
    return false;
  }
  int h1=deepHashCode(col1);
  int h2=deepHashCode(col2);
  if (h1 != h2) {
    return false;
  }
  List copy=new ArrayList(col2);
  for (  Object element1 : col1) {
    int len=copy.size();
    for (int i=0; i < len; i++) {
      if (deepEquals(element1,copy.get(i),visited)) {
        copy.remove(i);
        break;
      }
    }
    if (len == copy.size()) {
      return false;
    }
  }
  return true;
}",0.9491525423728814
176822,"protected void tearDown() throws Exception {
  pickr.close();
  if (RUN_IN_EMBEDDED_MODE) {
    stopServer();
  }
}","protected void tearDown() throws Exception {
  pickr.close();
  if (RUN_IN_EMBEDDED_MODE) {
    stopServer();
  }
  if (AUTO_MANAGE_SCHEMA) {
    CassandraCli.dropKeySpace(""String_Node_Str"");
  }
}",0.7371794871794872
176823,"@Override protected void stopServer(){
  HBaseCli.stopCluster();
}","@Override protected void stopServer(){
}",0.7547169811320755
176824,"@Before public void setUp() throws Exception {
  super.setUp();
}","@Before public void setUp() throws Exception {
  log.info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  super.setUp();
}",0.5555555555555556
176825,"@Override protected void stopServer(){
  HBaseCli.stopCluster();
}","@Override protected void stopServer(){
}",0.7547169811320755
176826,"@Before public void setUp() throws Exception {
  super.setUp();
}","@Before public void setUp() throws Exception {
  log.info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  super.setUp();
}",0.5555555555555556
176827,"@Override protected void stopServer(){
  HBaseCli.stopCluster();
}","@Override protected void stopServer(){
}",0.7547169811320755
176828,"@Before public void setUp() throws Exception {
  super.setUp();
}","@Before public void setUp() throws Exception {
  log.info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  super.setUp();
}",0.5555555555555556
176829,"@Override protected void stopServer(){
  HBaseCli.stopCluster();
}","@Override protected void stopServer(){
}",0.7547169811320755
176830,"@Before public void setUp() throws Exception {
  super.setUp();
}","@Before public void setUp() throws Exception {
  log.info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  super.setUp();
}",0.5555555555555556
176831,"@Override protected void stopServer(){
  HBaseCli.stopCluster();
}","@Override protected void stopServer(){
}",0.7547169811320755
176832,"@Before public void setUp() throws Exception {
  super.setUp();
}","@Before public void setUp() throws Exception {
  log.info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  super.setUp();
}",0.5555555555555556
176833,"@Override protected void stopServer(){
  HBaseCli.stopCluster();
}","@Override protected void stopServer(){
}",0.7547169811320755
176834,"@Before public void setUp() throws Exception {
  super.setUp();
}","@Before public void setUp() throws Exception {
  log.info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  super.setUp();
}",0.5555555555555556
176835,"@Override protected void stopServer(){
  HBaseCli.stopCluster();
}","@Override protected void stopServer(){
}",0.7547169811320755
176836,"@Before public void setUp() throws Exception {
  super.setUp();
}","@Before public void setUp() throws Exception {
  log.info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  super.setUp();
}",0.5555555555555556
176837,"@Override protected void stopServer(){
  HBaseCli.stopCluster();
}","@Override protected void stopServer(){
}",0.7547169811320755
176838,"@Before public void setUp() throws Exception {
  super.setUp();
}","@Before public void setUp() throws Exception {
  log.info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  super.setUp();
}",0.5555555555555556
176839,"@Override protected void stopServer(){
  HBaseCli.stopCluster();
}","@Override protected void stopServer(){
}",0.7547169811320755
176840,"@Before public void setUp() throws Exception {
  super.setUp();
}","@Before public void setUp() throws Exception {
  log.info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  super.setUp();
}",0.5555555555555556
176841,"@Override protected void stopServer(){
  HBaseCli.stopCluster();
}","@Override protected void stopServer(){
}",0.7547169811320755
176842,"@Before public void setUp() throws Exception {
  super.setUp();
}","@Before public void setUp() throws Exception {
  log.info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  super.setUp();
}",0.5555555555555556
176843,"@Override protected void stopServer(){
  HBaseCli.stopCluster();
}","@Override protected void stopServer(){
}",0.7547169811320755
176844,"@Before public void setUp() throws Exception {
  super.setUp();
}","@Before public void setUp() throws Exception {
  log.info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  super.setUp();
}",0.5555555555555556
176845,"/** 
 * If parameterised metadata is not for intended persistence unit, assign it to null.
 * @param metadata entity metadata
 * @return metadata.
 */
private EntityMetadata belongsToPersistenceUnit(EntityMetadata metadata){
  if ((metadata.getPersistenceUnit() == null && !Constants.RDBMS_CLIENT_FACTORY.equalsIgnoreCase(client)) || metadata.getPersistenceUnit() != null && !metadata.getPersistenceUnit().equals(persistenceUnit)) {
    metadata=null;
  }
 else   if (metadata.getPersistenceUnit() == null && Constants.RDBMS_CLIENT_FACTORY.equalsIgnoreCase(client)) {
    metadata.setPersistenceUnit(persistenceUnit);
  }
  return metadata;
}","/** 
 * If parameterised metadata is not for intended persistence unit, assign it to null.
 * @param metadata entity metadata
 * @return metadata.
 */
private EntityMetadata belongsToPersistenceUnit(EntityMetadata metadata){
  if ((metadata.getPersistenceUnit() == null && !Constants.RDBMS_CLIENT_FACTORY.equalsIgnoreCase(client)) || metadata.getPersistenceUnit() != null && !metadata.getPersistenceUnit().equals(persistenceUnit)) {
    metadata=null;
  }
  return metadata;
}",0.8228980322003577
176846,"private void checkForRDBMS(EntityMetadata metadata){
  if (metadata.getPersistenceUnit() == null && Constants.RDBMS_CLIENT_FACTORY.equalsIgnoreCase(client)) {
    metadata.setPersistenceUnit(persistenceUnit);
  }
}","private void checkForRDBMS(EntityMetadata metadata){
  if (Constants.RDBMS_CLIENT_FACTORY.equalsIgnoreCase(client)) {
    metadata.setPersistenceUnit(persistenceUnit);
  }
}",0.8940568475452196
176847,"/** 
 * Populate metadata.
 * @param < X > the generic type
 * @param < T > the generic type
 * @param metadata the metadata
 * @param clazz the clazz
 */
private <X extends Class,T extends Object>void populateMetadata(EntityMetadata metadata,Class<X> clazz){
  Table table=clazz.getAnnotation(Table.class);
  boolean isEmbeddable=false;
  metadata.setTableName(table.name());
  addNamedNativeQueryMetadata(clazz);
  String schemaStr=table.schema();
  Index idx=clazz.getAnnotation(Index.class);
  List<String> colToBeIndexed=null;
  if (idx != null) {
    if (idx.columns() != null && idx.columns().length != 0) {
      colToBeIndexed=Arrays.asList(idx.columns());
      metadata.setColToBeIndexed(colToBeIndexed);
    }
  }
  if (schemaStr == null) {
    LOG.error(""String_Node_Str"" + table.name() + ""String_Node_Str"");
    throw new InvalidEntityDefinitionException(""String_Node_Str"" + table.name() + ""String_Node_Str"");
  }
  MetadataUtils.setSchemaAndPersistenceUnit(metadata,schemaStr);
  MetaModelBuilder<X,T> metaModelBuilder=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(metadata.getPersistenceUnit());
  metaModelBuilder.process(clazz);
  for (  Field f : clazz.getDeclaredFields()) {
    metaModelBuilder.construct(clazz,f);
    onIdAttribute(metaModelBuilder,metadata,clazz,f);
    onFamilyType(metadata,clazz,f);
    onJPAColumnMapping(metaModelBuilder,metadata,f);
    addRelationIntoMetadata(clazz,f,metadata);
  }
}","/** 
 * Populate metadata.
 * @param < X > the generic type
 * @param < T > the generic type
 * @param metadata the metadata
 * @param clazz the clazz
 */
private <X extends Class,T extends Object>void populateMetadata(EntityMetadata metadata,Class<X> clazz){
  Table table=clazz.getAnnotation(Table.class);
  boolean isEmbeddable=false;
  metadata.setTableName(table.name());
  addNamedNativeQueryMetadata(clazz);
  String schemaStr=table.schema();
  Index idx=clazz.getAnnotation(Index.class);
  List<String> colToBeIndexed=null;
  if (idx != null) {
    if (idx.columns() != null && idx.columns().length != 0) {
      colToBeIndexed=Arrays.asList(idx.columns());
      metadata.setColToBeIndexed(colToBeIndexed);
    }
  }
  if (schemaStr == null) {
    LOG.error(""String_Node_Str"" + table.name() + ""String_Node_Str"");
    throw new InvalidEntityDefinitionException(""String_Node_Str"" + table.name() + ""String_Node_Str"");
  }
  MetadataUtils.setSchemaAndPersistenceUnit(metadata,schemaStr);
  if (metadata.getPersistenceUnit() != null) {
    MetaModelBuilder<X,T> metaModelBuilder=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetaModelBuilder(metadata.getPersistenceUnit());
    metaModelBuilder.process(clazz);
    for (    Field f : clazz.getDeclaredFields()) {
      metaModelBuilder.construct(clazz,f);
      onIdAttribute(metaModelBuilder,metadata,clazz,f);
      onFamilyType(metadata,clazz,f);
      onJPAColumnMapping(metaModelBuilder,metadata,f);
      addRelationIntoMetadata(clazz,f,metadata);
    }
  }
}",0.9761824890976184
176848,"@Override public byte[] toBytes(Object object){
  if (object == null) {
    return null;
  }
  Character data=(Character)object;
  return new byte[]{(byte)((data >> 8) & 0xff),(byte)((data >> 0) & 0xff)};
}","@Override public byte[] toBytes(Object object){
  if (object == null) {
    return null;
  }
  Character data=null;
  if (object.getClass().isAssignableFrom(String.class)) {
    data=((String)object).charAt(0);
  }
 else {
    data=(Character)object;
  }
  return new byte[]{(byte)((data >> 8) & 0xff),(byte)((data >> 0) & 0xff)};
}",0.7657992565055762
176849,"@Override protected void setUp() throws Exception {
  setUpInternal(""String_Node_Str"");
}","@Override protected void setUp() throws Exception {
}",0.7464788732394366
176850,"@Override protected void tearDown() throws Exception {
  tearDownInternal();
}","@Override protected void tearDown() throws Exception {
}",0.835820895522388
176851,"/** 
 * Method to find entity for given association name and association value.
 * @param colName the col name
 * @param colValue the col value
 * @param m the m
 * @return the list
 */
public List<Object> findByRelation(String colName,Object colValue,Class entityClazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  DBCollection dbCollection=mongoDb.getCollection(m.getTableName());
  BasicDBObject query=new BasicDBObject();
  query.put(colName,colValue);
  DBCursor cursor=dbCollection.find(query);
  DBObject fetchedDocument=null;
  List<Object> results=new ArrayList<Object>();
  while (cursor.hasNext()) {
    fetchedDocument=cursor.next();
    Object entity=handler.getEntityFromDocument(m.getEntityClazz(),m,fetchedDocument,null);
    results.add(entity);
  }
  return results.isEmpty() ? null : results;
}","/** 
 * Method to find entity for given association name and association value.
 * @param colName the col name
 * @param colValue the col value
 * @param m the m
 * @return the list
 */
public List<Object> findByRelation(String colName,Object colValue,Class entityClazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  DBCollection dbCollection=mongoDb.getCollection(m.getTableName());
  BasicDBObject query=new BasicDBObject();
  query.put(colName,handler.populateValue(colValue,colValue.getClass()));
  DBCursor cursor=dbCollection.find(query);
  DBObject fetchedDocument=null;
  List<Object> results=new ArrayList<Object>();
  while (cursor.hasNext()) {
    fetchedDocument=cursor.next();
    Object entity=handler.getEntityFromDocument(m.getEntityClazz(),m,fetchedDocument,null);
    results.add(entity);
  }
  return results.isEmpty() ? null : results;
}",0.971725331794576
176852,"/** 
 * Gets the entity from document.
 * @param entityClass the entity class
 * @param m the m
 * @param document the document
 * @param relations the relations
 * @return the entity from document
 */
Object getEntityFromDocument(Class<?> entityClass,EntityMetadata m,DBObject document,List<String> relations){
  Object entity=null;
  try {
    entity=entityClass.newInstance();
    Object rowKey=document.get(""String_Node_Str"");
    Class<?> rowKeyValueClass=rowKey.getClass();
    Class<?> idClass=m.getIdAttribute().getJavaType();
    Map<String,Object> relationValue=null;
    rowKey=populateValue(rowKey,idClass);
    rowKey=getTranslatedObject(rowKey,rowKeyValueClass,idClass);
    PropertyAccessorHelper.setId(entity,m,rowKey);
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(entityClass);
    Set<Attribute> columns=entityType.getAttributes();
    for (    Attribute column : columns) {
      String fieldName=((AbstractAttribute)column).getJPAColumnName();
      Class javaType=((AbstractAttribute)column).getBindableJavaType();
      if (metaModel.isEmbeddable(javaType)) {
        onViaEmbeddable(entityType,column,m,entity,metaModel.embeddable(javaType),document);
      }
 else       if (!column.isAssociation()) {
        setColumnValue(document,entity,column);
      }
 else       if (relations != null) {
        if (relationValue == null) {
          relationValue=new HashMap<String,Object>();
        }
        if (relations.contains(fieldName) && !fieldName.equals(((AbstractAttribute)m.getIdAttribute()).getJPAColumnName())) {
          Object colValue=document.get(fieldName);
          relationValue.put(fieldName,colValue);
        }
      }
    }
    if (relationValue != null && !relationValue.isEmpty()) {
      EnhanceEntity e=new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relationValue);
      return e;
    }
 else {
      return entity;
    }
  }
 catch (  InstantiationException e) {
    log.error(""String_Node_Str"" + entityClass + ""String_Node_Str""+ e.getMessage());
    return entity;
  }
catch (  IllegalAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    return entity;
  }
catch (  PropertyAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    return entity;
  }
}","/** 
 * Gets the entity from document.
 * @param entityClass the entity class
 * @param m the m
 * @param document the document
 * @param relations the relations
 * @return the entity from document
 */
Object getEntityFromDocument(Class<?> entityClass,EntityMetadata m,DBObject document,List<String> relations){
  Object entity=null;
  try {
    entity=entityClass.newInstance();
    Object rowKey=document.get(""String_Node_Str"");
    Class<?> rowKeyValueClass=rowKey.getClass();
    Class<?> idClass=m.getIdAttribute().getJavaType();
    Map<String,Object> relationValue=null;
    rowKey=populateValue(rowKey,idClass);
    rowKey=getTranslatedObject(rowKey,rowKeyValueClass,idClass);
    PropertyAccessorHelper.setId(entity,m,rowKey);
    MetamodelImpl metaModel=(MetamodelImpl)KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
    EntityType entityType=metaModel.entity(entityClass);
    Set<Attribute> columns=entityType.getAttributes();
    for (    Attribute column : columns) {
      String fieldName=((AbstractAttribute)column).getJPAColumnName();
      Class javaType=((AbstractAttribute)column).getBindableJavaType();
      if (metaModel.isEmbeddable(javaType)) {
        onViaEmbeddable(entityType,column,m,entity,metaModel.embeddable(javaType),document);
      }
 else       if (!column.isAssociation()) {
        setColumnValue(document,entity,column);
      }
 else       if (relations != null) {
        if (relationValue == null) {
          relationValue=new HashMap<String,Object>();
        }
        if (relations.contains(fieldName) && !fieldName.equals(((AbstractAttribute)m.getIdAttribute()).getJPAColumnName())) {
          Object colValue=document.get(fieldName);
          if (colValue != null) {
            String colFieldName=m.getFieldName(fieldName);
            Attribute attribute=colFieldName != null ? entityType.getAttribute(colFieldName) : null;
            EntityMetadata relationMetadata=KunderaMetadataManager.getEntityMetadata(attribute.getJavaType());
            colValue=getTranslatedObject(colValue,colValue.getClass(),relationMetadata.getIdAttribute().getJavaType());
          }
          relationValue.put(fieldName,colValue);
        }
      }
    }
    if (relationValue != null && !relationValue.isEmpty()) {
      EnhanceEntity e=new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relationValue);
      return e;
    }
 else {
      return entity;
    }
  }
 catch (  InstantiationException e) {
    log.error(""String_Node_Str"" + entityClass + ""String_Node_Str""+ e.getMessage());
    return entity;
  }
catch (  IllegalAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    return entity;
  }
catch (  PropertyAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    return entity;
  }
}",0.8864202260103429
176853,"@BeforeClass public static void setUpBeforeClass() throws Exception {
  if (USE_EMBEDDED_SERVER) {
    CassandraCli.cassandraSetUp();
  }
  if (AUTO_MANAGE_SCHEMA) {
    CassandraCli.createKeySpace(""String_Node_Str"");
    loadData();
  }
}","@BeforeClass public static void setUpBeforeClass() throws Exception {
  if (USE_EMBEDDED_SERVER) {
    CassandraCli.cassandraSetUp();
  }
  if (AUTO_MANAGE_SCHEMA) {
    CassandraCli.dropKeySpace(_KEYSPACE.toLowerCase());
    loadData();
  }
}",0.8962655601659751
176854,"/** 
 * Load cassandra specific data.
 * @throws TException the t exception
 * @throws InvalidRequestException the invalid request exception
 * @throws UnavailableException the unavailable exception
 * @throws TimedOutException the timed out exception
 * @throws SchemaDisagreementException the schema disagreement exception
 */
private static void loadData() throws TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  KsDef ksDef=null;
  CfDef user_Def=new CfDef();
  user_Def.name=""String_Node_Str"";
  user_Def.keyspace=""String_Node_Str"";
  user_Def.setComparator_type(""String_Node_Str"");
  user_Def.setDefault_validation_class(""String_Node_Str"");
  CfDef person_Def=new CfDef();
  person_Def.name=""String_Node_Str"";
  person_Def.keyspace=""String_Node_Str"";
  person_Def.setComparator_type(""String_Node_Str"");
  person_Def.setDefault_validation_class(""String_Node_Str"");
  ColumnDef columnDef=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  person_Def.addToColumn_metadata(columnDef);
  CfDef address_Def=new CfDef();
  address_Def.name=""String_Node_Str"";
  address_Def.keyspace=""String_Node_Str"";
  ColumnDef street=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  street.index_type=IndexType.KEYS;
  address_Def.addToColumn_metadata(street);
  ColumnDef personId=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  personId.index_type=IndexType.KEYS;
  address_Def.addToColumn_metadata(personId);
  List<CfDef> cfDefs=new ArrayList<CfDef>();
  cfDefs.add(user_Def);
  cfDefs.add(person_Def);
  cfDefs.add(address_Def);
  try {
    ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    CassandraCli.client.set_keyspace(""String_Node_Str"");
    List<CfDef> cfDefn=ksDef.getCf_defs();
    for (    CfDef cfDef1 : cfDefn) {
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
    }
    CassandraCli.client.system_add_column_family(user_Def);
    CassandraCli.client.system_add_column_family(person_Def);
    CassandraCli.client.system_add_column_family(address_Def);
  }
 catch (  NotFoundException e) {
    ksDef=new KsDef(""String_Node_Str"",""String_Node_Str"",cfDefs);
    ksDef.setReplication_factor(1);
    CassandraCli.client.system_add_keyspace(ksDef);
  }
  CassandraCli.client.set_keyspace(""String_Node_Str"");
}","/** 
 * Load cassandra specific data.
 * @throws TException the t exception
 * @throws InvalidRequestException the invalid request exception
 * @throws UnavailableException the unavailable exception
 * @throws TimedOutException the timed out exception
 * @throws SchemaDisagreementException the schema disagreement exception
 */
private static void loadData() throws TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  KsDef ksDef=null;
  CfDef user_Def=new CfDef();
  user_Def.name=""String_Node_Str"";
  user_Def.keyspace=_KEYSPACE;
  user_Def.setComparator_type(""String_Node_Str"");
  user_Def.setDefault_validation_class(""String_Node_Str"");
  CfDef person_Def=new CfDef();
  person_Def.name=""String_Node_Str"";
  person_Def.keyspace=_KEYSPACE;
  person_Def.setComparator_type(""String_Node_Str"");
  person_Def.setDefault_validation_class(""String_Node_Str"");
  ColumnDef columnDef=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  person_Def.addToColumn_metadata(columnDef);
  CfDef address_Def=new CfDef();
  address_Def.name=""String_Node_Str"";
  address_Def.keyspace=_KEYSPACE;
  ColumnDef street=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  street.index_type=IndexType.KEYS;
  address_Def.addToColumn_metadata(street);
  ColumnDef personId=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  personId.index_type=IndexType.KEYS;
  address_Def.addToColumn_metadata(personId);
  List<CfDef> cfDefs=new ArrayList<CfDef>();
  cfDefs.add(user_Def);
  cfDefs.add(person_Def);
  cfDefs.add(address_Def);
  try {
    ksDef=CassandraCli.client.describe_keyspace(_KEYSPACE);
    CassandraCli.client.set_keyspace(_KEYSPACE);
    List<CfDef> cfDefn=ksDef.getCf_defs();
    for (    CfDef cfDef1 : cfDefn) {
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
    }
    CassandraCli.client.system_add_column_family(user_Def);
    CassandraCli.client.system_add_column_family(person_Def);
    CassandraCli.client.system_add_column_family(address_Def);
  }
 catch (  NotFoundException e) {
    ksDef=new KsDef(_KEYSPACE,""String_Node_Str"",cfDefs);
    Map<String,String> strategy_options=new HashMap<String,String>();
    strategy_options.put(""String_Node_Str"",""String_Node_Str"");
    ksDef.setStrategy_options(strategy_options);
    CassandraCli.client.system_add_keyspace(ksDef);
  }
  CassandraCli.client.set_keyspace(_KEYSPACE);
}",0.6335931963146705
176855,"@AfterClass public static void tearDownAfterClass() throws Exception {
  if (AUTO_MANAGE_SCHEMA) {
    CassandraCli.dropKeySpace(""String_Node_Str"");
  }
}","@AfterClass public static void tearDownAfterClass() throws Exception {
  if (AUTO_MANAGE_SCHEMA) {
    CassandraCli.dropKeySpace(_KEYSPACE);
  }
}",0.92
176856,"/** 
 * Switch over persistence units.
 * @param entityPuCol the entity pu col
 * @throws SchemaDisagreementException
 * @throws TimedOutException
 * @throws UnavailableException
 * @throws InvalidRequestException
 * @throws TException
 * @throws IOException
 */
protected void switchPersistenceUnits(Map<Class,String> entityPuCol) throws IOException, TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  if (entityPuCol != null) {
    Iterator<Class> iter=entityPuCol.keySet().iterator();
    log.warn(""String_Node_Str"");
    while (iter.hasNext()) {
      Class clazz=iter.next();
      String pu=entityPuCol.get(clazz);
      Map<String,Metamodel> metaModels=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodelMap();
      EntityMetadata mAdd=null;
      for (      Metamodel m : metaModels.values()) {
        mAdd=((MetamodelImpl)m).getEntityMetadataMap().get(clazz);
        if (mAdd != null) {
          break;
        }
      }
      mAdd.setPersistenceUnit(pu);
      PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(pu);
      String client=puMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_CLIENT_FACTORY);
      if (client.equalsIgnoreCase(""String_Node_Str"")) {
        if (RUN_IN_EMBEDDED_MODE) {
          CassandraCli.cassandraSetUp();
          CassandraCli.initClient();
        }
        if (AUTO_MANAGE_SCHEMA) {
          if (mAdd.getTableName().equalsIgnoreCase(""String_Node_Str"")) {
            loadDataForHABITAT();
          }
 else           if (mAdd.getTableName().equalsIgnoreCase(""String_Node_Str"")) {
            loadDataForPERSONNEL();
          }
        }
      }
 else       if (client.equalsIgnoreCase(""String_Node_Str"")) {
        if (RUN_IN_EMBEDDED_MODE) {
          HBaseCli.createTable(""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
          HBaseCli.createTable(""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
          HBaseCli.createTable(""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
        }
      }
      String schema=puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE);
      mAdd.setSchema(schema != null ? schema : ""String_Node_Str"");
      log.warn(""String_Node_Str"" + pu + ""String_Node_Str""+ clazz.getCanonicalName());
    }
  }
  dao.closeEntityManager();
  em=dao.getEntityManager(persistenceUnits);
}","/** 
 * Switch over persistence units.
 * @param entityPuCol the entity pu col
 * @throws SchemaDisagreementException
 * @throws TimedOutException
 * @throws UnavailableException
 * @throws InvalidRequestException
 * @throws TException
 * @throws IOException
 */
protected void switchPersistenceUnits(Map<Class,String> entityPuCol) throws IOException, TException, InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException {
  if (entityPuCol != null) {
    Iterator<Class> iter=entityPuCol.keySet().iterator();
    log.warn(""String_Node_Str"");
    while (iter.hasNext()) {
      Class clazz=iter.next();
      String pu=entityPuCol.get(clazz);
      Map<String,Metamodel> metaModels=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodelMap();
      EntityMetadata mAdd=null;
      for (      Metamodel m : metaModels.values()) {
        mAdd=((MetamodelImpl)m).getEntityMetadataMap().get(clazz);
        if (mAdd != null) {
          break;
        }
      }
      mAdd.setPersistenceUnit(pu);
      PersistenceUnitMetadata puMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(pu);
      String client=puMetadata.getProperties().getProperty(PersistenceProperties.KUNDERA_CLIENT_FACTORY);
      if (client.equalsIgnoreCase(""String_Node_Str"")) {
        if (RUN_IN_EMBEDDED_MODE) {
          CassandraCli.cassandraSetUp();
          CassandraCli.initClient();
        }
        if (AUTO_MANAGE_SCHEMA) {
          if (mAdd.getTableName().equalsIgnoreCase(""String_Node_Str"")) {
            loadDataForHABITAT();
          }
 else           if (mAdd.getTableName().equalsIgnoreCase(""String_Node_Str"")) {
            loadDataForPERSONNEL();
          }
        }
      }
 else       if (client.equalsIgnoreCase(""String_Node_Str"")) {
        if (!RUN_IN_EMBEDDED_MODE) {
          HBaseCli.createTable(""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
          HBaseCli.createTable(""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
          HBaseCli.createTable(""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
          HBaseCli.addColumnFamily(""String_Node_Str"",""String_Node_Str"");
        }
      }
      String schema=puMetadata.getProperty(PersistenceProperties.KUNDERA_KEYSPACE);
      mAdd.setSchema(schema != null ? schema : ""String_Node_Str"");
      log.warn(""String_Node_Str"" + pu + ""String_Node_Str""+ clazz.getCanonicalName());
    }
  }
  dao.closeEntityManager();
  em=dao.getEntityManager(persistenceUnits);
}",0.9998244073748902
176857,"/** 
 * Returns mapped relational name, in case of bi directional mapping, it will return back pKey name of associated entity.
 * @param relation holding relation.
 * @return mapped/join column name.
 */
public static String getMappedName(EntityMetadata parentMetadata,Relation relation){
  if (relation != null) {
    String joinColumn=relation.getJoinColumnName();
    if (joinColumn == null) {
      Class clazz=relation.getTargetEntity();
      EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(clazz);
      joinColumn=relation.getType().equals(ForeignKey.ONE_TO_MANY) ? parentMetadata.getIdAttribute().getName() : metadata.getIdAttribute().getName();
    }
    return joinColumn;
  }
  return null;
}","/** 
 * Returns mapped relational name, in case of bi directional mapping, it will return back pKey name of associated entity.
 * @param relation holding relation.
 * @return mapped/join column name.
 */
public static String getMappedName(EntityMetadata parentMetadata,Relation relation){
  if (relation != null) {
    String joinColumn=relation.getJoinColumnName();
    if (joinColumn == null) {
      Class clazz=relation.getTargetEntity();
      EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(clazz);
      joinColumn=relation.getType().equals(ForeignKey.ONE_TO_MANY) ? ((AbstractAttribute)parentMetadata.getIdAttribute()).getJPAColumnName() : ((AbstractAttribute)metadata.getIdAttribute()).getJPAColumnName();
    }
    return joinColumn;
  }
  return null;
}",0.9494007989347536
176858,"@Override protected void findPersonByName(){
}","@Override protected void findPersonByName(){
  List<PersonnelBi1ToM> persons=dao.findPersonByName(PersonnelBi1ToM.class,""String_Node_Str"");
  Assert.assertNotNull(persons);
  Assert.assertFalse(persons.isEmpty());
  Assert.assertTrue(persons.size() == 1);
  PersonnelBi1ToM person=persons.get(0);
  assertPerson(person);
}",0.25
176859,"@Override protected void findPersonByIdColumn(){
}","@Override protected void findPersonByIdColumn(){
  PersonnelBi1ToM p=(PersonnelBi1ToM)dao.findPersonByIdColumn(PersonnelBi1ToM.class,""String_Node_Str"");
  assertPerson(p);
}",0.4484304932735426
176860,"/** 
 * Gets the enclosing document name.
 * @param m the m
 * @param criteria Input criteria
 * @param viaColumnName true if <code>criteria</code> is column Name, false if <code>criteria</code> is column field name
 * @return the enclosing document name
 */
public static String getEnclosingEmbeddedFieldName(EntityMetadata m,String criteria,boolean viaColumnName){
  String enclosingEmbeddedFieldName=null;
  StringTokenizer strToken=new StringTokenizer(criteria,""String_Node_Str"");
  String embeddedFieldName=null;
  String embeddableAttributeName=null;
  while (strToken.hasMoreElements()) {
    embeddableAttributeName=strToken.nextToken();
    if (strToken.countTokens() > 1) {
      embeddedFieldName=strToken.nextToken();
    }
  }
  Metamodel metaModel=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entity=metaModel.entity(m.getEntityClazz());
  try {
    Attribute attribute=entity.getAttribute(embeddableAttributeName);
    if (((MetamodelImpl)metaModel).isEmbeddable(((AbstractAttribute)attribute).getBindableJavaType())) {
      EmbeddableType embeddable=metaModel.embeddable(((AbstractAttribute)attribute).getBindableJavaType());
      Iterator<Attribute> iter=embeddable.getAttributes().iterator();
      while (iter.hasNext()) {
        AbstractAttribute attrib=(AbstractAttribute)iter.next();
        if (viaColumnName && attrib.getName().equals(embeddedFieldName)) {
          enclosingEmbeddedFieldName=attribute.getName();
          break;
        }
        if (!viaColumnName && attrib.getJPAColumnName().equals(embeddedFieldName)) {
          enclosingEmbeddedFieldName=attribute.getName();
          break;
        }
      }
    }
  }
 catch (  IllegalArgumentException iax) {
    return null;
  }
  return enclosingEmbeddedFieldName;
}","/** 
 * Gets the enclosing document name.
 * @param m the m
 * @param criteria Input criteria
 * @param viaColumnName true if <code>criteria</code> is column Name, false if <code>criteria</code> is column field name
 * @return the enclosing document name
 */
public static String getEnclosingEmbeddedFieldName(EntityMetadata m,String criteria,boolean viaColumnName){
  String enclosingEmbeddedFieldName=null;
  StringTokenizer strToken=new StringTokenizer(criteria,""String_Node_Str"");
  String embeddedFieldName=null;
  String embeddableAttributeName=null;
  while (strToken.hasMoreElements()) {
    embeddableAttributeName=strToken.nextToken();
    if (strToken.countTokens() > 0) {
      embeddedFieldName=strToken.nextToken();
    }
  }
  Metamodel metaModel=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(m.getPersistenceUnit());
  EntityType entity=metaModel.entity(m.getEntityClazz());
  try {
    Attribute attribute=entity.getAttribute(embeddableAttributeName);
    if (((MetamodelImpl)metaModel).isEmbeddable(((AbstractAttribute)attribute).getBindableJavaType())) {
      EmbeddableType embeddable=metaModel.embeddable(((AbstractAttribute)attribute).getBindableJavaType());
      Iterator<Attribute> iter=embeddable.getAttributes().iterator();
      while (iter.hasNext()) {
        AbstractAttribute attrib=(AbstractAttribute)iter.next();
        if (viaColumnName && attrib.getName().equals(embeddedFieldName)) {
          enclosingEmbeddedFieldName=attribute.getName();
          break;
        }
        if (!viaColumnName && attrib.getJPAColumnName().equals(embeddedFieldName)) {
          enclosingEmbeddedFieldName=attribute.getName();
          break;
        }
      }
    }
  }
 catch (  IllegalArgumentException iax) {
    return null;
  }
  return enclosingEmbeddedFieldName;
}",0.9994487320837928
176861,"/** 
 * Inits the filter.
 */
private void initFilter(){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String indexName=metadata.getIndexName();
  if (null == filter) {
    return;
  }
  List<String> clauses=tokenize(filter,INTER_CLAUSE_PATTERN);
  clauses=parseFilterForBetweenClause(clauses,indexName);
  boolean newClause=true;
  for (  String clause : clauses) {
    if (newClause) {
      List<String> tokens=tokenize(clause,INTRA_CLAUSE_PATTERN);
      if (tokens.size() != 3) {
        throw new PersistenceException(""String_Node_Str"" + clause);
      }
      String property=tokens.get(0);
      property=property.substring((entityAlias + ""String_Node_Str"").length());
      String columnName=null;
      try {
        Metamodel metaModel=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(getPersistenceUnit());
        columnName=((AbstractAttribute)metaModel.entity(entityClass).getAttribute(property)).getJPAColumnName();
      }
 catch (      IllegalArgumentException iaex) {
        logger.warn(""String_Node_Str"" + property + ""String_Node_Str"");
      }
      if (columnName == null && property.indexOf(""String_Node_Str"") > 0) {
        String enclosingEmbeddedField=MetadataUtils.getEnclosingEmbeddedFieldName(metadata,property,true);
        if (enclosingEmbeddedField != null) {
          columnName=property;
        }
      }
      String condition=tokens.get(1);
      if (!Arrays.asList(INTRA_CLAUSE_OPERATORS).contains(condition.toUpperCase())) {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
      FilterClause filterClause=new FilterClause(MetadataUtils.useSecondryIndex(persistenceUnit) ? columnName : indexName + ""String_Node_Str"" + columnName,condition,tokens.get(2));
      filtersQueue.add(filterClause);
      onTypedParameter(tokens,filterClause,property);
      newClause=false;
    }
 else {
      if (Arrays.asList(INTER_CLAUSE_OPERATORS).contains(clause.toUpperCase())) {
        filtersQueue.add(clause.toUpperCase());
        newClause=true;
      }
 else {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
    }
  }
}","/** 
 * Inits the filter.
 */
private void initFilter(){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String indexName=metadata.getIndexName();
  if (null == filter) {
    return;
  }
  List<String> clauses=tokenize(filter,INTER_CLAUSE_PATTERN);
  clauses=parseFilterForBetweenClause(clauses,indexName);
  boolean newClause=true;
  for (  String clause : clauses) {
    if (newClause) {
      List<String> tokens=tokenize(clause,INTRA_CLAUSE_PATTERN);
      if (tokens.size() != 3) {
        throw new PersistenceException(""String_Node_Str"" + clause);
      }
      String property=tokens.get(0);
      property=property.substring((entityAlias + ""String_Node_Str"").length());
      String columnName=null;
      try {
        Metamodel metaModel=KunderaMetadata.INSTANCE.getApplicationMetadata().getMetamodel(getPersistenceUnit());
        columnName=((AbstractAttribute)metaModel.entity(entityClass).getAttribute(property)).getJPAColumnName();
      }
 catch (      IllegalArgumentException iaex) {
        logger.info(""String_Node_Str"" + property + ""String_Node_Str"");
      }
      if (columnName == null && property.indexOf(""String_Node_Str"") > 0) {
        String enclosingEmbeddedField=MetadataUtils.getEnclosingEmbeddedFieldName(metadata,property,true);
        if (enclosingEmbeddedField != null) {
          columnName=property;
        }
      }
      String condition=tokens.get(1);
      if (!Arrays.asList(INTRA_CLAUSE_OPERATORS).contains(condition.toUpperCase())) {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
      FilterClause filterClause=new FilterClause(MetadataUtils.useSecondryIndex(persistenceUnit) ? columnName : indexName + ""String_Node_Str"" + columnName,condition,tokens.get(2));
      filtersQueue.add(filterClause);
      onTypedParameter(tokens,filterClause,property);
      newClause=false;
    }
 else {
      if (Arrays.asList(INTER_CLAUSE_OPERATORS).contains(clause.toUpperCase())) {
        filtersQueue.add(clause.toUpperCase());
        newClause=true;
      }
 else {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
    }
  }
}",0.9981455725544738
176862,"/** 
 * Handle find by range.
 * @param m the m
 * @param client the client
 * @param result the result
 * @param ixClause the ix clause
 * @param isRowKeyQuery the is row key query
 * @return the list
 */
public List handleFindByRange(EntityMetadata m,Client client,List result,Map<Boolean,List<IndexClause>> ixClause,boolean isRowKeyQuery){
  List<IndexExpression> expressions=ixClause.get(isRowKeyQuery).get(0).getExpressions();
  if (expressions == null) {
    return null;
  }
  byte[] minValue=null;
  byte[] maxVal=null;
  if (expressions.size() == 1) {
    IndexOperator operator=expressions.get(0).op;
    if (operator.equals(IndexOperator.LTE)) {
      maxVal=expressions.get(0) != null ? expressions.get(0).getValue() : null;
      minValue=null;
    }
 else {
      minValue=expressions.get(0) != null ? expressions.get(0).getValue() : null;
      maxVal=null;
    }
  }
 else {
    minValue=expressions.get(0) != null ? expressions.get(0).getValue() : null;
    maxVal=expressions.size() > 1 && expressions.get(1) != null ? expressions.get(1).getValue() : null;
  }
  try {
    result=((CassandraClientBase)client).findByRange(minValue,maxVal,m,false,null);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e);
  }
  return result;
}","/** 
 * Handle find by range.
 * @param m the m
 * @param client the client
 * @param result the result
 * @param ixClause the ix clause
 * @param isRowKeyQuery the is row key query
 * @return the list
 */
public List handleFindByRange(EntityMetadata m,Client client,List result,Map<Boolean,List<IndexClause>> ixClause,boolean isRowKeyQuery){
  List<IndexExpression> expressions=ixClause.get(isRowKeyQuery).get(0).getExpressions();
  if (expressions == null) {
    return null;
  }
  byte[] minValue=null;
  byte[] maxVal=null;
  if (expressions.size() == 1) {
    IndexOperator operator=expressions.get(0).op;
    if (operator.equals(IndexOperator.LTE)) {
      maxVal=expressions.get(0) != null ? expressions.get(0).getValue() : null;
      minValue=null;
    }
 else {
      minValue=expressions.get(0) != null ? expressions.get(0).getValue() : null;
      maxVal=null;
    }
  }
 else {
    minValue=expressions.get(0) != null ? expressions.get(0).getValue() : null;
    maxVal=expressions.size() > 1 && expressions.get(1) != null ? expressions.get(1).getValue() : null;
  }
  try {
    result=((CassandraClientBase)client).findByRange(minValue,maxVal,m,m.getRelationNames() != null && !m.getRelationNames().isEmpty(),m.getRelationNames());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e);
  }
  return result;
}",0.965925925925926
176863,"@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  if (isUpdate && entityMetadata.isCounterColumnType()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  ThriftRow tf=null;
  try {
    String columnFamily=entityMetadata.getTableName();
    tf=dataHandler.toThriftRow(entity,id.toString(),entityMetadata,columnFamily);
    timestamp=System.currentTimeMillis();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
  addRelationsToThriftRow(entityMetadata,tf,rlHolders);
  IPooledConnection conn=null;
  try {
    byte[] rowKey=PropertyAccessorHelper.get(entity,entityMetadata.getIdColumn().getField());
    String columnFamily=entityMetadata.getTableName();
    List<Mutation> insertion_list=new ArrayList<Mutation>();
    if (entityMetadata.isCounterColumnType()) {
      List<CounterColumn> thriftCounterColumns=tf.getCounterColumns();
      List<CounterSuperColumn> thriftCounterSuperColumns=tf.getCounterSuperColumns();
      if (thriftCounterColumns != null && !thriftCounterColumns.isEmpty()) {
        for (        CounterColumn column : thriftCounterColumns) {
          Mutation mut=new Mutation();
          mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setCounter_column(column));
          insertion_list.add(mut);
        }
      }
      if (thriftCounterSuperColumns != null && !thriftCounterSuperColumns.isEmpty()) {
        for (        CounterSuperColumn sc : thriftCounterSuperColumns) {
          Mutation mut=new Mutation();
          mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setCounter_super_column(sc));
          insertion_list.add(mut);
        }
      }
    }
 else {
      List<Column> thriftColumns=tf.getColumns();
      List<SuperColumn> thriftSuperColumns=tf.getSuperColumns();
      if (thriftColumns != null && !thriftColumns.isEmpty()) {
        for (        Column column : thriftColumns) {
          Mutation mut=new Mutation();
          mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setColumn(column));
          insertion_list.add(mut);
        }
      }
      if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
        for (        SuperColumn superColumn : thriftSuperColumns) {
          Mutation mut=new Mutation();
          mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setSuper_column(superColumn));
          insertion_list.add(mut);
        }
      }
    }
    Map<String,List<Mutation>> columnFamilyValues=new HashMap<String,List<Mutation>>();
    columnFamilyValues.put(columnFamily,insertion_list);
    Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
    mutationMap.put(ByteBuffer.wrap(rowKey),columnFamilyValues);
    conn=PelopsUtils.getCassandraConnection(entityMetadata.getPersistenceUnit());
    Cassandra.Client cassandra_client=conn.getAPI();
    cassandra_client.set_keyspace(entityMetadata.getSchema());
    cassandra_client.batch_mutate(mutationMap,consistencyLevel);
  }
 catch (  InvalidRequestException e) {
    log.error(e.getMessage());
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(e.getMessage());
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(e.getMessage());
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(e.getMessage());
    throw new KunderaException(e);
  }
 finally {
    PelopsUtils.releaseConnection(conn);
  }
}","@Override protected void onPersist(EntityMetadata entityMetadata,Object entity,Object id,List<RelationHolder> rlHolders){
  if (!isOpen()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  if (isUpdate && entityMetadata.isCounterColumnType()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  ThriftRow tf=null;
  try {
    String columnFamily=entityMetadata.getTableName();
    tf=dataHandler.toThriftRow(entity,id.toString(),entityMetadata,columnFamily);
    timestamp=System.currentTimeMillis();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
  addRelationsToThriftRow(entityMetadata,tf,rlHolders);
  IPooledConnection conn=null;
  try {
    byte[] rowKey=PropertyAccessorHelper.get(entity,entityMetadata.getIdColumn().getField());
    String columnFamily=entityMetadata.getTableName();
    List<Mutation> insertion_list=new ArrayList<Mutation>();
    if (entityMetadata.isCounterColumnType()) {
      List<CounterColumn> thriftCounterColumns=tf.getCounterColumns();
      List<CounterSuperColumn> thriftCounterSuperColumns=tf.getCounterSuperColumns();
      if (thriftCounterColumns != null && !thriftCounterColumns.isEmpty()) {
        for (        CounterColumn column : thriftCounterColumns) {
          Mutation mut=new Mutation();
          mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setCounter_column(column));
          insertion_list.add(mut);
        }
      }
      if (thriftCounterSuperColumns != null && !thriftCounterSuperColumns.isEmpty()) {
        for (        CounterSuperColumn sc : thriftCounterSuperColumns) {
          Mutation mut=new Mutation();
          mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setCounter_super_column(sc));
          insertion_list.add(mut);
        }
      }
    }
 else {
      List<Column> thriftColumns=tf.getColumns();
      List<SuperColumn> thriftSuperColumns=tf.getSuperColumns();
      if (thriftColumns != null && !thriftColumns.isEmpty()) {
        for (        Column column : thriftColumns) {
          Mutation mut=new Mutation();
          mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setColumn(column));
          insertion_list.add(mut);
        }
      }
      if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
        for (        SuperColumn superColumn : thriftSuperColumns) {
          Mutation mut=new Mutation();
          mut.setColumn_or_supercolumn(new ColumnOrSuperColumn().setSuper_column(superColumn));
          insertion_list.add(mut);
        }
      }
    }
    Map<String,List<Mutation>> columnFamilyValues=new HashMap<String,List<Mutation>>();
    columnFamilyValues.put(columnFamily,insertion_list);
    Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
    Bytes b=Bytes.fromUTF8(tf.getId());
    mutationMap.put(b.getBytes(),columnFamilyValues);
    conn=PelopsUtils.getCassandraConnection(entityMetadata.getPersistenceUnit());
    Cassandra.Client cassandra_client=conn.getAPI();
    cassandra_client.set_keyspace(entityMetadata.getSchema());
    cassandra_client.batch_mutate(mutationMap,consistencyLevel);
  }
 catch (  InvalidRequestException e) {
    log.error(e.getMessage());
    throw new KunderaException(e);
  }
catch (  TException e) {
    log.error(e.getMessage());
    throw new KunderaException(e);
  }
catch (  UnavailableException e) {
    log.error(e.getMessage());
    throw new KunderaException(e);
  }
catch (  TimedOutException e) {
    log.error(e.getMessage());
    throw new KunderaException(e);
  }
 finally {
    PelopsUtils.releaseConnection(conn);
  }
}",0.9870660313138188
176864,"@Override public final EntityManager createEntityManager(Map map){
  return new EntityManagerImpl(this,map,transactionType,PersistenceContextType.EXTENDED);
}","@Override public final EntityManager createEntityManager(Map map){
  if (isOpen()) {
    return new EntityManagerImpl(this,map,transactionType,PersistenceContextType.EXTENDED);
  }
  throw new IllegalStateException(""String_Node_Str"");
}",0.8020304568527918
176865,"@Override public List<Object> findByRelation(String colName,String colValue,Class entityClazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  SlicePredicate slicePredicate=Selector.newColumnsPredicateAll(false,10000);
  List<Object> entities=null;
  IndexExpression ie=new IndexExpression(Bytes.fromUTF8(colName).getBytes(),IndexOperator.EQ,Bytes.fromUTF8(colValue).getBytes());
  IndexClause ix=Selector.newIndexClause(Bytes.EMPTY,10000,ie);
  ColumnParent columnParent=new ColumnParent(m.getTableName());
  List<KeySlice> keySlices;
  try {
    cassandra_client.set_keyspace(m.getSchema());
    keySlices=cassandra_client.get_indexed_slices(columnParent,ix,slicePredicate,consistencyLevel);
  }
 catch (  InvalidRequestException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(""String_Node_Str"",e);
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(""String_Node_Str"",e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(""String_Node_Str"",e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(""String_Node_Str"",e);
  }
  if (keySlices != null) {
    entities=new ArrayList<Object>(keySlices.size());
    populateData(m,keySlices,entities,false,null);
  }
  return entities;
}","@Override public List<Object> findByRelation(String colName,String colValue,Class entityClazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  SlicePredicate slicePredicate=Selector.newColumnsPredicateAll(false,10000);
  List<Object> entities=null;
  IndexExpression ie=new IndexExpression(Bytes.fromUTF8(colName).getBytes(),IndexOperator.EQ,Bytes.fromUTF8(colValue).getBytes());
  IndexClause ix=Selector.newIndexClause(Bytes.EMPTY,10000,ie);
  ColumnParent columnParent=new ColumnParent(m.getTableName());
  List<KeySlice> keySlices;
  try {
    cassandra_client.set_keyspace(m.getSchema());
    keySlices=cassandra_client.get_indexed_slices(columnParent,ix,slicePredicate,consistencyLevel);
  }
 catch (  InvalidRequestException e) {
    if (e.why != null && e.why.contains(""String_Node_Str"")) {
      return entities;
    }
 else {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(""String_Node_Str"",e);
    }
  }
catch (  UnavailableException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(""String_Node_Str"",e);
  }
catch (  TimedOutException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(""String_Node_Str"",e);
  }
catch (  TException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(""String_Node_Str"",e);
  }
  if (keySlices != null) {
    entities=new ArrayList<Object>(keySlices.size());
    populateData(m,keySlices,entities,false,null);
  }
  return entities;
}",0.9576807730756416
176866,"@Override public void delete(Object entity,Object pKey){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  deleteByColumn(metadata.getTableName(),metadata.getIdColumn().getName(),pKey);
}","@Override public void delete(Object entity,Object pKey){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  deleteByColumn(metadata.getSchema(),metadata.getTableName(),metadata.getIdColumn().getName(),pKey);
}",0.955602536997886
176867,"public void deleteByColumn(String tableName,String columnName,Object columnValue){
  try {
    handler.deleteRow(columnValue.toString(),tableName);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new PersistenceException(e);
  }
}","public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  try {
    handler.deleteRow(columnValue.toString(),tableName);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new PersistenceException(e);
  }
}",0.9681978798586572
176868,"public void deleteByColumn(String tableName,String columnName,Object columnValue){
  DBCollection dbCollection=mongoDb.getCollection(tableName);
  BasicDBObject query=new BasicDBObject();
  query.put(columnName,columnValue);
  dbCollection.remove(query);
}","public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  DBCollection dbCollection=mongoDb.getCollection(tableName);
  BasicDBObject query=new BasicDBObject();
  query.put(columnName,columnValue);
  dbCollection.remove(query);
}",0.9660377358490566
176869,"public void deleteByColumn(String tableName,String columnName,Object columnValue){
  StringBuffer query=new StringBuffer();
  query.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(""String_Node_Str"").append(columnValue).append(""String_Node_Str"");
  s=getStatelessSession();
  Transaction tx=s.beginTransaction();
  s.createSQLQuery(query.toString()).executeUpdate();
  tx.commit();
}","public void deleteByColumn(String schemaName,String tableName,String columnName,Object columnValue){
  StringBuffer query=new StringBuffer();
  query.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(""String_Node_Str"").append(columnValue).append(""String_Node_Str"");
  s=getStatelessSession();
  Transaction tx=s.beginTransaction();
  s.createSQLQuery(query.toString()).executeUpdate();
  tx.commit();
}",0.9806451612903224
176870,"/** 
 * Recursively fetches associated entities for a given <code>entity</code>
 * @param entity
 * @param relationsMap
 * @param client
 * @param m
 * @param pd
 * @return
 */
public Object recursivelyFindEntities(Object entity,Map<String,Object> relationsMap,EntityMetadata m,PersistenceDelegator pd){
  String entityId=PropertyAccessorHelper.getId(entity,m);
  associationBuilder=new AssociationBuilder();
  for (  Relation relation : m.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      PersistenceCacheManager.addEntityToPersistenceCache(entity,pd,entityId);
      associationBuilder.populateRelationFromJoinTable(entity,m,pd,relation);
    }
 else {
      String relationName=MetadataUtils.getMappedName(m,relation);
      Object relationValue=relationsMap != null ? relationsMap.get(relationName) : null;
      Class<?> childClass=relation.getTargetEntity();
      EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(childClass);
      if (relationValue != null) {
        associationBuilder.populateRelationFromValue(entity,pd,relation,relationValue,childMetadata);
      }
 else {
        associationBuilder.populateRelationViaQuery(entity,pd,entityId,relation,relationName,childMetadata);
      }
    }
  }
  return entity;
}","/** 
 * Recursively fetches associated entities for a given <code>entity</code>
 * @param entity
 * @param relationsMap
 * @param client
 * @param m
 * @param pd
 * @return
 */
public Object recursivelyFindEntities(Object entity,Map<String,Object> relationsMap,EntityMetadata m,PersistenceDelegator pd){
  String entityId=PropertyAccessorHelper.getId(entity,m);
  associationBuilder=new AssociationBuilder();
  for (  Relation relation : m.getRelations()) {
    Field f=relation.getProperty();
    if (PropertyAccessorHelper.getObject(entity,f) == null) {
      if (relation.isRelatedViaJoinTable()) {
        PersistenceCacheManager.addEntityToPersistenceCache(entity,pd,entityId);
        associationBuilder.populateRelationFromJoinTable(entity,m,pd,relation);
      }
 else {
        String relationName=MetadataUtils.getMappedName(m,relation);
        Object relationValue=relationsMap != null ? relationsMap.get(relationName) : null;
        Class<?> childClass=relation.getTargetEntity();
        EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(childClass);
        if (relationValue != null) {
          associationBuilder.populateRelationFromValue(entity,pd,relation,relationValue,childMetadata);
        }
 else {
          associationBuilder.populateRelationViaQuery(entity,pd,entityId,relation,relationName,childMetadata);
        }
      }
    }
  }
  return entity;
}",0.7485029940119761
176871,"/** 
 * @param columnFamilyName
 * @param m
 * @param filterClauseQueue
 * @return
 */
@Override public List<SearchResult> getSearchResults(EntityMetadata m,Queue<FilterClause> filterClauseQueue,String persistenceUnit,ConsistencyLevel consistencyLevel){
  String columnFamilyName=m.getTableName();
  Selector selector=Pelops.createSelector(PelopsUtils.generatePoolName(persistenceUnit));
  List<SearchResult> searchResults=new ArrayList<SearchResult>();
  for (  FilterClause o : filterClauseQueue) {
    SearchResult searchResult=new SearchResult();
    FilterClause clause=((FilterClause)o);
    String rowKey=clause.getProperty();
    String columnName=clause.getValue().toString();
    String condition=clause.getCondition();
    log.debug(""String_Node_Str"" + rowKey + ""String_Node_Str""+ columnName+ ""String_Node_Str""+ condition);
    if (rowKey.equals(m.getIdColumn().getField().getName()) || rowKey.equals(m.getIdColumn().getName())) {
      searchResult.setPrimaryKey(columnName);
    }
 else {
      List<Column> thriftColumns=new ArrayList<Column>();
      if (condition.equals(""String_Node_Str"")) {
        Column thriftColumn=selector.getColumnFromRow(columnFamilyName,rowKey,columnName,consistencyLevel);
        thriftColumns.add(thriftColumn);
      }
 else       if (condition.equalsIgnoreCase(""String_Node_Str"")) {
        searchColumnsInRange(columnFamilyName,consistencyLevel,selector,rowKey,columnName,thriftColumns,columnName.getBytes(),new byte[0]);
      }
 else       if (condition.equals(""String_Node_Str"")) {
        searchColumnsInRange(columnFamilyName,consistencyLevel,selector,rowKey,columnName,thriftColumns,columnName.getBytes(),new byte[0]);
      }
 else       if (condition.equals(""String_Node_Str"")) {
        searchColumnsInRange(columnFamilyName,consistencyLevel,selector,rowKey,columnName,thriftColumns,new byte[0],columnName.getBytes());
      }
 else       if (condition.equals(""String_Node_Str"")) {
        searchColumnsInRange(columnFamilyName,consistencyLevel,selector,rowKey,columnName,thriftColumns,columnName.getBytes(),new byte[0]);
      }
 else       if (condition.equals(""String_Node_Str"")) {
        searchColumnsInRange(columnFamilyName,consistencyLevel,selector,rowKey,columnName,thriftColumns,new byte[0],columnName.getBytes());
      }
 else {
        throw new QueryHandlerException(condition + ""String_Node_Str"");
      }
      for (      Column thriftColumn : thriftColumns) {
        byte[] columnValue=thriftColumn.getValue();
        String columnValueStr=Bytes.toUTF8(columnValue);
        PropertyAccessor<?> accessor=PropertyAccessorFactory.getPropertyAccessor(m.getIdColumn().getField());
        Object value=null;
        if (columnValueStr.indexOf(Constants.INDEX_TABLE_EC_DELIMITER) > 0) {
          String pk=columnValueStr.substring(0,columnValueStr.indexOf(Constants.INDEX_TABLE_EC_DELIMITER));
          String ecName=columnValueStr.substring(columnValueStr.indexOf(Constants.INDEX_TABLE_EC_DELIMITER) + Constants.INDEX_TABLE_EC_DELIMITER.length(),columnValueStr.length());
          searchResult.setPrimaryKey(pk);
          searchResult.setEmbeddedColumnName(rowKey.substring(0,rowKey.indexOf(Constants.INDEX_TABLE_ROW_KEY_DELIMITER)));
          searchResult.addEmbeddedColumnValue(ecName);
        }
 else {
          value=accessor.fromBytes(m.getIdColumn().getField().getClass(),columnValue);
          searchResult.setPrimaryKey(value);
        }
        searchResults.add(searchResult);
      }
    }
  }
  return searchResults;
}","/** 
 * @param columnFamilyName
 * @param m
 * @param filterClauseQueue
 * @return
 */
@Override public List<SearchResult> getSearchResults(EntityMetadata m,Queue<FilterClause> filterClauseQueue,String persistenceUnit,ConsistencyLevel consistencyLevel){
  String columnFamilyName=m.getTableName() + Constants.INDEX_TABLE_SUFFIX;
  Selector selector=Pelops.createSelector(PelopsUtils.generatePoolName(persistenceUnit));
  List<SearchResult> searchResults=new ArrayList<SearchResult>();
  for (  FilterClause o : filterClauseQueue) {
    SearchResult searchResult=new SearchResult();
    FilterClause clause=((FilterClause)o);
    String rowKey=clause.getProperty();
    String columnName=clause.getValue().toString();
    String condition=clause.getCondition();
    log.debug(""String_Node_Str"" + rowKey + ""String_Node_Str""+ columnName+ ""String_Node_Str""+ condition);
    if (rowKey.equals(m.getIdColumn().getField().getName()) || rowKey.equals(m.getIdColumn().getName())) {
      searchResult.setPrimaryKey(columnName);
    }
 else {
      List<Column> thriftColumns=new ArrayList<Column>();
      if (condition.equals(""String_Node_Str"")) {
        Column thriftColumn=selector.getColumnFromRow(columnFamilyName,rowKey,columnName,consistencyLevel);
        thriftColumns.add(thriftColumn);
      }
 else       if (condition.equalsIgnoreCase(""String_Node_Str"")) {
        searchColumnsInRange(columnFamilyName,consistencyLevel,selector,rowKey,columnName,thriftColumns,columnName.getBytes(),new byte[0]);
      }
 else       if (condition.equals(""String_Node_Str"")) {
        searchColumnsInRange(columnFamilyName,consistencyLevel,selector,rowKey,columnName,thriftColumns,columnName.getBytes(),new byte[0]);
      }
 else       if (condition.equals(""String_Node_Str"")) {
        searchColumnsInRange(columnFamilyName,consistencyLevel,selector,rowKey,columnName,thriftColumns,new byte[0],columnName.getBytes());
      }
 else       if (condition.equals(""String_Node_Str"")) {
        searchColumnsInRange(columnFamilyName,consistencyLevel,selector,rowKey,columnName,thriftColumns,columnName.getBytes(),new byte[0]);
      }
 else       if (condition.equals(""String_Node_Str"")) {
        searchColumnsInRange(columnFamilyName,consistencyLevel,selector,rowKey,columnName,thriftColumns,new byte[0],columnName.getBytes());
      }
 else {
        throw new QueryHandlerException(condition + ""String_Node_Str"");
      }
      for (      Column thriftColumn : thriftColumns) {
        byte[] columnValue=thriftColumn.getValue();
        String columnValueStr=Bytes.toUTF8(columnValue);
        PropertyAccessor<?> accessor=PropertyAccessorFactory.getPropertyAccessor(m.getIdColumn().getField());
        Object value=null;
        if (columnValueStr.indexOf(Constants.INDEX_TABLE_EC_DELIMITER) > 0) {
          String pk=columnValueStr.substring(0,columnValueStr.indexOf(Constants.INDEX_TABLE_EC_DELIMITER));
          String ecName=columnValueStr.substring(columnValueStr.indexOf(Constants.INDEX_TABLE_EC_DELIMITER) + Constants.INDEX_TABLE_EC_DELIMITER.length(),columnValueStr.length());
          searchResult.setPrimaryKey(pk);
          searchResult.setEmbeddedColumnName(rowKey.substring(0,rowKey.indexOf(Constants.INDEX_TABLE_ROW_KEY_DELIMITER)));
          searchResult.addEmbeddedColumnValue(ecName);
        }
 else {
          value=accessor.fromBytes(m.getIdColumn().getField().getClass(),columnValue);
          searchResult.setPrimaryKey(value);
        }
        searchResults.add(searchResult);
      }
    }
  }
  return searchResults;
}",0.9956047072167872
176872,"/** 
 * Populate entity from hbase data.
 * @param entity the entity
 * @param hbaseData the hbase data
 * @param m the m
 * @param rowKey the row key
 * @param relationNames the relation names
 * @return the object
 */
private Object populateEntityFromHbaseData(Object entity,HBaseData hbaseData,EntityMetadata m,String rowKey,List<String> relationNames){
  try {
    PropertyAccessorHelper.setId(entity,m,hbaseData.getRowKey());
    List<KeyValue> hbaseValues=hbaseData.getColumns();
    Map<String,Object> relations=new HashMap<String,Object>();
    List<Column> columns=m.getColumnsAsList();
    for (    Column column : columns) {
      Field columnField=column.getField();
      String columnName=column.getName();
      for (      KeyValue colData : hbaseValues) {
        String hbaseColumn=Bytes.toString(colData.getFamily());
        String colName=hbaseColumn;
        if (colName != null && colName.equalsIgnoreCase(columnName.toLowerCase())) {
          byte[] hbaseColumnValue=colData.getValue();
          PropertyAccessorHelper.set(entity,columnField,hbaseColumnValue);
        }
 else         if (relationNames != null && relationNames.contains(colName)) {
          relations.put(colName,Bytes.toString(colData.getValue()));
        }
      }
    }
    List<EmbeddedColumn> columnFamilies=m.getEmbeddedColumnsAsList();
    for (    EmbeddedColumn columnFamily : columnFamilies) {
      Field columnFamilyFieldInEntity=columnFamily.getField();
      Class<?> columnFamilyClass=columnFamilyFieldInEntity.getType();
      Map<String,Field> columnNameToFieldMap=MetadataUtils.createColumnsFieldMap(m,columnFamily);
      if (Collection.class.isAssignableFrom(columnFamilyClass)) {
        Field embeddedCollectionField=columnFamily.getField();
        Object[] embeddedObjectArr=new Object[hbaseValues.size()];
        Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
        int prevCFNameCounter=0;
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.startsWith(columnFamily.getName())) {
            if (relationNames != null && relationNames.contains(cfInHbase)) {
              relations.put(cfInHbase,Bytes.toString(colData.getValue()));
            }
            continue;
          }
          String cfNamePostfix=MetadataUtils.getEmbeddedCollectionPostfix(cfInHbase);
          int cfNameCounter=Integer.parseInt(cfNamePostfix);
          if (cfNameCounter != prevCFNameCounter) {
            prevCFNameCounter=cfNameCounter;
            embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          }
          setHBaseDataIntoObject(colData,columnFamilyFieldInEntity,columnNameToFieldMap,embeddedObject);
          embeddedObjectArr[cfNameCounter]=embeddedObject;
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(rowKey,embeddedObject,cfInHbase);
        }
        Collection embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
        embeddedCollection.addAll(Arrays.asList(embeddedObjectArr));
        embeddedCollection.removeAll(Collections.singletonList(null));
        embeddedObjectArr=null;
        if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
          PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
        }
      }
 else {
        Object columnFamilyObj=columnFamilyClass.newInstance();
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.equals(columnFamily.getName())) {
            if (relationNames != null && relationNames.contains(cfInHbase)) {
              relations.put(cfInHbase,Bytes.toString(colData.getValue()));
            }
            continue;
          }
          String colName=Bytes.toString(colData.getQualifier());
          byte[] columnValue=colData.getValue();
          Field columnField=columnNameToFieldMap.get(colName);
          if (columnField != null) {
            if (columnFamilyFieldInEntity.isAnnotationPresent(Embedded.class) || columnFamilyFieldInEntity.isAnnotationPresent(ElementCollection.class)) {
              PropertyAccessorHelper.set(columnFamilyObj,columnField,columnValue);
            }
 else {
              columnFamilyObj=Bytes.toString(columnValue);
            }
          }
        }
        PropertyAccessorHelper.set(entity,columnFamilyFieldInEntity,columnFamilyObj);
      }
    }
    if (!relations.isEmpty()) {
      return new EnhanceEntity(entity,rowKey,relations);
    }
    return entity;
  }
 catch (  PropertyAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  InstantiationException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  IllegalAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
}","/** 
 * Populate entity from hbase data.
 * @param entity the entity
 * @param hbaseData the hbase data
 * @param m the m
 * @param rowKey the row key
 * @param relationNames the relation names
 * @return the object
 */
private Object populateEntityFromHbaseData(Object entity,HBaseData hbaseData,EntityMetadata m,String rowKey,List<String> relationNames){
  try {
    PropertyAccessorHelper.setId(entity,m,new String(hbaseData.getRowKey()));
    List<KeyValue> hbaseValues=hbaseData.getColumns();
    Map<String,Object> relations=new HashMap<String,Object>();
    List<Column> columns=m.getColumnsAsList();
    for (    Column column : columns) {
      Field columnField=column.getField();
      String columnName=column.getName();
      for (      KeyValue colData : hbaseValues) {
        String hbaseColumn=Bytes.toString(colData.getFamily());
        String colName=hbaseColumn;
        if (colName != null && colName.equalsIgnoreCase(columnName.toLowerCase())) {
          byte[] hbaseColumnValue=colData.getValue();
          PropertyAccessorHelper.set(entity,columnField,hbaseColumnValue);
        }
 else         if (relationNames != null && relationNames.contains(colName)) {
          relations.put(colName,Bytes.toString(colData.getValue()));
        }
      }
    }
    List<EmbeddedColumn> columnFamilies=m.getEmbeddedColumnsAsList();
    for (    EmbeddedColumn columnFamily : columnFamilies) {
      Field columnFamilyFieldInEntity=columnFamily.getField();
      Class<?> columnFamilyClass=columnFamilyFieldInEntity.getType();
      Map<String,Field> columnNameToFieldMap=MetadataUtils.createColumnsFieldMap(m,columnFamily);
      if (Collection.class.isAssignableFrom(columnFamilyClass)) {
        Field embeddedCollectionField=columnFamily.getField();
        Object[] embeddedObjectArr=new Object[hbaseValues.size()];
        Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
        int prevCFNameCounter=0;
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.startsWith(columnFamily.getName())) {
            if (relationNames != null && relationNames.contains(cfInHbase)) {
              relations.put(cfInHbase,Bytes.toString(colData.getValue()));
            }
            continue;
          }
          String cfNamePostfix=MetadataUtils.getEmbeddedCollectionPostfix(cfInHbase);
          int cfNameCounter=Integer.parseInt(cfNamePostfix);
          if (cfNameCounter != prevCFNameCounter) {
            prevCFNameCounter=cfNameCounter;
            embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          }
          setHBaseDataIntoObject(colData,columnFamilyFieldInEntity,columnNameToFieldMap,embeddedObject);
          embeddedObjectArr[cfNameCounter]=embeddedObject;
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(rowKey,embeddedObject,cfInHbase);
        }
        Collection embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
        embeddedCollection.addAll(Arrays.asList(embeddedObjectArr));
        embeddedCollection.removeAll(Collections.singletonList(null));
        embeddedObjectArr=null;
        if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
          PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
        }
      }
 else {
        Object columnFamilyObj=columnFamilyClass.newInstance();
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.equals(columnFamily.getName())) {
            if (relationNames != null && relationNames.contains(cfInHbase)) {
              relations.put(cfInHbase,Bytes.toString(colData.getValue()));
            }
            continue;
          }
          String colName=Bytes.toString(colData.getQualifier());
          byte[] columnValue=colData.getValue();
          Field columnField=columnNameToFieldMap.get(colName);
          if (columnField != null) {
            if (columnFamilyFieldInEntity.isAnnotationPresent(Embedded.class) || columnFamilyFieldInEntity.isAnnotationPresent(ElementCollection.class)) {
              PropertyAccessorHelper.set(columnFamilyObj,columnField,columnValue);
            }
 else {
              columnFamilyObj=Bytes.toString(columnValue);
            }
          }
        }
        PropertyAccessorHelper.set(entity,columnFamilyFieldInEntity,columnFamilyObj);
      }
    }
    if (!relations.isEmpty()) {
      return new EnhanceEntity(entity,rowKey,relations);
    }
    return entity;
  }
 catch (  PropertyAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  InstantiationException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  IllegalAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
}",0.9987944544906572
176873,"@Override public void read(String pu){
  Properties properties=new Properties();
  try {
    PersistenceUnitMetadata puMetadata=KunderaMetadataManager.getPersistenceUnitMetadata(pu);
    String propertyName=puMetadata != null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_CLIENT_PROPERTY) : null;
    InputStream inStream=propertyName != null ? ClassLoader.getSystemResourceAsStream(propertyName) : null;
    if (inStream == null) {
      inStream=propertyName != null ? this.getClass().getClassLoader().getResourceAsStream(propertyName) : null;
    }
    if (inStream != null) {
      properties.load(inStream);
      readKeyspaceSpecificProprerties(properties);
      readColumnFamilySpecificProperties(properties);
    }
 else {
      log.info(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
}","@Override public void read(String pu){
  Properties properties=new Properties();
  try {
    PersistenceUnitMetadata puMetadata=KunderaMetadataManager.getPersistenceUnitMetadata(pu);
    String propertyName=puMetadata != null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_CLIENT_PROPERTY) : null;
    InputStream inStream=propertyName != null ? Thread.currentThread().getContextClassLoader().getResourceAsStream(propertyName) : null;
    if (inStream != null) {
      properties.load(inStream);
      readKeyspaceSpecificProprerties(properties);
      readColumnFamilySpecificProperties(properties);
    }
 else {
      log.info(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    log.warn(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
}",0.8838862559241706
176874,"@Override public void read(String pu){
  Properties properties=new Properties();
  puMetadata=KunderaMetadataManager.getPersistenceUnitMetadata(pu);
  hsmd.onInitialize();
  String propertyName=puMetadata != null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_CLIENT_PROPERTY) : null;
  InputStream inStream=propertyName != null ? ClassLoader.getSystemResourceAsStream(propertyName) : null;
  if (inStream != null) {
    try {
      properties.load(inStream);
      readProperties(properties);
    }
 catch (    IOException e) {
      log.warn(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
  }
 else {
    log.warn(""String_Node_Str"");
  }
}","@Override public void read(String pu){
  Properties properties=new Properties();
  puMetadata=KunderaMetadataManager.getPersistenceUnitMetadata(pu);
  hsmd.onInitialize();
  String propertyName=puMetadata != null ? puMetadata.getProperty(PersistenceProperties.KUNDERA_CLIENT_PROPERTY) : null;
  InputStream inStream=propertyName != null ? Thread.currentThread().getContextClassLoader().getResourceAsStream(propertyName) : null;
  if (inStream != null) {
    try {
      properties.load(inStream);
      readProperties(properties);
    }
 catch (    IOException e) {
      log.warn(""String_Node_Str"" + e.getMessage());
      throw new KunderaException(e);
    }
  }
 else {
    log.warn(""String_Node_Str"");
  }
}",0.964824120603015
176875,"public List<EnhanceEntity> readFromIndexTable(EntityMetadata m,Client client,Queue<FilterClause> filterClauseQueue){
  List<SearchResult> searchResults=new ArrayList<SearchResult>();
  List<Object> primaryKeys=new ArrayList<Object>();
  String columnFamilyName=m.getTableName() + Constants.INDEX_TABLE_SUFFIX;
  searchResults=((PelopsClient)client).searchInInvertedIndex(columnFamilyName,m,filterClauseQueue);
  for (  SearchResult searchResult : searchResults) {
    primaryKeys.add(searchResult.getPrimaryKey());
  }
  List<EnhanceEntity> enhanceEntityList=(List<EnhanceEntity>)((PelopsClient)client).find(m.getEntityClazz(),m.getRelationNames(),true,m,primaryKeys.toArray(new String[]{}));
  return enhanceEntityList;
}","public List<EnhanceEntity> readFromIndexTable(EntityMetadata m,Client client,Queue<FilterClause> filterClauseQueue){
  List<SearchResult> searchResults=new ArrayList<SearchResult>();
  List<Object> primaryKeys=new ArrayList<Object>();
  String columnFamilyName=m.getTableName() + Constants.INDEX_TABLE_SUFFIX;
  searchResults=((PelopsClient)client).searchInInvertedIndex(columnFamilyName,m,filterClauseQueue);
  Map<String,String> embeddedColumns=new HashMap<String,String>();
  for (  SearchResult searchResult : searchResults) {
    if (searchResult.getEmbeddedColumnValues() != null) {
      for (      String embeddedColVal : searchResult.getEmbeddedColumnValues()) {
        if (embeddedColVal != null) {
          StringBuilder strBuilder=new StringBuilder(embeddedColVal);
          strBuilder.append(""String_Node_Str"");
          strBuilder.append(searchResult.getPrimaryKey().toString());
          embeddedColumns.put(strBuilder.toString(),searchResult.getPrimaryKey().toString());
        }
      }
    }
  }
  List<EnhanceEntity> enhanceEntityList=null;
  if (embeddedColumns != null && !embeddedColumns.isEmpty()) {
    enhanceEntityList=client.find(m.getEntityClazz(),embeddedColumns);
  }
 else {
    for (    SearchResult searchResult : searchResults) {
      primaryKeys.add(searchResult.getPrimaryKey());
    }
    enhanceEntityList=(List<EnhanceEntity>)((PelopsClient)client).find(m.getEntityClazz(),m.getRelationNames(),true,m,primaryKeys.toArray(new String[]{}));
  }
  return enhanceEntityList;
}",0.6392857142857142
176876,"/** 
 * Prepare index clause.
 * @param m the m
 * @return the map
 */
private Map<Boolean,List<IndexClause>> prepareIndexClause(EntityMetadata m){
  IndexClause indexClause=Selector.newIndexClause(Bytes.EMPTY,maxResult);
  List<IndexClause> clauses=new ArrayList<IndexClause>();
  List<IndexExpression> expr=new ArrayList<IndexExpression>();
  Map<Boolean,List<IndexClause>> idxClauses=new HashMap<Boolean,List<IndexClause>>(1);
  String idColumn=m.getIdColumn().getName();
  boolean idPresent=false;
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      String fieldName=clause.getProperty();
      if (!idPresent && idColumn.equalsIgnoreCase(fieldName)) {
        idPresent=true;
      }
      if (idPresent & !idColumn.equalsIgnoreCase(fieldName)) {
        log.error(""String_Node_Str"");
        throw new QueryHandlerException(""String_Node_Str"");
      }
      String condition=clause.getCondition();
      String value=clause.getValue();
      if (idPresent) {
        expr=null;
      }
 else {
        expr.add(Selector.newIndexExpression(fieldName,getOperator(condition,idPresent),getBytesValue(fieldName,m,value)));
      }
    }
 else {
      String opr=o.toString();
      if (opr.equalsIgnoreCase(""String_Node_Str"")) {
        log.error(""String_Node_Str"");
        throw new QueryHandlerException(""String_Node_Str"" + opr + ""String_Node_Str"");
      }
    }
  }
  if (!StringUtils.isBlank(getKunderaQuery().getFilter())) {
    indexClause.setExpressions(expr);
    clauses.add(indexClause);
  }
  idxClauses.put(idPresent,clauses);
  return idxClauses;
}","/** 
 * Prepare index clause.
 * @param m the m
 * @return the map
 */
private Map<Boolean,List<IndexClause>> prepareIndexClause(EntityMetadata m){
  IndexClause indexClause=Selector.newIndexClause(Bytes.EMPTY,maxResult);
  List<IndexClause> clauses=new ArrayList<IndexClause>();
  List<IndexExpression> expr=new ArrayList<IndexExpression>();
  Map<Boolean,List<IndexClause>> idxClauses=new HashMap<Boolean,List<IndexClause>>(1);
  String idColumn=m.getIdColumn().getName();
  boolean idPresent=false;
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      String fieldName=clause.getProperty();
      if (!idPresent && idColumn.equalsIgnoreCase(fieldName)) {
        idPresent=true;
      }
      if (idPresent & !idColumn.equalsIgnoreCase(fieldName)) {
        log.error(""String_Node_Str"");
        throw new QueryHandlerException(""String_Node_Str"");
      }
      String condition=clause.getCondition();
      String value=clause.getValue();
      expr.add(Selector.newIndexExpression(fieldName,getOperator(condition,idPresent),getBytesValue(fieldName,m,value)));
    }
 else {
      String opr=o.toString();
      if (opr.equalsIgnoreCase(""String_Node_Str"")) {
        log.error(""String_Node_Str"");
        throw new QueryHandlerException(""String_Node_Str"" + opr + ""String_Node_Str"");
      }
    }
  }
  if (!StringUtils.isBlank(getKunderaQuery().getFilter())) {
    indexClause.setExpressions(expr);
    clauses.add(indexClause);
  }
  idxClauses.put(idPresent,clauses);
  return idxClauses;
}",0.9791411042944784
176877,"/** 
 * Execute suite.
 */
protected void executeTestSuite(){
  addAllUserInfo();
  getUserById();
  updateUser();
  getPersonalDetailByName();
  getAllUsers();
  getAllTweets();
  removeUser();
}","/** 
 * Execute suite.
 */
protected void executeTestSuite(){
  addAllUserInfo();
  getUserById();
  updateUser();
  getAllUsers();
  getAllTweets();
  removeUser();
}",0.9201101928374656
176878,"/** 
 * Populate data.
 * @param m the m
 * @param qResults the q results
 * @param entities the entities
 * @param isRelational the is relational
 * @param relationNames the relation names
 */
private void populateData(EntityMetadata m,Map<Bytes,List<Column>> qResults,List<Object> entities,boolean isRelational,List<String> relationNames){
  Iterator<Bytes> rowIter=qResults.keySet().iterator();
  while (rowIter.hasNext()) {
    Bytes rowKey=rowIter.next();
    List<Column> columns=qResults.get(rowKey);
    try {
      Object e=handler.fromColumnThriftRow(m.getEntityClazz(),m,handler.new ThriftRow(Bytes.toUTF8(rowKey.toByteArray()),m.getTableName(),columns,null),relationNames,isRelational);
      entities.add(e);
    }
 catch (    IllegalStateException e) {
      throw new KunderaException(e);
    }
catch (    Exception e) {
      throw new KunderaException(e);
    }
  }
}","/** 
 * Populate data.
 * @param m the m
 * @param qResults the q results
 * @param entities the entities
 * @param isRelational the is relational
 * @param relationNames the relation names
 */
private void populateData(EntityMetadata m,Map<Bytes,List<Column>> qResults,List<Object> entities,boolean isRelational,List<String> relationNames){
  if (m.getType().isSuperColumnFamilyMetadata()) {
    Set<Bytes> primaryKeys=qResults.keySet();
    if (primaryKeys != null && !primaryKeys.isEmpty()) {
      Object[] rowIds=new Object[primaryKeys.size()];
      int i=0;
      for (      Bytes b : primaryKeys) {
        rowIds[i]=Bytes.toUTF8(b.toByteArray());
        i++;
      }
      entities.addAll(findAll(m.getEntityClazz(),rowIds));
    }
  }
 else {
    Iterator<Bytes> rowIter=qResults.keySet().iterator();
    while (rowIter.hasNext()) {
      Bytes rowKey=rowIter.next();
      List<Column> columns=qResults.get(rowKey);
      try {
        Object e=handler.fromColumnThriftRow(m.getEntityClazz(),m,handler.new ThriftRow(Bytes.toUTF8(rowKey.toByteArray()),m.getTableName(),columns,null),relationNames,isRelational);
        entities.add(e);
      }
 catch (      IllegalStateException e) {
        throw new KunderaException(e);
      }
catch (      Exception e) {
        throw new KunderaException(e);
      }
    }
  }
}",0.6124661246612466
176879,"public List<Object> searchInWideRows(String columnFamilyName,EntityMetadata m,Queue<FilterClause> filterClauseQueue){
  Selector selector=Pelops.createSelector(PelopsUtils.generatePoolName(getPersistenceUnit()));
  List<Object> primaryKeys=new ArrayList<Object>();
  for (  FilterClause o : filterClauseQueue) {
    FilterClause clause=((FilterClause)o);
    String rowKey=clause.getProperty();
    String columnName=clause.getValue();
    String condition=clause.getCondition();
    log.debug(""String_Node_Str"" + rowKey + ""String_Node_Str""+ columnName+ ""String_Node_Str""+ condition);
    Column thriftColumn=selector.getColumnFromRow(columnFamilyName,rowKey,columnName,consistencyLevel);
    byte[] pk=thriftColumn.getValue();
    PropertyAccessor<?> accessor=PropertyAccessorFactory.getPropertyAccessor(m.getIdColumn().getField());
    Object value=accessor.fromBytes(m.getIdColumn().getField().getClass(),pk);
    primaryKeys.add(value);
  }
  return primaryKeys;
}","public List<Object> searchInWideRows(String columnFamilyName,EntityMetadata m,Queue<FilterClause> filterClauseQueue){
  Selector selector=Pelops.createSelector(PelopsUtils.generatePoolName(getPersistenceUnit()));
  List<Object> primaryKeys=new ArrayList<Object>();
  for (  FilterClause o : filterClauseQueue) {
    FilterClause clause=((FilterClause)o);
    String rowKey=clause.getProperty();
    String columnName=clause.getValue();
    String condition=clause.getCondition();
    log.debug(""String_Node_Str"" + rowKey + ""String_Node_Str""+ columnName+ ""String_Node_Str""+ condition);
    if (rowKey.equals(m.getIdColumn().getName())) {
      primaryKeys.add(columnName);
    }
 else {
      Column thriftColumn=selector.getColumnFromRow(columnFamilyName,rowKey,columnName,consistencyLevel);
      byte[] pk=thriftColumn.getValue();
      PropertyAccessor<?> accessor=PropertyAccessorFactory.getPropertyAccessor(m.getIdColumn().getField());
      Object value=accessor.fromBytes(m.getIdColumn().getField().getClass(),pk);
      primaryKeys.add(value);
    }
  }
  return primaryKeys;
}",0.8835849975645397
176880,"@Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<EnhanceEntity> ls=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  if (appMetadata.isNative(getJPAQuery())) {
    ls=(List<EnhanceEntity>)((PelopsClient)client).executeQuery(getJPAQuery(),m.getEntityClazz(),null);
  }
 else {
    boolean embeddedDataStoredAsCompositeColumns=false;
    if (embeddedDataStoredAsCompositeColumns) {
      ls=((CassandraEntityReader)getReader()).readFromIndexTable(m,client,getKunderaQuery().getFilterClauseQueue());
    }
 else {
      Map<Boolean,List<IndexClause>> ixClause=MetadataUtils.useSecondryIndex(m.getPersistenceUnit()) ? prepareIndexClause(m) : null;
      ((CassandraEntityReader)getReader()).setConditions(ixClause);
      ls=reader.populateRelation(m,client);
    }
  }
  return setRelationEntities(ls,client,m);
}","@Override protected List<Object> recursivelyPopulateEntities(EntityMetadata m,Client client){
  List<EnhanceEntity> ls=null;
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  if (appMetadata.isNative(getJPAQuery())) {
    ls=(List<EnhanceEntity>)((PelopsClient)client).executeQuery(getJPAQuery(),m.getEntityClazz(),null);
  }
 else {
    boolean embeddedDataStoredAsCompositeColumns=false;
    if (embeddedDataStoredAsCompositeColumns && !getKunderaQuery().getFilterClauseQueue().isEmpty()) {
      ls=((CassandraEntityReader)getReader()).readFromIndexTable(m,client,getKunderaQuery().getFilterClauseQueue());
    }
 else {
      Map<Boolean,List<IndexClause>> ixClause=MetadataUtils.useSecondryIndex(m.getPersistenceUnit()) ? prepareIndexClause(m) : null;
      ((CassandraEntityReader)getReader()).setConditions(ixClause);
      ls=reader.populateRelation(m,client);
    }
  }
  return setRelationEntities(ls,client,m);
}",0.970509383378016
176881,"/** 
 * Prepare index clause.
 * @param m the m
 * @return the map
 */
private Map<Boolean,List<IndexClause>> prepareIndexClause(EntityMetadata m){
  IndexClause indexClause=Selector.newIndexClause(Bytes.EMPTY,maxResult);
  List<IndexClause> clauses=new ArrayList<IndexClause>();
  List<IndexExpression> expr=new ArrayList<IndexExpression>();
  Map<Boolean,List<IndexClause>> idxClauses=new HashMap<Boolean,List<IndexClause>>(1);
  String idColumn=m.getIdColumn().getName();
  boolean idPresent=false;
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      String fieldName=clause.getProperty();
      if (!idPresent && idColumn.equalsIgnoreCase(fieldName)) {
        idPresent=true;
      }
      if (idPresent & !idColumn.equalsIgnoreCase(fieldName)) {
        log.error(""String_Node_Str"");
        throw new QueryHandlerException(""String_Node_Str"");
      }
      String condition=clause.getCondition();
      String value=clause.getValue();
      expr.add(Selector.newIndexExpression(fieldName,getOperator(condition,idPresent),getBytesValue(fieldName,m,value)));
    }
 else {
      String opr=o.toString();
      if (opr.equalsIgnoreCase(""String_Node_Str"")) {
        log.error(""String_Node_Str"");
        throw new QueryHandlerException(""String_Node_Str"" + opr + ""String_Node_Str"");
      }
    }
  }
  if (!StringUtils.isBlank(getKunderaQuery().getFilter())) {
    indexClause.setExpressions(expr);
    clauses.add(indexClause);
  }
  idxClauses.put(idPresent,clauses);
  return idxClauses;
}","/** 
 * Prepare index clause.
 * @param m the m
 * @return the map
 */
private Map<Boolean,List<IndexClause>> prepareIndexClause(EntityMetadata m){
  IndexClause indexClause=Selector.newIndexClause(Bytes.EMPTY,maxResult);
  List<IndexClause> clauses=new ArrayList<IndexClause>();
  List<IndexExpression> expr=new ArrayList<IndexExpression>();
  Map<Boolean,List<IndexClause>> idxClauses=new HashMap<Boolean,List<IndexClause>>(1);
  String idColumn=m.getIdColumn().getName();
  boolean idPresent=false;
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      String fieldName=clause.getProperty();
      if (!idPresent && idColumn.equalsIgnoreCase(fieldName)) {
        idPresent=true;
      }
      if (idPresent & !idColumn.equalsIgnoreCase(fieldName)) {
        log.error(""String_Node_Str"");
        throw new QueryHandlerException(""String_Node_Str"");
      }
      String condition=clause.getCondition();
      String value=clause.getValue();
      if (idPresent) {
        expr=null;
      }
 else {
        expr.add(Selector.newIndexExpression(fieldName,getOperator(condition,idPresent),getBytesValue(fieldName,m,value)));
      }
    }
 else {
      String opr=o.toString();
      if (opr.equalsIgnoreCase(""String_Node_Str"")) {
        log.error(""String_Node_Str"");
        throw new QueryHandlerException(""String_Node_Str"" + opr + ""String_Node_Str"");
      }
    }
  }
  if (!StringUtils.isBlank(getKunderaQuery().getFilter())) {
    indexClause.setExpressions(expr);
    clauses.add(indexClause);
  }
  idxClauses.put(idPresent,clauses);
  return idxClauses;
}",0.9791411042944784
176882,"public void onExecute() throws Exception {
  executeTestSuite();
}","@Test public void onExecute() throws Exception {
  executeTestSuite();
}",0.9565217391304348
176883,"@Before protected void setUp() throws Exception {
  setUpInternal(""String_Node_Str"");
}","@Before public void setUp() throws Exception {
  setUpInternal(persistenceUnit);
}",0.7810650887573964
176884,"@Override void createSchema() throws InvalidRequestException, SchemaDisagreementException, TException {
  KsDef ksDef=null;
  CfDef userCfDef=new CfDef();
  userCfDef.name=""String_Node_Str"";
  userCfDef.keyspace=""String_Node_Str"";
  userCfDef.column_type=""String_Node_Str"";
  userCfDef.setComparator_type(""String_Node_Str"");
  userCfDef.setDefault_validation_class(""String_Node_Str"");
  CfDef prefrenceCfDef=new CfDef();
  prefrenceCfDef.name=""String_Node_Str"";
  prefrenceCfDef.keyspace=""String_Node_Str"";
  prefrenceCfDef.setComparator_type(""String_Node_Str"");
  prefrenceCfDef.setDefault_validation_class(""String_Node_Str"");
  ColumnDef columnDef=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  columnDef.index_type=IndexType.KEYS;
  ColumnDef columnDef3=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  columnDef3.index_type=IndexType.KEYS;
  prefrenceCfDef.addToColumn_metadata(columnDef);
  prefrenceCfDef.addToColumn_metadata(columnDef3);
  CfDef externalLinkCfDef=new CfDef();
  externalLinkCfDef.name=""String_Node_Str"";
  externalLinkCfDef.keyspace=""String_Node_Str"";
  externalLinkCfDef.setComparator_type(""String_Node_Str"");
  externalLinkCfDef.setDefault_validation_class(""String_Node_Str"");
  ColumnDef columnDef1=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  columnDef1.index_type=IndexType.KEYS;
  ColumnDef columnDef2=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  columnDef2.index_type=IndexType.KEYS;
  externalLinkCfDef.addToColumn_metadata(columnDef1);
  externalLinkCfDef.addToColumn_metadata(columnDef2);
  List<CfDef> cfDefs=new ArrayList<CfDef>();
  cfDefs.add(userCfDef);
  cfDefs.add(prefrenceCfDef);
  cfDefs.add(externalLinkCfDef);
  try {
    ksDef=CassandraCli.client.describe_keyspace(""String_Node_Str"");
    CassandraCli.client.set_keyspace(""String_Node_Str"");
    List<CfDef> cfDefn=ksDef.getCf_defs();
    for (    CfDef cfDef1 : cfDefn) {
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
    }
    CassandraCli.client.system_add_column_family(userCfDef);
    CassandraCli.client.system_add_column_family(externalLinkCfDef);
    CassandraCli.client.system_add_column_family(prefrenceCfDef);
  }
 catch (  NotFoundException e) {
    ksDef=new KsDef(""String_Node_Str"",""String_Node_Str"",cfDefs);
    ksDef.setReplication_factor(1);
    CassandraCli.client.system_add_keyspace(ksDef);
  }
catch (  InvalidRequestException e) {
    log.error(e.getMessage());
  }
catch (  TException e) {
    log.error(e.getMessage());
  }
}","@Override void createSchema() throws InvalidRequestException, SchemaDisagreementException, TException {
  KsDef ksDef=null;
  CfDef userCfDef=new CfDef();
  userCfDef.name=""String_Node_Str"";
  userCfDef.keyspace=keyspace;
  userCfDef.column_type=""String_Node_Str"";
  userCfDef.setComparator_type(""String_Node_Str"");
  userCfDef.setDefault_validation_class(""String_Node_Str"");
  CfDef prefrenceCfDef=new CfDef();
  prefrenceCfDef.name=""String_Node_Str"";
  prefrenceCfDef.keyspace=keyspace;
  prefrenceCfDef.setComparator_type(""String_Node_Str"");
  prefrenceCfDef.setDefault_validation_class(""String_Node_Str"");
  ColumnDef columnDef=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  columnDef.index_type=IndexType.KEYS;
  ColumnDef columnDef3=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  columnDef3.index_type=IndexType.KEYS;
  prefrenceCfDef.addToColumn_metadata(columnDef);
  prefrenceCfDef.addToColumn_metadata(columnDef3);
  CfDef externalLinkCfDef=new CfDef();
  externalLinkCfDef.name=""String_Node_Str"";
  externalLinkCfDef.keyspace=keyspace;
  externalLinkCfDef.setComparator_type(""String_Node_Str"");
  externalLinkCfDef.setDefault_validation_class(""String_Node_Str"");
  ColumnDef columnDef1=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  columnDef1.index_type=IndexType.KEYS;
  ColumnDef columnDef2=new ColumnDef(ByteBuffer.wrap(""String_Node_Str"".getBytes()),""String_Node_Str"");
  columnDef2.index_type=IndexType.KEYS;
  externalLinkCfDef.addToColumn_metadata(columnDef1);
  externalLinkCfDef.addToColumn_metadata(columnDef2);
  List<CfDef> cfDefs=new ArrayList<CfDef>();
  cfDefs.add(userCfDef);
  cfDefs.add(prefrenceCfDef);
  cfDefs.add(externalLinkCfDef);
  try {
    ksDef=CassandraCli.client.describe_keyspace(keyspace);
    CassandraCli.client.set_keyspace(keyspace);
    List<CfDef> cfDefn=ksDef.getCf_defs();
    for (    CfDef cfDef1 : cfDefn) {
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
      if (cfDef1.getName().equalsIgnoreCase(""String_Node_Str"")) {
        CassandraCli.client.system_drop_column_family(""String_Node_Str"");
      }
    }
    CassandraCli.client.system_add_column_family(userCfDef);
    CassandraCli.client.system_add_column_family(externalLinkCfDef);
    CassandraCli.client.system_add_column_family(prefrenceCfDef);
  }
 catch (  NotFoundException e) {
    ksDef=new KsDef(keyspace,""String_Node_Str"",cfDefs);
    ksDef.setReplication_factor(1);
    CassandraCli.client.system_add_keyspace(ksDef);
  }
catch (  InvalidRequestException e) {
    log.error(e.getMessage());
  }
catch (  TException e) {
    log.error(e.getMessage());
  }
}",0.8972625887124028
176885,"@After protected void tearDown() throws Exception {
  tearDownInternal();
}","@After public void tearDown() throws Exception {
  tearDownInternal();
}",0.9251700680272108
176886,"/** 
 * Gets the tweet by device.
 * @return the tweet by device
 */
public void getTweetsByDevice(){
  twitter.createEntityManager();
  List<Tweet> webTweets=twitter.findTweetByDevice(""String_Node_Str"");
  List<Tweet> mobileTweets=twitter.findTweetByDevice(""String_Node_Str"");
  twitter.closeEntityManager();
  assertNotNull(webTweets);
  assertNotNull(mobileTweets);
  assertEquals(1,webTweets.size());
  assertEquals(1,mobileTweets.size());
}","/** 
 * Gets the tweet by device.
 * @return the tweet by device
 */
public void getTweetsByDevice(){
  twitter.createEntityManager();
  List<Tweet> webTweets=twitter.findTweetByDevice(""String_Node_Str"");
  List<Tweet> mobileTweets=twitter.findTweetByDevice(""String_Node_Str"");
  twitter.closeEntityManager();
  Assert.assertNotNull(webTweets);
  Assert.assertNotNull(mobileTweets);
  Assert.assertEquals(1,webTweets.size());
  Assert.assertEquals(1,mobileTweets.size());
}",0.9084967320261438
176887,"/** 
 * Gets the tweets by body.
 * @return the tweets by body
 */
public void getTweetsByBody(){
  twitter.createEntityManager();
  List<Tweet> user1Tweet=twitter.findTweetByBody(""String_Node_Str"");
  List<Tweet> user2Tweet=twitter.findTweetByBody(""String_Node_Str"");
  twitter.closeEntityManager();
  assertNotNull(user1Tweet);
  assertNotNull(user2Tweet);
  assertEquals(1,user1Tweet.size());
  assertEquals(1,user2Tweet.size());
}","/** 
 * Gets the tweets by body.
 * @return the tweets by body
 */
public void getTweetsByBody(){
  twitter.createEntityManager();
  List<Tweet> user1Tweet=twitter.findTweetByBody(""String_Node_Str"");
  List<Tweet> user2Tweet=twitter.findTweetByBody(""String_Node_Str"");
  twitter.closeEntityManager();
  Assert.assertNotNull(user1Tweet);
  Assert.assertNotNull(user2Tweet);
  Assert.assertEquals(1,user1Tweet.size());
  Assert.assertEquals(1,user2Tweet.size());
}",0.96875
176888,"/** 
 * Gets the all tweets.
 * @return the all tweets
 */
protected void getAllTweets(){
  twitter.createEntityManager();
  List<Tweet> tweetsUser1=twitter.getAllTweets(userId1);
  List<Tweet> tweetsUser2=twitter.getAllTweets(userId2);
  twitter.closeEntityManager();
  assertNotNull(tweetsUser1);
  assertNotNull(tweetsUser2);
  assertFalse(tweetsUser1.isEmpty());
  assertFalse(tweetsUser2.isEmpty());
  assertEquals(3,tweetsUser1.size());
  assertEquals(2,tweetsUser2.size());
}","/** 
 * Gets the all tweets.
 * @return the all tweets
 */
protected void getAllTweets(){
  twitter.createEntityManager();
  List<Tweet> tweetsUser1=twitter.getAllTweets(userId1);
  List<Tweet> tweetsUser2=twitter.getAllTweets(userId2);
  twitter.closeEntityManager();
  Assert.assertNotNull(tweetsUser1);
  Assert.assertNotNull(tweetsUser2);
  Assert.assertFalse(tweetsUser1.isEmpty());
  Assert.assertFalse(tweetsUser2.isEmpty());
  Assert.assertEquals(3,tweetsUser1.size());
  Assert.assertEquals(2,tweetsUser2.size());
}",0.9582504970178928
176889,"/** 
 * Gets the all followers.
 * @return the all followers
 */
protected void getAllFollowers(){
  twitter.createEntityManager();
  List<UserCassandra> follower1=twitter.getFollowers(userId1);
  twitter.closeEntityManager();
  twitter.createEntityManager();
  List<UserCassandra> follower2=twitter.getFollowers(userId2);
  twitter.closeEntityManager();
  assertNull(follower1);
  assertNotNull(follower2);
}","/** 
 * Gets the all followers.
 * @return the all followers
 */
protected void getAllFollowers(){
  twitter.createEntityManager();
  List<UserCassandra> follower1=twitter.getFollowers(userId1);
  twitter.closeEntityManager();
  twitter.createEntityManager();
  List<UserCassandra> follower2=twitter.getFollowers(userId2);
  twitter.closeEntityManager();
  Assert.assertNull(follower1);
  Assert.assertNotNull(follower2);
}",0.9831730769230768
176890,"/** 
 * Create keyspace.
 * @param keyspaceName keyspace name.
 */
public static void createKeySpace(String keyspaceName){
  String nativeSql=""String_Node_Str"" + keyspaceName + ""String_Node_Str"";
  try {
    KsDef ks_Def=client.describe_keyspace(keyspaceName);
  }
 catch (  NotFoundException e) {
    List<CfDef> cfDefs=new ArrayList<CfDef>();
    KsDef ks_Def=new KsDef(keyspaceName,SimpleStrategy.class.getName(),cfDefs);
    ks_Def.setReplication_factor(1);
    try {
      client.system_add_keyspace(ks_Def);
    }
 catch (    TException e1) {
      log.error(e1.getMessage());
    }
catch (    InvalidRequestException ess) {
      log.error(ess.getMessage());
    }
catch (    SchemaDisagreementException sde) {
      log.error(sde.getMessage());
    }
  }
catch (  InvalidRequestException e) {
    log.error(e.getMessage());
  }
catch (  TException e) {
    log.error(e.getMessage());
  }
}","/** 
 * Create keyspace.
 * @param keyspaceName keyspace name.
 */
public static void createKeySpace(String keyspaceName){
  String nativeSql=""String_Node_Str"" + keyspaceName + ""String_Node_Str"";
  try {
    KsDef ks_Def=client.describe_keyspace(keyspaceName);
  }
 catch (  NotFoundException e) {
    List<CfDef> cfDefs=new ArrayList<CfDef>();
    KsDef ks_Def=new KsDef(keyspaceName,SimpleStrategy.class.getName(),cfDefs);
    if (ks_Def.strategy_options == null) {
      ks_Def.strategy_options=new LinkedHashMap<String,String>();
    }
    ks_Def.strategy_options.put(""String_Node_Str"",""String_Node_Str"");
    try {
      client.system_add_keyspace(ks_Def);
    }
 catch (    TException e1) {
      log.error(e1.getMessage());
    }
catch (    InvalidRequestException ess) {
      log.error(ess.getMessage());
    }
catch (    SchemaDisagreementException sde) {
      log.error(sde.getMessage());
    }
  }
catch (  InvalidRequestException e) {
    log.error(e.getMessage());
  }
catch (  TException e) {
    log.error(e.getMessage());
  }
}",0.8928939237899073
176891,"@Override public final Object fromBytes(Class targetClass,byte[] bytes){
  try {
    ObjectInputStream ois;
    ois=new ObjectInputStream(new ByteArrayInputStream(bytes));
    Object o=ois.readObject();
    ois.close();
    return o;
  }
 catch (  IOException e) {
    throw new PropertyAccessException(e);
  }
catch (  ClassNotFoundException e) {
    throw new PropertyAccessException(e);
  }
}","@Override public final Object fromBytes(Class targetClass,byte[] bytes){
  try {
    if (targetClass != null && targetClass.equals(byte[].class)) {
      return bytes;
    }
    ObjectInputStream ois;
    ois=new ObjectInputStream(new ByteArrayInputStream(bytes));
    Object o=ois.readObject();
    ois.close();
    return o;
  }
 catch (  IOException e) {
    throw new PropertyAccessException(e);
  }
catch (  ClassNotFoundException e) {
    throw new PropertyAccessException(e);
  }
}",0.8946772366930917
176892,"/** 
 * Create keyspace.
 * @param keyspaceName keyspace name.
 */
public static void createKeySpace(String keyspaceName){
  String nativeSql=""String_Node_Str"" + keyspaceName + ""String_Node_Str"";
  try {
    KsDef ks_Def=client.describe_keyspace(keyspaceName);
  }
 catch (  NotFoundException e) {
    List<CfDef> cfDefs=new ArrayList<CfDef>();
    KsDef ks_Def=new KsDef(keyspaceName,SimpleStrategy.class.getName(),cfDefs);
    ks_Def.setReplication_factor(1);
    try {
      client.system_add_keyspace(ks_Def);
    }
 catch (    TException e1) {
      log.error(e1.getMessage());
    }
catch (    InvalidRequestException ess) {
      log.error(ess.getMessage());
    }
catch (    SchemaDisagreementException sde) {
      log.error(sde.getMessage());
    }
  }
catch (  InvalidRequestException e) {
    log.error(e.getMessage());
  }
catch (  TException e) {
    log.error(e.getMessage());
  }
}","/** 
 * Create keyspace.
 * @param keyspaceName keyspace name.
 */
public static void createKeySpace(String keyspaceName){
  String nativeSql=""String_Node_Str"" + keyspaceName + ""String_Node_Str"";
  try {
    KsDef ks_Def=client.describe_keyspace(keyspaceName);
  }
 catch (  NotFoundException e) {
    List<CfDef> cfDefs=new ArrayList<CfDef>();
    KsDef ks_Def=new KsDef(keyspaceName,SimpleStrategy.class.getName(),cfDefs);
    if (ks_Def.strategy_options == null) {
      ks_Def.strategy_options=new LinkedHashMap<String,String>();
    }
    ks_Def.strategy_options.put(""String_Node_Str"",""String_Node_Str"");
    try {
      client.system_add_keyspace(ks_Def);
    }
 catch (    TException e1) {
      log.error(e1.getMessage());
    }
catch (    InvalidRequestException ess) {
      log.error(ess.getMessage());
    }
catch (    SchemaDisagreementException sde) {
      log.error(sde.getMessage());
    }
  }
catch (  InvalidRequestException e) {
    log.error(e.getMessage());
  }
catch (  TException e) {
    log.error(e.getMessage());
  }
}",0.8928939237899073
176893,"@Test public void testValid() throws NotFoundException, InvalidRequestException, TException, IOException {
  getEntityManagerFactory(""String_Node_Str"");
  Properties properties=new Properties();
  InputStream inStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  try {
    properties.load(inStream);
    String expected_replication=properties.getProperty(""String_Node_Str"");
    String expected_strategyClass=properties.getProperty(""String_Node_Str"");
    KsDef ksDef=client.describe_keyspace(keyspace);
    Assert.assertEquals(Integer.parseInt(expected_replication),ksDef.getReplication_factor());
    Assert.assertEquals(expected_strategyClass,ksDef.getStrategy_class());
  }
 catch (  NullPointerException e) {
    log.warn(""String_Node_Str"");
  }
}","@Test public void testValid() throws NotFoundException, InvalidRequestException, TException, IOException {
  getEntityManagerFactory(""String_Node_Str"");
  Properties properties=new Properties();
  InputStream inStream=ClassLoader.getSystemResourceAsStream(KUNDERA_CASSANDRA_PROPERTIES);
  try {
    properties.load(inStream);
    String expected_replication=properties.getProperty(""String_Node_Str"");
    String expected_strategyClass=properties.getProperty(""String_Node_Str"");
    KsDef ksDef=client.describe_keyspace(keyspace);
    Assert.assertEquals(expected_replication,ksDef.strategy_options.get(""String_Node_Str""));
    Assert.assertEquals(expected_strategyClass,ksDef.getStrategy_class());
  }
 catch (  NullPointerException e) {
    log.warn(""String_Node_Str"");
  }
}",0.8943616331821128
176894,"/** 
 * Gets the entity manager factory.
 * @param useLucene
 * @param property
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(String property){
  ClientMetadata clientMetadata=new ClientMetadata();
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(Constants.PERSISTENCE_UNIT_NAME,pu);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,PelopsClientFactory.class.getName());
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,keyspace);
  props.put(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE,property);
  if (useLucene) {
    props.put(PersistenceProperties.KUNDERA_INDEX_HOME_DIR,""String_Node_Str"");
    clientMetadata.setLuceneIndexDir(""String_Node_Str"");
  }
 else {
    clientMetadata.setLuceneIndexDir(null);
  }
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(pu);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(pu,puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(pu);
  clazzToPu.put(Doctor.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(Doctor.class);
  TableProcessor processor=new TableProcessor();
  processor.process(Doctor.class,m);
  m.setPersistenceUnit(pu);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(Doctor.class,m);
  appMetadata.getMetamodelMap().put(pu,metaModel);
  KunderaMetadata.INSTANCE.addClientMetadata(pu,clientMetadata);
  CassandraPropertyReader reader=new CassandraPropertyReader();
  reader.read(pu);
  configuration.configure();
  return null;
}","/** 
 * Gets the entity manager factory.
 * @param useLucene
 * @param property
 * @return the entity manager factory
 */
private EntityManagerFactoryImpl getEntityManagerFactory(String property){
  ClientMetadata clientMetadata=new ClientMetadata();
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(Constants.PERSISTENCE_UNIT_NAME,pu);
  props.put(PersistenceProperties.KUNDERA_CLIENT_FACTORY,PelopsClientFactory.class.getName());
  props.put(PersistenceProperties.KUNDERA_NODES,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_PORT,""String_Node_Str"");
  props.put(PersistenceProperties.KUNDERA_KEYSPACE,keyspace);
  props.put(PersistenceProperties.KUNDERA_DDL_AUTO_PREPARE,property);
  props.put(PersistenceProperties.KUNDERA_CLIENT_PROPERTY,KUNDERA_CASSANDRA_PROPERTIES);
  if (useLucene) {
    props.put(PersistenceProperties.KUNDERA_INDEX_HOME_DIR,HOME_IMPADMIN_LUCENE);
    clientMetadata.setLuceneIndexDir(HOME_IMPADMIN_LUCENE);
  }
 else {
    clientMetadata.setLuceneIndexDir(null);
  }
  KunderaMetadata.INSTANCE.setApplicationMetadata(null);
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  PersistenceUnitMetadata puMetadata=new PersistenceUnitMetadata();
  puMetadata.setPersistenceUnitName(pu);
  Properties p=new Properties();
  p.putAll(props);
  puMetadata.setProperties(p);
  Map<String,PersistenceUnitMetadata> metadata=new HashMap<String,PersistenceUnitMetadata>();
  metadata.put(pu,puMetadata);
  appMetadata.addPersistenceUnitMetadata(metadata);
  Map<String,List<String>> clazzToPu=new HashMap<String,List<String>>();
  List<String> pus=new ArrayList<String>();
  pus.add(pu);
  clazzToPu.put(Doctor.class.getName(),pus);
  appMetadata.setClazzToPuMap(clazzToPu);
  EntityMetadata m=new EntityMetadata(Doctor.class);
  TableProcessor processor=new TableProcessor();
  processor.process(Doctor.class,m);
  m.setPersistenceUnit(pu);
  MetamodelImpl metaModel=new MetamodelImpl();
  metaModel.addEntityMetadata(Doctor.class,m);
  appMetadata.getMetamodelMap().put(pu,metaModel);
  KunderaMetadata.INSTANCE.addClientMetadata(pu,clientMetadata);
  CassandraPropertyReader reader=new CassandraPropertyReader();
  reader.read(pu);
  configuration.configure();
  return null;
}",0.9632303180690276
176895,"/** 
 * Execute suite.
 */
protected void executeTestSuite(){
  addAllUserInfo();
  updateUser();
  getPersonalDetailByName();
  getAllUsers();
  getTweetsByBody();
  getTweetsByDevice();
  removeUser();
}","/** 
 * Execute suite.
 */
protected void executeTestSuite(){
  addAllUserInfo();
  updateUser();
  getPersonalDetailByName();
  getTweetsByBody();
  getTweetsByDevice();
  removeUser();
}",0.9567430025445292
176896,"@After public void tearDown(){
}","@After public void tearDown() throws Exception {
  super.tearDown();
  CassandraCli.dropKeySpace(""String_Node_Str"");
}",0.4266666666666667
176897,"@Test public void testCRUD(){
  WebResource webResource=resource();
  if (MediaType.APPLICATION_XML.equals(mediaType)) {
    bookStr1=""String_Node_Str"";
    bookStr2=""String_Node_Str"";
    pk1=""String_Node_Str"";
    pk2=""String_Node_Str"";
  }
 else   if (MediaType.APPLICATION_JSON.equals(mediaType)) {
    bookStr1=""String_Node_Str"";
    bookStr2=""String_Node_Str"";
    pk1=""String_Node_Str"";
    pk2=""String_Node_Str"";
  }
 else {
    Assert.fail(""String_Node_Str"" + mediaType);
    return;
  }
  RESTClient restClient=new RESTClientImpl();
  restClient.initialize(webResource,mediaType);
  applicationToken=restClient.getApplicationToken();
  Assert.assertNotNull(applicationToken);
  Assert.assertTrue(applicationToken.startsWith(""String_Node_Str""));
  sessionToken=restClient.getSessionToken(applicationToken);
  Assert.assertNotNull(sessionToken);
  Assert.assertTrue(applicationToken.startsWith(""String_Node_Str""));
  restClient.insertBook(sessionToken,bookStr1);
  restClient.insertBook(sessionToken,bookStr2);
  String foundBook=restClient.findBook(sessionToken,pk1);
  Assert.assertNotNull(foundBook);
  if (MediaType.APPLICATION_JSON.equals(mediaType)) {
    foundBook=""String_Node_Str"" + foundBook + ""String_Node_Str"";
  }
  String updatedBook=restClient.updateBook(sessionToken,foundBook);
  Assert.assertNotNull(updatedBook);
  restClient.deleteBook(sessionToken,updatedBook,pk1);
  restClient.deleteBook(sessionToken,updatedBook,pk2);
  restClient.closeSession(sessionToken);
  restClient.closeApplication(applicationToken);
}","@Test public void testCRUD(){
  WebResource webResource=resource();
  if (MediaType.APPLICATION_XML.equals(mediaType)) {
    bookStr1=""String_Node_Str"";
    bookStr2=""String_Node_Str"";
    pk1=""String_Node_Str"";
    pk2=""String_Node_Str"";
  }
 else   if (MediaType.APPLICATION_JSON.equals(mediaType)) {
    bookStr1=""String_Node_Str"";
    bookStr2=""String_Node_Str"";
    pk1=""String_Node_Str"";
    pk2=""String_Node_Str"";
  }
 else {
    Assert.fail(""String_Node_Str"" + mediaType);
    return;
  }
  RESTClient restClient=new RESTClientImpl();
  restClient.initialize(webResource,mediaType);
  applicationToken=restClient.getApplicationToken();
  Assert.assertNotNull(applicationToken);
  Assert.assertTrue(applicationToken.startsWith(""String_Node_Str""));
  sessionToken=restClient.getSessionToken(applicationToken);
  Assert.assertNotNull(sessionToken);
  Assert.assertTrue(sessionToken.startsWith(""String_Node_Str""));
  restClient.insertBook(sessionToken,bookStr1);
  restClient.insertBook(sessionToken,bookStr2);
  String foundBook=restClient.findBook(sessionToken,pk1);
  Assert.assertNotNull(foundBook);
  if (MediaType.APPLICATION_JSON.equals(mediaType)) {
    foundBook=""String_Node_Str"" + foundBook + ""String_Node_Str"";
  }
  String updatedBook=restClient.updateBook(sessionToken,foundBook);
  Assert.assertNotNull(updatedBook);
  restClient.deleteBook(sessionToken,updatedBook,pk1);
  restClient.deleteBook(sessionToken,updatedBook,pk2);
  restClient.closeSession(sessionToken);
  restClient.closeApplication(applicationToken);
}",0.9961013645224172
176898,"/** 
 * Fetches data held in Thrift row super columns and populates to Entity objects.
 * @param clazz the clazz
 * @param m the m
 * @param tr the tr
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 * @throws Exception the exception
 */
Object fromSuperColumnThriftRow(Class clazz,EntityMetadata m,ThriftRow tr,List<String> relationNames,boolean isWrapReq) throws Exception {
  Object entity=null;
  Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
  MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
  Collection embeddedCollection=null;
  Field embeddedCollectionField=null;
  Map<String,Object> relations=new HashMap<String,Object>();
  for (  SuperColumn sc : tr.getSuperColumns()) {
    if (entity == null) {
      entity=clazz.newInstance();
      PropertyAccessorHelper.setId(entity,m,tr.getId());
    }
    String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,sc.getName());
    String scNamePrefix=null;
    if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
      scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
      embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
      if (embeddedCollection == null) {
        embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
      }
      Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        Field columnField=columnNameToFieldMap.get(name);
        if (columnField != null) {
          PropertyAccessorHelper.set(embeddedObject,columnField,value);
        }
 else         if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(name)) {
          String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(String.class,value);
          relations.put(name,valueAsStr);
        }
      }
      embeddedCollection.add(embeddedObject);
      ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
    }
 else {
      Field superColumnField=superColumnNameToFieldMap.get(scName);
      Object superColumnObj=null;
      if (superColumnField != null || (relationNames != null && !relationNames.isEmpty() && relationNames.contains(scName))) {
        Class superColumnClass=superColumnField != null ? superColumnField.getType() : null;
        superColumnObj=superColumnClass != null ? superColumnClass.newInstance() : null;
        for (        Column column : sc.getColumns()) {
          String name=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
          byte[] value=column.getValue();
          Field columnField=columnNameToFieldMap.get(name);
          if (columnField != null) {
            try {
              PropertyAccessorHelper.set(superColumnObj,columnField,value);
            }
 catch (            PropertyAccessException e) {
              log.debug(e.getMessage() + ""String_Node_Str"");
              superColumnObj=Bytes.toUTF8(value);
            }
          }
 else {
            String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(String.class,value);
            relations.put(name,valueAsStr);
          }
        }
      }
      if (superColumnField != null) {
        PropertyAccessorHelper.set(entity,superColumnField,superColumnObj);
      }
    }
  }
  if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
    PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}","/** 
 * Fetches data held in Thrift row super columns and populates to Entity objects.
 * @param clazz the clazz
 * @param m the m
 * @param tr the tr
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 * @throws Exception the exception
 */
Object fromSuperColumnThriftRow(Class clazz,EntityMetadata m,ThriftRow tr,List<String> relationNames,boolean isWrapReq) throws Exception {
  Object entity=null;
  Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
  MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
  Collection embeddedCollection=null;
  Field embeddedCollectionField=null;
  Map<String,Object> relations=new HashMap<String,Object>();
  for (  SuperColumn sc : tr.getSuperColumns()) {
    if (entity == null) {
      entity=clazz.newInstance();
      PropertyAccessorHelper.setId(entity,m,tr.getId());
    }
    String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,sc.getName());
    String scNamePrefix=null;
    if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
      scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
      embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
      if (embeddedCollection == null) {
        embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
      }
      Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        Field columnField=columnNameToFieldMap.get(name);
        if (columnField != null) {
          PropertyAccessorHelper.set(embeddedObject,columnField,value);
        }
 else         if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(name)) {
          String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(String.class,value);
          relations.put(name,valueAsStr);
        }
      }
      embeddedCollection.add(embeddedObject);
      ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
    }
 else {
      Field superColumnField=superColumnNameToFieldMap.get(scName);
      Object superColumnObj=null;
      if (superColumnField != null || (relationNames != null && !relationNames.isEmpty() && relationNames.contains(scName))) {
        Class superColumnClass=superColumnField != null ? superColumnField.getType() : null;
        superColumnObj=superColumnClass != null ? superColumnClass.newInstance() : null;
        for (        Column column : sc.getColumns()) {
          String name=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
          byte[] value=column.getValue();
          Field columnField=columnNameToFieldMap.get(name);
          if (columnField != null) {
            try {
              PropertyAccessorHelper.set(superColumnObj,columnField,value);
            }
 catch (            PropertyAccessException e) {
              log.debug(e.getMessage() + ""String_Node_Str"");
              com.impetus.kundera.metadata.model.Column col=m.getColumn(name);
              if (col != null) {
                superColumnObj=Bytes.toUTF8(value);
              }
            }
          }
 else {
            String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(String.class,value);
            relations.put(name,valueAsStr);
          }
        }
      }
      if (superColumnField != null) {
        PropertyAccessorHelper.set(entity,superColumnField,superColumnObj);
      }
    }
  }
  if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
    PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}",0.9843787551069454
176899,"/** 
 * Instantiates a new lucene indexer.
 * @param analyzer the analyzer
 * @param lucDirPath the luc dir path
 */
private LuceneIndexer(Analyzer analyzer,String lucDirPath){
  super(analyzer);
  try {
    luceneDirPath=lucDirPath;
    index=new RAMDirectory();
    w=new IndexWriter(index,new IndexWriterConfig(Version.LUCENE_34,analyzer));
    w.setMergePolicy(new LogDocMergePolicy());
    w.setMergeFactor(1000);
    w.getConfig().setRAMBufferSizeMB(32);
  }
 catch (  CorruptIndexException e) {
    throw new LuceneIndexingException(e);
  }
catch (  LockObtainFailedException e) {
    throw new LuceneIndexingException(e);
  }
catch (  IOException e) {
    throw new LuceneIndexingException(e);
  }
}","/** 
 * Instantiates a new lucene indexer.
 * @param analyzer the analyzer
 * @param lucDirPath the luc dir path
 */
private LuceneIndexer(Analyzer analyzer,String lucDirPath){
  super(analyzer);
  try {
    luceneDirPath=lucDirPath;
    File file=new File(luceneDirPath);
    if (file.exists()) {
      Directory sourceDir=FSDirectory.open(getIndexDirectory());
      index=new RAMDirectory(sourceDir);
    }
 else {
      index=new RAMDirectory();
    }
    w=new IndexWriter(index,new IndexWriterConfig(Version.LUCENE_34,analyzer));
    w.setMergePolicy(new LogDocMergePolicy());
    w.setMergeFactor(1000);
    w.getConfig().setRAMBufferSizeMB(32);
  }
 catch (  CorruptIndexException e) {
    throw new LuceneIndexingException(e);
  }
catch (  LockObtainFailedException e) {
    throw new LuceneIndexingException(e);
  }
catch (  IOException e) {
    throw new LuceneIndexingException(e);
  }
}",0.8779576587795765
176900,"@Override public final void persist(Object e){
  checkClosed();
  checkTransactionNeeded();
  if (e == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    getPersistenceDelegator().persist(e);
  }
 catch (  Exception ex) {
    getPersistenceDelegator().rollback();
    throw new KunderaException(ex);
  }
}","@Override public final void persist(Object e){
  checkClosed();
  checkTransactionNeeded();
  if (e == null) {
    getPersistenceDelegator().rollback();
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    getPersistenceDelegator().persist(e);
  }
 catch (  Exception ex) {
    getPersistenceDelegator().rollback();
    throw new KunderaException(ex);
  }
}",0.9413407821229052
176901,"@Override public void handleFind(NodeStateContext nodeStateContext){
  Client client=nodeStateContext.getClient();
  Class<?> nodeDataClass=nodeStateContext.getDataClass();
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(nodeDataClass);
  String entityId=ObjectGraphUtils.getEntityId(nodeStateContext.getNodeId());
  Object nodeData=null;
  EntityReader reader=client.getReader();
  EnhanceEntity ee=reader.findById(entityId,entityMetadata,client);
  if (ee != null && ee.getEntity() != null) {
    Object entity=ee.getEntity();
    if ((entityMetadata.getRelationNames() == null || entityMetadata.getRelationNames().isEmpty()) && !entityMetadata.isRelationViaJoinTable()) {
      nodeData=entity;
      nodeStateContext.setData(nodeData);
      nodeStateContext.getPersistenceCache().getMainCache().addNodeToCache((Node)nodeStateContext);
      nodeStateContext.setDirty(false);
      Object original=((Node)nodeStateContext).clone();
      ((Node)nodeStateContext).setOriginalNode((Node)original);
      return;
    }
 else {
      nodeData=reader.recursivelyFindEntities(ee.getEntity(),ee.getRelations(),entityMetadata,nodeStateContext.getPersistenceDelegator());
    }
  }
  if (nodeData != null) {
    nodeStateContext.setData(nodeData);
    nodeStateContext.getPersistenceCache().getMainCache().addNodeToCache((Node)nodeStateContext);
    nodeStateContext.setDirty(false);
    Object original=ObjectUtils.deepCopy((Node)nodeStateContext);
    ((Node)nodeStateContext).setOriginalNode((Node)original);
  }
}","@Override public void handleFind(NodeStateContext nodeStateContext){
  Client client=nodeStateContext.getClient();
  Class<?> nodeDataClass=nodeStateContext.getDataClass();
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(nodeDataClass);
  String entityId=ObjectGraphUtils.getEntityId(nodeStateContext.getNodeId());
  Object nodeData=null;
  EntityReader reader=client.getReader();
  EnhanceEntity ee=reader.findById(entityId,entityMetadata,client);
  if (ee != null && ee.getEntity() != null) {
    Object entity=ee.getEntity();
    if ((entityMetadata.getRelationNames() == null || entityMetadata.getRelationNames().isEmpty()) && !entityMetadata.isRelationViaJoinTable()) {
      nodeData=entity;
      nodeStateContext.setData(nodeData);
      nodeStateContext.getPersistenceCache().getMainCache().addNodeToCache((Node)nodeStateContext);
      nodeStateContext.setDirty(false);
      Object original=((Node)nodeStateContext).clone();
      ((Node)nodeStateContext).setOriginalNode((Node)original);
      return;
    }
 else {
      nodeData=reader.recursivelyFindEntities(ee.getEntity(),ee.getRelations(),entityMetadata,nodeStateContext.getPersistenceDelegator());
    }
  }
  if (nodeData != null) {
    nodeStateContext.setData(nodeData);
    nodeStateContext.getPersistenceCache().getMainCache().addNodeToCache((Node)nodeStateContext);
    nodeStateContext.setDirty(false);
    Object original=((Node)nodeStateContext).clone();
    ((Node)nodeStateContext).setOriginalNode((Node)original);
  }
}",0.9483997387328544
176902,"/** 
 * @param entity
 * @param pd
 * @param entityId
 * @param relation
 * @param relationName
 */
void populateRelationViaQuery(Object entity,PersistenceDelegator pd,String entityId,Relation relation,String relationName,EntityMetadata childMetadata){
  Class<?> childClass=relation.getTargetEntity();
  Client childClient=pd.getClient(childMetadata);
  List children=null;
  if (MetadataUtils.useSecondryIndex(childClient.getPersistenceUnit())) {
    children=pd.find(childClass,entityId,relationName);
  }
 else {
    String query=LuceneQueryUtils.getQuery(DocumentIndexer.PARENT_ID_CLASS,entity.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,entityId,childClass.getCanonicalName().toLowerCase());
    Map<String,String> results=childClient.getIndexManager().search(query);
    Set<String> rsSet=new HashSet<String>(results.values());
    if (childClass.equals(entity.getClass())) {
      children=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
    }
 else {
      children=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
    }
  }
  onReflect(entity,relation.getProperty(),children);
  Field biDirectionalField=getBiDirectionalField(entity.getClass(),relation.getTargetEntity());
  boolean isBidirectionalRelation=(biDirectionalField != null);
  if (isBidirectionalRelation && children != null) {
    Relation reverseRelation=childMetadata.getRelation(biDirectionalField.getName());
    for (    Object child : children) {
      PropertyAccessorHelper.set(child,reverseRelation.getProperty(),entity);
    }
  }
}","/** 
 * @param entity
 * @param pd
 * @param entityId
 * @param relation
 * @param relationName
 */
void populateRelationViaQuery(Object entity,PersistenceDelegator pd,String entityId,Relation relation,String relationName,EntityMetadata childMetadata){
  Class<?> childClass=relation.getTargetEntity();
  Client childClient=pd.getClient(childMetadata);
  List children=null;
  if (MetadataUtils.useSecondryIndex(childClient.getPersistenceUnit())) {
    children=pd.find(childClass,entityId,relationName);
  }
 else {
    String query=LuceneQueryUtils.getQuery(DocumentIndexer.PARENT_ID_CLASS,entity.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,entityId,childClass.getCanonicalName().toLowerCase());
    Map<String,String> results=childClient.getIndexManager().search(query);
    Set<String> rsSet=new HashSet<String>(results.values());
    if (childClass.equals(entity.getClass())) {
      children=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
    }
 else {
      children=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
    }
  }
  onReflect(entity,relation.getProperty(),children);
  Field biDirectionalField=getBiDirectionalField(entity.getClass(),relation.getTargetEntity());
  boolean isBidirectionalRelation=(biDirectionalField != null);
  if (isBidirectionalRelation && children != null) {
    Relation reverseRelation=childMetadata.getRelation(biDirectionalField.getName());
    for (    Object child : children) {
      PropertyAccessorHelper.set(child,reverseRelation.getProperty(),entity);
    }
  }
  if (children != null) {
    MainCache mainCache=(MainCache)pd.getPersistenceCache().getMainCache();
    for (    Object child : children) {
      Object childId=PropertyAccessorHelper.getId(child,childMetadata);
      String nodeId=ObjectGraphUtils.getNodeId(childId,childMetadata.getEntityClazz());
      Node node=new Node(nodeId,childMetadata.getEntityClazz(),new ManagedState(),pd.getPersistenceCache());
      node.setData(child);
      node.setPersistenceDelegator(pd);
      mainCache.addNodeToCache(node);
    }
  }
}",0.8591322978039636
176903,"@Override protected void onPersist(EntityMetadata metadata,Object entity,Object id,List<RelationHolder> rlHolders){
  PelopsDataHandler.ThriftRow tf=null;
  try {
    tf=populateTfRow(entity,id.toString(),metadata);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
  addRelationsToThriftRow(metadata,tf,rlHolders);
  Mutator mutator=Pelops.createMutator(PelopsUtils.generatePoolName(getPersistenceUnit()));
  List<Column> thriftColumns=tf.getColumns();
  List<SuperColumn> thriftSuperColumns=tf.getSuperColumns();
  if (thriftColumns != null && !thriftColumns.isEmpty()) {
    mutator.writeColumns(metadata.getTableName(),new Bytes(tf.getId().getBytes()),Arrays.asList(tf.getColumns().toArray(new Column[0])));
  }
  if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
    for (    SuperColumn sc : thriftSuperColumns) {
      mutator.writeSubColumns(metadata.getTableName(),tf.getId(),Bytes.toUTF8(sc.getName()),sc.getColumns());
    }
  }
  mutator.execute(ConsistencyLevel.ONE);
  tf=null;
}","@Override protected void onPersist(EntityMetadata metadata,Object entity,Object id,List<RelationHolder> rlHolders){
  PelopsDataHandler.ThriftRow tf=null;
  try {
    tf=populateTfRow(entity,id.toString(),metadata);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new KunderaException(e);
  }
  addRelationsToThriftRow(metadata,tf,rlHolders);
  Mutator mutator=Pelops.createMutator(PelopsUtils.generatePoolName(getPersistenceUnit()));
  List<Column> thriftColumns=tf.getColumns();
  List<SuperColumn> thriftSuperColumns=tf.getSuperColumns();
  if (thriftColumns != null && !thriftColumns.isEmpty()) {
    mutator.writeColumns(metadata.getTableName(),Bytes.fromUTF8(tf.getId()),Arrays.asList(tf.getColumns().toArray(new Column[0])));
  }
  if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty()) {
    for (    SuperColumn sc : thriftSuperColumns) {
      mutator.writeSubColumns(metadata.getTableName(),tf.getId(),Bytes.toUTF8(sc.getName()),sc.getColumns());
    }
  }
  mutator.execute(ConsistencyLevel.ONE);
  tf=null;
}",0.7407063197026023
176904,"@Override public <E>List<E> getColumnsById(String joinTableName,String joinColumnName,String inverseJoinColumnName,String parentId){
  Selector selector=Pelops.createSelector(PelopsUtils.generatePoolName(getPersistenceUnit()));
  List<Column> columns=selector.getColumnsFromRow(joinTableName,new Bytes(parentId.getBytes()),Selector.newColumnsPredicateAll(true,10),ConsistencyLevel.ONE);
  List<E> foreignKeys=handler.getForeignKeysFromJoinTable(inverseJoinColumnName,columns);
  return foreignKeys;
}","@Override public <E>List<E> getColumnsById(String joinTableName,String joinColumnName,String inverseJoinColumnName,String parentId){
  Selector selector=Pelops.createSelector(PelopsUtils.generatePoolName(getPersistenceUnit()));
  List<Column> columns=selector.getColumnsFromRow(joinTableName,Bytes.fromUTF8(parentId),Selector.newColumnsPredicateAll(true,10),ConsistencyLevel.ONE);
  List<E> foreignKeys=handler.getForeignKeysFromJoinTable(inverseJoinColumnName,columns);
  return foreignKeys;
}",0.9758551307847082
176905,"/** 
 * Persists records into Join Table
 */
public void persistJoinTable(JoinTableData joinTableData){
  String poolName=PelopsUtils.generatePoolName(getPersistenceUnit());
  Mutator mutator=Pelops.createMutator(poolName);
  String joinTableName=joinTableData.getJoinTableName();
  String invJoinColumnName=joinTableData.getInverseJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  for (  Object key : joinTableRecords.keySet()) {
    Set<Object> values=joinTableRecords.get(key);
    List<Column> columns=new ArrayList<Column>();
    for (    Object value : values) {
      Column column=new Column();
      column.setName(PropertyAccessorFactory.STRING.toBytes(invJoinColumnName + ""String_Node_Str"" + (String)value));
      column.setValue(PropertyAccessorFactory.STRING.toBytes((String)value));
      column.setTimestamp(System.currentTimeMillis());
      columns.add(column);
    }
    createIndexesOnColumns(joinTableName,poolName,columns);
    String pk=(String)key;
    mutator.writeColumns(joinTableName,new Bytes(pk.getBytes()),Arrays.asList(columns.toArray(new Column[0])));
    mutator.execute(ConsistencyLevel.ONE);
  }
}","/** 
 * Persists records into Join Table
 */
public void persistJoinTable(JoinTableData joinTableData){
  String poolName=PelopsUtils.generatePoolName(getPersistenceUnit());
  Mutator mutator=Pelops.createMutator(poolName);
  String joinTableName=joinTableData.getJoinTableName();
  String invJoinColumnName=joinTableData.getInverseJoinColumnName();
  Map<Object,Set<Object>> joinTableRecords=joinTableData.getJoinTableRecords();
  for (  Object key : joinTableRecords.keySet()) {
    Set<Object> values=joinTableRecords.get(key);
    List<Column> columns=new ArrayList<Column>();
    for (    Object value : values) {
      Column column=new Column();
      column.setName(PropertyAccessorFactory.STRING.toBytes(invJoinColumnName + ""String_Node_Str"" + (String)value));
      column.setValue(PropertyAccessorFactory.STRING.toBytes((String)value));
      column.setTimestamp(System.currentTimeMillis());
      columns.add(column);
    }
    createIndexesOnColumns(joinTableName,poolName,columns);
    String pk=(String)key;
    mutator.writeColumns(joinTableName,Bytes.fromUTF8(pk),Arrays.asList(columns.toArray(new Column[0])));
    mutator.execute(ConsistencyLevel.ONE);
  }
}",0.9898305084745764
176906,"/** 
 * Test create insert column family query.
 */
@Test public void testCreateInsertColumnFamilyQuery(){
  EntityManagerFactoryImpl emf=getEntityManagerFactory();
  EntityManager em=new EntityManagerImpl(emf,PersistenceUnitTransactionType.RESOURCE_LOCAL,PersistenceContextType.EXTENDED);
  String colFamilySql=""String_Node_Str"";
  Query q=em.createNativeQuery(colFamilySql,CassandraEntitySample.class);
  q.executeUpdate();
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",""String_Node_Str""));
  String idxSql=""String_Node_Str"";
  q=em.createNativeQuery(idxSql,CassandraEntitySample.class);
  q.executeUpdate();
  idxSql=""String_Node_Str"";
  q=em.createNativeQuery(idxSql,CassandraEntitySample.class);
  q.executeUpdate();
  String insertSql=""String_Node_Str"";
  q=em.createNativeQuery(insertSql,CassandraEntitySample.class);
  q.executeUpdate();
  String selectSql=""String_Node_Str"";
  q=em.createNativeQuery(selectSql,CassandraEntitySample.class);
  List<CassandraEntitySample> results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getKey());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getState());
  Assert.assertNull(results.get(0).getFull_name());
  insertSql=""String_Node_Str"";
  q=em.createNativeQuery(insertSql,CassandraEntitySample.class);
  q.getResultList();
  insertSql=""String_Node_Str"";
  q=em.createNativeQuery(insertSql,CassandraEntitySample.class);
  q.getResultList();
  String selectAll=""String_Node_Str"";
  q=em.createNativeQuery(selectAll,CassandraEntitySample.class);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getKey());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getState());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getFull_name());
  Assert.assertEquals(new Integer(1975),results.get(0).getBirth_date());
}","/** 
 * Test create insert column family query.
 */
@Test public void testCreateInsertColumnFamilyQuery(){
  String nativeSql=""String_Node_Str"" + schema + ""String_Node_Str"";
  String useNativeSql=""String_Node_Str"";
  EntityManagerFactoryImpl emf=getEntityManagerFactory();
  EntityManager em=new EntityManagerImpl(emf,PersistenceUnitTransactionType.RESOURCE_LOCAL,PersistenceContextType.EXTENDED);
  Query q=em.createNativeQuery(nativeSql,CassandraEntitySample.class);
  q.executeUpdate();
  q=em.createNativeQuery(useNativeSql,CassandraEntitySample.class);
  q.executeUpdate();
  String colFamilySql=""String_Node_Str"";
  q=em.createNativeQuery(colFamilySql,CassandraEntitySample.class);
  q.executeUpdate();
  Assert.assertTrue(CassandraCli.columnFamilyExist(""String_Node_Str"",""String_Node_Str""));
  String idxSql=""String_Node_Str"";
  q=em.createNativeQuery(idxSql,CassandraEntitySample.class);
  q.executeUpdate();
  idxSql=""String_Node_Str"";
  q=em.createNativeQuery(idxSql,CassandraEntitySample.class);
  q.executeUpdate();
  String insertSql=""String_Node_Str"";
  q=em.createNativeQuery(insertSql,CassandraEntitySample.class);
  q.executeUpdate();
  String selectSql=""String_Node_Str"";
  q=em.createNativeQuery(selectSql,CassandraEntitySample.class);
  List<CassandraEntitySample> results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getKey());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getState());
  Assert.assertNull(results.get(0).getFull_name());
  insertSql=""String_Node_Str"";
  q=em.createNativeQuery(insertSql,CassandraEntitySample.class);
  q.getResultList();
  insertSql=""String_Node_Str"";
  q=em.createNativeQuery(insertSql,CassandraEntitySample.class);
  q.getResultList();
  String selectAll=""String_Node_Str"";
  q=em.createNativeQuery(selectAll,CassandraEntitySample.class);
  results=q.getResultList();
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getKey());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getState());
  Assert.assertEquals(""String_Node_Str"",results.get(0).getFull_name());
  Assert.assertEquals(new Integer(1975),results.get(0).getBirth_date());
}",0.9314112996977448
176907,"/** 
 * Retrieves an entity from ID
 * @param primaryKey
 * @param m
 * @param client
 * @return
 */
protected EnhanceEntity findById(Object primaryKey,EntityMetadata m,Client client){
  try {
    Object o=client.find(m.getEntityClazz(),primaryKey);
    if (o == null) {
      return null;
    }
 else {
      return o instanceof EnhanceEntity ? (EnhanceEntity)o : new EnhanceEntity(o,getId(o,m),null);
    }
  }
 catch (  Exception e) {
    throw new PersistenceException(e);
  }
}","/** 
 * Retrieves an entity from ID
 * @param primaryKey
 * @param m
 * @param client
 * @return
 */
protected EnhanceEntity findById(Object primaryKey,EntityMetadata m,Client client){
  try {
    Object o=client.find(m.getEntityClazz(),primaryKey);
    if (o == null) {
      return null;
    }
 else {
      return o instanceof EnhanceEntity ? (EnhanceEntity)o : new EnhanceEntity(o,getId(o,m),null);
    }
  }
 catch (  Exception e) {
    throw new EntityReaderException(e);
  }
}",0.9761658031088084
176908,"/** 
 * Recursively fetches child entities for a given <code>entity</code>
 * @param entity
 * @param relationsMap
 * @param client
 * @param m
 * @param pd
 * @return
 */
public Object recursivelyFindEntities(Object entity,Map<String,Object> relationsMap,EntityMetadata m,PersistenceDelegator pd){
  String entityId=PropertyAccessorHelper.getId(entity,m);
  associationBuilder=new AssociationBuilder();
  for (  Relation relation : m.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      PersistenceCacheManager.addEntityToPersistenceCache(entity,pd,entityId);
      associationBuilder.populateRelationFromJoinTable(entity,m,pd,relation);
    }
 else {
      String relationName=MetadataUtils.getMappedName(m,relation);
      Object relationValue=relationsMap != null ? relationsMap.get(relationName) : null;
      Class<?> childClass=relation.getTargetEntity();
      EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(childClass);
      if (relationValue != null) {
        associationBuilder.populateRelationFromValue(entity,pd,relation,relationValue,childMetadata);
      }
 else {
        associationBuilder.populateRelationViaQuery(entity,pd,entityId,relation,relationName,childMetadata);
      }
    }
  }
  return entity;
}","/** 
 * Recursively fetches associated entities for a given <code>entity</code>
 * @param entity
 * @param relationsMap
 * @param client
 * @param m
 * @param pd
 * @return
 */
public Object recursivelyFindEntities(Object entity,Map<String,Object> relationsMap,EntityMetadata m,PersistenceDelegator pd){
  String entityId=PropertyAccessorHelper.getId(entity,m);
  associationBuilder=new AssociationBuilder();
  for (  Relation relation : m.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      PersistenceCacheManager.addEntityToPersistenceCache(entity,pd,entityId);
      associationBuilder.populateRelationFromJoinTable(entity,m,pd,relation);
    }
 else {
      String relationName=MetadataUtils.getMappedName(m,relation);
      Object relationValue=relationsMap != null ? relationsMap.get(relationName) : null;
      Class<?> childClass=relation.getTargetEntity();
      EntityMetadata childMetadata=KunderaMetadataManager.getEntityMetadata(childClass);
      if (relationValue != null) {
        associationBuilder.populateRelationFromValue(entity,pd,relation,relationValue,childMetadata);
      }
 else {
        associationBuilder.populateRelationViaQuery(entity,pd,entityId,relation,relationName,childMetadata);
      }
    }
  }
  return entity;
}",0.9948717948717948
176909,"/** 
 * @param entity
 * @param pd
 * @param entityId
 * @param relation
 * @param relationName
 */
void populateRelationViaQuery(Object entity,PersistenceDelegator pd,String entityId,Relation relation,String relationName,EntityMetadata childMetadata){
  Class<?> childClass=relation.getTargetEntity();
  Client childClient=pd.getClient(childMetadata);
  List children=null;
  if (MetadataUtils.useSecondryIndex(childClient.getPersistenceUnit())) {
    children=pd.find(childClass,entityId,relationName);
  }
 else {
    String query=LuceneQueryUtils.getQuery(DocumentIndexer.PARENT_ID_CLASS,entity.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,entityId,childClass.getCanonicalName().toLowerCase());
    Map<String,String> results=childClient.getIndexManager().search(query);
    Set<String> rsSet=new HashSet<String>(results.values());
    if (childClass.equals(entity.getClass())) {
      children=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
    }
 else {
      children=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
    }
  }
  onReflect(entity,relation.getProperty(),children);
  Field biDirectionalField=getBiDirectionalField(entity.getClass(),relation.getTargetEntity());
  boolean isBidirectionalRelation=(biDirectionalField != null);
  if (isBidirectionalRelation && children != null) {
    Relation reverseRelation=childMetadata.getRelation(biDirectionalField.getName());
    for (    Object child : children) {
      PropertyAccessorHelper.set(child,reverseRelation.getProperty(),entity);
    }
  }
  if (children != null) {
    MainCache mainCache=(MainCache)pd.getPersistenceCache().getMainCache();
    for (    Object child : children) {
      Object childId=PropertyAccessorHelper.getId(child,childMetadata);
      String nodeId=ObjectGraphUtils.getNodeId(childId,childMetadata.getEntityClazz());
      Node node=new Node(nodeId,childMetadata.getEntityClazz(),new ManagedState(),pd.getPersistenceCache());
      node.setData(child);
      node.setPersistenceDelegator(pd);
      mainCache.addNodeToCache(node);
    }
  }
}","/** 
 * @param entity
 * @param pd
 * @param entityId
 * @param relation
 * @param relationName
 */
void populateRelationViaQuery(Object entity,PersistenceDelegator pd,String entityId,Relation relation,String relationName,EntityMetadata childMetadata){
  Class<?> childClass=relation.getTargetEntity();
  Client childClient=pd.getClient(childMetadata);
  List associatedEntities=null;
  if (MetadataUtils.useSecondryIndex(childClient.getPersistenceUnit())) {
    associatedEntities=pd.find(childClass,entityId,relationName);
  }
 else {
    associatedEntities=getAssociatedEntitiesFromLucene(entity,entityId,childClass,childClient);
  }
  if (associatedEntities != null && !associatedEntities.isEmpty()) {
    setAssociatedEntities(entity,relation.getProperty(),associatedEntities);
  }
  Field biDirectionalField=getBiDirectionalField(entity.getClass(),relation.getTargetEntity());
  boolean isBidirectionalRelation=(biDirectionalField != null);
  if (isBidirectionalRelation && associatedEntities != null) {
    Relation reverseRelation=childMetadata.getRelation(biDirectionalField.getName());
    for (    Object child : associatedEntities) {
      PropertyAccessorHelper.set(child,reverseRelation.getProperty(),entity);
    }
  }
  if (associatedEntities != null) {
    MainCache mainCache=(MainCache)pd.getPersistenceCache().getMainCache();
    for (    Object child : associatedEntities) {
      Object childId=PropertyAccessorHelper.getId(child,childMetadata);
      String nodeId=ObjectGraphUtils.getNodeId(childId,childMetadata.getEntityClazz());
      Node node=new Node(nodeId,childMetadata.getEntityClazz(),new ManagedState(),pd.getPersistenceCache());
      node.setData(child);
      node.setPersistenceDelegator(pd);
      mainCache.addNodeToCache(node);
    }
  }
  if ((childMetadata.getRelationNames() == null || childMetadata.getRelationNames().isEmpty()) && !childMetadata.isRelationViaJoinTable()) {
  }
 else   if (associatedEntities != null) {
    for (    Object associatedEntity : associatedEntities) {
      associatedEntity=pd.getReader(childClient).recursivelyFindEntities(associatedEntity,null,childMetadata,pd);
    }
  }
}",0.4384777025449451
176910,"/** 
 * @param entity
 * @param pd
 * @param relation
 * @param relationValue
 */
void populateRelationFromValue(Object entity,PersistenceDelegator pd,Relation relation,Object relationValue,EntityMetadata childMetadata){
  Class<?> childClass=relation.getTargetEntity();
  Object child=pd.find(childClass,relationValue.toString());
  child=child != null && child instanceof EnhanceEntity ? ((EnhanceEntity)child).getEntity() : child;
  PropertyAccessorHelper.set(entity,relation.getProperty(),child);
  Field biDirectionalField=getBiDirectionalField(entity.getClass(),relation.getTargetEntity());
  boolean isBidirectionalRelation=(biDirectionalField != null);
  if (isBidirectionalRelation) {
    Relation reverseRelation=childMetadata.getRelation(biDirectionalField.getName());
    String childId=PropertyAccessorHelper.getId(child,childMetadata);
    EntityMetadata reverseEntityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
    populateRelationViaQuery(child,pd,childId,reverseRelation,relation.getJoinColumnName(),reverseEntityMetadata);
  }
}","/** 
 * @param entity
 * @param pd
 * @param relation
 * @param relationValue
 */
void populateRelationFromValue(Object entity,PersistenceDelegator pd,Relation relation,Object relationValue,EntityMetadata childMetadata){
  Class<?> childClass=relation.getTargetEntity();
  Object child=pd.find(childClass,relationValue.toString());
  child=child != null && child instanceof EnhanceEntity ? ((EnhanceEntity)child).getEntity() : child;
  if (child != null) {
    PropertyAccessorHelper.set(entity,relation.getProperty(),child);
    Field biDirectionalField=getBiDirectionalField(entity.getClass(),relation.getTargetEntity());
    boolean isBidirectionalRelation=(biDirectionalField != null);
    if (isBidirectionalRelation) {
      Relation reverseRelation=childMetadata.getRelation(biDirectionalField.getName());
      String childId=PropertyAccessorHelper.getId(child,childMetadata);
      EntityMetadata reverseEntityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
      populateRelationViaQuery(child,pd,childId,reverseRelation,relation.getJoinColumnName(),reverseEntityMetadata);
    }
  }
}",0.7857469164001827
176911,"/** 
 * Writes an entity into Persistence cache
 */
public void persist(Object e){
  EntityMetadata metadata=getMetadata(e.getClass());
  getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new TransientState(),getPersistenceCache());
  Node headNode=graph.getHeadNode();
  if (headNode.getParents() == null) {
    headNode.setHeadNode(true);
    getPersistenceCache().getMainCache().addHeadNode(headNode);
  }
  headNode.persist();
  flush();
  graph.getNodeMapping().clear();
  graph=null;
  getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
  log.debug(""String_Node_Str"" + e.getClass());
}","/** 
 * Writes an entity into Persistence cache.  (Actual database write is done while flushing)
 */
public void persist(Object e){
  EntityMetadata metadata=getMetadata(e.getClass());
  getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new TransientState(),getPersistenceCache());
  Node headNode=graph.getHeadNode();
  if (headNode.getParents() == null) {
    headNode.setHeadNode(true);
    getPersistenceCache().getMainCache().addHeadNode(headNode);
  }
  headNode.persist();
  flush();
  graph.getNodeMapping().clear();
  graph=null;
  getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
  log.debug(""String_Node_Str"" + e.getClass());
}",0.965272856130404
176912,"@Override void startServer(){
  if (!cli.isStarted()) {
    cli.startCluster();
  }
}","@Override void startServer(){
}",0.5344827586206896
176913,"@Override void stopServer(){
  if (cli.isStarted()) {
    cli.stopCluster();
  }
}","@Override void stopServer(){
}",0.5357142857142857
176914,"@Override protected void setUp() throws Exception {
  setUpInternal(""String_Node_Str"");
}","@Override protected void setUp() throws Exception {
}",0.7464788732394366
176915,"@Override protected void tearDown() throws Exception {
  tearDownInternal();
}","@Override protected void tearDown() throws Exception {
}",0.835820895522388
176916,"/** 
 * Constructs and returns   {@link Node} representation for a given entity object.Output is fully constructed graph with relationships embedded. Each node is put into <code>graph</code> once it is constructed.
 * @param entity
 * @return
 */
private Node getNode(Object entity,ObjectGraph graph,NodeState initialNodeState){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (entityMetadata == null) {
    return null;
  }
  Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
  String nodeId=getNodeId(id,entity);
  Node node=graph.getNode(nodeId);
  if (node != null) {
    return node;
  }
  Node nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
  Object nodeDataCopy=ObjectUtils.deepCopy(entity);
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,nodeDataCopy,initialNodeState,persistenceCache);
  }
 else {
    node=nodeInPersistenceCache;
    if (!DeepEquals.deepEquals(node.getData(),entity)) {
      node.setData(nodeDataCopy);
      node.setDirty(true);
    }
 else {
      node.setDirty(false);
    }
  }
  graph.addNode(nodeId,node);
  for (  Relation relation : entityMetadata.getRelations()) {
    Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (childObject != null) {
      if (Collection.class.isAssignableFrom(childObject.getClass())) {
        Collection childrenObjects=(Collection)childObject;
        for (        Object childObj : childrenObjects) {
          if (childObj != null) {
            addChildNodesToGraph(graph,node,relation,childObj,initialNodeState);
          }
        }
      }
 else {
        addChildNodesToGraph(graph,node,relation,childObject,initialNodeState);
      }
    }
  }
  return node;
}","/** 
 * Constructs and returns   {@link Node} representation for a given entity object.Output is fully constructed graph with relationships embedded. Each node is put into <code>graph</code> once it is constructed.
 * @param entity
 * @return
 */
private Node getNode(Object entity,ObjectGraph graph,NodeState initialNodeState){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (entityMetadata == null) {
    return null;
  }
  Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
  String nodeId=getNodeId(id,entity);
  if (graph.getNode(nodeId) != null) {
    return null;
  }
  Node node=null;
  Node nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
  Object nodeDataCopy=ObjectUtils.deepCopy(entity);
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,nodeDataCopy,initialNodeState,persistenceCache);
  }
 else {
    node=nodeInPersistenceCache;
    if (!DeepEquals.deepEquals(node.getData(),entity)) {
      node.setData(nodeDataCopy);
      node.setDirty(true);
    }
 else {
      node.setDirty(false);
    }
  }
  graph.addNode(nodeId,node);
  for (  Relation relation : entityMetadata.getRelations()) {
    Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (childObject != null) {
      if (Collection.class.isAssignableFrom(childObject.getClass())) {
        Collection childrenObjects=(Collection)childObject;
        for (        Object childObj : childrenObjects) {
          if (childObj != null) {
            addChildNodesToGraph(graph,node,relation,childObj,initialNodeState);
          }
        }
      }
 else {
        addChildNodesToGraph(graph,node,relation,childObject,initialNodeState);
      }
    }
  }
  return node;
}",0.9810267857142856
176917,"/** 
 * Inits the filter.
 */
private void initFilter(){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String indexName=metadata.getIndexName();
  if (null == filter) {
    return;
  }
  List<String> clauses=tokenize(filter,INTER_CLAUSE_PATTERN);
  clauses=parseFilterForBetweenClause(clauses,indexName);
  boolean newClause=true;
  for (  String clause : clauses) {
    if (newClause) {
      List<String> tokens=tokenize(clause,INTRA_CLAUSE_PATTERN);
      if (tokens.size() != 3) {
        throw new PersistenceException(""String_Node_Str"" + clause);
      }
      String property=tokens.get(0);
      property=property.substring((entityAlias + ""String_Node_Str"").length());
      property=indexName + ""String_Node_Str"" + property;
      String condition=tokens.get(1);
      if (!Arrays.asList(INTRA_CLAUSE_OPERATORS).contains(condition.toUpperCase())) {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
      filtersQueue.add(new FilterClause(property,condition,tokens.get(2)));
      newClause=false;
    }
 else {
      if (Arrays.asList(INTER_CLAUSE_OPERATORS).contains(clause.toUpperCase())) {
        filtersQueue.add(clause.toUpperCase());
        newClause=true;
      }
 else {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
    }
  }
}","/** 
 * Inits the filter.
 */
private void initFilter(){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  String indexName=metadata.getIndexName();
  if (null == filter) {
    return;
  }
  List<String> clauses=tokenize(filter,INTER_CLAUSE_PATTERN);
  clauses=parseFilterForBetweenClause(clauses,indexName);
  boolean newClause=true;
  for (  String clause : clauses) {
    if (newClause) {
      List<String> tokens=tokenize(clause,INTRA_CLAUSE_PATTERN);
      if (tokens.size() != 3) {
        throw new PersistenceException(""String_Node_Str"" + clause);
      }
      String property=tokens.get(0);
      property=property.substring((entityAlias + ""String_Node_Str"").length());
      String columnName=getColumnNameFromFieldName(metadata,property);
      columnName=indexName + ""String_Node_Str"" + columnName;
      String condition=tokens.get(1);
      if (!Arrays.asList(INTRA_CLAUSE_OPERATORS).contains(condition.toUpperCase())) {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
      filtersQueue.add(new FilterClause(columnName,condition,tokens.get(2)));
      newClause=false;
    }
 else {
      if (Arrays.asList(INTER_CLAUSE_OPERATORS).contains(clause.toUpperCase())) {
        filtersQueue.add(clause.toUpperCase());
        newClause=true;
      }
 else {
        throw new JPQLParseException(""String_Node_Str"" + clause);
      }
    }
  }
}",0.96037804434751
176918,"/** 
 * Fetches data held in Thrift row columns and populates to Entity objects.
 * @param clazz the clazz
 * @param m the m
 * @param thriftRow the cr
 * @param relationNames the relation names
 * @param isWrapperReq the is wrapper req
 * @return the e
 * @throws Exception the exception
 */
public Object fromColumnThriftRow(Class<?> clazz,EntityMetadata m,ThriftRow thriftRow,List<String> relationNames,boolean isWrapperReq) throws Exception {
  Object entity=null;
  Map<String,Object> relations=new HashMap<String,Object>();
  for (  Column c : thriftRow.getColumns()) {
    if (entity == null) {
      entity=clazz.newInstance();
      PropertyAccessorHelper.setId(entity,m,thriftRow.getId());
    }
    String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,c.getName());
    byte[] thriftColumnValue=c.getValue();
    if (null == thriftColumnValue) {
      continue;
    }
    com.impetus.kundera.metadata.model.Column column=m.getColumn(thriftColumnName);
    if (column != null) {
      try {
        PropertyAccessorHelper.set(entity,column.getField(),thriftColumnValue);
      }
 catch (      PropertyAccessException pae) {
        log.warn(pae.getMessage());
      }
    }
 else {
      if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(thriftColumnName)) {
        String value=PropertyAccessorFactory.STRING.fromBytes(String.class,thriftColumnValue);
        relations.put(thriftColumnName,value);
      }
    }
  }
  return isWrapperReq ? new EnhanceEntity(entity,thriftRow.getId(),relations) : entity;
}","/** 
 * Fetches data held in Thrift row columns and populates to Entity objects.
 * @param clazz the clazz
 * @param m the m
 * @param thriftRow the cr
 * @param relationNames the relation names
 * @param isWrapperReq the is wrapper req
 * @return the e
 * @throws Exception the exception
 */
public Object fromColumnThriftRow(Class<?> clazz,EntityMetadata m,ThriftRow thriftRow,List<String> relationNames,boolean isWrapperReq) throws Exception {
  Object entity=null;
  Map<String,Object> relations=new HashMap<String,Object>();
  for (  Column c : thriftRow.getColumns()) {
    if (entity == null) {
      entity=clazz.newInstance();
      PropertyAccessorHelper.setId(entity,m,thriftRow.getId());
    }
    String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(String.class,c.getName());
    byte[] thriftColumnValue=c.getValue();
    if (null == thriftColumnValue) {
      continue;
    }
    com.impetus.kundera.metadata.model.Column column=m.getColumn(thriftColumnName);
    if (column != null) {
      try {
        PropertyAccessorHelper.set(entity,column.getField(),thriftColumnValue);
      }
 catch (      PropertyAccessException pae) {
        log.warn(pae.getMessage());
      }
    }
 else {
      if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(thriftColumnName)) {
        String value=PropertyAccessorFactory.STRING.fromBytes(String.class,thriftColumnValue);
        relations.put(thriftColumnName,value);
      }
    }
  }
  return isWrapperReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,thriftRow.getId(),relations) : entity;
}",0.9858978376684424
176919,"/** 
 * Fetches data held in Thrift row super columns and populates to Entity objects.
 * @param clazz the clazz
 * @param m the m
 * @param tr the tr
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 * @throws Exception the exception
 */
public Object fromSuperColumnThriftRow(Class clazz,EntityMetadata m,ThriftRow tr,List<String> relationNames,boolean isWrapReq) throws Exception {
  Object entity=null;
  Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
  MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
  Collection embeddedCollection=null;
  Field embeddedCollectionField=null;
  Map<String,Object> relations=new HashMap<String,Object>();
  for (  SuperColumn sc : tr.getSuperColumns()) {
    if (entity == null) {
      entity=clazz.newInstance();
      PropertyAccessorHelper.setId(entity,m,tr.getId());
    }
    String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,sc.getName());
    String scNamePrefix=null;
    if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
      scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
      embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
      if (embeddedCollection == null) {
        embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
      }
      Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        Field columnField=columnNameToFieldMap.get(name);
        if (columnField != null) {
          PropertyAccessorHelper.set(embeddedObject,columnField,value);
        }
 else         if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(name)) {
          String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(String.class,value);
          relations.put(name,valueAsStr);
        }
      }
      embeddedCollection.add(embeddedObject);
      ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
    }
 else {
      Field superColumnField=superColumnNameToFieldMap.get(scName);
      Object superColumnObj=null;
      if (superColumnField != null || (relationNames != null && !relationNames.isEmpty() && relationNames.contains(scName))) {
        Class superColumnClass=superColumnField != null ? superColumnField.getType() : null;
        superColumnObj=superColumnClass != null ? superColumnClass.newInstance() : null;
        for (        Column column : sc.getColumns()) {
          String name=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
          byte[] value=column.getValue();
          Field columnField=columnNameToFieldMap.get(name);
          if (columnField != null) {
            try {
              PropertyAccessorHelper.set(superColumnObj,columnField,value);
            }
 catch (            PropertyAccessException e) {
              log.debug(e.getMessage() + ""String_Node_Str"");
              superColumnObj=Bytes.toUTF8(value);
            }
          }
 else {
            String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(String.class,value);
            relations.put(name,valueAsStr);
          }
        }
      }
      if (superColumnField != null) {
        PropertyAccessorHelper.set(entity,superColumnField,superColumnObj);
      }
    }
  }
  if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
    PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
  }
  return isWrapReq ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}","/** 
 * Fetches data held in Thrift row super columns and populates to Entity objects.
 * @param clazz the clazz
 * @param m the m
 * @param tr the tr
 * @param relationNames the relation names
 * @param isWrapReq the is wrap req
 * @return the object
 * @throws Exception the exception
 */
public Object fromSuperColumnThriftRow(Class clazz,EntityMetadata m,ThriftRow tr,List<String> relationNames,boolean isWrapReq) throws Exception {
  Object entity=null;
  Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
  MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
  Collection embeddedCollection=null;
  Field embeddedCollectionField=null;
  Map<String,Object> relations=new HashMap<String,Object>();
  for (  SuperColumn sc : tr.getSuperColumns()) {
    if (entity == null) {
      entity=clazz.newInstance();
      PropertyAccessorHelper.setId(entity,m,tr.getId());
    }
    String scName=PropertyAccessorFactory.STRING.fromBytes(String.class,sc.getName());
    String scNamePrefix=null;
    if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
      scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
      embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
      if (embeddedCollection == null) {
        embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
      }
      Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        Field columnField=columnNameToFieldMap.get(name);
        if (columnField != null) {
          PropertyAccessorHelper.set(embeddedObject,columnField,value);
        }
 else         if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(name)) {
          String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(String.class,value);
          relations.put(name,valueAsStr);
        }
      }
      embeddedCollection.add(embeddedObject);
      ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
    }
 else {
      Field superColumnField=superColumnNameToFieldMap.get(scName);
      Object superColumnObj=null;
      if (superColumnField != null || (relationNames != null && !relationNames.isEmpty() && relationNames.contains(scName))) {
        Class superColumnClass=superColumnField != null ? superColumnField.getType() : null;
        superColumnObj=superColumnClass != null ? superColumnClass.newInstance() : null;
        for (        Column column : sc.getColumns()) {
          String name=PropertyAccessorFactory.STRING.fromBytes(String.class,column.getName());
          byte[] value=column.getValue();
          Field columnField=columnNameToFieldMap.get(name);
          if (columnField != null) {
            try {
              PropertyAccessorHelper.set(superColumnObj,columnField,value);
            }
 catch (            PropertyAccessException e) {
              log.debug(e.getMessage() + ""String_Node_Str"");
              superColumnObj=Bytes.toUTF8(value);
            }
          }
 else {
            String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(String.class,value);
            relations.put(name,valueAsStr);
          }
        }
      }
      if (superColumnField != null) {
        PropertyAccessorHelper.set(entity,superColumnField,superColumnObj);
      }
    }
  }
  if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
    PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
  }
  return isWrapReq && relations != null && !relations.isEmpty() ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}",0.9944859698566352
176920,"/** 
 * Inits the client.
 * @throws TTransportException the t transport exception
 */
private static void initClient() throws TTransportException {
  TSocket socket=new TSocket(""String_Node_Str"",9160);
  TTransport transport=new TFramedTransport(socket);
  TProtocol protocol=new TBinaryProtocol(transport);
  client=new Cassandra.Client(protocol);
  socket.open();
}","/** 
 * Inits the client.
 * @throws TTransportException the t transport exception
 */
public static void initClient() throws TTransportException {
  TSocket socket=new TSocket(""String_Node_Str"",9160);
  TTransport transport=new TFramedTransport(socket);
  TProtocol protocol=new TBinaryProtocol(transport);
  client=new Cassandra.Client(protocol);
  socket.open();
}",0.9850340136054422
176921,"private Map<LinkProperty,Object> getLinkProperties(Relation relation){
  Map<LinkProperty,Object> linkProperties=new HashMap<NodeLink.LinkProperty,Object>();
  linkProperties.put(LinkProperty.LINK_NAME,MetadataUtils.getMappedName(relation));
  linkProperties.put(LinkProperty.IS_SHARED_BY_PRIMARY_KEY,relation.isJoinedByPrimaryKey());
  linkProperties.put(LinkProperty.IS_BIDIRECTIONAL,!relation.isUnary());
  linkProperties.put(LinkProperty.IS_RELATED_VIA_JOIN_TABLE,relation.isRelatedViaJoinTable());
  linkProperties.put(LinkProperty.PROPERTY,relation.getProperty());
  linkProperties.put(LinkProperty.CASCADE,relation.getCascades());
  if (relation.isRelatedViaJoinTable()) {
    linkProperties.put(LinkProperty.JOIN_TABLE_METADATA,relation.getJoinTableMetadata());
  }
  return linkProperties;
}","/** 
 * @param metadata Entity metadata of the parent node
 * @param relation 
 * @return
 */
private Map<LinkProperty,Object> getLinkProperties(EntityMetadata metadata,Relation relation){
  Map<LinkProperty,Object> linkProperties=new HashMap<NodeLink.LinkProperty,Object>();
  linkProperties.put(LinkProperty.LINK_NAME,MetadataUtils.getMappedName(metadata,relation));
  linkProperties.put(LinkProperty.IS_SHARED_BY_PRIMARY_KEY,relation.isJoinedByPrimaryKey());
  linkProperties.put(LinkProperty.IS_BIDIRECTIONAL,!relation.isUnary());
  linkProperties.put(LinkProperty.IS_RELATED_VIA_JOIN_TABLE,relation.isRelatedViaJoinTable());
  linkProperties.put(LinkProperty.PROPERTY,relation.getProperty());
  linkProperties.put(LinkProperty.CASCADE,relation.getCascades());
  if (relation.isRelatedViaJoinTable()) {
    linkProperties.put(LinkProperty.JOIN_TABLE_METADATA,relation.getJoinTableMetadata());
  }
  return linkProperties;
}",0.9264620729588884
176922,"/** 
 * @param graph
 * @param node
 * @param relation
 * @param childObject
 */
private void addChildNodesToGraph(ObjectGraph graph,Node node,Relation relation,Object childObject,NodeState initialNodeState){
  Node childNode=getNode(childObject,graph,initialNodeState);
  if (childNode != null) {
    NodeLink nodeLink=new NodeLink(node.getNodeId(),childNode.getNodeId());
    nodeLink.setMultiplicity(relation.getType());
    nodeLink.setLinkProperties(getLinkProperties(relation));
    childNode.addParentNode(nodeLink,node);
    node.addChildNode(nodeLink,childNode);
  }
}","/** 
 * @param graph
 * @param node
 * @param relation
 * @param childObject
 */
private void addChildNodesToGraph(ObjectGraph graph,Node node,Relation relation,Object childObject,NodeState initialNodeState){
  Node childNode=getNode(childObject,graph,initialNodeState);
  if (childNode != null) {
    NodeLink nodeLink=new NodeLink(node.getNodeId(),childNode.getNodeId());
    nodeLink.setMultiplicity(relation.getType());
    EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
    nodeLink.setLinkProperties(getLinkProperties(metadata,relation));
    childNode.addParentNode(nodeLink,node);
    node.addChildNode(nodeLink,childNode);
  }
}",0.9059011164274322
176923,"/** 
 * Returns mapped relational name, in case of bi directional mapping, it will return back pKey name of associated entity.
 * @param relation holding relation.
 * @return   mapped/join column name.
 */
public static String getMappedName(Relation relation){
  String joinColumn=relation.getJoinColumnName();
  if (joinColumn == null) {
    Class clazz=relation.getTargetEntity();
    EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(clazz);
    joinColumn=metadata.getIdColumn().getName();
  }
  return joinColumn;
}","/** 
 * Returns mapped relational name, in case of bi directional mapping, it will return back pKey name of associated entity.
 * @param relation holding relation.
 * @return   mapped/join column name.
 */
public static String getMappedName(EntityMetadata parentMetadata,Relation relation){
  String joinColumn=relation.getJoinColumnName();
  if (joinColumn == null) {
    Class clazz=relation.getTargetEntity();
    EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(clazz);
    joinColumn=relation.getType().equals(ForeignKey.ONE_TO_MANY) ? parentMetadata.getIdColumn().getName() : metadata.getIdColumn().getName();
  }
  return joinColumn;
}",0.8952221290863369
176924,"/** 
 * Gets the element collection object name.
 * @param rowKey the row key
 * @param elementCollectionObject the element collection object
 * @return the element collection object name
 */
public String getElementCollectionObjectName(String rowKey,Object elementCollectionObject){
  if (getElementCollectionCache().get(rowKey) == null) {
    log.debug(""String_Node_Str"" + rowKey);
    return null;
  }
 else {
    Map<Object,String> elementCollectionObjectMap=getElementCollectionCache().get(rowKey);
    String elementCollectionObjectName=elementCollectionObjectMap.get(elementCollectionObject);
    if (elementCollectionObjectName == null) {
      log.debug(""String_Node_Str"" + elementCollectionObject);
      return null;
    }
 else {
      return elementCollectionObjectName;
    }
  }
}","/** 
 * Gets the element collection object name.
 * @param rowKey the row key
 * @param elementCollectionObject the element collection object
 * @return the element collection object name
 */
public String getElementCollectionObjectName(String rowKey,Object elementCollectionObject){
  if (getElementCollectionCache().get(rowKey) == null) {
    log.debug(""String_Node_Str"" + rowKey);
    return null;
  }
 else {
    Map<Object,String> elementCollectionObjectMap=getElementCollectionCache().get(rowKey);
    String elementCollectionObjectName=elementCollectionObjectMap.get(elementCollectionObject);
    if (elementCollectionObjectName == null) {
      for (      Object obj : elementCollectionObjectMap.keySet()) {
        if (DeepEquals.deepEquals(elementCollectionObject,obj)) {
          elementCollectionObjectName=elementCollectionObjectMap.get(obj);
          break;
        }
      }
    }
    if (elementCollectionObjectName == null) {
      log.debug(""String_Node_Str"" + elementCollectionObject);
      return null;
    }
 else {
      return elementCollectionObjectName;
    }
  }
}",0.8389830508474576
176925,"public ObjectGraph getObjectGraph(Object entity,NodeState initialNodeState,PersistenceCache persistenceCache){
  ObjectGraph objectGraph=new ObjectGraph();
  this.persistenceCache=persistenceCache;
  Node headNode=getNode(entity,objectGraph,initialNodeState);
  objectGraph.setHeadNode(headNode);
  return objectGraph;
}","public ObjectGraph getObjectGraph(Object entity,NodeState initialNodeState,PersistenceCache persistenceCache){
  ObjectGraph objectGraph=new ObjectGraph();
  this.persistenceCache=persistenceCache;
  Node headNode=getNode(entity,objectGraph,initialNodeState);
  if (headNode != null) {
    objectGraph.setHeadNode(headNode);
  }
  return objectGraph;
}",0.9523809523809524
176926,"/** 
 * Constructs and returns   {@link Node} representation for a given entity object.Output is fully constructed graph with relationships embedded. Each node is put into <code>graph</code> once it is constructed.
 * @param entity
 * @return
 */
private Node getNode(Object entity,ObjectGraph graph,NodeState initialNodeState){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
  String nodeId=getNodeId(id,entity);
  if (graph.getNode(nodeId) != null) {
    return null;
  }
  Node node=null;
  Node nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
  Object nodeDataCopy=ObjectUtils.deepCopy(entity);
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,nodeDataCopy,initialNodeState,persistenceCache);
  }
 else {
    node=nodeInPersistenceCache;
    if (!DeepEquals.deepEquals(node.getData(),entity)) {
      node.setData(nodeDataCopy);
      node.setDirty(true);
    }
 else {
      node.setDirty(false);
    }
  }
  graph.addNode(nodeId,node);
  for (  Relation relation : entityMetadata.getRelations()) {
    Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (childObject != null) {
      if (Collection.class.isAssignableFrom(childObject.getClass())) {
        Collection childrenObjects=(Collection)childObject;
        for (        Object childObj : childrenObjects) {
          if (childObj != null) {
            addChildNodesToGraph(graph,node,relation,childObj,initialNodeState);
          }
        }
      }
 else {
        addChildNodesToGraph(graph,node,relation,childObject,initialNodeState);
      }
    }
  }
  return node;
}","/** 
 * Constructs and returns   {@link Node} representation for a given entity object.Output is fully constructed graph with relationships embedded. Each node is put into <code>graph</code> once it is constructed.
 * @param entity
 * @return
 */
private Node getNode(Object entity,ObjectGraph graph,NodeState initialNodeState){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (entityMetadata == null) {
    return null;
  }
  Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
  String nodeId=getNodeId(id,entity);
  Node node=graph.getNode(nodeId);
  if (node != null) {
    return node;
  }
  Node nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
  Object nodeDataCopy=ObjectUtils.deepCopy(entity);
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,nodeDataCopy,initialNodeState,persistenceCache);
  }
 else {
    node=nodeInPersistenceCache;
    if (!DeepEquals.deepEquals(node.getData(),entity)) {
      node.setData(nodeDataCopy);
      node.setDirty(true);
    }
 else {
      node.setDirty(false);
    }
  }
  graph.addNode(nodeId,node);
  for (  Relation relation : entityMetadata.getRelations()) {
    Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (childObject != null) {
      if (Collection.class.isAssignableFrom(childObject.getClass())) {
        Collection childrenObjects=(Collection)childObject;
        for (        Object childObj : childrenObjects) {
          if (childObj != null) {
            addChildNodesToGraph(graph,node,relation,childObj,initialNodeState);
          }
        }
      }
 else {
        addChildNodesToGraph(graph,node,relation,childObject,initialNodeState);
      }
    }
  }
  return node;
}",0.961200792976494
176927,"/** 
 * Returns mapped relational name, in case of bi directional mapping, it will return back pKey name of associated entity.
 * @param relation holding relation.
 * @return   mapped/join column name.
 */
public static String getMappedName(EntityMetadata parentMetadata,Relation relation){
  String joinColumn=relation.getJoinColumnName();
  if (joinColumn == null) {
    Class clazz=relation.getTargetEntity();
    EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(clazz);
    joinColumn=relation.getType().equals(ForeignKey.ONE_TO_MANY) ? parentMetadata.getIdColumn().getName() : metadata.getIdColumn().getName();
  }
  return joinColumn;
}","/** 
 * Returns mapped relational name, in case of bi directional mapping, it will return back pKey name of associated entity.
 * @param relation holding relation.
 * @return   mapped/join column name.
 */
public static String getMappedName(EntityMetadata parentMetadata,Relation relation){
  if (relation != null) {
    String joinColumn=relation.getJoinColumnName();
    if (joinColumn == null) {
      Class clazz=relation.getTargetEntity();
      EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(clazz);
      joinColumn=relation.getType().equals(ForeignKey.ONE_TO_MANY) ? parentMetadata.getIdColumn().getName() : metadata.getIdColumn().getName();
    }
    return joinColumn;
  }
  return null;
}",0.9570909090909092
176928,"/** 
 * Method to add specific relation name for given relational field.
 * @param rField relation object.
 */
private void addRelationName(Relation rField){
  String relationName=getJoinColumnName(rField.getProperty());
  if (rField.getProperty().isAnnotationPresent(PrimaryKeyJoinColumn.class)) {
    relationName=this.getIdColumn().getName();
  }
  addToRelationNameCollection(relationName);
}","/** 
 * Method to add specific relation name for given relational field.
 * @param rField relation object.
 */
private void addRelationName(Relation rField){
  if (!rField.isRelatedViaJoinTable()) {
    String relationName=getJoinColumnName(rField.getProperty());
    if (rField.getProperty().isAnnotationPresent(PrimaryKeyJoinColumn.class)) {
      relationName=this.getIdColumn().getName();
    }
    addToRelationNameCollection(relationName);
  }
}",0.935064935064935
176929,"/** 
 * Recursively fetches child entities for a given entity contained in  {@link EnhanceEntity}
 * @param e
 * @param client
 * @param m
 * @param pd
 * @return
 */
public Object recursivelyFindEntities(EnhanceEntity e,Client client,EntityMetadata m,PersistenceDelegator pd){
  Map<Object,Object> relationValuesMap=new HashMap<Object,Object>();
  Client childClient=null;
  Class childClass=null;
  EntityMetadata childMetadata=null;
  for (  Relation relation : m.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      populateRelationFromJoinTable(e,childClient,m,pd,relation);
    }
 else {
      Relation.ForeignKey multiplicity=relation.getType();
      if (multiplicity.equals(Relation.ForeignKey.ONE_TO_ONE) || multiplicity.equals(Relation.ForeignKey.MANY_TO_ONE)) {
        String relationName=MetadataUtils.getMappedName(m,relation);
        Object relationValue=e.getRelations() != null ? e.getRelations().get(relationName) : null;
        childClass=relation.getTargetEntity();
        childMetadata=KunderaMetadataManager.getEntityMetadata(childClass);
        Field relationField=relation.getProperty();
        if (relationValue != null) {
          if (!relationValuesMap.containsKey(relationValue + childClass.getName()) && relationValue != null) {
            childClient=pd.getClient(childMetadata);
            Object child=null;
            if (relationValue != null) {
              if (childClass.equals(e.getEntity().getClass())) {
                child=childClient.find(childClass,relationValue.toString());
              }
 else {
                child=pd.find(childClass,relationValue.toString());
              }
            }
            relationValuesMap.put(relationValue + childClass.getName(),child);
          }
          Field biDirectionalField=getBiDirectionalField(e.getEntity().getClass(),childClass);
          onBiDirection(pd,e,client,relation,biDirectionalField,relation.getJoinColumnName(),m,relationValuesMap.get(relationValue + childClass.getName()),childMetadata,childClient);
          List<Object> collection=new ArrayList<Object>(1);
          collection.add(relationValuesMap.get(relationValue + childClass.getName()));
          PropertyAccessorHelper.set(e.getEntity(),relationField,PropertyAccessorHelper.isCollection(relationField.getType()) ? getFieldInstance(collection,relationField) : collection.get(0));
        }
      }
 else       if (multiplicity.equals(Relation.ForeignKey.ONE_TO_MANY)) {
        childClass=relation.getTargetEntity();
        childMetadata=pd.getMetadata(childClass);
        Field biDirectionalField=getBiDirectionalField(e.getEntity().getClass(),childClass);
        childClient=pd.getClient(childMetadata);
        String relationName=biDirectionalField != null ? m.getIdColumn().getName() : MetadataUtils.getMappedName(m,relation);
        String relationalValue=e.getEntityId();
        Field f=relation.getProperty();
        if (relationName != null && relationalValue != null) {
          if (!relationValuesMap.containsKey(relationalValue + childClass.getName())) {
            List<Object> childs=null;
            if (MetadataUtils.useSecondryIndex(childClient.getPersistenceUnit())) {
              childs=childClient.findByRelation(relationName,relationalValue,childClass);
            }
 else {
              if (relation.isJoinedByPrimaryKey()) {
                childs=new ArrayList();
                childs.add(childClass.equals(e.getEntity().getClass()) ? childs.add(childClient.find(childClass,e.getEntityId())) : pd.find(childClass,relationalValue.toString()));
              }
 else {
                String query=getQuery(DocumentIndexer.PARENT_ID_CLASS,e.getEntity().getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,e.getEntityId(),childClass.getCanonicalName().toLowerCase());
                Map<String,String> results=childClient.getIndexManager().search(query);
                Set<String> rsSet=new HashSet<String>(results.values());
                if (childClass.equals(e.getEntity().getClass())) {
                  childs=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
                }
 else {
                  childs=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
                }
              }
            }
            relationValuesMap.put(relationalValue + childClass.getName(),childs);
            if (childs != null) {
              for (              Object child : childs) {
                onBiDirection(pd,e,client,relation,biDirectionalField,relation.getJoinColumnName(),m,child,childMetadata,childClient);
              }
            }
          }
        }
        onReflect(e.getEntity(),f,(List)relationValuesMap.get(relationalValue + childClass.getName()));
      }
    }
  }
  return e.getEntity();
}","/** 
 * Recursively fetches child entities for a given entity contained in  {@link EnhanceEntity}
 * @param e
 * @param client
 * @param m
 * @param pd
 * @return
 */
public Object recursivelyFindEntities(EnhanceEntity e,Client client,EntityMetadata m,PersistenceDelegator pd){
  Map<Object,Object> relationValuesMap=new HashMap<Object,Object>();
  Client childClient=null;
  Class childClass=null;
  EntityMetadata childMetadata=null;
  for (  Relation relation : m.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      populateRelationFromJoinTable(e,childClient,m,pd,relation);
    }
 else {
      Relation.ForeignKey multiplicity=relation.getType();
      if (multiplicity.equals(Relation.ForeignKey.ONE_TO_ONE) || multiplicity.equals(Relation.ForeignKey.MANY_TO_ONE)) {
        String relationName=MetadataUtils.getMappedName(m,relation);
        Object relationValue=e.getRelations() != null ? e.getRelations().get(relationName) : null;
        childClass=relation.getTargetEntity();
        childMetadata=KunderaMetadataManager.getEntityMetadata(childClass);
        Field relationField=relation.getProperty();
        if (relationValue != null) {
          if (!relationValuesMap.containsKey(relationValue + childClass.getName()) && relationValue != null) {
            childClient=pd.getClient(childMetadata);
            Object child=null;
            if (relationValue != null) {
              if (childClass.equals(e.getEntity().getClass())) {
                child=childClient.find(childClass,relationValue.toString());
              }
 else {
                child=pd.find(childClass,relationValue.toString());
              }
            }
            relationValuesMap.put(relationValue + childClass.getName(),child);
          }
          Field biDirectionalField=getBiDirectionalField(e.getEntity().getClass(),childClass);
          onBiDirection(pd,e,client,relation,biDirectionalField,relation.getJoinColumnName(),m,relationValuesMap.get(relationValue + childClass.getName()),childMetadata,childClient);
          List<Object> collection=new ArrayList<Object>(1);
          collection.add(relationValuesMap.get(relationValue + childClass.getName()));
          PropertyAccessorHelper.set(e.getEntity(),relationField,PropertyAccessorHelper.isCollection(relationField.getType()) ? getFieldInstance(collection,relationField) : collection.get(0));
        }
      }
 else       if (multiplicity.equals(Relation.ForeignKey.ONE_TO_MANY)) {
        childClass=relation.getTargetEntity();
        childMetadata=pd.getMetadata(childClass);
        Field biDirectionalField=getBiDirectionalField(e.getEntity().getClass(),childClass);
        childClient=pd.getClient(childMetadata);
        String relationName=biDirectionalField != null ? m.getIdColumn().getName() : MetadataUtils.getMappedName(m,relation);
        String relationalValue=e.getEntityId();
        Field f=relation.getProperty();
        if (relationName != null && relationalValue != null) {
          if (!relationValuesMap.containsKey(relationalValue + childClass.getName())) {
            List<Object> childs=null;
            if (MetadataUtils.useSecondryIndex(childClient.getPersistenceUnit())) {
              childs=childClient.findByRelation(relationName,relationalValue,childClass);
            }
 else {
              if (relation.isJoinedByPrimaryKey()) {
                childs=new ArrayList();
                childs.add(childClass.equals(e.getEntity().getClass()) ? childs.add(childClient.find(childClass,e.getEntityId())) : pd.find(childClass,relationalValue.toString()));
              }
 else {
                String query=getQuery(DocumentIndexer.PARENT_ID_CLASS,e.getEntity().getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,e.getEntityId(),childClass.getCanonicalName().toLowerCase());
                Map<String,String> results=childClient.getIndexManager().search(query);
                Set<String> rsSet=new HashSet<String>(results.values());
                if (childClass.equals(e.getEntity().getClass())) {
                  childs=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
                }
 else {
                  childs=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
                }
              }
            }
            relationValuesMap.put(relationalValue + childClass.getName(),childs);
            if (childs != null) {
              for (              Object child : childs) {
                recursivelyFindEntities(new EnhanceEntity(child,PropertyAccessorHelper.getId(child,childMetadata),null),childClient,childMetadata,pd);
                onBiDirection(pd,e,client,relation,biDirectionalField,relation.getJoinColumnName(),m,child,childMetadata,childClient);
              }
            }
          }
        }
        onReflect(e.getEntity(),f,(List)relationValuesMap.get(relationalValue + childClass.getName()));
      }
    }
  }
  return e.getEntity();
}",0.9846404231512562
176930,"/** 
 * On bi direction.
 * @param e the e
 * @param client the client
 * @param objectGraph the object graph
 * @param origMetadata the orig metadata
 * @param child the child
 * @param childMetadata the child metadata
 * @param childClient the child client
 * @throws Exception the exception
 */
private void onBiDirection(PersistenceDelegator pd,EnhanceEntity e,Client client,Relation originalRelation,Field bidirectionalField,String relationName,EntityMetadata origMetadata,Object child,EntityMetadata childMetadata,Client childClient){
  if (bidirectionalField != null && child != null) {
    List obj=new ArrayList();
    Relation relation=childMetadata.getRelation(bidirectionalField.getName());
    if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
      String query=null;
      try {
        String id=PropertyAccessorHelper.getId(child,childMetadata);
        List<Object> results=null;
        if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
          if (origMetadata.isRelationViaJoinTable()) {
            Relation joinTableRelation=origMetadata.getRelation(originalRelation.getProperty().getName());
            JoinTableMetadata jtMetadata=joinTableRelation.getJoinTableMetadata();
            String joinTableName=jtMetadata.getJoinTableName();
            Set<String> joinColumns=jtMetadata.getJoinColumns();
            Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
            String joinColumnName=(String)joinColumns.toArray()[0];
            String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
            Object[] pKeys=client.findIdsByColumn(joinTableName,joinColumnName,inverseJoinColumnName,id,origMetadata.getEntityClazz());
            for (            Object key : pKeys) {
              String rlName=MetadataUtils.getMappedName(origMetadata,originalRelation);
              List keys=client.getColumnsById(joinTableName,joinColumnName,inverseJoinColumnName,key.toString());
              Object pEntity=client.find(origMetadata.getEntityClazz(),key);
              List recursiveChilds=childClient.findAll(childMetadata.getEntityClazz(),keys.toArray());
              if (pEntity != null && recursiveChilds != null && !recursiveChilds.isEmpty()) {
                PropertyAccessorHelper.set(pEntity,originalRelation.getProperty(),getFieldInstance(recursiveChilds,originalRelation.getProperty()));
                if (results == null) {
                  results=new ArrayList<Object>();
                }
                results.add(pEntity);
              }
            }
          }
 else {
            results=client.findByRelation(relationName,id,origMetadata.getEntityClazz());
          }
        }
 else {
          Map<String,String> keys=null;
          if (relation.getType().equals(ForeignKey.ONE_TO_MANY)) {
            query=getQuery(DocumentIndexer.PARENT_ID_CLASS,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,id,e.getEntity().getClass().getCanonicalName().toLowerCase());
            keys=client.getIndexManager().search(query);
          }
 else {
            query=getQuery(DocumentIndexer.ENTITY_CLASS_FIELD,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,id,null);
            keys=client.getIndexManager().fetchRelation(query);
          }
          Set<String> uqSet=new HashSet<String>(keys.values());
          results=new ArrayList<Object>();
          for (          String rowKey : uqSet) {
            Object result=client.find(e.getEntity().getClass(),rowKey);
            if (result != null) {
              results.add(result);
            }
          }
        }
        if (results != null) {
          obj.addAll(results);
        }
      }
 catch (      PropertyAccessException ex) {
        log.error(""String_Node_Str"" + ex.getMessage());
        throw new EntityReaderException(""String_Node_Str"",ex);
      }
      for (      Object o : obj) {
        if (o != null && !relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
          Field f=originalRelation.getProperty();
          try {
            if (PropertyAccessorHelper.isCollection(f.getType())) {
              List l=new ArrayList();
              l.add(child);
              Object oo=getFieldInstance(l,f);
              PropertyAccessorHelper.set(o,f,oo);
            }
 else {
              PropertyAccessorHelper.set(o,f,child);
            }
          }
 catch (          PropertyAccessException e1) {
            log.error(""String_Node_Str"" + e1.getMessage());
            throw new EntityReaderException(""String_Node_Str"",e1);
          }
        }
      }
    }
 else {
      obj.add(e.getEntity());
    }
    try {
      PropertyAccessorHelper.set(child,bidirectionalField,PropertyAccessorHelper.isCollection(bidirectionalField.getType()) ? getFieldInstance(obj,bidirectionalField) : e.getEntity());
    }
 catch (    PropertyAccessException ex) {
      log.error(""String_Node_Str"" + ex.getMessage());
      throw new EntityReaderException(""String_Node_Str"",ex);
    }
  }
}","/** 
 * On bi direction.
 * @param e the e
 * @param client the client
 * @param objectGraph the object graph
 * @param origMetadata the orig metadata
 * @param child the child
 * @param childMetadata the child metadata
 * @param childClient the child client
 * @throws Exception the exception
 */
private void onBiDirection(PersistenceDelegator pd,EnhanceEntity e,Client client,Relation originalRelation,Field bidirectionalField,String relationName,EntityMetadata origMetadata,Object child,EntityMetadata childMetadata,Client childClient){
  if (bidirectionalField != null && child != null) {
    List obj=new ArrayList();
    Relation relation=childMetadata.getRelation(bidirectionalField.getName());
    if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
      String query=null;
      try {
        String id=PropertyAccessorHelper.getId(child,childMetadata);
        List<Object> results=null;
        if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
          if (origMetadata.isRelationViaJoinTable()) {
            Relation joinTableRelation=origMetadata.getRelation(originalRelation.getProperty().getName());
            JoinTableMetadata jtMetadata=joinTableRelation.getJoinTableMetadata();
            String joinTableName=jtMetadata.getJoinTableName();
            Set<String> joinColumns=jtMetadata.getJoinColumns();
            Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
            String joinColumnName=(String)joinColumns.toArray()[0];
            String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
            Object[] pKeys=client.findIdsByColumn(joinTableName,joinColumnName,inverseJoinColumnName,id,origMetadata.getEntityClazz());
            for (            Object key : pKeys) {
              String rlName=MetadataUtils.getMappedName(origMetadata,originalRelation);
              List keys=client.getColumnsById(joinTableName,joinColumnName,inverseJoinColumnName,key.toString());
              Object pEntity=client.find(origMetadata.getEntityClazz(),key);
              pEntity=pEntity != null && pEntity instanceof EnhanceEntity ? ((EnhanceEntity)pEntity).getEntity() : pEntity;
              List recursiveChilds=childClient.findAll(childMetadata.getEntityClazz(),keys.toArray());
              if (pEntity != null && recursiveChilds != null && !recursiveChilds.isEmpty()) {
                PropertyAccessorHelper.set(pEntity,originalRelation.getProperty(),getFieldInstance(recursiveChilds,originalRelation.getProperty()));
                if (results == null) {
                  results=new ArrayList<Object>();
                }
                results.add(pEntity);
              }
            }
          }
 else {
            results=client.findByRelation(relationName,id,origMetadata.getEntityClazz());
          }
        }
 else {
          Map<String,String> keys=null;
          if (relation.getType().equals(ForeignKey.ONE_TO_MANY)) {
            query=getQuery(DocumentIndexer.PARENT_ID_CLASS,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,id,e.getEntity().getClass().getCanonicalName().toLowerCase());
            keys=client.getIndexManager().search(query);
          }
 else {
            query=getQuery(DocumentIndexer.ENTITY_CLASS_FIELD,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,id,null);
            keys=client.getIndexManager().fetchRelation(query);
          }
          Set<String> uqSet=new HashSet<String>(keys.values());
          results=new ArrayList<Object>();
          for (          String rowKey : uqSet) {
            Object result=client.find(e.getEntity().getClass(),rowKey);
            if (result != null) {
              results.add(result);
            }
          }
        }
        if (results != null) {
          obj.addAll(results);
        }
      }
 catch (      PropertyAccessException ex) {
        log.error(""String_Node_Str"" + ex.getMessage());
        throw new EntityReaderException(""String_Node_Str"",ex);
      }
      for (      Object o : obj) {
        if (o != null && !relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
          Field f=originalRelation.getProperty();
          try {
            if (PropertyAccessorHelper.isCollection(f.getType())) {
              List l=new ArrayList();
              l.add(child);
              Object oo=getFieldInstance(l,f);
              PropertyAccessorHelper.set(o,f,oo);
            }
 else {
              PropertyAccessorHelper.set(o,f,child);
            }
          }
 catch (          PropertyAccessException e1) {
            log.error(""String_Node_Str"" + e1.getMessage());
            throw new EntityReaderException(""String_Node_Str"",e1);
          }
        }
      }
    }
 else {
      obj.add(e.getEntity());
    }
    try {
      PropertyAccessorHelper.set(child,bidirectionalField,PropertyAccessorHelper.isCollection(bidirectionalField.getType()) ? getFieldInstance(obj,bidirectionalField) : e.getEntity());
    }
 catch (    PropertyAccessException ex) {
      log.error(""String_Node_Str"" + ex.getMessage());
      throw new EntityReaderException(""String_Node_Str"",ex);
    }
  }
}",0.9880007741436037
176931,"private void populateRelationFromJoinTable(EnhanceEntity e,Client client,EntityMetadata entityMetadata,PersistenceDelegator delegator,Relation relation){
  Object entity=e.getEntity();
  JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
  String joinTableName=jtMetadata.getJoinTableName();
  Set<String> joinColumns=jtMetadata.getJoinColumns();
  Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
  String joinColumnName=(String)joinColumns.toArray()[0];
  String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
  EntityMetadata relMetadata=delegator.getMetadata(relation.getTargetEntity());
  Client pClient=delegator.getClient(entityMetadata);
  List<?> foreignKeys=pClient.getColumnsById(joinTableName,joinColumnName,inverseJoinColumnName,e.getEntityId());
  List childrenEntities=new ArrayList();
  for (  Object foreignKey : foreignKeys) {
    EntityMetadata childMetadata=delegator.getMetadata(relation.getTargetEntity());
    Client childClient=delegator.getClient(childMetadata);
    Object child=delegator.find(relation.getTargetEntity(),foreignKey);
    onBiDirection(delegator,e,pClient,relation,getBiDirectionalField(entity.getClass(),relation.getTargetEntity()),joinColumnName,entityMetadata,child,childMetadata,childClient);
    childrenEntities.add(child);
  }
  Field childField=relation.getProperty();
  try {
    PropertyAccessorHelper.set(entity,childField,PropertyAccessorHelper.isCollection(childField.getType()) ? getFieldInstance(childrenEntities,childField) : childrenEntities.get(0));
  }
 catch (  PropertyAccessException ex) {
    throw new EntityReaderException(ex);
  }
}","private void populateRelationFromJoinTable(EnhanceEntity e,Client client,EntityMetadata entityMetadata,PersistenceDelegator delegator,Relation relation){
  Object entity=e.getEntity();
  JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
  String joinTableName=jtMetadata.getJoinTableName();
  Set<String> joinColumns=jtMetadata.getJoinColumns();
  Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
  String joinColumnName=(String)joinColumns.toArray()[0];
  String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
  EntityMetadata relMetadata=delegator.getMetadata(relation.getTargetEntity());
  Client pClient=delegator.getClient(entityMetadata);
  List<?> foreignKeys=pClient.getColumnsById(joinTableName,joinColumnName,inverseJoinColumnName,e.getEntityId());
  List childrenEntities=new ArrayList();
  for (  Object foreignKey : foreignKeys) {
    EntityMetadata childMetadata=delegator.getMetadata(relation.getTargetEntity());
    Client childClient=delegator.getClient(childMetadata);
    Object child=delegator.find(relation.getTargetEntity(),foreignKey);
    Object obj=child instanceof EnhanceEntity && child != null ? ((EnhanceEntity)child).getEntity() : child;
    onBiDirection(delegator,e,pClient,relation,getBiDirectionalField(entity.getClass(),relation.getTargetEntity()),joinColumnName,entityMetadata,obj,childMetadata,childClient);
    childrenEntities.add(obj);
  }
  Field childField=relation.getProperty();
  try {
    PropertyAccessorHelper.set(entity,childField,PropertyAccessorHelper.isCollection(childField.getType()) ? getFieldInstance(childrenEntities,childField) : childrenEntities.get(0));
  }
 catch (  PropertyAccessException ex) {
    throw new EntityReaderException(ex);
  }
}",0.9631811487481592
176932,"@Override public List<?> getResultList(){
  log.info(""String_Node_Str"" + query);
  List results=null;
  EntityMetadata m=getEntityMetadata();
  Client client=persistenceDelegeator.getClient(m);
  if (m.getRelationNames() == null || (m.getRelationNames().isEmpty() && !m.isRelationViaJoinTable())) {
    results=populateEntities(m,client);
  }
 else {
    results=recursivelyPopulateEntities(m,client);
  }
  if (kunderaQuery.isDeleteUpdate()) {
    onDeleteOrUpdate(results);
  }
  return results != null && !results.isEmpty() ? results : null;
}","@Override public List<?> getResultList(){
  log.info(""String_Node_Str"" + query);
  List results=null;
  EntityMetadata m=getEntityMetadata();
  Client client=persistenceDelegeator.getClient(m);
  if (!m.isRelationViaJoinTable() && (m.getRelationNames() == null || (m.getRelationNames().isEmpty()))) {
    results=populateEntities(m,client);
  }
 else {
    results=recursivelyPopulateEntities(m,client);
  }
  if (kunderaQuery.isDeleteUpdate()) {
    onDeleteOrUpdate(results);
  }
  return results != null && !results.isEmpty() ? results : null;
}",0.4936014625228519
176933,"@Override public <E>List<E> getColumnsById(String joinTableName,String joinColumnName,String inverseJoinColumnName,String parentId){
  StringBuffer sqlQuery=new StringBuffer();
  sqlQuery.append(""String_Node_Str"").append(inverseJoinColumnName).append(""String_Node_Str"").append(joinTableName).append(""String_Node_Str"").append(joinColumnName).append(""String_Node_Str"").append(parentId).append(""String_Node_Str"");
  Session s=sf.openSession();
  Transaction tx=s.beginTransaction();
  SQLQuery query=s.createSQLQuery(sqlQuery.toString());
  List<E> foreignKeys=new ArrayList<E>();
  foreignKeys=query.list();
  s.close();
  return foreignKeys;
}","@Override public <E>List<E> getColumnsById(String joinTableName,String joinColumnName,String inverseJoinColumnName,String parentId){
  StringBuffer sqlQuery=new StringBuffer();
  sqlQuery.append(""String_Node_Str"").append(inverseJoinColumnName).append(""String_Node_Str"").append(joinTableName).append(""String_Node_Str"").append(joinColumnName).append(""String_Node_Str"").append(parentId).append(""String_Node_Str"");
  Session s=sf.openSession();
  Transaction tx=s.beginTransaction();
  SQLQuery query=s.createSQLQuery(sqlQuery.toString());
  List<E> foreignKeys=new ArrayList<E>();
  foreignKeys=query.list();
  return foreignKeys;
}",0.989771833202203
176934,"/** 
 * Insert record in join table.
 * @param joinTableName the join table name
 * @param joinColumnName the join column name
 * @param inverseJoinColumnName the inverse join column name
 * @param relMetadata the rel metadata
 * @param parentId the parent id
 * @param child the child
 */
private void insertRecordInJoinTable(String joinTableName,String joinColumnName,String inverseJoinColumnName,Object parentId,Set<Object> childrenIds){
  Session s=getStatefulSession();
  Transaction tx=s.beginTransaction();
  for (  Object childId : childrenIds) {
    StringBuffer query=new StringBuffer();
    query.append(""String_Node_Str"").append(joinTableName).append(""String_Node_Str"").append(joinColumnName).append(""String_Node_Str"").append(inverseJoinColumnName).append(""String_Node_Str"").append(""String_Node_Str"").append(parentId).append(""String_Node_Str"").append(childId).append(""String_Node_Str"");
    s.createSQLQuery(query.toString()).executeUpdate();
  }
  tx.commit();
}","/** 
 * Insert record in join table.
 * @param joinTableName the join table name
 * @param joinColumnName the join column name
 * @param inverseJoinColumnName the inverse join column name
 * @param relMetadata the rel metadata
 * @param parentId the parent id
 * @param child the child
 */
private void insertRecordInJoinTable(String joinTableName,String joinColumnName,String inverseJoinColumnName,Object parentId,Set<Object> childrenIds){
  s=getStatelessSession();
  Transaction tx=s.beginTransaction();
  for (  Object childId : childrenIds) {
    StringBuffer query=new StringBuffer();
    Object[] existingRowIds=findIdsByColumn(joinTableName,joinColumnName,inverseJoinColumnName,(String)childId,null);
    boolean joinTableRecordsExists=false;
    if (existingRowIds != null && existingRowIds.length > 0) {
      for (      Object o : existingRowIds) {
        if (o.toString().equals(parentId.toString())) {
          joinTableRecordsExists=true;
          break;
        }
      }
    }
    if (!joinTableRecordsExists) {
      query.append(""String_Node_Str"").append(joinTableName).append(""String_Node_Str"").append(joinColumnName).append(""String_Node_Str"").append(inverseJoinColumnName).append(""String_Node_Str"").append(""String_Node_Str"").append(parentId).append(""String_Node_Str"").append(childId).append(""String_Node_Str"");
      s.createSQLQuery(query.toString()).executeUpdate();
    }
  }
  tx.commit();
}",0.8056832427914752
176935,"private StatelessSession getStatelessSession(){
  return sf.openStatelessSession();
}","/** 
 * Gets the session instance.
 * @return the session instance
 */
private StatelessSession getStatelessSession(){
  return s != null ? s : sf.openStatelessSession();
}",0.6614785992217899
176936,"public List<Object> findByRelation(String colName,String colValue,Class entityClazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  String tableName=m.getTableName();
  String aliasName=""String_Node_Str"" + tableName;
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(tableName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(colName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(colValue);
  queryBuilder.append(""String_Node_Str"");
  Session s=getStatefulSession();
  s.beginTransaction();
  SQLQuery q=s.createSQLQuery(queryBuilder.toString()).addEntity(m.getEntityClazz());
  return q.list();
}","public List<Object> findByRelation(String colName,String colValue,Class entityClazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  String tableName=m.getTableName();
  String aliasName=""String_Node_Str"" + tableName;
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(tableName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(colName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(colValue);
  queryBuilder.append(""String_Node_Str"");
  s=getStatelessSession();
  s.beginTransaction();
  SQLQuery q=s.createSQLQuery(queryBuilder.toString()).addEntity(m.getEntityClazz());
  return q.list();
}",0.991982896846606
176937,"@Override public Object[] findIdsByColumn(String tableName,String pKeyName,String columnName,Object columnValue,Class entityClazz){
  String childIdStr=(String)columnValue;
  StringBuffer sqlQuery=new StringBuffer();
  sqlQuery.append(""String_Node_Str"").append(pKeyName).append(""String_Node_Str"").append(tableName).append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(childIdStr).append(""String_Node_Str"");
  Session s=sf.openSession();
  Transaction tx=s.beginTransaction();
  SQLQuery query=s.createSQLQuery(sqlQuery.toString());
  List<Object> primaryKeys=new ArrayList<Object>();
  primaryKeys=query.list();
  s.close();
  if (primaryKeys != null && !primaryKeys.isEmpty()) {
    return primaryKeys.toArray(new Object[0]);
  }
  return null;
}","@Override public Object[] findIdsByColumn(String tableName,String pKeyName,String columnName,Object columnValue,Class entityClazz){
  String childIdStr=(String)columnValue;
  StringBuffer sqlQuery=new StringBuffer();
  sqlQuery.append(""String_Node_Str"").append(pKeyName).append(""String_Node_Str"").append(tableName).append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(childIdStr).append(""String_Node_Str"");
  Session s=sf.openSession();
  Transaction tx=s.beginTransaction();
  SQLQuery query=s.createSQLQuery(sqlQuery.toString());
  List<Object> primaryKeys=new ArrayList<Object>();
  primaryKeys=query.list();
  if (primaryKeys != null && !primaryKeys.isEmpty()) {
    return primaryKeys.toArray(new Object[0]);
  }
  return null;
}",0.991508817766166
176938,"public void deleteByColumn(String tableName,String columnName,Object columnValue){
  StringBuffer query=new StringBuffer();
  query.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(""String_Node_Str"").append(columnValue).append(""String_Node_Str"");
  Session s=getStatefulSession();
  Transaction tx=s.beginTransaction();
  s.createSQLQuery(query.toString()).executeUpdate();
  tx.commit();
}","public void deleteByColumn(String tableName,String columnName,Object columnValue){
  StringBuffer query=new StringBuffer();
  query.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(""String_Node_Str"").append(columnValue).append(""String_Node_Str"");
  s=getStatelessSession();
  Transaction tx=s.beginTransaction();
  s.createSQLQuery(query.toString()).executeUpdate();
  tx.commit();
}",0.9836779107725788
176939,"/** 
 * Find.
 * @param nativeQuery the native fquery
 * @param relations the relations
 * @param m the m
 * @return the list
 */
public List find(String nativeQuery,List<String> relations,EntityMetadata m){
  List<Object[]> result=new ArrayList<Object[]>();
  s=sf.openStatelessSession();
  s.beginTransaction();
  SQLQuery q=s.createSQLQuery(nativeQuery).addEntity(m.getEntityClazz());
  for (  String r : relations) {
    if (!m.getIdColumn().getName().equalsIgnoreCase(r)) {
      q.addScalar(r);
    }
  }
  return q.list();
}","/** 
 * Find.
 * @param nativeQuery the native fquery
 * @param relations the relations
 * @param m the m
 * @return the list
 */
public List find(String nativeQuery,List<String> relations,EntityMetadata m){
  List<Object[]> result=new ArrayList<Object[]>();
  s=getStatelessSession();
  s.beginTransaction();
  SQLQuery q=s.createSQLQuery(nativeQuery).addEntity(m.getEntityClazz());
  if (relations != null) {
    for (    String r : relations) {
      String name=MetadataUtils.getMappedName(m,m.getRelation(r));
      if (!m.getIdColumn().getName().equalsIgnoreCase(name != null ? name : r)) {
        q.addScalar(name != null ? name : r);
      }
    }
  }
  return q.list();
}",0.858085808580858
176940,"/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  if (appMetadata.isNative(jpaQuery)) {
    return jpaQuery;
  }
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getIdColumn().getName());
  for (  String column : entityMetadata.getColumnFieldNames()) {
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(column);
  }
  List<EmbeddedColumn> embeddedColumns=entityMetadata.getEmbeddedColumnsAsList();
  for (  EmbeddedColumn embeddedCol : embeddedColumns) {
    for (    Column column : embeddedCol.getColumns()) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(column.getName());
    }
  }
  for (  String relation : relations) {
    if (!entityMetadata.getIdColumn().getName().equalsIgnoreCase(relation)) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(relation);
    }
  }
  for (  Relation r : entityMetadata.getRelations()) {
    if (r.getJoinColumnName() != null) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(r.getJoinColumnName());
    }
  }
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        String fieldName=getColumnName(clause.getProperty());
        boolean isString=isStringProperty(entityMetadata,fieldName);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),clause.getProperty().substring(0,clause.getProperty().indexOf(""String_Node_Str"")),aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        appendStringPrefix(queryBuilder,isString);
        queryBuilder.append(clause.getValue());
        appendStringPrefix(queryBuilder,isString);
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(entityMetadata.getIdColumn().getName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    Column col=entityMetadata.getIdColumn();
    boolean isString=col.getField().getType().isAssignableFrom(String.class);
    for (    String key : primaryKeys) {
      appendStringPrefix(queryBuilder,isString);
      queryBuilder.append(key);
      appendStringPrefix(queryBuilder,isString);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}","/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  ApplicationMetadata appMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata();
  if (appMetadata.isNative(jpaQuery)) {
    return jpaQuery;
  }
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getIdColumn().getName());
  for (  String column : entityMetadata.getColumnFieldNames()) {
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(column);
  }
  List<EmbeddedColumn> embeddedColumns=entityMetadata.getEmbeddedColumnsAsList();
  for (  EmbeddedColumn embeddedCol : embeddedColumns) {
    for (    Column column : embeddedCol.getColumns()) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(column.getName());
    }
  }
  if (relations != null) {
    for (    String relation : relations) {
      String r=MetadataUtils.getMappedName(entityMetadata,entityMetadata.getRelation(relation));
      if (!entityMetadata.getIdColumn().getName().equalsIgnoreCase(r != null ? r : relation)) {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(aliasName);
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(r != null ? r : relation);
      }
    }
  }
  for (  Relation r : entityMetadata.getRelations()) {
    if (r.getJoinColumnName() != null) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(r.getJoinColumnName());
    }
  }
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        String fieldName=getColumnName(clause.getProperty());
        boolean isString=isStringProperty(entityMetadata,fieldName);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),clause.getProperty().substring(0,clause.getProperty().indexOf(""String_Node_Str"")),aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        appendStringPrefix(queryBuilder,isString);
        queryBuilder.append(clause.getValue());
        appendStringPrefix(queryBuilder,isString);
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(entityMetadata.getIdColumn().getName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    Column col=entityMetadata.getIdColumn();
    boolean isString=col.getField().getType().isAssignableFrom(String.class);
    for (    String key : primaryKeys) {
      appendStringPrefix(queryBuilder,isString);
      queryBuilder.append(key);
      appendStringPrefix(queryBuilder,isString);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}",0.9375771033802122
176941,"/** 
 * Creates secondary indexes on columns if not already created.
 * @param tableName Column family name
 * @param poolName Pool Name
 * @param columns List of columns
 */
private void createIndexesOnColumns(String tableName,String poolName,List<Column> columns){
  String keyspace=Pelops.getDbConnPool(poolName).getKeyspace();
  try {
    Cassandra.Client api=Pelops.getDbConnPool(poolName).getConnection().getAPI();
    KsDef ksDef=api.describe_keyspace(keyspace);
    List<CfDef> cfDefs=ksDef.getCf_defs();
    CfDef columnFamilyDefToUpdate=null;
    for (    CfDef cfDef : cfDefs) {
      if (cfDef.getName().equals(tableName)) {
        columnFamilyDefToUpdate=cfDef;
        break;
      }
    }
    List<ColumnDef> columnMetadataList=columnFamilyDefToUpdate.getColumn_metadata();
    List<String> indexList=new ArrayList<String>();
    if (columnMetadataList != null) {
      for (      ColumnDef columnDef : columnMetadataList) {
        indexList.add(columnDef.getIndex_name().trim());
      }
      columnFamilyDefToUpdate.column_metadata=null;
    }
    for (    Column column : columns) {
      ColumnDef columnDef=new ColumnDef();
      columnDef.setName(column.getName());
      columnDef.setValidation_class(""String_Node_Str"");
      columnDef.setIndex_type(IndexType.KEYS);
      String indexName=PelopsUtils.getSecondaryIndexName(tableName,column);
      if (!indexList.contains(indexName.trim())) {
        columnFamilyDefToUpdate.addToColumn_metadata(columnDef);
      }
    }
    api.system_update_column_family(columnFamilyDefToUpdate);
  }
 catch (  InvalidRequestException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e.getMessage());
  }
catch (  SchemaDisagreementException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e.getMessage());
  }
catch (  TException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e.getMessage());
  }
catch (  NotFoundException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e.getMessage());
  }
catch (  PropertyAccessException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e.getMessage());
  }
}","/** 
 * Creates secondary indexes on columns if not already created.
 * @param tableName Column family name
 * @param poolName Pool Name
 * @param columns List of columns
 */
private void createIndexesOnColumns(String tableName,String poolName,List<Column> columns){
  String keyspace=Pelops.getDbConnPool(poolName).getKeyspace();
  try {
    Cassandra.Client api=Pelops.getDbConnPool(poolName).getConnection().getAPI();
    KsDef ksDef=api.describe_keyspace(keyspace);
    List<CfDef> cfDefs=ksDef.getCf_defs();
    CfDef columnFamilyDefToUpdate=null;
    boolean isUpdatable=false;
    for (    CfDef cfDef : cfDefs) {
      if (cfDef.getName().equals(tableName)) {
        columnFamilyDefToUpdate=cfDef;
        break;
      }
    }
    List<ColumnDef> columnMetadataList=columnFamilyDefToUpdate.getColumn_metadata();
    List<String> indexList=new ArrayList<String>();
    if (columnMetadataList != null) {
      for (      ColumnDef columnDef : columnMetadataList) {
        indexList.add(Bytes.toUTF8(columnDef.getName()));
      }
    }
    for (    Column column : columns) {
      ColumnDef columnDef=new ColumnDef();
      columnDef.setName(column.getName());
      columnDef.setValidation_class(""String_Node_Str"");
      columnDef.setIndex_type(IndexType.KEYS);
      if (!indexList.contains(Bytes.toUTF8(column.getName()))) {
        isUpdatable=true;
        columnFamilyDefToUpdate.addToColumn_metadata(columnDef);
      }
    }
    if (isUpdatable) {
      api.system_update_column_family(columnFamilyDefToUpdate);
    }
  }
 catch (  InvalidRequestException e) {
    e.printStackTrace();
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e.getMessage());
  }
catch (  SchemaDisagreementException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e.getMessage());
  }
catch (  TException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e.getMessage());
  }
catch (  NotFoundException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e.getMessage());
  }
catch (  PropertyAccessException e) {
    log.warn(""String_Node_Str"" + tableName + ""String_Node_Str""+ e.getMessage());
  }
}",0.919704660821412
176942,"/** 
 * @param node
 * @param entityMetadata
 */
protected void indexNode(Node node,EntityMetadata entityMetadata,IndexManager indexManager){
  Map<NodeLink,Node> parents=node.getParents();
  if (parents != null) {
    for (    NodeLink parentNodeLink : parents.keySet()) {
      indexManager.update(entityMetadata,node.getData(),(String)parentNodeLink.getLinkProperty(LinkProperty.LINK_VALUE),parents.get(parentNodeLink).getDataClass());
    }
  }
 else {
    indexManager.update(entityMetadata,node.getData(),null,null);
  }
}","/** 
 * @param node
 * @param entityMetadata
 */
protected void indexNode(Node node,EntityMetadata entityMetadata,IndexManager indexManager){
  Map<NodeLink,Node> parents=node.getParents();
  if (parents != null) {
    for (    NodeLink parentNodeLink : parents.keySet()) {
      indexManager.update(entityMetadata,node.getData(),(String)parentNodeLink.getLinkProperty(LinkProperty.LINK_VALUE),parents.get(parentNodeLink).getDataClass());
    }
  }
 else   if (node.getChildren() != null) {
    Map<NodeLink,Node> children=node.getChildren();
    for (    NodeLink childNodeLink : children.keySet()) {
      if (childNodeLink.getMultiplicity().equals(ForeignKey.MANY_TO_ONE)) {
        indexManager.update(entityMetadata,node.getData(),(String)childNodeLink.getLinkProperty(LinkProperty.LINK_VALUE),children.get(childNodeLink).getDataClass());
      }
 else {
        indexManager.update(entityMetadata,node.getData(),null,null);
      }
    }
  }
 else {
    indexManager.update(entityMetadata,node.getData(),null,null);
  }
}",0.667524115755627
176943,"@Override public int hashCode(){
  return getSourceNodeId().hashCode() * getTargetNodeId().hashCode();
}","@Override public int hashCode(){
  int n=getSourceNodeId().hashCode() * getTargetNodeId().hashCode();
  return n;
}",0.9041095890410958
176944,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (!(obj instanceof NodeLink)) {
    return false;
  }
  NodeLink targetNodeLink=(NodeLink)obj;
  return getSourceNodeId().equals(targetNodeLink.getSourceNodeId()) && getTargetNodeId().equals(targetNodeLink.getTargetNodeId());
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (!(obj instanceof NodeLink)) {
    return false;
  }
  NodeLink targetNodeLink=(NodeLink)obj;
  return new EqualsBuilder().append(getSourceNodeId(),targetNodeLink.getSourceNodeId()).append(getTargetNodeId(),targetNodeLink.getTargetNodeId()).isEquals();
}",0.6686746987951807
176945,"/** 
 * Recursively fetches child entities for a given entity contained in  {@link EnhanceEntity}
 * @param e
 * @param client
 * @param m
 * @param pd
 * @return
 */
public Object recursivelyFindEntities(EnhanceEntity e,Client client,EntityMetadata m,PersistenceDelegator pd){
  Map<Object,Object> relationValuesMap=new HashMap<Object,Object>();
  Client childClient=null;
  Class childClass=null;
  EntityMetadata childMetadata=null;
  for (  Relation relation : m.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      populateRelationFromJoinTable(e,childClient,m,pd,relation);
    }
 else {
      Relation.ForeignKey multiplicity=relation.getType();
      if (multiplicity.equals(Relation.ForeignKey.ONE_TO_ONE) || multiplicity.equals(Relation.ForeignKey.MANY_TO_ONE)) {
        String relationName=MetadataUtils.getMappedName(m,relation);
        Object relationValue=e.getRelations() != null ? e.getRelations().get(relationName) : null;
        childClass=relation.getTargetEntity();
        childMetadata=KunderaMetadataManager.getEntityMetadata(childClass);
        Field relationField=relation.getProperty();
        if (relationValue != null) {
          if (!relationValuesMap.containsKey(relationValue + childClass.getName()) && relationValue != null) {
            childClient=pd.getClient(childMetadata);
            Object child=null;
            if (relationValue != null) {
              if (childClass.equals(e.getEntity().getClass())) {
                child=childClient.find(childClass,relationValue.toString());
              }
 else {
                child=pd.find(childClass,relationValue.toString());
              }
            }
            relationValuesMap.put(relationValue + childClass.getName(),child);
          }
          Field biDirectionalField=getBiDirectionalField(e.getEntity().getClass(),childClass);
          onBiDirection(pd,e,client,relation,biDirectionalField,relation.getJoinColumnName(),m,relationValuesMap.get(relationValue + childClass.getName()),childMetadata,childClient);
          List<Object> collection=new ArrayList<Object>(1);
          collection.add(relationValuesMap.get(relationValue + childClass.getName()));
          PropertyAccessorHelper.set(e.getEntity(),relationField,PropertyAccessorHelper.isCollection(relationField.getType()) ? getFieldInstance(collection,relationField) : collection.get(0));
        }
      }
 else       if (multiplicity.equals(Relation.ForeignKey.ONE_TO_MANY)) {
        childClass=relation.getTargetEntity();
        childMetadata=pd.getMetadata(childClass);
        Field biDirectionalField=getBiDirectionalField(e.getEntity().getClass(),childClass);
        childClient=pd.getClient(childMetadata);
        String relationName=biDirectionalField != null ? m.getIdColumn().getName() : MetadataUtils.getMappedName(m,relation);
        String relationalValue=e.getEntityId();
        Field f=relation.getProperty();
        if (relationName != null && relationalValue != null) {
          if (!relationValuesMap.containsKey(relationalValue + childClass.getName())) {
            List<Object> childs=null;
            if (MetadataUtils.useSecondryIndex(childClient.getPersistenceUnit())) {
              childs=childClient.findByRelation(relationName,relationalValue,childClass);
            }
 else {
              if (relation.isJoinedByPrimaryKey()) {
                childs=new ArrayList();
                childs.add(childClass.equals(e.getEntity().getClass()) ? childs.add(childClient.find(childClass,e.getEntityId())) : pd.find(childClass,relationalValue.toString()));
              }
 else {
                String query=getQuery(DocumentIndexer.PARENT_ID_CLASS,e.getEntity().getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,e.getEntityId(),childClass.getCanonicalName().toLowerCase());
                Map<String,String> results=childClient.getIndexManager().search(query);
                Set<String> rsSet=new HashSet<String>(results.values());
                if (childClass.equals(e.getEntity().getClass())) {
                  childs=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
                }
 else {
                  childs=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
                }
              }
            }
            relationValuesMap.put(relationalValue + childClass.getName(),childs);
            if (childs != null) {
              for (              Object child : childs) {
                recursivelyFindEntities(new EnhanceEntity(child,PropertyAccessorHelper.getId(child,childMetadata),null),childClient,childMetadata,pd);
                onBiDirection(pd,e,client,relation,biDirectionalField,relation.getJoinColumnName(),m,child,childMetadata,childClient);
              }
            }
          }
        }
        onReflect(e.getEntity(),f,(List)relationValuesMap.get(relationalValue + childClass.getName()));
      }
    }
  }
  return e.getEntity();
}","/** 
 * Recursively fetches child entities for a given entity contained in  {@link EnhanceEntity}
 * @param e
 * @param client
 * @param m
 * @param pd
 * @return
 */
public Object recursivelyFindEntities(EnhanceEntity e,Client client,EntityMetadata m,PersistenceDelegator pd){
  Map<Object,Object> relationValuesMap=new HashMap<Object,Object>();
  Client childClient=null;
  Class childClass=null;
  EntityMetadata childMetadata=null;
  for (  Relation relation : m.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      populateRelationFromJoinTable(e,childClient,m,pd,relation);
    }
 else {
      Relation.ForeignKey multiplicity=relation.getType();
      if (multiplicity.equals(Relation.ForeignKey.ONE_TO_ONE) || multiplicity.equals(Relation.ForeignKey.MANY_TO_ONE)) {
        String relationName=MetadataUtils.getMappedName(m,relation);
        Object relationValue=e.getRelations() != null ? e.getRelations().get(relationName) : null;
        childClass=relation.getTargetEntity();
        childMetadata=KunderaMetadataManager.getEntityMetadata(childClass);
        Field relationField=relation.getProperty();
        if (relationValue != null) {
          if (!relationValuesMap.containsKey(relationValue + childClass.getName()) && relationValue != null) {
            childClient=pd.getClient(childMetadata);
            Object child=null;
            if (relationValue != null) {
              if (childClass.equals(e.getEntity().getClass())) {
                child=childClient.find(childClass,relationValue.toString());
              }
 else {
                child=pd.find(childClass,relationValue.toString());
              }
              child=child != null && child instanceof EnhanceEntity ? ((EnhanceEntity)child).getEntity() : child;
            }
            relationValuesMap.put(relationValue + childClass.getName(),child);
          }
          Field biDirectionalField=getBiDirectionalField(e.getEntity().getClass(),childClass);
          onBiDirection(pd,e,client,relation,biDirectionalField,relation.getJoinColumnName(),m,relationValuesMap.get(relationValue + childClass.getName()),childMetadata,childClient);
          List<Object> collection=new ArrayList<Object>(1);
          collection.add(relationValuesMap.get(relationValue + childClass.getName()));
          PropertyAccessorHelper.set(e.getEntity(),relationField,PropertyAccessorHelper.isCollection(relationField.getType()) ? getFieldInstance(collection,relationField) : collection.get(0));
        }
      }
 else       if (multiplicity.equals(Relation.ForeignKey.ONE_TO_MANY)) {
        childClass=relation.getTargetEntity();
        childMetadata=pd.getMetadata(childClass);
        Field biDirectionalField=getBiDirectionalField(e.getEntity().getClass(),childClass);
        childClient=pd.getClient(childMetadata);
        String relationName=biDirectionalField != null ? m.getIdColumn().getName() : MetadataUtils.getMappedName(m,relation);
        String relationalValue=e.getEntityId();
        Field f=relation.getProperty();
        if (relationName != null && relationalValue != null) {
          if (!relationValuesMap.containsKey(relationalValue + childClass.getName())) {
            List<Object> childs=null;
            if (childClass.equals(e.getEntity().getClass())) {
              childs=childClient.findAll(childClass,relationalValue.toString());
            }
 else {
              if (MetadataUtils.useSecondryIndex(childClient.getPersistenceUnit())) {
                childs=childClient.findByRelation(relationName,relationalValue,childClass);
              }
 else {
                if (relation.isJoinedByPrimaryKey()) {
                  childs=new ArrayList();
                  childs.add(childClass.equals(e.getEntity().getClass()) ? childs.add(childClient.find(childClass,e.getEntityId())) : pd.find(childClass,relationalValue.toString()));
                }
 else {
                  String query=getQuery(DocumentIndexer.PARENT_ID_CLASS,e.getEntity().getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,e.getEntityId(),childClass.getCanonicalName().toLowerCase());
                  Map<String,String> results=childClient.getIndexManager().search(query);
                  Set<String> rsSet=new HashSet<String>(results.values());
                  if (childClass.equals(e.getEntity().getClass())) {
                    childs=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
                  }
 else {
                    childs=(List<Object>)childClient.findAll(childClass,rsSet.toArray(new String[]{}));
                  }
                }
              }
            }
            if (childs != null && !childs.isEmpty()) {
              List childCol=new ArrayList(childs.size());
              for (              Object child : childs) {
                Object o=child instanceof EnhanceEntity ? ((EnhanceEntity)child).getEntity() : child;
                if (!o.getClass().equals(e.getEntity().getClass())) {
                  recursivelyFindEntities(new EnhanceEntity(o,PropertyAccessorHelper.getId(o,childMetadata),null),childClient,childMetadata,pd);
                }
                onBiDirection(pd,e,client,relation,biDirectionalField,relation.getJoinColumnName(),m,o,childMetadata,childClient);
                childCol.add(o);
              }
              relationValuesMap.put(relationalValue + childClass.getName(),childCol);
            }
          }
        }
        onReflect(e.getEntity(),f,(List)relationValuesMap.get(relationalValue + childClass.getName()));
      }
    }
  }
  return e.getEntity();
}",0.925325287573072
176946,"/** 
 * On bi direction.
 * @param e the e
 * @param client the client
 * @param objectGraph the object graph
 * @param origMetadata the orig metadata
 * @param child the child
 * @param childMetadata the child metadata
 * @param childClient the child client
 * @throws Exception the exception
 */
private void onBiDirection(PersistenceDelegator pd,EnhanceEntity e,Client client,Relation originalRelation,Field bidirectionalField,String relationName,EntityMetadata origMetadata,Object child,EntityMetadata childMetadata,Client childClient){
  if (bidirectionalField != null && child != null) {
    List obj=new ArrayList();
    Relation relation=childMetadata.getRelation(bidirectionalField.getName());
    if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
      String query=null;
      try {
        String id=PropertyAccessorHelper.getId(child,childMetadata);
        List<Object> results=null;
        if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
          if (origMetadata.isRelationViaJoinTable()) {
            Relation joinTableRelation=origMetadata.getRelation(originalRelation.getProperty().getName());
            JoinTableMetadata jtMetadata=joinTableRelation.getJoinTableMetadata();
            String joinTableName=jtMetadata.getJoinTableName();
            Set<String> joinColumns=jtMetadata.getJoinColumns();
            Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
            String joinColumnName=(String)joinColumns.toArray()[0];
            String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
            Object[] pKeys=client.findIdsByColumn(joinTableName,joinColumnName,inverseJoinColumnName,id,origMetadata.getEntityClazz());
            for (            Object key : pKeys) {
              String rlName=MetadataUtils.getMappedName(origMetadata,originalRelation);
              List keys=client.getColumnsById(joinTableName,joinColumnName,inverseJoinColumnName,key.toString());
              Object pEntity=client.find(origMetadata.getEntityClazz(),key);
              pEntity=pEntity != null && pEntity instanceof EnhanceEntity ? ((EnhanceEntity)pEntity).getEntity() : pEntity;
              List recursiveChilds=childClient.findAll(childMetadata.getEntityClazz(),keys.toArray());
              if (pEntity != null && recursiveChilds != null && !recursiveChilds.isEmpty()) {
                PropertyAccessorHelper.set(pEntity,originalRelation.getProperty(),getFieldInstance(recursiveChilds,originalRelation.getProperty()));
                if (results == null) {
                  results=new ArrayList<Object>();
                }
                results.add(pEntity);
              }
            }
          }
 else {
            results=client.findByRelation(relationName,id,origMetadata.getEntityClazz());
          }
        }
 else {
          Map<String,String> keys=null;
          if (relation.getType().equals(ForeignKey.ONE_TO_MANY)) {
            query=getQuery(DocumentIndexer.PARENT_ID_CLASS,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,id,e.getEntity().getClass().getCanonicalName().toLowerCase());
            keys=client.getIndexManager().search(query);
          }
 else {
            query=getQuery(DocumentIndexer.ENTITY_CLASS_FIELD,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,id,null);
            keys=client.getIndexManager().fetchRelation(query);
          }
          Set<String> uqSet=new HashSet<String>(keys.values());
          results=new ArrayList<Object>();
          for (          String rowKey : uqSet) {
            Object result=client.find(e.getEntity().getClass(),rowKey);
            if (result != null) {
              results.add(result);
            }
          }
        }
        if (results != null) {
          obj.addAll(results);
        }
      }
 catch (      PropertyAccessException ex) {
        log.error(""String_Node_Str"" + ex.getMessage());
        throw new EntityReaderException(""String_Node_Str"",ex);
      }
      for (      Object o : obj) {
        if (o != null && !relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
          Field f=originalRelation.getProperty();
          try {
            if (PropertyAccessorHelper.isCollection(f.getType())) {
              List l=new ArrayList();
              l.add(child);
              Object oo=getFieldInstance(l,f);
              PropertyAccessorHelper.set(o,f,oo);
            }
 else {
              PropertyAccessorHelper.set(o,f,child);
            }
          }
 catch (          PropertyAccessException e1) {
            log.error(""String_Node_Str"" + e1.getMessage());
            throw new EntityReaderException(""String_Node_Str"",e1);
          }
        }
      }
    }
 else {
      obj.add(e.getEntity());
    }
    try {
      PropertyAccessorHelper.set(child,bidirectionalField,PropertyAccessorHelper.isCollection(bidirectionalField.getType()) ? getFieldInstance(obj,bidirectionalField) : e.getEntity());
    }
 catch (    PropertyAccessException ex) {
      log.error(""String_Node_Str"" + ex.getMessage());
      throw new EntityReaderException(""String_Node_Str"",ex);
    }
  }
}","/** 
 * On bi direction.
 * @param e the e
 * @param client the client
 * @param objectGraph the object graph
 * @param origMetadata the orig metadata
 * @param child the child
 * @param childMetadata the child metadata
 * @param childClient the child client
 * @throws Exception the exception
 */
private void onBiDirection(PersistenceDelegator pd,EnhanceEntity e,Client client,Relation originalRelation,Field bidirectionalField,String relationName,EntityMetadata origMetadata,Object child,EntityMetadata childMetadata,Client childClient){
  if (bidirectionalField != null && child != null) {
    List obj=new ArrayList();
    Relation relation=childMetadata.getRelation(bidirectionalField.getName());
    if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
      String query=null;
      try {
        String id=PropertyAccessorHelper.getId(child,childMetadata);
        List<Object> results=null;
        if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
          if (origMetadata.isRelationViaJoinTable()) {
            Relation joinTableRelation=origMetadata.getRelation(originalRelation.getProperty().getName());
            JoinTableMetadata jtMetadata=joinTableRelation.getJoinTableMetadata();
            String joinTableName=jtMetadata.getJoinTableName();
            Set<String> joinColumns=jtMetadata.getJoinColumns();
            Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
            String joinColumnName=(String)joinColumns.toArray()[0];
            String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
            Object[] pKeys=client.findIdsByColumn(joinTableName,joinColumnName,inverseJoinColumnName,id,origMetadata.getEntityClazz());
            for (            Object key : pKeys) {
              String rlName=MetadataUtils.getMappedName(origMetadata,originalRelation);
              List keys=client.getColumnsById(joinTableName,joinColumnName,inverseJoinColumnName,key.toString());
              Object pEntity=client.find(origMetadata.getEntityClazz(),key);
              pEntity=pEntity != null && pEntity instanceof EnhanceEntity ? ((EnhanceEntity)pEntity).getEntity() : pEntity;
              List recursiveChilds=childClient.findAll(childMetadata.getEntityClazz(),keys.toArray());
              if (pEntity != null && recursiveChilds != null && !recursiveChilds.isEmpty()) {
                PropertyAccessorHelper.set(pEntity,originalRelation.getProperty(),getFieldInstance(recursiveChilds,originalRelation.getProperty()));
                if (results == null) {
                  results=new ArrayList<Object>();
                }
                results.add(pEntity);
              }
            }
          }
 else {
            results=client.findByRelation(relationName,id,origMetadata.getEntityClazz());
          }
        }
 else {
          Map<String,String> keys=null;
          if (relation.getType().equals(ForeignKey.ONE_TO_MANY)) {
            query=getQuery(DocumentIndexer.PARENT_ID_CLASS,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,id,e.getEntity().getClass().getCanonicalName().toLowerCase());
            keys=client.getIndexManager().search(query);
          }
 else {
            query=getQuery(DocumentIndexer.ENTITY_CLASS_FIELD,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,id,null);
            keys=client.getIndexManager().fetchRelation(query);
          }
          Set<String> uqSet=new HashSet<String>(keys.values());
          results=new ArrayList<Object>();
          for (          String rowKey : uqSet) {
            Object result=client.find(e.getEntity().getClass(),rowKey);
            if (result != null) {
              results.add(result instanceof EnhanceEntity ? ((EnhanceEntity)result).getEntity() : result);
            }
          }
        }
        if (results != null) {
          obj.addAll(results);
        }
      }
 catch (      PropertyAccessException ex) {
        log.error(""String_Node_Str"" + ex.getMessage());
        throw new EntityReaderException(""String_Node_Str"",ex);
      }
      for (      Object o : obj) {
        if (o != null && !relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
          o=o instanceof EnhanceEntity ? ((EnhanceEntity)o).getEntity() : o;
          Field f=originalRelation.getProperty();
          try {
            if (PropertyAccessorHelper.isCollection(f.getType())) {
              List l=new ArrayList();
              l.add(child);
              Object oo=getFieldInstance(l,f);
              PropertyAccessorHelper.set(o,f,oo);
            }
 else {
              PropertyAccessorHelper.set(o,f,child);
            }
          }
 catch (          PropertyAccessException e1) {
            log.error(""String_Node_Str"" + e1.getMessage());
            throw new EntityReaderException(""String_Node_Str"",e1);
          }
        }
      }
    }
 else {
      obj.add(e.getEntity());
    }
    try {
      PropertyAccessorHelper.set(child,bidirectionalField,PropertyAccessorHelper.isCollection(bidirectionalField.getType()) ? getFieldInstance(obj,bidirectionalField) : e.getEntity());
    }
 catch (    PropertyAccessException ex) {
      log.error(""String_Node_Str"" + ex.getMessage());
      throw new EntityReaderException(""String_Node_Str"",ex);
    }
  }
}",0.9859526727632696
176947,"/** 
 * Writes an entity into Persistence cache
 */
public void persist(Object e){
  EntityMetadata metadata=getMetadata(e.getClass());
  getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new TransientState(),getPersistenceCache());
  Node headNode=graph.getHeadNode();
  if (headNode.getParents() == null) {
    headNode.setHeadNode(true);
  }
  headNode.persist();
  flush();
  getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
  log.debug(""String_Node_Str"" + e.getClass());
}","/** 
 * Writes an entity into Persistence cache
 */
public void persist(Object e){
  EntityMetadata metadata=getMetadata(e.getClass());
  getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new TransientState(),getPersistenceCache());
  Node headNode=graph.getHeadNode();
  if (headNode.getParents() == null) {
    headNode.setHeadNode(true);
    getPersistenceCache().getMainCache().addHeadNode(headNode);
  }
  headNode.persist();
  flush();
  getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
  log.debug(""String_Node_Str"" + e.getClass());
}",0.9467554076539102
176948,"/** 
 * Pushes <code>node</code> and its descendants recursively to flush stack residing into persistence cache
 * @param pc
 * @param node
 */
public void addNodesToFlushStack(PersistenceCache pc,Node node){
  FlushStack flushStack=pc.getFlushStack();
  MainCache mainCache=(MainCache)pc.getMainCache();
  Map<NodeLink,Node> children=node.getChildren();
  if (children != null) {
    Map<NodeLink,Node> oneToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> oneToManyChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToManyChildren=new HashMap<NodeLink,Node>();
    for (    NodeLink nodeLink : children.keySet()) {
      Relation.ForeignKey multiplicity=nodeLink.getMultiplicity();
switch (multiplicity) {
case ONE_TO_ONE:
        oneToOneChildren.put(nodeLink,children.get(nodeLink));
      break;
case ONE_TO_MANY:
    oneToManyChildren.put(nodeLink,children.get(nodeLink));
  break;
case MANY_TO_ONE:
manyToOneChildren.put(nodeLink,children.get(nodeLink));
break;
case MANY_TO_MANY:
manyToManyChildren.put(nodeLink,children.get(nodeLink));
break;
}
}
for (NodeLink nodeLink : oneToManyChildren.keySet()) {
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
if (!childNode.isTraversed()) {
addNodesToFlushStack(pc,childNode);
}
}
for (NodeLink nodeLink : manyToManyChildren.keySet()) {
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
if (childNode != null) {
if (node.isDirty() && !node.isTraversed()) {
JoinTableMetadata jtmd=(JoinTableMetadata)nodeLink.getLinkProperty(LinkProperty.JOIN_TABLE_METADATA);
String joinColumnName=(String)jtmd.getJoinColumns().toArray()[0];
String inverseJoinColumnName=(String)jtmd.getInverseJoinColumns().toArray()[0];
Object entityId=ObjectGraphBuilder.getEntityId(node.getNodeId());
Object childId=ObjectGraphBuilder.getEntityId(childNode.getNodeId());
Set<Object> childValues=new HashSet<Object>();
childValues.add(childId);
OPERATION operation=null;
if (node.getCurrentNodeState().getClass().equals(ManagedState.class)) {
operation=OPERATION.INSERT;
}
 else if (node.getCurrentNodeState().getClass().equals(RemovedState.class)) {
operation=OPERATION.DELETE;
}
pc.addJoinTableDataIntoMap(operation,jtmd.getJoinTableName(),joinColumnName,inverseJoinColumnName,node.getDataClass(),entityId,childValues);
}
if (!childNode.isTraversed()) {
addNodesToFlushStack(pc,childNode);
}
}
}
for (NodeLink nodeLink : oneToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
flushStack.push(node);
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
addNodesToFlushStack(pc,childNode);
}
}
for (NodeLink nodeLink : manyToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
flushStack.push(node);
}
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
Map<NodeLink,Node> parents=childNode.getParents();
for (NodeLink parentLink : parents.keySet()) {
Relation.ForeignKey multiplicity=parentLink.getMultiplicity();
if (multiplicity.equals(Relation.ForeignKey.MANY_TO_ONE)) {
Node parentNode=parents.get(parentLink);
if (!parentNode.isTraversed() && parentNode.isDirty()) {
addNodesToFlushStack(pc,parentNode);
}
}
}
if (!childNode.isTraversed() && childNode.isDirty()) {
addNodesToFlushStack(pc,childNode);
}
 else if (!childNode.isDirty()) {
childNode.setTraversed(true);
flushStack.push(childNode);
}
}
}
if (!node.isTraversed() && node.isDirty()) {
node.setTraversed(true);
flushStack.push(node);
}
}","/** 
 * Pushes <code>node</code> and its descendants recursively to flush stack residing into persistence cache
 * @param pc
 * @param node
 */
public void addNodesToFlushStack(PersistenceCache pc,Node node){
  FlushStack flushStack=pc.getFlushStack();
  MainCache mainCache=(MainCache)pc.getMainCache();
  Map<NodeLink,Node> children=node.getChildren();
  if (children != null) {
    Map<NodeLink,Node> oneToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> oneToManyChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToManyChildren=new HashMap<NodeLink,Node>();
    for (    NodeLink nodeLink : children.keySet()) {
      Relation.ForeignKey multiplicity=nodeLink.getMultiplicity();
switch (multiplicity) {
case ONE_TO_ONE:
        oneToOneChildren.put(nodeLink,children.get(nodeLink));
      break;
case ONE_TO_MANY:
    oneToManyChildren.put(nodeLink,children.get(nodeLink));
  break;
case MANY_TO_ONE:
manyToOneChildren.put(nodeLink,children.get(nodeLink));
break;
case MANY_TO_MANY:
manyToManyChildren.put(nodeLink,children.get(nodeLink));
break;
}
}
for (NodeLink nodeLink : oneToManyChildren.keySet()) {
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
if (!childNode.isTraversed()) {
addNodesToFlushStack(pc,childNode);
}
}
for (NodeLink nodeLink : manyToManyChildren.keySet()) {
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
if (childNode != null) {
if (node.isDirty() && !node.isTraversed()) {
JoinTableMetadata jtmd=(JoinTableMetadata)nodeLink.getLinkProperty(LinkProperty.JOIN_TABLE_METADATA);
if (jtmd != null) {
String joinColumnName=(String)jtmd.getJoinColumns().toArray()[0];
String inverseJoinColumnName=(String)jtmd.getInverseJoinColumns().toArray()[0];
Object entityId=ObjectGraphBuilder.getEntityId(node.getNodeId());
Object childId=ObjectGraphBuilder.getEntityId(childNode.getNodeId());
Set<Object> childValues=new HashSet<Object>();
childValues.add(childId);
OPERATION operation=null;
if (node.getCurrentNodeState().getClass().equals(ManagedState.class)) {
operation=OPERATION.INSERT;
}
 else if (node.getCurrentNodeState().getClass().equals(RemovedState.class)) {
operation=OPERATION.DELETE;
}
pc.addJoinTableDataIntoMap(operation,jtmd.getJoinTableName(),joinColumnName,inverseJoinColumnName,node.getDataClass(),entityId,childValues);
}
}
if (!childNode.isTraversed()) {
addNodesToFlushStack(pc,childNode);
}
}
}
for (NodeLink nodeLink : oneToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
flushStack.push(node);
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
addNodesToFlushStack(pc,childNode);
}
}
for (NodeLink nodeLink : manyToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
flushStack.push(node);
}
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
Map<NodeLink,Node> parents=childNode.getParents();
for (NodeLink parentLink : parents.keySet()) {
Relation.ForeignKey multiplicity=parentLink.getMultiplicity();
if (multiplicity.equals(Relation.ForeignKey.MANY_TO_ONE)) {
Node parentNode=parents.get(parentLink);
if (!parentNode.isTraversed() && parentNode.isDirty()) {
addNodesToFlushStack(pc,parentNode);
}
}
}
if (!childNode.isTraversed() && childNode.isDirty()) {
addNodesToFlushStack(pc,childNode);
}
 else if (!childNode.isDirty()) {
childNode.setTraversed(true);
flushStack.push(childNode);
}
}
}
if (!node.isTraversed() && node.isDirty()) {
node.setTraversed(true);
flushStack.push(node);
}
}",0.9969153112731352
176949,"/** 
 * Sets an object onto a field.
 * @param target the target
 * @param field the field
 * @param value the value
 * @throws PropertyAccessException the property access exception
 */
public static void set(Object target,Field field,Object value){
  if (!field.isAccessible()) {
    field.setAccessible(true);
  }
  try {
    field.set(target,value);
  }
 catch (  IllegalArgumentException iarg) {
    throw new PropertyAccessException(iarg);
  }
catch (  IllegalAccessException iacc) {
    throw new PropertyAccessException(iacc);
  }
}","/** 
 * Sets an object onto a field.
 * @param target the target
 * @param field the field
 * @param value the value
 * @throws PropertyAccessException the property access exception
 */
public static void set(Object target,Field field,Object value){
  if (target instanceof EnhanceEntity || value instanceof EnhanceEntity) {
    System.out.println(""String_Node_Str"");
  }
  if (!field.isAccessible()) {
    field.setAccessible(true);
  }
  try {
    field.set(target,value);
  }
 catch (  IllegalArgumentException iarg) {
    throw new PropertyAccessException(iarg);
  }
catch (  IllegalAccessException iacc) {
    throw new PropertyAccessException(iacc);
  }
}",0.8983333333333333
176950,"@Override public final <E>List<E> findAll(Class<E> entityClass,Object... rowIds){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  List<E> results=new ArrayList<E>();
  for (  Object rowKey : rowIds) {
    E r=(E)find(entityClass,entityMetadata,rowKey.toString(),null);
    if (r != null) {
      results.add(r);
    }
  }
  return results.isEmpty() ? null : results;
}","@Override public final <E>List<E> findAll(Class<E> entityClass,Object... rowIds){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass);
  List<E> results=new ArrayList<E>();
  for (  Object rowKey : rowIds) {
    E r=(E)find(entityClass,entityMetadata,rowKey.toString(),entityMetadata.getRelationNames());
    if (r != null) {
      results.add(r);
    }
  }
  return results.isEmpty() ? null : results;
}",0.9563164108618654
176951,"/** 
 * On association using lucene.
 * @param m the m
 * @param client the client
 * @param ls the ls
 * @return the list
 */
protected List<EnhanceEntity> onAssociationUsingLucene(EntityMetadata m,Client client,List<EnhanceEntity> ls){
  Set<String> rSet=fetchDataFromLucene(client);
  List resultList=client.findAll(m.getEntityClazz(),rSet.toArray(new String[]{}));
  return transform(m,ls,resultList);
}","/** 
 * On association using lucene.
 * @param m the m
 * @param client the client
 * @param ls the ls
 * @return the list
 */
protected List<EnhanceEntity> onAssociationUsingLucene(EntityMetadata m,Client client,List<EnhanceEntity> ls){
  Set<String> rSet=fetchDataFromLucene(client);
  List resultList=client.findAll(m.getEntityClazz(),rSet.toArray(new String[]{}));
  return m.getRelationNames() != null && !m.getRelationNames().isEmpty() ? resultList : transform(m,ls,resultList);
}",0.9115341545352744
176952,"@Override public void writeData(String tableName,EntityMetadata m,Object entity,String rowId,List<RelationHolder> relations) throws IOException {
  HTable hTable=gethTable(tableName);
  List<EmbeddedColumn> columnFamilies=m.getEmbeddedColumnsAsList();
  for (  EmbeddedColumn columnFamily : columnFamilies) {
    String columnFamilyName=columnFamily.getName();
    Field columnFamilyField=columnFamily.getField();
    Object columnFamilyObject=null;
    try {
      columnFamilyObject=PropertyAccessorHelper.getObject(entity,columnFamilyField);
    }
 catch (    PropertyAccessException e1) {
      log.error(""String_Node_Str"" + columnFamilyName + ""String_Node_Str""+ entity);
      return;
    }
    if (columnFamilyObject == null) {
      continue;
    }
    List<Column> columns=columnFamily.getColumns();
    if (columnFamilyObject instanceof Collection) {
      String dynamicCFName=null;
      ElementCollectionCacheManager ecCacheHandler=ElementCollectionCacheManager.getInstance();
      if (ecCacheHandler.isCacheEmpty()) {
        int count=0;
        for (        Object obj : (Collection)columnFamilyObject) {
          dynamicCFName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + count;
          addColumnFamilyToTable(tableName,dynamicCFName);
          hbaseWriter.writeColumns(hTable,dynamicCFName,rowId,columns,obj);
          count++;
        }
      }
 else {
        int lastEmbeddedObjectCount=ecCacheHandler.getLastElementCollectionObjectCount(rowId);
        for (        Object obj : (Collection)columnFamilyObject) {
          dynamicCFName=ecCacheHandler.getElementCollectionObjectName(rowId,obj);
          if (dynamicCFName == null) {
            dynamicCFName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + (++lastEmbeddedObjectCount);
          }
        }
        ecCacheHandler.clearCache();
      }
    }
 else {
      if (columnFamilyField.isAnnotationPresent(Embedded.class)) {
        hbaseWriter.writeColumns(hTable,columnFamilyName,rowId,columns,columnFamilyObject);
      }
 else {
        hbaseWriter.writeColumn(hTable,columnFamilyName,rowId,columns.get(0),columnFamilyObject);
      }
    }
  }
  List<Column> columns=m.getColumnsAsList();
  if (columns != null && !columns.isEmpty()) {
    hbaseWriter.writeColumns(hTable,rowId,columns,entity);
  }
  boolean containsEmbeddedObjectsOnly=(columns == null || columns.isEmpty());
  if (relations != null && !relations.isEmpty()) {
    hbaseWriter.writeRelations(hTable,rowId,containsEmbeddedObjectsOnly,relations);
  }
  puthTable(hTable);
}","@Override public void writeData(String tableName,EntityMetadata m,Object entity,String rowId,List<RelationHolder> relations) throws IOException {
  HTable hTable=gethTable(tableName);
  List<EmbeddedColumn> columnFamilies=m.getEmbeddedColumnsAsList();
  for (  EmbeddedColumn columnFamily : columnFamilies) {
    String columnFamilyName=columnFamily.getName();
    Field columnFamilyField=columnFamily.getField();
    Object columnFamilyObject=null;
    try {
      columnFamilyObject=PropertyAccessorHelper.getObject(entity,columnFamilyField);
    }
 catch (    PropertyAccessException e1) {
      log.error(""String_Node_Str"" + columnFamilyName + ""String_Node_Str""+ entity);
      return;
    }
    if (columnFamilyObject == null) {
      continue;
    }
    List<Column> columns=columnFamily.getColumns();
    if (columnFamilyObject instanceof Collection) {
      String dynamicCFName=null;
      ElementCollectionCacheManager ecCacheHandler=ElementCollectionCacheManager.getInstance();
      if (ecCacheHandler.isCacheEmpty()) {
        int count=0;
        for (        Object obj : (Collection)columnFamilyObject) {
          dynamicCFName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + count;
          addColumnFamilyToTable(tableName,dynamicCFName);
          hbaseWriter.writeColumns(hTable,dynamicCFName,rowId,columns,obj);
          count++;
        }
      }
 else {
        int lastEmbeddedObjectCount=ecCacheHandler.getLastElementCollectionObjectCount(rowId);
        for (        Object obj : (Collection)columnFamilyObject) {
          dynamicCFName=ecCacheHandler.getElementCollectionObjectName(rowId,obj);
          if (dynamicCFName == null) {
            dynamicCFName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + (++lastEmbeddedObjectCount);
          }
          addColumnFamilyToTable(tableName,dynamicCFName);
          hbaseWriter.writeColumns(hTable,dynamicCFName,rowId,columns,obj);
        }
        ecCacheHandler.clearCache();
      }
    }
 else {
      if (columnFamilyField.isAnnotationPresent(Embedded.class)) {
        hbaseWriter.writeColumns(hTable,columnFamilyName,rowId,columns,columnFamilyObject);
      }
 else {
        hbaseWriter.writeColumn(hTable,columnFamilyName,rowId,columns.get(0),columnFamilyObject);
      }
    }
  }
  List<Column> columns=m.getColumnsAsList();
  if (columns != null && !columns.isEmpty()) {
    hbaseWriter.writeColumns(hTable,rowId,columns,entity);
  }
  boolean containsEmbeddedObjectsOnly=(columns == null || columns.isEmpty());
  if (relations != null && !relations.isEmpty()) {
    hbaseWriter.writeRelations(hTable,rowId,containsEmbeddedObjectsOnly,relations);
  }
  puthTable(hTable);
}",0.9123073996575994
176953,"/** 
 * Updates the index for an object.
 * @param metadata the metadata
 * @param entity the entity
 */
public final void update(EntityMetadata metadata,Object entity,String parentId,Class<?> clazz){
  try {
    if (!MetadataUtils.useSecondryIndex(metadata.getPersistenceUnit())) {
      String id=PropertyAccessorHelper.getId(entity,metadata);
      boolean documentExists=indexer.entityExistsInIndex(entity.getClass());
      if (documentExists) {
        indexer.unindex(metadata,id);
      }
      indexer.index(metadata,entity,parentId,clazz);
    }
  }
 catch (  PropertyAccessException e) {
    throw new IndexingException(""String_Node_Str"" + metadata.getEntityClazz(),e);
  }
}","/** 
 * Updates the index for an object.
 * @param metadata the metadata
 * @param entity the entity
 */
public final void update(EntityMetadata metadata,Object entity,String parentId,Class<?> clazz){
  try {
    if (!MetadataUtils.useSecondryIndex(metadata.getPersistenceUnit())) {
      String id=PropertyAccessorHelper.getId(entity,metadata);
      boolean documentExists=indexer.entityExistsInIndex(entity.getClass());
      if (documentExists) {
        indexer.unindex(metadata,id);
        indexer.flush();
      }
      indexer.index(metadata,entity,parentId,clazz);
    }
  }
 catch (  PropertyAccessException e) {
    throw new IndexingException(""String_Node_Str"" + metadata.getEntityClazz(),e);
  }
}",0.9821045096635648
176954,"public <E>E merge(E e){
  log.debug(""String_Node_Str"" + e);
  EntityMetadata m=getMetadata(e.getClass());
  getEventDispatcher().fireEventListeners(m,e,PreUpdate.class);
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new ManagedState(),getPersistenceCache());
  Node headNode=graph.getHeadNode();
  if (headNode.getParents() == null) {
    headNode.setHeadNode(true);
  }
  headNode.merge();
  flush();
  getEventDispatcher().fireEventListeners(m,e,PostUpdate.class);
  return e;
}","public <E>E merge(E e){
  log.debug(""String_Node_Str"" + e);
  EntityMetadata m=getMetadata(e.getClass());
  getEventDispatcher().fireEventListeners(m,e,PreUpdate.class);
  ObjectGraph graph=graphBuilder.getObjectGraph(e,new ManagedState(),getPersistenceCache());
  Node headNode=graph.getHeadNode();
  if (headNode.getParents() == null) {
    headNode.setHeadNode(true);
  }
  headNode.merge();
  flush();
  getEventDispatcher().fireEventListeners(m,e,PostUpdate.class);
  return (E)headNode.getData();
}",0.9777327935222672
176955,"/** 
 * @param node
 * @param entityMetadata
 */
protected void indexNode(Node node,EntityMetadata entityMetadata,IndexManager indexManager){
  Map<NodeLink,Node> parents=node.getParents();
  if (parents != null) {
    for (    NodeLink parentNodeLink : parents.keySet()) {
      indexManager.write(entityMetadata,node.getData(),(String)parentNodeLink.getLinkProperty(LinkProperty.LINK_VALUE),parents.get(parentNodeLink).getDataClass());
    }
  }
 else {
    indexManager.write(entityMetadata,node.getData());
  }
}","/** 
 * @param node
 * @param entityMetadata
 */
protected void indexNode(Node node,EntityMetadata entityMetadata,IndexManager indexManager){
  Map<NodeLink,Node> parents=node.getParents();
  if (parents != null) {
    for (    NodeLink parentNodeLink : parents.keySet()) {
      indexManager.update(entityMetadata,node.getData(),(String)parentNodeLink.getLinkProperty(LinkProperty.LINK_VALUE),parents.get(parentNodeLink).getDataClass());
    }
  }
 else {
    indexManager.update(entityMetadata,node.getData(),null,null);
  }
}",0.9770114942528736
176956,"/** 
 * Constructs and returns   {@link Node} representation for a given entity object.Output is fully constructed graph with relationships embedded. Each node is put into <code>graph</code> once it is constructed.
 * @param entity
 * @return
 */
private Node getNode(Object entity,ObjectGraph graph,NodeState initialNodeState){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
  String nodeId=getNodeId(id,entity);
  if (graph.getNode(nodeId) != null) {
    return null;
  }
  Node node=null;
  Node nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
  Object nodeDataCopy=ObjectUtils.deepCopy(entity);
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,nodeDataCopy,initialNodeState,persistenceCache);
  }
 else {
    node=nodeInPersistenceCache;
    if (!DeepEquals.deepEquals(node.getData(),entity)) {
      node.setData(nodeDataCopy);
      node.setDirty(true);
    }
  }
  graph.addNode(nodeId,node);
  for (  Relation relation : entityMetadata.getRelations()) {
    Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (childObject != null) {
      if (Collection.class.isAssignableFrom(childObject.getClass())) {
        Collection childrenObjects=(Collection)childObject;
        for (        Object childObj : childrenObjects) {
          if (childObj != null) {
            addChildNodesToGraph(graph,node,relation,childObj,initialNodeState);
          }
        }
      }
 else {
        addChildNodesToGraph(graph,node,relation,childObject,initialNodeState);
      }
    }
  }
  return node;
}","/** 
 * Constructs and returns   {@link Node} representation for a given entity object.Output is fully constructed graph with relationships embedded. Each node is put into <code>graph</code> once it is constructed.
 * @param entity
 * @return
 */
private Node getNode(Object entity,ObjectGraph graph,NodeState initialNodeState){
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  Object id=PropertyAccessorHelper.getId(entity,entityMetadata);
  String nodeId=getNodeId(id,entity);
  if (graph.getNode(nodeId) != null) {
    return null;
  }
  Node node=null;
  Node nodeInPersistenceCache=persistenceCache.getMainCache().getNodeFromCache(nodeId);
  Object nodeDataCopy=ObjectUtils.deepCopy(entity);
  if (nodeInPersistenceCache == null) {
    node=new Node(nodeId,nodeDataCopy,initialNodeState,persistenceCache);
  }
 else {
    node=nodeInPersistenceCache;
    if (!DeepEquals.deepEquals(node.getData(),entity)) {
      node.setData(nodeDataCopy);
      node.setDirty(true);
    }
 else {
      node.setDirty(false);
    }
  }
  graph.addNode(nodeId,node);
  for (  Relation relation : entityMetadata.getRelations()) {
    Object childObject=PropertyAccessorHelper.getObject(entity,relation.getProperty());
    if (childObject != null) {
      if (Collection.class.isAssignableFrom(childObject.getClass())) {
        Collection childrenObjects=(Collection)childObject;
        for (        Object childObj : childrenObjects) {
          if (childObj != null) {
            addChildNodesToGraph(graph,node,relation,childObj,initialNodeState);
          }
        }
      }
 else {
        addChildNodesToGraph(graph,node,relation,childObject,initialNodeState);
      }
    }
  }
  return node;
}",0.9877764842840512
176957,"/** 
 * Updates the index for an object.
 * @param metadata the metadata
 * @param entity the entity
 */
public final void update(EntityMetadata metadata,Object entity){
  try {
    if (!MetadataUtils.useSecondryIndex(metadata.getPersistenceUnit())) {
      String id=PropertyAccessorHelper.getId(entity,metadata);
      indexer.unindex(metadata,id);
      indexer.index(metadata,entity);
    }
  }
 catch (  PropertyAccessException e) {
    throw new IndexingException(""String_Node_Str"" + metadata.getEntityClazz(),e);
  }
}","/** 
 * Updates the index for an object.
 * @param metadata the metadata
 * @param entity the entity
 */
public final void update(EntityMetadata metadata,Object entity,String parentId,Class<?> clazz){
  try {
    if (!MetadataUtils.useSecondryIndex(metadata.getPersistenceUnit())) {
      String id=PropertyAccessorHelper.getId(entity,metadata);
      boolean entityExists=indexer.entityExistsInIndex(entity.getClass());
      if (entityExists) {
        indexer.unindex(metadata,id);
      }
      indexer.index(metadata,entity,parentId,clazz);
    }
  }
 catch (  PropertyAccessException e) {
    throw new IndexingException(""String_Node_Str"" + metadata.getEntityClazz(),e);
  }
}",0.8218724109362054
176958,"@Override public void handleMerge(NodeStateContext nodeStateContext){
  nodeStateContext.setDirty(true);
  nodeStateContext.getPersistenceCache().getMainCache().addNodeToCache((Node)nodeStateContext);
  recursivelyPerformOperation(nodeStateContext,OPERATION.MERGE);
}","@Override public void handleMerge(NodeStateContext nodeStateContext){
  nodeStateContext.getPersistenceCache().getMainCache().addNodeToCache((Node)nodeStateContext);
  recursivelyPerformOperation(nodeStateContext,OPERATION.MERGE);
}",0.9298597194388778
176959,"/** 
 * Insert record in join table.
 * @param joinTableName the join table name
 * @param joinColumnName the join column name
 * @param inverseJoinColumnName the inverse join column name
 * @param relMetadata the rel metadata
 * @param parentId the parent id
 * @param child the child
 */
private void insertRecordInJoinTable(String joinTableName,String joinColumnName,String inverseJoinColumnName,Object parentId,Set<Object> childrenIds){
  Session s=getSessionInstance();
  Transaction tx=s.beginTransaction();
  for (  Object childId : childrenIds) {
    StringBuffer query=new StringBuffer();
    query.append(""String_Node_Str"").append(joinTableName).append(""String_Node_Str"").append(joinColumnName).append(""String_Node_Str"").append(inverseJoinColumnName).append(""String_Node_Str"").append(""String_Node_Str"").append(parentId).append(""String_Node_Str"").append(childId).append(""String_Node_Str"");
    s.createSQLQuery(query.toString()).executeUpdate();
  }
  tx.commit();
}","/** 
 * Insert record in join table.
 * @param joinTableName the join table name
 * @param joinColumnName the join column name
 * @param inverseJoinColumnName the inverse join column name
 * @param relMetadata the rel metadata
 * @param parentId the parent id
 * @param child the child
 */
private void insertRecordInJoinTable(String joinTableName,String joinColumnName,String inverseJoinColumnName,Object parentId,Set<Object> childrenIds){
  Session s=getStatefulSession();
  Transaction tx=s.beginTransaction();
  for (  Object childId : childrenIds) {
    StringBuffer query=new StringBuffer();
    query.append(""String_Node_Str"").append(joinTableName).append(""String_Node_Str"").append(joinColumnName).append(""String_Node_Str"").append(inverseJoinColumnName).append(""String_Node_Str"").append(""String_Node_Str"").append(parentId).append(""String_Node_Str"").append(childId).append(""String_Node_Str"");
    s.createSQLQuery(query.toString()).executeUpdate();
  }
  tx.commit();
}",0.9856410256410256
176960,"@Override public void delete(Object entity,Object pKey){
  Session s=getSessionInstance();
  Transaction tx=s.beginTransaction();
  s.delete(entity);
  tx.commit();
  s.close();
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (!MetadataUtils.useSecondryIndex(getPersistenceUnit())) {
    getIndexManager().remove(metadata,entity,pKey.toString());
  }
}","@Override public void delete(Object entity,Object pKey){
  Session s=getStatefulSession();
  Transaction tx=s.beginTransaction();
  s.delete(entity);
  tx.commit();
  s.close();
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(entity.getClass());
  if (!MetadataUtils.useSecondryIndex(getPersistenceUnit())) {
    getIndexManager().remove(metadata,entity,pKey.toString());
  }
}",0.9646464646464646
176961,"public List<Object> findByRelation(String colName,String colValue,Class entityClazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  String tableName=m.getTableName();
  String aliasName=""String_Node_Str"" + tableName;
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(tableName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(colName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(colValue);
  queryBuilder.append(""String_Node_Str"");
  Session s=getSessionInstance();
  s.beginTransaction();
  SQLQuery q=s.createSQLQuery(queryBuilder.toString()).addEntity(m.getEntityClazz());
  return q.list();
}","public List<Object> findByRelation(String colName,String colValue,Class entityClazz){
  EntityMetadata m=KunderaMetadataManager.getEntityMetadata(entityClazz);
  String tableName=m.getTableName();
  String aliasName=""String_Node_Str"" + tableName;
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(tableName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(colName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(colValue);
  queryBuilder.append(""String_Node_Str"");
  Session s=getStatefulSession();
  s.beginTransaction();
  SQLQuery q=s.createSQLQuery(queryBuilder.toString()).addEntity(m.getEntityClazz());
  return q.list();
}",0.9850905218317358
176962,"public void deleteByColumn(String tableName,String columnName,Object columnValue){
  StringBuffer query=new StringBuffer();
  query.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(""String_Node_Str"").append(columnValue).append(""String_Node_Str"");
  Session s=getSessionInstance();
  Transaction tx=s.beginTransaction();
  s.createSQLQuery(query.toString()).executeUpdate();
  tx.commit();
}","public void deleteByColumn(String tableName,String columnName,Object columnValue){
  StringBuffer query=new StringBuffer();
  query.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(""String_Node_Str"").append(columnValue).append(""String_Node_Str"");
  Session s=getStatefulSession();
  Transaction tx=s.beginTransaction();
  s.createSQLQuery(query.toString()).executeUpdate();
  tx.commit();
}",0.9697624190064796
176963,"/** 
 * Find.
 * @param nativeQuery the native query
 * @param relations the relations
 * @param m the m
 * @return the list
 */
public List find(String nativeQuery,List<String> relations,EntityMetadata m){
  List<Object[]> result=new ArrayList<Object[]>();
  s=sf.openStatelessSession();
  s.beginTransaction();
  SQLQuery q=s.createSQLQuery(nativeQuery).addEntity(m.getEntityClazz());
  for (  String r : relations) {
    if (!m.getIdColumn().getName().equalsIgnoreCase(r)) {
      q.addScalar(r);
    }
  }
  return q.list();
}","/** 
 * Find.
 * @param nativeQuery the native fquery
 * @param relations the relations
 * @param m the m
 * @return the list
 */
public List find(String nativeQuery,List<String> relations,EntityMetadata m){
  List<Object[]> result=new ArrayList<Object[]>();
  s=sf.openStatelessSession();
  s.beginTransaction();
  SQLQuery q=s.createSQLQuery(nativeQuery).addEntity(m.getEntityClazz());
  for (  String r : relations) {
    if (!m.getIdColumn().getName().equalsIgnoreCase(r)) {
      q.addScalar(r);
    }
  }
  return q.list();
}",0.9990574929311968
176964,"@Override public void persist(Node node){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
  String id=ObjectGraphBuilder.getEntityId(node.getNodeId());
  Session s;
  Transaction tx;
  try {
    s=getSessionInstance();
    tx=s.beginTransaction();
    s.persist(node.getData());
    tx.commit();
  }
 catch (  org.hibernate.exception.ConstraintViolationException e) {
    log.info(e.getMessage());
  }
catch (  HibernateException e) {
    log.info(e.getMessage());
  }
  List<RelationHolder> relationHolders=getRelationHolders(node);
  for (  RelationHolder rh : relationHolders) {
    String linkName=rh.getRelationName();
    String linkValue=rh.getRelationValue();
    if (linkName != null && linkValue != null) {
      s=getSessionInstance();
      tx=s.beginTransaction();
      String updateSql=""String_Node_Str"" + metadata.getTableName() + ""String_Node_Str""+ linkName+ ""String_Node_Str""+ linkValue+ ""String_Node_Str""+ metadata.getIdColumn().getName()+ ""String_Node_Str""+ id+ ""String_Node_Str"";
      s.createSQLQuery(updateSql).executeUpdate();
      tx.commit();
    }
  }
  if (!MetadataUtils.useSecondryIndex(getPersistenceUnit())) {
    indexNode(node,metadata,getIndexManager());
  }
}","@Override public void persist(Node node){
  EntityMetadata metadata=KunderaMetadataManager.getEntityMetadata(node.getDataClass());
  String id=ObjectGraphBuilder.getEntityId(node.getNodeId());
  try {
    s=getStatelessSession();
    Transaction tx=s.beginTransaction();
    s.insert(node.getData());
    tx.commit();
  }
 catch (  org.hibernate.exception.ConstraintViolationException e) {
    log.info(e.getMessage());
  }
catch (  HibernateException e) {
    log.info(e.getMessage());
  }
  List<RelationHolder> relationHolders=getRelationHolders(node);
  for (  RelationHolder rh : relationHolders) {
    String linkName=rh.getRelationName();
    String linkValue=rh.getRelationValue();
    if (linkName != null && linkValue != null) {
      s=getStatelessSession();
      Transaction tx=s.beginTransaction();
      String updateSql=""String_Node_Str"" + metadata.getTableName() + ""String_Node_Str""+ linkName+ ""String_Node_Str""+ linkValue+ ""String_Node_Str""+ metadata.getIdColumn().getName()+ ""String_Node_Str""+ id+ ""String_Node_Str"";
      s.createSQLQuery(updateSql).executeUpdate();
      tx.commit();
    }
  }
  if (!MetadataUtils.useSecondryIndex(getPersistenceUnit())) {
    indexNode(node,metadata,getIndexManager());
  }
}",0.934412955465587
176965,"public static void clearPersistenceCache(){
  PersistenceCache pc=PersistenceCache.INSTANCE;
  pc.clean();
}","public void clearPersistenceCache(){
  persistenceCache.clean();
}",0.7586206896551724
176966,"public static String getNodeId(Object pk,Class<?> objectClass){
  return objectClass.getName() + Constants.NODE_ID_SEPARATOR + (String)pk;
}","public static String getNodeId(Object pk,Class<?> objectClass){
  return objectClass.getName() + Constants.NODE_ID_SEPARATOR + pk.toString();
}",0.9681978798586572
176967,"/** 
 * @param node
 * @return
 */
protected List<RelationHolder> getRelationHolders(Node node){
  List<RelationHolder> relationsHolder=new ArrayList<RelationHolder>();
  Map<NodeLink,Node> parents=node.getParents();
  Map<NodeLink,Node> children=node.getChildren();
  if (parents != null && !parents.isEmpty()) {
    for (    NodeLink parentNodeLink : parents.keySet()) {
      String linkName=(String)parentNodeLink.getLinkProperty(LinkProperty.LINK_NAME);
      String linkValue=(String)parentNodeLink.getLinkProperty(LinkProperty.LINK_VALUE);
      boolean isSharedByPrimaryKey=(Boolean)parentNodeLink.getLinkProperty(LinkProperty.IS_SHARED_BY_PRIMARY_KEY);
      if (linkName != null && linkValue != null && !isSharedByPrimaryKey) {
        RelationHolder relationHolder=new RelationHolder(linkName,linkValue);
        relationsHolder.add(relationHolder);
      }
    }
  }
  if (children != null && !children.isEmpty()) {
    for (    NodeLink childNodeLink : children.keySet()) {
      String linkName=(String)childNodeLink.getLinkProperty(LinkProperty.LINK_NAME);
      String linkValue=(String)childNodeLink.getLinkProperty(LinkProperty.LINK_VALUE);
      boolean isSharedByPrimaryKey=(Boolean)childNodeLink.getLinkProperty(LinkProperty.IS_SHARED_BY_PRIMARY_KEY);
      if (linkName != null && linkValue != null && !isSharedByPrimaryKey) {
        RelationHolder relationHolder=new RelationHolder(linkName,linkValue);
        relationsHolder.add(relationHolder);
      }
    }
  }
  return relationsHolder;
}","/** 
 * @param node
 * @return
 */
protected List<RelationHolder> getRelationHolders(Node node){
  List<RelationHolder> relationsHolder=new ArrayList<RelationHolder>();
  Map<NodeLink,Node> parents=node.getParents();
  Map<NodeLink,Node> children=node.getChildren();
  if (parents != null && !parents.isEmpty()) {
    for (    NodeLink parentNodeLink : parents.keySet()) {
      String linkName=(String)parentNodeLink.getLinkProperty(LinkProperty.LINK_NAME);
      String linkValue=(String)parentNodeLink.getLinkProperty(LinkProperty.LINK_VALUE);
      boolean isSharedByPrimaryKey=(Boolean)parentNodeLink.getLinkProperty(LinkProperty.IS_SHARED_BY_PRIMARY_KEY);
      Relation.ForeignKey multiplicity=parentNodeLink.getMultiplicity();
      if (linkName != null && linkValue != null && !isSharedByPrimaryKey && multiplicity.equals(ForeignKey.ONE_TO_MANY)) {
        RelationHolder relationHolder=new RelationHolder(linkName,linkValue);
        relationsHolder.add(relationHolder);
      }
    }
  }
  if (children != null && !children.isEmpty()) {
    for (    NodeLink childNodeLink : children.keySet()) {
      String linkName=(String)childNodeLink.getLinkProperty(LinkProperty.LINK_NAME);
      String linkValue=(String)childNodeLink.getLinkProperty(LinkProperty.LINK_VALUE);
      boolean isSharedByPrimaryKey=(Boolean)childNodeLink.getLinkProperty(LinkProperty.IS_SHARED_BY_PRIMARY_KEY);
      Relation.ForeignKey multiplicity=childNodeLink.getMultiplicity();
      if (linkName != null && linkValue != null && !isSharedByPrimaryKey && (multiplicity.equals(ForeignKey.ONE_TO_ONE) || multiplicity.equals(ForeignKey.MANY_TO_ONE))) {
        RelationHolder relationHolder=new RelationHolder(linkName,linkValue);
        relationsHolder.add(relationHolder);
      }
    }
  }
  return relationsHolder;
}",0.9135802469135802
176968,"/** 
 * Flushes Dirty objects in   {@link PersistenceCache} to databases.
 */
public void flush(){
  if (FlushModeType.COMMIT.equals(getFlushMode())) {
  }
 else   if (FlushModeType.AUTO.equals(getFlushMode())) {
    flushManager.buildFlushStack(PersistenceCache.INSTANCE);
    FlushStack fs=PersistenceCache.INSTANCE.getFlushStack();
    log.debug(""String_Node_Str"" + fs);
    while (!fs.isEmpty()) {
      Node node=fs.pop();
      EntityMetadata metadata=getMetadata(node.getDataClass());
      node.setClient(getClient(metadata));
      node.flush();
      Map<NodeLink,Node> parents=node.getParents();
      Map<NodeLink,Node> children=node.getChildren();
      if (parents != null && !parents.isEmpty()) {
        for (        NodeLink parentNodeLink : parents.keySet()) {
          parentNodeLink.addLinkProperty(LinkProperty.LINK_VALUE,ObjectGraphBuilder.getEntityId(node.getNodeId()));
        }
      }
      if (children != null && !children.isEmpty()) {
        for (        NodeLink childNodeLink : children.keySet()) {
          childNodeLink.addLinkProperty(LinkProperty.LINK_VALUE,ObjectGraphBuilder.getEntityId(node.getNodeId()));
        }
      }
    }
    Map<String,JoinTableData> joinTableDataMap=PersistenceCache.INSTANCE.getJoinTableDataMap();
    for (    JoinTableData jtData : joinTableDataMap.values()) {
      EntityMetadata m=KunderaMetadataManager.getEntityMetadata(jtData.getEntityClass());
      Client client=getClient(m);
      if (OPERATION.INSERT.equals(jtData.getOperation())) {
        client.persistJoinTable(jtData);
      }
 else       if (OPERATION.DELETE.equals(jtData.getOperation())) {
        for (        Object pk : jtData.getJoinTableRecords().keySet()) {
          client.deleteByColumn(jtData.getJoinTableName(),m.getIdColumn().getName(),pk);
        }
      }
    }
    joinTableDataMap.clear();
  }
}","/** 
 * Flushes Dirty objects in   {@link PersistenceCache} to databases.
 */
public void flush(){
  if (FlushModeType.COMMIT.equals(getFlushMode())) {
  }
 else   if (FlushModeType.AUTO.equals(getFlushMode())) {
    flushManager.buildFlushStack(PersistenceCache.INSTANCE);
    FlushStack fs=PersistenceCache.INSTANCE.getFlushStack();
    log.debug(""String_Node_Str"" + fs);
    while (!fs.isEmpty()) {
      Node node=fs.pop();
      if (node.isInState(ManagedState.class) || node.isInState(RemovedState.class)) {
        EntityMetadata metadata=getMetadata(node.getDataClass());
        node.setClient(getClient(metadata));
        node.flush();
        Map<NodeLink,Node> parents=node.getParents();
        Map<NodeLink,Node> children=node.getChildren();
        if (parents != null && !parents.isEmpty()) {
          for (          NodeLink parentNodeLink : parents.keySet()) {
            parentNodeLink.addLinkProperty(LinkProperty.LINK_VALUE,ObjectGraphBuilder.getEntityId(node.getNodeId()));
          }
        }
        if (children != null && !children.isEmpty()) {
          for (          NodeLink childNodeLink : children.keySet()) {
            childNodeLink.addLinkProperty(LinkProperty.LINK_VALUE,ObjectGraphBuilder.getEntityId(node.getNodeId()));
          }
        }
      }
    }
    Map<String,JoinTableData> joinTableDataMap=PersistenceCache.INSTANCE.getJoinTableDataMap();
    for (    JoinTableData jtData : joinTableDataMap.values()) {
      EntityMetadata m=KunderaMetadataManager.getEntityMetadata(jtData.getEntityClass());
      Client client=getClient(m);
      if (OPERATION.INSERT.equals(jtData.getOperation())) {
        client.persistJoinTable(jtData);
      }
 else       if (OPERATION.DELETE.equals(jtData.getOperation())) {
        for (        Object pk : jtData.getJoinTableRecords().keySet()) {
          client.deleteByColumn(jtData.getJoinTableName(),m.getIdColumn().getName(),pk);
        }
      }
    }
    joinTableDataMap.clear();
  }
}",0.9666319082377476
176969,"/** 
 * Pushes <code>node</code> and its descendants recursively to flush stack  residing into persistence cache
 * @param pc
 * @param node
 */
public void addNodesToFlushStack(PersistenceCache pc,Node node){
  FlushStack flushStack=pc.getFlushStack();
  MainCache mainCache=(MainCache)pc.getMainCache();
  Map<NodeLink,Node> children=node.getChildren();
  if (children != null) {
    Map<NodeLink,Node> oneToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> oneToManyChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToManyChildren=new HashMap<NodeLink,Node>();
    for (    NodeLink nodeLink : children.keySet()) {
      Relation.ForeignKey multiplicity=nodeLink.getMultiplicity();
switch (multiplicity) {
case ONE_TO_ONE:
        oneToOneChildren.put(nodeLink,children.get(nodeLink));
      break;
case ONE_TO_MANY:
    oneToManyChildren.put(nodeLink,children.get(nodeLink));
  break;
case MANY_TO_ONE:
manyToOneChildren.put(nodeLink,children.get(nodeLink));
break;
case MANY_TO_MANY:
manyToManyChildren.put(nodeLink,children.get(nodeLink));
break;
}
}
for (NodeLink nodeLink : oneToManyChildren.keySet()) {
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
if (!childNode.isTraversed() && childNode.isDirty()) {
addNodesToFlushStack(pc,childNode);
}
}
for (NodeLink nodeLink : manyToManyChildren.keySet()) {
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
if (node.isDirty() && !node.isTraversed()) {
JoinTableMetadata jtmd=(JoinTableMetadata)nodeLink.getLinkProperty(LinkProperty.JOIN_TABLE_METADATA);
String joinColumnName=(String)jtmd.getJoinColumns().toArray()[0];
String inverseJoinColumnName=(String)jtmd.getInverseJoinColumns().toArray()[0];
Object entityId=ObjectGraphBuilder.getEntityId(node.getNodeId());
Object childId=ObjectGraphBuilder.getEntityId(childNode.getNodeId());
Set<Object> childValues=new HashSet<Object>();
childValues.add(childId);
OPERATION operation=null;
if (node.getCurrentNodeState().getClass().equals(ManagedState.class)) {
operation=OPERATION.INSERT;
}
 else if (node.getCurrentNodeState().getClass().equals(RemovedState.class)) {
operation=OPERATION.DELETE;
}
pc.addJoinTableDataIntoMap(operation,jtmd.getJoinTableName(),joinColumnName,inverseJoinColumnName,node.getDataClass(),entityId,childValues);
}
if (!childNode.isTraversed() && childNode.isDirty()) {
addNodesToFlushStack(pc,childNode);
}
}
for (NodeLink nodeLink : oneToOneChildren.keySet()) {
if (!node.isTraversed() && node.isDirty()) {
node.setTraversed(true);
flushStack.push(node);
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
addNodesToFlushStack(pc,childNode);
}
}
for (NodeLink nodeLink : manyToOneChildren.keySet()) {
if (!node.isTraversed() && node.isDirty()) {
node.setTraversed(true);
flushStack.push(node);
}
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
Map<NodeLink,Node> parents=childNode.getParents();
for (NodeLink parentLink : parents.keySet()) {
Relation.ForeignKey multiplicity=parentLink.getMultiplicity();
if (multiplicity.equals(Relation.ForeignKey.MANY_TO_ONE)) {
Node parentNode=parents.get(parentLink);
if (!parentNode.isTraversed() && parentNode.isDirty()) {
addNodesToFlushStack(pc,parentNode);
}
}
}
if (!childNode.isTraversed() && childNode.isDirty()) {
addNodesToFlushStack(pc,childNode);
}
}
}
if (!node.isTraversed() && node.isDirty()) {
node.setTraversed(true);
flushStack.push(node);
}
}","/** 
 * Pushes <code>node</code> and its descendants recursively to flush stack  residing into persistence cache
 * @param pc
 * @param node
 */
public void addNodesToFlushStack(PersistenceCache pc,Node node){
  FlushStack flushStack=pc.getFlushStack();
  MainCache mainCache=(MainCache)pc.getMainCache();
  Map<NodeLink,Node> children=node.getChildren();
  if (children != null) {
    Map<NodeLink,Node> oneToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> oneToManyChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToOneChildren=new HashMap<NodeLink,Node>();
    Map<NodeLink,Node> manyToManyChildren=new HashMap<NodeLink,Node>();
    for (    NodeLink nodeLink : children.keySet()) {
      Relation.ForeignKey multiplicity=nodeLink.getMultiplicity();
switch (multiplicity) {
case ONE_TO_ONE:
        oneToOneChildren.put(nodeLink,children.get(nodeLink));
      break;
case ONE_TO_MANY:
    oneToManyChildren.put(nodeLink,children.get(nodeLink));
  break;
case MANY_TO_ONE:
manyToOneChildren.put(nodeLink,children.get(nodeLink));
break;
case MANY_TO_MANY:
manyToManyChildren.put(nodeLink,children.get(nodeLink));
break;
}
}
for (NodeLink nodeLink : oneToManyChildren.keySet()) {
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
if (!childNode.isTraversed()) {
addNodesToFlushStack(pc,childNode);
}
}
for (NodeLink nodeLink : manyToManyChildren.keySet()) {
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
if (node.isDirty() && !node.isTraversed()) {
JoinTableMetadata jtmd=(JoinTableMetadata)nodeLink.getLinkProperty(LinkProperty.JOIN_TABLE_METADATA);
String joinColumnName=(String)jtmd.getJoinColumns().toArray()[0];
String inverseJoinColumnName=(String)jtmd.getInverseJoinColumns().toArray()[0];
Object entityId=ObjectGraphBuilder.getEntityId(node.getNodeId());
Object childId=ObjectGraphBuilder.getEntityId(childNode.getNodeId());
Set<Object> childValues=new HashSet<Object>();
childValues.add(childId);
OPERATION operation=null;
if (node.getCurrentNodeState().getClass().equals(ManagedState.class)) {
operation=OPERATION.INSERT;
}
 else if (node.getCurrentNodeState().getClass().equals(RemovedState.class)) {
operation=OPERATION.DELETE;
}
pc.addJoinTableDataIntoMap(operation,jtmd.getJoinTableName(),joinColumnName,inverseJoinColumnName,node.getDataClass(),entityId,childValues);
}
if (!childNode.isTraversed()) {
addNodesToFlushStack(pc,childNode);
}
}
for (NodeLink nodeLink : oneToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
flushStack.push(node);
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
addNodesToFlushStack(pc,childNode);
}
}
for (NodeLink nodeLink : manyToOneChildren.keySet()) {
if (!node.isTraversed()) {
node.setTraversed(true);
flushStack.push(node);
}
Node childNode=mainCache.getNodeFromCache(nodeLink.getTargetNodeId());
Map<NodeLink,Node> parents=childNode.getParents();
for (NodeLink parentLink : parents.keySet()) {
Relation.ForeignKey multiplicity=parentLink.getMultiplicity();
if (multiplicity.equals(Relation.ForeignKey.MANY_TO_ONE)) {
Node parentNode=parents.get(parentLink);
if (!parentNode.isTraversed()) {
addNodesToFlushStack(pc,parentNode);
}
}
}
if (!childNode.isTraversed()) {
addNodesToFlushStack(pc,childNode);
}
}
}
if (!node.isTraversed()) {
node.setTraversed(true);
flushStack.push(node);
}
}",0.9786554377813272
176970,"@Override public void addRelationIntoMetadata(Field relationField,EntityMetadata metadata){
  OneToMany ann=relationField.getAnnotation(OneToMany.class);
  Class<?> targetEntity=PropertyAccessorHelper.getGenericClass(relationField);
  if (null != ann.targetEntity() && !ann.targetEntity().getSimpleName().equals(""String_Node_Str"")) {
    targetEntity=ann.targetEntity();
  }
  validate(targetEntity);
  Relation relation=new Relation(relationField,targetEntity,relationField.getType(),ann.fetch(),Arrays.asList(ann.cascade()),Boolean.TRUE,ann.mappedBy(),Relation.ForeignKey.ONE_TO_MANY);
  boolean isJoinedByFK=relationField.isAnnotationPresent(JoinColumn.class);
  boolean isJoinedByTable=relationField.isAnnotationPresent(JoinTable.class);
  if (isJoinedByFK) {
    JoinColumn joinColumnAnn=relationField.getAnnotation(JoinColumn.class);
    relation.setJoinColumnName(joinColumnAnn.name());
  }
 else   if (isJoinedByTable) {
    JoinTableMetadata jtMetadata=new JoinTableMetadata(relationField);
    relation.setRelatedViaJoinTable(true);
    relation.setJoinTableMetadata(jtMetadata);
  }
  metadata.addRelation(relationField.getName(),relation);
}","@Override public void addRelationIntoMetadata(Field relationField,EntityMetadata metadata){
  OneToMany ann=relationField.getAnnotation(OneToMany.class);
  Class<?> targetEntity=PropertyAccessorHelper.getGenericClass(relationField);
  if (null != ann.targetEntity() && !ann.targetEntity().getSimpleName().equals(""String_Node_Str"")) {
    targetEntity=ann.targetEntity();
  }
  validate(targetEntity);
  Relation relation=new Relation(relationField,targetEntity,relationField.getType(),ann.fetch(),Arrays.asList(ann.cascade()),Boolean.TRUE,ann.mappedBy(),Relation.ForeignKey.ONE_TO_MANY);
  boolean isJoinedByFK=relationField.isAnnotationPresent(JoinColumn.class);
  boolean isJoinedByTable=relationField.isAnnotationPresent(JoinTable.class);
  if (isJoinedByFK) {
    JoinColumn joinColumnAnn=relationField.getAnnotation(JoinColumn.class);
    relation.setJoinColumnName(joinColumnAnn.name());
  }
 else   if (isJoinedByTable) {
    JoinTableMetadata jtMetadata=new JoinTableMetadata(relationField);
    relation.setRelatedViaJoinTable(true);
    relation.setJoinTableMetadata(jtMetadata);
  }
  metadata.addRelation(relationField.getName(),relation);
  metadata.setParent(true);
}",0.9880034275921166
176971,"@Override public EnhanceEntity findById(Object primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  try {
    return (EnhanceEntity)client.find(m.getEntityClazz(),primaryKey.toString());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
    throw new PersistenceException(e.getMessage());
  }
}","@Override public EnhanceEntity findById(Object primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  return super.findById(primaryKey,m,relationNames,client);
}",0.6245059288537549
176972,"@Override public void handleFind(NodeStateContext nodeStateContext){
  Client client=nodeStateContext.getClient();
  Class<?> nodeDataClass=nodeStateContext.getDataClass();
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(nodeDataClass);
  String entityId=ObjectGraphBuilder.getEntityId(nodeStateContext.getNodeId());
  List<String> linkNames=new ArrayList<String>();
  for (  Relation relation : entityMetadata.getRelations()) {
    linkNames.add(relation.getJoinColumnName());
  }
  Object nodeData=null;
  EntityReader reader=client.getReader();
  EnhanceEntity enhanceEntity=reader.findById(entityId,entityMetadata,linkNames,client);
  if (enhanceEntity != null && enhanceEntity.getEntity() != null) {
    Object entity=enhanceEntity.getEntity();
    if (linkNames.isEmpty() && !entityMetadata.isRelationViaJoinTable()) {
      nodeData=entity;
    }
 else {
      nodeData=reader.recursivelyFindEntities(enhanceEntity,client,entityMetadata,nodeStateContext.getPersistenceDelegator());
    }
  }
  nodeStateContext.setData(nodeData);
  nodeStateContext.setDirty(false);
  ObjectGraph graph=new ObjectGraphBuilder().getObjectGraph(nodeData,new ManagedState());
  PersistenceCache.INSTANCE.getMainCache().addGraphToCache(graph);
}","@Override public void handleFind(NodeStateContext nodeStateContext){
  Client client=nodeStateContext.getClient();
  Class<?> nodeDataClass=nodeStateContext.getDataClass();
  EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(nodeDataClass);
  String entityId=ObjectGraphBuilder.getEntityId(nodeStateContext.getNodeId());
  List<String> linkNames=new ArrayList<String>();
  for (  Relation relation : entityMetadata.getRelations()) {
    linkNames.add(relation.getJoinColumnName());
  }
  Object nodeData=null;
  EntityReader reader=client.getReader();
  EnhanceEntity enhanceEntity=reader.findById(entityId,entityMetadata,entityMetadata.getRelationNames(),client);
  if (enhanceEntity != null && enhanceEntity.getEntity() != null) {
    Object entity=enhanceEntity.getEntity();
    if (linkNames.isEmpty() && !entityMetadata.isRelationViaJoinTable()) {
      nodeData=entity;
    }
 else {
      nodeData=reader.recursivelyFindEntities(enhanceEntity,client,entityMetadata,nodeStateContext.getPersistenceDelegator());
    }
  }
  nodeStateContext.setData(nodeData);
  nodeStateContext.setDirty(false);
  ObjectGraph graph=new ObjectGraphBuilder().getObjectGraph(nodeData,new ManagedState());
  PersistenceCache.INSTANCE.getMainCache().addGraphToCache(graph);
}",0.9873817034700316
176973,"@Override public EnhanceEntity findById(Object primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  try {
    Object o=client.find(m.getEntityClazz(),primaryKey);
    if (o == null) {
      return null;
    }
 else {
      return o instanceof EnhanceEntity ? (EnhanceEntity)o : new EnhanceEntity(o,getId(o,m),null);
    }
  }
 catch (  Exception e) {
    throw new PersistenceException(e);
  }
}","@Override public EnhanceEntity findById(Object primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  return super.findById(primaryKey,m,relationNames,client);
}",0.531986531986532
176974,"@Override public EnhanceEntity findById(Object primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  try {
    Object o=client.find(m.getEntityClazz(),primaryKey);
    if (o == null) {
      return null;
    }
 else {
      return o instanceof EnhanceEntity ? (EnhanceEntity)o : new EnhanceEntity(o,getId(o,m),null);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new PersistenceException(e.getMessage());
  }
}","@Override public EnhanceEntity findById(Object primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  return super.findById(primaryKey,m,relationNames,client);
}",0.4936708860759494
176975,"/** 
 * Populate p key.
 * @param entity the entity
 * @param associatedEntity the associated entity
 * @param metadata the metadata
 */
private void populatePKey(Object entity,Object associatedEntity,EntityMetadata metadata){
  if (associatedEntity != null) {
    Class<?> clazz=associatedEntity.getClass();
    if (associatedEntity instanceof HibernateProxy) {
      clazz=associatedEntity.getClass().getSuperclass();
    }
    Field[] fields=clazz.getDeclaredFields();
    Field f=null;
    for (    Field field : fields) {
      if (field.isAnnotationPresent(Id.class)) {
        f=field;
        break;
      }
    }
    try {
      PropertyAccessorHelper.setId(associatedEntity,metadata,getId(entity,metadata));
    }
 catch (    PropertyAccessException e) {
      throw new PersistenceObjectGraphBuilderException(""String_Node_Str"" + entity + ""String_Node_Str"",e);
    }
  }
}","/** 
 * Populate p key.
 * @param entity the entity
 * @param associatedEntity the associated entity
 * @param metadata the metadata
 */
private void populatePKey(Object entity,Object associatedEntity,EntityMetadata metadata){
  if (associatedEntity != null) {
    Class<?> clazz=associatedEntity.getClass();
    if (associatedEntity instanceof HibernateProxy) {
      clazz=associatedEntity.getClass().getSuperclass();
    }
    Field[] fields=clazz.getDeclaredFields();
    Field f=null;
    for (    Field field : fields) {
      if (field.isAnnotationPresent(Id.class)) {
        f=field;
        break;
      }
    }
    try {
      PropertyAccessorHelper.setId(associatedEntity,KunderaMetadataManager.getEntityMetadata(clazz),getId(entity,metadata));
    }
 catch (    PropertyAccessException e) {
      throw new PersistenceObjectGraphBuilderException(""String_Node_Str"" + entity + ""String_Node_Str"",e);
    }
  }
}",0.9694952856350528
176976,"@Override public void persistJoinTable(String joinTableName,String joinColumnName,String inverseJoinColumnName,EntityMetadata relMetadata,Object primaryKey,Object childEntity){
  Mutator mutator=Pelops.createMutator(PelopsUtils.generatePoolName(getPersistenceUnit()));
  String parentId=(String)primaryKey;
  List<Column> columns=new ArrayList<Column>();
  if (Collection.class.isAssignableFrom(childEntity.getClass())) {
    Collection children=(Collection)childEntity;
    for (    Object child : children) {
      addColumnsToJoinTable(inverseJoinColumnName,relMetadata,columns,child);
    }
  }
 else {
    addColumnsToJoinTable(inverseJoinColumnName,relMetadata,columns,childEntity);
  }
  mutator.writeColumns(joinTableName,new Bytes(parentId.getBytes()),Arrays.asList(columns.toArray(new Column[0])));
  mutator.execute(ConsistencyLevel.ONE);
}","@Override public void persistJoinTable(String joinTableName,String joinColumnName,String inverseJoinColumnName,EntityMetadata relMetadata,Object primaryKey,Object childEntity){
  String poolName=PelopsUtils.generatePoolName(getPersistenceUnit());
  Mutator mutator=Pelops.createMutator(poolName);
  String parentId=(String)primaryKey;
  List<Column> columns=new ArrayList<Column>();
  if (Collection.class.isAssignableFrom(childEntity.getClass())) {
    Collection children=(Collection)childEntity;
    for (    Object child : children) {
      addColumnsToJoinTable(inverseJoinColumnName,relMetadata,columns,child);
    }
  }
 else {
    addColumnsToJoinTable(inverseJoinColumnName,relMetadata,columns,childEntity);
  }
  createIndexesOnColumns(joinTableName,poolName,columns);
  mutator.writeColumns(joinTableName,new Bytes(parentId.getBytes()),Arrays.asList(columns.toArray(new Column[0])));
  mutator.execute(ConsistencyLevel.ONE);
}",0.8769574944071589
176977,"/** 
 * Gets the entity from document.
 * @param entityClass the entity class
 * @param m the m
 * @param document the document
 * @param relations the relations
 * @return the entity from document
 */
public Object getEntityFromDocument(Class<?> entityClass,EntityMetadata m,DBObject document,List<String> relations){
  Object entity=null;
  try {
    entity=entityClass.newInstance();
    String rowKey=(String)document.get(""String_Node_Str"");
    PropertyAccessorHelper.setId(entity,m,rowKey);
    List<Column> columns=m.getColumnsAsList();
    for (    Column column : columns) {
      PropertyAccessorHelper.set(entity,column.getField(),document.get(column.getName()).toString());
    }
    List<EmbeddedColumn> embeddedColumns=m.getEmbeddedColumnsAsList();
    for (    EmbeddedColumn embeddedColumn : embeddedColumns) {
      Field embeddedColumnField=embeddedColumn.getField();
      Object embeddedDocumentObject=document.get(embeddedColumnField.getName());
      if (embeddedDocumentObject != null) {
        if (embeddedDocumentObject instanceof BasicDBList) {
          Class embeddedObjectClass=PropertyAccessorHelper.getGenericClass(embeddedColumnField);
          Collection embeddedCollection=DocumentObjectMapper.getCollectionFromDocumentList((BasicDBList)embeddedDocumentObject,embeddedColumnField.getType(),embeddedObjectClass,embeddedColumn.getColumns());
          PropertyAccessorHelper.set(entity,embeddedColumnField,embeddedCollection);
        }
 else         if (embeddedDocumentObject instanceof BasicDBObject) {
          Object embeddedObject=null;
          if (embeddedColumnField.isAnnotationPresent(Embedded.class)) {
            embeddedObject=DocumentObjectMapper.getObjectFromDocument((BasicDBObject)embeddedDocumentObject,embeddedColumn.getField().getType(),embeddedColumn.getColumns());
          }
 else {
            embeddedObject=((BasicDBObject)embeddedDocumentObject).get(embeddedColumn.getName());
          }
          PropertyAccessorHelper.set(entity,embeddedColumnField,embeddedObject);
        }
 else {
          throw new PersistenceException(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
    if (relations != null) {
      EnhanceEntity e=null;
      Map<String,Object> relationValue=new HashMap<String,Object>();
      for (      String r : relations) {
        if (relationValue == null) {
          relationValue=new HashMap<String,Object>();
        }
        Object colValue=document.get(r);
        relationValue.put(r,colValue);
      }
      e=new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relationValue);
      return e;
    }
    return entity;
  }
 catch (  InstantiationException e) {
    log.error(""String_Node_Str"" + entityClass + ""String_Node_Str""+ e.getMessage());
    return entity;
  }
catch (  IllegalAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    return entity;
  }
catch (  PropertyAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    return entity;
  }
}","/** 
 * Gets the entity from document.
 * @param entityClass the entity class
 * @param m the m
 * @param document the document
 * @param relations the relations
 * @return the entity from document
 */
public Object getEntityFromDocument(Class<?> entityClass,EntityMetadata m,DBObject document,List<String> relations){
  Object entity=null;
  try {
    entity=entityClass.newInstance();
    String rowKey=(String)document.get(""String_Node_Str"");
    PropertyAccessorHelper.setId(entity,m,rowKey);
    List<Column> columns=m.getColumnsAsList();
    for (    Column column : columns) {
      setColumnValue(document,entity,column);
    }
    List<EmbeddedColumn> embeddedColumns=m.getEmbeddedColumnsAsList();
    for (    EmbeddedColumn embeddedColumn : embeddedColumns) {
      Field embeddedColumnField=embeddedColumn.getField();
      Object embeddedDocumentObject=document.get(embeddedColumnField.getName());
      if (embeddedDocumentObject != null) {
        if (embeddedDocumentObject instanceof BasicDBList) {
          Class embeddedObjectClass=PropertyAccessorHelper.getGenericClass(embeddedColumnField);
          Collection embeddedCollection=DocumentObjectMapper.getCollectionFromDocumentList((BasicDBList)embeddedDocumentObject,embeddedColumnField.getType(),embeddedObjectClass,embeddedColumn.getColumns());
          PropertyAccessorHelper.set(entity,embeddedColumnField,embeddedCollection);
        }
 else         if (embeddedDocumentObject instanceof BasicDBObject) {
          Object embeddedObject=null;
          if (embeddedColumnField.isAnnotationPresent(Embedded.class)) {
            embeddedObject=DocumentObjectMapper.getObjectFromDocument((BasicDBObject)embeddedDocumentObject,embeddedColumn.getField().getType(),embeddedColumn.getColumns());
          }
 else {
            embeddedObject=((BasicDBObject)embeddedDocumentObject).get(embeddedColumn.getName());
          }
          PropertyAccessorHelper.set(entity,embeddedColumnField,embeddedObject);
        }
 else {
          throw new PersistenceException(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
    if (relations != null) {
      EnhanceEntity e=null;
      Map<String,Object> relationValue=new HashMap<String,Object>();
      for (      String r : relations) {
        if (relationValue == null) {
          relationValue=new HashMap<String,Object>();
        }
        Object colValue=document.get(r);
        relationValue.put(r,colValue);
      }
      e=new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m),relationValue);
      return e;
    }
    return entity;
  }
 catch (  InstantiationException e) {
    log.error(""String_Node_Str"" + entityClass + ""String_Node_Str""+ e.getMessage());
    return entity;
  }
catch (  IllegalAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    return entity;
  }
catch (  PropertyAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    return entity;
  }
}",0.9789227166276346
176978,"/** 
 * Extract entity field.
 * @param entity the entity
 * @param dbObj the db obj
 * @param column the column
 * @throws PropertyAccessException the property access exception
 */
private void extractEntityField(Object entity,BasicDBObject dbObj,Column column) throws PropertyAccessException {
  if (column.getField().getType().equals(List.class) || column.getField().getType().equals(Set.class)) {
    Collection collection=(Collection)PropertyAccessorHelper.getObject(entity,column.getField());
    BasicDBList basicDBList=new BasicDBList();
    for (    Object o : collection) {
      basicDBList.add(o);
    }
    dbObj.put(column.getName(),basicDBList);
  }
 else {
    Object valObj=PropertyAccessorHelper.getObject(entity,column.getField());
    dbObj.put(column.getName(),valObj instanceof Calendar ? ((Calendar)valObj).getTime().toString() : PropertyAccessorHelper.getObject(entity,column.getField()).toString());
  }
}","/** 
 * Extract entity field.
 * @param entity the entity
 * @param dbObj the db obj
 * @param column the column
 * @throws PropertyAccessException the property access exception
 */
private void extractEntityField(Object entity,BasicDBObject dbObj,Column column) throws PropertyAccessException {
  if (column.getField().getType().isAssignableFrom(List.class) || column.getField().getType().isAssignableFrom(Set.class)) {
    Collection collection=(Collection)PropertyAccessorHelper.getObject(entity,column.getField());
    BasicDBList basicDBList=new BasicDBList();
    for (    Object o : collection) {
      basicDBList.add(o);
    }
    dbObj.put(column.getName(),basicDBList);
  }
 else   if (column.getField().getType().isAssignableFrom(Map.class)) {
    Map mapObj=(Map)PropertyAccessorHelper.getObject(entity,column.getField());
    BasicDBObjectBuilder builder=BasicDBObjectBuilder.start(mapObj);
    dbObj.put(column.getName(),builder.get());
  }
 else {
    Object valObj=PropertyAccessorHelper.getObject(entity,column.getField());
    dbObj.put(column.getName(),valObj instanceof Calendar ? ((Calendar)valObj).getTime().toString() : PropertyAccessorHelper.getObject(entity,column.getField()).toString());
  }
}",0.8535564853556485
176979,"/** 
 * Compute graph.
 * @param e the e
 * @param graphs the graphs
 * @param collectionHolder the collection holder
 * @param client the client
 * @param m the m
 * @param persistenceDelegeator the persistence delegeator
 * @return the object
 * @throws Exception the exception
 */
public Object computeGraph(EnhanceEntity e,List<EntitySaveGraph> graphs,Map<Object,Object> collectionHolder,Client client,EntityMetadata m,PersistenceDelegator persistenceDelegeator){
  Client childClient=null;
  Class<?> childClazz=null;
  EntityMetadata childMetadata=null;
  for (  EntitySaveGraph g : graphs) {
    Relation relation=m.getRelation(g.getProperty().getName());
    if (relation.isRelatedViaJoinTable()) {
      computeJoinTableRelations(e,client,m,g,persistenceDelegeator,relation);
    }
 else {
      if (e.getEntity().getClass().equals(g.getChildClass())) {
        String relationName=g.getfKeyName();
        Object relationalValue=e.getRelations().get(relationName);
        childClazz=g.getParentClass();
        childMetadata=persistenceDelegeator.getMetadata(childClazz);
        Field f=g.getProperty();
        if (!collectionHolder.containsKey(relationalValue)) {
          childClient=persistenceDelegeator.getClient(childMetadata);
          Object child=null;
          if (childClazz.equals(e.getEntity().getClass())) {
            child=childClient.find(childClazz,childMetadata,relationalValue.toString(),null);
          }
 else {
            child=persistenceDelegeator.find(childClazz,relationalValue.toString(),g);
          }
          collectionHolder.put(relationalValue,child);
        }
        onBiDirection(e,client,g,m,collectionHolder.get(relationalValue),childMetadata,childClient);
        List<Object> collection=new ArrayList<Object>(1);
        collection.add(collectionHolder.get(relationalValue));
        PropertyAccessorHelper.set(e.getEntity(),f,PropertyAccessorHelper.isCollection(f.getType()) ? getFieldInstance(collection,f) : collection.get(0));
      }
 else {
        childClazz=g.getChildClass();
        childMetadata=persistenceDelegeator.getMetadata(childClazz);
        childClient=persistenceDelegeator.getClient(childMetadata);
        String relationName=g.getfKeyName();
        String relationalValue=e.getEntityId();
        Field f=g.getProperty();
        if (!collectionHolder.containsKey(relationalValue)) {
          List<Object> childs=null;
          if (MetadataUtils.useSecondryIndex(childClient.getPersistenceUnit())) {
            childs=childClient.find(relationName,relationalValue,childMetadata);
          }
 else {
            if (g.isSharedPrimaryKey()) {
              childs=new ArrayList();
              childs.add(childClazz.equals(e.getEntity().getClass()) ? childs.add(childClient.find(childClazz,childMetadata,e.getEntityId(),null)) : persistenceDelegeator.find(childClazz,relationalValue.toString()));
            }
 else {
              String query=getQuery(DocumentIndexer.PARENT_ID_CLASS,e.getEntity().getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,e.getEntityId(),childClazz.getCanonicalName().toLowerCase());
              Map<String,String> results=childClient.getIndexManager().search(query);
              Set<String> rsSet=new HashSet<String>(results.values());
              if (childClazz.equals(e.getEntity().getClass())) {
                childs=(List<Object>)childClient.findAll(childClazz,rsSet.toArray(new String[]{}));
              }
 else {
                childs=(List<Object>)persistenceDelegeator.find(childClazz,g,rsSet.toArray(new String[]{}));
              }
            }
          }
          collectionHolder.put(relationalValue,childs);
          if (childs != null) {
            for (            Object child : childs) {
              onBiDirection(e,client,g,m,child,childMetadata,childClient);
            }
          }
        }
        onReflect(e.getEntity(),f,(List)collectionHolder.get(relationalValue));
      }
    }
  }
  return e.getEntity();
}","/** 
 * Compute graph.
 * @param e the e
 * @param graphs the graphs
 * @param collectionHolder the collection holder
 * @param client the client
 * @param m the m
 * @param persistenceDelegeator the persistence delegeator
 * @return the object
 * @throws Exception the exception
 */
public Object computeGraph(EnhanceEntity e,List<EntitySaveGraph> graphs,Map<Object,Object> collectionHolder,Client client,EntityMetadata m,PersistenceDelegator persistenceDelegeator){
  Client childClient=null;
  Class<?> childClazz=null;
  EntityMetadata childMetadata=null;
  for (  EntitySaveGraph g : graphs) {
    Relation relation=m.getRelation(g.getProperty().getName());
    if (relation.isRelatedViaJoinTable()) {
      computeJoinTableRelations(e,client,m,g,persistenceDelegeator,relation);
    }
 else {
      if (e.getEntity().getClass().equals(g.getChildClass())) {
        String relationName=g.getfKeyName();
        Object relationalValue=e.getRelations().get(relationName);
        childClazz=g.getParentClass();
        childMetadata=persistenceDelegeator.getMetadata(childClazz);
        Field f=g.getProperty();
        if (!collectionHolder.containsKey(relationalValue + childClazz.getName())) {
          childClient=persistenceDelegeator.getClient(childMetadata);
          Object child=null;
          if (childClazz.equals(e.getEntity().getClass())) {
            child=childClient.find(childClazz,childMetadata,relationalValue.toString(),null);
          }
 else {
            child=persistenceDelegeator.find(childClazz,relationalValue.toString(),g);
          }
          collectionHolder.put(relationalValue + childClazz.getName(),child);
        }
        onBiDirection(e,client,g,m,collectionHolder.get(relationalValue + childClazz.getName()),childMetadata,childClient);
        List<Object> collection=new ArrayList<Object>(1);
        collection.add(collectionHolder.get(relationalValue + childClazz.getName()));
        PropertyAccessorHelper.set(e.getEntity(),f,PropertyAccessorHelper.isCollection(f.getType()) ? getFieldInstance(collection,f) : collection.get(0));
      }
 else {
        childClazz=g.getChildClass();
        childMetadata=persistenceDelegeator.getMetadata(childClazz);
        childClient=persistenceDelegeator.getClient(childMetadata);
        String relationName=g.getfKeyName();
        String relationalValue=e.getEntityId();
        Field f=g.getProperty();
        if (!collectionHolder.containsKey(relationalValue + childClazz.getName())) {
          List<Object> childs=null;
          if (MetadataUtils.useSecondryIndex(childClient.getPersistenceUnit())) {
            childs=childClient.find(relationName,relationalValue,childMetadata);
          }
 else {
            if (g.isSharedPrimaryKey()) {
              childs=new ArrayList();
              childs.add(childClazz.equals(e.getEntity().getClass()) ? childs.add(childClient.find(childClazz,childMetadata,e.getEntityId(),null)) : persistenceDelegeator.find(childClazz,relationalValue.toString()));
            }
 else {
              String query=getQuery(DocumentIndexer.PARENT_ID_CLASS,e.getEntity().getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,e.getEntityId(),childClazz.getCanonicalName().toLowerCase());
              Map<String,String> results=childClient.getIndexManager().search(query);
              Set<String> rsSet=new HashSet<String>(results.values());
              if (childClazz.equals(e.getEntity().getClass())) {
                childs=(List<Object>)childClient.findAll(childClazz,rsSet.toArray(new String[]{}));
              }
 else {
                childs=(List<Object>)persistenceDelegeator.find(childClazz,g,rsSet.toArray(new String[]{}));
              }
            }
          }
          collectionHolder.put(relationalValue + childClazz.getName(),childs);
          if (childs != null) {
            for (            Object child : childs) {
              onBiDirection(e,client,g,m,child,childMetadata,childClient);
            }
          }
        }
        onReflect(e.getEntity(),f,(List)collectionHolder.get(relationalValue + childClazz.getName()));
      }
    }
  }
  return e.getEntity();
}",0.9802865189175952
176980,"/** 
 * On bi direction.
 * @param e the e
 * @param client the client
 * @param objectGraph the object graph
 * @param origMetadata the orig metadata
 * @param child the child
 * @param childMetadata the child metadata
 * @param childClient the child client
 * @throws Exception the exception
 */
private void onBiDirection(EnhanceEntity e,Client client,EntitySaveGraph objectGraph,EntityMetadata origMetadata,Object child,EntityMetadata childMetadata,Client childClient) throws Exception {
  if (!objectGraph.isUniDirectional() && child != null) {
    List obj=new ArrayList();
    Relation relation=childMetadata.getRelation(objectGraph.getBidirectionalProperty().getName());
    if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
      String query=null;
      try {
        String id=PropertyAccessorHelper.getId(child,childMetadata);
        List<Object> results=null;
        if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
          if (origMetadata.isRelationViaJoinTable()) {
            Relation joinTableRelation=origMetadata.getRelation(objectGraph.getProperty().getName());
            JoinTableMetadata jtMetadata=joinTableRelation.getJoinTableMetadata();
            String joinTableName=jtMetadata.getJoinTableName();
            Set<String> joinColumns=jtMetadata.getJoinColumns();
            Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
            String joinColumnName=(String)joinColumns.toArray()[0];
            String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
            List<Object> parentEntities=client.findParentEntityFromJoinTable(origMetadata,joinTableName,joinColumnName,inverseJoinColumnName,id);
            if (results == null) {
              results=new ArrayList<Object>();
            }
            if (parentEntities != null) {
              results.addAll(parentEntities);
            }
          }
 else {
            results=client.find(objectGraph.getfKeyName(),id,origMetadata);
          }
        }
 else {
          Map<String,String> keys=null;
          if (relation.getType().equals(ForeignKey.ONE_TO_MANY)) {
            query=getQuery(DocumentIndexer.PARENT_ID_CLASS,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,id,e.getEntity().getClass().getCanonicalName().toLowerCase());
            keys=client.getIndexManager().search(query);
          }
 else {
            query=getQuery(DocumentIndexer.ENTITY_CLASS_FIELD,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,id,null);
            keys=client.getIndexManager().fetchRelation(query);
          }
          Set<String> uqSet=new HashSet<String>(keys.values());
          results=new ArrayList<Object>();
          for (          String rowKey : uqSet) {
            results.add(client.find(e.getEntity().getClass(),origMetadata,rowKey,null));
          }
        }
        if (results != null) {
          obj.addAll(results);
        }
      }
 catch (      PropertyAccessException ex) {
        log.error(""String_Node_Str"" + ex.getMessage());
        throw new QueryHandlerException(ex.getMessage());
      }
      for (      Object o : obj) {
        if (o != null) {
          Field f=objectGraph.getProperty();
          if (PropertyAccessorHelper.isCollection(f.getType())) {
            List l=new ArrayList();
            l.add(child);
            Object oo=getFieldInstance(l,f);
            PropertyAccessorHelper.set(o,f,oo);
          }
 else {
            PropertyAccessorHelper.set(o,f,child);
          }
        }
      }
    }
 else {
      obj.add(e.getEntity());
    }
    try {
      PropertyAccessorHelper.set(child,objectGraph.getBidirectionalProperty(),PropertyAccessorHelper.isCollection(objectGraph.getBidirectionalProperty().getType()) ? getFieldInstance(obj,objectGraph.getBidirectionalProperty()) : e.getEntity());
    }
 catch (    PropertyAccessException ex) {
      log.error(""String_Node_Str"" + ex.getMessage());
      throw new QueryHandlerException(ex.getMessage());
    }
  }
}","/** 
 * On bi direction.
 * @param e the e
 * @param client the client
 * @param objectGraph the object graph
 * @param origMetadata the orig metadata
 * @param child the child
 * @param childMetadata the child metadata
 * @param childClient the child client
 * @throws Exception the exception
 */
private void onBiDirection(EnhanceEntity e,Client client,EntitySaveGraph objectGraph,EntityMetadata origMetadata,Object child,EntityMetadata childMetadata,Client childClient) throws Exception {
  if (!objectGraph.isUniDirectional() && child != null) {
    List obj=new ArrayList();
    Relation relation=childMetadata.getRelation(objectGraph.getBidirectionalProperty().getName());
    if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
      String query=null;
      try {
        String id=PropertyAccessorHelper.getId(child,childMetadata);
        List<Object> results=null;
        if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
          if (origMetadata.isRelationViaJoinTable()) {
            Relation joinTableRelation=origMetadata.getRelation(objectGraph.getProperty().getName());
            JoinTableMetadata jtMetadata=joinTableRelation.getJoinTableMetadata();
            String joinTableName=jtMetadata.getJoinTableName();
            Set<String> joinColumns=jtMetadata.getJoinColumns();
            Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
            String joinColumnName=(String)joinColumns.toArray()[0];
            String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
            List<Object> parentEntities=client.findParentEntityFromJoinTable(origMetadata,joinTableName,joinColumnName,inverseJoinColumnName,id);
            if (results == null) {
              results=new ArrayList<Object>();
            }
            if (parentEntities != null) {
              results.addAll(parentEntities);
            }
          }
 else {
            results=client.find(objectGraph.getfKeyName(),id,origMetadata);
          }
        }
 else {
          Map<String,String> keys=null;
          if (relation.getType().equals(ForeignKey.ONE_TO_MANY)) {
            query=getQuery(DocumentIndexer.PARENT_ID_CLASS,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,id,e.getEntity().getClass().getCanonicalName().toLowerCase());
            keys=client.getIndexManager().search(query);
          }
 else {
            query=getQuery(DocumentIndexer.ENTITY_CLASS_FIELD,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,id,null);
            keys=client.getIndexManager().fetchRelation(query);
          }
          Set<String> uqSet=new HashSet<String>(keys.values());
          results=new ArrayList<Object>();
          for (          String rowKey : uqSet) {
            Object result=client.find(e.getEntity().getClass(),origMetadata,rowKey,null);
            if (result != null) {
              results.add(result);
            }
          }
        }
        if (results != null) {
          obj.addAll(results);
        }
      }
 catch (      PropertyAccessException ex) {
        log.error(""String_Node_Str"" + ex.getMessage());
        throw new QueryHandlerException(ex.getMessage());
      }
      for (      Object o : obj) {
        if (o != null) {
          Field f=objectGraph.getProperty();
          if (PropertyAccessorHelper.isCollection(f.getType())) {
            List l=new ArrayList();
            l.add(child);
            Object oo=getFieldInstance(l,f);
            PropertyAccessorHelper.set(o,f,oo);
          }
 else {
            PropertyAccessorHelper.set(o,f,child);
          }
        }
      }
    }
 else {
      obj.add(e.getEntity());
    }
    try {
      PropertyAccessorHelper.set(child,objectGraph.getBidirectionalProperty(),PropertyAccessorHelper.isCollection(objectGraph.getBidirectionalProperty().getType()) ? getFieldInstance(obj,objectGraph.getBidirectionalProperty()) : e.getEntity());
    }
 catch (    PropertyAccessException ex) {
      log.error(""String_Node_Str"" + ex.getMessage());
      throw new QueryHandlerException(ex.getMessage());
    }
  }
}",0.8550445461112449
176981,"@Override public <E>List<E> findParentEntityFromJoinTable(EntityMetadata parentMetadata,String joinTableName,String joinColumnName,String inverseJoinColumnName,Object childId){
  return null;
}","@Override public <E>List<E> findParentEntityFromJoinTable(EntityMetadata parentMetadata,String joinTableName,String joinColumnName,String inverseJoinColumnName,Object childId){
  return handler.findParentEntityFromJoinTable(parentMetadata,joinTableName,joinColumnName,inverseJoinColumnName,childId);
}",0.7651821862348178
176982,"/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getIdColumn().getName());
  for (  String column : entityMetadata.getColumnFieldNames()) {
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(column);
  }
  List<EmbeddedColumn> embeddedColumns=entityMetadata.getEmbeddedColumnsAsList();
  for (  EmbeddedColumn embeddedCol : embeddedColumns) {
    for (    Column column : embeddedCol.getColumns()) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(column.getName());
    }
  }
  for (  String relation : relations) {
    if (!entityMetadata.getIdColumn().getName().equalsIgnoreCase(relation)) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(relation);
    }
  }
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        String fieldName=getColumnName(clause.getProperty());
        boolean isString=isStringProperty(entityMetadata,fieldName);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),clause.getProperty().substring(0,clause.getProperty().indexOf(""String_Node_Str"")),aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        appendStringPrefix(queryBuilder,isString);
        queryBuilder.append(clause.getValue());
        appendStringPrefix(queryBuilder,isString);
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(entityMetadata.getIdColumn().getName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    Column col=entityMetadata.getIdColumn();
    boolean isString=col.getField().getType().isAssignableFrom(String.class);
    for (    String key : primaryKeys) {
      appendStringPrefix(queryBuilder,isString);
      queryBuilder.append(key);
      appendStringPrefix(queryBuilder,isString);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}","/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getIdColumn().getName());
  for (  String column : entityMetadata.getColumnFieldNames()) {
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(column);
  }
  List<EmbeddedColumn> embeddedColumns=entityMetadata.getEmbeddedColumnsAsList();
  for (  EmbeddedColumn embeddedCol : embeddedColumns) {
    for (    Column column : embeddedCol.getColumns()) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(column.getName());
    }
  }
  for (  String relation : relations) {
    if (!entityMetadata.getIdColumn().getName().equalsIgnoreCase(relation)) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(relation);
    }
  }
  for (  Relation r : entityMetadata.getRelations()) {
    if (r.getJoinColumnName() != null) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(r.getJoinColumnName());
    }
  }
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        String fieldName=getColumnName(clause.getProperty());
        boolean isString=isStringProperty(entityMetadata,fieldName);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),clause.getProperty().substring(0,clause.getProperty().indexOf(""String_Node_Str"")),aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        appendStringPrefix(queryBuilder,isString);
        queryBuilder.append(clause.getValue());
        appendStringPrefix(queryBuilder,isString);
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(entityMetadata.getIdColumn().getName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    Column col=entityMetadata.getIdColumn();
    boolean isString=col.getField().getType().isAssignableFrom(String.class);
    for (    String key : primaryKeys) {
      appendStringPrefix(queryBuilder,isString);
      queryBuilder.append(key);
      appendStringPrefix(queryBuilder,isString);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}",0.9610460365023156
176983,"/** 
 * Returns list of managed urls.
 * @return
 */
public List<URL> getManagedURLs(){
  List<URL> managedURL=getJarFileUrls();
  if (managedURL == null && !getExcludeUnlistedClasses()) {
    managedURL=new ArrayList<URL>(1);
    managedURL.add(getPersistenceUnitRootUrl());
  }
  return managedURL;
}","/** 
 * Returns list of managed urls.
 * @return
 */
public List<URL> getManagedURLs(){
  List<URL> managedURL=getJarFileUrls();
  if (managedURL == null) {
    managedURL=new ArrayList<URL>(1);
  }
  if (!getExcludeUnlistedClasses()) {
    managedURL.add(getPersistenceUnitRootUrl());
  }
  return managedURL;
}",0.8469055374592834
176984,"@Override public void persistJoinTable(String joinTableName,String joinColumnName,String inverseJoinColumnName,EntityMetadata relMetadata,EntitySaveGraph objectGraph){
  Mutator mutator=Pelops.createMutator(PelopsUtils.generatePoolName(getPersistenceUnit()));
  String parentId=objectGraph.getParentId();
  List<Column> columns=new ArrayList<Column>();
  if (Collection.class.isAssignableFrom(objectGraph.getChildEntity().getClass())) {
    Collection children=(Collection)objectGraph.getChildEntity();
    for (    Object child : children) {
      addColumnsToJoinTable(inverseJoinColumnName,relMetadata,columns,child);
    }
  }
 else {
    Object child=objectGraph.getChildEntity();
    addColumnsToJoinTable(inverseJoinColumnName,relMetadata,columns,child);
  }
  mutator.writeColumns(joinTableName,new Bytes(parentId.getBytes()),Arrays.asList(columns.toArray(new Column[0])));
  mutator.execute(ConsistencyLevel.ONE);
}","@Override public void persistJoinTable(String joinTableName,String joinColumnName,String inverseJoinColumnName,EntityMetadata relMetadata,Object primaryKey,Object childEntity){
  Mutator mutator=Pelops.createMutator(PelopsUtils.generatePoolName(getPersistenceUnit()));
  String parentId=(String)primaryKey;
  List<Column> columns=new ArrayList<Column>();
  if (Collection.class.isAssignableFrom(childEntity.getClass())) {
    Collection children=(Collection)childEntity;
    for (    Object child : children) {
      addColumnsToJoinTable(inverseJoinColumnName,relMetadata,columns,child);
    }
  }
 else {
    addColumnsToJoinTable(inverseJoinColumnName,relMetadata,columns,childEntity);
  }
  mutator.writeColumns(joinTableName,new Bytes(parentId.getBytes()),Arrays.asList(columns.toArray(new Column[0])));
  mutator.execute(ConsistencyLevel.ONE);
}",0.4991549295774647
176985,"/** 
 * Inserts records into Join Table.
 * @param joinTableName Name of Join Table
 * @param joinColumnName Name of Join Column
 * @param inverseJoinColumnName Name of Inverse Join Column
 * @param relMetadata Entity metadata for the child entity (i.e. entity at the otherside of the relationship)
 * @param objectGraph Object graph of the persistence (Includes parent and childdata and other related info)
 */
void persistJoinTable(String joinTableName,String joinColumnName,String inverseJoinColumnName,EntityMetadata relMetadata,EntitySaveGraph objectGraph);","/** 
 * Inserts records into Join Table.
 * @param joinTableName Name of Join Table
 * @param joinColumnName Name of Join Column
 * @param inverseJoinColumnName Name of Inverse Join Column
 * @param relMetadata Entity metadata for the child entity (i.e. entity at the otherside of the relationship)
 * @param primaryKey TODO
 * @param childEntity TODO
 */
void persistJoinTable(String joinTableName,String joinColumnName,String inverseJoinColumnName,EntityMetadata relMetadata,Object primaryKey,Object childEntity);",0.8263695450324977
176986,"/** 
 * On bi direction.
 * @param entity the entity
 * @param objectGraph the object graph
 * @param client the client
 * @param rowId the row id
 * @param entityClass the entity class
 * @param chids the chids
 * @param childMetadata the child metadata
 * @param childClient the child client
 * @throws Exception the exception
 */
private void onBiDirection(EnhanceEntity e,Client client,EntitySaveGraph objectGraph,EntityMetadata origMetadata,Object child,EntityMetadata childMetadata,Client childClient) throws Exception {
  if (!objectGraph.isUniDirectional() && child != null) {
    List obj=new ArrayList();
    Relation relation=childMetadata.getRelation(objectGraph.getBidirectionalProperty().getName());
    if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
      String query=null;
      try {
        String id=PropertyAccessorHelper.getId(child,childMetadata);
        List<Object> results=null;
        if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
          results=client.find(objectGraph.getfKeyName(),id,origMetadata);
        }
 else {
          Map<String,String> keys=null;
          if (relation.getType().equals(ForeignKey.ONE_TO_MANY)) {
            query=getQuery(DocumentIndexer.PARENT_ID_CLASS,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,id,e.getEntity().getClass().getCanonicalName().toLowerCase());
            keys=client.getIndexManager().search(query);
          }
 else {
            query=getQuery(DocumentIndexer.ENTITY_CLASS_FIELD,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,id,null);
            keys=client.getIndexManager().fetchRelation(query);
          }
          Set<String> uqSet=new HashSet<String>(keys.values());
          results=new ArrayList<Object>();
          for (          String rowKey : uqSet) {
            results.add(client.find(e.getEntity().getClass(),origMetadata,rowKey,null));
          }
        }
        if (results != null) {
          obj.addAll(results);
        }
      }
 catch (      PropertyAccessException ex) {
        log.error(""String_Node_Str"" + ex.getMessage());
        throw new QueryHandlerException(ex.getMessage());
      }
      for (      Object o : obj) {
        Field f=objectGraph.getProperty();
        if (PropertyAccessorHelper.isCollection(f.getType())) {
          List l=new ArrayList();
          l.add(child);
          Object oo=getFieldInstance(l,f);
          PropertyAccessorHelper.set(o,f,oo);
        }
 else {
          PropertyAccessorHelper.set(o,f,child);
        }
      }
    }
 else {
      obj.add(e.getEntity());
    }
    try {
      PropertyAccessorHelper.set(child,objectGraph.getBidirectionalProperty(),PropertyAccessorHelper.isCollection(objectGraph.getBidirectionalProperty().getType()) ? getFieldInstance(obj,objectGraph.getBidirectionalProperty()) : e.getEntity());
    }
 catch (    PropertyAccessException ex) {
      log.error(""String_Node_Str"" + ex.getMessage());
      throw new QueryHandlerException(ex.getMessage());
    }
  }
}","/** 
 * On bi direction.
 * @param entity the entity
 * @param objectGraph the object graph
 * @param client the client
 * @param rowId the row id
 * @param entityClass the entity class
 * @param chids the chids
 * @param childMetadata the child metadata
 * @param childClient the child client
 * @throws Exception the exception
 */
private void onBiDirection(EnhanceEntity e,Client client,EntitySaveGraph objectGraph,EntityMetadata origMetadata,Object child,EntityMetadata childMetadata,Client childClient) throws Exception {
  if (!objectGraph.isUniDirectional() && child != null) {
    List obj=new ArrayList();
    Relation relation=childMetadata.getRelation(objectGraph.getBidirectionalProperty().getName());
    if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
      String query=null;
      try {
        String id=PropertyAccessorHelper.getId(child,childMetadata);
        List<Object> results=null;
        if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
          results=client.find(objectGraph.getfKeyName(),id,origMetadata);
        }
 else {
          Map<String,String> keys=null;
          if (relation.getType().equals(ForeignKey.ONE_TO_MANY)) {
            query=getQuery(DocumentIndexer.PARENT_ID_CLASS,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,id,e.getEntity().getClass().getCanonicalName().toLowerCase());
            keys=client.getIndexManager().search(query);
          }
 else {
            query=getQuery(DocumentIndexer.ENTITY_CLASS_FIELD,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,id,null);
            keys=client.getIndexManager().fetchRelation(query);
          }
          Set<String> uqSet=new HashSet<String>(keys.values());
          results=new ArrayList<Object>();
          for (          String rowKey : uqSet) {
            results.add(client.find(e.getEntity().getClass(),origMetadata,rowKey,null));
          }
        }
        if (results != null) {
          obj.addAll(results);
        }
      }
 catch (      PropertyAccessException ex) {
        log.error(""String_Node_Str"" + ex.getMessage());
        throw new QueryHandlerException(ex.getMessage());
      }
      for (      Object o : obj) {
        if (o != null) {
          Field f=objectGraph.getProperty();
          if (PropertyAccessorHelper.isCollection(f.getType())) {
            List l=new ArrayList();
            l.add(child);
            Object oo=getFieldInstance(l,f);
            PropertyAccessorHelper.set(o,f,oo);
          }
 else {
            PropertyAccessorHelper.set(o,f,child);
          }
        }
      }
    }
 else {
      obj.add(e.getEntity());
    }
    try {
      PropertyAccessorHelper.set(child,objectGraph.getBidirectionalProperty(),PropertyAccessorHelper.isCollection(objectGraph.getBidirectionalProperty().getType()) ? getFieldInstance(obj,objectGraph.getBidirectionalProperty()) : e.getEntity());
    }
 catch (    PropertyAccessException ex) {
      log.error(""String_Node_Str"" + ex.getMessage());
      throw new QueryHandlerException(ex.getMessage());
    }
  }
}",0.9915699061555592
176987,"/** 
 * Saves an object graph to persistence stores. An object graph contains a parent entity and one or more child entities at a time. There are other attributes too that represent their relationship. 
 * @param objectGraph the object graph
 */
private void saveGraph(EntitySaveGraph objectGraph){
  Object parentEntity=objectGraph.getParentEntity();
  EntityMetadata metadata=getMetadata(objectGraph.getParentClass());
  List<EntitySaveGraph> relationGraphs=null;
  if (objectGraph.isIsswapped() && !metadata.getRelations().isEmpty() && !objectGraph.getChildClass().equals(objectGraph.getParentClass())) {
    relationGraphs=getGraph(parentEntity,metadata);
    for (    EntitySaveGraph g : relationGraphs) {
      if (!(objectGraph.getChildClass().equals(g.getParentClass()) || objectGraph.getChildClass().equals(g.getChildClass()))) {
        saveGraph(g);
      }
    }
  }
  if (parentEntity != null) {
    objectGraph.setParentId(getId(parentEntity,metadata));
    if (getSession().lookup(objectGraph.getParentClass(),objectGraph.getParentId()) == null) {
      Client pClient=getClient(metadata);
      pClient.persist(objectGraph,metadata);
      session.store(objectGraph.getParentId(),objectGraph.getParentEntity());
    }
  }
  Object childEntity=objectGraph.getChildEntity();
  if (objectGraph.getParentEntity() != null && childEntity != null) {
    persistChildEntity(objectGraph,childEntity);
  }
  for (  Relation relation : metadata.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
      String joinTableName=jtMetadata.getJoinTableName();
      Set<String> joinColumns=jtMetadata.getJoinColumns();
      Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
      String joinColumnName=(String)joinColumns.toArray()[0];
      String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
      EntityMetadata relMetadata=getMetadata(objectGraph.getChildClass());
      Client pClient=getClient(metadata);
      pClient.persistJoinTable(joinTableName,joinColumnName,inverseJoinColumnName,relMetadata,objectGraph);
    }
  }
}","/** 
 * Saves an object graph to persistence stores. An object graph contains a parent entity and one or more child entities at a time. There are other attributes too that represent their relationship. 
 * @param objectGraph the object graph
 */
private void saveGraph(EntitySaveGraph objectGraph){
  Object parentEntity=objectGraph.getParentEntity();
  EntityMetadata metadata=getMetadata(objectGraph.getParentClass());
  List<EntitySaveGraph> relationGraphs=null;
  if (objectGraph.isIsswapped() && !metadata.getRelations().isEmpty() && !objectGraph.getChildClass().equals(objectGraph.getParentClass())&& parentEntity != null) {
    relationGraphs=getGraph(parentEntity,metadata);
    for (    EntitySaveGraph g : relationGraphs) {
      if (!(objectGraph.getChildClass().equals(g.getParentClass()) || objectGraph.getChildClass().equals(g.getChildClass()))) {
        saveGraph(g);
      }
    }
  }
  if (parentEntity != null) {
    objectGraph.setParentId(getId(parentEntity,metadata));
    if (getSession().lookup(objectGraph.getParentClass(),objectGraph.getParentId()) == null) {
      Client pClient=getClient(metadata);
      pClient.persist(objectGraph,metadata);
      session.store(objectGraph.getParentId(),objectGraph.getParentEntity());
    }
  }
  Object childEntity=objectGraph.getChildEntity();
  if (objectGraph.getParentEntity() != null && childEntity != null) {
    persistChildEntity(objectGraph,childEntity);
  }
  for (  Relation relation : metadata.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
      String joinTableName=jtMetadata.getJoinTableName();
      Set<String> joinColumns=jtMetadata.getJoinColumns();
      Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
      String joinColumnName=(String)joinColumns.toArray()[0];
      String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
      EntityMetadata relMetadata=getMetadata(relation.getTargetEntity());
      Object child=objectGraph.getChildEntity();
      Client pClient=getClient(metadata);
      pClient.persistJoinTable(joinTableName,joinColumnName,inverseJoinColumnName,relMetadata,objectGraph.getParentId(),child);
    }
  }
}",0.953185658826216
176988,"/** 
 * Removed association entit(ies) from the enclosing entity
 * @param entity
 * @param associationEntity
 * @param field
 * @param setNull
 */
protected void onDetach(Object entity,Object associationEntity,Field field,boolean setNull){
  try {
    if (entity != null) {
      if (entity instanceof Collection<?>) {
        Collection<?> entityCollection=(Collection<?>)entity;
        for (        Object entityObj : entityCollection) {
          PropertyAccessorHelper.set(entityObj,field,setNull || entity == null ? null : Collection.class.isAssignableFrom(field.getType()) ? null : associationEntity.getClass().newInstance());
        }
      }
 else {
        PropertyAccessorHelper.set(entity,field,setNull || associationEntity == null ? null : associationEntity.getClass().newInstance());
      }
    }
  }
 catch (  PropertyAccessException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
}","/** 
 * Removed association entit(ies) from the enclosing entity
 * @param entity
 * @param associationEntity
 * @param field
 * @param setNull
 */
protected void onDetach(Object entity,Object associationEntity,Field field,boolean setNull){
  try {
    if (entity != null) {
      if (entity instanceof Collection<?>) {
        Collection<?> entityCollection=(Collection<?>)entity;
        for (        Object entityObj : entityCollection) {
          if (entityObj != null) {
            PropertyAccessorHelper.set(entityObj,field,setNull || entity == null ? null : Collection.class.isAssignableFrom(field.getType()) ? null : associationEntity.getClass().newInstance());
          }
        }
      }
 else {
        PropertyAccessorHelper.set(entity,field,setNull || associationEntity == null ? null : associationEntity.getClass().newInstance());
      }
    }
  }
 catch (  PropertyAccessException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
}",0.9765213224724484
176989,"@Override public List<?> getResultList(){
  log.info(""String_Node_Str"" + query);
  List results=null;
  try {
    EntityMetadata m=kunderaQuery.getEntityMetadata();
    Client client=persistenceDelegeator.getClient(m);
    List<EntitySaveGraph> graphs=persistenceDelegeator.getGraph(m.getEntityClazz().newInstance(),m);
    Map<Boolean,List<String>> relationHolder=persistenceDelegeator.getRelations(graphs,m.getEntityClazz());
    List<String> relationNames=relationHolder.values().iterator().next();
    boolean isParent=relationHolder.keySet().iterator().next();
    if (relationNames.isEmpty()) {
      results=populateEntities(m,client);
    }
 else {
      results=handleAssociations(m,client,graphs,relationNames,isParent);
    }
  }
 catch (  InstantiationException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e.getMessage());
  }
catch (  IllegalAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e.getMessage());
  }
  return results != null && !results.isEmpty() ? results : null;
}","@Override public List<?> getResultList(){
  log.info(""String_Node_Str"" + query);
  List results=null;
  try {
    EntityMetadata m=kunderaQuery.getEntityMetadata();
    Client client=persistenceDelegeator.getClient(m);
    List<EntitySaveGraph> graphs=persistenceDelegeator.getGraph(m.getEntityClazz().newInstance(),m);
    Map<Boolean,List<String>> relationHolder=persistenceDelegeator.getRelations(graphs,m.getEntityClazz());
    List<String> relationNames=relationHolder.values().iterator().next();
    boolean isParent=relationHolder.keySet().iterator().next();
    if (relationNames.isEmpty() && !m.isRelationViaJoinTable()) {
      results=populateEntities(m,client);
    }
 else {
      results=handleAssociations(m,client,graphs,relationNames,isParent);
    }
  }
 catch (  InstantiationException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e.getMessage());
  }
catch (  IllegalAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e.getMessage());
  }
  return results != null && !results.isEmpty() ? results : null;
}",0.986079928154468
176990,"/** 
 * Saves an object graph to persistence stores. An object graph contains a parent entity and one or more child entities at a time. There are other attributes too that represent their relationship. 
 * @param objectGraph the object graph
 */
private void saveGraph(EntitySaveGraph objectGraph){
  Object parentEntity=objectGraph.getParentEntity();
  EntityMetadata metadata=getMetadata(objectGraph.getParentClass());
  List<EntitySaveGraph> relationGraphs=null;
  if (objectGraph.isIsswapped() && !metadata.getRelations().isEmpty() && !objectGraph.getChildClass().equals(objectGraph.getParentClass())) {
    relationGraphs=getGraph(parentEntity,metadata);
    for (    EntitySaveGraph g : relationGraphs) {
      if (!(objectGraph.getChildClass().equals(g.getParentClass()) || objectGraph.getChildClass().equals(g.getChildClass()))) {
        saveGraph(g);
      }
    }
  }
  if (parentEntity != null) {
    objectGraph.setParentId(getId(parentEntity,metadata));
    Client pClient=getClient(metadata);
    pClient.persist(objectGraph,metadata);
    session.store(objectGraph.getParentId(),objectGraph.getParentEntity());
  }
  Object childEntity=objectGraph.getChildEntity();
  if (objectGraph.getParentEntity() != null && childEntity != null) {
    persistChildEntity(objectGraph,childEntity);
  }
  for (  Relation relation : metadata.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
      String joinTableName=jtMetadata.getJoinTableName();
      Set<String> joinColumns=jtMetadata.getJoinColumns();
      Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
      String joinColumnName=(String)joinColumns.toArray()[0];
      String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
      EntityMetadata relMetadata=getMetadata(objectGraph.getChildClass());
      Client pClient=getClient(metadata);
      pClient.persistJoinTable(joinTableName,joinColumnName,inverseJoinColumnName,relMetadata,objectGraph);
    }
  }
}","/** 
 * Saves an object graph to persistence stores. An object graph contains a parent entity and one or more child entities at a time. There are other attributes too that represent their relationship. 
 * @param objectGraph the object graph
 */
private void saveGraph(EntitySaveGraph objectGraph){
  Object parentEntity=objectGraph.getParentEntity();
  EntityMetadata metadata=getMetadata(objectGraph.getParentClass());
  List<EntitySaveGraph> relationGraphs=null;
  if (objectGraph.isIsswapped() && !metadata.getRelations().isEmpty() && !objectGraph.getChildClass().equals(objectGraph.getParentClass())) {
    relationGraphs=getGraph(parentEntity,metadata);
    for (    EntitySaveGraph g : relationGraphs) {
      if (!(objectGraph.getChildClass().equals(g.getParentClass()) || objectGraph.getChildClass().equals(g.getChildClass()))) {
        saveGraph(g);
      }
    }
  }
  if (parentEntity != null) {
    objectGraph.setParentId(getId(parentEntity,metadata));
    if (getSession().lookup(objectGraph.getParentClass(),objectGraph.getParentId()) == null) {
      Client pClient=getClient(metadata);
      pClient.persist(objectGraph,metadata);
      session.store(objectGraph.getParentId(),objectGraph.getParentEntity());
    }
  }
  Object childEntity=objectGraph.getChildEntity();
  if (objectGraph.getParentEntity() != null && childEntity != null) {
    persistChildEntity(objectGraph,childEntity);
  }
  for (  Relation relation : metadata.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
      String joinTableName=jtMetadata.getJoinTableName();
      Set<String> joinColumns=jtMetadata.getJoinColumns();
      Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
      String joinColumnName=(String)joinColumns.toArray()[0];
      String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
      EntityMetadata relMetadata=getMetadata(objectGraph.getChildClass());
      Client pClient=getClient(metadata);
      pClient.persistJoinTable(joinTableName,joinColumnName,inverseJoinColumnName,relMetadata,objectGraph);
    }
  }
}",0.9677110739057642
176991,"@Override public EnhanceEntity findById(Object primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  try {
    Object o=client.find(m.getEntityClazz(),m,primaryKey,relationNames);
    return o instanceof EnhanceEntity ? (EnhanceEntity)o : new EnhanceEntity(o,getId(o,m),null);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new PersistenceException(e.getMessage());
  }
}","@Override public EnhanceEntity findById(Object primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  try {
    Object o=client.find(m.getEntityClazz(),m,primaryKey,relationNames);
    if (o == null) {
      return null;
    }
 else {
      return o instanceof EnhanceEntity ? (EnhanceEntity)o : new EnhanceEntity(o,getId(o,m),null);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new PersistenceException(e.getMessage());
  }
}",0.8881278538812786
176992,"public List<Object> find(String colName,String colValue,EntityMetadata m){
  String tableName=m.getTableName();
  String aliasName=""String_Node_Str"" + tableName;
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(tableName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(colName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(colValue);
  Session s=getSessionInstance();
  s.beginTransaction();
  SQLQuery q=s.createSQLQuery(queryBuilder.toString()).addEntity(m.getEntityClazz());
  return q.list();
}","public List<Object> find(String colName,String colValue,EntityMetadata m){
  String tableName=m.getTableName();
  String aliasName=""String_Node_Str"" + tableName;
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(tableName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(colName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(colValue);
  queryBuilder.append(""String_Node_Str"");
  Session s=getSessionInstance();
  s.beginTransaction();
  SQLQuery q=s.createSQLQuery(queryBuilder.toString()).addEntity(m.getEntityClazz());
  return q.list();
}",0.9482758620689656
176993,"/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getIdColumn().getName());
  for (  String column : entityMetadata.getColumnFieldNames()) {
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(column);
  }
  List<EmbeddedColumn> embeddedColumns=entityMetadata.getEmbeddedColumnsAsList();
  for (  EmbeddedColumn embeddedCol : embeddedColumns) {
    for (    Column column : embeddedCol.getColumns()) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(column.getName());
    }
  }
  for (  String relation : relations) {
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(relation);
  }
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        String fieldName=getColumnName(clause.getProperty());
        boolean isString=isStringProperty(entityMetadata,fieldName);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),clause.getProperty().substring(0,clause.getProperty().indexOf(""String_Node_Str"")),aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        appendStringPrefix(queryBuilder,isString);
        queryBuilder.append(clause.getValue());
        appendStringPrefix(queryBuilder,isString);
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(entityMetadata.getIdColumn().getName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    Column col=entityMetadata.getIdColumn();
    boolean isString=col.getField().getType().isAssignableFrom(String.class);
    for (    String key : primaryKeys) {
      appendStringPrefix(queryBuilder,isString);
      queryBuilder.append(key);
      appendStringPrefix(queryBuilder,isString);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}","/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getIdColumn().getName());
  for (  String column : entityMetadata.getColumnFieldNames()) {
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(column);
  }
  List<EmbeddedColumn> embeddedColumns=entityMetadata.getEmbeddedColumnsAsList();
  for (  EmbeddedColumn embeddedCol : embeddedColumns) {
    for (    Column column : embeddedCol.getColumns()) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(column.getName());
    }
  }
  for (  String relation : relations) {
    if (!entityMetadata.getIdColumn().getName().equalsIgnoreCase(relation)) {
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(aliasName);
      queryBuilder.append(""String_Node_Str"");
      queryBuilder.append(relation);
    }
  }
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        String fieldName=getColumnName(clause.getProperty());
        boolean isString=isStringProperty(entityMetadata,fieldName);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),clause.getProperty().substring(0,clause.getProperty().indexOf(""String_Node_Str"")),aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        appendStringPrefix(queryBuilder,isString);
        queryBuilder.append(clause.getValue());
        appendStringPrefix(queryBuilder,isString);
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(entityMetadata.getIdColumn().getName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    Column col=entityMetadata.getIdColumn();
    boolean isString=col.getField().getType().isAssignableFrom(String.class);
    for (    String key : primaryKeys) {
      appendStringPrefix(queryBuilder,isString);
      queryBuilder.append(key);
      appendStringPrefix(queryBuilder,isString);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}",0.9535153980244044
176994,"/** 
 * Populate enhance entities.
 * @param m the m
 * @param relationNames the relation names
 * @param client the client
 * @param sqlQuery the sql query
 * @return the list
 */
private List<EnhanceEntity> populateEnhanceEntities(EntityMetadata m,List<String> relationNames,Client client,String sqlQuery){
  List<EnhanceEntity> ls=null;
  List result=((HibernateClient)client).find(sqlQuery,relationNames,m.getEntityClazz());
  try {
    if (!result.isEmpty()) {
      ls=new ArrayList<EnhanceEntity>(result.size());
      for (      Object o : result) {
        Class clazz=m.getEntityClazz();
        Object entity=clazz.newInstance();
        if (!o.getClass().isAssignableFrom(clazz)) {
          entity=((Object[])o)[0];
        }
        EnhanceEntity e=new EnhanceEntity(entity,getId(entity,m),populateRelations(relationNames,(Object[])o));
        ls.add(e);
      }
    }
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  return ls;
}","/** 
 * Populate enhance entities.
 * @param m the m
 * @param relationNames the relation names
 * @param client the client
 * @param sqlQuery the sql query
 * @return the list
 */
private List<EnhanceEntity> populateEnhanceEntities(EntityMetadata m,List<String> relationNames,Client client,String sqlQuery){
  List<EnhanceEntity> ls=null;
  List result=((HibernateClient)client).find(sqlQuery,relationNames,m);
  try {
    if (!result.isEmpty()) {
      ls=new ArrayList<EnhanceEntity>(result.size());
      for (      Object o : result) {
        Class clazz=m.getEntityClazz();
        Object entity=clazz.newInstance();
        boolean noRelationFound=true;
        if (!o.getClass().isAssignableFrom(clazz)) {
          entity=((Object[])o)[0];
          noRelationFound=false;
        }
 else {
          entity=o;
        }
        EnhanceEntity e=new EnhanceEntity(entity,getId(entity,m),noRelationFound ? null : populateRelations(relationNames,(Object[])o));
        ls.add(e);
      }
    }
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  return ls;
}",0.9309556470050298
176995,"@Override public List<EnhanceEntity> populateRelation(EntityMetadata m,List<String> relationNames,boolean isParent,Client client){
  List<EnhanceEntity> ls=null;
  if (!isParent) {
    String sqlQuery=null;
    if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
      sqlQuery=getSqlQueryFromJPA(m,relationNames,null);
    }
 else {
      Set<String> rSet=fetchDataFromLucene(client);
      if (rSet != null && !rSet.isEmpty()) {
        filter=""String_Node_Str"";
      }
      sqlQuery=getSqlQueryFromJPA(m,relationNames,rSet);
    }
    ls=populateEnhanceEntities(m,relationNames,client,sqlQuery);
  }
 else {
    if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
      try {
        List entities=((HibernateClient)client).find(jpaQuery,new ArrayList<String>(),m.getEntityClazz());
        ls=new ArrayList<EnhanceEntity>(entities.size());
        transform(m,ls,entities);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + e.getMessage());
        throw new QueryHandlerException(e.getMessage());
      }
    }
 else {
      ls=onAssociationUsingLucene(m,client,ls);
    }
  }
  return ls;
}","@Override public List<EnhanceEntity> populateRelation(EntityMetadata m,List<String> relationNames,boolean isParent,Client client){
  List<EnhanceEntity> ls=null;
  if (!isParent) {
    String sqlQuery=null;
    if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
      sqlQuery=getSqlQueryFromJPA(m,relationNames,null);
    }
 else {
      Set<String> rSet=fetchDataFromLucene(client);
      if (rSet != null && !rSet.isEmpty()) {
        filter=""String_Node_Str"";
      }
      sqlQuery=getSqlQueryFromJPA(m,relationNames,rSet);
    }
    ls=populateEnhanceEntities(m,relationNames,client,sqlQuery);
  }
 else {
    if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
      try {
        List entities=((HibernateClient)client).find(jpaQuery,new ArrayList<String>(),m);
        ls=new ArrayList<EnhanceEntity>(entities.size());
        transform(m,ls,entities);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + e.getMessage());
        throw new QueryHandlerException(e.getMessage());
      }
    }
 else {
      ls=onAssociationUsingLucene(m,client,ls);
    }
  }
  return ls;
}",0.9925731760594146
176996,"protected List<Object> populateEntities(EntityMetadata m,Client client){
  log.debug(""String_Node_Str"");
  List<Object> result=null;
  ((RDBMSEntityReader)getReader()).setConditions(getKunderaQuery().getFilterClauseQueue());
  ((RDBMSEntityReader)getReader()).setFilter(getKunderaQuery().getFilter());
  try {
    if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
      List<String> relations=new ArrayList<String>();
      List r=((HibernateClient)client).find(((RDBMSEntityReader)getReader()).getSqlQueryFromJPA(m,relations,null),relations,m.getEntityClazz());
      result=new ArrayList<Object>(r.size());
      for (      Object o : r) {
        Class clazz=m.getEntityClazz();
        if (!o.getClass().isAssignableFrom(m.getEntityClazz())) {
          o=((Object[])o)[0];
        }
        result.add(o);
      }
    }
 else {
      result=populateUsingLucene(m,client,result);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e.getMessage());
  }
  if (result != null && !result.isEmpty()) {
    persistenceDelegeator.store(result,m);
  }
  return result;
}","protected List<Object> populateEntities(EntityMetadata m,Client client){
  log.debug(""String_Node_Str"");
  List<Object> result=null;
  ((RDBMSEntityReader)getReader()).setConditions(getKunderaQuery().getFilterClauseQueue());
  ((RDBMSEntityReader)getReader()).setFilter(getKunderaQuery().getFilter());
  try {
    if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
      List<String> relations=new ArrayList<String>();
      List r=((HibernateClient)client).find(((RDBMSEntityReader)getReader()).getSqlQueryFromJPA(m,relations,null),relations,m);
      result=new ArrayList<Object>(r.size());
      for (      Object o : r) {
        Class clazz=m.getEntityClazz();
        if (!o.getClass().isAssignableFrom(m.getEntityClazz())) {
          o=((Object[])o)[0];
        }
        result.add(o);
      }
    }
 else {
      result=populateUsingLucene(m,client,result);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e.getMessage());
  }
  if (result != null && !result.isEmpty()) {
    persistenceDelegeator.store(result,m);
  }
  return result;
}",0.99257965953732
176997,"/** 
 * Prepare document.
 * @param metadata the metadata
 * @param object the object
 * @param embeddedColumnName the super column name
 * @return the document
 */
protected Document prepareDocumentForSuperColumn(EntityMetadata metadata,Object object,String embeddedColumnName,String parentId,Class<?> clazz){
  Document currentDoc;
  currentDoc=new Document();
  addEntityClassToDocument(metadata,object,currentDoc);
  addSuperColumnNameToDocument(embeddedColumnName,currentDoc);
  return currentDoc;
}","/** 
 * Prepare document.
 * @param metadata the metadata
 * @param object the object
 * @param embeddedColumnName the super column name
 * @return the document
 */
protected Document prepareDocumentForSuperColumn(EntityMetadata metadata,Object object,String embeddedColumnName,String parentId,Class<?> clazz){
  Document currentDoc;
  currentDoc=new Document();
  addEntityClassToDocument(metadata,object,currentDoc);
  addSuperColumnNameToDocument(embeddedColumnName,currentDoc);
  indexParentKey(parentId,currentDoc,clazz);
  return currentDoc;
}",0.9249762583095916
176998,"/** 
 * Compute graph.
 * @param e the e
 * @param graphs the graphs
 * @return the object
 * @throws Exception the exception
 */
public Object computeGraph(EnhanceEntity e,List<EntitySaveGraph> graphs,Map<Object,Object> collectionHolder,Client client,EntityMetadata m,PersistenceDelegator persistenceDelegeator) throws Exception {
  Client childClient=null;
  Class<?> childClazz=null;
  EntityMetadata childMetadata=null;
  for (  EntitySaveGraph g : graphs) {
    Relation relation=m.getRelation(g.getProperty().getName());
    if (relation.isRelatedViaJoinTable()) {
      computeJoinTableRelations(e,client,m,g,persistenceDelegeator,relation);
    }
 else {
      if (e.getEntity().getClass().equals(g.getChildClass())) {
        String relationName=g.getfKeyName();
        Object relationalValue=e.getRelations().get(relationName);
        childClazz=g.getParentClass();
        childMetadata=persistenceDelegeator.getMetadata(childClazz);
        Field f=g.getProperty();
        if (!collectionHolder.containsKey(relationalValue)) {
          childClient=persistenceDelegeator.getClient(childMetadata);
          Object child=null;
          if (childClazz.equals(e.getEntity().getClass())) {
            child=childClient.find(childClazz,childMetadata,relationalValue.toString(),null);
          }
 else {
            child=persistenceDelegeator.find(childClazz,relationalValue.toString(),g);
          }
          collectionHolder.put(relationalValue,child);
        }
        onBiDirection(e,client,g,m,collectionHolder.get(relationalValue),childMetadata,childClient);
        List<Object> collection=new ArrayList<Object>(1);
        collection.add(collectionHolder.get(relationalValue));
        PropertyAccessorHelper.set(e.getEntity(),f,PropertyAccessorHelper.isCollection(f.getType()) ? getFieldInstance(collection,f) : collection.get(0));
      }
 else {
        childClazz=g.getChildClass();
        childMetadata=persistenceDelegeator.getMetadata(childClazz);
        childClient=persistenceDelegeator.getClient(childMetadata);
        String relationName=g.getfKeyName();
        String relationalValue=e.getEntityId();
        Field f=g.getProperty();
        if (!collectionHolder.containsKey(relationalValue)) {
          List<Object> childs=null;
          if (MetadataUtils.useSecondryIndex(childClient.getPersistenceUnit())) {
            childs=childClient.find(relationName,relationalValue,childMetadata);
          }
 else {
            if (g.isSharedPrimaryKey()) {
              childs=new ArrayList();
              childs.add(childClazz.equals(e.getEntity().getClass()) ? childs.add(childClient.find(childClazz,childMetadata,e.getEntityId(),null)) : persistenceDelegeator.find(childClazz,relationalValue.toString()));
            }
 else {
              String query=getQuery(DocumentIndexer.PARENT_ID_CLASS,e.getEntity().getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,e.getEntityId());
              Map<String,String> results=childClient.getIndexManager().search(query);
              Set<String> rsSet=new HashSet<String>(results.values());
              if (childClazz.equals(e.getEntity().getClass())) {
                childs=(List<Object>)childClient.findAll(childClazz,rsSet.toArray(new String[]{}));
              }
 else {
                childs=(List<Object>)persistenceDelegeator.find(childClazz,g,rsSet.toArray(new String[]{}));
              }
            }
          }
          collectionHolder.put(relationalValue,childs);
          if (childs != null) {
            for (            Object child : childs) {
              onBiDirection(e,client,g,m,child,childMetadata,childClient);
            }
          }
        }
        onReflect(e.getEntity(),f,(List)collectionHolder.get(relationalValue));
      }
    }
  }
  return e.getEntity();
}","/** 
 * Compute graph.
 * @param e the e
 * @param graphs the graphs
 * @return the object
 * @throws Exception the exception
 */
public Object computeGraph(EnhanceEntity e,List<EntitySaveGraph> graphs,Map<Object,Object> collectionHolder,Client client,EntityMetadata m,PersistenceDelegator persistenceDelegeator) throws Exception {
  Client childClient=null;
  Class<?> childClazz=null;
  EntityMetadata childMetadata=null;
  for (  EntitySaveGraph g : graphs) {
    Relation relation=m.getRelation(g.getProperty().getName());
    if (relation.isRelatedViaJoinTable()) {
      computeJoinTableRelations(e,client,m,g,persistenceDelegeator,relation);
    }
 else {
      if (e.getEntity().getClass().equals(g.getChildClass())) {
        String relationName=g.getfKeyName();
        Object relationalValue=e.getRelations().get(relationName);
        childClazz=g.getParentClass();
        childMetadata=persistenceDelegeator.getMetadata(childClazz);
        Field f=g.getProperty();
        if (!collectionHolder.containsKey(relationalValue)) {
          childClient=persistenceDelegeator.getClient(childMetadata);
          Object child=null;
          if (childClazz.equals(e.getEntity().getClass())) {
            child=childClient.find(childClazz,childMetadata,relationalValue.toString(),null);
          }
 else {
            child=persistenceDelegeator.find(childClazz,relationalValue.toString(),g);
          }
          collectionHolder.put(relationalValue,child);
        }
        onBiDirection(e,client,g,m,collectionHolder.get(relationalValue),childMetadata,childClient);
        List<Object> collection=new ArrayList<Object>(1);
        collection.add(collectionHolder.get(relationalValue));
        PropertyAccessorHelper.set(e.getEntity(),f,PropertyAccessorHelper.isCollection(f.getType()) ? getFieldInstance(collection,f) : collection.get(0));
      }
 else {
        childClazz=g.getChildClass();
        childMetadata=persistenceDelegeator.getMetadata(childClazz);
        childClient=persistenceDelegeator.getClient(childMetadata);
        String relationName=g.getfKeyName();
        String relationalValue=e.getEntityId();
        Field f=g.getProperty();
        if (!collectionHolder.containsKey(relationalValue)) {
          List<Object> childs=null;
          if (MetadataUtils.useSecondryIndex(childClient.getPersistenceUnit())) {
            childs=childClient.find(relationName,relationalValue,childMetadata);
          }
 else {
            if (g.isSharedPrimaryKey()) {
              childs=new ArrayList();
              childs.add(childClazz.equals(e.getEntity().getClass()) ? childs.add(childClient.find(childClazz,childMetadata,e.getEntityId(),null)) : persistenceDelegeator.find(childClazz,relationalValue.toString()));
            }
 else {
              String query=getQuery(DocumentIndexer.PARENT_ID_CLASS,e.getEntity().getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,e.getEntityId(),childClazz.getCanonicalName().toLowerCase());
              Map<String,String> results=childClient.getIndexManager().search(query);
              Set<String> rsSet=new HashSet<String>(results.values());
              if (childClazz.equals(e.getEntity().getClass())) {
                childs=(List<Object>)childClient.findAll(childClazz,rsSet.toArray(new String[]{}));
              }
 else {
                childs=(List<Object>)persistenceDelegeator.find(childClazz,g,rsSet.toArray(new String[]{}));
              }
            }
          }
          collectionHolder.put(relationalValue,childs);
          if (childs != null) {
            for (            Object child : childs) {
              onBiDirection(e,client,g,m,child,childMetadata,childClient);
            }
          }
        }
        onReflect(e.getEntity(),f,(List)collectionHolder.get(relationalValue));
      }
    }
  }
  return e.getEntity();
}",0.9942782834850457
176999,"/** 
 * On bi direction.
 * @param entity the entity
 * @param objectGraph the object graph
 * @param client the client
 * @param rowId the row id
 * @param entityClass the entity class
 * @param chids the chids
 * @param childMetadata the child metadata
 * @param childClient the child client
 * @throws Exception the exception
 */
private void onBiDirection(EnhanceEntity e,Client client,EntitySaveGraph objectGraph,EntityMetadata origMetadata,Object child,EntityMetadata childMetadata,Client childClient) throws Exception {
  if (!objectGraph.isUniDirectional()) {
    List obj=new ArrayList();
    Relation relation=childMetadata.getRelation(objectGraph.getBidirectionalProperty().getName());
    if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
      String query=null;
      try {
        String id=PropertyAccessorHelper.getId(child,childMetadata);
        List<Object> results=null;
        if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
          results=client.find(objectGraph.getfKeyName(),id,origMetadata);
        }
 else {
          Map<String,String> keys=null;
          if (relation.getType().equals(ForeignKey.ONE_TO_MANY)) {
            query=getQuery(DocumentIndexer.PARENT_ID_CLASS,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,id);
            keys=client.getIndexManager().search(query);
          }
 else {
            query=getQuery(DocumentIndexer.ENTITY_CLASS_FIELD,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,id);
            keys=client.getIndexManager().fetchRelation(query);
          }
          Set<String> uqSet=new HashSet<String>(keys.values());
          results=new ArrayList<Object>();
          for (          String rowKey : uqSet) {
            results.add(client.find(e.getEntity().getClass(),origMetadata,rowKey,null));
          }
        }
        if (results != null) {
          obj.addAll(results);
        }
      }
 catch (      PropertyAccessException ex) {
        log.error(""String_Node_Str"" + ex.getMessage());
        throw new QueryHandlerException(ex.getMessage());
      }
      for (      Object o : obj) {
        Field f=objectGraph.getProperty();
        if (PropertyAccessorHelper.isCollection(f.getType())) {
          List l=new ArrayList();
          l.add(child);
          Object oo=getFieldInstance(l,f);
          PropertyAccessorHelper.set(o,f,oo);
        }
 else {
          PropertyAccessorHelper.set(o,f,child);
        }
      }
    }
 else {
      obj.add(e.getEntity());
    }
    try {
      PropertyAccessorHelper.set(child,objectGraph.getBidirectionalProperty(),PropertyAccessorHelper.isCollection(objectGraph.getBidirectionalProperty().getType()) ? getFieldInstance(obj,objectGraph.getBidirectionalProperty()) : e.getEntity());
    }
 catch (    PropertyAccessException ex) {
      log.error(""String_Node_Str"" + ex.getMessage());
      throw new QueryHandlerException(ex.getMessage());
    }
  }
}","/** 
 * On bi direction.
 * @param entity the entity
 * @param objectGraph the object graph
 * @param client the client
 * @param rowId the row id
 * @param entityClass the entity class
 * @param chids the chids
 * @param childMetadata the child metadata
 * @param childClient the child client
 * @throws Exception the exception
 */
private void onBiDirection(EnhanceEntity e,Client client,EntitySaveGraph objectGraph,EntityMetadata origMetadata,Object child,EntityMetadata childMetadata,Client childClient) throws Exception {
  if (!objectGraph.isUniDirectional() && child != null) {
    List obj=new ArrayList();
    Relation relation=childMetadata.getRelation(objectGraph.getBidirectionalProperty().getName());
    if (relation.getType().equals(ForeignKey.ONE_TO_MANY) || relation.getType().equals(ForeignKey.MANY_TO_MANY)) {
      String query=null;
      try {
        String id=PropertyAccessorHelper.getId(child,childMetadata);
        List<Object> results=null;
        if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
          results=client.find(objectGraph.getfKeyName(),id,origMetadata);
        }
 else {
          Map<String,String> keys=null;
          if (relation.getType().equals(ForeignKey.ONE_TO_MANY)) {
            query=getQuery(DocumentIndexer.PARENT_ID_CLASS,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,id,e.getEntity().getClass().getCanonicalName().toLowerCase());
            keys=client.getIndexManager().search(query);
          }
 else {
            query=getQuery(DocumentIndexer.ENTITY_CLASS_FIELD,child.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,id,null);
            keys=client.getIndexManager().fetchRelation(query);
          }
          Set<String> uqSet=new HashSet<String>(keys.values());
          results=new ArrayList<Object>();
          for (          String rowKey : uqSet) {
            results.add(client.find(e.getEntity().getClass(),origMetadata,rowKey,null));
          }
        }
        if (results != null) {
          obj.addAll(results);
        }
      }
 catch (      PropertyAccessException ex) {
        log.error(""String_Node_Str"" + ex.getMessage());
        throw new QueryHandlerException(ex.getMessage());
      }
      for (      Object o : obj) {
        Field f=objectGraph.getProperty();
        if (PropertyAccessorHelper.isCollection(f.getType())) {
          List l=new ArrayList();
          l.add(child);
          Object oo=getFieldInstance(l,f);
          PropertyAccessorHelper.set(o,f,oo);
        }
 else {
          PropertyAccessorHelper.set(o,f,child);
        }
      }
    }
 else {
      obj.add(e.getEntity());
    }
    try {
      PropertyAccessorHelper.set(child,objectGraph.getBidirectionalProperty(),PropertyAccessorHelper.isCollection(objectGraph.getBidirectionalProperty().getType()) ? getFieldInstance(obj,objectGraph.getBidirectionalProperty()) : e.getEntity());
    }
 catch (    PropertyAccessException ex) {
      log.error(""String_Node_Str"" + ex.getMessage());
      throw new QueryHandlerException(ex.getMessage());
    }
  }
}",0.9870003249918752
177000,"/** 
 * Returns lucene based query.
 * @param clazzFieldName lucene field name for class
 * @param clazzName class name
 * @param idFieldName lucene id field name
 * @param idFieldValue lucene id field value
 * @return query lucene query.
 */
protected static String getQuery(String clazzFieldName,String clazzName,String idFieldName,String idFieldValue){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(clazzFieldName);
  sb.append(""String_Node_Str"");
  sb.append(clazzName);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(idFieldName);
  sb.append(""String_Node_Str"");
  sb.append(idFieldValue);
  return sb.toString();
}","/** 
 * Returns lucene based query.
 * @param clazzFieldName lucene field name for class
 * @param clazzName class name
 * @param idFieldName lucene id field name
 * @param idFieldValue lucene id field value
 * @return query lucene query.
 */
protected static String getQuery(String clazzFieldName,String clazzName,String idFieldName,String idFieldValue,String entityClazz){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(clazzFieldName);
  sb.append(""String_Node_Str"");
  sb.append(clazzName);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(idFieldName);
  sb.append(""String_Node_Str"");
  sb.append(idFieldValue);
  if (entityClazz != null) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(DocumentIndexer.ENTITY_CLASS_FIELD);
    sb.append(""String_Node_Str"");
    sb.append(entityClazz);
  }
  return sb.toString();
}",0.8239033693579149
